import { OnInit, OnChanges, EventEmitter } from '@angular/core';
import { Schema, EntityType, EntitySet } from '../schema';
import { TreeNode, TreeTableComponent } from '@farris/ui-treetable';
import { CurrentNode } from '../currentNode';
import { InjectedEntity } from '../injected-entity';
import { NewEntityType, NewSchema, NewEntitySet } from '../i18n/NewSchema';
export declare class ExpressionEntityGridComponent implements OnInit, OnChanges {
    private localeId;
    private localePipe;
    currentNode: CurrentNode;
    entities: TreeNode[];
    currentSchemaName: string;
    currentNewSchemaName: string;
    currentParent: string;
    schema: Map<string, Schema>;
    newSchemaMap: Map<string, NewSchema>;
    injectedEntities: InjectedEntity[];
    selectentitychange: EventEmitter<{}>;
    dbclickInsert: EventEmitter<{}>;
    tt: TreeTableComponent;
    cols: any[];
    treedata: TreeNode[];
    constructor();
    ngOnInit(): void;
    selectRowChange($event: any): void;
    dblClick($event: any): void;
    ngOnChanges(): void;
    selectParentString(node: any): any;
    OninitSchemaEntity(): void;
    ConvertEntitySet(entitySet: EntitySet, schema: Schema, navigatorMap: any): TreeNode;
    ConvertEntityType(entityType: EntityType, schema: Schema, navigatorMap: any): TreeNode;
    private strContain;
    /**
     * @description 初始化NewSchema
     */
    onInitNewSchema(): void;
    /**
     * @description 转换实体类型(EntityType)
     * @param entityType
     * @param schema
     * @param navigatorMap1
     * @returns
     */
    convertNewEntityType(entityType: NewEntityType, schema: NewSchema, navigatorMap1: any): TreeNode;
    /**
     * @description 转换实体集(EntitySet)
     * @param set
     * @param schema
     * @param navigatorMap1
     * @returns
     */
    convertNewEntitySet(set: NewEntitySet, schema: NewSchema, navigatorMap1: any): TreeNode;
    searchByFilter($event: any): void;
    searchByFilter1(searchValue: string, node: any): void;
    filter1(node: TreeNode): void;
    filter($event: any): void;
}
