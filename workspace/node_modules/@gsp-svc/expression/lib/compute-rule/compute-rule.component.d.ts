import { OnInit, EventEmitter, Injector, ComponentFactoryResolver } from '@angular/core';
import { ConditionRule } from './entity/conditionrule';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { ExpressionContextEntity } from '../expression-context-entity';
import { InjectedEntity } from '../injected-entity';
import { Schema, EntityType, EntitySet } from '../schema';
export declare class ComputeRuleComponent implements OnInit {
    private msgSer;
    private notifyService;
    private injector;
    private modalService;
    private compFactRes;
    constructor(msgSer: MessagerService, notifyService: NotifyService, injector: Injector, modalService: BsModalService, compFactRes: ComponentFactoryResolver);
    expr: string;
    result: EventEmitter<string>;
    closeModalEmitter: EventEmitter<any>;
    contextEntity: ExpressionContextEntity;
    conditions: ConditionRule[];
    advancedModalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    title: string;
    height: number;
    width: number;
    LeftBracketData: string[];
    RighttBracketData: string[];
    columnSizeData: number[];
    currentCondition: {
        index: number;
        condition: ConditionRule;
    };
    operators: {
        label: string;
        value: string;
    }[];
    relationData: {
        label: string;
        value: string;
    }[];
    private notifies;
    entities: any[];
    propertyList: any;
    ngOnInit(): void;
    private newItem;
    insert(index: number): void;
    remove(index: number): void;
    onAddFilter(): void;
    onClear(): void;
    toTop(): void;
    toUp(): void;
    toDown(): void;
    toBottom(): void;
    private changeConditionList;
    selected($event: any): void;
    /**打开高级表达式 */
    openAdvancedExpression(): void;
    openAdvancedExpr(): Promise<{}>;
    /**确认 */
    confirm(): void;
    /**重置 */
    reset(): void;
    /**取消 */
    cancle(): void;
    isSelected($event: number): boolean;
    /***转化为表达式串 */
    private convertExpr;
    OninitSchemaEntity(injectedEntities: InjectedEntity[], schema: Map<string, Schema>): void;
    ConvertEntitySet(entitySet: EntitySet, schema: Schema, navigatorMap: any): void;
    ConvertEntityType(entityType: EntityType, parentId: string, schema: Schema, navigatorMap: any, layer: number, parentPath: string, pathNum: number): any;
    private getPath;
}
