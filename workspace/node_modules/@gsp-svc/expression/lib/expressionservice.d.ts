import { Injector, ApplicationRef, ComponentFactoryResolver } from '@angular/core';
import { ExprEditMode } from './expression-type';
import { ExpressionContextEntity } from './expression-context-entity';
import { Adapter } from './adapter';
import { VarEntity } from './varentity';
import { FuncEntity } from './funcentity';
import { Schema } from './schema';
import { GspCommonDataType, GSPCommonObject } from '@gsp-bef/gsp-cm-metadata';
import { SmartHelpEntity } from './smartHelpEntity';
import { InjectedType } from './injected-type';
import { HttpClient } from "@angular/common/http";
import { NewSchema } from './i18n/NewSchema';
/**
 * 表达式对外提供服务类
 * 功能：提供打开、预置等接口
 */
export declare class ExpressionService {
    private injector;
    private applicationRef;
    private compFactRes;
    private http;
    exprEditMode: ExprEditMode;
    simpleModalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    exprEntity: ExpressionContextEntity;
    adapter: Adapter;
    private modalService;
    allFunctions: any[];
    private localeId;
    private localePipe;
    private ExpressionTitle;
    private ExpressionSave;
    private ExpressionCancel;
    constructor(injector: Injector, applicationRef: ApplicationRef, compFactRes: ComponentFactoryResolver, http: HttpClient);
    /**
      * 创建表达式
      * 功能：打开表达式窗口，then方法获得表达式结果
      */
    buildExpression(): Promise<{}>;
    /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     */
    setEditPattern(exprEditMode: ExprEditMode): void;
    /**
     * 添加上下文变量方法
     * @param contextEntity 上下文变量实体
     */
    addContext(contextEntity: VarEntity): void;
    /**
     * 添加系统变量方法
     * @param sessionEntity 系统变量实体
     */
    addSession(sessionEntity: VarEntity): void;
    /**
     * 添加函数方法
     * @param funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     */
    addFunc(funcEntity: FuncEntity): void;
    /***
     * 添加函数列表
     * @param funcList 函数json列表
     */
    addFuncs(funcList: string): void;
    /**
     * 预置表达式
     * @param text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     */
    addExpressionText(text: string): void;
    /**
     * 预置Schema
     * @param name schema名称
     * @param schema schema实体类
     */
    addSchema(name: string, schema: Schema): void;
    /**
     * 注入实体
     * @param name 注入实体名,默认为typeNameInSchema
     * @param schemaName 注入实体所在的schema名，默认为CommonObject
     * @param typeNameInSchema 注入实体在schema中的名称
     * @param injectedType 注入实体的类型，默认为EntityType
     */
    addInjectedEntity(name: string, schemaName: string, typeNameInSchema: string, injectedType?: InjectedType): void;
    /**
     * 预置CDT
     * @param gspCDTs CDT集合
     */
    addCDT(gspCDTs: GspCommonDataType[]): void;
    /**
     * 预置CO
     * @param commonObject CO集合(todo)
     */
    addCommonObject(commonObject: GSPCommonObject): void;
    /**
     * 预置帮助
     * @param shEntity 帮助描述实体
     */
    addSmartHelpEntity(shEntity: SmartHelpEntity): void;
    addWindowWidth(windowWidth: number): void;
    clearInjectedEntity(): void;
    private GetUnCamelParse;
    private ConvertToUncamel;
    /**
     * @description 添加NewSchema
     * @param name NewSchema的名称
     * @param newSchema NewSchema
     */
    addNewSchema(name: string, newSchema: NewSchema): void;
    /**
     * @description 添加CO的数据，NewSchema
     * @param commonObject
     */
    addCommonObjectOfNewSchema(commonObject: GSPCommonObject): void;
    /**
     * @description 添加UDT类型，NewSchema
     * @param gspCDTs
     */
    addCDTOfNewSchema(gspCDTs: GspCommonDataType[]): void;
}
