import { OnInit, EventEmitter, Injector, OnChanges } from '@angular/core';
import { ExpressionEventService } from '../expression-event-service';
import { FuncEntity } from '../funcentity';
import { VarType } from '../expression-var-grid/vartype';
import { ExpressionContextEntity } from '../expression-context-entity';
import { VarEntity } from '../varentity';
import { Schema } from '../schema';
import { CurrentNode } from '../currentNode';
import { InjectedEntity } from '../injected-entity';
import { SmartHelpEntity } from '../smartHelpEntity';
import { GspCommonDataType, GSPCommonObject } from '@gsp-bef/gsp-cm-metadata';
import { InjectedType } from '../injected-type';
import { Adapter } from '../adapter';
import { HttpClient } from "@angular/common/http";
import { NewSchema } from '../i18n/NewSchema';
export declare class ExpressioneditorComponent implements OnInit, OnChanges {
    private eventService;
    private injector;
    http: HttpClient;
    private localeId;
    private localePipe;
    private notifyService;
    constructor(eventService: ExpressionEventService, injector: Injector, http: HttpClient);
    Advanced: string;
    String: string;
    Aggregate: string;
    Estimate: string;
    DateTime: string;
    Translate: string;
    Analytical: string;
    Math: string;
    Extend: string;
    Variable: string;
    Entity: string;
    Help: string;
    FunctionDescription: string;
    VarDescription: string;
    CurrentProp: string;
    CurrentChosedProp: string;
    standardFunctions: any[];
    allFunctions: any[];
    deprecatedFunctions: string[];
    currentFuncTabType: string;
    currentVarType: VarType;
    descriptinfo: string;
    keyInfo: string;
    schema: Map<string, Schema>;
    newSchemaMap: Map<string, NewSchema>;
    choseSchemaTableName: CurrentNode;
    expressioninfo: string;
    selectedResource: boolean;
    entitywidth: string;
    adapter: Adapter;
    selectnewfunc: boolean;
    funcExtend: FuncEntity[];
    expressionEntity: ExpressionContextEntity;
    contextEntities: VarEntity[];
    sessionEntities: VarEntity[];
    injectedEntities: InjectedEntity[];
    smartHelp: SmartHelpEntity[];
    text: string;
    isPanel: boolean;
    funcEntities: FuncEntity[];
    gspCDTs: GspCommonDataType[];
    commonObjects: GSPCommonObject[];
    customSchemaName: string;
    customSchema: Schema;
    injectName: string;
    injectSchemaName: string;
    injectNameInSchema: string;
    injectedType: InjectedType;
    customNewSchemaName: string;
    customNewSchema: NewSchema;
    windowWidth: number;
    result: EventEmitter<string>;
    closeModalEmitter: EventEmitter<any>;
    private notifies;
    options: {
        theme: string;
        language: string;
        automaticLayout: boolean;
    };
    code: string;
    ngOnInit(): void;
    ngOnChanges(): void;
    private OninitWindows;
    private OninitPanel;
    onInitHandler($event: any): void;
    onChangeHandler(event: any): void;
    onTouchedHandler($event: any): void;
    /***函数选择tab也切换事件 */
    funcTabChange($event: any): void;
    selectFuncRowChange($event: any): void;
    selectVarRowChange($event: any): void;
    selectVarInfoRowChange($event: any): void;
    selectschemaChange($event: any): void;
    selectentitychange($event: any): void;
    selectschemainfoChange($event: any): void;
    dbclickVarInsert($event: any): void;
    dbclickSchemaInfoInsert($event: any): void;
    dbclickEntityInsert($event: any): void;
    dbclickEntityInfoInsert($event: any): void;
    dbclickSmartHelpInsert($event: any): void;
    /**
     * @description 函数：双击插入          (farris双击事件：调整)
     * @param $event
     * 1：判断是否为Advanced，如果是：直接获取对应的name插入;如果不是：获取对应的name，然后拼接参数
     */
    dbclickInsert($event: any): void;
    /**
     * @description 获取表达式串
     * 保存时，进行语义化-->js的转换
     * 1：封装ExpressionEntity    属性：expr, sexpr
     * 2：判断有无expr；有则使用Antlr4进行解析转换
     *    2.1：Antlr4工具拿到数组Array
     *    2.2：根据数组元素与name的对应，替换为key
     *    2.3：替换后的数组元素拼接出str
     */
    getExprs(): void;
    getExpr(): string;
    reset(): void;
    check(): void;
    help(): void;
    import(): void;
    changeText(textii: string): void;
    changeInjectEntity(injectName: string, injectSchemaName: string, injectNameInSchema: string, injectedType?: InjectedType): void;
    changeCO(commonObjects: GSPCommonObject[]): void;
    changeContextVar(contextEntities: VarEntity[]): void;
    hide(): void;
    onDoubleQuotation(): void;
    onEqual(): void;
    onSparen(): void;
    onBrace(): void;
    onAnd(): void;
    onOr(): void;
    onExclamation(): void;
    onIequal(): void;
    onUnequal(): void;
    onLess(): void;
    onLessequal(): void;
    onMore(): void;
    onMoreequal(): void;
    onPlus(): void;
    onMinus(): void;
    onMultiple(): void;
    onDivision(): void;
    onPercent(): void;
    onAssign(): void;
    onOppose(): void;
}
