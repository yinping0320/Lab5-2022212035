import { Subject } from 'rxjs';
import { GSPElementDataType } from '@gsp-bef/gsp-cm-metadata';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { DataTableModule } from '@farris/ui-datatable';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { ComboService } from '@farris/ui-combo-list';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { assign, pick } from 'lodash-es';
import { SplitterModule } from '@farris/ui-splitter';
import { FarrisTabsModule } from '@farris/ui-tabs';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { DatagridModule } from '@farris/ui-datagrid';
import { DatagridFilterRowModule } from '@farris/ui-datagrid-filter';
import { TreeTableModule } from '@farris/ui-treetable';
import _ from 'lodash';
import { __spread } from 'tslib';
import { DialogsModule } from '@progress/kendo-angular-dialog';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { InputsModule } from '@progress/kendo-angular-inputs';
import { GridModule } from '@progress/kendo-angular-grid';
import { Injectable, Pipe, Inject, LOCALE_ID, Component, Input, Output, EventEmitter, Injector, Optional, ComponentFactoryResolver, InjectionToken, ViewChild, forwardRef, NgZone, NgModule, ApplicationRef } from '@angular/core';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import InputStream from 'antlr4/InputStream';
import CommonTokenStream from 'antlr4/CommonTokenStream';
import JavaScriptLexer from 'JavaScriptLexer';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 自定义的表达式事件服务类
 * 功能：定义表达式内部的事件发布与监听接口
 */
var ExpressionEventService = /** @class */ (function () {
    function ExpressionEventService() {
        // Observable string sources
        this.windowClosed = new Subject();
        // Observable string streams
        this.windowClosed$ = this.windowClosed.asObservable();
        //创建Observable源
        this._expressionsource = new Subject();
        //在光标处插入表达式事件发布与订阅
        this._insertexpression = new Subject();
        this._clearexpression = new Subject();
        //函数选择焦点清除
        this._clearFuncSelect = new Subject();
        //变量选择焦点清除
        this._clearVarSelect = new Subject();
    }
    // Service message commands
    // Service message commands
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.closeWindow = 
    // Service message commands
    /**
     * @return {?}
     */
    function () {
        this.windowClosed.next();
    };
    //定义发布表达式实体方法
    //定义发布表达式实体方法
    /**
     * @param {?} expressionentity
     * @return {?}
     */
    ExpressionEventService.prototype.setExpression = 
    //定义发布表达式实体方法
    /**
     * @param {?} expressionentity
     * @return {?}
     */
    function (expressionentity) {
        this._expressionsource.next(expressionentity);
    };
    //定义获得表达式实体方法
    //定义获得表达式实体方法
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.getExpression = 
    //定义获得表达式实体方法
    /**
     * @return {?}
     */
    function () {
        return this._expressionsource.asObservable();
    };
    /**
     * @param {?} expression
     * @return {?}
     */
    ExpressionEventService.prototype.insertExpression = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        this._insertexpression.next(expression);
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.currentExpression = /**
     * @return {?}
     */
    function () {
        return this._insertexpression.asObservable();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.pushclearExpression = /**
     * @return {?}
     */
    function () {
        this._clearexpression.next();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.clearExpression = /**
     * @return {?}
     */
    function () {
        return this._clearexpression.asObservable();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.clearFuncSelect = /**
     * @return {?}
     */
    function () {
        this._clearFuncSelect.next();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.subClearFuncSelect = /**
     * @return {?}
     */
    function () {
        return this._clearFuncSelect.asObservable();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.clearVarSelect = /**
     * @return {?}
     */
    function () {
        this._clearFuncSelect.next();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.subClearVarSelect = /**
     * @return {?}
     */
    function () {
        return this._clearFuncSelect.asObservable();
    };
    ExpressionEventService.decorators = [
        { type: Injectable }
    ];
    return ExpressionEventService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var VarType = {
    Session: 0,
    Context: 1,
};
VarType[VarType.Session] = 'Session';
VarType[VarType.Context] = 'Context';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 内部上下文实体
 * \@property sessionEntities 预置的系统变量列表
 * \@property contextEntities 预置的上下文变量列表
 * \@property funcEntities 预置的函数列表
 * \@property expr 预置的表达式文本
 * \@property schemaMap 预置schema键值对
 * \@property newSchemaMap 预置newSchema键值对
 * \@property injectedEntities 注入实体对象
 * \@property smartHelpEntities 注入帮助
 */
var  /**
 * 内部上下文实体
 * \@property sessionEntities 预置的系统变量列表
 * \@property contextEntities 预置的上下文变量列表
 * \@property funcEntities 预置的函数列表
 * \@property expr 预置的表达式文本
 * \@property schemaMap 预置schema键值对
 * \@property newSchemaMap 预置newSchema键值对
 * \@property injectedEntities 注入实体对象
 * \@property smartHelpEntities 注入帮助
 */
ExpressionContextEntity = /** @class */ (function () {
    function ExpressionContextEntity() {
        this.sessionEntities = [];
        this.contextEntities = [];
        this.funcEntities = [];
        this.expr = null;
        this.sexpr = "";
        this.schemaMap = new Map();
        this.newSchemaMap = new Map();
        this.injectedEntities = [];
        this.smartHelpEntities = [];
    }
    return ExpressionContextEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * schema实体类
 * \@property entitySets 实体集集合
 * \@property entityTypes 实体类型集合
 * \@property description schema自描述
 * @author linchang 2018/12/7
 */
var  /**
 * schema实体类
 * \@property entitySets 实体集集合
 * \@property entityTypes 实体类型集合
 * \@property description schema自描述
 * @author linchang 2018/12/7
 */
Schema = /** @class */ (function () {
    function Schema() {
        this.entitySets = [];
        this.entityTypes = [];
    }
    return Schema;
}());
/**
 * 实体类型
 * \@property id 唯一标识
 * \@property name 语义化名称
 * \@property key 主键
 * \@property properties 属性列表信息
 * \@property navigationProperties 导航属性列表
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
var  /**
 * 实体类型
 * \@property id 唯一标识
 * \@property name 语义化名称
 * \@property key 主键
 * \@property properties 属性列表信息
 * \@property navigationProperties 导航属性列表
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
EntityType = /** @class */ (function () {
    function EntityType() {
        this.properties = [];
        this.navigationProperties = [];
    }
    return EntityType;
}());
/**
 * 实体集合
 * \@property name 实体集名称
 * \@property entityType 对应的实体类型名
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
var  /**
 * 实体集合
 * \@property name 实体集名称
 * \@property entityType 对应的实体类型名
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
EntitySet = /** @class */ (function () {
    function EntitySet() {
    }
    return EntitySet;
}());
/**
 * 实体类型中的属性
 * \@property name 属性名
 * \@property type 属性类型
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
var  /**
 * 实体类型中的属性
 * \@property name 属性名
 * \@property type 属性类型
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
Property = /** @class */ (function () {
    function Property() {
    }
    return Property;
}());
/**
 * 导航属性--关联相对应实体类型或者实体集
 * \@property name 导航属性名
 * \@property type 导航属性类型
 * \@property navigationId 导航值
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
var  /**
 * 导航属性--关联相对应实体类型或者实体集
 * \@property name 导航属性名
 * \@property type 导航属性类型
 * \@property navigationId 导航值
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
NavigationProperty = /** @class */ (function () {
    function NavigationProperty() {
    }
    return NavigationProperty;
}());
/** @enum {number} */
var NavigationType = {
    EntitySet: 0,
    EntityType: 1,
};
NavigationType[NavigationType.EntitySet] = 'EntitySet';
NavigationType[NavigationType.EntityType] = 'EntityType';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 输出结果表达式实体类
 * \@property expr Json序列化后的表达式串
 */
var  /**
 * 输出结果表达式实体类
 * \@property expr Json序列化后的表达式串
 */
ExpressionEntity = /** @class */ (function () {
    function ExpressionEntity() {
    }
    return ExpressionEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CurrentNode = /** @class */ (function () {
    function CurrentNode() {
        this.nodeType = "";
        this.description = "";
    }
    return CurrentNode;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 注入实体信息
 * \@property name 注入对象语义化名
 * \@property schemaName 注入对象schemaName，根据schemaName找到Schema
 * \@property injectedType 注入对象类型(EntitySet,EntityType)
 * \@property injectedName 注入实体的名称，对应EntityType.code
 * @author linchang 2018/12/7
 */
var  /**
 * 注入实体信息
 * \@property name 注入对象语义化名
 * \@property schemaName 注入对象schemaName，根据schemaName找到Schema
 * \@property injectedType 注入对象类型(EntitySet,EntityType)
 * \@property injectedName 注入实体的名称，对应EntityType.code
 * @author linchang 2018/12/7
 */
InjectedEntity = /** @class */ (function () {
    function InjectedEntity() {
    }
    return InjectedEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var InjectedType = {
    EntitySet: 0,
    EntityType: 1,
};
InjectedType[InjectedType.EntitySet] = 'EntitySet';
InjectedType[InjectedType.EntityType] = 'EntityType';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description 统一结构Schema
 * @param name 名称
 * @param description 描述
 * @param entitySets 实体集
 * @param entityTypes 实体类型
 * @param associations 关联集合
 * \@date 2021-04-14
 * @author Wenxing Man
 */
var /**
 * \@description 统一结构Schema
 * @param name 名称
 * @param description 描述
 * @param entitySets 实体集
 * @param entityTypes 实体类型
 * @param associations 关联集合
 * \@date 2021-04-14
 * @author Wenxing Man
 */
NewSchema = /** @class */ (function () {
    function NewSchema() {
        this.entitySets = [];
        this.entityTypes = [];
        this.associations = [];
    }
    return NewSchema;
}());
/**
 * @param code 实体集名
 * @param name 实体集语义化名
 * @param entityType 对应EntityType的id
 * \@date 2021-04-14
 * @author Wenxing Man
 */
var /**
 * @param code 实体集名
 * @param name 实体集语义化名
 * @param entityType 对应EntityType的id
 * \@date 2021-04-14
 * @author Wenxing Man
 */
NewEntitySet = /** @class */ (function () {
    function NewEntitySet() {
    }
    return NewEntitySet;
}());
/**
 * @param code 属性名
 * @param name 实体语义化名
 * @param master  是否是主实体
 * @param properties   属性集合
 * @param keys  主键集合
 * @param navigationPorperties 导航集合属性
 * \@date 2021-04-14
 * @author Wenxing Man
 */
var /**
 * @param code 属性名
 * @param name 实体语义化名
 * @param master  是否是主实体
 * @param properties   属性集合
 * @param keys  主键集合
 * @param navigationPorperties 导航集合属性
 * \@date 2021-04-14
 * @author Wenxing Man
 */
NewEntityType = /** @class */ (function () {
    function NewEntityType() {
        this.properties = [];
        this.keys = [];
        this.navigationProperties = [];
    }
    return NewEntityType;
}());
/**
 * @param code 属性名
 * @param name 属性语义化名
 * @param dataType 属性值类型
 * @param nullable 是否允许为空值
 * @param dafaultValue 属性默认值
 * \@date 2021-04-14
 * @author Wenxing Man
 */
var /**
 * @param code 属性名
 * @param name 属性语义化名
 * @param dataType 属性值类型
 * @param nullable 是否允许为空值
 * @param dafaultValue 属性默认值
 * \@date 2021-04-14
 * @author Wenxing Man
 */
NewProperty = /** @class */ (function () {
    function NewProperty() {
    }
    return NewProperty;
}());
/**
 * @param code 导航属性名称
 * @param name 导航属性语义化名
 * @param navigationName 导航对象的名称
 * @param navigationType 属性类型(EntitySet,EntityType)
 * @param relationShip 关联的对象
 * \@date 2021-04-14
 * @author Wenxing Man
 */
var /**
 * @param code 导航属性名称
 * @param name 导航属性语义化名
 * @param navigationName 导航对象的名称
 * @param navigationType 属性类型(EntitySet,EntityType)
 * @param relationShip 关联的对象
 * \@date 2021-04-14
 * @author Wenxing Man
 */
NewNavigationProperty = /** @class */ (function () {
    function NewNavigationProperty() {
    }
    return NewNavigationProperty;
}());
/** @enum {number} */
var NewDataType = {
    String: 0,
    Byte: 1,
    Boolean: 2,
    Date: 3,
    DateTime: 4,
    Decimal: 5,
    Integer: 6,
};
NewDataType[NewDataType.String] = 'String';
NewDataType[NewDataType.Byte] = 'Byte';
NewDataType[NewDataType.Boolean] = 'Boolean';
NewDataType[NewDataType.Date] = 'Date';
NewDataType[NewDataType.DateTime] = 'DateTime';
NewDataType[NewDataType.Decimal] = 'Decimal';
NewDataType[NewDataType.Integer] = 'Integer';
/** @enum {string} */
var NewNavigationType = {
    EntitySet: "EntitySet",
    EntityType: "EntityType",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 适配器类(目前支持CDT、CO)
 * 功能：将CDT、CO转化为内部Schema中的EntityType
 */
var /**
 * 适配器类(目前支持CDT、CO)
 * 功能：将CDT、CO转化为内部Schema中的EntityType
 */
Adapter = /** @class */ (function () {
    function Adapter() {
    }
    /**
     * 将CDT转化为entityType方法
     * @param gspCDT 待转化的CDT
     */
    /**
     * 将CDT转化为entityType方法
     * @param {?} gspCDT 待转化的CDT
     * @return {?}
     */
    Adapter.prototype.convertCDT = /**
     * 将CDT转化为entityType方法
     * @param {?} gspCDT 待转化的CDT
     * @return {?}
     */
    function (gspCDT) {
        /** @type {?} */
        var entityType = new EntityType();
        entityType.name = gspCDT.Code;
        entityType.key = null;
        entityType.id = gspCDT.Code;
        entityType.description = gspCDT.Name;
        gspCDT.ContainElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var property = new Property();
            property.name = element.Code;
            property.type = element.MDataType;
            property.description = element.Name;
            entityType.properties.push(property);
        }));
        entityType.navigationProperties = [];
        return entityType;
    };
    /**
     * 将CO转化为entityType方法
     * @param gspCO 待转化的CO
     */
    /**
     * 将CO转化为entityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?}
     */
    Adapter.prototype.convertCO = /**
     * 将CO转化为entityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?}
     */
    function (gspCO) {
        /** @type {?} */
        var entityTypes = [];
        entityTypes.push(this.adaptCO(gspCO, entityTypes));
        return entityTypes;
    };
    /**
     * CO转化递归方法
     * @param gspCO 待转化gspCO
     * @param entityTypes 从gspCO提取的所有主从表
     */
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    Adapter.prototype.adaptCO = /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    function (gspCO, entityTypes) {
        var _this = this;
        /** @type {?} */
        var entityType = new EntityType();
        entityType.name = gspCO.Code;
        entityType.key = null;
        entityType.id = gspCO.Code;
        entityType.description = gspCO.Name;
        //每个属性转化
        if (gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var property = new Property();
                property.name = element.Code;
                property.type = element.MDataType;
                property.description = element.Name;
                entityType.properties.push(property);
            }));
        }
        //子表转化为导航属性
        if (gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            function (childObject) {
                /** @type {?} */
                var naviproperty = new NavigationProperty();
                naviproperty.description = childObject.Name;
                naviproperty.name = childObject.Code + "s";
                naviproperty.navigationId = childObject.Code + "s";
                naviproperty.type = NavigationType.EntitySet;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(_this.adaptCO(childObject, entityTypes));
            }));
        }
        return entityType;
    };
    //======================将CO转换为NewEntityType===============================================
    /**
     * @description 将CDT转换为NewEntityType
     * @param gspCDT 待转换CDT
     * @returns NewEntityType
     */
    //======================将CO转换为NewEntityType===============================================
    /**
     * \@description 将CDT转换为NewEntityType
     * @param {?} gspCDT 待转换CDT
     * @return {?} NewEntityType
     */
    Adapter.prototype.convertCDTOfNewSchema = 
    //======================将CO转换为NewEntityType===============================================
    /**
     * \@description 将CDT转换为NewEntityType
     * @param {?} gspCDT 待转换CDT
     * @return {?} NewEntityType
     */
    function (gspCDT) {
        var _this = this;
        /** @type {?} */
        var entityType = new NewEntityType();
        entityType.code = gspCDT.Code;
        entityType.name = gspCDT.Name;
        gspCDT.ContainElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var property = new NewProperty();
            property.code = element.Code;
            property.name = element.Name;
            property.dataType = _this.convertMDataType(element.MDataType);
            entityType.properties.push(property);
        }));
        entityType.navigationProperties = [];
        return entityType;
    };
    /**
    * @description 将CO转化为newEntityType方法
    * @param gspCO 待转化的CO
    * @returns NewEntityType[] NewEntityType[]
    */
    /**
     * \@description 将CO转化为newEntityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?} NewEntityType[] NewEntityType[]
     */
    Adapter.prototype.convertCOOfNewSchema = /**
     * \@description 将CO转化为newEntityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?} NewEntityType[] NewEntityType[]
     */
    function (gspCO) {
        /** @type {?} */
        var entityTypes = [];
        entityTypes.push(this.adaptCOOfNewSchema(gspCO, entityTypes));
        return entityTypes;
    };
    /**
    * CO转化递归方法
    * @param gspCO 待转化gspCO
    * @param entityTypes 从gspCO提取的所有主从表
    */
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    Adapter.prototype.adaptCOOfNewSchema = /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    function (gspCO, entityTypes) {
        var _this = this;
        /** @type {?} */
        var entityType = new NewEntityType();
        entityType.code = gspCO.Code;
        entityType.name = gspCO.Name;
        //每个属性转化
        if (gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var property = new NewProperty();
                property.code = element.Code;
                property.name = element.Name;
                property.dataType = _this.convertMDataType(element.MDataType);
                entityType.properties.push(property);
            }));
        }
        //子表转化为导航属性
        if (gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            function (childObject) {
                /** @type {?} */
                var naviproperty = new NewNavigationProperty();
                naviproperty.code = childObject.Code + "s";
                naviproperty.name = childObject.Name;
                naviproperty.navigationName = childObject.Code;
                naviproperty.navigationType = NewNavigationType.EntitySet;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(_this.adaptCOOfNewSchema(childObject, entityTypes));
            }));
        }
        return entityType;
    };
    /**
     * @description （字段类型转换）BE类型转换为Schema类型
     * @param type BE类型
     * @returns NewDataType
     */
    /**
     * \@description （字段类型转换）BE类型转换为Schema类型
     * @private
     * @param {?} type BE类型
     * @return {?} NewDataType
     */
    Adapter.prototype.convertMDataType = /**
     * \@description （字段类型转换）BE类型转换为Schema类型
     * @private
     * @param {?} type BE类型
     * @return {?} NewDataType
     */
    function (type) {
        switch (type) {
            case GSPElementDataType.String:
                return NewDataType.String;
            case GSPElementDataType.Integer:
                return NewDataType.Integer;
            case GSPElementDataType.Binary:
                return NewDataType.Byte;
            case GSPElementDataType.Boolean:
                return NewDataType.Boolean;
            case GSPElementDataType.Date:
                return NewDataType.Date;
            case GSPElementDataType.DateTime:
                return NewDataType.DateTime;
            case GSPElementDataType.Decimal:
                return NewDataType.Decimal;
            case GSPElementDataType.Text:
                return NewDataType.String;
            default:
                return NewDataType.String;
        }
    };
    return Adapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FrameI18nResources = {
    "zh-CHS": {
        "ExpressionTitle": "高级表达式",
        "ExpressionSave": "保存",
        "ExpressionCancel": "取消",
        "CheckFront": "校验",
        "ResetFront": "重置",
        "HelpFront": "帮助",
        "ImportFront": "导入",
        "Advanced": "高级函数",
        "String": "字符串",
        "Aggregate": "聚合",
        "Estimate": "判断",
        "DateTime": "日期时间",
        "Translate": "类型转换",
        "Analytical": "解析",
        "Math": "数学",
        "Extend": "扩展",
        "FunctionSemanticName": "语义化名称",
        "FunctionName": "函数名称",
        "FunctionParameter": "参数",
        "Variable": "变量",
        "VariableSessionValue": "会话变量",
        "VariableContextParameter": "上下文变量",
        "VariableName": "名称",
        "VariableSemanticNameValue": "语义化名称",
        "Entity": "数据",
        "EntityList": "实体列表",
        "EntityName": "名称",
        "EntityType": "类型",
        "EntityPropList": "属性列表",
        "Help": "帮助",
        "HelpCode": "编号",
        "HelpName": "名称",
        "HelpDescription": "说明",
        "SaveButton": "保存",
        "CancelButton": "取消",
        "FunctionDescription": "函数说明：",
        "VarDescription": "变量说明：",
        "CurrentProp": "当前属性：",
        "CurrentChosedProp": "当前选择属性："
    },
    "en": {
        "ExpressionTitle": "Advanced Expression",
        "ExpressionSave": "Save",
        "ExpressionCancel": "Cancel",
        "CheckFront": "Check",
        "ResetFront": "Reset",
        "HelpFront": "Help",
        "ImportFront": "Import",
        "Advanced": "Advanced",
        "String": "String",
        "Aggregate": "Aggregate",
        "Estimate": "Estimate",
        "DateTime": "DateTime",
        "Translate": "Translate",
        "Analytical": "Analytical",
        "Math": "Math",
        "Extend": "Extend",
        "FunctionSemanticName": "SemanticName",
        "FunctionName": "FunctionName",
        "FunctionParameter": "Parameter",
        "Variable": "Variable",
        "VariableSessionValue": "SessionValue",
        "VariableContextParameter": "ContextParameter",
        "VariableName": "Name",
        "VariableSemanticNameValue": "SemanticName",
        "Entity": "Entity",
        "EntityList": "EntityList",
        "EntityName": "Name",
        "EntityType": "Type",
        "EntityPropList": "PropertyList",
        "Help": "Help",
        "HelpCode": "Code",
        "HelpName": "Name",
        "HelpDescription": "Description",
        "SaveButton": "Save",
        "CancelButton": "Cancel",
        "FunctionDescription": "Function Description：",
        "VarDescription": "Var Description：",
        "CurrentProp": "Current Property：",
        "CurrentChosedProp": "Currently Selected Property："
    },
    "zh-CHT": {
        "ExpressionTitle": "高級表達式",
        "ExpressionSave": "保存",
        "ExpressionCancel": "取消",
        "CheckFront": "校驗",
        "ResetFront": "重置",
        "HelpFront": "幫助",
        "ImportFront": "導入",
        "Advanced": "高級函數",
        "String": "字符串",
        "Aggregate": "聚合",
        "Estimate": "判斷",
        "DateTime": "日期時間",
        "Translate": "類型轉換",
        "Analytical": "解析",
        "Math": "數學",
        "Extend": "擴展",
        "FunctionSemanticName": "語義化名稱",
        "FunctionName": "函數名稱",
        "FunctionParameter": "參數",
        "Variable": "變量",
        "VariableSessionValue": "會話變量",
        "VariableContextParameter": "上下文變量",
        "VariableName": "名稱",
        "VariableSemanticNameValue": "語義化名稱",
        "Entity": "數據",
        "EntityList": "實體列表",
        "EntityName": "名稱",
        "EntityType": "類型",
        "EntityPropList": "屬性列表",
        "Help": "幫助",
        "HelpCode": "編號",
        "HelpName": "名稱",
        "HelpDescription": "說明",
        "SaveButton": "保存",
        "CancelButton": "取消",
        "FunctionDescription": "函數說明：",
        "VarDescription": "變量說明：",
        "CurrentProp": "當前屬性：",
        "CurrentChosedProp": "當前選擇屬性："
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionEditorLocalePipe = /** @class */ (function () {
    function ExpressionEditorLocalePipe(localeId) {
        this.defaultLang = "zh-CHS";
        localeId = localStorage.getItem('languageCode');
        this.langCode = localeId || this.defaultLang;
        this.lang = FrameI18nResources[this.langCode] || FrameI18nResources[this.defaultLang];
    }
    /**
     * @param {?} name
     * @return {?}
     */
    ExpressionEditorLocalePipe.prototype.transform = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.lang[name] || name;
    };
    ExpressionEditorLocalePipe.decorators = [
        { type: Pipe, args: [{ name: 'locale' },] }
    ];
    /** @nocollapse */
    ExpressionEditorLocalePipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return ExpressionEditorLocalePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FunctionI18nResources = {
    "zh-CHS": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : 判断条件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : 判断条件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for循环",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "返回操作",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "变量定义",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "正确",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "错误",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "长度",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\u68C0\u7D22\u5B50\u5B57\u7B26\u4E32\uFF0C\u5B50\u5B57\u7B26\u4E32\u4ECE\u6307\u5B9A\u7684\u5B57\u7B26\u4F4D\u7F6E\u5F00\u59CB\u4E14\u5177\u6709\u6307\u5B9A\u7684\u957F\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010start\u3011\uFF1A\u8D77\u59CB\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\n\u3010length\u3011\uFF1A\u957F\u5EA6\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringSubstring(\"ABCDEFG\",2,3)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"CDE\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "长度",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\u68C0\u7D22\u5B50\u5B57\u7B26\u4E32\uFF0C\u5B50\u5B57\u7B26\u4E32\u4ECE\u6307\u5B9A\u7684\u5B57\u7B26\u4F4D\u7F6E\u5F00\u59CB\u4E14\u5177\u6709\u6307\u5B9A\u7684\u957F\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010start\u3011\uFF1A\u8D77\u59CB\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\n\u3010length\u3011\uFF1A\u957F\u5EA6\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ASubString(\"ABCDEFG\",2,3)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"CDE\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u6307\u5B9A\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AStringLength(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A6",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u6307\u5B9A\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1ALength(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A6",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "是否包含",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65AD\u6E90\u5B57\u7B26\u4E32\u4E2D\u662F\u5426\u5305\u542B\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1ASystem.Boolean\n\u3010\u793A\u4F8B\u3011\uFF1AContains(salesorder.code,\"\u8868\u8FBE\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "开头是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65AD\u6E90\u5B57\u7B26\u4E32\u662F\u5426\u4EE5\u76EE\u6807\u5B57\u7B26\u4E32\u5F00\u5934\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1ASystem.Boolean\n\u3010\u793A\u4F8B\u3011\uFF1AStartsWith(salesorder.code,\"\u5B50\u5355\u4F4D\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "结尾是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65AD\u6E90\u5B57\u7B26\u4E32\u662F\u5426\u4EE5\u76EE\u6807\u5B57\u7B26\u4E32\u7ED3\u5C3E\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1ASystem.Boolean\n\u3010\u793A\u4F8B\u3011\uFF1AEndsWith(salesorder.code,\"\u5B50\u5355\u4F4D\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u4E2D\u7684\"\u88AB\u66FF\u6362\u503C\"\u66FF\u6362\u4E3A\"\u66FF\u6362\u503C\"\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010oldValue\u3011\uFF1A\u88AB\u66FF\u6362\u503C\n\u3010newValue\u3011\uFF1A\u66FF\u6362\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringReplace(\"123412\",\"12\",\"00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"003400\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u4E2D\u7684\"\u88AB\u66FF\u6362\u503C\"\u66FF\u6362\u4E3A\"\u66FF\u6362\u503C\"\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010oldValue\u3011\uFF1A\u88AB\u66FF\u6362\u503C\n\u3010newValue\u3011\uFF1A\u66FF\u6362\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AReplace(\"123412\",\"12\",\"00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"003400\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5927\u5199\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringToUpper(\"abc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5927\u5199\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToUpper(\"abc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5C0F\u5199\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringToLower(\"ABC\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"abc\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5C0F\u5199\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToLower(\"ABC\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"abc\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u68C0\u7D22\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u7B2C\u4E00\u4E2A\u5339\u914D\u7684\u5B57\u7B26\u4E32\u540E\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u5219\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6807\u5B57\u7B26\u4E32\u4E3A\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u4E3Anull\uFF0C\u5219\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AStringIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A3\n\u3010\u793A\u4F8B\u3011\uFF1AStringIndexOf(\"12002323\",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1AStringIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u68C0\u7D22\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u7B2C\u4E00\u4E2A\u5339\u914D\u7684\u5B57\u7B26\u4E32\u540E\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u5219\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6807\u5B57\u7B26\u4E32\u4E3A\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u4E3Anull\uFF0C\u5219\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A3\n\u3010\u793A\u4F8B\u3011\uFF1AIndexOf(\"12002323\",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1AIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u68C0\u7D22\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u6700\u540E\u4E00\u4E2A\u5339\u914D\u7684\u5B57\u7B26\u4E32\u540E\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u5219\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6807\u5B57\u7B26\u4E32\u4E3A\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u4E3Anull\uFF0C\u5219\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010value\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AStringLastIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A8\n\u3010\u793A\u4F8B\u3011\uFF1AStringLastIndexOf(\"12002323\",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1AStringLastIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u68C0\u7D22\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u6700\u540E\u4E00\u4E2A\u5339\u914D\u7684\u5B57\u7B26\u4E32\u540E\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u5219\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6807\u5B57\u7B26\u4E32\u4E3A\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u4E3Anull\uFF0C\u5219\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010value\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1ALastIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A8\n\u3010\u793A\u4F8B\u3011\uFF1ALastIndexOf(\"12002323\",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1ALastIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5934\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringTrimStart(\"    ABC\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5934\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATrimStart(\"    ABC\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringTrimEnd(\"ABC    \")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATrimEnd(\"ABC    \")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5934\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringTrim(\"    ABC    \")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5934\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATrim(\"    ABC    \")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "唯一标识符",
            "params": [],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u552F\u4E00\u6807\u8BC6\u7B26Guid\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ACreateGuid()\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"7722A793-14DF-49CD-B7E7-DF4987YYD2\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u82E5\u5E72\u5B57\u7B26\u4E32\u62FC\u63A5\u6210\u4E00\u4E2A\u65B0\u5B57\u7B26\u4E32\uFF0C\u6700\u591A\u652F\u630110\u4E2A\u5B57\u7B26\u4E32\u62FC\u63A5\uFF0C\u6700\u5C112\u4E2A\uFF1B\u7F16\u8F91\u5668\u4E2D\u9ED8\u8BA4\u63D2\u5165\u4E24\u4E2A\uFF0C\u591A\u4E2A\u5B57\u7B26\u4E32\u53EF\u624B\u52A8\u6DFB\u52A0\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringAdd(\"Hello\",\"World\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"HelloWord\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u82E5\u5E72\u5B57\u7B26\u4E32\u62FC\u63A5\u6210\u4E00\u4E2A\u65B0\u5B57\u7B26\u4E32\uFF0C\u6700\u591A\u652F\u630110\u4E2A\u5B57\u7B26\u4E32\u62FC\u63A5\uFF0C\u6700\u5C112\u4E2A\uFF1B\u7F16\u8F91\u5668\u4E2D\u9ED8\u8BA4\u63D2\u5165\u4E24\u4E2A\uFF0C\u591A\u4E2A\u5B57\u7B26\u4E32\u53EF\u624B\u52A8\u6DFB\u52A0\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AAdd(\"Hello\",\"World\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"HelloWord\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "按属性求和",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7EDF\u8BA1\u67D0\u4E00\u5C5E\u6027\u7684\u548C\n\u3010chainedPropName\u3011\uFF1A\u5BF9\u5E94\u5B9E\u4F53\u96C6\u5408\u7684\u5C5E\u6027\u540D,\u94FE\u5F0F\u5F62\u5F0F\u7EC4\u7EC7\u5728\u4E00\u8D77\u7684\u5C5E\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u7C7B\u578B\u5C5E\u6027\u540D;\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1ASumByProp(\"Order.OrderItems\",\"Quantity\")\"",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "列行数",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7EDF\u8BA1\u6307\u5B9A\u5B57\u6BB5\u6240\u5728\u8868\u7684\u8BB0\u5F55\u6570\n\u3010chainedPropName\u3011\uFF1A\u5BF9\u5E94\u5B9E\u4F53\u96C6\u5408\u7684\u5C5E\u6027\u540D,\u94FE\u5F0F\u5F62\u5F0F\u7EC4\u7EC7\u5728\u4E00\u8D77\u7684\u5C5E\u6027\u540D,\u4F8B\u5982\uFF1AOrder.OrderItems\n\u3010propertyName\u3011\uFF1A\u7C7B\u578B\u5C5E\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32);\n\u3010\u793A\u4F8B\u3011\uFF1ACountByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "列平均值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7EDF\u8BA1\u67D0\u4E00\u6570\u503C\u5217\u7684\u5E73\u5747\u503C\n\u3010chainedPropName\u3011\uFF1A\u5BF9\u5E94\u5B9E\u4F53\u96C6\u5408\u7684\u5C5E\u6027\u540D,\u94FE\u5F0F\u5F62\u5F0F\u7EC4\u7EC7\u5728\u4E00\u8D77\u7684\u5C5E\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u7C7B\u578B\u5C5E\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AAvgByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "列最大值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7EDF\u8BA1\u67D0\u4E00\u6570\u503C\u5217\u7684\u6700\u5927\u503C\n\u3010chainedPropName\u3011\uFF1A\u5BF9\u5E94\u5B9E\u4F53\u96C6\u5408\u7684\u5C5E\u6027\u540D,\u94FE\u5F0F\u5F62\u5F0F\u7EC4\u7EC7\u5728\u4E00\u8D77\u7684\u5C5E\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u7C7B\u578B\u5C5E\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AMaxByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "列最小值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7EDF\u8BA1\u67D0\u4E00\u6570\u503C\u5217\u7684\u6700\u5C0F\u503C\n\u3010chainedPropName\u3011\uFF1A\u5BF9\u5E94\u5B9E\u4F53\u96C6\u5408\u7684\u5C5E\u6027\u540D,\u94FE\u5F0F\u5F62\u5F0F\u7EC4\u7EC7\u5728\u4E00\u8D77\u7684\u5C5E\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u7C7B\u578B\u5C5E\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AMinByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "是空值",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65AD\u6307\u5B9A\u7684\u5BF9\u8C61\u662F\u5426\u4E3A\u7A7A\u503C(null)\n\u3010obj\u3011\uFF1A\u8981\u68C0\u6D4B\u7684\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5E03\u5C14\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsNull(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "是空串",
            "params": [
                {
                    "key": "obj",
                    "name": "待判断字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65AD\u6307\u5B9A\u7684\u5B57\u7B26\u4E32\u662F\u5426\u4E3Anull\u3001\u7A7A\u8FD8\u662F\u4EC5\u6709\u7A7A\u683C\u7EC4\u6210\n\u3010obj\u3011\uFF1A\u8981\u5224\u65AD\u7684\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5E03\u5C14\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsNullOrWhiteSpace(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse\n\u3010\u793A\u4F8B\u3011\uFF1AIsNullOrWhiteSpace(null)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue\n\u3010\u793A\u4F8B\u3011\uFF1A\nIsNullOrWhiteSpace(\" \")\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "非数字",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65AD\u6307\u5B9A\u7684\u5BF9\u8C61\u662F\u5426\u53EF\u4EE5\u8F6C\u6362\u6210\u6570\u5B57(System.Double)\n\u3010obj\u3011\uFF1A\u8981\u68C0\u6D4B\u7684\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5E03\u5C14\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsNaN(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue\n\u3010\u793A\u4F8B\u3011\uFF1AIsNaN(12.3)\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse\n\u3010\u793A\u4F8B\u3011\uFF1A\nIsNaN(\"123\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "是数字",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65AD\u6307\u5B9A\u7684\u5BF9\u8C61\u662F\u5426\u53EF\u4EE5\u8F6C\u6362\u6210\u6570\u5B57(System.Double)\n\u3010obj\u3011\uFF1A\u8981\u68C0\u6D4B\u7684\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5E03\u5C14\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsNumber(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse\n\u3010\u793A\u4F8B\u3011\uFF1AIsNumber(12.3)\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue\n\u3010\u793A\u4F8B\u3011\uFF1A\nIsNumber(\"123\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "有无等于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u540D\u79F0\u5224\u65AD\u8BE5\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u7B49\u4E8E\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\u79F0\n\u3010propertyName\u3011\u5C5E\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsExistRecord(\"salesorder.items\",\"code\",\"lc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "有无大于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u540D\u79F0\u5224\u65AD\u8BE5\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u5927\u4E8E\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\u79F0\n\u3010propertyName\u3011\u5C5E\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListGreaterThan(\"salesorder.items\",\"num\",100)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "有无小于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u540D\u79F0\u5224\u65AD\u8BE5\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u5C0F\u4E8E\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\u79F0\n\u3010propertyName\u3011\u5C5E\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListLessThan(\"salesorder.items\",\"num\",100)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "有无开头是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u540D\u79F0\u5224\u65AD\u8BE5\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u5F00\u5934\u662F\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\u79F0\n\u3010propertyName\u3011\u5C5E\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListStartWith(\"salesorder.items\",\"code\",\"lc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "有无结尾是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u540D\u79F0\u5224\u65AD\u8BE5\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u7ED3\u5C3E\u662F\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\u79F0\n\u3010propertyName\u3011\u5C5E\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListEndWith(\"salesorder.items\",\"code\",\"lc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "增加指定天数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加天数",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6307\u5B9A\u7684\u65E5\u671F\u65F6\u95F4\u4E0A\u589E\u52A0\u6307\u5B9A\u7684\u5929\u6570\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010value\u3011\uFF1A\u589E\u52A0\u5929\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u65E5\u671F\u65F6\u95F4(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1ADateTimeAddDays(\"2019-01-30T10:00:00+08:00\",2)\n\u3010\u8FD4\u56DE\u503C\u3011:2019-02-01T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "增加指定年数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加年数",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6307\u5B9A\u7684\u65E5\u671F\u65F6\u95F4\u4E0A\u589E\u52A0\u6307\u5B9A\u7684\u5E74\u6570\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010value\u3011\uFF1A\u589E\u52A0\u5E74\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u65E5\u671F\u65F6\u95F4(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1ADateTimeAddYears(\"2019-01-30T10:00:00+08:00\",2)\n\u3010\u8FD4\u56DE\u503C\u3011:2021-01-30T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "增加指定月数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加月数",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6307\u5B9A\u7684\u65E5\u671F\u65F6\u95F4\u4E0A\u589E\u52A0\u6307\u5B9A\u7684\u6708\u6570\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010value\u3011\uFF1A\u589E\u52A0\u6708\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u65E5\u671F\u65F6\u95F4(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1ADateTimeAddMonths(\"2019-01-30T10:00:00+08:00\",1)\n\u3010\u8FD4\u56DE\u503C\u3011:2019-02-28T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "获取指定日期时间所在月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u6307\u5B9A\u65E5\u671F\u65F6\u95F4\u503C\u6240\u5728\u6708\u7684\u7B2C\u4E00\u5929\u7684\u65E5\u671F\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u65E5\u671F\u65F6\u95F4(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AGetFirstDayOfMonth(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011:2019-01-01T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "获取指定日期时间所在月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u6307\u5B9A\u65E5\u671F\u65F6\u95F4\u503C\u6240\u5728\u6708\u7684\u6700\u540E\u4E00\u5929\u7684\u65E5\u671F\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u65E5\u671F\u65F6\u95F4(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AGetLastDayOfMonth(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011:2019-01-31T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "获取当前日期时间",
            "params": [],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u5F53\u524D\u7684\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u65E5\u671F\u65F6\u95F4(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AGetDateTimeNow()\n\u3010\u8FD4\u56DE\u503C\u3011:2019-01-30T12:00:00.000+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "比较两个时间",
            "params": [
                {
                    "key": "str1",
                    "name": "日期时间1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "日期时间2",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6BD4\u8F83\u4E24\u4E2A\u65F6\u95F4\u503C\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u503C\uFF0C\u6B64\u503C\u8868\u793A\u7B2C\u4E00\u4E2A\u65F6\u95F4\u662F\u65E9\u4E8E\u3001\u7B49\u4E8E\u8FD8\u662F\u665A\u4E8E\u7B2C\u4E8C\u4E2A\u65F6\u95F4\u7684\u6574\u6570\n\u3010str1\u3011\uFF1A\u65E5\u671F\u65F6\u95F41\n\u3010str2\u3011\uFF1A\u65E5\u671F\u65F6\u95F42\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.int32)\n\t\u65E5\u671F1\u65E9\u4E8E\u65E5\u671F2\uFF0C\u8FD4\u56DE-1\n\t\u65E5\u671F1\u7B49\u4E8E\u65E5\u671F2\uFF0C\u8FD4\u56DE0\n\t\u65E5\u671F1\u665A\u4E8E\u65E5\u671F2\uFF0C\u8FD4\u56DE1\n\u3010\u793A\u4F8B\u3011\uFF1ACompareDate(\"2019-01-30T10:00:00+08:00\",\"2019-02-01T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "格式化当前日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u6307\u5B9A\u7684\u683C\u5F0F\u5C06\u5F53\u524D\u65E5\u671F\u65F6\u95F4\u503C\u8F6C\u6362\u4E3A\u5176\u7B49\u6548\u7684\u5B57\u7B26\u4E32\u8868\u793A\u5F62\u5F0F\n\u3010format\u3011\uFF1A\u683C\u5F0F\u4E32\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFormatDate(\"yyyy-MM-dd HH:mm:ss\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-30 01:00:00\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "格式化指定日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u6307\u5B9A\u7684\u683C\u5F0F\u5C06\u6307\u5B9A\u7684\u65E5\u671F\u65F6\u95F4\u503C\u8F6C\u6362\u4E3A\u5176\u7B49\u6548\u7684\u5B57\u7B26\u4E32\u8868\u793A\u5F62\u5F0F\n\u3010format\u3011\uFF1A\u683C\u5F0F\u4E32\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFormatDefineDate(\"yyyy-MM-dd HH:mm:ss\",\"2019-01-30 01:00:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-30 01:00:00\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "今天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4ECA\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4ECA\u5929\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToday(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-30\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "昨天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u6628\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u6628\u5929\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AYesterday(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-29\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "明天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u660E\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u660E\u5929\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATomorrow(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "本年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5E74\uFF0C\u683C\u5F0F\u4E3A\"yyyy\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u5E74\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AThisYear(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "去年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u53BB\u5E74\uFF0C\u683C\u5F0F\u4E3A\"yyyy\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u53BB\u5E74\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastYear(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "明年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u660E\u5E74\uFF0C\u683C\u5F0F\u4E3A\"yyyy\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u660E\u5E74\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ANextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2020\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "本月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u6708\uFF0C\u683C\u5F0F\u4E3A\"MM\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u6708\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AThisMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"1\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "上月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u6708\uFF0C\u683C\u5F0F\u4E3A\"MM\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u6708\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastMonth(\"2019-02-30 01:00:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"1\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "下月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u6708\uFF0C\u683C\u5F0F\u4E3A\"MM\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u6708\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ANextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "本周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u5728\u672C\u5E74\u7684\u7B2C\u51E0\u5468\uFF0C\u683C\u5F0F\u4E3A\"ww\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u5728\u672C\u5E74\u7684\u7B2C\u51E0\u5468\uFF0C\u6CE8\u610F\u5982\u679C12\u6708\u5E95\u7684\u65E5\u671F\u4E0E\u4E0B\u4E00\u5E74\u76841\u67081\u65E5\u5728\u540C\u4E00\u661F\u671F\uFF0C\u5219\u8FD4\u56DE\u7B2C\u4E00\u5468\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AThisWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"5\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "上周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u5468\uFF0C\u683C\u5F0F\u4E3A\"ww\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u5468\uFF0C\u6CE8\u610F\u5982\u679C\u6307\u5B9A\u65E5\u671F\u5728\u4ECA\u5E74\u7B2C1\u5468\uFF0C\u5219\u4E0A\u5468\u4E3A\u53BB\u5E74\u7684\u6700\u540E\u4E00\u5468\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"4\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "下周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u5468\uFF0C\u683C\u5F0F\u4E3A\"ww\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u5468\uFF0C\u6CE8\u610F\u5982\u679C\u6307\u5B9A\u65E5\u671F\u5728\u4ECA\u5E74\u6700\u540E\u4E00\u5468\uFF0C\u5219\u4E0B\u5468\u4E3A1\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ANextWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"6\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "星期几",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u662F\u672C\u5468\u7684\u661F\u671F\u51E0\uFF0C\u683C\u5F0F\u4E3A\"n\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u662F\u672C\u5468\u7684\u661F\u671F\u51E0\uFF0C\u6CE8\u610F\u4E0D\u662F\u8FD4\u56DE\u82F1\u6587\u7F29\u5199\uFF0C\u800C\u662F\u8FD4\u56DE\u6570\u5B57\u5F62\u5F0F\u3002\u6309\u7167\u4E2D\u56FD\u4E60\u60EF\uFF0C\u661F\u671F\u4E00\u4E3A\u6BCF\u5468\u9996\u65E5\uFF0C\u8FD4\u56DE\u503C\u4E3A1\uFF0C\u661F\u671F\u65E5\u4E3A\u6BCF\u5468\u5C3E\u65E5\uFF0C\u8FD4\u56DE\u503C\u4E3A7\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ADayOfWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"3\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "本周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5468\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u5468\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u56FD\u4E60\u60EF\uFF0C\u661F\u671F\u4E00\u4E3A\u6BCF\u5468\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u4E3A\u6BCF\u5468\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-28\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "本周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5468\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u5468\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u56FD\u4E60\u60EF\uFF0C\u661F\u671F\u4E00\u4E3A\u6BCF\u5468\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u4E3A\u6BCF\u5468\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-03\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "上周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u5468\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u5468\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u56FD\u4E60\u60EF\uFF0C\u661F\u671F\u4E00\u4E3A\u6BCF\u5468\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u4E3A\u6BCF\u5468\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfLastWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-21\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "上周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u5468\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u5468\u6700\u540E\u4E00\u5929\u3002\u6309\u7167\u4E2D\u56FD\u4E60\u60EF\uFF0C\u661F\u671F\u4E00\u4E3A\u6BCF\u5468\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u4E3A\u6BCF\u5468\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfLastWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-27\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "下周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u5468\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u5468\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u56FD\u4E60\u60EF\uFF0C\u661F\u671F\u4E00\u4E3A\u6BCF\u5468\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u4E3A\u6BCF\u5468\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfNextWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-04\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "下周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u5468\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u5468\u6700\u540E\u4E00\u5929\u3002\u6309\u7167\u4E2D\u56FD\u4E60\u60EF\uFF0C\u661F\u671F\u4E00\u4E3A\u6BCF\u5468\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u4E3A\u6BCF\u5468\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfNextWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-10\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "本月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u6708\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u6708\u7B2C\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "本月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u6708\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u6708\u6700\u540E\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "上月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u6708\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u6708\u7B2C\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfLastMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-12-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "上月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u6708\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u6708\u6700\u540E\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfLastMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "下月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u6708\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u6708\u7B2C\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfNextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "下月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u6708\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u6708\u6700\u540E\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfNextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-28\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "本年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5E74\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u5E74\u7B2C\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "本年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5E74\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u672C\u5E74\u6700\u540E\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "上年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u5E74\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u5E74\u7B2C\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfLastYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "上年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u5E74\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0A\u5E74\u6700\u540E\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfLastYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "下年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u5E74\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u5E74\u7B2C\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfNextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2020-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "下年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u5E74\u6700\u540E\u4E00\u5929\uFF0C\u683C\u5F0F\u4E3A\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u4E0B\u5E74\u6700\u540E\u4E00\u5929\u3002\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfNextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2020-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "返回指定形式的日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u5F62\u5F0F\u7684\u65E5\u671F\uFF0C\u5982\u679C\u4E0D\u4F20\u9012\u53C2\u6570\uFF0C\u5219\u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u7CFB\u7EDF\u65E5\u671F\u7684\u6307\u5B9A\u5F62\u5F0F\u65E5\u671F\u3002\n\u3010format\u3011\uFF1A\u683C\u5F0F\u5316\u4E32\n\u3010date\u3011\uFF1A\u65E5\u671F\u65F6\u95F4\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\tDD\uFF1A\u4ECA\u5929\tLD\uFF1A\u6628\u5929\tND\uFF1A\u660E\u5929\n\tYY\uFF1A\u672C\u5E74\tLY\uFF1A\u4E0A\u5E74\tNY\uFF1A\u4E0B\u5E74\n\tMM\uFF1A\u672C\u6708\tLM\uFF1A\u4E0A\u6708\tNM\uFF1A\u4E0B\u6708\n\tWD\uFF1A\u661F\u671F\u51E0\n\tWW\uFF1A\u672C\u5468\tLW\uFF1A\u4E0A\u5468\tNW\uFF1A\u4E0B\u5468\n\tFDW\uFF1A\u672C\u5468\u9996\u65E5\tLDW\uFF1A\u672C\u5468\u5C3E\u65E5\n\tFDLW\uFF1A\u4E0A\u5468\u9996\u65E5\tLDLW\uFF1A\u4E0A\u5468\u5C3E\u65E5\n\tFDNW\uFF1A\u4E0B\u5468\u9996\u65E5\tLDNW\uFF1A\u4E0B\u5468\u5C3E\u65E5\n\tFDM\uFF1A\u672C\u6708\u9996\u65E5\tLDM\uFF1A\u672C\u6708\u5C3E\u65E5\n\tFDLM\uFF1A\u4E0A\u6708\u9996\u65E5\tLDLM\uFF1A\u4E0A\u6708\u5C3E\u65E5\n\tFDNM\uFF1A\u4E0B\u6708\u9996\u65E5\tLDNM\uFF1A\u4E0B\u6708\u5C3E\u65E5\n\tFDY\uFF1A\u672C\u5E74\u9996\u65E5\tLDY\uFF1A\u672C\u5E74\u5C3E\u65E5\n\tFDLY\uFF1A\u4E0A\u5E74\u9996\u65E5\tLDLY\uFF1A\u4E0A\u5E74\u5C3E\u65E5\n\tFDNY\uFF1A\u4E0B\u5E74\u9996\u65E5\tLDNY\uFF1A\u4E0B\u5E74\u5C3E\u65E5\n\u3010\u793A\u4F8B\u3011\uFF1AGetDate(\"LD\",\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-29\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "转字符串",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u7684\u5BF9\u8C61\u8F6C\u6362\u6210\u5B57\u7B26\u4E32\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToStringX(123)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"123\"",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "转日期时间",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u7684\u5BF9\u8C61\u8F6C\u6362\u6210\u65E5\u671F\u65F6\u95F4\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u65E5\u671F\u65F6\u95F4(System.OffsetDateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AToDateTime(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011: 2019-01-30T10:00+08:00",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "转布尔值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u503C\u8F6C\u6362\u6210\u7B49\u6548\u7684\u5E03\u5C14\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5E03\u5C14\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AToBoolean(\"True\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "转数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u6210\u5341\u8FDB\u5236\u6570\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5341\u8FDB\u5236\u6570\u503C(System.BigDecimal)\n\u3010\u793A\u4F8B\u3011\uFF1AToDecimal(\"40.23\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "转数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u6210\u5341\u8FDB\u5236\u6570\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5341\u8FDB\u5236\u6570\u503C(System.BigDecimal)\n\u3010\u793A\u4F8B\u3011\uFF1AToBigDecimal(\"40.23\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "转自定义精度数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "小数位数",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u6210\u6307\u5B9A\u7CBE\u5EA6\u7684\u5341\u8FDB\u5236\u6570\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010number\u3011\uFF1A\u5C0F\u6570\u4F4D\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5341\u8FDB\u5236\u6570\u503C(System.BigDecimal)\n\u3010\u793A\u4F8B\u3011\uFF1AToCustomBigDecimal(\"40.2,2\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.20",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "转双精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u6210\u53CC\u7CBE\u5EA6\u6D6E\u70B9\u6570\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u53CC\u7CBE\u5EA6\u6D6E\u70B9\u6570(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AToDouble(\"40.23\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "转单精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u6210\u5355\u7CBE\u5EA6\u6D6E\u70B9\u6570\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5355\u7CBE\u5EA6\u6D6E\u70B9\u6570(System.Float)\n\u3010\u793A\u4F8B\u3011\uFF1AToSingle(\"40.23\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "转单精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u6210\u5355\u7CBE\u5EA6\u6D6E\u70B9\u6570\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5355\u7CBE\u5EA6\u6D6E\u70B9\u6570(System.Float)\n\u3010\u793A\u4F8B\u3011\uFF1AToFloat(\"40.23\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "转8位无符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u62108\u4F4D\u65E0\u7B26\u53F7\u6574\u6570\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A8\u4F4D\u65E0\u7B26\u53F7\u6574\u6570(System.Byte)\n\u3010\u793A\u4F8B\u3011\uFF1AToByte(\"10\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "转16位有符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u621016\u4F4D\u6709\u7B26\u53F7\u6574\u6570\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A16\u4F4D\u6709\u7B26\u53F7\u6574\u6570(System.Int16)\n\u3010\u793A\u4F8B\u3011\uFF1AToInt16(\"10\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "转32位有符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u621032\u4F4D\u6709\u7B26\u53F7\u6574\u6570\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A32\u4F4D\u6709\u7B26\u53F7\u6574\u6570(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AToInt32(\"10\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "转中文大写金额",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6307\u5B9A\u5BF9\u8C61\u8F6C\u6362\u6210\u4E2D\u6587\u5927\u5199\u91D1\u989D\n\u3010obj\u3011\uFF1A\u5F85\u8F6C\u6362\u5BF9\u8C61\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToChineseMoney(40.23)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"\u8086\u62FE\u5143\u96F6\u8D30\u89D2\u53C1\u5206\"",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "获取会话变量的值",
            "params": [
                {
                    "key": "name",
                    "name": "会话变量名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u7528\u6237\u4F1A\u8BDD\u53D8\u91CF\u7684\u503C\n\u3010name\u3011\uFF1A\u4F1A\u8BDD\u53D8\u91CF\u540D\u79F0\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "获取上下文变量的值",
            "params": [
                {
                    "key": "name",
                    "name": "上下文变量名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u4E0A\u4E0B\u6587\u53D8\u91CF\u7684\u503C\n\u3010name\u3011\uFF1A\u4E0A\u4E0B\u6587\u53D8\u91CF\u540D\u79F0\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "根据属性名获取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u5C5E\u6027\u540D\u5F97\u5230JSON\u4E32\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\u79F0\n\u3010propertyName\u3011\u5C5E\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.String)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "根据属性名获取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u5C5E\u6027\u540D\u5F97\u5230JSON\u4E32\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\u79F0\n\u3010propertyName\u3011\u5C5E\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.String)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "根据注入名获获取注入对象",
            "params": [
                {
                    "key": "name",
                    "name": "注入名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u8FD0\u884C\u65F6\u6CE8\u5165\u7684\u5BF9\u8C61\n\u3010name\u3011\u6CE8\u5165\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "根据属性名获取属性值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u636E\u94FE\u5F0F\u5C5E\u6027\u540D\u83B7\u53D6\u5C5E\u6027\u503C\n\u3010chainedPropName\u3011\u94FE\u5F0F\u540D\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u5BF9\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "绝对值",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u4E00\u4E2A\u6570\u503C\u7684\u7EDD\u5BF9\u503C\n\u3010value\u3011\uFF1A\u8BA1\u7B97\u6570\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1Aabs(-1.5)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "四舍五入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u628A\u6570\u56DB\u820D\u4E94\u5165\u4E3A\u6307\u5B9A\u7CBE\u5EA6\u7684\u6570\u503C\n\u3010value1\u3011\uFF1A\u6570\u503C \n\u3010value2\u3011\uFF1A\u56DB\u820D\u4E94\u5165\u5C0F\u6570\u4F4D\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1A\nRound(1.52,1)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "四舍五入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u628A\u6570\u56DB\u820D\u4E94\u5165\u4E3A\u6307\u5B9A\u7CBE\u5EA6\u7684\u6570\u503C\n\u3010value1\u3011\uFF1A\u6570\u503C \n\u3010value2\u3011\uFF1A\u56DB\u820D\u4E94\u5165\u5C0F\u6570\u4F4D\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1Around(1.52,1)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "随机数",
            "params": [],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u968F\u673A\u751F\u6210\u5927\u4E8E\u7B49\u4E8E 0.0 \u4E14\u5C0F\u4E8E 1.0 \u7684\u4F2A\u968F\u673A\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1Arandom()\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0.624508349393",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "正弦",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u4E00\u4E2A\u6570\u5B57\u7684\u6B63\u5F26\u503C\n\u3010value\u3011\uFF1A\u8BA1\u7B97\u6570\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u4E00\u4E2A\u4EE5\u5F27\u5EA6\u8868\u793A\u7684\u89D2\n\u3010\u793A\u4F8B\u3011\uFF1Asin(1)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0.84187098",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "余弦",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u4E00\u4E2A\u6570\u5B57\u7684\u4F59\u5F26\u503C\n\u3010value\u3011\uFF1A\u8BA1\u7B97\u6570\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u4E00\u4E2A\u4EE5\u5F27\u5EA6\u8868\u793A\u7684\u89D2\n\u3010\u793A\u4F8B\u3011\uFF1Acos(3)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-0.9899924",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "向上舍入",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u5927\u4E8E\u6216\u7B49\u4E8E\u51FD\u6570\u53C2\u6570\uFF0C\u5E76\u4E14\u4E0E\u4E4B\u6700\u63A5\u8FD1\u7684\u6574\u6570\n\u3010value\u3011\uFF1A\u8BA1\u7B97\u6570\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1Aceil(3.2)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A4",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "向下舍入",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u5C0F\u4E8E\u6216\u7B49\u4E8E\u51FD\u6570\u53C2\u6570\uFF0C\u5E76\u4E14\u4E0E\u4E4B\u6700\u63A5\u8FD1\u7684\u6574\u6570\n\u3010value\u3011\uFF1A\u8BA1\u7B97\u6570\u503C\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1Afloor(3.2)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A3",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "银行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u94F6\u884C\u5BB6\u820D\u5165\u6807\u51C6\uFF0C\u628A\u6307\u5B9A\u6570\u5B57\u820D\u5165\u4E3A\u6700\u63A5\u8FD1\u7684\u6570\u5B57\n\u3010value1\u3011\uFF1A\u8981\u820D\u5165\u7684\u6570\u503C\n\u3010value2\u3011\uFF1A\u8981\u820D\u5165\u7684\u5C0F\u6570\u4F4D\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1ABankerRound(36.124,2)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A36.12",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "银行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u94F6\u884C\u5BB6\u820D\u5165\u6807\u51C6\uFF0C\u628A\u6307\u5B9A\u6570\u5B57\u820D\u5165\u4E3A\u6700\u63A5\u8FD1\u7684\u6570\u5B57\n\u3010value1\u3011\uFF1A\u8981\u820D\u5165\u7684\u6570\u503C\n\u3010value2\u3011\uFF1A\u8981\u820D\u5165\u7684\u5C0F\u6570\u4F4D\u6570\n\u3010\u8FD4\u56DE\u503C\u7C7B\u578B\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AbankerRound(36.124,2)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A36.12",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ],
    "en": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : Analyzing conditions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : Analyzing conditions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for loop",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "return operation",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "variable definitions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "true",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "false",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "StringSubstring",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "start",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "length",
                    "type": "int"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ARetrieve the substring in the original string, the substring starts from the specified character position and has the specified length\n\u3010original\u3011\uFF1Aoriginal string\n\u3010start\u3011\uFF1Astart index(start from 0)\n\u3010length\u3011\uFF1Alength\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AStringSubstring(\"ABCDEFG\",2,3)\n\u3010Return\u3011\uFF1A\"CDE\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "SubString",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "start",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "length",
                    "type": "int"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ARetrieve the substring in the original string, the substring starts from the specified character position and has the specified length\n\u3010original\u3011\uFF1Aoriginal string\n\u3010start\u3011\uFF1Astart index(start from 0)\n\u3010length\u3011\uFF1Alength\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ASubString(\"ABCDEFG\",2,3)\n\u3010Return\u3011\uFF1A\"CDE\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u83B7\u53D6\u6307\u5B9A\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010Return Type\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010Example\u3011\uFF1AStringLength(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010Return\u3011\uFF1A6",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "Length",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the length of the original string\n\u3010original\u3011\uFF1Aoriginal string\n\u3010Return Type\u3011\uFF1AInt32(System.Int32)\n\u3010Example\u3011\uFF1ALength(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010Return\u3011\uFF1A6",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "Contains",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether the original string contains the target string\n\u3010original\u3011\uFF1Aoriginal string\n\u3010target\u3011\uFF1Atarget string\n\u3010Return Type\u3011\uFF1ASystem.Boolean\n\u3010Example\u3011\uFF1AContains(salesorder.code,\"\u8868\u8FBE\u5F0F\")\n\u3010Return\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "StartsWith",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether the original string starts with the target string\n\u3010original\u3011\uFF1Aoriginal string\n\u3010target\u3011\uFF1Atarget string\n\u3010Return Type\u3011\uFF1ASystem.Boolean\n\u3010Example\u3011\uFF1AStartsWith(salesorder.code,\"\u5B50\u5355\u4F4D\")\n\u3010Return\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "EndsWith",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether the original string ends with the target string\n\u3010original\u3011\uFF1Aoriginal string\n\u3010target\u3011\uFF1Atarget string\n\u3010Return Type\u3011\uFF1ASystem.Boolean\n\u3010Example\u3011\uFF1AEndsWith(salesorder.code,\"\u5B50\u5355\u4F4D\")\n\u3010Return\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u4E2D\u7684\"\u88AB\u66FF\u6362\u503C\"\u66FF\u6362\u4E3A\"\u66FF\u6362\u503C\"\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010oldValue\u3011\uFF1A\u88AB\u66FF\u6362\u503C\n\u3010newValue\u3011\uFF1A\u66FF\u6362\u503C\n\u3010Return TypeReturn Type\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010Example\u3011\uFF1AStringReplace(\"123412\",\"12\",\"00\")\n\u3010Return\u3011\uFF1A\"003400\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "Replace",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "oldValue",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "newValue",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReplace the \"oldValue\" in the original string with \"newValue\"\n\u3010original\u3011\uFF1Aoriginal string\n\u3010oldValue\u3011\uFF1Areplaced old value\n\u3010newValue\u3011\uFF1Areplacement new value\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AReplace(\"123412\",\"12\",\"00\")\n\u3010Return\u3011\uFF1A\"003400\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5927\u5199\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010Return Type\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010Example\u3011\uFF1AStringToUpper(\"abc\")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "ToUpper",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the original string to uppercase\n\u3010original\u3011\uFF1Aoriginal string\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AToUpper(\"abc\")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1A\u5C06\u6E90\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5C0F\u5199\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010Return TypeReturn Type\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010Example\u3011\uFF1AStringToLower(\"ABC\")\n\u3010Return\u3011\uFF1A\"abc\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "ToLower",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the original string to lowercase\n\u3010original\u3011\uFF1Aoriginal string\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AToLower(\"ABC\")\n\u3010Return\u3011\uFF1A\"abc\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u68C0\u7D22\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u7B2C\u4E00\u4E2A\u5339\u914D\u7684\u5B57\u7B26\u4E32\u540E\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u5219\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6807\u5B57\u7B26\u4E32\u4E3A\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u4E3Anull\uFF0C\u5219\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010Return Type\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010Example\u3011\uFF1AStringIndexOf(\"12001234012\",\"01\")\n\u3010Return\u3011\uFF1A3\n\u3010Example\u3011\uFF1AStringIndexOf(\"12002323\",\"34\")\n\u3010Return\u3011\uFF1A-1\n\u3010Example\u3011\uFF1AStringIndexOf(\"120011\",\"\")\n\u3010Return\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "IndexOf",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AIn the original string, the target string is retrieved, and after the first matching string is found, its index position (starting from 0) is returned. If the target string is not found, -1 is returned, if the target string is an empty string, 0 is returned, if the original string is null, -1 is returned\n\u3010original\u3011\uFF1Aoriginal string\n\u3010target\u3011\uFF1Atarget string\n\u3010Return Type\u3011\uFF1AInt32(System.Int32)\n\u3010Example\u3011\uFF1AIndexOf(\"12001234012\",\"01\")\n\u3010Return\u3011\uFF1A3\n\u3010Example\u3011\uFF1AIndexOf(\"12002323\",\"34\")\n\u3010Return\u3011\uFF1A-1\n\u3010Example\u3011\uFF1AIndexOf(\"120011\",\"\")\n\u3010Return\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u68C0\u7D22\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u6700\u540E\u4E00\u4E2A\u5339\u914D\u7684\u5B57\u7B26\u4E32\u540E\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u4ECE0\u5F00\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6807\u5B57\u7B26\u4E32\uFF0C\u5219\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6807\u5B57\u7B26\u4E32\u4E3A\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u4E3Anull\uFF0C\u5219\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010value\u3011\uFF1A\u76EE\u6807\u5B57\u7B26\u4E32\n\u3010Return Type\u3011\uFF1A\u6570\u503C(System.Int32)\n\u3010Example\u3011\uFF1AStringLastIndexOf(\"12001234012\",\"01\")\n\u3010Return\u3011\uFF1A8\n\u3010Example\u3011\uFF1AStringLastIndexOf(\"12002323\",\"34\")\n\u3010Return\u3011\uFF1A-1\n\u3010Example\u3011\uFF1AStringLastIndexOf(\"120011\",\"\")\n\u3010Return\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "LastIndexOf",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AIn the original string, the target string is retrieved, and after the last matching string is found, its index position (starting from 0) is returned. If the target string is not found, -1 is returned, if the target string is an empty string, 0 is returned, if the original string is null, -1 is returned\n\u3010original\u3011\uFF1Aoriginal string\n\u3010value\u3011\uFF1Atarget string\n\u3010Return Type\u3011\uFF1AInt32(System.Int32)\n\u3010Example\u3011\uFF1ALastIndexOf(\"12001234012\",\"01\")\n\u3010Return\u3011\uFF1A8\n\u3010Example\u3011\uFF1ALastIndexOf(\"12002323\",\"34\")\n\u3010Return\u3011\uFF1A-1\n\u3010Example\u3011\uFF1ALastIndexOf(\"120011\",\"\")\n\u3010Return\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5934\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010Return Type\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010Example\u3011\uFF1AStringTrimStart(\"    ABC\")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "TrimStart",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADelete the head space of the original string\n\u3010original\u3011\uFF1Aoriginal string\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ATrimStart(\"    ABC\")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010Return TypeReturn Type\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010Example\u3011\uFF1AStringTrimEnd(\"ABC    \")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "TrimEnd",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ARemove trailing spaces from the original string\n\u3010original\u3011\uFF1Aoriginal string\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ATrimEnd(\"ABC    \")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5220\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5934\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010Return Type\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010Example\u3011\uFF1AStringTrim(\"    ABC    \")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "Trim",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADelete the leading and trailing spaces of the original string\n\u3010original\u3011\uFF1Aoriginal string\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ATrim(\"    ABC    \")\n\u3010Return\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "CreateGuid",
            "params": [],
            "description": "\u3010Function\u3011\uFF1AGet unique identification Guid\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ACreateGuid()\n\u3010Return\u3011\uFF1A\"7722A793-14DF-49CD-B7E7-DF4987YYD2\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1A\u5C06\u82E5\u5E72\u5B57\u7B26\u4E32\u62FC\u63A5\u6210\u4E00\u4E2A\u65B0\u5B57\u7B26\u4E32\uFF0C\u6700\u591A\u652F\u630110\u4E2A\u5B57\u7B26\u4E32\u62FC\u63A5\uFF0C\u6700\u5C112\u4E2A\uFF1B\u7F16\u8F91\u5668\u4E2D\u9ED8\u8BA4\u63D2\u5165\u4E24\u4E2A\uFF0C\u591A\u4E2A\u5B57\u7B26\u4E32\u53EF\u624B\u52A8\u6DFB\u52A0\n\u3010Return Type\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010Example\u3011\uFF1AStringAdd(\"Hello\",\"World\")\n\u3010Return\u3011\uFF1A\"HelloWord\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "Add",
            "params": [
                {
                    "key": "firstStr",
                    "name": "firstStr",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "secondStr",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConcatenate several strings into a new string, support up to 10 string concatenations, at least 2; two are inserted by default in the editor, and multiple strings can be added manually\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AAdd(\"Hello\",\"World\")\n\u3010Return\u3011\uFF1A\"HelloWord\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "SumByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ACount the sum of a certain attribute\n\u3010chainedPropName\u3011\uFF1ACorresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n\u3010propertyName\u3011\uFF1AType attribute name;\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1ASumByProp(\"Order.OrderItems\",\"Quantity\")\"",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "CountByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ACount the number of records in the table where the specified field is located\n\u3010chainedPropName\u3011\uFF1ACorresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n\u3010propertyName\u3011\uFF1AType attribute name\n\u3010Return Type\u3011\uFF1AInt32(System.Int32);\n\u3010Example\u3011\uFF1ACountByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "AvgByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ACount the average value of a numeric column\n\u3010chainedPropName\u3011\uFF1ACorresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n\u3010propertyName\u3011\uFF1AType attribute name\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1AAvgByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "MaxByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ACount the maximum value of a numeric column\n\u3010chainedPropName\u3011\uFF1ACorresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n\u3010propertyName\u3011\uFF1AType attribute name\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1AMaxByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "MinByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ACount the minimum value of a numeric column\n\u3010chainedPropName\u3011\uFF1ACorresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n\u3010propertyName\u3011\uFF1AType attribute name\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1AMinByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "IsNull",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether the specified object is null(null)\n\u3010obj\u3011\uFF1AObject to be detected\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010ExampleExample\u3011\uFF1AIsNull(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010Return\u3011\uFF1AFalse",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "IsNullOrWhiteSpace",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether the specified string is null, empty or only composed of spaces\n\u3010obj\u3011\uFF1AString to be judged\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AIsNullOrWhiteSpace(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\n\u3010Return\u3011\uFF1AFalse\n\u3010Example\u3011\uFF1AIsNullOrWhiteSpace(null)\n\u3010Return\u3011\uFF1ATrue\n\u3010Example\u3011\uFF1A\nIsNullOrWhiteSpace(\" \")\u3010Return\u3011\uFF1ATrue",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "IsNaN",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether the specified object can be converted into a number(System.Double)\n\u3010obj\u3011\uFF1AObject to be detected\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AIsNaN(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\u3010Return\u3011\uFF1ATrue\n\u3010Example\u3011\uFF1AIsNaN(12.3)\u3010Return\u3011\uFF1AFalse\n\u3010Example\u3011\uFF1A\nIsNaN(\"123\")\u3010Return\u3011\uFF1AFalse",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "IsNumber",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether the specified object can be converted into a number(System.Double)\n\u3010obj\u3011\uFF1AObject to be detected\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AIsNumber(\"\u8BED\u4E49\u5316\u8868\u8FBE\u5F0F\")\u3010Return\u3011\uFF1AFalse\n\u3010Example\u3011\uFF1AIsNumber(12.3)\u3010Return\u3011\uFF1ATrue\n\u3010Example\u3011\uFF1A\nIsNumber(\"123\")\u3010Return\u3011\uFF1ATrue",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "IsExistRecord",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether there is a value equal to the matching character in the specified field set of the table according to the chain name\n\u3010chainedPropName\u3011chainedPropName\n\u3010propertyName\u3011propertyName\n\u3010match\u3011match value\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AIsExistRecord(\"salesorder.items\",\"code\",\"lc\")\n\u3010Return\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "ListGreaterThan",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "double"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether there is a value greater than the matching character in the specified field set of the table according to the chain name\n\u3010chainedPropName\u3011chainedPropName\n\u3010propertyName\u3011propertyName\n\u3010match\u3011march value\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AListGreaterThan(\"salesorder.items\",\"num\",100)\n\u3010Return\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "ListLessThan",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "double"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ADetermine whether there is a value less than the matching character in the specified field set of the table according to the chain name\n\u3010chainedPropName\u3011chainedPropName\n\u3010propertyName\u3011propertyName\n\u3010match\u3011match value\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AListLessThan(\"salesorder.items\",\"num\",100)\n\u3010Return\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "ListStartWith",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AAccording to the chain name, determine whether there is a value with a matching character at the beginning of the specified field set of the table\n\u3010chainedPropName\u3011chainedPropName\n\u3010propertyName\u3011propertyName\n\u3010match\u3011match value\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AListStartWith(\"salesorder.items\",\"code\",\"lc\")\n\u3010Return\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "ListEndWith",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AAccording to the chain name, determine whether there is a value whose ending is a matching character in the specified field set of the table\n\u3010chainedPropName\u3011chainedPropName\n\u3010propertyName\u3011propertyName\n\u3010match\u3011match value\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AListEndWith(\"salesorder.items\",\"code\",\"lc\")\n\u3010Return\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "DateTimeAddDays",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AAdd the specified number of days to the specified date\n\u3010date\u3011\uFF1Adate time\n\u3010value\u3011\uFF1AIncrease the number of days\n\u3010Return Type\u3011\uFF1ADateTime(System.DateTime)\n\u3010Example\u3011\uFF1ADateTimeAddDays(\"2019-01-30T10:00:00+08:00\",2)\n\u3010Return\u3011:2019-02-01T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "DateTimeAddYears",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AAdd the specified number of years to the specified date and time\n\u3010date\u3011\uFF1Adate time\n\u3010value\u3011\uFF1AIncrease the number of years\n\u3010Return Type\u3011\uFF1ADateTime(System.DateTime)\n\u3010Example\u3011\uFF1ADateTimeAddYears(\"2019-01-30T10:00:00+08:00\",2)\n\u3010Return\u3011:2021-01-30T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "DateTimeAddMonths",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AAdd the specified number of months to the specified date and time\n\u3010date\u3011\uFF1Adate time\n\u3010value\u3011\uFF1AIncrease the number of months\n\u3010Return Type\u3011\uFF1ADateTime(System.DateTime)\n\u3010ExampleExample\u3011\uFF1ADateTimeAddMonths(\"2019-01-30T10:00:00+08:00\",1)\n\u3010Return\u3011:2019-02-28T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "GetFirstDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the date of the first day of the month where the specified date time value is\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1ADateTime(System.DateTime)\n\u3010Example\u3011\uFF1AGetFirstDayOfMonth(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011:2019-01-01T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "GetLastDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the date of the last day of the month in which the specified date and time value is located\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1ADateTime(System.DateTime)\n\u3010Example\u3011\uFF1AGetLastDayOfMonth(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011:2019-01-31T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "GetDateTimeNow",
            "params": [],
            "description": "\u3010Function\u3011\uFF1AGet the current date and time\n\u3010Return Type\u3011\uFF1ADateTime(System.DateTime)\n\u3010Example\u3011\uFF1AGetDateTimeNow()\n\u3010Return\u3011:2019-01-30T12:00:00.000+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "CompareDate",
            "params": [
                {
                    "key": "str1",
                    "name": "date1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "date2",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ACompare two time values and return a value indicating whether the first time is an integer that is earlier than, equal to, or later than the second time\n\u3010str1\u3011\uFF1Adate time 1\n\u3010str2\u3011\uFF1Adate time 2\n\u3010Return Type\u3011\uFF1AInt32(System.Int32)\n\tDate 1 is earlier than date 2, return -1\n\tdate 1 is equal to date 2, return 0\n\tdate 1 is later than date 2, return 1\n\u3010Example\u3011\uFF1ACompareDate(\"2019-01-30T10:00:00+08:00\",\"2019-02-01T10:00:00+08:00\")\n\u3010Return\u3011\uFF1A-1",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "FormatDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AUse the specified format to convert the current date and time value to its equivalent string representation\n\u3010format\u3011\uFF1AFormat string\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFormatDate(\"yyyy-MM-dd HH:mm:ss\")\n\u3010Return\u3011\uFF1A\"2019-01-30 01:00:00\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "FormatDefineDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AUse the specified format to convert the specified date and time value to its equivalent string representation\n\u3010format\u3011\uFF1AFormat string\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFormatDefineDate(\"yyyy-MM-dd HH:mm:ss\",\"2019-01-30 01:00:00\")\n\u3010Return\u3011\uFF1A\"2019-01-30 01:00:00\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "Today",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns today of the specified date, in the format \"yyyy-MM-dd\", if no parameters are passed, it will return today as the current system date by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AToday(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-30\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "Yesterday",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the yesterday of the specified date, the format is \"yyyy-MM-dd\", if no parameters are passed, it will return yesterday of the current system date by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AYesterday(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-29\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "Tomorrow",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn tomorrow of the specified date, the format is \"yyyy-MM-dd\", if no parameters are passed, it will return tomorrow of the current system date by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ATomorrow(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "ThisYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the current year of the specified date, the format is \"yyyy\", if no parameters are passed, the current year of the current system date will be returned by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AThisYear(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "LastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last year of the specified date, the format is \"yyyy\", if no parameters are passed, it will return the last year of the current system date by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastYear(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2018\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "NextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the next year of the specified date, the format is \"yyyy\", if no parameters are passed, the next year of the current system date will be returned by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ANextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2020\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "ThisMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the current month of the specified date, the format is \"MM\", if no parameters are passed, the current month of the current system date will be returned by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AThisMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"1\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "LastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the previous month of the specified date, the format is \"MM\", if no parameters are passed, the default returns the previous month of the current system date\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastMonth(\"2019-02-30 01:00:00\")\n\u3010Return\u3011\uFF1A\"1\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "NextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the next month of the specified date, the format is \"MM\", if no parameter is passed, the next month of the current system date will be returned by default\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ANextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "ThisWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the week of the specified date in the current year, in the form of \"ww\". If no parameter is passed, the default will return the current system date in the first week of the year. Note that if the date at the end of December is the same as January If the 1st falls in the same week, return to the first week\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AThisWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"5\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "LastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last week of the specified date, the format is \"ww\", if no parameter is passed, it will default to the last week of the current system date. Note that if the specified date is in the first week of this year, the last week will be the last week of last year\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"4\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "NextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the next week of the specified date, the format is \"ww\". If no parameter is passed, the next week of the current system date will be returned by default. Note that if the specified date is in the last week of the year, the next week will be 1\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ANextWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"6\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "DayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the specified date is the day of the week of the current week, the format is \"n\", if no parameter is passed, the default return current system date is the day of the week of the week. Note that it returns not the English abbreviation, but the number form. According to Chinese custom, Monday is the first day of the week, Return is 1, Sunday is the end of the week, and Return is 7\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ADayOfWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"3\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "FirstDayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the first day of the week of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the first day of the week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-28\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "LastDayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the week of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the first day of the week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-02-03\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "FirstDayOfLastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the last week of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the first day of the last week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n\u3010date\u3011: date time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfLastWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-21\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "LastDayOfLastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the last week of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, it will default to the last day of the last week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfLastWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-27\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "FirstDayOfNextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the next week of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, it will default to the first day of the next week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfNextWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-02-04\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "LastDayOfNextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the next week of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the default returns the last day of the next week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfNextWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-02-10\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "FirstDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the month of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the first day of the month of the current system date will be returned by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "LastDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the month of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the last day of the month of the current system date will be returned by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "FirstDayOfLastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the previous month of the specified date, in the format \"yyyy-MM-dd\". If no parameters are passed, the first day of the previous month of the current system date will be returned by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfLastMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2018-12-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "LastDayOfLastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the previous month of the specified date, the format is \"yyyy-MM-dd\", if no parameters are passed, the default returns the last day of the previous month of the current system date.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfLastMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2018-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "FirstDayOfNextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the next month of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, it will default to the first day of the next month of the current system date.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfNextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-02-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "LastDayOfNextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the next month of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, it will default to the last day of the next month of the current system date.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfNextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-02-28\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "FirstDayOfYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the current year of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the first day of the current year of the current system date will be returned by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfYear(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "LastDayOfYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the current year of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the last day of the current year of the current system date will be returned by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfYear(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "FirstDayOfLastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the previous year of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the first day of the previous year of the current system date will be returned by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfLastYear(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2018-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "LastDayOfLastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the previous year of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, the last day of the previous year of the current system date will be returned by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfLastYear(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2018-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "FirstDayOfNextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the first day of the next year of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, it will return the first day of the next year of the current system date by default.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AFirstDayOfNextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2020-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "LastDayOfNextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the last day of the next year of the specified date in the format \"yyyy-MM-dd\". If no parameters are passed, it will default to the last day of the next year of the current system date.\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1ALastDayOfNextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2020-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "GetDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturn the date in the specified format. If no parameters are passed, it will return the date in the specified format of the current system date by default.\n\u3010format\u3011\uFF1A\u683C\u5F0F\u5316\u4E32\n\u3010date\u3011\uFF1Adate time\n\u3010Return Type\u3011\uFF1AString(System.String)\n\tDD\uFF1AToday\tLD\uFF1AYesterday\tND\uFF1ATomorrow\n\tYY\uFF1AThis year\tLY\uFF1ALast year\tNY\uFF1ANext year\n\tMM\uFF1AThis month\tLM\uFF1ALast month\tNM\uFF1ANext month\n\tWD\uFF1ADay of the week\n\tWW\uFF1AThis week\tLW\uFF1ALast week\tNW\uFF1ANext week\n\tFDW\uFF1AFirst day of this week\tLDW\uFF1AEnd of this week\n\tFDLW\uFF1AFirst day of last week\tLDLW\uFF1AEnd of the last week\n\tFDNW\uFF1AFirst day of next week\tLDNW\uFF1AEnd of next week\n\tFDM\uFF1AFirst day of this month\tLDM\uFF1AEnd of this month\n\tFDLM\uFF1AFirst day of last month\tLDLM\uFF1AEnd of last month\n\tFDNM\uFF1AFirst day of next month\tLDNM\uFF1AEnd of next month\n\tFDY\uFF1AFirst day of this year\tLDY\uFF1And of this year\n\tFDLY\uFF1AFirst day of last year\tLDLY\uFF1AEnd of last year\n\tFDNY\uFF1AFirst day of next year\tLDNY\uFF1AEnd of next year\n\u3010Example\u3011\uFF1AGetDate(\"LD\",\"2019-01-30T01:00:00+08:00\")\n\u3010Return\u3011\uFF1A\"2019-01-29\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "ToStringX",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a string\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AToStringX(123)\n\u3010Return\u3011\uFF1A\"123\"",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "ToDateTime",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into date time\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AOffsetDateTime(System.OffsetDateTime)\n\u3010Example\u3011\uFF1AToDateTime(\"2019-01-30T10:00:00+08:00\")\n\u3010Return\u3011: 2019-01-30T10:00+08:00",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "ToBoolean",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object value into an equivalent boolean value\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1ABoolean(System.Boolean)\n\u3010Example\u3011\uFF1AToBoolean(\"True\")\n\u3010Return\u3011\uFF1Atrue",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "ToDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a decimal value\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1ABigDecimal(System.BigDecimal)\n\u3010Example\u3011\uFF1AToDecimal(\"40.23\")\n\u3010Return\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "ToBigDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a BigDecimal value\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1ABigDecimal(System.BigDecimal)\n\u3010Example\u3011\uFF1AToBigDecimal(\"40.23\")\n\u3010Return\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "ToCustomBigDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "number",
                    "type": "int"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a decimal value of the specified precision\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010number\u3011\uFF1ADecimal places\n\u3010Return Type\u3011\uFF1ABigDecimal(System.BigDecimal)\n\u3010Example\u3011\uFF1AToCustomBigDecimal(\"40.2,2\")\n\u3010Return\u3011\uFF1A40.20",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "ToDouble",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a double value\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1AToDouble(\"40.23\")\n\u3010Return\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "ToSingle",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a single value\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AFloat(System.Float)\n\u3010Example\u3011\uFF1AToSingle(\"40.23\")\n\u3010Return\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "ToFloat",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a float value\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AFloat(System.Float)\n\u3010Example\u3011\uFF1AToFloat(\"40.23\")\n\u3010Return\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "ToByte",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a byte\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AByte(System.Byte)\n\u3010Example\u3011\uFF1AToByte(\"10\")\n\u3010Return\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "ToInt16",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a Int16\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AInt16(System.Int16)\n\u3010Example\u3011\uFF1AToInt16(\"10\")\n\u3010Return\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "ToInt32",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into a Int32\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AInt32(System.Int32)\n\u3010Example\u3011\uFF1AToInt32(\"10\")\n\u3010Return\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "ToChineseMoney",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AConvert the specified object into Chinese uppercase amount\n\u3010obj\u3011\uFF1AObject to be converted\n\u3010Return Type\u3011\uFF1AString(System.String)\n\u3010Example\u3011\uFF1AToChineseMoney(40.23)\n\u3010Return\u3011\uFF1A\"\u8086\u62FE\u5143\u96F6\u8D30\u89D2\u53C1\u5206\"",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "GetSessionValue",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the value of the user session variable\n\u3010name\u3011\uFF1Athe user session variable\n\u3010Return Type\u3011\uFF1AObject(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "GetContextParameter",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the value of the context variable\n\u3010name\u3011\uFF1Athe context variable\n\u3010Return Type\u3011\uFF1AObject(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "getComputeJsonData",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the JSON string according to the chain attribute name\n\u3010chainedPropName\u3011chainedPropName\n\u3010propertyName\u3011propertyName\n\u3010Return Type\u3011\uFF1AObject(System.String)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "GetComputeJsonData",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the JSON string according to the chain attribute name\n\u3010chainedPropName\u3011chainedPropName\n\u3010propertyName\u3011propertyName\n\u3010Return Type\u3011\uFF1AObject(System.String)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "GetInjectedEntity",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the object injected at runtime\n\u3010name\u3011Injection name\n\u3010Return Type\u3011\uFF1AObject(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "GetChainedPropertyValue",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AGet the attribute value based on the chained attribute name\n\u3010chainedPropName\u3011chainedPropName\n\u3010Return Type\u3011\uFF1AObject(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "abs",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the absolute value of a number\n\u3010value\u3011\uFF1Avalue\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1Aabs(-1.5)\n\u3010Return\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "Round",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ARounds the number to the specified precision\n\u3010value1\u3011\uFF1Avalue \n\u3010value2\u3011\uFF1ARound off decimal places\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1A\nRound(1.52,1)\n\u3010Return\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "round",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": "\u3010Function\u3011\uFF1ARounds the number to the specified precision\n\u3010value1\u3011\uFF1Avalue \n\u3010value2\u3011\uFF1ARound off decimal places\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1Around(1.52,1)\n\u3010Return\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "random",
            "params": [],
            "description": "\u3010Function\u3011\uFF1ARandomly generate a pseudo-random value greater than or equal to 0.0 and less than 1.0\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1Arandom()\n\u3010Return\u3011\uFF1A0.624508349393",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "sin",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the sine of a number\n\u3010value\u3011\uFF1Avalue\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\nAn angle expressed in radians\n\u3010Example\u3011\uFF1Asin(1)\n\u3010Return\u3011\uFF1A0.84187098",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "cos",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the cosine of a number\n\u3010value\u3011\uFF1Avalue\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\nAn angle expressed in radians\n\u3010Example\u3011\uFF1Acos(3)\n\u3010Return\u3011\uFF1A-0.9899924",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "ceil",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the integer that is greater than or equal to the function parameter and closest to it\n\u3010value\u3011\uFF1Avalue\n\u3010Return Type\u3011\uFF1AInt32(System.Int32)\n\u3010Example\u3011\uFF1Aceil(3.2)\n\u3010Return\u3011\uFF1A4",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "floor",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AReturns the integer that is less than or equal to the function parameter and closest to it\n\u3010value\u3011\uFF1Avalue\n\u3010Return Type\u3011\uFF1AInt32(System.Int32)\n\u3010Example\u3011\uFF1Afloor(3.2)\n\u3010Return\u3011\uFF1A3",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "BankerRound",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": "\u3010Function\u3011\uFF1A\u4F7F\u7528\u94F6\u884C\u5BB6\u820D\u5165\u6807\u51C6\uFF0C\u628A\u6307\u5B9A\u6570\u5B57\u820D\u5165\u4E3A\u6700\u63A5\u8FD1\u7684\u6570\u5B57\n\u3010value1\u3011\uFF1A\u8981\u820D\u5165\u7684\u6570\u503C\n\u3010value2\u3011\uFF1A\u8981\u820D\u5165\u7684\u5C0F\u6570\u4F4D\u6570\n\u3010Return Type\u3011\uFF1A\u6570\u503C(System.Double)\n\u3010Example\u3011\uFF1ABankerRound(36.124,2)\n\u3010Return\u3011\uFF1A36.12",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "bankerRound",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": "\u3010Function\u3011\uFF1AUse the banker's rounding standard to round the specified number to the nearest number\n\u3010value1\u3011\uFF1AThe value to be rounded\n\u3010value2\u3011\uFF1ANumber of decimal places to round\n\u3010Return Type\u3011\uFF1ADouble(System.Double)\n\u3010Example\u3011\uFF1AbankerRound(36.124,2)\n\u3010Return\u3011\uFF1A36.12",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ],
    "zh-CHT": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : 判斷條件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : 判斷條件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for循環",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "返回操作",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "變量定義",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "正確",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "錯誤",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "長度",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\u6AA2\u7D22\u5B50\u5B57\u7B26\u4E32\uFF0C\u5B50\u5B57\u7B26\u4E32\u5F9E\u6307\u5B9A\u7684\u5B57\u7B26\u4F4D\u7F6E\u958B\u59CB\u4E14\u5177\u6709\u6307\u5B9A\u7684\u9577\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010start\u3011\uFF1A\u8D77\u59CB\u4F4D\u7F6E(\u5F9E0\u958B\u59CB)\n\u3010length\u3011\uFF1A\u9577\u5EA6\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringSubstring(\"ABCDEFG\",2,3)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"CDE\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "長度",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\u6AA2\u7D22\u5B50\u5B57\u7B26\u4E32\uFF0C\u5B50\u5B57\u7B26\u4E32\u5F9E\u6307\u5B9A\u7684\u5B57\u7B26\u4F4D\u7F6E\u958B\u59CB\u4E14\u5177\u6709\u6307\u5B9A\u7684\u9577\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010start\u3011\uFF1A\u8D77\u59CB\u4F4D\u7F6E(\u5F9E0\u958B\u59CB)\n\u3010length\u3011\uFF1A\u9577\u5EA6\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ASubString(\"ABCDEFG\",2,3)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"CDE\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串長度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u6307\u5B9A\u5B57\u7B26\u4E32\u7684\u9577\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AStringLength(\"\u8A9E\u7FA9\u5316\u8868\u9054\u5F0F\")\n \u3010\u8FD4\u56DE\u503C\u3011\uFF1A6",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "取字符串長度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u6307\u5B9A\u5B57\u7B26\u4E32\u7684\u9577\u5EA6\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1ALength(\"\u8A9E\u7FA9\u5316\u8868\u9054\u5F0F\")\n \u3010\u8FD4\u56DE\u503C\u3011\uFF1A6",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "是否包含",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65B7\u6E90\u5B57\u7B26\u4E32\u4E2D\u662F\u5426\u5305\u542B\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1ASystem.Boolean\n\u3010\u793A\u4F8B\u3011\uFF1AContains (salesorder.code,\"\u8868\u9054\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "開頭是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65B7\u6E90\u5B57\u7B26\u4E32\u662F\u5426\u4EE5\u76EE\u6A19\u5B57\u7B26\u4E32\u958B\u982D\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1ASystem.Boolean\n\u3010\u793A\u4F8B\u3011\uFF1AStartsWith (salesorder.code,\"\u5B50\u55AE\u4F4D\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "結尾是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65B7\u6E90\u5B57\u7B26\u4E32\u662F\u5426\u4EE5\u76EE\u6A19\u5B57\u7B26\u4E32\u7D50\u5C3E\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1ASystem.Boolean\n\u3010\u793A\u4F8B\u3011\uFF1AEndsWith (salesorder.code,\"\u5B50\u55AE\u4F4D\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替換",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替換值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替換值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6E90\u5B57\u7B26\u4E32\u4E2D\u7684\"\u88AB\u66FF\u63DB\u503C\"\u66FF\u63DB\u70BA\"\u66FF\u63DB\u503C\"\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010oldValue\u3011\uFF1A\u88AB\u66FF\u63DB\u503C\n\u3010newValue\u3011\uFF1A\u66FF\u63DB\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringReplace(\"123412\",\"12\",\"00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"003400\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "字符串替換",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替換值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替換值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6E90\u5B57\u7B26\u4E32\u4E2D\u7684\"\u88AB\u66FF\u63DB\u503C\"\u66FF\u63DB\u70BA\"\u66FF\u63DB\u503C\"\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010oldValue\u3011\uFF1A\u88AB\u66FF\u63DB\u503C\n\u3010newValue\u3011\uFF1A\u66FF\u63DB\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AReplace(\"123412\",\"12\",\"00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"003400\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "轉大寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6E90\u5B57\u7B26\u4E32\u8F49\u63DB\u70BA\u5927\u5BEB\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringToUpper(\"abc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "轉大寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6E90\u5B57\u7B26\u4E32\u8F49\u63DB\u70BA\u5927\u5BEB\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToUpper(\"abc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "轉小寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6E90\u5B57\u7B26\u4E32\u8F49\u63DB\u70BA\u5C0F\u5BEB\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringToLower(\"ABC\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"abc\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "轉小寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6E90\u5B57\u7B26\u4E32\u8F49\u63DB\u70BA\u5C0F\u5BEB\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToLower(\"ABC\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"abc\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "獲取首個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u6AA2\u7D22\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u7B2C\u4E00\u500B\u5339\u914D\u7684\u5B57\u7B26\u4E32\u5F8C\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u5F9E0\u958B\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u5247\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6A19\u5B57\u7B26\u4E32\u70BA\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u70BAnull\uFF0C\u5247\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AStringIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A3\n\u3010\u793A\u4F8B\u3011\uFF1AStringIndexOf(\"12002323 \",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1AStringIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "獲取首個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u6AA2\u7D22\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u7B2C\u4E00\u500B\u5339\u914D\u7684\u5B57\u7B26\u4E32\u5F8C\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u5F9E0\u958B\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u5247\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6A19\u5B57\u7B26\u4E32\u70BA\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u70BAnull\uFF0C\u5247\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010target\u3011\uFF1A\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A3\n\u3010\u793A\u4F8B\u3011\uFF1AIndexOf(\"12002323 \",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1AIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "獲取最後一個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u6AA2\u7D22\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u6700\u5F8C\u4E00\u500B\u5339\u914D\u7684\u5B57\u7B26\u4E32\u5F8C\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u5F9E0\u958B\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u5247\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6A19\u5B57\u7B26\u4E32\u70BA\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u70BAnull\uFF0C\u5247\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010value\u3011\uFF1A\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AStringLastIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A8\n\u3010\u793A\u4F8B\u3011\uFF1AStringLastIndexOf(\"12002323 \",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1AStringLastIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "獲取最後一個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6E90\u5B57\u7B26\u4E32\u4E2D\uFF0C\u6AA2\u7D22\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u627E\u5230\u6700\u5F8C\u4E00\u500B\u5339\u914D\u7684\u5B57\u7B26\u4E32\u5F8C\uFF0C\u8FD4\u56DE\u5176\u7D22\u5F15\u4F4D\u7F6E(\u5F9E0\u958B\u59CB)\u3002\u5982\u679C\u672A\u627E\u5230\u76EE\u6A19\u5B57\u7B26\u4E32\uFF0C\u5247\u8FD4\u56DE-1\uFF0C\u5982\u679C\u76EE\u6A19\u5B57\u7B26\u4E32\u70BA\u7A7A\u4E32\uFF0C\u8FD4\u56DE0\uFF0C\u5982\u679C\u539F\u5B57\u7B26\u4E32\u70BAnull\uFF0C\u5247\u8FD4\u56DE-1\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010value\u3011\uFF1A\u76EE\u6A19\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1ALastIndexOf(\"12001234012\",\"01\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A8\n\u3010\u793A\u4F8B\u3011\uFF1ALastIndexOf(\"12002323 \",\"34\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1\n\u3010\u793A\u4F8B\u3011\uFF1ALastIndexOf(\"120011\",\"\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "刪除頭部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u522A\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u982D\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringTrimStart(\" ABC\")\n \u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "刪除頭部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u522A\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u982D\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATrimStart(\" ABC\")\n \u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "刪除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u522A\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringTrimEnd(\"ABC \")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "刪除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u522A\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATrimEnd(\"ABC \")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "刪除頭尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u522A\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u982D\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringTrim(\" ABC \")\n \u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "刪除頭尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u522A\u9664\u6E90\u5B57\u7B26\u4E32\u7684\u982D\u5C3E\u90E8\u7A7A\u683C\n\u3010original\u3011\uFF1A\u6E90\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATrim(\" ABC \")\n \u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"ABC\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "唯一標識符",
            "params": [],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u552F\u4E00\u6A19\u8B58\u7B26Guid\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ACreateGuid()\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"7722A793-14DF-49CD-B7E7-DF4987YYD2 \"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一個字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二個字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u82E5\u5E72\u5B57\u7B26\u4E32\u62FC\u63A5\u6210\u4E00\u500B\u65B0\u5B57\u7B26\u4E32\uFF0C\u6700\u591A\u652F\u630110\u500B\u5B57\u7B26\u4E32\u62FC\u63A5\uFF0C\u6700\u5C112\u500B\uFF1B\u7DE8\u8F2F\u5668\u4E2D\u9ED8\u8A8D\u63D2\u5165\u5169\u500B\uFF0C\u591A\u500B\u5B57\u7B26\u4E32\u53EF\u624B\u52D5\u6DFB\u52A0\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AStringAdd(\"Hello\",\"World\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"HelloWord\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一個字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二個字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u82E5\u5E72\u5B57\u7B26\u4E32\u62FC\u63A5\u6210\u4E00\u500B\u65B0\u5B57\u7B26\u4E32\uFF0C\u6700\u591A\u652F\u630110\u500B\u5B57\u7B26\u4E32\u62FC\u63A5\uFF0C\u6700\u5C112\u500B\uFF1B\u7DE8\u8F2F\u5668\u4E2D\u9ED8\u8A8D\u63D2\u5165\u5169\u500B\uFF0C\u591A\u500B\u5B57\u7B26\u4E32\u53EF\u624B\u52D5\u6DFB\u52A0\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AAdd(\"Hello\",\"World\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"HelloWord\"",
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "按屬性求和",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7D71\u8A08\u67D0\u4E00\u5C6C\u6027\u7684\u548C\n\u3010chainedPropName\u3011\uFF1A\u5C0D\u61C9\u5BE6\u9AD4\u96C6\u5408\u7684\u5C6C\u6027\u540D,\u934A\u5F0F\u5F62\u5F0F\u7D44\u7E54\u5728\u4E00\u8D77\u7684\u5C6C\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u985E\u578B\u5C6C\u6027\u540D;\n \u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1ASumByProp(\"Order.OrderItems\",\"Quantity\")\"",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "列行數",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7D71\u8A08\u6307\u5B9A\u5B57\u6BB5\u6240\u5728\u8868\u7684\u8A18\u9304\u6578\n\u3010chainedPropName\u3011\uFF1A\u5C0D\u61C9\u5BE6\u9AD4\u96C6\u5408\u7684\u5C6C\u6027\u540D,\u934A\u5F0F\u5F62\u5F0F\u7D44\u7E54\u5728\u4E00\u8D77\u7684\u5C6C\u6027\u540D,\u4F8B\u5982\uFF1AOrder.OrderItems\n\u3010propertyName\u3011\uFF1A\u985E\u578B\u5C6C\u6027\u540D n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32);\n\u3010\u793A\u4F8B\u3011\uFF1ACountByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "列平均值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7D71\u8A08\u67D0\u4E00\u6578\u503C\u5217\u7684\u5E73\u5747\u503C\n\u3010chainedPropName\u3011\uFF1A\u5C0D\u61C9\u5BE6\u9AD4\u96C6\u5408\u7684\u5C6C\u6027\u540D,\u934A\u5F0F\u5F62\u5F0F\u7D44\u7E54\u5728\u4E00\u8D77\u7684\u5C6C\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u985E\u578B\u5C6C\u6027\u540D n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AAvgByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "列最大值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7D71\u8A08\u67D0\u4E00\u6578\u503C\u5217\u7684\u6700\u5927\u503C\n\u3010chainedPropName\u3011\uFF1A\u5C0D\u61C9\u5BE6\u9AD4\u96C6\u5408\u7684\u5C6C\u6027\u540D,\u934A\u5F0F\u5F62\u5F0F\u7D44\u7E54\u5728\u4E00\u8D77\u7684\u5C6C\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u985E\u578B\u5C6C\u6027\u540D\n \u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AMaxByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "列最小值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7D71\u8A08\u67D0\u4E00\u6578\u503C\u5217\u7684\u6700\u5C0F\u503C\n\u3010chainedPropName\u3011\uFF1A\u5C0D\u61C9\u5BE6\u9AD4\u96C6\u5408\u7684\u5C6C\u6027\u540D,\u934A\u5F0F\u5F62\u5F0F\u7D44\u7E54\u5728\u4E00\u8D77\u7684\u5C6C\u6027\u540D,\u4F8B\u5982:Order.OrderItems\n\u3010propertyName\u3011\uFF1A\u985E\u578B\u5C6C\u6027\u540D n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AMinByProp(\"Order.OrderItems\",\"Quantity\")",
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "是空值",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65B7\u6307\u5B9A\u7684\u5C0D\u50CF\u662F\u5426\u70BA\u7A7A\u503C(null)\n\u3010obj\u3011\uFF1A\u8981\u6AA2\u6E2C\u7684\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5E03\u723E\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsNull(\"\u8A9E\u7FA9\u5316\u8868\u9054\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "是空串",
            "params": [
                {
                    "key": "obj",
                    "name": "待判斷字符串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65B7\u6307\u5B9A\u7684\u5B57\u7B26\u4E32\u662F\u5426\u70BAnull\u3001\u7A7A\u9084\u662F\u50C5\u6709\u7A7A\u683C\u7D44\u6210\n\u3010obj\u3011\uFF1A\u8981\u5224\u65B7\u7684\u5B57\u7B26\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5E03\u723E\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011 \uFF1AIsNullOrWhiteSpace(\"\u8A9E\u7FA9\u5316\u8868\u9054\u5F0F\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse\n\u3010\u793A\u4F8B\u3011\uFF1AIsNullOrWhiteSpace(null)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue\n\u3010\u793A\u4F8B\u3011\uFF1A\nIsNullOrWhiteSpace(\" \")\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "非數字",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65B7\u6307\u5B9A\u7684\u5C0D\u50CF\u662F\u5426\u53EF\u4EE5\u8F49\u63DB\u6210\u6578\u5B57(System.Double)\n\u3010obj\u3011\uFF1A\u8981\u6AA2\u6E2C\u7684\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5E03\u723E\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsNaN (\"\u8A9E\u7FA9\u5316\u8868\u9054\u5F0F\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue\n\u3010\u793A\u4F8B\u3011\uFF1AIsNaN(12.3)\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse\n\u3010\u793A\u4F8B\u3011\uFF1A\nIsNaN(\"123\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "是數字",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5224\u65B7\u6307\u5B9A\u7684\u5C0D\u50CF\u662F\u5426\u53EF\u4EE5\u8F49\u63DB\u6210\u6578\u5B57(System.Double)\n\u3010obj\u3011\uFF1A\u8981\u6AA2\u6E2C\u7684\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5E03\u723E\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsNumber (\"\u8A9E\u7FA9\u5316\u8868\u9054\u5F0F\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse\n\u3010\u793A\u4F8B\u3011\uFF1AIsNumber(12.3)\u3010\u8FD4\u56DE\u503C\u3011\uFF1ATrue\n\u3010\u793A\u4F8B\u3011\uFF1A\nIsNumber(\"123\")\u3010\u8FD4\u56DE\u503C\u3011\uFF1A True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "有無等於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u540D\u7A31\u5224\u65B7\u8A72\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u7B49\u65BC\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\u7A31\n\u3010propertyName\u3011\u5C6C\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AIsExistRecord(\"salesorder.items\",\"code\",\"lc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "有無大於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u540D\u7A31\u5224\u65B7\u8A72\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u5927\u65BC\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\u7A31\n\u3010propertyName\u3011\u5C6C\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListGreaterThan(\"salesorder.items\",\"num\",100)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "有無小於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u540D\u7A31\u5224\u65B7\u8A72\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u5C0F\u65BC\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\u7A31\n\u3010propertyName\u3011\u5C6C\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListLessThan(\"salesorder.items\",\"num\",100)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "有無開頭是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u540D\u7A31\u5224\u65B7\u8A72\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u958B\u982D\u662F\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\u7A31\n\u3010propertyName\u3011\u5C6C\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListStartWith(\"salesorder.items\",\"code\",\"lc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "有無結尾是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u540D\u7A31\u5224\u65B7\u8A72\u8868\u7684\u6307\u5B9A\u5B57\u6BB5\u96C6\u5408\u4E2D\u662F\u5426\u5B58\u5728\u7D50\u5C3E\u662F\u5339\u914D\u5B57\u7B26\u7684\u503C\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\u7A31\n\u3010propertyName\u3011\u5C6C\u6027\u540D\n\u3010match\u3011\u5339\u914D\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AListEndWith(\"salesorder.items\",\"code\",\"lc\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1AFalse/True",
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "增加指定天數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加天數",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6307\u5B9A\u7684\u65E5\u671F\u6642\u9593\u4E0A\u589E\u52A0\u6307\u5B9A\u7684\u5929\u6578\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010value\u3011\uFF1A\u589E\u52A0\u5929\u6578\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u65E5\u671F\u6642\u9593(System.DateTime)\n\u3010\u793A\u4F8B\u3011 \uFF1ADateTimeAddDays(\"2019-01-30T10:00:00+08:00\",2)\n\u3010\u8FD4\u56DE\u503C\u3011:2019-02-01T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "增加指定年數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加年數",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6307\u5B9A\u7684\u65E5\u671F\u6642\u9593\u4E0A\u589E\u52A0\u6307\u5B9A\u7684\u5E74\u6578\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010value\u3011\uFF1A\u589E\u52A0\u5E74\u6578\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u65E5\u671F\u6642\u9593(System.DateTime)\n\u3010\u793A\u4F8B\u3011 \uFF1ADateTimeAddYears(\"2019-01-30T10:00:00+08:00\",2)\n\u3010\u8FD4\u56DE\u503C\u3011:2021-01-30T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "增加指定月數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加月數",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5728\u6307\u5B9A\u7684\u65E5\u671F\u6642\u9593\u4E0A\u589E\u52A0\u6307\u5B9A\u7684\u6708\u6578\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010value\u3011\uFF1A\u589E\u52A0\u6708\u6578\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u65E5\u671F\u6642\u9593(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1ADateTimeAddMonths(\"2019-01-30T10:00:00+08:00\",1)\n\u3010\u8FD4\u56DE\u503C\u3011:2019-02-28T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "獲取指定日期時間所在月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u6307\u5B9A\u65E5\u671F\u6642\u9593\u503C\u6240\u5728\u6708\u7684\u7B2C\u4E00\u5929\u7684\u65E5\u671F\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u65E5\u671F\u6642\u9593(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AGetFirstDayOfMonth(\"2019 -01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011:2019-01-01T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "獲取指定日期時間所在月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u6307\u5B9A\u65E5\u671F\u6642\u9593\u503C\u6240\u5728\u6708\u7684\u6700\u5F8C\u4E00\u5929\u7684\u65E5\u671F\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u65E5\u671F\u6642\u9593(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AGetLastDayOfMonth(\"2019- 01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011:2019-01-31T10:00+08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "獲取當前日期時間",
            "params": [],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u7576\u524D\u7684\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u65E5\u671F\u6642\u9593(System.DateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AGetDateTimeNow()\n\u3010\u8FD4\u56DE\u503C\u3011:2019-01-30T12:00:00.000+ 08:00",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "比較兩個時間",
            "params": [
                {
                    "key": "str1",
                    "name": "日期時間1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "日期時間2",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6BD4\u8F03\u5169\u500B\u6642\u9593\u503C\uFF0C\u4E26\u8FD4\u56DE\u4E00\u500B\u503C\uFF0C\u6B64\u503C\u8868\u793A\u7B2C\u4E00\u500B\u6642\u9593\u662F\u65E9\u65BC\u3001\u7B49\u65BC\u9084\u662F\u665A\u65BC\u7B2C\u4E8C\u500B\u6642\u9593\u7684\u6574\u6578\n\u3010str1\u3011\uFF1A\u65E5\u671F\u6642\u95931\n\u3010str2\u3011 \uFF1A\u65E5\u671F\u6642\u95932\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.int32)\n\t\u65E5\u671F1\u65E9\u65BC\u65E5\u671F2\uFF0C\u8FD4\u56DE-1\n\t\u65E5\u671F1\u7B49\u65BC\u65E5\u671F2\uFF0C\u8FD4\u56DE0\n\t\u65E5\u671F1\u665A\u65BC\u65E5\u671F2\uFF0C\u8FD4\u56DE1\n\u3010\u793A\u4F8B\u3011\uFF1ACompareDate(\"2019-01-30T10:00:00+08:00\",\"2019-02-01T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-1",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "格式化當前日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u6307\u5B9A\u7684\u683C\u5F0F\u5C07\u7576\u524D\u65E5\u671F\u6642\u9593\u503C\u8F49\u63DB\u70BA\u5176\u7B49\u6548\u7684\u5B57\u7B26\u4E32\u8868\u793A\u5F62\u5F0F\n\u3010format\u3011\uFF1A\u683C\u5F0F\u4E32\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFormatDate(\"yyyy-MM-dd HH:mm:ss\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-30 01:00:00\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "格式化指定日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u6307\u5B9A\u7684\u683C\u5F0F\u5C07\u6307\u5B9A\u7684\u65E5\u671F\u6642\u9593\u503C\u8F49\u63DB\u70BA\u5176\u7B49\u6548\u7684\u5B57\u7B26\u4E32\u8868\u793A\u5F62\u5F0F\n\u3010format\u3011\uFF1A\u683C\u5F0F\u4E32\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFormatDefineDate(\"yyyy-MM-dd HH:mm:ss\",\"2019-01-30 01:00:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01 -30 01:00:00\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "今天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4ECA\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4ECA\u5929\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToday(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-30\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "昨天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u6628\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u6628\u5929\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AYesterday(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-29\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "明天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u660E\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u660E\u5929\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ATomorrow(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "本年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5E74\uFF0C\u683C\u5F0F\u70BA\"yyyy\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u5E74\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AThisYear(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "去年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u53BB\u5E74\uFF0C\u683C\u5F0F\u70BA\"yyyy\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u53BB\u5E74\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System .String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastYear(\"2019-01-30T10:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "明年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u660E\u5E74\uFF0C\u683C\u5F0F\u70BA\"yyyy\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u660E\u5E74\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System .String)\n\u3010\u793A\u4F8B\u3011\uFF1ANextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2020\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "本月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u6708\uFF0C\u683C\u5F0F\u70BA\"MM\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u6708\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AThisMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"1\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "上月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u6708\uFF0C\u683C\u5F0F\u70BA\"MM\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u6708\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastMonth(\"2019-02-30 01:00:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"1\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "下月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u6708\uFF0C\u683C\u5F0F\u70BA\"MM\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u6708\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ANextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "本週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u5728\u672C\u5E74\u7684\u7B2C\u5E7E\u9031\uFF0C\u683C\u5F0F\u70BA\"ww\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u5728\u672C\u5E74\u7684\u7B2C\u5E7E\u9031\uFF0C\u6CE8\u610F\u5982\u679C12\u6708\u5E95\u7684\u65E5\u671F\u8207\u4E0B\u4E00\u5E74\u76841\u67081\u65E5\u5728\u540C\u4E00\u661F\u671F\uFF0C\u5247\u8FD4\u56DE\u7B2C\u4E00\u5468\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AThisWeek(\"2019-01 -30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"5\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "上週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u9031\uFF0C\u683C\u5F0F\u70BA\"ww\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u9031\uFF0C\u6CE8\u610F\u5982\u679C\u6307\u5B9A\u65E5\u671F\u5728\u4ECA\u5E74\u7B2C1\u9031\uFF0C\u5247\u4E0A\u9031\u70BA\u53BB\u5E74\u7684\u6700\u5F8C\u4E00\u5468\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"4\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "下週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u9031\uFF0C\u683C\u5F0F\u70BA\"ww\"\u5F62\u5F0F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u9031\uFF0C\u6CE8\u610F\u5982\u679C\u6307\u5B9A\u65E5\u671F\u5728\u4ECA\u5E74\u6700\u5F8C\u4E00\u5468\uFF0C\u5247\u4E0B\u9031\u70BA1\n\u3010 date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ANextWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011 \uFF1A\"6\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "星期幾",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u662F\u672C\u9031\u7684\u661F\u671F\u5E7E\uFF0C\u683C\u5F0F\u70BA\"n\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u662F\u672C\u9031\u7684\u661F\u671F\u5E7E\uFF0C\u6CE8\u610F\u4E0D\u662F\u8FD4\u56DE\u82F1\u6587\u7E2E\u5BEB\uFF0C\u800C\u662F\u8FD4\u56DE\u6578\u5B57\u5F62\u5F0F\u3002\u6309\u7167\u4E2D\u570B\u7FD2\u6163\uFF0C\u661F\u671F\u4E00\u70BA\u6BCF\u9031\u9996\u65E5\uFF0C\u8FD4\u56DE\u503C\u70BA1\uFF0C\u661F\u671F\u65E5\u70BA\u6BCF\u9031\u5C3E\u65E5\uFF0C\u8FD4\u56DE\u503C\u70BA7\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String )\n\u3010\u793A\u4F8B\u3011\uFF1ADayOfWeek(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"3\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "本週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u9031\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u9031\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u570B\u7FD2\u6163\uFF0C\u661F\u671F\u4E00\u70BA\u6BCF\u9031\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u70BA\u6BCF\u9031\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfWeek(\" 2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-28\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "本週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u9031\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u9031\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u570B\u7FD2\u6163\uFF0C\u661F\u671F\u4E00\u70BA\u6BCF\u9031\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u70BA\u6BCF\u9031\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfWeek(\" 2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-03\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "上週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u9031\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u9031\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u570B\u7FD2\u6163\uFF0C\u661F\u671F\u4E00\u70BA\u6BCF\u9031\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u70BA\u6BCF\u9031\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfLastWeek(\" 2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-21\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "上週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u9031\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u9031\u6700\u5F8C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u570B\u7FD2\u6163\uFF0C\u661F\u671F\u4E00\u70BA\u6BCF\u9031\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u70BA\u6BCF\u9031\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfLastWeek(\" 2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-27\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "下週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u9031\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u9031\u7B2C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u570B\u7FD2\u6163\uFF0C\u661F\u671F\u4E00\u70BA\u6BCF\u9031\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u70BA\u6BCF\u9031\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfNextWeek(\" 2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-04\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "下週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u9031\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u9031\u6700\u5F8C\u4E00\u5929\u3002\u6309\u7167\u4E2D\u570B\u7FD2\u6163\uFF0C\u661F\u671F\u4E00\u70BA\u6BCF\u9031\u9996\u65E5\uFF0C\u661F\u671F\u65E5\u70BA\u6BCF\u9031\u5C3E\u65E5\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfNextWeek(\" 2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-10\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "本月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u6708\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u6708\u7B2C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "本月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u6708\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u6708\u6700\u5F8C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "上月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u6708\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u6708\u7B2C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfLastMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-12-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "上月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u6708\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u6708\u6700\u5F8C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfLastMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "下月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u6708\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u6708\u7B2C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfNextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "下月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u6708\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u6708\u6700\u5F8C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfNextMonth(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-02-28\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "本年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5E74\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u5E74\u7B2C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "本年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u672C\u5E74\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u672C\u5E74\u6700\u5F8C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "上年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u5E74\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u5E74\u7B2C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfLastYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "上年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0A\u5E74\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0A\u5E74\u6700\u5F8C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfLastYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2018-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "下年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u5E74\u7B2C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u5E74\u7B2C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AFirstDayOfNextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2020-01-01\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "下年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u65E5\u671F\u7684\u4E0B\u5E74\u6700\u5F8C\u4E00\u5929\uFF0C\u683C\u5F0F\u70BA\"yyyy-MM-dd\"\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u4E0B\u5E74\u6700\u5F8C\u4E00\u5929\u3002 \n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1ALastDayOfNextYear(\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2020-12-31\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "返回指定形式的日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u6307\u5B9A\u5F62\u5F0F\u7684\u65E5\u671F\uFF0C\u5982\u679C\u4E0D\u50B3\u905E\u53C3\u6578\uFF0C\u5247\u9ED8\u8A8D\u8FD4\u56DE\u7576\u524D\u7CFB\u7D71\u65E5\u671F\u7684\u6307\u5B9A\u5F62\u5F0F\u65E5\u671F\u3002 \n\u3010format\u3011\uFF1A\u683C\u5F0F\u5316\u4E32\n\u3010date\u3011\uFF1A\u65E5\u671F\u6642\u9593\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\tDD\uFF1A\u4ECA\u5929\tLD\uFF1A\u6628\u5929\tND\uFF1A\u660E\u5929\n\tYY \uFF1A\u672C\u5E74\tLY\uFF1A\u4E0A\u5E74\tNY\uFF1A\u4E0B\u5E74\n\tMM\uFF1A\u672C\u6708\tLM\uFF1A\u4E0A\u6708\tNM\uFF1A\u4E0B\u6708\n\tWD\uFF1A\u661F\u671F\u5E7E\n\tWW\uFF1A\u672C\u9031\tLW\uFF1A\u4E0A\u9031 tNW\uFF1A\u4E0B\u9031\n\tFDW\uFF1A\u672C\u9031\u9996\u65E5\tLDW\uFF1A\u672C\u9031\u5C3E\u65E5\n\tFDLW\uFF1A\u4E0A\u9031\u9996\u65E5\tLDLW\uFF1A\u4E0A\u9031\u5C3E\u65E5\n\tFDNW\uFF1A\u4E0B\u9031\u9996\u65E5\tLDNW\uFF1A\u4E0B\u9031\u5C3E\u65E5\n\tFDM\uFF1A\u672C\u6708\u9996\u65E5\tLDM\uFF1A\u672C\u6708\u5C3E\u65E5\n\tFDLM\uFF1A\u4E0A\u6708\u9996\u65E5\tLDLM\uFF1A\u4E0A\u6708\u5C3E\u65E5\n\tFDNM\uFF1A\u4E0B\u6708\u9996\u65E5\tLDNM\uFF1A\u4E0B\u6708\u5C3E\u65E5\n\tFDY\uFF1A\u672C\u5E74\u9996\u65E5\tLDY\uFF1A\u672C\u5E74\u5C3E\u65E5\n\tFDLY\uFF1A\u4E0A\u5E74\u9996\u65E5\tLDLY\uFF1A\u4E0A\u5E74\u5C3E\u65E5\n\tFDNY\uFF1A\u4E0B\u5E74\u9996\u65E5\tLDNY\uFF1A\u4E0B\u5E74\u5C3E\u65E5\n \u3010\u793A\u4F8B\u3011\uFF1AGetDate(\"LD\",\"2019-01-30T01:00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"2019-01-29\"",
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "轉字符串",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u7684\u5C0D\u8C61\u8F49\u63DB\u6210\u5B57\u7B26\u4E32\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToStringX(123)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"123\"",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "轉日期時間",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u7684\u5C0D\u8C61\u8F49\u63DB\u6210\u65E5\u671F\u6642\u9593\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u65E5\u671F\u6642\u9593(System.OffsetDateTime)\n\u3010\u793A\u4F8B\u3011\uFF1AToDateTime(\"2019-01-30T10 :00:00+08:00\")\n\u3010\u8FD4\u56DE\u503C\u3011: 2019-01-30T10:00+08:00",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "轉布爾值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u503C\u8F49\u63DB\u6210\u7B49\u6548\u7684\u5E03\u723E\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5E03\u723E\u503C(System.Boolean)\n\u3010\u793A\u4F8B\u3011\uFF1AToBoolean(\"True\" )\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1Atrue",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "轉數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u6210\u5341\u9032\u5236\u6578\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5341\u9032\u5236\u6578\u503C(System.BigDecimal)\n\u3010\u793A\u4F8B\u3011\uFF1AToDecimal(\"40.23\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "轉數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u6210\u5341\u9032\u5236\u6578\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5341\u9032\u5236\u6578\u503C(System.BigDecimal)\n\u3010\u793A\u4F8B\u3011\uFF1AToBigDecimal(\"40.23\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "轉自定義精度數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "小數位數",
                    "type": "int"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u6210\u5341\u9032\u5236\u6578\u503C\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5341\u9032\u5236\u6578\u503C(System.BigDecimal)\n\u3010\u793A\u4F8B\u3011\uFF1AToBigDecimal(\"40.2,2\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.20",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "轉雙精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u6210\u96D9\u7CBE\u5EA6\u6D6E\u9EDE\u6578\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u96D9\u7CBE\u5EA6\u6D6E\u9EDE\u6578(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AToDouble(\"40.23\" )\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "轉單精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u6210\u55AE\u7CBE\u5EA6\u6D6E\u9EDE\u6578\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u55AE\u7CBE\u5EA6\u6D6E\u9EDE\u6578(System.Float)\n\u3010\u793A\u4F8B\u3011\uFF1AToSingle(\"40.23\") \n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "轉單精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u6210\u55AE\u7CBE\u5EA6\u6D6E\u9EDE\u6578\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u55AE\u7CBE\u5EA6\u6D6E\u9EDE\u6578(System.Float)\n\u3010\u793A\u4F8B\u3011\uFF1AToFloat(\"40.23\" )\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A40.23",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "轉8位無符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u62108\u4F4D\u7121\u7B26\u865F\u6574\u6578\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A8\u4F4D\u7121\u7B26\u865F\u6574\u6578(System.Byte)\n\u3010\u793A\u4F8B\u3011\uFF1AToByte(\" 10\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "轉16位有符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u621016\u4F4D\u6709\u7B26\u865F\u6574\u6578\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A16\u4F4D\u6709\u7B26\u865F\u6574\u6578(System.Int16)\n\u3010\u793A\u4F8B\u3011\uFF1AToInt16(\" 10\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "轉32位有符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u621032\u4F4D\u6709\u7B26\u865F\u6574\u6578\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A32\u4F4D\u6709\u7B26\u865F\u6574\u6578(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1AToInt32(\" 10\")\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A10",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "轉中文大寫金額",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u5C07\u6307\u5B9A\u5C0D\u8C61\u8F49\u63DB\u6210\u4E2D\u6587\u5927\u5BEB\u91D1\u984D\n\u3010obj\u3011\uFF1A\u5F85\u8F49\u63DB\u5C0D\u8C61\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5B57\u7B26\u4E32(System.String)\n\u3010\u793A\u4F8B\u3011\uFF1AToChineseMoney(40.23)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A\"\u8086\u62FE\u5143\u96F6\u8CB3\u89D2\u53C1\u5206\"",
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "獲取會話變量的值",
            "params": [
                {
                    "key": "name",
                    "name": "會話變量名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u7528\u6236\u6703\u8A71\u8B8A\u91CF\u7684\u503C\n\u3010name\u3011\uFF1A\u6703\u8A71\u8B8A\u91CF\u540D\u7A31\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "獲取上下文變量的值",
            "params": [
                {
                    "key": "name",
                    "name": "上下文變量名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u4E0A\u4E0B\u6587\u8B8A\u91CF\u7684\u503C\n\u3010name\u3011\uFF1A\u4E0A\u4E0B\u6587\u8B8A\u91CF\u540D\u7A31\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "根據屬性名獲取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u5C6C\u6027\u540D\u5F97\u5230JSON\u4E32\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\u7A31\n\u3010propertyName\u3011\u5C6C\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.String)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "根據屬性名獲取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u5C6C\u6027\u540D\u5F97\u5230JSON\u4E32\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\u7A31\n\u3010propertyName\u3011\u5C6C\u6027\u540D\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.String)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "根據注入名獲獲取注入對象",
            "params": [
                {
                    "key": "name",
                    "name": "注入名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u7372\u53D6\u904B\u884C\u6642\u6CE8\u5165\u7684\u5C0D\u8C61\n\u3010name\u3011\u6CE8\u5165\u540D\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "根據屬性名獲取屬性值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名",
                    "type": "string"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u6839\u64DA\u934A\u5F0F\u5C6C\u6027\u540D\u7372\u53D6\u5C6C\u6027\u503C\n\u3010chainedPropName\u3011\u934A\u5F0F\u540D\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u5C0D\u8C61(System.Object)",
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "絕對值",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u4E00\u500B\u6578\u503C\u7684\u7D55\u5C0D\u503C\n\u3010value\u3011\uFF1A\u8A08\u7B97\u6578\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1Aabs(-1.5)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A 1.5",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "四捨五入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u628A\u6578\u56DB\u6368\u4E94\u5165\u70BA\u6307\u5B9A\u7CBE\u5EA6\u7684\u6578\u503C\n\u3010value1\u3011\uFF1A\u6578\u503C\n\u3010value2\u3011\uFF1A\u56DB\u6368\u4E94\u5165\u5C0F\u6578\u4F4D\u6578\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1A nRound(1.52,1)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "四捨五入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u628A\u6578\u56DB\u6368\u4E94\u5165\u70BA\u6307\u5B9A\u7CBE\u5EA6\u7684\u6578\u503C\n\u3010value1\u3011\uFF1A\u6578\u503C\n\u3010value2\u3011\uFF1A\u56DB\u6368\u4E94\u5165\u5C0F\u6578\u4F4D\u6578\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1Around (1.52,1)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A1.5",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "隨機數",
            "params": [],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u96A8\u6A5F\u751F\u6210\u5927\u65BC\u7B49\u65BC 0.0 \u4E14\u5C0F\u65BC 1.0 \u7684\u507D\u96A8\u6A5F\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1Arandom()\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0.624508349393",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "正弦",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u4E00\u500B\u6578\u5B57\u7684\u6B63\u5F26\u503C\n\u3010value\u3011\uFF1A\u8A08\u7B97\u6578\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u4E00\u500B\u4EE5\u5F27\u5EA6\u8868\u793A\u7684\u89D2\n\u3010\u793A\u4F8B\u3011\uFF1Asin(1) \n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A0.84187098",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "餘弦",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u4E00\u500B\u6578\u5B57\u7684\u9918\u5F26\u503C\n\u3010value\u3011\uFF1A\u8A08\u7B97\u6578\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u4E00\u500B\u4EE5\u5F27\u5EA6\u8868\u793A\u7684\u89D2\n\u3010\u793A\u4F8B\u3011\uFF1Acos(3) \n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A-0.9899924",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "向上舍入",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u5927\u65BC\u6216\u7B49\u65BC\u51FD\u6578\u53C3\u6578\uFF0C\u4E26\u4E14\u8207\u4E4B\u6700\u63A5\u8FD1\u7684\u6574\u6578\n\u3010value\u3011\uFF1A\u8A08\u7B97\u6578\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1Aceil(3.2) \n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A4",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "向下舍入",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u8FD4\u56DE\u5C0F\u65BC\u6216\u7B49\u65BC\u51FD\u6578\u53C3\u6578\uFF0C\u4E26\u4E14\u8207\u4E4B\u6700\u63A5\u8FD1\u7684\u6574\u6578\n\u3010value\u3011\uFF1A\u8A08\u7B97\u6578\u503C\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Int32)\n\u3010\u793A\u4F8B\u3011\uFF1Afloor(3.2) \n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A3",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "銀行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u9280\u884C\u5BB6\u820D\u5165\u6A19\u6E96\uFF0C\u628A\u6307\u5B9A\u6578\u5B57\u820D\u5165\u70BA\u6700\u63A5\u8FD1\u7684\u6578\u5B57\n\u3010value1\u3011\uFF1A\u8981\u6368\u5165\u7684\u6578\u503C\n\u3010value2\u3011\uFF1A\u8981\u6368\u5165\u7684\u5C0F\u6578\u4F4D\u6578\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1ABankerRound(36.124,2)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A36.12",
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "銀行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": "\u3010\u529F\u80FD\u3011\uFF1A\u4F7F\u7528\u9280\u884C\u5BB6\u820D\u5165\u6A19\u6E96\uFF0C\u628A\u6307\u5B9A\u6578\u5B57\u820D\u5165\u70BA\u6700\u63A5\u8FD1\u7684\u6578\u5B57\n\u3010value1\u3011\uFF1A\u8981\u6368\u5165\u7684\u6578\u503C\n\u3010value2\u3011\uFF1A\u8981\u6368\u5165\u7684\u5C0F\u6578\u4F4D\u6578\n\u3010\u8FD4\u56DE\u503C\u985E\u578B\u3011\uFF1A\u6578\u503C(System.Double)\n\u3010\u793A\u4F8B\u3011\uFF1AbankerRound(36.124,2)\n\u3010\u8FD4\u56DE\u503C\u3011\uFF1A36.12",
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressioneditorComponent = /** @class */ (function () {
    function ExpressioneditorComponent(eventService, injector, http) {
        this.eventService = eventService;
        this.injector = injector;
        this.http = http;
        this.standardFunctions = []; //规范函数
        //规范函数
        this.allFunctions = []; //所有函数，包含不规范
        //所有函数，包含不规范
        this.deprecatedFunctions = [
            "StringSubstring", "StringLength", "StringReplace", "StringToUpper", "StringToLower", "StringIndexOf", "StringLastIndexOf", "StringTrimStart", "StringTrimEnd", "StringTrim", "StringAdd",
            "Round", "BankerRound",
            "getComputeJsonData",
            "ToDecimal", "ToSingle"
        ]; //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        this.currentFuncTabType = "String"; //当前函数选择类型
        //当前函数选择类型
        this.currentVarType = VarType.Context; //当前变量选择类型
        //当前变量选择类型
        this.descriptinfo = ""; //函数说明
        //函数说明
        this.keyInfo = ""; //函数key值
        //函数key值
        this.schema = new Map(); //schema列表
        //schema列表
        this.newSchemaMap = new Map(); //newSchema列表
        //newSchema列表
        this.choseSchemaTableName = new CurrentNode; //选择schema、entity中的表名
        //表达式临时文本
        this.selectedResource = false;
        this.entitywidth = "100%";
        this.adapter = new Adapter();
        this.selectnewfunc = false;
        this.funcExtend = []; //扩展函数实体
        //扩展函数实体
        this.expressionEntity = new ExpressionContextEntity; //表达式内部上下文
        //表达式内部上下文
        this.contextEntities = [];
        this.sessionEntities = [];
        this.injectedEntities = [];
        this.smartHelp = [];
        this.isPanel = false;
        this.funcEntities = [];
        this.gspCDTs = [];
        this.commonObjects = [];
        this.injectSchemaName = "CommonObject";
        this.injectedType = InjectedType.EntityType;
        this.windowWidth = 1000;
        this.result = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
        //消息提示
        this.notifies = {
            1: { type: 'success', msg: '表达式生成！' },
            2: { type: 'warning', msg: '请确保必填项填写完整！' },
            3: { type: 'info', msg: '功能尚未提供！' }
        };
        //编辑器的基本参数
        this.options = {
            theme: 'vs-light',
            language: 'javascript',
            automaticLayout: true
        };
        if (this.injector) {
            this.notifyService = this.injector.get(NotifyService);
            this.http = this.injector.get(HttpClient);
            this.localeId = localStorage.getItem('languageCode');
            this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        }
    }
    //编辑器显示文本绑定
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.ngOnInit = 
    //编辑器显示文本绑定
    /**
     * @return {?}
     */
    function () {
        //初始化frame i18n资源
        this.Advanced = this.localePipe.transform("Advanced");
        this.String = this.localePipe.transform("String");
        this.Aggregate = this.localePipe.transform("Aggregate");
        this.Estimate = this.localePipe.transform("Estimate");
        this.DateTime = this.localePipe.transform("DateTime");
        this.Translate = this.localePipe.transform("Translate");
        this.Analytical = this.localePipe.transform("Analytical");
        this.Math = this.localePipe.transform("Math");
        this.Extend = this.localePipe.transform("Extend");
        this.Variable = this.localePipe.transform("Variable");
        this.Entity = this.localePipe.transform("Entity");
        this.Help = this.localePipe.transform("Help");
        this.FunctionDescription = this.localePipe.transform("FunctionDescription");
        this.VarDescription = this.localePipe.transform("VarDescription");
        this.CurrentProp = this.localePipe.transform("CurrentProp");
        this.CurrentChosedProp = this.localePipe.transform("CurrentChosedProp");
        //初始化i18n函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        //过滤不规范命名函数
        for (var i = 0; i < this.allFunctions.length; i++) {
            if (!this.deprecatedFunctions.includes(this.allFunctions[i].key)) {
                this.standardFunctions.push(this.allFunctions[i]);
            }
        }
        //区分：弹出框or面板
        if (this.isPanel) {
            this.OninitPanel();
        }
        else {
            this.OninitWindows();
        }
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.isPanel) {
            this.OninitPanel();
        }
    };
    //弹出框式
    //弹出框式
    /**
     * @private
     * @return {?}
     */
    ExpressioneditorComponent.prototype.OninitWindows = 
    //弹出框式
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        //若表达式上下文实体为空或其中的预置表达式文本字段为空或文本长度为0，则预置默认的文本
        if (!(this.expressionEntity) || !(this.expressionEntity.expr) || this.expressionEntity.expr.length == 0) {
            this.code = null;
        }
        else {
            //否则，添加预置文本显示
            this.code = this.expressionEntity.expr;
        }
        //初始化各扩展函数实体
        this.expressionEntity.funcEntities.forEach((/**
         * @param {?} funcentity
         * @return {?}
         */
        function (funcentity) {
            _this.funcExtend = _this.funcExtend.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.key !== funcentity.key; }));
            _this.funcExtend.push(funcentity);
        }));
        //初始化各上下文实体
        this.expressionEntity.contextEntities.forEach((/**
         * @param {?} contextentity
         * @return {?}
         */
        function (contextentity) {
            _this.contextEntities.push(contextentity);
        }));
        //初始化各系统变量实体
        this.expressionEntity.sessionEntities.forEach((/**
         * @param {?} sessionentity
         * @return {?}
         */
        function (sessionentity) {
            _this.sessionEntities.push(sessionentity);
        }));
        //初始化schema实体类型列表
        this.schema = this.expressionEntity.schemaMap;
        //初始化newSchema实体类型列表
        this.newSchemaMap = this.expressionEntity.newSchemaMap;
        //初始化injectedEntities注入实体
        this.injectedEntities = this.expressionEntity.injectedEntities;
        //初始化smartHelp列表
        this.smartHelp = this.expressionEntity.smartHelpEntities;
    };
    //面板式
    //面板式
    /**
     * @private
     * @return {?}
     */
    ExpressioneditorComponent.prototype.OninitPanel = 
    //面板式
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.customNewSchemaName && this.customNewSchema) {
            //注入NewSchema
            this.newSchemaMap.set(this.customNewSchemaName, this.customNewSchema);
            if (this.injectName && this.injectNameInSchema && this.injectSchemaName) {
                this.injectedEntities = this.injectedEntities.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.injectedName !== _this.injectName; }));
                //构造注入实体对象
                /** @type {?} */
                var injectedEntity = new InjectedEntity();
                //若注入的实体名为空，则默认为注入实体在newSchema中的名称
                injectedEntity.name = this.injectName ? this.injectName : this.injectNameInSchema;
                injectedEntity.schemaName = this.injectSchemaName;
                injectedEntity.injectedName = this.injectNameInSchema;
                injectedEntity.injectedType = this.injectedType;
                this.injectedEntities.push(injectedEntity);
            }
            if (this.gspCDTs && this.gspCDTs.length > 0) {
                /** @type {?} */
                var innerSchema_1 = new NewSchema();
                //若newSchemaMap中存在CDT的schema
                if (this.newSchemaMap.get("CDT")) {
                    innerSchema_1 = this.newSchemaMap.get("CDT");
                }
                //将每一个CDT转化为newSchema内部结构中的entityType
                this.gspCDTs.forEach((/**
                 * @param {?} gspCDT
                 * @return {?}
                 */
                function (gspCDT) {
                    /** @type {?} */
                    var entityType = _this.adapter.convertCDTOfNewSchema(gspCDT);
                    innerSchema_1.entityTypes = innerSchema_1.entityTypes.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.code !== entityType.code; }));
                    innerSchema_1.entityTypes.push(entityType);
                }));
                //将合并后的newSchema放入内部上下文实体中
                this.newSchemaMap.set("CDT", innerSchema_1);
            }
            if (this.commonObjects && this.commonObjects.length > 0) {
                /** @type {?} */
                var innerSchema_2 = new NewSchema;
                //若newSchemaMap中存在CO的newSchema
                if (this.newSchemaMap.get("CommonObject")) {
                    innerSchema_2 = this.newSchemaMap.get("CommonObject");
                }
                this.commonObjects.forEach((/**
                 * @param {?} co
                 * @return {?}
                 */
                function (co) {
                    //将每一个CO转化为schema内部结构中的entityType
                    /** @type {?} */
                    var entityTypes = _this.adapter.convertCOOfNewSchema(co);
                    entityTypes.forEach((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    function (entityType) {
                        innerSchema_2.entityTypes = innerSchema_2.entityTypes.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.code !== entityType.code; }));
                        innerSchema_2.entityTypes.push(entityType);
                        /** @type {?} */
                        var entitySet = new NewEntitySet;
                        entitySet.code = entityType.code + "s";
                        entitySet.name = entityType.name;
                        entitySet.entityType = entityType.code;
                        innerSchema_2.entitySets = innerSchema_2.entitySets.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.code !== entitySet.code; }));
                        innerSchema_2.entitySets.push(entitySet);
                    }));
                }));
                //将合并后的newSchema放入内部上下文实体中
                this.newSchemaMap.set("CommonObject", innerSchema_2);
            }
        }
        else if (this.customSchemaName && this.customSchema) {
            //注入旧Schema对象
            this.schema.set(this.customSchemaName, this.customSchema);
            if (this.injectName && this.injectNameInSchema && this.injectSchemaName) {
                this.injectedEntities = this.injectedEntities.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.injectedName !== _this.injectName; }));
                //构造注入实体对象
                /** @type {?} */
                var injectedEntity = new InjectedEntity();
                //若注入的实体名为空，则默认为注入实体在schema中的名称
                injectedEntity.name = this.injectName ? this.injectName : this.injectNameInSchema;
                injectedEntity.schemaName = this.injectSchemaName;
                injectedEntity.injectedName = this.injectNameInSchema;
                injectedEntity.injectedType = this.injectedType;
                this.injectedEntities.push(injectedEntity);
            }
            if (this.gspCDTs && this.gspCDTs.length > 0) {
                /** @type {?} */
                var innerSchema_3 = new Schema();
                //若schemaMap中存在CDT的schema
                if (this.schema.get("CDT")) {
                    innerSchema_3 = this.schema.get("CDT");
                }
                //将每一个CDT转化为schema内部结构中的entityType
                this.gspCDTs.forEach((/**
                 * @param {?} gspCDT
                 * @return {?}
                 */
                function (gspCDT) {
                    /** @type {?} */
                    var entityType = _this.adapter.convertCDT(gspCDT);
                    innerSchema_3.entityTypes = innerSchema_3.entityTypes.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.id !== entityType.id; }));
                    innerSchema_3.entityTypes.push(entityType);
                }));
                //将合并后的schema放入内部上下文实体中
                this.schema.set("CDT", innerSchema_3);
            }
            //处理旧Schema的CO对象
            if (this.commonObjects && this.commonObjects.length > 0) {
                /** @type {?} */
                var innerSchema_4 = new Schema;
                //若schemaMap中存在CO的schema
                if (this.schema.get("CommonObject")) {
                    innerSchema_4 = this.schema.get("CommonObject");
                }
                this.commonObjects.forEach((/**
                 * @param {?} co
                 * @return {?}
                 */
                function (co) {
                    //将每一个CO转化为schema内部结构中的entityType
                    /** @type {?} */
                    var entityTypes = _this.adapter.convertCO(co);
                    entityTypes.forEach((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    function (entityType) {
                        innerSchema_4.entityTypes = innerSchema_4.entityTypes.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.id !== entityType.id; }));
                        innerSchema_4.entityTypes.push(entityType);
                        /** @type {?} */
                        var entitySet = new EntitySet;
                        entitySet.name = entityType.name + "s";
                        entitySet.entityType = entityType.name;
                        entitySet.description = entityType.description;
                        innerSchema_4.entitySets = innerSchema_4.entitySets.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.name !== entitySet.name; }));
                        innerSchema_4.entitySets.push(entitySet);
                    }));
                }));
                //将合并后的schema放入内部上下文实体中
                this.schema.set("CommonObject", innerSchema_4);
            }
        }
        //初始化扩展函数
        if (this.funcEntities.length > 0) {
            this.funcEntities.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.funcExtend = _this.funcExtend.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.key !== element.key; }));
                _this.funcExtend.push(element);
            }));
        }
        //预置编辑框显示值
        /** @type {?} */
        var textEntity = (/** @type {?} */ (JSON.parse(this.text ? this.text : null)));
        if (textEntity && textEntity.expr) {
            //加载Antlr4工具
            /** @type {?} */
            var inputStream = new InputStream.InputStream(textEntity.expr);
            /** @type {?} */
            var lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
            /** @type {?} */
            var tokens = new CommonTokenStream.CommonTokenStream(lexer);
            tokens.fill();
            //tokens切分的js文本抽取到array中
            /** @type {?} */
            var array = new Array();
            for (var index = 0; index < tokens.tokens.length - 1; index++) {
                array[index] = tokens.tokens[index].text;
            }
            //遍历array的js文本，每个js文本遍历allFunctions查找对应的语义化文本，封装为str
            /** @type {?} */
            var str = "";
            for (var index = 0; index < array.length; index++) {
                if (((array[index] == "DefaultFunction") || (array[index] == "Math")) && (array[index + 1] == ".")) {
                    continue;
                }
                else if (array[index] == "." && (array[index - 1] == "DefaultFunction" || array[index - 1] == "Math")) {
                    continue;
                }
                else {
                    /** @type {?} */
                    var num = 0;
                    //遍历上下文变量
                    if (num == 0) {
                        for (var i = 0; i < this.contextEntities.length; i++) {
                            if (array[index] == ("\"" + this.contextEntities[i].key + "\"")) {
                                str = str + "\"" + this.contextEntities[i].name + "\"";
                                num = 1;
                                break;
                            }
                        }
                    }
                    //遍历session变量
                    if (num == 0) {
                        for (var i = 0; i < this.sessionEntities.length; i++) {
                            if (array[index] == ("\"" + this.sessionEntities[i].key + "\"")) {
                                str = str + "\"" + this.sessionEntities[i].name + "\"";
                                num = 1;
                                break;
                            }
                        }
                    }
                    //计数器num：如果遍历allFunctions没找到对应字段，则直接拼接(num=0)；否则替换(num=1)
                    if (num == 0) {
                        for (var i = 0; i < this.allFunctions.length; i++) {
                            if (array[index] == this.allFunctions[i].key) {
                                if (this.allFunctions[i].type != "Advanced") {
                                    str = str + this.allFunctions[i].name;
                                    num = 1;
                                    break;
                                }
                            }
                        }
                    }
                    //如果计数器为0，证明没有语义化匹配。显示原始数据
                    if (num == 0) {
                        str = str + array[index];
                    }
                }
            }
            this.code = str;
        }
        else {
            this.code = null;
        }
    };
    //编辑器初始化事件句柄
    //编辑器初始化事件句柄
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onInitHandler = 
    //编辑器初始化事件句柄
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
    };
    //编辑器表达式改变事件句柄
    //编辑器表达式改变事件句柄
    /**
     * @param {?} event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onChangeHandler = 
    //编辑器表达式改变事件句柄
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.expressioninfo = event.data;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onTouchedHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
    };
    /***函数选择tab也切换事件 */
    /**
     * 函数选择tab也切换事件
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.funcTabChange = /**
     * 函数选择tab也切换事件
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentFuncTabType = $event.nextId;
    };
    //函数表格中选择行事件
    //函数表格中选择行事件
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.selectFuncRowChange = 
    //函数表格中选择行事件
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.descriptinfo = this.FunctionDescription + $event.description;
        this.eventService.clearVarSelect();
        this.selectnewfunc = true;
    };
    //变量：类型选择                        (farris单击事件，不调整)
    //变量：类型选择                        (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.selectVarRowChange = 
    //变量：类型选择                        (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentVarType = $event.id;
    };
    //变量：描述                            (farris单击事件，不调整)
    //变量：描述                            (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.selectVarInfoRowChange = 
    //变量：描述                            (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.descriptinfo = this.VarDescription + $event.description;
        this.eventService.clearFuncSelect();
    };
    //schema表名选择                        (未使用)
    //schema表名选择                        (未使用)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.selectschemaChange = 
    //schema表名选择                        (未使用)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.choseSchemaTableName = $event;
    };
    //数据：父组件单击描述                   (farris单击事件，不调整)
    //数据：父组件单击描述                   (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.selectentitychange = 
    //数据：父组件单击描述                   (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.choseSchemaTableName = $event;
        if ($event.nodeType == "Complex") {
            this.entitywidth = "80%";
            this.selectedResource = true;
        }
        else {
            this.entitywidth = "100%";
            this.selectedResource = false;
        }
        this.descriptinfo = this.CurrentProp + $event.name + "-->" + $event.description;
    };
    //数据：子组件单击描述                   (farris单击事件，不调整)
    //数据：子组件单击描述                   (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.selectschemainfoChange = 
    //数据：子组件单击描述                   (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.descriptinfo = this.CurrentChosedProp + $event.name + "-->" + $event.description;
    };
    //变量：双击插入                        (farris双击事件：调整)
    //变量：双击插入                        (farris双击事件：调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.dbclickVarInsert = 
    //变量：双击插入                        (farris双击事件：调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            switch (this.currentVarType) {
                case VarType.Context:
                    for (var i = 0; i < this.standardFunctions.length; i++) {
                        if (this.standardFunctions[i].key == "GetContextParameter") {
                            this.eventService.insertExpression(this.standardFunctions[i].name + "(\"" + $event.data.name + "\")");
                            break;
                        }
                    }
                    break;
                case VarType.Session:
                    for (var i = 0; i < this.standardFunctions.length; i++) {
                        if (this.standardFunctions[i].key == "GetSessionValue") {
                            this.eventService.insertExpression(this.standardFunctions[i].name + "(\"" + $event.data.name + "\")");
                            break;
                        }
                    }
                    break;
                default:
                    break;
            }
        }
    };
    //双击插入schema表信息                  (未使用)
    //双击插入schema表信息                  (未使用)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.dbclickSchemaInfoInsert = 
    //双击插入schema表信息                  (未使用)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            this.eventService.insertExpression($event.data);
        }
    };
    //数据：双击插入                        (双击事件：不调整)
    //数据：双击插入                        (双击事件：不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.dbclickEntityInsert = 
    //数据：双击插入                        (双击事件：不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            this.eventService.insertExpression($event);
        }
    };
    //数据子组件：双击插入                  (farris双击事件：子组件已修改)
    //数据子组件：双击插入                  (farris双击事件：子组件已修改)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.dbclickEntityInfoInsert = 
    //数据子组件：双击插入                  (farris双击事件：子组件已修改)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            this.eventService.insertExpression($event);
        }
    };
    //智能帮助：双击                        (未使用)          
    //智能帮助：双击                        (未使用)          
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressioneditorComponent.prototype.dbclickSmartHelpInsert = 
    //智能帮助：双击                        (未使用)          
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            this.eventService.insertExpression($event.data);
        }
    };
    /**
     * @description 函数：双击插入          (farris双击事件：调整)
     * @param $event
     * 1：判断是否为Advanced，如果是：直接获取对应的name插入;如果不是：获取对应的name，然后拼接参数
     */
    /**
     * \@description 函数：双击插入          (farris双击事件：调整)
     * @param {?} $event
     * 1：判断是否为Advanced，如果是：直接获取对应的name插入;如果不是：获取对应的name，然后拼接参数
     * @return {?}
     */
    ExpressioneditorComponent.prototype.dbclickInsert = /**
     * \@description 函数：双击插入          (farris双击事件：调整)
     * @param {?} $event
     * 1：判断是否为Advanced，如果是：直接获取对应的name插入;如果不是：获取对应的name，然后拼接参数
     * @return {?}
     */
    function ($event) {
        //插入编辑框的语义化文本insertText
        /** @type {?} */
        var insertText = $event.data.key;
        //根据$event.data.key找到函数的语义化名称
        for (var index = 0; index < this.standardFunctions.length; index++) {
            if (insertText == this.standardFunctions[index].key) {
                insertText = this.standardFunctions[index].name;
                break;
            }
        }
        //如果不是Advanced，拼接参数
        if ($event.data.type != "Advanced") {
            insertText += "(";
            /** @type {?} */
            var paramsList = $event.data.params;
            for (var i = 0; i <= paramsList.length - 1; i++) {
                if (paramsList.length == 1) {
                    //一个参数，无需添加逗号。参数类型为String则首尾追加""，其他直接添加
                    if (paramsList[0].type == "string") {
                        insertText += "\"" + paramsList[0].name + "\"";
                    }
                    else {
                        insertText += paramsList[0].name;
                    }
                }
                else {
                    //多个参数，添加逗号分隔参数
                    if (i != paramsList.length - 1) {
                        //参数不是最后一位
                        if (paramsList[i].type == "string") {
                            insertText += "\"" + paramsList[i].name + "\",";
                        }
                        else {
                            insertText += paramsList[i].name + ",";
                        }
                    }
                    else {
                        //参数是最后一位
                        if (paramsList[i].type == "string") {
                            insertText += "\"" + paramsList[i].name + "\"";
                        }
                        else {
                            insertText += paramsList[i].name;
                        }
                    }
                }
            }
            insertText += ")";
        }
        this.keyInfo = insertText;
        this.eventService.insertExpression(this.keyInfo);
    };
    /**
     * @description 获取表达式串
     * 保存时，进行语义化-->js的转换
     * 1：封装ExpressionEntity    属性：expr, sexpr
     * 2：判断有无expr；有则使用Antlr4进行解析转换
     *    2.1：Antlr4工具拿到数组Array
     *    2.2：根据数组元素与name的对应，替换为key
     *    2.3：替换后的数组元素拼接出str
     */
    /**
     * \@description 获取表达式串
     * 保存时，进行语义化-->js的转换
     * 1：封装ExpressionEntity    属性：expr, sexpr
     * 2：判断有无expr；有则使用Antlr4进行解析转换
     *    2.1：Antlr4工具拿到数组Array
     *    2.2：根据数组元素与name的对应，替换为key
     *    2.3：替换后的数组元素拼接出str
     * @return {?}
     */
    ExpressioneditorComponent.prototype.getExprs = /**
     * \@description 获取表达式串
     * 保存时，进行语义化-->js的转换
     * 1：封装ExpressionEntity    属性：expr, sexpr
     * 2：判断有无expr；有则使用Antlr4进行解析转换
     *    2.1：Antlr4工具拿到数组Array
     *    2.2：根据数组元素与name的对应，替换为key
     *    2.3：替换后的数组元素拼接出str
     * @return {?}
     */
    function () {
        /** @type {?} */
        var exprEntity = new ExpressionEntity;
        exprEntity.expr = this.expressioninfo;
        exprEntity.sexpr = this.expressionEntity.sexpr;
        if (exprEntity.expr == null || exprEntity.expr == "") {
            this.result.emit(null);
        }
        else {
            //2：expr不为空，使用Antlr4进行解析
            /** @type {?} */
            var inputStream = new InputStream.InputStream(exprEntity.expr);
            /** @type {?} */
            var lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
            /** @type {?} */
            var tokens = new CommonTokenStream.CommonTokenStream(lexer);
            tokens.fill();
            /** @type {?} */
            var array = new Array();
            for (var index = 0; index < tokens.tokens.length - 1; index++) {
                array[index] = tokens.tokens[index].text;
            }
            //遍历所有的token
            for (var index = 0; index < array.length; index++) {
                /** @type {?} */
                var num = 0;
                if (num == 0) {
                    //遍历上下文变量
                    for (var i = 0; i < this.expressionEntity.contextEntities.length; i++) {
                        if (array[index] == ("\"" + this.expressionEntity.contextEntities[i].name + "\"")) {
                            array[index] = "\"" + this.expressionEntity.contextEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    //遍历session变量
                    for (var i = 0; i < this.expressionEntity.sessionEntities.length; i++) {
                        if (array[index] == ("\"" + this.expressionEntity.sessionEntities[i].name + "\"")) {
                            array[index] = "\"" + this.expressionEntity.sessionEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    //遍历函数
                    for (var indexTok = 0; indexTok < this.standardFunctions.length; indexTok++) {
                        if (array[index] == this.standardFunctions[indexTok].name) {
                            array[index] = this.standardFunctions[indexTok].keyFront + '.' + this.standardFunctions[indexTok].key;
                            num = 1;
                            break;
                        }
                    }
                }
            }
            //封装js表达式文本expressionStr
            /** @type {?} */
            var expressionStr = "";
            for (var index = 0; index < array.length; index++) {
                expressionStr = expressionStr + array[index];
            }
            exprEntity.expr = expressionStr;
            this.result.emit(JSON.stringify(exprEntity));
        }
    };
    //获取表达式串
    //获取表达式串
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.getExpr = 
    //获取表达式串
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var exprEntity = new ExpressionEntity;
        exprEntity.expr = this.expressioninfo;
        exprEntity.sexpr = this.expressionEntity.sexpr;
        if (exprEntity.expr == null || exprEntity.expr == "") {
            this.result.emit(null);
        }
        else {
            //2：expr不为空，使用Antlr4进行解析
            /** @type {?} */
            var inputStream = new InputStream.InputStream(exprEntity.expr);
            /** @type {?} */
            var lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
            /** @type {?} */
            var tokens = new CommonTokenStream.CommonTokenStream(lexer);
            tokens.fill();
            /** @type {?} */
            var array = new Array();
            for (var index = 0; index < tokens.tokens.length - 1; index++) {
                array[index] = tokens.tokens[index].text;
            }
            for (var index = 0; index < array.length; index++) {
                /** @type {?} */
                var num = 0;
                if (num == 0) {
                    //遍历上下文变量
                    for (var i = 0; i < this.contextEntities.length; i++) {
                        if (array[index] == ("\"" + this.contextEntities[i].name + "\"")) {
                            array[index] = "\"" + this.contextEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    //遍历session变量
                    for (var i = 0; i < this.sessionEntities.length; i++) {
                        if (array[index] == ("\"" + this.sessionEntities[i].name + "\"")) {
                            array[index] = "\"" + this.sessionEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    for (var indexTok = 0; indexTok < this.standardFunctions.length; indexTok++) {
                        if (array[index] == this.standardFunctions[indexTok].name) {
                            array[index] = this.standardFunctions[indexTok].keyFront + '.' + this.standardFunctions[indexTok].key;
                            num = 1;
                            break;
                        }
                    }
                }
            }
            //封装js表达式文本expressionStr
            /** @type {?} */
            var expressionStr = "";
            for (var index = 0; index < array.length; index++) {
                expressionStr = expressionStr + array[index];
            }
            exprEntity.expr = expressionStr;
            return JSON.stringify(exprEntity);
        }
    };
    //重置
    //重置
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.reset = 
    //重置
    /**
     * @return {?}
     */
    function () {
        this.expressioninfo = null;
        this.code = null;
        this.eventService.pushclearExpression();
    };
    //校验
    //校验
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.check = 
    //校验
    /**
     * @return {?}
     */
    function () {
        console.log(this.expressioninfo);
        if (this.notifyService) {
            this.notifyService[this.notifies['3'].type]({
                msg: this.notifies['3'].msg
            });
        }
        else {
            alert("功能尚未提供！");
        }
    };
    //帮助
    //帮助
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.help = 
    //帮助
    /**
     * @return {?}
     */
    function () {
        if (this.notifyService) {
            this.notifyService[this.notifies['3'].type]({
                msg: this.notifies['3'].msg
            });
        }
        else {
            alert("功能尚未提供！");
        }
    };
    //导入
    //导入
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.import = 
    //导入
    /**
     * @return {?}
     */
    function () {
        if (this.notifyService) {
            this.notifyService[this.notifies['3'].type]({
                msg: this.notifies['3'].msg
            });
        }
        else {
            alert("功能尚未提供！");
        }
    };
    //手动实时更改显示值
    //手动实时更改显示值
    /**
     * @param {?} textii
     * @return {?}
     */
    ExpressioneditorComponent.prototype.changeText = 
    //手动实时更改显示值
    /**
     * @param {?} textii
     * @return {?}
     */
    function (textii) {
        //预置编辑框显示值
        /** @type {?} */
        var textEntity = (/** @type {?} */ (JSON.parse(textii ? textii : null)));
        if (textEntity && textEntity.expr) {
            this.code = textEntity.expr;
        }
        else {
            this.code = null;
        }
    };
    /**
     * @param {?} injectName
     * @param {?=} injectSchemaName
     * @param {?=} injectNameInSchema
     * @param {?=} injectedType
     * @return {?}
     */
    ExpressioneditorComponent.prototype.changeInjectEntity = /**
     * @param {?} injectName
     * @param {?=} injectSchemaName
     * @param {?=} injectNameInSchema
     * @param {?=} injectedType
     * @return {?}
     */
    function (injectName, injectSchemaName, injectNameInSchema, injectedType) {
        if (injectSchemaName === void 0) { injectSchemaName = "CommonObject"; }
        if (injectedType === void 0) { injectedType = InjectedType.EntityType; }
        if (injectName && injectNameInSchema && injectSchemaName) {
            //构造注入实体对象
            /** @type {?} */
            var injectedEntity = new InjectedEntity();
            //若注入的实体名为空，则默认为注入实体在schema中的名称
            injectedEntity.name = injectName ? injectName : injectNameInSchema;
            injectedEntity.schemaName = injectSchemaName;
            injectedEntity.injectedName = injectNameInSchema;
            injectedEntity.injectedType = injectedType;
            this.expressionEntity.injectedEntities.push(injectedEntity);
        }
        this.injectedEntities = this.expressionEntity.injectedEntities;
    };
    /**
     * @param {?} commonObjects
     * @return {?}
     */
    ExpressioneditorComponent.prototype.changeCO = /**
     * @param {?} commonObjects
     * @return {?}
     */
    function (commonObjects) {
        var _this = this;
        if (commonObjects && commonObjects.length > 0) {
            /** @type {?} */
            var schema_1;
            //若schemaMap中存在CO的schema
            if (this.expressionEntity.schemaMap.get("CommonObject")) {
                schema_1 = this.expressionEntity.schemaMap.get("CommonObject");
            }
            else
                schema_1 = new Schema;
            commonObjects.forEach((/**
             * @param {?} co
             * @return {?}
             */
            function (co) {
                //将每一个CO转化为schema内部结构中的entityType
                /** @type {?} */
                var entityTypes = _this.adapter.convertCO(co);
                entityTypes.forEach((/**
                 * @param {?} entityType
                 * @return {?}
                 */
                function (entityType) {
                    schema_1.entityTypes.push(entityType);
                    /** @type {?} */
                    var entitySet = new EntitySet;
                    entitySet.name = entityType.name + "s";
                    entitySet.entityType = entityType.name;
                    entitySet.description = entityType.description;
                    schema_1.entitySets.push(entitySet);
                }));
            }));
            //将合并后的schema放入内部上下文实体中
            this.schema.set("CommonObject", schema_1);
        }
    };
    /**
     * @param {?} contextEntities
     * @return {?}
     */
    ExpressioneditorComponent.prototype.changeContextVar = /**
     * @param {?} contextEntities
     * @return {?}
     */
    function (contextEntities) {
        var _this = this;
        contextEntities.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.contextEntities = _this.contextEntities.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.key !== item.key; }));
            _this.contextEntities.push(item);
        }));
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.selectnewfunc = false;
    };
    //#region 编辑符号方法
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////编辑符号方法
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //#region 编辑符号方法
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////编辑符号方法
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onDoubleQuotation = 
    //#region 编辑符号方法
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////编辑符号方法
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("\"\"");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onEqual = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" == ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onSparen = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("()");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onBrace = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("[]");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onAnd = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" && ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onOr = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" || ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onExclamation = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("!");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onIequal = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" == ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onUnequal = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" != ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onLess = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" < ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onLessequal = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" <= ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onMore = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" > ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onMoreequal = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" >= ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onPlus = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" + ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onMinus = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" - ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onMultiple = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("*");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onDivision = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("/");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onPercent = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("%");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onAssign = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression(" = ");
    };
    /**
     * @return {?}
     */
    ExpressioneditorComponent.prototype.onOppose = /**
     * @return {?}
     */
    function () {
        this.eventService.insertExpression("!");
    };
    ExpressioneditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expressioneditor',
                    template: "<div class=\"h-100 f-utils-flex-column\">\r\n<div id=\"main\" style=\"width:100%;padding-left: 20px;\">\r\n  <div id=\"left\" style=\"width:87%;float:left;border:1px solid #D9D9D9\">\r\n    <div style=\"height:136px;\" class=\"position-relative\">\r\n        <app-my-monaco-editor style=\"z-index: 125;\" [options]=\"options\" [(ngModel)]=\"code\" (onInit)=\"onInitHandler($event)\"\r\n        (onTouched)=\"onTouchedHandler($event)\" (onChange)=\"onChangeHandler($event)\" class=\"f-utils-absolute-all\"> </app-my-monaco-editor>\r\n    </div>\r\n  </div>\r\n  <div id=\"right\" style=\"width:13%;float:left;\">\r\n      <button class=\"btn f-btn-mr btn-primary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=check()>{{ 'CheckFront' | locale }}</button>\r\n      <button class=\"btn f-btn-mr btn-secondary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=reset()>{{ 'ResetFront' | locale }}</button>\r\n      <button class=\"btn f-btn-mr btn-secondary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=help()>{{ 'HelpFront' | locale }}</button>\r\n      <button class=\"btn f-btn-mr btn-secondary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=import()>{{ 'ImportFront' | locale }}</button>\r\n  </div>\r\n</div>\r\n<div id=\"select\" class=\"f-utils-fill\">\r\n  <div id=\"left\" style=\"width:50%;height:100%;float:left;padding-left: 20px;\">\r\n    <div style=\"height:100%;border:1px solid rgb(235, 233, 233)\">\r\n      <farris-tabs style=\"height:100%\" [value]=\"'String'\" [contentFill]=\"true\" (tabChange)=\"funcTabChange($event)\">\r\n          <farris-tab [title]=\"this.Advanced\" [id]=\"'Advanced'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Advanced'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.String\" [id]=\"'String'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'String'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Math\" [id]=\"'Math'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Math'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n        <farris-tab [title]=\"this.Estimate\" [id]=\"'Estimate'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Estimate'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n        <farris-tab [title]=\"this.DateTime\" [id]=\"'DateTime'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'DateTime'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n        <farris-tab [title]=\"this.Translate\" [id]=\"'Translate'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Translate'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n          <farris-tab [title]=\"this.Aggregate\" [id]=\"'Aggregate'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                      <app-expr-func-grid [currentFuncTabType]=\"'Aggregate'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Analytical\" [id]=\"'Analytical'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                      <app-expr-func-grid [currentFuncTabType]=\"'Analytical'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Extend\" [id]=\"'Extend'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                      <app-expr-func-grid [funcExtend]=\"funcExtend\" [currentFuncTabType]=\"'Extend'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n      </farris-tabs>\r\n    </div>\r\n  </div>\r\n  <div id=\"middle\" class=\"position-relative\" style=\"width:36%;height:100%;float:left;padding-left: 7px;border:1px solid rgb(235, 233, 233)\">\r\n    <farris-tabs [value]=\"'Variable'\" [contentFill]=\"true\" class=\"f-utils-absolute-all\" style=\"left:6px;right:5px\">\r\n          <farris-tab [title]=\"this.Variable\" [id]=\"'Variable'\" class=\"f-utils-overflow-hidden\">\r\n              <ng-template #content>\r\n                  <div style=\"width: 100%;height: 100%; display: flex;\">\r\n                      <div class=\"f-utils-flex-column position-relative\" style=\"width: 30%;height: 100%;\" ngResizable [rzMinWidth]=\"40\"\r\n                          [rzMaxWidth]=\"400\" [rzHandles]=\"'e'\" rzAspectRatio=\"true\">\r\n                          <app-expression-var-grid (selectVarRow)=\"selectVarRowChange($event)\" [h1]=\"this.http\" class=\"f-utils-fill\"></app-expression-var-grid>\r\n                      </div>\r\n                      <div class=\"f-utils-flex-column position-relative\" style=\"width: 70%;height: 100%;flex: 1 1 auto; border-left: 1px solid #ddd;\">\r\n                          <app-expression-var-info-grid \r\n                          class=\"f-utils-fill\"\r\n                          [currentVarType]=\"currentVarType\"  \r\n                          [contextEntities]=\"contextEntities\"\r\n                          [sessionEntities]=\"sessionEntities\"\r\n                          (selectVarInfoRow)=\"selectVarInfoRowChange($event)\" \r\n                          (dbclickInsert)=\"dbclickVarInsert($event)\">\r\n                        </app-expression-var-info-grid>\r\n                      </div>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Entity\" [id]=\"'Entity'\">\r\n              <ng-template #content>\r\n                  <div class = \"f-utils-absolute-all f-utils-flex-row\">\r\n                      <div class = \"f-utils-fill-flex-column\" style=\"width:entitywidth;\" ngResizable [rzMinWidth]=\"40\"\r\n                          [rzMaxWidth]=\"800\" [rzHandles]=\"'e'\" rzAspectRatio=\"true\">\r\n                          <app-expression-entity-grid class=\"f-utils-fill-flex-column\"\r\n                          [schema]=\"schema\"\r\n                          [newSchemaMap]=\"newSchemaMap\"\r\n                          [injectedEntities]=\"injectedEntities\"\r\n                          (dbclickInsert)=\"dbclickEntityInsert($event)\" \r\n                          (selectentitychange)=\"selectentitychange($event)\"\r\n                          ></app-expression-entity-grid> \r\n                      </div>\r\n                      <div *ngIf = selectedResource class = \"f-utils-flex-column col-3 px-0\" style=\"border-left: 1px solid #ddd;\">\r\n                          <app-expression-entity-info-grid class = \"f-utils-fill-flex-column\"\r\n                          [schema]=\"schema\" \r\n                          [newSchemaMap]=\"newSchemaMap\"\r\n                          [choseEntityTableName]=\"choseSchemaTableName\"\r\n                          (dbclickInsert)=\"dbclickEntityInfoInsert($event)\"\r\n                          (selectSchemaRow)=\"selectschemainfoChange($event)\"\r\n                          ></app-expression-entity-info-grid>\r\n                      </div>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <!-- <farris-tab [title]=\"'\u5B9E\u4F53\u7C7B\u578B'\" [id]=\"'EntityType'\">\r\n              <ng-template #content>\r\n                  <div style=\"width: 100%;height: 100%; display: flex;\" >\r\n                      <div style=\"width: 50%;height: 268px; \" ngResizable [rzMinWidth]=\"40\"\r\n                          [rzMaxWidth]=\"500\" [rzHandles]=\"'e'\" rzAspectRatio=\"true\" >\r\n                          <app-expression-schema-grid \r\n                          [schema]=\"schema\" \r\n                          (selectschemachange)=\"selectschemaChange($event)\"\r\n                          ></app-expression-schema-grid> \r\n                      </div>\r\n                      <div style=\"width: 50%; flex: 1 1 auto; border-left: 1px solid #ddd;\">\r\n                          <app-expression-schema-info-grid \r\n                          [schema]=\"schema\" \r\n                          [choseSchemaTableName]=\"choseSchemaTableName\"\r\n                          (dbclickInsert)=\"dbclickSchemaInfoInsert($event)\"\r\n                          (selectSchemaRow)=\"selectschemainfoChange($event)\"\r\n                          ></app-expression-schema-info-grid>\r\n                      </div>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab> -->\r\n          <farris-tab [title]=\"this.Help\" [id]=\"'Help'\" class=\"f-utils-overflow-hidden\">\r\n              <ng-template #content>\r\n                  <div class=\"f-utils-flex-column position-relative\" style=\"width: 100%;height: 100%\">\r\n                    <app-expression-smart-help-grid \r\n                    class=\"f-utils-fill\"\r\n                    [smartHelp]=\"smartHelp\"\r\n                    (dbclickInsert)=\"dbclickSmartHelpInsert($event)\"\r\n                    ></app-expression-smart-help-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n      </farris-tabs>\r\n  </div>\r\n  <div id=\"right\" style=\"width:14%;float: left;padding-left: 5px;padding-right: 15px;\">\r\n      <div style=\"border: 0 solid #D9D9D9;border-radius: 3px;\">\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onPlus()\">+</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMinus()\">-</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMultiple()\">*</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onDivision()\">/</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onPercent()\">%</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onAssign()\">=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onDoubleQuotation()\">\" \"</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onEqual()\">==</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onUnequal()\">!=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMoreequal()\">>=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onLessequal()\"><=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onLess()\">{{'<'}}</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMore()\">{{'>'}}</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onBrace()\">[&nbsp;]</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onSparen()\">(&nbsp;)</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onOr()\">||</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onAnd()\">&&</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onOppose()\">!</button>\r\n      </div>       \r\n  </div>\r\n</div>\r\n<div *ngIf = selectnewfunc style=\"padding-left: 20px;position: absolute;bottom: 0;left: 0;right: 0;border-top: 1px solid #ddd;z-index: 100;background: white\">\r\n    <span style=\"\r\n    position: absolute;\r\n    top: -18px;\r\n    left: 50%;\r\n    border-radius: 4px;\r\n    width: 40px;\r\n    height: 18px;\r\n    cursor: pointer;\r\n    background: #fff;\r\n    text-align: center;\r\n    border: 1px solid #efecec;\r\n    /* box-shadow: 0 0 6px 0 rgba(57,66,100,.08); */\r\n    color: #59a1ff;\r\n    border-bottom: none;\r\n\"><i class=\"f-icon f-icon-arrow-seek-down\" (click)=\"hide()\"></i></span>\r\n    <span>\r\n      <i class=\"f-icon f-icon-info\"></i>\r\n    </span>\r\n    {{descriptinfo}}\r\n</div>\r\n</div>\r\n",
                    styles: [".cbtn{width:40px;height:40px;background:#fdfdfd;border:1px solid #d0d0d0;border-radius:3px;text-align:center}"]
                }] }
    ];
    /** @nocollapse */
    ExpressioneditorComponent.ctorParameters = function () { return [
        { type: ExpressionEventService },
        { type: Injector, decorators: [{ type: Optional }] },
        { type: HttpClient }
    ]; };
    ExpressioneditorComponent.propDecorators = {
        funcExtend: [{ type: Input }],
        expressionEntity: [{ type: Input }],
        contextEntities: [{ type: Input }],
        sessionEntities: [{ type: Input }],
        injectedEntities: [{ type: Input }],
        smartHelp: [{ type: Input }],
        text: [{ type: Input }],
        isPanel: [{ type: Input }],
        funcEntities: [{ type: Input }],
        gspCDTs: [{ type: Input }],
        commonObjects: [{ type: Input }],
        customSchemaName: [{ type: Input }],
        customSchema: [{ type: Input }],
        injectName: [{ type: Input }],
        injectSchemaName: [{ type: Input }],
        injectNameInSchema: [{ type: Input }],
        injectedType: [{ type: Input }],
        customNewSchemaName: [{ type: Input }],
        customNewSchema: [{ type: Input }],
        windowWidth: [{ type: Input }],
        result: [{ type: Output }],
        closeModalEmitter: [{ type: Output }]
    };
    return ExpressioneditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComboData = /** @class */ (function () {
    function ComboData() {
        this.treeInfo = new ComboTreeInfo;
        this.parentHierarchyInfo = new ComboParentHierarchyInfo;
    }
    return ComboData;
}());
var ComboTreeInfo = /** @class */ (function () {
    function ComboTreeInfo() {
    }
    return ComboTreeInfo;
}());
var ComboParentHierarchyInfo = /** @class */ (function () {
    function ComboParentHierarchyInfo() {
    }
    return ComboParentHierarchyInfo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComputeRuleComponent = /** @class */ (function () {
    function ComputeRuleComponent(msgSer, notifyService, injector, modalService, compFactRes) {
        this.msgSer = msgSer;
        this.notifyService = notifyService;
        this.injector = injector;
        this.modalService = modalService;
        this.compFactRes = compFactRes;
        this.expr = ""; //表达式串
        //表达式串
        this.result = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
        this.contextEntity = new ExpressionContextEntity; //表达式内部上下文
        //表达式内部上下文
        this.conditions = [
            {
                computeField: '',
                fieldName: '',
                value: '',
                lbracket: '(',
                rbracket: ')',
                relation: "&&",
                operator: "=="
            }
        ];
        this.advancedModalConfig = {
            title: "高级表达式",
            width: 1060,
            height: 610,
            showButtons: true
        };
        this.title = "条件表达式";
        this.height = 350;
        this.width = 750;
        this.LeftBracketData = ["(", "((", "(((", "(((("];
        this.RighttBracketData = [")", "))", ")))", "))))"];
        this.columnSizeData = [50, 130, 70, 100, 50, 50, 50];
        this.currentCondition = null;
        this.operators = [
            {
                label: "大于",
                value: ">"
            },
            {
                label: "大于等于",
                value: ">="
            },
            {
                label: "等于",
                value: "=="
            },
            {
                label: "不等于",
                value: "!="
            },
            {
                label: "小于",
                value: "<"
            },
            {
                label: "小于等于",
                value: "<="
            },
            {
                label: "等于(字符串)",
                value: "equal"
            },
            {
                label: "不等于(字符串)",
                value: "notequal"
            },
            {
                label: "为空",
                value: "==null"
            },
            {
                label: "不为空",
                value: "!=null"
            },
            {
                label: "包含",
                value: "Contains"
            },
            {
                label: "不包含",
                value: "NotContains"
            },
            {
                label: "开头是",
                value: "StartsWith"
            },
            {
                label: "开头不是",
                value: "NotStartsWith"
            },
            {
                label: "结尾是",
                value: "EndsWith"
            },
            {
                label: "结尾不是",
                value: "NotEndsWith"
            }
        ];
        this.relationData = [
            {
                label: "并且",
                value: "&&"
            },
            {
                label: "或者",
                value: "||"
            }
        ];
        this.notifies = {
            1: { type: 'success', msg: '表达式生成！' },
            2: { type: 'warning', msg: '请确保必填项填写完整！' },
        };
        this.entities = [];
        this.newItem = {
            computeField: '',
            fieldName: '',
            value: '',
            lbracket: '(',
            rbracket: ')',
            relation: "&&",
            operator: "=="
        };
    }
    // propertyList = {
    //   columns:[{
    //             "field": "name",
    //             "title": "名称",
    //             "width": 100,
    //             "hAlign": "left",
    //             "align": "left",
    //             "formatter": null
    //         }],
    //   items:[
    //           {
    //             "id": "order",
    //             "code": "order",
    //             "name": "订单",
    //             "treeInfo": {
    //                 // "isDetail": false,
    //                 "layer": 1,
    //                 "path": "0001"
    //             }
    //           },
    //           {
    //             "id": "orderItem01",
    //             "code": "orderItem01",
    //             "name": "订单明细",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "orderItem02",
    //             "code": "orderItem02",
    //             "name": "订单明细02",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010002"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "price",
    //             "code": "price",
    //             "name": "数量",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 3,
    //                 "path": "000100020001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "orderItem02"
    //             }
    //           }
    //       ],
    //   treeInfo: {
    //         "loadDataType": "all",
    //         "layerType": "pathcode",
    //         "dataField": "treeInfo",
    //         "pathField": "path",
    //         "layerField": "layer",
    //         "isDetailField": "isDetail",
    //         "onlySelectLeaf": false,
    //         "parentField": "parentElement",
    //         "treeDataIsInit": false
    //     },
    //   displayType: "TreeList"
    // }
    // propertyList = {
    //   columns:[{
    //             "field": "name",
    //             "title": "名称",
    //             "width": 100,
    //             "hAlign": "left",
    //             "align": "left",
    //             "formatter": null
    //         }],
    //   items:[
    //           {
    //             "id": "order",
    //             "code": "order",
    //             "name": "订单",
    //             "treeInfo": {
    //                 // "isDetail": false,
    //                 "layer": 1,
    //                 "path": "0001"
    //             }
    //           },
    //           {
    //             "id": "orderItem01",
    //             "code": "orderItem01",
    //             "name": "订单明细",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "orderItem02",
    //             "code": "orderItem02",
    //             "name": "订单明细02",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010002"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "price",
    //             "code": "price",
    //             "name": "数量",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 3,
    //                 "path": "000100020001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "orderItem02"
    //             }
    //           }
    //       ],
    //   treeInfo: {
    //         "loadDataType": "all",
    //         "layerType": "pathcode",
    //         "dataField": "treeInfo",
    //         "pathField": "path",
    //         "layerField": "layer",
    //         "isDetailField": "isDetail",
    //         "onlySelectLeaf": false,
    //         "parentField": "parentElement",
    //         "treeDataIsInit": false
    //     },
    //   displayType: "TreeList"
    // }
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.ngOnInit = 
    // propertyList = {
    //   columns:[{
    //             "field": "name",
    //             "title": "名称",
    //             "width": 100,
    //             "hAlign": "left",
    //             "align": "left",
    //             "formatter": null
    //         }],
    //   items:[
    //           {
    //             "id": "order",
    //             "code": "order",
    //             "name": "订单",
    //             "treeInfo": {
    //                 // "isDetail": false,
    //                 "layer": 1,
    //                 "path": "0001"
    //             }
    //           },
    //           {
    //             "id": "orderItem01",
    //             "code": "orderItem01",
    //             "name": "订单明细",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "orderItem02",
    //             "code": "orderItem02",
    //             "name": "订单明细02",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010002"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "price",
    //             "code": "price",
    //             "name": "数量",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 3,
    //                 "path": "000100020001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "orderItem02"
    //             }
    //           }
    //       ],
    //   treeInfo: {
    //         "loadDataType": "all",
    //         "layerType": "pathcode",
    //         "dataField": "treeInfo",
    //         "pathField": "path",
    //         "layerField": "layer",
    //         "isDetailField": "isDetail",
    //         "onlySelectLeaf": false,
    //         "parentField": "parentElement",
    //         "treeDataIsInit": false
    //     },
    //   displayType: "TreeList"
    // }
    /**
     * @return {?}
     */
    function () {
        if (this.contextEntity.sexpr) {
            this.conditions = (/** @type {?} */ (JSON.parse(this.contextEntity.sexpr)));
        }
        if (this.contextEntity.injectedEntities && this.contextEntity.injectedEntities.length > 0) {
            this.OninitSchemaEntity(this.contextEntity.injectedEntities, this.contextEntity.schemaMap);
        }
        this.propertyList = {
            columns: [{
                    "field": "name",
                    "title": "名称",
                    "width": 100,
                    "hAlign": "left",
                    "align": "left",
                    "formatter": null
                }],
            items: this.entities,
            treeInfo: {
                "loadDataType": "all",
                "layerType": "pathcode",
                "dataField": "treeInfo",
                "pathField": "path",
                "layerField": "layer",
                "isDetailField": "isDetail",
                "onlySelectLeaf": false,
                "parentField": "parentElement",
                "treeDataIsInit": false
            },
            displayType: "TreeList"
        };
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ComputeRuleComponent.prototype.insert = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var _newItem = Object.assign({}, this.newItem);
        this.conditions.splice(index + 1, 0, _newItem);
        // if (index  === 0) {
        //     this.conditions.unshift(_newItem);
        // } else {
        //     this.conditions.splice(index+1, 0, _newItem);
        // }
        this.changeConditionList();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ComputeRuleComponent.prototype.remove = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        /** @type {?} */
        var num = index + 1;
        this.msgSer.confirm('确认删除第' + num + '行数据?').subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (result) {
                if (index != 0) {
                    _this.conditions.splice(index, 1);
                }
                else if (_this.conditions.length > 1) {
                    _this.conditions.splice(index, 1);
                }
                else {
                    _this.conditions = [
                        {
                            computeField: '',
                            fieldName: '',
                            value: '',
                            lbracket: '(',
                            rbracket: ')',
                            relation: "&&",
                            operator: "=="
                        }
                    ];
                }
                _this.changeConditionList();
                if (_this.currentCondition) {
                    if (index === _this.currentCondition.index) {
                        _this.currentCondition = null;
                    }
                }
            }
        }));
    };
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.onAddFilter = /**
     * @return {?}
     */
    function () {
        // this.conditions = [...this.conditions, Object.assign({}, this.newCondition)];
        // this.changeConditionList();
    };
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        // this.messagerService.question('确认要清空当前所有条件吗？', () => {
        //     this.conditions = [];
        //     this.changeConditionList();
        // });
    };
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.toTop = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.toUp = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, __spread([index - 1, 0], tempArr));
            this.currentCondition.index = index - 1;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.toDown = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, __spread([index + 1, 0], tempArr));
            this.currentCondition.index = index + 1;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.toBottom = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ComputeRuleComponent.prototype.changeConditionList = /**
     * @private
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComputeRuleComponent.prototype.selected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // console.log($event);
        this.currentCondition = $event;
    };
    /**打开高级表达式 */
    /**
     * 打开高级表达式
     * @return {?}
     */
    ComputeRuleComponent.prototype.openAdvancedExpression = /**
     * 打开高级表达式
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        this.openAdvancedExpr().then((/**
         * @param {?} expre
         * @return {?}
         */
        function (expre) {
            that.result.emit(JSON.stringify(expre));
        }));
        this.closeModalEmitter.emit("close");
    };
    /**
     * @return {?}
     */
    ComputeRuleComponent.prototype.openAdvancedExpr = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
            /** @type {?} */
            var compRef = compFactory.create(that.injector);
            compRef.instance.expressionEntity = that.contextEntity;
            compRef.instance.expressionEntity.expr = that.convertExpr(that.conditions);
            /** @type {?} */
            var dialog = that.modalService.show(compRef, {
                title: "高级表达式",
                width: 1060,
                height: 610,
                buttons: [
                    { text: '保存', cls: 'btn btn-primary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            compRef.instance.getExprs();
                            dialog.close();
                        }) },
                    { text: '取消', cls: 'btn btn-secondary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            dialog.close();
                        }) }
                ],
                showButtons: true
            });
            compRef.instance.result.subscribe((/**
             * @param {?} expressionContent
             * @return {?}
             */
            function (expressionContent) {
                return resolve(expressionContent);
            }));
        }));
    };
    /**确认 */
    /**
     * 确认
     * @return {?}
     */
    ComputeRuleComponent.prototype.confirm = /**
     * 确认
     * @return {?}
     */
    function () {
        /** @type {?} */
        var expression = new ExpressionEntity();
        expression.expr = this.convertExpr(this.conditions);
        expression.sexpr = JSON.stringify(this.conditions);
        this.result.emit(JSON.stringify(expression));
        this.notifyService[this.notifies['1'].type]({
            msg: this.notifies['1'].msg
        });
        this.closeModalEmitter.emit("close");
    };
    /**重置 */
    /**
     * 重置
     * @return {?}
     */
    ComputeRuleComponent.prototype.reset = /**
     * 重置
     * @return {?}
     */
    function () {
        this.conditions = [
            {
                computeField: '',
                fieldName: '',
                value: '',
                lbracket: '(',
                rbracket: ')',
                relation: "&&",
                operator: "=="
            }
        ];
    };
    /**取消 */
    /**
     * 取消
     * @return {?}
     */
    ComputeRuleComponent.prototype.cancle = /**
     * 取消
     * @return {?}
     */
    function () {
        this.closeModalEmitter.emit("close");
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComputeRuleComponent.prototype.isSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    };
    /***转化为表达式串 */
    /**
     * 转化为表达式串
     * @private
     * @param {?} conditions
     * @return {?}
     */
    ComputeRuleComponent.prototype.convertExpr = /**
     * 转化为表达式串
     * @private
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        var _this = this;
        this.expr = "";
        if (conditions) {
            /** @type {?} */
            var count_1 = 0;
            /** @type {?} */
            var length_1 = conditions.length;
            conditions.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                count_1++;
                if (count_1 < length_1) {
                    if (item.operator == "==" || item.operator == "!=" || item.operator == ">" ||
                        item.operator == ">=" || item.operator == "<" || item.operator == "<=") {
                        _this.expr = _this.expr + item.lbracket + item.computeField + item.operator + item.value + item.rbracket + item.relation;
                    }
                    else {
                        switch (item.operator) {
                            case "equal":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "==\"" + item.value + "\"" + item.rbracket + item.relation;
                                break;
                            case "notequal":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "!=\"" + item.value + "\"" + item.rbracket + item.relation;
                                break;
                            case "==null":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "==null" + item.rbracket + item.relation;
                                break;
                            case "!=null":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "!=null" + item.rbracket + item.relation;
                                break;
                            case "Contains":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.Contains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotContains":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.NotContains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "StartsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.StartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotStartsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.NotStartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "EndsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.EndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotEndsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.NotEndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                        }
                    }
                }
                else {
                    if (item.operator == "==" || item.operator == "!=" || item.operator == ">" ||
                        item.operator == ">=" || item.operator == "<" || item.operator == "<=") {
                        _this.expr = _this.expr + item.lbracket + item.computeField + item.operator + item.value + item.rbracket;
                    }
                    else {
                        switch (item.operator) {
                            case "equal":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "==\"" + item.value + "\"" + item.rbracket;
                                break;
                            case "notequal":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "!=\"" + item.value + "\"" + item.rbracket;
                                break;
                            case "==null":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "==null" + item.rbracket;
                                break;
                            case "!=null":
                                _this.expr = _this.expr + item.lbracket + item.computeField + "!=null" + item.rbracket;
                                break;
                            case "Contains":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.Contains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotContains":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.NotContains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "StartsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.StartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotStartsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.NotStartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "EndsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.EndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotEndsWith":
                                _this.expr = _this.expr + item.lbracket + "DefaultFunction.NotEndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                        }
                    }
                }
            }));
        }
        return this.expr;
    };
    //初始化Schema格式的Entity
    //初始化Schema格式的Entity
    /**
     * @param {?} injectedEntities
     * @param {?} schema
     * @return {?}
     */
    ComputeRuleComponent.prototype.OninitSchemaEntity = 
    //初始化Schema格式的Entity
    /**
     * @param {?} injectedEntities
     * @param {?} schema
     * @return {?}
     */
    function (injectedEntities, schema) {
        var _this = this;
        if (injectedEntities && injectedEntities.length > 0) {
            this.entities = [];
            //实体显示禁忌表
            /** @type {?} */
            var navigatorMap_1 = new Map();
            /** @type {?} */
            var numcount_1 = 1;
            //解析每一个注入实体，将其转化为TreeNode
            injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            function (injectEntity) {
                //根据schema名称找到对应的schema
                /** @type {?} */
                var currentSchema = schema.get(injectEntity.schemaName);
                switch (injectEntity.injectedType) {
                    //注入的若为实体集
                    case InjectedType.EntitySet:
                        break;
                    //注入的若为实体类型
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            var entityType = currentSchema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            function (entityType) { return entityType.name == injectEntity.injectedName; }));
                            _this.ConvertEntityType(entityType, "", currentSchema, navigatorMap_1, 1, "", numcount_1);
                        }
                        break;
                }
                numcount_1++;
            }));
        }
    };
    //实体集转化
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ComputeRuleComponent.prototype.ConvertEntitySet = 
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    function (entitySet, schema, navigatorMap) {
        // if (entitySet) {
        //   //将entityset转化为TreeNode结构用于展示
        //   let treeNode= new ComboData;
        //   treeNode.treeInfo.
        //   //将转化完成的实体集添加进禁忌表，防止循环转化
        //   navigatorMap.set(entitySet.name, InjectedType.EntitySet);
        //   //找到实体集对应的实体类型
        //   let entityType = schema.entityTypes.find(entityType => entityType.name == entitySet.entityType);
        //   //将entitytype转化为TreeNode结构用于展示
        //   this.ConvertEntityType(entityType, schema, navigatorMap).children.forEach(child => {
        //     treeNode.children.push(child);
        //   });
        //   return treeNode;
        //}
        //实体集为空或未定义则返回空
        //else return null;
    };
    //实体类型转化
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} parentId
     * @param {?} schema
     * @param {?} navigatorMap
     * @param {?} layer
     * @param {?} parentPath
     * @param {?} pathNum
     * @return {?}
     */
    ComputeRuleComponent.prototype.ConvertEntityType = 
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} parentId
     * @param {?} schema
     * @param {?} navigatorMap
     * @param {?} layer
     * @param {?} parentPath
     * @param {?} pathNum
     * @return {?}
     */
    function (entityType, parentId, schema, navigatorMap, layer, parentPath, pathNum) {
        var _this = this;
        if (entityType) {
            /** @type {?} */
            var mainTreeNode_1 = new ComboData;
            mainTreeNode_1.code = entityType.name;
            mainTreeNode_1.name = entityType.name;
            mainTreeNode_1.treeInfo.layer = layer;
            mainTreeNode_1.treeInfo.path = parentPath + this.getPath(pathNum);
            if (parentId) {
                mainTreeNode_1.id = parentId + "." + entityType.name;
                mainTreeNode_1.parentHierarchyInfo.parentElement = parentId;
            }
            else {
                mainTreeNode_1.id = entityType.name;
            }
            this.entities.push(mainTreeNode_1);
            //将转化的entitytype添加进禁忌表
            navigatorMap.set(entityType.name + entityType.id, InjectedType.EntityType);
            //将每个属性转化为每个TreeNode
            /** @type {?} */
            var propertyNum_1 = 1;
            entityType.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            function (property) {
                /** @type {?} */
                var propertyTree = new ComboData;
                propertyTree.id = mainTreeNode_1.id + "." + property.name;
                propertyTree.code = property.name;
                propertyTree.name = property.name;
                propertyTree.treeInfo.layer = layer + 1;
                propertyTree.treeInfo.path = mainTreeNode_1.treeInfo.path + _this.getPath(propertyNum_1);
                propertyNum_1++;
                propertyTree.parentHierarchyInfo.parentElement = mainTreeNode_1.id;
                _this.entities.push(propertyTree);
            }));
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            function (navigationProperty) {
                //判断是否导航属性对应的名称在禁忌表中
                if (!(navigatorMap.get(navigationProperty.name + navigationProperty.navigationId))) {
                    if (navigationProperty.type == NavigationType.EntitySet) ; //若为实体类型
                    else if (navigationProperty.type == NavigationType.EntityType) {
                        /** @type {?} */
                        var entityType_1 = schema.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        function (entitytype) { return entitytype.id == navigationProperty.navigationId && entitytype.name == navigationProperty.name; }));
                        _this.ConvertEntityType(entityType_1, mainTreeNode_1.id, schema, navigatorMap, layer + 1, mainTreeNode_1.treeInfo.path, propertyNum_1 + 1);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    var navigatortree = new ComboData;
                    navigatortree.id = mainTreeNode_1.id + "." + navigationProperty.name;
                    navigatortree.code = navigationProperty.name;
                    navigatortree.name = navigationProperty.name;
                    navigatortree.treeInfo.layer = layer + 1;
                    navigatortree.treeInfo.path = mainTreeNode_1.treeInfo.path + _this.getPath(propertyNum_1);
                    navigatortree.parentHierarchyInfo.parentElement = mainTreeNode_1.id;
                    _this.entities.push(navigatortree);
                }
                propertyNum_1++;
            }));
        }
        //若entitytype为空或未定义
        else
            return null;
    };
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    ComputeRuleComponent.prototype.getPath = /**
     * @private
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var num = "";
        if (path < 10) {
            num = "000" + path;
        }
        else if (10 <= path && path < 100) {
            num = "00" + path;
        }
        else if (100 <= path && path < 1000) {
            num = "0" + path;
        }
        else {
            num = path + "";
        }
        return num;
    };
    ComputeRuleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'svc-compute-rule',
                    template: "    <div style=\"background: #f0ffffe0;width: 100%;\">\r\n        <button type=\"button\" title=\"\u4E0A\u79FB\" class=\"k-button k-button-icon k-flat\" (click)=\"toUp()\"><span class=\"k-icon k-i-arrow-up\"></span></button>\r\n        <button type=\"button\" title=\"\u4E0B\u79FB\" class=\"k-button k-button-icon k-flat\" (click)=\"toDown()\"><span class=\"k-icon k-i-arrow-down\"></span></button>\r\n        <button type=\"button\" title=\"\u7F6E\u9876\" class=\"k-button k-button-icon k-flat\" (click)=\"toTop()\"><span class=\"k-icon k-i-arrow-end-up\"></span></button>\r\n        <button type=\"button\" title=\"\u57AB\u5E95\" class=\"k-button k-button-icon k-flat\" (click)=\"toBottom()\"><span class=\"k-icon k-i-arrow-end-down\"></span></button>\r\n    </div>\r\n    <div class=\"table-header \">\r\n        <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n            <colgroup>\r\n                <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n            </colgroup>\r\n            <thead>\r\n                <tr>\r\n                    <th align=\"center\"><b>&nbsp;\u5DE6\u62EC\u53F7</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u6570\u636E</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u6BD4\u8F83\u7B26</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u503C</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u53F3\u62EC\u53F7</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u5173\u7CFB</b></th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n        </table>\r\n    </div>\r\n    <div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n        <perfect-scrollbar [config]=\"{}\">\r\n            <table class=\"table table-bordered\">\r\n                <colgroup>\r\n                    <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n                </colgroup>\r\n                <tbody>\r\n                    <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\">\r\n                        <td>\r\n                            <select class=\"form-control filter-select\" [(ngModel)]=\"condition.lbracket\" name=\"lbracket\">\r\n                            <option *ngFor=\"let item of LeftBracketData\" [value]=\"item\">{{ item }}</option>\r\n                            </select>\r\n                        </td>\r\n              <td>\r\n                  <farris-combo-lookup\r\n                    [(ngModel)]=\"condition.computeField\"\r\n                    [idField]=\"'id'\"\r\n                    [textField]=\"'id'\"\r\n                    [displayType]=\"'LOOKUPTREELIST'\"\r\n                    [data]=\"propertyList\"\r\n                  ></farris-combo-lookup>\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\" [(ngModel)]=\"condition.operator\" name=\"operator\">\r\n                      <option *ngFor=\"let item of operators\" [value]=\"item.value\">{{item.label}}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                  <input type=\"text\" style=\"width:100%\" placeholder=\"\" class=\"k-textbox\" name=\"value\" [(ngModel)]=\"condition.value\">\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\"  [(ngModel)]=\"condition.rbracket\" name=\"rbracket\">\r\n                      <option *ngFor=\"let item of RighttBracketData\" [value]=\"item\">{{ item }}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\" [(ngModel)]=\"condition.relation\" name=\"relation\">\r\n                    <option *ngFor=\"let item of relationData\" [value]=\"item.value\">{{ item.label }}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" (click)=\"insert(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                <button type=\"button\" (click)=\"remove(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-delete\"></span></button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n      </table>\r\n  </perfect-scrollbar>\r\n</div>\r\n<div class=\"modal-footer footer\">\r\n    <a class=\"mr-auto\" href=\"javascript: void(0);\" (click)=\"openAdvancedExpression()\" > \u9AD8\u7EA7\u8868\u8FBE\u5F0F \uFF1E</a>\r\n    <button type=\"button\" class=\"btn f-btn-mr btn-primary\" (click)=\"confirm()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"reset()\">\u91CD\u7F6E</button>\r\n    <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</div>\r\n\r\n\r\n",
                    styles: [".filter-select{width:100%;padding-left:0;padding-right:0}.selected{background:#c2e4ff}.footer{position:absolute;bottom:0;left:0;right:0;justify-content:flex-start}"]
                }] }
    ];
    /** @nocollapse */
    ComputeRuleComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: NotifyService },
        { type: Injector },
        { type: BsModalService },
        { type: ComponentFactoryResolver }
    ]; };
    ComputeRuleComponent.propDecorators = {
        result: [{ type: Output }],
        closeModalEmitter: [{ type: Output }],
        contextEntity: [{ type: Input }],
        conditions: [{ type: Input }]
    };
    return ComputeRuleComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// injectionToken作用说明
// https://segmentfault.com/a/1190000008626348
/** @type {?} */
var MY_MONACO_EDITOR_CONFIG = new InjectionToken('MY_MONACO_EDITOR_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CODE_EDITOR_EVENTS = {
    onInit: 'onInit',
    onChange: 'onChange',
    onTouched: 'onTouched'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CodeEditorEventService = /** @class */ (function () {
    function CodeEditorEventService() {
        this.eventNames = Object.keys(CODE_EDITOR_EVENTS);
        this._events = {}; // 使用事件
    }
    /**
     * 设置启用事件
     * @param  事件
     */
    // 使用事件
    /**
     * 设置启用事件
     * @param {?} event
     * @return {?}
     */
    CodeEditorEventService.prototype.addEvent = 
    // 使用事件
    /**
     * 设置启用事件
     * @param {?} event
     * @return {?}
     */
    function (event) {
        assign(this._events, event);
        // console.log(this.events);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CodeEditorEventService.prototype.fireEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._events[event.eventName].emit(event);
        // console.log("Emit Event:" + event);
    };
    CodeEditorEventService.decorators = [
        { type: Injectable }
    ];
    return CodeEditorEventService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var loadedMonaco = false;
/** @type {?} */
var loadPromise;
// 自定义输入控件:1.封装ControlValueAccessor
// https://code-examples.net/zh-CN/q/2154761
/** @type {?} */
var CODE_EDITOR_INPUT_VALUE_ACCESSOR = {
    // https://blog.csdn.net/wangdan_2013/article/details/81314959
    provide: NG_VALUE_ACCESSOR,
    //
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return MyMonacoEditorComponent; })),
    //
    multi: true //
};
/** @type {?} */
var monacoConfig = {
    baseUrl: 'assets',
    defaultOptions: { scrollBeyondLastLine: false }
};
var ɵ0 = monacoConfig;
var MyMonacoEditorComponent = /** @class */ (function () {
    // 注入AngularMonacoEditorConfig，在创建Editor实例时设置config
    function MyMonacoEditorComponent(zone, config, codeEditorEventService, eventService) {
        var _this = this;
        this.zone = zone;
        this.config = config;
        this.codeEditorEventService = codeEditorEventService;
        this.eventService = eventService;
        this._value = '';
        //ControlValueAccessor提供的事件回调
        this.onChangeHandler = (/**
         * @param {?} _
         * @return {?}
         */
        function (_$$1) {
            _this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onChange,
                target: _this,
                data: _$$1
            });
        });
        //ControlValueAccessor提供的事件回调
        this.onTouchedHandler = (/**
         * @return {?}
         */
        function () {
            _this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onTouched,
                target: _this
            });
        });
        // 初始化自定义事件
        /** @type {?} */
        var self = this;
        codeEditorEventService.eventNames.forEach((/**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            // 创建自定义事件，此处作用等效于: @Output() onInit = new EventEmitter<any>() 
            self[name] = new EventEmitter();
            /** @type {?} */
            var eventPair = pick(self, name);
            codeEditorEventService.addEvent(eventPair);
        }));
    }
    Object.defineProperty(MyMonacoEditorComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            // 默认options(this.config.defaultOptions) + 自定义options(options)
            this._options = Object.assign({}, this.config.defaultOptions, options);
            if (this._editor) {
                this._editor.dispose();
                this.initMonaco(options);
            }
        },
        enumerable: true,
        configurable: true
    });
    //在光标处插入表达式的方法
    //在光标处插入表达式的方法
    /**
     * @param {?} insertWord
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.insertWord = 
    //在光标处插入表达式的方法
    /**
     * @param {?} insertWord
     * @return {?}
     */
    function (insertWord) {
        if (insertWord && insertWord != undefined && insertWord != "") {
            /** @type {?} */
            var p = {
                lineNumber: 1,
                column: 1
            };
            if (this._editor) {
                p = this._editor.getPosition();
            }
            /** @type {?} */
            var range = new monaco.Range(p.lineNumber, p.column, p.lineNumber, p.column);
            /** @type {?} */
            var id = { major: 1, minor: 1 };
            /** @type {?} */
            var text = insertWord;
            /** @type {?} */
            var op = { identifier: id, range: range, text: text, forceMoveMarkers: true };
            this._editor.executeEdits("my-source", [op]);
        }
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then((/**
             * @return {?}
             */
            function () {
                _this.initMonaco(_this.options);
            }));
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) {
                // const baseUrl = this.config.baseUrl || '/assets';
                /** @type {?} */
                var baseUrl = '/platform/common/web/caf';
                // if (typeof((<any>window).monaco) === 'object') {
                //   resolve();
                //   return;
                // }
                /** @type {?} */
                var onGotAmdLoader = (/**
                 * @return {?}
                 */
                function () {
                    // Load monaco
                    ((/** @type {?} */ (window))).require.config({ paths: { 'vs': baseUrl + "/monaco/vs" } });
                    ((/** @type {?} */ (window))).require(['vs/editor/editor.main'], (/**
                     * @return {?}
                     */
                    function () {
                        _this.onMonacoLoad();
                        _this.initMonaco(_this.options);
                        resolve();
                    }));
                });
                // Load AMD loader if necessary
                if (!((/** @type {?} */ (window))).require) {
                    /** @type {?} */
                    var loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = baseUrl + "/monaco/vs/loader.js";
                    loaderScript.onload = onGotAmdLoader;
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            }));
        }
        //在光标处插入表达式事件订阅
        /** @type {?} */
        var temp = this;
        this.eventService.currentExpression().subscribe((/**
         * @param {?} insertexpression
         * @return {?}
         */
        function (insertexpression) {
            if (temp._editor != undefined) {
                temp.insertWord(insertexpression);
            }
        }));
        this.eventService.clearExpression().subscribe((/**
         * @return {?}
         */
        function () {
            if (temp._editor != undefined) {
                temp._editor.setValue("");
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.onMonacoLoad = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = "foo.json";
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
            validate: true,
            schemas: [{
                    uri: "http://myserver/foo-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            p1: {
                                enum: ["v1", "v2"]
                            },
                            p2: {
                                $ref: "http://myserver/bar-schema.json"
                            }
                        }
                    }
                }, {
                    uri: "http://myserver/bar-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            q1: {
                                enum: ["x1", "x2"]
                            }
                        }
                    }
                }]
        });
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    };
    /**
     * @protected
     * @param {?} options
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.initMonaco = /**
     * @protected
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        debugger;
        console.log("Init the custom monaco code editor.");
        // if (hasModel) {
        //   options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
        // }
        this._editor = monaco.editor.create(this._editorComponent.nativeElement, options);
        {
            this._editor.setValue(this._value);
        }
        // monaco editor -> outside component
        this._editor.onDidChangeModelContent((/**
         * @return {?}
         */
        function () { return _this.onChangeModelContentHandler(); }));
        this._editor.onDidBlurEditorText((/**
         * @return {?}
         */
        function () { return _this.onBlurEditorTextHandler(); }));
        // refresh layout on resize event.
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        // this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
        this.codeEditorEventService.fireEvent({
            eventName: CODE_EDITOR_EVENTS.onInit,
            target: this,
            editor: this._editor
        });
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.onChangeModelContentHandler = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var _value = this._editor.getValue();
        // monaco editor -> outside component
        // https://github.com/JTangming/tm/issues/4 ngZone详解
        this.zone.run((/**
         * @return {?}
         */
        function () { return _this.value = _value; })); // value is not propagated to parent when executing outside zone.
        // console.log("write from the monaco:" + this._value);
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.onBlurEditorTextHandler = /**
     * @return {?}
     */
    function () {
        this.onTouchedHandler();
    };
    Object.defineProperty(MyMonacoEditorComponent.prototype, "value", {
        //get accessor
        get: 
        //get accessor
        /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        //set accessor including call the onchange callback
        set: 
        //set accessor including call the onchange callback
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.value) { // 注意这种写法，值得学习
                this._value = v;
            }
            this.onChangeHandler(this.value); //在属性修饰器里调用onchangeHandler方法
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.localEditor = /**
     * @return {?}
     */
    function () {
        this.writeValue('test');
    };
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.writeValue = 
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.value = value || '';
        // Fix for value change while dispose in process.
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this._editor /*&& !this.options.model*/) {
                _this._editor.setValue(_this._value);
                // console.log("write to the editor:" + this._value);
            }
        }));
    };
    //From ControlValueAccessor interface
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.registerOnChange = 
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeHandler(this);
    };
    //From ControlValueAccessor interface
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.registerOnTouched = 
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedHandler();
    };
    MyMonacoEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-my-monaco-editor',
                    template: "<div class=\"editor h-100\" #codeEditor></div>",
                    // 自定义输入控件:2.引入依赖服务ControlValueAccessor
                    providers: [CODE_EDITOR_INPUT_VALUE_ACCESSOR,
                        CodeEditorEventService,
                        {
                            provide: MY_MONACO_EDITOR_CONFIG,
                            useValue: ɵ0
                        }
                    ],
                    styles: [":host{display:block;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    MyMonacoEditorComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [MY_MONACO_EDITOR_CONFIG,] }] },
        { type: CodeEditorEventService },
        { type: ExpressionEventService }
    ]; };
    MyMonacoEditorComponent.propDecorators = {
        _editorComponent: [{ type: ViewChild, args: ['codeEditor',] }],
        onInit: [{ type: Output }],
        onChange: [{ type: Output }],
        onTouched: [{ type: Output }],
        options: [{ type: Input, args: ['options',] }]
    };
    return MyMonacoEditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MyMonacoEditorModule = /** @class */ (function () {
    function MyMonacoEditorModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    MyMonacoEditorModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: MyMonacoEditorModule,
            providers: [
                { provide: MY_MONACO_EDITOR_CONFIG, useValue: config }
            ]
        };
    };
    MyMonacoEditorModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        MyMonacoEditorComponent
                    ],
                    entryComponents: [
                        MyMonacoEditorComponent
                    ],
                    declarations: [
                        MyMonacoEditorComponent
                    ],
                    providers: [
                        CodeEditorEventService
                    ]
                },] }
    ];
    return MyMonacoEditorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FuncOnEntity = /** @class */ (function () {
    function FuncOnEntity() {
        this.className = "";
    }
    return FuncOnEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExprFuncGridComponent = /** @class */ (function () {
    function ExprFuncGridComponent(eventService, injector, http) {
        this.eventService = eventService;
        this.injector = injector;
        this.http = http;
        this.currentFuncTabType = "String";
        this.funcExtend = [];
        this.selectFuncRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.standardFunctions = []; //规范函数
        //规范函数
        this.allFunctions = []; //所有函数，包含不规范
        //所有函数，包含不规范
        this.deprecatedFunctions = [
            "StringSubstring", "StringLength", "StringReplace", "StringToUpper", "StringToLower", "StringIndexOf", "StringLastIndexOf", "StringTrimStart", "StringTrimEnd", "StringTrim", "StringAdd",
            "Round", "BankerRound",
            "getComputeJsonData",
            "ToDecimal", "ToSingle"
        ]; //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        this.columns = [];
        // if(this.injector)
        // {
        // this.http=this.injector.get(HttpClient);
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        // }
    }
    /**
     * @return {?}
     */
    ExprFuncGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventService.subClearFuncSelect().subscribe((/**
         * @return {?}
         */
        function () {
            _this.dg.clearAll();
        }));
        this.columns = [
            { field: 'name', title: this.localePipe.transform("FunctionSemanticName"), width: 180 },
            { field: 'key', title: this.localePipe.transform("FunctionName"), width: 180 },
            { field: 'param', title: this.localePipe.transform("FunctionParameter"), width: 250 }
        ];
        //获取i18n函数资源；过滤不规范命名函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        for (var i = 0; i < this.allFunctions.length; i++) {
            if (!this.deprecatedFunctions.includes(this.allFunctions[i].key)) {
                this.standardFunctions.push(this.allFunctions[i]);
            }
        }
        switch (this.currentFuncTabType) {
            case "String":
                this.findFunctionByType("String");
                break;
            case "DateTime":
                this.findFunctionByType("DateTime");
                break;
            case "Aggregate":
                this.findFunctionByType("Aggregate");
                break;
            case "Translate":
                this.findFunctionByType("Translate");
                break;
            case "Estimate":
                this.findFunctionByType("Estimate");
                break;
            case "Math":
                this.findFunctionByType("Math");
                break;
            case "Analytical":
                this.findFunctionByType("Analytical");
                break;
            case "Advanced":
                this.findFunctionByType("Advanced");
                break;
            case "Extend":
                this.findFunctionByType("Extend");
                break;
        }
        /** @type {?} */
        var itmeList = [];
        /**
         * 封装提供给表达式编辑器
         * 1：Advanced使用key,不使用name
         */
        this.items.forEach((/**
         * @param {?} funcitem
         * @return {?}
         */
        function (funcitem) {
            /** @type {?} */
            var func = new FuncOnEntity;
            if (funcitem.type == "Advanced") {
                func.name = funcitem.key;
            }
            else {
                func.name = funcitem.name;
            }
            func.key = funcitem.key;
            func.params = funcitem.params;
            func.type = funcitem.type;
            func.className = funcitem.className;
            func.description = funcitem.description;
            func.param = "(";
            for (var i = 0; i < funcitem.params.length - 1; i++) {
                // func.param = func.param + funcitem.params[i].name + ":" + funcitem.params[i].type + ",";
                func.param = func.param + funcitem.params[i].key + ",";
            }
            if (funcitem.params.length != 0) {
                // func.param = func.param + funcitem.params[funcitem.params.length - 1].name + ":" + funcitem.params[funcitem.params.length - 1].type + ")";
                func.param = func.param + funcitem.params[funcitem.params.length - 1].key + ")";
            }
            else
                func.param = func.param + ")";
            itmeList.push(func);
        }));
        this.items = itmeList;
    };
    /**
     * @return {?}
     */
    ExprFuncGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExprFuncGridComponent.prototype.ondblclickRow = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dbclickInsert.emit($event.rowData);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExprFuncGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectFuncRow.emit($event.data);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ExprFuncGridComponent.prototype.findFunctionByType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        this.items = [];
        this.standardFunctions.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.type == type) {
                _this.items.push(element);
            }
        }));
    };
    ExprFuncGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expr-func-grid',
                    template: "<div style=\"height: 100%;width: 100%;\">\r\n<farris-datagrid #dg\r\n[idField]=\"'key'\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"false\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[headerHeight]=\"30\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>\r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExprFuncGridComponent.ctorParameters = function () { return [
        { type: ExpressionEventService },
        { type: Injector },
        { type: HttpClient }
    ]; };
    ExprFuncGridComponent.propDecorators = {
        dg: [{ type: ViewChild, args: ['dg',] }],
        currentFuncTabType: [{ type: Input }],
        funcExtend: [{ type: Input }],
        selectFuncRow: [{ type: Output }],
        dbclickInsert: [{ type: Output }]
    };
    return ExprFuncGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionVarGridComponent = /** @class */ (function () {
    function ExpressionVarGridComponent() {
        this.selectVarRow = new EventEmitter();
        this.columns = [
            { field: 'name', title: '名称' },
        ];
        this.items = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ExpressionVarGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.items = [
            {
                name: this.localePipe.transform("VariableSessionValue"),
                id: VarType.Session
            },
            {
                name: this.localePipe.transform("VariableContextParameter"),
                id: VarType.Context
            }
        ];
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionVarGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectVarRow.emit($event.data);
    };
    ExpressionVarGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-var-grid',
                    template: "<farris-datagrid\r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"false\"\r\n[headerHeight]=\"30\"\r\n[pagination]=\"false\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionVarGridComponent.ctorParameters = function () { return []; };
    ExpressionVarGridComponent.propDecorators = {
        h1: [{ type: Input }],
        selectVarRow: [{ type: Output }]
    };
    return ExpressionVarGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionVarInfoGridComponent = /** @class */ (function () {
    // private http = new HttpClient();
    function ExpressionVarInfoGridComponent(eventService) {
        this.eventService = eventService;
        this.currentVarType = VarType.Context;
        this.contextEntities = [];
        this.sessionEntities = [];
        this.selectVarInfoRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        this.columns = [
            { field: 'key', title: this.localePipe.transform("VariableName"), width: '20%', filter: true },
            { field: 'name', title: this.localePipe.transform("VariableSemanticNameValue"), width: '30%', filter: true }
        ];
    }
    /**
     * @return {?}
     */
    ExpressionVarInfoGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventService.subClearFuncSelect().subscribe((/**
         * @return {?}
         */
        function () {
            _this.dg.clearAll();
        }));
    };
    /**
     * @return {?}
     */
    ExpressionVarInfoGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        switch (this.currentVarType) {
            case VarType.Context:
                this.items = this.contextEntities;
                break;
            case VarType.Session:
                this.items = this.sessionEntities;
                break;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionVarInfoGridComponent.prototype.ondblclickRow = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dbclickInsert.emit($event.rowData);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionVarInfoGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectVarInfoRow.emit($event.data);
    };
    ExpressionVarInfoGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-var-info-grid',
                    template: "<farris-datagrid #dg\r\n[idField]=\"'key'\"\r\n[height]=\"268\"\r\n[width]=\"430\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[enableFilterRow]=\"true\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionVarInfoGridComponent.ctorParameters = function () { return [
        { type: ExpressionEventService }
    ]; };
    ExpressionVarInfoGridComponent.propDecorators = {
        dg: [{ type: ViewChild, args: ['dg',] }],
        currentVarType: [{ type: Input }],
        contextEntities: [{ type: Input }],
        sessionEntities: [{ type: Input }],
        selectVarInfoRow: [{ type: Output }],
        dbclickInsert: [{ type: Output }]
    };
    return ExpressionVarInfoGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionSchemaGridComponent = /** @class */ (function () {
    function ExpressionSchemaGridComponent() {
        this.schema = new Map();
        this.selectschemachange = new EventEmitter();
        this.currentNode = new CurrentNode;
        this.cols = [
            { field: 'name', title: '纲要名称' }
        ];
        this.treedata = [];
    }
    /**
     * @return {?}
     */
    ExpressionSchemaGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.convertSchema();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionSchemaGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentNode = new CurrentNode;
        this.currentNode.id = $event.node.data.id;
        this.currentNode.name = $event.node.data.name;
        this.currentNode.parentName = $event.node.parent.data.name;
        this.selectschemachange.emit(this.currentNode);
    };
    /**
     * @return {?}
     */
    ExpressionSchemaGridComponent.prototype.convertSchema = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.schema.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            /** @type {?} */
            var treeitem = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "type": "",
                    "description": ""
                },
                children: []
            };
            treeitem.data.name = key;
            treeitem.data.type = "Schema";
            treeitem.data.description = value.description;
            value.entityTypes.forEach((/**
             * @param {?} entitytype
             * @return {?}
             */
            function (entitytype) {
                /** @type {?} */
                var typetree = {
                    data: {
                        "id": "",
                        "name": "",
                        "type": "",
                        "description": ""
                    },
                    children: [],
                    parent: treeitem
                };
                typetree.data.id = entitytype.id;
                typetree.data.name = entitytype.name;
                typetree.data.type = "EntityType";
                typetree.data.description = entitytype.description;
                treeitem.children.push(typetree);
            }));
            _this.treedata.push(treeitem);
        }));
    };
    ExpressionSchemaGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-schema-grid',
                    template: "<farris-treetable #tt \r\n[data]=\"treedata\"\r\n[fit]=\"true\" \r\n[columns]=\"cols\" \r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[showFilterBar]=\"false\"\r\n[showHeader]=\"true\"\r\n[enableFindText]=\"true\"\r\n(cellClick)=\"selectRowChange($event)\"\r\n>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionSchemaGridComponent.ctorParameters = function () { return []; };
    ExpressionSchemaGridComponent.propDecorators = {
        schema: [{ type: Input }],
        selectschemachange: [{ type: Output }]
    };
    return ExpressionSchemaGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionSchemaInfoGridComponent = /** @class */ (function () {
    function ExpressionSchemaInfoGridComponent() {
        this.schema = new Map();
        this.choseSchemaTableName = new CurrentNode;
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.selectString = "";
        this.items = [];
        this.columns = [{ field: 'name', title: '属性名称', filter: true }];
    }
    /**
     * @return {?}
     */
    ExpressionSchemaInfoGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ExpressionSchemaInfoGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var schemaName = this.choseSchemaTableName.parentName;
        /** @type {?} */
        var tableId = this.choseSchemaTableName.id;
        /** @type {?} */
        var tableName = this.choseSchemaTableName.name;
        /** @type {?} */
        var schemaItem = this.schema.get(schemaName);
        if (schemaItem) {
            /** @type {?} */
            var entityType = schemaItem.entityTypes.find((/**
             * @param {?} entitytype
             * @return {?}
             */
            function (entitytype) { return (entitytype.id == tableId && entitytype.name == tableName) || (entitytype.id == "" && entitytype.name == tableName); }));
            if (entityType) {
                this.items = entityType.properties;
                entityType.navigationProperties.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var property = new Property;
                    property.name = item.name;
                    property.type = item.type.toString();
                    property.description = item.description;
                    _this.items = _this.items.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.name !== property.name; }));
                    _this.items.push(property);
                }));
                this.selectString = entityType.name;
            }
            else {
                /** @type {?} */
                var entitySet_1 = schemaItem.entitySets.find((/**
                 * @param {?} entityset
                 * @return {?}
                 */
                function (entityset) { return entityset.name == tableName; }));
                if (entitySet_1) {
                    /** @type {?} */
                    var eType = schemaItem.entityTypes.find((/**
                     * @param {?} entitytype
                     * @return {?}
                     */
                    function (entitytype) { return entitytype.name == entitySet_1.entityType; }));
                    this.items = eType.properties;
                    eType.navigationProperties.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        /** @type {?} */
                        var property = new Property;
                        property.name = item.name;
                        property.type = item.type.toString();
                        property.description = item.description;
                        _this.items = _this.items.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.name !== property.name; }));
                        _this.items.push(property);
                    }));
                    this.selectString = entitySet_1.name + ".[0]";
                }
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionSchemaInfoGridComponent.prototype.ondblclickRow = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dbclickInsert.emit(this.selectString + "." + $event.rowData.name);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionSchemaInfoGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectSchemaRow.emit($event.data);
    };
    ExpressionSchemaInfoGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-schema-info-grid',
                    template: "<farris-datagrid\r\n[idField]=\"'name'\"\r\n[height]=\"268\"\r\n[width]=\"300\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n[enableFilterRow]=\"true\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionSchemaInfoGridComponent.ctorParameters = function () { return []; };
    ExpressionSchemaInfoGridComponent.propDecorators = {
        schema: [{ type: Input }],
        choseSchemaTableName: [{ type: Input }],
        selectSchemaRow: [{ type: Output }],
        dbclickInsert: [{ type: Output }]
    };
    return ExpressionSchemaInfoGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionEntityGridComponent = /** @class */ (function () {
    // data: TreeNode[] = [];
    // temp2: TreeNode;
    // temp3: TreeNode;
    // all: TreeNode[] = [];
    function ExpressionEntityGridComponent() {
        this.currentNode = new CurrentNode;
        this.entities = [];
        this.currentSchemaName = "";
        this.currentNewSchemaName = "";
        this.currentParent = "";
        this.schema = new Map();
        this.newSchemaMap = new Map();
        this.selectentitychange = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.cols = [];
        this.treedata = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.cols = [
            { field: 'name', title: this.localePipe.transform("EntityList") },
            { field: 'description', title: this.localePipe.transform("EntityName") },
            { field: 'type', title: this.localePipe.transform("EntityType"), width: '100' }
        ];
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.onInitNewSchema();
            this.treedata = _.cloneDeep(this.entities);
        }
        else if (this.schema && this.schema.size > 0) {
            this.OninitSchemaEntity();
            this.treedata = _.cloneDeep(this.entities);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentNode = new CurrentNode;
        this.currentNode.id = $event.node.data.id;
        this.currentNode.name = $event.node.data.name;
        this.currentNode.parentName = this.selectParentString($event.node);
        this.currentParent = this.selectParentString($event.node);
        this.currentNode.schema = $event.node.data.schema;
        this.currentNode.nodeType = $event.node.data.nodeType;
        this.currentNode.description = $event.node.data.description;
        this.selectentitychange.emit(this.currentNode);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.dblClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.currentParent) {
            this.dbclickInsert.emit(this.currentParent + "." + $event.data.name);
        }
        else {
            this.dbclickInsert.emit($event.data.name);
        }
    };
    /**
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.onInitNewSchema();
            this.treedata = _.cloneDeep(this.entities);
            // this.treedata = this.entities;
            // this.treedata = [...this.treedata];
        }
        else if (this.schema && this.schema.size > 0) {
            this.OninitSchemaEntity();
            this.treedata = _.cloneDeep(this.entities);
            // this.treedata = this.entities;
            // this.treedata = [...this.treedata];
        }
    };
    //递归父节点名
    //递归父节点名
    /**
     * @param {?} node
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.selectParentString = 
    //递归父节点名
    /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.parent) {
            if (this.selectParentString(node.parent)) {
                if (this.strContain(node.parent.data.type))
                    return this.selectParentString(node.parent) + "." + node.parent.data.name + "[0]";
                else
                    return this.selectParentString(node.parent) + "." + node.parent.data.name;
            }
            else if (this.strContain(node.parent.data.type)) {
                return node.parent.data.name + "[0]";
            }
            else {
                return node.parent.data.name;
            }
        }
        else {
            return "";
        }
    };
    //初始化Schema格式的Entity
    //初始化Schema格式的Entity
    /**
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.OninitSchemaEntity = 
    //初始化Schema格式的Entity
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.injectedEntities && this.injectedEntities.length > 0) {
            this.entities = [];
            /** @type {?} */
            var entityTree_1 = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "type": "",
                    "description": "",
                    "schema": "",
                    "nodeType": ""
                },
                children: []
            };
            //实体显示禁忌表
            /** @type {?} */
            var navigatorMap_1 = new Map();
            //解析每一个注入实体，将其转化为TreeNode
            this.injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            function (injectEntity) {
                //根据schema名称找到对应的schema
                /** @type {?} */
                var currentSchema = _this.schema.get(injectEntity.schemaName);
                _this.currentSchemaName = injectEntity.schemaName;
                switch (injectEntity.injectedType) {
                    //注入的若为实体集
                    case InjectedType.EntitySet:
                        {
                            //根据注入实体的名称找到对应的实体集
                            /** @type {?} */
                            var entitySet = currentSchema.entitySets.find((/**
                             * @param {?} entitySet
                             * @return {?}
                             */
                            function (entitySet) { return entitySet.name == injectEntity.injectedName; }));
                            //将找到的实体集转化为TreeNode
                            entityTree_1 = _this.ConvertEntitySet(entitySet, currentSchema, navigatorMap_1);
                        }
                        break;
                    //注入的若为实体类型
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            var entityType = currentSchema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            function (entityType) { return entityType.name == injectEntity.injectedName; }));
                            //将实体类型名称改为自定义名称
                            //entityType.name = injectEntity.name;
                            //将找到的实体类型转化为TreeNode
                            entityTree_1 = _this.ConvertEntityType(entityType, currentSchema, navigatorMap_1);
                        }
                        break;
                }
                entityTree_1.data.name = injectEntity.name;
                //将每个预置对象转化后的TreeNode
                _this.entities.push(entityTree_1);
            }));
        }
    };
    //实体集转化
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ConvertEntitySet = 
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    function (entitySet, schema, navigatorMap) {
        if (entitySet) {
            //将entityset转化为TreeNode结构用于展示
            /** @type {?} */
            var treeNode_1 = {
                data: {
                    "id": "",
                    "name": entitySet.name,
                    "type": "EntitySet" + "[" + entitySet.entityType + "]",
                    "description": entitySet.description,
                    "schema": this.currentSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化完成的实体集添加进禁忌表，防止循环转化
            navigatorMap.set(entitySet.name, InjectedType.EntitySet);
            //找到实体集对应的实体类型
            /** @type {?} */
            var entityType = schema.entityTypes.find((/**
             * @param {?} entityType
             * @return {?}
             */
            function (entityType) { return entityType.name == entitySet.entityType; }));
            //将entitytype转化为TreeNode结构用于展示
            this.ConvertEntityType(entityType, schema, navigatorMap).children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                treeNode_1.children.push(child);
            }));
            return treeNode_1;
        }
        //实体集为空或未定义则返回空
        else
            return null;
    };
    //实体类型转化
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ConvertEntityType = 
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    function (entityType, schema, navigatorMap) {
        var _this = this;
        if (entityType) {
            /** @type {?} */
            var treeNode_2 = {
                data: {
                    "id": entityType.id,
                    "name": entityType.name,
                    "type": "EntityType",
                    "description": entityType.description,
                    "schema": this.currentSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化的entitytype添加进禁忌表
            navigatorMap.set(entityType.name + entityType.id, InjectedType.EntityType);
            //将每个属性转化为每个TreeNode
            entityType.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            function (property) {
                /** @type {?} */
                var propertyTree = {
                    data: {
                        "id": Math.random(),
                        "name": "",
                        "type": property.type,
                        "description": property.description,
                        "schema": _this.currentSchemaName,
                        "nodeType": "Simple"
                    },
                    children: []
                };
                //根据条件判断该属性是否为主键
                if (property.name == entityType.key) {
                    propertyTree.data.name = property.name + "*";
                }
                else {
                    propertyTree.data.name = property.name;
                }
                propertyTree.parent = treeNode_2;
                treeNode_2.children.push(propertyTree);
            }));
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            function (navigationProperty) {
                //判断是否导航属性对应的名称不在禁忌表中
                if (!(navigatorMap.get(navigationProperty.name + navigationProperty.navigationId))) {
                    if (navigationProperty.type == NavigationType.EntitySet) {
                        //若导航属性类型为实体集
                        /** @type {?} */
                        var entitySet = schema.entitySets.find((/**
                         * @param {?} entitySet
                         * @return {?}
                         */
                        function (entitySet) { return entitySet.name == navigationProperty.name; }));
                        /** @type {?} */
                        var a = _this.ConvertEntitySet(entitySet, schema, navigatorMap);
                        a.parent = treeNode_2;
                        treeNode_2.children.push(a);
                    } //若为实体类型
                    else if (navigationProperty.type == NavigationType.EntityType) {
                        /** @type {?} */
                        var entityType_1 = schema.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        function (entitytype) { return entitytype.id == navigationProperty.navigationId && entitytype.name == navigationProperty.name; }));
                        /** @type {?} */
                        var a = _this.ConvertEntityType(entityType_1, schema, navigatorMap);
                        a.parent = treeNode_2;
                        treeNode_2.children.push(a);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    var navigatortree = {
                        data: {
                            "id": navigationProperty.navigationId,
                            "name": navigationProperty.name,
                            "type": "",
                            "description": navigationProperty.description,
                            "schema": _this.currentSchemaName,
                            "nodeType": "Complex"
                        },
                        children: [],
                    };
                    switch (navigatorMap.get(navigationProperty.name)) {
                        case NavigationType.EntitySet:
                            navigatortree.data.type = "EntitySet";
                            break;
                        case NavigationType.EntityType:
                            navigatortree.data.type = "EntityType";
                            break;
                    }
                    navigatortree.parent = treeNode_2;
                    treeNode_2.children.push(navigatortree);
                }
            }));
            return treeNode_2;
        }
        //若entitytype为空或未定义
        else
            return null;
    };
    /**
     * @private
     * @param {?} strr
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.strContain = /**
     * @private
     * @param {?} strr
     * @return {?}
     */
    function (strr) {
        /** @type {?} */
        var temp = strr + "";
        if (temp.indexOf("EntitySet") != -1)
            return true;
        else
            return false;
    };
    //===========分割线==========NewSchema===============
    /**
     * @description 初始化NewSchema
     */
    //===========分割线==========NewSchema===============
    /**
     * \@description 初始化NewSchema
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.onInitNewSchema = 
    //===========分割线==========NewSchema===============
    /**
     * \@description 初始化NewSchema
     * @return {?}
     */
    function () {
        var _this = this;
        //注入实体存在且有值
        if (this.injectedEntities && this.injectedEntities.length > 0) {
            //初始化：entities(页面显示内容);rootNode(跟节点);navigatorMap1(禁忌列表)
            this.entities = [];
            /** @type {?} */
            var rootNode_1 = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "description": "",
                    "type": "",
                    "schema": "",
                    "nodeType": ""
                },
                children: []
            };
            /** @type {?} */
            var navigatorMap1_1 = new Map();
            //根据注入实体的schemaName找到对应的rootSchema
            this.injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            function (injectEntity) {
                /** @type {?} */
                var rootSchema = _this.newSchemaMap.get(injectEntity.schemaName);
                _this.currentNewSchemaName = injectEntity.schemaName;
                //根据注入实体类型--->执行不同方法
                switch (injectEntity.injectedType) {
                    case InjectedType.EntitySet:
                        {
                            /** @type {?} */
                            var entitySet = rootSchema.entitySets.find((/**
                             * @param {?} set
                             * @return {?}
                             */
                            function (set) { return set.code == injectEntity.injectedName; }));
                            rootNode_1 = _this.convertNewEntitySet(entitySet, rootSchema, navigatorMap1_1);
                        }
                        break;
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            var entityType = rootSchema.entityTypes.find((/**
                             * @param {?} type
                             * @return {?}
                             */
                            function (type) { return type.code == injectEntity.injectedName; }));
                            rootNode_1 = _this.convertNewEntityType(entityType, rootSchema, navigatorMap1_1);
                        }
                        break;
                }
                rootNode_1.data.name = injectEntity.name;
                _this.entities.push(rootNode_1);
            }));
        }
    };
    /**
     * @description 转换实体类型(EntityType)
     * @param entityType
     * @param schema
     * @param navigatorMap1
     * @returns
     */
    /**
     * \@description 转换实体类型(EntityType)
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.convertNewEntityType = /**
     * \@description 转换实体类型(EntityType)
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    function (entityType, schema, navigatorMap1) {
        var _this = this;
        if (entityType) {
            //初始化：NewEntityType的节点
            /** @type {?} */
            var treeNode_3 = {
                data: {
                    "id": entityType.code,
                    "name": entityType.code,
                    "description": entityType.name,
                    "type": "EntityType",
                    "schema": this.currentNewSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //pro
            navigatorMap1.set(entityType.name + entityType.code, InjectedType.EntityType);
            entityType.properties.forEach((/**
             * @param {?} pro
             * @return {?}
             */
            function (pro) {
                /** @type {?} */
                var proNode = {
                    data: {
                        "id": Math.random(),
                        "name": pro.code,
                        "description": pro.name,
                        "type": pro.dataType,
                        "schema": _this.currentNewSchemaName,
                        "nodeType": "Simple"
                    },
                    children: []
                };
                proNode.parent = treeNode_3;
                treeNode_3.children.push(proNode);
            }));
            //naPro
            entityType.navigationProperties.forEach((/**
             * @param {?} naPro
             * @return {?}
             */
            function (naPro) {
                //判断是否导航属性对应的名称在禁忌表中
                if (!(navigatorMap1.get(naPro.navigationName + naPro.code))) {
                    if (naPro.navigationType == NewNavigationType.EntityType) {
                        /** @type {?} */
                        var entityType_2 = schema.entityTypes.find((/**
                         * @param {?} type1
                         * @return {?}
                         */
                        function (type1) { return type1.code == naPro.navigationName; }));
                        /** @type {?} */
                        var a = _this.convertNewEntityType(entityType_2, schema, navigatorMap1);
                        a.parent = treeNode_3;
                        treeNode_3.children.push(a);
                    }
                    else if (naPro.navigationType == NewNavigationType.EntitySet) {
                        /** @type {?} */
                        var entitySet = schema.entitySets.find((/**
                         * @param {?} set1
                         * @return {?}
                         */
                        function (set1) { return set1.code == naPro.navigationName; }));
                        /** @type {?} */
                        var a = _this.convertNewEntitySet(entitySet, schema, navigatorMap1);
                        a.parent = treeNode_3;
                        treeNode_3.children.push(a);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    var naProNode = {
                        data: {
                            "id": naPro.navigationName,
                            "name": naPro.code,
                            "description": naPro.name,
                            "type": "",
                            "schema": _this.currentNewSchemaName,
                            "nodeType": "Complex"
                        },
                        children: [],
                    };
                    switch (navigatorMap1.get(naPro.navigationName)) {
                        case NewNavigationType.EntitySet:
                            naProNode.data.type = "EntitySet";
                            break;
                        case NewNavigationType.EntityType:
                            naProNode.data.type = "EntityType";
                            break;
                    }
                    naProNode.parent = treeNode_3,
                        treeNode_3.children.push(naProNode);
                }
            }));
            return treeNode_3;
        }
        return null;
    };
    /**
     * @description 转换实体集(EntitySet)
     * @param set
     * @param schema
     * @param navigatorMap1
     * @returns
     */
    /**
     * \@description 转换实体集(EntitySet)
     * @param {?} set
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.convertNewEntitySet = /**
     * \@description 转换实体集(EntitySet)
     * @param {?} set
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    function (set, schema, navigatorMap1) {
        if (set) {
            //将entityset转化为TreeNode结构用于展示
            /** @type {?} */
            var treeNode_4 = {
                data: {
                    "id": Math.random(),
                    "name": set.code,
                    "description": set.name,
                    "type": "EntitySet" + "[" + set.code + "]",
                    "schema": this.currentNewSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化完成的实体集添加进禁忌表，防止循环转化
            navigatorMap1.set(set.name, InjectedType.EntitySet);
            //找到实体集对应的实体类型
            /** @type {?} */
            var entityType = schema.entityTypes.find((/**
             * @param {?} entityType
             * @return {?}
             */
            function (entityType) { return entityType.code == set.entityType; }));
            //将entitytype转化为TreeNode结构用于展示
            this.convertNewEntityType(entityType, schema, navigatorMap1).children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                treeNode_4.children.push(child);
            }));
            return treeNode_4;
        }
        //实体集为空或未定义则返回空
        else
            return null;
    };
    //顶级过滤
    //顶级过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.searchByFilter = 
    //顶级过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        //存在过滤值&&treedata有值
        if ($event.value && $event.value != "" && this.treedata) {
            //children元素深度遍历
            for (var i = 0; i < this.treedata.length; i++) {
                this.searchByFilter1($event.value, this.treedata[i]);
            }
            //过滤undefined
            for (var i = 0; i < this.treedata.length; i++) {
                this.filter1(this.treedata[i]);
            }
        }
    };
    //children元素过滤$event.value
    //children元素过滤$event.value
    /**
     * @param {?} searchValue
     * @param {?} node
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.searchByFilter1 = 
    //children元素过滤$event.value
    /**
     * @param {?} searchValue
     * @param {?} node
     * @return {?}
     */
    function (searchValue, node) {
        if (node.children && node.children.length > 0) {
            for (var i = 0; i < node.children.length; i++) {
                this.searchByFilter1(searchValue, node.children[i]);
            }
        }
        else if (node.children.length == 0) {
            if (node.data.description.indexOf(searchValue) == -1) {
                //indexOf返回指定字符在字符串中第一次出现的位置
                //-1代表没有出现
                /** @type {?} */
                var temp = -1;
                if (node.parent != null) {
                    for (var ii = 0; ii < node.parent.children.length; ii++) {
                        if (node.parent.children[ii] && node.parent.children[ii].data.description == node.data.description) {
                            temp = ii;
                            delete node.parent.children[temp];
                            break;
                        }
                    }
                }
            }
        }
    };
    //去除undefinde元素
    //去除undefinde元素
    /**
     * @param {?} node
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.filter1 = 
    //去除undefinde元素
    /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.children && node.children.length > 0) {
            /** @type {?} */
            var b = node.children.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item != undefined; }));
            node.children = b;
            for (var i = 0; i < node.children.length; i++) {
                if (node.children[i].children && node.children[i].children.length > 0) {
                    this.filter1(node.children[i]);
                }
            }
        }
        else if (node.children.length == 0) ;
    };
    //过滤
    //过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.filter = 
    //过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        //开始过滤
        // this.searchByFilter($event);
        // this.searchByFilter($event);
        this.tt.searchHandle.search('description', $event.value, 'client');
    };
    ExpressionEntityGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-entity-grid',
                    template: "<farris-treetable #tt \r\n[data]=\"treedata\"\r\n[fit]=\"true\" \r\n[fitColumns]=\"true\"\r\n[fixedHeader]=\"true\"\r\n[columns]=\"cols\" \r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[showFilterBar]=\"true\"\r\n[resizableColumns]=\"true\"\r\n[showHeader]=\"true\"\r\n[enableFindText]=\"true\"\r\n[virtualized]=\"false\"\r\n(dblClick)=\"dblClick($event)\"\r\n(cellClick)=\"selectRowChange($event)\"\r\n(search)=\"filter($event)\"\r\n>\r\n</farris-treetable>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionEntityGridComponent.ctorParameters = function () { return []; };
    ExpressionEntityGridComponent.propDecorators = {
        schema: [{ type: Input }],
        newSchemaMap: [{ type: Input }],
        injectedEntities: [{ type: Input }],
        selectentitychange: [{ type: Output }],
        dbclickInsert: [{ type: Output }],
        tt: [{ type: ViewChild, args: ['tt',] }]
    };
    return ExpressionEntityGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionEntityInfoGridComponent = /** @class */ (function () {
    function ExpressionEntityInfoGridComponent() {
        this.schema = new Map();
        this.newSchemaMap = new Map(); //统一Schema
        //统一Schema
        this.choseEntityTableName = new CurrentNode;
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.selectString = "";
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
        /** @type {?} */
        var schemaName = this.choseEntityTableName.schema;
        /** @type {?} */
        var parentName = this.choseEntityTableName.parentName;
        /** @type {?} */
        var tableId = this.choseEntityTableName.id;
        /** @type {?} */
        var tableName = this.choseEntityTableName.name;
        /** @type {?} */
        var schemaItem;
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            //统一Schema
            this.columns = [{ field: 'code', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.newSchemaMap.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                var entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                function (entitytype) { return (entitytype.code == tableName) || (entitytype.code == ""); }));
                if (!entityType) {
                    /** @type {?} */
                    var entitySet_1 = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    function (entityset) { return entityset.code == tableName; }));
                    if (entitySet_1) {
                        entityType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        function (entitytype) { return entitytype.code == entitySet_1.entityType; }));
                    }
                }
                this.items = __spread(entityType.properties);
                entityType.navigationProperties.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var property = new NewProperty;
                    property.code = item.code;
                    property.name = "";
                    property.dataType = item.navigationType.toString();
                    property.nullable = false;
                    property.defaultValue = null;
                    _this.items.push(property);
                    _this.items = Array.from(_this.items);
                }));
                this.selectString = parentName + "." + entityType.name;
            }
        }
        else {
            //旧的Schema
            this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.schema.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                var entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                function (entitytype) { return (entitytype.id == tableId && entitytype.name == tableName) || (entitytype.id == "" && entitytype.name == tableName); }));
                if (entityType) {
                    this.items = __spread(entityType.properties);
                    entityType.navigationProperties.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        /** @type {?} */
                        var property = new Property;
                        property.name = item.name;
                        property.type = item.type.toString();
                        property.description = item.description;
                        _this.items.push(property);
                    }));
                    this.selectString = parentName + "." + entityType.name;
                }
                else {
                    /** @type {?} */
                    var entitySet_2 = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    function (entityset) { return entityset.name == tableName; }));
                    if (entitySet_2) {
                        /** @type {?} */
                        var eType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        function (entitytype) { return entitytype.name == entitySet_2.entityType; }));
                        this.items = __spread(eType.properties);
                        eType.navigationProperties.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            /** @type {?} */
                            var property = new Property;
                            property.name = item.name;
                            property.type = item.type.toString();
                            property.description = item.description;
                            _this.items.push(property);
                        }));
                        this.selectString = parentName + "." + entitySet_2.name + ".[0]";
                    }
                }
            }
        }
    };
    //数据：子组件双击插入              (farris双击事件，调整)
    //数据：子组件双击插入              (farris双击事件，调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.ondblclickRow = 
    //数据：子组件双击插入              (farris双击事件，调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        //this.dbclickInsert.emit(this.selectString+"."+$event.rowData.name);
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.code);
        }
        else if (this.schema && this.schema.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.name);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectSchemaRow.emit($event.data);
    };
    ExpressionEntityInfoGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-entity-info-grid',
                    template: "<farris-datagrid\r\n[idField]=\"'name'\"\r\n[height]=\"268\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n[enableFilterRow]=\"true\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionEntityInfoGridComponent.ctorParameters = function () { return []; };
    ExpressionEntityInfoGridComponent.propDecorators = {
        schema: [{ type: Input }],
        newSchemaMap: [{ type: Input }],
        choseEntityTableName: [{ type: Input }],
        selectSchemaRow: [{ type: Output }],
        dbclickInsert: [{ type: Output }]
    };
    return ExpressionEntityInfoGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionSmartHelpGridComponent = /** @class */ (function () {
    function ExpressionSmartHelpGridComponent() {
        this.smartHelp = [];
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ExpressionSmartHelpGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columns = [
            { field: 'code', width: 60, title: this.localePipe.transform("HelpCode"), filter: true },
            { field: 'name', width: 60, title: this.localePipe.transform("HelpName"), filter: true },
            { field: 'description', width: 100, title: this.localePipe.transform("HelpDescription"), filter: true },
        ];
        this.items = this.smartHelp;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionSmartHelpGridComponent.prototype.ondblclickRow = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var entities = this.smartHelp.find((/**
         * @param {?} temp
         * @return {?}
         */
        function (temp) { return temp.code == $event.rowData.code; }));
        // entities.serviceInstance.showWizard().subscribe((result)=>{
        //   this.dbclickInsert.emit(result);
        // });
        this.dbclickInsert.emit(entities.serviceInstance.showWizard());
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionSmartHelpGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectSchemaRow.emit($event.data);
    };
    ExpressionSmartHelpGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-smart-help-grid',
                    template: "<farris-datagrid\r\n[idField]=\"'code'\"\r\n[height]=\"268\"\r\n[width]=\"650\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionSmartHelpGridComponent.ctorParameters = function () { return []; };
    ExpressionSmartHelpGridComponent.propDecorators = {
        smartHelp: [{ type: Input }],
        selectSchemaRow: [{ type: Output }],
        dbclickInsert: [{ type: Output }]
    };
    return ExpressionSmartHelpGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var monacoConfig$1 = {
    baseUrl: 'assets',
    defaultOptions: { scrollBeyondLastLine: false }
};
var ExpressionModule = /** @class */ (function () {
    function ExpressionModule() {
    }
    ExpressionModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ComputeRuleComponent, ExpressioneditorComponent, ExprFuncGridComponent, ExpressionVarGridComponent, ExpressionVarInfoGridComponent, ExpressionSchemaGridComponent, ExpressionSchemaInfoGridComponent, ExpressionEntityGridComponent, ExpressionEntityInfoGridComponent, ExpressionSmartHelpGridComponent, ExpressionEditorLocalePipe
                    ],
                    imports: [
                        CommonModule,
                        MyMonacoEditorModule.forRoot(monacoConfig$1),
                        FormsModule,
                        DialogsModule,
                        LayoutModule,
                        ButtonsModule,
                        TreeViewModule,
                        InputsModule,
                        GridModule,
                        FormsModule,
                        ReactiveFormsModule,
                        TreeTableModule,
                        ComboLookupModule,
                        DataTableModule,
                        FarrisDialogModule,
                        PerfectScrollbarModule,
                        HttpClientModule,
                        MessagerModule.forRoot(),
                        ModalModule.forRoot(),
                        NotifyModule,
                        SplitterModule,
                        FarrisTabsModule,
                        DatagridFilterRowModule.forRoot(),
                        DatagridModule,
                        AngularDraggableModule,
                    ],
                    entryComponents: [ComputeRuleComponent, ExpressioneditorComponent],
                    exports: [ComputeRuleComponent, ExpressioneditorComponent],
                    // providers: [ComboService, BsModalService, ExpressionEventService, HttpClient, ExpressionEditorLocaleService]
                    providers: [ComboService, BsModalService, ExpressionEventService, HttpClient]
                },] }
    ];
    return ExpressionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var ExprEditMode = {
    Conditional: 0,
    Advanced: 1,
};
ExprEditMode[ExprEditMode.Conditional] = 'Conditional';
ExprEditMode[ExprEditMode.Advanced] = 'Advanced';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 表达式对外提供服务类
 * 功能：提供打开、预置等接口
 */
var ExpressionService = /** @class */ (function () {
    function ExpressionService(injector, applicationRef, compFactRes, http) {
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.compFactRes = compFactRes;
        this.http = http;
        this.exprEditMode = ExprEditMode.Advanced;
        this.simpleModalConfig = {
            title: "条件表达式",
            width: 750,
            height: 350,
            showButtons: false
        };
        this.exprEntity = new ExpressionContextEntity();
        this.adapter = new Adapter();
        //定义语义化资源
        this.allFunctions = []; //所有函数，包含不规范
        this.modalService = injector.get(BsModalService);
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        //初始化i18n函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        //初始化titile,save,cancel
        this.ExpressionTitle = this.localePipe.transform("ExpressionTitle");
        this.ExpressionSave = this.localePipe.transform("ExpressionSave");
        this.ExpressionCancel = this.localePipe.transform("ExpressionCancel");
    }
    /**
      * 创建表达式
      * 功能：打开表达式窗口，then方法获得表达式结果
      */
    /**
     * 创建表达式
     * 功能：打开表达式窗口，then方法获得表达式结果
     * @return {?}
     */
    ExpressionService.prototype.buildExpression = /**
     * 创建表达式
     * 功能：打开表达式窗口，then方法获得表达式结果
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            if (that.exprEditMode == ExprEditMode.Conditional) {
                if ((that.exprEntity.expr != null && that.exprEntity.expr != "") && (that.exprEntity.sexpr == null || that.exprEntity.sexpr == "")) {
                    /** @type {?} */
                    var compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
                    /** @type {?} */
                    var compRef_1 = compFactory.create(that.injector);
                    compRef_1.instance.expressionEntity = that.exprEntity;
                    /** @type {?} */
                    var dialog_1 = that.modalService.show(compRef_1, {
                        title: that.ExpressionTitle,
                        width: 1060,
                        height: 610,
                        buttons: [
                            {
                                text: that.ExpressionSave, cls: 'btn btn-primary', handle: (/**
                                 * @return {?}
                                 */
                                function () {
                                    compRef_1.instance.getExprs();
                                    dialog_1.close();
                                })
                            },
                            {
                                text: that.ExpressionCancel, cls: 'btn btn-secondary', handle: (/**
                                 * @return {?}
                                 */
                                function () {
                                    dialog_1.close();
                                })
                            }
                        ],
                        showButtons: true
                    });
                    compRef_1.instance.result.subscribe((/**
                     * @param {?} expressionContent
                     * @return {?}
                     */
                    function (expressionContent) {
                        return resolve(expressionContent);
                    }));
                }
                else {
                    /** @type {?} */
                    var compFactory = that.compFactRes.resolveComponentFactory(ComputeRuleComponent);
                    /** @type {?} */
                    var compRef = compFactory.create(that.injector);
                    compRef.instance.contextEntity = that.exprEntity;
                    /** @type {?} */
                    var dialog_2 = that.modalService.show(compRef, that.simpleModalConfig);
                    compRef.instance.closeModalEmitter.subscribe((/**
                     * @param {?} $event
                     * @return {?}
                     */
                    function ($event) { return dialog_2.close(); }));
                    compRef.instance.result.subscribe((/**
                     * @param {?} expressionContent
                     * @return {?}
                     */
                    function (expressionContent) {
                        return resolve(expressionContent);
                    }));
                }
            }
            else {
                /** @type {?} */
                var compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
                /** @type {?} */
                var compRef_2 = compFactory.create(that.injector);
                compRef_2.instance.expressionEntity = that.exprEntity;
                /** @type {?} */
                var dialog_3 = that.modalService.show(compRef_2, {
                    title: that.ExpressionTitle,
                    width: 1060,
                    height: 610,
                    buttons: [
                        {
                            text: that.ExpressionSave, cls: 'btn btn-primary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                compRef_2.instance.getExprs();
                                dialog_3.close();
                            })
                        },
                        {
                            text: that.ExpressionCancel, cls: 'btn btn-secondary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                dialog_3.close();
                            })
                        }
                    ],
                    showButtons: true
                });
                compRef_2.instance.result.subscribe((/**
                 * @param {?} expressionContent
                 * @return {?}
                 */
                function (expressionContent) {
                    return resolve(expressionContent);
                }));
            }
        }));
    };
    /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     */
    /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     * @param {?} exprEditMode
     * @return {?}
     */
    ExpressionService.prototype.setEditPattern = /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     * @param {?} exprEditMode
     * @return {?}
     */
    function (exprEditMode) {
        this.exprEditMode = exprEditMode;
    };
    /**
     * 添加上下文变量方法
     * @param contextEntity 上下文变量实体
     */
    /**
     * 添加上下文变量方法
     * @param {?} contextEntity 上下文变量实体
     * @return {?}
     */
    ExpressionService.prototype.addContext = /**
     * 添加上下文变量方法
     * @param {?} contextEntity 上下文变量实体
     * @return {?}
     */
    function (contextEntity) {
        this.exprEntity.contextEntities = this.exprEntity.contextEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.key !== contextEntity.key; }));
        this.exprEntity.contextEntities.push(contextEntity);
    };
    /**
     * 添加系统变量方法
     * @param sessionEntity 系统变量实体
     */
    /**
     * 添加系统变量方法
     * @param {?} sessionEntity 系统变量实体
     * @return {?}
     */
    ExpressionService.prototype.addSession = /**
     * 添加系统变量方法
     * @param {?} sessionEntity 系统变量实体
     * @return {?}
     */
    function (sessionEntity) {
        this.exprEntity.sessionEntities = this.exprEntity.sessionEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.key !== sessionEntity.key; }));
        this.exprEntity.sessionEntities.push(sessionEntity);
    };
    /**
     * 添加函数方法
     * @param funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     */
    /**
     * 添加函数方法
     * @param {?} funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     * @return {?}
     */
    ExpressionService.prototype.addFunc = /**
     * 添加函数方法
     * @param {?} funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     * @return {?}
     */
    function (funcEntity) {
        this.exprEntity.funcEntities = this.exprEntity.funcEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.key !== funcEntity.key; }));
        this.exprEntity.funcEntities.push(funcEntity);
    };
    /***
     * 添加函数列表
     * @param funcList 函数json列表
     */
    /**
     *
     * 添加函数列表
     * @param {?} funcList 函数json列表
     * @return {?}
     */
    ExpressionService.prototype.addFuncs = /**
     *
     * 添加函数列表
     * @param {?} funcList 函数json列表
     * @return {?}
     */
    function (funcList) {
        var _this = this;
        /** @type {?} */
        var funcs = (/** @type {?} */ (JSON.parse(funcList)));
        funcs.funcs.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.exprEntity.funcEntities.push(item);
        }));
    };
    /**
     * 预置表达式
     * @param text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     */
    /**
     * 预置表达式
     * @param {?} text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     * @return {?}
     */
    ExpressionService.prototype.addExpressionText = /**
     * 预置表达式
     * @param {?} text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     * @return {?}
     */
    function (text) {
        try {
            /** @type {?} */
            var textEntity = (/** @type {?} */ (JSON.parse(text)));
            if (!(textEntity)) {
                this.exprEntity.expr = text;
            }
            else if (textEntity.expr) {
                //加载Antlr4工具
                /** @type {?} */
                var inputStream = new InputStream.InputStream(textEntity.expr);
                /** @type {?} */
                var lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
                /** @type {?} */
                var tokens = new CommonTokenStream.CommonTokenStream(lexer);
                tokens.fill();
                //tokens切分的js文本抽取到array中
                /** @type {?} */
                var array = new Array();
                for (var index = 0; index < tokens.tokens.length - 1; index++) {
                    array[index] = tokens.tokens[index].text;
                }
                //遍历array的js文本，每个js文本遍历tokenItems查找对应的语义化文本，封装为str
                /** @type {?} */
                var str = "";
                for (var index = 0; index < array.length; index++) {
                    if (((array[index] == "DefaultFunction") || (array[index] == "Math")) && (array[index + 1] == ".")) {
                        continue;
                    }
                    else if (array[index] == "." && (array[index - 1] == "DefaultFunction" || array[index - 1] == "Math")) {
                        continue;
                    }
                    else {
                        //单个元素计数器
                        /** @type {?} */
                        var num = 0;
                        //遍历上下文变量
                        if (num == 0) {
                            for (var i = 0; i < this.exprEntity.contextEntities.length; i++) {
                                if (array[index] == ("\"" + this.exprEntity.contextEntities[i].key + "\"")) {
                                    str = str + "\"" + this.exprEntity.contextEntities[i].name + "\"";
                                    num = 1;
                                    break;
                                }
                            }
                        }
                        //遍历session变量
                        if (num == 0) {
                            for (var i = 0; i < this.exprEntity.sessionEntities.length; i++) {
                                if (array[index] == ("\"" + this.exprEntity.sessionEntities[i].key + "\"")) {
                                    str = str + "\"" + this.exprEntity.sessionEntities[i].name + "\"";
                                    num = 1;
                                    break;
                                }
                            }
                        }
                        // 遍历数据（暂时先屏蔽）
                        // this.exprEntity.schemaMap.forEach(a=>{
                        //     // for(let j=0;j<a.entitySets[0].length;j++){
                        //     //   if(array[index]==a.entityTypes[0].properties[j].description){
                        //     //     array[index]=a.entityTypes[0].properties[j].name;
                        //     //     break;
                        //     //   }
                        //     // }
                        //     if(array[index]==a.entitySets[0].name){
                        //       array[index]=a.entitySets[0].description;
                        //       str=str+array[index];
                        //       num=1;
                        //     }
                        //     for(let j=0;j<a.entityTypes[0].properties.length;j++){
                        //       if(array[index]==a.entityTypes[0].properties[j].name){
                        //         array[index]=a.entityTypes[0].properties[j].description;
                        //         str=str+array[index];
                        //         num=1;
                        //         break;
                        //       }
                        //     }
                        //   });
                        //计数器num：如果遍历allFunctions没找到对应字段，则直接拼接(num=0)；否则替换(num=1)
                        if (num == 0) {
                            for (var i = 0; i < this.allFunctions.length; i++) {
                                if (array[index] == this.allFunctions[i].key) {
                                    if (this.allFunctions[i].type != "Advanced") {
                                        str = str + this.allFunctions[i].name;
                                        num = 1;
                                        break;
                                    }
                                }
                            }
                        }
                        //如果计数器为0，证明没有语义化匹配。显示原始数据
                        if (num == 0) {
                            str = str + array[index];
                        }
                    }
                }
                this.exprEntity.expr = str;
                if (textEntity.sexpr) {
                    this.exprEntity.sexpr = textEntity.sexpr;
                }
            }
            else {
                this.GetUnCamelParse(textEntity);
                this.exprEntity.expr = textEntity.expr;
                if (textEntity.sexpr) {
                    this.exprEntity.sexpr = textEntity.sexpr;
                }
            }
        }
        catch (_a) {
            this.exprEntity.expr = text;
        }
    };
    /**
     * 预置Schema
     * @param name schema名称
     * @param schema schema实体类
     */
    /**
     * 预置Schema
     * @param {?} name schema名称
     * @param {?} schema schema实体类
     * @return {?}
     */
    ExpressionService.prototype.addSchema = /**
     * 预置Schema
     * @param {?} name schema名称
     * @param {?} schema schema实体类
     * @return {?}
     */
    function (name, schema) {
        if (!name) {
            alert("Please Input Schema Name!");
        }
        else
            this.exprEntity.schemaMap.set(name, schema);
    };
    /**
     * 注入实体
     * @param name 注入实体名,默认为typeNameInSchema
     * @param schemaName 注入实体所在的schema名，默认为CommonObject
     * @param typeNameInSchema 注入实体在schema中的名称
     * @param injectedType 注入实体的类型，默认为EntityType
     */
    /**
     * 注入实体
     * @param {?} name 注入实体名,默认为typeNameInSchema
     * @param {?=} schemaName 注入实体所在的schema名，默认为CommonObject
     * @param {?=} typeNameInSchema 注入实体在schema中的名称
     * @param {?=} injectedType 注入实体的类型，默认为EntityType
     * @return {?}
     */
    ExpressionService.prototype.addInjectedEntity = /**
     * 注入实体
     * @param {?} name 注入实体名,默认为typeNameInSchema
     * @param {?=} schemaName 注入实体所在的schema名，默认为CommonObject
     * @param {?=} typeNameInSchema 注入实体在schema中的名称
     * @param {?=} injectedType 注入实体的类型，默认为EntityType
     * @return {?}
     */
    function (name, schemaName, typeNameInSchema, injectedType) {
        if (schemaName === void 0) { schemaName = "CommonObject"; }
        if (injectedType === void 0) { injectedType = InjectedType.EntityType; }
        //构造注入实体对象
        /** @type {?} */
        var injectedEntity = new InjectedEntity();
        //若注入的实体名为空，则默认为注入实体在schema中的名称
        injectedEntity.name = name ? name : typeNameInSchema;
        injectedEntity.schemaName = schemaName;
        injectedEntity.injectedName = typeNameInSchema;
        injectedEntity.injectedType = injectedType;
        this.exprEntity.injectedEntities = this.exprEntity.injectedEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.name !== injectedEntity.name; }));
        this.exprEntity.injectedEntities.push(injectedEntity);
    };
    /**
     * 预置CDT
     * @param gspCDTs CDT集合
     */
    /**
     * 预置CDT
     * @param {?} gspCDTs CDT集合
     * @return {?}
     */
    ExpressionService.prototype.addCDT = /**
     * 预置CDT
     * @param {?} gspCDTs CDT集合
     * @return {?}
     */
    function (gspCDTs) {
        var _this = this;
        /** @type {?} */
        var schema = new Schema();
        //若schemaMap中存在CDT的schema
        if (this.exprEntity.schemaMap.get("CDT")) {
            schema = this.exprEntity.schemaMap.get("CDT");
        }
        //将每一个CDT转化为schema内部结构中的entityType
        gspCDTs.forEach((/**
         * @param {?} gspCDT
         * @return {?}
         */
        function (gspCDT) {
            /** @type {?} */
            var entityType = _this.adapter.convertCDT(gspCDT);
            schema.entityTypes.push(entityType);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addSchema("CDT", schema);
    };
    /**
     * 预置CO
     * @param commonObject CO集合(todo)
     */
    /**
     * 预置CO
     * @param {?} commonObject CO集合(todo)
     * @return {?}
     */
    ExpressionService.prototype.addCommonObject = /**
     * 预置CO
     * @param {?} commonObject CO集合(todo)
     * @return {?}
     */
    function (commonObject) {
        /** @type {?} */
        var schema;
        //若schemaMap中存在CO的schema
        if (this.exprEntity.schemaMap.get("CommonObject")) {
            schema = this.exprEntity.schemaMap.get("CommonObject");
        }
        else
            schema = new Schema;
        //将每一个CO转化为schema内部结构中的entityType
        /** @type {?} */
        var entityTypes = this.adapter.convertCO(commonObject);
        entityTypes.forEach((/**
         * @param {?} entityType
         * @return {?}
         */
        function (entityType) {
            schema.entityTypes.push(entityType);
            /** @type {?} */
            var entitySet = new EntitySet;
            entitySet.name = entityType.name + "s";
            entitySet.entityType = entityType.name;
            entitySet.description = entityType.description;
            schema.entitySets.push(entitySet);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addSchema("CommonObject", schema);
    };
    /**
     * 预置帮助
     * @param shEntity 帮助描述实体
     */
    /**
     * 预置帮助
     * @param {?} shEntity 帮助描述实体
     * @return {?}
     */
    ExpressionService.prototype.addSmartHelpEntity = /**
     * 预置帮助
     * @param {?} shEntity 帮助描述实体
     * @return {?}
     */
    function (shEntity) {
        this.exprEntity.smartHelpEntities = this.exprEntity.smartHelpEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.code !== shEntity.code; }));
        this.exprEntity.smartHelpEntities.push(shEntity);
    };
    /**
     * @param {?} windowWidth
     * @return {?}
     */
    ExpressionService.prototype.addWindowWidth = /**
     * @param {?} windowWidth
     * @return {?}
     */
    function (windowWidth) {
    };
    /**
     * @return {?}
     */
    ExpressionService.prototype.clearInjectedEntity = /**
     * @return {?}
     */
    function () {
        this.exprEntity.injectedEntities = [];
    };
    /**
     * @private
     * @param {?} jsonObj
     * @return {?}
     */
    ExpressionService.prototype.GetUnCamelParse = /**
     * @private
     * @param {?} jsonObj
     * @return {?}
     */
    function (jsonObj) {
        for (var key in jsonObj) {
            if (typeof (jsonObj[key]) === "object") {
                this.GetUnCamelParse(jsonObj[key]);
            }
            /** @type {?} */
            var temp = jsonObj[key];
            delete (jsonObj[key]);
            jsonObj[this.ConvertToUncamel(key)] = temp;
        }
    };
    //字符串反转换Camel
    //字符串反转换Camel
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    ExpressionService.prototype.ConvertToUncamel = 
    //字符串反转换Camel
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (input.length > 0) {
            /** @type {?} */
            var len = input.length;
            /** @type {?} */
            var strTemp = "";
            for (var i = 0; i < len; i++) {
                if (i == 0) {
                    strTemp += input[i].toLowerCase(); //第一个
                }
                else {
                    strTemp += input[i];
                }
            }
            return strTemp;
        }
    };
    /**
     * @description 添加NewSchema
     * @param name NewSchema的名称
     * @param newSchema NewSchema
     */
    /**
     * \@description 添加NewSchema
     * @param {?} name NewSchema的名称
     * @param {?} newSchema NewSchema
     * @return {?}
     */
    ExpressionService.prototype.addNewSchema = /**
     * \@description 添加NewSchema
     * @param {?} name NewSchema的名称
     * @param {?} newSchema NewSchema
     * @return {?}
     */
    function (name, newSchema) {
        if (!name) {
            alert("Please Input NewSchema Name!");
        }
        else
            this.exprEntity.newSchemaMap.set(name, newSchema);
    };
    /**
     * @description 添加CO的数据，NewSchema
     * @param commonObject
     */
    /**
     * \@description 添加CO的数据，NewSchema
     * @param {?} commonObject
     * @return {?}
     */
    ExpressionService.prototype.addCommonObjectOfNewSchema = /**
     * \@description 添加CO的数据，NewSchema
     * @param {?} commonObject
     * @return {?}
     */
    function (commonObject) {
        /** @type {?} */
        var newSchema;
        //若newSchemaMap中存在CO的newSchema
        if (this.exprEntity.newSchemaMap.get("CommonObject")) {
            newSchema = this.exprEntity.newSchemaMap.get("CommonObject");
        }
        else
            newSchema = new NewSchema;
        //将每一个CO转化为schema内部结构中的entityType
        /** @type {?} */
        var entityTypes = this.adapter.convertCOOfNewSchema(commonObject);
        entityTypes.forEach((/**
         * @param {?} entityType
         * @return {?}
         */
        function (entityType) {
            newSchema.entityTypes.push(entityType);
            /** @type {?} */
            var entitySet = new NewEntitySet;
            entitySet.code = entityType.name + "s";
            entitySet.entityType = entityType.code;
            newSchema.entitySets.push(entitySet);
        }));
        //将合并后的newSchema放入内部上下文实体中
        this.addNewSchema("CommonObject", newSchema);
    };
    /**
     * @description 添加UDT类型，NewSchema
     * @param gspCDTs
     */
    /**
     * \@description 添加UDT类型，NewSchema
     * @param {?} gspCDTs
     * @return {?}
     */
    ExpressionService.prototype.addCDTOfNewSchema = /**
     * \@description 添加UDT类型，NewSchema
     * @param {?} gspCDTs
     * @return {?}
     */
    function (gspCDTs) {
        var _this = this;
        /** @type {?} */
        var newSchema = new NewSchema();
        //若schemaMap中存在CDT的schema
        if (this.exprEntity.newSchemaMap.get("CDT")) {
            newSchema = this.exprEntity.newSchemaMap.get("CDT");
        }
        //将每一个CDT转化为schema内部结构中的entityType
        gspCDTs.forEach((/**
         * @param {?} gspCDT
         * @return {?}
         */
        function (gspCDT) {
            /** @type {?} */
            var entityType = _this.adapter.convertCDTOfNewSchema(gspCDT);
            newSchema.entityTypes.push(entityType);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addNewSchema("CDT", newSchema);
    };
    ExpressionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExpressionService.ctorParameters = function () { return [
        { type: Injector },
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: HttpClient }
    ]; };
    return ExpressionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量实体
 * \@property key 名称
 * \@property name 语义化名称
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
var  /**
 * 变量实体
 * \@property key 名称
 * \@property name 语义化名称
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
VarEntity = /** @class */ (function () {
    function VarEntity() {
    }
    return VarEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 函数实体
 * \@property key 函数语义化名称
 * \@property params 函数参数集
 * \@property name 函数名称
 * \@property type 函数类型
 * \@property className 所在类名
 * \@property description 节点自描述
 * @author linchang 2018/12/7
 */
var  /**
 * 函数实体
 * \@property key 函数语义化名称
 * \@property params 函数参数集
 * \@property name 函数名称
 * \@property type 函数类型
 * \@property className 所在类名
 * \@property description 节点自描述
 * @author linchang 2018/12/7
 */
FuncEntity = /** @class */ (function () {
    function FuncEntity() {
        this.className = "";
    }
    return FuncEntity;
}());
/** @enum {number} */
var FuncType = {
    "Advanced": 0,
    "Date": 1,
    "Estimate": 2,
    "String": 3,
    "Translate": 4,
    "Aggregate": 5,
    "Analytical": 6,
    "Math": 7,
    "Extend": 8 //扩展函数
    ,
};
FuncType[FuncType["Advanced"]] = "Advanced";
FuncType[FuncType["Date"]] = "Date";
FuncType[FuncType["Estimate"]] = "Estimate";
FuncType[FuncType["String"]] = "String";
FuncType[FuncType["Translate"]] = "Translate";
FuncType[FuncType["Aggregate"]] = "Aggregate";
FuncType[FuncType["Analytical"]] = "Analytical";
FuncType[FuncType["Math"]] = "Math";
FuncType[FuncType["Extend" //扩展函数
]] = "Extend" //扩展函数
;
/**
 * 参数信息
 * @param key 不同语言，统一标识
 * \@property name 语义化参数名
 * \@property type 参数类型
 * @author linchang 2018/12/7
 */
var  /**
 * 参数信息
 * @param key 不同语言，统一标识
 * \@property name 语义化参数名
 * \@property type 参数类型
 * @author linchang 2018/12/7
 */
Parameter = /** @class */ (function () {
    function Parameter() {
    }
    return Parameter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 预置帮助实体
 */
var  /**
 * 预置帮助实体
 */
SmartHelpEntity = /** @class */ (function () {
    function SmartHelpEntity() {
    }
    return SmartHelpEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ExpressionModule, ExpressioneditorComponent, ExpressionService, ExpressionEventService, ExpressionEntity, VarEntity, FuncEntity, FuncType, Parameter, InjectedType, InjectedEntity, Schema, EntityType, EntitySet, Property, NavigationProperty, NavigationType, ExpressionContextEntity, SmartHelpEntity, ExprEditMode, ExpressionEditorLocalePipe, ComputeRuleComponent as ɵa, ExprFuncGridComponent as ɵb, ExpressionEntityGridComponent as ɵg, ExpressionEntityInfoGridComponent as ɵh, ExpressionSchemaGridComponent as ɵe, ExpressionSchemaInfoGridComponent as ɵf, ExpressionSmartHelpGridComponent as ɵi, ExpressionVarGridComponent as ɵc, ExpressionVarInfoGridComponent as ɵd, MY_MONACO_EDITOR_CONFIG as ɵn, CodeEditorEventService as ɵm, CODE_EDITOR_INPUT_VALUE_ACCESSOR as ɵk, MyMonacoEditorComponent as ɵl, MyMonacoEditorModule as ɵj };

//# sourceMappingURL=gsp-svc-expression.js.map