/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { forwardRef, Inject, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { pick } from 'lodash-es';
import { MY_MONACO_EDITOR_CONFIG } from './editorconfig';
import { CodeEditorEventService } from './my-monaco-editor-services/monaco-editor.event.service';
import { CODE_EDITOR_EVENTS } from './my-monaco-editor-services/events';
import { ExpressionEventService } from '../expression-event-service';
/** @type {?} */
var loadedMonaco = false;
/** @type {?} */
var loadPromise;
// 自定义输入控件:1.封装ControlValueAccessor
// https://code-examples.net/zh-CN/q/2154761
/** @type {?} */
export var CODE_EDITOR_INPUT_VALUE_ACCESSOR = {
    // https://blog.csdn.net/wangdan_2013/article/details/81314959
    provide: NG_VALUE_ACCESSOR,
    //
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return MyMonacoEditorComponent; })),
    //
    multi: true //
};
/** @type {?} */
var monacoConfig = {
    baseUrl: 'assets',
    defaultOptions: { scrollBeyondLastLine: false }
};
var ɵ0 = monacoConfig;
var MyMonacoEditorComponent = /** @class */ (function () {
    // 注入AngularMonacoEditorConfig，在创建Editor实例时设置config
    function MyMonacoEditorComponent(zone, config, codeEditorEventService, eventService) {
        var _this = this;
        this.zone = zone;
        this.config = config;
        this.codeEditorEventService = codeEditorEventService;
        this.eventService = eventService;
        this._value = '';
        //ControlValueAccessor提供的事件回调
        this.onChangeHandler = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) {
            _this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onChange,
                target: _this,
                data: _
            });
        });
        //ControlValueAccessor提供的事件回调
        this.onTouchedHandler = (/**
         * @return {?}
         */
        function () {
            _this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onTouched,
                target: _this
            });
        });
        // 初始化自定义事件
        /** @type {?} */
        var self = this;
        codeEditorEventService.eventNames.forEach((/**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            // 创建自定义事件，此处作用等效于: @Output() onInit = new EventEmitter<any>() 
            self[name] = new EventEmitter();
            /** @type {?} */
            var eventPair = pick(self, name);
            codeEditorEventService.addEvent(eventPair);
        }));
    }
    Object.defineProperty(MyMonacoEditorComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            // 默认options(this.config.defaultOptions) + 自定义options(options)
            this._options = Object.assign({}, this.config.defaultOptions, options);
            if (this._editor) {
                this._editor.dispose();
                this.initMonaco(options);
            }
        },
        enumerable: true,
        configurable: true
    });
    //在光标处插入表达式的方法
    //在光标处插入表达式的方法
    /**
     * @param {?} insertWord
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.insertWord = 
    //在光标处插入表达式的方法
    /**
     * @param {?} insertWord
     * @return {?}
     */
    function (insertWord) {
        if (insertWord && insertWord != undefined && insertWord != "") {
            /** @type {?} */
            var p = {
                lineNumber: 1,
                column: 1
            };
            if (this._editor) {
                p = this._editor.getPosition();
            }
            /** @type {?} */
            var range = new monaco.Range(p.lineNumber, p.column, p.lineNumber, p.column);
            /** @type {?} */
            var id = { major: 1, minor: 1 };
            /** @type {?} */
            var text = insertWord;
            /** @type {?} */
            var op = { identifier: id, range: range, text: text, forceMoveMarkers: true };
            this._editor.executeEdits("my-source", [op]);
        }
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then((/**
             * @return {?}
             */
            function () {
                _this.initMonaco(_this.options);
            }));
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) {
                // const baseUrl = this.config.baseUrl || '/assets';
                /** @type {?} */
                var baseUrl = '/platform/common/web/caf';
                // if (typeof((<any>window).monaco) === 'object') {
                //   resolve();
                //   return;
                // }
                /** @type {?} */
                var onGotAmdLoader = (/**
                 * @return {?}
                 */
                function () {
                    // Load monaco
                    ((/** @type {?} */ (window))).require.config({ paths: { 'vs': baseUrl + "/monaco/vs" } });
                    ((/** @type {?} */ (window))).require(['vs/editor/editor.main'], (/**
                     * @return {?}
                     */
                    function () {
                        _this.onMonacoLoad();
                        _this.initMonaco(_this.options);
                        resolve();
                    }));
                });
                // Load AMD loader if necessary
                if (!((/** @type {?} */ (window))).require) {
                    /** @type {?} */
                    var loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = baseUrl + "/monaco/vs/loader.js";
                    loaderScript.onload = onGotAmdLoader;
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            }));
        }
        //在光标处插入表达式事件订阅
        /** @type {?} */
        var temp = this;
        this.eventService.currentExpression().subscribe((/**
         * @param {?} insertexpression
         * @return {?}
         */
        function (insertexpression) {
            if (temp._editor != undefined) {
                temp.insertWord(insertexpression);
            }
        }));
        this.eventService.clearExpression().subscribe((/**
         * @return {?}
         */
        function () {
            if (temp._editor != undefined) {
                temp._editor.setValue("");
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.onMonacoLoad = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = "foo.json";
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
            validate: true,
            schemas: [{
                    uri: "http://myserver/foo-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            p1: {
                                enum: ["v1", "v2"]
                            },
                            p2: {
                                $ref: "http://myserver/bar-schema.json"
                            }
                        }
                    }
                }, {
                    uri: "http://myserver/bar-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            q1: {
                                enum: ["x1", "x2"]
                            }
                        }
                    }
                }]
        });
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    };
    /**
     * @protected
     * @param {?} options
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.initMonaco = /**
     * @protected
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        debugger;
        console.log("Init the custom monaco code editor.");
        // const hasModel = !!options.model;
        /** @type {?} */
        var hasModel = false;
        // if (hasModel) {
        //   options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
        // }
        this._editor = monaco.editor.create(this._editorComponent.nativeElement, options);
        if (!hasModel) {
            this._editor.setValue(this._value);
        }
        // monaco editor -> outside component
        this._editor.onDidChangeModelContent((/**
         * @return {?}
         */
        function () { return _this.onChangeModelContentHandler(); }));
        this._editor.onDidBlurEditorText((/**
         * @return {?}
         */
        function () { return _this.onBlurEditorTextHandler(); }));
        // refresh layout on resize event.
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        // this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
        this.codeEditorEventService.fireEvent({
            eventName: CODE_EDITOR_EVENTS.onInit,
            target: this,
            editor: this._editor
        });
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.onChangeModelContentHandler = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var _value = this._editor.getValue();
        // monaco editor -> outside component
        // https://github.com/JTangming/tm/issues/4 ngZone详解
        this.zone.run((/**
         * @return {?}
         */
        function () { return _this.value = _value; })); // value is not propagated to parent when executing outside zone.
        // console.log("write from the monaco:" + this._value);
    };
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.onBlurEditorTextHandler = /**
     * @return {?}
     */
    function () {
        this.onTouchedHandler();
    };
    Object.defineProperty(MyMonacoEditorComponent.prototype, "value", {
        //get accessor
        get: 
        //get accessor
        /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        //set accessor including call the onchange callback
        set: 
        //set accessor including call the onchange callback
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.value) { // 注意这种写法，值得学习
                this._value = v;
            }
            this.onChangeHandler(this.value); //在属性修饰器里调用onchangeHandler方法
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.localEditor = /**
     * @return {?}
     */
    function () {
        this.writeValue('test');
    };
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.writeValue = 
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.value = value || '';
        // Fix for value change while dispose in process.
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this._editor /*&& !this.options.model*/) {
                _this._editor.setValue(_this._value);
                // console.log("write to the editor:" + this._value);
            }
        }));
    };
    //From ControlValueAccessor interface
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.registerOnChange = 
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeHandler(this);
    };
    //From ControlValueAccessor interface
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    MyMonacoEditorComponent.prototype.registerOnTouched = 
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedHandler();
    };
    MyMonacoEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-my-monaco-editor',
                    template: "<div class=\"editor h-100\" #codeEditor></div>",
                    // 自定义输入控件:2.引入依赖服务ControlValueAccessor
                    providers: [CODE_EDITOR_INPUT_VALUE_ACCESSOR,
                        CodeEditorEventService,
                        {
                            provide: MY_MONACO_EDITOR_CONFIG,
                            useValue: ɵ0
                        }
                    ],
                    styles: [":host{display:block;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    MyMonacoEditorComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [MY_MONACO_EDITOR_CONFIG,] }] },
        { type: CodeEditorEventService },
        { type: ExpressionEventService }
    ]; };
    MyMonacoEditorComponent.propDecorators = {
        _editorComponent: [{ type: ViewChild, args: ['codeEditor',] }],
        onInit: [{ type: Output }],
        onChange: [{ type: Output }],
        onTouched: [{ type: Output }],
        options: [{ type: Input, args: ['options',] }]
    };
    return MyMonacoEditorComponent;
}());
export { MyMonacoEditorComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    MyMonacoEditorComponent.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype._options;
    /** @type {?} */
    MyMonacoEditorComponent.prototype._editorComponent;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onInit;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onChange;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype._value;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onChangeHandler;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onTouchedHandler;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.codeEditorEventService;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.eventService;
    /* Skipping unhandled member: ;*/
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,