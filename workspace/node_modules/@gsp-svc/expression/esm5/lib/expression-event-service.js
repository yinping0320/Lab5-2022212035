/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * 自定义的表达式事件服务类
 * 功能：定义表达式内部的事件发布与监听接口
 */
var ExpressionEventService = /** @class */ (function () {
    function ExpressionEventService() {
        // Observable string sources
        this.windowClosed = new Subject();
        // Observable string streams
        this.windowClosed$ = this.windowClosed.asObservable();
        //创建Observable源
        this._expressionsource = new Subject();
        //在光标处插入表达式事件发布与订阅
        this._insertexpression = new Subject();
        this._clearexpression = new Subject();
        //函数选择焦点清除
        this._clearFuncSelect = new Subject();
        //变量选择焦点清除
        this._clearVarSelect = new Subject();
    }
    // Service message commands
    // Service message commands
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.closeWindow = 
    // Service message commands
    /**
     * @return {?}
     */
    function () {
        this.windowClosed.next();
    };
    //定义发布表达式实体方法
    //定义发布表达式实体方法
    /**
     * @param {?} expressionentity
     * @return {?}
     */
    ExpressionEventService.prototype.setExpression = 
    //定义发布表达式实体方法
    /**
     * @param {?} expressionentity
     * @return {?}
     */
    function (expressionentity) {
        this._expressionsource.next(expressionentity);
    };
    //定义获得表达式实体方法
    //定义获得表达式实体方法
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.getExpression = 
    //定义获得表达式实体方法
    /**
     * @return {?}
     */
    function () {
        return this._expressionsource.asObservable();
    };
    /**
     * @param {?} expression
     * @return {?}
     */
    ExpressionEventService.prototype.insertExpression = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        this._insertexpression.next(expression);
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.currentExpression = /**
     * @return {?}
     */
    function () {
        return this._insertexpression.asObservable();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.pushclearExpression = /**
     * @return {?}
     */
    function () {
        this._clearexpression.next();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.clearExpression = /**
     * @return {?}
     */
    function () {
        return this._clearexpression.asObservable();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.clearFuncSelect = /**
     * @return {?}
     */
    function () {
        this._clearFuncSelect.next();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.subClearFuncSelect = /**
     * @return {?}
     */
    function () {
        return this._clearFuncSelect.asObservable();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.clearVarSelect = /**
     * @return {?}
     */
    function () {
        this._clearFuncSelect.next();
    };
    /**
     * @return {?}
     */
    ExpressionEventService.prototype.subClearVarSelect = /**
     * @return {?}
     */
    function () {
        return this._clearFuncSelect.asObservable();
    };
    ExpressionEventService.decorators = [
        { type: Injectable }
    ];
    return ExpressionEventService;
}());
export { ExpressionEventService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype.windowClosed;
    /** @type {?} */
    ExpressionEventService.prototype.windowClosed$;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._expressionsource;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._insertexpression;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._clearexpression;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._clearFuncSelect;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._clearVarSelect;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1ldmVudC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1zdmMvZXhwcmVzc2lvbi8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uLWV2ZW50LXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQzs7Ozs7QUFLM0M7SUFBQTs7UUFHVSxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7O1FBRTdDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7UUFNekMsc0JBQWlCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7O1FBVXJELHNCQUFpQixHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDO1FBUXJELHFCQUFnQixHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDOztRQVFwRCxxQkFBZ0IsR0FBZ0IsSUFBSSxPQUFPLEVBQU8sQ0FBQzs7UUFRbkQsb0JBQWUsR0FBZ0IsSUFBSSxPQUFPLEVBQU8sQ0FBQztJQU81RCxDQUFDO0lBOUNDLDJCQUEyQjs7Ozs7SUFDM0IsNENBQVc7Ozs7O0lBQVg7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFHRCxhQUFhOzs7Ozs7SUFDYiw4Q0FBYTs7Ozs7O0lBQWIsVUFBYyxnQkFBcUI7UUFDakMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDRCxhQUFhOzs7OztJQUNiLDhDQUFhOzs7OztJQUFiO1FBQ0UsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDL0MsQ0FBQzs7Ozs7SUFHRCxpREFBZ0I7Ozs7SUFBaEIsVUFBaUIsVUFBaUI7UUFDaEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBQ0Qsa0RBQWlCOzs7SUFBakI7UUFDRSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMvQyxDQUFDOzs7O0lBR0Qsb0RBQW1COzs7SUFBbkI7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUNELGdEQUFlOzs7SUFBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzlDLENBQUM7Ozs7SUFHRCxnREFBZTs7O0lBQWY7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUNELG1EQUFrQjs7O0lBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7OztJQUdELCtDQUFjOzs7SUFBZDtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7O0lBQ0Qsa0RBQWlCOzs7SUFBakI7UUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM5QyxDQUFDOztnQkFuREYsVUFBVTs7SUFvRFgsNkJBQUM7Q0FBQSxBQXBERCxJQW9EQztTQW5EWSxzQkFBc0I7Ozs7OztJQUVqQyw4Q0FBNkM7O0lBRTdDLCtDQUFpRDs7Ozs7SUFNakQsbURBQTZEOzs7OztJQVU3RCxtREFBNkQ7Ozs7O0lBUTdELGtEQUE0RDs7Ozs7SUFRNUQsa0RBQTJEOzs7OztJQVEzRCxpREFBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuLyoqXHJcbiAqIOiHquWumuS5ieeahOihqOi+vuW8j+S6i+S7tuacjeWKoeexu1xyXG4gKiDlip/og73vvJrlrprkuYnooajovr7lvI/lhoXpg6jnmoTkuovku7blj5HluIPkuI7nm5HlkKzmjqXlj6NcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25FdmVudFNlcnZpY2Uge1xyXG4gIC8vIE9ic2VydmFibGUgc3RyaW5nIHNvdXJjZXNcclxuICBwcml2YXRlIHdpbmRvd0Nsb3NlZCA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcclxuICAvLyBPYnNlcnZhYmxlIHN0cmluZyBzdHJlYW1zXHJcbiAgd2luZG93Q2xvc2VkJCA9IHRoaXMud2luZG93Q2xvc2VkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIC8vIFNlcnZpY2UgbWVzc2FnZSBjb21tYW5kc1xyXG4gIGNsb3NlV2luZG93KCkge1xyXG4gICAgdGhpcy53aW5kb3dDbG9zZWQubmV4dCgpO1xyXG4gIH1cclxuICAvL+WIm+W7uk9ic2VydmFibGXmupBcclxuICBwcml2YXRlIF9leHByZXNzaW9uc291cmNlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgLy/lrprkuYnlj5HluIPooajovr7lvI/lrp7kvZPmlrnms5VcclxuICBzZXRFeHByZXNzaW9uKGV4cHJlc3Npb25lbnRpdHk6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5fZXhwcmVzc2lvbnNvdXJjZS5uZXh0KGV4cHJlc3Npb25lbnRpdHkpO1xyXG4gIH1cclxuICAvL+WumuS5ieiOt+W+l+ihqOi+vuW8j+WunuS9k+aWueazlVxyXG4gIGdldEV4cHJlc3Npb24oKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLl9leHByZXNzaW9uc291cmNlLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuICAvL+WcqOWFieagh+WkhOaPkuWFpeihqOi+vuW8j+S6i+S7tuWPkeW4g+S4juiuoumYhVxyXG4gIHByaXZhdGUgX2luc2VydGV4cHJlc3Npb246IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBpbnNlcnRFeHByZXNzaW9uKGV4cHJlc3Npb246c3RyaW5nKTogdm9pZHtcclxuICAgIHRoaXMuX2luc2VydGV4cHJlc3Npb24ubmV4dChleHByZXNzaW9uKTtcclxuICB9XHJcbiAgY3VycmVudEV4cHJlc3Npb24oKTpPYnNlcnZhYmxlPGFueT57XHJcbiAgICByZXR1cm4gdGhpcy5faW5zZXJ0ZXhwcmVzc2lvbi5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbiAgXHJcbiAgcHJpdmF0ZSBfY2xlYXJleHByZXNzaW9uOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgcHVzaGNsZWFyRXhwcmVzc2lvbigpOiB2b2lke1xyXG4gICAgdGhpcy5fY2xlYXJleHByZXNzaW9uLm5leHQoKTtcclxuICB9XHJcbiAgY2xlYXJFeHByZXNzaW9uKCk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFyZXhwcmVzc2lvbi5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbiAgLy/lh73mlbDpgInmi6nnhKbngrnmuIXpmaRcclxuICBwcml2YXRlIF9jbGVhckZ1bmNTZWxlY3Q6U3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIGNsZWFyRnVuY1NlbGVjdCgpOiB2b2lke1xyXG4gICAgdGhpcy5fY2xlYXJGdW5jU2VsZWN0Lm5leHQoKTtcclxuICB9XHJcbiAgc3ViQ2xlYXJGdW5jU2VsZWN0KCk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFyRnVuY1NlbGVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbiAgLy/lj5jph4/pgInmi6nnhKbngrnmuIXpmaRcclxuICBwcml2YXRlIF9jbGVhclZhclNlbGVjdDpTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgY2xlYXJWYXJTZWxlY3QoKTogdm9pZHtcclxuICAgIHRoaXMuX2NsZWFyRnVuY1NlbGVjdC5uZXh0KCk7XHJcbiAgfVxyXG4gIHN1YkNsZWFyVmFyU2VsZWN0KCk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFyRnVuY1NlbGVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbn0iXX0=