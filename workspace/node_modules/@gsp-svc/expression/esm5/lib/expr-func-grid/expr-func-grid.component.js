/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, Injector, Output, EventEmitter } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ExpressionEventService } from '../expression-event-service';
import { FuncOnEntity } from './funcentitys';
import { HttpClient } from "@angular/common/http";
import { FunctionI18nResources } from '../i18n/FunctionI18nResource';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
var ExprFuncGridComponent = /** @class */ (function () {
    function ExprFuncGridComponent(eventService, injector, http) {
        this.eventService = eventService;
        this.injector = injector;
        this.http = http;
        this.currentFuncTabType = "String";
        this.funcExtend = [];
        this.selectFuncRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.standardFunctions = []; //规范函数
        //规范函数
        this.allFunctions = []; //所有函数，包含不规范
        //所有函数，包含不规范
        this.deprecatedFunctions = [
            "StringSubstring", "StringLength", "StringReplace", "StringToUpper", "StringToLower", "StringIndexOf", "StringLastIndexOf", "StringTrimStart", "StringTrimEnd", "StringTrim", "StringAdd",
            "Round", "BankerRound",
            "getComputeJsonData",
            "ToDecimal", "ToSingle"
        ]; //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        this.columns = [];
        // if(this.injector)
        // {
        // this.http=this.injector.get(HttpClient);
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        // }
    }
    /**
     * @return {?}
     */
    ExprFuncGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventService.subClearFuncSelect().subscribe((/**
         * @return {?}
         */
        function () {
            _this.dg.clearAll();
        }));
        this.columns = [
            { field: 'name', title: this.localePipe.transform("FunctionSemanticName"), width: 180 },
            { field: 'key', title: this.localePipe.transform("FunctionName"), width: 180 },
            { field: 'param', title: this.localePipe.transform("FunctionParameter"), width: 250 }
        ];
        //获取i18n函数资源；过滤不规范命名函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        for (var i = 0; i < this.allFunctions.length; i++) {
            if (!this.deprecatedFunctions.includes(this.allFunctions[i].key)) {
                this.standardFunctions.push(this.allFunctions[i]);
            }
        }
        switch (this.currentFuncTabType) {
            case "String":
                this.findFunctionByType("String");
                break;
            case "DateTime":
                this.findFunctionByType("DateTime");
                break;
            case "Aggregate":
                this.findFunctionByType("Aggregate");
                break;
            case "Translate":
                this.findFunctionByType("Translate");
                break;
            case "Estimate":
                this.findFunctionByType("Estimate");
                break;
            case "Math":
                this.findFunctionByType("Math");
                break;
            case "Analytical":
                this.findFunctionByType("Analytical");
                break;
            case "Advanced":
                this.findFunctionByType("Advanced");
                break;
            case "Extend":
                this.findFunctionByType("Extend");
                break;
        }
        /** @type {?} */
        var itmeList = [];
        /**
         * 封装提供给表达式编辑器
         * 1：Advanced使用key,不使用name
         */
        this.items.forEach((/**
         * @param {?} funcitem
         * @return {?}
         */
        function (funcitem) {
            /** @type {?} */
            var func = new FuncOnEntity;
            if (funcitem.type == "Advanced") {
                func.name = funcitem.key;
            }
            else {
                func.name = funcitem.name;
            }
            func.key = funcitem.key;
            func.params = funcitem.params;
            func.type = funcitem.type;
            func.className = funcitem.className;
            func.description = funcitem.description;
            func.param = "(";
            for (var i = 0; i < funcitem.params.length - 1; i++) {
                // func.param = func.param + funcitem.params[i].name + ":" + funcitem.params[i].type + ",";
                func.param = func.param + funcitem.params[i].key + ",";
            }
            if (funcitem.params.length != 0) {
                // func.param = func.param + funcitem.params[funcitem.params.length - 1].name + ":" + funcitem.params[funcitem.params.length - 1].type + ")";
                func.param = func.param + funcitem.params[funcitem.params.length - 1].key + ")";
            }
            else
                func.param = func.param + ")";
            itmeList.push(func);
        }));
        this.items = itmeList;
    };
    /**
     * @return {?}
     */
    ExprFuncGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExprFuncGridComponent.prototype.ondblclickRow = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dbclickInsert.emit($event.rowData);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExprFuncGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectFuncRow.emit($event.data);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ExprFuncGridComponent.prototype.findFunctionByType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        this.items = [];
        this.standardFunctions.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.type == type) {
                _this.items.push(element);
            }
            ;
        }));
    };
    ExprFuncGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expr-func-grid',
                    template: "<div style=\"height: 100%;width: 100%;\">\r\n<farris-datagrid #dg\r\n[idField]=\"'key'\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"false\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[headerHeight]=\"30\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>\r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExprFuncGridComponent.ctorParameters = function () { return [
        { type: ExpressionEventService },
        { type: Injector },
        { type: HttpClient }
    ]; };
    ExprFuncGridComponent.propDecorators = {
        dg: [{ type: ViewChild, args: ['dg',] }],
        currentFuncTabType: [{ type: Input }],
        funcExtend: [{ type: Input }],
        selectFuncRow: [{ type: Output }],
        dbclickInsert: [{ type: Output }]
    };
    return ExprFuncGridComponent;
}());
export { ExprFuncGridComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.localePipe;
    /** @type {?} */
    ExprFuncGridComponent.prototype.dg;
    /** @type {?} */
    ExprFuncGridComponent.prototype.currentFuncTabType;
    /** @type {?} */
    ExprFuncGridComponent.prototype.funcExtend;
    /** @type {?} */
    ExprFuncGridComponent.prototype.selectFuncRow;
    /** @type {?} */
    ExprFuncGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExprFuncGridComponent.prototype.items;
    /** @type {?} */
    ExprFuncGridComponent.prototype.standardFunctions;
    /** @type {?} */
    ExprFuncGridComponent.prototype.allFunctions;
    /** @type {?} */
    ExprFuncGridComponent.prototype.deprecatedFunctions;
    /** @type {?} */
    ExprFuncGridComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.eventService;
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.injector;
    /** @type {?} */
    ExprFuncGridComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,