/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CurrentNode } from '../currentNode';
var ExpressionSchemaGridComponent = /** @class */ (function () {
    function ExpressionSchemaGridComponent() {
        this.schema = new Map();
        this.selectschemachange = new EventEmitter();
        this.currentNode = new CurrentNode;
        this.cols = [
            { field: 'name', title: '纲要名称' }
        ];
        this.treedata = [];
    }
    /**
     * @return {?}
     */
    ExpressionSchemaGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.convertSchema();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionSchemaGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentNode = new CurrentNode;
        this.currentNode.id = $event.node.data.id;
        this.currentNode.name = $event.node.data.name;
        this.currentNode.parentName = $event.node.parent.data.name;
        this.selectschemachange.emit(this.currentNode);
    };
    /**
     * @return {?}
     */
    ExpressionSchemaGridComponent.prototype.convertSchema = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.schema.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            /** @type {?} */
            var treeitem = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "type": "",
                    "description": ""
                },
                children: []
            };
            treeitem.data.name = key;
            treeitem.data.type = "Schema";
            treeitem.data.description = value.description;
            value.entityTypes.forEach((/**
             * @param {?} entitytype
             * @return {?}
             */
            function (entitytype) {
                /** @type {?} */
                var typetree = {
                    data: {
                        "id": "",
                        "name": "",
                        "type": "",
                        "description": ""
                    },
                    children: [],
                    parent: treeitem
                };
                typetree.data.id = entitytype.id;
                typetree.data.name = entitytype.name;
                typetree.data.type = "EntityType";
                typetree.data.description = entitytype.description;
                treeitem.children.push(typetree);
            }));
            _this.treedata.push(treeitem);
        }));
    };
    ExpressionSchemaGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-schema-grid',
                    template: "<farris-treetable #tt \r\n[data]=\"treedata\"\r\n[fit]=\"true\" \r\n[columns]=\"cols\" \r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[showFilterBar]=\"false\"\r\n[showHeader]=\"true\"\r\n[enableFindText]=\"true\"\r\n(cellClick)=\"selectRowChange($event)\"\r\n>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionSchemaGridComponent.ctorParameters = function () { return []; };
    ExpressionSchemaGridComponent.propDecorators = {
        schema: [{ type: Input }],
        selectschemachange: [{ type: Output }]
    };
    return ExpressionSchemaGridComponent;
}());
export { ExpressionSchemaGridComponent };
if (false) {
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.schema;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.selectschemachange;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.currentNode;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.cols;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.treedata;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1zY2hlbWEtZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9leHByZXNzaW9uLyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24tc2NoZW1hLWdyaWQvZXhwcmVzc2lvbi1zY2hlbWEtZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDO0lBYUU7UUFQUyxXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDbEMsdUJBQWtCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsRCxnQkFBVyxHQUFhLElBQUksV0FBVyxDQUFDO1FBQ3hDLFNBQUksR0FBRztZQUNMLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDO1NBQ2hDLENBQUM7UUFDSyxhQUFRLEdBQWUsRUFBRSxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFDakIsZ0RBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsdURBQWU7Ozs7SUFBZixVQUFnQixNQUFNO1FBRXBCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7SUFDRCxxREFBYTs7O0lBQWI7UUFBQSxpQkFtQ0M7UUFsQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7OztRQUFDLFVBQUMsS0FBSyxFQUFFLEdBQUc7O2dCQUN6QixRQUFRLEdBQVU7Z0JBQ3BCLElBQUksRUFDSjtvQkFDRSxJQUFJLEVBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDbEIsTUFBTSxFQUFFLEVBQUU7b0JBQ1YsTUFBTSxFQUFFLEVBQUU7b0JBQ1YsYUFBYSxFQUFFLEVBQUU7aUJBQ2xCO2dCQUNELFFBQVEsRUFBRSxFQUFFO2FBQ2I7WUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7WUFDekIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1lBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDOUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxVQUFVOztvQkFDOUIsUUFBUSxHQUFVO29CQUNwQixJQUFJLEVBQ0o7d0JBQ0UsSUFBSSxFQUFDLEVBQUU7d0JBQ1AsTUFBTSxFQUFFLEVBQUU7d0JBQ1YsTUFBTSxFQUFFLEVBQUU7d0JBQ1YsYUFBYSxFQUFFLEVBQUU7cUJBQ2xCO29CQUNELFFBQVEsRUFBRSxFQUFFO29CQUNaLE1BQU0sRUFBQyxRQUFRO2lCQUNoQjtnQkFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDO2dCQUNqQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7Z0JBQ2xDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7Z0JBQ25ELFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLENBQUMsRUFBQyxDQUFDO1lBQ0gsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOztnQkE1REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLG9SQUFzRDs7aUJBRXZEOzs7Ozt5QkFFRSxLQUFLO3FDQUNMLE1BQU07O0lBdURULG9DQUFDO0NBQUEsQUE5REQsSUE4REM7U0F6RFksNkJBQTZCOzs7SUFDeEMsK0NBQTRDOztJQUM1QywyREFBa0Q7O0lBQ2xELG9EQUF3Qzs7SUFDeEMsNkNBRUU7O0lBQ0YsaURBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTY2hlbWF9IGZyb20gJy4uL3NjaGVtYSc7XHJcbmltcG9ydCB7IFRyZWVOb2RlIH0gZnJvbSAnQGZhcnJpcy91aS10cmVldGFibGUnO1xyXG5pbXBvcnQgeyBDdXJyZW50Tm9kZSB9IGZyb20gJy4uL2N1cnJlbnROb2RlJztcclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtZXhwcmVzc2lvbi1zY2hlbWEtZ3JpZCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2V4cHJlc3Npb24tc2NoZW1hLWdyaWQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2V4cHJlc3Npb24tc2NoZW1hLWdyaWQuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uU2NoZW1hR3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQElucHV0KCkgc2NoZW1hID0gbmV3IE1hcDxzdHJpbmcsIFNjaGVtYT4oKTtcclxuICBAT3V0cHV0KCkgc2VsZWN0c2NoZW1hY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIGN1cnJlbnROb2RlOkN1cnJlbnROb2RlPW5ldyBDdXJyZW50Tm9kZTtcclxuICBjb2xzID0gW1xyXG4gICAgeyBmaWVsZDogJ25hbWUnLCB0aXRsZTogJ+e6suimgeWQjeensCd9XHJcbiAgXTtcclxuICBwdWJsaWMgdHJlZWRhdGE6IFRyZWVOb2RlW10gPSBbXTtcclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5jb252ZXJ0U2NoZW1hKCk7XHJcbiAgfVxyXG4gIHNlbGVjdFJvd0NoYW5nZSgkZXZlbnQpXHJcbiAge1xyXG4gICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5ldyBDdXJyZW50Tm9kZTtcclxuICAgIHRoaXMuY3VycmVudE5vZGUuaWQgPSAkZXZlbnQubm9kZS5kYXRhLmlkO1xyXG4gICAgdGhpcy5jdXJyZW50Tm9kZS5uYW1lID0gJGV2ZW50Lm5vZGUuZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5jdXJyZW50Tm9kZS5wYXJlbnROYW1lID0gJGV2ZW50Lm5vZGUucGFyZW50LmRhdGEubmFtZTtcclxuICAgIHRoaXMuc2VsZWN0c2NoZW1hY2hhbmdlLmVtaXQodGhpcy5jdXJyZW50Tm9kZSk7XHJcbiAgfVxyXG4gIGNvbnZlcnRTY2hlbWEoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNjaGVtYS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgIGxldCB0cmVlaXRlbTpUcmVlTm9kZT17XHJcbiAgICAgICAgZGF0YTpcclxuICAgICAgICB7XHJcbiAgICAgICAgICBcImlkXCI6TWF0aC5yYW5kb20oKSxcclxuICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxyXG4gICAgICAgICAgXCJ0eXBlXCI6IFwiXCIsXHJcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXVxyXG4gICAgICB9O1xyXG4gICAgICB0cmVlaXRlbS5kYXRhLm5hbWUgPSBrZXk7XHJcbiAgICAgIHRyZWVpdGVtLmRhdGEudHlwZSA9IFwiU2NoZW1hXCI7XHJcbiAgICAgIHRyZWVpdGVtLmRhdGEuZGVzY3JpcHRpb24gPSB2YWx1ZS5kZXNjcmlwdGlvbjtcclxuICAgICAgdmFsdWUuZW50aXR5VHlwZXMuZm9yRWFjaChlbnRpdHl0eXBlID0+IHtcclxuICAgICAgICBsZXQgdHlwZXRyZWU6VHJlZU5vZGU9e1xyXG4gICAgICAgICAgZGF0YTpcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJpZFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgICAgcGFyZW50OnRyZWVpdGVtXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0eXBldHJlZS5kYXRhLmlkID0gZW50aXR5dHlwZS5pZDtcclxuICAgICAgICB0eXBldHJlZS5kYXRhLm5hbWUgPSBlbnRpdHl0eXBlLm5hbWU7XHJcbiAgICAgICAgdHlwZXRyZWUuZGF0YS50eXBlID0gXCJFbnRpdHlUeXBlXCI7XHJcbiAgICAgICAgdHlwZXRyZWUuZGF0YS5kZXNjcmlwdGlvbiA9IGVudGl0eXR5cGUuZGVzY3JpcHRpb247XHJcbiAgICAgICAgdHJlZWl0ZW0uY2hpbGRyZW4ucHVzaCh0eXBldHJlZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnRyZWVkYXRhLnB1c2godHJlZWl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=