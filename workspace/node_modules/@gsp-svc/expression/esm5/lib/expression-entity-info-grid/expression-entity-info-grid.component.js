/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Property } from '../schema';
import { CurrentNode } from '../currentNode';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
import { NewProperty } from '../i18n/NewSchema';
var ExpressionEntityInfoGridComponent = /** @class */ (function () {
    function ExpressionEntityInfoGridComponent() {
        this.schema = new Map();
        this.newSchemaMap = new Map(); //统一Schema
        //统一Schema
        this.choseEntityTableName = new CurrentNode;
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.selectString = "";
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
        /** @type {?} */
        var schemaName = this.choseEntityTableName.schema;
        /** @type {?} */
        var parentName = this.choseEntityTableName.parentName;
        /** @type {?} */
        var tableId = this.choseEntityTableName.id;
        /** @type {?} */
        var tableName = this.choseEntityTableName.name;
        /** @type {?} */
        var schemaItem;
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            //统一Schema
            this.columns = [{ field: 'code', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.newSchemaMap.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                var entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                function (entitytype) { return (entitytype.code == tableName) || (entitytype.code == ""); }));
                if (!entityType) {
                    /** @type {?} */
                    var entitySet_1 = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    function (entityset) { return entityset.code == tableName; }));
                    if (entitySet_1) {
                        entityType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        function (entitytype) { return entitytype.code == entitySet_1.entityType; }));
                    }
                }
                this.items = tslib_1.__spread(entityType.properties);
                entityType.navigationProperties.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var property = new NewProperty;
                    property.code = item.code;
                    property.name = "";
                    property.dataType = item.navigationType.toString();
                    property.nullable = false;
                    property.defaultValue = null;
                    _this.items.push(property);
                    _this.items = Array.from(_this.items);
                }));
                this.selectString = parentName + "." + entityType.name;
            }
        }
        else {
            //旧的Schema
            this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.schema.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                var entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                function (entitytype) { return (entitytype.id == tableId && entitytype.name == tableName) || (entitytype.id == "" && entitytype.name == tableName); }));
                if (entityType) {
                    this.items = tslib_1.__spread(entityType.properties);
                    entityType.navigationProperties.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        /** @type {?} */
                        var property = new Property;
                        property.name = item.name;
                        property.type = item.type.toString();
                        property.description = item.description;
                        _this.items.push(property);
                    }));
                    this.selectString = parentName + "." + entityType.name;
                }
                else {
                    /** @type {?} */
                    var entitySet_2 = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    function (entityset) { return entityset.name == tableName; }));
                    if (entitySet_2) {
                        /** @type {?} */
                        var eType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        function (entitytype) { return entitytype.name == entitySet_2.entityType; }));
                        this.items = tslib_1.__spread(eType.properties);
                        eType.navigationProperties.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            /** @type {?} */
                            var property = new Property;
                            property.name = item.name;
                            property.type = item.type.toString();
                            property.description = item.description;
                            _this.items.push(property);
                        }));
                        this.selectString = parentName + "." + entitySet_2.name + ".[0]";
                    }
                }
            }
        }
    };
    //数据：子组件双击插入              (farris双击事件，调整)
    //数据：子组件双击插入              (farris双击事件，调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.ondblclickRow = 
    //数据：子组件双击插入              (farris双击事件，调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        //this.dbclickInsert.emit(this.selectString+"."+$event.rowData.name);
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.code);
        }
        else if (this.schema && this.schema.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.name);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityInfoGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectSchemaRow.emit($event.data);
    };
    ExpressionEntityInfoGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-entity-info-grid',
                    template: "<farris-datagrid\r\n[idField]=\"'name'\"\r\n[height]=\"268\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n[enableFilterRow]=\"true\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionEntityInfoGridComponent.ctorParameters = function () { return []; };
    ExpressionEntityInfoGridComponent.propDecorators = {
        schema: [{ type: Input }],
        newSchemaMap: [{ type: Input }],
        choseEntityTableName: [{ type: Input }],
        selectSchemaRow: [{ type: Output }],
        dbclickInsert: [{ type: Output }]
    };
    return ExpressionEntityInfoGridComponent;
}());
export { ExpressionEntityInfoGridComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionEntityInfoGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionEntityInfoGridComponent.prototype.localePipe;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.schema;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.newSchemaMap;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.choseEntityTableName;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.selectSchemaRow;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.selectString;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.items;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.columns;
}
//# sourceMappingURL=data:application/json;base64,