/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ApplicationRef, ComponentFactoryResolver } from '@angular/core';
import { ComputeRuleComponent } from './compute-rule/compute-rule.component';
import { BsModalService } from '@farris/ui-modal';
import { ExprEditMode } from './expression-type';
import { ExpressioneditorComponent } from './expressioneditor/expressioneditor.component';
import { ExpressionContextEntity } from './expression-context-entity';
import { Adapter } from './adapter';
import { Schema, EntitySet } from './schema';
import { InjectedEntity } from './injected-entity';
import { InjectedType } from './injected-type';
import InputStream from 'antlr4/InputStream';
import CommonTokenStream from 'antlr4/CommonTokenStream';
import JavaScriptLexer from 'JavaScriptLexer';
import { HttpClient } from "@angular/common/http";
import { FunctionI18nResources } from './i18n/FunctionI18nResource';
import { ExpressionEditorLocalePipe } from './expression-editor-locale.pipe';
import { NewEntitySet, NewSchema } from './i18n/NewSchema';
/**
 * 表达式对外提供服务类
 * 功能：提供打开、预置等接口
 */
var ExpressionService = /** @class */ (function () {
    function ExpressionService(injector, applicationRef, compFactRes, http) {
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.compFactRes = compFactRes;
        this.http = http;
        this.exprEditMode = ExprEditMode.Advanced;
        this.simpleModalConfig = {
            title: "条件表达式",
            width: 750,
            height: 350,
            showButtons: false
        };
        this.exprEntity = new ExpressionContextEntity();
        this.adapter = new Adapter();
        //定义语义化资源
        this.allFunctions = []; //所有函数，包含不规范
        this.modalService = injector.get(BsModalService);
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        //初始化i18n函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        //初始化titile,save,cancel
        this.ExpressionTitle = this.localePipe.transform("ExpressionTitle");
        this.ExpressionSave = this.localePipe.transform("ExpressionSave");
        this.ExpressionCancel = this.localePipe.transform("ExpressionCancel");
    }
    /**
      * 创建表达式
      * 功能：打开表达式窗口，then方法获得表达式结果
      */
    /**
     * 创建表达式
     * 功能：打开表达式窗口，then方法获得表达式结果
     * @return {?}
     */
    ExpressionService.prototype.buildExpression = /**
     * 创建表达式
     * 功能：打开表达式窗口，then方法获得表达式结果
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            if (that.exprEditMode == ExprEditMode.Conditional) {
                if ((that.exprEntity.expr != null && that.exprEntity.expr != "") && (that.exprEntity.sexpr == null || that.exprEntity.sexpr == "")) {
                    /** @type {?} */
                    var compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
                    /** @type {?} */
                    var compRef_1 = compFactory.create(that.injector);
                    compRef_1.instance.expressionEntity = that.exprEntity;
                    /** @type {?} */
                    var dialog_1 = that.modalService.show(compRef_1, {
                        title: that.ExpressionTitle,
                        width: 1060,
                        height: 610,
                        buttons: [
                            {
                                text: that.ExpressionSave, cls: 'btn btn-primary', handle: (/**
                                 * @return {?}
                                 */
                                function () {
                                    compRef_1.instance.getExprs();
                                    dialog_1.close();
                                })
                            },
                            {
                                text: that.ExpressionCancel, cls: 'btn btn-secondary', handle: (/**
                                 * @return {?}
                                 */
                                function () {
                                    dialog_1.close();
                                })
                            }
                        ],
                        showButtons: true
                    });
                    compRef_1.instance.result.subscribe((/**
                     * @param {?} expressionContent
                     * @return {?}
                     */
                    function (expressionContent) {
                        return resolve(expressionContent);
                    }));
                }
                else {
                    /** @type {?} */
                    var compFactory = that.compFactRes.resolveComponentFactory(ComputeRuleComponent);
                    /** @type {?} */
                    var compRef = compFactory.create(that.injector);
                    compRef.instance.contextEntity = that.exprEntity;
                    /** @type {?} */
                    var dialog_2 = that.modalService.show(compRef, that.simpleModalConfig);
                    compRef.instance.closeModalEmitter.subscribe((/**
                     * @param {?} $event
                     * @return {?}
                     */
                    function ($event) { return dialog_2.close(); }));
                    compRef.instance.result.subscribe((/**
                     * @param {?} expressionContent
                     * @return {?}
                     */
                    function (expressionContent) {
                        return resolve(expressionContent);
                    }));
                }
            }
            else {
                /** @type {?} */
                var compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
                /** @type {?} */
                var compRef_2 = compFactory.create(that.injector);
                compRef_2.instance.expressionEntity = that.exprEntity;
                /** @type {?} */
                var dialog_3 = that.modalService.show(compRef_2, {
                    title: that.ExpressionTitle,
                    width: 1060,
                    height: 610,
                    buttons: [
                        {
                            text: that.ExpressionSave, cls: 'btn btn-primary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                compRef_2.instance.getExprs();
                                dialog_3.close();
                            })
                        },
                        {
                            text: that.ExpressionCancel, cls: 'btn btn-secondary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                dialog_3.close();
                            })
                        }
                    ],
                    showButtons: true
                });
                compRef_2.instance.result.subscribe((/**
                 * @param {?} expressionContent
                 * @return {?}
                 */
                function (expressionContent) {
                    return resolve(expressionContent);
                }));
            }
        }));
    };
    /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     */
    /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     * @param {?} exprEditMode
     * @return {?}
     */
    ExpressionService.prototype.setEditPattern = /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     * @param {?} exprEditMode
     * @return {?}
     */
    function (exprEditMode) {
        this.exprEditMode = exprEditMode;
    };
    /**
     * 添加上下文变量方法
     * @param contextEntity 上下文变量实体
     */
    /**
     * 添加上下文变量方法
     * @param {?} contextEntity 上下文变量实体
     * @return {?}
     */
    ExpressionService.prototype.addContext = /**
     * 添加上下文变量方法
     * @param {?} contextEntity 上下文变量实体
     * @return {?}
     */
    function (contextEntity) {
        this.exprEntity.contextEntities = this.exprEntity.contextEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.key !== contextEntity.key; }));
        this.exprEntity.contextEntities.push(contextEntity);
    };
    /**
     * 添加系统变量方法
     * @param sessionEntity 系统变量实体
     */
    /**
     * 添加系统变量方法
     * @param {?} sessionEntity 系统变量实体
     * @return {?}
     */
    ExpressionService.prototype.addSession = /**
     * 添加系统变量方法
     * @param {?} sessionEntity 系统变量实体
     * @return {?}
     */
    function (sessionEntity) {
        this.exprEntity.sessionEntities = this.exprEntity.sessionEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.key !== sessionEntity.key; }));
        this.exprEntity.sessionEntities.push(sessionEntity);
    };
    /**
     * 添加函数方法
     * @param funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     */
    /**
     * 添加函数方法
     * @param {?} funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     * @return {?}
     */
    ExpressionService.prototype.addFunc = /**
     * 添加函数方法
     * @param {?} funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     * @return {?}
     */
    function (funcEntity) {
        this.exprEntity.funcEntities = this.exprEntity.funcEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.key !== funcEntity.key; }));
        this.exprEntity.funcEntities.push(funcEntity);
    };
    /***
     * 添加函数列表
     * @param funcList 函数json列表
     */
    /**
     *
     * 添加函数列表
     * @param {?} funcList 函数json列表
     * @return {?}
     */
    ExpressionService.prototype.addFuncs = /**
     *
     * 添加函数列表
     * @param {?} funcList 函数json列表
     * @return {?}
     */
    function (funcList) {
        var _this = this;
        /** @type {?} */
        var funcs = (/** @type {?} */ (JSON.parse(funcList)));
        funcs.funcs.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.exprEntity.funcEntities.push(item);
        }));
    };
    /**
     * 预置表达式
     * @param text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     */
    /**
     * 预置表达式
     * @param {?} text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     * @return {?}
     */
    ExpressionService.prototype.addExpressionText = /**
     * 预置表达式
     * @param {?} text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     * @return {?}
     */
    function (text) {
        try {
            /** @type {?} */
            var textEntity = (/** @type {?} */ (JSON.parse(text)));
            if (!(textEntity)) {
                this.exprEntity.expr = text;
            }
            else if (textEntity.expr) {
                //加载Antlr4工具
                /** @type {?} */
                var inputStream = new InputStream.InputStream(textEntity.expr);
                /** @type {?} */
                var lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
                /** @type {?} */
                var tokens = new CommonTokenStream.CommonTokenStream(lexer);
                tokens.fill();
                //tokens切分的js文本抽取到array中
                /** @type {?} */
                var array = new Array();
                for (var index = 0; index < tokens.tokens.length - 1; index++) {
                    array[index] = tokens.tokens[index].text;
                }
                //遍历array的js文本，每个js文本遍历tokenItems查找对应的语义化文本，封装为str
                /** @type {?} */
                var str = "";
                for (var index = 0; index < array.length; index++) {
                    if (((array[index] == "DefaultFunction") || (array[index] == "Math")) && (array[index + 1] == ".")) {
                        continue;
                    }
                    else if (array[index] == "." && (array[index - 1] == "DefaultFunction" || array[index - 1] == "Math")) {
                        continue;
                    }
                    else {
                        //单个元素计数器
                        /** @type {?} */
                        var num = 0;
                        //遍历上下文变量
                        if (num == 0) {
                            for (var i = 0; i < this.exprEntity.contextEntities.length; i++) {
                                if (array[index] == ("\"" + this.exprEntity.contextEntities[i].key + "\"")) {
                                    str = str + "\"" + this.exprEntity.contextEntities[i].name + "\"";
                                    num = 1;
                                    break;
                                }
                            }
                        }
                        //遍历session变量
                        if (num == 0) {
                            for (var i = 0; i < this.exprEntity.sessionEntities.length; i++) {
                                if (array[index] == ("\"" + this.exprEntity.sessionEntities[i].key + "\"")) {
                                    str = str + "\"" + this.exprEntity.sessionEntities[i].name + "\"";
                                    num = 1;
                                    break;
                                }
                            }
                        }
                        // 遍历数据（暂时先屏蔽）
                        // this.exprEntity.schemaMap.forEach(a=>{
                        //     // for(let j=0;j<a.entitySets[0].length;j++){
                        //     //   if(array[index]==a.entityTypes[0].properties[j].description){
                        //     //     array[index]=a.entityTypes[0].properties[j].name;
                        //     //     break;
                        //     //   }
                        //     // }
                        //     if(array[index]==a.entitySets[0].name){
                        //       array[index]=a.entitySets[0].description;
                        //       str=str+array[index];
                        //       num=1;
                        //     }
                        //     for(let j=0;j<a.entityTypes[0].properties.length;j++){
                        //       if(array[index]==a.entityTypes[0].properties[j].name){
                        //         array[index]=a.entityTypes[0].properties[j].description;
                        //         str=str+array[index];
                        //         num=1;
                        //         break;
                        //       }
                        //     }
                        //   });
                        //计数器num：如果遍历allFunctions没找到对应字段，则直接拼接(num=0)；否则替换(num=1)
                        if (num == 0) {
                            for (var i = 0; i < this.allFunctions.length; i++) {
                                if (array[index] == this.allFunctions[i].key) {
                                    if (this.allFunctions[i].type != "Advanced") {
                                        str = str + this.allFunctions[i].name;
                                        num = 1;
                                        break;
                                    }
                                }
                            }
                        }
                        //如果计数器为0，证明没有语义化匹配。显示原始数据
                        if (num == 0) {
                            str = str + array[index];
                        }
                    }
                }
                this.exprEntity.expr = str;
                if (textEntity.sexpr) {
                    this.exprEntity.sexpr = textEntity.sexpr;
                }
            }
            else {
                this.GetUnCamelParse(textEntity);
                this.exprEntity.expr = textEntity.expr;
                if (textEntity.sexpr) {
                    this.exprEntity.sexpr = textEntity.sexpr;
                }
            }
        }
        catch (_a) {
            this.exprEntity.expr = text;
        }
    };
    /**
     * 预置Schema
     * @param name schema名称
     * @param schema schema实体类
     */
    /**
     * 预置Schema
     * @param {?} name schema名称
     * @param {?} schema schema实体类
     * @return {?}
     */
    ExpressionService.prototype.addSchema = /**
     * 预置Schema
     * @param {?} name schema名称
     * @param {?} schema schema实体类
     * @return {?}
     */
    function (name, schema) {
        if (!name) {
            alert("Please Input Schema Name!");
        }
        else
            this.exprEntity.schemaMap.set(name, schema);
    };
    /**
     * 注入实体
     * @param name 注入实体名,默认为typeNameInSchema
     * @param schemaName 注入实体所在的schema名，默认为CommonObject
     * @param typeNameInSchema 注入实体在schema中的名称
     * @param injectedType 注入实体的类型，默认为EntityType
     */
    /**
     * 注入实体
     * @param {?} name 注入实体名,默认为typeNameInSchema
     * @param {?=} schemaName 注入实体所在的schema名，默认为CommonObject
     * @param {?=} typeNameInSchema 注入实体在schema中的名称
     * @param {?=} injectedType 注入实体的类型，默认为EntityType
     * @return {?}
     */
    ExpressionService.prototype.addInjectedEntity = /**
     * 注入实体
     * @param {?} name 注入实体名,默认为typeNameInSchema
     * @param {?=} schemaName 注入实体所在的schema名，默认为CommonObject
     * @param {?=} typeNameInSchema 注入实体在schema中的名称
     * @param {?=} injectedType 注入实体的类型，默认为EntityType
     * @return {?}
     */
    function (name, schemaName, typeNameInSchema, injectedType) {
        if (schemaName === void 0) { schemaName = "CommonObject"; }
        if (injectedType === void 0) { injectedType = InjectedType.EntityType; }
        //构造注入实体对象
        /** @type {?} */
        var injectedEntity = new InjectedEntity();
        //若注入的实体名为空，则默认为注入实体在schema中的名称
        injectedEntity.name = name ? name : typeNameInSchema;
        injectedEntity.schemaName = schemaName;
        injectedEntity.injectedName = typeNameInSchema;
        injectedEntity.injectedType = injectedType;
        this.exprEntity.injectedEntities = this.exprEntity.injectedEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.name !== injectedEntity.name; }));
        this.exprEntity.injectedEntities.push(injectedEntity);
    };
    /**
     * 预置CDT
     * @param gspCDTs CDT集合
     */
    /**
     * 预置CDT
     * @param {?} gspCDTs CDT集合
     * @return {?}
     */
    ExpressionService.prototype.addCDT = /**
     * 预置CDT
     * @param {?} gspCDTs CDT集合
     * @return {?}
     */
    function (gspCDTs) {
        var _this = this;
        /** @type {?} */
        var schema = new Schema();
        //若schemaMap中存在CDT的schema
        if (this.exprEntity.schemaMap.get("CDT")) {
            schema = this.exprEntity.schemaMap.get("CDT");
        }
        //将每一个CDT转化为schema内部结构中的entityType
        gspCDTs.forEach((/**
         * @param {?} gspCDT
         * @return {?}
         */
        function (gspCDT) {
            /** @type {?} */
            var entityType = _this.adapter.convertCDT(gspCDT);
            schema.entityTypes.push(entityType);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addSchema("CDT", schema);
    };
    /**
     * 预置CO
     * @param commonObject CO集合(todo)
     */
    /**
     * 预置CO
     * @param {?} commonObject CO集合(todo)
     * @return {?}
     */
    ExpressionService.prototype.addCommonObject = /**
     * 预置CO
     * @param {?} commonObject CO集合(todo)
     * @return {?}
     */
    function (commonObject) {
        /** @type {?} */
        var schema;
        //若schemaMap中存在CO的schema
        if (this.exprEntity.schemaMap.get("CommonObject")) {
            schema = this.exprEntity.schemaMap.get("CommonObject");
        }
        else
            schema = new Schema;
        //将每一个CO转化为schema内部结构中的entityType
        /** @type {?} */
        var entityTypes = this.adapter.convertCO(commonObject);
        entityTypes.forEach((/**
         * @param {?} entityType
         * @return {?}
         */
        function (entityType) {
            schema.entityTypes.push(entityType);
            /** @type {?} */
            var entitySet = new EntitySet;
            entitySet.name = entityType.name + "s";
            entitySet.entityType = entityType.name;
            entitySet.description = entityType.description;
            schema.entitySets.push(entitySet);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addSchema("CommonObject", schema);
    };
    /**
     * 预置帮助
     * @param shEntity 帮助描述实体
     */
    /**
     * 预置帮助
     * @param {?} shEntity 帮助描述实体
     * @return {?}
     */
    ExpressionService.prototype.addSmartHelpEntity = /**
     * 预置帮助
     * @param {?} shEntity 帮助描述实体
     * @return {?}
     */
    function (shEntity) {
        this.exprEntity.smartHelpEntities = this.exprEntity.smartHelpEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.code !== shEntity.code; }));
        this.exprEntity.smartHelpEntities.push(shEntity);
    };
    /**
     * @param {?} windowWidth
     * @return {?}
     */
    ExpressionService.prototype.addWindowWidth = /**
     * @param {?} windowWidth
     * @return {?}
     */
    function (windowWidth) {
    };
    /**
     * @return {?}
     */
    ExpressionService.prototype.clearInjectedEntity = /**
     * @return {?}
     */
    function () {
        this.exprEntity.injectedEntities = [];
    };
    /**
     * @private
     * @param {?} jsonObj
     * @return {?}
     */
    ExpressionService.prototype.GetUnCamelParse = /**
     * @private
     * @param {?} jsonObj
     * @return {?}
     */
    function (jsonObj) {
        for (var key in jsonObj) {
            if (typeof (jsonObj[key]) === "object") {
                this.GetUnCamelParse(jsonObj[key]);
            }
            /** @type {?} */
            var temp = jsonObj[key];
            delete (jsonObj[key]);
            jsonObj[this.ConvertToUncamel(key)] = temp;
        }
    };
    //字符串反转换Camel
    //字符串反转换Camel
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    ExpressionService.prototype.ConvertToUncamel = 
    //字符串反转换Camel
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (input.length > 0) {
            /** @type {?} */
            var len = input.length;
            /** @type {?} */
            var strTemp = "";
            for (var i = 0; i < len; i++) {
                if (i == 0) {
                    strTemp += input[i].toLowerCase(); //第一个
                }
                else {
                    strTemp += input[i];
                }
            }
            return strTemp;
        }
    };
    /**
     * @description 添加NewSchema
     * @param name NewSchema的名称
     * @param newSchema NewSchema
     */
    /**
     * \@description 添加NewSchema
     * @param {?} name NewSchema的名称
     * @param {?} newSchema NewSchema
     * @return {?}
     */
    ExpressionService.prototype.addNewSchema = /**
     * \@description 添加NewSchema
     * @param {?} name NewSchema的名称
     * @param {?} newSchema NewSchema
     * @return {?}
     */
    function (name, newSchema) {
        if (!name) {
            alert("Please Input NewSchema Name!");
        }
        else
            this.exprEntity.newSchemaMap.set(name, newSchema);
    };
    /**
     * @description 添加CO的数据，NewSchema
     * @param commonObject
     */
    /**
     * \@description 添加CO的数据，NewSchema
     * @param {?} commonObject
     * @return {?}
     */
    ExpressionService.prototype.addCommonObjectOfNewSchema = /**
     * \@description 添加CO的数据，NewSchema
     * @param {?} commonObject
     * @return {?}
     */
    function (commonObject) {
        /** @type {?} */
        var newSchema;
        //若newSchemaMap中存在CO的newSchema
        if (this.exprEntity.newSchemaMap.get("CommonObject")) {
            newSchema = this.exprEntity.newSchemaMap.get("CommonObject");
        }
        else
            newSchema = new NewSchema;
        //将每一个CO转化为schema内部结构中的entityType
        /** @type {?} */
        var entityTypes = this.adapter.convertCOOfNewSchema(commonObject);
        entityTypes.forEach((/**
         * @param {?} entityType
         * @return {?}
         */
        function (entityType) {
            newSchema.entityTypes.push(entityType);
            /** @type {?} */
            var entitySet = new NewEntitySet;
            entitySet.code = entityType.name + "s";
            entitySet.entityType = entityType.code;
            newSchema.entitySets.push(entitySet);
        }));
        //将合并后的newSchema放入内部上下文实体中
        this.addNewSchema("CommonObject", newSchema);
    };
    /**
     * @description 添加UDT类型，NewSchema
     * @param gspCDTs
     */
    /**
     * \@description 添加UDT类型，NewSchema
     * @param {?} gspCDTs
     * @return {?}
     */
    ExpressionService.prototype.addCDTOfNewSchema = /**
     * \@description 添加UDT类型，NewSchema
     * @param {?} gspCDTs
     * @return {?}
     */
    function (gspCDTs) {
        var _this = this;
        /** @type {?} */
        var newSchema = new NewSchema();
        //若schemaMap中存在CDT的schema
        if (this.exprEntity.newSchemaMap.get("CDT")) {
            newSchema = this.exprEntity.newSchemaMap.get("CDT");
        }
        //将每一个CDT转化为schema内部结构中的entityType
        gspCDTs.forEach((/**
         * @param {?} gspCDT
         * @return {?}
         */
        function (gspCDT) {
            /** @type {?} */
            var entityType = _this.adapter.convertCDTOfNewSchema(gspCDT);
            newSchema.entityTypes.push(entityType);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addNewSchema("CDT", newSchema);
    };
    ExpressionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExpressionService.ctorParameters = function () { return [
        { type: Injector },
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: HttpClient }
    ]; };
    return ExpressionService;
}());
export { ExpressionService };
if (false) {
    /** @type {?} */
    ExpressionService.prototype.exprEditMode;
    /** @type {?} */
    ExpressionService.prototype.simpleModalConfig;
    /** @type {?} */
    ExpressionService.prototype.exprEntity;
    /** @type {?} */
    ExpressionService.prototype.adapter;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.modalService;
    /** @type {?} */
    ExpressionService.prototype.allFunctions;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.localePipe;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.ExpressionTitle;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.ExpressionSave;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.ExpressionCancel;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.compFactRes;
    /**
     * @type {?}
     * @private
     */
    ExpressionService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,