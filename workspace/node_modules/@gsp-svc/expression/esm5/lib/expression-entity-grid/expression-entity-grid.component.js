/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { NavigationType } from '../schema';
import { TreeTableComponent } from '@farris/ui-treetable';
import { CurrentNode } from '../currentNode';
import { InjectedType } from '../injected-type';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
import { NewNavigationType } from '../i18n/NewSchema';
import _ from 'lodash';
var ExpressionEntityGridComponent = /** @class */ (function () {
    // data: TreeNode[] = [];
    // temp2: TreeNode;
    // temp3: TreeNode;
    // all: TreeNode[] = [];
    function ExpressionEntityGridComponent() {
        this.currentNode = new CurrentNode;
        this.entities = [];
        this.currentSchemaName = "";
        this.currentNewSchemaName = "";
        this.currentParent = "";
        this.schema = new Map();
        this.newSchemaMap = new Map();
        this.selectentitychange = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.cols = [];
        this.treedata = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.cols = [
            { field: 'name', title: this.localePipe.transform("EntityList") },
            { field: 'description', title: this.localePipe.transform("EntityName") },
            { field: 'type', title: this.localePipe.transform("EntityType"), width: '100' }
        ];
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.onInitNewSchema();
            this.treedata = _.cloneDeep(this.entities);
        }
        else if (this.schema && this.schema.size > 0) {
            this.OninitSchemaEntity();
            this.treedata = _.cloneDeep(this.entities);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.selectRowChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentNode = new CurrentNode;
        this.currentNode.id = $event.node.data.id;
        this.currentNode.name = $event.node.data.name;
        this.currentNode.parentName = this.selectParentString($event.node);
        this.currentParent = this.selectParentString($event.node);
        this.currentNode.schema = $event.node.data.schema;
        this.currentNode.nodeType = $event.node.data.nodeType;
        this.currentNode.description = $event.node.data.description;
        this.selectentitychange.emit(this.currentNode);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.dblClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.currentParent) {
            this.dbclickInsert.emit(this.currentParent + "." + $event.data.name);
        }
        else {
            this.dbclickInsert.emit($event.data.name);
        }
    };
    /**
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.onInitNewSchema();
            this.treedata = _.cloneDeep(this.entities);
            // this.treedata = this.entities;
            // this.treedata = [...this.treedata];
        }
        else if (this.schema && this.schema.size > 0) {
            this.OninitSchemaEntity();
            this.treedata = _.cloneDeep(this.entities);
            // this.treedata = this.entities;
            // this.treedata = [...this.treedata];
        }
    };
    //递归父节点名
    //递归父节点名
    /**
     * @param {?} node
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.selectParentString = 
    //递归父节点名
    /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.parent) {
            if (this.selectParentString(node.parent)) {
                if (this.strContain(node.parent.data.type))
                    return this.selectParentString(node.parent) + "." + node.parent.data.name + "[0]";
                else
                    return this.selectParentString(node.parent) + "." + node.parent.data.name;
            }
            else if (this.strContain(node.parent.data.type)) {
                return node.parent.data.name + "[0]";
            }
            else {
                return node.parent.data.name;
            }
        }
        else {
            return "";
        }
    };
    //初始化Schema格式的Entity
    //初始化Schema格式的Entity
    /**
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.OninitSchemaEntity = 
    //初始化Schema格式的Entity
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.injectedEntities && this.injectedEntities.length > 0) {
            this.entities = [];
            /** @type {?} */
            var entityTree_1 = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "type": "",
                    "description": "",
                    "schema": "",
                    "nodeType": ""
                },
                children: []
            };
            //实体显示禁忌表
            /** @type {?} */
            var navigatorMap_1 = new Map();
            //解析每一个注入实体，将其转化为TreeNode
            this.injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            function (injectEntity) {
                //根据schema名称找到对应的schema
                /** @type {?} */
                var currentSchema = _this.schema.get(injectEntity.schemaName);
                _this.currentSchemaName = injectEntity.schemaName;
                switch (injectEntity.injectedType) {
                    //注入的若为实体集
                    case InjectedType.EntitySet:
                        {
                            //根据注入实体的名称找到对应的实体集
                            /** @type {?} */
                            var entitySet = currentSchema.entitySets.find((/**
                             * @param {?} entitySet
                             * @return {?}
                             */
                            function (entitySet) { return entitySet.name == injectEntity.injectedName; }));
                            //将找到的实体集转化为TreeNode
                            entityTree_1 = _this.ConvertEntitySet(entitySet, currentSchema, navigatorMap_1);
                        }
                        ;
                        break;
                    //注入的若为实体类型
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            var entityType = currentSchema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            function (entityType) { return entityType.name == injectEntity.injectedName; }));
                            //将实体类型名称改为自定义名称
                            //entityType.name = injectEntity.name;
                            //将找到的实体类型转化为TreeNode
                            entityTree_1 = _this.ConvertEntityType(entityType, currentSchema, navigatorMap_1);
                        }
                        ;
                        break;
                }
                entityTree_1.data.name = injectEntity.name;
                //将每个预置对象转化后的TreeNode
                _this.entities.push(entityTree_1);
            }));
        }
    };
    //实体集转化
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ConvertEntitySet = 
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    function (entitySet, schema, navigatorMap) {
        if (entitySet) {
            //将entityset转化为TreeNode结构用于展示
            /** @type {?} */
            var treeNode_1 = {
                data: {
                    "id": "",
                    "name": entitySet.name,
                    "type": "EntitySet" + "[" + entitySet.entityType + "]",
                    "description": entitySet.description,
                    "schema": this.currentSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化完成的实体集添加进禁忌表，防止循环转化
            navigatorMap.set(entitySet.name, InjectedType.EntitySet);
            //找到实体集对应的实体类型
            /** @type {?} */
            var entityType = schema.entityTypes.find((/**
             * @param {?} entityType
             * @return {?}
             */
            function (entityType) { return entityType.name == entitySet.entityType; }));
            //将entitytype转化为TreeNode结构用于展示
            this.ConvertEntityType(entityType, schema, navigatorMap).children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                treeNode_1.children.push(child);
            }));
            return treeNode_1;
        }
        //实体集为空或未定义则返回空
        else
            return null;
    };
    //实体类型转化
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.ConvertEntityType = 
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    function (entityType, schema, navigatorMap) {
        var _this = this;
        if (entityType) {
            /** @type {?} */
            var treeNode_2 = {
                data: {
                    "id": entityType.id,
                    "name": entityType.name,
                    "type": "EntityType",
                    "description": entityType.description,
                    "schema": this.currentSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化的entitytype添加进禁忌表
            navigatorMap.set(entityType.name + entityType.id, InjectedType.EntityType);
            //将每个属性转化为每个TreeNode
            entityType.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            function (property) {
                /** @type {?} */
                var propertyTree = {
                    data: {
                        "id": Math.random(),
                        "name": "",
                        "type": property.type,
                        "description": property.description,
                        "schema": _this.currentSchemaName,
                        "nodeType": "Simple"
                    },
                    children: []
                };
                //根据条件判断该属性是否为主键
                if (property.name == entityType.key) {
                    propertyTree.data.name = property.name + "*";
                }
                else {
                    propertyTree.data.name = property.name;
                }
                propertyTree.parent = treeNode_2;
                treeNode_2.children.push(propertyTree);
            }));
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            function (navigationProperty) {
                //判断是否导航属性对应的名称不在禁忌表中
                if (!(navigatorMap.get(navigationProperty.name + navigationProperty.navigationId))) {
                    if (navigationProperty.type == NavigationType.EntitySet) {
                        //若导航属性类型为实体集
                        /** @type {?} */
                        var entitySet = schema.entitySets.find((/**
                         * @param {?} entitySet
                         * @return {?}
                         */
                        function (entitySet) { return entitySet.name == navigationProperty.name; }));
                        /** @type {?} */
                        var a = _this.ConvertEntitySet(entitySet, schema, navigatorMap);
                        a.parent = treeNode_2;
                        treeNode_2.children.push(a);
                    } //若为实体类型
                    else if (navigationProperty.type == NavigationType.EntityType) {
                        /** @type {?} */
                        var entityType_1 = schema.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        function (entitytype) { return entitytype.id == navigationProperty.navigationId && entitytype.name == navigationProperty.name; }));
                        /** @type {?} */
                        var a = _this.ConvertEntityType(entityType_1, schema, navigatorMap);
                        a.parent = treeNode_2;
                        treeNode_2.children.push(a);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    var navigatortree = {
                        data: {
                            "id": navigationProperty.navigationId,
                            "name": navigationProperty.name,
                            "type": "",
                            "description": navigationProperty.description,
                            "schema": _this.currentSchemaName,
                            "nodeType": "Complex"
                        },
                        children: [],
                    };
                    switch (navigatorMap.get(navigationProperty.name)) {
                        case NavigationType.EntitySet:
                            navigatortree.data.type = "EntitySet";
                            break;
                        case NavigationType.EntityType:
                            navigatortree.data.type = "EntityType";
                            break;
                    }
                    navigatortree.parent = treeNode_2;
                    treeNode_2.children.push(navigatortree);
                }
            }));
            return treeNode_2;
        }
        //若entitytype为空或未定义
        else
            return null;
    };
    /**
     * @private
     * @param {?} strr
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.strContain = /**
     * @private
     * @param {?} strr
     * @return {?}
     */
    function (strr) {
        /** @type {?} */
        var temp = strr + "";
        if (temp.indexOf("EntitySet") != -1)
            return true;
        else
            return false;
    };
    //===========分割线==========NewSchema===============
    /**
     * @description 初始化NewSchema
     */
    //===========分割线==========NewSchema===============
    /**
     * \@description 初始化NewSchema
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.onInitNewSchema = 
    //===========分割线==========NewSchema===============
    /**
     * \@description 初始化NewSchema
     * @return {?}
     */
    function () {
        var _this = this;
        //注入实体存在且有值
        if (this.injectedEntities && this.injectedEntities.length > 0) {
            //初始化：entities(页面显示内容);rootNode(跟节点);navigatorMap1(禁忌列表)
            this.entities = [];
            /** @type {?} */
            var rootNode_1 = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "description": "",
                    "type": "",
                    "schema": "",
                    "nodeType": ""
                },
                children: []
            };
            /** @type {?} */
            var navigatorMap1_1 = new Map();
            //根据注入实体的schemaName找到对应的rootSchema
            this.injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            function (injectEntity) {
                /** @type {?} */
                var rootSchema = _this.newSchemaMap.get(injectEntity.schemaName);
                _this.currentNewSchemaName = injectEntity.schemaName;
                //根据注入实体类型--->执行不同方法
                switch (injectEntity.injectedType) {
                    case InjectedType.EntitySet:
                        {
                            /** @type {?} */
                            var entitySet = rootSchema.entitySets.find((/**
                             * @param {?} set
                             * @return {?}
                             */
                            function (set) { return set.code == injectEntity.injectedName; }));
                            rootNode_1 = _this.convertNewEntitySet(entitySet, rootSchema, navigatorMap1_1);
                        }
                        ;
                        break;
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            var entityType = rootSchema.entityTypes.find((/**
                             * @param {?} type
                             * @return {?}
                             */
                            function (type) { return type.code == injectEntity.injectedName; }));
                            rootNode_1 = _this.convertNewEntityType(entityType, rootSchema, navigatorMap1_1);
                        }
                        ;
                        break;
                }
                rootNode_1.data.name = injectEntity.name;
                _this.entities.push(rootNode_1);
            }));
        }
    };
    /**
     * @description 转换实体类型(EntityType)
     * @param entityType
     * @param schema
     * @param navigatorMap1
     * @returns
     */
    /**
     * \@description 转换实体类型(EntityType)
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.convertNewEntityType = /**
     * \@description 转换实体类型(EntityType)
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    function (entityType, schema, navigatorMap1) {
        var _this = this;
        if (entityType) {
            //初始化：NewEntityType的节点
            /** @type {?} */
            var treeNode_3 = {
                data: {
                    "id": entityType.code,
                    "name": entityType.code,
                    "description": entityType.name,
                    "type": "EntityType",
                    "schema": this.currentNewSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //pro
            navigatorMap1.set(entityType.name + entityType.code, InjectedType.EntityType);
            entityType.properties.forEach((/**
             * @param {?} pro
             * @return {?}
             */
            function (pro) {
                /** @type {?} */
                var proNode = {
                    data: {
                        "id": Math.random(),
                        "name": pro.code,
                        "description": pro.name,
                        "type": pro.dataType,
                        "schema": _this.currentNewSchemaName,
                        "nodeType": "Simple"
                    },
                    children: []
                };
                proNode.parent = treeNode_3;
                treeNode_3.children.push(proNode);
            }));
            //naPro
            entityType.navigationProperties.forEach((/**
             * @param {?} naPro
             * @return {?}
             */
            function (naPro) {
                //判断是否导航属性对应的名称在禁忌表中
                if (!(navigatorMap1.get(naPro.navigationName + naPro.code))) {
                    if (naPro.navigationType == NewNavigationType.EntityType) {
                        /** @type {?} */
                        var entityType_2 = schema.entityTypes.find((/**
                         * @param {?} type1
                         * @return {?}
                         */
                        function (type1) { return type1.code == naPro.navigationName; }));
                        /** @type {?} */
                        var a = _this.convertNewEntityType(entityType_2, schema, navigatorMap1);
                        a.parent = treeNode_3;
                        treeNode_3.children.push(a);
                    }
                    else if (naPro.navigationType == NewNavigationType.EntitySet) {
                        /** @type {?} */
                        var entitySet = schema.entitySets.find((/**
                         * @param {?} set1
                         * @return {?}
                         */
                        function (set1) { return set1.code == naPro.navigationName; }));
                        /** @type {?} */
                        var a = _this.convertNewEntitySet(entitySet, schema, navigatorMap1);
                        a.parent = treeNode_3;
                        treeNode_3.children.push(a);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    var naProNode = {
                        data: {
                            "id": naPro.navigationName,
                            "name": naPro.code,
                            "description": naPro.name,
                            "type": "",
                            "schema": _this.currentNewSchemaName,
                            "nodeType": "Complex"
                        },
                        children: [],
                    };
                    switch (navigatorMap1.get(naPro.navigationName)) {
                        case NewNavigationType.EntitySet:
                            naProNode.data.type = "EntitySet";
                            break;
                        case NewNavigationType.EntityType:
                            naProNode.data.type = "EntityType";
                            break;
                    }
                    naProNode.parent = treeNode_3,
                        treeNode_3.children.push(naProNode);
                }
            }));
            return treeNode_3;
        }
        return null;
    };
    /**
     * @description 转换实体集(EntitySet)
     * @param set
     * @param schema
     * @param navigatorMap1
     * @returns
     */
    /**
     * \@description 转换实体集(EntitySet)
     * @param {?} set
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.convertNewEntitySet = /**
     * \@description 转换实体集(EntitySet)
     * @param {?} set
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    function (set, schema, navigatorMap1) {
        if (set) {
            //将entityset转化为TreeNode结构用于展示
            /** @type {?} */
            var treeNode_4 = {
                data: {
                    "id": Math.random(),
                    "name": set.code,
                    "description": set.name,
                    "type": "EntitySet" + "[" + set.code + "]",
                    "schema": this.currentNewSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化完成的实体集添加进禁忌表，防止循环转化
            navigatorMap1.set(set.name, InjectedType.EntitySet);
            //找到实体集对应的实体类型
            /** @type {?} */
            var entityType = schema.entityTypes.find((/**
             * @param {?} entityType
             * @return {?}
             */
            function (entityType) { return entityType.code == set.entityType; }));
            //将entitytype转化为TreeNode结构用于展示
            this.convertNewEntityType(entityType, schema, navigatorMap1).children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                treeNode_4.children.push(child);
            }));
            return treeNode_4;
        }
        //实体集为空或未定义则返回空
        else
            return null;
    };
    //顶级过滤
    //顶级过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.searchByFilter = 
    //顶级过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        //存在过滤值&&treedata有值
        if ($event.value && $event.value != "" && this.treedata) {
            //children元素深度遍历
            for (var i = 0; i < this.treedata.length; i++) {
                this.searchByFilter1($event.value, this.treedata[i]);
            }
            //过滤undefined
            for (var i = 0; i < this.treedata.length; i++) {
                this.filter1(this.treedata[i]);
            }
        }
    };
    //children元素过滤$event.value
    //children元素过滤$event.value
    /**
     * @param {?} searchValue
     * @param {?} node
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.searchByFilter1 = 
    //children元素过滤$event.value
    /**
     * @param {?} searchValue
     * @param {?} node
     * @return {?}
     */
    function (searchValue, node) {
        if (node.children && node.children.length > 0) {
            for (var i = 0; i < node.children.length; i++) {
                this.searchByFilter1(searchValue, node.children[i]);
            }
        }
        else if (node.children.length == 0) {
            if (node.data.description.indexOf(searchValue) == -1) {
                //indexOf返回指定字符在字符串中第一次出现的位置
                //-1代表没有出现
                /** @type {?} */
                var temp = -1;
                if (node.parent != null) {
                    for (var ii = 0; ii < node.parent.children.length; ii++) {
                        if (node.parent.children[ii] && node.parent.children[ii].data.description == node.data.description) {
                            temp = ii;
                            delete node.parent.children[temp];
                            break;
                        }
                    }
                }
            }
        }
    };
    //去除undefinde元素
    //去除undefinde元素
    /**
     * @param {?} node
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.filter1 = 
    //去除undefinde元素
    /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.children && node.children.length > 0) {
            /** @type {?} */
            var b = node.children.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item != undefined; }));
            node.children = b;
            for (var i = 0; i < node.children.length; i++) {
                if (node.children[i].children && node.children[i].children.length > 0) {
                    this.filter1(node.children[i]);
                }
            }
        }
        else if (node.children.length == 0) {
        }
    };
    //过滤
    //过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    ExpressionEntityGridComponent.prototype.filter = 
    //过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        //开始过滤
        // this.searchByFilter($event);
        // this.searchByFilter($event);
        this.tt.searchHandle.search('description', $event.value, 'client');
    };
    ExpressionEntityGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-entity-grid',
                    template: "<farris-treetable #tt \r\n[data]=\"treedata\"\r\n[fit]=\"true\" \r\n[fitColumns]=\"true\"\r\n[fixedHeader]=\"true\"\r\n[columns]=\"cols\" \r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[showFilterBar]=\"true\"\r\n[resizableColumns]=\"true\"\r\n[showHeader]=\"true\"\r\n[enableFindText]=\"true\"\r\n[virtualized]=\"false\"\r\n(dblClick)=\"dblClick($event)\"\r\n(cellClick)=\"selectRowChange($event)\"\r\n(search)=\"filter($event)\"\r\n>\r\n</farris-treetable>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionEntityGridComponent.ctorParameters = function () { return []; };
    ExpressionEntityGridComponent.propDecorators = {
        schema: [{ type: Input }],
        newSchemaMap: [{ type: Input }],
        injectedEntities: [{ type: Input }],
        selectentitychange: [{ type: Output }],
        dbclickInsert: [{ type: Output }],
        tt: [{ type: ViewChild, args: ['tt',] }]
    };
    return ExpressionEntityGridComponent;
}());
export { ExpressionEntityGridComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionEntityGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionEntityGridComponent.prototype.localePipe;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.currentNode;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.entities;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.currentSchemaName;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.currentNewSchemaName;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.currentParent;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.schema;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.newSchemaMap;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.injectedEntities;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.selectentitychange;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.tt;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.cols;
    /** @type {?} */
    ExpressionEntityGridComponent.prototype.treedata;
}
//# sourceMappingURL=data:application/json;base64,