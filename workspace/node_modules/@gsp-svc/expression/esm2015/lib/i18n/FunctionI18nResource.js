/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export const FunctionI18nResources = {
    "zh-CHS": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : 判断条件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : 判断条件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for循环",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "返回操作",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "变量定义",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "正确",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "错误",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "长度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中检索子字符串，子字符串从指定的字符位置开始且具有指定的长度\n【original】：源字符串\n【start】：起始位置(从0开始)\n【length】：长度\n【返回值类型】：字符串(System.String)\n【示例】：StringSubstring("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "长度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中检索子字符串，子字符串从指定的字符位置开始且具有指定的长度\n【original】：源字符串\n【start】：起始位置(从0开始)\n【length】：长度\n【返回值类型】：字符串(System.String)\n【示例】：SubString("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定字符串的长度\n【original】：源字符串\n【返回值类型】：数值(System.Int32)\n【示例】：StringLength("语义化表达式")\n【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定字符串的长度\n【original】：源字符串\n【返回值类型】：数值(System.Int32)\n【示例】：Length("语义化表达式")\n【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "是否包含",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断源字符串中是否包含目标字符串\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：System.Boolean\n【示例】：Contains(salesorder.code,"表达式")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "开头是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断源字符串是否以目标字符串开头\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：System.Boolean\n【示例】：StartsWith(salesorder.code,"子单位")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "结尾是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断源字符串是否以目标字符串结尾\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：System.Boolean\n【示例】：EndsWith(salesorder.code,\"子单位\")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串中的"被替换值"替换为"替换值"\n【original】：源字符串\n【oldValue】：被替换值\n【newValue】：替换值\n【返回值类型】：字符串(System.String)\n【示例】：StringReplace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串中的"被替换值"替换为"替换值"\n【original】：源字符串\n【oldValue】：被替换值\n【newValue】：替换值\n【返回值类型】：字符串(System.String)\n【示例】：Replace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为大写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为大写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：ToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为小写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为小写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：ToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到第一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：StringIndexOf("12001234012","01")\n【返回值】：3\n【示例】：StringIndexOf("12002323","34")\n【返回值】：-1\n【示例】：StringIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到第一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：IndexOf("12001234012","01")\n【返回值】：3\n【示例】：IndexOf("12002323","34")\n【返回值】：-1\n【示例】：IndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到最后一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【value】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：StringLastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：StringLastIndexOf("12002323","34")\n【返回值】：-1\n【示例】：StringLastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到最后一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【value】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：LastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：LastIndexOf("12002323","34")\n【返回值】：-1\n【示例】：LastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringTrimStart("    ABC")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：TrimStart("    ABC")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringTrimEnd("ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：TrimEnd("ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringTrim("    ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：Trim("    ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "唯一标识符",
            "params": [],
            "description": `【功能】：获取唯一标识符Guid\n【返回值类型】：字符串(System.String)\n【示例】：CreateGuid()\n【返回值】："7722A793-14DF-49CD-B7E7-DF4987YYD2"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将若干字符串拼接成一个新字符串，最多支持10个字符串拼接，最少2个；编辑器中默认插入两个，多个字符串可手动添加\n【返回值类型】：字符串(System.String)\n【示例】：StringAdd("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将若干字符串拼接成一个新字符串，最多支持10个字符串拼接，最少2个；编辑器中默认插入两个，多个字符串可手动添加\n【返回值类型】：字符串(System.String)\n【示例】：Add("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "按属性求和",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一属性的和\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名;\n【返回值类型】：数值(System.Double)\n【示例】：SumByProp("Order.OrderItems","Quantity")"`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "列行数",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计指定字段所在表的记录数\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如：Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Int32);\n【示例】：CountByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "列平均值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一数值列的平均值\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Double)\n【示例】：AvgByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "列最大值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一数值列的最大值\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Double)\n【示例】：MaxByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "列最小值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一数值列的最小值\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Double)\n【示例】：MinByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "是空值",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判断指定的对象是否为空值(null)\n【obj】：要检测的对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNull("语义化表达式")\n【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "是空串",
            "params": [
                {
                    "key": "obj",
                    "name": "待判断字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断指定的字符串是否为null、空还是仅有空格组成\n【obj】：要判断的字符串\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNullOrWhiteSpace("语义化表达式")\n【返回值】：False\n【示例】：IsNullOrWhiteSpace(null)\n【返回值】：True\n【示例】：\nIsNullOrWhiteSpace(" ")【返回值】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "非数字",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判断指定的对象是否可以转换成数字(System.Double)\n【obj】：要检测的对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNaN("语义化表达式")【返回值】：True\n【示例】：IsNaN(12.3)【返回值】：False\n【示例】：\nIsNaN("123")【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "是数字",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判断指定的对象是否可以转换成数字(System.Double)\n【obj】：要检测的对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNumber(\"语义化表达式\")【返回值】：False\n【示例】：IsNumber(12.3)【返回值】：True\n【示例】：\nIsNumber("123")【返回值】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "有无等于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在等于匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：IsExistRecord("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "有无大于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在大于匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListGreaterThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "有无小于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在小于匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListLessThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "有无开头是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在开头是匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListStartWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "有无结尾是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在结尾是匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListEndWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "增加指定天数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加天数",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期时间上增加指定的天数\n【date】：日期时间\n【value】：增加天数\n【返回值类型】：日期时间(System.DateTime)\n【示例】：DateTimeAddDays("2019-01-30T10:00:00+08:00",2)\n【返回值】:2019-02-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "增加指定年数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加年数",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期时间上增加指定的年数\n【date】：日期时间\n【value】：增加年数\n【返回值类型】：日期时间(System.DateTime)\n【示例】：DateTimeAddYears("2019-01-30T10:00:00+08:00",2)\n【返回值】:2021-01-30T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "增加指定月数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加月数",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期时间上增加指定的月数\n【date】：日期时间\n【value】：增加月数\n【返回值类型】：日期时间(System.DateTime)\n【示例】：DateTimeAddMonths("2019-01-30T10:00:00+08:00",1)\n【返回值】:2019-02-28T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "获取指定日期时间所在月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定日期时间值所在月的第一天的日期\n【date】：日期时间\n【返回值类型】：日期时间(System.DateTime)\n【示例】：GetFirstDayOfMonth("2019-01-30T10:00:00+08:00")\n【返回值】:2019-01-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "获取指定日期时间所在月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定日期时间值所在月的最后一天的日期\n【date】：日期时间\n【返回值类型】：日期时间(System.DateTime)\n【示例】：GetLastDayOfMonth("2019-01-30T10:00:00+08:00")\n【返回值】:2019-01-31T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "获取当前日期时间",
            "params": [],
            "description": `【功能】：获取当前的日期时间\n【返回值类型】：日期时间(System.DateTime)\n【示例】：GetDateTimeNow()\n【返回值】:2019-01-30T12:00:00.000+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "比较两个时间",
            "params": [
                {
                    "key": "str1",
                    "name": "日期时间1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "日期时间2",
                    "type": "string"
                }
            ],
            "description": `【功能】：比较两个时间值，并返回一个值，此值表示第一个时间是早于、等于还是晚于第二个时间的整数\n【str1】：日期时间1\n【str2】：日期时间2\n【返回值类型】：数值(System.int32)\n\t日期1早于日期2，返回-1\n\t日期1等于日期2，返回0\n\t日期1晚于日期2，返回1\n【示例】：CompareDate("2019-01-30T10:00:00+08:00","2019-02-01T10:00:00+08:00")\n【返回值】：-1`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "格式化当前日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式将当前日期时间值转换为其等效的字符串表示形式\n【format】：格式串\n【返回值类型】：字符串(System.String)\n【示例】：FormatDate("yyyy-MM-dd HH:mm:ss")\n【返回值】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "格式化指定日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式将指定的日期时间值转换为其等效的字符串表示形式\n【format】：格式串\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FormatDefineDate("yyyy-MM-dd HH:mm:ss","2019-01-30 01:00:00")\n【返回值】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "今天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的今天，格式为"yyyy-MM-dd"形式，如果不传递参数，则默认返回当前系统日期的今天\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：Today("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-30"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "昨天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的昨天，格式为"yyyy-MM-dd"形式，如果不传递参数，则默认返回当前系统日期的昨天\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：Yesterday("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "明天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明天，格式为"yyyy-MM-dd"形式，如果不传递参数，则默认返回当前系统日期的明天\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：Tomorrow("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "本年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年，格式为"yyyy"形式，如果不传递参数，则默认返回当前系统日期的本年\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：ThisYear("2019-01-30T10:00:00+08:00")\n【返回值】："2019"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "去年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的去年，格式为"yyyy"形式，如果不传递参数，则默认返回当前系统日期的去年\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastYear("2019-01-30T10:00:00+08:00")\n【返回值】："2018"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "明年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明年，格式为"yyyy"形式，如果不传递参数，则默认返回当前系统日期的明年\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：NextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "本月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月，格式为"MM"形式，如果不传递参数，则默认返回当前系统日期的本月\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：ThisMonth("2019-01-30T01:00:00+08:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "上月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月，格式为"MM"形式，如果不传递参数，则默认返回当前系统日期的上月\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastMonth("2019-02-30 01:00:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "下月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月，格式为"MM"形式，如果不传递参数，则默认返回当前系统日期的下月\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：NextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "本周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期在本年的第几周，格式为"ww"形式，如果不传递参数，则默认返回当前系统日期在本年的第几周，注意如果12月底的日期与下一年的1月1日在同一星期，则返回第一周\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：ThisWeek("2019-01-30T01:00:00+08:00")\n【返回值】："5"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "上周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上周，格式为"ww"形式，如果不传递参数，则默认返回当前系统日期的上周，注意如果指定日期在今年第1周，则上周为去年的最后一周\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："4"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "下周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下周，格式为"ww"形式，如果不传递参数，则默认返回当前系统日期的下周，注意如果指定日期在今年最后一周，则下周为1\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：NextWeek("2019-01-30T01:00:00+08:00")\n【返回值】："6"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "星期几",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期是本周的星期几，格式为"n"，如果不传递参数，则默认返回当前系统日期是本周的星期几，注意不是返回英文缩写，而是返回数字形式。按照中国习惯，星期一为每周首日，返回值为1，星期日为每周尾日，返回值为7\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：DayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："3"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "本周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本周第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "本周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本周最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-03"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "上周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上周第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-21"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "上周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上周最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上周最后一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-27"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "下周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下周第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-04"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "下周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下周最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下周最后一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-10"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "本月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本月第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "本月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本月最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "上月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上月第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "上月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上月最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "下月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下月第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "下月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下月最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "本年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本年第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "本年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本年最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "上年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上年第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "上年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上年最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "下年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下年第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "下年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下年最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "返回指定形式的日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定形式的日期，如果不传递参数，则默认返回当前系统日期的指定形式日期。\n【format】：格式化串\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n\tDD：今天\tLD：昨天\tND：明天\n\tYY：本年\tLY：上年\tNY：下年\n\tMM：本月\tLM：上月\tNM：下月\n\tWD：星期几\n\tWW：本周\tLW：上周\tNW：下周\n\tFDW：本周首日\tLDW：本周尾日\n\tFDLW：上周首日\tLDLW：上周尾日\n\tFDNW：下周首日\tLDNW：下周尾日\n\tFDM：本月首日\tLDM：本月尾日\n\tFDLM：上月首日\tLDLM：上月尾日\n\tFDNM：下月首日\tLDNM：下月尾日\n\tFDY：本年首日\tLDY：本年尾日\n\tFDLY：上年首日\tLDLY：上年尾日\n\tFDNY：下年首日\tLDNY：下年尾日\n【示例】：GetDate("LD","2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "转字符串",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定的对象转换成字符串\n【obj】：待转换对象\n【返回值类型】：字符串(System.String)\n【示例】：ToStringX(123)\n【返回值】："123"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "转日期时间",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定的对象转换成日期时间\n【obj】：待转换对象\n【返回值类型】：日期时间(System.OffsetDateTime)\n【示例】：ToDateTime("2019-01-30T10:00:00+08:00")\n【返回值】: 2019-01-30T10:00+08:00`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "转布尔值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象值转换成等效的布尔值\n【obj】：待转换对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：ToBoolean("True")\n【返回值】：true`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "转数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成十进制数值\n【obj】：待转换对象\n【返回值类型】：十进制数值(System.BigDecimal)\n【示例】：ToDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "转数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成十进制数值\n【obj】：待转换对象\n【返回值类型】：十进制数值(System.BigDecimal)\n【示例】：ToBigDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "转自定义精度数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "小数位数",
                    "type": "int"
                }
            ],
            "description": `【功能】：将指定对象转换成指定精度的十进制数值\n【obj】：待转换对象\n【number】：小数位数\n【返回值类型】：十进制数值(System.BigDecimal)\n【示例】：ToCustomBigDecimal("40.2,2")\n【返回值】：40.20`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "转双精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成双精度浮点数\n【obj】：待转换对象\n【返回值类型】：双精度浮点数(System.Double)\n【示例】：ToDouble("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "转单精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成单精度浮点数\n【obj】：待转换对象\n【返回值类型】：单精度浮点数(System.Float)\n【示例】：ToSingle("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "转单精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成单精度浮点数\n【obj】：待转换对象\n【返回值类型】：单精度浮点数(System.Float)\n【示例】：ToFloat("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "转8位无符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成8位无符号整数\n【obj】：待转换对象\n【返回值类型】：8位无符号整数(System.Byte)\n【示例】：ToByte("10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "转16位有符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成16位有符号整数\n【obj】：待转换对象\n【返回值类型】：16位有符号整数(System.Int16)\n【示例】：ToInt16("10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "转32位有符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成32位有符号整数\n【obj】：待转换对象\n【返回值类型】：32位有符号整数(System.Int32)\n【示例】：ToInt32("10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "转中文大写金额",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成中文大写金额\n【obj】：待转换对象\n【返回值类型】：字符串(System.String)\n【示例】：ToChineseMoney(40.23)\n【返回值】："肆拾元零贰角叁分"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "获取会话变量的值",
            "params": [
                {
                    "key": "name",
                    "name": "会话变量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取用户会话变量的值\n【name】：会话变量名称\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "获取上下文变量的值",
            "params": [
                {
                    "key": "name",
                    "name": "上下文变量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取上下文变量的值\n【name】：上下文变量名称\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "根据属性名获取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式属性名得到JSON串\n【chainedPropName】链式名称\n【propertyName】属性名\n【返回值类型】：对象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "根据属性名获取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式属性名得到JSON串\n【chainedPropName】链式名称\n【propertyName】属性名\n【返回值类型】：对象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "根据注入名获获取注入对象",
            "params": [
                {
                    "key": "name",
                    "name": "注入名",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取运行时注入的对象\n【name】注入名\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "根据属性名获取属性值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式属性名获取属性值\n【chainedPropName】链式名\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "绝对值",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一个数值的绝对值\n【value】：计算数值\n【返回值类型】：数值(System.Double)\n【示例】：abs(-1.5)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "四舍五入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把数四舍五入为指定精度的数值\n【value1】：数值 \n【value2】：四舍五入小数位数\n【返回值类型】：数值(System.Double)\n【示例】：\nRound(1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "四舍五入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把数四舍五入为指定精度的数值\n【value1】：数值 \n【value2】：四舍五入小数位数\n【返回值类型】：数值(System.Double)\n【示例】：round(1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "随机数",
            "params": [],
            "description": `【功能】：随机生成大于等于 0.0 且小于 1.0 的伪随机值\n【返回值类型】：数值(System.Double)\n【示例】：random()\n【返回值】：0.624508349393`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "正弦",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一个数字的正弦值\n【value】：计算数值\n【返回值类型】：数值(System.Double)\n一个以弧度表示的角\n【示例】：sin(1)\n【返回值】：0.84187098`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "余弦",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一个数字的余弦值\n【value】：计算数值\n【返回值类型】：数值(System.Double)\n一个以弧度表示的角\n【示例】：cos(3)\n【返回值】：-0.9899924`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "向上舍入",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回大于或等于函数参数，并且与之最接近的整数\n【value】：计算数值\n【返回值类型】：数值(System.Int32)\n【示例】：ceil(3.2)\n【返回值】：4`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "向下舍入",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回小于或等于函数参数，并且与之最接近的整数\n【value】：计算数值\n【返回值类型】：数值(System.Int32)\n【示例】：floor(3.2)\n【返回值】：3`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "银行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用银行家舍入标准，把指定数字舍入为最接近的数字\n【value1】：要舍入的数值\n【value2】：要舍入的小数位数\n【返回值类型】：数值(System.Double)\n【示例】：BankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "银行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用银行家舍入标准，把指定数字舍入为最接近的数字\n【value1】：要舍入的数值\n【value2】：要舍入的小数位数\n【返回值类型】：数值(System.Double)\n【示例】：bankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ],
    "en": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : Analyzing conditions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : Analyzing conditions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for loop",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "return operation",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "variable definitions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "true",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "false",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "StringSubstring",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "start",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "length",
                    "type": "int"
                }
            ],
            "description": `【Function】：Retrieve the substring in the original string, the substring starts from the specified character position and has the specified length\n【original】：original string\n【start】：start index(start from 0)\n【length】：length\n【Return Type】：String(System.String)\n【Example】：StringSubstring("ABCDEFG",2,3)\n【Return】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "SubString",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "start",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "length",
                    "type": "int"
                }
            ],
            "description": `【Function】：Retrieve the substring in the original string, the substring starts from the specified character position and has the specified length\n【original】：original string\n【start】：start index(start from 0)\n【length】：length\n【Return Type】：String(System.String)\n【Example】：SubString("ABCDEFG",2,3)\n【Return】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定字符串的长度\n【original】：源字符串\n【Return Type】：数值(System.Int32)\n【Example】：StringLength("语义化表达式")\n【Return】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "Length",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the length of the original string\n【original】：original string\n【Return Type】：Int32(System.Int32)\n【Example】：Length("语义化表达式")\n【Return】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "Contains",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the original string contains the target string\n【original】：original string\n【target】：target string\n【Return Type】：System.Boolean\n【Example】：Contains(salesorder.code,"表达式")\n【Return】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "StartsWith",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the original string starts with the target string\n【original】：original string\n【target】：target string\n【Return Type】：System.Boolean\n【Example】：StartsWith(salesorder.code,"子单位")\n【Return】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "EndsWith",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the original string ends with the target string\n【original】：original string\n【target】：target string\n【Return Type】：System.Boolean\n【Example】：EndsWith(salesorder.code,\"子单位\")\n【Return】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串中的"被替换值"替换为"替换值"\n【original】：源字符串\n【oldValue】：被替换值\n【newValue】：替换值\n【Return TypeReturn Type】：字符串(System.String)\n【Example】：StringReplace("123412","12","00")\n【Return】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "Replace",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "oldValue",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "newValue",
                    "type": "string"
                }
            ],
            "description": `【Function】：Replace the "oldValue" in the original string with "newValue"\n【original】：original string\n【oldValue】：replaced old value\n【newValue】：replacement new value\n【Return Type】：String(System.String)\n【Example】：Replace("123412","12","00")\n【Return】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：将源字符串转换为大写\n【original】：源字符串\n【Return Type】：字符串(System.String)\n【Example】：StringToUpper("abc")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "ToUpper",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Convert the original string to uppercase\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：ToUpper("abc")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：将源字符串转换为小写\n【original】：源字符串\n【Return TypeReturn Type】：字符串(System.String)\n【Example】：StringToLower("ABC")\n【Return】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "ToLower",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Convert the original string to lowercase\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：ToLower("ABC")\n【Return】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：在源字符串中，检索目标字符串，找到第一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【target】：目标字符串\n【Return Type】：数值(System.Int32)\n【Example】：StringIndexOf("12001234012","01")\n【Return】：3\n【Example】：StringIndexOf("12002323","34")\n【Return】：-1\n【Example】：StringIndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "IndexOf",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：In the original string, the target string is retrieved, and after the first matching string is found, its index position (starting from 0) is returned. If the target string is not found, -1 is returned, if the target string is an empty string, 0 is returned, if the original string is null, -1 is returned\n【original】：original string\n【target】：target string\n【Return Type】：Int32(System.Int32)\n【Example】：IndexOf("12001234012","01")\n【Return】：3\n【Example】：IndexOf("12002323","34")\n【Return】：-1\n【Example】：IndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到最后一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【value】：目标字符串\n【Return Type】：数值(System.Int32)\n【Example】：StringLastIndexOf("12001234012","01")\n【Return】：8\n【Example】：StringLastIndexOf("12002323","34")\n【Return】：-1\n【Example】：StringLastIndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "LastIndexOf",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：In the original string, the target string is retrieved, and after the last matching string is found, its index position (starting from 0) is returned. If the target string is not found, -1 is returned, if the target string is an empty string, 0 is returned, if the original string is null, -1 is returned\n【original】：original string\n【value】：target string\n【Return Type】：Int32(System.Int32)\n【Example】：LastIndexOf("12001234012","01")\n【Return】：8\n【Example】：LastIndexOf("12002323","34")\n【Return】：-1\n【Example】：LastIndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头部空格\n【original】：源字符串\n【Return Type】：字符串(System.String)\n【Example】：StringTrimStart("    ABC")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "TrimStart",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Delete the head space of the original string\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：TrimStart("    ABC")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的尾部空格\n【original】：源字符串\n【Return TypeReturn Type】：字符串(System.String)\n【Example】：StringTrimEnd("ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "TrimEnd",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Remove trailing spaces from the original string\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：TrimEnd("ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头尾部空格\n【original】：源字符串\n【Return Type】：字符串(System.String)\n【Example】：StringTrim("    ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "Trim",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Delete the leading and trailing spaces of the original string\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：Trim("    ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "CreateGuid",
            "params": [],
            "description": `【Function】：Get unique identification Guid\n【Return Type】：String(System.String)\n【Example】：CreateGuid()\n【Return】："7722A793-14DF-49CD-B7E7-DF4987YYD2"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：将若干字符串拼接成一个新字符串，最多支持10个字符串拼接，最少2个；编辑器中默认插入两个，多个字符串可手动添加\n【Return Type】：字符串(System.String)\n【Example】：StringAdd("Hello","World")\n【Return】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "Add",
            "params": [
                {
                    "key": "firstStr",
                    "name": "firstStr",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "secondStr",
                    "type": "string"
                }
            ],
            "description": `【Function】：Concatenate several strings into a new string, support up to 10 string concatenations, at least 2; two are inserted by default in the editor, and multiple strings can be added manually\n【Return Type】：String(System.String)\n【Example】：Add("Hello","World")\n【Return】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "SumByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the sum of a certain attribute\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name;\n【Return Type】：Double(System.Double)\n【Example】：SumByProp("Order.OrderItems","Quantity")"`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "CountByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the number of records in the table where the specified field is located\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Int32(System.Int32);\n【Example】：CountByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "AvgByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the average value of a numeric column\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Double(System.Double)\n【Example】：AvgByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "MaxByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the maximum value of a numeric column\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Double(System.Double)\n【Example】：MaxByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "MinByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the minimum value of a numeric column\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Double(System.Double)\n【Example】：MinByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "IsNull",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Determine whether the specified object is null(null)\n【obj】：Object to be detected\n【Return Type】：Boolean(System.Boolean)\n【ExampleExample】：IsNull("语义化表达式")\n【Return】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "IsNullOrWhiteSpace",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the specified string is null, empty or only composed of spaces\n【obj】：String to be judged\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsNullOrWhiteSpace("语义化表达式")\n【Return】：False\n【Example】：IsNullOrWhiteSpace(null)\n【Return】：True\n【Example】：\nIsNullOrWhiteSpace(" ")【Return】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "IsNaN",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Determine whether the specified object can be converted into a number(System.Double)\n【obj】：Object to be detected\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsNaN("语义化表达式")【Return】：True\n【Example】：IsNaN(12.3)【Return】：False\n【Example】：\nIsNaN("123")【Return】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "IsNumber",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Determine whether the specified object can be converted into a number(System.Double)\n【obj】：Object to be detected\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsNumber(\"语义化表达式\")【Return】：False\n【Example】：IsNumber(12.3)【Return】：True\n【Example】：\nIsNumber("123")【Return】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "IsExistRecord",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether there is a value equal to the matching character in the specified field set of the table according to the chain name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsExistRecord("salesorder.items","code","lc")\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "ListGreaterThan",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "double"
                }
            ],
            "description": `【Function】：Determine whether there is a value greater than the matching character in the specified field set of the table according to the chain name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】march value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListGreaterThan("salesorder.items","num",100)\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "ListLessThan",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "double"
                }
            ],
            "description": `【Function】：Determine whether there is a value less than the matching character in the specified field set of the table according to the chain name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListLessThan("salesorder.items","num",100)\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "ListStartWith",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": `【Function】：According to the chain name, determine whether there is a value with a matching character at the beginning of the specified field set of the table\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListStartWith("salesorder.items","code","lc")\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "ListEndWith",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": `【Function】：According to the chain name, determine whether there is a value whose ending is a matching character in the specified field set of the table\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListEndWith("salesorder.items","code","lc")\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "DateTimeAddDays",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": `【Function】：Add the specified number of days to the specified date\n【date】：date time\n【value】：Increase the number of days\n【Return Type】：DateTime(System.DateTime)\n【Example】：DateTimeAddDays("2019-01-30T10:00:00+08:00",2)\n【Return】:2019-02-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "DateTimeAddYears",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": `【Function】：Add the specified number of years to the specified date and time\n【date】：date time\n【value】：Increase the number of years\n【Return Type】：DateTime(System.DateTime)\n【Example】：DateTimeAddYears("2019-01-30T10:00:00+08:00",2)\n【Return】:2021-01-30T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "DateTimeAddMonths",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": `【Function】：Add the specified number of months to the specified date and time\n【date】：date time\n【value】：Increase the number of months\n【Return Type】：DateTime(System.DateTime)\n【ExampleExample】：DateTimeAddMonths("2019-01-30T10:00:00+08:00",1)\n【Return】:2019-02-28T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "GetFirstDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the date of the first day of the month where the specified date time value is\n【date】：date time\n【Return Type】：DateTime(System.DateTime)\n【Example】：GetFirstDayOfMonth("2019-01-30T10:00:00+08:00")\n【Return】:2019-01-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "GetLastDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the date of the last day of the month in which the specified date and time value is located\n【date】：date time\n【Return Type】：DateTime(System.DateTime)\n【Example】：GetLastDayOfMonth("2019-01-30T10:00:00+08:00")\n【Return】:2019-01-31T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "GetDateTimeNow",
            "params": [],
            "description": `【Function】：Get the current date and time\n【Return Type】：DateTime(System.DateTime)\n【Example】：GetDateTimeNow()\n【Return】:2019-01-30T12:00:00.000+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "CompareDate",
            "params": [
                {
                    "key": "str1",
                    "name": "date1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "date2",
                    "type": "string"
                }
            ],
            "description": `【Function】：Compare two time values and return a value indicating whether the first time is an integer that is earlier than, equal to, or later than the second time\n【str1】：date time 1\n【str2】：date time 2\n【Return Type】：Int32(System.Int32)\n\tDate 1 is earlier than date 2, return -1\n\tdate 1 is equal to date 2, return 0\n\tdate 1 is later than date 2, return 1\n【Example】：CompareDate("2019-01-30T10:00:00+08:00","2019-02-01T10:00:00+08:00")\n【Return】：-1`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "FormatDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                }
            ],
            "description": `【Function】：Use the specified format to convert the current date and time value to its equivalent string representation\n【format】：Format string\n【Return Type】：String(System.String)\n【Example】：FormatDate("yyyy-MM-dd HH:mm:ss")\n【Return】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "FormatDefineDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Use the specified format to convert the specified date and time value to its equivalent string representation\n【format】：Format string\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FormatDefineDate("yyyy-MM-dd HH:mm:ss","2019-01-30 01:00:00")\n【Return】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "Today",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns today of the specified date, in the format "yyyy-MM-dd", if no parameters are passed, it will return today as the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：Today("2019-01-30T10:00:00+08:00")\n【Return】："2019-01-30"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "Yesterday",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the yesterday of the specified date, the format is "yyyy-MM-dd", if no parameters are passed, it will return yesterday of the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：Yesterday("2019-01-30T10:00:00+08:00")\n【Return】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "Tomorrow",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return tomorrow of the specified date, the format is "yyyy-MM-dd", if no parameters are passed, it will return tomorrow of the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：Tomorrow("2019-01-30T10:00:00+08:00")\n【Return】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "ThisYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the current year of the specified date, the format is "yyyy", if no parameters are passed, the current year of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：ThisYear("2019-01-30T10:00:00+08:00")\n【Return】："2019"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "LastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last year of the specified date, the format is "yyyy", if no parameters are passed, it will return the last year of the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastYear("2019-01-30T10:00:00+08:00")\n【Return】："2018"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "NextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the next year of the specified date, the format is "yyyy", if no parameters are passed, the next year of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：NextYear("2019-01-30T01:00:00+08:00")\n【Return】："2020"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "ThisMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the current month of the specified date, the format is "MM", if no parameters are passed, the current month of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：ThisMonth("2019-01-30T01:00:00+08:00")\n【Return】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "LastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the previous month of the specified date, the format is "MM", if no parameters are passed, the default returns the previous month of the current system date\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastMonth("2019-02-30 01:00:00")\n【Return】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "NextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the next month of the specified date, the format is "MM", if no parameter is passed, the next month of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：NextMonth("2019-01-30T01:00:00+08:00")\n【Return】："2"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "ThisWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the week of the specified date in the current year, in the form of "ww". If no parameter is passed, the default will return the current system date in the first week of the year. Note that if the date at the end of December is the same as January If the 1st falls in the same week, return to the first week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：ThisWeek("2019-01-30T01:00:00+08:00")\n【Return】："5"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "LastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last week of the specified date, the format is "ww", if no parameter is passed, it will default to the last week of the current system date. Note that if the specified date is in the first week of this year, the last week will be the last week of last year\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastWeek("2019-01-30T01:00:00+08:00")\n【Return】："4"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "NextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the next week of the specified date, the format is "ww". If no parameter is passed, the next week of the current system date will be returned by default. Note that if the specified date is in the last week of the year, the next week will be 1\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：NextWeek("2019-01-30T01:00:00+08:00")\n【Return】："6"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "DayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the specified date is the day of the week of the current week, the format is "n", if no parameter is passed, the default return current system date is the day of the week of the week. Note that it returns not the English abbreviation, but the number form. According to Chinese custom, Monday is the first day of the week, Return is 1, Sunday is the end of the week, and Return is 7\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：DayOfWeek("2019-01-30T01:00:00+08:00")\n【Return】："3"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "FirstDayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the first day of the week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "LastDayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-03"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "FirstDayOfLastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the last week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the last week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】: date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-21"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "LastDayOfLastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the last week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the last day of the last week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-27"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "FirstDayOfNextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the next week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the first day of the next week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-04"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "LastDayOfNextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the next week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the default returns the last day of the next week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-10"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "FirstDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the month of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "LastDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the last day of the month of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "FirstDayOfLastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the previous month of the specified date, in the format "yyyy-MM-dd". If no parameters are passed, the first day of the previous month of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【Return】："2018-12-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "LastDayOfLastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the previous month of the specified date, the format is "yyyy-MM-dd", if no parameters are passed, the default returns the last day of the previous month of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【Return】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "FirstDayOfNextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the next month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the first day of the next month of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "LastDayOfNextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the next month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the last day of the next month of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "FirstDayOfYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the current year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the current year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfYear("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "LastDayOfYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the current year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the last day of the current year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfYear("2019-01-30T01:00:00+08:00")\n【Return】："2019-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "FirstDayOfLastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the previous year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the previous year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfLastYear("2019-01-30T01:00:00+08:00")\n【Return】："2018-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "LastDayOfLastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the previous year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the last day of the previous year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfLastYear("2019-01-30T01:00:00+08:00")\n【Return】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "FirstDayOfNextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the next year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will return the first day of the next year of the current system date by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfNextYear("2019-01-30T01:00:00+08:00")\n【Return】："2020-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "LastDayOfNextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the next year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the last day of the next year of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfNextYear("2019-01-30T01:00:00+08:00")\n【Return】："2020-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "GetDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the date in the specified format. If no parameters are passed, it will return the date in the specified format of the current system date by default.\n【format】：格式化串\n【date】：date time\n【Return Type】：String(System.String)\n\tDD：Today\tLD：Yesterday\tND：Tomorrow\n\tYY：This year\tLY：Last year\tNY：Next year\n\tMM：This month\tLM：Last month\tNM：Next month\n\tWD：Day of the week\n\tWW：This week\tLW：Last week\tNW：Next week\n\tFDW：First day of this week\tLDW：End of this week\n\tFDLW：First day of last week\tLDLW：End of the last week\n\tFDNW：First day of next week\tLDNW：End of next week\n\tFDM：First day of this month\tLDM：End of this month\n\tFDLM：First day of last month\tLDLM：End of last month\n\tFDNM：First day of next month\tLDNM：End of next month\n\tFDY：First day of this year\tLDY：nd of this year\n\tFDLY：First day of last year\tLDLY：End of last year\n\tFDNY：First day of next year\tLDNY：End of next year\n【Example】：GetDate("LD","2019-01-30T01:00:00+08:00")\n【Return】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "ToStringX",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a string\n【obj】：Object to be converted\n【Return Type】：String(System.String)\n【Example】：ToStringX(123)\n【Return】："123"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "ToDateTime",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into date time\n【obj】：Object to be converted\n【Return Type】：OffsetDateTime(System.OffsetDateTime)\n【Example】：ToDateTime("2019-01-30T10:00:00+08:00")\n【Return】: 2019-01-30T10:00+08:00`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "ToBoolean",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object value into an equivalent boolean value\n【obj】：Object to be converted\n【Return Type】：Boolean(System.Boolean)\n【Example】：ToBoolean("True")\n【Return】：true`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "ToDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a decimal value\n【obj】：Object to be converted\n【Return Type】：BigDecimal(System.BigDecimal)\n【Example】：ToDecimal("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "ToBigDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a BigDecimal value\n【obj】：Object to be converted\n【Return Type】：BigDecimal(System.BigDecimal)\n【Example】：ToBigDecimal("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "ToCustomBigDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "number",
                    "type": "int"
                }
            ],
            "description": `【Function】：Convert the specified object into a decimal value of the specified precision\n【obj】：Object to be converted\n【number】：Decimal places\n【Return Type】：BigDecimal(System.BigDecimal)\n【Example】：ToCustomBigDecimal("40.2,2")\n【Return】：40.20`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "ToDouble",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a double value\n【obj】：Object to be converted\n【Return Type】：Double(System.Double)\n【Example】：ToDouble("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "ToSingle",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a single value\n【obj】：Object to be converted\n【Return Type】：Float(System.Float)\n【Example】：ToSingle("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "ToFloat",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a float value\n【obj】：Object to be converted\n【Return Type】：Float(System.Float)\n【Example】：ToFloat("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "ToByte",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a byte\n【obj】：Object to be converted\n【Return Type】：Byte(System.Byte)\n【Example】：ToByte("10")\n【Return】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "ToInt16",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a Int16\n【obj】：Object to be converted\n【Return Type】：Int16(System.Int16)\n【Example】：ToInt16("10")\n【Return】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "ToInt32",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a Int32\n【obj】：Object to be converted\n【Return Type】：Int32(System.Int32)\n【Example】：ToInt32("10")\n【Return】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "ToChineseMoney",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into Chinese uppercase amount\n【obj】：Object to be converted\n【Return Type】：String(System.String)\n【Example】：ToChineseMoney(40.23)\n【Return】："肆拾元零贰角叁分"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "GetSessionValue",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the value of the user session variable\n【name】：the user session variable\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "GetContextParameter",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the value of the context variable\n【name】：the context variable\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "getComputeJsonData",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the JSON string according to the chain attribute name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【Return Type】：Object(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "GetComputeJsonData",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the JSON string according to the chain attribute name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【Return Type】：Object(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "GetInjectedEntity",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the object injected at runtime\n【name】Injection name\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "GetChainedPropertyValue",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the attribute value based on the chained attribute name\n【chainedPropName】chainedPropName\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "abs",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the absolute value of a number\n【value】：value\n【Return Type】：Double(System.Double)\n【Example】：abs(-1.5)\n【Return】：1.5`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "Round",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": `【Function】：Rounds the number to the specified precision\n【value1】：value \n【value2】：Round off decimal places\n【Return Type】：Double(System.Double)\n【Example】：\nRound(1.52,1)\n【Return】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "round",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": `【Function】：Rounds the number to the specified precision\n【value1】：value \n【value2】：Round off decimal places\n【Return Type】：Double(System.Double)\n【Example】：round(1.52,1)\n【Return】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "random",
            "params": [],
            "description": `【Function】：Randomly generate a pseudo-random value greater than or equal to 0.0 and less than 1.0\n【Return Type】：Double(System.Double)\n【Example】：random()\n【Return】：0.624508349393`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "sin",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the sine of a number\n【value】：value\n【Return Type】：Double(System.Double)\nAn angle expressed in radians\n【Example】：sin(1)\n【Return】：0.84187098`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "cos",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the cosine of a number\n【value】：value\n【Return Type】：Double(System.Double)\nAn angle expressed in radians\n【Example】：cos(3)\n【Return】：-0.9899924`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "ceil",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the integer that is greater than or equal to the function parameter and closest to it\n【value】：value\n【Return Type】：Int32(System.Int32)\n【Example】：ceil(3.2)\n【Return】：4`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "floor",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the integer that is less than or equal to the function parameter and closest to it\n【value】：value\n【Return Type】：Int32(System.Int32)\n【Example】：floor(3.2)\n【Return】：3`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "BankerRound",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【Function】：使用银行家舍入标准，把指定数字舍入为最接近的数字\n【value1】：要舍入的数值\n【value2】：要舍入的小数位数\n【Return Type】：数值(System.Double)\n【Example】：BankerRound(36.124,2)\n【Return】：36.12`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "bankerRound",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": `【Function】：Use the banker's rounding standard to round the specified number to the nearest number\n【value1】：The value to be rounded\n【value2】：Number of decimal places to round\n【Return Type】：Double(System.Double)\n【Example】：bankerRound(36.124,2)\n【Return】：36.12`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ],
    "zh-CHT": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : 判斷條件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : 判斷條件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for循環",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "返回操作",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "變量定義",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "正確",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "錯誤",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "長度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中檢索子字符串，子字符串從指定的字符位置開始且具有指定的長度\n【original】：源字符串\n【start】：起始位置(從0開始)\n【length】：長度\n【返回值類型】：字符串(System.String)\n【示例】：StringSubstring("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "長度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中檢索子字符串，子字符串從指定的字符位置開始且具有指定的長度\n【original】：源字符串\n【start】：起始位置(從0開始)\n【length】：長度\n【返回值類型】：字符串(System.String)\n【示例】：SubString("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串長度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定字符串的長度\n【original】：源字符串\n【返回值類型】：數值(System.Int32)\n【示例】：StringLength("語義化表達式")\n 【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "取字符串長度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定字符串的長度\n【original】：源字符串\n【返回值類型】：數值(System.Int32)\n【示例】：Length("語義化表達式")\n 【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "是否包含",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷源字符串中是否包含目標字符串\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：System.Boolean\n【示例】：Contains (salesorder.code,"表達式")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "開頭是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷源字符串是否以目標字符串開頭\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：System.Boolean\n【示例】：StartsWith (salesorder.code,"子單位")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "結尾是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷源字符串是否以目標字符串結尾\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：System.Boolean\n【示例】：EndsWith (salesorder.code,\"子單位\")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替換",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替換值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替換值",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串中的"被替換值"替換為"替換值"\n【original】：源字符串\n【oldValue】：被替換值\n【newValue】：替換值\n【返回值類型】：字符串(System.String)\n【示例】：StringReplace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "字符串替換",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替換值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替換值",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串中的"被替換值"替換為"替換值"\n【original】：源字符串\n【oldValue】：被替換值\n【newValue】：替換值\n【返回值類型】：字符串(System.String)\n【示例】：Replace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "轉大寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為大寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "轉大寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為大寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：ToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "轉小寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為小寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "轉小寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為小寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：ToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "獲取首個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到第一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：StringIndexOf("12001234012","01")\n【返回值】：3\n【示例】：StringIndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：StringIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "獲取首個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到第一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：IndexOf("12001234012","01")\n【返回值】：3\n【示例】：IndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：IndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "獲取最後一個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到最後一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【value】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：StringLastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：StringLastIndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：StringLastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "獲取最後一個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到最後一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【value】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：LastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：LastIndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：LastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "刪除頭部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringTrimStart(" ABC")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "刪除頭部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：TrimStart(" ABC")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "刪除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringTrimEnd("ABC ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "刪除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：TrimEnd("ABC ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "刪除頭尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringTrim(" ABC ")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "刪除頭尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：Trim(" ABC ")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "唯一標識符",
            "params": [],
            "description": `【功能】：獲取唯一標識符Guid\n【返回值類型】：字符串(System.String)\n【示例】：CreateGuid()\n【返回值】："7722A793-14DF-49CD-B7E7-DF4987YYD2 "`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一個字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二個字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將若干字符串拼接成一個新字符串，最多支持10個字符串拼接，最少2個；編輯器中默認插入兩個，多個字符串可手動添加\n【返回值類型】：字符串(System.String)\n【示例】：StringAdd("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一個字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二個字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將若干字符串拼接成一個新字符串，最多支持10個字符串拼接，最少2個；編輯器中默認插入兩個，多個字符串可手動添加\n【返回值類型】：字符串(System.String)\n【示例】：Add("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "按屬性求和",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一屬性的和\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名;\n 【返回值類型】：數值(System.Double)\n【示例】：SumByProp("Order.OrderItems","Quantity")"`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "列行數",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計指定字段所在表的記錄數\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如：Order.OrderItems\n【propertyName】：類型屬性名\ n【返回值類型】：數值(System.Int32);\n【示例】：CountByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "列平均值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一數值列的平均值\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名\ n【返回值類型】：數值(System.Double)\n【示例】：AvgByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "列最大值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一數值列的最大值\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名\n 【返回值類型】：數值(System.Double)\n【示例】：MaxByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "列最小值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一數值列的最小值\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名\ n【返回值類型】：數值(System.Double)\n【示例】：MinByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "是空值",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判斷指定的對像是否為空值(null)\n【obj】：要檢測的對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：IsNull("語義化表達式")\n【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "是空串",
            "params": [
                {
                    "key": "obj",
                    "name": "待判斷字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷指定的字符串是否為null、空還是僅有空格組成\n【obj】：要判斷的字符串\n【返回值類型】：布爾值(System.Boolean)\n【示例】 ：IsNullOrWhiteSpace("語義化表達式")\n【返回值】：False\n【示例】：IsNullOrWhiteSpace(null)\n【返回值】：True\n【示例】：\nIsNullOrWhiteSpace(" ")【返回值】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "非數字",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判斷指定的對像是否可以轉換成數字(System.Double)\n【obj】：要檢測的對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：IsNaN ("語義化表達式")【返回值】：True\n【示例】：IsNaN(12.3)【返回值】：False\n【示例】：\nIsNaN("123")【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "是數字",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判斷指定的對像是否可以轉換成數字(System.Double)\n【obj】：要檢測的對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：IsNumber (\"語義化表達式\")【返回值】：False\n【示例】：IsNumber(12.3)【返回值】：True\n【示例】：\nIsNumber("123")【返回值】： True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "有無等於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在等於匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：IsExistRecord("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "有無大於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在大於匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListGreaterThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "有無小於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在小於匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListLessThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "有無開頭是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在開頭是匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListStartWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "有無結尾是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在結尾是匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListEndWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "增加指定天數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加天數",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期時間上增加指定的天數\n【date】：日期時間\n【value】：增加天數\n【返回值類型】：日期時間(System.DateTime)\n【示例】 ：DateTimeAddDays("2019-01-30T10:00:00+08:00",2)\n【返回值】:2019-02-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "增加指定年數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加年數",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期時間上增加指定的年數\n【date】：日期時間\n【value】：增加年數\n【返回值類型】：日期時間(System.DateTime)\n【示例】 ：DateTimeAddYears("2019-01-30T10:00:00+08:00",2)\n【返回值】:2021-01-30T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "增加指定月數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加月數",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期時間上增加指定的月數\n【date】：日期時間\n【value】：增加月數\n【返回值類型】：日期時間(System.DateTime)\n【示例】：DateTimeAddMonths("2019-01-30T10:00:00+08:00",1)\n【返回值】:2019-02-28T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "獲取指定日期時間所在月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定日期時間值所在月的第一天的日期\n【date】：日期時間\n【返回值類型】：日期時間(System.DateTime)\n【示例】：GetFirstDayOfMonth("2019 -01-30T10:00:00+08:00")\n【返回值】:2019-01-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "獲取指定日期時間所在月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定日期時間值所在月的最後一天的日期\n【date】：日期時間\n【返回值類型】：日期時間(System.DateTime)\n【示例】：GetLastDayOfMonth("2019- 01-30T10:00:00+08:00")\n【返回值】:2019-01-31T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "獲取當前日期時間",
            "params": [],
            "description": `【功能】：獲取當前的日期時間\n【返回值類型】：日期時間(System.DateTime)\n【示例】：GetDateTimeNow()\n【返回值】:2019-01-30T12:00:00.000+ 08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "比較兩個時間",
            "params": [
                {
                    "key": "str1",
                    "name": "日期時間1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "日期時間2",
                    "type": "string"
                }
            ],
            "description": `【功能】：比較兩個時間值，並返回一個值，此值表示第一個時間是早於、等於還是晚於第二個時間的整數\n【str1】：日期時間1\n【str2】 ：日期時間2\n【返回值類型】：數值(System.int32)\n\t日期1早於日期2，返回-1\n\t日期1等於日期2，返回0\n\t日期1晚於日期2，返回1\n【示例】：CompareDate("2019-01-30T10:00:00+08:00","2019-02-01T10:00:00+08:00")\n【返回值】：-1`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "格式化當前日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式將當前日期時間值轉換為其等效的字符串表示形式\n【format】：格式串\n【返回值類型】：字符串(System.String)\n【示例】：FormatDate("yyyy-MM-dd HH:mm:ss")\n【返回值】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "格式化指定日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式將指定的日期時間值轉換為其等效的字符串表示形式\n【format】：格式串\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FormatDefineDate("yyyy-MM-dd HH:mm:ss","2019-01-30 01:00:00")\n【返回值】："2019-01 -30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "今天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的今天，格式為"yyyy-MM-dd"形式，如果不傳遞參數，則默認返回當前系統日期的今天\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：Today("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-30"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "昨天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的昨天，格式為"yyyy-MM-dd"形式，如果不傳遞參數，則默認返回當前系統日期的昨天\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：Yesterday("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "明天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明天，格式為"yyyy-MM-dd"形式，如果不傳遞參數，則默認返回當前系統日期的明天\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：Tomorrow("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "本年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年，格式為"yyyy"形式，如果不傳遞參數，則默認返回當前系統日期的本年\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：ThisYear("2019-01-30T10:00:00+08:00")\n【返回值】："2019"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "去年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的去年，格式為"yyyy"形式，如果不傳遞參數，則默認返回當前系統日期的去年\n【date】：日期時間\n【返回值類型】：字符串(System .String)\n【示例】：LastYear("2019-01-30T10:00:00+08:00")\n【返回值】："2018"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "明年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明年，格式為"yyyy"形式，如果不傳遞參數，則默認返回當前系統日期的明年\n【date】：日期時間\n【返回值類型】：字符串(System .String)\n【示例】：NextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "本月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月，格式為"MM"形式，如果不傳遞參數，則默認返回當前系統日期的本月\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：ThisMonth("2019-01-30T01:00:00+08:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "上月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月，格式為"MM"形式，如果不傳遞參數，則默認返回當前系統日期的上月\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastMonth("2019-02-30 01:00:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "下月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月，格式為"MM"形式，如果不傳遞參數，則默認返回當前系統日期的下月\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：NextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "本週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期在本年的第幾週，格式為"ww"形式，如果不傳遞參數，則默認返回當前系統日期在本年的第幾週，注意如果12月底的日期與下一年的1月1日在同一星期，則返回第一周\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：ThisWeek("2019-01 -30T01:00:00+08:00")\n【返回值】："5"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "上週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上週，格式為"ww"形式，如果不傳遞參數，則默認返回當前系統日期的上週，注意如果指定日期在今年第1週，則上週為去年的最後一周\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："4"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "下週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下週，格式為"ww"形式，如果不傳遞參數，則默認返回當前系統日期的下週，注意如果指定日期在今年最後一周，則下週為1\n【 date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：NextWeek("2019-01-30T01:00:00+08:00")\n【返回值】 ："6"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "星期幾",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期是本週的星期幾，格式為"n"，如果不傳遞參數，則默認返回當前系統日期是本週的星期幾，注意不是返回英文縮寫，而是返回數字形式。按照中國習慣，星期一為每週首日，返回值為1，星期日為每週尾日，返回值為7\n【date】：日期時間\n【返回值類型】：字符串(System.String )\n【示例】：DayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："3"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "本週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本週第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "本週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本週最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-03"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "上週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上週第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfLastWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-21"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "上週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上週最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上週最後一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfLastWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-27"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "下週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下週第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfNextWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-04"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "下週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下週最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下週最後一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfNextWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-10"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "本月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本月第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "本月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本月最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "上月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上月第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "上月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上月最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "下月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下月第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "下月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下月最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "本年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本年第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "本年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本年最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "上年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上年第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "上年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上年最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "下年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下年第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "下年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下年最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "返回指定形式的日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定形式的日期，如果不傳遞參數，則默認返回當前系統日期的指定形式日期。 \n【format】：格式化串\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n\tDD：今天\tLD：昨天\tND：明天\n\tYY ：本年\tLY：上年\tNY：下年\n\tMM：本月\tLM：上月\tNM：下月\n\tWD：星期幾\n\tWW：本週\tLW：上週\ tNW：下週\n\tFDW：本週首日\tLDW：本週尾日\n\tFDLW：上週首日\tLDLW：上週尾日\n\tFDNW：下週首日\tLDNW：下週尾日\n\tFDM：本月首日\tLDM：本月尾日\n\tFDLM：上月首日\tLDLM：上月尾日\n\tFDNM：下月首日\tLDNM：下月尾日\n\tFDY：本年首日\tLDY：本年尾日\n\tFDLY：上年首日\tLDLY：上年尾日\n\tFDNY：下年首日\tLDNY：下年尾日\n 【示例】：GetDate("LD","2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "轉字符串",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定的對象轉換成字符串\n【obj】：待轉換對象\n【返回值類型】：字符串(System.String)\n【示例】：ToStringX(123)\n【返回值】："123"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "轉日期時間",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定的對象轉換成日期時間\n【obj】：待轉換對象\n【返回值類型】：日期時間(System.OffsetDateTime)\n【示例】：ToDateTime("2019-01-30T10 :00:00+08:00")\n【返回值】: 2019-01-30T10:00+08:00`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "轉布爾值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象值轉換成等效的布爾值\n【obj】：待轉換對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：ToBoolean("True" )\n【返回值】：true`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "轉數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成十進制數值\n【obj】：待轉換對象\n【返回值類型】：十進制數值(System.BigDecimal)\n【示例】：ToDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "轉數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成十進制數值\n【obj】：待轉換對象\n【返回值類型】：十進制數值(System.BigDecimal)\n【示例】：ToBigDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "轉自定義精度數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "小數位數",
                    "type": "int"
                }
            ],
            "description": `【功能】：將指定對象轉換成十進制數值\n【obj】：待轉換對象\n【返回值類型】：十進制數值(System.BigDecimal)\n【示例】：ToBigDecimal("40.2,2")\n【返回值】：40.20`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "轉雙精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成雙精度浮點數\n【obj】：待轉換對象\n【返回值類型】：雙精度浮點數(System.Double)\n【示例】：ToDouble("40.23" )\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "轉單精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成單精度浮點數\n【obj】：待轉換對象\n【返回值類型】：單精度浮點數(System.Float)\n【示例】：ToSingle("40.23") \n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "轉單精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成單精度浮點數\n【obj】：待轉換對象\n【返回值類型】：單精度浮點數(System.Float)\n【示例】：ToFloat("40.23" )\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "轉8位無符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成8位無符號整數\n【obj】：待轉換對象\n【返回值類型】：8位無符號整數(System.Byte)\n【示例】：ToByte(" 10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "轉16位有符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成16位有符號整數\n【obj】：待轉換對象\n【返回值類型】：16位有符號整數(System.Int16)\n【示例】：ToInt16(" 10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "轉32位有符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成32位有符號整數\n【obj】：待轉換對象\n【返回值類型】：32位有符號整數(System.Int32)\n【示例】：ToInt32(" 10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "轉中文大寫金額",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成中文大寫金額\n【obj】：待轉換對象\n【返回值類型】：字符串(System.String)\n【示例】：ToChineseMoney(40.23)\n【返回值】："肆拾元零貳角叁分"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "獲取會話變量的值",
            "params": [
                {
                    "key": "name",
                    "name": "會話變量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取用戶會話變量的值\n【name】：會話變量名稱\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "獲取上下文變量的值",
            "params": [
                {
                    "key": "name",
                    "name": "上下文變量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取上下文變量的值\n【name】：上下文變量名稱\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "根據屬性名獲取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式屬性名得到JSON串\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【返回值類型】：對象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "根據屬性名獲取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式屬性名得到JSON串\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【返回值類型】：對象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "根據注入名獲獲取注入對象",
            "params": [
                {
                    "key": "name",
                    "name": "注入名",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取運行時注入的對象\n【name】注入名\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "根據屬性名獲取屬性值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式屬性名獲取屬性值\n【chainedPropName】鍊式名\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "絕對值",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一個數值的絕對值\n【value】：計算數值\n【返回值類型】：數值(System.Double)\n【示例】：abs(-1.5)\n【返回值】： 1.5`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "四捨五入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把數四捨五入為指定精度的數值\n【value1】：數值\n【value2】：四捨五入小數位數\n【返回值類型】：數值(System.Double)\n【示例】：\ nRound(1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "四捨五入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把數四捨五入為指定精度的數值\n【value1】：數值\n【value2】：四捨五入小數位數\n【返回值類型】：數值(System.Double)\n【示例】：round (1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "隨機數",
            "params": [],
            "description": `【功能】：隨機生成大於等於 0.0 且小於 1.0 的偽隨機值\n【返回值類型】：數值(System.Double)\n【示例】：random()\n【返回值】：0.624508349393`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "正弦",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一個數字的正弦值\n【value】：計算數值\n【返回值類型】：數值(System.Double)\n一個以弧度表示的角\n【示例】：sin(1) \n【返回值】：0.84187098`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "餘弦",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一個數字的餘弦值\n【value】：計算數值\n【返回值類型】：數值(System.Double)\n一個以弧度表示的角\n【示例】：cos(3) \n【返回值】：-0.9899924`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "向上舍入",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回大於或等於函數參數，並且與之最接近的整數\n【value】：計算數值\n【返回值類型】：數值(System.Int32)\n【示例】：ceil(3.2) \n【返回值】：4`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "向下舍入",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回小於或等於函數參數，並且與之最接近的整數\n【value】：計算數值\n【返回值類型】：數值(System.Int32)\n【示例】：floor(3.2) \n【返回值】：3`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "銀行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用銀行家舍入標準，把指定數字舍入為最接近的數字\n【value1】：要捨入的數值\n【value2】：要捨入的小數位數\n【返回值類型】：數值(System.Double)\n【示例】：BankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "銀行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用銀行家舍入標準，把指定數字舍入為最接近的數字\n【value1】：要捨入的數值\n【value2】：要捨入的小數位數\n【返回值類型】：數值(System.Double)\n【示例】：bankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb25JMThuUmVzb3VyY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9leHByZXNzaW9uLyIsInNvdXJjZXMiOlsibGliL2kxOG4vRnVuY3Rpb25JMThuUmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNLE9BQU8scUJBQXFCLEdBQUc7SUFDakMsUUFBUSxFQUNSO1FBQ0k7WUFDSSxLQUFLLEVBQUMsSUFBSTtZQUNWLE1BQU0sRUFBQyxjQUFjO1lBQ3JCLFFBQVEsRUFBRSxFQUFFO1lBQ1osYUFBYSxFQUFDLFdBQVc7WUFDekIsTUFBTSxFQUFDLFVBQVU7WUFDakIsVUFBVSxFQUFDLEVBQUU7WUFDYixXQUFXLEVBQUMsRUFBRTtTQUNqQjtRQUNEO1lBQ0ksS0FBSyxFQUFDLFNBQVM7WUFDZixNQUFNLEVBQUMsNEJBQTRCO1lBQ25DLFFBQVEsRUFBQyxFQUFFO1lBQ1gsYUFBYSxFQUFDLGdCQUFnQjtZQUM5QixNQUFNLEVBQUMsVUFBVTtZQUNqQixVQUFVLEVBQUMsRUFBRTtZQUNiLFdBQVcsRUFBQyxFQUFFO1NBQ2pCO1FBQ0Q7WUFDSSxLQUFLLEVBQUMsS0FBSztZQUNYLE1BQU0sRUFBQyxpQkFBaUI7WUFDeEIsUUFBUSxFQUFDLEVBQUU7WUFDWCxhQUFhLEVBQUMsT0FBTztZQUNyQixNQUFNLEVBQUMsVUFBVTtZQUNqQixVQUFVLEVBQUMsRUFBRTtZQUNiLFdBQVcsRUFBQyxFQUFFO1NBQ2pCO1FBQ0Q7WUFDSSxLQUFLLEVBQUMsUUFBUTtZQUNkLE1BQU0sRUFBQyxVQUFVO1lBQ2pCLFFBQVEsRUFBQyxFQUFFO1lBQ1gsYUFBYSxFQUFDLE1BQU07WUFDcEIsTUFBTSxFQUFDLFVBQVU7WUFDakIsVUFBVSxFQUFDLEVBQUU7WUFDYixXQUFXLEVBQUMsRUFBRTtTQUNqQjtRQUNEO1lBQ0ksS0FBSyxFQUFDLEtBQUs7WUFDWCxNQUFNLEVBQUMsTUFBTTtZQUNiLFFBQVEsRUFBQyxFQUFFO1lBQ1gsYUFB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QUN0SixNQUFNLEVBQUUsTUFBTTtZQUNkLFVBQVUsRUFBQyxNQUFNO1lBQ2pCLFdBQVcsRUFBQyxFQUFFO1NBQ2pCO1FBQ0Q7WUFDSSxLQUFLLEVBQUUsYUFBYTtZQUNwQixNQUFNLEVBQUUsT0FBTztZQUNmLFFBQVEsRUFBRTtnQkFDTjtvQkFDSSxLQUFLLEVBQUUsUUFBUTtvQkFDZixNQUFNLEVBQUUsSUFBSTtvQkFDWixNQUFNLEVBQUUsUUFBUTtpQkFDbkI7Z0JBQ0Q7b0JBQ0ksS0FBSyxFQUFFLFFBQVE7b0JBQ2YsTUFBTSxFQUFFLE1BQU07b0JBQ2QsTUFBTSxFQUFFLE9BQU87aUJBQ2xCO2FBQ0o7WUFDRCxhQUFhLEVBQUUsdUlBQXVJO1lBQ3RKLE1BQU0sRUFBRSxNQUFNO1lBQ2QsVUFBVSxFQUFDLGlCQUFpQjtZQUM1QixXQUFXLEVBQUMsRUFBRTtTQUNqQjtLQUNKO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRnVuY3Rpb25JMThuUmVzb3VyY2VzID0geyBcclxuICAgIFwiemgtQ0hTXCI6XHJcbiAgICBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiaWZcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJpZigpXFxue1xcblxcbn1cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjpcImlmIDog5Yik5pat5p2h5Lu2XCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiaWYgZWxzZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcImlmKClcXG57XFxuXFxufVxcbmVsc2VcXG57XFxuXFxufVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6XCJpZiBlbHNlIDog5Yik5pat5p2h5Lu2XCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiZm9yXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiZm9yKDs7KVxcbntcXG5cXG59XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjpcImZvcuW+queOr1wiLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFkdmFuY2VkXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIlwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcInJldHVyblwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcInJldHVybiA7XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjpcIui/lOWbnuaTjeS9nFwiLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFkdmFuY2VkXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIlwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcInZhclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcInZhciBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwi5Y+Y6YeP5a6a5LmJXCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwidHJ1ZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcInRydWUgXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjpcIuato+ehrlwiLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFkdmFuY2VkXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIlwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcImZhbHNlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiZmFsc2UgXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjpcIumUmeivr1wiLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFkdmFuY2VkXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIlwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ1N1YnN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWPluWtkOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcInN0YXJ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6LW35aeL5L2N572uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwibGVuZ3RoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZW/5bqmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Zyo5rqQ5a2X56ym5Liy5Lit5qOA57Si5a2Q5a2X56ym5Liy77yM5a2Q5a2X56ym5Liy5LuO5oyH5a6a55qE5a2X56ym5L2N572u5byA5aeL5LiU5YW35pyJ5oyH5a6a55qE6ZW/5bqmXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJBzdGFydOOAke+8mui1t+Wni+S9jee9rijku44w5byA5aeLKVxcbuOAkGxlbmd0aOOAke+8mumVv+W6plxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ1N1YnN0cmluZyhcIkFCQ0RFRkdcIiwyLDMpXFxu44CQ6L+U5Zue5YC844CR77yaXCJDREVcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN1YlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWPluWtkOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcInN0YXJ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6LW35aeL5L2N572uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwibGVuZ3RoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZW/5bqmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Zyo5rqQ5a2X56ym5Liy5Lit5qOA57Si5a2Q5a2X56ym5Liy77yM5a2Q5a2X56ym5Liy5LuO5oyH5a6a55qE5a2X56ym5L2N572u5byA5aeL5LiU5YW35pyJ5oyH5a6a55qE6ZW/5bqmXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJBzdGFydOOAke+8mui1t+Wni+S9jee9rijku44w5byA5aeLKVxcbuOAkGxlbmd0aOOAke+8mumVv+W6plxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlN1YlN0cmluZyhcIkFCQ0RFRkdcIiwyLDMpXFxu44CQ6L+U5Zue5YC844CR77yaXCJDREVcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ0xlbmd0aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWPluWtl+espuS4sumVv+W6plwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muiOt+WPluaMh+WumuWtl+espuS4sueahOmVv+W6plxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5JbnQzMilcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdMZW5ndGgoXCLor63kuYnljJbooajovr7lvI9cIilcXG7jgJDov5Tlm57lgLzjgJHvvJo2YCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiTGVuZ3RoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Y+W5a2X56ym5Liy6ZW/5bqmXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6I635Y+W5oyH5a6a5a2X56ym5Liy55qE6ZW/5bqmXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrmlbDlgLwoU3lzdGVtLkludDMyKVxcbuOAkOekuuS+i+OAke+8mkxlbmd0aChcIuivreS5ieWMluihqOi+vuW8j1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjZgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJDb250YWluc1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuaYr+WQpuWMheWQq1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcInRhcmdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuebruagh+Wtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIpOaWrea6kOWtl+espuS4suS4reaYr+WQpuWMheWQq+ebruagh+Wtl+espuS4slxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQdGFyZ2V044CR77ya55uu5qCH5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77yaU3lzdGVtLkJvb2xlYW5cXG7jgJDnpLrkvovjgJHvvJpDb250YWlucyhzYWxlc29yZGVyLmNvZGUsXCLooajovr7lvI9cIilcXG7jgJDov5Tlm57lgLzjgJHvvJp0cnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RhcnRzV2l0aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuW8gOWktOaYr1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnm67moIflrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrliKTmlq3mupDlrZfnrKbkuLLmmK/lkKbku6Xnm67moIflrZfnrKbkuLLlvIDlpLRcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHRhcmdldOOAke+8muebruagh+Wtl+espuS4slxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8mlN5c3RlbS5Cb29sZWFuXFxu44CQ56S65L6L44CR77yaU3RhcnRzV2l0aChzYWxlc29yZGVyLmNvZGUsXCLlrZDljZXkvY1cIilcXG7jgJDov5Tlm57lgLzjgJHvvJp0cnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiRW5kc1dpdGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLnu5PlsL7mmK9cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi55uu5qCH5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yik5pat5rqQ5a2X56ym5Liy5piv5ZCm5Lul55uu5qCH5a2X56ym5Liy57uT5bC+XFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJB0YXJnZXTjgJHvvJrnm67moIflrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJpTeXN0ZW0uQm9vbGVhblxcbuOAkOekuuS+i+OAke+8mkVuZHNXaXRoKHNhbGVzb3JkZXIuY29kZSxcXFwi5a2Q5Y2V5L2NXFxcIilcXG7jgJDov5Tlm57lgLzjgJHvvJp0cnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nUmVwbGFjZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWtl+espuS4suabv+aNolwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvbGRWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuiiq+abv+aNouWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm5ld1ZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pu/5o2i5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5rqQ5a2X56ym5Liy5Lit55qEXCLooqvmm7/mjaLlgLxcIuabv+aNouS4ulwi5pu/5o2i5YC8XCJcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkG9sZFZhbHVl44CR77ya6KKr5pu/5o2i5YC8XFxu44CQbmV3VmFsdWXjgJHvvJrmm7/mjaLlgLxcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdSZXBsYWNlKFwiMTIzNDEyXCIsXCIxMlwiLFwiMDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjAwMzQwMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiUmVwbGFjZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWtl+espuS4suabv+aNolwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvbGRWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuiiq+abv+aNouWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm5ld1ZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pu/5o2i5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5rqQ5a2X56ym5Liy5Lit55qEXCLooqvmm7/mjaLlgLxcIuabv+aNouS4ulwi5pu/5o2i5YC8XCJcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkG9sZFZhbHVl44CR77ya6KKr5pu/5o2i5YC8XFxu44CQbmV3VmFsdWXjgJHvvJrmm7/mjaLlgLxcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpSZXBsYWNlKFwiMTIzNDEyXCIsXCIxMlwiLFwiMDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjAwMzQwMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nVG9VcHBlclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIui9rOWkp+WGmVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwhua6kOWtl+espuS4sui9rOaNouS4uuWkp+WGmVxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaU3RyaW5nVG9VcHBlcihcImFiY1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJUb1VwcGVyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi6L2s5aSn5YaZXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5rqQ5a2X56ym5Liy6L2s5o2i5Li65aSn5YaZXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpUb1VwcGVyKFwiYWJjXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCJBQkNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ1RvTG93ZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLovazlsI/lhplcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIbmupDlrZfnrKbkuLLovazmjaLkuLrlsI/lhplcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ1RvTG93ZXIoXCJBQkNcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcImFiY1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiVG9Mb3dlclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIui9rOWwj+WGmVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwhua6kOWtl+espuS4sui9rOaNouS4uuWwj+WGmVxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVG9Mb3dlcihcIkFCQ1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiYWJjXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdJbmRleE9mXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi6I635Y+W6aaW5Liq5Yy56YWN5a2X56ym5Liy55qE57Si5byVXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnm67moIflrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmupDlrZfnrKbkuLLkuK3vvIzmo4DntKLnm67moIflrZfnrKbkuLLvvIzmib7liLDnrKzkuIDkuKrljLnphY3nmoTlrZfnrKbkuLLlkI7vvIzov5Tlm57lhbbntKLlvJXkvY3nva4o5LuOMOW8gOWniynjgILlpoLmnpzmnKrmib7liLDnm67moIflrZfnrKbkuLLvvIzliJnov5Tlm54tMe+8jOWmguaenOebruagh+Wtl+espuS4suS4uuepuuS4su+8jOi/lOWbnjDvvIzlpoLmnpzljp/lrZfnrKbkuLLkuLpudWxs77yM5YiZ6L+U5ZueLTFcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHRhcmdldOOAke+8muebruagh+Wtl+espuS4slxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaVsOWAvChTeXN0ZW0uSW50MzIpXFxu44CQ56S65L6L44CR77yaU3RyaW5nSW5kZXhPZihcIjEyMDAxMjM0MDEyXCIsXCIwMVwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjNcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdJbmRleE9mKFwiMTIwMDIzMjNcIixcIjM0XCIpXFxu44CQ6L+U5Zue5YC844CR77yaLTFcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdJbmRleE9mKFwiMTIwMDExXCIsXCJcIilcXG7jgJDov5Tlm57lgLzjgJHvvJowYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiSW5kZXhPZlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuiOt+WPlummluS4quWMuemFjeWtl+espuS4sueahOe0ouW8lVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi55uu5qCH5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Zyo5rqQ5a2X56ym5Liy5Lit77yM5qOA57Si55uu5qCH5a2X56ym5Liy77yM5om+5Yiw56ys5LiA5Liq5Yy56YWN55qE5a2X56ym5Liy5ZCO77yM6L+U5Zue5YW257Si5byV5L2N572uKOS7jjDlvIDlp4sp44CC5aaC5p6c5pyq5om+5Yiw55uu5qCH5a2X56ym5Liy77yM5YiZ6L+U5ZueLTHvvIzlpoLmnpznm67moIflrZfnrKbkuLLkuLrnqbrkuLLvvIzov5Tlm54w77yM5aaC5p6c5Y6f5a2X56ym5Liy5Li6bnVsbO+8jOWImei/lOWbni0xXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJB0YXJnZXTjgJHvvJrnm67moIflrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrmlbDlgLwoU3lzdGVtLkludDMyKVxcbuOAkOekuuS+i+OAke+8mkluZGV4T2YoXCIxMjAwMTIzNDAxMlwiLFwiMDFcIilcXG7jgJDov5Tlm57lgLzjgJHvvJozXFxu44CQ56S65L6L44CR77yaSW5kZXhPZihcIjEyMDAyMzIzXCIsXCIzNFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mi0xXFxu44CQ56S65L6L44CR77yaSW5kZXhPZihcIjEyMDAxMVwiLFwiXCIpXFxu44CQ6L+U5Zue5YC844CR77yaMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ0xhc3RJbmRleE9mXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi6I635Y+W5pyA5ZCO5LiA5Liq5Yy56YWN5a2X56ym5Liy55qE57Si5byVXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnm67moIflrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmupDlrZfnrKbkuLLkuK3vvIzmo4DntKLnm67moIflrZfnrKbkuLLvvIzmib7liLDmnIDlkI7kuIDkuKrljLnphY3nmoTlrZfnrKbkuLLlkI7vvIzov5Tlm57lhbbntKLlvJXkvY3nva4o5LuOMOW8gOWniynjgILlpoLmnpzmnKrmib7liLDnm67moIflrZfnrKbkuLLvvIzliJnov5Tlm54tMe+8jOWmguaenOebruagh+Wtl+espuS4suS4uuepuuS4su+8jOi/lOWbnjDvvIzlpoLmnpzljp/lrZfnrKbkuLLkuLpudWxs77yM5YiZ6L+U5ZueLTFcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHZhbHVl44CR77ya55uu5qCH5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5JbnQzMilcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdMYXN0SW5kZXhPZihcIjEyMDAxMjM0MDEyXCIsXCIwMVwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjhcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdMYXN0SW5kZXhPZihcIjEyMDAyMzIzXCIsXCIzNFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mi0xXFxu44CQ56S65L6L44CR77yaU3RyaW5nTGFzdEluZGV4T2YoXCIxMjAwMTFcIixcIlwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJMYXN0SW5kZXhPZlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuiOt+WPluacgOWQjuS4gOS4quWMuemFjeWtl+espuS4sueahOe0ouW8lVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi55uu5qCH5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Zyo5rqQ5a2X56ym5Liy5Lit77yM5qOA57Si55uu5qCH5a2X56ym5Liy77yM5om+5Yiw5pyA5ZCO5LiA5Liq5Yy56YWN55qE5a2X56ym5Liy5ZCO77yM6L+U5Zue5YW257Si5byV5L2N572uKOS7jjDlvIDlp4sp44CC5aaC5p6c5pyq5om+5Yiw55uu5qCH5a2X56ym5Liy77yM5YiZ6L+U5ZueLTHvvIzlpoLmnpznm67moIflrZfnrKbkuLLkuLrnqbrkuLLvvIzov5Tlm54w77yM5aaC5p6c5Y6f5a2X56ym5Liy5Li6bnVsbO+8jOWImei/lOWbni0xXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJB2YWx1ZeOAke+8muebruagh+Wtl+espuS4slxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaVsOWAvChTeXN0ZW0uSW50MzIpXFxu44CQ56S65L6L44CR77yaTGFzdEluZGV4T2YoXCIxMjAwMTIzNDAxMlwiLFwiMDFcIilcXG7jgJDov5Tlm57lgLzjgJHvvJo4XFxu44CQ56S65L6L44CR77yaTGFzdEluZGV4T2YoXCIxMjAwMjMyM1wiLFwiMzRcIilcXG7jgJDov5Tlm57lgLzjgJHvvJotMVxcbuOAkOekuuS+i+OAke+8mkxhc3RJbmRleE9mKFwiMTIwMDExXCIsXCJcIilcXG7jgJDov5Tlm57lgLzjgJHvvJowYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nVHJpbVN0YXJ0XCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Yig6Zmk5aS06YOo56m65qC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yig6Zmk5rqQ5a2X56ym5Liy55qE5aS06YOo56m65qC8XFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdUcmltU3RhcnQoXCIgICAgQUJDXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCJBQkNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlRyaW1TdGFydFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIoOmZpOWktOmDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIoOmZpOa6kOWtl+espuS4sueahOWktOmDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVHJpbVN0YXJ0KFwiICAgIEFCQ1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdUcmltRW5kXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Yig6Zmk5bC+6YOo56m65qC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yig6Zmk5rqQ5a2X56ym5Liy55qE5bC+6YOo56m65qC8XFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdUcmltRW5kKFwiQUJDICAgIFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJUcmltRW5kXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Yig6Zmk5bC+6YOo56m65qC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yig6Zmk5rqQ5a2X56ym5Liy55qE5bC+6YOo56m65qC8XFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpUcmltRW5kKFwiQUJDICAgIFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdUcmltXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Yig6Zmk5aS05bC+6YOo56m65qC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yig6Zmk5rqQ5a2X56ym5Liy55qE5aS05bC+6YOo56m65qC8XFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdUcmltKFwiICAgIEFCQyAgICBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIkFCQ1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiVHJpbVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIoOmZpOWktOWwvumDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIoOmZpOa6kOWtl+espuS4sueahOWktOWwvumDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVHJpbShcIiAgICBBQkMgICAgXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCJBQkNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkNyZWF0ZUd1aWRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLllK/kuIDmoIfor4bnrKZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muiOt+WPluWUr+S4gOagh+ivhuespkd1aWRcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpDcmVhdGVHdWlkKClcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjc3MjJBNzkzLTE0REYtNDlDRC1CN0U3LURGNDk4N1lZRDJcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ0FkZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWtl+espuS4suebuOWKoFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmaXJzdFN0clwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuesrOS4gOS4quWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwic2Vjb25kU3RyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi56ys5LqM5Liq5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG6Iul5bmy5a2X56ym5Liy5ou85o6l5oiQ5LiA5Liq5paw5a2X56ym5Liy77yM5pyA5aSa5pSv5oyBMTDkuKrlrZfnrKbkuLLmi7zmjqXvvIzmnIDlsJEy5Liq77yb57yW6L6R5Zmo5Lit6buY6K6k5o+S5YWl5Lik5Liq77yM5aSa5Liq5a2X56ym5Liy5Y+v5omL5Yqo5re75YqgXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaU3RyaW5nQWRkKFwiSGVsbG9cIixcIldvcmxkXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCJIZWxsb1dvcmRcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkFkZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWtl+espuS4suebuOWKoFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmaXJzdFN0clwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuesrOS4gOS4quWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwic2Vjb25kU3RyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi56ys5LqM5Liq5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG6Iul5bmy5a2X56ym5Liy5ou85o6l5oiQ5LiA5Liq5paw5a2X56ym5Liy77yM5pyA5aSa5pSv5oyBMTDkuKrlrZfnrKbkuLLmi7zmjqXvvIzmnIDlsJEy5Liq77yb57yW6L6R5Zmo5Lit6buY6K6k5o+S5YWl5Lik5Liq77yM5aSa5Liq5a2X56ym5Liy5Y+v5omL5Yqo5re75YqgXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaQWRkKFwiSGVsbG9cIixcIldvcmxkXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCJIZWxsb1dvcmRcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN1bUJ5UHJvcFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuaMieWxnuaAp+axguWSjFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlrp7kvZPpm4blkIjlsZ7mgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuexu+Wei+WxnuaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mue7n+iuoeafkOS4gOWxnuaAp+eahOWSjFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAke+8muWvueW6lOWunuS9k+mbhuWQiOeahOWxnuaAp+WQjSzpk77lvI/lvaLlvI/nu4Tnu4flnKjkuIDotbfnmoTlsZ7mgKflkI0s5L6L5aaCOk9yZGVyLk9yZGVySXRlbXNcXG7jgJBwcm9wZXJ0eU5hbWXjgJHvvJrnsbvlnovlsZ7mgKflkI07XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5Eb3VibGUpXFxu44CQ56S65L6L44CR77yaU3VtQnlQcm9wKFwiT3JkZXIuT3JkZXJJdGVtc1wiLFwiUXVhbnRpdHlcIilcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkNvdW50QnlQcm9wXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5YiX6KGM5pWwXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWunuS9k+mbhuWQiOWxnuaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi57G75Z6L5bGe5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya57uf6K6h5oyH5a6a5a2X5q615omA5Zyo6KGo55qE6K6w5b2V5pWwXFxu44CQY2hhaW5lZFByb3BOYW1l44CR77ya5a+55bqU5a6e5L2T6ZuG5ZCI55qE5bGe5oCn5ZCNLOmTvuW8j+W9ouW8j+e7hOe7h+WcqOS4gOi1t+eahOWxnuaAp+WQjSzkvovlpoLvvJpPcmRlci5PcmRlckl0ZW1zXFxu44CQcHJvcGVydHlOYW1l44CR77ya57G75Z6L5bGe5oCn5ZCNXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5JbnQzMik7XFxu44CQ56S65L6L44CR77yaQ291bnRCeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkF2Z0J5UHJvcFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIl+W5s+Wdh+WAvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlrp7kvZPpm4blkIjlsZ7mgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuexu+Wei+WxnuaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mue7n+iuoeafkOS4gOaVsOWAvOWIl+eahOW5s+Wdh+WAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAke+8muWvueW6lOWunuS9k+mbhuWQiOeahOWxnuaAp+WQjSzpk77lvI/lvaLlvI/nu4Tnu4flnKjkuIDotbfnmoTlsZ7mgKflkI0s5L6L5aaCOk9yZGVyLk9yZGVySXRlbXNcXG7jgJBwcm9wZXJ0eU5hbWXjgJHvvJrnsbvlnovlsZ7mgKflkI1cXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrmlbDlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpBdmdCeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIk1heEJ5UHJvcFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIl+acgOWkp+WAvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlrp7kvZPpm4blkIjlsZ7mgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuexu+Wei+WxnuaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mue7n+iuoeafkOS4gOaVsOWAvOWIl+eahOacgOWkp+WAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAke+8muWvueW6lOWunuS9k+mbhuWQiOeahOWxnuaAp+WQjSzpk77lvI/lvaLlvI/nu4Tnu4flnKjkuIDotbfnmoTlsZ7mgKflkI0s5L6L5aaCOk9yZGVyLk9yZGVySXRlbXNcXG7jgJBwcm9wZXJ0eU5hbWXjgJHvvJrnsbvlnovlsZ7mgKflkI1cXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrmlbDlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpNYXhCeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIk1pbkJ5UHJvcFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIl+acgOWwj+WAvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlrp7kvZPpm4blkIjlsZ7mgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuexu+Wei+WxnuaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mue7n+iuoeafkOS4gOaVsOWAvOWIl+eahOacgOWwj+WAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAke+8muWvueW6lOWunuS9k+mbhuWQiOeahOWxnuaAp+WQjSzpk77lvI/lvaLlvI/nu4Tnu4flnKjkuIDotbfnmoTlsZ7mgKflkI0s5L6L5aaCOk9yZGVyLk9yZGVySXRlbXNcXG7jgJBwcm9wZXJ0eU5hbWXjgJHvvJrnsbvlnovlsZ7mgKflkI1cXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrmlbDlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpNaW5CeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJJc051bGxcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5piv56m65YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuajgOa1i+WvueixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIpOaWreaMh+WumueahOWvueixoeaYr+WQpuS4uuepuuWAvChudWxsKVxcbuOAkG9iauOAke+8muimgeajgOa1i+eahOWvueixoVxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muW4g+WwlOWAvChTeXN0ZW0uQm9vbGVhbilcXG7jgJDnpLrkvovjgJHvvJpJc051bGwoXCLor63kuYnljJbooajovr7lvI9cIilcXG7jgJDov5Tlm57lgLzjgJHvvJpGYWxzZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJJc051bGxPcldoaXRlU3BhY2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5piv56m65LiyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuW+heWIpOaWreWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIpOaWreaMh+WumueahOWtl+espuS4suaYr+WQpuS4um51bGzjgIHnqbrov5jmmK/ku4XmnInnqbrmoLznu4TmiJBcXG7jgJBvYmrjgJHvvJropoHliKTmlq3nmoTlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrluIPlsJTlgLwoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CR77yaSXNOdWxsT3JXaGl0ZVNwYWNlKFwi6K+t5LmJ5YyW6KGo6L6+5byPXCIpXFxu44CQ6L+U5Zue5YC844CR77yaRmFsc2VcXG7jgJDnpLrkvovjgJHvvJpJc051bGxPcldoaXRlU3BhY2UobnVsbClcXG7jgJDov5Tlm57lgLzjgJHvvJpUcnVlXFxu44CQ56S65L6L44CR77yaXFxuSXNOdWxsT3JXaGl0ZVNwYWNlKFwiIFwiKeOAkOi/lOWbnuWAvOOAke+8mlRydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJFc3RpbWF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiSXNOYU5cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6Z2e5pWw5a2XXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuajgOa1i+WvueixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIpOaWreaMh+WumueahOWvueixoeaYr+WQpuWPr+S7pei9rOaNouaIkOaVsOWtlyhTeXN0ZW0uRG91YmxlKVxcbuOAkG9iauOAke+8muimgeajgOa1i+eahOWvueixoVxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muW4g+WwlOWAvChTeXN0ZW0uQm9vbGVhbilcXG7jgJDnpLrkvovjgJHvvJpJc05hTihcIuivreS5ieWMluihqOi+vuW8j1wiKeOAkOi/lOWbnuWAvOOAke+8mlRydWVcXG7jgJDnpLrkvovjgJHvvJpJc05hTigxMi4zKeOAkOi/lOWbnuWAvOOAke+8mkZhbHNlXFxu44CQ56S65L6L44CR77yaXFxuSXNOYU4oXCIxMjNcIinjgJDov5Tlm57lgLzjgJHvvJpGYWxzZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJJc051bWJlclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmK/mlbDlrZdcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qOA5rWL5a+56LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yik5pat5oyH5a6a55qE5a+56LGh5piv5ZCm5Y+v5Lul6L2s5o2i5oiQ5pWw5a2XKFN5c3RlbS5Eb3VibGUpXFxu44CQb2Jq44CR77ya6KaB5qOA5rWL55qE5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5biD5bCU5YC8KFN5c3RlbS5Cb29sZWFuKVxcbuOAkOekuuS+i+OAke+8mklzTnVtYmVyKFxcXCLor63kuYnljJbooajovr7lvI9cXFwiKeOAkOi/lOWbnuWAvOOAke+8mkZhbHNlXFxu44CQ56S65L6L44CR77yaSXNOdW1iZXIoMTIuMynjgJDov5Tlm57lgLzjgJHvvJpUcnVlXFxu44CQ56S65L6L44CR77yaXFxuSXNOdW1iZXIoXCIxMjNcIinjgJDov5Tlm57lgLzjgJHvvJpUcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIklzRXhpc3RSZWNvcmRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pyJ5peg562J5LqO5Yy56YWN5a2X56ymXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumTvuW8j+WQjeensFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bGe5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJtYXRjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuemFjeWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muagueaNrumTvuW8j+WQjeensOWIpOaWreivpeihqOeahOaMh+WumuWtl+autembhuWQiOS4reaYr+WQpuWtmOWcqOetieS6juWMuemFjeWtl+espueahOWAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkemTvuW8j+WQjeensFxcbuOAkHByb3BlcnR5TmFtZeOAkeWxnuaAp+WQjVxcbuOAkG1hdGNo44CR5Yy56YWN5YC8XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a+56LGhKFN5c3RlbS5Cb29sZWFuKVxcbuOAkOekuuS+i+OAke+8mklzRXhpc3RSZWNvcmQoXCJzYWxlc29yZGVyLml0ZW1zXCIsXCJjb2RlXCIsXCJsY1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mkZhbHNlL1RydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJFc3RpbWF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGlzdEdyZWF0ZXJUaGFuXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacieaXoOWkp+S6juWMuemFjeWtl+esplwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpk77lvI/lkI3np7BcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWxnuaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwibWF0Y2hcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLnphY3lgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmoLnmja7pk77lvI/lkI3np7DliKTmlq3or6XooajnmoTmjIflrprlrZfmrrXpm4blkIjkuK3mmK/lkKblrZjlnKjlpKfkuo7ljLnphY3lrZfnrKbnmoTlgLxcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHpk77lvI/lkI3np7BcXG7jgJBwcm9wZXJ0eU5hbWXjgJHlsZ7mgKflkI1cXG7jgJBtYXRjaOOAkeWMuemFjeWAvFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWvueixoShTeXN0ZW0uQm9vbGVhbilcXG7jgJDnpLrkvovjgJHvvJpMaXN0R3JlYXRlclRoYW4oXCJzYWxlc29yZGVyLml0ZW1zXCIsXCJudW1cIiwxMDApXFxu44CQ6L+U5Zue5YC844CR77yaRmFsc2UvVHJ1ZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMaXN0TGVzc1RoYW5cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pyJ5peg5bCP5LqO5Yy56YWN5a2X56ymXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumTvuW8j+WQjeensFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bGe5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJtYXRjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuemFjeWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muagueaNrumTvuW8j+WQjeensOWIpOaWreivpeihqOeahOaMh+WumuWtl+autembhuWQiOS4reaYr+WQpuWtmOWcqOWwj+S6juWMuemFjeWtl+espueahOWAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkemTvuW8j+WQjeensFxcbuOAkHByb3BlcnR5TmFtZeOAkeWxnuaAp+WQjVxcbuOAkG1hdGNo44CR5Yy56YWN5YC8XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a+56LGhKFN5c3RlbS5Cb29sZWFuKVxcbuOAkOekuuS+i+OAke+8mkxpc3RMZXNzVGhhbihcInNhbGVzb3JkZXIuaXRlbXNcIixcIm51bVwiLDEwMClcXG7jgJDov5Tlm57lgLzjgJHvvJpGYWxzZS9UcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxpc3RTdGFydFdpdGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pyJ5peg5byA5aS05piv5Yy56YWN5a2X56ymXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumTvuW8j+WQjeensFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bGe5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJtYXRjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuemFjeWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5qC55o2u6ZO+5byP5ZCN56ew5Yik5pat6K+l6KGo55qE5oyH5a6a5a2X5q616ZuG5ZCI5Lit5piv5ZCm5a2Y5Zyo5byA5aS05piv5Yy56YWN5a2X56ym55qE5YC8XFxu44CQY2hhaW5lZFByb3BOYW1l44CR6ZO+5byP5ZCN56ewXFxu44CQcHJvcGVydHlOYW1l44CR5bGe5oCn5ZCNXFxu44CQbWF0Y2jjgJHljLnphY3lgLxcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlr7nosaEoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CR77yaTGlzdFN0YXJ0V2l0aChcInNhbGVzb3JkZXIuaXRlbXNcIixcImNvZGVcIixcImxjXCIpXFxu44CQ6L+U5Zue5YC844CR77yaRmFsc2UvVHJ1ZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMaXN0RW5kV2l0aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnInml6Dnu5PlsL7mmK/ljLnphY3lrZfnrKZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZO+5byP5ZCN56ewXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsZ7mgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1hdGNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy56YWN5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5qC55o2u6ZO+5byP5ZCN56ew5Yik5pat6K+l6KGo55qE5oyH5a6a5a2X5q616ZuG5ZCI5Lit5piv5ZCm5a2Y5Zyo57uT5bC+5piv5Yy56YWN5a2X56ym55qE5YC8XFxu44CQY2hhaW5lZFByb3BOYW1l44CR6ZO+5byP5ZCN56ewXFxu44CQcHJvcGVydHlOYW1l44CR5bGe5oCn5ZCNXFxu44CQbWF0Y2jjgJHljLnphY3lgLxcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlr7nosaEoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CR77yaTGlzdEVuZFdpdGgoXCJzYWxlc29yZGVyLml0ZW1zXCIsXCJjb2RlXCIsXCJsY1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mkZhbHNlL1RydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJFc3RpbWF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRGF0ZVRpbWVBZGREYXlzXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuWinuWKoOaMh+WumuWkqeaVsFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWinuWKoOWkqeaVsFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWcqOaMh+WumueahOaXpeacn+aXtumXtOS4iuWinuWKoOaMh+WumueahOWkqeaVsFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJB2YWx1ZeOAke+8muWinuWKoOWkqeaVsFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaXpeacn+aXtumXtChTeXN0ZW0uRGF0ZVRpbWUpXFxu44CQ56S65L6L44CR77yaRGF0ZVRpbWVBZGREYXlzKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiLDIpXFxu44CQ6L+U5Zue5YC844CROjIwMTktMDItMDFUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRGF0ZVRpbWVBZGRZZWFyc1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLlop7liqDmjIflrprlubTmlbBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlop7liqDlubTmlbBcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmjIflrprnmoTml6XmnJ/ml7bpl7TkuIrlop7liqDmjIflrprnmoTlubTmlbBcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQdmFsdWXjgJHvvJrlop7liqDlubTmlbBcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrml6XmnJ/ml7bpl7QoU3lzdGVtLkRhdGVUaW1lKVxcbuOAkOekuuS+i+OAke+8mkRhdGVUaW1lQWRkWWVhcnMoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIsMilcXG7jgJDov5Tlm57lgLzjgJE6MjAyMS0wMS0zMFQxMDowMCswODowMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJEYXRlVGltZUFkZE1vbnRoc1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLlop7liqDmjIflrprmnIjmlbBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlop7liqDmnIjmlbBcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmjIflrprnmoTml6XmnJ/ml7bpl7TkuIrlop7liqDmjIflrprnmoTmnIjmlbBcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQdmFsdWXjgJHvvJrlop7liqDmnIjmlbBcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrml6XmnJ/ml7bpl7QoU3lzdGVtLkRhdGVUaW1lKVxcbuOAkOekuuS+i+OAke+8mkRhdGVUaW1lQWRkTW9udGhzKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiLDEpXFxu44CQ6L+U5Zue5YC844CROjIwMTktMDItMjhUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0Rmlyc3REYXlPZk1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuiOt+WPluaMh+WumuaXpeacn+aXtumXtOaJgOWcqOaciOesrOS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6I635Y+W5oyH5a6a5pel5pyf5pe26Ze05YC85omA5Zyo5pyI55qE56ys5LiA5aSp55qE5pel5pyfXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaXpeacn+aXtumXtChTeXN0ZW0uRGF0ZVRpbWUpXFxu44CQ56S65L6L44CR77yaR2V0Rmlyc3REYXlPZk1vbnRoKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAkToyMDE5LTAxLTAxVDEwOjAwKzA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldExhc3REYXlPZk1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuiOt+WPluaMh+WumuaXpeacn+aXtumXtOaJgOWcqOaciOacgOWQjuS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6I635Y+W5oyH5a6a5pel5pyf5pe26Ze05YC85omA5Zyo5pyI55qE5pyA5ZCO5LiA5aSp55qE5pel5pyfXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaXpeacn+aXtumXtChTeXN0ZW0uRGF0ZVRpbWUpXFxu44CQ56S65L6L44CR77yaR2V0TGFzdERheU9mTW9udGgoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CROjIwMTktMDEtMzFUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0RGF0ZVRpbWVOb3dcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6I635Y+W5b2T5YmN5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrojrflj5blvZPliY3nmoTml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrml6XmnJ/ml7bpl7QoU3lzdGVtLkRhdGVUaW1lKVxcbuOAkOekuuS+i+OAke+8mkdldERhdGVUaW1lTm93KClcXG7jgJDov5Tlm57lgLzjgJE6MjAxOS0wMS0zMFQxMjowMDowMC4wMDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiQ29tcGFyZURhdGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5q+U6L6D5Lik5Liq5pe26Ze0XCIsIFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJzdHIxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0MVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwic3RyMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtDJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmr5TovoPkuKTkuKrml7bpl7TlgLzvvIzlubbov5Tlm57kuIDkuKrlgLzvvIzmraTlgLzooajnpLrnrKzkuIDkuKrml7bpl7TmmK/ml6nkuo7jgIHnrYnkuo7ov5jmmK/mmZrkuo7nrKzkuozkuKrml7bpl7TnmoTmlbTmlbBcXG7jgJBzdHIx44CR77ya5pel5pyf5pe26Ze0MVxcbuOAkHN0cjLjgJHvvJrml6XmnJ/ml7bpl7QyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5pbnQzMilcXG5cXHTml6XmnJ8x5pep5LqO5pel5pyfMu+8jOi/lOWbni0xXFxuXFx05pel5pyfMeetieS6juaXpeacnzLvvIzov5Tlm54wXFxuXFx05pel5pyfMeaZmuS6juaXpeacnzLvvIzov5Tlm54xXFxu44CQ56S65L6L44CR77yaQ29tcGFyZURhdGUoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIsXCIyMDE5LTAyLTAxVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaLTFgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRm9ybWF0RGF0ZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmoLzlvI/ljJblvZPliY3ml6XmnJ9cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qC85byP5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5L2/55So5oyH5a6a55qE5qC85byP5bCG5b2T5YmN5pel5pyf5pe26Ze05YC86L2s5o2i5Li65YW2562J5pWI55qE5a2X56ym5Liy6KGo56S65b2i5byPXFxu44CQZm9ybWF044CR77ya5qC85byP5LiyXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRm9ybWF0RGF0ZShcInl5eXktTU0tZGQgSEg6bW06c3NcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMzAgMDE6MDA6MDBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGb3JtYXREZWZpbmVEYXRlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuagvOW8j+WMluaMh+WumuaXpeacn1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmb3JtYXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmoLzlvI/kuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrkvb/nlKjmjIflrprnmoTmoLzlvI/lsIbmjIflrprnmoTml6XmnJ/ml7bpl7TlgLzovazmjaLkuLrlhbbnrYnmlYjnmoTlrZfnrKbkuLLooajnpLrlvaLlvI9cXG7jgJBmb3JtYXTjgJHvvJrmoLzlvI/kuLJcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRm9ybWF0RGVmaW5lRGF0ZShcInl5eXktTU0tZGQgSEg6bW06c3NcIixcIjIwMTktMDEtMzAgMDE6MDA6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMzAgMDE6MDA6MDBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb2RheVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLku4rlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS7iuWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi5b2i5byP77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5LuK5aSpXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRvZGF5KFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0zMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlllc3RlcmRheVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmKjlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOaYqOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi5b2i5byP77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5pio5aSpXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlllc3RlcmRheShcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMjlcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb21vcnJvd1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmI7lpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOaYjuWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi5b2i5byP77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5piO5aSpXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRvbW9ycm93KFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0zMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRoaXNZZWFyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacrOW5tFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5pys5bm077yM5qC85byP5Li6XCJ5eXl5XCLlvaLlvI/vvIzlpoLmnpzkuI3kvKDpgJLlj4LmlbDvvIzliJnpu5jorqTov5Tlm57lvZPliY3ns7vnu5/ml6XmnJ/nmoTmnKzlubRcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVGhpc1llYXIoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Y675bm0XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTljrvlubTvvIzmoLzlvI/kuLpcInl5eXlcIuW9ouW8j++8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOWOu+W5tFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0WWVhcihcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMThcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJOZXh0WWVhclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmI7lubRcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOaYjuW5tO+8jOagvOW8j+S4ulwieXl5eVwi5b2i5byP77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5piO5bm0XFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mk5leHRZZWFyKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAyMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRoaXNNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnKzmnIhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOacrOaciO+8jOagvOW8j+S4ulwiTU1cIuW9ouW8j++8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOacrOaciFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpUaGlzTW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdE1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuS4iuaciFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5LiK5pyI77yM5qC85byP5Li6XCJNTVwi5b2i5byP77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5LiK5pyIXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkxhc3RNb250aChcIjIwMTktMDItMzAgMDE6MDA6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJOZXh0TW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiL5pyIXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIvmnIjvvIzmoLzlvI/kuLpcIk1NXCLlvaLlvI/vvIzlpoLmnpzkuI3kvKDpgJLlj4LmlbDvvIzliJnpu5jorqTov5Tlm57lvZPliY3ns7vnu5/ml6XmnJ/nmoTkuIvmnIhcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTmV4dE1vbnRoKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMlwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRoaXNXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacrOWRqFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf5Zyo5pys5bm055qE56ys5Yeg5ZGo77yM5qC85byP5Li6XCJ3d1wi5b2i5byP77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf5Zyo5pys5bm055qE56ys5Yeg5ZGo77yM5rOo5oSP5aaC5p6cMTLmnIjlupXnmoTml6XmnJ/kuI7kuIvkuIDlubTnmoQx5pyIMeaXpeWcqOWQjOS4gOaYn+acn++8jOWImei/lOWbnuesrOS4gOWRqFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpUaGlzV2VlayhcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjVcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrlkahcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iuWRqO+8jOagvOW8j+S4ulwid3dcIuW9ouW8j++8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOS4iuWRqO+8jOazqOaEj+WmguaenOaMh+WumuaXpeacn+WcqOS7iuW5tOesrDHlkajvvIzliJnkuIrlkajkuLrljrvlubTnmoTmnIDlkI7kuIDlkahcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdFdlZWsoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCI0XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTmV4dFdlZWtcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiL5ZGoXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIvlkajvvIzmoLzlvI/kuLpcInd3XCLlvaLlvI/vvIzlpoLmnpzkuI3kvKDpgJLlj4LmlbDvvIzliJnpu5jorqTov5Tlm57lvZPliY3ns7vnu5/ml6XmnJ/nmoTkuIvlkajvvIzms6jmhI/lpoLmnpzmjIflrprml6XmnJ/lnKjku4rlubTmnIDlkI7kuIDlkajvvIzliJnkuIvlkajkuLoxXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mk5leHRXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiNlwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkRheU9mV2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmJ/mnJ/lh6BcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+aYr+acrOWRqOeahOaYn+acn+WHoO+8jOagvOW8j+S4ulwiblwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf5piv5pys5ZGo55qE5pif5pyf5Yeg77yM5rOo5oSP5LiN5piv6L+U5Zue6Iux5paH57yp5YaZ77yM6ICM5piv6L+U5Zue5pWw5a2X5b2i5byP44CC5oyJ54Wn5Lit5Zu95Lmg5oOv77yM5pif5pyf5LiA5Li65q+P5ZGo6aaW5pel77yM6L+U5Zue5YC85Li6Me+8jOaYn+acn+aXpeS4uuavj+WRqOWwvuaXpe+8jOi/lOWbnuWAvOS4ujdcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRGF5T2ZXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiM1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacrOWRqOesrOS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5pys5ZGo56ys5LiA5aSp77yM5qC85byP5Li6XCJ5eXl5LU1NLWRkXCLvvIzlpoLmnpzkuI3kvKDpgJLlj4LmlbDvvIzliJnpu5jorqTov5Tlm57lvZPliY3ns7vnu5/ml6XmnJ/nmoTmnKzlkajnrKzkuIDlpKnjgILmjInnhafkuK3lm73kuaDmg6/vvIzmmJ/mnJ/kuIDkuLrmr4/lkajpppbml6XvvIzmmJ/mnJ/ml6XkuLrmr4/lkajlsL7ml6VcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRmlyc3REYXlPZldlZWsoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAxLTI4XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mV2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnKzlkajmnIDlkI7kuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOacrOWRqOacgOWQjuS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5pys5ZGo56ys5LiA5aSp44CC5oyJ54Wn5Lit5Zu95Lmg5oOv77yM5pif5pyf5LiA5Li65q+P5ZGo6aaW5pel77yM5pif5pyf5pel5Li65q+P5ZGo5bC+5pelXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkZpcnN0RGF5T2ZXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMi0wM1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZMYXN0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrlkajnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iuWRqOesrOS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5LiK5ZGo56ys5LiA5aSp44CC5oyJ54Wn5Lit5Zu95Lmg5oOv77yM5pif5pyf5LiA5Li65q+P5ZGo6aaW5pel77yM5pif5pyf5pel5Li65q+P5ZGo5bC+5pelXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkZpcnN0RGF5T2ZMYXN0V2VlayhcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMjFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZMYXN0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrlkajmnIDlkI7kuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iuWRqOacgOWQjuS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5LiK5ZGo5pyA5ZCO5LiA5aSp44CC5oyJ54Wn5Lit5Zu95Lmg5oOv77yM5pif5pyf5LiA5Li65q+P5ZGo6aaW5pel77yM5pif5pyf5pel5Li65q+P5ZGo5bC+5pelXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkxhc3REYXlPZkxhc3RXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0yN1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZOZXh0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIvlkajnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4i+WRqOesrOS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5LiL5ZGo56ys5LiA5aSp44CC5oyJ54Wn5Lit5Zu95Lmg5oOv77yM5pif5pyf5LiA5Li65q+P5ZGo6aaW5pel77yM5pif5pyf5pel5Li65q+P5ZGo5bC+5pelXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkZpcnN0RGF5T2ZOZXh0V2VlayhcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDItMDRcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZOZXh0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIvlkajmnIDlkI7kuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4i+WRqOacgOWQjuS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5LiL5ZGo5pyA5ZCO5LiA5aSp44CC5oyJ54Wn5Lit5Zu95Lmg5oOv77yM5pif5pyf5LiA5Li65q+P5ZGo6aaW5pel77yM5pif5pyf5pel5Li65q+P5ZGo5bC+5pelXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkxhc3REYXlPZk5leHRXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMi0xMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnKzmnIjnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOacrOaciOesrOS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5pys5pyI56ys5LiA5aSp44CCXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkZpcnN0RGF5T2ZNb250aChcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMDFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnKzmnIjmnIDlkI7kuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOacrOaciOacgOWQjuS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5pys5pyI5pyA5ZCO5LiA5aSp44CCXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkxhc3REYXlPZk1vbnRoKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0zMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZMYXN0TW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiK5pyI56ys5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIrmnIjnrKzkuIDlpKnvvIzmoLzlvI/kuLpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOS4iuaciOesrOS4gOWkqeOAglxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTGFzdE1vbnRoKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOC0xMi0wMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZkxhc3RNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrmnIjmnIDlkI7kuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aXtumXtFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iuaciOacgOWQjuS4gOWkqe+8jOagvOW8j+S4ulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5Lyg6YCS5Y+C5pWw77yM5YiZ6buY6K6k6L+U5Zue5b2T5YmN57O757uf5pel5pyf55qE5LiK5pyI5pyA5ZCO5LiA5aSp44CCXFxu44CQZGF0ZeOAke+8muaXpeacn+aXtumXtFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkxhc3REYXlPZkxhc3RNb250aChcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTgtMTItMzFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGaXJzdERheU9mTmV4dE1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuS4i+aciOesrOS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5LiL5pyI56ys5LiA5aSp77yM5qC85byP5Li6XCJ5eXl5LU1NLWRkXCLvvIzlpoLmnpzkuI3kvKDpgJLlj4LmlbDvvIzliJnpu5jorqTov5Tlm57lvZPliY3ns7vnu5/ml6XmnJ/nmoTkuIvmnIjnrKzkuIDlpKnjgIJcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRmlyc3REYXlPZk5leHRNb250aChcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDItMDFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZOZXh0TW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiL5pyI5pyA5ZCO5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIvmnIjmnIDlkI7kuIDlpKnvvIzmoLzlvI/kuLpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOS4i+aciOacgOWQjuS4gOWkqeOAglxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0RGF5T2ZOZXh0TW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAyLTI4XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZlllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pys5bm056ys5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTmnKzlubTnrKzkuIDlpKnvvIzmoLzlvI/kuLpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOacrOW5tOesrOS4gOWkqeOAglxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mWWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMDFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZZZWFyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacrOW5tOacgOWQjuS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pe26Ze0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5pys5bm05pyA5ZCO5LiA5aSp77yM5qC85byP5Li6XCJ5eXl5LU1NLWRkXCLvvIzlpoLmnpzkuI3kvKDpgJLlj4LmlbDvvIzliJnpu5jorqTov5Tlm57lvZPliY3ns7vnu5/ml6XmnJ/nmoTmnKzlubTmnIDlkI7kuIDlpKnjgIJcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdERheU9mWWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMTItMzFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGaXJzdERheU9mTGFzdFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiK5bm056ys5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIrlubTnrKzkuIDlpKnvvIzmoLzlvI/kuLpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOS4iuW5tOesrOS4gOWkqeOAglxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTGFzdFllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE4LTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTGFzdFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiK5bm05pyA5ZCO5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIrlubTmnIDlkI7kuIDlpKnvvIzmoLzlvI/kuLpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOS4iuW5tOacgOWQjuS4gOWkqeOAglxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0RGF5T2ZMYXN0WWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTgtMTItMzFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGaXJzdERheU9mTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiL5bm056ys5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIvlubTnrKzkuIDlpKnvvIzmoLzlvI/kuLpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOS4i+W5tOesrOS4gOWkqeOAglxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTmV4dFllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDIwLTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiL5bm05pyA5ZCO5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIvlubTmnIDlkI7kuIDlpKnvvIzmoLzlvI/kuLpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeS8oOmAkuWPguaVsO+8jOWImem7mOiupOi/lOWbnuW9k+WJjeezu+e7n+aXpeacn+eahOS4i+W5tOacgOWQjuS4gOWkqeOAglxcbuOAkGRhdGXjgJHvvJrml6XmnJ/ml7bpl7RcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0RGF5T2ZOZXh0WWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMjAtMTItMzFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiRGVmYXVsdEZ1bmN0aW9uXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJHZXREYXRlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui/lOWbnuaMh+WumuW9ouW8j+eahOaXpeacn1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmb3JtYXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmoLzlvI/kuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprlvaLlvI/nmoTml6XmnJ/vvIzlpoLmnpzkuI3kvKDpgJLlj4LmlbDvvIzliJnpu5jorqTov5Tlm57lvZPliY3ns7vnu5/ml6XmnJ/nmoTmjIflrprlvaLlvI/ml6XmnJ/jgIJcXG7jgJBmb3JtYXTjgJHvvJrmoLzlvI/ljJbkuLJcXG7jgJBkYXRl44CR77ya5pel5pyf5pe26Ze0XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxuXFx0RETvvJrku4rlpKlcXHRMRO+8muaYqOWkqVxcdE5E77ya5piO5aSpXFxuXFx0WVnvvJrmnKzlubRcXHRMWe+8muS4iuW5tFxcdE5Z77ya5LiL5bm0XFxuXFx0TU3vvJrmnKzmnIhcXHRMTe+8muS4iuaciFxcdE5N77ya5LiL5pyIXFxuXFx0V0TvvJrmmJ/mnJ/lh6BcXG5cXHRXV++8muacrOWRqFxcdExX77ya5LiK5ZGoXFx0TlfvvJrkuIvlkahcXG5cXHRGRFfvvJrmnKzlkajpppbml6VcXHRMRFfvvJrmnKzlkajlsL7ml6VcXG5cXHRGRExX77ya5LiK5ZGo6aaW5pelXFx0TERMV++8muS4iuWRqOWwvuaXpVxcblxcdEZETlfvvJrkuIvlkajpppbml6VcXHRMRE5X77ya5LiL5ZGo5bC+5pelXFxuXFx0RkRN77ya5pys5pyI6aaW5pelXFx0TERN77ya5pys5pyI5bC+5pelXFxuXFx0RkRMTe+8muS4iuaciOmmluaXpVxcdExETE3vvJrkuIrmnIjlsL7ml6VcXG5cXHRGRE5N77ya5LiL5pyI6aaW5pelXFx0TEROTe+8muS4i+aciOWwvuaXpVxcblxcdEZEWe+8muacrOW5tOmmluaXpVxcdExEWe+8muacrOW5tOWwvuaXpVxcblxcdEZETFnvvJrkuIrlubTpppbml6VcXHRMRExZ77ya5LiK5bm05bC+5pelXFxuXFx0RkROWe+8muS4i+W5tOmmluaXpVxcdExETlnvvJrkuIvlubTlsL7ml6VcXG7jgJDnpLrkvovjgJHvvJpHZXREYXRlKFwiTERcIixcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMjlcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb1N0cmluZ1hcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rOaNouWvueixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwhuaMh+WumueahOWvueixoei9rOaNouaIkOWtl+espuS4slxcbuOAkG9iauOAke+8muW+hei9rOaNouWvueixoVxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRvU3RyaW5nWCgxMjMpXFxu44CQ6L+U5Zue5YC844CR77yaXCIxMjNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9EYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovazml6XmnJ/ml7bpl7RcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5o2i5a+56LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5oyH5a6a55qE5a+56LGh6L2s5o2i5oiQ5pel5pyf5pe26Ze0XFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pel5pyf5pe26Ze0KFN5c3RlbS5PZmZzZXREYXRlVGltZSlcXG7jgJDnpLrkvovjgJHvvJpUb0RhdGVUaW1lKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAkTogMjAxOS0wMS0zMFQxMDowMCswODowMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9Cb29sZWFuXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rOW4g+WwlOWAvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLovazmjaLlr7nosaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIbmjIflrprlr7nosaHlgLzovazmjaLmiJDnrYnmlYjnmoTluIPlsJTlgLxcXG7jgJBvYmrjgJHvvJrlvoXovazmjaLlr7nosaFcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrluIPlsJTlgLwoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CR77yaVG9Cb29sZWFuKFwiVHJ1ZVwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mnRydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovazmlbDlgLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5o2i5a+56LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5oyH5a6a5a+56LGh6L2s5o2i5oiQ5Y2B6L+b5Yi25pWw5YC8XFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5Y2B6L+b5Yi25pWw5YC8KFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkOekuuS+i+OAke+8mlRvRGVjaW1hbChcIjQwLjIzXCIpXFxu44CQ6L+U5Zue5YC844CR77yaNDAuMjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvQmlnRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovazmlbDlgLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5o2i5a+56LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5oyH5a6a5a+56LGh6L2s5o2i5oiQ5Y2B6L+b5Yi25pWw5YC8XFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5Y2B6L+b5Yi25pWw5YC8KFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkOekuuS+i+OAke+8mlRvQmlnRGVjaW1hbChcIjQwLjIzXCIpXFxu44CQ6L+U5Zue5YC844CR77yaNDAuMjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgXCJrZXlcIjogXCJUb0N1c3RvbUJpZ0RlY2ltYWxcIixcclxuICAgICAgICAgIFwibmFtZVwiOiBcIui9rOiHquWumuS5ieeyvuW6puaVsOWAvFwiLFxyXG4gICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5o2i5a+56LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImtleVwiOiBcIm51bWJlclwiLFxyXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bCP5pWw5L2N5pWwXCIsXHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5oyH5a6a5a+56LGh6L2s5o2i5oiQ5oyH5a6a57K+5bqm55qE5Y2B6L+b5Yi25pWw5YC8XFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQbnVtYmVy44CR77ya5bCP5pWw5L2N5pWwXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5Y2B6L+b5Yi25pWw5YC8KFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkOekuuS+i+OAke+8mlRvQ3VzdG9tQmlnRGVjaW1hbChcIjQwLjIsMlwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjQwLjIwYCxcclxuICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9Eb3VibGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5Y+M57K+5bqm5rWu54K55pWwXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rOaNouWvueixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwhuaMh+WumuWvueixoei9rOaNouaIkOWPjOeyvuW6pua1rueCueaVsFxcbuOAkG9iauOAke+8muW+hei9rOaNouWvueixoVxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWPjOeyvuW6pua1rueCueaVsChTeXN0ZW0uRG91YmxlKVxcbuOAkOekuuS+i+OAke+8mlRvRG91YmxlKFwiNDAuMjNcIilcXG7jgJDov5Tlm57lgLzjgJHvvJo0MC4yM2AsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9TaW5nbGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5Y2V57K+5bqm5rWu54K55pWwXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rOaNouWvueixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwhuaMh+WumuWvueixoei9rOaNouaIkOWNleeyvuW6pua1rueCueaVsFxcbuOAkG9iauOAke+8muW+hei9rOaNouWvueixoVxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWNleeyvuW6pua1rueCueaVsChTeXN0ZW0uRmxvYXQpXFxu44CQ56S65L6L44CR77yaVG9TaW5nbGUoXCI0MC4yM1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjQwLjIzYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0Zsb2F0XCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rOWNleeyvuW6pua1rueCueaVsFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLovazmjaLlr7nosaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIbmjIflrprlr7nosaHovazmjaLmiJDljZXnsr7luqbmta7ngrnmlbBcXG7jgJBvYmrjgJHvvJrlvoXovazmjaLlr7nosaFcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrljZXnsr7luqbmta7ngrnmlbAoU3lzdGVtLkZsb2F0KVxcbuOAkOekuuS+i+OAke+8mlRvRmxvYXQoXCI0MC4yM1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjQwLjIzYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0J5dGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2sOOS9jeaXoOespuWPt+aVtOaVsFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLovazmjaLlr7nosaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIbmjIflrprlr7nosaHovazmjaLmiJA45L2N5peg56ym5Y+35pW05pWwXFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77yaOOS9jeaXoOespuWPt+aVtOaVsChTeXN0ZW0uQnl0ZSlcXG7jgJDnpLrkvovjgJHvvJpUb0J5dGUoXCIxMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjEwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0ludDE2XCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rDE25L2N5pyJ56ym5Y+35pW05pWwXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rOaNouWvueixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwhuaMh+WumuWvueixoei9rOaNouaIkDE25L2N5pyJ56ym5Y+35pW05pWwXFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77yaMTbkvY3mnInnrKblj7fmlbTmlbAoU3lzdGVtLkludDE2KVxcbuOAkOekuuS+i+OAke+8mlRvSW50MTYoXCIxMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjEwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0ludDMyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rDMy5L2N5pyJ56ym5Y+35pW05pWwXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9rOaNouWvueixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwhuaMh+WumuWvueixoei9rOaNouaIkDMy5L2N5pyJ56ym5Y+35pW05pWwXFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77yaMzLkvY3mnInnrKblj7fmlbTmlbAoU3lzdGVtLkludDMyKVxcbuOAkOekuuS+i+OAke+8mlRvSW50MzIoXCIxMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjEwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0NoaW5lc2VNb25leVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovazkuK3mloflpKflhpnph5Hpop1cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2s5o2i5a+56LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCG5oyH5a6a5a+56LGh6L2s5o2i5oiQ5Lit5paH5aSn5YaZ6YeR6aKdXFxu44CQb2Jq44CR77ya5b6F6L2s5o2i5a+56LGhXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVG9DaGluZXNlTW9uZXkoNDAuMjMpXFxu44CQ6L+U5Zue5YC844CR77yaXCLogobmi77lhYPpm7botLDop5Llj4HliIZcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0U2Vzc2lvblZhbHVlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuiOt+WPluS8muivneWPmOmHj+eahOWAvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Lya6K+d5Y+Y6YeP5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6I635Y+W55So5oi35Lya6K+d5Y+Y6YeP55qE5YC8XFxu44CQbmFtZeOAke+8muS8muivneWPmOmHj+WQjeensFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWvueixoShTeXN0ZW0uT2JqZWN0KWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkFuYWx5dGljYWxcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldENvbnRleHRQYXJhbWV0ZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6I635Y+W5LiK5LiL5paH5Y+Y6YeP55qE5YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrkuIvmloflj5jph4/lkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrojrflj5bkuIrkuIvmloflj5jph4/nmoTlgLxcXG7jgJBuYW1l44CR77ya5LiK5LiL5paH5Y+Y6YeP5ZCN56ewXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a+56LGhKFN5c3RlbS5PYmplY3QpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiZ2V0Q29tcHV0ZUpzb25EYXRhXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuagueaNruWxnuaAp+WQjeiOt+WPlkpTT07kuLJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZO+5byP5ZCN56ewXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsZ7mgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmoLnmja7pk77lvI/lsZ7mgKflkI3lvpfliLBKU09O5LiyXFxu44CQY2hhaW5lZFByb3BOYW1l44CR6ZO+5byP5ZCN56ewXFxu44CQcHJvcGVydHlOYW1l44CR5bGe5oCn5ZCNXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a+56LGhKFN5c3RlbS5TdHJpbmcpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0Q29tcHV0ZUpzb25EYXRhXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuagueaNruWxnuaAp+WQjeiOt+WPlkpTT07kuLJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6ZO+5byP5ZCN56ewXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsZ7mgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmoLnmja7pk77lvI/lsZ7mgKflkI3lvpfliLBKU09O5LiyXFxu44CQY2hhaW5lZFByb3BOYW1l44CR6ZO+5byP5ZCN56ewXFxu44CQcHJvcGVydHlOYW1l44CR5bGe5oCn5ZCNXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a+56LGhKFN5c3RlbS5TdHJpbmcpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0SW5qZWN0ZWRFbnRpdHlcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qC55o2u5rOo5YWl5ZCN6I636I635Y+W5rOo5YWl5a+56LGhXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLms6jlhaXlkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrojrflj5bov5DooYzml7bms6jlhaXnmoTlr7nosaFcXG7jgJBuYW1l44CR5rOo5YWl5ZCNXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5a+56LGhKFN5c3RlbS5PYmplY3QpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0Q2hhaW5lZFByb3BlcnR5VmFsdWVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qC55o2u5bGe5oCn5ZCN6I635Y+W5bGe5oCn5YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumTvuW8j+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muagueaNrumTvuW8j+WxnuaAp+WQjeiOt+WPluWxnuaAp+WAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkemTvuW8j+WQjVxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muWvueixoShTeXN0ZW0uT2JqZWN0KWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkFuYWx5dGljYWxcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcImFic1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLnu53lr7nlgLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbDlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57kuIDkuKrmlbDlgLznmoTnu53lr7nlgLxcXG7jgJB2YWx1ZeOAke+8muiuoeeul+aVsOWAvFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaVsOWAvChTeXN0ZW0uRG91YmxlKVxcbuOAkOekuuS+i+OAke+8mmFicygtMS41KVxcbuOAkOi/lOWbnuWAvOOAke+8mjEuNWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJSb3VuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLlm5voiI3kupTlhaVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pWw5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZG91YmxlXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTJcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsI/mlbDkvY3mlbBcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnQzMlwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muaKiuaVsOWbm+iIjeS6lOWFpeS4uuaMh+WumueyvuW6pueahOaVsOWAvFxcbuOAkHZhbHVlMeOAke+8muaVsOWAvCBcXG7jgJB2YWx1ZTLjgJHvvJrlm5voiI3kupTlhaXlsI/mlbDkvY3mlbBcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrmlbDlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpcXG5Sb3VuZCgxLjUyLDEpXFxu44CQ6L+U5Zue5YC844CR77yaMS41YCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwicm91bmRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Zub6IiN5LqU5YWlXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlMVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVsOWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bCP5pWw5L2N5pWwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50MzJcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmiormlbDlm5voiI3kupTlhaXkuLrmjIflrprnsr7luqbnmoTmlbDlgLxcXG7jgJB2YWx1ZTHjgJHvvJrmlbDlgLwgXFxu44CQdmFsdWUy44CR77ya5Zub6IiN5LqU5YWl5bCP5pWw5L2N5pWwXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5Eb3VibGUpXFxu44CQ56S65L6L44CR77yacm91bmQoMS41MiwxKVxcbuOAkOi/lOWbnuWAvOOAke+8mjEuNWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcInJhbmRvbVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLpmo/mnLrmlbBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mumaj+acuueUn+aIkOWkp+S6juetieS6jiAwLjAg5LiU5bCP5LqOIDEuMCDnmoTkvKrpmo/mnLrlgLxcXG7jgJDov5Tlm57lgLznsbvlnovjgJHvvJrmlbDlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpyYW5kb20oKVxcbuOAkOi/lOWbnuWAvOOAke+8mjAuNjI0NTA4MzQ5MzkzYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcInNpblwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmraPlvKZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbDlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57kuIDkuKrmlbDlrZfnmoTmraPlvKblgLxcXG7jgJB2YWx1ZeOAke+8muiuoeeul+aVsOWAvFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaVsOWAvChTeXN0ZW0uRG91YmxlKVxcbuS4gOS4quS7peW8p+W6puihqOekuueahOinklxcbuOAkOekuuS+i+OAke+8mnNpbigxKVxcbuOAkOi/lOWbnuWAvOOAke+8mjAuODQxODcwOThgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiY29zXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuS9meW8plwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVsOWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuS4gOS4quaVsOWtl+eahOS9meW8puWAvFxcbuOAkHZhbHVl44CR77ya6K6h566X5pWw5YC8XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5Eb3VibGUpXFxu5LiA5Liq5Lul5byn5bqm6KGo56S655qE6KeSXFxu44CQ56S65L6L44CR77yaY29zKDMpXFxu44CQ6L+U5Zue5YC844CR77yaLTAuOTg5OTkyNGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJjZWlsXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuWQkeS4iuiIjeWFpVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVsOWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuWkp+S6juaIluetieS6juWHveaVsOWPguaVsO+8jOW5tuS4lOS4juS5i+acgOaOpei/keeahOaVtOaVsFxcbuOAkHZhbHVl44CR77ya6K6h566X5pWw5YC8XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5JbnQzMilcXG7jgJDnpLrkvovjgJHvvJpjZWlsKDMuMilcXG7jgJDov5Tlm57lgLzjgJHvvJo0YCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcImZsb29yXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuWQkeS4i+iIjeWFpVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVsOWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuWwj+S6juaIluetieS6juWHveaVsOWPguaVsO+8jOW5tuS4lOS4juS5i+acgOaOpei/keeahOaVtOaVsFxcbuOAkHZhbHVl44CR77ya6K6h566X5pWw5YC8XFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5JbnQzMilcXG7jgJDnpLrkvovjgJHvvJpmbG9vcigzLjIpXFxu44CQ6L+U5Zue5YC844CR77yaM2AsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJCYW5rZXJSb3VuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLpk7booYzlrrboiI3lhaVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pWw5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZG91YmxlXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTJcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsI/mlbDkvY3mlbBcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnQzMlwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muS9v+eUqOmTtuihjOWutuiIjeWFpeagh+WHhu+8jOaKiuaMh+WumuaVsOWtl+iIjeWFpeS4uuacgOaOpei/keeahOaVsOWtl1xcbuOAkHZhbHVlMeOAke+8muimgeiIjeWFpeeahOaVsOWAvFxcbuOAkHZhbHVlMuOAke+8muimgeiIjeWFpeeahOWwj+aVsOS9jeaVsFxcbuOAkOi/lOWbnuWAvOexu+Wei+OAke+8muaVsOWAvChTeXN0ZW0uRG91YmxlKVxcbuOAkOekuuS+i+OAke+8mkJhbmtlclJvdW5kKDM2LjEyNCwyKVxcbuOAkOi/lOWbnuWAvOOAke+8mjM2LjEyYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcImJhbmtlclJvdW5kXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIumTtuihjOWutuiIjeWFpVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTFcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbDlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWwj+aVsOS9jeaVsFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludDMyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5L2/55So6ZO26KGM5a626IiN5YWl5qCH5YeG77yM5oqK5oyH5a6a5pWw5a2X6IiN5YWl5Li65pyA5o6l6L+R55qE5pWw5a2XXFxu44CQdmFsdWUx44CR77ya6KaB6IiN5YWl55qE5pWw5YC8XFxu44CQdmFsdWUy44CR77ya6KaB6IiN5YWl55qE5bCP5pWw5L2N5pWwXFxu44CQ6L+U5Zue5YC857G75Z6L44CR77ya5pWw5YC8KFN5c3RlbS5Eb3VibGUpXFxu44CQ56S65L6L44CR77yaYmFua2VyUm91bmQoMzYuMTI0LDIpXFxu44CQ6L+U5Zue5YC844CR77yaMzYuMTJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgXCJlblwiOlxyXG4gICAgW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcImlmXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiaWYoKVxcbntcXG5cXG59XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6XCJpZiA6IEFuYWx5emluZyBjb25kaXRpb25zXCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiaWYgZWxzZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcImlmKClcXG57XFxuXFxufVxcbmVsc2VcXG57XFxuXFxufVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6XCJpZiBlbHNlIDogQW5hbHl6aW5nIGNvbmRpdGlvbnNcIixcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZHZhbmNlZFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJmb3JcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJmb3IoOzspXFxue1xcblxcbn1cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwiZm9yIGxvb3BcIixcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZHZhbmNlZFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJyZXR1cm5cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJyZXR1cm4gO1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6XCJyZXR1cm4gb3BlcmF0aW9uXCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwidmFyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwidmFyIFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6XCJ2YXJpYWJsZSBkZWZpbml0aW9uc1wiLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFkdmFuY2VkXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIlwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcInRydWVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJ0cnVlIFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6XCJ0cnVlXCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiZmFsc2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJmYWxzZSBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwiZmFsc2VcIixcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZHZhbmNlZFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdTdWJzdHJpbmdcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJTdHJpbmdTdWJzdHJpbmdcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcInN0YXJ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic3RhcnRcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHJpZXZlIHRoZSBzdWJzdHJpbmcgaW4gdGhlIG9yaWdpbmFsIHN0cmluZywgdGhlIHN1YnN0cmluZyBzdGFydHMgZnJvbSB0aGUgc3BlY2lmaWVkIGNoYXJhY3RlciBwb3NpdGlvbiBhbmQgaGFzIHRoZSBzcGVjaWZpZWQgbGVuZ3RoXFxu44CQb3JpZ2luYWzjgJHvvJpvcmlnaW5hbCBzdHJpbmdcXG7jgJBzdGFydOOAke+8mnN0YXJ0IGluZGV4KHN0YXJ0IGZyb20gMClcXG7jgJBsZW5ndGjjgJHvvJpsZW5ndGhcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpTdHJpbmdTdWJzdHJpbmcoXCJBQkNERUZHXCIsMiwzKVxcbuOAkFJldHVybuOAke+8mlwiQ0RFXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdWJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJTdWJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcInN0YXJ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic3RhcnRcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHJpZXZlIHRoZSBzdWJzdHJpbmcgaW4gdGhlIG9yaWdpbmFsIHN0cmluZywgdGhlIHN1YnN0cmluZyBzdGFydHMgZnJvbSB0aGUgc3BlY2lmaWVkIGNoYXJhY3RlciBwb3NpdGlvbiBhbmQgaGFzIHRoZSBzcGVjaWZpZWQgbGVuZ3RoXFxu44CQb3JpZ2luYWzjgJHvvJpvcmlnaW5hbCBzdHJpbmdcXG7jgJBzdGFydOOAke+8mnN0YXJ0IGluZGV4KHN0YXJ0IGZyb20gMClcXG7jgJBsZW5ndGjjgJHvvJpsZW5ndGhcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpTdWJTdHJpbmcoXCJBQkNERUZHXCIsMiwzKVxcbuOAkFJldHVybuOAke+8mlwiQ0RFXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdMZW5ndGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLlj5blrZfnrKbkuLLplb/luqZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrojrflj5bmjIflrprlrZfnrKbkuLLnmoTplb/luqZcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkFJldHVybiBUeXBl44CR77ya5pWw5YC8KFN5c3RlbS5JbnQzMilcXG7jgJBFeGFtcGxl44CR77yaU3RyaW5nTGVuZ3RoKFwi6K+t5LmJ5YyW6KGo6L6+5byPXCIpXFxu44CQUmV0dXJu44CR77yaNmAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkxlbmd0aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIkxlbmd0aFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpHZXQgdGhlIGxlbmd0aCBvZiB0aGUgb3JpZ2luYWwgc3RyaW5nXFxu44CQb3JpZ2luYWzjgJHvvJpvcmlnaW5hbCBzdHJpbmdcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkludDMyKFN5c3RlbS5JbnQzMilcXG7jgJBFeGFtcGxl44CR77yaTGVuZ3RoKFwi6K+t5LmJ5YyW6KGo6L6+5byPXCIpXFxu44CQUmV0dXJu44CR77yaNmAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkNvbnRhaW5zXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiQ29udGFpbnNcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcInRhcmdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRhcmdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG9yaWdpbmFsIHN0cmluZyBjb250YWlucyB0aGUgdGFyZ2V0IHN0cmluZ1xcbuOAkG9yaWdpbmFs44CR77yab3JpZ2luYWwgc3RyaW5nXFxu44CQdGFyZ2V044CR77yadGFyZ2V0IHN0cmluZ1xcbuOAkFJldHVybiBUeXBl44CR77yaU3lzdGVtLkJvb2xlYW5cXG7jgJBFeGFtcGxl44CR77yaQ29udGFpbnMoc2FsZXNvcmRlci5jb2RlLFwi6KGo6L6+5byPXCIpXFxu44CQUmV0dXJu44CR77yadHJ1ZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0YXJ0c1dpdGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJTdGFydHNXaXRoXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpEZXRlcm1pbmUgd2hldGhlciB0aGUgb3JpZ2luYWwgc3RyaW5nIHN0YXJ0cyB3aXRoIHRoZSB0YXJnZXQgc3RyaW5nXFxu44CQb3JpZ2luYWzjgJHvvJpvcmlnaW5hbCBzdHJpbmdcXG7jgJB0YXJnZXTjgJHvvJp0YXJnZXQgc3RyaW5nXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTeXN0ZW0uQm9vbGVhblxcbuOAkEV4YW1wbGXjgJHvvJpTdGFydHNXaXRoKHNhbGVzb3JkZXIuY29kZSxcIuWtkOWNleS9jVwiKVxcbuOAkFJldHVybuOAke+8mnRydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJFbmRzV2l0aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIkVuZHNXaXRoXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpEZXRlcm1pbmUgd2hldGhlciB0aGUgb3JpZ2luYWwgc3RyaW5nIGVuZHMgd2l0aCB0aGUgdGFyZ2V0IHN0cmluZ1xcbuOAkG9yaWdpbmFs44CR77yab3JpZ2luYWwgc3RyaW5nXFxu44CQdGFyZ2V044CR77yadGFyZ2V0IHN0cmluZ1xcbuOAkFJldHVybiBUeXBl44CR77yaU3lzdGVtLkJvb2xlYW5cXG7jgJBFeGFtcGxl44CR77yaRW5kc1dpdGgoc2FsZXNvcmRlci5jb2RlLFxcXCLlrZDljZXkvY1cXFwiKVxcbuOAkFJldHVybuOAke+8mnRydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdSZXBsYWNlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5a2X56ym5Liy5pu/5o2iXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9sZFZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6KKr5pu/5o2i5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwibmV3VmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmm7/mjaLlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIbmupDlrZfnrKbkuLLkuK3nmoRcIuiiq+abv+aNouWAvFwi5pu/5o2i5Li6XCLmm7/mjaLlgLxcIlxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQb2xkVmFsdWXjgJHvvJrooqvmm7/mjaLlgLxcXG7jgJBuZXdWYWx1ZeOAke+8muabv+aNouWAvFxcbuOAkFJldHVybiBUeXBlUmV0dXJuIFR5cGXjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaU3RyaW5nUmVwbGFjZShcIjEyMzQxMlwiLFwiMTJcIixcIjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIwMDM0MDBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlJlcGxhY2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJSZXBsYWNlXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib2xkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvbGRWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm5ld1ZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibmV3VmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJlcGxhY2UgdGhlIFwib2xkVmFsdWVcIiBpbiB0aGUgb3JpZ2luYWwgc3RyaW5nIHdpdGggXCJuZXdWYWx1ZVwiXFxu44CQb3JpZ2luYWzjgJHvvJpvcmlnaW5hbCBzdHJpbmdcXG7jgJBvbGRWYWx1ZeOAke+8mnJlcGxhY2VkIG9sZCB2YWx1ZVxcbuOAkG5ld1ZhbHVl44CR77yacmVwbGFjZW1lbnQgbmV3IHZhbHVlXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaUmVwbGFjZShcIjEyMzQxMlwiLFwiMTJcIixcIjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIwMDM0MDBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ1RvVXBwZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLovazlpKflhplcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8muWwhua6kOWtl+espuS4sui9rOaNouS4uuWkp+WGmVxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQUmV0dXJuIFR5cGXjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaU3RyaW5nVG9VcHBlcihcImFiY1wiKVxcbuOAkFJldHVybuOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJUb1VwcGVyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiVG9VcHBlclwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpDb252ZXJ0IHRoZSBvcmlnaW5hbCBzdHJpbmcgdG8gdXBwZXJjYXNlXFxu44CQb3JpZ2luYWzjgJHvvJpvcmlnaW5hbCBzdHJpbmdcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpUb1VwcGVyKFwiYWJjXCIpXFxu44CQUmV0dXJu44CR77yaXCJBQkNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ1RvTG93ZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLovazlsI/lhplcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8muWwhua6kOWtl+espuS4sui9rOaNouS4uuWwj+WGmVxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQUmV0dXJuIFR5cGVSZXR1cm4gVHlwZeOAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpTdHJpbmdUb0xvd2VyKFwiQUJDXCIpXFxu44CQUmV0dXJu44CR77yaXCJhYmNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlRvTG93ZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJUb0xvd2VyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvbnZlcnQgdGhlIG9yaWdpbmFsIHN0cmluZyB0byBsb3dlcmNhc2VcXG7jgJBvcmlnaW5hbOOAke+8mm9yaWdpbmFsIHN0cmluZ1xcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mlRvTG93ZXIoXCJBQkNcIilcXG7jgJBSZXR1cm7jgJHvvJpcImFiY1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nSW5kZXhPZlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuiOt+WPlummluS4quWMuemFjeWtl+espuS4sueahOe0ouW8lVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi55uu5qCH5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJrlnKjmupDlrZfnrKbkuLLkuK3vvIzmo4DntKLnm67moIflrZfnrKbkuLLvvIzmib7liLDnrKzkuIDkuKrljLnphY3nmoTlrZfnrKbkuLLlkI7vvIzov5Tlm57lhbbntKLlvJXkvY3nva4o5LuOMOW8gOWniynjgILlpoLmnpzmnKrmib7liLDnm67moIflrZfnrKbkuLLvvIzliJnov5Tlm54tMe+8jOWmguaenOebruagh+Wtl+espuS4suS4uuepuuS4su+8jOi/lOWbnjDvvIzlpoLmnpzljp/lrZfnrKbkuLLkuLpudWxs77yM5YiZ6L+U5ZueLTFcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHRhcmdldOOAke+8muebruagh+Wtl+espuS4slxcbuOAkFJldHVybiBUeXBl44CR77ya5pWw5YC8KFN5c3RlbS5JbnQzMilcXG7jgJBFeGFtcGxl44CR77yaU3RyaW5nSW5kZXhPZihcIjEyMDAxMjM0MDEyXCIsXCIwMVwiKVxcbuOAkFJldHVybuOAke+8mjNcXG7jgJBFeGFtcGxl44CR77yaU3RyaW5nSW5kZXhPZihcIjEyMDAyMzIzXCIsXCIzNFwiKVxcbuOAkFJldHVybuOAke+8mi0xXFxu44CQRXhhbXBsZeOAke+8mlN0cmluZ0luZGV4T2YoXCIxMjAwMTFcIixcIlwiKVxcbuOAkFJldHVybuOAke+8mjBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJJbmRleE9mXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiSW5kZXhPZlwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkluIHRoZSBvcmlnaW5hbCBzdHJpbmcsIHRoZSB0YXJnZXQgc3RyaW5nIGlzIHJldHJpZXZlZCwgYW5kIGFmdGVyIHRoZSBmaXJzdCBtYXRjaGluZyBzdHJpbmcgaXMgZm91bmQsIGl0cyBpbmRleCBwb3NpdGlvbiAoc3RhcnRpbmcgZnJvbSAwKSBpcyByZXR1cm5lZC4gSWYgdGhlIHRhcmdldCBzdHJpbmcgaXMgbm90IGZvdW5kLCAtMSBpcyByZXR1cm5lZCwgaWYgdGhlIHRhcmdldCBzdHJpbmcgaXMgYW4gZW1wdHkgc3RyaW5nLCAwIGlzIHJldHVybmVkLCBpZiB0aGUgb3JpZ2luYWwgc3RyaW5nIGlzIG51bGwsIC0xIGlzIHJldHVybmVkXFxu44CQb3JpZ2luYWzjgJHvvJpvcmlnaW5hbCBzdHJpbmdcXG7jgJB0YXJnZXTjgJHvvJp0YXJnZXQgc3RyaW5nXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpJbnQzMihTeXN0ZW0uSW50MzIpXFxu44CQRXhhbXBsZeOAke+8mkluZGV4T2YoXCIxMjAwMTIzNDAxMlwiLFwiMDFcIilcXG7jgJBSZXR1cm7jgJHvvJozXFxu44CQRXhhbXBsZeOAke+8mkluZGV4T2YoXCIxMjAwMjMyM1wiLFwiMzRcIilcXG7jgJBSZXR1cm7jgJHvvJotMVxcbuOAkEV4YW1wbGXjgJHvvJpJbmRleE9mKFwiMTIwMDExXCIsXCJcIilcXG7jgJBSZXR1cm7jgJHvvJowYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nTGFzdEluZGV4T2ZcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLojrflj5bmnIDlkI7kuIDkuKrljLnphY3lrZfnrKbkuLLnmoTntKLlvJVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInRhcmdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuebruagh+Wtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWcqOa6kOWtl+espuS4suS4re+8jOajgOe0ouebruagh+Wtl+espuS4su+8jOaJvuWIsOacgOWQjuS4gOS4quWMuemFjeeahOWtl+espuS4suWQju+8jOi/lOWbnuWFtue0ouW8leS9jee9rijku44w5byA5aeLKeOAguWmguaenOacquaJvuWIsOebruagh+Wtl+espuS4su+8jOWImei/lOWbni0x77yM5aaC5p6c55uu5qCH5a2X56ym5Liy5Li656m65Liy77yM6L+U5ZueMO+8jOWmguaenOWOn+Wtl+espuS4suS4um51bGzvvIzliJnov5Tlm54tMVxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQdmFsdWXjgJHvvJrnm67moIflrZfnrKbkuLJcXG7jgJBSZXR1cm4gVHlwZeOAke+8muaVsOWAvChTeXN0ZW0uSW50MzIpXFxu44CQRXhhbXBsZeOAke+8mlN0cmluZ0xhc3RJbmRleE9mKFwiMTIwMDEyMzQwMTJcIixcIjAxXCIpXFxu44CQUmV0dXJu44CR77yaOFxcbuOAkEV4YW1wbGXjgJHvvJpTdHJpbmdMYXN0SW5kZXhPZihcIjEyMDAyMzIzXCIsXCIzNFwiKVxcbuOAkFJldHVybuOAke+8mi0xXFxu44CQRXhhbXBsZeOAke+8mlN0cmluZ0xhc3RJbmRleE9mKFwiMTIwMDExXCIsXCJcIilcXG7jgJBSZXR1cm7jgJHvvJowYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiTGFzdEluZGV4T2ZcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJMYXN0SW5kZXhPZlwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkluIHRoZSBvcmlnaW5hbCBzdHJpbmcsIHRoZSB0YXJnZXQgc3RyaW5nIGlzIHJldHJpZXZlZCwgYW5kIGFmdGVyIHRoZSBsYXN0IG1hdGNoaW5nIHN0cmluZyBpcyBmb3VuZCwgaXRzIGluZGV4IHBvc2l0aW9uIChzdGFydGluZyBmcm9tIDApIGlzIHJldHVybmVkLiBJZiB0aGUgdGFyZ2V0IHN0cmluZyBpcyBub3QgZm91bmQsIC0xIGlzIHJldHVybmVkLCBpZiB0aGUgdGFyZ2V0IHN0cmluZyBpcyBhbiBlbXB0eSBzdHJpbmcsIDAgaXMgcmV0dXJuZWQsIGlmIHRoZSBvcmlnaW5hbCBzdHJpbmcgaXMgbnVsbCwgLTEgaXMgcmV0dXJuZWRcXG7jgJBvcmlnaW5hbOOAke+8mm9yaWdpbmFsIHN0cmluZ1xcbuOAkHZhbHVl44CR77yadGFyZ2V0IHN0cmluZ1xcbuOAkFJldHVybiBUeXBl44CR77yaSW50MzIoU3lzdGVtLkludDMyKVxcbuOAkEV4YW1wbGXjgJHvvJpMYXN0SW5kZXhPZihcIjEyMDAxMjM0MDEyXCIsXCIwMVwiKVxcbuOAkFJldHVybuOAke+8mjhcXG7jgJBFeGFtcGxl44CR77yaTGFzdEluZGV4T2YoXCIxMjAwMjMyM1wiLFwiMzRcIilcXG7jgJBSZXR1cm7jgJHvvJotMVxcbuOAkEV4YW1wbGXjgJHvvJpMYXN0SW5kZXhPZihcIjEyMDAxMVwiLFwiXCIpXFxu44CQUmV0dXJu44CR77yaMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ1RyaW1TdGFydFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIoOmZpOWktOmDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIoOmZpOa6kOWtl+espuS4sueahOWktOmDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQUmV0dXJuIFR5cGXjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaU3RyaW5nVHJpbVN0YXJ0KFwiICAgIEFCQ1wiKVxcbuOAkFJldHVybuOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJUcmltU3RhcnRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJUcmltU3RhcnRcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaRGVsZXRlIHRoZSBoZWFkIHNwYWNlIG9mIHRoZSBvcmlnaW5hbCBzdHJpbmdcXG7jgJBvcmlnaW5hbOOAke+8mm9yaWdpbmFsIHN0cmluZ1xcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mlRyaW1TdGFydChcIiAgICBBQkNcIilcXG7jgJBSZXR1cm7jgJHvvJpcIkFCQ1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nVHJpbUVuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIoOmZpOWwvumDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIoOmZpOa6kOWtl+espuS4sueahOWwvumDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQUmV0dXJuIFR5cGVSZXR1cm4gVHlwZeOAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpTdHJpbmdUcmltRW5kKFwiQUJDICAgIFwiKVxcbuOAkFJldHVybuOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJUcmltRW5kXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiVHJpbUVuZFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZW1vdmUgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIG9yaWdpbmFsIHN0cmluZ1xcbuOAkG9yaWdpbmFs44CR77yab3JpZ2luYWwgc3RyaW5nXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaVHJpbUVuZChcIkFCQyAgICBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIkFCQ1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nVHJpbVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIoOmZpOWktOWwvumDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIoOmZpOa6kOWtl+espuS4sueahOWktOWwvumDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQUmV0dXJuIFR5cGXjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaU3RyaW5nVHJpbShcIiAgICBBQkMgICAgXCIpXFxu44CQUmV0dXJu44CR77yaXCJBQkNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlRyaW1cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJUcmltXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkRlbGV0ZSB0aGUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIG9mIHRoZSBvcmlnaW5hbCBzdHJpbmdcXG7jgJBvcmlnaW5hbOOAke+8mm9yaWdpbmFsIHN0cmluZ1xcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mlRyaW0oXCIgICAgQUJDICAgIFwiKVxcbuOAkFJldHVybuOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJDcmVhdGVHdWlkXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiQ3JlYXRlR3VpZFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpHZXQgdW5pcXVlIGlkZW50aWZpY2F0aW9uIEd1aWRcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpDcmVhdGVHdWlkKClcXG7jgJBSZXR1cm7jgJHvvJpcIjc3MjJBNzkzLTE0REYtNDlDRC1CN0U3LURGNDk4N1lZRDJcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ0FkZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWtl+espuS4suebuOWKoFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmaXJzdFN0clwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuesrOS4gOS4quWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwic2Vjb25kU3RyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi56ys5LqM5Liq5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJrlsIboi6XlubLlrZfnrKbkuLLmi7zmjqXmiJDkuIDkuKrmlrDlrZfnrKbkuLLvvIzmnIDlpJrmlK/mjIExMOS4quWtl+espuS4suaLvOaOpe+8jOacgOWwkTLkuKrvvJvnvJbovpHlmajkuK3pu5jorqTmj5LlhaXkuKTkuKrvvIzlpJrkuKrlrZfnrKbkuLLlj6/miYvliqjmt7vliqBcXG7jgJBSZXR1cm4gVHlwZeOAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpTdHJpbmdBZGQoXCJIZWxsb1wiLFwiV29ybGRcIilcXG7jgJBSZXR1cm7jgJHvvJpcIkhlbGxvV29yZFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiQWRkXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiQWRkXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImZpcnN0U3RyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZmlyc3RTdHJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInNlY29uZFN0clwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInNlY29uZFN0clwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ29uY2F0ZW5hdGUgc2V2ZXJhbCBzdHJpbmdzIGludG8gYSBuZXcgc3RyaW5nLCBzdXBwb3J0IHVwIHRvIDEwIHN0cmluZyBjb25jYXRlbmF0aW9ucywgYXQgbGVhc3QgMjsgdHdvIGFyZSBpbnNlcnRlZCBieSBkZWZhdWx0IGluIHRoZSBlZGl0b3IsIGFuZCBtdWx0aXBsZSBzdHJpbmdzIGNhbiBiZSBhZGRlZCBtYW51YWxseVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkFkZChcIkhlbGxvXCIsXCJXb3JsZFwiKVxcbuOAkFJldHVybuOAke+8mlwiSGVsbG9Xb3JkXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdW1CeVByb3BcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJTdW1CeVByb3BcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvdW50IHRoZSBzdW0gb2YgYSBjZXJ0YWluIGF0dHJpYnV0ZVxcbuOAkGNoYWluZWRQcm9wTmFtZeOAke+8mkNvcnJlc3BvbmRpbmcgdG8gdGhlIGF0dHJpYnV0ZSBuYW1lcyBvZiB0aGUgZW50aXR5IHNldCwgdGhlIGF0dHJpYnV0ZSBuYW1lcyBvcmdhbml6ZWQgdG9nZXRoZXIgaW4gYSBjaGFpbiBmb3JtLCBmb3IgZXhhbXBsZTpPcmRlci5PcmRlckl0ZW1zXFxu44CQcHJvcGVydHlOYW1l44CR77yaVHlwZSBhdHRyaWJ1dGUgbmFtZTtcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkRvdWJsZShTeXN0ZW0uRG91YmxlKVxcbuOAkEV4YW1wbGXjgJHvvJpTdW1CeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZ2dyZWdhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiQ291bnRCeVByb3BcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJDb3VudEJ5UHJvcFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ291bnQgdGhlIG51bWJlciBvZiByZWNvcmRzIGluIHRoZSB0YWJsZSB3aGVyZSB0aGUgc3BlY2lmaWVkIGZpZWxkIGlzIGxvY2F0ZWRcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHvvJpDb3JyZXNwb25kaW5nIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZXMgb2YgdGhlIGVudGl0eSBzZXQsIHRoZSBhdHRyaWJ1dGUgbmFtZXMgb3JnYW5pemVkIHRvZ2V0aGVyIGluIGEgY2hhaW4gZm9ybSwgZm9yIGV4YW1wbGU6T3JkZXIuT3JkZXJJdGVtc1xcbuOAkHByb3BlcnR5TmFtZeOAke+8mlR5cGUgYXR0cmlidXRlIG5hbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkludDMyKFN5c3RlbS5JbnQzMik7XFxu44CQRXhhbXBsZeOAke+8mkNvdW50QnlQcm9wKFwiT3JkZXIuT3JkZXJJdGVtc1wiLFwiUXVhbnRpdHlcIilgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFnZ3JlZ2F0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJBdmdCeVByb3BcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJBdmdCeVByb3BcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvdW50IHRoZSBhdmVyYWdlIHZhbHVlIG9mIGEgbnVtZXJpYyBjb2x1bW5cXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHvvJpDb3JyZXNwb25kaW5nIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZXMgb2YgdGhlIGVudGl0eSBzZXQsIHRoZSBhdHRyaWJ1dGUgbmFtZXMgb3JnYW5pemVkIHRvZ2V0aGVyIGluIGEgY2hhaW4gZm9ybSwgZm9yIGV4YW1wbGU6T3JkZXIuT3JkZXJJdGVtc1xcbuOAkHByb3BlcnR5TmFtZeOAke+8mlR5cGUgYXR0cmlidXRlIG5hbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkRvdWJsZShTeXN0ZW0uRG91YmxlKVxcbuOAkEV4YW1wbGXjgJHvvJpBdmdCeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIk1heEJ5UHJvcFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIk1heEJ5UHJvcFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ291bnQgdGhlIG1heGltdW0gdmFsdWUgb2YgYSBudW1lcmljIGNvbHVtblxcbuOAkGNoYWluZWRQcm9wTmFtZeOAke+8mkNvcnJlc3BvbmRpbmcgdG8gdGhlIGF0dHJpYnV0ZSBuYW1lcyBvZiB0aGUgZW50aXR5IHNldCwgdGhlIGF0dHJpYnV0ZSBuYW1lcyBvcmdhbml6ZWQgdG9nZXRoZXIgaW4gYSBjaGFpbiBmb3JtLCBmb3IgZXhhbXBsZTpPcmRlci5PcmRlckl0ZW1zXFxu44CQcHJvcGVydHlOYW1l44CR77yaVHlwZSBhdHRyaWJ1dGUgbmFtZVxcbuOAkFJldHVybiBUeXBl44CR77yaRG91YmxlKFN5c3RlbS5Eb3VibGUpXFxu44CQRXhhbXBsZeOAke+8mk1heEJ5UHJvcChcIk9yZGVyLk9yZGVySXRlbXNcIixcIlF1YW50aXR5XCIpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZ2dyZWdhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiTWluQnlQcm9wXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiTWluQnlQcm9wXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpDb3VudCB0aGUgbWluaW11bSB2YWx1ZSBvZiBhIG51bWVyaWMgY29sdW1uXFxu44CQY2hhaW5lZFByb3BOYW1l44CR77yaQ29ycmVzcG9uZGluZyB0byB0aGUgYXR0cmlidXRlIG5hbWVzIG9mIHRoZSBlbnRpdHkgc2V0LCB0aGUgYXR0cmlidXRlIG5hbWVzIG9yZ2FuaXplZCB0b2dldGhlciBpbiBhIGNoYWluIGZvcm0sIGZvciBleGFtcGxlOk9yZGVyLk9yZGVySXRlbXNcXG7jgJBwcm9wZXJ0eU5hbWXjgJHvvJpUeXBlIGF0dHJpYnV0ZSBuYW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpEb3VibGUoU3lzdGVtLkRvdWJsZSlcXG7jgJBFeGFtcGxl44CR77yaTWluQnlQcm9wKFwiT3JkZXIuT3JkZXJJdGVtc1wiLFwiUXVhbnRpdHlcIilgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFnZ3JlZ2F0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiSXNOdWxsXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIklzTnVsbFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkRldGVybWluZSB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGlzIG51bGwobnVsbClcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgZGV0ZWN0ZWRcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkJvb2xlYW4oU3lzdGVtLkJvb2xlYW4pXFxu44CQRXhhbXBsZUV4YW1wbGXjgJHvvJpJc051bGwoXCLor63kuYnljJbooajovr7lvI9cIilcXG7jgJBSZXR1cm7jgJHvvJpGYWxzZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJJc051bGxPcldoaXRlU3BhY2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiSXNOdWxsT3JXaGl0ZVNwYWNlXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBzdHJpbmcgaXMgbnVsbCwgZW1wdHkgb3Igb25seSBjb21wb3NlZCBvZiBzcGFjZXNcXG7jgJBvYmrjgJHvvJpTdHJpbmcgdG8gYmUganVkZ2VkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpCb29sZWFuKFN5c3RlbS5Cb29sZWFuKVxcbuOAkEV4YW1wbGXjgJHvvJpJc051bGxPcldoaXRlU3BhY2UoXCLor63kuYnljJbooajovr7lvI9cIilcXG7jgJBSZXR1cm7jgJHvvJpGYWxzZVxcbuOAkEV4YW1wbGXjgJHvvJpJc051bGxPcldoaXRlU3BhY2UobnVsbClcXG7jgJBSZXR1cm7jgJHvvJpUcnVlXFxu44CQRXhhbXBsZeOAke+8mlxcbklzTnVsbE9yV2hpdGVTcGFjZShcIiBcIinjgJBSZXR1cm7jgJHvvJpUcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIklzTmFOXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIklzTmFOXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBvYmplY3QgY2FuIGJlIGNvbnZlcnRlZCBpbnRvIGEgbnVtYmVyKFN5c3RlbS5Eb3VibGUpXFxu44CQb2Jq44CR77yaT2JqZWN0IHRvIGJlIGRldGVjdGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpCb29sZWFuKFN5c3RlbS5Cb29sZWFuKVxcbuOAkEV4YW1wbGXjgJHvvJpJc05hTihcIuivreS5ieWMluihqOi+vuW8j1wiKeOAkFJldHVybuOAke+8mlRydWVcXG7jgJBFeGFtcGxl44CR77yaSXNOYU4oMTIuMynjgJBSZXR1cm7jgJHvvJpGYWxzZVxcbuOAkEV4YW1wbGXjgJHvvJpcXG5Jc05hTihcIjEyM1wiKeOAkFJldHVybuOAke+8mkZhbHNlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIklzTnVtYmVyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIklzTnVtYmVyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBvYmplY3QgY2FuIGJlIGNvbnZlcnRlZCBpbnRvIGEgbnVtYmVyKFN5c3RlbS5Eb3VibGUpXFxu44CQb2Jq44CR77yaT2JqZWN0IHRvIGJlIGRldGVjdGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpCb29sZWFuKFN5c3RlbS5Cb29sZWFuKVxcbuOAkEV4YW1wbGXjgJHvvJpJc051bWJlcihcXFwi6K+t5LmJ5YyW6KGo6L6+5byPXFxcIinjgJBSZXR1cm7jgJHvvJpGYWxzZVxcbuOAkEV4YW1wbGXjgJHvvJpJc051bWJlcigxMi4zKeOAkFJldHVybuOAke+8mlRydWVcXG7jgJBFeGFtcGxl44CR77yaXFxuSXNOdW1iZXIoXCIxMjNcIinjgJBSZXR1cm7jgJHvvJpUcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIklzRXhpc3RSZWNvcmRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiSXNFeGlzdFJlY29yZFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwibWF0Y2hcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJtYXRjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaRGV0ZXJtaW5lIHdoZXRoZXIgdGhlcmUgaXMgYSB2YWx1ZSBlcXVhbCB0byB0aGUgbWF0Y2hpbmcgY2hhcmFjdGVyIGluIHRoZSBzcGVjaWZpZWQgZmllbGQgc2V0IG9mIHRoZSB0YWJsZSBhY2NvcmRpbmcgdG8gdGhlIGNoYWluIG5hbWVcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJFjaGFpbmVkUHJvcE5hbWVcXG7jgJBwcm9wZXJ0eU5hbWXjgJFwcm9wZXJ0eU5hbWVcXG7jgJBtYXRjaOOAkW1hdGNoIHZhbHVlXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpCb29sZWFuKFN5c3RlbS5Cb29sZWFuKVxcbuOAkEV4YW1wbGXjgJHvvJpJc0V4aXN0UmVjb3JkKFwic2FsZXNvcmRlci5pdGVtc1wiLFwiY29kZVwiLFwibGNcIilcXG7jgJBSZXR1cm7jgJHvvJpGYWxzZS9UcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxpc3RHcmVhdGVyVGhhblwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMaXN0R3JlYXRlclRoYW5cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1hdGNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibWF0Y2hcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkRldGVybWluZSB3aGV0aGVyIHRoZXJlIGlzIGEgdmFsdWUgZ3JlYXRlciB0aGFuIHRoZSBtYXRjaGluZyBjaGFyYWN0ZXIgaW4gdGhlIHNwZWNpZmllZCBmaWVsZCBzZXQgb2YgdGhlIHRhYmxlIGFjY29yZGluZyB0byB0aGUgY2hhaW4gbmFtZVxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkWNoYWluZWRQcm9wTmFtZVxcbuOAkHByb3BlcnR5TmFtZeOAkXByb3BlcnR5TmFtZVxcbuOAkG1hdGNo44CRbWFyY2ggdmFsdWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkJvb2xlYW4oU3lzdGVtLkJvb2xlYW4pXFxu44CQRXhhbXBsZeOAke+8mkxpc3RHcmVhdGVyVGhhbihcInNhbGVzb3JkZXIuaXRlbXNcIixcIm51bVwiLDEwMClcXG7jgJBSZXR1cm7jgJHvvJpGYWxzZS9UcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxpc3RMZXNzVGhhblwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMaXN0TGVzc1RoYW5cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1hdGNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibWF0Y2hcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkRldGVybWluZSB3aGV0aGVyIHRoZXJlIGlzIGEgdmFsdWUgbGVzcyB0aGFuIHRoZSBtYXRjaGluZyBjaGFyYWN0ZXIgaW4gdGhlIHNwZWNpZmllZCBmaWVsZCBzZXQgb2YgdGhlIHRhYmxlIGFjY29yZGluZyB0byB0aGUgY2hhaW4gbmFtZVxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkWNoYWluZWRQcm9wTmFtZVxcbuOAkHByb3BlcnR5TmFtZeOAkXByb3BlcnR5TmFtZVxcbuOAkG1hdGNo44CRbWF0Y2ggdmFsdWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkJvb2xlYW4oU3lzdGVtLkJvb2xlYW4pXFxu44CQRXhhbXBsZeOAke+8mkxpc3RMZXNzVGhhbihcInNhbGVzb3JkZXIuaXRlbXNcIixcIm51bVwiLDEwMClcXG7jgJBSZXR1cm7jgJHvvJpGYWxzZS9UcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxpc3RTdGFydFdpdGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGlzdFN0YXJ0V2l0aFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwibWF0Y2hcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJtYXRjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpBY2NvcmRpbmcgdG8gdGhlIGNoYWluIG5hbWUsIGRldGVybWluZSB3aGV0aGVyIHRoZXJlIGlzIGEgdmFsdWUgd2l0aCBhIG1hdGNoaW5nIGNoYXJhY3RlciBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzcGVjaWZpZWQgZmllbGQgc2V0IG9mIHRoZSB0YWJsZVxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkWNoYWluZWRQcm9wTmFtZVxcbuOAkHByb3BlcnR5TmFtZeOAkXByb3BlcnR5TmFtZVxcbuOAkG1hdGNo44CRbWF0Y2ggdmFsdWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkJvb2xlYW4oU3lzdGVtLkJvb2xlYW4pXFxu44CQRXhhbXBsZeOAke+8mkxpc3RTdGFydFdpdGgoXCJzYWxlc29yZGVyLml0ZW1zXCIsXCJjb2RlXCIsXCJsY1wiKVxcbuOAkFJldHVybuOAke+8mkZhbHNlL1RydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJFc3RpbWF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGlzdEVuZFdpdGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGlzdEVuZFdpdGhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1hdGNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibWF0Y2hcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkFjY29yZGluZyB0byB0aGUgY2hhaW4gbmFtZSwgZGV0ZXJtaW5lIHdoZXRoZXIgdGhlcmUgaXMgYSB2YWx1ZSB3aG9zZSBlbmRpbmcgaXMgYSBtYXRjaGluZyBjaGFyYWN0ZXIgaW4gdGhlIHNwZWNpZmllZCBmaWVsZCBzZXQgb2YgdGhlIHRhYmxlXFxu44CQY2hhaW5lZFByb3BOYW1l44CRY2hhaW5lZFByb3BOYW1lXFxu44CQcHJvcGVydHlOYW1l44CRcHJvcGVydHlOYW1lXFxu44CQbWF0Y2jjgJFtYXRjaCB2YWx1ZVxcbuOAkFJldHVybiBUeXBl44CR77yaQm9vbGVhbihTeXN0ZW0uQm9vbGVhbilcXG7jgJBFeGFtcGxl44CR77yaTGlzdEVuZFdpdGgoXCJzYWxlc29yZGVyLml0ZW1zXCIsXCJjb2RlXCIsXCJsY1wiKVxcbuOAkFJldHVybuOAke+8mkZhbHNlL1RydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJFc3RpbWF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRGF0ZVRpbWVBZGREYXlzXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkRhdGVUaW1lQWRkRGF5c1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIHNwZWNpZmllZCBkYXRlXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkHZhbHVl44CR77yaSW5jcmVhc2UgdGhlIG51bWJlciBvZiBkYXlzXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpEYXRlVGltZShTeXN0ZW0uRGF0ZVRpbWUpXFxu44CQRXhhbXBsZeOAke+8mkRhdGVUaW1lQWRkRGF5cyhcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIiwyKVxcbuOAkFJldHVybuOAkToyMDE5LTAyLTAxVDEwOjAwKzA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkRhdGVUaW1lQWRkWWVhcnNcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiRGF0ZVRpbWVBZGRZZWFyc1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHllYXJzIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZSBhbmQgdGltZVxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJB2YWx1ZeOAke+8mkluY3JlYXNlIHRoZSBudW1iZXIgb2YgeWVhcnNcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkRhdGVUaW1lKFN5c3RlbS5EYXRlVGltZSlcXG7jgJBFeGFtcGxl44CR77yaRGF0ZVRpbWVBZGRZZWFycyhcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIiwyKVxcbuOAkFJldHVybuOAkToyMDIxLTAxLTMwVDEwOjAwKzA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkRhdGVUaW1lQWRkTW9udGhzXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkRhdGVUaW1lQWRkTW9udGhzXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbW9udGhzIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZSBhbmQgdGltZVxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJB2YWx1ZeOAke+8mkluY3JlYXNlIHRoZSBudW1iZXIgb2YgbW9udGhzXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpEYXRlVGltZShTeXN0ZW0uRGF0ZVRpbWUpXFxu44CQRXhhbXBsZUV4YW1wbGXjgJHvvJpEYXRlVGltZUFkZE1vbnRocyhcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIiwxKVxcbuOAkFJldHVybuOAkToyMDE5LTAyLTI4VDEwOjAwKzA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldEZpcnN0RGF5T2ZNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJHZXRGaXJzdERheU9mTW9udGhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkdldCB0aGUgZGF0ZSBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSBtb250aCB3aGVyZSB0aGUgc3BlY2lmaWVkIGRhdGUgdGltZSB2YWx1ZSBpc1xcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkRhdGVUaW1lKFN5c3RlbS5EYXRlVGltZSlcXG7jgJBFeGFtcGxl44CR77yaR2V0Rmlyc3REYXlPZk1vbnRoKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAkToyMDE5LTAxLTAxVDEwOjAwKzA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldExhc3REYXlPZk1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkdldExhc3REYXlPZk1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpHZXQgdGhlIGRhdGUgb2YgdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aCBpbiB3aGljaCB0aGUgc3BlY2lmaWVkIGRhdGUgYW5kIHRpbWUgdmFsdWUgaXMgbG9jYXRlZFxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkRhdGVUaW1lKFN5c3RlbS5EYXRlVGltZSlcXG7jgJBFeGFtcGxl44CR77yaR2V0TGFzdERheU9mTW9udGgoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CROjIwMTktMDEtMzFUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0RGF0ZVRpbWVOb3dcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiR2V0RGF0ZVRpbWVOb3dcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaR2V0IHRoZSBjdXJyZW50IGRhdGUgYW5kIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkRhdGVUaW1lKFN5c3RlbS5EYXRlVGltZSlcXG7jgJBFeGFtcGxl44CR77yaR2V0RGF0ZVRpbWVOb3coKVxcbuOAkFJldHVybuOAkToyMDE5LTAxLTMwVDEyOjAwOjAwLjAwMCswODowMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJDb21wYXJlRGF0ZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJDb21wYXJlRGF0ZVwiLCBcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwic3RyMVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGUxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJzdHIyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZTJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvbXBhcmUgdHdvIHRpbWUgdmFsdWVzIGFuZCByZXR1cm4gYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGZpcnN0IHRpbWUgaXMgYW4gaW50ZWdlciB0aGF0IGlzIGVhcmxpZXIgdGhhbiwgZXF1YWwgdG8sIG9yIGxhdGVyIHRoYW4gdGhlIHNlY29uZCB0aW1lXFxu44CQc3RyMeOAke+8mmRhdGUgdGltZSAxXFxu44CQc3RyMuOAke+8mmRhdGUgdGltZSAyXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpJbnQzMihTeXN0ZW0uSW50MzIpXFxuXFx0RGF0ZSAxIGlzIGVhcmxpZXIgdGhhbiBkYXRlIDIsIHJldHVybiAtMVxcblxcdGRhdGUgMSBpcyBlcXVhbCB0byBkYXRlIDIsIHJldHVybiAwXFxuXFx0ZGF0ZSAxIGlzIGxhdGVyIHRoYW4gZGF0ZSAyLCByZXR1cm4gMVxcbuOAkEV4YW1wbGXjgJHvvJpDb21wYXJlRGF0ZShcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIixcIjIwMTktMDItMDFUMTA6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJotMWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGb3JtYXREYXRlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkZvcm1hdERhdGVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpVc2UgdGhlIHNwZWNpZmllZCBmb3JtYXQgdG8gY29udmVydCB0aGUgY3VycmVudCBkYXRlIGFuZCB0aW1lIHZhbHVlIHRvIGl0cyBlcXVpdmFsZW50IHN0cmluZyByZXByZXNlbnRhdGlvblxcbuOAkGZvcm1hdOOAke+8mkZvcm1hdCBzdHJpbmdcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpGb3JtYXREYXRlKFwieXl5eS1NTS1kZCBISDptbTpzc1wiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0zMCAwMTowMDowMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZvcm1hdERlZmluZURhdGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiRm9ybWF0RGVmaW5lRGF0ZVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmb3JtYXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtYXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpVc2UgdGhlIHNwZWNpZmllZCBmb3JtYXQgdG8gY29udmVydCB0aGUgc3BlY2lmaWVkIGRhdGUgYW5kIHRpbWUgdmFsdWUgdG8gaXRzIGVxdWl2YWxlbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uXFxu44CQZm9ybWF044CR77yaRm9ybWF0IHN0cmluZ1xcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpGb3JtYXREZWZpbmVEYXRlKFwieXl5eS1NTS1kZCBISDptbTpzc1wiLFwiMjAxOS0wMS0zMCAwMTowMDowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0zMCAwMTowMDowMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvZGF5XCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRvZGF5XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm5zIHRvZGF5IG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSwgaW4gdGhlIGZvcm1hdCBcInl5eXktTU0tZGRcIiwgaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCBpdCB3aWxsIHJldHVybiB0b2RheSBhcyB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSBieSBkZWZhdWx0XFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mlRvZGF5KFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0zMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlllc3RlcmRheVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJZZXN0ZXJkYXlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIHllc3RlcmRheSBvZiB0aGUgc3BlY2lmaWVkIGRhdGUsIHRoZSBmb3JtYXQgaXMgXCJ5eXl5LU1NLWRkXCIsIGlmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCwgaXQgd2lsbCByZXR1cm4geWVzdGVyZGF5IG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlIGJ5IGRlZmF1bHRcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaWWVzdGVyZGF5KFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0yOVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvbW9ycm93XCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRvbW9ycm93XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm4gdG9tb3Jyb3cgb2YgdGhlIHNwZWNpZmllZCBkYXRlLCB0aGUgZm9ybWF0IGlzIFwieXl5eS1NTS1kZFwiLCBpZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIGl0IHdpbGwgcmV0dXJuIHRvbW9ycm93IG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlIGJ5IGRlZmF1bHRcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaVG9tb3Jyb3coXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE5LTAxLTMxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVGhpc1llYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVGhpc1llYXJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybiB0aGUgY3VycmVudCB5ZWFyIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSwgdGhlIGZvcm1hdCBpcyBcInl5eXlcIiwgaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCB0aGUgY3VycmVudCB5ZWFyIG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlIHdpbGwgYmUgcmV0dXJuZWQgYnkgZGVmYXVsdFxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpUaGlzWWVhcihcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIjIwMTlcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0WWVhclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMYXN0WWVhclwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgbGFzdCB5ZWFyIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSwgdGhlIGZvcm1hdCBpcyBcInl5eXlcIiwgaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCBpdCB3aWxsIHJldHVybiB0aGUgbGFzdCB5ZWFyIG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlIGJ5IGRlZmF1bHRcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaTGFzdFllYXIoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE4XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybiB0aGUgbmV4dCB5ZWFyIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSwgdGhlIGZvcm1hdCBpcyBcInl5eXlcIiwgaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCB0aGUgbmV4dCB5ZWFyIG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlIHdpbGwgYmUgcmV0dXJuZWQgYnkgZGVmYXVsdFxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpOZXh0WWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIjIwMjBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUaGlzTW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVGhpc01vbnRoXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm4gdGhlIGN1cnJlbnQgbW9udGggb2YgdGhlIHNwZWNpZmllZCBkYXRlLCB0aGUgZm9ybWF0IGlzIFwiTU1cIiwgaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCB0aGUgY3VycmVudCBtb250aCBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHRcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaVGhpc01vbnRoKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3RNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMYXN0TW9udGhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIHByZXZpb3VzIG1vbnRoIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSwgdGhlIGZvcm1hdCBpcyBcIk1NXCIsIGlmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCwgdGhlIGRlZmF1bHQgcmV0dXJucyB0aGUgcHJldmlvdXMgbW9udGggb2YgdGhlIGN1cnJlbnQgc3lzdGVtIGRhdGVcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaTGFzdE1vbnRoKFwiMjAxOS0wMi0zMCAwMTowMDowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIk5leHRNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJOZXh0TW9udGhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybiB0aGUgbmV4dCBtb250aCBvZiB0aGUgc3BlY2lmaWVkIGRhdGUsIHRoZSBmb3JtYXQgaXMgXCJNTVwiLCBpZiBubyBwYXJhbWV0ZXIgaXMgcGFzc2VkLCB0aGUgbmV4dCBtb250aCBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHRcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaTmV4dE1vbnRoKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMlwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRoaXNXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRoaXNXZWVrXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm4gdGhlIHdlZWsgb2YgdGhlIHNwZWNpZmllZCBkYXRlIGluIHRoZSBjdXJyZW50IHllYXIsIGluIHRoZSBmb3JtIG9mIFwid3dcIi4gSWYgbm8gcGFyYW1ldGVyIGlzIHBhc3NlZCwgdGhlIGRlZmF1bHQgd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgc3lzdGVtIGRhdGUgaW4gdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuIE5vdGUgdGhhdCBpZiB0aGUgZGF0ZSBhdCB0aGUgZW5kIG9mIERlY2VtYmVyIGlzIHRoZSBzYW1lIGFzIEphbnVhcnkgSWYgdGhlIDFzdCBmYWxscyBpbiB0aGUgc2FtZSB3ZWVrLCByZXR1cm4gdG8gdGhlIGZpcnN0IHdlZWtcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaVGhpc1dlZWsoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCI1XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdFdlZWtcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGFzdFdlZWtcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGxhc3Qgd2VlayBvZiB0aGUgc3BlY2lmaWVkIGRhdGUsIHRoZSBmb3JtYXQgaXMgXCJ3d1wiLCBpZiBubyBwYXJhbWV0ZXIgaXMgcGFzc2VkLCBpdCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxhc3Qgd2VlayBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZS4gTm90ZSB0aGF0IGlmIHRoZSBzcGVjaWZpZWQgZGF0ZSBpcyBpbiB0aGUgZmlyc3Qgd2VlayBvZiB0aGlzIHllYXIsIHRoZSBsYXN0IHdlZWsgd2lsbCBiZSB0aGUgbGFzdCB3ZWVrIG9mIGxhc3QgeWVhclxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpMYXN0V2VlayhcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIjRcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJOZXh0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJOZXh0V2Vla1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJuIHRoZSBuZXh0IHdlZWsgb2YgdGhlIHNwZWNpZmllZCBkYXRlLCB0aGUgZm9ybWF0IGlzIFwid3dcIi4gSWYgbm8gcGFyYW1ldGVyIGlzIHBhc3NlZCwgdGhlIG5leHQgd2VlayBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuIE5vdGUgdGhhdCBpZiB0aGUgc3BlY2lmaWVkIGRhdGUgaXMgaW4gdGhlIGxhc3Qgd2VlayBvZiB0aGUgeWVhciwgdGhlIG5leHQgd2VlayB3aWxsIGJlIDFcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaTmV4dFdlZWsoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCI2XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRGF5T2ZXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkRheU9mV2Vla1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJuIHRoZSBzcGVjaWZpZWQgZGF0ZSBpcyB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBjdXJyZW50IHdlZWssIHRoZSBmb3JtYXQgaXMgXCJuXCIsIGlmIG5vIHBhcmFtZXRlciBpcyBwYXNzZWQsIHRoZSBkZWZhdWx0IHJldHVybiBjdXJyZW50IHN5c3RlbSBkYXRlIGlzIHRoZSBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIHdlZWsuIE5vdGUgdGhhdCBpdCByZXR1cm5zIG5vdCB0aGUgRW5nbGlzaCBhYmJyZXZpYXRpb24sIGJ1dCB0aGUgbnVtYmVyIGZvcm0uIEFjY29yZGluZyB0byBDaGluZXNlIGN1c3RvbSwgTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssIFJldHVybiBpcyAxLCBTdW5kYXkgaXMgdGhlIGVuZCBvZiB0aGUgd2VlaywgYW5kIFJldHVybiBpcyA3XFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkRheU9mV2VlayhcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIjNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGaXJzdERheU9mV2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJGaXJzdERheU9mV2Vla1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJuIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIHNwZWNpZmllZCBkYXRlIGluIHRoZSBmb3JtYXQgXCJ5eXl5LU1NLWRkXCIuIElmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCwgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuIEFjY29yZGluZyB0byBDaGluZXNlIGN1c3RvbSwgTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssIGFuZCBTdW5kYXkgaXMgdGhlIGxhc3QgZGF5IG9mIHRoZSB3ZWVrXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkZpcnN0RGF5T2ZXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0yOFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZldlZWtcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGFzdERheU9mV2Vla1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgbGFzdCBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIHNwZWNpZmllZCBkYXRlIGluIHRoZSBmb3JtYXQgXCJ5eXl5LU1NLWRkXCIuIElmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCwgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuIEFjY29yZGluZyB0byBDaGluZXNlIGN1c3RvbSwgTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssIGFuZCBTdW5kYXkgaXMgdGhlIGxhc3QgZGF5IG9mIHRoZSB3ZWVrXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkZpcnN0RGF5T2ZXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMi0wM1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZMYXN0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJGaXJzdERheU9mTGFzdFdlZWtcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGZpcnN0IGRheSBvZiB0aGUgbGFzdCB3ZWVrIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSBpbiB0aGUgZm9ybWF0IFwieXl5eS1NTS1kZFwiLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIHRoZSBmaXJzdCBkYXkgb2YgdGhlIGxhc3Qgd2VlayBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuIEFjY29yZGluZyB0byBDaGluZXNlIGN1c3RvbSwgTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssIGFuZCBTdW5kYXkgaXMgdGhlIGxhc3QgZGF5IG9mIHRoZSB3ZWVrXFxu44CQZGF0ZeOAkTogZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaRmlyc3REYXlPZkxhc3RXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0yMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZkxhc3RXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkxhc3REYXlPZkxhc3RXZWVrXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm5zIHRoZSBsYXN0IGRheSBvZiB0aGUgbGFzdCB3ZWVrIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSBpbiB0aGUgZm9ybWF0IFwieXl5eS1NTS1kZFwiLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIGl0IHdpbGwgZGVmYXVsdCB0byB0aGUgbGFzdCBkYXkgb2YgdGhlIGxhc3Qgd2VlayBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZS4gQWNjb3JkaW5nIHRvIENoaW5lc2UgY3VzdG9tLCBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaywgYW5kIFN1bmRheSBpcyB0aGUgbGFzdCBkYXkgb2YgdGhlIHdlZWtcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaTGFzdERheU9mTGFzdFdlZWsoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE5LTAxLTI3XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZk5leHRXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkZpcnN0RGF5T2ZOZXh0V2Vla1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgZmlyc3QgZGF5IG9mIHRoZSBuZXh0IHdlZWsgb2YgdGhlIHNwZWNpZmllZCBkYXRlIGluIHRoZSBmb3JtYXQgXCJ5eXl5LU1NLWRkXCIuIElmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCwgaXQgd2lsbCBkZWZhdWx0IHRvIHRoZSBmaXJzdCBkYXkgb2YgdGhlIG5leHQgd2VlayBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZS4gQWNjb3JkaW5nIHRvIENoaW5lc2UgY3VzdG9tLCBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaywgYW5kIFN1bmRheSBpcyB0aGUgbGFzdCBkYXkgb2YgdGhlIHdlZWtcXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaRmlyc3REYXlPZk5leHRXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMi0wNFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZk5leHRXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkxhc3REYXlPZk5leHRXZWVrXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm5zIHRoZSBsYXN0IGRheSBvZiB0aGUgbmV4dCB3ZWVrIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSBpbiB0aGUgZm9ybWF0IFwieXl5eS1NTS1kZFwiLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIHRoZSBkZWZhdWx0IHJldHVybnMgdGhlIGxhc3QgZGF5IG9mIHRoZSBuZXh0IHdlZWsgb2YgdGhlIGN1cnJlbnQgc3lzdGVtIGRhdGUuIEFjY29yZGluZyB0byBDaGluZXNlIGN1c3RvbSwgTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssIGFuZCBTdW5kYXkgaXMgdGhlIGxhc3QgZGF5IG9mIHRoZSB3ZWVrXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkxhc3REYXlPZk5leHRXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMi0xMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJGaXJzdERheU9mTW9udGhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGggb2YgdGhlIHNwZWNpZmllZCBkYXRlIGluIHRoZSBmb3JtYXQgXCJ5eXl5LU1NLWRkXCIuIElmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCwgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGggb2YgdGhlIGN1cnJlbnQgc3lzdGVtIGRhdGUgd2lsbCBiZSByZXR1cm5lZCBieSBkZWZhdWx0LlxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpGaXJzdERheU9mTW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE5LTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGFzdERheU9mTW9udGhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aCBvZiB0aGUgc3BlY2lmaWVkIGRhdGUgaW4gdGhlIGZvcm1hdCBcInl5eXktTU0tZGRcIi4gSWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoIG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlIHdpbGwgYmUgcmV0dXJuZWQgYnkgZGVmYXVsdC5cXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaTGFzdERheU9mTW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE5LTAxLTMxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZkxhc3RNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJGaXJzdERheU9mTGFzdE1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm5zIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHByZXZpb3VzIG1vbnRoIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSwgaW4gdGhlIGZvcm1hdCBcInl5eXktTU0tZGRcIi4gSWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCB0aGUgZmlyc3QgZGF5IG9mIHRoZSBwcmV2aW91cyBtb250aCBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkZpcnN0RGF5T2ZMYXN0TW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE4LTEyLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTGFzdE1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkxhc3REYXlPZkxhc3RNb250aFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgbGFzdCBkYXkgb2YgdGhlIHByZXZpb3VzIG1vbnRoIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSwgdGhlIGZvcm1hdCBpcyBcInl5eXktTU0tZGRcIiwgaWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCB0aGUgZGVmYXVsdCByZXR1cm5zIHRoZSBsYXN0IGRheSBvZiB0aGUgcHJldmlvdXMgbW9udGggb2YgdGhlIGN1cnJlbnQgc3lzdGVtIGRhdGUuXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkxhc3REYXlPZkxhc3RNb250aChcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIjIwMTgtMTItMzFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGaXJzdERheU9mTmV4dE1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkZpcnN0RGF5T2ZOZXh0TW9udGhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGZpcnN0IGRheSBvZiB0aGUgbmV4dCBtb250aCBvZiB0aGUgc3BlY2lmaWVkIGRhdGUgaW4gdGhlIGZvcm1hdCBcInl5eXktTU0tZGRcIi4gSWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCBpdCB3aWxsIGRlZmF1bHQgdG8gdGhlIGZpcnN0IGRheSBvZiB0aGUgbmV4dCBtb250aCBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZS5cXG7jgJBkYXRl44CR77yaZGF0ZSB0aW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaRmlyc3REYXlPZk5leHRNb250aChcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIjIwMTktMDItMDFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZOZXh0TW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGFzdERheU9mTmV4dE1vbnRoXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSZXR1cm5zIHRoZSBsYXN0IGRheSBvZiB0aGUgbmV4dCBtb250aCBvZiB0aGUgc3BlY2lmaWVkIGRhdGUgaW4gdGhlIGZvcm1hdCBcInl5eXktTU0tZGRcIi4gSWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCBpdCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxhc3QgZGF5IG9mIHRoZSBuZXh0IG1vbnRoIG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlLlxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpMYXN0RGF5T2ZOZXh0TW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE5LTAyLTI4XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZlllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiRmlyc3REYXlPZlllYXJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGZpcnN0IGRheSBvZiB0aGUgY3VycmVudCB5ZWFyIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSBpbiB0aGUgZm9ybWF0IFwieXl5eS1NTS1kZFwiLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIHRoZSBmaXJzdCBkYXkgb2YgdGhlIGN1cnJlbnQgeWVhciBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkZpcnN0RGF5T2ZZZWFyKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0wMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZlllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGFzdERheU9mWWVhclwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgbGFzdCBkYXkgb2YgdGhlIGN1cnJlbnQgeWVhciBvZiB0aGUgc3BlY2lmaWVkIGRhdGUgaW4gdGhlIGZvcm1hdCBcInl5eXktTU0tZGRcIi4gSWYgbm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkLCB0aGUgbGFzdCBkYXkgb2YgdGhlIGN1cnJlbnQgeWVhciBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkxhc3REYXlPZlllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE5LTEyLTMxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZkxhc3RZZWFyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkZpcnN0RGF5T2ZMYXN0WWVhclwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgZmlyc3QgZGF5IG9mIHRoZSBwcmV2aW91cyB5ZWFyIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSBpbiB0aGUgZm9ybWF0IFwieXl5eS1NTS1kZFwiLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHByZXZpb3VzIHllYXIgb2YgdGhlIGN1cnJlbnQgc3lzdGVtIGRhdGUgd2lsbCBiZSByZXR1cm5lZCBieSBkZWZhdWx0LlxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpGaXJzdERheU9mTGFzdFllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDE4LTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTGFzdFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGFzdERheU9mTGFzdFllYXJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGxhc3QgZGF5IG9mIHRoZSBwcmV2aW91cyB5ZWFyIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSBpbiB0aGUgZm9ybWF0IFwieXl5eS1NTS1kZFwiLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIHRoZSBsYXN0IGRheSBvZiB0aGUgcHJldmlvdXMgeWVhciBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSB3aWxsIGJlIHJldHVybmVkIGJ5IGRlZmF1bHQuXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxu44CQRXhhbXBsZeOAke+8mkxhc3REYXlPZkxhc3RZZWFyKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOC0xMi0zMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZOZXh0WWVhclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJGaXJzdERheU9mTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGZpcnN0IGRheSBvZiB0aGUgbmV4dCB5ZWFyIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZSBpbiB0aGUgZm9ybWF0IFwieXl5eS1NTS1kZFwiLiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIGl0IHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBkYXkgb2YgdGhlIG5leHQgeWVhciBvZiB0aGUgY3VycmVudCBzeXN0ZW0gZGF0ZSBieSBkZWZhdWx0LlxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpGaXJzdERheU9mTmV4dFllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQUmV0dXJu44CR77yaXCIyMDIwLTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiTGFzdERheU9mTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGxhc3QgZGF5IG9mIHRoZSBuZXh0IHllYXIgb2YgdGhlIHNwZWNpZmllZCBkYXRlIGluIHRoZSBmb3JtYXQgXCJ5eXl5LU1NLWRkXCIuIElmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCwgaXQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsYXN0IGRheSBvZiB0aGUgbmV4dCB5ZWFyIG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlLlxcbuOAkGRhdGXjgJHvvJpkYXRlIHRpbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mlN0cmluZyhTeXN0ZW0uU3RyaW5nKVxcbuOAkEV4YW1wbGXjgJHvvJpMYXN0RGF5T2ZOZXh0WWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJBSZXR1cm7jgJHvvJpcIjIwMjAtMTItMzFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiRGVmYXVsdEZ1bmN0aW9uXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJHZXREYXRlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkdldERhdGVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJuIHRoZSBkYXRlIGluIHRoZSBzcGVjaWZpZWQgZm9ybWF0LiBJZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQsIGl0IHdpbGwgcmV0dXJuIHRoZSBkYXRlIGluIHRoZSBzcGVjaWZpZWQgZm9ybWF0IG9mIHRoZSBjdXJyZW50IHN5c3RlbSBkYXRlIGJ5IGRlZmF1bHQuXFxu44CQZm9ybWF044CR77ya5qC85byP5YyW5LiyXFxu44CQZGF0ZeOAke+8mmRhdGUgdGltZVxcbuOAkFJldHVybiBUeXBl44CR77yaU3RyaW5nKFN5c3RlbS5TdHJpbmcpXFxuXFx0RETvvJpUb2RheVxcdExE77yaWWVzdGVyZGF5XFx0TkTvvJpUb21vcnJvd1xcblxcdFlZ77yaVGhpcyB5ZWFyXFx0TFnvvJpMYXN0IHllYXJcXHROWe+8mk5leHQgeWVhclxcblxcdE1N77yaVGhpcyBtb250aFxcdExN77yaTGFzdCBtb250aFxcdE5N77yaTmV4dCBtb250aFxcblxcdFdE77yaRGF5IG9mIHRoZSB3ZWVrXFxuXFx0V1fvvJpUaGlzIHdlZWtcXHRMV++8mkxhc3Qgd2Vla1xcdE5X77yaTmV4dCB3ZWVrXFxuXFx0RkRX77yaRmlyc3QgZGF5IG9mIHRoaXMgd2Vla1xcdExEV++8mkVuZCBvZiB0aGlzIHdlZWtcXG5cXHRGRExX77yaRmlyc3QgZGF5IG9mIGxhc3Qgd2Vla1xcdExETFfvvJpFbmQgb2YgdGhlIGxhc3Qgd2Vla1xcblxcdEZETlfvvJpGaXJzdCBkYXkgb2YgbmV4dCB3ZWVrXFx0TEROV++8mkVuZCBvZiBuZXh0IHdlZWtcXG5cXHRGRE3vvJpGaXJzdCBkYXkgb2YgdGhpcyBtb250aFxcdExETe+8mkVuZCBvZiB0aGlzIG1vbnRoXFxuXFx0RkRMTe+8mkZpcnN0IGRheSBvZiBsYXN0IG1vbnRoXFx0TERMTe+8mkVuZCBvZiBsYXN0IG1vbnRoXFxuXFx0RkROTe+8mkZpcnN0IGRheSBvZiBuZXh0IG1vbnRoXFx0TEROTe+8mkVuZCBvZiBuZXh0IG1vbnRoXFxuXFx0RkRZ77yaRmlyc3QgZGF5IG9mIHRoaXMgeWVhclxcdExEWe+8mm5kIG9mIHRoaXMgeWVhclxcblxcdEZETFnvvJpGaXJzdCBkYXkgb2YgbGFzdCB5ZWFyXFx0TERMWe+8mkVuZCBvZiBsYXN0IHllYXJcXG5cXHRGRE5Z77yaRmlyc3QgZGF5IG9mIG5leHQgeWVhclxcdExETlnvvJpFbmQgb2YgbmV4dCB5ZWFyXFxu44CQRXhhbXBsZeOAke+8mkdldERhdGUoXCJMRFwiLFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAke+8mlwiMjAxOS0wMS0yOVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvU3RyaW5nWFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJUb1N0cmluZ1hcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpDb252ZXJ0IHRoZSBzcGVjaWZpZWQgb2JqZWN0IGludG8gYSBzdHJpbmdcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgY29udmVydGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaVG9TdHJpbmdYKDEyMylcXG7jgJBSZXR1cm7jgJHvvJpcIjEyM1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0RhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRvRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpDb252ZXJ0IHRoZSBzcGVjaWZpZWQgb2JqZWN0IGludG8gZGF0ZSB0aW1lXFxu44CQb2Jq44CR77yaT2JqZWN0IHRvIGJlIGNvbnZlcnRlZFxcbuOAkFJldHVybiBUeXBl44CR77yaT2Zmc2V0RGF0ZVRpbWUoU3lzdGVtLk9mZnNldERhdGVUaW1lKVxcbuOAkEV4YW1wbGXjgJHvvJpUb0RhdGVUaW1lKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkFJldHVybuOAkTogMjAxOS0wMS0zMFQxMDowMCswODowMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9Cb29sZWFuXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRvQm9vbGVhblwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvbnZlcnQgdGhlIHNwZWNpZmllZCBvYmplY3QgdmFsdWUgaW50byBhbiBlcXVpdmFsZW50IGJvb2xlYW4gdmFsdWVcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgY29udmVydGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpCb29sZWFuKFN5c3RlbS5Cb29sZWFuKVxcbuOAkEV4YW1wbGXjgJHvvJpUb0Jvb2xlYW4oXCJUcnVlXCIpXFxu44CQUmV0dXJu44CR77yadHJ1ZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9EZWNpbWFsXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRvRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvbnZlcnQgdGhlIHNwZWNpZmllZCBvYmplY3QgaW50byBhIGRlY2ltYWwgdmFsdWVcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgY29udmVydGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpCaWdEZWNpbWFsKFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkEV4YW1wbGXjgJHvvJpUb0RlY2ltYWwoXCI0MC4yM1wiKVxcbuOAkFJldHVybuOAke+8mjQwLjIzYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0JpZ0RlY2ltYWxcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVG9CaWdEZWNpbWFsXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ29udmVydCB0aGUgc3BlY2lmaWVkIG9iamVjdCBpbnRvIGEgQmlnRGVjaW1hbCB2YWx1ZVxcbuOAkG9iauOAke+8mk9iamVjdCB0byBiZSBjb252ZXJ0ZWRcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkJpZ0RlY2ltYWwoU3lzdGVtLkJpZ0RlY2ltYWwpXFxu44CQRXhhbXBsZeOAke+8mlRvQmlnRGVjaW1hbChcIjQwLjIzXCIpXFxu44CQUmV0dXJu44CR77yaNDAuMjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgXCJrZXlcIjogXCJUb0N1c3RvbUJpZ0RlY2ltYWxcIixcclxuICAgICAgICAgIFwibmFtZVwiOiBcIlRvQ3VzdG9tQmlnRGVjaW1hbFwiLFxyXG4gICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImtleVwiOiBcIm51bWJlclwiLFxyXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibnVtYmVyXCIsXHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpDb252ZXJ0IHRoZSBzcGVjaWZpZWQgb2JqZWN0IGludG8gYSBkZWNpbWFsIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uXFxu44CQb2Jq44CR77yaT2JqZWN0IHRvIGJlIGNvbnZlcnRlZFxcbuOAkG51bWJlcuOAke+8mkRlY2ltYWwgcGxhY2VzXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpCaWdEZWNpbWFsKFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkEV4YW1wbGXjgJHvvJpUb0N1c3RvbUJpZ0RlY2ltYWwoXCI0MC4yLDJcIilcXG7jgJBSZXR1cm7jgJHvvJo0MC4yMGAsXHJcbiAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvRG91YmxlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlRvRG91YmxlXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ29udmVydCB0aGUgc3BlY2lmaWVkIG9iamVjdCBpbnRvIGEgZG91YmxlIHZhbHVlXFxu44CQb2Jq44CR77yaT2JqZWN0IHRvIGJlIGNvbnZlcnRlZFxcbuOAkFJldHVybiBUeXBl44CR77yaRG91YmxlKFN5c3RlbS5Eb3VibGUpXFxu44CQRXhhbXBsZeOAke+8mlRvRG91YmxlKFwiNDAuMjNcIilcXG7jgJBSZXR1cm7jgJHvvJo0MC4yM2AsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9TaW5nbGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVG9TaW5nbGVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpDb252ZXJ0IHRoZSBzcGVjaWZpZWQgb2JqZWN0IGludG8gYSBzaW5nbGUgdmFsdWVcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgY29udmVydGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpGbG9hdChTeXN0ZW0uRmxvYXQpXFxu44CQRXhhbXBsZeOAke+8mlRvU2luZ2xlKFwiNDAuMjNcIilcXG7jgJBSZXR1cm7jgJHvvJo0MC4yM2AsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9GbG9hdFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJUb0Zsb2F0XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ29udmVydCB0aGUgc3BlY2lmaWVkIG9iamVjdCBpbnRvIGEgZmxvYXQgdmFsdWVcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgY29udmVydGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpGbG9hdChTeXN0ZW0uRmxvYXQpXFxu44CQRXhhbXBsZeOAke+8mlRvRmxvYXQoXCI0MC4yM1wiKVxcbuOAkFJldHVybuOAke+8mjQwLjIzYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0J5dGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVG9CeXRlXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ29udmVydCB0aGUgc3BlY2lmaWVkIG9iamVjdCBpbnRvIGEgYnl0ZVxcbuOAkG9iauOAke+8mk9iamVjdCB0byBiZSBjb252ZXJ0ZWRcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkJ5dGUoU3lzdGVtLkJ5dGUpXFxu44CQRXhhbXBsZeOAke+8mlRvQnl0ZShcIjEwXCIpXFxu44CQUmV0dXJu44CR77yaMTBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvSW50MTZcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiVG9JbnQxNlwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvbnZlcnQgdGhlIHNwZWNpZmllZCBvYmplY3QgaW50byBhIEludDE2XFxu44CQb2Jq44CR77yaT2JqZWN0IHRvIGJlIGNvbnZlcnRlZFxcbuOAkFJldHVybiBUeXBl44CR77yaSW50MTYoU3lzdGVtLkludDE2KVxcbuOAkEV4YW1wbGXjgJHvvJpUb0ludDE2KFwiMTBcIilcXG7jgJBSZXR1cm7jgJHvvJoxMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9JbnQzMlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJUb0ludDMyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaQ29udmVydCB0aGUgc3BlY2lmaWVkIG9iamVjdCBpbnRvIGEgSW50MzJcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgY29udmVydGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpJbnQzMihTeXN0ZW0uSW50MzIpXFxu44CQRXhhbXBsZeOAke+8mlRvSW50MzIoXCIxMFwiKVxcbuOAkFJldHVybuOAke+8mjEwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0NoaW5lc2VNb25leVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJUb0NoaW5lc2VNb25leVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkNvbnZlcnQgdGhlIHNwZWNpZmllZCBvYmplY3QgaW50byBDaGluZXNlIHVwcGVyY2FzZSBhbW91bnRcXG7jgJBvYmrjgJHvvJpPYmplY3QgdG8gYmUgY29udmVydGVkXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpTdHJpbmcoU3lzdGVtLlN0cmluZylcXG7jgJBFeGFtcGxl44CR77yaVG9DaGluZXNlTW9uZXkoNDAuMjMpXFxu44CQUmV0dXJu44CR77yaXCLogobmi77lhYPpm7botLDop5Llj4HliIZcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0U2Vzc2lvblZhbHVlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkdldFNlc3Npb25WYWx1ZVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaR2V0IHRoZSB2YWx1ZSBvZiB0aGUgdXNlciBzZXNzaW9uIHZhcmlhYmxlXFxu44CQbmFtZeOAke+8mnRoZSB1c2VyIHNlc3Npb24gdmFyaWFibGVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mk9iamVjdChTeXN0ZW0uT2JqZWN0KWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkFuYWx5dGljYWxcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldENvbnRleHRQYXJhbWV0ZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiR2V0Q29udGV4dFBhcmFtZXRlclwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaR2V0IHRoZSB2YWx1ZSBvZiB0aGUgY29udGV4dCB2YXJpYWJsZVxcbuOAkG5hbWXjgJHvvJp0aGUgY29udGV4dCB2YXJpYWJsZVxcbuOAkFJldHVybiBUeXBl44CR77yaT2JqZWN0KFN5c3RlbS5PYmplY3QpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiZ2V0Q29tcHV0ZUpzb25EYXRhXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImdldENvbXB1dGVKc29uRGF0YVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaR2V0IHRoZSBKU09OIHN0cmluZyBhY2NvcmRpbmcgdG8gdGhlIGNoYWluIGF0dHJpYnV0ZSBuYW1lXFxu44CQY2hhaW5lZFByb3BOYW1l44CRY2hhaW5lZFByb3BOYW1lXFxu44CQcHJvcGVydHlOYW1l44CRcHJvcGVydHlOYW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpPYmplY3QoU3lzdGVtLlN0cmluZylgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJBbmFseXRpY2FsXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJHZXRDb21wdXRlSnNvbkRhdGFcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiR2V0Q29tcHV0ZUpzb25EYXRhXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpHZXQgdGhlIEpTT04gc3RyaW5nIGFjY29yZGluZyB0byB0aGUgY2hhaW4gYXR0cmlidXRlIG5hbWVcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJFjaGFpbmVkUHJvcE5hbWVcXG7jgJBwcm9wZXJ0eU5hbWXjgJFwcm9wZXJ0eU5hbWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mk9iamVjdChTeXN0ZW0uU3RyaW5nKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkFuYWx5dGljYWxcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldEluamVjdGVkRW50aXR5XCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkdldEluamVjdGVkRW50aXR5XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpHZXQgdGhlIG9iamVjdCBpbmplY3RlZCBhdCBydW50aW1lXFxu44CQbmFtZeOAkUluamVjdGlvbiBuYW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpPYmplY3QoU3lzdGVtLk9iamVjdClgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJBbmFseXRpY2FsXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJHZXRDaGFpbmVkUHJvcGVydHlWYWx1ZVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJHZXRDaGFpbmVkUHJvcGVydHlWYWx1ZVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mkdldCB0aGUgYXR0cmlidXRlIHZhbHVlIGJhc2VkIG9uIHRoZSBjaGFpbmVkIGF0dHJpYnV0ZSBuYW1lXFxu44CQY2hhaW5lZFByb3BOYW1l44CRY2hhaW5lZFByb3BOYW1lXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpPYmplY3QoU3lzdGVtLk9iamVjdClgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJBbmFseXRpY2FsXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJhYnNcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYWJzXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGFic29sdXRlIHZhbHVlIG9mIGEgbnVtYmVyXFxu44CQdmFsdWXjgJHvvJp2YWx1ZVxcbuOAkFJldHVybiBUeXBl44CR77yaRG91YmxlKFN5c3RlbS5Eb3VibGUpXFxu44CQRXhhbXBsZeOAke+8mmFicygtMS41KVxcbuOAkFJldHVybuOAke+8mjEuNWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJSb3VuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJSb3VuZFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTFcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludDMyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSb3VuZHMgdGhlIG51bWJlciB0byB0aGUgc3BlY2lmaWVkIHByZWNpc2lvblxcbuOAkHZhbHVlMeOAke+8mnZhbHVlIFxcbuOAkHZhbHVlMuOAke+8mlJvdW5kIG9mZiBkZWNpbWFsIHBsYWNlc1xcbuOAkFJldHVybiBUeXBl44CR77yaRG91YmxlKFN5c3RlbS5Eb3VibGUpXFxu44CQRXhhbXBsZeOAke+8mlxcblJvdW5kKDEuNTIsMSlcXG7jgJBSZXR1cm7jgJHvvJoxLjVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJyb3VuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJyb3VuZFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTFcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludDMyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpSb3VuZHMgdGhlIG51bWJlciB0byB0aGUgc3BlY2lmaWVkIHByZWNpc2lvblxcbuOAkHZhbHVlMeOAke+8mnZhbHVlIFxcbuOAkHZhbHVlMuOAke+8mlJvdW5kIG9mZiBkZWNpbWFsIHBsYWNlc1xcbuOAkFJldHVybiBUeXBl44CR77yaRG91YmxlKFN5c3RlbS5Eb3VibGUpXFxu44CQRXhhbXBsZeOAke+8mnJvdW5kKDEuNTIsMSlcXG7jgJBSZXR1cm7jgJHvvJoxLjVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJyYW5kb21cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicmFuZG9tXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJhbmRvbWx5IGdlbmVyYXRlIGEgcHNldWRvLXJhbmRvbSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMC4wIGFuZCBsZXNzIHRoYW4gMS4wXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpEb3VibGUoU3lzdGVtLkRvdWJsZSlcXG7jgJBFeGFtcGxl44CR77yacmFuZG9tKClcXG7jgJBSZXR1cm7jgJHvvJowLjYyNDUwODM0OTM5M2AsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJzaW5cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwic2luXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIHNpbmUgb2YgYSBudW1iZXJcXG7jgJB2YWx1ZeOAke+8mnZhbHVlXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpEb3VibGUoU3lzdGVtLkRvdWJsZSlcXG5BbiBhbmdsZSBleHByZXNzZWQgaW4gcmFkaWFuc1xcbuOAkEV4YW1wbGXjgJHvvJpzaW4oMSlcXG7jgJBSZXR1cm7jgJHvvJowLjg0MTg3MDk4YCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcImNvc1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjb3NcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgY29zaW5lIG9mIGEgbnVtYmVyXFxu44CQdmFsdWXjgJHvvJp2YWx1ZVxcbuOAkFJldHVybiBUeXBl44CR77yaRG91YmxlKFN5c3RlbS5Eb3VibGUpXFxuQW4gYW5nbGUgZXhwcmVzc2VkIGluIHJhZGlhbnNcXG7jgJBFeGFtcGxl44CR77yaY29zKDMpXFxu44CQUmV0dXJu44CR77yaLTAuOTg5OTkyNGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJjZWlsXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNlaWxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkEZ1bmN0aW9u44CR77yaUmV0dXJucyB0aGUgaW50ZWdlciB0aGF0IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZnVuY3Rpb24gcGFyYW1ldGVyIGFuZCBjbG9zZXN0IHRvIGl0XFxu44CQdmFsdWXjgJHvvJp2YWx1ZVxcbuOAkFJldHVybiBUeXBl44CR77yaSW50MzIoU3lzdGVtLkludDMyKVxcbuOAkEV4YW1wbGXjgJHvvJpjZWlsKDMuMilcXG7jgJBSZXR1cm7jgJHvvJo0YCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcImZsb29yXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImZsb29yXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJBGdW5jdGlvbuOAke+8mlJldHVybnMgdGhlIGludGVnZXIgdGhhdCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGZ1bmN0aW9uIHBhcmFtZXRlciBhbmQgY2xvc2VzdCB0byBpdFxcbuOAkHZhbHVl44CR77yadmFsdWVcXG7jgJBSZXR1cm4gVHlwZeOAke+8mkludDMyKFN5c3RlbS5JbnQzMilcXG7jgJBFeGFtcGxl44CR77yaZmxvb3IoMy4yKVxcbuOAkFJldHVybuOAke+8mjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiQmFua2VyUm91bmRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiQmFua2VyUm91bmRcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWwj+aVsOS9jeaVsFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludDMyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJrkvb/nlKjpk7booYzlrrboiI3lhaXmoIflh4bvvIzmiormjIflrprmlbDlrZfoiI3lhaXkuLrmnIDmjqXov5HnmoTmlbDlrZdcXG7jgJB2YWx1ZTHjgJHvvJropoHoiI3lhaXnmoTmlbDlgLxcXG7jgJB2YWx1ZTLjgJHvvJropoHoiI3lhaXnmoTlsI/mlbDkvY3mlbBcXG7jgJBSZXR1cm4gVHlwZeOAke+8muaVsOWAvChTeXN0ZW0uRG91YmxlKVxcbuOAkEV4YW1wbGXjgJHvvJpCYW5rZXJSb3VuZCgzNi4xMjQsMilcXG7jgJBSZXR1cm7jgJHvvJozNi4xMmAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJiYW5rZXJSb3VuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJiYW5rZXJSb3VuZFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTFcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludDMyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQRnVuY3Rpb27jgJHvvJpVc2UgdGhlIGJhbmtlcidzIHJvdW5kaW5nIHN0YW5kYXJkIHRvIHJvdW5kIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHRvIHRoZSBuZWFyZXN0IG51bWJlclxcbuOAkHZhbHVlMeOAke+8mlRoZSB2YWx1ZSB0byBiZSByb3VuZGVkXFxu44CQdmFsdWUy44CR77yaTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kXFxu44CQUmV0dXJuIFR5cGXjgJHvvJpEb3VibGUoU3lzdGVtLkRvdWJsZSlcXG7jgJBFeGFtcGxl44CR77yaYmFua2VyUm91bmQoMzYuMTI0LDIpXFxu44CQUmV0dXJu44CR77yaMzYuMTJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgXCJ6aC1DSFRcIjpcclxuICAgIFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJpZlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcImlmKClcXG57XFxuXFxufVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwiaWYgOiDliKTmlrfmop3ku7ZcIixcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZHZhbmNlZFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJpZiBlbHNlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwiaWYoKVxcbntcXG5cXG59XFxuZWxzZVxcbntcXG5cXG59XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjpcImlmIGVsc2UgOiDliKTmlrfmop3ku7ZcIixcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZHZhbmNlZFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJmb3JcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJmb3IoOzspXFxue1xcblxcbn1cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwiZm9y5b6q55KwXCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwicmV0dXJuXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwicmV0dXJuIDtcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwi6L+U5Zue5pON5L2cXCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwidmFyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwidmFyIFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOltdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6XCLororph4/lrprnvqlcIixcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZHZhbmNlZFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJ0cnVlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwidHJ1ZSBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwi5q2j56K6XCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiZmFsc2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCJmYWxzZSBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOlwi6Yyv6KqkXCIsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWR2YW5jZWRcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nU3Vic3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Y+W5a2Q5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwic3RhcnRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLotbflp4vkvY3nva5cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLplbfluqZcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmupDlrZfnrKbkuLLkuK3mqqLntKLlrZDlrZfnrKbkuLLvvIzlrZDlrZfnrKbkuLLlvp7mjIflrprnmoTlrZfnrKbkvY3nva7plovlp4vkuJTlhbfmnInmjIflrprnmoTplbfluqZcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHN0YXJ044CR77ya6LW35aeL5L2N572uKOW+njDplovlp4spXFxu44CQbGVuZ3Ro44CR77ya6ZW35bqmXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaU3RyaW5nU3Vic3RyaW5nKFwiQUJDREVGR1wiLDIsMylcXG7jgJDov5Tlm57lgLzjgJHvvJpcIkNERVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3ViU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Y+W5a2Q5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwic3RhcnRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLotbflp4vkvY3nva5cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJsZW5ndGhcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLplbfluqZcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmupDlrZfnrKbkuLLkuK3mqqLntKLlrZDlrZfnrKbkuLLvvIzlrZDlrZfnrKbkuLLlvp7mjIflrprnmoTlrZfnrKbkvY3nva7plovlp4vkuJTlhbfmnInmjIflrprnmoTplbfluqZcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHN0YXJ044CR77ya6LW35aeL5L2N572uKOW+njDplovlp4spXFxu44CQbGVuZ3Ro44CR77ya6ZW35bqmXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaU3ViU3RyaW5nKFwiQUJDREVGR1wiLDIsMylcXG7jgJDov5Tlm57lgLzjgJHvvJpcIkNERVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nTGVuZ3RoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Y+W5a2X56ym5Liy6ZW35bqmXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya542y5Y+W5oyH5a6a5a2X56ym5Liy55qE6ZW35bqmXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkludDMyKVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ0xlbmd0aChcIuiqnue+qeWMluihqOmBlOW8j1wiKVxcbiDjgJDov5Tlm57lgLzjgJHvvJo2YCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiTGVuZ3RoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Y+W5a2X56ym5Liy6ZW35bqmXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6W1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya542y5Y+W5oyH5a6a5a2X56ym5Liy55qE6ZW35bqmXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkludDMyKVxcbuOAkOekuuS+i+OAke+8mkxlbmd0aChcIuiqnue+qeWMluihqOmBlOW8j1wiKVxcbiDjgJDov5Tlm57lgLzjgJHvvJo2YCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiQ29udGFpbnNcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLmmK/lkKbljIXlkKtcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjpbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnm67mqJnlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrliKTmlrfmupDlrZfnrKbkuLLkuK3mmK/lkKbljIXlkKvnm67mqJnlrZfnrKbkuLJcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHRhcmdldOOAke+8muebruaomeWtl+espuS4slxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8mlN5c3RlbS5Cb29sZWFuXFxu44CQ56S65L6L44CR77yaQ29udGFpbnMgKHNhbGVzb3JkZXIuY29kZSxcIuihqOmBlOW8j1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mnRydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdGFydHNXaXRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi6ZaL6aCt5pivXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcInRhcmdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuebruaomeWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIpOaWt+a6kOWtl+espuS4suaYr+WQpuS7peebruaomeWtl+espuS4sumWi+mgrVxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQdGFyZ2V044CR77ya55uu5qiZ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77yaU3lzdGVtLkJvb2xlYW5cXG7jgJDnpLrkvovjgJHvvJpTdGFydHNXaXRoIChzYWxlc29yZGVyLmNvZGUsXCLlrZDllq7kvY1cIilcXG7jgJDov5Tlm57lgLzjgJHvvJp0cnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiRW5kc1dpdGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLntZDlsL7mmK9cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi55uu5qiZ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yik5pa35rqQ5a2X56ym5Liy5piv5ZCm5Lul55uu5qiZ5a2X56ym5Liy57WQ5bC+XFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJB0YXJnZXTjgJHvvJrnm67mqJnlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJpTeXN0ZW0uQm9vbGVhblxcbuOAkOekuuS+i+OAke+8mkVuZHNXaXRoIChzYWxlc29yZGVyLmNvZGUsXFxcIuWtkOWWruS9jVxcXCIpXFxu44CQ6L+U5Zue5YC844CR77yadHJ1ZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ1JlcGxhY2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLlrZfnrKbkuLLmm7/mj5tcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib2xkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLooqvmm7/mj5vlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJuZXdWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuabv+aPm+WAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+a6kOWtl+espuS4suS4reeahFwi6KKr5pu/5o+b5YC8XCLmm7/mj5vngrpcIuabv+aPm+WAvFwiXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJBvbGRWYWx1ZeOAke+8muiiq+abv+aPm+WAvFxcbuOAkG5ld1ZhbHVl44CR77ya5pu/5o+b5YC8XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaU3RyaW5nUmVwbGFjZShcIjEyMzQxMlwiLFwiMTJcIixcIjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIwMDM0MDBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlJlcGxhY2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLlrZfnrKbkuLLmm7/mj5tcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCIgOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIiA6IFwib2xkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLooqvmm7/mj5vlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiIDogXCJuZXdWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuabv+aPm+WAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+a6kOWtl+espuS4suS4reeahFwi6KKr5pu/5o+b5YC8XCLmm7/mj5vngrpcIuabv+aPm+WAvFwiXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJBvbGRWYWx1ZeOAke+8muiiq+abv+aPm+WAvFxcbuOAkG5ld1ZhbHVl44CR77ya5pu/5o+b5YC8XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaUmVwbGFjZShcIjEyMzQxMlwiLFwiMTJcIixcIjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIwMDM0MDBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ1RvVXBwZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLovYnlpKflr6tcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIfmupDlrZfnrKbkuLLovYnmj5vngrrlpKflr6tcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ1RvVXBwZXIoXCJhYmNcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIkFCQ1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiVG9VcHBlclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIui9ieWkp+Wvq1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+a6kOWtl+espuS4sui9ieaPm+eCuuWkp+Wvq1xcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVG9VcHBlcihcImFiY1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdUb0xvd2VyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi6L2J5bCP5a+rXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCH5rqQ5a2X56ym5Liy6L2J5o+b54K65bCP5a+rXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdUb0xvd2VyKFwiQUJDXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCJhYmNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlRvTG93ZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLovYnlsI/lr6tcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIfmupDlrZfnrKbkuLLovYnmj5vngrrlsI/lr6tcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRvTG93ZXIoXCJBQkNcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcImFiY1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nSW5kZXhPZlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIueNsuWPlummluWAi+WMuemFjeWtl+espuS4sueahOe0ouW8lVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidGFyZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi55uu5qiZ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Zyo5rqQ5a2X56ym5Liy5Lit77yM5qqi57Si55uu5qiZ5a2X56ym5Liy77yM5om+5Yiw56ys5LiA5YCL5Yy56YWN55qE5a2X56ym5Liy5b6M77yM6L+U5Zue5YW257Si5byV5L2N572uKOW+njDplovlp4sp44CC5aaC5p6c5pyq5om+5Yiw55uu5qiZ5a2X56ym5Liy77yM5YmH6L+U5ZueLTHvvIzlpoLmnpznm67mqJnlrZfnrKbkuLLngrrnqbrkuLLvvIzov5Tlm54w77yM5aaC5p6c5Y6f5a2X56ym5Liy54K6bnVsbO+8jOWJh+i/lOWbni0xXFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJB0YXJnZXTjgJHvvJrnm67mqJnlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkludDMyKVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ0luZGV4T2YoXCIxMjAwMTIzNDAxMlwiLFwiMDFcIilcXG7jgJDov5Tlm57lgLzjgJHvvJozXFxu44CQ56S65L6L44CR77yaU3RyaW5nSW5kZXhPZihcIjEyMDAyMzIzIFwiLFwiMzRcIilcXG7jgJDov5Tlm57lgLzjgJHvvJotMVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ0luZGV4T2YoXCIxMjAwMTFcIixcIlwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJJbmRleE9mXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi542y5Y+W6aaW5YCL5Yy56YWN5a2X56ym5Liy55qE57Si5byVXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnm67mqJnlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmupDlrZfnrKbkuLLkuK3vvIzmqqLntKLnm67mqJnlrZfnrKbkuLLvvIzmib7liLDnrKzkuIDlgIvljLnphY3nmoTlrZfnrKbkuLLlvozvvIzov5Tlm57lhbbntKLlvJXkvY3nva4o5b6eMOmWi+WniynjgILlpoLmnpzmnKrmib7liLDnm67mqJnlrZfnrKbkuLLvvIzliYfov5Tlm54tMe+8jOWmguaenOebruaomeWtl+espuS4sueCuuepuuS4su+8jOi/lOWbnjDvvIzlpoLmnpzljp/lrZfnrKbkuLLngrpudWxs77yM5YmH6L+U5ZueLTFcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHRhcmdldOOAke+8muebruaomeWtl+espuS4slxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muaVuOWAvChTeXN0ZW0uSW50MzIpXFxu44CQ56S65L6L44CR77yaSW5kZXhPZihcIjEyMDAxMjM0MDEyXCIsXCIwMVwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjNcXG7jgJDnpLrkvovjgJHvvJpJbmRleE9mKFwiMTIwMDIzMjMgXCIsXCIzNFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mi0xXFxu44CQ56S65L6L44CR77yaSW5kZXhPZihcIjEyMDAxMVwiLFwiXCIpXFxu44CQ6L+U5Zue5YC844CR77yaMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlN0cmluZ0xhc3RJbmRleE9mXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi542y5Y+W5pyA5b6M5LiA5YCL5Yy56YWN5a2X56ym5Liy55qE57Si5byVXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ0YXJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnm67mqJnlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmupDlrZfnrKbkuLLkuK3vvIzmqqLntKLnm67mqJnlrZfnrKbkuLLvvIzmib7liLDmnIDlvozkuIDlgIvljLnphY3nmoTlrZfnrKbkuLLlvozvvIzov5Tlm57lhbbntKLlvJXkvY3nva4o5b6eMOmWi+WniynjgILlpoLmnpzmnKrmib7liLDnm67mqJnlrZfnrKbkuLLvvIzliYfov5Tlm54tMe+8jOWmguaenOebruaomeWtl+espuS4sueCuuepuuS4su+8jOi/lOWbnjDvvIzlpoLmnpzljp/lrZfnrKbkuLLngrpudWxs77yM5YmH6L+U5ZueLTFcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkHZhbHVl44CR77ya55uu5qiZ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pW45YC8KFN5c3RlbS5JbnQzMilcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdMYXN0SW5kZXhPZihcIjEyMDAxMjM0MDEyXCIsXCIwMVwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjhcXG7jgJDnpLrkvovjgJHvvJpTdHJpbmdMYXN0SW5kZXhPZihcIjEyMDAyMzIzIFwiLFwiMzRcIilcXG7jgJDov5Tlm57lgLzjgJHvvJotMVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ0xhc3RJbmRleE9mKFwiMTIwMDExXCIsXCJcIilcXG7jgJDov5Tlm57lgLzjgJHvvJowYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiTGFzdEluZGV4T2ZcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLnjbLlj5bmnIDlvozkuIDlgIvljLnphY3lrZfnrKbkuLLnmoTntKLlvJVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInRhcmdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuebruaomeWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWcqOa6kOWtl+espuS4suS4re+8jOaqoue0ouebruaomeWtl+espuS4su+8jOaJvuWIsOacgOW+jOS4gOWAi+WMuemFjeeahOWtl+espuS4suW+jO+8jOi/lOWbnuWFtue0ouW8leS9jee9rijlvp4w6ZaL5aeLKeOAguWmguaenOacquaJvuWIsOebruaomeWtl+espuS4su+8jOWJh+i/lOWbni0x77yM5aaC5p6c55uu5qiZ5a2X56ym5Liy54K656m65Liy77yM6L+U5ZueMO+8jOWmguaenOWOn+Wtl+espuS4sueCum51bGzvvIzliYfov5Tlm54tMVxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQdmFsdWXjgJHvvJrnm67mqJnlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkludDMyKVxcbuOAkOekuuS+i+OAke+8mkxhc3RJbmRleE9mKFwiMTIwMDEyMzQwMTJcIixcIjAxXCIpXFxu44CQ6L+U5Zue5YC844CR77yaOFxcbuOAkOekuuS+i+OAke+8mkxhc3RJbmRleE9mKFwiMTIwMDIzMjMgXCIsXCIzNFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mi0xXFxu44CQ56S65L6L44CR77yaTGFzdEluZGV4T2YoXCIxMjAwMTFcIixcIlwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdUcmltU3RhcnRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLliKrpmaTpoK3pg6jnqbrmoLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib3JpZ2luYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmupDlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrliKrpmaTmupDlrZfnrKbkuLLnmoTpoK3pg6jnqbrmoLxcXG7jgJBvcmlnaW5hbOOAke+8mua6kOWtl+espuS4slxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ1RyaW1TdGFydChcIiBBQkNcIilcXG4g44CQ6L+U5Zue5YC844CR77yaXCJBQkNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIlRyaW1TdGFydFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIqumZpOmgremDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIqumZpOa6kOWtl+espuS4sueahOmgremDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVHJpbVN0YXJ0KFwiIEFCQ1wiKVxcbiDjgJDov5Tlm57lgLzjgJHvvJpcIkFCQ1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nVHJpbUVuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIqumZpOWwvumDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIqumZpOa6kOWtl+espuS4sueahOWwvumDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaU3RyaW5nVHJpbUVuZChcIkFCQyBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIkFCQ1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiVHJpbUVuZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIqumZpOWwvumDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIqumZpOa6kOWtl+espuS4sueahOWwvumDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVHJpbUVuZChcIkFCQyBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIkFCQ1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJTdHJpbmdcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiU3RyaW5nVHJpbVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIqumZpOmgreWwvumDqOepuuagvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvcmlnaW5hbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIua6kOWtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIqumZpOa6kOWtl+espuS4sueahOmgreWwvumDqOepuuagvFxcbuOAkG9yaWdpbmFs44CR77ya5rqQ5a2X56ym5LiyXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaU3RyaW5nVHJpbShcIiBBQkMgXCIpXFxuIOOAkOi/lOWbnuWAvOOAke+8mlwiQUJDXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJUcmltXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5Yiq6Zmk6aCt5bC+6YOo56m65qC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9yaWdpbmFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5rqQ5a2X56ym5LiyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yiq6Zmk5rqQ5a2X56ym5Liy55qE6aCt5bC+6YOo56m65qC8XFxu44CQb3JpZ2luYWzjgJHvvJrmupDlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpUcmltKFwiIEFCQyBcIilcXG4g44CQ6L+U5Zue5YC844CR77yaXCJBQkNcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiU3RyaW5nXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkNyZWF0ZUd1aWRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLllK/kuIDmqJnorZjnrKZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW10sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mueNsuWPluWUr+S4gOaomeitmOespkd1aWRcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpDcmVhdGVHdWlkKClcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjc3MjJBNzkzLTE0REYtNDlDRC1CN0U3LURGNDk4N1lZRDIgXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdHJpbmdBZGRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLlrZfnrKbkuLLnm7jliqBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZmlyc3RTdHJcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnrKzkuIDlgIvlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInNlY29uZFN0clwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuesrOS6jOWAi+Wtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+iLpeW5suWtl+espuS4suaLvOaOpeaIkOS4gOWAi+aWsOWtl+espuS4su+8jOacgOWkmuaUr+aMgTEw5YCL5a2X56ym5Liy5ou85o6l77yM5pyA5bCRMuWAi++8m+e3qOi8r+WZqOS4rem7mOiqjeaPkuWFpeWFqeWAi++8jOWkmuWAi+Wtl+espuS4suWPr+aJi+WLlea3u+WKoFxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlN0cmluZ0FkZChcIkhlbGxvXCIsXCJXb3JsZFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiSGVsbG9Xb3JkXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJBZGRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLlrZfnrKbkuLLnm7jliqBcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZmlyc3RTdHJcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLnrKzkuIDlgIvlrZfnrKbkuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInNlY29uZFN0clwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuesrOS6jOWAi+Wtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+iLpeW5suWtl+espuS4suaLvOaOpeaIkOS4gOWAi+aWsOWtl+espuS4su+8jOacgOWkmuaUr+aMgTEw5YCL5a2X56ym5Liy5ou85o6l77yM5pyA5bCRMuWAi++8m+e3qOi8r+WZqOS4rem7mOiqjeaPkuWFpeWFqeWAi++8jOWkmuWAi+Wtl+espuS4suWPr+aJi+WLlea3u+WKoFxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkFkZChcIkhlbGxvXCIsXCJXb3JsZFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiSGVsbG9Xb3JkXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIlN0cmluZ1wiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJTdW1CeVByb3BcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLmjInlsazmgKfmsYLlkoxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5a+m6auU6ZuG5ZCI5bGs5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpoZ7lnovlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrntbHoqIjmn5DkuIDlsazmgKfnmoTlkoxcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHvvJrlsI3mh4nlr6bpq5Tpm4blkIjnmoTlsazmgKflkI0s6Y2K5byP5b2i5byP57WE57mU5Zyo5LiA6LW355qE5bGs5oCn5ZCNLOS+i+WmgjpPcmRlci5PcmRlckl0ZW1zXFxu44CQcHJvcGVydHlOYW1l44CR77ya6aGe5Z6L5bGs5oCn5ZCNO1xcbiDjgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpTdW1CeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZ2dyZWdhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiQ291bnRCeVByb3BcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLliJfooYzmlbhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5a+m6auU6ZuG5ZCI5bGs5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpoZ7lnovlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrntbHoqIjmjIflrprlrZfmrrXmiYDlnKjooajnmoToqJjpjITmlbhcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHvvJrlsI3mh4nlr6bpq5Tpm4blkIjnmoTlsazmgKflkI0s6Y2K5byP5b2i5byP57WE57mU5Zyo5LiA6LW355qE5bGs5oCn5ZCNLOS+i+Wmgu+8mk9yZGVyLk9yZGVySXRlbXNcXG7jgJBwcm9wZXJ0eU5hbWXjgJHvvJrpoZ7lnovlsazmgKflkI1cXCBu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pW45YC8KFN5c3RlbS5JbnQzMik7XFxu44CQ56S65L6L44CR77yaQ291bnRCeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjpcIkF2Z0J5UHJvcFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjpcIuWIl+W5s+Wdh+WAvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlr6bpq5Tpm4blkIjlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumhnuWei+WxrOaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mue1seioiOafkOS4gOaVuOWAvOWIl+eahOW5s+Wdh+WAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAke+8muWwjeaHieWvpumrlOmbhuWQiOeahOWxrOaAp+WQjSzpjYrlvI/lvaLlvI/ntYTnuZTlnKjkuIDotbfnmoTlsazmgKflkI0s5L6L5aaCOk9yZGVyLk9yZGVySXRlbXNcXG7jgJBwcm9wZXJ0eU5hbWXjgJHvvJrpoZ7lnovlsazmgKflkI1cXCBu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pW45YC8KFN5c3RlbS5Eb3VibGUpXFxu44CQ56S65L6L44CR77yaQXZnQnlQcm9wKFwiT3JkZXIuT3JkZXJJdGVtc1wiLFwiUXVhbnRpdHlcIilgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjpcIkFnZ3JlZ2F0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6XCJNYXhCeVByb3BcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6XCLliJfmnIDlpKflgLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5a+m6auU6ZuG5ZCI5bGs5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpoZ7lnovlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrntbHoqIjmn5DkuIDmlbjlgLzliJfnmoTmnIDlpKflgLxcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHvvJrlsI3mh4nlr6bpq5Tpm4blkIjnmoTlsazmgKflkI0s6Y2K5byP5b2i5byP57WE57mU5Zyo5LiA6LW355qE5bGs5oCn5ZCNLOS+i+WmgjpPcmRlci5PcmRlckl0ZW1zXFxu44CQcHJvcGVydHlOYW1l44CR77ya6aGe5Z6L5bGs5oCn5ZCNXFxuIOOAkOi/lOWbnuWAvOmhnuWei+OAke+8muaVuOWAvChTeXN0ZW0uRG91YmxlKVxcbuOAkOekuuS+i+OAke+8mk1heEJ5UHJvcChcIk9yZGVyLk9yZGVySXRlbXNcIixcIlF1YW50aXR5XCIpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6XCJBZ2dyZWdhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOlwiTWluQnlQcm9wXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOlwi5YiX5pyA5bCP5YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWvpumrlOmbhuWQiOWxrOaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6aGe5Z6L5bGs5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya57Wx6KiI5p+Q5LiA5pW45YC85YiX55qE5pyA5bCP5YC8XFxu44CQY2hhaW5lZFByb3BOYW1l44CR77ya5bCN5oeJ5a+m6auU6ZuG5ZCI55qE5bGs5oCn5ZCNLOmNiuW8j+W9ouW8j+e1hOe5lOWcqOS4gOi1t+eahOWxrOaAp+WQjSzkvovlpoI6T3JkZXIuT3JkZXJJdGVtc1xcbuOAkHByb3BlcnR5TmFtZeOAke+8mumhnuWei+WxrOaAp+WQjVxcIG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpNaW5CeVByb3AoXCJPcmRlci5PcmRlckl0ZW1zXCIsXCJRdWFudGl0eVwiKWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOlwiQWdncmVnYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJJc051bGxcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5piv56m65YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaqoua4rOWwjeixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIpOaWt+aMh+WumueahOWwjeWDj+aYr+WQpueCuuepuuWAvChudWxsKVxcbuOAkG9iauOAke+8muimgeaqoua4rOeahOWwjeixoVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muW4g+eIvuWAvChTeXN0ZW0uQm9vbGVhbilcXG7jgJDnpLrkvovjgJHvvJpJc051bGwoXCLoqp7nvqnljJbooajpgZTlvI9cIilcXG7jgJDov5Tlm57lgLzjgJHvvJpGYWxzZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJJc051bGxPcldoaXRlU3BhY2VcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5piv56m65LiyXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuW+heWIpOaWt+Wtl+espuS4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWIpOaWt+aMh+WumueahOWtl+espuS4suaYr+WQpueCum51bGzjgIHnqbrpgoTmmK/lg4XmnInnqbrmoLzntYTmiJBcXG7jgJBvYmrjgJHvvJropoHliKTmlrfnmoTlrZfnrKbkuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrluIPniL7lgLwoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CRIO+8mklzTnVsbE9yV2hpdGVTcGFjZShcIuiqnue+qeWMluihqOmBlOW8j1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mkZhbHNlXFxu44CQ56S65L6L44CR77yaSXNOdWxsT3JXaGl0ZVNwYWNlKG51bGwpXFxu44CQ6L+U5Zue5YC844CR77yaVHJ1ZVxcbuOAkOekuuS+i+OAke+8mlxcbklzTnVsbE9yV2hpdGVTcGFjZShcIiBcIinjgJDov5Tlm57lgLzjgJHvvJpUcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIklzTmFOXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIumdnuaVuOWtl1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmqqLmuKzlsI3osaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrliKTmlrfmjIflrprnmoTlsI3lg4/mmK/lkKblj6/ku6XovYnmj5vmiJDmlbjlrZcoU3lzdGVtLkRvdWJsZSlcXG7jgJBvYmrjgJHvvJropoHmqqLmuKznmoTlsI3osaFcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrluIPniL7lgLwoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CR77yaSXNOYU4gKFwi6Kqe576p5YyW6KGo6YGU5byPXCIp44CQ6L+U5Zue5YC844CR77yaVHJ1ZVxcbuOAkOekuuS+i+OAke+8mklzTmFOKDEyLjMp44CQ6L+U5Zue5YC844CR77yaRmFsc2VcXG7jgJDnpLrkvovjgJHvvJpcXG5Jc05hTihcIjEyM1wiKeOAkOi/lOWbnuWAvOOAke+8mkZhbHNlYCAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJJc051bWJlclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmK/mlbjlrZdcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qqi5ris5bCN6LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Yik5pa35oyH5a6a55qE5bCN5YOP5piv5ZCm5Y+v5Lul6L2J5o+b5oiQ5pW45a2XKFN5c3RlbS5Eb3VibGUpXFxu44CQb2Jq44CR77ya6KaB5qqi5ris55qE5bCN6LGhXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5biD54i+5YC8KFN5c3RlbS5Cb29sZWFuKVxcbuOAkOekuuS+i+OAke+8mklzTnVtYmVyIChcXFwi6Kqe576p5YyW6KGo6YGU5byPXFxcIinjgJDov5Tlm57lgLzjgJHvvJpGYWxzZVxcbuOAkOekuuS+i+OAke+8mklzTnVtYmVyKDEyLjMp44CQ6L+U5Zue5YC844CR77yaVHJ1ZVxcbuOAkOekuuS+i+OAke+8mlxcbklzTnVtYmVyKFwiMTIzXCIp44CQ6L+U5Zue5YC844CR77yaIFRydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJFc3RpbWF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiSXNFeGlzdFJlY29yZFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnInnhKHnrYnmlrzljLnphY3lrZfnrKZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6Y2K5byP5ZCN56ixXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1hdGNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy56YWN5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5qC55pOa6Y2K5byP5ZCN56ix5Yik5pa36Kmy6KGo55qE5oyH5a6a5a2X5q616ZuG5ZCI5Lit5piv5ZCm5a2Y5Zyo562J5pa85Yy56YWN5a2X56ym55qE5YC8XFxu44CQY2hhaW5lZFByb3BOYW1l44CR6Y2K5byP5ZCN56ixXFxu44CQcHJvcGVydHlOYW1l44CR5bGs5oCn5ZCNXFxu44CQbWF0Y2jjgJHljLnphY3lgLxcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlsI3osaEoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CR77yaSXNFeGlzdFJlY29yZChcInNhbGVzb3JkZXIuaXRlbXNcIixcImNvZGVcIixcImxjXCIpXFxu44CQ6L+U5Zue5YC844CR77yaRmFsc2UvVHJ1ZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMaXN0R3JlYXRlclRoYW5cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pyJ54Sh5aSn5pa85Yy56YWN5a2X56ymXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumNiuW8j+WQjeeosVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwicHJvcGVydHlOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bGs5oCn5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJtYXRjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWMuemFjeWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muagueaTmumNiuW8j+WQjeeoseWIpOaWt+ipsuihqOeahOaMh+WumuWtl+autembhuWQiOS4reaYr+WQpuWtmOWcqOWkp+aWvOWMuemFjeWtl+espueahOWAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkemNiuW8j+WQjeeosVxcbuOAkHByb3BlcnR5TmFtZeOAkeWxrOaAp+WQjVxcbuOAkG1hdGNo44CR5Yy56YWN5YC8XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5bCN6LGhKFN5c3RlbS5Cb29sZWFuKVxcbuOAkOekuuS+i+OAke+8mkxpc3RHcmVhdGVyVGhhbihcInNhbGVzb3JkZXIuaXRlbXNcIixcIm51bVwiLDEwMClcXG7jgJDov5Tlm57lgLzjgJHvvJpGYWxzZS9UcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxpc3RMZXNzVGhhblwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnInnhKHlsI/mlrzljLnphY3lrZfnrKZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6Y2K5byP5ZCN56ixXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1hdGNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy56YWN5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZG91YmxlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5qC55pOa6Y2K5byP5ZCN56ix5Yik5pa36Kmy6KGo55qE5oyH5a6a5a2X5q616ZuG5ZCI5Lit5piv5ZCm5a2Y5Zyo5bCP5pa85Yy56YWN5a2X56ym55qE5YC8XFxu44CQY2hhaW5lZFByb3BOYW1l44CR6Y2K5byP5ZCN56ixXFxu44CQcHJvcGVydHlOYW1l44CR5bGs5oCn5ZCNXFxu44CQbWF0Y2jjgJHljLnphY3lgLxcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlsI3osaEoU3lzdGVtLkJvb2xlYW4pXFxu44CQ56S65L6L44CR77yaTGlzdExlc3NUaGFuKFwic2FsZXNvcmRlci5pdGVtc1wiLFwibnVtXCIsMTAwKVxcbuOAkOi/lOWbnuWAvOOAke+8mkZhbHNlL1RydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJFc3RpbWF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGlzdFN0YXJ0V2l0aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnInnhKHplovpoK3mmK/ljLnphY3lrZfnrKZcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6Y2K5byP5ZCN56ixXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm1hdGNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Yy56YWN5YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmoLnmk5rpjYrlvI/lkI3nqLHliKTmlrfoqbLooajnmoTmjIflrprlrZfmrrXpm4blkIjkuK3mmK/lkKblrZjlnKjplovpoK3mmK/ljLnphY3lrZfnrKbnmoTlgLxcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHpjYrlvI/lkI3nqLFcXG7jgJBwcm9wZXJ0eU5hbWXjgJHlsazmgKflkI1cXG7jgJBtYXRjaOOAkeWMuemFjeWAvFxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWwjeixoShTeXN0ZW0uQm9vbGVhbilcXG7jgJDnpLrkvovjgJHvvJpMaXN0U3RhcnRXaXRoKFwic2FsZXNvcmRlci5pdGVtc1wiLFwiY29kZVwiLFwibGNcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpGYWxzZS9UcnVlYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRXN0aW1hdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxpc3RFbmRXaXRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacieeEoee1kOWwvuaYr+WMuemFjeWtl+esplwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJjaGFpbmVkUHJvcE5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLpjYrlvI/lkI3nqLFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInByb3BlcnR5TmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWxrOaAp+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwibWF0Y2hcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLljLnphY3lgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmoLnmk5rpjYrlvI/lkI3nqLHliKTmlrfoqbLooajnmoTmjIflrprlrZfmrrXpm4blkIjkuK3mmK/lkKblrZjlnKjntZDlsL7mmK/ljLnphY3lrZfnrKbnmoTlgLxcXG7jgJBjaGFpbmVkUHJvcE5hbWXjgJHpjYrlvI/lkI3nqLFcXG7jgJBwcm9wZXJ0eU5hbWXjgJHlsazmgKflkI1cXG7jgJBtYXRjaOOAkeWMuemFjeWAvFxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWwjeixoShTeXN0ZW0uQm9vbGVhbilcXG7jgJDnpLrkvovjgJHvvJpMaXN0RW5kV2l0aChcInNhbGVzb3JkZXIuaXRlbXNcIixcImNvZGVcIixcImxjXCIpXFxu44CQ6L+U5Zue5YC844CR77yaRmFsc2UvVHJ1ZWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkVzdGltYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJEYXRlVGltZUFkZERheXNcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5aKe5Yqg5oyH5a6a5aSp5pW4XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5aKe5Yqg5aSp5pW4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Zyo5oyH5a6a55qE5pel5pyf5pmC6ZaT5LiK5aKe5Yqg5oyH5a6a55qE5aSp5pW4XFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkHZhbHVl44CR77ya5aKe5Yqg5aSp5pW4XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pel5pyf5pmC6ZaTKFN5c3RlbS5EYXRlVGltZSlcXG7jgJDnpLrkvovjgJEg77yaRGF0ZVRpbWVBZGREYXlzKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiLDIpXFxu44CQ6L+U5Zue5YC844CROjIwMTktMDItMDFUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRGF0ZVRpbWVBZGRZZWFyc1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLlop7liqDmjIflrprlubTmlbhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlop7liqDlubTmlbhcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlnKjmjIflrprnmoTml6XmnJ/mmYLplpPkuIrlop7liqDmjIflrprnmoTlubTmlbhcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQdmFsdWXjgJHvvJrlop7liqDlubTmlbhcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrml6XmnJ/mmYLplpMoU3lzdGVtLkRhdGVUaW1lKVxcbuOAkOekuuS+i+OAkSDvvJpEYXRlVGltZUFkZFllYXJzKFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiLDIpXFxu44CQ6L+U5Zue5YC844CROjIwMjEtMDEtMzBUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRGF0ZVRpbWVBZGRNb250aHNcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5aKe5Yqg5oyH5a6a5pyI5pW4XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5aKe5Yqg5pyI5pW4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5Zyo5oyH5a6a55qE5pel5pyf5pmC6ZaT5LiK5aKe5Yqg5oyH5a6a55qE5pyI5pW4XFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkHZhbHVl44CR77ya5aKe5Yqg5pyI5pW4XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pel5pyf5pmC6ZaTKFN5c3RlbS5EYXRlVGltZSlcXG7jgJDnpLrkvovjgJHvvJpEYXRlVGltZUFkZE1vbnRocyhcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIiwxKVxcbuOAkOi/lOWbnuWAvOOAkToyMDE5LTAyLTI4VDEwOjAwKzA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldEZpcnN0RGF5T2ZNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLnjbLlj5bmjIflrprml6XmnJ/mmYLplpPmiYDlnKjmnIjnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mueNsuWPluaMh+WumuaXpeacn+aZgumWk+WAvOaJgOWcqOaciOeahOesrOS4gOWkqeeahOaXpeacn1xcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrml6XmnJ/mmYLplpMoU3lzdGVtLkRhdGVUaW1lKVxcbuOAkOekuuS+i+OAke+8mkdldEZpcnN0RGF5T2ZNb250aChcIjIwMTkgLTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CROjIwMTktMDEtMDFUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0TGFzdERheU9mTW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi542y5Y+W5oyH5a6a5pel5pyf5pmC6ZaT5omA5Zyo5pyI5pyA5b6M5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrnjbLlj5bmjIflrprml6XmnJ/mmYLplpPlgLzmiYDlnKjmnIjnmoTmnIDlvozkuIDlpKnnmoTml6XmnJ9cXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pel5pyf5pmC6ZaTKFN5c3RlbS5EYXRlVGltZSlcXG7jgJDnpLrkvovjgJHvvJpHZXRMYXN0RGF5T2ZNb250aChcIjIwMTktIDAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CROjIwMTktMDEtMzFUMTA6MDArMDg6MDBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0RGF0ZVRpbWVOb3dcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi542y5Y+W55W25YmN5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrnjbLlj5bnlbbliY3nmoTml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrml6XmnJ/mmYLplpMoU3lzdGVtLkRhdGVUaW1lKVxcbuOAkOekuuS+i+OAke+8mkdldERhdGVUaW1lTm93KClcXG7jgJDov5Tlm57lgLzjgJE6MjAxOS0wMS0zMFQxMjowMDowMC4wMDArIDA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkNvbXBhcmVEYXRlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuavlOi8g+WFqeWAi+aZgumWk1wiLCBcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwic3RyMVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWkzFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInN0cjJcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpMyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5q+U6LyD5YWp5YCL5pmC6ZaT5YC877yM5Lim6L+U5Zue5LiA5YCL5YC877yM5q2k5YC86KGo56S656ys5LiA5YCL5pmC6ZaT5piv5pep5pa844CB562J5pa86YKE5piv5pma5pa856ys5LqM5YCL5pmC6ZaT55qE5pW05pW4XFxu44CQc3RyMeOAke+8muaXpeacn+aZgumWkzFcXG7jgJBzdHIy44CRIO+8muaXpeacn+aZgumWkzJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLmludDMyKVxcblxcdOaXpeacnzHml6nmlrzml6XmnJ8y77yM6L+U5ZueLTFcXG5cXHTml6XmnJ8x562J5pa85pel5pyfMu+8jOi/lOWbnjBcXG5cXHTml6XmnJ8x5pma5pa85pel5pyfMu+8jOi/lOWbnjFcXG7jgJDnpLrkvovjgJHvvJpDb21wYXJlRGF0ZShcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIixcIjIwMTktMDItMDFUMTA6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJotMWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGb3JtYXREYXRlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuagvOW8j+WMlueVtuWJjeaXpeacn1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmb3JtYXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmoLzlvI/kuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrkvb/nlKjmjIflrprnmoTmoLzlvI/lsIfnlbbliY3ml6XmnJ/mmYLplpPlgLzovYnmj5vngrrlhbbnrYnmlYjnmoTlrZfnrKbkuLLooajnpLrlvaLlvI9cXG7jgJBmb3JtYXTjgJHvvJrmoLzlvI/kuLJcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGb3JtYXREYXRlKFwieXl5eS1NTS1kZCBISDptbTpzc1wiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0zMCAwMTowMDowMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZvcm1hdERlZmluZURhdGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qC85byP5YyW5oyH5a6a5pel5pyfXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImZvcm1hdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuagvOW8j+S4slwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muS9v+eUqOaMh+WumueahOagvOW8j+Wwh+aMh+WumueahOaXpeacn+aZgumWk+WAvOi9ieaPm+eCuuWFtuetieaViOeahOWtl+espuS4suihqOekuuW9ouW8j1xcbuOAkGZvcm1hdOOAke+8muagvOW8j+S4slxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGb3JtYXREZWZpbmVEYXRlKFwieXl5eS1NTS1kZCBISDptbTpzc1wiLFwiMjAxOS0wMS0zMCAwMTowMDowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMSAtMzAgMDE6MDA6MDBcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb2RheVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLku4rlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS7iuWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi5b2i5byP77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LuK5aSpXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRvZGF5KFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0zMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlllc3RlcmRheVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmKjlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOaYqOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi5b2i5byP77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5pio5aSpXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlllc3RlcmRheShcIjIwMTktMDEtMzBUMTA6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMjlcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb21vcnJvd1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmmI7lpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOaYjuWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi5b2i5byP77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5piO5aSpXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRvbW9ycm93KFwiMjAxOS0wMS0zMFQxMDowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0zMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRoaXNZZWFyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacrOW5tFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5pys5bm077yM5qC85byP54K6XCJ5eXl5XCLlvaLlvI/vvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTmnKzlubRcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVGhpc1llYXIoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Y675bm0XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTljrvlubTvvIzmoLzlvI/ngrpcInl5eXlcIuW9ouW8j++8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOWOu+W5tFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtIC5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdFllYXIoXCIyMDE5LTAxLTMwVDEwOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE4XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTmV4dFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5piO5bm0XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTmmI7lubTvvIzmoLzlvI/ngrpcInl5eXlcIuW9ouW8j++8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOaYjuW5tFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtIC5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTmV4dFllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDIwXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVGhpc01vbnRoXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacrOaciFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5pys5pyI77yM5qC85byP54K6XCJNTVwi5b2i5byP77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5pys5pyIXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRoaXNNb250aChcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0TW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiK5pyIXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIrmnIjvvIzmoLzlvI/ngrpcIk1NXCLlvaLlvI/vvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTkuIrmnIhcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdE1vbnRoKFwiMjAxOS0wMi0zMCAwMTowMDowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIk5leHRNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIvmnIhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4i+aciO+8jOagvOW8j+eCulwiTU1cIuW9ouW8j++8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOS4i+aciFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpOZXh0TW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVGhpc1dlZWtcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pys6YCxXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/lnKjmnKzlubTnmoTnrKzlub7pgLHvvIzmoLzlvI/ngrpcInd3XCLlvaLlvI/vvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/lnKjmnKzlubTnmoTnrKzlub7pgLHvvIzms6jmhI/lpoLmnpwxMuaciOW6leeahOaXpeacn+iIh+S4i+S4gOW5tOeahDHmnIgx5pel5Zyo5ZCM5LiA5pif5pyf77yM5YmH6L+U5Zue56ys5LiA5ZGoXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mlRoaXNXZWVrKFwiMjAxOS0wMSAtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjVcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrpgLFcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iumAse+8jOagvOW8j+eCulwid3dcIuW9ouW8j++8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOS4iumAse+8jOazqOaEj+WmguaenOaMh+WumuaXpeacn+WcqOS7iuW5tOesrDHpgLHvvIzliYfkuIrpgLHngrrljrvlubTnmoTmnIDlvozkuIDlkahcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdFdlZWsoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCI0XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTmV4dFdlZWtcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiL6YCxXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIvpgLHvvIzmoLzlvI/ngrpcInd3XCLlvaLlvI/vvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTkuIvpgLHvvIzms6jmhI/lpoLmnpzmjIflrprml6XmnJ/lnKjku4rlubTmnIDlvozkuIDlkajvvIzliYfkuIvpgLHngroxXFxu44CQIGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpOZXh0V2VlayhcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJEg77yaXCI2XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRGF5T2ZXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuaYn+acn+W5vlwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf5piv5pys6YCx55qE5pif5pyf5bm+77yM5qC85byP54K6XCJuXCLvvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/mmK/mnKzpgLHnmoTmmJ/mnJ/lub7vvIzms6jmhI/kuI3mmK/ov5Tlm57oi7HmlofnuK7lr6vvvIzogIzmmK/ov5Tlm57mlbjlrZflvaLlvI/jgILmjInnhafkuK3lnIvnv5LmhaPvvIzmmJ/mnJ/kuIDngrrmr4/pgLHpppbml6XvvIzov5Tlm57lgLzngrox77yM5pif5pyf5pel54K65q+P6YCx5bC+5pel77yM6L+U5Zue5YC854K6N1xcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZyApXFxu44CQ56S65L6L44CR77yaRGF5T2ZXZWVrKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiM1wiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuacrOmAseesrOS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5pys6YCx56ys5LiA5aSp77yM5qC85byP54K6XCJ5eXl5LU1NLWRkXCLvvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTmnKzpgLHnrKzkuIDlpKnjgILmjInnhafkuK3lnIvnv5LmhaPvvIzmmJ/mnJ/kuIDngrrmr4/pgLHpppbml6XvvIzmmJ/mnJ/ml6Xngrrmr4/pgLHlsL7ml6VcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRmlyc3REYXlPZldlZWsoXCIgMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMS0yOFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZldlZWtcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pys6YCx5pyA5b6M5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTmnKzpgLHmnIDlvozkuIDlpKnvvIzmoLzlvI/ngrpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOacrOmAseesrOS4gOWkqeOAguaMieeFp+S4reWci+e/kuaFo++8jOaYn+acn+S4gOeCuuavj+mAsemmluaXpe+8jOaYn+acn+aXpeeCuuavj+mAseWwvuaXpVxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mV2VlayhcIiAyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAyLTAzXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZkxhc3RXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuS4iumAseesrOS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5LiK6YCx56ys5LiA5aSp77yM5qC85byP54K6XCJ5eXl5LU1NLWRkXCLvvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTkuIrpgLHnrKzkuIDlpKnjgILmjInnhafkuK3lnIvnv5LmhaPvvIzmmJ/mnJ/kuIDngrrmr4/pgLHpppbml6XvvIzmmJ/mnJ/ml6Xngrrmr4/pgLHlsL7ml6VcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRmlyc3REYXlPZkxhc3RXZWVrKFwiIDIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMjFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZMYXN0V2Vla1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrpgLHmnIDlvozkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iumAseacgOW+jOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LiK6YCx5pyA5b6M5LiA5aSp44CC5oyJ54Wn5Lit5ZyL57+S5oWj77yM5pif5pyf5LiA54K65q+P6YCx6aaW5pel77yM5pif5pyf5pel54K65q+P6YCx5bC+5pelXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkxhc3REYXlPZkxhc3RXZWVrKFwiIDIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMTktMDEtMjdcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJGaXJzdERheU9mTmV4dFdlZWtcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiL6YCx56ys5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIvpgLHnrKzkuIDlpKnvvIzmoLzlvI/ngrpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOS4i+mAseesrOS4gOWkqeOAguaMieeFp+S4reWci+e/kuaFo++8jOaYn+acn+S4gOeCuuavj+mAsemmluaXpe+8jOaYn+acn+aXpeeCuuavj+mAseWwvuaXpVxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTmV4dFdlZWsoXCIgMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMi0wNFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZk5leHRXZWVrXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuS4i+mAseacgOW+jOS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5LiL6YCx5pyA5b6M5LiA5aSp77yM5qC85byP54K6XCJ5eXl5LU1NLWRkXCLvvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTkuIvpgLHmnIDlvozkuIDlpKnjgILmjInnhafkuK3lnIvnv5LmhaPvvIzmmJ/mnJ/kuIDngrrmr4/pgLHpppbml6XvvIzmmJ/mnJ/ml6Xngrrmr4/pgLHlsL7ml6VcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdERheU9mTmV4dFdlZWsoXCIgMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMi0xMFwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnKzmnIjnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOacrOaciOesrOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5pys5pyI56ys5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTW9udGhcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pys5pyI5pyA5b6M5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTmnKzmnIjmnIDlvozkuIDlpKnvvIzmoLzlvI/ngrpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOacrOaciOacgOW+jOS4gOWkqeOAgiBcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdERheU9mTW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAxLTMxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZkxhc3RNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrmnIjnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iuaciOesrOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LiK5pyI56ys5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTGFzdE1vbnRoKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOC0xMi0wMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZkxhc3RNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrmnIjmnIDlvozkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iuaciOacgOW+jOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LiK5pyI5pyA5b6M5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0RGF5T2ZMYXN0TW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE4LTEyLTMxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZk5leHRNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIvmnIjnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4i+aciOesrOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LiL5pyI56ys5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTmV4dE1vbnRoKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0wMi0wMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkxhc3REYXlPZk5leHRNb250aFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIvmnIjmnIDlvozkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4i+aciOacgOW+jOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LiL5pyI5pyA5b6M5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0RGF5T2ZOZXh0TW9udGgoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAyLTI4XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZlllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pys5bm056ys5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTmnKzlubTnrKzkuIDlpKnvvIzmoLzlvI/ngrpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOacrOW5tOesrOS4gOWkqeOAgiBcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaRmlyc3REYXlPZlllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mWWVhclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLmnKzlubTmnIDlvozkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOacrOW5tOacgOW+jOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5pys5bm05pyA5b6M5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0RGF5T2ZZZWFyKFwiMjAxOS0wMS0zMFQwMTowMDowMCswODowMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMjAxOS0xMi0zMVwiYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkZpcnN0RGF5T2ZMYXN0WWVhclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrlubTnrKzkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4iuW5tOesrOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LiK5bm056ys5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpGaXJzdERheU9mTGFzdFllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE4LTAxLTAxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiTGFzdERheU9mTGFzdFllYXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5LiK5bm05pyA5b6M5LiA5aSpXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprml6XmnJ/nmoTkuIrlubTmnIDlvozkuIDlpKnvvIzmoLzlvI/ngrpcInl5eXktTU0tZGRcIu+8jOWmguaenOS4jeWCs+mBnuWPg+aVuO+8jOWJh+m7mOiqjei/lOWbnueVtuWJjeezu+e1seaXpeacn+eahOS4iuW5tOacgOW+jOS4gOWkqeOAgiBcXG7jgJBkYXRl44CR77ya5pel5pyf5pmC6ZaTXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaTGFzdERheU9mTGFzdFllYXIoXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE4LTEyLTMxXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiRmlyc3REYXlPZk5leHRZZWFyXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuS4i+W5tOesrOS4gOWkqVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5oyH5a6a5pel5pyf55qE5LiL5bm056ys5LiA5aSp77yM5qC85byP54K6XCJ5eXl5LU1NLWRkXCLvvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTkuIvlubTnrKzkuIDlpKnjgIIgXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcbuOAkOekuuS+i+OAke+8mkZpcnN0RGF5T2ZOZXh0WWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMjAtMDEtMDFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJMYXN0RGF5T2ZOZXh0WWVhclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLkuIvlubTmnIDlvozkuIDlpKlcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaXpeacn+aZgumWk1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuaMh+WumuaXpeacn+eahOS4i+W5tOacgOW+jOS4gOWkqe+8jOagvOW8j+eCulwieXl5eS1NTS1kZFwi77yM5aaC5p6c5LiN5YKz6YGe5Y+D5pW477yM5YmH6buY6KqN6L+U5Zue55W25YmN57O757Wx5pel5pyf55qE5LiL5bm05pyA5b6M5LiA5aSp44CCIFxcbuOAkGRhdGXjgJHvvJrml6XmnJ/mmYLplpNcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpMYXN0RGF5T2ZOZXh0WWVhcihcIjIwMTktMDEtMzBUMDE6MDA6MDArMDg6MDBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJpcIjIwMjAtMTItMzFcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiRGVmYXVsdEZ1bmN0aW9uXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJHZXREYXRlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui/lOWbnuaMh+WumuW9ouW8j+eahOaXpeacn1wiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJmb3JtYXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmoLzlvI/kuLJcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLml6XmnJ/mmYLplpNcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57mjIflrprlvaLlvI/nmoTml6XmnJ/vvIzlpoLmnpzkuI3lgrPpgZ7lj4PmlbjvvIzliYfpu5joqo3ov5Tlm57nlbbliY3ns7vntbHml6XmnJ/nmoTmjIflrprlvaLlvI/ml6XmnJ/jgIIgXFxu44CQZm9ybWF044CR77ya5qC85byP5YyW5LiyXFxu44CQZGF0ZeOAke+8muaXpeacn+aZgumWk1xcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWtl+espuS4sihTeXN0ZW0uU3RyaW5nKVxcblxcdERE77ya5LuK5aSpXFx0TETvvJrmmKjlpKlcXHRORO+8muaYjuWkqVxcblxcdFlZIO+8muacrOW5tFxcdExZ77ya5LiK5bm0XFx0TlnvvJrkuIvlubRcXG5cXHRNTe+8muacrOaciFxcdExN77ya5LiK5pyIXFx0Tk3vvJrkuIvmnIhcXG5cXHRXRO+8muaYn+acn+W5vlxcblxcdFdX77ya5pys6YCxXFx0TFfvvJrkuIrpgLFcXCB0TlfvvJrkuIvpgLFcXG5cXHRGRFfvvJrmnKzpgLHpppbml6VcXHRMRFfvvJrmnKzpgLHlsL7ml6VcXG5cXHRGRExX77ya5LiK6YCx6aaW5pelXFx0TERMV++8muS4iumAseWwvuaXpVxcblxcdEZETlfvvJrkuIvpgLHpppbml6VcXHRMRE5X77ya5LiL6YCx5bC+5pelXFxuXFx0RkRN77ya5pys5pyI6aaW5pelXFx0TERN77ya5pys5pyI5bC+5pelXFxuXFx0RkRMTe+8muS4iuaciOmmluaXpVxcdExETE3vvJrkuIrmnIjlsL7ml6VcXG5cXHRGRE5N77ya5LiL5pyI6aaW5pelXFx0TEROTe+8muS4i+aciOWwvuaXpVxcblxcdEZEWe+8muacrOW5tOmmluaXpVxcdExEWe+8muacrOW5tOWwvuaXpVxcblxcdEZETFnvvJrkuIrlubTpppbml6VcXHRMRExZ77ya5LiK5bm05bC+5pelXFxuXFx0RkROWe+8muS4i+W5tOmmluaXpVxcdExETlnvvJrkuIvlubTlsL7ml6VcXG4g44CQ56S65L6L44CR77yaR2V0RGF0ZShcIkxEXCIsXCIyMDE5LTAxLTMwVDAxOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaXCIyMDE5LTAxLTI5XCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJEYXRlVGltZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9TdHJpbmdYXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui9ieWtl+espuS4slwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLovYnmj5vlsI3osaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIfmjIflrprnmoTlsI3osaHovYnmj5vmiJDlrZfnrKbkuLJcXG7jgJBvYmrjgJHvvJrlvoXovYnmj5vlsI3osaFcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrlrZfnrKbkuLIoU3lzdGVtLlN0cmluZylcXG7jgJDnpLrkvovjgJHvvJpUb1N0cmluZ1goMTIzKVxcbuOAkOi/lOWbnuWAvOOAke+8mlwiMTIzXCJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvRGF0ZVRpbWVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5pel5pyf5pmC6ZaTXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9ieaPm+WwjeixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+aMh+WumueahOWwjeixoei9ieaPm+aIkOaXpeacn+aZgumWk1xcbuOAkG9iauOAke+8muW+hei9ieaPm+WwjeixoVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muaXpeacn+aZgumWkyhTeXN0ZW0uT2Zmc2V0RGF0ZVRpbWUpXFxu44CQ56S65L6L44CR77yaVG9EYXRlVGltZShcIjIwMTktMDEtMzBUMTAgOjAwOjAwKzA4OjAwXCIpXFxu44CQ6L+U5Zue5YC844CROiAyMDE5LTAxLTMwVDEwOjAwKzA4OjAwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0Jvb2xlYW5cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5biD54i+5YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9ieaPm+WwjeixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+aMh+WumuWwjeixoeWAvOi9ieaPm+aIkOetieaViOeahOW4g+eIvuWAvFxcbuOAkG9iauOAke+8muW+hei9ieaPm+WwjeixoVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muW4g+eIvuWAvChTeXN0ZW0uQm9vbGVhbilcXG7jgJDnpLrkvovjgJHvvJpUb0Jvb2xlYW4oXCJUcnVlXCIgKVxcbuOAkOi/lOWbnuWAvOOAke+8mnRydWVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovYnmlbjlgLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5o+b5bCN6LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCH5oyH5a6a5bCN6LGh6L2J5o+b5oiQ5Y2B6YCy5Yi25pW45YC8XFxu44CQb2Jq44CR77ya5b6F6L2J5o+b5bCN6LGhXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5Y2B6YCy5Yi25pW45YC8KFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkOekuuS+i+OAke+8mlRvRGVjaW1hbChcIjQwLjIzXCIpXFxu44CQ6L+U5Zue5YC844CR77yaNDAuMjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvQmlnRGVjaW1hbFwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovYnmlbjlgLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5o+b5bCN6LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCH5oyH5a6a5bCN6LGh6L2J5o+b5oiQ5Y2B6YCy5Yi25pW45YC8XFxu44CQb2Jq44CR77ya5b6F6L2J5o+b5bCN6LGhXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5Y2B6YCy5Yi25pW45YC8KFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkOekuuS+i+OAke+8mlRvQmlnRGVjaW1hbChcIjQwLjIzXCIpXFxu44CQ6L+U5Zue5YC844CR77yaNDAuMjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgXCJrZXlcIjogXCJUb0N1c3RvbUJpZ0RlY2ltYWxcIixcclxuICAgICAgICAgIFwibmFtZVwiOiBcIui9ieiHquWumue+qeeyvuW6puaVuOWAvFwiLFxyXG4gICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5o+b5bCN6LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcImtleVwiOiBcIm51bWJlclwiLFxyXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bCP5pW45L2N5pW4XCIsXHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCH5oyH5a6a5bCN6LGh6L2J5o+b5oiQ5Y2B6YCy5Yi25pW45YC8XFxu44CQb2Jq44CR77ya5b6F6L2J5o+b5bCN6LGhXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5Y2B6YCy5Yi25pW45YC8KFN5c3RlbS5CaWdEZWNpbWFsKVxcbuOAkOekuuS+i+OAke+8mlRvQmlnRGVjaW1hbChcIjQwLjIsMlwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjQwLjIwYCxcclxuICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9Eb3VibGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J6ZuZ57K+5bqm5rWu6bue5pW4XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9ieaPm+WwjeixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+aMh+WumuWwjeixoei9ieaPm+aIkOmbmeeyvuW6pua1rum7nuaVuFxcbuOAkG9iauOAke+8muW+hei9ieaPm+WwjeixoVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8mumbmeeyvuW6pua1rum7nuaVuChTeXN0ZW0uRG91YmxlKVxcbuOAkOekuuS+i+OAke+8mlRvRG91YmxlKFwiNDAuMjNcIiApXFxu44CQ6L+U5Zue5YC844CR77yaNDAuMjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvU2luZ2xlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIui9ieWWrueyvuW6pua1rum7nuaVuFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLovYnmj5vlsI3osaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIfmjIflrprlsI3osaHovYnmj5vmiJDllq7nsr7luqbmta7pu57mlbhcXG7jgJBvYmrjgJHvvJrlvoXovYnmj5vlsI3osaFcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrllq7nsr7luqbmta7pu57mlbgoU3lzdGVtLkZsb2F0KVxcbuOAkOekuuS+i+OAke+8mlRvU2luZ2xlKFwiNDAuMjNcIikgXFxu44CQ6L+U5Zue5YC844CR77yaNDAuMjNgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvRmxvYXRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5Zau57K+5bqm5rWu6bue5pW4XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm9ialwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIui9ieaPm+WwjeixoVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muWwh+aMh+WumuWwjeixoei9ieaPm+aIkOWWrueyvuW6pua1rum7nuaVuFxcbuOAkG9iauOAke+8muW+hei9ieaPm+WwjeixoVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWWrueyvuW6pua1rum7nuaVuChTeXN0ZW0uRmxvYXQpXFxu44CQ56S65L6L44CR77yaVG9GbG9hdChcIjQwLjIzXCIgKVxcbuOAkOi/lOWbnuWAvOOAke+8mjQwLjIzYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0J5dGVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2JOOS9jeeEoeespuiZn+aVtOaVuFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLovYnmj5vlsI3osaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIfmjIflrprlsI3osaHovYnmj5vmiJA45L2N54Sh56ym6Jmf5pW05pW4XFxu44CQb2Jq44CR77ya5b6F6L2J5o+b5bCN6LGhXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77yaOOS9jeeEoeespuiZn+aVtOaVuChTeXN0ZW0uQnl0ZSlcXG7jgJDnpLrkvovjgJHvvJpUb0J5dGUoXCIgMTBcIilcXG7jgJDov5Tlm57lgLzjgJHvvJoxMGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiVG9JbnQxNlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovYkxNuS9jeacieespuiZn+aVtOaVuFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJvYmpcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLovYnmj5vlsI3osaFcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrlsIfmjIflrprlsI3osaHovYnmj5vmiJAxNuS9jeacieespuiZn+aVtOaVuFxcbuOAkG9iauOAke+8muW+hei9ieaPm+WwjeixoVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8mjE25L2N5pyJ56ym6Jmf5pW05pW4KFN5c3RlbS5JbnQxNilcXG7jgJDnpLrkvovjgJHvvJpUb0ludDE2KFwiIDEwXCIpXFxu44CQ6L+U5Zue5YC844CR77yaMTBgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJUcmFuc2xhdGVcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIlRvSW50MzJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2JMzLkvY3mnInnrKbomZ/mlbTmlbhcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5o+b5bCN6LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCH5oyH5a6a5bCN6LGh6L2J5o+b5oiQMzLkvY3mnInnrKbomZ/mlbTmlbhcXG7jgJBvYmrjgJHvvJrlvoXovYnmj5vlsI3osaFcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJozMuS9jeacieespuiZn+aVtOaVuChTeXN0ZW0uSW50MzIpXFxu44CQ56S65L6L44CR77yaVG9JbnQzMihcIiAxMFwiKVxcbuOAkOi/lOWbnuWAvOOAke+8mjEwYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiVHJhbnNsYXRlXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJUb0NoaW5lc2VNb25leVwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLovYnkuK3mloflpKflr6vph5HpoY1cIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwib2JqXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6L2J5o+b5bCN6LGhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5bCH5oyH5a6a5bCN6LGh6L2J5o+b5oiQ5Lit5paH5aSn5a+r6YeR6aGNXFxu44CQb2Jq44CR77ya5b6F6L2J5o+b5bCN6LGhXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5a2X56ym5LiyKFN5c3RlbS5TdHJpbmcpXFxu44CQ56S65L6L44CR77yaVG9DaGluZXNlTW9uZXkoNDAuMjMpXFxu44CQ6L+U5Zue5YC844CR77yaXCLogobmi77lhYPpm7bosrPop5Llj4HliIZcImAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlRyYW5zbGF0ZVwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0U2Vzc2lvblZhbHVlXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIueNsuWPluacg+ipseiuiumHj+eahOWAvFwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJuYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pyD6Kmx6K6K6YeP5ZCNXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya542y5Y+W55So5oi25pyD6Kmx6K6K6YeP55qE5YC8XFxu44CQbmFtZeOAke+8muacg+ipseiuiumHj+WQjeeosVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWwjeixoShTeXN0ZW0uT2JqZWN0KWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkFuYWx5dGljYWxcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkdldENvbnRleHRQYXJhbWV0ZXJcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi542y5Y+W5LiK5LiL5paH6K6K6YeP55qE5YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLkuIrkuIvmlofororph4/lkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrnjbLlj5bkuIrkuIvmlofororph4/nmoTlgLxcXG7jgJBuYW1l44CR77ya5LiK5LiL5paH6K6K6YeP5ZCN56ixXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5bCN6LGhKFN5c3RlbS5PYmplY3QpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiZ2V0Q29tcHV0ZUpzb25EYXRhXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuagueaTmuWxrOaAp+WQjeeNsuWPlkpTT07kuLJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6Y2K5byP5ZCN56ixXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmoLnmk5rpjYrlvI/lsazmgKflkI3lvpfliLBKU09O5LiyXFxu44CQY2hhaW5lZFByb3BOYW1l44CR6Y2K5byP5ZCN56ixXFxu44CQcHJvcGVydHlOYW1l44CR5bGs5oCn5ZCNXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5bCN6LGhKFN5c3RlbS5TdHJpbmcpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0Q29tcHV0ZUpzb25EYXRhXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuagueaTmuWxrOaAp+WQjeeNsuWPlkpTT07kuLJcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwiY2hhaW5lZFByb3BOYW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi6Y2K5byP5ZCN56ixXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJwcm9wZXJ0eU5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLlsazmgKflkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmoLnmk5rpjYrlvI/lsazmgKflkI3lvpfliLBKU09O5LiyXFxu44CQY2hhaW5lZFByb3BOYW1l44CR6Y2K5byP5ZCN56ixXFxu44CQcHJvcGVydHlOYW1l44CR5bGs5oCn5ZCNXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5bCN6LGhKFN5c3RlbS5TdHJpbmcpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0SW5qZWN0ZWRFbnRpdHlcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qC55pOa5rOo5YWl5ZCN542y542y5Y+W5rOo5YWl5bCN6LGhXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcIm5hbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLms6jlhaXlkI1cIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrnjbLlj5bpgYvooYzmmYLms6jlhaXnmoTlsI3osaFcXG7jgJBuYW1l44CR5rOo5YWl5ZCNXFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5bCN6LGhKFN5c3RlbS5PYmplY3QpYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiQW5hbHl0aWNhbFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJEZWZhdWx0RnVuY3Rpb25cIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiR2V0Q2hhaW5lZFByb3BlcnR5VmFsdWVcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5qC55pOa5bGs5oCn5ZCN542y5Y+W5bGs5oCn5YC8XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNoYWluZWRQcm9wTmFtZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIumNiuW8j+WQjVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8muagueaTmumNiuW8j+WxrOaAp+WQjeeNsuWPluWxrOaAp+WAvFxcbuOAkGNoYWluZWRQcm9wTmFtZeOAkemNiuW8j+WQjVxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muWwjeixoShTeXN0ZW0uT2JqZWN0KWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIkFuYWx5dGljYWxcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcImFic1wiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLntZXlsI3lgLxcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbjlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57kuIDlgIvmlbjlgLznmoTntZXlsI3lgLxcXG7jgJB2YWx1ZeOAke+8muioiOeul+aVuOWAvFxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muaVuOWAvChTeXN0ZW0uRG91YmxlKVxcbuOAkOekuuS+i+OAke+8mmFicygtMS41KVxcbuOAkOi/lOWbnuWAvOOAke+8miAxLjVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiUm91bmRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5Zub5o2o5LqU5YWlXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlMVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVuOWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bCP5pW45L2N5pW4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50MzJcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrmiormlbjlm5vmjajkupTlhaXngrrmjIflrprnsr7luqbnmoTmlbjlgLxcXG7jgJB2YWx1ZTHjgJHvvJrmlbjlgLxcXG7jgJB2YWx1ZTLjgJHvvJrlm5vmjajkupTlhaXlsI/mlbjkvY3mlbhcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpcXCBuUm91bmQoMS41MiwxKVxcbuOAkOi/lOWbnuWAvOOAke+8mjEuNWAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcInJvdW5kXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuWbm+aNqOS6lOWFpVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTFcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbjlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWwj+aVuOS9jeaVuFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludDMyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5oqK5pW45Zub5o2o5LqU5YWl54K65oyH5a6a57K+5bqm55qE5pW45YC8XFxu44CQdmFsdWUx44CR77ya5pW45YC8XFxu44CQdmFsdWUy44CR77ya5Zub5o2o5LqU5YWl5bCP5pW45L2N5pW4XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pW45YC8KFN5c3RlbS5Eb3VibGUpXFxu44CQ56S65L6L44CR77yacm91bmQgKDEuNTIsMSlcXG7jgJDov5Tlm57lgLzjgJHvvJoxLjVgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIkRlZmF1bHRGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJyYW5kb21cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6Zqo5qmf5pW4XCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrpmqjmqZ/nlJ/miJDlpKfmlrznrYnmlrwgMC4wIOS4lOWwj+aWvCAxLjAg55qE5YG96Zqo5qmf5YC8XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pW45YC8KFN5c3RlbS5Eb3VibGUpXFxu44CQ56S65L6L44CR77yacmFuZG9tKClcXG7jgJDov5Tlm57lgLzjgJHvvJowLjYyNDUwODM0OTM5M2AsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJzaW5cIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi5q2j5bymXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pW45YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZG91YmxlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5LiA5YCL5pW45a2X55qE5q2j5bym5YC8XFxu44CQdmFsdWXjgJHvvJroqIjnrpfmlbjlgLxcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkRvdWJsZSlcXG7kuIDlgIvku6XlvKfluqbooajnpLrnmoTop5JcXG7jgJDnpLrkvovjgJHvvJpzaW4oMSkgXFxu44CQ6L+U5Zue5YC844CR77yaMC44NDE4NzA5OGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJjb3NcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6aSY5bymXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5pW45YC8XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZG91YmxlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya6L+U5Zue5LiA5YCL5pW45a2X55qE6aSY5bym5YC8XFxu44CQdmFsdWXjgJHvvJroqIjnrpfmlbjlgLxcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkRvdWJsZSlcXG7kuIDlgIvku6XlvKfluqbooajnpLrnmoTop5JcXG7jgJDnpLrkvovjgJHvvJpjb3MoMykgXFxu44CQ6L+U5Zue5YC844CR77yaLTAuOTg5OTkyNGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJjZWlsXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIuWQkeS4iuiIjeWFpVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVuOWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogYOOAkOWKn+iDveOAke+8mui/lOWbnuWkp+aWvOaIluetieaWvOWHveaVuOWPg+aVuO+8jOS4puS4lOiIh+S5i+acgOaOpei/keeahOaVtOaVuFxcbuOAkHZhbHVl44CR77ya6KiI566X5pW45YC8XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pW45YC8KFN5c3RlbS5JbnQzMilcXG7jgJDnpLrkvovjgJHvvJpjZWlsKDMuMikgXFxu44CQ6L+U5Zue5YC844CR77yaNGAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOlwiXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXCJrZXlcIjogXCJmbG9vclwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCLlkJHkuIvoiI3lhaVcIixcclxuICAgICAgICAgICAgXCJwYXJhbXNcIjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbjlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrov5Tlm57lsI/mlrzmiJbnrYnmlrzlh73mlbjlj4PmlbjvvIzkuKbkuJToiIfkuYvmnIDmjqXov5HnmoTmlbTmlbhcXG7jgJB2YWx1ZeOAke+8muioiOeul+aVuOWAvFxcbuOAkOi/lOWbnuWAvOmhnuWei+OAke+8muaVuOWAvChTeXN0ZW0uSW50MzIpXFxu44CQ56S65L6L44CR77yaZmxvb3IoMy4yKSBcXG7jgJDov5Tlm57lgLzjgJHvvJozYCxcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiTWF0aFwiLFxyXG4gICAgICAgICAgICBcImtleUZyb250XCI6XCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcImtleVwiOiBcIkJhbmtlclJvdW5kXCIsXHJcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIumKgOihjOWutuiIjeWFpVwiLFxyXG4gICAgICAgICAgICBcInBhcmFtc1wiOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogXCJ2YWx1ZTFcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLmlbjlgLxcIixcclxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkb3VibGVcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuWwj+aVuOS9jeaVuFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludDMyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBg44CQ5Yqf6IO944CR77ya5L2/55So6YqA6KGM5a626IiN5YWl5qiZ5rqW77yM5oqK5oyH5a6a5pW45a2X6IiN5YWl54K65pyA5o6l6L+R55qE5pW45a2XXFxu44CQdmFsdWUx44CR77ya6KaB5o2o5YWl55qE5pW45YC8XFxu44CQdmFsdWUy44CR77ya6KaB5o2o5YWl55qE5bCP5pW45L2N5pW4XFxu44CQ6L+U5Zue5YC86aGe5Z6L44CR77ya5pW45YC8KFN5c3RlbS5Eb3VibGUpXFxu44CQ56S65L6L44CR77yaQmFua2VyUm91bmQoMzYuMTI0LDIpXFxu44CQ6L+U5Zue5YC844CR77yaMzYuMTJgLFxyXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNYXRoXCIsXHJcbiAgICAgICAgICAgIFwia2V5RnJvbnRcIjpcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjpcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFwia2V5XCI6IFwiYmFua2VyUm91bmRcIixcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwi6YqA6KGM5a626IiN5YWlXCIsXHJcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcInZhbHVlMVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIuaVuOWAvFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRvdWJsZVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IFwidmFsdWUyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwi5bCP5pW45L2N5pW4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50MzJcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGDjgJDlip/og73jgJHvvJrkvb/nlKjpioDooYzlrrboiI3lhaXmqJnmupbvvIzmiormjIflrprmlbjlrZfoiI3lhaXngrrmnIDmjqXov5HnmoTmlbjlrZdcXG7jgJB2YWx1ZTHjgJHvvJropoHmjajlhaXnmoTmlbjlgLxcXG7jgJB2YWx1ZTLjgJHvvJropoHmjajlhaXnmoTlsI/mlbjkvY3mlbhcXG7jgJDov5Tlm57lgLzpoZ7lnovjgJHvvJrmlbjlgLwoU3lzdGVtLkRvdWJsZSlcXG7jgJDnpLrkvovjgJHvvJpiYW5rZXJSb3VuZCgzNi4xMjQsMilcXG7jgJDov5Tlm57lgLzjgJHvvJozNi4xMmAsXHJcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk1hdGhcIixcclxuICAgICAgICAgICAgXCJrZXlGcm9udFwiOlwiRGVmYXVsdEZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJcIlxyXG4gICAgICAgIH1cclxuICAgIF1cclxufVxyXG4iXX0=