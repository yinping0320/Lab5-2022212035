/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
import { VarType } from './vartype';
export class ExpressionVarGridComponent {
    constructor() {
        this.selectVarRow = new EventEmitter();
        this.columns = [
            { field: 'name', title: '名称' },
        ];
        this.items = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.items = [
            {
                name: this.localePipe.transform("VariableSessionValue"),
                id: VarType.Session
            },
            {
                name: this.localePipe.transform("VariableContextParameter"),
                id: VarType.Context
            }
        ];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectVarRow.emit($event.data);
    }
}
ExpressionVarGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-var-grid',
                template: "<farris-datagrid\r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"false\"\r\n[headerHeight]=\"30\"\r\n[pagination]=\"false\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionVarGridComponent.ctorParameters = () => [];
ExpressionVarGridComponent.propDecorators = {
    h1: [{ type: Input }],
    selectVarRow: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionVarGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionVarGridComponent.prototype.localePipe;
    /** @type {?} */
    ExpressionVarGridComponent.prototype.h1;
    /** @type {?} */
    ExpressionVarGridComponent.prototype.selectVarRow;
    /** @type {?} */
    ExpressionVarGridComponent.prototype.columns;
    /** @type {?} */
    ExpressionVarGridComponent.prototype.items;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi12YXItZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9leHByZXNzaW9uLyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24tdmFyLWdyaWQvZXhwcmVzc2lvbi12YXItZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPcEMsTUFBTSxPQUFPLDBCQUEwQjtJQU1yQztRQU1VLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QyxZQUFPLEdBQUc7WUFDUixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztTQUM1QixDQUFDO1FBQ0osVUFBSyxHQUFDLEVBQUUsQ0FBQztRQVRQLFdBQVc7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLDBCQUEwQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7O0lBT0QsUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUM7WUFDVDtnQkFDRSxJQUFJLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUM7Z0JBQ3RELEVBQUUsRUFBQyxPQUFPLENBQUMsT0FBTzthQUNuQjtZQUNEO2dCQUNFLElBQUksRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQztnQkFDMUQsRUFBRSxFQUFDLE9BQU8sQ0FBQyxPQUFPO2FBQ25CO1NBQ0YsQ0FBQTtJQUNILENBQUM7Ozs7O0lBQ0QsZUFBZSxDQUFDLE1BQU07UUFFcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OztZQXJDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsaVZBQW1EOzthQUVwRDs7Ozs7aUJBWUUsS0FBSzsyQkFDTCxNQUFNOzs7Ozs7O0lBVFAsOENBQTBCOzs7OztJQUMxQixnREFBaUQ7O0lBT2pELHdDQUF5Qjs7SUFDekIsa0RBQTRDOztJQUM1Qyw2Q0FFSTs7SUFDSiwyQ0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRXhwcmVzc2lvbkVkaXRvckxvY2FsZVBpcGUgfSBmcm9tICcuLi9leHByZXNzaW9uLWVkaXRvci1sb2NhbGUucGlwZSc7XHJcbmltcG9ydCB7IFZhclR5cGUgfSBmcm9tICcuL3ZhcnR5cGUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtZXhwcmVzc2lvbi12YXItZ3JpZCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2V4cHJlc3Npb24tdmFyLWdyaWQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2V4cHJlc3Npb24tdmFyLWdyaWQuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uVmFyR3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIC8v5a6a5LmJaTE4buagh+ivhlxyXG4gIHByaXZhdGUgbG9jYWxlSWQgOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBsb2NhbGVQaXBlIDogIEV4cHJlc3Npb25FZGl0b3JMb2NhbGVQaXBlO1xyXG4gIFxyXG4gIGNvbnN0cnVjdG9yKCkgeyBcclxuICAgIC8v5Yid5aeL5YyWaTE4buagh+ivhlxyXG4gICAgdGhpcy5sb2NhbGVJZCA9ICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2VDb2RlJyk7XHJcbiAgICB0aGlzLmxvY2FsZVBpcGUgPSBuZXcgRXhwcmVzc2lvbkVkaXRvckxvY2FsZVBpcGUodGhpcy5sb2NhbGVJZCk7XHJcbiAgfVxyXG4gIEBJbnB1dCgpIGgxIDogSHR0cENsaWVudDtcclxuICBAT3V0cHV0KCkgc2VsZWN0VmFyUm93ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIGNvbHVtbnMgPSBbXHJcbiAgICB7IGZpZWxkOiAnbmFtZScsIHRpdGxlOiAn5ZCN56ewJ30sXHJcbiAgICBdO1xyXG4gIGl0ZW1zPVtdO1xyXG4gIG5nT25Jbml0KCkgeyBcclxuICAgIHRoaXMuaXRlbXM9W1xyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTp0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiVmFyaWFibGVTZXNzaW9uVmFsdWVcIiksXHJcbiAgICAgICAgaWQ6VmFyVHlwZS5TZXNzaW9uXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOnRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJWYXJpYWJsZUNvbnRleHRQYXJhbWV0ZXJcIiksXHJcbiAgICAgICAgaWQ6VmFyVHlwZS5Db250ZXh0XHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9XHJcbiAgc2VsZWN0Um93Q2hhbmdlKCRldmVudClcclxuICB7XHJcbiAgICB0aGlzLnNlbGVjdFZhclJvdy5lbWl0KCRldmVudC5kYXRhKTtcclxuICB9XHJcbn1cclxuIl19