/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, ViewChild } from '@angular/core';
import { VarType } from '../expression-var-grid/vartype';
import { ExpressionEventService } from '../expression-event-service';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
export class ExpressionVarInfoGridComponent {
    // private http = new HttpClient();
    /**
     * @param {?} eventService
     */
    constructor(eventService) {
        this.eventService = eventService;
        this.currentVarType = VarType.Context;
        this.contextEntities = [];
        this.sessionEntities = [];
        this.selectVarInfoRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        this.columns = [
            { field: 'key', title: this.localePipe.transform("VariableName"), width: '20%', filter: true },
            { field: 'name', title: this.localePipe.transform("VariableSemanticNameValue"), width: '30%', filter: true }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.eventService.subClearFuncSelect().subscribe((/**
         * @return {?}
         */
        () => {
            this.dg.clearAll();
        }));
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        switch (this.currentVarType) {
            case VarType.Context:
                this.items = this.contextEntities;
                break;
            case VarType.Session:
                this.items = this.sessionEntities;
                break;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        this.dbclickInsert.emit($event.rowData);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectVarInfoRow.emit($event.data);
    }
}
ExpressionVarInfoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-var-info-grid',
                template: "<farris-datagrid #dg\r\n[idField]=\"'key'\"\r\n[height]=\"268\"\r\n[width]=\"430\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[enableFilterRow]=\"true\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionVarInfoGridComponent.ctorParameters = () => [
    { type: ExpressionEventService }
];
ExpressionVarInfoGridComponent.propDecorators = {
    dg: [{ type: ViewChild, args: ['dg',] }],
    currentVarType: [{ type: Input }],
    contextEntities: [{ type: Input }],
    sessionEntities: [{ type: Input }],
    selectVarInfoRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionVarInfoGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionVarInfoGridComponent.prototype.localePipe;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.dg;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.currentVarType;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.contextEntities;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.sessionEntities;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.selectVarInfoRow;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.items;
    /** @type {?} */
    ExpressionVarInfoGridComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    ExpressionVarInfoGridComponent.prototype.eventService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi12YXItaW5mby1ncmlkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2V4cHJlc3Npb24vIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi12YXItaW5mby1ncmlkL2V4cHJlc3Npb24tdmFyLWluZm8tZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN6RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQVE5RSxNQUFNLE9BQU8sOEJBQThCOzs7OztJQVF6QyxZQUFvQixZQUFvQztRQUFwQyxpQkFBWSxHQUFaLFlBQVksQ0FBd0I7UUFVL0MsbUJBQWMsR0FBWSxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzFDLG9CQUFlLEdBQWdCLEVBQUUsQ0FBQztRQUNsQyxvQkFBZSxHQUFnQixFQUFFLENBQUM7UUFDakMscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN0QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0MsVUFBSyxHQUFnQixFQUFFLENBQUE7UUFDdkIsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQWZYLFdBQVc7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLDBCQUEwQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7WUFDOUYsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtTQUM3RyxDQUFDO0lBQ0osQ0FBQzs7OztJQVNELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUFFLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFO1lBQ3BELElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDckIsQ0FBQyxFQUFDLENBQUE7SUFDSixDQUFDOzs7O0lBQ0QsV0FBVztRQUNULFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUMzQixLQUFLLE9BQU8sQ0FBQyxPQUFPO2dCQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7Z0JBQ2xDLE1BQU07WUFDUixLQUFLLE9BQU8sQ0FBQyxPQUFPO2dCQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7Z0JBQ2xDLE1BQU07U0FDVDtJQUNILENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLE1BQU07UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7O0lBQ0QsZUFBZSxDQUFDLE1BQU07UUFDcEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7O1lBbkRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsOEJBQThCO2dCQUN4QyxvWkFBd0Q7O2FBRXpEOzs7O1lBVFEsc0JBQXNCOzs7aUJBMkI1QixTQUFTLFNBQUMsSUFBSTs2QkFDZCxLQUFLOzhCQUNMLEtBQUs7OEJBQ0wsS0FBSzsrQkFDTCxNQUFNOzRCQUNOLE1BQU07Ozs7Ozs7SUFuQlAsa0RBQXlCOzs7OztJQUN6QixvREFBK0M7O0lBYS9DLDRDQUF1Qzs7SUFDdkMsd0RBQW1EOztJQUNuRCx5REFBMkM7O0lBQzNDLHlEQUEyQzs7SUFDM0MsMERBQWdEOztJQUNoRCx1REFBNkM7O0lBQzdDLCtDQUF1Qjs7SUFDdkIsaURBQWE7Ozs7O0lBaEJELHNEQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZhckVudGl0eSB9IGZyb20gJy4uL3ZhcmVudGl0eSc7XHJcbmltcG9ydCB7IFZhclR5cGUgfSBmcm9tICcuLi9leHByZXNzaW9uLXZhci1ncmlkL3ZhcnR5cGUnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi1ldmVudC1zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgRXhwcmVzc2lvbkVkaXRvckxvY2FsZVBpcGUgfSBmcm9tICcuLi9leHByZXNzaW9uLWVkaXRvci1sb2NhbGUucGlwZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWV4cHJlc3Npb24tdmFyLWluZm8tZ3JpZCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2V4cHJlc3Npb24tdmFyLWluZm8tZ3JpZC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vZXhwcmVzc2lvbi12YXItaW5mby1ncmlkLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblZhckluZm9HcmlkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAvL+WumuS5iWkxOG7moIfor4ZcclxuICBwcml2YXRlIGxvY2FsZUlkOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBsb2NhbGVQaXBlOiBFeHByZXNzaW9uRWRpdG9yTG9jYWxlUGlwZTtcclxuXHJcbiAgLy8gcHJpdmF0ZSBodHRwID0gbmV3IEh0dHBDbGllbnQoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBldmVudFNlcnZpY2U6IEV4cHJlc3Npb25FdmVudFNlcnZpY2UpIHtcclxuICAgIC8v5Yid5aeL5YyWaTE4buagh+ivhlxyXG4gICAgdGhpcy5sb2NhbGVJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKTtcclxuICAgIHRoaXMubG9jYWxlUGlwZSA9IG5ldyBFeHByZXNzaW9uRWRpdG9yTG9jYWxlUGlwZSh0aGlzLmxvY2FsZUlkKTtcclxuICAgIHRoaXMuY29sdW1ucyA9IFtcclxuICAgICAgeyBmaWVsZDogJ2tleScsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiVmFyaWFibGVOYW1lXCIpLCB3aWR0aDogJzIwJScsIGZpbHRlcjogdHJ1ZSB9LFxyXG4gICAgICB7IGZpZWxkOiAnbmFtZScsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiVmFyaWFibGVTZW1hbnRpY05hbWVWYWx1ZVwiKSwgd2lkdGg6ICczMCUnLCBmaWx0ZXI6IHRydWUgfVxyXG4gICAgXTtcclxuICB9XHJcbiAgQFZpZXdDaGlsZCgnZGcnKSBkZzogRGF0YWdyaWRDb21wb25lbnQ7XHJcbiAgQElucHV0KCkgY3VycmVudFZhclR5cGU6IFZhclR5cGUgPSBWYXJUeXBlLkNvbnRleHQ7XHJcbiAgQElucHV0KCkgY29udGV4dEVudGl0aWVzOiBWYXJFbnRpdHlbXSA9IFtdO1xyXG4gIEBJbnB1dCgpIHNlc3Npb25FbnRpdGllczogVmFyRW50aXR5W10gPSBbXTtcclxuICBAT3V0cHV0KCkgc2VsZWN0VmFySW5mb1JvdyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgZGJjbGlja0luc2VydCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBpdGVtczogVmFyRW50aXR5W10gPSBbXVxyXG4gIGNvbHVtbnMgPSBbXTtcclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuZXZlbnRTZXJ2aWNlLnN1YkNsZWFyRnVuY1NlbGVjdCgpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuZGcuY2xlYXJBbGwoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xyXG4gICAgc3dpdGNoICh0aGlzLmN1cnJlbnRWYXJUeXBlKSB7XHJcbiAgICAgIGNhc2UgVmFyVHlwZS5Db250ZXh0OlxyXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmNvbnRleHRFbnRpdGllcztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBWYXJUeXBlLlNlc3Npb246XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuc2Vzc2lvbkVudGl0aWVzO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25kYmxjbGlja1JvdygkZXZlbnQpIHtcclxuICAgIHRoaXMuZGJjbGlja0luc2VydC5lbWl0KCRldmVudC5yb3dEYXRhKTtcclxuICB9XHJcbiAgc2VsZWN0Um93Q2hhbmdlKCRldmVudCkge1xyXG4gICAgdGhpcy5zZWxlY3RWYXJJbmZvUm93LmVtaXQoJGV2ZW50LmRhdGEpO1xyXG4gIH1cclxufVxyXG4iXX0=