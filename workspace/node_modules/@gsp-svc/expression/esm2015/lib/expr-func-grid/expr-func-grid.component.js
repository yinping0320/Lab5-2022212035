/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, Injector, Output, EventEmitter } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ExpressionEventService } from '../expression-event-service';
import { FuncOnEntity } from './funcentitys';
import { HttpClient } from "@angular/common/http";
import { FunctionI18nResources } from '../i18n/FunctionI18nResource';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
export class ExprFuncGridComponent {
    /**
     * @param {?} eventService
     * @param {?} injector
     * @param {?} http
     */
    constructor(eventService, injector, http) {
        this.eventService = eventService;
        this.injector = injector;
        this.http = http;
        this.currentFuncTabType = "String";
        this.funcExtend = [];
        this.selectFuncRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.standardFunctions = []; //规范函数
        //规范函数
        this.allFunctions = []; //所有函数，包含不规范
        //所有函数，包含不规范
        this.deprecatedFunctions = [
            "StringSubstring", "StringLength", "StringReplace", "StringToUpper", "StringToLower", "StringIndexOf", "StringLastIndexOf", "StringTrimStart", "StringTrimEnd", "StringTrim", "StringAdd",
            "Round", "BankerRound",
            "getComputeJsonData",
            "ToDecimal", "ToSingle"
        ]; //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        this.columns = [];
        // if(this.injector)
        // {
        // this.http=this.injector.get(HttpClient);
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        // }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.eventService.subClearFuncSelect().subscribe((/**
         * @return {?}
         */
        () => {
            this.dg.clearAll();
        }));
        this.columns = [
            { field: 'name', title: this.localePipe.transform("FunctionSemanticName"), width: 180 },
            { field: 'key', title: this.localePipe.transform("FunctionName"), width: 180 },
            { field: 'param', title: this.localePipe.transform("FunctionParameter"), width: 250 }
        ];
        //获取i18n函数资源；过滤不规范命名函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        for (let i = 0; i < this.allFunctions.length; i++) {
            if (!this.deprecatedFunctions.includes(this.allFunctions[i].key)) {
                this.standardFunctions.push(this.allFunctions[i]);
            }
        }
        switch (this.currentFuncTabType) {
            case "String":
                this.findFunctionByType("String");
                break;
            case "DateTime":
                this.findFunctionByType("DateTime");
                break;
            case "Aggregate":
                this.findFunctionByType("Aggregate");
                break;
            case "Translate":
                this.findFunctionByType("Translate");
                break;
            case "Estimate":
                this.findFunctionByType("Estimate");
                break;
            case "Math":
                this.findFunctionByType("Math");
                break;
            case "Analytical":
                this.findFunctionByType("Analytical");
                break;
            case "Advanced":
                this.findFunctionByType("Advanced");
                break;
            case "Extend":
                this.findFunctionByType("Extend");
                break;
        }
        /** @type {?} */
        let itmeList = [];
        /**
         * 封装提供给表达式编辑器
         * 1：Advanced使用key,不使用name
         */
        this.items.forEach((/**
         * @param {?} funcitem
         * @return {?}
         */
        funcitem => {
            /** @type {?} */
            let func = new FuncOnEntity;
            if (funcitem.type == "Advanced") {
                func.name = funcitem.key;
            }
            else {
                func.name = funcitem.name;
            }
            func.key = funcitem.key;
            func.params = funcitem.params;
            func.type = funcitem.type;
            func.className = funcitem.className;
            func.description = funcitem.description;
            func.param = "(";
            for (let i = 0; i < funcitem.params.length - 1; i++) {
                // func.param = func.param + funcitem.params[i].name + ":" + funcitem.params[i].type + ",";
                func.param = func.param + funcitem.params[i].key + ",";
            }
            if (funcitem.params.length != 0) {
                // func.param = func.param + funcitem.params[funcitem.params.length - 1].name + ":" + funcitem.params[funcitem.params.length - 1].type + ")";
                func.param = func.param + funcitem.params[funcitem.params.length - 1].key + ")";
            }
            else
                func.param = func.param + ")";
            itmeList.push(func);
        }));
        this.items = itmeList;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        this.dbclickInsert.emit($event.rowData);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectFuncRow.emit($event.data);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    findFunctionByType(type) {
        this.items = [];
        this.standardFunctions.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.type == type) {
                this.items.push(element);
            }
            ;
        }));
    }
}
ExprFuncGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expr-func-grid',
                template: "<div style=\"height: 100%;width: 100%;\">\r\n<farris-datagrid #dg\r\n[idField]=\"'key'\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"false\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[headerHeight]=\"30\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExprFuncGridComponent.ctorParameters = () => [
    { type: ExpressionEventService },
    { type: Injector },
    { type: HttpClient }
];
ExprFuncGridComponent.propDecorators = {
    dg: [{ type: ViewChild, args: ['dg',] }],
    currentFuncTabType: [{ type: Input }],
    funcExtend: [{ type: Input }],
    selectFuncRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.localePipe;
    /** @type {?} */
    ExprFuncGridComponent.prototype.dg;
    /** @type {?} */
    ExprFuncGridComponent.prototype.currentFuncTabType;
    /** @type {?} */
    ExprFuncGridComponent.prototype.funcExtend;
    /** @type {?} */
    ExprFuncGridComponent.prototype.selectFuncRow;
    /** @type {?} */
    ExprFuncGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExprFuncGridComponent.prototype.items;
    /** @type {?} */
    ExprFuncGridComponent.prototype.standardFunctions;
    /** @type {?} */
    ExprFuncGridComponent.prototype.allFunctions;
    /** @type {?} */
    ExprFuncGridComponent.prototype.deprecatedFunctions;
    /** @type {?} */
    ExprFuncGridComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.eventService;
    /**
     * @type {?}
     * @private
     */
    ExprFuncGridComponent.prototype.injector;
    /** @type {?} */
    ExprFuncGridComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwci1mdW5jLWdyaWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1zdmMvZXhwcmVzc2lvbi8iLCJzb3VyY2VzIjpbImxpYi9leHByLWZ1bmMtZ3JpZC9leHByLWZ1bmMtZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLEtBQUssRUFBWSxRQUFRLEVBQUUsTUFBTSxFQUFXLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2SCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQU85RSxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7SUFNaEMsWUFBb0IsWUFBb0MsRUFBUyxRQUFrQixFQUFRLElBQWlCO1FBQXhGLGlCQUFZLEdBQVosWUFBWSxDQUF3QjtRQUFTLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUSxTQUFJLEdBQUosSUFBSSxDQUFhO1FBV25HLHVCQUFrQixHQUFRLFFBQVEsQ0FBQztRQUNuQyxlQUFVLEdBQW1CLEVBQUUsQ0FBQztRQUMvQixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbkMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdDLFVBQUssR0FBa0IsRUFBRSxDQUFDO1FBRTFCLHNCQUFpQixHQUFHLEVBQUUsQ0FBQyxDQUFLLE1BQU07O1FBQ2xDLGlCQUFZLEdBQUcsRUFBRSxDQUFD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LFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsb2FBQThDOzthQUUvQzs7OztZQVZRLHNCQUFzQjtZQUh5QixRQUFRO1lBS3ZELFVBQVU7OztpQkF3QmhCLFNBQVMsU0FBQyxJQUFJO2lDQUVkLEtBQUs7eUJBQ0wsS0FBSzs0QkFDTCxNQUFNOzRCQUNOLE1BQU07Ozs7Ozs7SUFqQlAseUNBQTBCOzs7OztJQUMxQiwyQ0FBaUQ7O0lBV2pELG1DQUFzQzs7SUFFdEMsbURBQTRDOztJQUM1QywyQ0FBeUM7O0lBQ3pDLDhDQUE2Qzs7SUFDN0MsOENBQTZDOztJQUM3QyxzQ0FBMEI7O0lBRTFCLGtEQUF1Qjs7SUFDdkIsNkNBQWtCOztJQUNsQixvREFLRTs7SUFDRix3Q0FBYTs7Ozs7SUF6QkQsNkNBQTRDOzs7OztJQUFDLHlDQUEwQjs7SUFBQyxxQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkLCBJbnB1dCwgT25DaGFuZ2VzLEluamVjdG9yLCBPdXRwdXQsT3B0aW9uYWwsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGdW5jdGlvbkVudGl0eSxGdW5jdGlvbkVudGl0eXMgfSBmcm9tICcuLi9mdW5jZW50aXR5JztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgRXhwcmVzc2lvbkV2ZW50U2VydmljZSB9IGZyb20gJy4uL2V4cHJlc3Npb24tZXZlbnQtc2VydmljZSc7XHJcbmltcG9ydCB7IEZ1bmNPbkVudGl0eSB9IGZyb20gJy4vZnVuY2VudGl0eXMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XHJcbmltcG9ydCB7IEZ1bmN0aW9uSTE4blJlc291cmNlcyB9IGZyb20gJy4uL2kxOG4vRnVuY3Rpb25JMThuUmVzb3VyY2UnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uRWRpdG9yTG9jYWxlUGlwZSB9IGZyb20gJy4uL2V4cHJlc3Npb24tZWRpdG9yLWxvY2FsZS5waXBlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWV4cHItZnVuYy1ncmlkJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZXhwci1mdW5jLWdyaWQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2V4cHItZnVuYy1ncmlkLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRXhwckZ1bmNHcmlkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LE9uQ2hhbmdlcyB7XHJcblxyXG4gIC8v5a6a5LmJaTE4buagh+ivhlxyXG4gIHByaXZhdGUgbG9jYWxlSWQgOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBsb2NhbGVQaXBlIDogIEV4cHJlc3Npb25FZGl0b3JMb2NhbGVQaXBlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGV2ZW50U2VydmljZTogRXhwcmVzc2lvbkV2ZW50U2VydmljZSxwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixwdWJsaWMgaHR0cCA6IEh0dHBDbGllbnQpe1xyXG4gICAgLy8gaWYodGhpcy5pbmplY3RvcilcclxuICAgIC8vIHtcclxuICAgICAgLy8gdGhpcy5odHRwPXRoaXMuaW5qZWN0b3IuZ2V0KEh0dHBDbGllbnQpO1xyXG4gICAgICAvL+WIneWni+WMlmkxOG7moIfor4ZcclxuICAgICAgdGhpcy5sb2NhbGVJZCA9ICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2VDb2RlJyk7XHJcbiAgICAgIHRoaXMubG9jYWxlUGlwZSA9IG5ldyBFeHByZXNzaW9uRWRpdG9yTG9jYWxlUGlwZSh0aGlzLmxvY2FsZUlkKTtcclxuICAgIC8vIH1cclxuICB9XHJcbiAgQFZpZXdDaGlsZCgnZGcnKSBkZzpEYXRhZ3JpZENvbXBvbmVudDtcclxuXHJcbiAgQElucHV0KCkgY3VycmVudEZ1bmNUYWJUeXBlOnN0cmluZz1cIlN0cmluZ1wiO1xyXG4gIEBJbnB1dCgpIGZ1bmNFeHRlbmQ6IEZ1bmN0aW9uRW50aXR5W109W107XHJcbiAgQE91dHB1dCgpIHNlbGVjdEZ1bmNSb3cgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRiY2xpY2tJbnNlcnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgaXRlbXM6RnVuY3Rpb25FbnRpdHlbXT1bXTtcclxuXHJcbiAgc3RhbmRhcmRGdW5jdGlvbnMgPSBbXTsgICAgIC8v6KeE6IyD5Ye95pWwXHJcbiAgYWxsRnVuY3Rpb25zID0gW107ICAgICAgICAgIC8v5omA5pyJ5Ye95pWw77yM5YyF5ZCr5LiN6KeE6IyDXHJcbiAgZGVwcmVjYXRlZEZ1bmN0aW9ucyA9IFtcclxuICAgIFwiU3RyaW5nU3Vic3RyaW5nXCIsIFwiU3RyaW5nTGVuZ3RoXCIsIFwiU3RyaW5nUmVwbGFjZVwiLCBcIlN0cmluZ1RvVXBwZXJcIiwgXCJTdHJpbmdUb0xvd2VyXCIsXCJTdHJpbmdJbmRleE9mXCIsIFwiU3RyaW5nTGFzdEluZGV4T2ZcIiwgXCJTdHJpbmdUcmltU3RhcnRcIiwgXCJTdHJpbmdUcmltRW5kXCIsIFwiU3RyaW5nVHJpbVwiLFwiU3RyaW5nQWRkXCIsXHJcbiAgICBcIlJvdW5kXCIsIFwiQmFua2VyUm91bmRcIixcclxuICAgIFwiZ2V0Q29tcHV0ZUpzb25EYXRhXCIsXHJcbiAgICBcIlRvRGVjaW1hbFwiLCBcIlRvU2luZ2xlXCJcclxuICBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lh73mlbDosIPmlbTvvIzkuIDkupvlh73mlbDnlLHkuo7lkb3lkI3kuI3op4TojIPogIzkuI3kvb/nlKjvvIzlubbkuLrov5nkupvlh73mlbDmj5Dkvpvop4TojIPlkb3lkI3nmoTlrp7njrDjgILkuLrkuobmlK/mjIHlt7Lnu4/kv53lrZjnmoTooajovr7lvI/vvIzkuI3op4TojIPlkb3lkI3lh73mlbDlsIbkvJrkv53nlZnvvIzkvYbmmK/kvJrooqvov4fmu6TmjolcclxuICBjb2x1bW5zID0gW107XHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmV2ZW50U2VydmljZS5zdWJDbGVhckZ1bmNTZWxlY3QoKS5zdWJzY3JpYmUoKCk9PntcclxuICAgICAgdGhpcy5kZy5jbGVhckFsbCgpO1xyXG4gICAgfSlcclxuICAgIHRoaXMuY29sdW1ucyA9IFtcclxuICAgICAgeyBmaWVsZDogJ25hbWUnLCB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcIkZ1bmN0aW9uU2VtYW50aWNOYW1lXCIpLHdpZHRoOjE4MH0sXHJcbiAgICAgIHsgZmllbGQ6ICdrZXknLCB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcIkZ1bmN0aW9uTmFtZVwiKSx3aWR0aDoxODB9LFxyXG4gICAgICB7IGZpZWxkOiAncGFyYW0nLCB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcIkZ1bmN0aW9uUGFyYW1ldGVyXCIpLHdpZHRoOjI1MH1cclxuICAgIF07XHJcbiAgICAvL+iOt+WPlmkxOG7lh73mlbDotYTmupDvvJvov4fmu6TkuI3op4TojIPlkb3lkI3lh73mlbBcclxuICAgIHRoaXMuYWxsRnVuY3Rpb25zID0gRnVuY3Rpb25JMThuUmVzb3VyY2VzW3RoaXMubG9jYWxlSWRdIHx8IEZ1bmN0aW9uSTE4blJlc291cmNlc1tcInpoLUNIU1wiXTtcclxuICAgIGZvcihsZXQgaT0wO2k8dGhpcy5hbGxGdW5jdGlvbnMubGVuZ3RoO2krKyl7XHJcbiAgICAgIGlmKCF0aGlzLmRlcHJlY2F0ZWRGdW5jdGlvbnMuaW5jbHVkZXModGhpcy5hbGxGdW5jdGlvbnNbaV0ua2V5KSl7XHJcbiAgICAgICAgdGhpcy5zdGFuZGFyZEZ1bmN0aW9ucy5wdXNoKHRoaXMuYWxsRnVuY3Rpb25zW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICAgc3dpdGNoKHRoaXMuY3VycmVudEZ1bmNUYWJUeXBlKVxyXG4gICAgICB7XHJcbiAgICAgICAgY2FzZSBcIlN0cmluZ1wiOlxyXG4gICAgICAgICAgdGhpcy5maW5kRnVuY3Rpb25CeVR5cGUoXCJTdHJpbmdcIik7YnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIkRhdGVUaW1lXCI6XHJcbiAgICAgICAgICB0aGlzLmZpbmRGdW5jdGlvbkJ5VHlwZShcIkRhdGVUaW1lXCIpO2JyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJBZ2dyZWdhdGVcIjpcclxuICAgICAgICAgIHRoaXMuZmluZEZ1bmN0aW9uQnlUeXBlKFwiQWdncmVnYXRlXCIpO2JyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJUcmFuc2xhdGVcIjpcclxuICAgICAgICAgIHRoaXMuZmluZEZ1bmN0aW9uQnlUeXBlKFwiVHJhbnNsYXRlXCIpO2JyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJFc3RpbWF0ZVwiOlxyXG4gICAgICAgICAgdGhpcy5maW5kRnVuY3Rpb25CeVR5cGUoXCJFc3RpbWF0ZVwiKTticmVhaztcclxuICAgICAgICBjYXNlIFwiTWF0aFwiOlxyXG4gICAgICAgICAgdGhpcy5maW5kRnVuY3Rpb25CeVR5cGUoXCJNYXRoXCIpO2JyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJBbmFseXRpY2FsXCI6XHJcbiAgICAgICAgICB0aGlzLmZpbmRGdW5jdGlvbkJ5VHlwZShcIkFuYWx5dGljYWxcIik7YnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIkFkdmFuY2VkXCI6XHJcbiAgICAgICAgICB0aGlzLmZpbmRGdW5jdGlvbkJ5VHlwZShcIkFkdmFuY2VkXCIpO2JyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJFeHRlbmRcIjpcclxuICAgICAgICAgIHRoaXMuZmluZEZ1bmN0aW9uQnlUeXBlKFwiRXh0ZW5kXCIpO2JyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBpdG1lTGlzdCA9IFtdO1xyXG4gICAgICAvKipcclxuICAgICAgICog5bCB6KOF5o+Q5L6b57uZ6KGo6L6+5byP57yW6L6R5ZmoXHJcbiAgICAgICAqIDHvvJpBZHZhbmNlZOS9v+eUqGtleSzkuI3kvb/nlKhuYW1lXHJcbiAgICAgICAqL1xyXG4gICAgICB0aGlzLml0ZW1zLmZvckVhY2goZnVuY2l0ZW0gPT4ge1xyXG4gICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmNPbkVudGl0eTtcclxuICAgICAgICBpZihmdW5jaXRlbS50eXBlPT1cIkFkdmFuY2VkXCIpe1xyXG4gICAgICAgICAgZnVuYy5uYW1lID0gZnVuY2l0ZW0ua2V5O1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgZnVuYy5uYW1lID0gZnVuY2l0ZW0ubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuYy5rZXkgPSBmdW5jaXRlbS5rZXk7XHJcbiAgICAgICAgZnVuYy5wYXJhbXMgPSBmdW5jaXRlbS5wYXJhbXM7XHJcbiAgICAgICAgZnVuYy50eXBlID0gZnVuY2l0ZW0udHlwZTtcclxuICAgICAgICBmdW5jLmNsYXNzTmFtZSA9IGZ1bmNpdGVtLmNsYXNzTmFtZTtcclxuICAgICAgICBmdW5jLmRlc2NyaXB0aW9uID0gZnVuY2l0ZW0uZGVzY3JpcHRpb247XHJcbiAgICAgICAgZnVuYy5wYXJhbSA9IFwiKFwiOyAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnVuY2l0ZW0ucGFyYW1zLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgLy8gZnVuYy5wYXJhbSA9IGZ1bmMucGFyYW0gKyBmdW5jaXRlbS5wYXJhbXNbaV0ubmFtZSArIFwiOlwiICsgZnVuY2l0ZW0ucGFyYW1zW2ldLnR5cGUgKyBcIixcIjtcclxuICAgICAgICAgIGZ1bmMucGFyYW0gPSBmdW5jLnBhcmFtICsgZnVuY2l0ZW0ucGFyYW1zW2ldLmtleSArIFwiLFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihmdW5jaXRlbS5wYXJhbXMubGVuZ3RoIT0wKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIC8vIGZ1bmMucGFyYW0gPSBmdW5jLnBhcmFtICsgZnVuY2l0ZW0ucGFyYW1zW2Z1bmNpdGVtLnBhcmFtcy5sZW5ndGggLSAxXS5uYW1lICsgXCI6XCIgKyBmdW5jaXRlbS5wYXJhbXNbZnVuY2l0ZW0ucGFyYW1zLmxlbmd0aCAtIDFdLnR5cGUgKyBcIilcIjtcclxuICAgICAgICAgIGZ1bmMucGFyYW0gPSBmdW5jLnBhcmFtICsgZnVuY2l0ZW0ucGFyYW1zW2Z1bmNpdGVtLnBhcmFtcy5sZW5ndGggLSAxXS5rZXkgICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgZnVuYy5wYXJhbSA9IGZ1bmMucGFyYW0gKyBcIilcIjtcclxuICAgICAgICBpdG1lTGlzdC5wdXNoKGZ1bmMpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5pdGVtcyA9IGl0bWVMaXN0O1xyXG4gICAgfVxyXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xyXG4gIH1cclxuICBvbmRibGNsaWNrUm93KCRldmVudClcclxuICB7XHJcbiAgICB0aGlzLmRiY2xpY2tJbnNlcnQuZW1pdCgkZXZlbnQucm93RGF0YSk7XHJcbiAgfVxyXG4gIHNlbGVjdFJvd0NoYW5nZSgkZXZlbnQpXHJcbiAge1xyXG4gICAgdGhpcy5zZWxlY3RGdW5jUm93LmVtaXQoJGV2ZW50LmRhdGEpO1xyXG4gIH1cclxuICBmaW5kRnVuY3Rpb25CeVR5cGUodHlwZTpzdHJpbmcpe1xyXG4gICAgdGhpcy5pdGVtcz1bXTtcclxuICAgIHRoaXMuc3RhbmRhcmRGdW5jdGlvbnMuZm9yRWFjaChlbGVtZW50PT57XHJcbiAgICAgIGlmKGVsZW1lbnQudHlwZT09dHlwZSl7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==