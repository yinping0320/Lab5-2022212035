/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Property } from '../schema';
import { CurrentNode } from '../currentNode';
export class ExpressionSchemaInfoGridComponent {
    constructor() {
        this.schema = new Map();
        this.choseSchemaTableName = new CurrentNode;
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.selectString = "";
        this.items = [];
        this.columns = [{ field: 'name', title: '属性名称', filter: true }];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        /** @type {?} */
        let schemaName = this.choseSchemaTableName.parentName;
        /** @type {?} */
        let tableId = this.choseSchemaTableName.id;
        /** @type {?} */
        let tableName = this.choseSchemaTableName.name;
        /** @type {?} */
        let schemaItem = this.schema.get(schemaName);
        if (schemaItem) {
            /** @type {?} */
            let entityType = schemaItem.entityTypes.find((/**
             * @param {?} entitytype
             * @return {?}
             */
            entitytype => (entitytype.id == tableId && entitytype.name == tableName) || (entitytype.id == "" && entitytype.name == tableName)));
            if (entityType) {
                this.items = entityType.properties;
                entityType.navigationProperties.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    let property = new Property;
                    property.name = item.name;
                    property.type = item.type.toString();
                    property.description = item.description;
                    this.items = this.items.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.name !== property.name));
                    this.items.push(property);
                }));
                this.selectString = entityType.name;
            }
            else {
                /** @type {?} */
                let entitySet = schemaItem.entitySets.find((/**
                 * @param {?} entityset
                 * @return {?}
                 */
                entityset => entityset.name == tableName));
                if (entitySet) {
                    /** @type {?} */
                    let eType = schemaItem.entityTypes.find((/**
                     * @param {?} entitytype
                     * @return {?}
                     */
                    entitytype => entitytype.name == entitySet.entityType));
                    this.items = eType.properties;
                    eType.navigationProperties.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        /** @type {?} */
                        let property = new Property;
                        property.name = item.name;
                        property.type = item.type.toString();
                        property.description = item.description;
                        this.items = this.items.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.name !== property.name));
                        this.items.push(property);
                    }));
                    this.selectString = entitySet.name + ".[0]";
                }
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        this.dbclickInsert.emit(this.selectString + "." + $event.rowData.name);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectSchemaRow.emit($event.data);
    }
}
ExpressionSchemaInfoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-schema-info-grid',
                template: "<farris-datagrid\r\n[idField]=\"'name'\"\r\n[height]=\"268\"\r\n[width]=\"300\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n[enableFilterRow]=\"true\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionSchemaInfoGridComponent.ctorParameters = () => [];
ExpressionSchemaInfoGridComponent.propDecorators = {
    schema: [{ type: Input }],
    choseSchemaTableName: [{ type: Input }],
    selectSchemaRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ExpressionSchemaInfoGridComponent.prototype.schema;
    /** @type {?} */
    ExpressionSchemaInfoGridComponent.prototype.choseSchemaTableName;
    /** @type {?} */
    ExpressionSchemaInfoGridComponent.prototype.selectSchemaRow;
    /** @type {?} */
    ExpressionSchemaInfoGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExpressionSchemaInfoGridComponent.prototype.selectString;
    /** @type {?} */
    ExpressionSchemaInfoGridComponent.prototype.items;
    /** @type {?} */
    ExpressionSchemaInfoGridComponent.prototype.columns;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1zY2hlbWEtaW5mby1ncmlkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2V4cHJlc3Npb24vIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi1zY2hlbWEtaW5mby1ncmlkL2V4cHJlc3Npb24tc2NoZW1hLWluZm8tZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFhLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUFzQixRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTzdDLE1BQU0sT0FBTyxpQ0FBaUM7SUFTNUM7UUFQUyxXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDbkMseUJBQW9CLEdBQUMsSUFBSSxXQUFXLENBQUM7UUFDcEMsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JDLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3QyxpQkFBWSxHQUFRLEVBQUUsQ0FBQztRQUN2QixVQUFLLEdBQVksRUFBRSxDQUFDO1FBQ3BCLFlBQU8sR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7SUFFakIsUUFBUTtJQUNSLENBQUM7Ozs7SUFDRCxXQUFXOztZQUNMLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVTs7WUFDakQsT0FBTyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFOztZQUN0QyxTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUk7O1lBQzFDLFVBQVUsR0FBRyxJQUFJLENBQUMs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SUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OztZQWxFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlDQUFpQztnQkFDM0MsaVpBQTJEOzthQUU1RDs7Ozs7cUJBR0UsS0FBSzttQ0FDTCxLQUFLOzhCQUNMLE1BQU07NEJBQ04sTUFBTTs7OztJQUhQLG1EQUE0Qzs7SUFDNUMsaUVBQThDOztJQUM5Qyw0REFBK0M7O0lBQy9DLDBEQUE2Qzs7SUFDN0MseURBQXVCOztJQUN2QixrREFBb0I7O0lBQ3BCLG9EQUF3RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTY2hlbWEsIEVudGl0eVR5cGUsIFByb3BlcnR5IH0gZnJvbSAnLi4vc2NoZW1hJztcclxuaW1wb3J0IHsgQ3VycmVudE5vZGUgfSBmcm9tICcuLi9jdXJyZW50Tm9kZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1leHByZXNzaW9uLXNjaGVtYS1pbmZvLWdyaWQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9leHByZXNzaW9uLXNjaGVtYS1pbmZvLWdyaWQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2V4cHJlc3Npb24tc2NoZW1hLWluZm8tZ3JpZC5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25TY2hlbWFJbmZvR3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCxPbkNoYW5nZXMge1xyXG4gIFxyXG4gIEBJbnB1dCgpIHNjaGVtYSA9IG5ldyBNYXA8c3RyaW5nLCBTY2hlbWE+KCk7XHJcbiAgQElucHV0KCkgY2hvc2VTY2hlbWFUYWJsZU5hbWU9bmV3IEN1cnJlbnROb2RlO1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RTY2hlbWFSb3cgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRiY2xpY2tJbnNlcnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgc2VsZWN0U3RyaW5nOnN0cmluZz1cIlwiO1xyXG4gIGl0ZW1zOlByb3BlcnR5W109W107XHJcbiAgY29sdW1ucyA9IFt7IGZpZWxkOiAnbmFtZScsIHRpdGxlOiAn5bGe5oCn5ZCN56ewJyxmaWx0ZXI6dHJ1ZX1dO1xyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgIGxldCBzY2hlbWFOYW1lID0gdGhpcy5jaG9zZVNjaGVtYVRhYmxlTmFtZS5wYXJlbnROYW1lO1xyXG4gICAgbGV0IHRhYmxlSWQgPSB0aGlzLmNob3NlU2NoZW1hVGFibGVOYW1lLmlkO1xyXG4gICAgbGV0IHRhYmxlTmFtZSA9IHRoaXMuY2hvc2VTY2hlbWFUYWJsZU5hbWUubmFtZTtcclxuICAgIGxldCBzY2hlbWFJdGVtID0gdGhpcy5zY2hlbWEuZ2V0KHNjaGVtYU5hbWUpO1xyXG4gICAgICBpZihzY2hlbWFJdGVtKVxyXG4gICAgICB7XHJcbiAgICAgICAgbGV0IGVudGl0eVR5cGUgPSBzY2hlbWFJdGVtLmVudGl0eVR5cGVzLmZpbmQoZW50aXR5dHlwZSA9PiAoZW50aXR5dHlwZS5pZD09dGFibGVJZCAmJiBlbnRpdHl0eXBlLm5hbWUgPT0gdGFibGVOYW1lKXx8KGVudGl0eXR5cGUuaWQ9PVwiXCIgJiYgZW50aXR5dHlwZS5uYW1lID09IHRhYmxlTmFtZSkpO1xyXG4gICAgICAgIGlmKGVudGl0eVR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdGhpcy5pdGVtcz1lbnRpdHlUeXBlLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICBlbnRpdHlUeXBlLm5hdmlnYXRpb25Qcm9wZXJ0aWVzLmZvckVhY2goaXRlbT0+e1xyXG4gICAgICAgICAgICBsZXQgcHJvcGVydHkgPSBuZXcgUHJvcGVydHk7XHJcbiAgICAgICAgICAgIHByb3BlcnR5Lm5hbWUgPSBpdGVtLm5hbWU7XHJcbiAgICAgICAgICAgIHByb3BlcnR5LnR5cGUgPSBpdGVtLnR5cGUudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcHJvcGVydHkuZGVzY3JpcHRpb24gPSBpdGVtLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5maWx0ZXIoaXRlbT0+aXRlbS5uYW1lIT09cHJvcGVydHkubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMuc2VsZWN0U3RyaW5nID0gZW50aXR5VHlwZS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbGV0IGVudGl0eVNldCA9IHNjaGVtYUl0ZW0uZW50aXR5U2V0cy5maW5kKGVudGl0eXNldCA9PiBlbnRpdHlzZXQubmFtZT09dGFibGVOYW1lICk7XHJcbiAgICAgICAgICBpZihlbnRpdHlTZXQpXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICBsZXQgZVR5cGU9IHNjaGVtYUl0ZW0uZW50aXR5VHlwZXMuZmluZChlbnRpdHl0eXBlID0+IGVudGl0eXR5cGUubmFtZT09ZW50aXR5U2V0LmVudGl0eVR5cGUpO1xyXG4gICAgICAgICAgICAgdGhpcy5pdGVtcyA9IGVUeXBlLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICAgICBlVHlwZS5uYXZpZ2F0aW9uUHJvcGVydGllcy5mb3JFYWNoKGl0ZW09PntcclxuICAgICAgICAgICAgICBsZXQgcHJvcGVydHkgPSBuZXcgUHJvcGVydHk7XHJcbiAgICAgICAgICAgICAgcHJvcGVydHkubmFtZSA9IGl0ZW0ubmFtZTtcclxuICAgICAgICAgICAgICBwcm9wZXJ0eS50eXBlID0gaXRlbS50eXBlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgcHJvcGVydHkuZGVzY3JpcHRpb24gPSBpdGVtLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtPT5pdGVtLm5hbWUhPT1wcm9wZXJ0eS5uYW1lKTtcclxuICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gocHJvcGVydHkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFN0cmluZyA9IGVudGl0eVNldC5uYW1lK1wiLlswXVwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gIH1cclxuICBvbmRibGNsaWNrUm93KCRldmVudClcclxuICB7XHJcbiAgICB0aGlzLmRiY2xpY2tJbnNlcnQuZW1pdCh0aGlzLnNlbGVjdFN0cmluZytcIi5cIiskZXZlbnQucm93RGF0YS5uYW1lKTtcclxuICB9XHJcbiAgc2VsZWN0Um93Q2hhbmdlKCRldmVudClcclxuICB7XHJcbiAgICB0aGlzLnNlbGVjdFNjaGVtYVJvdy5lbWl0KCRldmVudC5kYXRhKTtcclxuICB9XHJcbn1cclxuIl19