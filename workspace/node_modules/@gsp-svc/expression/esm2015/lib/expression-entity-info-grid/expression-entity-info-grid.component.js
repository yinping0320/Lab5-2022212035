/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Property } from '../schema';
import { CurrentNode } from '../currentNode';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
import { NewProperty } from '../i18n/NewSchema';
export class ExpressionEntityInfoGridComponent {
    constructor() {
        this.schema = new Map();
        this.newSchemaMap = new Map(); //统一Schema
        //统一Schema
        this.choseEntityTableName = new CurrentNode;
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.selectString = "";
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        // this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
        /** @type {?} */
        let schemaName = this.choseEntityTableName.schema;
        /** @type {?} */
        let parentName = this.choseEntityTableName.parentName;
        /** @type {?} */
        let tableId = this.choseEntityTableName.id;
        /** @type {?} */
        let tableName = this.choseEntityTableName.name;
        /** @type {?} */
        let schemaItem;
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            //统一Schema
            this.columns = [{ field: 'code', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.newSchemaMap.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                let entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                entitytype => (entitytype.code == tableName) || (entitytype.code == "")));
                if (!entityType) {
                    /** @type {?} */
                    let entitySet = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    entityset => entityset.code == tableName));
                    if (entitySet) {
                        entityType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        entitytype => entitytype.code == entitySet.entityType));
                    }
                }
                this.items = [...entityType.properties];
                entityType.navigationProperties.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    let property = new NewProperty;
                    property.code = item.code;
                    property.name = "";
                    property.dataType = item.navigationType.toString();
                    property.nullable = false;
                    property.defaultValue = null;
                    this.items.push(property);
                    this.items = Array.from(this.items);
                }));
                this.selectString = parentName + "." + entityType.name;
            }
        }
        else {
            //旧的Schema
            this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.schema.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                let entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                entitytype => (entitytype.id == tableId && entitytype.name == tableName) || (entitytype.id == "" && entitytype.name == tableName)));
                if (entityType) {
                    this.items = [...entityType.properties];
                    entityType.navigationProperties.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        /** @type {?} */
                        let property = new Property;
                        property.name = item.name;
                        property.type = item.type.toString();
                        property.description = item.description;
                        this.items.push(property);
                    }));
                    this.selectString = parentName + "." + entityType.name;
                }
                else {
                    /** @type {?} */
                    let entitySet = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    entityset => entityset.name == tableName));
                    if (entitySet) {
                        /** @type {?} */
                        let eType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        entitytype => entitytype.name == entitySet.entityType));
                        this.items = [...eType.properties];
                        eType.navigationProperties.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            /** @type {?} */
                            let property = new Property;
                            property.name = item.name;
                            property.type = item.type.toString();
                            property.description = item.description;
                            this.items.push(property);
                        }));
                        this.selectString = parentName + "." + entitySet.name + ".[0]";
                    }
                }
            }
        }
    }
    //数据：子组件双击插入              (farris双击事件，调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        //this.dbclickInsert.emit(this.selectString+"."+$event.rowData.name);
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.code);
        }
        else if (this.schema && this.schema.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.name);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectSchemaRow.emit($event.data);
    }
}
ExpressionEntityInfoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-entity-info-grid',
                template: "<farris-datagrid\r\n[idField]=\"'name'\"\r\n[height]=\"268\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n[enableFilterRow]=\"true\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionEntityInfoGridComponent.ctorParameters = () => [];
ExpressionEntityInfoGridComponent.propDecorators = {
    schema: [{ type: Input }],
    newSchemaMap: [{ type: Input }],
    choseEntityTableName: [{ type: Input }],
    selectSchemaRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionEntityInfoGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionEntityInfoGridComponent.prototype.localePipe;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.schema;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.newSchemaMap;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.choseEntityTableName;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.selectSchemaRow;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.selectString;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.items;
    /** @type {?} */
    ExpressionEntityInfoGridComponent.prototype.columns;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1lbnRpdHktaW5mby1ncmlkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2V4cHJlc3Npb24vIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi1lbnRpdHktaW5mby1ncmlkL2V4cHJlc3Npb24tZW50aXR5LWluZm8tZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFVLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDOUUsT0FBTyxFQUFFLFdBQVcsRUFBYSxNQUFNLG1CQUFtQixDQUFDO0FBTzNELE1BQU0sT0FBTyxpQ0FBaUM7SUFjNUM7UUFSUyxXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDbkMsaUJBQVksR0FBRyxJQUFJLEdBQUcsRUFBcUIsQ0FBQyxDQUFHLFVBQVU7O1FBQ3pELHlCQUFvQixHQUFHLElBQUksV0FBVyxDQUFDO1FBQ3RDLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNyQyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0MsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsVUFBSyxHQUFDLEVBQUUsQ0FBQztRQUNULFlBQU8sR0FBRyxFQUFFLENBQUM7UUFFWCxXQUFXO1FBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFD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QUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDOzs7OztJQUNELGVBQWUsQ0FBQyxNQUFNO1FBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUE1R0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLDhYQUEyRDs7YUFFNUQ7Ozs7O3FCQU9FLEtBQUs7MkJBQ0wsS0FBSzttQ0FDTCxLQUFLOzhCQUNMLE1BQU07NEJBQ04sTUFBTTs7Ozs7OztJQVBQLHFEQUF5Qjs7Ozs7SUFDekIsdURBQStDOztJQUUvQyxtREFBNEM7O0lBQzVDLHlEQUFxRDs7SUFDckQsaUVBQWdEOztJQUNoRCw0REFBK0M7O0lBQy9DLDBEQUE2Qzs7SUFDN0MseURBQTBCOztJQUMxQixrREFBUzs7SUFDVCxvREFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2NoZW1hLCBQcm9wZXJ0eSB9IGZyb20gJy4uL3NjaGVtYSc7XHJcbmltcG9ydCB7IEN1cnJlbnROb2RlIH0gZnJvbSAnLi4vY3VycmVudE5vZGUnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uRWRpdG9yTG9jYWxlUGlwZSB9IGZyb20gJy4uL2V4cHJlc3Npb24tZWRpdG9yLWxvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgTmV3UHJvcGVydHksIE5ld1NjaGVtYSB9IGZyb20gJy4uL2kxOG4vTmV3U2NoZW1hJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWV4cHJlc3Npb24tZW50aXR5LWluZm8tZ3JpZCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2V4cHJlc3Npb24tZW50aXR5LWluZm8tZ3JpZC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vZXhwcmVzc2lvbi1lbnRpdHktaW5mby1ncmlkLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvbkVudGl0eUluZm9HcmlkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgLy/lrprkuYlpMThu5qCH6K+GXHJcbiAgcHJpdmF0ZSBsb2NhbGVJZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgbG9jYWxlUGlwZTogRXhwcmVzc2lvbkVkaXRvckxvY2FsZVBpcGU7XHJcblxyXG4gIEBJbnB1dCgpIHNjaGVtYSA9IG5ldyBNYXA8c3RyaW5nLCBTY2hlbWE+KCk7XHJcbiAgQElucHV0KCkgbmV3U2NoZW1hTWFwID0gbmV3IE1hcDxzdHJpbmcsIE5ld1NjaGVtYT4oKTsgICAvL+e7n+S4gFNjaGVtYVxyXG4gIEBJbnB1dCgpIGNob3NlRW50aXR5VGFibGVOYW1lID0gbmV3IEN1cnJlbnROb2RlO1xyXG4gIEBPdXRwdXQoKSBzZWxlY3RTY2hlbWFSb3cgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGRiY2xpY2tJbnNlcnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgc2VsZWN0U3RyaW5nOiBzdHJpbmcgPSBcIlwiO1xyXG4gIGl0ZW1zPVtdO1xyXG4gIGNvbHVtbnMgPSBbXTtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8v5Yid5aeL5YyWaTE4buagh+ivhlxyXG4gICAgdGhpcy5sb2NhbGVJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKTtcclxuICAgIHRoaXMubG9jYWxlUGlwZSA9IG5ldyBFeHByZXNzaW9uRWRpdG9yTG9jYWxlUGlwZSh0aGlzLmxvY2FsZUlkKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgIC8vIHRoaXMuY29sdW1ucyA9IFt7IGZpZWxkOiAnbmFtZScsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiRW50aXR5UHJvcExpc3RcIiksIGZpbHRlcjogdHJ1ZSB9XTtcclxuICAgIGxldCBzY2hlbWFOYW1lID0gdGhpcy5jaG9zZUVudGl0eVRhYmxlTmFtZS5zY2hlbWE7XHJcbiAgICBsZXQgcGFyZW50TmFtZSA9IHRoaXMuY2hvc2VFbnRpdHlUYWJsZU5hbWUucGFyZW50TmFtZTtcclxuICAgIGxldCB0YWJsZUlkID0gdGhpcy5jaG9zZUVudGl0eVRhYmxlTmFtZS5pZDtcclxuICAgIGxldCB0YWJsZU5hbWUgPSB0aGlzLmNob3NlRW50aXR5VGFibGVOYW1lLm5hbWU7XHJcbiAgICBsZXQgc2NoZW1hSXRlbTtcclxuICAgIGlmICh0aGlzLm5ld1NjaGVtYU1hcCAmJiB0aGlzLm5ld1NjaGVtYU1hcC5zaXplID4gMCkge1xyXG4gICAgICAvL+e7n+S4gFNjaGVtYVxyXG4gICAgICB0aGlzLmNvbHVtbnMgPSBbeyBmaWVsZDogJ2NvZGUnLCB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcIkVudGl0eVByb3BMaXN0XCIpLCBmaWx0ZXI6IHRydWUgfV07XHJcbiAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgICAgc2NoZW1hSXRlbSA9IHRoaXMubmV3U2NoZW1hTWFwLmdldChzY2hlbWFOYW1lKTtcclxuICAgICAgaWYgKHNjaGVtYUl0ZW0pIHtcclxuICAgICAgICBsZXQgZW50aXR5VHlwZSA9IHNjaGVtYUl0ZW0uZW50aXR5VHlwZXMuZmluZChlbnRpdHl0eXBlID0+IChlbnRpdHl0eXBlLmNvZGUgPT0gdGFibGVOYW1lICkgfHwgKGVudGl0eXR5cGUuY29kZSA9PSBcIlwiKSk7XHJcbiAgICAgICAgaWYgKCFlbnRpdHlUeXBlKSB7XHJcbiAgICAgICAgICBsZXQgZW50aXR5U2V0ID0gc2NoZW1hSXRlbS5lbnRpdHlTZXRzLmZpbmQoZW50aXR5c2V0ID0+IGVudGl0eXNldC5jb2RlID09IHRhYmxlTmFtZSk7XHJcbiAgICAgICAgICBpZiAoZW50aXR5U2V0KSB7XHJcbiAgICAgICAgICAgIGVudGl0eVR5cGUgPSBzY2hlbWFJdGVtLmVudGl0eVR5cGVzLmZpbmQoZW50aXR5dHlwZSA9PiBlbnRpdHl0eXBlLmNvZGUgPT0gZW50aXR5U2V0LmVudGl0eVR5cGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLml0ZW1zID0gWy4uLmVudGl0eVR5cGUucHJvcGVydGllc107XHJcbiAgICAgICAgZW50aXR5VHlwZS5uYXZpZ2F0aW9uUHJvcGVydGllcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgbGV0IHByb3BlcnR5ID0gbmV3IE5ld1Byb3BlcnR5O1xyXG4gICAgICAgICAgcHJvcGVydHkuY29kZSA9IGl0ZW0uY29kZTtcclxuICAgICAgICAgIHByb3BlcnR5Lm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgcHJvcGVydHkuZGF0YVR5cGUgPSBpdGVtLm5hdmlnYXRpb25UeXBlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICBwcm9wZXJ0eS5udWxsYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgcHJvcGVydHkuZGVmYXVsdFZhbHVlID0gbnVsbDtcclxuICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICB0aGlzLml0ZW1zID0gQXJyYXkuZnJvbSh0aGlzLml0ZW1zKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNlbGVjdFN0cmluZyA9IHBhcmVudE5hbWUgKyBcIi5cIiArIGVudGl0eVR5cGUubmFtZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy/ml6fnmoRTY2hlbWFcclxuICAgICAgdGhpcy5jb2x1bW5zID0gW3sgZmllbGQ6ICduYW1lJywgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJFbnRpdHlQcm9wTGlzdFwiKSwgZmlsdGVyOiB0cnVlIH1dO1xyXG4gICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICAgIHNjaGVtYUl0ZW0gPSB0aGlzLnNjaGVtYS5nZXQoc2NoZW1hTmFtZSk7XHJcbiAgICAgIGlmIChzY2hlbWFJdGVtKSB7XHJcbiAgICAgICAgbGV0IGVudGl0eVR5cGUgPSBzY2hlbWFJdGVtLmVudGl0eVR5cGVzLmZpbmQoZW50aXR5dHlwZSA9PiAoZW50aXR5dHlwZS5pZCA9PSB0YWJsZUlkICYmIGVudGl0eXR5cGUubmFtZSA9PSB0YWJsZU5hbWUpIHx8IChlbnRpdHl0eXBlLmlkID09IFwiXCIgJiYgZW50aXR5dHlwZS5uYW1lID09IHRhYmxlTmFtZSkpO1xyXG4gICAgICAgIGlmIChlbnRpdHlUeXBlKSB7XHJcbiAgICAgICAgICB0aGlzLml0ZW1zID0gWy4uLmVudGl0eVR5cGUucHJvcGVydGllc107XHJcbiAgICAgICAgICBlbnRpdHlUeXBlLm5hdmlnYXRpb25Qcm9wZXJ0aWVzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eTtcclxuICAgICAgICAgICAgcHJvcGVydHkubmFtZSA9IGl0ZW0ubmFtZTtcclxuICAgICAgICAgICAgcHJvcGVydHkudHlwZSA9IGl0ZW0udHlwZS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBwcm9wZXJ0eS5kZXNjcmlwdGlvbiA9IGl0ZW0uZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMuc2VsZWN0U3RyaW5nID0gcGFyZW50TmFtZSArIFwiLlwiICsgZW50aXR5VHlwZS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGxldCBlbnRpdHlTZXQgPSBzY2hlbWFJdGVtLmVudGl0eVNldHMuZmluZChlbnRpdHlzZXQgPT4gZW50aXR5c2V0Lm5hbWUgPT0gdGFibGVOYW1lKTtcclxuICAgICAgICAgIGlmIChlbnRpdHlTZXQpIHtcclxuICAgICAgICAgICAgbGV0IGVUeXBlID0gc2NoZW1hSXRlbS5lbnRpdHlUeXBlcy5maW5kKGVudGl0eXR5cGUgPT4gZW50aXR5dHlwZS5uYW1lID09IGVudGl0eVNldC5lbnRpdHlUeXBlKTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IFsuLi5lVHlwZS5wcm9wZXJ0aWVzXTtcclxuICAgICAgICAgICAgZVR5cGUubmF2aWdhdGlvblByb3BlcnRpZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICBsZXQgcHJvcGVydHkgPSBuZXcgUHJvcGVydHk7XHJcbiAgICAgICAgICAgICAgcHJvcGVydHkubmFtZSA9IGl0ZW0ubmFtZTtcclxuICAgICAgICAgICAgICBwcm9wZXJ0eS50eXBlID0gaXRlbS50eXBlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgcHJvcGVydHkuZGVzY3JpcHRpb24gPSBpdGVtLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0U3RyaW5nID0gcGFyZW50TmFtZSArIFwiLlwiICsgZW50aXR5U2V0Lm5hbWUgKyBcIi5bMF1cIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8v5pWw5o2u77ya5a2Q57uE5Lu25Y+M5Ye75o+S5YWlICAgICAgICAgICAgICAoZmFycmlz5Y+M5Ye75LqL5Lu277yM6LCD5pW0KVxyXG4gIG9uZGJsY2xpY2tSb3coJGV2ZW50KSB7XHJcbiAgICAvL3RoaXMuZGJjbGlja0luc2VydC5lbWl0KHRoaXMuc2VsZWN0U3RyaW5nK1wiLlwiKyRldmVudC5yb3dEYXRhLm5hbWUpO1xyXG4gICAgaWYgKHRoaXMubmV3U2NoZW1hTWFwICYmIHRoaXMubmV3U2NoZW1hTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgIHRoaXMuZGJjbGlja0luc2VydC5lbWl0KCRldmVudC5yb3dEYXRhLmRhdGEuY29kZSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2NoZW1hICYmIHRoaXMuc2NoZW1hLnNpemUgPiAwKSB7XHJcbiAgICAgIHRoaXMuZGJjbGlja0luc2VydC5lbWl0KCRldmVudC5yb3dEYXRhLmRhdGEubmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHNlbGVjdFJvd0NoYW5nZSgkZXZlbnQpIHtcclxuICAgIHRoaXMuc2VsZWN0U2NoZW1hUm93LmVtaXQoJGV2ZW50LmRhdGEpO1xyXG4gIH1cclxufVxyXG4iXX0=