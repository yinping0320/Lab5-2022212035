/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CurrentNode } from '../currentNode';
export class ExpressionSchemaGridComponent {
    constructor() {
        this.schema = new Map();
        this.selectschemachange = new EventEmitter();
        this.currentNode = new CurrentNode;
        this.cols = [
            { field: 'name', title: '纲要名称' }
        ];
        this.treedata = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.convertSchema();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.currentNode = new CurrentNode;
        this.currentNode.id = $event.node.data.id;
        this.currentNode.name = $event.node.data.name;
        this.currentNode.parentName = $event.node.parent.data.name;
        this.selectschemachange.emit(this.currentNode);
    }
    /**
     * @return {?}
     */
    convertSchema() {
        this.schema.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let treeitem = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "type": "",
                    "description": ""
                },
                children: []
            };
            treeitem.data.name = key;
            treeitem.data.type = "Schema";
            treeitem.data.description = value.description;
            value.entityTypes.forEach((/**
             * @param {?} entitytype
             * @return {?}
             */
            entitytype => {
                /** @type {?} */
                let typetree = {
                    data: {
                        "id": "",
                        "name": "",
                        "type": "",
                        "description": ""
                    },
                    children: [],
                    parent: treeitem
                };
                typetree.data.id = entitytype.id;
                typetree.data.name = entitytype.name;
                typetree.data.type = "EntityType";
                typetree.data.description = entitytype.description;
                treeitem.children.push(typetree);
            }));
            this.treedata.push(treeitem);
        }));
    }
}
ExpressionSchemaGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-schema-grid',
                template: "<farris-treetable #tt \r\n[data]=\"treedata\"\r\n[fit]=\"true\" \r\n[columns]=\"cols\" \r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[showFilterBar]=\"false\"\r\n[showHeader]=\"true\"\r\n[enableFindText]=\"true\"\r\n(cellClick)=\"selectRowChange($event)\"\r\n>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionSchemaGridComponent.ctorParameters = () => [];
ExpressionSchemaGridComponent.propDecorators = {
    schema: [{ type: Input }],
    selectschemachange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.schema;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.selectschemachange;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.currentNode;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.cols;
    /** @type {?} */
    ExpressionSchemaGridComponent.prototype.treedata;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1zY2hlbWEtZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9leHByZXNzaW9uLyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24tc2NoZW1hLWdyaWQvZXhwcmVzc2lvbi1zY2hlbWEtZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTTdDLE1BQU0sT0FBTyw2QkFBNkI7SUFReEM7UUFQUyxXQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDbEMsdUJBQWtCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsRCxnQkFBVyxHQUFhLElBQUksV0FBVyxDQUFDO1FBQ3hDLFNBQUksR0FBRztZQUNMLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDO1NBQ2hDLENBQUM7UUFDSyxhQUFRLEdBQWUsRUFBRSxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFDakIsUUFBUTtRQUNOLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7OztJQUNELGVBQWUsQ0FBQyxNQUFNO1FBRXBCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7SUFDRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7OztRQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFOztnQkFDN0IsUUFBUSxHQUFVO2dCQUNwQixJQUFJLEVBQ0o7b0JBQ0UsSUFBSSxFQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2xCLE1BQU0sRUFBRSxFQUFFO29CQUNWLE1BQU0sRUFBRSxFQUFFO29CQUNWLGFBQWEsRUFBRSxFQUFFO2lCQUNsQjtnQkFDRCxRQUFRLEVBQUUsRUFBRTthQUNiO1lBQ0QsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1lBQ3pCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztZQUM5QixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQzlDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTzs7OztZQUFDLFVBQVUsQ0FBQyxFQUFFOztvQkFDakMsUUFBUSxHQUFVO29CQUNwQixJQUFJLEVBQ0o7d0JBQ0UsSUFBSSxFQUFDLEVBQUU7d0JBQ1AsTUFBTSxFQUFFLEVBQUU7d0JBQ1YsTUFBTSxFQUFFLEVBQUU7d0JBQ1YsYUFBYSxFQUFFLEVBQUU7cUJBQ2xCO29CQUNELFFBQVEsRUFBRSxFQUFFO29CQUNaLE1BQU0sRUFBQyxRQUFRO2lCQUNoQjtnQkFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDO2dCQUNqQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7Z0JBQ2xDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7Z0JBQ25ELFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUE1REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw0QkFBNEI7Z0JBQ3RDLG9SQUFzRDs7YUFFdkQ7Ozs7O3FCQUVFLEtBQUs7aUNBQ0wsTUFBTTs7OztJQURQLCtDQUE0Qzs7SUFDNUMsMkRBQWtEOztJQUNsRCxvREFBd0M7O0lBQ3hDLDZDQUVFOztJQUNGLGlEQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2NoZW1hfSBmcm9tICcuLi9zY2hlbWEnO1xyXG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJ0BmYXJyaXMvdWktdHJlZXRhYmxlJztcclxuaW1wb3J0IHsgQ3VycmVudE5vZGUgfSBmcm9tICcuLi9jdXJyZW50Tm9kZSc7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWV4cHJlc3Npb24tc2NoZW1hLWdyaWQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9leHByZXNzaW9uLXNjaGVtYS1ncmlkLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9leHByZXNzaW9uLXNjaGVtYS1ncmlkLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblNjaGVtYUdyaWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgpIHNjaGVtYSA9IG5ldyBNYXA8c3RyaW5nLCBTY2hlbWE+KCk7XHJcbiAgQE91dHB1dCgpIHNlbGVjdHNjaGVtYWNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBjdXJyZW50Tm9kZTpDdXJyZW50Tm9kZT1uZXcgQ3VycmVudE5vZGU7XHJcbiAgY29scyA9IFtcclxuICAgIHsgZmllbGQ6ICduYW1lJywgdGl0bGU6ICfnurLopoHlkI3np7AnfVxyXG4gIF07XHJcbiAgcHVibGljIHRyZWVkYXRhOiBUcmVlTm9kZVtdID0gW107XHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuY29udmVydFNjaGVtYSgpO1xyXG4gIH1cclxuICBzZWxlY3RSb3dDaGFuZ2UoJGV2ZW50KVxyXG4gIHtcclxuICAgIHRoaXMuY3VycmVudE5vZGUgPSBuZXcgQ3VycmVudE5vZGU7XHJcbiAgICB0aGlzLmN1cnJlbnROb2RlLmlkID0gJGV2ZW50Lm5vZGUuZGF0YS5pZDtcclxuICAgIHRoaXMuY3VycmVudE5vZGUubmFtZSA9ICRldmVudC5ub2RlLmRhdGEubmFtZTtcclxuICAgIHRoaXMuY3VycmVudE5vZGUucGFyZW50TmFtZSA9ICRldmVudC5ub2RlLnBhcmVudC5kYXRhLm5hbWU7XHJcbiAgICB0aGlzLnNlbGVjdHNjaGVtYWNoYW5nZS5lbWl0KHRoaXMuY3VycmVudE5vZGUpO1xyXG4gIH1cclxuICBjb252ZXJ0U2NoZW1hKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zY2hlbWEuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICBsZXQgdHJlZWl0ZW06VHJlZU5vZGU9e1xyXG4gICAgICAgIGRhdGE6XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgXCJpZFwiOk1hdGgucmFuZG9tKCksXHJcbiAgICAgICAgICBcIm5hbWVcIjogXCJcIixcclxuICAgICAgICAgIFwidHlwZVwiOiBcIlwiLFxyXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaGlsZHJlbjogW11cclxuICAgICAgfTtcclxuICAgICAgdHJlZWl0ZW0uZGF0YS5uYW1lID0ga2V5O1xyXG4gICAgICB0cmVlaXRlbS5kYXRhLnR5cGUgPSBcIlNjaGVtYVwiO1xyXG4gICAgICB0cmVlaXRlbS5kYXRhLmRlc2NyaXB0aW9uID0gdmFsdWUuZGVzY3JpcHRpb247XHJcbiAgICAgIHZhbHVlLmVudGl0eVR5cGVzLmZvckVhY2goZW50aXR5dHlwZSA9PiB7XHJcbiAgICAgICAgbGV0IHR5cGV0cmVlOlRyZWVOb2RlPXtcclxuICAgICAgICAgIGRhdGE6XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFwiaWRcIjpcIlwiLFxyXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcclxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiXCIsXHJcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGNoaWxkcmVuOiBbXSxcclxuICAgICAgICAgIHBhcmVudDp0cmVlaXRlbVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdHlwZXRyZWUuZGF0YS5pZCA9IGVudGl0eXR5cGUuaWQ7XHJcbiAgICAgICAgdHlwZXRyZWUuZGF0YS5uYW1lID0gZW50aXR5dHlwZS5uYW1lO1xyXG4gICAgICAgIHR5cGV0cmVlLmRhdGEudHlwZSA9IFwiRW50aXR5VHlwZVwiO1xyXG4gICAgICAgIHR5cGV0cmVlLmRhdGEuZGVzY3JpcHRpb24gPSBlbnRpdHl0eXBlLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRyZWVpdGVtLmNoaWxkcmVuLnB1c2godHlwZXRyZWUpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy50cmVlZGF0YS5wdXNoKHRyZWVpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19