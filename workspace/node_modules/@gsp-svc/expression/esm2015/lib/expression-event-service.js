/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * 自定义的表达式事件服务类
 * 功能：定义表达式内部的事件发布与监听接口
 */
export class ExpressionEventService {
    constructor() {
        // Observable string sources
        this.windowClosed = new Subject();
        // Observable string streams
        this.windowClosed$ = this.windowClosed.asObservable();
        //创建Observable源
        this._expressionsource = new Subject();
        //在光标处插入表达式事件发布与订阅
        this._insertexpression = new Subject();
        this._clearexpression = new Subject();
        //函数选择焦点清除
        this._clearFuncSelect = new Subject();
        //变量选择焦点清除
        this._clearVarSelect = new Subject();
    }
    // Service message commands
    /**
     * @return {?}
     */
    closeWindow() {
        this.windowClosed.next();
    }
    //定义发布表达式实体方法
    /**
     * @param {?} expressionentity
     * @return {?}
     */
    setExpression(expressionentity) {
        this._expressionsource.next(expressionentity);
    }
    //定义获得表达式实体方法
    /**
     * @return {?}
     */
    getExpression() {
        return this._expressionsource.asObservable();
    }
    /**
     * @param {?} expression
     * @return {?}
     */
    insertExpression(expression) {
        this._insertexpression.next(expression);
    }
    /**
     * @return {?}
     */
    currentExpression() {
        return this._insertexpression.asObservable();
    }
    /**
     * @return {?}
     */
    pushclearExpression() {
        this._clearexpression.next();
    }
    /**
     * @return {?}
     */
    clearExpression() {
        return this._clearexpression.asObservable();
    }
    /**
     * @return {?}
     */
    clearFuncSelect() {
        this._clearFuncSelect.next();
    }
    /**
     * @return {?}
     */
    subClearFuncSelect() {
        return this._clearFuncSelect.asObservable();
    }
    /**
     * @return {?}
     */
    clearVarSelect() {
        this._clearFuncSelect.next();
    }
    /**
     * @return {?}
     */
    subClearVarSelect() {
        return this._clearFuncSelect.asObservable();
    }
}
ExpressionEventService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype.windowClosed;
    /** @type {?} */
    ExpressionEventService.prototype.windowClosed$;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._expressionsource;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._insertexpression;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._clearexpression;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._clearFuncSelect;
    /**
     * @type {?}
     * @private
     */
    ExpressionEventService.prototype._clearVarSelect;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1ldmVudC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1zdmMvZXhwcmVzc2lvbi8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uLWV2ZW50LXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQzs7Ozs7QUFNM0MsTUFBTSxPQUFPLHNCQUFzQjtJQURuQzs7UUFHVSxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7O1FBRTdDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7UUFNekMsc0JBQWlCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7O1FBVXJELHNCQUFpQixHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDO1FBUXJELHFCQUFnQixHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDOztRQVFwRCxxQkFBZ0IsR0FBZ0IsSUFBSSxPQUFPLEVBQU8sQ0FBQzs7UUFRbkQsb0JBQWUsR0FBZ0IsSUFBSSxPQUFPLEVBQU8sQ0FBQztJQU81RCxDQUFDOzs7OztJQTdDQyxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7Ozs7SUFJRCxhQUFhLENBQUMsZ0JBQXFCO1FBQ2pDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUVELGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUdELGdCQUFnQixDQUFDLFVBQWlCO1FBQ2hDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7OztJQUNELGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQy9DLENBQUM7Ozs7SUFHRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUM7Ozs7SUFDRCxlQUFlO1FBQ2IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7OztJQUdELGVBQWU7UUFDYixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUNELGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzs7O0lBR0QsY0FBYztRQUNaLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7O0lBQ0QsaUJBQWlCO1FBQ2YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7O1lBbkRGLFVBQVU7Ozs7Ozs7SUFHVCw4Q0FBNkM7O0lBRTdDLCtDQUFpRDs7Ozs7SUFNakQsbURBQTZEOzs7OztJQVU3RCxtREFBNkQ7Ozs7O0lBUTdELGtEQUE0RDs7Ozs7SUFRNUQsa0RBQTJEOzs7OztJQVEzRCxpREFBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuLyoqXHJcbiAqIOiHquWumuS5ieeahOihqOi+vuW8j+S6i+S7tuacjeWKoeexu1xyXG4gKiDlip/og73vvJrlrprkuYnooajovr7lvI/lhoXpg6jnmoTkuovku7blj5HluIPkuI7nm5HlkKzmjqXlj6NcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25FdmVudFNlcnZpY2Uge1xyXG4gIC8vIE9ic2VydmFibGUgc3RyaW5nIHNvdXJjZXNcclxuICBwcml2YXRlIHdpbmRvd0Nsb3NlZCA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcclxuICAvLyBPYnNlcnZhYmxlIHN0cmluZyBzdHJlYW1zXHJcbiAgd2luZG93Q2xvc2VkJCA9IHRoaXMud2luZG93Q2xvc2VkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIC8vIFNlcnZpY2UgbWVzc2FnZSBjb21tYW5kc1xyXG4gIGNsb3NlV2luZG93KCkge1xyXG4gICAgdGhpcy53aW5kb3dDbG9zZWQubmV4dCgpO1xyXG4gIH1cclxuICAvL+WIm+W7uk9ic2VydmFibGXmupBcclxuICBwcml2YXRlIF9leHByZXNzaW9uc291cmNlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgLy/lrprkuYnlj5HluIPooajovr7lvI/lrp7kvZPmlrnms5VcclxuICBzZXRFeHByZXNzaW9uKGV4cHJlc3Npb25lbnRpdHk6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5fZXhwcmVzc2lvbnNvdXJjZS5uZXh0KGV4cHJlc3Npb25lbnRpdHkpO1xyXG4gIH1cclxuICAvL+WumuS5ieiOt+W+l+ihqOi+vuW8j+WunuS9k+aWueazlVxyXG4gIGdldEV4cHJlc3Npb24oKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLl9leHByZXNzaW9uc291cmNlLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuICAvL+WcqOWFieagh+WkhOaPkuWFpeihqOi+vuW8j+S6i+S7tuWPkeW4g+S4juiuoumYhVxyXG4gIHByaXZhdGUgX2luc2VydGV4cHJlc3Npb246IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBpbnNlcnRFeHByZXNzaW9uKGV4cHJlc3Npb246c3RyaW5nKTogdm9pZHtcclxuICAgIHRoaXMuX2luc2VydGV4cHJlc3Npb24ubmV4dChleHByZXNzaW9uKTtcclxuICB9XHJcbiAgY3VycmVudEV4cHJlc3Npb24oKTpPYnNlcnZhYmxlPGFueT57XHJcbiAgICByZXR1cm4gdGhpcy5faW5zZXJ0ZXhwcmVzc2lvbi5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbiAgXHJcbiAgcHJpdmF0ZSBfY2xlYXJleHByZXNzaW9uOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgcHVzaGNsZWFyRXhwcmVzc2lvbigpOiB2b2lke1xyXG4gICAgdGhpcy5fY2xlYXJleHByZXNzaW9uLm5leHQoKTtcclxuICB9XHJcbiAgY2xlYXJFeHByZXNzaW9uKCk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFyZXhwcmVzc2lvbi5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbiAgLy/lh73mlbDpgInmi6nnhKbngrnmuIXpmaRcclxuICBwcml2YXRlIF9jbGVhckZ1bmNTZWxlY3Q6U3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIGNsZWFyRnVuY1NlbGVjdCgpOiB2b2lke1xyXG4gICAgdGhpcy5fY2xlYXJGdW5jU2VsZWN0Lm5leHQoKTtcclxuICB9XHJcbiAgc3ViQ2xlYXJGdW5jU2VsZWN0KCk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFyRnVuY1NlbGVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbiAgLy/lj5jph4/pgInmi6nnhKbngrnmuIXpmaRcclxuICBwcml2YXRlIF9jbGVhclZhclNlbGVjdDpTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgY2xlYXJWYXJTZWxlY3QoKTogdm9pZHtcclxuICAgIHRoaXMuX2NsZWFyRnVuY1NlbGVjdC5uZXh0KCk7XHJcbiAgfVxyXG4gIHN1YkNsZWFyVmFyU2VsZWN0KCk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFyRnVuY1NlbGVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcbn0iXX0=