/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { ExpressionEditorLocalePipe } from '../expression-editor-locale.pipe';
export class ExpressionSmartHelpGridComponent {
    constructor() {
        this.smartHelp = [];
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'code', width: 60, title: this.localePipe.transform("HelpCode"), filter: true },
            { field: 'name', width: 60, title: this.localePipe.transform("HelpName"), filter: true },
            { field: 'description', width: 100, title: this.localePipe.transform("HelpDescription"), filter: true },
        ];
        this.items = this.smartHelp;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        /** @type {?} */
        let entities = this.smartHelp.find((/**
         * @param {?} temp
         * @return {?}
         */
        temp => temp.code == $event.rowData.code));
        // entities.serviceInstance.showWizard().subscribe((result)=>{
        //   this.dbclickInsert.emit(result);
        // });
        this.dbclickInsert.emit(entities.serviceInstance.showWizard());
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectSchemaRow.emit($event.data);
    }
}
ExpressionSmartHelpGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-smart-help-grid',
                template: "<farris-datagrid\r\n[idField]=\"'code'\"\r\n[height]=\"268\"\r\n[width]=\"650\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionSmartHelpGridComponent.ctorParameters = () => [];
ExpressionSmartHelpGridComponent.propDecorators = {
    smartHelp: [{ type: Input }],
    selectSchemaRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionSmartHelpGridComponent.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    ExpressionSmartHelpGridComponent.prototype.localePipe;
    /** @type {?} */
    ExpressionSmartHelpGridComponent.prototype.smartHelp;
    /** @type {?} */
    ExpressionSmartHelpGridComponent.prototype.selectSchemaRow;
    /** @type {?} */
    ExpressionSmartHelpGridComponent.prototype.dbclickInsert;
    /** @type {?} */
    ExpressionSmartHelpGridComponent.prototype.items;
    /** @type {?} */
    ExpressionSmartHelpGridComponent.prototype.columns;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1zbWFydC1oZWxwLWdyaWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1zdmMvZXhwcmVzc2lvbi8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uLXNtYXJ0LWhlbHAtZ3JpZC9leHByZXNzaW9uLXNtYXJ0LWhlbHAtZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFPOUUsTUFBTSxPQUFPLGdDQUFnQztJQU0zQztRQUtTLGNBQVMsR0FBb0IsRUFBRSxDQUFDO1FBQy9CLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNyQyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0MsVUFBSyxHQUFtQixFQUFFLENBQUM7UUFDM0IsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQVJYLFdBQVc7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLDBCQUEwQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7O0lBTUYsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUMsTUFBTSxFQUFDLElBQUksRUFBQztZQUNwRixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUMsTUFBTSxFQUFDLElBQUksRUFBQztZQUNwRixFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsRUFBQyxNQUFNLEVBQUMsSUFBSSxFQUFDO1NBQ3BHLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFDRCxhQUFhLENBQUMsTUFBTTs7WUFFZCxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDO1FBQzFFLDhEQUE4RDtRQUM5RCxxQ0FBcUM7UUFDckMsTUFBTTtRQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7OztJQUNELGVBQWUsQ0FBQyxNQUFNO1FBRXBCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUF4Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQ0FBZ0M7Z0JBQzFDLG1YQUEwRDs7YUFFM0Q7Ozs7O3dCQVlFLEtBQUs7OEJBQ0wsTUFBTTs0QkFDTixNQUFNOzs7Ozs7O0lBVlAsb0RBQTBCOzs7OztJQUMxQixzREFBaUQ7O0lBT2pELHFEQUF5Qzs7SUFDekMsMkRBQStDOztJQUMvQyx5REFBNkM7O0lBQzdDLGlEQUEyQjs7SUFDM0IsbURBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNtYXJ0SGVscEVudGl0eSB9IGZyb20gJy4uL3NtYXJ0SGVscEVudGl0eSc7XHJcbmltcG9ydCB7IEV4cHJlc3Npb25FZGl0b3JMb2NhbGVQaXBlIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi1lZGl0b3ItbG9jYWxlLnBpcGUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtZXhwcmVzc2lvbi1zbWFydC1oZWxwLWdyaWQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9leHByZXNzaW9uLXNtYXJ0LWhlbHAtZ3JpZC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vZXhwcmVzc2lvbi1zbWFydC1oZWxwLWdyaWQuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uU21hcnRIZWxwR3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIC8v5a6a5LmJaTE4buagh+ivhlxyXG4gIHByaXZhdGUgbG9jYWxlSWQgOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBsb2NhbGVQaXBlIDogIEV4cHJlc3Npb25FZGl0b3JMb2NhbGVQaXBlO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgXHJcbiAgICAvL+WIneWni+WMlmkxOG7moIfor4ZcclxuICAgIHRoaXMubG9jYWxlSWQgPSAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpO1xyXG4gICAgdGhpcy5sb2NhbGVQaXBlID0gbmV3IEV4cHJlc3Npb25FZGl0b3JMb2NhbGVQaXBlKHRoaXMubG9jYWxlSWQpO1xyXG4gICB9XHJcbiAgQElucHV0KCkgc21hcnRIZWxwOiBTbWFydEhlbHBFbnRpdHlbXT1bXTtcclxuICBAT3V0cHV0KCkgc2VsZWN0U2NoZW1hUm93ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBkYmNsaWNrSW5zZXJ0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIGl0ZW1zOlNtYXJ0SGVscEVudGl0eVtdPVtdO1xyXG4gIGNvbHVtbnMgPSBbXTtcclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuY29sdW1ucyA9IFtcclxuICAgICAgeyBmaWVsZDogJ2NvZGUnLHdpZHRoOiA2MCwgdGl0bGU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJIZWxwQ29kZVwiKSxmaWx0ZXI6dHJ1ZX0sXHJcbiAgICAgIHsgZmllbGQ6ICduYW1lJyx3aWR0aDogNjAsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiSGVscE5hbWVcIiksZmlsdGVyOnRydWV9LFxyXG4gICAgICB7IGZpZWxkOiAnZGVzY3JpcHRpb24nLHdpZHRoOiAxMDAsIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiSGVscERlc2NyaXB0aW9uXCIpLGZpbHRlcjp0cnVlfSxcclxuICAgIF07XHJcbiAgICB0aGlzLml0ZW1zPXRoaXMuc21hcnRIZWxwO1xyXG4gIH1cclxuICBvbmRibGNsaWNrUm93KCRldmVudClcclxuICB7XHJcbiAgICBsZXQgZW50aXRpZXMgPSB0aGlzLnNtYXJ0SGVscC5maW5kKHRlbXAgPT4gdGVtcC5jb2RlPT0kZXZlbnQucm93RGF0YS5jb2RlKTtcclxuICAgIC8vIGVudGl0aWVzLnNlcnZpY2VJbnN0YW5jZS5zaG93V2l6YXJkKCkuc3Vic2NyaWJlKChyZXN1bHQpPT57XHJcbiAgICAvLyAgIHRoaXMuZGJjbGlja0luc2VydC5lbWl0KHJlc3VsdCk7XHJcbiAgICAvLyB9KTtcclxuICAgIHRoaXMuZGJjbGlja0luc2VydC5lbWl0KGVudGl0aWVzLnNlcnZpY2VJbnN0YW5jZS5zaG93V2l6YXJkKCkpO1xyXG4gIH1cclxuICBzZWxlY3RSb3dDaGFuZ2UoJGV2ZW50KVxyXG4gIHtcclxuICAgIHRoaXMuc2VsZWN0U2NoZW1hUm93LmVtaXQoJGV2ZW50LmRhdGEpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19