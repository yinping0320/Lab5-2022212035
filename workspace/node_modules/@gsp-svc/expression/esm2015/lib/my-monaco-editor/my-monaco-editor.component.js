/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { forwardRef, Inject, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { pick } from 'lodash-es';
import { MY_MONACO_EDITOR_CONFIG } from './editorconfig';
import { CodeEditorEventService } from './my-monaco-editor-services/monaco-editor.event.service';
import { CODE_EDITOR_EVENTS } from './my-monaco-editor-services/events';
import { ExpressionEventService } from '../expression-event-service';
/** @type {?} */
let loadedMonaco = false;
/** @type {?} */
let loadPromise;
// 自定义输入控件:1.封装ControlValueAccessor
// https://code-examples.net/zh-CN/q/2154761
/** @type {?} */
export const CODE_EDITOR_INPUT_VALUE_ACCESSOR = {
    // https://blog.csdn.net/wangdan_2013/article/details/81314959
    provide: NG_VALUE_ACCESSOR,
    //
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => MyMonacoEditorComponent)),
    //
    multi: true //
};
/** @type {?} */
const monacoConfig = {
    baseUrl: 'assets',
    defaultOptions: { scrollBeyondLastLine: false }
};
const ɵ0 = monacoConfig;
// 自定义输入控件 <-> Monaco Edtor
// 自定义输入控件:3.1 implements ControlValueAccessor 
export class MyMonacoEditorComponent {
    // 注入AngularMonacoEditorConfig，在创建Editor实例时设置config
    /**
     * @param {?} zone
     * @param {?} config
     * @param {?} codeEditorEventService
     * @param {?} eventService
     */
    constructor(zone, config, codeEditorEventService, eventService) {
        this.zone = zone;
        this.config = config;
        this.codeEditorEventService = codeEditorEventService;
        this.eventService = eventService;
        this._value = '';
        //ControlValueAccessor提供的事件回调
        this.onChangeHandler = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => {
            this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onChange,
                target: this,
                data: _
            });
        });
        //ControlValueAccessor提供的事件回调
        this.onTouchedHandler = (/**
         * @return {?}
         */
        () => {
            this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onTouched,
                target: this
            });
        });
        // 初始化自定义事件
        /** @type {?} */
        const self = this;
        codeEditorEventService.eventNames.forEach((/**
         * @param {?} name
         * @return {?}
         */
        (name) => {
            // 创建自定义事件，此处作用等效于: @Output() onInit = new EventEmitter<any>() 
            self[name] = new EventEmitter();
            /** @type {?} */
            const eventPair = pick(self, name);
            codeEditorEventService.addEvent(eventPair);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        // 默认options(this.config.defaultOptions) + 自定义options(options)
        this._options = Object.assign({}, this.config.defaultOptions, options);
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(options);
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    //在光标处插入表达式的方法
    /**
     * @param {?} insertWord
     * @return {?}
     */
    insertWord(insertWord) {
        if (insertWord && insertWord != undefined && insertWord != "") {
            /** @type {?} */
            let p = {
                lineNumber: 1,
                column: 1
            };
            if (this._editor) {
                p = this._editor.getPosition();
            }
            /** @type {?} */
            let range = new monaco.Range(p.lineNumber, p.column, p.lineNumber, p.column);
            /** @type {?} */
            let id = { major: 1, minor: 1 };
            /** @type {?} */
            let text = insertWord;
            /** @type {?} */
            let op = { identifier: id, range: range, text: text, forceMoveMarkers: true };
            this._editor.executeEdits("my-source", [op]);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then((/**
             * @return {?}
             */
            () => {
                this.initMonaco(this.options);
            }));
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            (resolve) => {
                // const baseUrl = this.config.baseUrl || '/assets';
                /** @type {?} */
                const baseUrl = '/platform/common/web/caf';
                // if (typeof((<any>window).monaco) === 'object') {
                //   resolve();
                //   return;
                // }
                /** @type {?} */
                const onGotAmdLoader = (/**
                 * @return {?}
                 */
                () => {
                    // Load monaco
                    ((/** @type {?} */ (window))).require.config({ paths: { 'vs': `${baseUrl}/monaco/vs` } });
                    ((/** @type {?} */ (window))).require(['vs/editor/editor.main'], (/**
                     * @return {?}
                     */
                    () => {
                        this.onMonacoLoad();
                        this.initMonaco(this.options);
                        resolve();
                    }));
                });
                // Load AMD loader if necessary
                if (!((/** @type {?} */ (window))).require) {
                    /** @type {?} */
                    const loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = `${baseUrl}/monaco/vs/loader.js`;
                    loaderScript.onload = onGotAmdLoader;
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            }));
        }
        //在光标处插入表达式事件订阅
        /** @type {?} */
        let temp = this;
        this.eventService.currentExpression().subscribe((/**
         * @param {?} insertexpression
         * @return {?}
         */
        (insertexpression) => {
            if (temp._editor != undefined) {
                temp.insertWord(insertexpression);
            }
        }));
        this.eventService.clearExpression().subscribe((/**
         * @return {?}
         */
        () => {
            if (temp._editor != undefined) {
                temp._editor.setValue("");
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    onMonacoLoad() {
        /** @type {?} */
        const id = "foo.json";
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
            validate: true,
            schemas: [{
                    uri: "http://myserver/foo-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            p1: {
                                enum: ["v1", "v2"]
                            },
                            p2: {
                                $ref: "http://myserver/bar-schema.json"
                            }
                        }
                    }
                }, {
                    uri: "http://myserver/bar-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            q1: {
                                enum: ["x1", "x2"]
                            }
                        }
                    }
                }]
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    }
    /**
     * @protected
     * @param {?} options
     * @return {?}
     */
    initMonaco(options) {
        debugger;
        console.log("Init the custom monaco code editor.");
        // const hasModel = !!options.model;
        /** @type {?} */
        const hasModel = false;
        // if (hasModel) {
        //   options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
        // }
        this._editor = monaco.editor.create(this._editorComponent.nativeElement, options);
        if (!hasModel) {
            this._editor.setValue(this._value);
        }
        // monaco editor -> outside component
        this._editor.onDidChangeModelContent((/**
         * @return {?}
         */
        () => this.onChangeModelContentHandler()));
        this._editor.onDidBlurEditorText((/**
         * @return {?}
         */
        () => this.onBlurEditorTextHandler()));
        // refresh layout on resize event.
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        // this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
        this.codeEditorEventService.fireEvent({
            eventName: CODE_EDITOR_EVENTS.onInit,
            target: this,
            editor: this._editor
        });
    }
    /**
     * @return {?}
     */
    onChangeModelContentHandler() {
        /** @type {?} */
        const _value = this._editor.getValue();
        // monaco editor -> outside component
        // https://github.com/JTangming/tm/issues/4 ngZone详解
        this.zone.run((/**
         * @return {?}
         */
        () => this.value = _value)); // value is not propagated to parent when executing outside zone.
        // console.log("write from the monaco:" + this._value);
    }
    /**
     * @return {?}
     */
    onBlurEditorTextHandler() {
        this.onTouchedHandler();
    }
    //get accessor
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    ;
    //set accessor including call the onchange callback
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.value) { // 注意这种写法，值得学习
            this._value = v;
        }
        this.onChangeHandler(this.value); //在属性修饰器里调用onchangeHandler方法
    }
    /**
     * @return {?}
     */
    localEditor() {
        this.writeValue('test');
    }
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value || '';
        // Fix for value change while dispose in process.
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this._editor /*&& !this.options.model*/) {
                this._editor.setValue(this._value);
                // console.log("write to the editor:" + this._value);
            }
        }));
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeHandler(this);
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedHandler();
    }
}
MyMonacoEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-my-monaco-editor',
                template: "<div class=\"editor h-100\" #codeEditor></div>",
                // 自定义输入控件:2.引入依赖服务ControlValueAccessor
                providers: [CODE_EDITOR_INPUT_VALUE_ACCESSOR,
                    CodeEditorEventService,
                    {
                        provide: MY_MONACO_EDITOR_CONFIG,
                        useValue: ɵ0
                    }
                ],
                styles: [":host{display:block;height:100%}"]
            }] }
];
/** @nocollapse */
MyMonacoEditorComponent.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [MY_MONACO_EDITOR_CONFIG,] }] },
    { type: CodeEditorEventService },
    { type: ExpressionEventService }
];
MyMonacoEditorComponent.propDecorators = {
    _editorComponent: [{ type: ViewChild, args: ['codeEditor',] }],
    onInit: [{ type: Output }],
    onChange: [{ type: Output }],
    onTouched: [{ type: Output }],
    options: [{ type: Input, args: ['options',] }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    MyMonacoEditorComponent.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype._options;
    /** @type {?} */
    MyMonacoEditorComponent.prototype._editorComponent;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onInit;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onChange;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype._value;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onChangeHandler;
    /** @type {?} */
    MyMonacoEditorComponent.prototype.onTouchedHandler;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.codeEditorEventService;
    /**
     * @type {?}
     * @private
     */
    MyMonacoEditorComponent.prototype.eventService;
    /* Skipping unhandled member: ;*/
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,