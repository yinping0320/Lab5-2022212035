/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, Injector, ComponentFactoryResolver } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { ExpressioneditorComponent } from '../expressioneditor/expressioneditor.component';
import { BsModalService } from '@farris/ui-modal';
import { ExpressionEntity } from '../expression-entity';
import { ExpressionContextEntity } from '../expression-context-entity';
import { ComboData } from './entity/combodata';
import { InjectedType } from '../injected-type';
import { NavigationType } from '../schema';
export class ComputeRuleComponent {
    /**
     * @param {?} msgSer
     * @param {?} notifyService
     * @param {?} injector
     * @param {?} modalService
     * @param {?} compFactRes
     */
    constructor(msgSer, notifyService, injector, modalService, compFactRes) {
        this.msgSer = msgSer;
        this.notifyService = notifyService;
        this.injector = injector;
        this.modalService = modalService;
        this.compFactRes = compFactRes;
        this.expr = ""; //表达式串
        //表达式串
        this.result = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
        this.contextEntity = new ExpressionContextEntity; //表达式内部上下文
        //表达式内部上下文
        this.conditions = [
            {
                computeField: '',
                fieldName: '',
                value: '',
                lbracket: '(',
                rbracket: ')',
                relation: "&&",
                operator: "=="
            }
        ];
        this.advancedModalConfig = {
            title: "高级表达式",
            width: 1060,
            height: 610,
            showButtons: true
        };
        this.title = "条件表达式";
        this.height = 350;
        this.width = 750;
        this.LeftBracketData = ["(", "((", "(((", "(((("];
        this.RighttBracketData = [")", "))", ")))", "))))"];
        this.columnSizeData = [50, 130, 70, 100, 50, 50, 50];
        this.currentCondition = null;
        this.operators = [
            {
                label: "大于",
                value: ">"
            },
            {
                label: "大于等于",
                value: ">="
            },
            {
                label: "等于",
                value: "=="
            },
            {
                label: "不等于",
                value: "!="
            },
            {
                label: "小于",
                value: "<"
            },
            {
                label: "小于等于",
                value: "<="
            },
            {
                label: "等于(字符串)",
                value: "equal"
            },
            {
                label: "不等于(字符串)",
                value: "notequal"
            },
            {
                label: "为空",
                value: "==null"
            },
            {
                label: "不为空",
                value: "!=null"
            },
            {
                label: "包含",
                value: "Contains"
            },
            {
                label: "不包含",
                value: "NotContains"
            },
            {
                label: "开头是",
                value: "StartsWith"
            },
            {
                label: "开头不是",
                value: "NotStartsWith"
            },
            {
                label: "结尾是",
                value: "EndsWith"
            },
            {
                label: "结尾不是",
                value: "NotEndsWith"
            }
        ];
        this.relationData = [
            {
                label: "并且",
                value: "&&"
            },
            {
                label: "或者",
                value: "||"
            }
        ];
        this.notifies = {
            1: { type: 'success', msg: '表达式生成！' },
            2: { type: 'warning', msg: '请确保必填项填写完整！' },
        };
        this.entities = [];
        this.newItem = {
            computeField: '',
            fieldName: '',
            value: '',
            lbracket: '(',
            rbracket: ')',
            relation: "&&",
            operator: "=="
        };
    }
    // propertyList = {
    //   columns:[{
    //             "field": "name",
    //             "title": "名称",
    //             "width": 100,
    //             "hAlign": "left",
    //             "align": "left",
    //             "formatter": null
    //         }],
    //   items:[
    //           {
    //             "id": "order",
    //             "code": "order",
    //             "name": "订单",
    //             "treeInfo": {
    //                 // "isDetail": false,
    //                 "layer": 1,
    //                 "path": "0001"
    //             }
    //           },
    //           {
    //             "id": "orderItem01",
    //             "code": "orderItem01",
    //             "name": "订单明细",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "orderItem02",
    //             "code": "orderItem02",
    //             "name": "订单明细02",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010002"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "price",
    //             "code": "price",
    //             "name": "数量",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 3,
    //                 "path": "000100020001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "orderItem02"
    //             }
    //           }
    //       ],
    //   treeInfo: {
    //         "loadDataType": "all",
    //         "layerType": "pathcode",
    //         "dataField": "treeInfo",
    //         "pathField": "path",
    //         "layerField": "layer",
    //         "isDetailField": "isDetail",
    //         "onlySelectLeaf": false,
    //         "parentField": "parentElement",
    //         "treeDataIsInit": false
    //     },
    //   displayType: "TreeList"
    // }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.contextEntity.sexpr) {
            this.conditions = (/** @type {?} */ (JSON.parse(this.contextEntity.sexpr)));
        }
        if (this.contextEntity.injectedEntities && this.contextEntity.injectedEntities.length > 0) {
            this.OninitSchemaEntity(this.contextEntity.injectedEntities, this.contextEntity.schemaMap);
        }
        this.propertyList = {
            columns: [{
                    "field": "name",
                    "title": "名称",
                    "width": 100,
                    "hAlign": "left",
                    "align": "left",
                    "formatter": null
                }],
            items: this.entities,
            treeInfo: {
                "loadDataType": "all",
                "layerType": "pathcode",
                "dataField": "treeInfo",
                "pathField": "path",
                "layerField": "layer",
                "isDetailField": "isDetail",
                "onlySelectLeaf": false,
                "parentField": "parentElement",
                "treeDataIsInit": false
            },
            displayType: "TreeList"
        };
    }
    /**
     * @param {?} index
     * @return {?}
     */
    insert(index) {
        /** @type {?} */
        const _newItem = Object.assign({}, this.newItem);
        this.conditions.splice(index + 1, 0, _newItem);
        // if (index  === 0) {
        //     this.conditions.unshift(_newItem);
        // } else {
        //     this.conditions.splice(index+1, 0, _newItem);
        // }
        this.changeConditionList();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    remove(index) {
        /** @type {?} */
        let num = index + 1;
        this.msgSer.confirm('确认删除第' + num + '行数据?').subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result) {
                if (index != 0) {
                    this.conditions.splice(index, 1);
                }
                else if (this.conditions.length > 1) {
                    this.conditions.splice(index, 1);
                }
                else {
                    this.conditions = [
                        {
                            computeField: '',
                            fieldName: '',
                            value: '',
                            lbracket: '(',
                            rbracket: ')',
                            relation: "&&",
                            operator: "=="
                        }
                    ];
                }
                this.changeConditionList();
                if (this.currentCondition) {
                    if (index === this.currentCondition.index) {
                        this.currentCondition = null;
                    }
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    onAddFilter() {
        // this.conditions = [...this.conditions, Object.assign({}, this.newCondition)];
        // this.changeConditionList();
    }
    /**
     * @return {?}
     */
    onClear() {
        // this.messagerService.question('确认要清空当前所有条件吗？', () => {
        //     this.conditions = [];
        //     this.changeConditionList();
        // });
    }
    /**
     * @return {?}
     */
    toTop() {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    toUp() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index - 1, 0, ...tempArr);
            this.currentCondition.index = index - 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    toDown() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index + 1, 0, ...tempArr);
            this.currentCondition.index = index + 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    toBottom() {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList();
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeConditionList() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selected($event) {
        // console.log($event);
        this.currentCondition = $event;
    }
    /**
     * 打开高级表达式
     * @return {?}
     */
    openAdvancedExpression() {
        /** @type {?} */
        let that = this;
        this.openAdvancedExpr().then((/**
         * @param {?} expre
         * @return {?}
         */
        expre => {
            that.result.emit(JSON.stringify(expre));
        }));
        this.closeModalEmitter.emit("close");
    }
    /**
     * @return {?}
     */
    openAdvancedExpr() {
        /** @type {?} */
        let that = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            const compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
            /** @type {?} */
            const compRef = compFactory.create(that.injector);
            compRef.instance.expressionEntity = that.contextEntity;
            compRef.instance.expressionEntity.expr = that.convertExpr(that.conditions);
            /** @type {?} */
            let dialog = that.modalService.show(compRef, {
                title: "高级表达式",
                width: 1060,
                height: 610,
                buttons: [
                    { text: '保存', cls: 'btn btn-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            compRef.instance.getExprs();
                            dialog.close();
                        }) },
                    { text: '取消', cls: 'btn btn-secondary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            dialog.close();
                        }) }
                ],
                showButtons: true
            });
            compRef.instance.result.subscribe((/**
             * @param {?} expressionContent
             * @return {?}
             */
            (expressionContent) => {
                return resolve(expressionContent);
            }));
        }));
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        let expression = new ExpressionEntity();
        expression.expr = this.convertExpr(this.conditions);
        expression.sexpr = JSON.stringify(this.conditions);
        this.result.emit(JSON.stringify(expression));
        this.notifyService[this.notifies['1'].type]({
            msg: this.notifies['1'].msg
        });
        this.closeModalEmitter.emit("close");
    }
    /**
     * 重置
     * @return {?}
     */
    reset() {
        this.conditions = [
            {
                computeField: '',
                fieldName: '',
                value: '',
                lbracket: '(',
                rbracket: ')',
                relation: "&&",
                operator: "=="
            }
        ];
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.closeModalEmitter.emit("close");
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    isSelected($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    }
    /**
     * 转化为表达式串
     * @private
     * @param {?} conditions
     * @return {?}
     */
    convertExpr(conditions) {
        this.expr = "";
        if (conditions) {
            /** @type {?} */
            let count = 0;
            /** @type {?} */
            let operator = "";
            /** @type {?} */
            let length = conditions.length;
            conditions.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                count++;
                if (count < length) {
                    if (item.operator == "==" || item.operator == "!=" || item.operator == ">" ||
                        item.operator == ">=" || item.operator == "<" || item.operator == "<=") {
                        this.expr = this.expr + item.lbracket + item.computeField + item.operator + item.value + item.rbracket + item.relation;
                    }
                    else {
                        switch (item.operator) {
                            case "equal":
                                this.expr = this.expr + item.lbracket + item.computeField + "==\"" + item.value + "\"" + item.rbracket + item.relation;
                                break;
                            case "notequal":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=\"" + item.value + "\"" + item.rbracket + item.relation;
                                break;
                            case "==null":
                                this.expr = this.expr + item.lbracket + item.computeField + "==null" + item.rbracket + item.relation;
                                break;
                            case "!=null":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=null" + item.rbracket + item.relation;
                                break;
                            case "Contains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.Contains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotContains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotContains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "StartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.StartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotStartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotStartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "EndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.EndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotEndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotEndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                        }
                    }
                }
                else {
                    if (item.operator == "==" || item.operator == "!=" || item.operator == ">" ||
                        item.operator == ">=" || item.operator == "<" || item.operator == "<=") {
                        this.expr = this.expr + item.lbracket + item.computeField + item.operator + item.value + item.rbracket;
                    }
                    else {
                        switch (item.operator) {
                            case "equal":
                                this.expr = this.expr + item.lbracket + item.computeField + "==\"" + item.value + "\"" + item.rbracket;
                                break;
                            case "notequal":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=\"" + item.value + "\"" + item.rbracket;
                                break;
                            case "==null":
                                this.expr = this.expr + item.lbracket + item.computeField + "==null" + item.rbracket;
                                break;
                            case "!=null":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=null" + item.rbracket;
                                break;
                            case "Contains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.Contains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotContains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotContains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "StartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.StartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotStartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotStartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "EndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.EndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotEndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotEndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                        }
                    }
                }
            }));
        }
        return this.expr;
    }
    //初始化Schema格式的Entity
    /**
     * @param {?} injectedEntities
     * @param {?} schema
     * @return {?}
     */
    OninitSchemaEntity(injectedEntities, schema) {
        if (injectedEntities && injectedEntities.length > 0) {
            this.entities = [];
            //实体显示禁忌表
            /** @type {?} */
            let navigatorMap = new Map();
            /** @type {?} */
            let numcount = 1;
            //解析每一个注入实体，将其转化为TreeNode
            injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            injectEntity => {
                //根据schema名称找到对应的schema
                /** @type {?} */
                let currentSchema = schema.get(injectEntity.schemaName);
                switch (injectEntity.injectedType) {
                    //注入的若为实体集
                    case InjectedType.EntitySet:
                        {
                            // //根据注入实体的名称找到对应的实体集
                            //let entitySet = currentSchema.entitySets.find(entitySet => entitySet.name == injectEntity.injectedName);
                            // //将找到的实体集转化为TreeNode
                            // entityTree = this.ConvertEntitySet(entitySet, currentSchema, navigatorMap);
                        }
                        ;
                        break;
                    //注入的若为实体类型
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            let entityType = currentSchema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            entityType => entityType.name == injectEntity.injectedName));
                            this.ConvertEntityType(entityType, "", currentSchema, navigatorMap, 1, "", numcount);
                        }
                        ;
                        break;
                }
                numcount++;
            }));
        }
    }
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ConvertEntitySet(entitySet, schema, navigatorMap) {
        // if (entitySet) {
        //   //将entityset转化为TreeNode结构用于展示
        //   let treeNode= new ComboData;
        //   treeNode.treeInfo.
        //   //将转化完成的实体集添加进禁忌表，防止循环转化
        //   navigatorMap.set(entitySet.name, InjectedType.EntitySet);
        //   //找到实体集对应的实体类型
        //   let entityType = schema.entityTypes.find(entityType => entityType.name == entitySet.entityType);
        //   //将entitytype转化为TreeNode结构用于展示
        //   this.ConvertEntityType(entityType, schema, navigatorMap).children.forEach(child => {
        //     treeNode.children.push(child);
        //   });
        //   return treeNode;
        //}
        //实体集为空或未定义则返回空
        //else return null;
    }
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} parentId
     * @param {?} schema
     * @param {?} navigatorMap
     * @param {?} layer
     * @param {?} parentPath
     * @param {?} pathNum
     * @return {?}
     */
    ConvertEntityType(entityType, parentId, schema, navigatorMap, layer, parentPath, pathNum) {
        if (entityType) {
            /** @type {?} */
            let mainTreeNode = new ComboData;
            mainTreeNode.code = entityType.name;
            mainTreeNode.name = entityType.name;
            mainTreeNode.treeInfo.layer = layer;
            mainTreeNode.treeInfo.path = parentPath + this.getPath(pathNum);
            if (parentId) {
                mainTreeNode.id = parentId + "." + entityType.name;
                mainTreeNode.parentHierarchyInfo.parentElement = parentId;
            }
            else {
                mainTreeNode.id = entityType.name;
            }
            this.entities.push(mainTreeNode);
            //将转化的entitytype添加进禁忌表
            navigatorMap.set(entityType.name + entityType.id, InjectedType.EntityType);
            //将每个属性转化为每个TreeNode
            /** @type {?} */
            let propertyNum = 1;
            entityType.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                /** @type {?} */
                let propertyTree = new ComboData;
                propertyTree.id = mainTreeNode.id + "." + property.name;
                propertyTree.code = property.name;
                propertyTree.name = property.name;
                propertyTree.treeInfo.layer = layer + 1;
                propertyTree.treeInfo.path = mainTreeNode.treeInfo.path + this.getPath(propertyNum);
                propertyNum++;
                propertyTree.parentHierarchyInfo.parentElement = mainTreeNode.id;
                this.entities.push(propertyTree);
            }));
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            navigationProperty => {
                //判断是否导航属性对应的名称在禁忌表中
                if (!(navigatorMap.get(navigationProperty.name + navigationProperty.navigationId))) {
                    if (navigationProperty.type == NavigationType.EntitySet) {
                        // //若导航属性类型为实体集
                        // let entitySet = schema.entitySets.find(entitySet => entitySet.name == navigationProperty.name);
                        // treeNode.children.push(this.ConvertEntitySet(entitySet, schema, navigatorMap));
                    } //若为实体类型
                    else if (navigationProperty.type == NavigationType.EntityType) {
                        /** @type {?} */
                        let entityType = schema.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        entitytype => entitytype.id == navigationProperty.navigationId && entitytype.name == navigationProperty.name));
                        this.ConvertEntityType(entityType, mainTreeNode.id, schema, navigatorMap, layer + 1, mainTreeNode.treeInfo.path, propertyNum + 1);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    let navigatortree = new ComboData;
                    navigatortree.id = mainTreeNode.id + "." + navigationProperty.name;
                    navigatortree.code = navigationProperty.name;
                    navigatortree.name = navigationProperty.name;
                    navigatortree.treeInfo.layer = layer + 1;
                    navigatortree.treeInfo.path = mainTreeNode.treeInfo.path + this.getPath(propertyNum);
                    navigatortree.parentHierarchyInfo.parentElement = mainTreeNode.id;
                    this.entities.push(navigatortree);
                }
                propertyNum++;
            }));
        }
        //若entitytype为空或未定义
        else
            return null;
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    getPath(path) {
        /** @type {?} */
        let num = "";
        if (path < 10) {
            num = "000" + path;
        }
        else if (10 <= path && path < 100) {
            num = "00" + path;
        }
        else if (100 <= path && path < 1000) {
            num = "0" + path;
        }
        else {
            num = path + "";
        }
        return num;
    }
}
ComputeRuleComponent.decorators = [
    { type: Component, args: [{
                selector: 'svc-compute-rule',
                template: "    <div style=\"background: #f0ffffe0;width: 100%;\">\r\n        <button type=\"button\" title=\"\u4E0A\u79FB\" class=\"k-button k-button-icon k-flat\" (click)=\"toUp()\"><span class=\"k-icon k-i-arrow-up\"></span></button>\r\n        <button type=\"button\" title=\"\u4E0B\u79FB\" class=\"k-button k-button-icon k-flat\" (click)=\"toDown()\"><span class=\"k-icon k-i-arrow-down\"></span></button>\r\n        <button type=\"button\" title=\"\u7F6E\u9876\" class=\"k-button k-button-icon k-flat\" (click)=\"toTop()\"><span class=\"k-icon k-i-arrow-end-up\"></span></button>\r\n        <button type=\"button\" title=\"\u57AB\u5E95\" class=\"k-button k-button-icon k-flat\" (click)=\"toBottom()\"><span class=\"k-icon k-i-arrow-end-down\"></span></button>\r\n    </div>\r\n    <div class=\"table-header \">\r\n        <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n            <colgroup>\r\n                <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n            </colgroup>\r\n            <thead>\r\n                <tr>\r\n                    <th align=\"center\"><b>&nbsp;\u5DE6\u62EC\u53F7</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u6570\u636E</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u6BD4\u8F83\u7B26</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u503C</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u53F3\u62EC\u53F7</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u5173\u7CFB</b></th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n        </table>\r\n    </div>\r\n    <div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n        <perfect-scrollbar [config]=\"{}\">\r\n            <table class=\"table table-bordered\">\r\n                <colgroup>\r\n                    <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n                </colgroup>\r\n                <tbody>\r\n                    <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\">\r\n                        <td>\r\n                            <select class=\"form-control filter-select\" [(ngModel)]=\"condition.lbracket\" name=\"lbracket\">\r\n                            <option *ngFor=\"let item of LeftBracketData\" [value]=\"item\">{{ item }}</option>\r\n                            </select>\r\n                        </td>\r\n              <td>\r\n                  <farris-combo-lookup\r\n                    [(ngModel)]=\"condition.computeField\"\r\n                    [idField]=\"'id'\"\r\n                    [textField]=\"'id'\"\r\n                    [displayType]=\"'LOOKUPTREELIST'\"\r\n                    [data]=\"propertyList\"\r\n                  ></farris-combo-lookup>\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\" [(ngModel)]=\"condition.operator\" name=\"operator\">\r\n                      <option *ngFor=\"let item of operators\" [value]=\"item.value\">{{item.label}}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                  <input type=\"text\" style=\"width:100%\" placeholder=\"\" class=\"k-textbox\" name=\"value\" [(ngModel)]=\"condition.value\">\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\"  [(ngModel)]=\"condition.rbracket\" name=\"rbracket\">\r\n                      <option *ngFor=\"let item of RighttBracketData\" [value]=\"item\">{{ item }}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\" [(ngModel)]=\"condition.relation\" name=\"relation\">\r\n                    <option *ngFor=\"let item of relationData\" [value]=\"item.value\">{{ item.label }}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" (click)=\"insert(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                <button type=\"button\" (click)=\"remove(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-delete\"></span></button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n      </table>\r\n  </perfect-scrollbar>\r\n</div>\r\n<div class=\"modal-footer footer\">\r\n    <a class=\"mr-auto\" href=\"javascript: void(0);\" (click)=\"openAdvancedExpression()\" > \u9AD8\u7EA7\u8868\u8FBE\u5F0F \uFF1E</a>\r\n    <button type=\"button\" class=\"btn f-btn-mr btn-primary\" (click)=\"confirm()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"reset()\">\u91CD\u7F6E</button>\r\n    <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</div>\r\n\r\n\r\n",
                styles: [".filter-select{width:100%;padding-left:0;padding-right:0}.selected{background:#c2e4ff}.footer{position:absolute;bottom:0;left:0;right:0;justify-content:flex-start}"]
            }] }
];
/** @nocollapse */
ComputeRuleComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver }
];
ComputeRuleComponent.propDecorators = {
    result: [{ type: Output }],
    closeModalEmitter: [{ type: Output }],
    contextEntity: [{ type: Input }],
    conditions: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ComputeRuleComponent.prototype.expr;
    /** @type {?} */
    ComputeRuleComponent.prototype.result;
    /** @type {?} */
    ComputeRuleComponent.prototype.closeModalEmitter;
    /** @type {?} */
    ComputeRuleComponent.prototype.contextEntity;
    /** @type {?} */
    ComputeRuleComponent.prototype.conditions;
    /** @type {?} */
    ComputeRuleComponent.prototype.advancedModalConfig;
    /** @type {?} */
    ComputeRuleComponent.prototype.title;
    /** @type {?} */
    ComputeRuleComponent.prototype.height;
    /** @type {?} */
    ComputeRuleComponent.prototype.width;
    /** @type {?} */
    ComputeRuleComponent.prototype.LeftBracketData;
    /** @type {?} */
    ComputeRuleComponent.prototype.RighttBracketData;
    /** @type {?} */
    ComputeRuleComponent.prototype.columnSizeData;
    /** @type {?} */
    ComputeRuleComponent.prototype.currentCondition;
    /** @type {?} */
    ComputeRuleComponent.prototype.operators;
    /** @type {?} */
    ComputeRuleComponent.prototype.relationData;
    /**
     * @type {?}
     * @private
     */
    ComputeRuleComponent.prototype.notifies;
    /** @type {?} */
    ComputeRuleComponent.prototype.entities;
    /** @type {?} */
    ComputeRuleComponent.prototype.propertyList;
    /**
     * @type {?}
     * @private
     */
    ComputeRuleComponent.prototype.newItem;
    /**
     * @type {?}
     * @private
     */
    ComputeRuleComponent.prototype.msgSer;
    /**
     * @type {?}
     * @private
     */
    ComputeRuleComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ComputeRuleComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ComputeRuleComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ComputeRuleComponent.prototype.compFactRes;
}
//# sourceMappingURL=data:application/json;base64,