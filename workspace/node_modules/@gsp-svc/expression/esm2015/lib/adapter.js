/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { GSPElementDataType } from "@gsp-bef/gsp-cm-metadata";
import { EntityType, Property, NavigationProperty, NavigationType } from "./schema";
import { NewDataType, NewEntityType, NewNavigationProperty, NewNavigationType, NewProperty } from "./i18n/NewSchema";
/**
 * 适配器类(目前支持CDT、CO)
 * 功能：将CDT、CO转化为内部Schema中的EntityType
 */
export class Adapter {
    /**
     * 将CDT转化为entityType方法
     * @param {?} gspCDT 待转化的CDT
     * @return {?}
     */
    convertCDT(gspCDT) {
        /** @type {?} */
        let entityType = new EntityType();
        entityType.name = gspCDT.Code;
        entityType.key = null;
        entityType.id = gspCDT.Code;
        entityType.description = gspCDT.Name;
        gspCDT.ContainElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let property = new Property();
            property.name = element.Code;
            property.type = element.MDataType;
            property.description = element.Name;
            entityType.properties.push(property);
        }));
        entityType.navigationProperties = [];
        return entityType;
    }
    /**
     * 将CO转化为entityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?}
     */
    convertCO(gspCO) {
        /** @type {?} */
        let entityTypes = [];
        entityTypes.push(this.adaptCO(gspCO, entityTypes));
        return entityTypes;
    }
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    adaptCO(gspCO, entityTypes) {
        /** @type {?} */
        let entityType = new EntityType();
        entityType.name = gspCO.Code;
        entityType.key = null;
        entityType.id = gspCO.Code;
        entityType.description = gspCO.Name;
        //每个属性转化
        if (gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let property = new Property();
                property.name = element.Code;
                property.type = element.MDataType;
                property.description = element.Name;
                entityType.properties.push(property);
            }));
        }
        ;
        //子表转化为导航属性
        if (gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            childObject => {
                /** @type {?} */
                let naviproperty = new NavigationProperty();
                naviproperty.description = childObject.Name;
                naviproperty.name = childObject.Code + "s";
                naviproperty.navigationId = childObject.Code + "s";
                naviproperty.type = NavigationType.EntitySet;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(this.adaptCO(childObject, entityTypes));
            }));
        }
        ;
        return entityType;
    }
    //======================将CO转换为NewEntityType===============================================
    /**
     * \@description 将CDT转换为NewEntityType
     * @param {?} gspCDT 待转换CDT
     * @return {?} NewEntityType
     */
    convertCDTOfNewSchema(gspCDT) {
        /** @type {?} */
        let entityType = new NewEntityType();
        entityType.code = gspCDT.Code;
        entityType.name = gspCDT.Name;
        gspCDT.ContainElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let property = new NewProperty();
            property.code = element.Code;
            property.name = element.Name;
            property.dataType = this.convertMDataType(element.MDataType);
            entityType.properties.push(property);
        }));
        entityType.navigationProperties = [];
        return entityType;
    }
    /**
     * \@description 将CO转化为newEntityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?} NewEntityType[] NewEntityType[]
     */
    convertCOOfNewSchema(gspCO) {
        /** @type {?} */
        let entityTypes = [];
        entityTypes.push(this.adaptCOOfNewSchema(gspCO, entityTypes));
        return entityTypes;
    }
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    adaptCOOfNewSchema(gspCO, entityTypes) {
        /** @type {?} */
        let entityType = new NewEntityType();
        entityType.code = gspCO.Code;
        entityType.name = gspCO.Name;
        //每个属性转化
        if (gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let property = new NewProperty();
                property.code = element.Code;
                property.name = element.Name;
                property.dataType = this.convertMDataType(element.MDataType);
                entityType.properties.push(property);
            }));
        }
        ;
        //子表转化为导航属性
        if (gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            childObject => {
                /** @type {?} */
                let naviproperty = new NewNavigationProperty();
                naviproperty.code = childObject.Code + "s";
                naviproperty.name = childObject.Name;
                naviproperty.navigationName = childObject.Code;
                naviproperty.navigationType = NewNavigationType.EntitySet;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(this.adaptCOOfNewSchema(childObject, entityTypes));
            }));
        }
        ;
        return entityType;
    }
    /**
     * \@description （字段类型转换）BE类型转换为Schema类型
     * @private
     * @param {?} type BE类型
     * @return {?} NewDataType
     */
    convertMDataType(type) {
        switch (type) {
            case GSPElementDataType.String:
                return NewDataType.String;
            case GSPElementDataType.Integer:
                return NewDataType.Integer;
            case GSPElementDataType.Binary:
                return NewDataType.Byte;
            case GSPElementDataType.Boolean:
                return NewDataType.Boolean;
            case GSPElementDataType.Date:
                return NewDataType.Date;
            case GSPElementDataType.DateTime:
                return NewDataType.DateTime;
            case GSPElementDataType.Decimal:
                return NewDataType.Decimal;
            case GSPElementDataType.Text:
                return NewDataType.String;
            default:
                return NewDataType.String;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,