import { Subject } from 'rxjs';
import { GSPElementDataType } from '@gsp-bef/gsp-cm-metadata';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { DataTableModule } from '@farris/ui-datatable';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { ComboService } from '@farris/ui-combo-list';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { assign, pick } from 'lodash-es';
import { SplitterModule } from '@farris/ui-splitter';
import { FarrisTabsModule } from '@farris/ui-tabs';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { DatagridModule } from '@farris/ui-datagrid';
import { DatagridFilterRowModule } from '@farris/ui-datagrid-filter';
import { TreeTableModule } from '@farris/ui-treetable';
import _ from 'lodash';
import { DialogsModule } from '@progress/kendo-angular-dialog';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { InputsModule } from '@progress/kendo-angular-inputs';
import { GridModule } from '@progress/kendo-angular-grid';
import { Injectable, Pipe, Inject, LOCALE_ID, Component, Input, Output, EventEmitter, Injector, Optional, ComponentFactoryResolver, InjectionToken, ViewChild, forwardRef, NgZone, NgModule, ApplicationRef } from '@angular/core';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import InputStream from 'antlr4/InputStream';
import CommonTokenStream from 'antlr4/CommonTokenStream';
import JavaScriptLexer from 'JavaScriptLexer';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 自定义的表达式事件服务类
 * 功能：定义表达式内部的事件发布与监听接口
 */
class ExpressionEventService {
    constructor() {
        // Observable string sources
        this.windowClosed = new Subject();
        // Observable string streams
        this.windowClosed$ = this.windowClosed.asObservable();
        //创建Observable源
        this._expressionsource = new Subject();
        //在光标处插入表达式事件发布与订阅
        this._insertexpression = new Subject();
        this._clearexpression = new Subject();
        //函数选择焦点清除
        this._clearFuncSelect = new Subject();
        //变量选择焦点清除
        this._clearVarSelect = new Subject();
    }
    // Service message commands
    /**
     * @return {?}
     */
    closeWindow() {
        this.windowClosed.next();
    }
    //定义发布表达式实体方法
    /**
     * @param {?} expressionentity
     * @return {?}
     */
    setExpression(expressionentity) {
        this._expressionsource.next(expressionentity);
    }
    //定义获得表达式实体方法
    /**
     * @return {?}
     */
    getExpression() {
        return this._expressionsource.asObservable();
    }
    /**
     * @param {?} expression
     * @return {?}
     */
    insertExpression(expression) {
        this._insertexpression.next(expression);
    }
    /**
     * @return {?}
     */
    currentExpression() {
        return this._insertexpression.asObservable();
    }
    /**
     * @return {?}
     */
    pushclearExpression() {
        this._clearexpression.next();
    }
    /**
     * @return {?}
     */
    clearExpression() {
        return this._clearexpression.asObservable();
    }
    /**
     * @return {?}
     */
    clearFuncSelect() {
        this._clearFuncSelect.next();
    }
    /**
     * @return {?}
     */
    subClearFuncSelect() {
        return this._clearFuncSelect.asObservable();
    }
    /**
     * @return {?}
     */
    clearVarSelect() {
        this._clearFuncSelect.next();
    }
    /**
     * @return {?}
     */
    subClearVarSelect() {
        return this._clearFuncSelect.asObservable();
    }
}
ExpressionEventService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const VarType = {
    Session: 0,
    Context: 1,
};
VarType[VarType.Session] = 'Session';
VarType[VarType.Context] = 'Context';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 内部上下文实体
 * \@property sessionEntities 预置的系统变量列表
 * \@property contextEntities 预置的上下文变量列表
 * \@property funcEntities 预置的函数列表
 * \@property expr 预置的表达式文本
 * \@property schemaMap 预置schema键值对
 * \@property newSchemaMap 预置newSchema键值对
 * \@property injectedEntities 注入实体对象
 * \@property smartHelpEntities 注入帮助
 */
class ExpressionContextEntity {
    constructor() {
        this.sessionEntities = [];
        this.contextEntities = [];
        this.funcEntities = [];
        this.expr = null;
        this.sexpr = "";
        this.schemaMap = new Map();
        this.newSchemaMap = new Map();
        this.injectedEntities = [];
        this.smartHelpEntities = [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * schema实体类
 * \@property entitySets 实体集集合
 * \@property entityTypes 实体类型集合
 * \@property description schema自描述
 * @author linchang 2018/12/7
 */
class Schema {
    constructor() {
        this.entitySets = [];
        this.entityTypes = [];
    }
}
/**
 * 实体类型
 * \@property id 唯一标识
 * \@property name 语义化名称
 * \@property key 主键
 * \@property properties 属性列表信息
 * \@property navigationProperties 导航属性列表
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
class EntityType {
    constructor() {
        this.properties = [];
        this.navigationProperties = [];
    }
}
/**
 * 实体集合
 * \@property name 实体集名称
 * \@property entityType 对应的实体类型名
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
class EntitySet {
}
/**
 * 实体类型中的属性
 * \@property name 属性名
 * \@property type 属性类型
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
class Property {
}
/**
 * 导航属性--关联相对应实体类型或者实体集
 * \@property name 导航属性名
 * \@property type 导航属性类型
 * \@property navigationId 导航值
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
class NavigationProperty {
}
/** @enum {number} */
const NavigationType = {
    EntitySet: 0,
    EntityType: 1,
};
NavigationType[NavigationType.EntitySet] = 'EntitySet';
NavigationType[NavigationType.EntityType] = 'EntityType';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 输出结果表达式实体类
 * \@property expr Json序列化后的表达式串
 */
class ExpressionEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CurrentNode {
    constructor() {
        this.nodeType = "";
        this.description = "";
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 注入实体信息
 * \@property name 注入对象语义化名
 * \@property schemaName 注入对象schemaName，根据schemaName找到Schema
 * \@property injectedType 注入对象类型(EntitySet,EntityType)
 * \@property injectedName 注入实体的名称，对应EntityType.code
 * @author linchang 2018/12/7
 */
class InjectedEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const InjectedType = {
    EntitySet: 0,
    EntityType: 1,
};
InjectedType[InjectedType.EntitySet] = 'EntitySet';
InjectedType[InjectedType.EntityType] = 'EntityType';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description 统一结构Schema
 * @param name 名称
 * @param description 描述
 * @param entitySets 实体集
 * @param entityTypes 实体类型
 * @param associations 关联集合
 * \@date 2021-04-14
 * @author Wenxing Man
 */
class NewSchema {
    constructor() {
        this.entitySets = [];
        this.entityTypes = [];
        this.associations = [];
    }
}
/**
 * @param code 实体集名
 * @param name 实体集语义化名
 * @param entityType 对应EntityType的id
 * \@date 2021-04-14
 * @author Wenxing Man
 */
class NewEntitySet {
}
/**
 * @param code 属性名
 * @param name 实体语义化名
 * @param master  是否是主实体
 * @param properties   属性集合
 * @param keys  主键集合
 * @param navigationPorperties 导航集合属性
 * \@date 2021-04-14
 * @author Wenxing Man
 */
class NewEntityType {
    constructor() {
        this.properties = [];
        this.keys = [];
        this.navigationProperties = [];
    }
}
/**
 * @param code 属性名
 * @param name 属性语义化名
 * @param dataType 属性值类型
 * @param nullable 是否允许为空值
 * @param dafaultValue 属性默认值
 * \@date 2021-04-14
 * @author Wenxing Man
 */
class NewProperty {
}
/**
 * @param code 导航属性名称
 * @param name 导航属性语义化名
 * @param navigationName 导航对象的名称
 * @param navigationType 属性类型(EntitySet,EntityType)
 * @param relationShip 关联的对象
 * \@date 2021-04-14
 * @author Wenxing Man
 */
class NewNavigationProperty {
}
/** @enum {number} */
const NewDataType = {
    String: 0,
    Byte: 1,
    Boolean: 2,
    Date: 3,
    DateTime: 4,
    Decimal: 5,
    Integer: 6,
};
NewDataType[NewDataType.String] = 'String';
NewDataType[NewDataType.Byte] = 'Byte';
NewDataType[NewDataType.Boolean] = 'Boolean';
NewDataType[NewDataType.Date] = 'Date';
NewDataType[NewDataType.DateTime] = 'DateTime';
NewDataType[NewDataType.Decimal] = 'Decimal';
NewDataType[NewDataType.Integer] = 'Integer';
/** @enum {string} */
const NewNavigationType = {
    EntitySet: "EntitySet",
    EntityType: "EntityType",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 适配器类(目前支持CDT、CO)
 * 功能：将CDT、CO转化为内部Schema中的EntityType
 */
class Adapter {
    /**
     * 将CDT转化为entityType方法
     * @param {?} gspCDT 待转化的CDT
     * @return {?}
     */
    convertCDT(gspCDT) {
        /** @type {?} */
        let entityType = new EntityType();
        entityType.name = gspCDT.Code;
        entityType.key = null;
        entityType.id = gspCDT.Code;
        entityType.description = gspCDT.Name;
        gspCDT.ContainElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let property = new Property();
            property.name = element.Code;
            property.type = element.MDataType;
            property.description = element.Name;
            entityType.properties.push(property);
        }));
        entityType.navigationProperties = [];
        return entityType;
    }
    /**
     * 将CO转化为entityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?}
     */
    convertCO(gspCO) {
        /** @type {?} */
        let entityTypes = [];
        entityTypes.push(this.adaptCO(gspCO, entityTypes));
        return entityTypes;
    }
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    adaptCO(gspCO, entityTypes) {
        /** @type {?} */
        let entityType = new EntityType();
        entityType.name = gspCO.Code;
        entityType.key = null;
        entityType.id = gspCO.Code;
        entityType.description = gspCO.Name;
        //每个属性转化
        if (gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let property = new Property();
                property.name = element.Code;
                property.type = element.MDataType;
                property.description = element.Name;
                entityType.properties.push(property);
            }));
        }
        //子表转化为导航属性
        if (gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            childObject => {
                /** @type {?} */
                let naviproperty = new NavigationProperty();
                naviproperty.description = childObject.Name;
                naviproperty.name = childObject.Code + "s";
                naviproperty.navigationId = childObject.Code + "s";
                naviproperty.type = NavigationType.EntitySet;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(this.adaptCO(childObject, entityTypes));
            }));
        }
        return entityType;
    }
    //======================将CO转换为NewEntityType===============================================
    /**
     * \@description 将CDT转换为NewEntityType
     * @param {?} gspCDT 待转换CDT
     * @return {?} NewEntityType
     */
    convertCDTOfNewSchema(gspCDT) {
        /** @type {?} */
        let entityType = new NewEntityType();
        entityType.code = gspCDT.Code;
        entityType.name = gspCDT.Name;
        gspCDT.ContainElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let property = new NewProperty();
            property.code = element.Code;
            property.name = element.Name;
            property.dataType = this.convertMDataType(element.MDataType);
            entityType.properties.push(property);
        }));
        entityType.navigationProperties = [];
        return entityType;
    }
    /**
     * \@description 将CO转化为newEntityType方法
     * @param {?} gspCO 待转化的CO
     * @return {?} NewEntityType[] NewEntityType[]
     */
    convertCOOfNewSchema(gspCO) {
        /** @type {?} */
        let entityTypes = [];
        entityTypes.push(this.adaptCOOfNewSchema(gspCO, entityTypes));
        return entityTypes;
    }
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    adaptCOOfNewSchema(gspCO, entityTypes) {
        /** @type {?} */
        let entityType = new NewEntityType();
        entityType.code = gspCO.Code;
        entityType.name = gspCO.Name;
        //每个属性转化
        if (gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let property = new NewProperty();
                property.code = element.Code;
                property.name = element.Name;
                property.dataType = this.convertMDataType(element.MDataType);
                entityType.properties.push(property);
            }));
        }
        //子表转化为导航属性
        if (gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            childObject => {
                /** @type {?} */
                let naviproperty = new NewNavigationProperty();
                naviproperty.code = childObject.Code + "s";
                naviproperty.name = childObject.Name;
                naviproperty.navigationName = childObject.Code;
                naviproperty.navigationType = NewNavigationType.EntitySet;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(this.adaptCOOfNewSchema(childObject, entityTypes));
            }));
        }
        return entityType;
    }
    /**
     * \@description （字段类型转换）BE类型转换为Schema类型
     * @private
     * @param {?} type BE类型
     * @return {?} NewDataType
     */
    convertMDataType(type) {
        switch (type) {
            case GSPElementDataType.String:
                return NewDataType.String;
            case GSPElementDataType.Integer:
                return NewDataType.Integer;
            case GSPElementDataType.Binary:
                return NewDataType.Byte;
            case GSPElementDataType.Boolean:
                return NewDataType.Boolean;
            case GSPElementDataType.Date:
                return NewDataType.Date;
            case GSPElementDataType.DateTime:
                return NewDataType.DateTime;
            case GSPElementDataType.Decimal:
                return NewDataType.Decimal;
            case GSPElementDataType.Text:
                return NewDataType.String;
            default:
                return NewDataType.String;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FrameI18nResources = {
    "zh-CHS": {
        "ExpressionTitle": "高级表达式",
        "ExpressionSave": "保存",
        "ExpressionCancel": "取消",
        "CheckFront": "校验",
        "ResetFront": "重置",
        "HelpFront": "帮助",
        "ImportFront": "导入",
        "Advanced": "高级函数",
        "String": "字符串",
        "Aggregate": "聚合",
        "Estimate": "判断",
        "DateTime": "日期时间",
        "Translate": "类型转换",
        "Analytical": "解析",
        "Math": "数学",
        "Extend": "扩展",
        "FunctionSemanticName": "语义化名称",
        "FunctionName": "函数名称",
        "FunctionParameter": "参数",
        "Variable": "变量",
        "VariableSessionValue": "会话变量",
        "VariableContextParameter": "上下文变量",
        "VariableName": "名称",
        "VariableSemanticNameValue": "语义化名称",
        "Entity": "数据",
        "EntityList": "实体列表",
        "EntityName": "名称",
        "EntityType": "类型",
        "EntityPropList": "属性列表",
        "Help": "帮助",
        "HelpCode": "编号",
        "HelpName": "名称",
        "HelpDescription": "说明",
        "SaveButton": "保存",
        "CancelButton": "取消",
        "FunctionDescription": "函数说明：",
        "VarDescription": "变量说明：",
        "CurrentProp": "当前属性：",
        "CurrentChosedProp": "当前选择属性："
    },
    "en": {
        "ExpressionTitle": "Advanced Expression",
        "ExpressionSave": "Save",
        "ExpressionCancel": "Cancel",
        "CheckFront": "Check",
        "ResetFront": "Reset",
        "HelpFront": "Help",
        "ImportFront": "Import",
        "Advanced": "Advanced",
        "String": "String",
        "Aggregate": "Aggregate",
        "Estimate": "Estimate",
        "DateTime": "DateTime",
        "Translate": "Translate",
        "Analytical": "Analytical",
        "Math": "Math",
        "Extend": "Extend",
        "FunctionSemanticName": "SemanticName",
        "FunctionName": "FunctionName",
        "FunctionParameter": "Parameter",
        "Variable": "Variable",
        "VariableSessionValue": "SessionValue",
        "VariableContextParameter": "ContextParameter",
        "VariableName": "Name",
        "VariableSemanticNameValue": "SemanticName",
        "Entity": "Entity",
        "EntityList": "EntityList",
        "EntityName": "Name",
        "EntityType": "Type",
        "EntityPropList": "PropertyList",
        "Help": "Help",
        "HelpCode": "Code",
        "HelpName": "Name",
        "HelpDescription": "Description",
        "SaveButton": "Save",
        "CancelButton": "Cancel",
        "FunctionDescription": "Function Description：",
        "VarDescription": "Var Description：",
        "CurrentProp": "Current Property：",
        "CurrentChosedProp": "Currently Selected Property："
    },
    "zh-CHT": {
        "ExpressionTitle": "高級表達式",
        "ExpressionSave": "保存",
        "ExpressionCancel": "取消",
        "CheckFront": "校驗",
        "ResetFront": "重置",
        "HelpFront": "幫助",
        "ImportFront": "導入",
        "Advanced": "高級函數",
        "String": "字符串",
        "Aggregate": "聚合",
        "Estimate": "判斷",
        "DateTime": "日期時間",
        "Translate": "類型轉換",
        "Analytical": "解析",
        "Math": "數學",
        "Extend": "擴展",
        "FunctionSemanticName": "語義化名稱",
        "FunctionName": "函數名稱",
        "FunctionParameter": "參數",
        "Variable": "變量",
        "VariableSessionValue": "會話變量",
        "VariableContextParameter": "上下文變量",
        "VariableName": "名稱",
        "VariableSemanticNameValue": "語義化名稱",
        "Entity": "數據",
        "EntityList": "實體列表",
        "EntityName": "名稱",
        "EntityType": "類型",
        "EntityPropList": "屬性列表",
        "Help": "幫助",
        "HelpCode": "編號",
        "HelpName": "名稱",
        "HelpDescription": "說明",
        "SaveButton": "保存",
        "CancelButton": "取消",
        "FunctionDescription": "函數說明：",
        "VarDescription": "變量說明：",
        "CurrentProp": "當前屬性：",
        "CurrentChosedProp": "當前選擇屬性："
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionEditorLocalePipe {
    /**
     * @param {?} localeId
     */
    constructor(localeId) {
        this.defaultLang = "zh-CHS";
        localeId = localStorage.getItem('languageCode');
        this.langCode = localeId || this.defaultLang;
        this.lang = FrameI18nResources[this.langCode] || FrameI18nResources[this.defaultLang];
    }
    /**
     * @param {?} name
     * @return {?}
     */
    transform(name) {
        return this.lang[name] || name;
    }
}
ExpressionEditorLocalePipe.decorators = [
    { type: Pipe, args: [{ name: 'locale' },] }
];
/** @nocollapse */
ExpressionEditorLocalePipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FunctionI18nResources = {
    "zh-CHS": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : 判断条件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : 判断条件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for循环",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "返回操作",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "变量定义",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "正确",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "错误",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "长度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中检索子字符串，子字符串从指定的字符位置开始且具有指定的长度\n【original】：源字符串\n【start】：起始位置(从0开始)\n【length】：长度\n【返回值类型】：字符串(System.String)\n【示例】：StringSubstring("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "长度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中检索子字符串，子字符串从指定的字符位置开始且具有指定的长度\n【original】：源字符串\n【start】：起始位置(从0开始)\n【length】：长度\n【返回值类型】：字符串(System.String)\n【示例】：SubString("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定字符串的长度\n【original】：源字符串\n【返回值类型】：数值(System.Int32)\n【示例】：StringLength("语义化表达式")\n【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定字符串的长度\n【original】：源字符串\n【返回值类型】：数值(System.Int32)\n【示例】：Length("语义化表达式")\n【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "是否包含",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断源字符串中是否包含目标字符串\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：System.Boolean\n【示例】：Contains(salesorder.code,"表达式")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "开头是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断源字符串是否以目标字符串开头\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：System.Boolean\n【示例】：StartsWith(salesorder.code,"子单位")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "结尾是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断源字符串是否以目标字符串结尾\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：System.Boolean\n【示例】：EndsWith(salesorder.code,\"子单位\")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串中的"被替换值"替换为"替换值"\n【original】：源字符串\n【oldValue】：被替换值\n【newValue】：替换值\n【返回值类型】：字符串(System.String)\n【示例】：StringReplace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串中的"被替换值"替换为"替换值"\n【original】：源字符串\n【oldValue】：被替换值\n【newValue】：替换值\n【返回值类型】：字符串(System.String)\n【示例】：Replace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为大写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为大写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：ToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为小写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串转换为小写\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：ToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到第一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：StringIndexOf("12001234012","01")\n【返回值】：3\n【示例】：StringIndexOf("12002323","34")\n【返回值】：-1\n【示例】：StringIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到第一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【target】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：IndexOf("12001234012","01")\n【返回值】：3\n【示例】：IndexOf("12002323","34")\n【返回值】：-1\n【示例】：IndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到最后一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【value】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：StringLastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：StringLastIndexOf("12002323","34")\n【返回值】：-1\n【示例】：StringLastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到最后一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【value】：目标字符串\n【返回值类型】：数值(System.Int32)\n【示例】：LastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：LastIndexOf("12002323","34")\n【返回值】：-1\n【示例】：LastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringTrimStart("    ABC")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：TrimStart("    ABC")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringTrimEnd("ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：TrimEnd("ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：StringTrim("    ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头尾部空格\n【original】：源字符串\n【返回值类型】：字符串(System.String)\n【示例】：Trim("    ABC    ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "唯一标识符",
            "params": [],
            "description": `【功能】：获取唯一标识符Guid\n【返回值类型】：字符串(System.String)\n【示例】：CreateGuid()\n【返回值】："7722A793-14DF-49CD-B7E7-DF4987YYD2"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将若干字符串拼接成一个新字符串，最多支持10个字符串拼接，最少2个；编辑器中默认插入两个，多个字符串可手动添加\n【返回值类型】：字符串(System.String)\n【示例】：StringAdd("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：将若干字符串拼接成一个新字符串，最多支持10个字符串拼接，最少2个；编辑器中默认插入两个，多个字符串可手动添加\n【返回值类型】：字符串(System.String)\n【示例】：Add("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "按属性求和",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一属性的和\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名;\n【返回值类型】：数值(System.Double)\n【示例】：SumByProp("Order.OrderItems","Quantity")"`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "列行数",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计指定字段所在表的记录数\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如：Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Int32);\n【示例】：CountByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "列平均值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一数值列的平均值\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Double)\n【示例】：AvgByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "列最大值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一数值列的最大值\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Double)\n【示例】：MaxByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "列最小值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "实体集合属性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "类型属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：统计某一数值列的最小值\n【chainedPropName】：对应实体集合的属性名,链式形式组织在一起的属性名,例如:Order.OrderItems\n【propertyName】：类型属性名\n【返回值类型】：数值(System.Double)\n【示例】：MinByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "是空值",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判断指定的对象是否为空值(null)\n【obj】：要检测的对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNull("语义化表达式")\n【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "是空串",
            "params": [
                {
                    "key": "obj",
                    "name": "待判断字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判断指定的字符串是否为null、空还是仅有空格组成\n【obj】：要判断的字符串\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNullOrWhiteSpace("语义化表达式")\n【返回值】：False\n【示例】：IsNullOrWhiteSpace(null)\n【返回值】：True\n【示例】：\nIsNullOrWhiteSpace(" ")【返回值】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "非数字",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判断指定的对象是否可以转换成数字(System.Double)\n【obj】：要检测的对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNaN("语义化表达式")【返回值】：True\n【示例】：IsNaN(12.3)【返回值】：False\n【示例】：\nIsNaN("123")【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "是数字",
            "params": [
                {
                    "key": "obj",
                    "name": "检测对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判断指定的对象是否可以转换成数字(System.Double)\n【obj】：要检测的对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：IsNumber(\"语义化表达式\")【返回值】：False\n【示例】：IsNumber(12.3)【返回值】：True\n【示例】：\nIsNumber("123")【返回值】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "有无等于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在等于匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：IsExistRecord("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "有无大于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在大于匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListGreaterThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "有无小于匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在小于匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListLessThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "有无开头是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在开头是匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListStartWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "有无结尾是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式名称判断该表的指定字段集合中是否存在结尾是匹配字符的值\n【chainedPropName】链式名称\n【propertyName】属性名\n【match】匹配值\n【返回值类型】：对象(System.Boolean)\n【示例】：ListEndWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "增加指定天数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加天数",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期时间上增加指定的天数\n【date】：日期时间\n【value】：增加天数\n【返回值类型】：日期时间(System.DateTime)\n【示例】：DateTimeAddDays("2019-01-30T10:00:00+08:00",2)\n【返回值】:2019-02-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "增加指定年数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加年数",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期时间上增加指定的年数\n【date】：日期时间\n【value】：增加年数\n【返回值类型】：日期时间(System.DateTime)\n【示例】：DateTimeAddYears("2019-01-30T10:00:00+08:00",2)\n【返回值】:2021-01-30T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "增加指定月数",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加月数",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期时间上增加指定的月数\n【date】：日期时间\n【value】：增加月数\n【返回值类型】：日期时间(System.DateTime)\n【示例】：DateTimeAddMonths("2019-01-30T10:00:00+08:00",1)\n【返回值】:2019-02-28T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "获取指定日期时间所在月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定日期时间值所在月的第一天的日期\n【date】：日期时间\n【返回值类型】：日期时间(System.DateTime)\n【示例】：GetFirstDayOfMonth("2019-01-30T10:00:00+08:00")\n【返回值】:2019-01-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "获取指定日期时间所在月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定日期时间值所在月的最后一天的日期\n【date】：日期时间\n【返回值类型】：日期时间(System.DateTime)\n【示例】：GetLastDayOfMonth("2019-01-30T10:00:00+08:00")\n【返回值】:2019-01-31T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "获取当前日期时间",
            "params": [],
            "description": `【功能】：获取当前的日期时间\n【返回值类型】：日期时间(System.DateTime)\n【示例】：GetDateTimeNow()\n【返回值】:2019-01-30T12:00:00.000+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "比较两个时间",
            "params": [
                {
                    "key": "str1",
                    "name": "日期时间1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "日期时间2",
                    "type": "string"
                }
            ],
            "description": `【功能】：比较两个时间值，并返回一个值，此值表示第一个时间是早于、等于还是晚于第二个时间的整数\n【str1】：日期时间1\n【str2】：日期时间2\n【返回值类型】：数值(System.int32)\n\t日期1早于日期2，返回-1\n\t日期1等于日期2，返回0\n\t日期1晚于日期2，返回1\n【示例】：CompareDate("2019-01-30T10:00:00+08:00","2019-02-01T10:00:00+08:00")\n【返回值】：-1`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "格式化当前日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式将当前日期时间值转换为其等效的字符串表示形式\n【format】：格式串\n【返回值类型】：字符串(System.String)\n【示例】：FormatDate("yyyy-MM-dd HH:mm:ss")\n【返回值】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "格式化指定日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式将指定的日期时间值转换为其等效的字符串表示形式\n【format】：格式串\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FormatDefineDate("yyyy-MM-dd HH:mm:ss","2019-01-30 01:00:00")\n【返回值】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "今天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的今天，格式为"yyyy-MM-dd"形式，如果不传递参数，则默认返回当前系统日期的今天\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：Today("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-30"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "昨天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的昨天，格式为"yyyy-MM-dd"形式，如果不传递参数，则默认返回当前系统日期的昨天\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：Yesterday("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "明天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明天，格式为"yyyy-MM-dd"形式，如果不传递参数，则默认返回当前系统日期的明天\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：Tomorrow("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "本年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年，格式为"yyyy"形式，如果不传递参数，则默认返回当前系统日期的本年\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：ThisYear("2019-01-30T10:00:00+08:00")\n【返回值】："2019"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "去年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的去年，格式为"yyyy"形式，如果不传递参数，则默认返回当前系统日期的去年\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastYear("2019-01-30T10:00:00+08:00")\n【返回值】："2018"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "明年",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明年，格式为"yyyy"形式，如果不传递参数，则默认返回当前系统日期的明年\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：NextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "本月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月，格式为"MM"形式，如果不传递参数，则默认返回当前系统日期的本月\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：ThisMonth("2019-01-30T01:00:00+08:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "上月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月，格式为"MM"形式，如果不传递参数，则默认返回当前系统日期的上月\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastMonth("2019-02-30 01:00:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "下月",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月，格式为"MM"形式，如果不传递参数，则默认返回当前系统日期的下月\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：NextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "本周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期在本年的第几周，格式为"ww"形式，如果不传递参数，则默认返回当前系统日期在本年的第几周，注意如果12月底的日期与下一年的1月1日在同一星期，则返回第一周\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：ThisWeek("2019-01-30T01:00:00+08:00")\n【返回值】："5"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "上周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上周，格式为"ww"形式，如果不传递参数，则默认返回当前系统日期的上周，注意如果指定日期在今年第1周，则上周为去年的最后一周\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："4"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "下周",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下周，格式为"ww"形式，如果不传递参数，则默认返回当前系统日期的下周，注意如果指定日期在今年最后一周，则下周为1\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：NextWeek("2019-01-30T01:00:00+08:00")\n【返回值】："6"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "星期几",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期是本周的星期几，格式为"n"，如果不传递参数，则默认返回当前系统日期是本周的星期几，注意不是返回英文缩写，而是返回数字形式。按照中国习惯，星期一为每周首日，返回值为1，星期日为每周尾日，返回值为7\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：DayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："3"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "本周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本周第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "本周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本周最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-03"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "上周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上周第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-21"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "上周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上周最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上周最后一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-27"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "下周第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下周第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下周第一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-04"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "下周最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下周最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下周最后一天。按照中国习惯，星期一为每周首日，星期日为每周尾日\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-10"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "本月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本月第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "本月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本月最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "上月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上月第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "上月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上月最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "下月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下月第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "下月最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下月最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "本年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本年第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "本年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的本年最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "上年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上年第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "上年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的上年最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "下年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年第一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下年第一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：FirstDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "下年最后一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年最后一天，格式为"yyyy-MM-dd"，如果不传递参数，则默认返回当前系统日期的下年最后一天。\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n【示例】：LastDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "返回指定形式的日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期时间",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定形式的日期，如果不传递参数，则默认返回当前系统日期的指定形式日期。\n【format】：格式化串\n【date】：日期时间\n【返回值类型】：字符串(System.String)\n\tDD：今天\tLD：昨天\tND：明天\n\tYY：本年\tLY：上年\tNY：下年\n\tMM：本月\tLM：上月\tNM：下月\n\tWD：星期几\n\tWW：本周\tLW：上周\tNW：下周\n\tFDW：本周首日\tLDW：本周尾日\n\tFDLW：上周首日\tLDLW：上周尾日\n\tFDNW：下周首日\tLDNW：下周尾日\n\tFDM：本月首日\tLDM：本月尾日\n\tFDLM：上月首日\tLDLM：上月尾日\n\tFDNM：下月首日\tLDNM：下月尾日\n\tFDY：本年首日\tLDY：本年尾日\n\tFDLY：上年首日\tLDLY：上年尾日\n\tFDNY：下年首日\tLDNY：下年尾日\n【示例】：GetDate("LD","2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "转字符串",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定的对象转换成字符串\n【obj】：待转换对象\n【返回值类型】：字符串(System.String)\n【示例】：ToStringX(123)\n【返回值】："123"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "转日期时间",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定的对象转换成日期时间\n【obj】：待转换对象\n【返回值类型】：日期时间(System.OffsetDateTime)\n【示例】：ToDateTime("2019-01-30T10:00:00+08:00")\n【返回值】: 2019-01-30T10:00+08:00`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "转布尔值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象值转换成等效的布尔值\n【obj】：待转换对象\n【返回值类型】：布尔值(System.Boolean)\n【示例】：ToBoolean("True")\n【返回值】：true`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "转数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成十进制数值\n【obj】：待转换对象\n【返回值类型】：十进制数值(System.BigDecimal)\n【示例】：ToDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "转数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成十进制数值\n【obj】：待转换对象\n【返回值类型】：十进制数值(System.BigDecimal)\n【示例】：ToBigDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "转自定义精度数值",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "小数位数",
                    "type": "int"
                }
            ],
            "description": `【功能】：将指定对象转换成指定精度的十进制数值\n【obj】：待转换对象\n【number】：小数位数\n【返回值类型】：十进制数值(System.BigDecimal)\n【示例】：ToCustomBigDecimal("40.2,2")\n【返回值】：40.20`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "转双精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成双精度浮点数\n【obj】：待转换对象\n【返回值类型】：双精度浮点数(System.Double)\n【示例】：ToDouble("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "转单精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成单精度浮点数\n【obj】：待转换对象\n【返回值类型】：单精度浮点数(System.Float)\n【示例】：ToSingle("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "转单精度浮点数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成单精度浮点数\n【obj】：待转换对象\n【返回值类型】：单精度浮点数(System.Float)\n【示例】：ToFloat("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "转8位无符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成8位无符号整数\n【obj】：待转换对象\n【返回值类型】：8位无符号整数(System.Byte)\n【示例】：ToByte("10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "转16位有符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成16位有符号整数\n【obj】：待转换对象\n【返回值类型】：16位有符号整数(System.Int16)\n【示例】：ToInt16("10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "转32位有符号整数",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成32位有符号整数\n【obj】：待转换对象\n【返回值类型】：32位有符号整数(System.Int32)\n【示例】：ToInt32("10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "转中文大写金额",
            "params": [
                {
                    "key": "obj",
                    "name": "转换对象",
                    "type": "object"
                }
            ],
            "description": `【功能】：将指定对象转换成中文大写金额\n【obj】：待转换对象\n【返回值类型】：字符串(System.String)\n【示例】：ToChineseMoney(40.23)\n【返回值】："肆拾元零贰角叁分"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "获取会话变量的值",
            "params": [
                {
                    "key": "name",
                    "name": "会话变量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取用户会话变量的值\n【name】：会话变量名称\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "获取上下文变量的值",
            "params": [
                {
                    "key": "name",
                    "name": "上下文变量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取上下文变量的值\n【name】：上下文变量名称\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "根据属性名获取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式属性名得到JSON串\n【chainedPropName】链式名称\n【propertyName】属性名\n【返回值类型】：对象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "根据属性名获取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名称",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "属性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式属性名得到JSON串\n【chainedPropName】链式名称\n【propertyName】属性名\n【返回值类型】：对象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "根据注入名获获取注入对象",
            "params": [
                {
                    "key": "name",
                    "name": "注入名",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取运行时注入的对象\n【name】注入名\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "根据属性名获取属性值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "链式名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根据链式属性名获取属性值\n【chainedPropName】链式名\n【返回值类型】：对象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "绝对值",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一个数值的绝对值\n【value】：计算数值\n【返回值类型】：数值(System.Double)\n【示例】：abs(-1.5)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "四舍五入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把数四舍五入为指定精度的数值\n【value1】：数值 \n【value2】：四舍五入小数位数\n【返回值类型】：数值(System.Double)\n【示例】：\nRound(1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "四舍五入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把数四舍五入为指定精度的数值\n【value1】：数值 \n【value2】：四舍五入小数位数\n【返回值类型】：数值(System.Double)\n【示例】：round(1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "随机数",
            "params": [],
            "description": `【功能】：随机生成大于等于 0.0 且小于 1.0 的伪随机值\n【返回值类型】：数值(System.Double)\n【示例】：random()\n【返回值】：0.624508349393`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "正弦",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一个数字的正弦值\n【value】：计算数值\n【返回值类型】：数值(System.Double)\n一个以弧度表示的角\n【示例】：sin(1)\n【返回值】：0.84187098`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "余弦",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一个数字的余弦值\n【value】：计算数值\n【返回值类型】：数值(System.Double)\n一个以弧度表示的角\n【示例】：cos(3)\n【返回值】：-0.9899924`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "向上舍入",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回大于或等于函数参数，并且与之最接近的整数\n【value】：计算数值\n【返回值类型】：数值(System.Int32)\n【示例】：ceil(3.2)\n【返回值】：4`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "向下舍入",
            "params": [
                {
                    "key": "value",
                    "name": "数值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回小于或等于函数参数，并且与之最接近的整数\n【value】：计算数值\n【返回值类型】：数值(System.Int32)\n【示例】：floor(3.2)\n【返回值】：3`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "银行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用银行家舍入标准，把指定数字舍入为最接近的数字\n【value1】：要舍入的数值\n【value2】：要舍入的小数位数\n【返回值类型】：数值(System.Double)\n【示例】：BankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "银行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "数值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用银行家舍入标准，把指定数字舍入为最接近的数字\n【value1】：要舍入的数值\n【value2】：要舍入的小数位数\n【返回值类型】：数值(System.Double)\n【示例】：bankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ],
    "en": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : Analyzing conditions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : Analyzing conditions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for loop",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "return operation",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "variable definitions",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "true",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "false",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "StringSubstring",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "start",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "length",
                    "type": "int"
                }
            ],
            "description": `【Function】：Retrieve the substring in the original string, the substring starts from the specified character position and has the specified length\n【original】：original string\n【start】：start index(start from 0)\n【length】：length\n【Return Type】：String(System.String)\n【Example】：StringSubstring("ABCDEFG",2,3)\n【Return】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "SubString",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "start",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "length",
                    "type": "int"
                }
            ],
            "description": `【Function】：Retrieve the substring in the original string, the substring starts from the specified character position and has the specified length\n【original】：original string\n【start】：start index(start from 0)\n【length】：length\n【Return Type】：String(System.String)\n【Example】：SubString("ABCDEFG",2,3)\n【Return】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串长度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：获取指定字符串的长度\n【original】：源字符串\n【Return Type】：数值(System.Int32)\n【Example】：StringLength("语义化表达式")\n【Return】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "Length",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the length of the original string\n【original】：original string\n【Return Type】：Int32(System.Int32)\n【Example】：Length("语义化表达式")\n【Return】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "Contains",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the original string contains the target string\n【original】：original string\n【target】：target string\n【Return Type】：System.Boolean\n【Example】：Contains(salesorder.code,"表达式")\n【Return】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "StartsWith",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the original string starts with the target string\n【original】：original string\n【target】：target string\n【Return Type】：System.Boolean\n【Example】：StartsWith(salesorder.code,"子单位")\n【Return】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "EndsWith",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the original string ends with the target string\n【original】：original string\n【target】：target string\n【Return Type】：System.Boolean\n【Example】：EndsWith(salesorder.code,\"子单位\")\n【Return】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替换",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替换值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替换值",
                    "type": "string"
                }
            ],
            "description": `【功能】：将源字符串中的"被替换值"替换为"替换值"\n【original】：源字符串\n【oldValue】：被替换值\n【newValue】：替换值\n【Return TypeReturn Type】：字符串(System.String)\n【Example】：StringReplace("123412","12","00")\n【Return】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "Replace",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "oldValue",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "newValue",
                    "type": "string"
                }
            ],
            "description": `【Function】：Replace the "oldValue" in the original string with "newValue"\n【original】：original string\n【oldValue】：replaced old value\n【newValue】：replacement new value\n【Return Type】：String(System.String)\n【Example】：Replace("123412","12","00")\n【Return】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "转大写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：将源字符串转换为大写\n【original】：源字符串\n【Return Type】：字符串(System.String)\n【Example】：StringToUpper("abc")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "ToUpper",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Convert the original string to uppercase\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：ToUpper("abc")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "转小写",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：将源字符串转换为小写\n【original】：源字符串\n【Return TypeReturn Type】：字符串(System.String)\n【Example】：StringToLower("ABC")\n【Return】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "ToLower",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Convert the original string to lowercase\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：ToLower("ABC")\n【Return】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "获取首个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：在源字符串中，检索目标字符串，找到第一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【target】：目标字符串\n【Return Type】：数值(System.Int32)\n【Example】：StringIndexOf("12001234012","01")\n【Return】：3\n【Example】：StringIndexOf("12002323","34")\n【Return】：-1\n【Example】：StringIndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "IndexOf",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：In the original string, the target string is retrieved, and after the first matching string is found, its index position (starting from 0) is returned. If the target string is not found, -1 is returned, if the target string is an empty string, 0 is returned, if the original string is null, -1 is returned\n【original】：original string\n【target】：target string\n【Return Type】：Int32(System.Int32)\n【Example】：IndexOf("12001234012","01")\n【Return】：3\n【Example】：IndexOf("12002323","34")\n【Return】：-1\n【Example】：IndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "获取最后一个匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目标字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，检索目标字符串，找到最后一个匹配的字符串后，返回其索引位置(从0开始)。如果未找到目标字符串，则返回-1，如果目标字符串为空串，返回0，如果原字符串为null，则返回-1\n【original】：源字符串\n【value】：目标字符串\n【Return Type】：数值(System.Int32)\n【Example】：StringLastIndexOf("12001234012","01")\n【Return】：8\n【Example】：StringLastIndexOf("12002323","34")\n【Return】：-1\n【Example】：StringLastIndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "LastIndexOf",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "target",
                    "type": "string"
                }
            ],
            "description": `【Function】：In the original string, the target string is retrieved, and after the last matching string is found, its index position (starting from 0) is returned. If the target string is not found, -1 is returned, if the target string is an empty string, 0 is returned, if the original string is null, -1 is returned\n【original】：original string\n【value】：target string\n【Return Type】：Int32(System.Int32)\n【Example】：LastIndexOf("12001234012","01")\n【Return】：8\n【Example】：LastIndexOf("12002323","34")\n【Return】：-1\n【Example】：LastIndexOf("120011","")\n【Return】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "删除头部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头部空格\n【original】：源字符串\n【Return Type】：字符串(System.String)\n【Example】：StringTrimStart("    ABC")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "TrimStart",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Delete the head space of the original string\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：TrimStart("    ABC")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "删除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的尾部空格\n【original】：源字符串\n【Return TypeReturn Type】：字符串(System.String)\n【Example】：StringTrimEnd("ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "TrimEnd",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Remove trailing spaces from the original string\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：TrimEnd("ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "删除头尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：删除源字符串的头尾部空格\n【original】：源字符串\n【Return Type】：字符串(System.String)\n【Example】：StringTrim("    ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "Trim",
            "params": [
                {
                    "key": "original",
                    "name": "original",
                    "type": "string"
                }
            ],
            "description": `【Function】：Delete the leading and trailing spaces of the original string\n【original】：original string\n【Return Type】：String(System.String)\n【Example】：Trim("    ABC    ")\n【Return】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "CreateGuid",
            "params": [],
            "description": `【Function】：Get unique identification Guid\n【Return Type】：String(System.String)\n【Example】：CreateGuid()\n【Return】："7722A793-14DF-49CD-B7E7-DF4987YYD2"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一个字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二个字符串",
                    "type": "string"
                }
            ],
            "description": `【Function】：将若干字符串拼接成一个新字符串，最多支持10个字符串拼接，最少2个；编辑器中默认插入两个，多个字符串可手动添加\n【Return Type】：字符串(System.String)\n【Example】：StringAdd("Hello","World")\n【Return】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "Add",
            "params": [
                {
                    "key": "firstStr",
                    "name": "firstStr",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "secondStr",
                    "type": "string"
                }
            ],
            "description": `【Function】：Concatenate several strings into a new string, support up to 10 string concatenations, at least 2; two are inserted by default in the editor, and multiple strings can be added manually\n【Return Type】：String(System.String)\n【Example】：Add("Hello","World")\n【Return】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "SumByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the sum of a certain attribute\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name;\n【Return Type】：Double(System.Double)\n【Example】：SumByProp("Order.OrderItems","Quantity")"`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "CountByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the number of records in the table where the specified field is located\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Int32(System.Int32);\n【Example】：CountByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "AvgByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the average value of a numeric column\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Double(System.Double)\n【Example】：AvgByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "MaxByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the maximum value of a numeric column\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Double(System.Double)\n【Example】：MaxByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "MinByProp",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Count the minimum value of a numeric column\n【chainedPropName】：Corresponding to the attribute names of the entity set, the attribute names organized together in a chain form, for example:Order.OrderItems\n【propertyName】：Type attribute name\n【Return Type】：Double(System.Double)\n【Example】：MinByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "IsNull",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Determine whether the specified object is null(null)\n【obj】：Object to be detected\n【Return Type】：Boolean(System.Boolean)\n【ExampleExample】：IsNull("语义化表达式")\n【Return】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "IsNullOrWhiteSpace",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether the specified string is null, empty or only composed of spaces\n【obj】：String to be judged\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsNullOrWhiteSpace("语义化表达式")\n【Return】：False\n【Example】：IsNullOrWhiteSpace(null)\n【Return】：True\n【Example】：\nIsNullOrWhiteSpace(" ")【Return】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "IsNaN",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Determine whether the specified object can be converted into a number(System.Double)\n【obj】：Object to be detected\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsNaN("语义化表达式")【Return】：True\n【Example】：IsNaN(12.3)【Return】：False\n【Example】：\nIsNaN("123")【Return】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "IsNumber",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Determine whether the specified object can be converted into a number(System.Double)\n【obj】：Object to be detected\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsNumber(\"语义化表达式\")【Return】：False\n【Example】：IsNumber(12.3)【Return】：True\n【Example】：\nIsNumber("123")【Return】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "IsExistRecord",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": `【Function】：Determine whether there is a value equal to the matching character in the specified field set of the table according to the chain name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：IsExistRecord("salesorder.items","code","lc")\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "ListGreaterThan",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "double"
                }
            ],
            "description": `【Function】：Determine whether there is a value greater than the matching character in the specified field set of the table according to the chain name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】march value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListGreaterThan("salesorder.items","num",100)\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "ListLessThan",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "double"
                }
            ],
            "description": `【Function】：Determine whether there is a value less than the matching character in the specified field set of the table according to the chain name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListLessThan("salesorder.items","num",100)\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "ListStartWith",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": `【Function】：According to the chain name, determine whether there is a value with a matching character at the beginning of the specified field set of the table\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListStartWith("salesorder.items","code","lc")\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "ListEndWith",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "match",
                    "type": "string"
                }
            ],
            "description": `【Function】：According to the chain name, determine whether there is a value whose ending is a matching character in the specified field set of the table\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【match】match value\n【Return Type】：Boolean(System.Boolean)\n【Example】：ListEndWith("salesorder.items","code","lc")\n【Return】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "DateTimeAddDays",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": `【Function】：Add the specified number of days to the specified date\n【date】：date time\n【value】：Increase the number of days\n【Return Type】：DateTime(System.DateTime)\n【Example】：DateTimeAddDays("2019-01-30T10:00:00+08:00",2)\n【Return】:2019-02-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "DateTimeAddYears",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": `【Function】：Add the specified number of years to the specified date and time\n【date】：date time\n【value】：Increase the number of years\n【Return Type】：DateTime(System.DateTime)\n【Example】：DateTimeAddYears("2019-01-30T10:00:00+08:00",2)\n【Return】:2021-01-30T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "DateTimeAddMonths",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "value",
                    "type": "int"
                }
            ],
            "description": `【Function】：Add the specified number of months to the specified date and time\n【date】：date time\n【value】：Increase the number of months\n【Return Type】：DateTime(System.DateTime)\n【ExampleExample】：DateTimeAddMonths("2019-01-30T10:00:00+08:00",1)\n【Return】:2019-02-28T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "GetFirstDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the date of the first day of the month where the specified date time value is\n【date】：date time\n【Return Type】：DateTime(System.DateTime)\n【Example】：GetFirstDayOfMonth("2019-01-30T10:00:00+08:00")\n【Return】:2019-01-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "GetLastDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the date of the last day of the month in which the specified date and time value is located\n【date】：date time\n【Return Type】：DateTime(System.DateTime)\n【Example】：GetLastDayOfMonth("2019-01-30T10:00:00+08:00")\n【Return】:2019-01-31T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "GetDateTimeNow",
            "params": [],
            "description": `【Function】：Get the current date and time\n【Return Type】：DateTime(System.DateTime)\n【Example】：GetDateTimeNow()\n【Return】:2019-01-30T12:00:00.000+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "CompareDate",
            "params": [
                {
                    "key": "str1",
                    "name": "date1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "date2",
                    "type": "string"
                }
            ],
            "description": `【Function】：Compare two time values and return a value indicating whether the first time is an integer that is earlier than, equal to, or later than the second time\n【str1】：date time 1\n【str2】：date time 2\n【Return Type】：Int32(System.Int32)\n\tDate 1 is earlier than date 2, return -1\n\tdate 1 is equal to date 2, return 0\n\tdate 1 is later than date 2, return 1\n【Example】：CompareDate("2019-01-30T10:00:00+08:00","2019-02-01T10:00:00+08:00")\n【Return】：-1`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "FormatDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                }
            ],
            "description": `【Function】：Use the specified format to convert the current date and time value to its equivalent string representation\n【format】：Format string\n【Return Type】：String(System.String)\n【Example】：FormatDate("yyyy-MM-dd HH:mm:ss")\n【Return】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "FormatDefineDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Use the specified format to convert the specified date and time value to its equivalent string representation\n【format】：Format string\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FormatDefineDate("yyyy-MM-dd HH:mm:ss","2019-01-30 01:00:00")\n【Return】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "Today",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns today of the specified date, in the format "yyyy-MM-dd", if no parameters are passed, it will return today as the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：Today("2019-01-30T10:00:00+08:00")\n【Return】："2019-01-30"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "Yesterday",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the yesterday of the specified date, the format is "yyyy-MM-dd", if no parameters are passed, it will return yesterday of the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：Yesterday("2019-01-30T10:00:00+08:00")\n【Return】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "Tomorrow",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return tomorrow of the specified date, the format is "yyyy-MM-dd", if no parameters are passed, it will return tomorrow of the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：Tomorrow("2019-01-30T10:00:00+08:00")\n【Return】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "ThisYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the current year of the specified date, the format is "yyyy", if no parameters are passed, the current year of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：ThisYear("2019-01-30T10:00:00+08:00")\n【Return】："2019"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "LastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last year of the specified date, the format is "yyyy", if no parameters are passed, it will return the last year of the current system date by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastYear("2019-01-30T10:00:00+08:00")\n【Return】："2018"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "NextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the next year of the specified date, the format is "yyyy", if no parameters are passed, the next year of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：NextYear("2019-01-30T01:00:00+08:00")\n【Return】："2020"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "ThisMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the current month of the specified date, the format is "MM", if no parameters are passed, the current month of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：ThisMonth("2019-01-30T01:00:00+08:00")\n【Return】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "LastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the previous month of the specified date, the format is "MM", if no parameters are passed, the default returns the previous month of the current system date\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastMonth("2019-02-30 01:00:00")\n【Return】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "NextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the next month of the specified date, the format is "MM", if no parameter is passed, the next month of the current system date will be returned by default\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：NextMonth("2019-01-30T01:00:00+08:00")\n【Return】："2"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "ThisWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the week of the specified date in the current year, in the form of "ww". If no parameter is passed, the default will return the current system date in the first week of the year. Note that if the date at the end of December is the same as January If the 1st falls in the same week, return to the first week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：ThisWeek("2019-01-30T01:00:00+08:00")\n【Return】："5"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "LastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last week of the specified date, the format is "ww", if no parameter is passed, it will default to the last week of the current system date. Note that if the specified date is in the first week of this year, the last week will be the last week of last year\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastWeek("2019-01-30T01:00:00+08:00")\n【Return】："4"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "NextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the next week of the specified date, the format is "ww". If no parameter is passed, the next week of the current system date will be returned by default. Note that if the specified date is in the last week of the year, the next week will be 1\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：NextWeek("2019-01-30T01:00:00+08:00")\n【Return】："6"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "DayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the specified date is the day of the week of the current week, the format is "n", if no parameter is passed, the default return current system date is the day of the week of the week. Note that it returns not the English abbreviation, but the number form. According to Chinese custom, Monday is the first day of the week, Return is 1, Sunday is the end of the week, and Return is 7\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：DayOfWeek("2019-01-30T01:00:00+08:00")\n【Return】："3"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "FirstDayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the first day of the week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "LastDayOfWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-03"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "FirstDayOfLastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the last week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the last week of the current system date will be returned by default. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】: date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-21"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "LastDayOfLastWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the last week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the last day of the last week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfLastWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-27"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "FirstDayOfNextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the next week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the first day of the next week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-04"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "LastDayOfNextWeek",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the next week of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the default returns the last day of the next week of the current system date. According to Chinese custom, Monday is the first day of the week, and Sunday is the last day of the week\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfNextWeek("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-10"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "FirstDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the month of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "LastDayOfMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the last day of the month of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "FirstDayOfLastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the previous month of the specified date, in the format "yyyy-MM-dd". If no parameters are passed, the first day of the previous month of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【Return】："2018-12-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "LastDayOfLastMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the previous month of the specified date, the format is "yyyy-MM-dd", if no parameters are passed, the default returns the last day of the previous month of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【Return】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "FirstDayOfNextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the next month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the first day of the next month of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "LastDayOfNextMonth",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the next month of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the last day of the next month of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【Return】："2019-02-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "FirstDayOfYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the current year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the current year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfYear("2019-01-30T01:00:00+08:00")\n【Return】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "LastDayOfYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the current year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the last day of the current year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfYear("2019-01-30T01:00:00+08:00")\n【Return】："2019-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "FirstDayOfLastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the previous year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the first day of the previous year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfLastYear("2019-01-30T01:00:00+08:00")\n【Return】："2018-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "LastDayOfLastYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the previous year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, the last day of the previous year of the current system date will be returned by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfLastYear("2019-01-30T01:00:00+08:00")\n【Return】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "FirstDayOfNextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the first day of the next year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will return the first day of the next year of the current system date by default.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：FirstDayOfNextYear("2019-01-30T01:00:00+08:00")\n【Return】："2020-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "LastDayOfNextYear",
            "params": [
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Returns the last day of the next year of the specified date in the format "yyyy-MM-dd". If no parameters are passed, it will default to the last day of the next year of the current system date.\n【date】：date time\n【Return Type】：String(System.String)\n【Example】：LastDayOfNextYear("2019-01-30T01:00:00+08:00")\n【Return】："2020-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "GetDate",
            "params": [
                {
                    "key": "format",
                    "name": "format",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "date",
                    "type": "string"
                }
            ],
            "description": `【Function】：Return the date in the specified format. If no parameters are passed, it will return the date in the specified format of the current system date by default.\n【format】：格式化串\n【date】：date time\n【Return Type】：String(System.String)\n\tDD：Today\tLD：Yesterday\tND：Tomorrow\n\tYY：This year\tLY：Last year\tNY：Next year\n\tMM：This month\tLM：Last month\tNM：Next month\n\tWD：Day of the week\n\tWW：This week\tLW：Last week\tNW：Next week\n\tFDW：First day of this week\tLDW：End of this week\n\tFDLW：First day of last week\tLDLW：End of the last week\n\tFDNW：First day of next week\tLDNW：End of next week\n\tFDM：First day of this month\tLDM：End of this month\n\tFDLM：First day of last month\tLDLM：End of last month\n\tFDNM：First day of next month\tLDNM：End of next month\n\tFDY：First day of this year\tLDY：nd of this year\n\tFDLY：First day of last year\tLDLY：End of last year\n\tFDNY：First day of next year\tLDNY：End of next year\n【Example】：GetDate("LD","2019-01-30T01:00:00+08:00")\n【Return】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "ToStringX",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a string\n【obj】：Object to be converted\n【Return Type】：String(System.String)\n【Example】：ToStringX(123)\n【Return】："123"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "ToDateTime",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into date time\n【obj】：Object to be converted\n【Return Type】：OffsetDateTime(System.OffsetDateTime)\n【Example】：ToDateTime("2019-01-30T10:00:00+08:00")\n【Return】: 2019-01-30T10:00+08:00`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "ToBoolean",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object value into an equivalent boolean value\n【obj】：Object to be converted\n【Return Type】：Boolean(System.Boolean)\n【Example】：ToBoolean("True")\n【Return】：true`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "ToDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a decimal value\n【obj】：Object to be converted\n【Return Type】：BigDecimal(System.BigDecimal)\n【Example】：ToDecimal("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "ToBigDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a BigDecimal value\n【obj】：Object to be converted\n【Return Type】：BigDecimal(System.BigDecimal)\n【Example】：ToBigDecimal("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "ToCustomBigDecimal",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "number",
                    "type": "int"
                }
            ],
            "description": `【Function】：Convert the specified object into a decimal value of the specified precision\n【obj】：Object to be converted\n【number】：Decimal places\n【Return Type】：BigDecimal(System.BigDecimal)\n【Example】：ToCustomBigDecimal("40.2,2")\n【Return】：40.20`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "ToDouble",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a double value\n【obj】：Object to be converted\n【Return Type】：Double(System.Double)\n【Example】：ToDouble("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "ToSingle",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a single value\n【obj】：Object to be converted\n【Return Type】：Float(System.Float)\n【Example】：ToSingle("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "ToFloat",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a float value\n【obj】：Object to be converted\n【Return Type】：Float(System.Float)\n【Example】：ToFloat("40.23")\n【Return】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "ToByte",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a byte\n【obj】：Object to be converted\n【Return Type】：Byte(System.Byte)\n【Example】：ToByte("10")\n【Return】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "ToInt16",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a Int16\n【obj】：Object to be converted\n【Return Type】：Int16(System.Int16)\n【Example】：ToInt16("10")\n【Return】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "ToInt32",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into a Int32\n【obj】：Object to be converted\n【Return Type】：Int32(System.Int32)\n【Example】：ToInt32("10")\n【Return】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "ToChineseMoney",
            "params": [
                {
                    "key": "obj",
                    "name": "obj",
                    "type": "object"
                }
            ],
            "description": `【Function】：Convert the specified object into Chinese uppercase amount\n【obj】：Object to be converted\n【Return Type】：String(System.String)\n【Example】：ToChineseMoney(40.23)\n【Return】："肆拾元零贰角叁分"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "GetSessionValue",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the value of the user session variable\n【name】：the user session variable\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "GetContextParameter",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the value of the context variable\n【name】：the context variable\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "getComputeJsonData",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the JSON string according to the chain attribute name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【Return Type】：Object(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "GetComputeJsonData",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "propertyName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the JSON string according to the chain attribute name\n【chainedPropName】chainedPropName\n【propertyName】propertyName\n【Return Type】：Object(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "GetInjectedEntity",
            "params": [
                {
                    "key": "name",
                    "name": "name",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the object injected at runtime\n【name】Injection name\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "GetChainedPropertyValue",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "chainedPropName",
                    "type": "string"
                }
            ],
            "description": `【Function】：Get the attribute value based on the chained attribute name\n【chainedPropName】chainedPropName\n【Return Type】：Object(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "abs",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the absolute value of a number\n【value】：value\n【Return Type】：Double(System.Double)\n【Example】：abs(-1.5)\n【Return】：1.5`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "Round",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": `【Function】：Rounds the number to the specified precision\n【value1】：value \n【value2】：Round off decimal places\n【Return Type】：Double(System.Double)\n【Example】：\nRound(1.52,1)\n【Return】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "round",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": `【Function】：Rounds the number to the specified precision\n【value1】：value \n【value2】：Round off decimal places\n【Return Type】：Double(System.Double)\n【Example】：round(1.52,1)\n【Return】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "random",
            "params": [],
            "description": `【Function】：Randomly generate a pseudo-random value greater than or equal to 0.0 and less than 1.0\n【Return Type】：Double(System.Double)\n【Example】：random()\n【Return】：0.624508349393`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "sin",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the sine of a number\n【value】：value\n【Return Type】：Double(System.Double)\nAn angle expressed in radians\n【Example】：sin(1)\n【Return】：0.84187098`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "cos",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the cosine of a number\n【value】：value\n【Return Type】：Double(System.Double)\nAn angle expressed in radians\n【Example】：cos(3)\n【Return】：-0.9899924`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "ceil",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the integer that is greater than or equal to the function parameter and closest to it\n【value】：value\n【Return Type】：Int32(System.Int32)\n【Example】：ceil(3.2)\n【Return】：4`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "floor",
            "params": [
                {
                    "key": "value",
                    "name": "value",
                    "type": "double"
                }
            ],
            "description": `【Function】：Returns the integer that is less than or equal to the function parameter and closest to it\n【value】：value\n【Return Type】：Int32(System.Int32)\n【Example】：floor(3.2)\n【Return】：3`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "BankerRound",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小数位数",
                    "type": "int32"
                }
            ],
            "description": `【Function】：使用银行家舍入标准，把指定数字舍入为最接近的数字\n【value1】：要舍入的数值\n【value2】：要舍入的小数位数\n【Return Type】：数值(System.Double)\n【Example】：BankerRound(36.124,2)\n【Return】：36.12`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "bankerRound",
            "params": [
                {
                    "key": "value1",
                    "name": "value",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "Decimal",
                    "type": "int32"
                }
            ],
            "description": `【Function】：Use the banker's rounding standard to round the specified number to the nearest number\n【value1】：The value to be rounded\n【value2】：Number of decimal places to round\n【Return Type】：Double(System.Double)\n【Example】：bankerRound(36.124,2)\n【Return】：36.12`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ],
    "zh-CHT": [
        {
            "key": "if",
            "name": "if()\n{\n\n}",
            "params": [],
            "description": "if : 判斷條件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "if else",
            "name": "if()\n{\n\n}\nelse\n{\n\n}",
            "params": [],
            "description": "if else : 判斷條件",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "for",
            "name": "for(;;)\n{\n\n}",
            "params": [],
            "description": "for循環",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "return",
            "name": "return ;",
            "params": [],
            "description": "返回操作",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "var",
            "name": "var ",
            "params": [],
            "description": "變量定義",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "true",
            "name": "true ",
            "params": [],
            "description": "正確",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "false",
            "name": "false ",
            "params": [],
            "description": "錯誤",
            "type": "Advanced",
            "keyFront": "",
            "className": ""
        },
        {
            "key": "StringSubstring",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "長度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中檢索子字符串，子字符串從指定的字符位置開始且具有指定的長度\n【original】：源字符串\n【start】：起始位置(從0開始)\n【length】：長度\n【返回值類型】：字符串(System.String)\n【示例】：StringSubstring("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SubString",
            "name": "取子字符串",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "start",
                    "name": "起始位置",
                    "type": "int"
                },
                {
                    "key": "length",
                    "name": "長度",
                    "type": "int"
                }
            ],
            "description": `【功能】：在源字符串中檢索子字符串，子字符串從指定的字符位置開始且具有指定的長度\n【original】：源字符串\n【start】：起始位置(從0開始)\n【length】：長度\n【返回值類型】：字符串(System.String)\n【示例】：SubString("ABCDEFG",2,3)\n【返回值】："CDE"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLength",
            "name": "取字符串長度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定字符串的長度\n【original】：源字符串\n【返回值類型】：數值(System.Int32)\n【示例】：StringLength("語義化表達式")\n 【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Length",
            "name": "取字符串長度",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定字符串的長度\n【original】：源字符串\n【返回值類型】：數值(System.Int32)\n【示例】：Length("語義化表達式")\n 【返回值】：6`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Contains",
            "name": "是否包含",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷源字符串中是否包含目標字符串\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：System.Boolean\n【示例】：Contains (salesorder.code,"表達式")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StartsWith",
            "name": "開頭是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷源字符串是否以目標字符串開頭\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：System.Boolean\n【示例】：StartsWith (salesorder.code,"子單位")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "EndsWith",
            "name": "結尾是",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷源字符串是否以目標字符串結尾\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：System.Boolean\n【示例】：EndsWith (salesorder.code,\"子單位\")\n【返回值】：true`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringReplace",
            "name": "字符串替換",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替換值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替換值",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串中的"被替換值"替換為"替換值"\n【original】：源字符串\n【oldValue】：被替換值\n【newValue】：替換值\n【返回值類型】：字符串(System.String)\n【示例】：StringReplace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Replace",
            "name": "字符串替換",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "oldValue",
                    "name": "被替換值",
                    "type": "string"
                },
                {
                    "key": "newValue",
                    "name": "替換值",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串中的"被替換值"替換為"替換值"\n【original】：源字符串\n【oldValue】：被替換值\n【newValue】：替換值\n【返回值類型】：字符串(System.String)\n【示例】：Replace("123412","12","00")\n【返回值】："003400"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToUpper",
            "name": "轉大寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為大寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToUpper",
            "name": "轉大寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為大寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：ToUpper("abc")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringToLower",
            "name": "轉小寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為小寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToLower",
            "name": "轉小寫",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將源字符串轉換為小寫\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：ToLower("ABC")\n【返回值】："abc"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringIndexOf",
            "name": "獲取首個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到第一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：StringIndexOf("12001234012","01")\n【返回值】：3\n【示例】：StringIndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：StringIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IndexOf",
            "name": "獲取首個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到第一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【target】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：IndexOf("12001234012","01")\n【返回值】：3\n【示例】：IndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：IndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringLastIndexOf",
            "name": "獲取最後一個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到最後一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【value】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：StringLastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：StringLastIndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：StringLastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastIndexOf",
            "name": "獲取最後一個匹配字符串的索引",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                },
                {
                    "key": "target",
                    "name": "目標字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：在源字符串中，檢索目標字符串，找到最後一個匹配的字符串後，返回其索引位置(從0開始)。如果未找到目標字符串，則返回-1，如果目標字符串為空串，返回0，如果原字符串為null，則返回-1\n【original】：源字符串\n【value】：目標字符串\n【返回值類型】：數值(System.Int32)\n【示例】：LastIndexOf("12001234012","01")\n【返回值】：8\n【示例】：LastIndexOf("12002323 ","34")\n【返回值】：-1\n【示例】：LastIndexOf("120011","")\n【返回值】：0`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimStart",
            "name": "刪除頭部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringTrimStart(" ABC")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimStart",
            "name": "刪除頭部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：TrimStart(" ABC")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrimEnd",
            "name": "刪除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringTrimEnd("ABC ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "TrimEnd",
            "name": "刪除尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：TrimEnd("ABC ")\n【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringTrim",
            "name": "刪除頭尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：StringTrim(" ABC ")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Trim",
            "name": "刪除頭尾部空格",
            "params": [
                {
                    "key": "original",
                    "name": "源字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：刪除源字符串的頭尾部空格\n【original】：源字符串\n【返回值類型】：字符串(System.String)\n【示例】：Trim(" ABC ")\n 【返回值】："ABC"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CreateGuid",
            "name": "唯一標識符",
            "params": [],
            "description": `【功能】：獲取唯一標識符Guid\n【返回值類型】：字符串(System.String)\n【示例】：CreateGuid()\n【返回值】："7722A793-14DF-49CD-B7E7-DF4987YYD2 "`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "StringAdd",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一個字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二個字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將若干字符串拼接成一個新字符串，最多支持10個字符串拼接，最少2個；編輯器中默認插入兩個，多個字符串可手動添加\n【返回值類型】：字符串(System.String)\n【示例】：StringAdd("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Add",
            "name": "字符串相加",
            "params": [
                {
                    "key": "firstStr",
                    "name": "第一個字符串",
                    "type": "string"
                },
                {
                    "key": "secondStr",
                    "name": "第二個字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：將若干字符串拼接成一個新字符串，最多支持10個字符串拼接，最少2個；編輯器中默認插入兩個，多個字符串可手動添加\n【返回值類型】：字符串(System.String)\n【示例】：Add("Hello","World")\n【返回值】："HelloWord"`,
            "type": "String",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "SumByProp",
            "name": "按屬性求和",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一屬性的和\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名;\n 【返回值類型】：數值(System.Double)\n【示例】：SumByProp("Order.OrderItems","Quantity")"`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CountByProp",
            "name": "列行數",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計指定字段所在表的記錄數\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如：Order.OrderItems\n【propertyName】：類型屬性名\ n【返回值類型】：數值(System.Int32);\n【示例】：CountByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "AvgByProp",
            "name": "列平均值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一數值列的平均值\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名\ n【返回值類型】：數值(System.Double)\n【示例】：AvgByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MaxByProp",
            "name": "列最大值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一數值列的最大值\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名\n 【返回值類型】：數值(System.Double)\n【示例】：MaxByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "MinByProp",
            "name": "列最小值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "實體集合屬性名",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "類型屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：統計某一數值列的最小值\n【chainedPropName】：對應實體集合的屬性名,鍊式形式組織在一起的屬性名,例如:Order.OrderItems\n【propertyName】：類型屬性名\ n【返回值類型】：數值(System.Double)\n【示例】：MinByProp("Order.OrderItems","Quantity")`,
            "type": "Aggregate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNull",
            "name": "是空值",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判斷指定的對像是否為空值(null)\n【obj】：要檢測的對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：IsNull("語義化表達式")\n【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNullOrWhiteSpace",
            "name": "是空串",
            "params": [
                {
                    "key": "obj",
                    "name": "待判斷字符串",
                    "type": "string"
                }
            ],
            "description": `【功能】：判斷指定的字符串是否為null、空還是僅有空格組成\n【obj】：要判斷的字符串\n【返回值類型】：布爾值(System.Boolean)\n【示例】 ：IsNullOrWhiteSpace("語義化表達式")\n【返回值】：False\n【示例】：IsNullOrWhiteSpace(null)\n【返回值】：True\n【示例】：\nIsNullOrWhiteSpace(" ")【返回值】：True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNaN",
            "name": "非數字",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判斷指定的對像是否可以轉換成數字(System.Double)\n【obj】：要檢測的對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：IsNaN ("語義化表達式")【返回值】：True\n【示例】：IsNaN(12.3)【返回值】：False\n【示例】：\nIsNaN("123")【返回值】：False`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsNumber",
            "name": "是數字",
            "params": [
                {
                    "key": "obj",
                    "name": "檢測對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：判斷指定的對像是否可以轉換成數字(System.Double)\n【obj】：要檢測的對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：IsNumber (\"語義化表達式\")【返回值】：False\n【示例】：IsNumber(12.3)【返回值】：True\n【示例】：\nIsNumber("123")【返回值】： True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "IsExistRecord",
            "name": "有無等於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在等於匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：IsExistRecord("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListGreaterThan",
            "name": "有無大於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在大於匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListGreaterThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListLessThan",
            "name": "有無小於匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "double"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在小於匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListLessThan("salesorder.items","num",100)\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListStartWith",
            "name": "有無開頭是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在開頭是匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListStartWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ListEndWith",
            "name": "有無結尾是匹配字符",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                },
                {
                    "key": "match",
                    "name": "匹配值",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式名稱判斷該表的指定字段集合中是否存在結尾是匹配字符的值\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【match】匹配值\n【返回值類型】：對象(System.Boolean)\n【示例】：ListEndWith("salesorder.items","code","lc")\n【返回值】：False/True`,
            "type": "Estimate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddDays",
            "name": "增加指定天數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加天數",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期時間上增加指定的天數\n【date】：日期時間\n【value】：增加天數\n【返回值類型】：日期時間(System.DateTime)\n【示例】 ：DateTimeAddDays("2019-01-30T10:00:00+08:00",2)\n【返回值】:2019-02-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddYears",
            "name": "增加指定年數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加年數",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期時間上增加指定的年數\n【date】：日期時間\n【value】：增加年數\n【返回值類型】：日期時間(System.DateTime)\n【示例】 ：DateTimeAddYears("2019-01-30T10:00:00+08:00",2)\n【返回值】:2021-01-30T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DateTimeAddMonths",
            "name": "增加指定月數",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                },
                {
                    "key": "value",
                    "name": "增加月數",
                    "type": "int"
                }
            ],
            "description": `【功能】：在指定的日期時間上增加指定的月數\n【date】：日期時間\n【value】：增加月數\n【返回值類型】：日期時間(System.DateTime)\n【示例】：DateTimeAddMonths("2019-01-30T10:00:00+08:00",1)\n【返回值】:2019-02-28T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetFirstDayOfMonth",
            "name": "獲取指定日期時間所在月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定日期時間值所在月的第一天的日期\n【date】：日期時間\n【返回值類型】：日期時間(System.DateTime)\n【示例】：GetFirstDayOfMonth("2019 -01-30T10:00:00+08:00")\n【返回值】:2019-01-01T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetLastDayOfMonth",
            "name": "獲取指定日期時間所在月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取指定日期時間值所在月的最後一天的日期\n【date】：日期時間\n【返回值類型】：日期時間(System.DateTime)\n【示例】：GetLastDayOfMonth("2019- 01-30T10:00:00+08:00")\n【返回值】:2019-01-31T10:00+08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetDateTimeNow",
            "name": "獲取當前日期時間",
            "params": [],
            "description": `【功能】：獲取當前的日期時間\n【返回值類型】：日期時間(System.DateTime)\n【示例】：GetDateTimeNow()\n【返回值】:2019-01-30T12:00:00.000+ 08:00`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "CompareDate",
            "name": "比較兩個時間",
            "params": [
                {
                    "key": "str1",
                    "name": "日期時間1",
                    "type": "string"
                },
                {
                    "key": "str2",
                    "name": "日期時間2",
                    "type": "string"
                }
            ],
            "description": `【功能】：比較兩個時間值，並返回一個值，此值表示第一個時間是早於、等於還是晚於第二個時間的整數\n【str1】：日期時間1\n【str2】 ：日期時間2\n【返回值類型】：數值(System.int32)\n\t日期1早於日期2，返回-1\n\t日期1等於日期2，返回0\n\t日期1晚於日期2，返回1\n【示例】：CompareDate("2019-01-30T10:00:00+08:00","2019-02-01T10:00:00+08:00")\n【返回值】：-1`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDate",
            "name": "格式化當前日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式將當前日期時間值轉換為其等效的字符串表示形式\n【format】：格式串\n【返回值類型】：字符串(System.String)\n【示例】：FormatDate("yyyy-MM-dd HH:mm:ss")\n【返回值】："2019-01-30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FormatDefineDate",
            "name": "格式化指定日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：使用指定的格式將指定的日期時間值轉換為其等效的字符串表示形式\n【format】：格式串\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FormatDefineDate("yyyy-MM-dd HH:mm:ss","2019-01-30 01:00:00")\n【返回值】："2019-01 -30 01:00:00"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Today",
            "name": "今天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的今天，格式為"yyyy-MM-dd"形式，如果不傳遞參數，則默認返回當前系統日期的今天\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：Today("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-30"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Yesterday",
            "name": "昨天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的昨天，格式為"yyyy-MM-dd"形式，如果不傳遞參數，則默認返回當前系統日期的昨天\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：Yesterday("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "Tomorrow",
            "name": "明天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明天，格式為"yyyy-MM-dd"形式，如果不傳遞參數，則默認返回當前系統日期的明天\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：Tomorrow("2019-01-30T10:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisYear",
            "name": "本年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年，格式為"yyyy"形式，如果不傳遞參數，則默認返回當前系統日期的本年\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：ThisYear("2019-01-30T10:00:00+08:00")\n【返回值】："2019"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastYear",
            "name": "去年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的去年，格式為"yyyy"形式，如果不傳遞參數，則默認返回當前系統日期的去年\n【date】：日期時間\n【返回值類型】：字符串(System .String)\n【示例】：LastYear("2019-01-30T10:00:00+08:00")\n【返回值】："2018"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextYear",
            "name": "明年",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的明年，格式為"yyyy"形式，如果不傳遞參數，則默認返回當前系統日期的明年\n【date】：日期時間\n【返回值類型】：字符串(System .String)\n【示例】：NextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisMonth",
            "name": "本月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月，格式為"MM"形式，如果不傳遞參數，則默認返回當前系統日期的本月\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：ThisMonth("2019-01-30T01:00:00+08:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastMonth",
            "name": "上月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月，格式為"MM"形式，如果不傳遞參數，則默認返回當前系統日期的上月\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastMonth("2019-02-30 01:00:00")\n【返回值】："1"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextMonth",
            "name": "下月",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月，格式為"MM"形式，如果不傳遞參數，則默認返回當前系統日期的下月\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：NextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ThisWeek",
            "name": "本週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期在本年的第幾週，格式為"ww"形式，如果不傳遞參數，則默認返回當前系統日期在本年的第幾週，注意如果12月底的日期與下一年的1月1日在同一星期，則返回第一周\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：ThisWeek("2019-01 -30T01:00:00+08:00")\n【返回值】："5"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastWeek",
            "name": "上週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上週，格式為"ww"形式，如果不傳遞參數，則默認返回當前系統日期的上週，注意如果指定日期在今年第1週，則上週為去年的最後一周\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastWeek("2019-01-30T01:00:00+08:00")\n【返回值】："4"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "NextWeek",
            "name": "下週",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下週，格式為"ww"形式，如果不傳遞參數，則默認返回當前系統日期的下週，注意如果指定日期在今年最後一周，則下週為1\n【 date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：NextWeek("2019-01-30T01:00:00+08:00")\n【返回值】 ："6"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "DayOfWeek",
            "name": "星期幾",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期是本週的星期幾，格式為"n"，如果不傳遞參數，則默認返回當前系統日期是本週的星期幾，注意不是返回英文縮寫，而是返回數字形式。按照中國習慣，星期一為每週首日，返回值為1，星期日為每週尾日，返回值為7\n【date】：日期時間\n【返回值類型】：字符串(System.String )\n【示例】：DayOfWeek("2019-01-30T01:00:00+08:00")\n【返回值】："3"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfWeek",
            "name": "本週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本週第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfWeek",
            "name": "本週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本週最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-03"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastWeek",
            "name": "上週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上週第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfLastWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-21"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastWeek",
            "name": "上週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上週最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上週最後一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfLastWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-27"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextWeek",
            "name": "下週第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下週第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下週第一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfNextWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-04"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextWeek",
            "name": "下週最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下週最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下週最後一天。按照中國習慣，星期一為每週首日，星期日為每週尾日\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfNextWeek(" 2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-10"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfMonth",
            "name": "本月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本月第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfMonth",
            "name": "本月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本月最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本月最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastMonth",
            "name": "上月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上月第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastMonth",
            "name": "上月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上月最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上月最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfLastMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextMonth",
            "name": "下月第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下月第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextMonth",
            "name": "下月最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下月最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下月最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfNextMonth("2019-01-30T01:00:00+08:00")\n【返回值】："2019-02-28"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfYear",
            "name": "本年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本年第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfYear",
            "name": "本年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的本年最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的本年最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfYear("2019-01-30T01:00:00+08:00")\n【返回值】："2019-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfLastYear",
            "name": "上年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上年第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfLastYear",
            "name": "上年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的上年最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的上年最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfLastYear("2019-01-30T01:00:00+08:00")\n【返回值】："2018-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "FirstDayOfNextYear",
            "name": "下年第一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年第一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下年第一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：FirstDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-01-01"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "LastDayOfNextYear",
            "name": "下年最後一天",
            "params": [
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定日期的下年最後一天，格式為"yyyy-MM-dd"，如果不傳遞參數，則默認返回當前系統日期的下年最後一天。 \n【date】：日期時間\n【返回值類型】：字符串(System.String)\n【示例】：LastDayOfNextYear("2019-01-30T01:00:00+08:00")\n【返回值】："2020-12-31"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": "DefaultFunction"
        },
        {
            "key": "GetDate",
            "name": "返回指定形式的日期",
            "params": [
                {
                    "key": "format",
                    "name": "格式串",
                    "type": "string"
                },
                {
                    "key": "date",
                    "name": "日期時間",
                    "type": "string"
                }
            ],
            "description": `【功能】：返回指定形式的日期，如果不傳遞參數，則默認返回當前系統日期的指定形式日期。 \n【format】：格式化串\n【date】：日期時間\n【返回值類型】：字符串(System.String)\n\tDD：今天\tLD：昨天\tND：明天\n\tYY ：本年\tLY：上年\tNY：下年\n\tMM：本月\tLM：上月\tNM：下月\n\tWD：星期幾\n\tWW：本週\tLW：上週\ tNW：下週\n\tFDW：本週首日\tLDW：本週尾日\n\tFDLW：上週首日\tLDLW：上週尾日\n\tFDNW：下週首日\tLDNW：下週尾日\n\tFDM：本月首日\tLDM：本月尾日\n\tFDLM：上月首日\tLDLM：上月尾日\n\tFDNM：下月首日\tLDNM：下月尾日\n\tFDY：本年首日\tLDY：本年尾日\n\tFDLY：上年首日\tLDLY：上年尾日\n\tFDNY：下年首日\tLDNY：下年尾日\n 【示例】：GetDate("LD","2019-01-30T01:00:00+08:00")\n【返回值】："2019-01-29"`,
            "type": "DateTime",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToStringX",
            "name": "轉字符串",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定的對象轉換成字符串\n【obj】：待轉換對象\n【返回值類型】：字符串(System.String)\n【示例】：ToStringX(123)\n【返回值】："123"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDateTime",
            "name": "轉日期時間",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定的對象轉換成日期時間\n【obj】：待轉換對象\n【返回值類型】：日期時間(System.OffsetDateTime)\n【示例】：ToDateTime("2019-01-30T10 :00:00+08:00")\n【返回值】: 2019-01-30T10:00+08:00`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBoolean",
            "name": "轉布爾值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象值轉換成等效的布爾值\n【obj】：待轉換對象\n【返回值類型】：布爾值(System.Boolean)\n【示例】：ToBoolean("True" )\n【返回值】：true`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDecimal",
            "name": "轉數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成十進制數值\n【obj】：待轉換對象\n【返回值類型】：十進制數值(System.BigDecimal)\n【示例】：ToDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToBigDecimal",
            "name": "轉數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成十進制數值\n【obj】：待轉換對象\n【返回值類型】：十進制數值(System.BigDecimal)\n【示例】：ToBigDecimal("40.23")\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToCustomBigDecimal",
            "name": "轉自定義精度數值",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                },
                {
                    "key": "number",
                    "name": "小數位數",
                    "type": "int"
                }
            ],
            "description": `【功能】：將指定對象轉換成十進制數值\n【obj】：待轉換對象\n【返回值類型】：十進制數值(System.BigDecimal)\n【示例】：ToBigDecimal("40.2,2")\n【返回值】：40.20`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToDouble",
            "name": "轉雙精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成雙精度浮點數\n【obj】：待轉換對象\n【返回值類型】：雙精度浮點數(System.Double)\n【示例】：ToDouble("40.23" )\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToSingle",
            "name": "轉單精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成單精度浮點數\n【obj】：待轉換對象\n【返回值類型】：單精度浮點數(System.Float)\n【示例】：ToSingle("40.23") \n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToFloat",
            "name": "轉單精度浮點數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成單精度浮點數\n【obj】：待轉換對象\n【返回值類型】：單精度浮點數(System.Float)\n【示例】：ToFloat("40.23" )\n【返回值】：40.23`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToByte",
            "name": "轉8位無符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成8位無符號整數\n【obj】：待轉換對象\n【返回值類型】：8位無符號整數(System.Byte)\n【示例】：ToByte(" 10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt16",
            "name": "轉16位有符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成16位有符號整數\n【obj】：待轉換對象\n【返回值類型】：16位有符號整數(System.Int16)\n【示例】：ToInt16(" 10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToInt32",
            "name": "轉32位有符號整數",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成32位有符號整數\n【obj】：待轉換對象\n【返回值類型】：32位有符號整數(System.Int32)\n【示例】：ToInt32(" 10")\n【返回值】：10`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "ToChineseMoney",
            "name": "轉中文大寫金額",
            "params": [
                {
                    "key": "obj",
                    "name": "轉換對象",
                    "type": "object"
                }
            ],
            "description": `【功能】：將指定對象轉換成中文大寫金額\n【obj】：待轉換對象\n【返回值類型】：字符串(System.String)\n【示例】：ToChineseMoney(40.23)\n【返回值】："肆拾元零貳角叁分"`,
            "type": "Translate",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetSessionValue",
            "name": "獲取會話變量的值",
            "params": [
                {
                    "key": "name",
                    "name": "會話變量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取用戶會話變量的值\n【name】：會話變量名稱\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetContextParameter",
            "name": "獲取上下文變量的值",
            "params": [
                {
                    "key": "name",
                    "name": "上下文變量名",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取上下文變量的值\n【name】：上下文變量名稱\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "getComputeJsonData",
            "name": "根據屬性名獲取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式屬性名得到JSON串\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【返回值類型】：對象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetComputeJsonData",
            "name": "根據屬性名獲取JSON串",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名稱",
                    "type": "string"
                },
                {
                    "key": "propertyName",
                    "name": "屬性名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式屬性名得到JSON串\n【chainedPropName】鍊式名稱\n【propertyName】屬性名\n【返回值類型】：對象(System.String)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetInjectedEntity",
            "name": "根據注入名獲獲取注入對象",
            "params": [
                {
                    "key": "name",
                    "name": "注入名",
                    "type": "string"
                }
            ],
            "description": `【功能】：獲取運行時注入的對象\n【name】注入名\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "GetChainedPropertyValue",
            "name": "根據屬性名獲取屬性值",
            "params": [
                {
                    "key": "chainedPropName",
                    "name": "鍊式名",
                    "type": "string"
                }
            ],
            "description": `【功能】：根據鍊式屬性名獲取屬性值\n【chainedPropName】鍊式名\n【返回值類型】：對象(System.Object)`,
            "type": "Analytical",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "abs",
            "name": "絕對值",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一個數值的絕對值\n【value】：計算數值\n【返回值類型】：數值(System.Double)\n【示例】：abs(-1.5)\n【返回值】： 1.5`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "Round",
            "name": "四捨五入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把數四捨五入為指定精度的數值\n【value1】：數值\n【value2】：四捨五入小數位數\n【返回值類型】：數值(System.Double)\n【示例】：\ nRound(1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "round",
            "name": "四捨五入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：把數四捨五入為指定精度的數值\n【value1】：數值\n【value2】：四捨五入小數位數\n【返回值類型】：數值(System.Double)\n【示例】：round (1.52,1)\n【返回值】：1.5`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        },
        {
            "key": "random",
            "name": "隨機數",
            "params": [],
            "description": `【功能】：隨機生成大於等於 0.0 且小於 1.0 的偽隨機值\n【返回值類型】：數值(System.Double)\n【示例】：random()\n【返回值】：0.624508349393`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "sin",
            "name": "正弦",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一個數字的正弦值\n【value】：計算數值\n【返回值類型】：數值(System.Double)\n一個以弧度表示的角\n【示例】：sin(1) \n【返回值】：0.84187098`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "cos",
            "name": "餘弦",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回一個數字的餘弦值\n【value】：計算數值\n【返回值類型】：數值(System.Double)\n一個以弧度表示的角\n【示例】：cos(3) \n【返回值】：-0.9899924`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "ceil",
            "name": "向上舍入",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回大於或等於函數參數，並且與之最接近的整數\n【value】：計算數值\n【返回值類型】：數值(System.Int32)\n【示例】：ceil(3.2) \n【返回值】：4`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "floor",
            "name": "向下舍入",
            "params": [
                {
                    "key": "value",
                    "name": "數值",
                    "type": "double"
                }
            ],
            "description": `【功能】：返回小於或等於函數參數，並且與之最接近的整數\n【value】：計算數值\n【返回值類型】：數值(System.Int32)\n【示例】：floor(3.2) \n【返回值】：3`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "BankerRound",
            "name": "銀行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用銀行家舍入標準，把指定數字舍入為最接近的數字\n【value1】：要捨入的數值\n【value2】：要捨入的小數位數\n【返回值類型】：數值(System.Double)\n【示例】：BankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "Math",
            "className": ""
        },
        {
            "key": "bankerRound",
            "name": "銀行家舍入",
            "params": [
                {
                    "key": "value1",
                    "name": "數值",
                    "type": "double"
                },
                {
                    "key": "value2",
                    "name": "小數位數",
                    "type": "int32"
                }
            ],
            "description": `【功能】：使用銀行家舍入標準，把指定數字舍入為最接近的數字\n【value1】：要捨入的數值\n【value2】：要捨入的小數位數\n【返回值類型】：數值(System.Double)\n【示例】：bankerRound(36.124,2)\n【返回值】：36.12`,
            "type": "Math",
            "keyFront": "DefaultFunction",
            "className": ""
        }
    ]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressioneditorComponent {
    /**
     * @param {?} eventService
     * @param {?} injector
     * @param {?} http
     */
    constructor(eventService, injector, http) {
        this.eventService = eventService;
        this.injector = injector;
        this.http = http;
        this.standardFunctions = []; //规范函数
        //规范函数
        this.allFunctions = []; //所有函数，包含不规范
        //所有函数，包含不规范
        this.deprecatedFunctions = [
            "StringSubstring", "StringLength", "StringReplace", "StringToUpper", "StringToLower", "StringIndexOf", "StringLastIndexOf", "StringTrimStart", "StringTrimEnd", "StringTrim", "StringAdd",
            "Round", "BankerRound",
            "getComputeJsonData",
            "ToDecimal", "ToSingle"
        ]; //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        this.currentFuncTabType = "String"; //当前函数选择类型
        //当前函数选择类型
        this.currentVarType = VarType.Context; //当前变量选择类型
        //当前变量选择类型
        this.descriptinfo = ""; //函数说明
        //函数说明
        this.keyInfo = ""; //函数key值
        //函数key值
        this.schema = new Map(); //schema列表
        //schema列表
        this.newSchemaMap = new Map(); //newSchema列表
        //newSchema列表
        this.choseSchemaTableName = new CurrentNode; //选择schema、entity中的表名
        //表达式临时文本
        this.selectedResource = false;
        this.entitywidth = "100%";
        this.adapter = new Adapter();
        this.selectnewfunc = false;
        this.funcExtend = []; //扩展函数实体
        //扩展函数实体
        this.expressionEntity = new ExpressionContextEntity; //表达式内部上下文
        //表达式内部上下文
        this.contextEntities = [];
        this.sessionEntities = [];
        this.injectedEntities = [];
        this.smartHelp = [];
        this.isPanel = false;
        this.funcEntities = [];
        this.gspCDTs = [];
        this.commonObjects = [];
        this.injectSchemaName = "CommonObject";
        this.injectedType = InjectedType.EntityType;
        this.windowWidth = 1000;
        this.result = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
        //消息提示
        this.notifies = {
            1: { type: 'success', msg: '表达式生成！' },
            2: { type: 'warning', msg: '请确保必填项填写完整！' },
            3: { type: 'info', msg: '功能尚未提供！' }
        };
        //编辑器的基本参数
        this.options = {
            theme: 'vs-light',
            language: 'javascript',
            automaticLayout: true
        };
        if (this.injector) {
            this.notifyService = this.injector.get(NotifyService);
            this.http = this.injector.get(HttpClient);
            this.localeId = localStorage.getItem('languageCode');
            this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        }
    }
    //编辑器显示文本绑定
    /**
     * @return {?}
     */
    ngOnInit() {
        //初始化frame i18n资源
        this.Advanced = this.localePipe.transform("Advanced");
        this.String = this.localePipe.transform("String");
        this.Aggregate = this.localePipe.transform("Aggregate");
        this.Estimate = this.localePipe.transform("Estimate");
        this.DateTime = this.localePipe.transform("DateTime");
        this.Translate = this.localePipe.transform("Translate");
        this.Analytical = this.localePipe.transform("Analytical");
        this.Math = this.localePipe.transform("Math");
        this.Extend = this.localePipe.transform("Extend");
        this.Variable = this.localePipe.transform("Variable");
        this.Entity = this.localePipe.transform("Entity");
        this.Help = this.localePipe.transform("Help");
        this.FunctionDescription = this.localePipe.transform("FunctionDescription");
        this.VarDescription = this.localePipe.transform("VarDescription");
        this.CurrentProp = this.localePipe.transform("CurrentProp");
        this.CurrentChosedProp = this.localePipe.transform("CurrentChosedProp");
        //初始化i18n函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        //过滤不规范命名函数
        for (let i = 0; i < this.allFunctions.length; i++) {
            if (!this.deprecatedFunctions.includes(this.allFunctions[i].key)) {
                this.standardFunctions.push(this.allFunctions[i]);
            }
        }
        //区分：弹出框or面板
        if (this.isPanel) {
            this.OninitPanel();
        }
        else {
            this.OninitWindows();
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isPanel) {
            this.OninitPanel();
        }
    }
    //弹出框式
    /**
     * @private
     * @return {?}
     */
    OninitWindows() {
        //若表达式上下文实体为空或其中的预置表达式文本字段为空或文本长度为0，则预置默认的文本
        if (!(this.expressionEntity) || !(this.expressionEntity.expr) || this.expressionEntity.expr.length == 0) {
            this.code = null;
        }
        else {
            //否则，添加预置文本显示
            this.code = this.expressionEntity.expr;
        }
        //初始化各扩展函数实体
        this.expressionEntity.funcEntities.forEach((/**
         * @param {?} funcentity
         * @return {?}
         */
        funcentity => {
            this.funcExtend = this.funcExtend.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.key !== funcentity.key));
            this.funcExtend.push(funcentity);
        }));
        //初始化各上下文实体
        this.expressionEntity.contextEntities.forEach((/**
         * @param {?} contextentity
         * @return {?}
         */
        contextentity => {
            this.contextEntities.push(contextentity);
        }));
        //初始化各系统变量实体
        this.expressionEntity.sessionEntities.forEach((/**
         * @param {?} sessionentity
         * @return {?}
         */
        sessionentity => {
            this.sessionEntities.push(sessionentity);
        }));
        //初始化schema实体类型列表
        this.schema = this.expressionEntity.schemaMap;
        //初始化newSchema实体类型列表
        this.newSchemaMap = this.expressionEntity.newSchemaMap;
        //初始化injectedEntities注入实体
        this.injectedEntities = this.expressionEntity.injectedEntities;
        //初始化smartHelp列表
        this.smartHelp = this.expressionEntity.smartHelpEntities;
    }
    //面板式
    /**
     * @private
     * @return {?}
     */
    OninitPanel() {
        if (this.customNewSchemaName && this.customNewSchema) {
            //注入NewSchema
            this.newSchemaMap.set(this.customNewSchemaName, this.customNewSchema);
            if (this.injectName && this.injectNameInSchema && this.injectSchemaName) {
                this.injectedEntities = this.injectedEntities.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.injectedName !== this.injectName));
                //构造注入实体对象
                /** @type {?} */
                let injectedEntity = new InjectedEntity();
                //若注入的实体名为空，则默认为注入实体在newSchema中的名称
                injectedEntity.name = this.injectName ? this.injectName : this.injectNameInSchema;
                injectedEntity.schemaName = this.injectSchemaName;
                injectedEntity.injectedName = this.injectNameInSchema;
                injectedEntity.injectedType = this.injectedType;
                this.injectedEntities.push(injectedEntity);
            }
            if (this.gspCDTs && this.gspCDTs.length > 0) {
                /** @type {?} */
                let innerSchema = new NewSchema();
                //若newSchemaMap中存在CDT的schema
                if (this.newSchemaMap.get("CDT")) {
                    innerSchema = this.newSchemaMap.get("CDT");
                }
                //将每一个CDT转化为newSchema内部结构中的entityType
                this.gspCDTs.forEach((/**
                 * @param {?} gspCDT
                 * @return {?}
                 */
                gspCDT => {
                    /** @type {?} */
                    let entityType = this.adapter.convertCDTOfNewSchema(gspCDT);
                    innerSchema.entityTypes = innerSchema.entityTypes.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.code !== entityType.code));
                    innerSchema.entityTypes.push(entityType);
                }));
                //将合并后的newSchema放入内部上下文实体中
                this.newSchemaMap.set("CDT", innerSchema);
            }
            if (this.commonObjects && this.commonObjects.length > 0) {
                /** @type {?} */
                let innerSchema = new NewSchema;
                //若newSchemaMap中存在CO的newSchema
                if (this.newSchemaMap.get("CommonObject")) {
                    innerSchema = this.newSchemaMap.get("CommonObject");
                }
                this.commonObjects.forEach((/**
                 * @param {?} co
                 * @return {?}
                 */
                co => {
                    //将每一个CO转化为schema内部结构中的entityType
                    /** @type {?} */
                    let entityTypes = this.adapter.convertCOOfNewSchema(co);
                    entityTypes.forEach((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    entityType => {
                        innerSchema.entityTypes = innerSchema.entityTypes.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.code !== entityType.code));
                        innerSchema.entityTypes.push(entityType);
                        /** @type {?} */
                        let entitySet = new NewEntitySet;
                        entitySet.code = entityType.code + "s";
                        entitySet.name = entityType.name;
                        entitySet.entityType = entityType.code;
                        innerSchema.entitySets = innerSchema.entitySets.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.code !== entitySet.code));
                        innerSchema.entitySets.push(entitySet);
                    }));
                }));
                //将合并后的newSchema放入内部上下文实体中
                this.newSchemaMap.set("CommonObject", innerSchema);
            }
        }
        else if (this.customSchemaName && this.customSchema) {
            //注入旧Schema对象
            this.schema.set(this.customSchemaName, this.customSchema);
            if (this.injectName && this.injectNameInSchema && this.injectSchemaName) {
                this.injectedEntities = this.injectedEntities.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.injectedName !== this.injectName));
                //构造注入实体对象
                /** @type {?} */
                let injectedEntity = new InjectedEntity();
                //若注入的实体名为空，则默认为注入实体在schema中的名称
                injectedEntity.name = this.injectName ? this.injectName : this.injectNameInSchema;
                injectedEntity.schemaName = this.injectSchemaName;
                injectedEntity.injectedName = this.injectNameInSchema;
                injectedEntity.injectedType = this.injectedType;
                this.injectedEntities.push(injectedEntity);
            }
            if (this.gspCDTs && this.gspCDTs.length > 0) {
                /** @type {?} */
                let innerSchema = new Schema();
                //若schemaMap中存在CDT的schema
                if (this.schema.get("CDT")) {
                    innerSchema = this.schema.get("CDT");
                }
                //将每一个CDT转化为schema内部结构中的entityType
                this.gspCDTs.forEach((/**
                 * @param {?} gspCDT
                 * @return {?}
                 */
                gspCDT => {
                    /** @type {?} */
                    let entityType = this.adapter.convertCDT(gspCDT);
                    innerSchema.entityTypes = innerSchema.entityTypes.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.id !== entityType.id));
                    innerSchema.entityTypes.push(entityType);
                }));
                //将合并后的schema放入内部上下文实体中
                this.schema.set("CDT", innerSchema);
            }
            //处理旧Schema的CO对象
            if (this.commonObjects && this.commonObjects.length > 0) {
                /** @type {?} */
                let innerSchema = new Schema;
                //若schemaMap中存在CO的schema
                if (this.schema.get("CommonObject")) {
                    innerSchema = this.schema.get("CommonObject");
                }
                this.commonObjects.forEach((/**
                 * @param {?} co
                 * @return {?}
                 */
                co => {
                    //将每一个CO转化为schema内部结构中的entityType
                    /** @type {?} */
                    let entityTypes = this.adapter.convertCO(co);
                    entityTypes.forEach((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    entityType => {
                        innerSchema.entityTypes = innerSchema.entityTypes.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.id !== entityType.id));
                        innerSchema.entityTypes.push(entityType);
                        /** @type {?} */
                        let entitySet = new EntitySet;
                        entitySet.name = entityType.name + "s";
                        entitySet.entityType = entityType.name;
                        entitySet.description = entityType.description;
                        innerSchema.entitySets = innerSchema.entitySets.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.name !== entitySet.name));
                        innerSchema.entitySets.push(entitySet);
                    }));
                }));
                //将合并后的schema放入内部上下文实体中
                this.schema.set("CommonObject", innerSchema);
            }
        }
        //初始化扩展函数
        if (this.funcEntities.length > 0) {
            this.funcEntities.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                this.funcExtend = this.funcExtend.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.key !== element.key));
                this.funcExtend.push(element);
            }));
        }
        //预置编辑框显示值
        /** @type {?} */
        let textEntity = (/** @type {?} */ (JSON.parse(this.text ? this.text : null)));
        if (textEntity && textEntity.expr) {
            //加载Antlr4工具
            /** @type {?} */
            let inputStream = new InputStream.InputStream(textEntity.expr);
            /** @type {?} */
            let lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
            /** @type {?} */
            let tokens = new CommonTokenStream.CommonTokenStream(lexer);
            tokens.fill();
            //tokens切分的js文本抽取到array中
            /** @type {?} */
            let array = new Array();
            for (let index = 0; index < tokens.tokens.length - 1; index++) {
                array[index] = tokens.tokens[index].text;
            }
            //遍历array的js文本，每个js文本遍历allFunctions查找对应的语义化文本，封装为str
            /** @type {?} */
            var str = "";
            for (let index = 0; index < array.length; index++) {
                if (((array[index] == "DefaultFunction") || (array[index] == "Math")) && (array[index + 1] == ".")) {
                    continue;
                }
                else if (array[index] == "." && (array[index - 1] == "DefaultFunction" || array[index - 1] == "Math")) {
                    continue;
                }
                else {
                    /** @type {?} */
                    var num = 0;
                    //遍历上下文变量
                    if (num == 0) {
                        for (let i = 0; i < this.contextEntities.length; i++) {
                            if (array[index] == ("\"" + this.contextEntities[i].key + "\"")) {
                                str = str + "\"" + this.contextEntities[i].name + "\"";
                                num = 1;
                                break;
                            }
                        }
                    }
                    //遍历session变量
                    if (num == 0) {
                        for (let i = 0; i < this.sessionEntities.length; i++) {
                            if (array[index] == ("\"" + this.sessionEntities[i].key + "\"")) {
                                str = str + "\"" + this.sessionEntities[i].name + "\"";
                                num = 1;
                                break;
                            }
                        }
                    }
                    //计数器num：如果遍历allFunctions没找到对应字段，则直接拼接(num=0)；否则替换(num=1)
                    if (num == 0) {
                        for (let i = 0; i < this.allFunctions.length; i++) {
                            if (array[index] == this.allFunctions[i].key) {
                                if (this.allFunctions[i].type != "Advanced") {
                                    str = str + this.allFunctions[i].name;
                                    num = 1;
                                    break;
                                }
                            }
                        }
                    }
                    //如果计数器为0，证明没有语义化匹配。显示原始数据
                    if (num == 0) {
                        str = str + array[index];
                    }
                }
            }
            this.code = str;
        }
        else {
            this.code = null;
        }
    }
    //编辑器初始化事件句柄
    /**
     * @param {?} $event
     * @return {?}
     */
    onInitHandler($event) {
    }
    //编辑器表达式改变事件句柄
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeHandler(event) {
        this.expressioninfo = event.data;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchedHandler($event) {
    }
    /**
     * 函数选择tab也切换事件
     * @param {?} $event
     * @return {?}
     */
    funcTabChange($event) {
        this.currentFuncTabType = $event.nextId;
    }
    //函数表格中选择行事件
    /**
     * @param {?} $event
     * @return {?}
     */
    selectFuncRowChange($event) {
        this.descriptinfo = this.FunctionDescription + $event.description;
        this.eventService.clearVarSelect();
        this.selectnewfunc = true;
    }
    //变量：类型选择                        (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    selectVarRowChange($event) {
        this.currentVarType = $event.id;
    }
    //变量：描述                            (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    selectVarInfoRowChange($event) {
        this.descriptinfo = this.VarDescription + $event.description;
        this.eventService.clearFuncSelect();
    }
    //schema表名选择                        (未使用)
    /**
     * @param {?} $event
     * @return {?}
     */
    selectschemaChange($event) {
        this.choseSchemaTableName = $event;
    }
    //数据：父组件单击描述                   (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    selectentitychange($event) {
        this.choseSchemaTableName = $event;
        if ($event.nodeType == "Complex") {
            this.entitywidth = "80%";
            this.selectedResource = true;
        }
        else {
            this.entitywidth = "100%";
            this.selectedResource = false;
        }
        this.descriptinfo = this.CurrentProp + $event.name + "-->" + $event.description;
    }
    //数据：子组件单击描述                   (farris单击事件，不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    selectschemainfoChange($event) {
        this.descriptinfo = this.CurrentChosedProp + $event.name + "-->" + $event.description;
    }
    //变量：双击插入                        (farris双击事件：调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    dbclickVarInsert($event) {
        if ($event) {
            switch (this.currentVarType) {
                case VarType.Context:
                    for (let i = 0; i < this.standardFunctions.length; i++) {
                        if (this.standardFunctions[i].key == "GetContextParameter") {
                            this.eventService.insertExpression(this.standardFunctions[i].name + "(\"" + $event.data.name + "\")");
                            break;
                        }
                    }
                    break;
                case VarType.Session:
                    for (let i = 0; i < this.standardFunctions.length; i++) {
                        if (this.standardFunctions[i].key == "GetSessionValue") {
                            this.eventService.insertExpression(this.standardFunctions[i].name + "(\"" + $event.data.name + "\")");
                            break;
                        }
                    }
                    break;
                default:
                    break;
            }
        }
    }
    //双击插入schema表信息                  (未使用)
    /**
     * @param {?} $event
     * @return {?}
     */
    dbclickSchemaInfoInsert($event) {
        if ($event) {
            this.eventService.insertExpression($event.data);
        }
    }
    //数据：双击插入                        (双击事件：不调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    dbclickEntityInsert($event) {
        if ($event) {
            this.eventService.insertExpression($event);
        }
    }
    //数据子组件：双击插入                  (farris双击事件：子组件已修改)
    /**
     * @param {?} $event
     * @return {?}
     */
    dbclickEntityInfoInsert($event) {
        if ($event) {
            this.eventService.insertExpression($event);
        }
    }
    //智能帮助：双击                        (未使用)          
    /**
     * @param {?} $event
     * @return {?}
     */
    dbclickSmartHelpInsert($event) {
        if ($event) {
            this.eventService.insertExpression($event.data);
        }
    }
    /**
     * \@description 函数：双击插入          (farris双击事件：调整)
     * @param {?} $event
     * 1：判断是否为Advanced，如果是：直接获取对应的name插入;如果不是：获取对应的name，然后拼接参数
     * @return {?}
     */
    dbclickInsert($event) {
        //插入编辑框的语义化文本insertText
        /** @type {?} */
        let insertText = $event.data.key;
        //根据$event.data.key找到函数的语义化名称
        for (var index = 0; index < this.standardFunctions.length; index++) {
            if (insertText == this.standardFunctions[index].key) {
                insertText = this.standardFunctions[index].name;
                break;
            }
        }
        //如果不是Advanced，拼接参数
        if ($event.data.type != "Advanced") {
            insertText += "(";
            /** @type {?} */
            let paramsList = $event.data.params;
            for (let i = 0; i <= paramsList.length - 1; i++) {
                if (paramsList.length == 1) {
                    //一个参数，无需添加逗号。参数类型为String则首尾追加""，其他直接添加
                    if (paramsList[0].type == "string") {
                        insertText += "\"" + paramsList[0].name + "\"";
                    }
                    else {
                        insertText += paramsList[0].name;
                    }
                }
                else {
                    //多个参数，添加逗号分隔参数
                    if (i != paramsList.length - 1) {
                        //参数不是最后一位
                        if (paramsList[i].type == "string") {
                            insertText += "\"" + paramsList[i].name + "\",";
                        }
                        else {
                            insertText += paramsList[i].name + ",";
                        }
                    }
                    else {
                        //参数是最后一位
                        if (paramsList[i].type == "string") {
                            insertText += "\"" + paramsList[i].name + "\"";
                        }
                        else {
                            insertText += paramsList[i].name;
                        }
                    }
                }
            }
            insertText += ")";
        }
        this.keyInfo = insertText;
        this.eventService.insertExpression(this.keyInfo);
    }
    /**
     * \@description 获取表达式串
     * 保存时，进行语义化-->js的转换
     * 1：封装ExpressionEntity    属性：expr, sexpr
     * 2：判断有无expr；有则使用Antlr4进行解析转换
     *    2.1：Antlr4工具拿到数组Array
     *    2.2：根据数组元素与name的对应，替换为key
     *    2.3：替换后的数组元素拼接出str
     * @return {?}
     */
    getExprs() {
        /** @type {?} */
        let exprEntity = new ExpressionEntity;
        exprEntity.expr = this.expressioninfo;
        exprEntity.sexpr = this.expressionEntity.sexpr;
        if (exprEntity.expr == null || exprEntity.expr == "") {
            this.result.emit(null);
        }
        else {
            //2：expr不为空，使用Antlr4进行解析
            /** @type {?} */
            let inputStream = new InputStream.InputStream(exprEntity.expr);
            /** @type {?} */
            let lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
            /** @type {?} */
            let tokens = new CommonTokenStream.CommonTokenStream(lexer);
            tokens.fill();
            /** @type {?} */
            let array = new Array();
            for (let index = 0; index < tokens.tokens.length - 1; index++) {
                array[index] = tokens.tokens[index].text;
            }
            //遍历所有的token
            for (let index = 0; index < array.length; index++) {
                /** @type {?} */
                let num = 0;
                if (num == 0) {
                    //遍历上下文变量
                    for (let i = 0; i < this.expressionEntity.contextEntities.length; i++) {
                        if (array[index] == ("\"" + this.expressionEntity.contextEntities[i].name + "\"")) {
                            array[index] = "\"" + this.expressionEntity.contextEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    //遍历session变量
                    for (let i = 0; i < this.expressionEntity.sessionEntities.length; i++) {
                        if (array[index] == ("\"" + this.expressionEntity.sessionEntities[i].name + "\"")) {
                            array[index] = "\"" + this.expressionEntity.sessionEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    //遍历函数
                    for (let indexTok = 0; indexTok < this.standardFunctions.length; indexTok++) {
                        if (array[index] == this.standardFunctions[indexTok].name) {
                            array[index] = this.standardFunctions[indexTok].keyFront + '.' + this.standardFunctions[indexTok].key;
                            num = 1;
                            break;
                        }
                    }
                }
            }
            //封装js表达式文本expressionStr
            /** @type {?} */
            let expressionStr = "";
            for (let index = 0; index < array.length; index++) {
                expressionStr = expressionStr + array[index];
            }
            exprEntity.expr = expressionStr;
            this.result.emit(JSON.stringify(exprEntity));
        }
    }
    //获取表达式串
    /**
     * @return {?}
     */
    getExpr() {
        /** @type {?} */
        let exprEntity = new ExpressionEntity;
        exprEntity.expr = this.expressioninfo;
        exprEntity.sexpr = this.expressionEntity.sexpr;
        if (exprEntity.expr == null || exprEntity.expr == "") {
            this.result.emit(null);
        }
        else {
            //2：expr不为空，使用Antlr4进行解析
            /** @type {?} */
            let inputStream = new InputStream.InputStream(exprEntity.expr);
            /** @type {?} */
            let lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
            /** @type {?} */
            let tokens = new CommonTokenStream.CommonTokenStream(lexer);
            tokens.fill();
            /** @type {?} */
            let array = new Array();
            for (let index = 0; index < tokens.tokens.length - 1; index++) {
                array[index] = tokens.tokens[index].text;
            }
            for (let index = 0; index < array.length; index++) {
                /** @type {?} */
                let num = 0;
                if (num == 0) {
                    //遍历上下文变量
                    for (let i = 0; i < this.contextEntities.length; i++) {
                        if (array[index] == ("\"" + this.contextEntities[i].name + "\"")) {
                            array[index] = "\"" + this.contextEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    //遍历session变量
                    for (let i = 0; i < this.sessionEntities.length; i++) {
                        if (array[index] == ("\"" + this.sessionEntities[i].name + "\"")) {
                            array[index] = "\"" + this.sessionEntities[i].key + "\"";
                            num = 1;
                            break;
                        }
                    }
                }
                if (num == 0) {
                    for (let indexTok = 0; indexTok < this.standardFunctions.length; indexTok++) {
                        if (array[index] == this.standardFunctions[indexTok].name) {
                            array[index] = this.standardFunctions[indexTok].keyFront + '.' + this.standardFunctions[indexTok].key;
                            num = 1;
                            break;
                        }
                    }
                }
            }
            //封装js表达式文本expressionStr
            /** @type {?} */
            let expressionStr = "";
            for (let index = 0; index < array.length; index++) {
                expressionStr = expressionStr + array[index];
            }
            exprEntity.expr = expressionStr;
            return JSON.stringify(exprEntity);
        }
    }
    //重置
    /**
     * @return {?}
     */
    reset() {
        this.expressioninfo = null;
        this.code = null;
        this.eventService.pushclearExpression();
    }
    //校验
    /**
     * @return {?}
     */
    check() {
        console.log(this.expressioninfo);
        if (this.notifyService) {
            this.notifyService[this.notifies['3'].type]({
                msg: this.notifies['3'].msg
            });
        }
        else {
            alert("功能尚未提供！");
        }
    }
    //帮助
    /**
     * @return {?}
     */
    help() {
        if (this.notifyService) {
            this.notifyService[this.notifies['3'].type]({
                msg: this.notifies['3'].msg
            });
        }
        else {
            alert("功能尚未提供！");
        }
    }
    //导入
    /**
     * @return {?}
     */
    import() {
        if (this.notifyService) {
            this.notifyService[this.notifies['3'].type]({
                msg: this.notifies['3'].msg
            });
        }
        else {
            alert("功能尚未提供！");
        }
    }
    //手动实时更改显示值
    /**
     * @param {?} textii
     * @return {?}
     */
    changeText(textii) {
        //预置编辑框显示值
        /** @type {?} */
        let textEntity = (/** @type {?} */ (JSON.parse(textii ? textii : null)));
        if (textEntity && textEntity.expr) {
            this.code = textEntity.expr;
        }
        else {
            this.code = null;
        }
    }
    /**
     * @param {?} injectName
     * @param {?=} injectSchemaName
     * @param {?=} injectNameInSchema
     * @param {?=} injectedType
     * @return {?}
     */
    changeInjectEntity(injectName, injectSchemaName = "CommonObject", injectNameInSchema, injectedType = InjectedType.EntityType) {
        if (injectName && injectNameInSchema && injectSchemaName) {
            //构造注入实体对象
            /** @type {?} */
            let injectedEntity = new InjectedEntity();
            //若注入的实体名为空，则默认为注入实体在schema中的名称
            injectedEntity.name = injectName ? injectName : injectNameInSchema;
            injectedEntity.schemaName = injectSchemaName;
            injectedEntity.injectedName = injectNameInSchema;
            injectedEntity.injectedType = injectedType;
            this.expressionEntity.injectedEntities.push(injectedEntity);
        }
        this.injectedEntities = this.expressionEntity.injectedEntities;
    }
    /**
     * @param {?} commonObjects
     * @return {?}
     */
    changeCO(commonObjects) {
        if (commonObjects && commonObjects.length > 0) {
            /** @type {?} */
            let schema;
            //若schemaMap中存在CO的schema
            if (this.expressionEntity.schemaMap.get("CommonObject")) {
                schema = this.expressionEntity.schemaMap.get("CommonObject");
            }
            else
                schema = new Schema;
            commonObjects.forEach((/**
             * @param {?} co
             * @return {?}
             */
            co => {
                //将每一个CO转化为schema内部结构中的entityType
                /** @type {?} */
                let entityTypes = this.adapter.convertCO(co);
                entityTypes.forEach((/**
                 * @param {?} entityType
                 * @return {?}
                 */
                entityType => {
                    schema.entityTypes.push(entityType);
                    /** @type {?} */
                    let entitySet = new EntitySet;
                    entitySet.name = entityType.name + "s";
                    entitySet.entityType = entityType.name;
                    entitySet.description = entityType.description;
                    schema.entitySets.push(entitySet);
                }));
            }));
            //将合并后的schema放入内部上下文实体中
            this.schema.set("CommonObject", schema);
        }
    }
    /**
     * @param {?} contextEntities
     * @return {?}
     */
    changeContextVar(contextEntities) {
        contextEntities.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.contextEntities = this.contextEntities.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.key !== item.key));
            this.contextEntities.push(item);
        }));
    }
    /**
     * @return {?}
     */
    hide() {
        this.selectnewfunc = false;
    }
    //#region 编辑符号方法
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////编辑符号方法
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @return {?}
     */
    onDoubleQuotation() {
        this.eventService.insertExpression("\"\"");
    }
    /**
     * @return {?}
     */
    onEqual() {
        this.eventService.insertExpression(" == ");
    }
    /**
     * @return {?}
     */
    onSparen() {
        this.eventService.insertExpression("()");
    }
    /**
     * @return {?}
     */
    onBrace() {
        this.eventService.insertExpression("[]");
    }
    /**
     * @return {?}
     */
    onAnd() {
        this.eventService.insertExpression(" && ");
    }
    /**
     * @return {?}
     */
    onOr() {
        this.eventService.insertExpression(" || ");
    }
    /**
     * @return {?}
     */
    onExclamation() {
        this.eventService.insertExpression("!");
    }
    /**
     * @return {?}
     */
    onIequal() {
        this.eventService.insertExpression(" == ");
    }
    /**
     * @return {?}
     */
    onUnequal() {
        this.eventService.insertExpression(" != ");
    }
    /**
     * @return {?}
     */
    onLess() {
        this.eventService.insertExpression(" < ");
    }
    /**
     * @return {?}
     */
    onLessequal() {
        this.eventService.insertExpression(" <= ");
    }
    /**
     * @return {?}
     */
    onMore() {
        this.eventService.insertExpression(" > ");
    }
    /**
     * @return {?}
     */
    onMoreequal() {
        this.eventService.insertExpression(" >= ");
    }
    /**
     * @return {?}
     */
    onPlus() {
        this.eventService.insertExpression(" + ");
    }
    /**
     * @return {?}
     */
    onMinus() {
        this.eventService.insertExpression(" - ");
    }
    /**
     * @return {?}
     */
    onMultiple() {
        this.eventService.insertExpression("*");
    }
    /**
     * @return {?}
     */
    onDivision() {
        this.eventService.insertExpression("/");
    }
    /**
     * @return {?}
     */
    onPercent() {
        this.eventService.insertExpression("%");
    }
    /**
     * @return {?}
     */
    onAssign() {
        this.eventService.insertExpression(" = ");
    }
    /**
     * @return {?}
     */
    onOppose() {
        this.eventService.insertExpression("!");
    }
}
ExpressioneditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expressioneditor',
                template: "<div class=\"h-100 f-utils-flex-column\">\r\n<div id=\"main\" style=\"width:100%;padding-left: 20px;\">\r\n  <div id=\"left\" style=\"width:87%;float:left;border:1px solid #D9D9D9\">\r\n    <div style=\"height:136px;\" class=\"position-relative\">\r\n        <app-my-monaco-editor style=\"z-index: 125;\" [options]=\"options\" [(ngModel)]=\"code\" (onInit)=\"onInitHandler($event)\"\r\n        (onTouched)=\"onTouchedHandler($event)\" (onChange)=\"onChangeHandler($event)\" class=\"f-utils-absolute-all\"> </app-my-monaco-editor>\r\n    </div>\r\n  </div>\r\n  <div id=\"right\" style=\"width:13%;float:left;\">\r\n      <button class=\"btn f-btn-mr btn-primary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=check()>{{ 'CheckFront' | locale }}</button>\r\n      <button class=\"btn f-btn-mr btn-secondary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=reset()>{{ 'ResetFront' | locale }}</button>\r\n      <button class=\"btn f-btn-mr btn-secondary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=help()>{{ 'HelpFront' | locale }}</button>\r\n      <button class=\"btn f-btn-mr btn-secondary\" type=\"button\" style=\"height: 28px;width: 110px;margin-left: 8px;margin-bottom: 8px\" (click)=import()>{{ 'ImportFront' | locale }}</button>\r\n  </div>\r\n</div>\r\n<div id=\"select\" class=\"f-utils-fill\">\r\n  <div id=\"left\" style=\"width:50%;height:100%;float:left;padding-left: 20px;\">\r\n    <div style=\"height:100%;border:1px solid rgb(235, 233, 233)\">\r\n      <farris-tabs style=\"height:100%\" [value]=\"'String'\" [contentFill]=\"true\" (tabChange)=\"funcTabChange($event)\">\r\n          <farris-tab [title]=\"this.Advanced\" [id]=\"'Advanced'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Advanced'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.String\" [id]=\"'String'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'String'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Math\" [id]=\"'Math'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Math'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n        <farris-tab [title]=\"this.Estimate\" [id]=\"'Estimate'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Estimate'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n        <farris-tab [title]=\"this.DateTime\" [id]=\"'DateTime'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'DateTime'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n        <farris-tab [title]=\"this.Translate\" [id]=\"'Translate'\">\r\n            <ng-template #content>\r\n                <div style=\"height:100%\">\r\n                    <app-expr-func-grid [currentFuncTabType]=\"'Translate'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                </div>\r\n            </ng-template>\r\n        </farris-tab>\r\n          <farris-tab [title]=\"this.Aggregate\" [id]=\"'Aggregate'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                      <app-expr-func-grid [currentFuncTabType]=\"'Aggregate'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Analytical\" [id]=\"'Analytical'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                      <app-expr-func-grid [currentFuncTabType]=\"'Analytical'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Extend\" [id]=\"'Extend'\">\r\n              <ng-template #content>\r\n                  <div style=\"height:100%\">\r\n                      <app-expr-func-grid [funcExtend]=\"funcExtend\" [currentFuncTabType]=\"'Extend'\" (selectFuncRow)=\"selectFuncRowChange($event)\" (dbclickInsert)=\"dbclickInsert($event)\"></app-expr-func-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n      </farris-tabs>\r\n    </div>\r\n  </div>\r\n  <div id=\"middle\" class=\"position-relative\" style=\"width:36%;height:100%;float:left;padding-left: 7px;border:1px solid rgb(235, 233, 233)\">\r\n    <farris-tabs [value]=\"'Variable'\" [contentFill]=\"true\" class=\"f-utils-absolute-all\" style=\"left:6px;right:5px\">\r\n          <farris-tab [title]=\"this.Variable\" [id]=\"'Variable'\" class=\"f-utils-overflow-hidden\">\r\n              <ng-template #content>\r\n                  <div style=\"width: 100%;height: 100%; display: flex;\">\r\n                      <div class=\"f-utils-flex-column position-relative\" style=\"width: 30%;height: 100%;\" ngResizable [rzMinWidth]=\"40\"\r\n                          [rzMaxWidth]=\"400\" [rzHandles]=\"'e'\" rzAspectRatio=\"true\">\r\n                          <app-expression-var-grid (selectVarRow)=\"selectVarRowChange($event)\" [h1]=\"this.http\" class=\"f-utils-fill\"></app-expression-var-grid>\r\n                      </div>\r\n                      <div class=\"f-utils-flex-column position-relative\" style=\"width: 70%;height: 100%;flex: 1 1 auto; border-left: 1px solid #ddd;\">\r\n                          <app-expression-var-info-grid \r\n                          class=\"f-utils-fill\"\r\n                          [currentVarType]=\"currentVarType\"  \r\n                          [contextEntities]=\"contextEntities\"\r\n                          [sessionEntities]=\"sessionEntities\"\r\n                          (selectVarInfoRow)=\"selectVarInfoRowChange($event)\" \r\n                          (dbclickInsert)=\"dbclickVarInsert($event)\">\r\n                        </app-expression-var-info-grid>\r\n                      </div>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <farris-tab [title]=\"this.Entity\" [id]=\"'Entity'\">\r\n              <ng-template #content>\r\n                  <div class = \"f-utils-absolute-all f-utils-flex-row\">\r\n                      <div class = \"f-utils-fill-flex-column\" style=\"width:entitywidth;\" ngResizable [rzMinWidth]=\"40\"\r\n                          [rzMaxWidth]=\"800\" [rzHandles]=\"'e'\" rzAspectRatio=\"true\">\r\n                          <app-expression-entity-grid class=\"f-utils-fill-flex-column\"\r\n                          [schema]=\"schema\"\r\n                          [newSchemaMap]=\"newSchemaMap\"\r\n                          [injectedEntities]=\"injectedEntities\"\r\n                          (dbclickInsert)=\"dbclickEntityInsert($event)\" \r\n                          (selectentitychange)=\"selectentitychange($event)\"\r\n                          ></app-expression-entity-grid> \r\n                      </div>\r\n                      <div *ngIf = selectedResource class = \"f-utils-flex-column col-3 px-0\" style=\"border-left: 1px solid #ddd;\">\r\n                          <app-expression-entity-info-grid class = \"f-utils-fill-flex-column\"\r\n                          [schema]=\"schema\" \r\n                          [newSchemaMap]=\"newSchemaMap\"\r\n                          [choseEntityTableName]=\"choseSchemaTableName\"\r\n                          (dbclickInsert)=\"dbclickEntityInfoInsert($event)\"\r\n                          (selectSchemaRow)=\"selectschemainfoChange($event)\"\r\n                          ></app-expression-entity-info-grid>\r\n                      </div>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n          <!-- <farris-tab [title]=\"'\u5B9E\u4F53\u7C7B\u578B'\" [id]=\"'EntityType'\">\r\n              <ng-template #content>\r\n                  <div style=\"width: 100%;height: 100%; display: flex;\" >\r\n                      <div style=\"width: 50%;height: 268px; \" ngResizable [rzMinWidth]=\"40\"\r\n                          [rzMaxWidth]=\"500\" [rzHandles]=\"'e'\" rzAspectRatio=\"true\" >\r\n                          <app-expression-schema-grid \r\n                          [schema]=\"schema\" \r\n                          (selectschemachange)=\"selectschemaChange($event)\"\r\n                          ></app-expression-schema-grid> \r\n                      </div>\r\n                      <div style=\"width: 50%; flex: 1 1 auto; border-left: 1px solid #ddd;\">\r\n                          <app-expression-schema-info-grid \r\n                          [schema]=\"schema\" \r\n                          [choseSchemaTableName]=\"choseSchemaTableName\"\r\n                          (dbclickInsert)=\"dbclickSchemaInfoInsert($event)\"\r\n                          (selectSchemaRow)=\"selectschemainfoChange($event)\"\r\n                          ></app-expression-schema-info-grid>\r\n                      </div>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab> -->\r\n          <farris-tab [title]=\"this.Help\" [id]=\"'Help'\" class=\"f-utils-overflow-hidden\">\r\n              <ng-template #content>\r\n                  <div class=\"f-utils-flex-column position-relative\" style=\"width: 100%;height: 100%\">\r\n                    <app-expression-smart-help-grid \r\n                    class=\"f-utils-fill\"\r\n                    [smartHelp]=\"smartHelp\"\r\n                    (dbclickInsert)=\"dbclickSmartHelpInsert($event)\"\r\n                    ></app-expression-smart-help-grid>\r\n                  </div>\r\n              </ng-template>\r\n          </farris-tab>\r\n      </farris-tabs>\r\n  </div>\r\n  <div id=\"right\" style=\"width:14%;float: left;padding-left: 5px;padding-right: 15px;\">\r\n      <div style=\"border: 0 solid #D9D9D9;border-radius: 3px;\">\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onPlus()\">+</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMinus()\">-</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMultiple()\">*</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onDivision()\">/</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onPercent()\">%</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onAssign()\">=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onDoubleQuotation()\">\" \"</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onEqual()\">==</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onUnequal()\">!=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMoreequal()\">>=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onLessequal()\"><=</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onLess()\">{{'<'}}</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onMore()\">{{'>'}}</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onBrace()\">[&nbsp;]</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onSparen()\">(&nbsp;)</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onOr()\">||</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onAnd()\">&&</button>\r\n            <button type=\"button\" class=\"btn cbtn btn-secondary\" (click)=\"onOppose()\">!</button>\r\n      </div>       \r\n  </div>\r\n</div>\r\n<div *ngIf = selectnewfunc style=\"padding-left: 20px;position: absolute;bottom: 0;left: 0;right: 0;border-top: 1px solid #ddd;z-index: 100;background: white\">\r\n    <span style=\"\r\n    position: absolute;\r\n    top: -18px;\r\n    left: 50%;\r\n    border-radius: 4px;\r\n    width: 40px;\r\n    height: 18px;\r\n    cursor: pointer;\r\n    background: #fff;\r\n    text-align: center;\r\n    border: 1px solid #efecec;\r\n    /* box-shadow: 0 0 6px 0 rgba(57,66,100,.08); */\r\n    color: #59a1ff;\r\n    border-bottom: none;\r\n\"><i class=\"f-icon f-icon-arrow-seek-down\" (click)=\"hide()\"></i></span>\r\n    <span>\r\n      <i class=\"f-icon f-icon-info\"></i>\r\n    </span>\r\n    {{descriptinfo}}\r\n</div>\r\n</div>\r\n",
                styles: [".cbtn{width:40px;height:40px;background:#fdfdfd;border:1px solid #d0d0d0;border-radius:3px;text-align:center}"]
            }] }
];
/** @nocollapse */
ExpressioneditorComponent.ctorParameters = () => [
    { type: ExpressionEventService },
    { type: Injector, decorators: [{ type: Optional }] },
    { type: HttpClient }
];
ExpressioneditorComponent.propDecorators = {
    funcExtend: [{ type: Input }],
    expressionEntity: [{ type: Input }],
    contextEntities: [{ type: Input }],
    sessionEntities: [{ type: Input }],
    injectedEntities: [{ type: Input }],
    smartHelp: [{ type: Input }],
    text: [{ type: Input }],
    isPanel: [{ type: Input }],
    funcEntities: [{ type: Input }],
    gspCDTs: [{ type: Input }],
    commonObjects: [{ type: Input }],
    customSchemaName: [{ type: Input }],
    customSchema: [{ type: Input }],
    injectName: [{ type: Input }],
    injectSchemaName: [{ type: Input }],
    injectNameInSchema: [{ type: Input }],
    injectedType: [{ type: Input }],
    customNewSchemaName: [{ type: Input }],
    customNewSchema: [{ type: Input }],
    windowWidth: [{ type: Input }],
    result: [{ type: Output }],
    closeModalEmitter: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboData {
    constructor() {
        this.treeInfo = new ComboTreeInfo;
        this.parentHierarchyInfo = new ComboParentHierarchyInfo;
    }
}
class ComboTreeInfo {
}
class ComboParentHierarchyInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComputeRuleComponent {
    /**
     * @param {?} msgSer
     * @param {?} notifyService
     * @param {?} injector
     * @param {?} modalService
     * @param {?} compFactRes
     */
    constructor(msgSer, notifyService, injector, modalService, compFactRes) {
        this.msgSer = msgSer;
        this.notifyService = notifyService;
        this.injector = injector;
        this.modalService = modalService;
        this.compFactRes = compFactRes;
        this.expr = ""; //表达式串
        //表达式串
        this.result = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
        this.contextEntity = new ExpressionContextEntity; //表达式内部上下文
        //表达式内部上下文
        this.conditions = [
            {
                computeField: '',
                fieldName: '',
                value: '',
                lbracket: '(',
                rbracket: ')',
                relation: "&&",
                operator: "=="
            }
        ];
        this.advancedModalConfig = {
            title: "高级表达式",
            width: 1060,
            height: 610,
            showButtons: true
        };
        this.title = "条件表达式";
        this.height = 350;
        this.width = 750;
        this.LeftBracketData = ["(", "((", "(((", "(((("];
        this.RighttBracketData = [")", "))", ")))", "))))"];
        this.columnSizeData = [50, 130, 70, 100, 50, 50, 50];
        this.currentCondition = null;
        this.operators = [
            {
                label: "大于",
                value: ">"
            },
            {
                label: "大于等于",
                value: ">="
            },
            {
                label: "等于",
                value: "=="
            },
            {
                label: "不等于",
                value: "!="
            },
            {
                label: "小于",
                value: "<"
            },
            {
                label: "小于等于",
                value: "<="
            },
            {
                label: "等于(字符串)",
                value: "equal"
            },
            {
                label: "不等于(字符串)",
                value: "notequal"
            },
            {
                label: "为空",
                value: "==null"
            },
            {
                label: "不为空",
                value: "!=null"
            },
            {
                label: "包含",
                value: "Contains"
            },
            {
                label: "不包含",
                value: "NotContains"
            },
            {
                label: "开头是",
                value: "StartsWith"
            },
            {
                label: "开头不是",
                value: "NotStartsWith"
            },
            {
                label: "结尾是",
                value: "EndsWith"
            },
            {
                label: "结尾不是",
                value: "NotEndsWith"
            }
        ];
        this.relationData = [
            {
                label: "并且",
                value: "&&"
            },
            {
                label: "或者",
                value: "||"
            }
        ];
        this.notifies = {
            1: { type: 'success', msg: '表达式生成！' },
            2: { type: 'warning', msg: '请确保必填项填写完整！' },
        };
        this.entities = [];
        this.newItem = {
            computeField: '',
            fieldName: '',
            value: '',
            lbracket: '(',
            rbracket: ')',
            relation: "&&",
            operator: "=="
        };
    }
    // propertyList = {
    //   columns:[{
    //             "field": "name",
    //             "title": "名称",
    //             "width": 100,
    //             "hAlign": "left",
    //             "align": "left",
    //             "formatter": null
    //         }],
    //   items:[
    //           {
    //             "id": "order",
    //             "code": "order",
    //             "name": "订单",
    //             "treeInfo": {
    //                 // "isDetail": false,
    //                 "layer": 1,
    //                 "path": "0001"
    //             }
    //           },
    //           {
    //             "id": "orderItem01",
    //             "code": "orderItem01",
    //             "name": "订单明细",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "orderItem02",
    //             "code": "orderItem02",
    //             "name": "订单明细02",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 2,
    //                 "path": "00010002"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "order"
    //             }
    //           },
    //           {
    //             "id": "price",
    //             "code": "price",
    //             "name": "数量",
    //             "treeInfo": {
    //                 // "isDetail": true,
    //                 "layer": 3,
    //                 "path": "000100020001"
    //             },
    //             "parentHierarchyInfo": {
    //               // "isDetail": true,
    //               // "layer": 2,
    //               // "sequence": 1,
    //               "parentElement": "orderItem02"
    //             }
    //           }
    //       ],
    //   treeInfo: {
    //         "loadDataType": "all",
    //         "layerType": "pathcode",
    //         "dataField": "treeInfo",
    //         "pathField": "path",
    //         "layerField": "layer",
    //         "isDetailField": "isDetail",
    //         "onlySelectLeaf": false,
    //         "parentField": "parentElement",
    //         "treeDataIsInit": false
    //     },
    //   displayType: "TreeList"
    // }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.contextEntity.sexpr) {
            this.conditions = (/** @type {?} */ (JSON.parse(this.contextEntity.sexpr)));
        }
        if (this.contextEntity.injectedEntities && this.contextEntity.injectedEntities.length > 0) {
            this.OninitSchemaEntity(this.contextEntity.injectedEntities, this.contextEntity.schemaMap);
        }
        this.propertyList = {
            columns: [{
                    "field": "name",
                    "title": "名称",
                    "width": 100,
                    "hAlign": "left",
                    "align": "left",
                    "formatter": null
                }],
            items: this.entities,
            treeInfo: {
                "loadDataType": "all",
                "layerType": "pathcode",
                "dataField": "treeInfo",
                "pathField": "path",
                "layerField": "layer",
                "isDetailField": "isDetail",
                "onlySelectLeaf": false,
                "parentField": "parentElement",
                "treeDataIsInit": false
            },
            displayType: "TreeList"
        };
    }
    /**
     * @param {?} index
     * @return {?}
     */
    insert(index) {
        /** @type {?} */
        const _newItem = Object.assign({}, this.newItem);
        this.conditions.splice(index + 1, 0, _newItem);
        // if (index  === 0) {
        //     this.conditions.unshift(_newItem);
        // } else {
        //     this.conditions.splice(index+1, 0, _newItem);
        // }
        this.changeConditionList();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    remove(index) {
        /** @type {?} */
        let num = index + 1;
        this.msgSer.confirm('确认删除第' + num + '行数据?').subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result) {
                if (index != 0) {
                    this.conditions.splice(index, 1);
                }
                else if (this.conditions.length > 1) {
                    this.conditions.splice(index, 1);
                }
                else {
                    this.conditions = [
                        {
                            computeField: '',
                            fieldName: '',
                            value: '',
                            lbracket: '(',
                            rbracket: ')',
                            relation: "&&",
                            operator: "=="
                        }
                    ];
                }
                this.changeConditionList();
                if (this.currentCondition) {
                    if (index === this.currentCondition.index) {
                        this.currentCondition = null;
                    }
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    onAddFilter() {
        // this.conditions = [...this.conditions, Object.assign({}, this.newCondition)];
        // this.changeConditionList();
    }
    /**
     * @return {?}
     */
    onClear() {
        // this.messagerService.question('确认要清空当前所有条件吗？', () => {
        //     this.conditions = [];
        //     this.changeConditionList();
        // });
    }
    /**
     * @return {?}
     */
    toTop() {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    toUp() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index - 1, 0, ...tempArr);
            this.currentCondition.index = index - 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    toDown() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index + 1, 0, ...tempArr);
            this.currentCondition.index = index + 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    toBottom() {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList();
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeConditionList() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selected($event) {
        // console.log($event);
        this.currentCondition = $event;
    }
    /**
     * 打开高级表达式
     * @return {?}
     */
    openAdvancedExpression() {
        /** @type {?} */
        let that = this;
        this.openAdvancedExpr().then((/**
         * @param {?} expre
         * @return {?}
         */
        expre => {
            that.result.emit(JSON.stringify(expre));
        }));
        this.closeModalEmitter.emit("close");
    }
    /**
     * @return {?}
     */
    openAdvancedExpr() {
        /** @type {?} */
        let that = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            const compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
            /** @type {?} */
            const compRef = compFactory.create(that.injector);
            compRef.instance.expressionEntity = that.contextEntity;
            compRef.instance.expressionEntity.expr = that.convertExpr(that.conditions);
            /** @type {?} */
            let dialog = that.modalService.show(compRef, {
                title: "高级表达式",
                width: 1060,
                height: 610,
                buttons: [
                    { text: '保存', cls: 'btn btn-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            compRef.instance.getExprs();
                            dialog.close();
                        }) },
                    { text: '取消', cls: 'btn btn-secondary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            dialog.close();
                        }) }
                ],
                showButtons: true
            });
            compRef.instance.result.subscribe((/**
             * @param {?} expressionContent
             * @return {?}
             */
            (expressionContent) => {
                return resolve(expressionContent);
            }));
        }));
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        let expression = new ExpressionEntity();
        expression.expr = this.convertExpr(this.conditions);
        expression.sexpr = JSON.stringify(this.conditions);
        this.result.emit(JSON.stringify(expression));
        this.notifyService[this.notifies['1'].type]({
            msg: this.notifies['1'].msg
        });
        this.closeModalEmitter.emit("close");
    }
    /**
     * 重置
     * @return {?}
     */
    reset() {
        this.conditions = [
            {
                computeField: '',
                fieldName: '',
                value: '',
                lbracket: '(',
                rbracket: ')',
                relation: "&&",
                operator: "=="
            }
        ];
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.closeModalEmitter.emit("close");
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    isSelected($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    }
    /**
     * 转化为表达式串
     * @private
     * @param {?} conditions
     * @return {?}
     */
    convertExpr(conditions) {
        this.expr = "";
        if (conditions) {
            /** @type {?} */
            let count = 0;
            /** @type {?} */
            let length = conditions.length;
            conditions.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                count++;
                if (count < length) {
                    if (item.operator == "==" || item.operator == "!=" || item.operator == ">" ||
                        item.operator == ">=" || item.operator == "<" || item.operator == "<=") {
                        this.expr = this.expr + item.lbracket + item.computeField + item.operator + item.value + item.rbracket + item.relation;
                    }
                    else {
                        switch (item.operator) {
                            case "equal":
                                this.expr = this.expr + item.lbracket + item.computeField + "==\"" + item.value + "\"" + item.rbracket + item.relation;
                                break;
                            case "notequal":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=\"" + item.value + "\"" + item.rbracket + item.relation;
                                break;
                            case "==null":
                                this.expr = this.expr + item.lbracket + item.computeField + "==null" + item.rbracket + item.relation;
                                break;
                            case "!=null":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=null" + item.rbracket + item.relation;
                                break;
                            case "Contains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.Contains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotContains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotContains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "StartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.StartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotStartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotStartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "EndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.EndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                            case "NotEndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotEndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket + item.relation;
                                break;
                        }
                    }
                }
                else {
                    if (item.operator == "==" || item.operator == "!=" || item.operator == ">" ||
                        item.operator == ">=" || item.operator == "<" || item.operator == "<=") {
                        this.expr = this.expr + item.lbracket + item.computeField + item.operator + item.value + item.rbracket;
                    }
                    else {
                        switch (item.operator) {
                            case "equal":
                                this.expr = this.expr + item.lbracket + item.computeField + "==\"" + item.value + "\"" + item.rbracket;
                                break;
                            case "notequal":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=\"" + item.value + "\"" + item.rbracket;
                                break;
                            case "==null":
                                this.expr = this.expr + item.lbracket + item.computeField + "==null" + item.rbracket;
                                break;
                            case "!=null":
                                this.expr = this.expr + item.lbracket + item.computeField + "!=null" + item.rbracket;
                                break;
                            case "Contains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.Contains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotContains":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotContains(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "StartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.StartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotStartsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotStartsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "EndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.EndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                            case "NotEndsWith":
                                this.expr = this.expr + item.lbracket + "DefaultFunction.NotEndsWith(" + item.computeField + ",\"" + item.value + "\")" + item.rbracket;
                                break;
                        }
                    }
                }
            }));
        }
        return this.expr;
    }
    //初始化Schema格式的Entity
    /**
     * @param {?} injectedEntities
     * @param {?} schema
     * @return {?}
     */
    OninitSchemaEntity(injectedEntities, schema) {
        if (injectedEntities && injectedEntities.length > 0) {
            this.entities = [];
            //实体显示禁忌表
            /** @type {?} */
            let navigatorMap = new Map();
            /** @type {?} */
            let numcount = 1;
            //解析每一个注入实体，将其转化为TreeNode
            injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            injectEntity => {
                //根据schema名称找到对应的schema
                /** @type {?} */
                let currentSchema = schema.get(injectEntity.schemaName);
                switch (injectEntity.injectedType) {
                    //注入的若为实体集
                    case InjectedType.EntitySet:
                        break;
                    //注入的若为实体类型
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            let entityType = currentSchema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            entityType => entityType.name == injectEntity.injectedName));
                            this.ConvertEntityType(entityType, "", currentSchema, navigatorMap, 1, "", numcount);
                        }
                        break;
                }
                numcount++;
            }));
        }
    }
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ConvertEntitySet(entitySet, schema, navigatorMap) {
        // if (entitySet) {
        //   //将entityset转化为TreeNode结构用于展示
        //   let treeNode= new ComboData;
        //   treeNode.treeInfo.
        //   //将转化完成的实体集添加进禁忌表，防止循环转化
        //   navigatorMap.set(entitySet.name, InjectedType.EntitySet);
        //   //找到实体集对应的实体类型
        //   let entityType = schema.entityTypes.find(entityType => entityType.name == entitySet.entityType);
        //   //将entitytype转化为TreeNode结构用于展示
        //   this.ConvertEntityType(entityType, schema, navigatorMap).children.forEach(child => {
        //     treeNode.children.push(child);
        //   });
        //   return treeNode;
        //}
        //实体集为空或未定义则返回空
        //else return null;
    }
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} parentId
     * @param {?} schema
     * @param {?} navigatorMap
     * @param {?} layer
     * @param {?} parentPath
     * @param {?} pathNum
     * @return {?}
     */
    ConvertEntityType(entityType, parentId, schema, navigatorMap, layer, parentPath, pathNum) {
        if (entityType) {
            /** @type {?} */
            let mainTreeNode = new ComboData;
            mainTreeNode.code = entityType.name;
            mainTreeNode.name = entityType.name;
            mainTreeNode.treeInfo.layer = layer;
            mainTreeNode.treeInfo.path = parentPath + this.getPath(pathNum);
            if (parentId) {
                mainTreeNode.id = parentId + "." + entityType.name;
                mainTreeNode.parentHierarchyInfo.parentElement = parentId;
            }
            else {
                mainTreeNode.id = entityType.name;
            }
            this.entities.push(mainTreeNode);
            //将转化的entitytype添加进禁忌表
            navigatorMap.set(entityType.name + entityType.id, InjectedType.EntityType);
            //将每个属性转化为每个TreeNode
            /** @type {?} */
            let propertyNum = 1;
            entityType.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                /** @type {?} */
                let propertyTree = new ComboData;
                propertyTree.id = mainTreeNode.id + "." + property.name;
                propertyTree.code = property.name;
                propertyTree.name = property.name;
                propertyTree.treeInfo.layer = layer + 1;
                propertyTree.treeInfo.path = mainTreeNode.treeInfo.path + this.getPath(propertyNum);
                propertyNum++;
                propertyTree.parentHierarchyInfo.parentElement = mainTreeNode.id;
                this.entities.push(propertyTree);
            }));
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            navigationProperty => {
                //判断是否导航属性对应的名称在禁忌表中
                if (!(navigatorMap.get(navigationProperty.name + navigationProperty.navigationId))) {
                    if (navigationProperty.type == NavigationType.EntitySet) ; //若为实体类型
                    else if (navigationProperty.type == NavigationType.EntityType) {
                        /** @type {?} */
                        let entityType = schema.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        entitytype => entitytype.id == navigationProperty.navigationId && entitytype.name == navigationProperty.name));
                        this.ConvertEntityType(entityType, mainTreeNode.id, schema, navigatorMap, layer + 1, mainTreeNode.treeInfo.path, propertyNum + 1);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    let navigatortree = new ComboData;
                    navigatortree.id = mainTreeNode.id + "." + navigationProperty.name;
                    navigatortree.code = navigationProperty.name;
                    navigatortree.name = navigationProperty.name;
                    navigatortree.treeInfo.layer = layer + 1;
                    navigatortree.treeInfo.path = mainTreeNode.treeInfo.path + this.getPath(propertyNum);
                    navigatortree.parentHierarchyInfo.parentElement = mainTreeNode.id;
                    this.entities.push(navigatortree);
                }
                propertyNum++;
            }));
        }
        //若entitytype为空或未定义
        else
            return null;
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    getPath(path) {
        /** @type {?} */
        let num = "";
        if (path < 10) {
            num = "000" + path;
        }
        else if (10 <= path && path < 100) {
            num = "00" + path;
        }
        else if (100 <= path && path < 1000) {
            num = "0" + path;
        }
        else {
            num = path + "";
        }
        return num;
    }
}
ComputeRuleComponent.decorators = [
    { type: Component, args: [{
                selector: 'svc-compute-rule',
                template: "    <div style=\"background: #f0ffffe0;width: 100%;\">\r\n        <button type=\"button\" title=\"\u4E0A\u79FB\" class=\"k-button k-button-icon k-flat\" (click)=\"toUp()\"><span class=\"k-icon k-i-arrow-up\"></span></button>\r\n        <button type=\"button\" title=\"\u4E0B\u79FB\" class=\"k-button k-button-icon k-flat\" (click)=\"toDown()\"><span class=\"k-icon k-i-arrow-down\"></span></button>\r\n        <button type=\"button\" title=\"\u7F6E\u9876\" class=\"k-button k-button-icon k-flat\" (click)=\"toTop()\"><span class=\"k-icon k-i-arrow-end-up\"></span></button>\r\n        <button type=\"button\" title=\"\u57AB\u5E95\" class=\"k-button k-button-icon k-flat\" (click)=\"toBottom()\"><span class=\"k-icon k-i-arrow-end-down\"></span></button>\r\n    </div>\r\n    <div class=\"table-header \">\r\n        <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n            <colgroup>\r\n                <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n            </colgroup>\r\n            <thead>\r\n                <tr>\r\n                    <th align=\"center\"><b>&nbsp;\u5DE6\u62EC\u53F7</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u6570\u636E</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u6BD4\u8F83\u7B26</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u503C</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u53F3\u62EC\u53F7</b></th>\r\n                    <th align=\"center\"><b>&nbsp;\u5173\u7CFB</b></th>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n        </table>\r\n    </div>\r\n    <div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n        <perfect-scrollbar [config]=\"{}\">\r\n            <table class=\"table table-bordered\">\r\n                <colgroup>\r\n                    <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n                </colgroup>\r\n                <tbody>\r\n                    <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\">\r\n                        <td>\r\n                            <select class=\"form-control filter-select\" [(ngModel)]=\"condition.lbracket\" name=\"lbracket\">\r\n                            <option *ngFor=\"let item of LeftBracketData\" [value]=\"item\">{{ item }}</option>\r\n                            </select>\r\n                        </td>\r\n              <td>\r\n                  <farris-combo-lookup\r\n                    [(ngModel)]=\"condition.computeField\"\r\n                    [idField]=\"'id'\"\r\n                    [textField]=\"'id'\"\r\n                    [displayType]=\"'LOOKUPTREELIST'\"\r\n                    [data]=\"propertyList\"\r\n                  ></farris-combo-lookup>\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\" [(ngModel)]=\"condition.operator\" name=\"operator\">\r\n                      <option *ngFor=\"let item of operators\" [value]=\"item.value\">{{item.label}}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                  <input type=\"text\" style=\"width:100%\" placeholder=\"\" class=\"k-textbox\" name=\"value\" [(ngModel)]=\"condition.value\">\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\"  [(ngModel)]=\"condition.rbracket\" name=\"rbracket\">\r\n                      <option *ngFor=\"let item of RighttBracketData\" [value]=\"item\">{{ item }}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                  <select class=\"form-control filter-select\" [(ngModel)]=\"condition.relation\" name=\"relation\">\r\n                    <option *ngFor=\"let item of relationData\" [value]=\"item.value\">{{ item.label }}</option>\r\n                  </select>\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" (click)=\"insert(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                <button type=\"button\" (click)=\"remove(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-delete\"></span></button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n      </table>\r\n  </perfect-scrollbar>\r\n</div>\r\n<div class=\"modal-footer footer\">\r\n    <a class=\"mr-auto\" href=\"javascript: void(0);\" (click)=\"openAdvancedExpression()\" > \u9AD8\u7EA7\u8868\u8FBE\u5F0F \uFF1E</a>\r\n    <button type=\"button\" class=\"btn f-btn-mr btn-primary\" (click)=\"confirm()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"reset()\">\u91CD\u7F6E</button>\r\n    <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</div>\r\n\r\n\r\n",
                styles: [".filter-select{width:100%;padding-left:0;padding-right:0}.selected{background:#c2e4ff}.footer{position:absolute;bottom:0;left:0;right:0;justify-content:flex-start}"]
            }] }
];
/** @nocollapse */
ComputeRuleComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver }
];
ComputeRuleComponent.propDecorators = {
    result: [{ type: Output }],
    closeModalEmitter: [{ type: Output }],
    contextEntity: [{ type: Input }],
    conditions: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// injectionToken作用说明
// https://segmentfault.com/a/1190000008626348
/** @type {?} */
const MY_MONACO_EDITOR_CONFIG = new InjectionToken('MY_MONACO_EDITOR_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CODE_EDITOR_EVENTS = {
    onInit: 'onInit',
    onChange: 'onChange',
    onTouched: 'onTouched'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CodeEditorEventService {
    constructor() {
        this.eventNames = Object.keys(CODE_EDITOR_EVENTS);
        this._events = {}; // 使用事件
    }
    // 使用事件
    /**
     * 设置启用事件
     * @param {?} event
     * @return {?}
     */
    addEvent(event) {
        assign(this._events, event);
        // console.log(this.events);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    fireEvent(event) {
        this._events[event.eventName].emit(event);
        // console.log("Emit Event:" + event);
    }
}
CodeEditorEventService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let loadedMonaco = false;
/** @type {?} */
let loadPromise;
// 自定义输入控件:1.封装ControlValueAccessor
// https://code-examples.net/zh-CN/q/2154761
/** @type {?} */
const CODE_EDITOR_INPUT_VALUE_ACCESSOR = {
    // https://blog.csdn.net/wangdan_2013/article/details/81314959
    provide: NG_VALUE_ACCESSOR,
    //
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => MyMonacoEditorComponent)),
    //
    multi: true //
};
/** @type {?} */
const monacoConfig = {
    baseUrl: 'assets',
    defaultOptions: { scrollBeyondLastLine: false }
};
const ɵ0 = monacoConfig;
// 自定义输入控件 <-> Monaco Edtor
// 自定义输入控件:3.1 implements ControlValueAccessor 
class MyMonacoEditorComponent {
    // 注入AngularMonacoEditorConfig，在创建Editor实例时设置config
    /**
     * @param {?} zone
     * @param {?} config
     * @param {?} codeEditorEventService
     * @param {?} eventService
     */
    constructor(zone, config, codeEditorEventService, eventService) {
        this.zone = zone;
        this.config = config;
        this.codeEditorEventService = codeEditorEventService;
        this.eventService = eventService;
        this._value = '';
        //ControlValueAccessor提供的事件回调
        this.onChangeHandler = (/**
         * @param {?} _
         * @return {?}
         */
        (_$$1) => {
            this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onChange,
                target: this,
                data: _$$1
            });
        });
        //ControlValueAccessor提供的事件回调
        this.onTouchedHandler = (/**
         * @return {?}
         */
        () => {
            this.codeEditorEventService.fireEvent({
                eventName: CODE_EDITOR_EVENTS.onTouched,
                target: this
            });
        });
        // 初始化自定义事件
        /** @type {?} */
        const self = this;
        codeEditorEventService.eventNames.forEach((/**
         * @param {?} name
         * @return {?}
         */
        (name) => {
            // 创建自定义事件，此处作用等效于: @Output() onInit = new EventEmitter<any>() 
            self[name] = new EventEmitter();
            /** @type {?} */
            const eventPair = pick(self, name);
            codeEditorEventService.addEvent(eventPair);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        // 默认options(this.config.defaultOptions) + 自定义options(options)
        this._options = Object.assign({}, this.config.defaultOptions, options);
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(options);
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    //在光标处插入表达式的方法
    /**
     * @param {?} insertWord
     * @return {?}
     */
    insertWord(insertWord) {
        if (insertWord && insertWord != undefined && insertWord != "") {
            /** @type {?} */
            let p = {
                lineNumber: 1,
                column: 1
            };
            if (this._editor) {
                p = this._editor.getPosition();
            }
            /** @type {?} */
            let range = new monaco.Range(p.lineNumber, p.column, p.lineNumber, p.column);
            /** @type {?} */
            let id = { major: 1, minor: 1 };
            /** @type {?} */
            let text = insertWord;
            /** @type {?} */
            let op = { identifier: id, range: range, text: text, forceMoveMarkers: true };
            this._editor.executeEdits("my-source", [op]);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then((/**
             * @return {?}
             */
            () => {
                this.initMonaco(this.options);
            }));
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            (resolve) => {
                // const baseUrl = this.config.baseUrl || '/assets';
                /** @type {?} */
                const baseUrl = '/platform/common/web/caf';
                // if (typeof((<any>window).monaco) === 'object') {
                //   resolve();
                //   return;
                // }
                /** @type {?} */
                const onGotAmdLoader = (/**
                 * @return {?}
                 */
                () => {
                    // Load monaco
                    ((/** @type {?} */ (window))).require.config({ paths: { 'vs': `${baseUrl}/monaco/vs` } });
                    ((/** @type {?} */ (window))).require(['vs/editor/editor.main'], (/**
                     * @return {?}
                     */
                    () => {
                        this.onMonacoLoad();
                        this.initMonaco(this.options);
                        resolve();
                    }));
                });
                // Load AMD loader if necessary
                if (!((/** @type {?} */ (window))).require) {
                    /** @type {?} */
                    const loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = `${baseUrl}/monaco/vs/loader.js`;
                    loaderScript.onload = onGotAmdLoader;
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            }));
        }
        //在光标处插入表达式事件订阅
        /** @type {?} */
        let temp = this;
        this.eventService.currentExpression().subscribe((/**
         * @param {?} insertexpression
         * @return {?}
         */
        (insertexpression) => {
            if (temp._editor != undefined) {
                temp.insertWord(insertexpression);
            }
        }));
        this.eventService.clearExpression().subscribe((/**
         * @return {?}
         */
        () => {
            if (temp._editor != undefined) {
                temp._editor.setValue("");
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    onMonacoLoad() {
        /** @type {?} */
        const id = "foo.json";
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
            validate: true,
            schemas: [{
                    uri: "http://myserver/foo-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            p1: {
                                enum: ["v1", "v2"]
                            },
                            p2: {
                                $ref: "http://myserver/bar-schema.json"
                            }
                        }
                    }
                }, {
                    uri: "http://myserver/bar-schema.json",
                    fileMatch: [id],
                    schema: {
                        type: "object",
                        properties: {
                            q1: {
                                enum: ["x1", "x2"]
                            }
                        }
                    }
                }]
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    }
    /**
     * @protected
     * @param {?} options
     * @return {?}
     */
    initMonaco(options) {
        debugger;
        console.log("Init the custom monaco code editor.");
        // if (hasModel) {
        //   options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
        // }
        this._editor = monaco.editor.create(this._editorComponent.nativeElement, options);
        {
            this._editor.setValue(this._value);
        }
        // monaco editor -> outside component
        this._editor.onDidChangeModelContent((/**
         * @return {?}
         */
        () => this.onChangeModelContentHandler()));
        this._editor.onDidBlurEditorText((/**
         * @return {?}
         */
        () => this.onBlurEditorTextHandler()));
        // refresh layout on resize event.
        // if (this._windowResizeSubscription) {
        //   this._windowResizeSubscription.unsubscribe();
        // }
        // this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
        this.codeEditorEventService.fireEvent({
            eventName: CODE_EDITOR_EVENTS.onInit,
            target: this,
            editor: this._editor
        });
    }
    /**
     * @return {?}
     */
    onChangeModelContentHandler() {
        /** @type {?} */
        const _value = this._editor.getValue();
        // monaco editor -> outside component
        // https://github.com/JTangming/tm/issues/4 ngZone详解
        this.zone.run((/**
         * @return {?}
         */
        () => this.value = _value)); // value is not propagated to parent when executing outside zone.
        // console.log("write from the monaco:" + this._value);
    }
    /**
     * @return {?}
     */
    onBlurEditorTextHandler() {
        this.onTouchedHandler();
    }
    //get accessor
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    ;
    //set accessor including call the onchange callback
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.value) { // 注意这种写法，值得学习
            this._value = v;
        }
        this.onChangeHandler(this.value); //在属性修饰器里调用onchangeHandler方法
    }
    /**
     * @return {?}
     */
    localEditor() {
        this.writeValue('test');
    }
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value || '';
        // Fix for value change while dispose in process.
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this._editor /*&& !this.options.model*/) {
                this._editor.setValue(this._value);
                // console.log("write to the editor:" + this._value);
            }
        }));
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeHandler(this);
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedHandler();
    }
}
MyMonacoEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-my-monaco-editor',
                template: "<div class=\"editor h-100\" #codeEditor></div>",
                // 自定义输入控件:2.引入依赖服务ControlValueAccessor
                providers: [CODE_EDITOR_INPUT_VALUE_ACCESSOR,
                    CodeEditorEventService,
                    {
                        provide: MY_MONACO_EDITOR_CONFIG,
                        useValue: ɵ0
                    }
                ],
                styles: [":host{display:block;height:100%}"]
            }] }
];
/** @nocollapse */
MyMonacoEditorComponent.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [MY_MONACO_EDITOR_CONFIG,] }] },
    { type: CodeEditorEventService },
    { type: ExpressionEventService }
];
MyMonacoEditorComponent.propDecorators = {
    _editorComponent: [{ type: ViewChild, args: ['codeEditor',] }],
    onInit: [{ type: Output }],
    onChange: [{ type: Output }],
    onTouched: [{ type: Output }],
    options: [{ type: Input, args: ['options',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MyMonacoEditorModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            ngModule: MyMonacoEditorModule,
            providers: [
                { provide: MY_MONACO_EDITOR_CONFIG, useValue: config }
            ]
        };
    }
}
MyMonacoEditorModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                exports: [
                    MyMonacoEditorComponent
                ],
                entryComponents: [
                    MyMonacoEditorComponent
                ],
                declarations: [
                    MyMonacoEditorComponent
                ],
                providers: [
                    CodeEditorEventService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FuncOnEntity {
    constructor() {
        this.className = "";
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExprFuncGridComponent {
    /**
     * @param {?} eventService
     * @param {?} injector
     * @param {?} http
     */
    constructor(eventService, injector, http) {
        this.eventService = eventService;
        this.injector = injector;
        this.http = http;
        this.currentFuncTabType = "String";
        this.funcExtend = [];
        this.selectFuncRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.standardFunctions = []; //规范函数
        //规范函数
        this.allFunctions = []; //所有函数，包含不规范
        //所有函数，包含不规范
        this.deprecatedFunctions = [
            "StringSubstring", "StringLength", "StringReplace", "StringToUpper", "StringToLower", "StringIndexOf", "StringLastIndexOf", "StringTrimStart", "StringTrimEnd", "StringTrim", "StringAdd",
            "Round", "BankerRound",
            "getComputeJsonData",
            "ToDecimal", "ToSingle"
        ]; //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        //函数调整，一些函数由于命名不规范而不使用，并为这些函数提供规范命名的实现。为了支持已经保存的表达式，不规范命名函数将会保留，但是会被过滤掉
        this.columns = [];
        // if(this.injector)
        // {
        // this.http=this.injector.get(HttpClient);
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        // }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.eventService.subClearFuncSelect().subscribe((/**
         * @return {?}
         */
        () => {
            this.dg.clearAll();
        }));
        this.columns = [
            { field: 'name', title: this.localePipe.transform("FunctionSemanticName"), width: 180 },
            { field: 'key', title: this.localePipe.transform("FunctionName"), width: 180 },
            { field: 'param', title: this.localePipe.transform("FunctionParameter"), width: 250 }
        ];
        //获取i18n函数资源；过滤不规范命名函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        for (let i = 0; i < this.allFunctions.length; i++) {
            if (!this.deprecatedFunctions.includes(this.allFunctions[i].key)) {
                this.standardFunctions.push(this.allFunctions[i]);
            }
        }
        switch (this.currentFuncTabType) {
            case "String":
                this.findFunctionByType("String");
                break;
            case "DateTime":
                this.findFunctionByType("DateTime");
                break;
            case "Aggregate":
                this.findFunctionByType("Aggregate");
                break;
            case "Translate":
                this.findFunctionByType("Translate");
                break;
            case "Estimate":
                this.findFunctionByType("Estimate");
                break;
            case "Math":
                this.findFunctionByType("Math");
                break;
            case "Analytical":
                this.findFunctionByType("Analytical");
                break;
            case "Advanced":
                this.findFunctionByType("Advanced");
                break;
            case "Extend":
                this.findFunctionByType("Extend");
                break;
        }
        /** @type {?} */
        let itmeList = [];
        /**
         * 封装提供给表达式编辑器
         * 1：Advanced使用key,不使用name
         */
        this.items.forEach((/**
         * @param {?} funcitem
         * @return {?}
         */
        funcitem => {
            /** @type {?} */
            let func = new FuncOnEntity;
            if (funcitem.type == "Advanced") {
                func.name = funcitem.key;
            }
            else {
                func.name = funcitem.name;
            }
            func.key = funcitem.key;
            func.params = funcitem.params;
            func.type = funcitem.type;
            func.className = funcitem.className;
            func.description = funcitem.description;
            func.param = "(";
            for (let i = 0; i < funcitem.params.length - 1; i++) {
                // func.param = func.param + funcitem.params[i].name + ":" + funcitem.params[i].type + ",";
                func.param = func.param + funcitem.params[i].key + ",";
            }
            if (funcitem.params.length != 0) {
                // func.param = func.param + funcitem.params[funcitem.params.length - 1].name + ":" + funcitem.params[funcitem.params.length - 1].type + ")";
                func.param = func.param + funcitem.params[funcitem.params.length - 1].key + ")";
            }
            else
                func.param = func.param + ")";
            itmeList.push(func);
        }));
        this.items = itmeList;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        this.dbclickInsert.emit($event.rowData);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectFuncRow.emit($event.data);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    findFunctionByType(type) {
        this.items = [];
        this.standardFunctions.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.type == type) {
                this.items.push(element);
            }
        }));
    }
}
ExprFuncGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expr-func-grid',
                template: "<div style=\"height: 100%;width: 100%;\">\r\n<farris-datagrid #dg\r\n[idField]=\"'key'\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"false\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[headerHeight]=\"30\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExprFuncGridComponent.ctorParameters = () => [
    { type: ExpressionEventService },
    { type: Injector },
    { type: HttpClient }
];
ExprFuncGridComponent.propDecorators = {
    dg: [{ type: ViewChild, args: ['dg',] }],
    currentFuncTabType: [{ type: Input }],
    funcExtend: [{ type: Input }],
    selectFuncRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionVarGridComponent {
    constructor() {
        this.selectVarRow = new EventEmitter();
        this.columns = [
            { field: 'name', title: '名称' },
        ];
        this.items = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.items = [
            {
                name: this.localePipe.transform("VariableSessionValue"),
                id: VarType.Session
            },
            {
                name: this.localePipe.transform("VariableContextParameter"),
                id: VarType.Context
            }
        ];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectVarRow.emit($event.data);
    }
}
ExpressionVarGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-var-grid',
                template: "<farris-datagrid\r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"false\"\r\n[headerHeight]=\"30\"\r\n[pagination]=\"false\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionVarGridComponent.ctorParameters = () => [];
ExpressionVarGridComponent.propDecorators = {
    h1: [{ type: Input }],
    selectVarRow: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionVarInfoGridComponent {
    // private http = new HttpClient();
    /**
     * @param {?} eventService
     */
    constructor(eventService) {
        this.eventService = eventService;
        this.currentVarType = VarType.Context;
        this.contextEntities = [];
        this.sessionEntities = [];
        this.selectVarInfoRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        this.columns = [
            { field: 'key', title: this.localePipe.transform("VariableName"), width: '20%', filter: true },
            { field: 'name', title: this.localePipe.transform("VariableSemanticNameValue"), width: '30%', filter: true }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.eventService.subClearFuncSelect().subscribe((/**
         * @return {?}
         */
        () => {
            this.dg.clearAll();
        }));
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        switch (this.currentVarType) {
            case VarType.Context:
                this.items = this.contextEntities;
                break;
            case VarType.Session:
                this.items = this.sessionEntities;
                break;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        this.dbclickInsert.emit($event.rowData);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectVarInfoRow.emit($event.data);
    }
}
ExpressionVarInfoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-var-info-grid',
                template: "<farris-datagrid #dg\r\n[idField]=\"'key'\"\r\n[height]=\"268\"\r\n[width]=\"430\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[enableFilterRow]=\"true\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionVarInfoGridComponent.ctorParameters = () => [
    { type: ExpressionEventService }
];
ExpressionVarInfoGridComponent.propDecorators = {
    dg: [{ type: ViewChild, args: ['dg',] }],
    currentVarType: [{ type: Input }],
    contextEntities: [{ type: Input }],
    sessionEntities: [{ type: Input }],
    selectVarInfoRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionSchemaGridComponent {
    constructor() {
        this.schema = new Map();
        this.selectschemachange = new EventEmitter();
        this.currentNode = new CurrentNode;
        this.cols = [
            { field: 'name', title: '纲要名称' }
        ];
        this.treedata = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.convertSchema();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.currentNode = new CurrentNode;
        this.currentNode.id = $event.node.data.id;
        this.currentNode.name = $event.node.data.name;
        this.currentNode.parentName = $event.node.parent.data.name;
        this.selectschemachange.emit(this.currentNode);
    }
    /**
     * @return {?}
     */
    convertSchema() {
        this.schema.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let treeitem = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "type": "",
                    "description": ""
                },
                children: []
            };
            treeitem.data.name = key;
            treeitem.data.type = "Schema";
            treeitem.data.description = value.description;
            value.entityTypes.forEach((/**
             * @param {?} entitytype
             * @return {?}
             */
            entitytype => {
                /** @type {?} */
                let typetree = {
                    data: {
                        "id": "",
                        "name": "",
                        "type": "",
                        "description": ""
                    },
                    children: [],
                    parent: treeitem
                };
                typetree.data.id = entitytype.id;
                typetree.data.name = entitytype.name;
                typetree.data.type = "EntityType";
                typetree.data.description = entitytype.description;
                treeitem.children.push(typetree);
            }));
            this.treedata.push(treeitem);
        }));
    }
}
ExpressionSchemaGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-schema-grid',
                template: "<farris-treetable #tt \r\n[data]=\"treedata\"\r\n[fit]=\"true\" \r\n[columns]=\"cols\" \r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[showFilterBar]=\"false\"\r\n[showHeader]=\"true\"\r\n[enableFindText]=\"true\"\r\n(cellClick)=\"selectRowChange($event)\"\r\n>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionSchemaGridComponent.ctorParameters = () => [];
ExpressionSchemaGridComponent.propDecorators = {
    schema: [{ type: Input }],
    selectschemachange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionSchemaInfoGridComponent {
    constructor() {
        this.schema = new Map();
        this.choseSchemaTableName = new CurrentNode;
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.selectString = "";
        this.items = [];
        this.columns = [{ field: 'name', title: '属性名称', filter: true }];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        /** @type {?} */
        let schemaName = this.choseSchemaTableName.parentName;
        /** @type {?} */
        let tableId = this.choseSchemaTableName.id;
        /** @type {?} */
        let tableName = this.choseSchemaTableName.name;
        /** @type {?} */
        let schemaItem = this.schema.get(schemaName);
        if (schemaItem) {
            /** @type {?} */
            let entityType = schemaItem.entityTypes.find((/**
             * @param {?} entitytype
             * @return {?}
             */
            entitytype => (entitytype.id == tableId && entitytype.name == tableName) || (entitytype.id == "" && entitytype.name == tableName)));
            if (entityType) {
                this.items = entityType.properties;
                entityType.navigationProperties.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    let property = new Property;
                    property.name = item.name;
                    property.type = item.type.toString();
                    property.description = item.description;
                    this.items = this.items.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.name !== property.name));
                    this.items.push(property);
                }));
                this.selectString = entityType.name;
            }
            else {
                /** @type {?} */
                let entitySet = schemaItem.entitySets.find((/**
                 * @param {?} entityset
                 * @return {?}
                 */
                entityset => entityset.name == tableName));
                if (entitySet) {
                    /** @type {?} */
                    let eType = schemaItem.entityTypes.find((/**
                     * @param {?} entitytype
                     * @return {?}
                     */
                    entitytype => entitytype.name == entitySet.entityType));
                    this.items = eType.properties;
                    eType.navigationProperties.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        /** @type {?} */
                        let property = new Property;
                        property.name = item.name;
                        property.type = item.type.toString();
                        property.description = item.description;
                        this.items = this.items.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.name !== property.name));
                        this.items.push(property);
                    }));
                    this.selectString = entitySet.name + ".[0]";
                }
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        this.dbclickInsert.emit(this.selectString + "." + $event.rowData.name);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectSchemaRow.emit($event.data);
    }
}
ExpressionSchemaInfoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-schema-info-grid',
                template: "<farris-datagrid\r\n[idField]=\"'name'\"\r\n[height]=\"268\"\r\n[width]=\"300\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n[enableFilterRow]=\"true\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionSchemaInfoGridComponent.ctorParameters = () => [];
ExpressionSchemaInfoGridComponent.propDecorators = {
    schema: [{ type: Input }],
    choseSchemaTableName: [{ type: Input }],
    selectSchemaRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionEntityGridComponent {
    // data: TreeNode[] = [];
    // temp2: TreeNode;
    // temp3: TreeNode;
    // all: TreeNode[] = [];
    constructor() {
        this.currentNode = new CurrentNode;
        this.entities = [];
        this.currentSchemaName = "";
        this.currentNewSchemaName = "";
        this.currentParent = "";
        this.schema = new Map();
        this.newSchemaMap = new Map();
        this.selectentitychange = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.cols = [];
        this.treedata = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cols = [
            { field: 'name', title: this.localePipe.transform("EntityList") },
            { field: 'description', title: this.localePipe.transform("EntityName") },
            { field: 'type', title: this.localePipe.transform("EntityType"), width: '100' }
        ];
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.onInitNewSchema();
            this.treedata = _.cloneDeep(this.entities);
        }
        else if (this.schema && this.schema.size > 0) {
            this.OninitSchemaEntity();
            this.treedata = _.cloneDeep(this.entities);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.currentNode = new CurrentNode;
        this.currentNode.id = $event.node.data.id;
        this.currentNode.name = $event.node.data.name;
        this.currentNode.parentName = this.selectParentString($event.node);
        this.currentParent = this.selectParentString($event.node);
        this.currentNode.schema = $event.node.data.schema;
        this.currentNode.nodeType = $event.node.data.nodeType;
        this.currentNode.description = $event.node.data.description;
        this.selectentitychange.emit(this.currentNode);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dblClick($event) {
        if (this.currentParent) {
            this.dbclickInsert.emit(this.currentParent + "." + $event.data.name);
        }
        else {
            this.dbclickInsert.emit($event.data.name);
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.onInitNewSchema();
            this.treedata = _.cloneDeep(this.entities);
            // this.treedata = this.entities;
            // this.treedata = [...this.treedata];
        }
        else if (this.schema && this.schema.size > 0) {
            this.OninitSchemaEntity();
            this.treedata = _.cloneDeep(this.entities);
            // this.treedata = this.entities;
            // this.treedata = [...this.treedata];
        }
    }
    //递归父节点名
    /**
     * @param {?} node
     * @return {?}
     */
    selectParentString(node) {
        if (node.parent) {
            if (this.selectParentString(node.parent)) {
                if (this.strContain(node.parent.data.type))
                    return this.selectParentString(node.parent) + "." + node.parent.data.name + "[0]";
                else
                    return this.selectParentString(node.parent) + "." + node.parent.data.name;
            }
            else if (this.strContain(node.parent.data.type)) {
                return node.parent.data.name + "[0]";
            }
            else {
                return node.parent.data.name;
            }
        }
        else {
            return "";
        }
    }
    //初始化Schema格式的Entity
    /**
     * @return {?}
     */
    OninitSchemaEntity() {
        if (this.injectedEntities && this.injectedEntities.length > 0) {
            this.entities = [];
            /** @type {?} */
            let entityTree = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "type": "",
                    "description": "",
                    "schema": "",
                    "nodeType": ""
                },
                children: []
            };
            //实体显示禁忌表
            /** @type {?} */
            let navigatorMap = new Map();
            //解析每一个注入实体，将其转化为TreeNode
            this.injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            injectEntity => {
                //根据schema名称找到对应的schema
                /** @type {?} */
                let currentSchema = this.schema.get(injectEntity.schemaName);
                this.currentSchemaName = injectEntity.schemaName;
                switch (injectEntity.injectedType) {
                    //注入的若为实体集
                    case InjectedType.EntitySet:
                        {
                            //根据注入实体的名称找到对应的实体集
                            /** @type {?} */
                            let entitySet = currentSchema.entitySets.find((/**
                             * @param {?} entitySet
                             * @return {?}
                             */
                            entitySet => entitySet.name == injectEntity.injectedName));
                            //将找到的实体集转化为TreeNode
                            entityTree = this.ConvertEntitySet(entitySet, currentSchema, navigatorMap);
                        }
                        break;
                    //注入的若为实体类型
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            let entityType = currentSchema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            entityType => entityType.name == injectEntity.injectedName));
                            //将实体类型名称改为自定义名称
                            //entityType.name = injectEntity.name;
                            //将找到的实体类型转化为TreeNode
                            entityTree = this.ConvertEntityType(entityType, currentSchema, navigatorMap);
                        }
                        break;
                }
                entityTree.data.name = injectEntity.name;
                //将每个预置对象转化后的TreeNode
                this.entities.push(entityTree);
            }));
        }
    }
    //实体集转化
    /**
     * @param {?} entitySet
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ConvertEntitySet(entitySet, schema, navigatorMap) {
        if (entitySet) {
            //将entityset转化为TreeNode结构用于展示
            /** @type {?} */
            let treeNode = {
                data: {
                    "id": "",
                    "name": entitySet.name,
                    "type": "EntitySet" + "[" + entitySet.entityType + "]",
                    "description": entitySet.description,
                    "schema": this.currentSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化完成的实体集添加进禁忌表，防止循环转化
            navigatorMap.set(entitySet.name, InjectedType.EntitySet);
            //找到实体集对应的实体类型
            /** @type {?} */
            let entityType = schema.entityTypes.find((/**
             * @param {?} entityType
             * @return {?}
             */
            entityType => entityType.name == entitySet.entityType));
            //将entitytype转化为TreeNode结构用于展示
            this.ConvertEntityType(entityType, schema, navigatorMap).children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                treeNode.children.push(child);
            }));
            return treeNode;
        }
        //实体集为空或未定义则返回空
        else
            return null;
    }
    //实体类型转化
    /**
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap
     * @return {?}
     */
    ConvertEntityType(entityType, schema, navigatorMap) {
        if (entityType) {
            /** @type {?} */
            let treeNode = {
                data: {
                    "id": entityType.id,
                    "name": entityType.name,
                    "type": "EntityType",
                    "description": entityType.description,
                    "schema": this.currentSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化的entitytype添加进禁忌表
            navigatorMap.set(entityType.name + entityType.id, InjectedType.EntityType);
            //将每个属性转化为每个TreeNode
            entityType.properties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                /** @type {?} */
                let propertyTree = {
                    data: {
                        "id": Math.random(),
                        "name": "",
                        "type": property.type,
                        "description": property.description,
                        "schema": this.currentSchemaName,
                        "nodeType": "Simple"
                    },
                    children: []
                };
                //根据条件判断该属性是否为主键
                if (property.name == entityType.key) {
                    propertyTree.data.name = property.name + "*";
                }
                else {
                    propertyTree.data.name = property.name;
                }
                propertyTree.parent = treeNode;
                treeNode.children.push(propertyTree);
            }));
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            navigationProperty => {
                //判断是否导航属性对应的名称不在禁忌表中
                if (!(navigatorMap.get(navigationProperty.name + navigationProperty.navigationId))) {
                    if (navigationProperty.type == NavigationType.EntitySet) {
                        //若导航属性类型为实体集
                        /** @type {?} */
                        let entitySet = schema.entitySets.find((/**
                         * @param {?} entitySet
                         * @return {?}
                         */
                        entitySet => entitySet.name == navigationProperty.name));
                        /** @type {?} */
                        let a = this.ConvertEntitySet(entitySet, schema, navigatorMap);
                        a.parent = treeNode;
                        treeNode.children.push(a);
                    } //若为实体类型
                    else if (navigationProperty.type == NavigationType.EntityType) {
                        /** @type {?} */
                        let entityType = schema.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        entitytype => entitytype.id == navigationProperty.navigationId && entitytype.name == navigationProperty.name));
                        /** @type {?} */
                        let a = this.ConvertEntityType(entityType, schema, navigatorMap);
                        a.parent = treeNode;
                        treeNode.children.push(a);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    let navigatortree = {
                        data: {
                            "id": navigationProperty.navigationId,
                            "name": navigationProperty.name,
                            "type": "",
                            "description": navigationProperty.description,
                            "schema": this.currentSchemaName,
                            "nodeType": "Complex"
                        },
                        children: [],
                    };
                    switch (navigatorMap.get(navigationProperty.name)) {
                        case NavigationType.EntitySet:
                            navigatortree.data.type = "EntitySet";
                            break;
                        case NavigationType.EntityType:
                            navigatortree.data.type = "EntityType";
                            break;
                    }
                    navigatortree.parent = treeNode;
                    treeNode.children.push(navigatortree);
                }
            }));
            return treeNode;
        }
        //若entitytype为空或未定义
        else
            return null;
    }
    /**
     * @private
     * @param {?} strr
     * @return {?}
     */
    strContain(strr) {
        /** @type {?} */
        let temp = strr + "";
        if (temp.indexOf("EntitySet") != -1)
            return true;
        else
            return false;
    }
    //===========分割线==========NewSchema===============
    /**
     * \@description 初始化NewSchema
     * @return {?}
     */
    onInitNewSchema() {
        //注入实体存在且有值
        if (this.injectedEntities && this.injectedEntities.length > 0) {
            //初始化：entities(页面显示内容);rootNode(跟节点);navigatorMap1(禁忌列表)
            this.entities = [];
            /** @type {?} */
            let rootNode = {
                data: {
                    "id": Math.random(),
                    "name": "",
                    "description": "",
                    "type": "",
                    "schema": "",
                    "nodeType": ""
                },
                children: []
            };
            /** @type {?} */
            let navigatorMap1 = new Map();
            //根据注入实体的schemaName找到对应的rootSchema
            this.injectedEntities.forEach((/**
             * @param {?} injectEntity
             * @return {?}
             */
            injectEntity => {
                /** @type {?} */
                let rootSchema = this.newSchemaMap.get(injectEntity.schemaName);
                this.currentNewSchemaName = injectEntity.schemaName;
                //根据注入实体类型--->执行不同方法
                switch (injectEntity.injectedType) {
                    case InjectedType.EntitySet:
                        {
                            /** @type {?} */
                            let entitySet = rootSchema.entitySets.find((/**
                             * @param {?} set
                             * @return {?}
                             */
                            set => set.code == injectEntity.injectedName));
                            rootNode = this.convertNewEntitySet(entitySet, rootSchema, navigatorMap1);
                        }
                        break;
                    case InjectedType.EntityType:
                        {
                            /** @type {?} */
                            let entityType = rootSchema.entityTypes.find((/**
                             * @param {?} type
                             * @return {?}
                             */
                            type => type.code == injectEntity.injectedName));
                            rootNode = this.convertNewEntityType(entityType, rootSchema, navigatorMap1);
                        }
                        break;
                }
                rootNode.data.name = injectEntity.name;
                this.entities.push(rootNode);
            }));
        }
    }
    /**
     * \@description 转换实体类型(EntityType)
     * @param {?} entityType
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    convertNewEntityType(entityType, schema, navigatorMap1) {
        if (entityType) {
            //初始化：NewEntityType的节点
            /** @type {?} */
            let treeNode = {
                data: {
                    "id": entityType.code,
                    "name": entityType.code,
                    "description": entityType.name,
                    "type": "EntityType",
                    "schema": this.currentNewSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //pro
            navigatorMap1.set(entityType.name + entityType.code, InjectedType.EntityType);
            entityType.properties.forEach((/**
             * @param {?} pro
             * @return {?}
             */
            pro => {
                /** @type {?} */
                let proNode = {
                    data: {
                        "id": Math.random(),
                        "name": pro.code,
                        "description": pro.name,
                        "type": pro.dataType,
                        "schema": this.currentNewSchemaName,
                        "nodeType": "Simple"
                    },
                    children: []
                };
                proNode.parent = treeNode;
                treeNode.children.push(proNode);
            }));
            //naPro
            entityType.navigationProperties.forEach((/**
             * @param {?} naPro
             * @return {?}
             */
            naPro => {
                //判断是否导航属性对应的名称在禁忌表中
                if (!(navigatorMap1.get(naPro.navigationName + naPro.code))) {
                    if (naPro.navigationType == NewNavigationType.EntityType) {
                        /** @type {?} */
                        let entityType = schema.entityTypes.find((/**
                         * @param {?} type1
                         * @return {?}
                         */
                        type1 => type1.code == naPro.navigationName));
                        /** @type {?} */
                        let a = this.convertNewEntityType(entityType, schema, navigatorMap1);
                        a.parent = treeNode;
                        treeNode.children.push(a);
                    }
                    else if (naPro.navigationType == NewNavigationType.EntitySet) {
                        /** @type {?} */
                        let entitySet = schema.entitySets.find((/**
                         * @param {?} set1
                         * @return {?}
                         */
                        set1 => set1.code == naPro.navigationName));
                        /** @type {?} */
                        let a = this.convertNewEntitySet(entitySet, schema, navigatorMap1);
                        a.parent = treeNode;
                        treeNode.children.push(a);
                    }
                }
                //若导航属性在禁忌表中
                else {
                    /** @type {?} */
                    let naProNode = {
                        data: {
                            "id": naPro.navigationName,
                            "name": naPro.code,
                            "description": naPro.name,
                            "type": "",
                            "schema": this.currentNewSchemaName,
                            "nodeType": "Complex"
                        },
                        children: [],
                    };
                    switch (navigatorMap1.get(naPro.navigationName)) {
                        case NewNavigationType.EntitySet:
                            naProNode.data.type = "EntitySet";
                            break;
                        case NewNavigationType.EntityType:
                            naProNode.data.type = "EntityType";
                            break;
                    }
                    naProNode.parent = treeNode,
                        treeNode.children.push(naProNode);
                }
            }));
            return treeNode;
        }
        return null;
    }
    /**
     * \@description 转换实体集(EntitySet)
     * @param {?} set
     * @param {?} schema
     * @param {?} navigatorMap1
     * @return {?}
     */
    convertNewEntitySet(set, schema, navigatorMap1) {
        if (set) {
            //将entityset转化为TreeNode结构用于展示
            /** @type {?} */
            let treeNode = {
                data: {
                    "id": Math.random(),
                    "name": set.code,
                    "description": set.name,
                    "type": "EntitySet" + "[" + set.code + "]",
                    "schema": this.currentNewSchemaName,
                    "nodeType": "Complex"
                },
                children: []
            };
            //将转化完成的实体集添加进禁忌表，防止循环转化
            navigatorMap1.set(set.name, InjectedType.EntitySet);
            //找到实体集对应的实体类型
            /** @type {?} */
            let entityType = schema.entityTypes.find((/**
             * @param {?} entityType
             * @return {?}
             */
            entityType => entityType.code == set.entityType));
            //将entitytype转化为TreeNode结构用于展示
            this.convertNewEntityType(entityType, schema, navigatorMap1).children.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                treeNode.children.push(child);
            }));
            return treeNode;
        }
        //实体集为空或未定义则返回空
        else
            return null;
    }
    //顶级过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    searchByFilter($event) {
        //存在过滤值&&treedata有值
        if ($event.value && $event.value != "" && this.treedata) {
            //children元素深度遍历
            for (let i = 0; i < this.treedata.length; i++) {
                this.searchByFilter1($event.value, this.treedata[i]);
            }
            //过滤undefined
            for (let i = 0; i < this.treedata.length; i++) {
                this.filter1(this.treedata[i]);
            }
        }
    }
    //children元素过滤$event.value
    /**
     * @param {?} searchValue
     * @param {?} node
     * @return {?}
     */
    searchByFilter1(searchValue, node) {
        if (node.children && node.children.length > 0) {
            for (let i = 0; i < node.children.length; i++) {
                this.searchByFilter1(searchValue, node.children[i]);
            }
        }
        else if (node.children.length == 0) {
            if (node.data.description.indexOf(searchValue) == -1) {
                //indexOf返回指定字符在字符串中第一次出现的位置
                //-1代表没有出现
                /** @type {?} */
                let temp = -1;
                if (node.parent != null) {
                    for (let ii = 0; ii < node.parent.children.length; ii++) {
                        if (node.parent.children[ii] && node.parent.children[ii].data.description == node.data.description) {
                            temp = ii;
                            delete node.parent.children[temp];
                            break;
                        }
                    }
                }
            }
        }
    }
    //去除undefinde元素
    /**
     * @param {?} node
     * @return {?}
     */
    filter1(node) {
        if (node.children && node.children.length > 0) {
            /** @type {?} */
            var b = node.children.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item != undefined));
            node.children = b;
            for (let i = 0; i < node.children.length; i++) {
                if (node.children[i].children && node.children[i].children.length > 0) {
                    this.filter1(node.children[i]);
                }
            }
        }
        else if (node.children.length == 0) ;
    }
    //过滤
    /**
     * @param {?} $event
     * @return {?}
     */
    filter($event) {
        //开始过滤
        // this.searchByFilter($event);
        // this.searchByFilter($event);
        this.tt.searchHandle.search('description', $event.value, 'client');
    }
}
ExpressionEntityGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-entity-grid',
                template: "<farris-treetable #tt \r\n[data]=\"treedata\"\r\n[fit]=\"true\" \r\n[fitColumns]=\"true\"\r\n[fixedHeader]=\"true\"\r\n[columns]=\"cols\" \r\n[idField]=\"'id'\"\r\n[height]=\"268\"\r\n[showFilterBar]=\"true\"\r\n[resizableColumns]=\"true\"\r\n[showHeader]=\"true\"\r\n[enableFindText]=\"true\"\r\n[virtualized]=\"false\"\r\n(dblClick)=\"dblClick($event)\"\r\n(cellClick)=\"selectRowChange($event)\"\r\n(search)=\"filter($event)\"\r\n>\r\n</farris-treetable>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionEntityGridComponent.ctorParameters = () => [];
ExpressionEntityGridComponent.propDecorators = {
    schema: [{ type: Input }],
    newSchemaMap: [{ type: Input }],
    injectedEntities: [{ type: Input }],
    selectentitychange: [{ type: Output }],
    dbclickInsert: [{ type: Output }],
    tt: [{ type: ViewChild, args: ['tt',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionEntityInfoGridComponent {
    constructor() {
        this.schema = new Map();
        this.newSchemaMap = new Map(); //统一Schema
        //统一Schema
        this.choseEntityTableName = new CurrentNode;
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.selectString = "";
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        // this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
        /** @type {?} */
        let schemaName = this.choseEntityTableName.schema;
        /** @type {?} */
        let parentName = this.choseEntityTableName.parentName;
        /** @type {?} */
        let tableId = this.choseEntityTableName.id;
        /** @type {?} */
        let tableName = this.choseEntityTableName.name;
        /** @type {?} */
        let schemaItem;
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            //统一Schema
            this.columns = [{ field: 'code', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.newSchemaMap.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                let entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                entitytype => (entitytype.code == tableName) || (entitytype.code == "")));
                if (!entityType) {
                    /** @type {?} */
                    let entitySet = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    entityset => entityset.code == tableName));
                    if (entitySet) {
                        entityType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        entitytype => entitytype.code == entitySet.entityType));
                    }
                }
                this.items = [...entityType.properties];
                entityType.navigationProperties.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    let property = new NewProperty;
                    property.code = item.code;
                    property.name = "";
                    property.dataType = item.navigationType.toString();
                    property.nullable = false;
                    property.defaultValue = null;
                    this.items.push(property);
                    this.items = Array.from(this.items);
                }));
                this.selectString = parentName + "." + entityType.name;
            }
        }
        else {
            //旧的Schema
            this.columns = [{ field: 'name', title: this.localePipe.transform("EntityPropList"), filter: true }];
            this.items = [];
            schemaItem = this.schema.get(schemaName);
            if (schemaItem) {
                /** @type {?} */
                let entityType = schemaItem.entityTypes.find((/**
                 * @param {?} entitytype
                 * @return {?}
                 */
                entitytype => (entitytype.id == tableId && entitytype.name == tableName) || (entitytype.id == "" && entitytype.name == tableName)));
                if (entityType) {
                    this.items = [...entityType.properties];
                    entityType.navigationProperties.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        /** @type {?} */
                        let property = new Property;
                        property.name = item.name;
                        property.type = item.type.toString();
                        property.description = item.description;
                        this.items.push(property);
                    }));
                    this.selectString = parentName + "." + entityType.name;
                }
                else {
                    /** @type {?} */
                    let entitySet = schemaItem.entitySets.find((/**
                     * @param {?} entityset
                     * @return {?}
                     */
                    entityset => entityset.name == tableName));
                    if (entitySet) {
                        /** @type {?} */
                        let eType = schemaItem.entityTypes.find((/**
                         * @param {?} entitytype
                         * @return {?}
                         */
                        entitytype => entitytype.name == entitySet.entityType));
                        this.items = [...eType.properties];
                        eType.navigationProperties.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            /** @type {?} */
                            let property = new Property;
                            property.name = item.name;
                            property.type = item.type.toString();
                            property.description = item.description;
                            this.items.push(property);
                        }));
                        this.selectString = parentName + "." + entitySet.name + ".[0]";
                    }
                }
            }
        }
    }
    //数据：子组件双击插入              (farris双击事件，调整)
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        //this.dbclickInsert.emit(this.selectString+"."+$event.rowData.name);
        if (this.newSchemaMap && this.newSchemaMap.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.code);
        }
        else if (this.schema && this.schema.size > 0) {
            this.dbclickInsert.emit($event.rowData.data.name);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectSchemaRow.emit($event.data);
    }
}
ExpressionEntityInfoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-entity-info-grid',
                template: "<farris-datagrid\r\n[idField]=\"'name'\"\r\n[height]=\"268\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n[enableFilterRow]=\"true\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionEntityInfoGridComponent.ctorParameters = () => [];
ExpressionEntityInfoGridComponent.propDecorators = {
    schema: [{ type: Input }],
    newSchemaMap: [{ type: Input }],
    choseEntityTableName: [{ type: Input }],
    selectSchemaRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionSmartHelpGridComponent {
    constructor() {
        this.smartHelp = [];
        this.selectSchemaRow = new EventEmitter();
        this.dbclickInsert = new EventEmitter();
        this.items = [];
        this.columns = [];
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'code', width: 60, title: this.localePipe.transform("HelpCode"), filter: true },
            { field: 'name', width: 60, title: this.localePipe.transform("HelpName"), filter: true },
            { field: 'description', width: 100, title: this.localePipe.transform("HelpDescription"), filter: true },
        ];
        this.items = this.smartHelp;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblclickRow($event) {
        /** @type {?} */
        let entities = this.smartHelp.find((/**
         * @param {?} temp
         * @return {?}
         */
        temp => temp.code == $event.rowData.code));
        // entities.serviceInstance.showWizard().subscribe((result)=>{
        //   this.dbclickInsert.emit(result);
        // });
        this.dbclickInsert.emit(entities.serviceInstance.showWizard());
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectRowChange($event) {
        this.selectSchemaRow.emit($event.data);
    }
}
ExpressionSmartHelpGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-expression-smart-help-grid',
                template: "<farris-datagrid\r\n[idField]=\"'code'\"\r\n[height]=\"268\"\r\n[width]=\"650\"\r\n[columns]=\"columns\" \r\n[data]=\"items\"\r\n[fit]=\"true\"\r\n[fitColumns]=\"true\"\r\n[striped]=\"false\"\r\n[showHeader]=\"true\"\r\n[pagination]=\"false\"\r\n(dblclickRow)=\"ondblclickRow($event)\"\r\n(selectChanged)=\"selectRowChange($event)\"\r\n>\r\n</farris-datagrid>",
                styles: [""]
            }] }
];
/** @nocollapse */
ExpressionSmartHelpGridComponent.ctorParameters = () => [];
ExpressionSmartHelpGridComponent.propDecorators = {
    smartHelp: [{ type: Input }],
    selectSchemaRow: [{ type: Output }],
    dbclickInsert: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const monacoConfig$1 = {
    baseUrl: 'assets',
    defaultOptions: { scrollBeyondLastLine: false }
};
class ExpressionModule {
}
ExpressionModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ComputeRuleComponent, ExpressioneditorComponent, ExprFuncGridComponent, ExpressionVarGridComponent, ExpressionVarInfoGridComponent, ExpressionSchemaGridComponent, ExpressionSchemaInfoGridComponent, ExpressionEntityGridComponent, ExpressionEntityInfoGridComponent, ExpressionSmartHelpGridComponent, ExpressionEditorLocalePipe
                ],
                imports: [
                    CommonModule,
                    MyMonacoEditorModule.forRoot(monacoConfig$1),
                    FormsModule,
                    DialogsModule,
                    LayoutModule,
                    ButtonsModule,
                    TreeViewModule,
                    InputsModule,
                    GridModule,
                    FormsModule,
                    ReactiveFormsModule,
                    TreeTableModule,
                    ComboLookupModule,
                    DataTableModule,
                    FarrisDialogModule,
                    PerfectScrollbarModule,
                    HttpClientModule,
                    MessagerModule.forRoot(),
                    ModalModule.forRoot(),
                    NotifyModule,
                    SplitterModule,
                    FarrisTabsModule,
                    DatagridFilterRowModule.forRoot(),
                    DatagridModule,
                    AngularDraggableModule,
                ],
                entryComponents: [ComputeRuleComponent, ExpressioneditorComponent],
                exports: [ComputeRuleComponent, ExpressioneditorComponent],
                // providers: [ComboService, BsModalService, ExpressionEventService, HttpClient, ExpressionEditorLocaleService]
                providers: [ComboService, BsModalService, ExpressionEventService, HttpClient]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ExprEditMode = {
    Conditional: 0,
    Advanced: 1,
};
ExprEditMode[ExprEditMode.Conditional] = 'Conditional';
ExprEditMode[ExprEditMode.Advanced] = 'Advanced';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 表达式对外提供服务类
 * 功能：提供打开、预置等接口
 */
class ExpressionService {
    /**
     * @param {?} injector
     * @param {?} applicationRef
     * @param {?} compFactRes
     * @param {?} http
     */
    constructor(injector, applicationRef, compFactRes, http) {
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.compFactRes = compFactRes;
        this.http = http;
        this.exprEditMode = ExprEditMode.Advanced;
        this.simpleModalConfig = {
            title: "条件表达式",
            width: 750,
            height: 350,
            showButtons: false
        };
        this.exprEntity = new ExpressionContextEntity();
        this.adapter = new Adapter();
        //定义语义化资源
        this.allFunctions = []; //所有函数，包含不规范
        this.modalService = injector.get(BsModalService);
        //初始化i18n标识
        this.localeId = localStorage.getItem('languageCode');
        this.localePipe = new ExpressionEditorLocalePipe(this.localeId);
        //初始化i18n函数
        this.allFunctions = FunctionI18nResources[this.localeId] || FunctionI18nResources["zh-CHS"];
        //初始化titile,save,cancel
        this.ExpressionTitle = this.localePipe.transform("ExpressionTitle");
        this.ExpressionSave = this.localePipe.transform("ExpressionSave");
        this.ExpressionCancel = this.localePipe.transform("ExpressionCancel");
    }
    /**
     * 创建表达式
     * 功能：打开表达式窗口，then方法获得表达式结果
     * @return {?}
     */
    buildExpression() {
        /** @type {?} */
        let that = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            if (that.exprEditMode == ExprEditMode.Conditional) {
                if ((that.exprEntity.expr != null && that.exprEntity.expr != "") && (that.exprEntity.sexpr == null || that.exprEntity.sexpr == "")) {
                    /** @type {?} */
                    const compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
                    /** @type {?} */
                    const compRef = compFactory.create(that.injector);
                    compRef.instance.expressionEntity = that.exprEntity;
                    /** @type {?} */
                    let dialog = that.modalService.show(compRef, {
                        title: that.ExpressionTitle,
                        width: 1060,
                        height: 610,
                        buttons: [
                            {
                                text: that.ExpressionSave, cls: 'btn btn-primary', handle: (/**
                                 * @return {?}
                                 */
                                () => {
                                    compRef.instance.getExprs();
                                    dialog.close();
                                })
                            },
                            {
                                text: that.ExpressionCancel, cls: 'btn btn-secondary', handle: (/**
                                 * @return {?}
                                 */
                                () => {
                                    dialog.close();
                                })
                            }
                        ],
                        showButtons: true
                    });
                    compRef.instance.result.subscribe((/**
                     * @param {?} expressionContent
                     * @return {?}
                     */
                    (expressionContent) => {
                        return resolve(expressionContent);
                    }));
                }
                else {
                    /** @type {?} */
                    const compFactory = that.compFactRes.resolveComponentFactory(ComputeRuleComponent);
                    /** @type {?} */
                    const compRef = compFactory.create(that.injector);
                    compRef.instance.contextEntity = that.exprEntity;
                    /** @type {?} */
                    const dialog = that.modalService.show(compRef, that.simpleModalConfig);
                    compRef.instance.closeModalEmitter.subscribe((/**
                     * @param {?} $event
                     * @return {?}
                     */
                    $event => dialog.close()));
                    compRef.instance.result.subscribe((/**
                     * @param {?} expressionContent
                     * @return {?}
                     */
                    (expressionContent) => {
                        return resolve(expressionContent);
                    }));
                }
            }
            else {
                /** @type {?} */
                const compFactory = that.compFactRes.resolveComponentFactory(ExpressioneditorComponent);
                /** @type {?} */
                const compRef = compFactory.create(that.injector);
                compRef.instance.expressionEntity = that.exprEntity;
                /** @type {?} */
                let dialog = that.modalService.show(compRef, {
                    title: that.ExpressionTitle,
                    width: 1060,
                    height: 610,
                    buttons: [
                        {
                            text: that.ExpressionSave, cls: 'btn btn-primary', handle: (/**
                             * @return {?}
                             */
                            () => {
                                compRef.instance.getExprs();
                                dialog.close();
                            })
                        },
                        {
                            text: that.ExpressionCancel, cls: 'btn btn-secondary', handle: (/**
                             * @return {?}
                             */
                            () => {
                                dialog.close();
                            })
                        }
                    ],
                    showButtons: true
                });
                compRef.instance.result.subscribe((/**
                 * @param {?} expressionContent
                 * @return {?}
                 */
                (expressionContent) => {
                    return resolve(expressionContent);
                }));
            }
        }));
    }
    /**
     * 设置表达式展现模式（简易版还是高级版）
     * exprDisplayType
     * @param {?} exprEditMode
     * @return {?}
     */
    setEditPattern(exprEditMode) {
        this.exprEditMode = exprEditMode;
    }
    /**
     * 添加上下文变量方法
     * @param {?} contextEntity 上下文变量实体
     * @return {?}
     */
    addContext(contextEntity) {
        this.exprEntity.contextEntities = this.exprEntity.contextEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.key !== contextEntity.key));
        this.exprEntity.contextEntities.push(contextEntity);
    }
    /**
     * 添加系统变量方法
     * @param {?} sessionEntity 系统变量实体
     * @return {?}
     */
    addSession(sessionEntity) {
        this.exprEntity.sessionEntities = this.exprEntity.sessionEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.key !== sessionEntity.key));
        this.exprEntity.sessionEntities.push(sessionEntity);
    }
    /**
     * 添加函数方法
     * @param {?} funcEntity 函数实体                       !!!待处理：修改FuncEntity--->FunctionEntity
     * @return {?}
     */
    addFunc(funcEntity) {
        this.exprEntity.funcEntities = this.exprEntity.funcEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.key !== funcEntity.key));
        this.exprEntity.funcEntities.push(funcEntity);
    }
    /**
     *
     * 添加函数列表
     * @param {?} funcList 函数json列表
     * @return {?}
     */
    addFuncs(funcList) {
        /** @type {?} */
        let funcs = (/** @type {?} */ (JSON.parse(funcList)));
        funcs.funcs.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.exprEntity.funcEntities.push(item);
        }));
    }
    /**
     * 预置表达式
     * @param {?} text 表达式文本
     * 1：text为脚本表达式，需要先Antlr4解析
     * 2：
     * @return {?}
     */
    addExpressionText(text) {
        try {
            /** @type {?} */
            let textEntity = (/** @type {?} */ (JSON.parse(text)));
            if (!(textEntity)) {
                this.exprEntity.expr = text;
            }
            else if (textEntity.expr) {
                //加载Antlr4工具
                /** @type {?} */
                let inputStream = new InputStream.InputStream(textEntity.expr);
                /** @type {?} */
                let lexer = new JavaScriptLexer.JavaScriptLexer(inputStream);
                /** @type {?} */
                let tokens = new CommonTokenStream.CommonTokenStream(lexer);
                tokens.fill();
                //tokens切分的js文本抽取到array中
                /** @type {?} */
                let array = new Array();
                for (let index = 0; index < tokens.tokens.length - 1; index++) {
                    array[index] = tokens.tokens[index].text;
                }
                //遍历array的js文本，每个js文本遍历tokenItems查找对应的语义化文本，封装为str
                /** @type {?} */
                var str = "";
                for (let index = 0; index < array.length; index++) {
                    if (((array[index] == "DefaultFunction") || (array[index] == "Math")) && (array[index + 1] == ".")) {
                        continue;
                    }
                    else if (array[index] == "." && (array[index - 1] == "DefaultFunction" || array[index - 1] == "Math")) {
                        continue;
                    }
                    else {
                        //单个元素计数器
                        /** @type {?} */
                        var num = 0;
                        //遍历上下文变量
                        if (num == 0) {
                            for (let i = 0; i < this.exprEntity.contextEntities.length; i++) {
                                if (array[index] == ("\"" + this.exprEntity.contextEntities[i].key + "\"")) {
                                    str = str + "\"" + this.exprEntity.contextEntities[i].name + "\"";
                                    num = 1;
                                    break;
                                }
                            }
                        }
                        //遍历session变量
                        if (num == 0) {
                            for (let i = 0; i < this.exprEntity.sessionEntities.length; i++) {
                                if (array[index] == ("\"" + this.exprEntity.sessionEntities[i].key + "\"")) {
                                    str = str + "\"" + this.exprEntity.sessionEntities[i].name + "\"";
                                    num = 1;
                                    break;
                                }
                            }
                        }
                        // 遍历数据（暂时先屏蔽）
                        // this.exprEntity.schemaMap.forEach(a=>{
                        //     // for(let j=0;j<a.entitySets[0].length;j++){
                        //     //   if(array[index]==a.entityTypes[0].properties[j].description){
                        //     //     array[index]=a.entityTypes[0].properties[j].name;
                        //     //     break;
                        //     //   }
                        //     // }
                        //     if(array[index]==a.entitySets[0].name){
                        //       array[index]=a.entitySets[0].description;
                        //       str=str+array[index];
                        //       num=1;
                        //     }
                        //     for(let j=0;j<a.entityTypes[0].properties.length;j++){
                        //       if(array[index]==a.entityTypes[0].properties[j].name){
                        //         array[index]=a.entityTypes[0].properties[j].description;
                        //         str=str+array[index];
                        //         num=1;
                        //         break;
                        //       }
                        //     }
                        //   });
                        //计数器num：如果遍历allFunctions没找到对应字段，则直接拼接(num=0)；否则替换(num=1)
                        if (num == 0) {
                            for (let i = 0; i < this.allFunctions.length; i++) {
                                if (array[index] == this.allFunctions[i].key) {
                                    if (this.allFunctions[i].type != "Advanced") {
                                        str = str + this.allFunctions[i].name;
                                        num = 1;
                                        break;
                                    }
                                }
                            }
                        }
                        //如果计数器为0，证明没有语义化匹配。显示原始数据
                        if (num == 0) {
                            str = str + array[index];
                        }
                    }
                }
                this.exprEntity.expr = str;
                if (textEntity.sexpr) {
                    this.exprEntity.sexpr = textEntity.sexpr;
                }
            }
            else {
                this.GetUnCamelParse(textEntity);
                this.exprEntity.expr = textEntity.expr;
                if (textEntity.sexpr) {
                    this.exprEntity.sexpr = textEntity.sexpr;
                }
            }
        }
        catch (_a) {
            this.exprEntity.expr = text;
        }
    }
    /**
     * 预置Schema
     * @param {?} name schema名称
     * @param {?} schema schema实体类
     * @return {?}
     */
    addSchema(name, schema) {
        if (!name) {
            alert("Please Input Schema Name!");
        }
        else
            this.exprEntity.schemaMap.set(name, schema);
    }
    /**
     * 注入实体
     * @param {?} name 注入实体名,默认为typeNameInSchema
     * @param {?=} schemaName 注入实体所在的schema名，默认为CommonObject
     * @param {?=} typeNameInSchema 注入实体在schema中的名称
     * @param {?=} injectedType 注入实体的类型，默认为EntityType
     * @return {?}
     */
    addInjectedEntity(name, schemaName = "CommonObject", typeNameInSchema, injectedType = InjectedType.EntityType) {
        //构造注入实体对象
        /** @type {?} */
        let injectedEntity = new InjectedEntity();
        //若注入的实体名为空，则默认为注入实体在schema中的名称
        injectedEntity.name = name ? name : typeNameInSchema;
        injectedEntity.schemaName = schemaName;
        injectedEntity.injectedName = typeNameInSchema;
        injectedEntity.injectedType = injectedType;
        this.exprEntity.injectedEntities = this.exprEntity.injectedEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.name !== injectedEntity.name));
        this.exprEntity.injectedEntities.push(injectedEntity);
    }
    /**
     * 预置CDT
     * @param {?} gspCDTs CDT集合
     * @return {?}
     */
    addCDT(gspCDTs) {
        /** @type {?} */
        let schema = new Schema();
        //若schemaMap中存在CDT的schema
        if (this.exprEntity.schemaMap.get("CDT")) {
            schema = this.exprEntity.schemaMap.get("CDT");
        }
        //将每一个CDT转化为schema内部结构中的entityType
        gspCDTs.forEach((/**
         * @param {?} gspCDT
         * @return {?}
         */
        gspCDT => {
            /** @type {?} */
            let entityType = this.adapter.convertCDT(gspCDT);
            schema.entityTypes.push(entityType);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addSchema("CDT", schema);
    }
    /**
     * 预置CO
     * @param {?} commonObject CO集合(todo)
     * @return {?}
     */
    addCommonObject(commonObject) {
        /** @type {?} */
        let schema;
        //若schemaMap中存在CO的schema
        if (this.exprEntity.schemaMap.get("CommonObject")) {
            schema = this.exprEntity.schemaMap.get("CommonObject");
        }
        else
            schema = new Schema;
        //将每一个CO转化为schema内部结构中的entityType
        /** @type {?} */
        let entityTypes = this.adapter.convertCO(commonObject);
        entityTypes.forEach((/**
         * @param {?} entityType
         * @return {?}
         */
        entityType => {
            schema.entityTypes.push(entityType);
            /** @type {?} */
            let entitySet = new EntitySet;
            entitySet.name = entityType.name + "s";
            entitySet.entityType = entityType.name;
            entitySet.description = entityType.description;
            schema.entitySets.push(entitySet);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addSchema("CommonObject", schema);
    }
    /**
     * 预置帮助
     * @param {?} shEntity 帮助描述实体
     * @return {?}
     */
    addSmartHelpEntity(shEntity) {
        this.exprEntity.smartHelpEntities = this.exprEntity.smartHelpEntities.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.code !== shEntity.code));
        this.exprEntity.smartHelpEntities.push(shEntity);
    }
    /**
     * @param {?} windowWidth
     * @return {?}
     */
    addWindowWidth(windowWidth) {
    }
    /**
     * @return {?}
     */
    clearInjectedEntity() {
        this.exprEntity.injectedEntities = [];
    }
    /**
     * @private
     * @param {?} jsonObj
     * @return {?}
     */
    GetUnCamelParse(jsonObj) {
        for (let key in jsonObj) {
            if (typeof (jsonObj[key]) === "object") {
                this.GetUnCamelParse(jsonObj[key]);
            }
            /** @type {?} */
            let temp = jsonObj[key];
            delete (jsonObj[key]);
            jsonObj[this.ConvertToUncamel(key)] = temp;
        }
    }
    //字符串反转换Camel
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    ConvertToUncamel(input) {
        if (input.length > 0) {
            /** @type {?} */
            let len = input.length;
            /** @type {?} */
            var strTemp = "";
            for (let i = 0; i < len; i++) {
                if (i == 0) {
                    strTemp += input[i].toLowerCase(); //第一个
                }
                else {
                    strTemp += input[i];
                }
            }
            return strTemp;
        }
    }
    /**
     * \@description 添加NewSchema
     * @param {?} name NewSchema的名称
     * @param {?} newSchema NewSchema
     * @return {?}
     */
    addNewSchema(name, newSchema) {
        if (!name) {
            alert("Please Input NewSchema Name!");
        }
        else
            this.exprEntity.newSchemaMap.set(name, newSchema);
    }
    /**
     * \@description 添加CO的数据，NewSchema
     * @param {?} commonObject
     * @return {?}
     */
    addCommonObjectOfNewSchema(commonObject) {
        /** @type {?} */
        let newSchema;
        //若newSchemaMap中存在CO的newSchema
        if (this.exprEntity.newSchemaMap.get("CommonObject")) {
            newSchema = this.exprEntity.newSchemaMap.get("CommonObject");
        }
        else
            newSchema = new NewSchema;
        //将每一个CO转化为schema内部结构中的entityType
        /** @type {?} */
        let entityTypes = this.adapter.convertCOOfNewSchema(commonObject);
        entityTypes.forEach((/**
         * @param {?} entityType
         * @return {?}
         */
        entityType => {
            newSchema.entityTypes.push(entityType);
            /** @type {?} */
            let entitySet = new NewEntitySet;
            entitySet.code = entityType.name + "s";
            entitySet.entityType = entityType.code;
            newSchema.entitySets.push(entitySet);
        }));
        //将合并后的newSchema放入内部上下文实体中
        this.addNewSchema("CommonObject", newSchema);
    }
    /**
     * \@description 添加UDT类型，NewSchema
     * @param {?} gspCDTs
     * @return {?}
     */
    addCDTOfNewSchema(gspCDTs) {
        /** @type {?} */
        let newSchema = new NewSchema();
        //若schemaMap中存在CDT的schema
        if (this.exprEntity.newSchemaMap.get("CDT")) {
            newSchema = this.exprEntity.newSchemaMap.get("CDT");
        }
        //将每一个CDT转化为schema内部结构中的entityType
        gspCDTs.forEach((/**
         * @param {?} gspCDT
         * @return {?}
         */
        gspCDT => {
            /** @type {?} */
            let entityType = this.adapter.convertCDTOfNewSchema(gspCDT);
            newSchema.entityTypes.push(entityType);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addNewSchema("CDT", newSchema);
    }
}
ExpressionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExpressionService.ctorParameters = () => [
    { type: Injector },
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量实体
 * \@property key 名称
 * \@property name 语义化名称
 * \@property description 自描述
 * @author linchang 2018/12/7
 */
class VarEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 函数实体
 * \@property key 函数语义化名称
 * \@property params 函数参数集
 * \@property name 函数名称
 * \@property type 函数类型
 * \@property className 所在类名
 * \@property description 节点自描述
 * @author linchang 2018/12/7
 */
class FuncEntity {
    constructor() {
        this.className = "";
    }
}
/** @enum {number} */
const FuncType = {
    "Advanced": 0,
    "Date": 1,
    "Estimate": 2,
    "String": 3,
    "Translate": 4,
    "Aggregate": 5,
    "Analytical": 6,
    "Math": 7,
    "Extend": 8 //扩展函数
    ,
};
FuncType[FuncType["Advanced"]] = "Advanced";
FuncType[FuncType["Date"]] = "Date";
FuncType[FuncType["Estimate"]] = "Estimate";
FuncType[FuncType["String"]] = "String";
FuncType[FuncType["Translate"]] = "Translate";
FuncType[FuncType["Aggregate"]] = "Aggregate";
FuncType[FuncType["Analytical"]] = "Analytical";
FuncType[FuncType["Math"]] = "Math";
FuncType[FuncType["Extend" //扩展函数
]] = "Extend" //扩展函数
;
/**
 * 参数信息
 * @param key 不同语言，统一标识
 * \@property name 语义化参数名
 * \@property type 参数类型
 * @author linchang 2018/12/7
 */
class Parameter {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 预置帮助实体
 */
class SmartHelpEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ExpressionModule, ExpressioneditorComponent, ExpressionService, ExpressionEventService, ExpressionEntity, VarEntity, FuncEntity, FuncType, Parameter, InjectedType, InjectedEntity, Schema, EntityType, EntitySet, Property, NavigationProperty, NavigationType, ExpressionContextEntity, SmartHelpEntity, ExprEditMode, ExpressionEditorLocalePipe, ComputeRuleComponent as ɵa, ExprFuncGridComponent as ɵb, ExpressionEntityGridComponent as ɵg, ExpressionEntityInfoGridComponent as ɵh, ExpressionSchemaGridComponent as ɵe, ExpressionSchemaInfoGridComponent as ɵf, ExpressionSmartHelpGridComponent as ɵi, ExpressionVarGridComponent as ɵc, ExpressionVarInfoGridComponent as ɵd, MY_MONACO_EDITOR_CONFIG as ɵn, CodeEditorEventService as ɵm, CODE_EDITOR_INPUT_VALUE_ACCESSOR as ɵk, MyMonacoEditorComponent as ɵl, MyMonacoEditorModule as ɵj };

//# sourceMappingURL=gsp-svc-expression.js.map