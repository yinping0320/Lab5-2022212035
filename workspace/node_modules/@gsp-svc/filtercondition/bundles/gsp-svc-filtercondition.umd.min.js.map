{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@gsp-svc/filtercondition/lib/filter-expression-entity.ts","ng://@gsp-svc/filtercondition/lib/typeinfo.ts","ng://@gsp-svc/filtercondition/lib/property-entity.ts","ng://@gsp-svc/filtercondition/lib/injected-entity.ts","ng://@gsp-svc/filtercondition/lib/i18n/lang.resource.ts","ng://@gsp-svc/filtercondition/lib/filter-condition-locale.pipe.ts","ng://@gsp-svc/filtercondition/lib/filter-condition/filter-condition.component.ts","ng://@gsp-svc/filtercondition/lib/navigation-property-entity.ts","ng://@gsp-svc/filtercondition/lib/schema.ts","ng://@gsp-svc/filtercondition/lib/NewSchema.ts","ng://@gsp-svc/filtercondition/lib/adapter.ts","ng://@gsp-svc/filtercondition/lib/filter-service.ts","ng://@gsp-svc/filtercondition/lib/property-adapter.ts","ng://@gsp-svc/filtercondition/lib/filter-expression/filter-expression.component.ts","ng://@gsp-svc/filtercondition/lib/filter-condition.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","FilterExpression","_this","_super","apply","arguments","expressItems","tslib_1.__extends","FilterExpressionBase","ExpressionItem","Value","Expression","And","Or","AddProperty","AddRelation","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","Equal","NotEqual","Contains","NotContains","StartsWith","NotStartsWith","EndsWith","NotEndsWith","IsNull","IsNotNull","In","NotIn","PropertyEntity","String","Int16","Int32","Int64","Decimal","Double","Byte","Char","Boolean","DateTime","FilterInjectedEntity","EntitySet","EntityType","Filter_Condition_LANG_RESOURCES","zh-CHS","Item","Operator","ExpressType","Operation","WindowTitle","Confirm","Reset","Cancle","Add","Delete","AddGroup","AddItem","PlaceHolder","SelectItem","SelectProperty","Success","Warning_SelectRelation","Warning_ContainsFilters","Warning_ConditionsComplete","Warning_NumericMatch","en","en-US","zh-CHT","FilterConditionLocalePipe","localeId","defaultLang","localStorage","getItem","langCode","lang","transform","name","Pipe","args","Inject","LOCALE_ID","FilterConditionComponent","expr","notifyservice","closed","EventEmitter","result","contextEntity","expressionText","expressionSchema","expressionInjectedEntities","expressionCDT","propertyList","filterExpressionString","schemaMap","Map","newSchemaMap","injectedEntity","exprWinWidth","popupSettings","popupClass","operatorView","operators","stringOperators","NumberOperators","relations","expressTypes","isEdited","displayPopup","groupIcon","treeData","notifies","localePipe","ngOnInit","cols","field","title","width","filterExpressionPre","JSON","parse","unConvert","data","id","item","propertyDataType","operator","expressType","displaySelect","displayOperator","displayExpressType","displayValue","parentItem","children","expanded","treeDataTemp","defaultSelectItem","defaultExpressTypeText","defaultSelectGroup","defaultOperatorText","1","type","msg","2","3","4","5","nodeSelected","$event","hideNodeEditor","node","properties","filter","x","text","PropertyDataType","treeNodes","forEach","element","length","selectGroup","propertyNodeOperate","selectItem","selectOperator","selectExpressType","hideFieldEditor","fieldType","treeNode","tt","isSelected","openExpressEditor","that","addContext","selectNode","addExpressionText","addInjectedEntity","schemaName","injectedName","injectedType","addSchema","schema","addCDT","buildExpression","then","info","expressInfo","displayExpressResult","itemClick","RelationTypeEnum","addNode","event","treenode","defaultString","defaultOperator","defalutExpressType","newNode","Math","random","parent","updateSerializedValue","deleteNode","onDelete","index","indexOf","splice","onConfirm","checkNull","checkMatch","filterExpression","convert","close","emit","isNull","undefined","onCancel","cancle","stringify","relationOperator","typeMatch","treeNodeItem","filterExpressionItem","filterItem","propertyName","ExpressTypeEnum","CompareTypeEnum","Number","filterExpress","relationTypeReverseMatch","expressItem","filterExpressItem","treeDataChild","expressionItem_1","operatorReverseMatch","expressTypeReverseMatch","addItem","addGroup","onfocus","onblur","isMatch","isNaN","Component","selector","template","providers","ExpressionService","encapsulation","ViewEncapsulation","None","NotifyService","ViewChild","Output","Input","NavigationProperty","FilterEntitySchema","entitySets","entityTypes","FilterEntityType","navigationProperties","NewSchema","associations","NewEntityType","keys","NewProperty","NewNavigationProperty","Date","Integer","Adapter","convertCO","commonObject","adaptCO","gspCO","entityType","Code","displayName","Name","ContainElements","IsUdt","ObjectType","GSPElementObjectType","Association","property","convertPropertyDataType","MDataType","ContainChildObjects","childObject","naviproperty","navigationEntity","navigationType","NavigationType","dataType","GSPElementDataType","Text","Binary","convertCOOfNewSchema","co","types","adaptCOOfNewSchema","code","ele","pro","convertCOEleTypeProType","obj","naPro","navigationName","ID","NewNavigationType","relationShip","NewDataType","FilterService","injector","applicationRef","compFactRes","http","adapter","modalService","get","BsModalService","Promise","resolve","compRef","resolveComponentFactory","instance","dialog","show","height","showButtons","subscribe","expressionContent","addProperty","propertyEntity","addExpressionContext","key","addExpressionSchema","addExpressionInjectedEntity","typeNameInSchema","InjectedEntity","addExpressionCDT","gspCDTs","addFilterCondition","filterSchema","alert","set","FilterInjectedType","propertyAdapter","PropertyAdapter","addCommonObject","Schema","addExprWinWidth","addNewSchema","addInjectedEntityOfNewSchema","adapterOfNewSchema","Injectable","Injector","ApplicationRef","ComponentFactoryResolver","HttpClient","entitySet","find","convertEntitySet","convertEntityType","propertyListItem","navigationProperty","entityType_1","entityTypeName","entitySet_1","entityType_2","convertNewEntitySet","convertNewEntityType","convertNewDataType2PropertyDataType","naProSet","naProType","newType","FilterExpressionComponent","filterNewSchemaMap","disabled","propertyListInner","checkFilterStruc","filterSchemaMap","columnWidth","ngOnChanges","newSchema","newSchema_1","gspCommonObject","propertyInner","propertyFieldType","schema_1","filterNewSchema","__spread","concat","nodeUnSelect","console","log","getFilterExpression","Éµ0","FilterConditionModule","NgModule","imports","CommonModule","DropDownsModule","ButtonModule","DropDownButtonModule","InputsModule","FormsModule","PopupModule","ComboListModule","ExpressionModule","TreeTableModule","InputGroupModule","NotifyModule","FDropdownDirectiveTypeModule","ModalModule","forRoot","declarations","entryComponents","exports","provide","useValue"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ExpressTypeEnum, CompareTypeEnum, RelationTypeEnum} from \"./typeinfo\";\r\nimport { PropertyDataType } from \".\";\r\n\r\n/**\r\n * Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â®ÂÃ¤Â½ÂÃ¥ÂÂºÃ§Â¡ÂÃ§Â±Â»\r\n */\r\nexport class FilterExpressionBase{}\r\n/**\r\n * Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â¤ÂÃ¦ÂÂÃ©Â¡Â¹\r\n * @property relationOperator Ã¥ÂÂ³Ã§Â³Â»Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦\r\n * @property expressItems Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â­ÂÃ©Â¡Â¹Ã©ÂÂÃ¥ÂÂ\r\n */\r\nexport class FilterExpression extends FilterExpressionBase\r\n{\r\n    relationOperator:RelationTypeEnum;\r\n    expressItems:FilterExpressionBase[]=[];\r\n}\r\n/**\r\n * Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n * @property propertyName Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂ\r\n * @property propertyDataType Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n * @property operator Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦\r\n * @property expressType Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n * @property value Ã¥ÂÂ¼\r\n * @property parentItem Ã§ÂÂ¶Ã©Â¡Â¹\r\n */\r\nexport class ExpressionItem extends FilterExpressionBase\r\n{\r\n    propertyName:string;\r\n    propertyDataType:PropertyDataType;\r\n    operator:CompareTypeEnum;\r\n    expressType:ExpressTypeEnum;\r\n    value:any;\r\n    parentItem:string;\r\n}\r\n","/**\r\n * Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂÃ¤Â¸Â¾\r\n */\r\nexport enum ExpressTypeEnum {\r\n  Value,\r\n  Expression\r\n}\r\n/**\r\n * Ã¥ÂÂ³Ã§Â³Â»Ã§Â±Â»Ã¥ÂÂÃ¦ÂÂÃ¤Â¸Â¾\r\n */\r\nexport enum RelationTypeEnum {\r\n  And,\r\n  Or,\r\n  AddProperty,\r\n  AddRelation\r\n}\r\n/**\r\n * Ã¦Â¯ÂÃ¨Â¾ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂÃ¤Â¸Â¾\r\n */\r\nexport enum CompareTypeEnum {\r\n  GreaterThan,\r\n  GreaterThanOrEqual,\r\n  LessThan,\r\n  LessThanOrEqual,\r\n  Equal,\r\n  NotEqual,\r\n  Contains,\r\n  NotContains,\r\n  StartsWith,\r\n  NotStartsWith,\r\n  EndsWith,\r\n  NotEndsWith,\r\n  IsNull,\r\n  IsNotNull,\r\n  In,\r\n  NotIn\r\n}\r\n\r\n/**\r\n * Ã¥ÂÂ³Ã§Â³Â»Ã§Â±Â»Ã¥ÂÂ\r\n * Ã¥ÂÂÃ¥ÂÂ«Ã¥Â¹Â¶Ã¤Â¸ÂÃ£ÂÂÃ¦ÂÂÃ¨ÂÂÃ£ÂÂÃ¦Â·Â»Ã¥ÂÂ Ã¥Â±ÂÃ¦ÂÂ§Ã£ÂÂÃ¦Â·Â»Ã¥ÂÂ Ã¥ÂÂ³Ã§Â³Â»\r\n */\r\nexport const RelationTypes=\r\n  [\r\n    { id: \"Ã¥Â¹Â¶Ã¤Â¸Â\"},\r\n    { id: \"Ã¦ÂÂÃ¨ÂÂ\"},\r\n  ];\r\n\r\n/**\r\n * Ã¦Â¯ÂÃ¨Â¾ÂÃ§Â±Â»Ã¥ÂÂ\r\n * Ã¥ÂÂÃ¥ÂÂ«Ã¥Â¸Â¸Ã¨Â§ÂÃ§ÂÂÃ¥ÂÂ³Ã§Â³Â»Ã¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n */\r\n// export const CompareTypes: Array<{ text: string, value: CompareTypeEnum }> =\r\n//   [\r\n//     { text: \"Ã¥Â¤Â§Ã¤ÂºÂ\", value: CompareTypeEnum.GreaterThan },\r\n//     { text: \"Ã¥Â¤Â§Ã¤ÂºÂÃ§Â­ÂÃ¤ÂºÂ\", value: CompareTypeEnum.GreaterThanOrEqual },\r\n//     { text: \"Ã¥Â°ÂÃ¤ÂºÂ\", value: CompareTypeEnum.LessThan },\r\n//     { text: \"Ã¥Â°ÂÃ¤ÂºÂÃ§Â­ÂÃ¤ÂºÂ\", value: CompareTypeEnum.LessThanOrEqual },\r\n//     { text: \"Ã§Â­ÂÃ¤ÂºÂ\", value: CompareTypeEnum.Equal },\r\n//     { text: \"Ã¤Â¸ÂÃ§Â­ÂÃ¤ÂºÂ\", value: CompareTypeEnum.NotEqual },\r\n//     { text: \"Ã¥ÂÂÃ¥ÂÂ«\", value: CompareTypeEnum.Contains },\r\n//     { text: \"Ã¥Â¼ÂÃ¥Â¤Â´Ã¦ÂÂ¯\", value: CompareTypeEnum.StartsWith },\r\n//     { text: \"Ã§Â»ÂÃ¥Â°Â¾Ã¦ÂÂ¯\", value: CompareTypeEnum.EndsWith },\r\n//     { text: \"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«\", value: CompareTypeEnum.NotContains },\r\n//     { text: \"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã¥Â¼ÂÃ¥Â¤Â´Ã¦ÂÂ¯\", value: CompareTypeEnum.NotStartsWith },\r\n//     { text: \"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã§Â»ÂÃ¥Â°Â¾Ã¦ÂÂ¯\", value: CompareTypeEnum.NotEndsWith },\r\n//     { text: \"Ã¤Â¸Âº(Ã§Â©Âº)\", value: CompareTypeEnum.IsNull },\r\n//     { text: \"Ã¤Â¸ÂÃ¤Â¸Âº(Ã§Â©Âº)\", value: CompareTypeEnum.IsNotNull },\r\n//     { text: \"Ã¥ÂÂ¨\", value: CompareTypeEnum.In },\r\n//     { text: \"Ã¤Â¸ÂÃ¥ÂÂ¨\", value: CompareTypeEnum.NotIn }\r\n//   ];\r\n  export const CompareTypes =[\r\n    {id: 'Ã¥Â¤Â§Ã¤ÂºÂ'},\r\n    {id: 'Ã¥Â¤Â§Ã¤ÂºÂÃ§Â­ÂÃ¤ÂºÂ'},\r\n    {id: 'Ã¥Â°ÂÃ¤ÂºÂ'},\r\n    {id: 'Ã¥Â°ÂÃ¤ÂºÂÃ§Â­ÂÃ¤ÂºÂ'},\r\n    {id: 'Ã§Â­ÂÃ¤ÂºÂ'},\r\n    {id: 'Ã¤Â¸ÂÃ§Â­ÂÃ¤ÂºÂ'},\r\n    {id: 'Ã¥ÂÂÃ¥ÂÂ«'},\r\n    {id: 'Ã¥Â¼ÂÃ¥Â¤Â´Ã¦ÂÂ¯'},\r\n    {id: 'Ã§Â»ÂÃ¥Â°Â¾Ã¦ÂÂ¯'},\r\n    {id: 'Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«'},\r\n    {id: 'Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã¥Â¼ÂÃ¥Â¤Â´Ã¦ÂÂ¯'},\r\n    {id: 'Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã§Â»ÂÃ¥Â°Â¾Ã¦ÂÂ¯'},\r\n    {id: 'Ã¤Â¸ÂºÃ§Â©Âº'},\r\n    {id: 'Ã¤Â¸ÂÃ¤Â¸Âº(Ã§Â©Âº)'},\r\n    {id: 'Ã¥ÂÂ¨'},\r\n    {id: 'Ã¤Â¸ÂÃ¥ÂÂ¨'}\r\n  ]\r\n  \r\n/**\r\n * Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n * Ã¥ÂÂÃ¥ÂÂ«Ã¥ÂÂ¼Ã£ÂÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â¤Ã§Â§ÂÃ§Â±Â»Ã¥ÂÂ\r\n */\r\nexport const ExpressTypes =\r\n  [\r\n    {id: 'Ã¥ÂÂ¼'},\r\n    {id: 'Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â'}\r\n  ];\r\n","/**\r\n * Ã¥Â±ÂÃ¦ÂÂ§Ã¥Â®ÂÃ¤Â½Â\r\n */\r\nexport class PropertyEntity\r\n{\r\n    name:string;\r\n    displayName:string;\r\n    propertyDataType:PropertyDataType;\r\n}\r\n/**\r\n * Ã¥Â­ÂÃ¦Â®ÂµÃ¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n */\r\nexport enum PropertyDataType\r\n{\r\n    String,\r\n    Int16,\r\n    Int32,\r\n    Int64,\r\n    Decimal,\r\n    Double,\r\n    Byte,\r\n    Char,\r\n    Boolean,\r\n    DateTime,\r\n    Array\r\n}","/**\r\n * Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½ÂÃ¤Â¿Â¡Ã¦ÂÂ¯\r\n * @property name Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â¯Â¹Ã¨Â±Â¡Ã¥ÂÂ¨schemaÃ¤Â¸Â­Ã§ÂÂÃ¥ÂÂÃ§Â§Â°\r\n * @property schemaName Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â¯Â¹Ã¨Â±Â¡Ã¦ÂÂÃ¥ÂÂ¨schema\r\n * @property injectedType Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â¯Â¹Ã¨Â±Â¡Ã§Â±Â»Ã¥ÂÂ\r\n */\r\n export class FilterInjectedEntity {\r\n    name: string;\r\n    schemaName: string;\r\n    injectedType: FilterInjectedType;\r\n}\r\n\r\nexport enum FilterInjectedType\r\n{\r\n    EntitySet,\r\n    EntityType\r\n}\r\n","export const Filter_Condition_LANG_RESOURCES = {\r\n    \"zh-CHS\": {\r\n        \"Item\": \"Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹\",\r\n        \"Operator\": \"Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦\",\r\n        \"ExpressType\": \"Ã¥ÂÂ¼Ã§Â±Â»Ã¥ÂÂ\",\r\n        \"Value\": \"Ã¥ÂÂ¼\",\r\n        \"Operation\": \"Ã¦ÂÂÃ¤Â½Â\",\r\n        \"WindowTitle\": \"Ã¨Â¿ÂÃ¦Â»Â¤Ã¦ÂÂ¡Ã¤Â»Â¶Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\",\r\n        \"Confirm\": \"Ã§Â¡Â®Ã¥Â®Â\",\r\n        \"Reset\": \"Ã©ÂÂÃ§Â½Â®\",\r\n        \"Cancle\":\"Ã¥ÂÂÃ¦Â¶Â\",\r\n        \"Add\":\"Ã¦Â·Â»Ã¥ÂÂ \",\r\n        \"Delete\":\"Ã¥ÂÂ Ã©ÂÂ¤\",\r\n        \"AddGroup\":\"Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ¡Ã¤Â»Â¶Ã¥ÂÂÃ§Â»Â\",\r\n        \"AddItem\":\"Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ¡Ã¤Â»Â¶\",\r\n        \"PlaceHolder\":\"Ã¨Â¯Â·Ã¨Â¾ÂÃ¥ÂÂ¥Ã¥ÂÂ¼\",\r\n        \"Expression\":\"Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\",\r\n        \"SelectItem\":\"Ã¨Â¯Â·Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã§ÂÂ®\",\r\n        \"And\":\"Ã¥Â¹Â¶Ã¤Â¸Â\",\r\n        \"Or\":\"Ã¦ÂÂÃ¨ÂÂ\",\r\n        \"SelectProperty\":\"Ã©ÂÂÃ¦ÂÂ©Ã¥Â±ÂÃ¦ÂÂ§\",\r\n        \"GreaterThan\":\"Ã¥Â¤Â§Ã¤ÂºÂ\",\r\n        \"GreaterThanOrEqual\":\"Ã¥Â¤Â§Ã¤ÂºÂÃ§Â­ÂÃ¤ÂºÂ\",\r\n        \"LessThan\":\"Ã¥Â°ÂÃ¤ÂºÂ\",\r\n        \"LessThanOrEqual\":\"Ã¥Â°ÂÃ¤ÂºÂÃ§Â­ÂÃ¤ÂºÂ\",\r\n        \"Equal\":\"Ã§Â­ÂÃ¤ÂºÂ\",\r\n        \"NotEqual\":\"Ã¤Â¸ÂÃ§Â­ÂÃ¤ÂºÂ\",\r\n        \"Contains\":\"Ã¥ÂÂÃ¥ÂÂ«\",\r\n        \"NotContains\":\"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«\",\r\n        \"StartsWith\":\"Ã¥Â¼ÂÃ¥Â¤Â´Ã¦ÂÂ¯\",\r\n        \"NotStartsWith\":\"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã¥Â¼ÂÃ¥Â¤Â´Ã¦ÂÂ¯\",\r\n        \"EndsWith\":\"Ã§Â»ÂÃ¥Â°Â¾Ã¦ÂÂ¯\",\r\n        \"NotEndsWith\":\"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã§Â»ÂÃ¥Â°Â¾Ã¦ÂÂ¯\",\r\n        \"IsNull\":\"Ã¤Â¸ÂºÃ§Â©Âº\",\r\n        \"IsNotNull\":\"Ã¤Â¸ÂÃ¤Â¸Âº(Ã§Â©Âº)\",\r\n        \"In\":\"Ã¥ÂÂ¨\",\r\n        \"NotIn\":\"Ã¤Â¸ÂÃ¥ÂÂ¨\",\r\n        \"Success\":\"Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â·Â²Ã§ÂÂÃ¦ÂÂÃ¯Â¼Â\",\r\n        \"Warning_SelectRelation\":\"Ã¨Â¯Â·Ã©ÂÂÃ¦ÂÂ©Ã¥ÂÂ³Ã§Â³Â»Ã¥ÂÂ¼Ã¯Â¼Â\",\r\n        \"Warning_ContainsFilters\":\"Ã¨Â¯Â·Ã¤Â¿ÂÃ¨Â¯ÂÃ¥ÂÂ³Ã§Â³Â»Ã¤Â¸Â­Ã¥ÂÂÃ¥ÂÂ«Ã¨Â¿ÂÃ¦Â»Â¤Ã©Â¡Â¹Ã¯Â¼Â\",\r\n        \"Warning_ConditionsComplete\":\"Ã¨Â¯Â·Ã¤Â¿ÂÃ¨Â¯ÂÃ¨Â¿ÂÃ¦Â»Â¤Ã¦ÂÂ¡Ã¤Â»Â¶Ã¥Â®ÂÃ¦ÂÂ´Ã¯Â¼Â\",\r\n        \"Warning_NumericMatch\":\"Ã¦ÂÂ°Ã¥ÂÂ¼Ã¥ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ¤Â¸ÂÃ¥ÂÂ¯Ã¥Â¡Â«Ã¥Â­ÂÃ§Â¬Â¦Ã¯Â¼Â\",\r\n    },\r\n    \"en\": {\r\n        \"Item\": \"Item\",\r\n        \"Operator\": \"Operator\",\r\n        \"ExpressType\": \"ExpressType\",\r\n        \"Value\": \"Value\",\r\n        \"Operation\": \"Operation\",\r\n        \"WindowTitle\": \"FilterCondition\",\r\n        \"Confirm\": \"Confirm\",\r\n        \"Reset\": \"Reset\",\r\n        \"Cancle\":\"Cancle\",\r\n        \"Add\":\"Add\",\r\n        \"Delete\":\"Delete\",\r\n        \"AddGroup\":\"AddGroup\",\r\n        \"AddItem\":\"AddItem\",\r\n        \"PlaceHolder\":\"Please Input Value\",\r\n        \"Expression\":\"Expression\",\r\n        \"SelectItem\":\"Please Select Item\",\r\n        \"And\":\"And\",\r\n        \"Or\":\"Or\",\r\n        \"SelectProperty\":\"SelectProperty\",\r\n        \"GreaterThan\":\"GreaterThan\",\r\n        \"GreaterThanOrEqual\":\"GreaterThanOrEqual\",\r\n        \"LessThan\":\"LessThan\",\r\n        \"LessThanOrEqual\":\"LessThanOrEqual\",\r\n        \"Equal\":\"Equal\",\r\n        \"NotEqual\":\"NotEqual\",\r\n        \"Contains\":\"Contains\",\r\n        \"NotContains\":\"NotContains\",\r\n        \"StartsWith\":\"StartsWith\",\r\n        \"NotStartsWith\":\"NotStartsWith\",\r\n        \"EndsWith\":\"EndsWith\",\r\n        \"NotEndsWith\":\"NotEndsWith\",\r\n        \"IsNull\":\"IsNull\",\r\n        \"IsNotNull\":\"IsNotNull\",\r\n        \"In\":\"In\",\r\n        \"NotIn\":\"NotIn\",\r\n        \"Success\":\"Expression Has Been CreatedÃ¯Â¼Â\",\r\n        \"Warning_SelectRelation\":\"Please Select Relations!\",\r\n        \"Warning_ContainsFilters\":\"Please ensure that the relationship contains filters!\",\r\n        \"Warning_ConditionsComplete\":\"Please ensure that the filter conditions are complete!\",\r\n        \"Warning_NumericMatch\":\"Numeric fields cannot be filled with characters\",\r\n    },\r\n    \"en-US\": {\r\n        \"Item\": \"Item\",\r\n        \"Operator\": \"Operator\",\r\n        \"ExpressType\": \"ExpressType\",\r\n        \"Value\": \"Value\",\r\n        \"Operation\": \"Operation\",\r\n        \"WindowTitle\": \"FilterCondition\",\r\n        \"Confirm\": \"Confirm\",\r\n        \"Reset\": \"Reset\",\r\n        \"Cancle\":\"Cancle\",\r\n        \"Add\":\"Add\",\r\n        \"Delete\":\"Delete\",\r\n        \"AddGroup\":\"AddGroup\",\r\n        \"AddItem\":\"AddItem\",\r\n        \"PlaceHolder\":\"Please Input Value\",\r\n        \"Expression\":\"Expression\",\r\n        \"SelectItem\":\"Please Select Item\",\r\n        \"And\":\"And\",\r\n        \"Or\":\"Or\",\r\n        \"SelectProperty\":\"SelectProperty\",\r\n        \"GreaterThan\":\"GreaterThan\",\r\n        \"GreaterThanOrEqual\":\"GreaterThanOrEqual\",\r\n        \"LessThan\":\"LessThan\",\r\n        \"LessThanOrEqual\":\"LessThanOrEqual\",\r\n        \"Equal\":\"Equal\",\r\n        \"NotEqual\":\"NotEqual\",\r\n        \"Contains\":\"Contains\",\r\n        \"NotContains\":\"NotContains\",\r\n        \"StartsWith\":\"StartsWith\",\r\n        \"NotStartsWith\":\"NotStartsWith\",\r\n        \"EndsWith\":\"EndsWith\",\r\n        \"NotEndsWith\":\"NotEndsWith\",\r\n        \"IsNull\":\"IsNull\",\r\n        \"IsNotNull\":\"IsNotNull\",\r\n        \"In\":\"In\",\r\n        \"NotIn\":\"NotIn\",\r\n        \"Success\":\"Expression has been createdÃ¯Â¼Â\",\r\n        \"Warning_SelectRelation\":\"Please Select Relations!\",\r\n        \"Warning_ContainsFilters\":\"Please ensure that the relationship contains filters!\",\r\n        \"Warning_ConditionsComplete\":\"Please ensure that the filter conditions are complete!\",\r\n        \"Warning_NumericMatch\":\"Numeric fields cannot be filled with characters\",\r\n    },\r\n    \"zh-CHT\": {\r\n        \"Item\": \"Ã©ÂÂ¸Ã¦ÂÂÃ©Â Â\",\r\n        \"Operator\": \"Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦\",\r\n        \"ExpressType\": \"Ã¥ÂÂ¼Ã©Â¡ÂÃ¥ÂÂ\",\r\n        \"Value\": \"Ã¥ÂÂ¼\",\r\n        \"Operation\": \"Ã¦ÂÂÃ¤Â½Â\",\r\n        \"WindowTitle\": \"Ã©ÂÂÃ¦Â¿Â¾Ã¦Â¢ÂÃ¤Â»Â¶Ã©ÂÂ¶Ã©ÂÂÃ¥Â¼Â\",\r\n        \"Confirm\": \"Ã§Â¢ÂºÃ¥Â®Â\",\r\n        \"Reset\": \"Ã©ÂÂÃ§Â½Â®\",\r\n        \"Cancle\":\"Ã¥ÂÂÃ¦Â¶Â\",\r\n        \"Add\":\"Ã¦Â·Â»Ã¥ÂÂ \",\r\n        \"Delete\":\"Ã¥ÂÂªÃ©ÂÂ¤\",\r\n        \"AddGroup\":\"Ã¦Â·Â»Ã¥ÂÂ Ã¦Â¢ÂÃ¤Â»Â¶Ã¥ÂÂÃ§ÂµÂ\",\r\n        \"AddItem\":\"Ã¦Â·Â»Ã¥ÂÂ Ã¦Â¢ÂÃ¤Â»Â¶\",\r\n        \"PlaceHolder\":\"Ã¨Â«ÂÃ¨Â¼Â¸Ã¥ÂÂ¥Ã¥ÂÂ¼\",\r\n        \"Expression\":\"Ã©ÂÂ¶Ã©ÂÂÃ¥Â¼Â\",\r\n        \"SelectItem\":\"Ã¨Â«ÂÃ©ÂÂ¸Ã¦ÂÂÃ©Â ÂÃ§ÂÂ®\",\r\n        \"And\":\"Ã¤Â¸Â¦Ã¤Â¸Â\",\r\n        \"Or\":\"Ã¦ÂÂÃ¨ÂÂ\",\r\n        \"SelectProperty\":\"Ã©ÂÂ¸Ã¦ÂÂÃ¥Â±Â¬Ã¦ÂÂ§\",\r\n        \"GreaterThan\":\"Ã¥Â¤Â§Ã¦ÂÂ¼\",\r\n        \"GreaterThanOrEqual\":\"Ã¥Â¤Â§Ã¦ÂÂ¼Ã§Â­ÂÃ¦ÂÂ¼\",\r\n        \"LessThan\":\"Ã¥Â°ÂÃ¦ÂÂ¼\",\r\n        \"LessThanOrEqual\":\"Ã¥Â°ÂÃ¦ÂÂ¼Ã§Â­ÂÃ¦ÂÂ¼\",\r\n        \"Equal\":\"Ã§Â­ÂÃ¦ÂÂ¼\",\r\n        \"NotEqual\":\"Ã¤Â¸ÂÃ§Â­ÂÃ¦ÂÂ¼\",\r\n        \"Contains\":\"Ã¥ÂÂÃ¥ÂÂ«\",\r\n        \"NotContains\":\"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«\",\r\n        \"StartsWith\":\"Ã©ÂÂÃ©Â Â­Ã¦ÂÂ¯\",\r\n        \"NotStartsWith\":\"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã©ÂÂÃ©Â Â­Ã¦ÂÂ¯\",\r\n        \"EndsWith\":\"Ã§ÂµÂÃ¥Â°Â¾Ã¦ÂÂ¯\",\r\n        \"NotEndsWith\":\"Ã¤Â¸ÂÃ¥ÂÂÃ¥ÂÂ«Ã§ÂµÂÃ¥Â°Â¾Ã¦ÂÂ¯\",\r\n        \"IsNull\":\"Ã§ÂÂºÃ§Â©Âº\",\r\n        \"IsNotNull\":\"Ã¤Â¸ÂÃ§ÂÂºÃ§Â©Âº\",\r\n        \"In\":\"Ã¥ÂÂ¨\",\r\n        \"NotIn\":\"Ã¤Â¸ÂÃ¥ÂÂ¨\",\r\n        \"Success\":\"Ã©ÂÂ¶Ã©ÂÂÃ¥Â¼ÂÃ¥Â·Â²Ã§ÂÂÃ¦ÂÂÃ¯Â¼Â\",\r\n        \"Warning_SelectRelation\":\"Ã¨Â«ÂÃ©ÂÂ¸Ã¦ÂÂÃ©ÂÂÃ¤Â¿ÂÃ¥ÂÂ¼Ã¯Â¼Â\",\r\n        \"Warning_ContainsFilters\":\"Ã¨Â«ÂÃ¤Â¿ÂÃ¨Â­ÂÃ©ÂÂÃ¤Â¿ÂÃ¤Â¸Â­Ã¥ÂÂÃ¥ÂÂ«Ã©ÂÂÃ¦Â¿Â¾Ã©Â ÂÃ¯Â¼Â\",\r\n        \"Warning_ConditionsComplete\":\"Ã¨Â«ÂÃ¤Â¿ÂÃ¨Â­ÂÃ©ÂÂÃ¦Â¿Â¾Ã¦Â¢ÂÃ¤Â»Â¶Ã¥Â®ÂÃ¦ÂÂ´Ã¯Â¼Â\",\r\n        \"Warning_NumericMatch\":\"Ã¦ÂÂ¸Ã¥ÂÂ¼Ã¥ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ¤Â¸ÂÃ¥ÂÂ¯Ã¥Â¡Â«Ã¥Â­ÂÃ§Â¬Â¦Ã¯Â¼Â\",\r\n    }    \r\n};","import { Pipe, PipeTransform, Inject, LOCALE_ID } from '@angular/core';\r\nimport { Filter_Condition_LANG_RESOURCES } from './i18n/lang.resource';\r\n\r\n@Pipe({ name: 'locale' })\r\nexport class FilterConditionLocalePipe implements PipeTransform {\r\n    private readonly defaultLang: string = \"zh-CHS\";\r\n    private langCode: string;\r\n    private lang: {};\r\n    constructor(\r\n        @Inject(LOCALE_ID) localeId: string\r\n    ) {\r\n        localeId = localStorage.getItem('languageCode');\r\n        this.langCode = localeId || this.defaultLang;\r\n        this.lang = Filter_Condition_LANG_RESOURCES[this.langCode] || Filter_Condition_LANG_RESOURCES[this.defaultLang];\r\n    }\r\n    transform(name: string): any {\r\n        return this.lang[name] || name;\r\n    }\r\n}\r\n\r\n","import { Component, ViewChild, Input, EventEmitter, Output, OnInit, Inject, LOCALE_ID } from '@angular/core';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { FilterExpression, ExpressionItem } from '../filter-expression-entity';\r\nimport { ExpressionService } from '@gsp-svc/expression';\r\nimport { VarEntity } from '@gsp-svc/expression';\r\nimport { Schema } from '@gsp-svc/expression';\r\nimport { GspCommonDataType } from '@gsp-bef/gsp-cm-metadata';\r\nimport { InjectedEntity } from '@gsp-svc/expression';\r\nimport { ExpressTypeEnum, CompareTypes, RelationTypes, ExpressTypes, RelationTypeEnum, CompareTypeEnum} from '../typeinfo';\r\nimport { PropertyDataType } from '../property-entity';\r\nimport {FieldType} from '../field-type';\r\nimport { FilterEntitySchema } from '../schema';\r\nimport { FilterInjectedEntity } from '../injected-entity';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { FilterConditionLocalePipe } from '../filter-condition-locale.pipe';\r\nimport { NewSchema } from '../NewSchema';\r\n@Component({\r\n  selector: 'app-filter-condition',\r\n  templateUrl: './filter-condition.component.html',\r\n  styleUrls: ['./filter-condition.component.css'],\r\n  providers: [ExpressionService],\r\n  encapsulation:ViewEncapsulation.None\r\n})\r\n/**\r\n * Ã¨Â¿ÂÃ¦Â»Â¤Ã¦ÂÂ¡Ã¤Â»Â¶Ã¥Â¼Â¹Ã¥ÂÂºÃ¦Â¡ÂÃ©ÂÂ»Ã¨Â¾ÂÃ§Â±Â»\r\n */\r\nexport class FilterConditionComponent implements OnInit {\r\n  localePipe: FilterConditionLocalePipe;\r\n  constructor(private expr: ExpressionService,\r\n    private notifyservice:NotifyService,\r\n    @Inject(LOCALE_ID) localeId:string,\r\n    ) {\r\n      localeId =  localStorage.getItem('languageCode');\r\n      this.localePipe = new FilterConditionLocalePipe(localeId);\r\n     }\r\n  \r\n  treeDataTemp: TreeNode[]\r\n  //Ã¨ÂÂ·Ã¥Â¾ÂÃ¦Â ÂÃ¥ÂÂÃ¨Â¡Â¨Ã§Â»ÂÃ¤Â»Â¶Ã¦ÂÂ\r\n  @ViewChild('tt') tt: TreeTableComponent;\r\n  //Ã¥ÂÂ³Ã©ÂÂ­Ã§ÂªÂÃ¥ÂÂ£Ã¤ÂºÂÃ¤Â»Â¶\r\n  @Output() closed = new EventEmitter<string>();\r\n  @Output() result = new EventEmitter<string>();\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥Â®ÂÃ¤Â½Â\r\n  @Input() contextEntity:VarEntity[] =[];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ©Â»ÂÃ¨Â®Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n  @Input() expressionText: string = \"\";\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â­Ã§ÂÂschema\r\n  @Input() expressionSchema: Array<{ name: string, schema: Schema }> = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â­Ã§ÂÂÃ¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n  @Input() expressionInjectedEntities: InjectedEntity[] = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂcdtÃ©ÂÂ\r\n  @Input() expressionCDT: GspCommonDataType[] = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¨Â¡Â¨\r\n  @Input() propertyList: Array<{ text: string,propertyDataType:PropertyDataType, value: string,parentItem:string}> = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â²\r\n  @Input() filterExpressionString: string = null;\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Âschema\r\n  @Input() schemaMap = new Map<string,FilterEntitySchema>();\r\n  //==============Ã¦ÂÂ°Ã¥ÂÂ Ã¥ÂÂ¥Ã§ÂÂnewSchemaMap=======================\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂnewSchema\r\n   @Input() newSchemaMap = new Map<string,NewSchema>();\r\n  //========================================================\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n  @Input() injectedEntity = new FilterInjectedEntity();\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â¼Â¹Ã¥ÂÂºÃ¦Â¡ÂÃ¥Â®Â½Ã¥ÂºÂ¦\r\n  @Input() exprWinWidth:number =850;\r\n  popupSettings=\r\n  {\r\n    popupClass:\"lpopup\"\r\n  }\r\n\r\n  public operatorView = [];\r\n  //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦Ã©ÂÂ\r\n  public operators= [];\r\n  \r\n  public stringOperators = [];\r\n\r\n  public NumberOperators = [];\r\n  //Ã¥ÂÂ³Ã§Â³Â»Ã©ÂÂ\r\n  public relations = [];\r\n  //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ©ÂÂ\r\n  public expressTypes =  [];\r\n  public filterExpression: FilterExpression;\r\n  //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂ\r\n  public nodeTemp: TreeNode[];\r\n  //Ã¦ÂÂÃ¤Â½ÂÃ©ÂÂ»Ã¨Â¾ÂÃ©ÂÂÃ©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂ¼\r\n  defaultSelectGroup:string;\r\n  defaultSelectItem:string;\r\n  //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦Ã©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂ¼\r\n  public defaultOperatorText:string;\r\n  //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂ¼\r\n  public defaultExpressTypeText:string;\r\n  //Ã¥ÂÂ¤Ã¦ÂÂ­Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¤Â¿ÂÃ¥Â­ÂÃ§Â¼ÂÃ¨Â¾ÂÃ¥ÂÂÃ§ÂÂÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n  public isEdited: boolean = false;\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â²\r\n  public filterExpressionPre: FilterExpression;\r\n  public displayPopup:boolean = false;\r\n  cols:any[];\r\n  groupIcon = '<span class=\"f-icon f-icon-windows\"></span>';\r\n  treeData: TreeNode[] = [];\r\n   //Ã¦Â¶ÂÃ¦ÂÂ¯Ã¦ÂÂÃ§Â¤Âº\r\n  private notifies = {};  \r\n  private itemValue:string;\r\n  //Ã¥ÂÂÃ¥Â§ÂÃ¥ÂÂÃ¯Â¼ÂÃ¥Â¤ÂÃ¥ÂÂ¶treeDataÃ¥ÂÂ¼,treeDataTempÃ§ÂÂ¨Ã¤ÂºÂÃ¨Â½Â¬Ã¦ÂÂ¢Ã¤Â¸ÂºFilterExpressionÃ¥Â®ÂÃ¤Â½Â\r\n  ngOnInit(): void {\r\n    //Ã¥Â¹Â¶Ã¤Â¸ÂÃ¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§ÂÂÃ¦ÂÂ¾Ã§Â¤ÂºÃ§ÂÂÃ¥ÂÂ \r\n    this.cols = [\r\n      { field: 'item', title: this.localePipe.transform(\"Item\"), width: 271 },\r\n      { field: 'operator', title: this.localePipe.transform(\"Operator\"), width: 191 },\r\n      { field: 'expressType', title: this.localePipe.transform(\"ExpressType\"), width: 180 },\r\n      { field: 'value', title: this.localePipe.transform(\"Value\"), width: 214 },\r\n      { field: 'operation', title: this.localePipe.transform(\"Operation\"), width: 130}];\r\n    if (!(this.filterExpressionString) || this.filterExpressionString == \"\") {\r\n      this.treeData = [\r\n        {\r\n          data:\r\n          {\r\n            \"id\": 1,                    //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n            \"item\": this.localePipe.transform(\"And\"),             //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n            \"propertyDataType\":null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n            \"operator\": null,           //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n            \"expressType\": null,        //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n            \"value\": null,              //Ã¥ÂÂ¼\r\n            \"displaySelect\":false,      //Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayOperator\": false,   //Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayExpressType\": false,//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayValue\": false,      //Ã¥ÂÂ¼Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"parentItem\":null           //Ã§ÂÂ¶Ã¥Â­ÂÃ©Â¡Â¹ \r\n          },\r\n          children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n          expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n        }\r\n      ];\r\n    }\r\n    else {\r\n      this.filterExpressionPre = JSON.parse(this.filterExpressionString);\r\n      this.treeData.push(this.unConvert(this.filterExpressionPre));\r\n      this.treeData[0].data.id = 1;\r\n    }\r\n    this.treeDataTemp = this.treeData;\r\n    this.defaultSelectItem =  this.localePipe.transform(\"SelectItem\");\r\n    this.defaultExpressTypeText = this.localePipe.transform(\"Value\");\r\n    this.defaultSelectGroup=this.localePipe.transform(\"And\");\r\n    this.defaultOperatorText = this.localePipe.transform(\"GreaterThan\");\r\n    this.notifies = {\r\n      1: { type: 'success', msg: this.localePipe.transform(\"Success\")},\r\n      2: { type: 'warning', msg: this.localePipe.transform(\"Warning_SelectRelation\") },\r\n      3: { type: 'warning',msg: this.localePipe.transform(\"Warning_ContainsFilters\") },\r\n      4: { type: 'warning',msg: this.localePipe.transform(\"Warning_ConditionsComplete\")},\r\n      5: { type: 'warning',msg:this.localePipe.transform(\"Warning_NumericMatch\")}\r\n    };  \r\n    this.expressTypes =  [\r\n      {id: this.localePipe.transform(\"Value\")},\r\n      {id: this.localePipe.transform(\"Expression\")}\r\n    ];\r\n    this.relations =  [\r\n      { id: this.localePipe.transform(\"And\")},\r\n      { id: this.localePipe.transform(\"Or\")},\r\n    ];\r\n    this.operators = [\r\n      { id: this.localePipe.transform(\"GreaterThan\")},\r\n      { id: this.localePipe.transform(\"GreaterThanOrEqual\")},\r\n      { id: this.localePipe.transform(\"LessThan\")},\r\n      { id: this.localePipe.transform(\"LessThanOrEqual\")},\r\n      { id: this.localePipe.transform(\"Equal\")},\r\n      { id: this.localePipe.transform(\"NotEqual\")},\r\n      { id: this.localePipe.transform(\"Contains\")},\r\n      { id: this.localePipe.transform(\"NotContains\")},\r\n      { id: this.localePipe.transform(\"StartsWith\")},\r\n      { id: this.localePipe.transform(\"EndsWith\")},\r\n      { id: this.localePipe.transform(\"NotStartsWith\")},\r\n      { id: this.localePipe.transform(\"NotEndsWith\")},\r\n      { id: this.localePipe.transform(\"IsNull\")},\r\n      { id: this.localePipe.transform(\"IsNotNull\")},\r\n      { id: this.localePipe.transform(\"In\")},\r\n      { id: this.localePipe.transform(\"NotIn\")},\r\n    ];\r\n    this.NumberOperators = [\r\n      { id: this.localePipe.transform(\"GreaterThan\")},\r\n      { id: this.localePipe.transform(\"GreaterThanOrEqual\")},\r\n      { id: this.localePipe.transform(\"LessThan\")},\r\n      { id: this.localePipe.transform(\"LessThanOrEqual\")},\r\n      { id: this.localePipe.transform(\"Equal\")},\r\n      { id: this.localePipe.transform(\"NotEqual\")},\r\n      { id: this.localePipe.transform(\"IsNull\")},\r\n      { id: this.localePipe.transform(\"IsNotNull\")},\r\n    ];\r\n    this.stringOperators = [\r\n      { id: this.localePipe.transform(\"Equal\")},\r\n      { id: this.localePipe.transform(\"NotEqual\")},\r\n      { id: this.localePipe.transform(\"Contains\")},\r\n      { id: this.localePipe.transform(\"NotContains\")},\r\n      { id: this.localePipe.transform(\"StartsWith\")},\r\n      { id: this.localePipe.transform(\"EndsWith\")},\r\n      { id: this.localePipe.transform(\"NotStartsWith\")},\r\n      { id: this.localePipe.transform(\"NotEndsWith\")},\r\n      { id: this.localePipe.transform(\"IsNull\")},\r\n      { id: this.localePipe.transform(\"IsNotNull\")},\r\n    ];\r\n  }\r\n \r\n\r\n  /**\r\n   * Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã¤Â¸Â­Ã¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©Ã¨Â§Â¦Ã¥ÂÂÃ¥ÂÂ½Ã¦ÂÂ°\r\n   * @param $event Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  nodeSelected($event) {\r\n   \r\n    //Ã©ÂÂÃ¨ÂÂÃ¦ÂÂÃ¦ÂÂÃ¦ÂÂÃ§ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¬Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂ\r\n    this.hideNodeEditor(this.treeData);\r\n\r\n    //Ã¥Â°ÂÃ¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¦Â¯ÂÃ¨Â¾ÂÃ©Â¡Â¹Ã£ÂÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ©Â¡Â¹Ã£ÂÂÃ¥ÂÂ¼Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ¦ÂÂ¾Ã§Â¤ÂºÃ¯Â¼ÂÃ¥Â¹Â¶Ã¥Â°ÂÃ¦ÂÂÃ©ÂÂÃ¥Â¯Â¹Ã¥ÂºÂÃ¦ÂÂ°Ã¦ÂÂ®Ã¨ÂµÂÃ§Â»ÂÃ©Â»ÂÃ¨Â®Â¤Ã©Â¡Â¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¦ÂÂ¾Ã§Â¤Âº \r\n    this.defaultOperatorText = $event.node.data.operator;\r\n    this.defaultExpressTypeText = $event.node.data.expressType;\r\n    if($event.node.data.item==this.localePipe.transform(\"And\") || $event.node.data.item==this.localePipe.transform(\"Or\"))\r\n    {\r\n      this.defaultSelectGroup = $event.node.data.item;\r\n    }\r\n    else if($event.node.data.item!==this.localePipe.transform(\"SelectProperty\"))\r\n    {\r\n      let properties = this.propertyList.filter(x => x.text == $event.node.data.item);\r\n      this.defaultSelectItem = properties[0].value;\r\n\r\n      if(properties[0].propertyDataType==PropertyDataType.String){\r\n        this.operatorView = this.stringOperators;\r\n      }\r\n      else if(properties[0].propertyDataType==PropertyDataType.Int16||\r\n      properties[0].propertyDataType==PropertyDataType.Int32 ||\r\n      properties[0].propertyDataType==PropertyDataType.Int64 ||\r\n      properties[0].propertyDataType==PropertyDataType.Decimal ||\r\n      properties[0].propertyDataType==PropertyDataType.Double){\r\n        this.operatorView = this.NumberOperators;\r\n      }\r\n      else this.operatorView = this.operators;\r\n    }\r\n   \r\n    $event.node.data.displayOperator = true;\r\n    $event.node.data.displayExpressType = true;\r\n    $event.node.data.displayValue = true;\r\n    $event.node.data.displaySelect = true;\r\n  };\r\n  /**\r\n   * Ã©ÂÂÃ¨ÂÂÃ¦ÂÂÃ¦ÂÂÃ¦ÂÂÃ§ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¬Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂ\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   */\r\n  hideNodeEditor(treeNodes: TreeNode[]) {\r\n    treeNodes.forEach(element => {\r\n      element.data.displayOperator = false;\r\n      element.data.displayExpressType = false;\r\n      element.data.displayValue = false;\r\n      element.data.displaySelect = false;\r\n      //Ã¨ÂÂ¥Ã¦ÂÂÃ¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¥Â°ÂÃ¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂÃ§Â¼ÂÃ¨Â¾ÂÃ©ÂÂÃ¦ÂÂ©Ã¦Â¡ÂÃ©ÂÂÃ¨ÂÂ\r\n      if ((element.children) && element.children.length != 0) {\r\n        this.hideNodeEditor(element.children);\r\n      }\r\n    });\r\n  };\r\n  /***\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã©ÂÂ»Ã¨Â¾ÂÃ©ÂÂÃ¦ÂÂ¶\r\n   */\r\n  selectGroup($event)\r\n  {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Group);\r\n  }\r\n  /***\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¶\r\n   */\r\n  selectItem($event)\r\n  {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Item);\r\n  }\r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã¦Â¯ÂÃ¨Â¾ÂÃ¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã¦ÂÂ¶\r\n   * @param $event Ã¦Â¯ÂÃ¨Â¾ÂÃ¦ÂÂÃ¤Â½ÂÃ©Â¡Â¹Ã¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  selectOperator($event) {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Operation);\r\n  };\r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã¥ÂÂ¼Ã§Â±Â»Ã¥ÂÂÃ¦ÂÂ¶\r\n   * @param $event Ã¥ÂÂ¼Ã§Â±Â»Ã¥ÂÂÃ©Â¡Â¹Ã¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  selectExpressType($event) {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Valuetype)\r\n  };\r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã§Â»ÂÃ¦ÂÂÃ¥ÂÂÃ©ÂÂÃ¨ÂÂÃ¨Â¯Â¥Ã¥Â­ÂÃ¦Â®ÂµÃ©ÂÂÃ¦ÂÂ©Ã¦Â¡Â\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param fieldType Ã¦ÂÂÃ©ÂÂÃ¥Â­ÂÃ¦Â®Âµ\r\n   */\r\n  hideFieldEditor(treeNodes: TreeNode[], fieldType: FieldType) {\r\n    //Ã¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ¦ÂÂÃ¤Â½ÂÃ§ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¦Â Â¹Ã¦ÂÂ®Ã¦ÂÂÃ©ÂÂÃ¦ÂÂ©Ã§ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ¥Â°ÂÃ¥Â¯Â¹Ã¥ÂºÂÃ©ÂÂÃ¦ÂÂ©Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ©ÂÂÃ¨ÂÂ\r\n    treeNodes.forEach(treeNode => {\r\n      if (this.tt.isSelected(treeNode)) {\r\n        switch (fieldType) {\r\n          case FieldType.Item:treeNode.data.displaySelect = false;break;\r\n          case FieldType.Operation: treeNode.data.displayOperator = false; break;\r\n          case FieldType.Valuetype: treeNode.data.displayExpressType = false; break;\r\n        }\r\n        return;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        this.hideFieldEditor(treeNode.children, fieldType);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Ã¦ÂÂÃ¥Â¼ÂÃ¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â¼ÂÃ¨Â¾ÂÃ¥ÂÂ¨\r\n   */\r\n  openExpressEditor() {\r\n    let that = this;\r\n    //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â¼Â¹Ã¥ÂÂºÃ¦Â¡ÂÃ¥Â®Â½Ã¥ÂºÂ¦\r\n    //this.expr.addWindowWidth(this.exprWinWidth);\r\n    //Ã¦Â·Â»Ã¥ÂÂ Ã©Â¢ÂÃ§Â½Â®Ã¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥ÂÂÃ©ÂÂ\r\n    if(this.contextEntity && this.contextEntity.length!=0)\r\n    {\r\n      this.contextEntity.forEach(element => {\r\n        this.expr.addContext(element);\r\n      });\r\n    }\r\n    \r\n    //Ã¦Â·Â»Ã¥ÂÂ Ã©Â¢ÂÃ§Â½Â®Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂÃ¦ÂÂ¬\r\n    let selectNode = this.isSelected(this.treeData);\r\n    if((selectNode) && (selectNode.data.value!=\"\") && (selectNode.data.value!=null))\r\n    {\r\n      this.expr.addExpressionText(selectNode.data.value);\r\n    }\r\n    else this.expr.addExpressionText(this.expressionText);\r\n    //Ã¦Â·Â»Ã¥ÂÂ Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n    this.expressionInjectedEntities.forEach(element => {\r\n      this.expr.addInjectedEntity(element.name, element.schemaName, element.injectedName, element.injectedType);\r\n    });\r\n    //Ã¦Â·Â»Ã¥ÂÂ schema\r\n    this.expressionSchema.forEach(element => {\r\n      this.expr.addSchema(element.name, element.schema);\r\n    });\r\n    //Ã¦Â·Â»Ã¥ÂÂ cdt\r\n    this.expr.addCDT(this.expressionCDT);\r\n    //Ã¦ÂÂÃ¥Â¼ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â¼ÂÃ¨Â¾ÂÃ¥ÂÂ¨Ã¥Â¹Â¶Ã¨Â¿ÂÃ¥ÂÂÃ§Â¼ÂÃ¨Â¾ÂÃ§Â»ÂÃ¦ÂÂ\r\n    this.expr.buildExpression().then(info => {\r\n      let expressInfo: any = info;\r\n      this.displayExpressResult(that.treeData, expressInfo);\r\n    });\r\n  }\r\n   /**\r\n   * Ã©ÂÂÃ¤Â¸Â­Ã¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©\r\n   * @param treeNodes Ã¥ÂÂ³Ã§Â³Â»Ã§Â»Â\r\n   */\r\n  isSelected(treeNodes:TreeNode[]):any\r\n  {\r\n    let treeNode:TreeNode;\r\n    for(var i = 0; i < treeNodes.length; i ++)\r\n    {\r\n      if (this.tt.isSelected(treeNodes[i])) {\r\n        treeNode = treeNodes[i];\r\n        break;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¥ÂÂ¨Ã¨Â¯Â¥Ã¥Â±ÂÃ¨ÂÂÃ§ÂÂ¹Ã¤Â¸Â­Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNodes[i].children) && treeNodes[i].children.length != 0) {\r\n        treeNode = this.isSelected(treeNodes[i].children);\r\n        if((treeNode)) break; \r\n      }\r\n    }\r\n    return treeNode;\r\n  }\r\n  /**\r\n   * Ã¥Â°ÂÃ¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â»ÂÃ¦ÂÂÃ¥Â±ÂÃ§Â¤ÂºÃ¥ÂÂ°Ã¥Â¯Â¹Ã¥ÂºÂÃ¨ÂÂÃ§ÂÂ¹\r\n   * @param treeNodes Ã¦Â ÂÃ¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param expressInfo Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â¾ÂÃ¥ÂÂ°Ã§Â»ÂÃ¦ÂÂ\r\n   */\r\n  displayExpressResult(treeNodes: TreeNode[], expressInfo: string) {\r\n    //Ã¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¥Â®ÂÃ¤Â½ÂÃ¯Â¼ÂÃ¥Â¹Â¶Ã¥Â°ÂÃ¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂÃ¥Â¾ÂÃ§Â»ÂÃ¦ÂÂÃ¨ÂµÂÃ§Â»ÂÃ¥Â¯Â¹Ã¥ÂºÂÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â¿ÂÃ¨Â¡ÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n    treeNodes.forEach(treeNode => {\r\n      if (this.tt.isSelected(treeNode)) {\r\n        treeNode.data.value = expressInfo;\r\n        return;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¥ÂÂ¨Ã¨Â¯Â¥Ã¥Â±ÂÃ¨ÂÂÃ§ÂÂ¹Ã¤Â¸Â­Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        this.displayExpressResult(treeNode.children, expressInfo);\r\n      }\r\n      //Ã¨ÂÂ¥Ã¤Â»ÂÃ¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¯Â¼ÂÃ¥ÂÂÃ¤Â¸ÂÃ¨Â¿ÂÃ¨Â¡ÂÃ¤Â»Â»Ã¤Â½ÂÃ¦ÂÂÃ¤Â½Â\r\n    });\r\n  }\r\n  /**\r\n   * Ã¥ÂÂ³Ã§Â³Â»Ã©ÂÂÃ¦ÂÂ©Ã¦ÂÂÃ©ÂÂ®Ã©ÂÂÃ¦ÂÂ©Ã¤ÂºÂÃ¤Â»Â¶\r\n   * @param $event Ã©ÂÂÃ¦ÂÂ©Ã¦ÂÂÃ©ÂÂ®Ã¦ÂÂÃ©ÂÂÃ¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  itemClick($event) {\r\n    //Ã¨ÂÂ¥Ã©ÂÂÃ¦ÂÂ©Ã¦Â·Â»Ã¥ÂÂ Ã¥ÂÂ³Ã§Â³Â»\r\n    if ($event.value == RelationTypeEnum.AddRelation) {\r\n      this.addNode(this.treeData,this.localePipe.transform(\"And\"),null,null);\r\n    }\r\n    //Ã¨ÂÂ¥Ã©ÂÂÃ¦ÂÂ©Ã¦Â·Â»Ã¥ÂÂ Ã¥Â±ÂÃ¦ÂÂ§\r\n    else if ($event.value == RelationTypeEnum.AddProperty) {\r\n      this.addNode(this.treeData, this.localePipe.transform(\"SelectProperty\"),this.localePipe.transform(\"Equal\"),this.localePipe.transform(\"Value\"));\r\n    }\r\n    else this.propertyNodeOperate($event, this.treeData, FieldType.Item);\r\n  }\r\n \r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã¥Â±ÂÃ¦ÂÂ§Ã¨ÂÂÃ§ÂÂ¹Ã¦ÂÂÃ¤Â½Â\r\n   * Ã¥Â¯Â¹Ã¦ÂÂ°Ã¦Â·Â»Ã¥ÂÂ Ã§ÂÂÃ¥Â±ÂÃ¦ÂÂ§Ã¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ©ÂÂ»Ã¨Â¾ÂÃ¥Â¤ÂÃ§ÂÂ\r\n   * @param value \r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param fieldType Ã¨ÂÂÃ§ÂÂ¹Ã§Â±Â»Ã¥ÂÂ\r\n   */\r\n  propertyNodeOperate(event: any, treeNodes: TreeNode[], fieldType: FieldType) {\r\n    treeNodes.forEach(treenode => {\r\n      if (this.tt.isSelected(treenode)) {\r\n        //Ã¥Â¯Â¹Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¨ÂµÂÃ¥ÂÂ¼Ã¦ÂÂÃ¤Â½Â\r\n        switch (fieldType) {\r\n          case FieldType.Group:\r\n          {\r\n            treenode.data.item = event.data.id;\r\n            this.defaultSelectGroup = event.data.id;\r\n          }break;\r\n          case FieldType.Item: \r\n          {\r\n            treenode.data.item =event.data.text;\r\n            this.defaultSelectItem = event.data.value;\r\n            treenode.data.parentItem = event.data.parentItem;\r\n            treenode.data.propertyDataType = event.data.propertyDataType;\r\n\r\n            if(treenode.data.propertyDataType==PropertyDataType.String){\r\n              this.operatorView = this.stringOperators;\r\n            }\r\n            else if(treenode.data.propertyDataType==PropertyDataType.Int16 ||\r\n            treenode.data.propertyDataType==PropertyDataType.Int32 ||\r\n            treenode.data.propertyDataType==PropertyDataType.Int64 ||\r\n            treenode.data.propertyDataType==PropertyDataType.Decimal ||\r\n            treenode.data.propertyDataType==PropertyDataType.Double){\r\n              this.operatorView = this.NumberOperators;\r\n            }\r\n            else this.operatorView = this.operators;\r\n\r\n            \r\n          } break;\r\n          case FieldType.Operation: \r\n          {\r\n            treenode.data.operator = event.data.id;\r\n            this.defaultOperatorText = event.data.id;        \r\n          } break;\r\n          case FieldType.Valuetype: \r\n          {\r\n            treenode.data.expressType = event.data.id; \r\n            this.defaultExpressTypeText = event.data.id;          \r\n          } break;\r\n        }\r\n        return;\r\n      }\r\n      //Ã¥ÂÂ¦Ã¥ÂÂÃ¥Â¯Â¹Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¨ÂµÂÃ¥ÂÂ¼Ã¦ÂÂÃ¤Â½Â\r\n      else if ((treenode.children) && treenode.children.length != 0) {\r\n        this.propertyNodeOperate(event, treenode.children, fieldType);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Ã¦Â Â¹Ã¦ÂÂ®Ã¦ÂÂÃ©ÂÂÃ¤Â¸ÂºÃ¥ÂÂ³Ã§Â³Â»Ã¦ÂÂÃ¨ÂÂÃ¥Â±ÂÃ¦ÂÂ§Ã¥Â¯Â¹Ã¦ÂÂ°Ã¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¥ÂÂÃ¥Â§ÂÃ¥ÂÂ\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param defaultString Ã¦ÂÂ°Ã¨ÂÂÃ§ÂÂ¹Ã¦ÂÂ¾Ã§Â¤ÂºÃ©Â»ÂÃ¨Â®Â¤Ã¥ÂÂ¼\r\n   */\r\n  addNode(treeNodes: TreeNode[], defaultString: any,defaultOperator:string,defalutExpressType:string)\r\n   {\r\n    treeNodes.forEach(treeNode => {\r\n      if (this.tt.isSelected(treeNode)) {\r\n        //Ã¨ÂÂ¥Ã¥ÂÂ³Ã§Â³Â»Ã¥ÂÂ¼Ã¤Â¸ÂºÃ§Â©Âº\r\n        if(!(treeNode.data.item))\r\n        {\r\n          this.notifyservice[this.notifies['2'].type]({\r\n            msg: this.notifies['2'].msg\r\n          });  \r\n          return;\r\n        }\r\n        //Ã¨ÂÂ¥Ã¤Â¸ÂºÃ¦ÂÂÃ©ÂÂÃ§ÂÂÃ¥ÂÂ³Ã§Â³Â»Ã¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¥ÂÂ¨Ã¥ÂÂ¶Ã¥Â­ÂÃ©Â¡Â¹Ã©ÂÂÃ¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ°Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n        let newNode: TreeNode =\r\n        {\r\n          data:\r\n          {\r\n            \"item\": defaultString,\r\n            \"propertyDataType\":null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n            \"operator\": defaultOperator,\r\n            \"expressType\": defalutExpressType,\r\n            \"value\": null,\r\n            \"id\": Math.random(),\r\n            \"parentItem\":null      \r\n          },\r\n          parent: treeNode,\r\n          children: [],\r\n          expanded: true\r\n        };\r\n        //Ã¥ÂÂÃ¨Â¯Â¥Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂÃ¥Â­ÂÃ©Â¡Â¹Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ°Ã¨ÂÂÃ§ÂÂ¹\r\n        treeNode.children.push(newNode);\r\n        return;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¤Â¸ÂÃ¨Â¯Â¥Ã¨ÂÂÃ§ÂÂ¹Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂÃ¤Â¸ÂºÃ§Â©ÂºÃ¯Â¼ÂÃ¥ÂÂÃ¥ÂÂ¨Ã¥ÂÂ¶Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸Â­Ã¦ÂÂ¥Ã¦ÂÂ¾Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        this.addNode(treeNode.children, defaultString,defaultOperator,defalutExpressType);\r\n      }\r\n    });\r\n    this.tt.updateSerializedValue();\r\n  }\r\n  /**\r\n   * Ã¥ÂÂ Ã©ÂÂ¤Ã¨ÂÂÃ§ÂÂ¹\r\n   * @param treeNode Ã¨Â¦ÂÃ¥ÂÂ Ã©ÂÂ¤Ã§ÂÂÃ¨ÂÂÃ§ÂÂ¹\r\n   */\r\n  deleteNode($event) {\r\n    this.onDelete(this.treeData,$event);\r\n  }\r\n  /**\r\n   * Ã¥ÂÂ Ã©ÂÂ¤Ã¨ÂÂÃ§ÂÂ¹Ã¥ÂÂ·Ã¤Â½ÂÃ¥Â®ÂÃ§ÂÂ°Ã§Â±Â»\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   */\r\n  onDelete(treeNodes: TreeNode[],id:number) {\r\n    treeNodes.forEach(treeNode => {\r\n      if (treeNode.data.id==id) {\r\n        if(treeNode.data.id==1)\r\n        {\r\n          this.treeData = [\r\n            {\r\n              data:\r\n              {\r\n                \"id\": 1,                    //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n                \"propertyDataType\":null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n                \"item\": this.localePipe.transform(\"And\"),              //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n                \"operator\": null,           //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n                \"expressType\": null,        //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n                \"value\": null,              //Ã¥ÂÂ¼\r\n                \"displaySelect\":false,      //Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n                \"displayOperator\": false,   //Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n                \"displayExpressType\": false,//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n                \"displayValue\": false,      //Ã¥ÂÂ¼Ã¦ÂÂ¾Ã§Â¤Âº\r\n                \"parentItem\":null           //Ã§ÂÂ¶Ã©Â¡Â¹\r\n              },\r\n              children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n              expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n            }\r\n          ];\r\n          return;\r\n        }\r\n        //Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¦ÂÂÃ¥ÂÂ¨Ã¦ÂÂ°\r\n        let index = treeNodes.indexOf(treeNode);\r\n        //Ã¥Â°ÂÃ¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¥ÂÂÃ©ÂÂ¤\r\n        treeNodes.splice(index, 1);\r\n      }\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        treeNode.children = this.onDelete(treeNode.children,id);\r\n      }\r\n    });\r\n    this.tt.updateSerializedValue();\r\n    return treeNodes;\r\n  }\r\n  /**\r\n   * Ã§Â¡Â®Ã¥Â®Â\r\n   * Ã§ÂÂÃ¦ÂÂÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n   */\r\n  onConfirm() {\r\n    this.treeDataTemp = this.treeData;\r\n    let isNull = true;\r\n    let isMatch = true;\r\n    if(this.checkNull(this.treeDataTemp[0].children,isNull) && this.checkMatch(this.treeDataTemp[0].children, isMatch))\r\n    {\r\n      this.filterExpression = new FilterExpression();\r\n      //Ã¦Â Â¹Ã¦ÂÂ®Ã¦Â ÂÃ¥Â½Â¢Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â»ÂÃ¦ÂÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â®ÂÃ¤Â½Â\r\n      this.convert(this.filterExpression, this.treeDataTemp[0]);\r\n      this.isEdited = true;\r\n      this.notifyservice[this.notifies['1'].type]({\r\n        msg: this.notifies['1'].msg\r\n      });  \r\n      this.close();\r\n      this.closed.emit(\"close\");\r\n    }\r\n   \r\n  }\r\n  //Ã©ÂÂÃ¥Â½ÂÃ¦Â£ÂÃ¦ÂÂ¥Ã¦ÂÂ´Ã¤Â¸ÂªÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂ¯Ã¥ÂÂ¦Ã¦ÂÂÃ¦Â¼ÂÃ¥Â¡Â«Ã§ÂÂÃ©Â¡Â¹\r\n  checkNull(treeNodes:TreeNode[],isNull:boolean):boolean\r\n  {\r\n    for(var i=0;i<treeNodes.length;i++)\r\n    {\r\n      if(treeNodes[i].data.item == this.localePipe.transform(\"And\") || treeNodes[i].data.item == this.localePipe.transform(\"Or\"))\r\n      {\r\n        if(!(treeNodes[i].children) || treeNodes[i].children.length==0) \r\n        {\r\n          this.notifyservice[this.notifies['3'].type]({\r\n            msg: this.notifies['3'].msg\r\n          });  \r\n          isNull = false;\r\n          break;\r\n        }\r\n        else if(!this.checkNull(treeNodes[i].children,isNull)) \r\n        {\r\n          isNull = false;\r\n          break;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        if(!(treeNodes[i].data.item) || treeNodes[i].data.item == this.localePipe.transform(\"SelectProperty\")\r\n        || !(treeNodes[i].data.operator) || !(treeNodes[i].data.expressType) \r\n        || treeNodes[i].data.value==null || treeNodes[i].data.value==undefined)\r\n       {\r\n        this.notifyservice[this.notifies['4'].type]({\r\n          msg: this.notifies['4'].msg\r\n        });  \r\n         isNull = false;\r\n         break;\r\n       }\r\n      }\r\n    }\r\n    return isNull;\r\n  }\r\n\r\n  /**\r\n   * Ã©ÂÂÃ§Â½Â®\r\n   * Ã©ÂÂÃ§Â½Â®Ã¤Â¸ÂºÃ¥ÂÂÃ¥Â§ÂÃ§ÂÂ¶Ã¦ÂÂ\r\n   */\r\n  onCancel() {\r\n    this.isEdited = false;\r\n    if(this.filterExpressionString == null || this.filterExpressionString ==\"\")\r\n    {\r\n      this.treeData = [\r\n        {\r\n          data:\r\n          {\r\n            \"id\": 1,                    //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n            \"item\": null,               //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n            \"propertyDataType\":null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n            \"operator\": null,           //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n            \"expressType\": null,        //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n            \"value\": null,              //Ã¥ÂÂ¼\r\n            \"displaySelect\":false,      //Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayOperator\": false,   //Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayExpressType\": false,//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayValue\": false,      //Ã¥ÂÂ¼Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"parentItem\":null           //Ã§ÂÂ¶Ã©Â¡Â¹\r\n          },\r\n          children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n          expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n        }\r\n      ];\r\n    }\r\n    else \r\n    {\r\n      this.filterExpressionPre = JSON.parse(this.filterExpressionString);\r\n      this.treeData = [];\r\n      this.treeData.push(this.unConvert(this.filterExpressionPre));\r\n      this.treeData[0].data.id = 1;\r\n    }\r\n  }\r\n   /**Ã¥ÂÂÃ¦Â¶Â */\r\n   cancle()\r\n   {\r\n     this.closed.emit(\"close\");\r\n   }\r\n  /**\r\n   * Ã¥ÂÂ³Ã©ÂÂ­Ã§ÂªÂÃ¥ÂÂ£\r\n   */\r\n  close() {\r\n    if (this.isEdited == true) {\r\n      //Ã¨ÂÂ¥Ã¥ÂÂªÃ¥ÂÂÃ¥ÂÂ«Ã¥ÂÂ³Ã§Â³Â»Ã©Â¡Â¹Ã¥ÂÂÃ¨Â¿ÂÃ¥ÂÂÃ§Â©Âº\r\n      if(this.filterExpression.expressItems.length==0) this.result.next(null);\r\n      //Ã¨ÂÂ¥Ã¦ÂÂÃ¥ÂÂÃ¤Â¸ÂÃ¦Â¬Â¡Ã§ÂÂ¹Ã¤ÂºÂÃ§Â¡Â®Ã¥Â®ÂÃ¯Â¼ÂÃ¥ÂÂÃ¥Â°ÂÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂJSONÃ¥ÂºÂÃ¥ÂÂÃ¥ÂÂÃ¨Â¾ÂÃ¥ÂÂº\r\n      else this.result.next(JSON.stringify(this.filterExpression));\r\n    }\r\n    //Ã¨ÂÂ¥Ã¦ÂÂªÃ§ÂÂ¹Ã§Â¡Â®Ã¥Â®ÂÃ¯Â¼ÂÃ©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ Ã¤Â»Â»Ã¤Â½ÂÃ§Â¼ÂÃ¨Â¾ÂÃ¦ÂÂÃ¦ÂÂ¬Ã¯Â¼ÂÃ¥ÂÂÃ¨Â¾ÂÃ¥ÂÂºÃ§Â©ÂºÃ¤Â¸Â²\r\n    else this.result.next(this.filterExpressionString);\r\n  }\r\n  /**\r\n   * Ã¥Â°ÂtreeDataÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºfiletrExpressionÃ¥Â®ÂÃ¤Â½Â\r\n   * @param filterExpression Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â®ÂÃ¤Â½Â\r\n   * @param treeNode Ã¦ÂÂÃ¥Â¤ÂÃ¥Â±ÂÃ§ÂÂtreeNode\r\n   */\r\n  convert(filterExpression: FilterExpression, treeNode: TreeNode): FilterExpression {\r\n    //Ã¥Â¾ÂÃ¥ÂÂ°Ã¦ÂÂÃ¥Â¤ÂÃ¥Â±ÂÃ§ÂÂÃ¥ÂÂ³Ã§Â³Â»Ã§Â¬Â¦\r\n    filterExpression.relationOperator = this.typeMatch(treeNode.data.item);\r\n    //Ã¨ÂÂ¥Ã¥ÂÂ¶Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂÃ¤Â¸ÂºÃ§Â©Âº\r\n    if (treeNode.children.length != 0) {\r\n      //Ã¥Â¯Â¹Ã¥ÂÂ¶Ã¦Â¯ÂÃ¤Â¸ÂÃ¤Â¸ÂªÃ¥Â­ÂÃ©Â¡Â¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¨Â½Â¬Ã¥ÂÂÃ¦ÂÂÃ¤Â½Â\r\n      treeNode.children.forEach(treeNodeItem => {\r\n        //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºÃ¥Â¹Â¶Ã¤Â¸ÂÃ£ÂÂÃ¦ÂÂÃ¨ÂÂÃ¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ°Ã¥Â»ÂºÃ¥Â¤ÂÃ¦ÂÂÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n        if (this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.And ||\r\n          this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.Or) {\r\n          let filterExpressionItem = new FilterExpression();\r\n          filterExpression.expressItems.push(this.convert(filterExpressionItem, treeNodeItem));\r\n        }\r\n        //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n        else {\r\n          let filterItem = new ExpressionItem();\r\n          //Ã¦Â Â¹Ã¦ÂÂ®Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¥Â±ÂÃ§Â¤ÂºÃ¥ÂÂ¼Ã¦ÂÂ¾Ã¥ÂÂ°Ã¥ÂÂ¶Ã¥ÂÂ¨Ã©Â¢ÂÃ§Â½Â®Ã¥ÂÂÃ¨Â¡Â¨Ã¤Â¸Â­Ã§ÂÂÃ¨Â¯Â­Ã¤Â¹ÂÃ¥ÂÂÃ¥ÂÂ¼Ã¯Â¼ÂÃ¥Â°ÂÃ¨Â¯Â­Ã¤Â¹ÂÃ¥ÂÂÃ¥ÂÂ¼Ã¨ÂµÂÃ§Â»ÂÃ¥Â®ÂÃ¤Â½ÂÃ¤Â¿ÂÃ¥Â­Â\r\n          let properties = this.propertyList.filter(x => x.text == treeNodeItem.data.item);\r\n          filterItem.propertyName = properties[0].value;\r\n          filterItem.propertyDataType = treeNodeItem.data.propertyDataType;\r\n          filterItem.operator = this.typeMatch(treeNodeItem.data.operator);\r\n          filterItem.expressType = this.typeMatch(treeNodeItem.data.expressType);\r\n          filterItem.value = treeNodeItem.data.value;\r\n          filterItem.parentItem = treeNodeItem.data.parentItem;\r\n          //Ã¨ÂÂ¥Ã¤Â¸ÂºÃ¦ÂÂ°Ã¥ÂÂ¼Ã¥ÂÂÃ¦Â¯ÂÃ¨Â¾ÂÃ¯Â¼ÂÃ¥ÂÂÃ¥Â°ÂvalueÃ¥ÂÂ¼Ã¥Â¼ÂºÃ¥ÂÂ¶Ã¨Â½Â¬Ã¦ÂÂ¢Ã¤Â¸ÂºÃ¦ÂÂ°Ã¥Â­Â\r\n          if (filterItem.expressType == ExpressTypeEnum.Value &&\r\n            (filterItem.operator == CompareTypeEnum.GreaterThan\r\n              || filterItem.operator == CompareTypeEnum.GreaterThanOrEqual\r\n              || filterItem.operator == CompareTypeEnum.LessThan\r\n              || filterItem.operator == CompareTypeEnum.LessThanOrEqual\r\n            )) {\r\n            filterItem.value = Number(treeNodeItem.data.value);\r\n          }\r\n          if (filterItem.expressType == ExpressTypeEnum.Value &&\r\n            (filterItem.operator == CompareTypeEnum.Equal\r\n              || filterItem.operator == CompareTypeEnum.NotEqual)) {\r\n            if(filterItem.propertyDataType == PropertyDataType.Decimal \r\n              || filterItem.propertyDataType == PropertyDataType.Double\r\n              || filterItem.propertyDataType == PropertyDataType.Int16\r\n              || filterItem.propertyDataType == PropertyDataType.Int32\r\n              || filterItem.propertyDataType == PropertyDataType.Int64 )\r\n            {\r\n              filterItem.value = Number(treeNodeItem.data.value);\r\n            }\r\n          }\r\n          //Ã¥Â°ÂÃ¥Â­ÂÃ©Â¡Â¹Ã¦ÂÂ¾Ã¥ÂÂ¥Ã§ÂÂ¶Ã©Â¡Â¹Ã§ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ¤Â¸Â­\r\n          filterExpression.expressItems.push(filterItem);\r\n        }\r\n      });\r\n    }\r\n    return filterExpression;\r\n  }\r\n  /**\r\n   * filetrExpressionÃ¥ÂÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºTreeNode\r\n   * @param filterExpress Ã¥Â¾ÂÃ¨Â½Â¬Ã¥ÂÂÃ§ÂÂfiletrExpressionÃ¥Â®ÂÃ¤Â½Â\r\n   */\r\n  unConvert(filterExpress: FilterExpression): TreeNode {\r\n    let treeData: TreeNode =\r\n    {\r\n      data:\r\n      {\r\n        \"id\": Math.random(),        //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n        \"item\": this.relationTypeReverseMatch(filterExpress.relationOperator), //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n        \"propertyDataType\":null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n        \"operator\": null,           //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n        \"expressType\": null,        //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n        \"value\": null,              //Ã¥ÂÂ¼\r\n        \"displaySelect\":false,      //Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n        \"displayOperator\": false,   //Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n        \"displayExpressType\": false,//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n        \"displayValue\": false,      //Ã¥ÂÂ¼Ã¦ÂÂ¾Ã§Â¤Âº\r\n        \"parentItem\":null           //Ã§ÂÂ¶Ã©Â¡Â¹\r\n      },\r\n      children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n      expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n    };\r\n    //Ã¥Â¯Â¹Ã¤ÂºÂÃ¦Â¯ÂÃ¤Â¸ÂÃ¤Â¸ÂªÃ¥Â­ÂÃ©Â¡Â¹\r\n    filterExpress.expressItems.forEach(expressItem => {\r\n      let filterExpressItem = expressItem as FilterExpression;\r\n      //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºFilterExpressionÃ§Â±Â»Ã¥ÂÂÃ¯Â¼ÂÃ¨ÂµÂÃ¥ÂÂ¼\r\n      if ((filterExpressItem.relationOperator == RelationTypeEnum.And || filterExpressItem.relationOperator == RelationTypeEnum.Or)) \r\n      {\r\n        let treeDataChild = this.unConvert(filterExpressItem);\r\n        treeDataChild.data.parent = treeData;//Ã¦Â·Â»Ã¥ÂÂ Ã§ÂÂ¶Ã¨ÂÂÃ§ÂÂ¹\r\n        treeData.children.push(treeDataChild);\r\n      }\r\n      else //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºExpressionItemÃ§Â±Â»Ã¥ÂÂÃ¯Â¼ÂÃ¨ÂµÂÃ¥ÂÂ¼\r\n      {\r\n        let expressionItem = expressItem as ExpressionItem;\r\n        let properties = this.propertyList.filter(x => x.value == expressionItem.propertyName);\r\n        let treeDataChild:TreeNode =\r\n        {\r\n          data:\r\n          {\r\n            \"id\": Math.random(),                      //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n            \"item\": properties[0].text,               //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n            \"propertyDataType\":expressionItem.propertyDataType,                  //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n            \"operator\": this.operatorReverseMatch(expressionItem.operator),      //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n            \"expressType\": this.expressTypeReverseMatch(expressionItem.expressType),//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n            \"value\": expressionItem.value,            //Ã¥ÂÂ¼\r\n            \"parentItem\":expressionItem.parentItem    //Ã§ÂÂ¶Ã©Â¡Â¹\r\n          },\r\n          parent: treeData,             //Ã¦Â·Â»Ã¥ÂÂ Ã§ÂÂ¶Ã¨ÂÂÃ§ÂÂ¹\r\n          children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n          expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n        }\r\n        treeData.children.push(treeDataChild); \r\n      }\r\n    });\r\n    return treeData;\r\n  }\r\n  /***\r\n   * Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ¡Ã¤Â»Â¶Ã©Â¡Â¹\r\n   */\r\n  addItem()\r\n  {\r\n    this.defaultSelectItem = this.localePipe.transform(\"SelectItem\");\r\n    this.hideNodeEditor(this.treeData);\r\n    this.addNode(this.treeData, this.localePipe.transform(\"SelectProperty\"),this.localePipe.transform(\"Equal\"),this.localePipe.transform(\"Value\"));\r\n  }\r\n  /***\r\n   * Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ¡Ã¤Â»Â¶Ã§Â»Â\r\n   */\r\n  addGroup()\r\n  {\r\n    this.addNode(this.treeData,this.localePipe.transform(\"And\"),null,null);\r\n  }\r\n  /**\r\n   * Ã§Â±Â»Ã¥ÂÂÃ¤Â¿Â¡Ã¦ÂÂ¯Ã¥ÂÂ¹Ã©ÂÂ\r\n   * @param type Ã§Â±Â»Ã¥ÂÂ\r\n   */\r\n  typeMatch(type: any): any {\r\n    switch (type) {\r\n      case this.localePipe.transform(\"And\"): return RelationTypeEnum.And;\r\n      case this.localePipe.transform(\"Or\"): return RelationTypeEnum.Or;\r\n      case this.localePipe.transform(\"GreaterThan\"): return CompareTypeEnum.GreaterThan;\r\n      case this.localePipe.transform(\"GreaterThanOrEqual\"): return CompareTypeEnum.GreaterThanOrEqual;\r\n      case this.localePipe.transform(\"LessThan\"): return CompareTypeEnum.LessThan;\r\n      case this.localePipe.transform(\"LessThanOrEqual\"): return CompareTypeEnum.LessThanOrEqual;\r\n      case this.localePipe.transform(\"Equal\"): return CompareTypeEnum.Equal;\r\n      case this.localePipe.transform(\"NotEqual\"): return CompareTypeEnum.NotEqual;\r\n      case this.localePipe.transform(\"Contains\"): return CompareTypeEnum.Contains;\r\n      case this.localePipe.transform(\"NotContains\"): return CompareTypeEnum.NotContains;\r\n      case this.localePipe.transform(\"StartsWith\"): return CompareTypeEnum.StartsWith;\r\n      case this.localePipe.transform(\"EndsWith\"): return CompareTypeEnum.EndsWith;\r\n      case this.localePipe.transform(\"NotStartsWith\"): return CompareTypeEnum.NotStartsWith;\r\n      case this.localePipe.transform(\"NotEndsWith\"): return CompareTypeEnum.NotEndsWith;\r\n      case this.localePipe.transform(\"IsNull\"): return CompareTypeEnum.IsNull;\r\n      case this.localePipe.transform(\"IsNotNull\"): return CompareTypeEnum.IsNotNull;\r\n      case this.localePipe.transform(\"In\"): return CompareTypeEnum.In;\r\n      case this.localePipe.transform(\"NotIn\"): return CompareTypeEnum.NotIn;\r\n      case this.localePipe.transform(\"Value\"): return ExpressTypeEnum.Value;\r\n      case this.localePipe.transform(\"Expression\"): return ExpressTypeEnum.Expression;\r\n    }\r\n  }\r\n  relationTypeReverseMatch(type: RelationTypeEnum): string {\r\n    switch (type) {\r\n      case RelationTypeEnum.And: return this.localePipe.transform(\"And\") ;\r\n      case RelationTypeEnum.Or: return this.localePipe.transform(\"Or\");\r\n    }\r\n  }\r\n  operatorReverseMatch(type: CompareTypeEnum): string\r\n  {\r\n    switch (type) {\r\n      case CompareTypeEnum.GreaterThan: return this.localePipe.transform(\"GreaterThan\");\r\n      case CompareTypeEnum.GreaterThanOrEqual: return this.localePipe.transform(\"GreaterThanOrEqual\");\r\n      case CompareTypeEnum.LessThan: return this.localePipe.transform(\"LessThan\");\r\n      case CompareTypeEnum.LessThanOrEqual: return this.localePipe.transform(\"LessThanOrEqual\");\r\n      case CompareTypeEnum.Equal: return this.localePipe.transform(\"Equal\");\r\n      case CompareTypeEnum.NotEqual: return this.localePipe.transform(\"NotEqual\");\r\n      case CompareTypeEnum.Contains: return this.localePipe.transform(\"Contains\");\r\n      case CompareTypeEnum.NotContains: return this.localePipe.transform(\"NotContains\");\r\n      case CompareTypeEnum.StartsWith: return this.localePipe.transform(\"StartsWith\");\r\n      case CompareTypeEnum.EndsWith: return this.localePipe.transform(\"EndsWith\");\r\n      case CompareTypeEnum.NotStartsWith: return this.localePipe.transform(\"NotStartsWith\");\r\n      case CompareTypeEnum.NotEndsWith: return this.localePipe.transform(\"NotEndsWith\");\r\n      case CompareTypeEnum.IsNull: return this.localePipe.transform(\"IsNull\");\r\n      case CompareTypeEnum.IsNotNull: return this.localePipe.transform(\"IsNotNull\");\r\n      case CompareTypeEnum.In: return this.localePipe.transform(\"In\");\r\n      case CompareTypeEnum.NotIn: return this.localePipe.transform(\"NotIn\");\r\n    }\r\n  }\r\n  expressTypeReverseMatch(type: ExpressTypeEnum): string\r\n  {\r\n    switch (type) {\r\n      case ExpressTypeEnum.Value: return this.localePipe.transform(\"Value\");\r\n      case ExpressTypeEnum.Expression: return this.localePipe.transform(\"Expression\");\r\n    }\r\n  }\r\n  onfocus()\r\n{\r\n  this.displayPopup = true;\r\n}\r\nonblur()\r\n{\r\n  this.displayPopup = false;\r\n}\r\n\r\ncheckMatch(treeNodes: TreeNode[],isMatch: boolean)\r\n{\r\n  for (var i = 0; i < treeNodes.length; i++) {\r\n    if (treeNodes[i].data.item != this.localePipe.transform(\"And\") && treeNodes[i].data.item != this.localePipe.transform(\"Or\")) {\r\n      if (treeNodes[i].data.expressType==this.localePipe.transform(\"Value\")){\r\n        if((treeNodes[i].data.propertyDataType==PropertyDataType.Int16 || treeNodes[i].data.propertyDataType==PropertyDataType.Int32 || treeNodes[i].data.propertyDataType==PropertyDataType.Int64) && isNaN(treeNodes[i].data.value)){\r\n          this.notifyservice[this.notifies['5'].type]({\r\n            msg: this.notifies['5'].msg\r\n          });  \r\n          isMatch = false;\r\n          break;\r\n        }\r\n    }\r\n  }\r\n  else isMatch = this.checkMatch(treeNodes[i].children,isMatch);\r\n}\r\nreturn isMatch;\r\n}\r\n}\r\n","/**\r\n * Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»\r\n * @property name Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â¯Â­Ã¤Â¹ÂÃ¥ÂÂÃ¥ÂÂÃ§Â§Â°\r\n * @property navigationType Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂ\r\n */\r\nexport class NavigationProperty\r\n{\r\n    name:string;\r\n    displayName:string;\r\n    navigationEntity:string;\r\n    navigationType:NavigationType;\r\n}\r\n/** \r\n * Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂ\r\n * @member EntitySet Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂ\r\n * @member EntityType Ã¥Â®ÂÃ¤Â½ÂÃ§Â±Â»Ã¥ÂÂ\r\n */\r\n export enum NavigationType{\r\n    EntitySet,\r\n    EntityType\r\n}","import { PropertyEntity } from \"./property-entity\";\r\nimport { NavigationProperty } from \"./navigation-property-entity\";\r\n/**\r\n * schemaÃ¥Â®ÂÃ¤Â½ÂÃ§Â±Â»\r\n * @property entitySets  Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂÃ©ÂÂÃ¥ÂÂ\r\n * @property entityTypes Ã¥Â®ÂÃ¤Â½ÂÃ§Â±Â»Ã¥ÂÂÃ©ÂÂÃ¥ÂÂ\r\n */\r\n export class FilterEntitySchema {\r\n    entitySets: FilterEntitySet[] = [];\r\n    entityTypes: FilterEntityType[] = [];\r\n}\r\n/**\r\n * Ã¨Â¿ÂÃ¦Â»Â¤Ã¥Â®ÂÃ¤Â½ÂÃ§Â±Â»Ã¥ÂÂ\r\n * Ã§ÂÂ¨Ã¤ÂºÂÃ¥Â¤ÂÃ§ÂºÂ§Ã¥ÂµÂÃ¥Â¥ÂÃ¥Â®ÂÃ¤Â½ÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n * @property name Ã¥Â®ÂÃ¤Â½ÂÃ¥ÂÂ(Ã§ÂÂ¨Ã¤ÂºÂÃ¥Â®ÂÃ¤Â½ÂÃ©ÂÂ´Ã¥Â¯Â¼Ã¨ÂÂªÃ¤Â½Â¿Ã§ÂÂ¨)\r\n * @property displayName Ã¥Â±ÂÃ§Â¤ÂºÃ¥ÂÂÃ§Â§Â°\r\n * @property properties Ã¥Â±ÂÃ¦ÂÂ§Ã©ÂÂ\r\n * @property navigationProperties Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã©ÂÂ\r\n */\r\nexport class FilterEntityType\r\n{\r\n    name:string;\r\n    displayName:string;\r\n    properties:PropertyEntity[] = [];\r\n    navigationProperties:NavigationProperty[] = [];\r\n}\r\n/**\r\n * Ã¨Â¿ÂÃ¦Â»Â¤Ã¥Â®ÂÃ¤Â½ÂÃ§Â±Â»Ã¥ÂÂÃ©ÂÂ\r\n * Ã§ÂÂ¨Ã¤ÂºÂÃ¥Â¤ÂÃ§ÂºÂ§Ã¥ÂµÂÃ¥Â¥ÂÃ¥Â®ÂÃ¤Â½ÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n * @property name Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂÃ¥ÂÂ\r\n * @property entityTypeName Ã¥ÂÂÃ¥ÂÂ«Ã§ÂÂÃ¥Â®ÂÃ¤Â½ÂÃ§Â±Â»Ã¥ÂÂÃ¥ÂÂ\r\n */\r\nexport class FilterEntitySet\r\n{\r\n    name:string;\r\n    displayName:string;             \r\n    entityTypeName:string;      \r\n}","/**\r\n * @description Ã§Â»ÂÃ¤Â¸ÂÃ§Â»ÂÃ¦ÂÂSchema\r\n * @param name Ã¥ÂÂÃ§Â§Â°\r\n * @param description Ã¦ÂÂÃ¨Â¿Â°\r\n * @param entitySets Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂ\r\n * @param entityTypes Ã¥Â®ÂÃ¤Â½ÂÃ§Â±Â»Ã¥ÂÂ\r\n * @param associations Ã¥ÂÂ³Ã¨ÂÂÃ©ÂÂÃ¥ÂÂ\r\n * @date 2021-04-14\r\n * @author Wenxing Man\r\n */\r\nexport class NewSchema {\r\n    name: string;\r\n    description: string;\r\n    entitySets: NewEntitySet[] = [];\r\n    entityTypes: NewEntityType[] = [];\r\n    associations: NewAssociation[] = [];\r\n}\r\n/**\r\n * @param code Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂÃ¥ÂÂ\r\n * @param name Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂÃ¨Â¯Â­Ã¤Â¹ÂÃ¥ÂÂÃ¥ÂÂ\r\n * @param entityType Ã¥Â¯Â¹Ã¥ÂºÂEntityTypeÃ§ÂÂid\r\n * @date 2021-04-14\r\n * @author Wenxing Man\r\n */\r\nexport class NewEntitySet {\r\n    code: string;\r\n    name: string;\r\n    entityType: string;\r\n}\r\n/**\r\n * @param code Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂ\r\n * @param name Ã¥Â®ÂÃ¤Â½ÂÃ¨Â¯Â­Ã¤Â¹ÂÃ¥ÂÂÃ¥ÂÂ\r\n * @param master  Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¦ÂÂ¯Ã¤Â¸Â»Ã¥Â®ÂÃ¤Â½Â\r\n * @param properties    Ã¥Â±ÂÃ¦ÂÂ§Ã©ÂÂÃ¥ÂÂ\r\n * @param keys  Ã¤Â¸Â»Ã©ÂÂ®Ã©ÂÂÃ¥ÂÂ\r\n * @param navigationPorperties Ã¥Â¯Â¼Ã¨ÂÂªÃ©ÂÂÃ¥ÂÂÃ¥Â±ÂÃ¦ÂÂ§\r\n * @date 2021-04-14\r\n * @author Wenxing Man\r\n */\r\nexport class NewEntityType {\r\n    code: string;\r\n    name: string;\r\n    master: boolean;\r\n    properties: NewProperty[] = [];\r\n    keys: String[] = [];\r\n    navigationProperties: NewNavigationProperty[] = [];\r\n}\r\n/**\r\n * @param name Ã¥ÂÂ³Ã¨ÂÂÃ¥ÂÂÃ§Â§Â°\r\n * @param masterType Ã¤Â¸Â»Ã¥Â¯Â¹Ã¨Â±Â¡Ã§Â±Â»Ã¥ÂÂ\r\n * @param childType Ã¥Â­ÂÃ¥Â¯Â¹Ã¨Â±Â¡Ã§Â±Â»Ã¥ÂÂ\r\n * @param masterProperty Ã¤Â¸Â»Ã¥Â¯Â¹Ã¨Â±Â¡Ã¥Â­ÂÃ¦Â®Âµ\r\n * @param childProperty Ã¤Â»ÂÃ¥Â¯Â¹Ã¨Â±Â¡Ã¥Â­ÂÃ¦Â®Âµ\r\n * @date 2021-04-14\r\n * @author Wenxing Man\r\n */\r\nexport class NewAssociation {\r\n    name: string;\r\n    masterType: string;\r\n    childType: string;\r\n    masterProperty: string;\r\n    childProperty: string;\r\n}\r\n/**\r\n * @param code Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂ\r\n * @param name Ã¥Â±ÂÃ¦ÂÂ§Ã¨Â¯Â­Ã¤Â¹ÂÃ¥ÂÂÃ¥ÂÂ\r\n * @param dataType Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂ¼Ã§Â±Â»Ã¥ÂÂ\r\n * @param nullable Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥ÂÂÃ¨Â®Â¸Ã¤Â¸ÂºÃ§Â©ÂºÃ¥ÂÂ¼\r\n * @param dafaultValue Ã¥Â±ÂÃ¦ÂÂ§Ã©Â»ÂÃ¨Â®Â¤Ã¥ÂÂ¼\r\n * @date 2021-04-14\r\n * @author Wenxing Man\r\n */\r\nexport class NewProperty {\r\n    code: string;\r\n    name: string;\r\n    dataType: NewDataType;\r\n    nullable: boolean;\r\n    defaultValue: object;\r\n}\r\n/**\r\n * @param code Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ§Â§Â°\r\n * @param name Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â¯Â­Ã¤Â¹ÂÃ¥ÂÂÃ¥ÂÂ\r\n * @param navigationName Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â¯Â¹Ã¨Â±Â¡Ã§ÂÂÃ¥ÂÂÃ§Â§Â°\r\n * @param navigationType Ã¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂ\r\n * @param relationShip Ã¥ÂÂ³Ã¨ÂÂÃ§ÂÂÃ¥Â¯Â¹Ã¨Â±Â¡\r\n * @date 2021-04-14\r\n * @author Wenxing Man\r\n */\r\nexport class NewNavigationProperty {\r\n    code: string;\r\n    name: string;\r\n    navigationName: string;\r\n    navigationType: NewNavigationType;\r\n    relationShip: string;\r\n}\r\n\r\n/**\r\n * @description Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂÃ§ÂÂÃ¦ÂÂÃ¤Â¸Â¾\r\n */\r\nexport enum NewDataType {\r\n    String,\r\n    Byte,\r\n    Boolean,\r\n    Date,\r\n    DateTime,\r\n    Decimal,\r\n    Integer\r\n}\r\n\r\n/**\r\n * @description Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂÃ§ÂÂÃ¦ÂÂÃ¤Â¸Â¾\r\n * @enum EntitySet EntitySet\r\n * @enum EntityType EntityType\r\n */\r\nexport enum NewNavigationType {\r\n    EntitySet = \"EntitySet\",\r\n    EntityType = \"EntityType\"\r\n}","import { FilterEntityType } from \"./schema\";\r\nimport { GSPCommonObject, IGSPCommonObject, GSPElementDataType, GSPElementObjectType } from \"@gsp-bef/gsp-cm-metadata\";\r\nimport { PropertyEntity, PropertyDataType } from \"./property-entity\";\r\nimport { NavigationProperty, NavigationType } from \"./navigation-property-entity\";\r\nimport { NewDataType, NewEntityType, NewProperty, NewNavigationProperty, NewNavigationType } from \"./NewSchema\";\r\n\r\nexport class Adapter {\r\n    public convertCO(commonObject: GSPCommonObject): FilterEntityType[] {\r\n        let entityTypes: FilterEntityType[] = [];\r\n        entityTypes.push(this.adaptCO(commonObject, entityTypes));\r\n        return entityTypes;\r\n    }\r\n    /**\r\n     * COÃ¨Â½Â¬Ã¥ÂÂÃ©ÂÂÃ¥Â½ÂÃ¦ÂÂ¹Ã¦Â³Â\r\n     * @param gspCO Ã¥Â¾ÂÃ¨Â½Â¬Ã¥ÂÂgspCO\r\n     * @param entityTypes Ã¤Â»ÂgspCOÃ¦ÂÂÃ¥ÂÂÃ§ÂÂÃ¦ÂÂÃ¦ÂÂÃ¤Â¸Â»Ã¤Â»ÂÃ¨Â¡Â¨\r\n     */\r\n    private adaptCO(gspCO: IGSPCommonObject, entityTypes: FilterEntityType[]): FilterEntityType {\r\n        let entityType = new FilterEntityType();\r\n        entityType.name = gspCO.Code;\r\n        entityType.displayName = gspCO.Name;\r\n        //Ã¦Â¯ÂÃ¤Â¸ÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â½Â¬Ã¥ÂÂ\r\n        if ((gspCO.ContainElements) && gspCO.ContainElements.length != 0) {\r\n            gspCO.ContainElements.forEach(element => {\r\n                if (!element.IsUdt && element.ObjectType != GSPElementObjectType.Association) {\r\n                    let property = new PropertyEntity();\r\n                    property.name = element.Code;\r\n                    property.displayName = element.Name;\r\n                    property.propertyDataType = this.convertPropertyDataType(element.MDataType);\r\n                    entityType.properties.push(property);\r\n                }\r\n            });\r\n        };\r\n        //Ã¥Â­ÂÃ¨Â¡Â¨Ã¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºÃ¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§\r\n        if ((gspCO.ContainChildObjects) && gspCO.ContainChildObjects.length != 0) {\r\n            gspCO.ContainChildObjects.forEach(childObject => {\r\n                let naviproperty = new NavigationProperty();\r\n                naviproperty.displayName = childObject.Name;\r\n                naviproperty.name = childObject.Code + \"s\";\r\n                naviproperty.navigationEntity = childObject.Code;\r\n                naviproperty.navigationType = NavigationType.EntityType;\r\n                entityType.navigationProperties.push(naviproperty);\r\n                entityTypes.push(this.adaptCO(childObject, entityTypes));\r\n            });\r\n        };\r\n        return entityType;\r\n    }\r\n    /**\r\n     * Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂÃ¨Â½Â¬Ã¦ÂÂ¢\r\n     */\r\n    private convertPropertyDataType(dataType: GSPElementDataType): PropertyDataType {\r\n        switch (dataType) {\r\n            case GSPElementDataType.String:\r\n            case GSPElementDataType.Text:\r\n                return PropertyDataType.String;\r\n            case GSPElementDataType.Integer:\r\n                return PropertyDataType.Int32;\r\n            case GSPElementDataType.Decimal:\r\n                return PropertyDataType.Decimal;\r\n            case GSPElementDataType.DateTime:\r\n            case GSPElementDataType.Date:\r\n                return PropertyDataType.DateTime;\r\n            case GSPElementDataType.Boolean:\r\n                return PropertyDataType.Boolean;\r\n            case GSPElementDataType.Binary:\r\n                return PropertyDataType.Array;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    //=====================================Ã¨Â½Â¬Ã¦ÂÂ¢CO---->NewSchema===================================\r\n\r\n    /**\r\n     * @description Ã¥Â°ÂCOÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºNewEntityType[]\r\n     * @param co Ã¥Â¾ÂÃ¨Â½Â¬Ã¦ÂÂ¢CO\r\n     * @returns NewEntityType[] NewEntityType[]\r\n     */\r\n    public convertCOOfNewSchema(co: GSPCommonObject): NewEntityType[] {\r\n        let types: NewEntityType[] = [];\r\n        types.push(this.adaptCOOfNewSchema(co, types));\r\n        return types;\r\n    }\r\n\r\n    /**\r\n     * @description Ã¥Â°ÂCOÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºNewEntityType[]\r\n     * @param co Ã¥Â¾ÂÃ¨Â½Â¬Ã¦ÂÂ¢CO\r\n     * @param types Ã¦ÂÂ°Ã§Â»Â:EntityType[]\r\n     * @returns NewEntityType[] NewEntityType[]\r\n     */\r\n    public adaptCOOfNewSchema(co: GSPCommonObject, types: NewEntityType[]): NewEntityType {\r\n        let type = new NewEntityType();\r\n        type.code = co.Code;\r\n        type.name = co.Name;\r\n        //Ã¤Â¸ÂÃ¨ÂÂ¬Ã¥Â±ÂÃ¦ÂÂ§Ã¨Â½Â¬Ã¥ÂÂ\r\n        if (co.ContainElements && co.ContainElements.length > 0) {\r\n            co.ContainElements.forEach(ele => {\r\n                if (!ele.IsUdt && ele.ObjectType != GSPElementObjectType.Association) {\r\n                    let pro = new NewProperty();\r\n                    pro.code = ele.Code;\r\n                    pro.name = ele.Name;\r\n                    pro.dataType = this.convertCOEleTypeProType(ele.MDataType);\r\n                    type.properties.push(pro);\r\n                }\r\n            });\r\n        }\r\n        //Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â½Â¬Ã¥ÂÂ\r\n        if (co.ContainChildObjects && co.ContainChildObjects.length > 0) {\r\n            co.ContainChildObjects.forEach(obj => {\r\n                let naPro = new NewNavigationProperty();\r\n                naPro.code = obj.Code + \"s\";\r\n                naPro.name = obj.Name;\r\n                naPro.navigationName = obj.ID;\r\n                naPro.navigationType = NewNavigationType.EntityType;\r\n                naPro.relationShip = \"\";\r\n                type.navigationProperties.push(naPro);\r\n                types.push(this.adaptCOOfNewSchema(obj as GSPCommonObject, types));\r\n            });\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * @description Ã¥Â°ÂBEÃ¥Â®ÂÃ¤Â¹ÂÃ§ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ§Â±Â»Ã¥ÂÂÃ¨Â½Â¬Ã¦ÂÂ¢Ã¤Â¸ÂºÃ§Â»ÂÃ¤Â¸ÂSchemaÃ§ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ§Â±Â»Ã¥ÂÂ\r\n     * @param dataType BEÃ¥Â®ÂÃ¤Â¹ÂÃ§ÂÂÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂ\r\n     * @returns NewDataType Ã§Â»ÂÃ¤Â¸ÂSchemaÃ§ÂÂÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂ\r\n     */\r\n    public convertCOEleTypeProType(dataType: GSPElementDataType): NewDataType {\r\n        let type = NewDataType.String;\r\n        switch (dataType) {\r\n            case GSPElementDataType.String:\r\n            case GSPElementDataType.Text:\r\n                type = NewDataType.String;\r\n                break;\r\n            case GSPElementDataType.Integer:\r\n                type = NewDataType.Integer;\r\n                break;\r\n            case GSPElementDataType.Decimal:\r\n                type = NewDataType.Decimal;\r\n                break;\r\n            case GSPElementDataType.DateTime:\r\n                type = NewDataType.DateTime;\r\n                break;\r\n            case GSPElementDataType.Date:\r\n                type = NewDataType.Date;\r\n                break;\r\n            case GSPElementDataType.Boolean:\r\n                type = NewDataType.Boolean;\r\n                break;\r\n            case GSPElementDataType.Binary:\r\n                type = NewDataType.Byte;\r\n                break;\r\n        }\r\n        return type;\r\n    }\r\n\r\n}","import { Injectable, Injector, ApplicationRef, ComponentFactoryResolver, LOCALE_ID, Inject } from \"@angular/core\";\r\nimport { FilterConditionComponent } from \"./filter-condition/filter-condition.component\";\r\nimport { GspCommonDataType } from \"@gsp-bef/gsp-cm-metadata\";\r\nimport { GSPCommonObject } from \"@gsp-bef/gsp-cm-metadata\";\r\nimport { VarEntity } from \"@gsp-svc/expression\";\r\nimport { Schema } from \"@gsp-svc/expression\";\r\nimport { InjectedEntity } from \"@gsp-svc/expression\";\r\nimport { InjectedType } from '@gsp-svc/expression';\r\nimport { FilterInjectedEntity, FilterInjectedType } from \"./injected-entity\";\r\nimport { FilterEntitySchema } from \"./schema\";\r\nimport { PropertyAdapter } from \"./property-adapter\";\r\nimport { PropertyDataType } from \"./property-entity\";\r\nimport { Adapter } from \"./adapter\";\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { FilterConditionLocalePipe } from './filter-condition-locale.pipe';\r\nimport { NewSchema } from \"./NewSchema\";\r\nimport { Observable } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n/**\r\n * Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂÃ¥ÂÂ¡Ã§Â±Â»\r\n * @author linchang 2018/12/10\r\n */\r\n@Injectable()\r\nexport class FilterService {\r\n    i: number = 0;\r\n    adapter: Adapter = new Adapter();\r\n    //Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¨Â¡Â¨\r\n    propertyList: Array<{ text: string, propertyDataType: PropertyDataType, value: string, parentItem: string }> = [];\r\n    //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥ÂÂÃ©ÂÂ\r\n    contextEntity: VarEntity[] = [];\r\n    expressionText: string = null;\r\n    expressionSchema = Array<{ name: string, schema: Schema }>();\r\n    expressionInjectedEntities: InjectedEntity[] = [];\r\n    expressionCDT: GspCommonDataType[] = [];\r\n    //Ã©Â¢ÂÃ§Â½Â®Ã¦ÂÂ¡Ã¤Â»Â¶Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥ÂÂÃ©ÂÂ\r\n    filterExpressionString: string = null;//Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥ÂºÂÃ¥ÂÂÃ¥ÂÂÃ¤Â¸Â²\r\n    schemaMap = new Map<string, FilterEntitySchema>();\r\n    newSchemaMap = new Map<string, NewSchema>();                         //Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦Â·Â»Ã¥ÂÂ NewSchema\r\n    injectedEntity: FilterInjectedEntity;\r\n    exprWinWidth: number = 850;\r\n    localePipe: FilterConditionLocalePipe;\r\n    localeId: string;\r\n    private modalService: BsModalService;\r\n    simpleModalConfig;\r\n    constructor(\r\n        private injector: Injector,\r\n        private applicationRef: ApplicationRef,\r\n        private compFactRes: ComponentFactoryResolver,\r\n        private http: HttpClient\r\n    ) {\r\n        this.modalService = this.injector.get(BsModalService);\r\n    }\r\n    // Ã¥ÂÂÃ¥Â»ÂºÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n    public buildExpression() {\r\n        let that = this;\r\n        return new Promise(\r\n            function (resolve) {\r\n                const compFactory = that.compFactRes.resolveComponentFactory(FilterConditionComponent);\r\n                const compRef = compFactory.create(that.injector);\r\n                compRef.instance.propertyList = that.propertyList;\r\n                compRef.instance.contextEntity = that.contextEntity;\r\n                compRef.instance.expressionCDT = that.expressionCDT;\r\n                compRef.instance.expressionSchema = that.expressionSchema;\r\n                compRef.instance.expressionText = that.expressionText;\r\n                compRef.instance.expressionInjectedEntities = that.expressionInjectedEntities;\r\n                compRef.instance.filterExpressionString = that.filterExpressionString;\r\n                compRef.instance.schemaMap = that.schemaMap;\r\n                //===================Ã§Â»ÂÃ¤Â»Â¶Ã¥ÂÂ Ã¥ÂÂ¥newSchemaMap===============\r\n                compRef.instance.newSchemaMap = that.newSchemaMap;\r\n                //=====================================================    \r\n                compRef.instance.exprWinWidth = that.exprWinWidth;\r\n                that.localePipe = compRef.instance.localePipe;\r\n                const dialog = that.modalService.show(compRef, {\r\n                    title: that.localePipe.transform(\"WindowTitle\"),\r\n                    width: 1010,\r\n                    height: 550,\r\n                    showButtons: false\r\n                });\r\n                compRef.instance.closed.subscribe($event => dialog.close());\r\n                compRef.instance.result.subscribe((expressionContent) => {\r\n                    return resolve(expressionContent);\r\n                });\r\n            })\r\n    }\r\n    /**\r\n     *  Ã©Â¢ÂÃ§Â½Â®Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¨Â¡Â¨\r\n     * @param name Ã¥Â±ÂÃ¦ÂÂ§Ã¨Â¯Â­Ã¤Â¹Â\r\n     * @param displayName Ã¥Â±ÂÃ§Â¤ÂºÃ¥ÂÂÃ§Â§Â°\r\n     * @param propertyDataType Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n     */\r\n    public addProperty(name: string, displayName: string, propertyDataType: PropertyDataType): void {\r\n        let propertyEntity =\r\n        {\r\n            text: displayName,\r\n            propertyDataType: propertyDataType,\r\n            value: name,\r\n            parentItem: null\r\n        };\r\n        this.propertyList = this.propertyList.filter(item => item.value !== name);\r\n        this.propertyList.push(propertyEntity);\r\n    }\r\n\r\n    /**\r\n     * Ã¦Â·Â»Ã¥ÂÂ Ã¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥ÂÂÃ©ÂÂ\r\n     * @param contextEntity Ã¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥ÂÂÃ©ÂÂ\r\n     */\r\n    public addExpressionContext(contextEntity: VarEntity): void {\r\n        this.contextEntity = this.contextEntity.filter(item => item.key !== contextEntity.key);\r\n        this.contextEntity.push(contextEntity);\r\n    }\r\n    /**\r\n     * Ã©Â¢ÂÃ§Â½Â®Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ¾Ã§Â¤Âº\r\n     * @param text Ã©Â¢ÂÃ§Â½Â®Ã¦ÂÂÃ¦ÂÂ¬\r\n     */\r\n    public addExpressionText(text: string): void {\r\n        this.expressionText = text;\r\n    }\r\n    /**\r\n     * Ã©Â¢ÂÃ§Â½Â®Schema\r\n     * @param name schemaÃ¥ÂÂÃ§Â§Â°\r\n     * @param schema schemaÃ¥Â®ÂÃ¤Â½Â\r\n     */\r\n    public addExpressionSchema(name: string, schema: Schema): void {\r\n        this.expressionSchema = this.expressionSchema.filter(item => item.name !== name);\r\n        this.expressionSchema.push({ name, schema });\r\n    }\r\n    /**\r\n     * Ã©Â¢ÂÃ§Â½Â®Ã¦Â³Â¨Ã¥ÂÂÃ¥Â®ÂÃ¤Â½Â\r\n     * @param name Ã¦Â³Â¨Ã¥ÂÂÃ¥Â®ÂÃ¤Â½ÂÃ¥ÂÂ\r\n     * @param schemaName Ã¦ÂÂÃ¥ÂÂ¨schemaÃ§ÂÂÃ¥ÂÂ\r\n     * @param typeNameInSchema Ã¥ÂÂ¨schemaÃ¤Â¸Â­Ã¥ÂÂÃ§Â§Â°\r\n     * @param injectedType Ã¦Â³Â¨Ã¥ÂÂÃ§ÂÂÃ§Â±Â»Ã¥ÂÂ\r\n     * @author linchang 2018/12/10\r\n     */\r\n    public addExpressionInjectedEntity(name: string, schemaName: string, typeNameInSchema: string, injectedType: InjectedType): void {\r\n        //Ã¦ÂÂÃ©ÂÂ Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½ÂÃ¥Â¯Â¹Ã¨Â±Â¡\r\n        let injectedEntity = new InjectedEntity();\r\n        injectedEntity.name = name;\r\n        injectedEntity.schemaName = schemaName;\r\n        injectedEntity.injectedName = typeNameInSchema;\r\n        injectedEntity.injectedType = injectedType;\r\n        this.expressionInjectedEntities.push(injectedEntity);\r\n    }\r\n    /**\r\n     * Ã©Â¢ÂÃ§Â½Â®CDT\r\n     * @param gspCDTs Ã©Â¢ÂÃ§Â½Â®Ã§ÂÂCDTÃ©ÂÂÃ¥ÂÂ\r\n     */\r\n    public addExpressionCDT(gspCDTs: GspCommonDataType[]): void {\r\n        this.expressionCDT = gspCDTs;\r\n    }\r\n    /**\r\n     * Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¦ÂÂ¡Ã¤Â»Â¶Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n     * @param filterExpression Ã©Â¢ÂÃ§Â½Â®Ã§ÂÂÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â²\r\n     */\r\n    public addFilterCondition(filterExpression: string) {\r\n        this.filterExpressionString = filterExpression;\r\n    }\r\n    /**\r\n     * Ã©Â¢ÂÃ§Â½Â®schema\r\n     * @param name schemaÃ¥ÂÂ,Ã©Â»ÂÃ¨Â®Â¤Ã¤Â¸ÂºCO\r\n     * @param filterSchema schemaÃ¥Â®ÂÃ¤Â½Â\r\n     */\r\n    public addSchema(name: string, filterSchema: FilterEntitySchema) {\r\n        if (filterSchema == null) {\r\n            alert(\"Schema Cannot Null\");\r\n        }\r\n        else this.schemaMap.set(name, filterSchema);\r\n    }\r\n    /**\r\n     * Ã¦Â·Â»Ã¥ÂÂ Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n     * @param name Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½ÂÃ¥ÂÂ¨schemaÃ¤Â¸Â­Ã§ÂÂÃ¥ÂÂÃ§Â§Â°\r\n     * @param schemaName Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½ÂÃ¦ÂÂÃ¥ÂÂ¨Ã§ÂÂschemaÃ¥ÂÂ\r\n     * @param injectedType Ã¦Â³Â¨Ã¥ÂÂ¥Ã§Â±Â»Ã¥ÂÂÃ¯Â¼ÂÃ¤Â¸ÂÃ¥Â¡Â«Ã©Â»ÂÃ¨Â®Â¤Ã¤Â¸ÂºEntityType\r\n     */\r\n    public addInjectedEntity(name: string, schemaName: string, injectedType: FilterInjectedType = FilterInjectedType.EntityType) {\r\n        this.injectedEntity = new FilterInjectedEntity();\r\n        this.injectedEntity.name = name;\r\n        this.injectedEntity.schemaName = schemaName;\r\n        this.injectedEntity.injectedType = injectedType;\r\n        let propertyAdapter = new PropertyAdapter();\r\n        this.propertyList = propertyAdapter.adapter(this.injectedEntity, this.schemaMap);\r\n    }\r\n    /**\r\n     * Ã¦Â·Â»Ã¥ÂÂ GSPCommonObject\r\n     * @param commonObject Ã¥Â¾ÂÃ¨Â½Â¬Ã¥ÂÂCO\r\n     */\r\n    public addCommonObject(commonObject: GSPCommonObject): void {\r\n        let schema;\r\n        //Ã¨ÂÂ¥schemaMapÃ¤Â¸Â­Ã¥Â­ÂÃ¥ÂÂ¨COÃ§ÂÂschema\r\n        if (this.schemaMap.get(\"CommonObject\")) {\r\n            schema = this.schemaMap.get(\"CommonObject\");\r\n        }\r\n        else schema = new Schema;\r\n        //Ã¥Â°ÂÃ¦Â¯ÂÃ¤Â¸ÂÃ¤Â¸ÂªCOÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºschemaÃ¥ÂÂÃ©ÂÂ¨Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã§ÂÂentityType\r\n        let entityTypes = this.adapter.convertCO(commonObject);\r\n        entityTypes.forEach(entityType => {\r\n            schema.entityTypes = schema.entityTypes.filter(item => item.name !== entityType.name);\r\n            schema.entityTypes.push(entityType);\r\n        });\r\n\r\n        //Ã¥Â°ÂÃ¥ÂÂÃ¥Â¹Â¶Ã¥ÂÂÃ§ÂÂschemaÃ¦ÂÂ¾Ã¥ÂÂ¥Ã¥ÂÂÃ©ÂÂ¨Ã¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥Â®ÂÃ¤Â½ÂÃ¤Â¸Â­\r\n        this.addSchema(\"CommonObject\", schema);\r\n    }\r\n    /**\r\n     * Ã¨Â®Â¾Ã§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â¼Â¹Ã¥ÂÂºÃ¦Â¡ÂÃ¥Â®Â½Ã¥ÂºÂ¦\r\n     * @param exprWinWidth \r\n     */\r\n    public addExprWinWidth(exprWinWidth: number) {\r\n        this.exprWinWidth = exprWinWidth;\r\n\r\n    }\r\n\r\n    //======================Ã¥ÂÂÃ¤Â¸Â½Ã¥ÂÂÃ¥ÂÂ²Ã§ÂºÂ¿Ã¤Â¹ÂÃ§Â»ÂÃ¤Â¸ÂÃ§Â»ÂÃ¦ÂÂSchema============================================================\r\n\r\n    /**\r\n     * @description Ã¥ÂÂnewSchemaMapÃ¤Â¸Â­Ã¦Â·Â»Ã¥ÂÂ NewSchema\r\n     * @param name MapÃ¤Â¸Â­Ã§ÂÂkeyÃ¥ÂÂ¼\r\n     * @param schema MapÃ§ÂÂvalue\r\n     */\r\n    public addNewSchema(name: string, schema: NewSchema) {\r\n        if (name != null && name != \"\" && schema != null) {\r\n            this.newSchemaMap.set(name, schema);\r\n        } else {\r\n            alert(\"Name or Schema is null !\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ã¦Â·Â»Ã¥ÂÂ Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n     * @param name Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½ÂÃ¥ÂÂ¨schemaÃ¤Â¸Â­Ã§ÂÂÃ¥ÂÂÃ§Â§Â°\r\n     * @param schemaName Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½ÂÃ¦ÂÂÃ¥ÂÂ¨Ã§ÂÂschemaÃ¥ÂÂ\r\n     * @param injectedType Ã¦Â³Â¨Ã¥ÂÂ¥Ã§Â±Â»Ã¥ÂÂÃ¯Â¼ÂÃ©Â»ÂÃ¨Â®Â¤Ã¤Â¸ÂºEntityType\r\n     */\r\n    public addInjectedEntityOfNewSchema(name: string, schemaName: string, injectedType: FilterInjectedType = FilterInjectedType.EntityType) {\r\n        this.injectedEntity = new FilterInjectedEntity();\r\n        this.injectedEntity.name = name;\r\n        this.injectedEntity.schemaName = schemaName;\r\n        this.injectedEntity.injectedType = injectedType;\r\n        let propertyAdapter = new PropertyAdapter();\r\n        this.propertyList = propertyAdapter.adapterOfNewSchema(this.injectedEntity, this.newSchemaMap);\r\n    }\r\n\r\n\r\n    //=======================================================================================================================\r\n}","import { FilterInjectedEntity, FilterInjectedType } from \"./injected-entity\";\r\nimport { FilterEntitySchema, FilterEntityType, FilterEntitySet } from \"./schema\";\r\nimport { NavigationType } from \"./navigation-property-entity\";\r\nimport { PropertyDataType } from \".\";\r\nimport { NewDataType, NewEntitySet, NewEntityType, NewNavigationType, NewSchema } from \"./NewSchema\";\r\n\r\nexport class PropertyAdapter {\r\n    entityName: string;\r\n    /**\r\n     * Ã¥Â±ÂÃ¦ÂÂ§Ã©ÂÂÃ©ÂÂÃ¥ÂÂ¨Ã¯Â¼ÂÃ¦Â³Â¨Ã¥ÂÂ¥Ã¥Â¤ÂÃ§ÂºÂ§Ã¥Â®ÂÃ¤Â½ÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºArray\r\n     * @param injectedEntity Ã¦Â³Â¨Ã¥ÂÂ¥Ã§ÂÂÃ¥Â®ÂÃ¤Â½Â\r\n     * @param schemaMap Ã¦Â³Â¨Ã¥ÂÂ¥Ã§ÂÂschema\r\n     */\r\n    adapter(injectedEntity: FilterInjectedEntity, schemaMap: Map<string, FilterEntitySchema>) {\r\n        //Ã¦Â Â¹Ã¦ÂÂ®Ã¦Â³Â¨Ã¥ÂÂ¥schemaÃ¥ÂÂÃ¥Â¾ÂÃ¥ÂÂ°schema\r\n        let schema = schemaMap.get(injectedEntity.schemaName);\r\n        //Ã¦Â Â¹Ã¦ÂÂ®Ã¦Â³Â¨Ã¥ÂÂ¥Ã§Â±Â»Ã¥ÂÂÃ¥ÂÂÃ¥ÂÂ«Ã¨Â¿ÂÃ¨Â¡ÂÃ¨Â½Â¬Ã¥ÂÂ\r\n        switch (injectedEntity.injectedType) {\r\n            case FilterInjectedType.EntitySet:\r\n                {\r\n                    let entitySet = schema.entitySets.find(entitySet => entitySet.name == injectedEntity.name);\r\n                    return this.convertEntitySet(entitySet, schema);\r\n                }\r\n            case FilterInjectedType.EntityType:\r\n                {\r\n                    let entityType = schema.entityTypes.find(entityType => entityType.name == injectedEntity.name);\r\n                    return this.convertEntityType(entityType, schema);\r\n                }\r\n            default: break;\r\n        }\r\n    }\r\n    /**\r\n     * Ã¥Â°ÂÃ¥Â®ÂÃ¤Â½ÂÃ§Â±Â»Ã¨Â½Â¬Ã¥ÂÂÃ¦ÂÂArrray\r\n     * @param entityType Ã¨Â¢Â«Ã¨Â½Â¬Ã¦ÂÂ¢Ã§ÂÂÃ¥Â®ÂÃ¤Â½ÂÃ§Â±Â»\r\n     */\r\n    convertEntityType(entityType: FilterEntityType, schema: FilterEntitySchema): any {\r\n        let propertyList = Array<{ text: string, propertyDataType: PropertyDataType, value: string, parentItem: string }>();\r\n        //Ã¥Â¸Â¸Ã¨Â§ÂÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â½Â¬Ã¥ÂÂ\r\n        entityType.properties.forEach(property => {\r\n            let propertyListItem =\r\n            {\r\n                text: property.displayName,\r\n                propertyDataType: property.propertyDataType,\r\n                value: property.name,\r\n                parentItem: null\r\n            };\r\n            propertyList.push(propertyListItem);\r\n        });\r\n        //Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â½Â¬Ã¥ÂÂ\r\n        entityType.navigationProperties.forEach(navigationProperty => {\r\n            //Ã¦Â Â¹Ã¦ÂÂ®Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂÃ¨Â¿ÂÃ¨Â¡ÂÃ¨Â½Â¬Ã¥ÂÂ\r\n            switch (navigationProperty.navigationType) {\r\n                //Ã¨ÂÂ¥Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¤Â¸ÂºEntitySet\r\n                case NavigationType.EntitySet:\r\n                    {\r\n                        //Ã¦Â Â¹Ã¦ÂÂ®Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ°schemaÃ¤Â¸Â­Ã§ÂÂEntitySet\r\n                        let entitySet = schema.entitySets.find(entitySet => entitySet.name == navigationProperty.navigationEntity);\r\n                        //Ã¥Â­ÂÃ¥Â®ÂÃ¤Â½ÂÃ©ÂÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºArray\r\n                        this.convertEntitySet(entitySet, schema).forEach(element => {\r\n                            //Ã¨ÂÂ¥Ã¥Â­ÂÃ¥Â®ÂÃ¤Â½ÂÃ¤Â¸Â­Ã§ÂÂÃ¦Â¯ÂÃ¤Â¸ÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§ÂÂ¶Ã©Â¡Â¹Ã¤Â¸ÂÃ¤Â¸ÂºÃ§Â©ÂºÃ¯Â¼ÂÃ¥ÂÂÃ¥ÂÂ¨Ã§ÂÂ¶Ã©Â¡Â¹Ã¥ÂÂÃ¥ÂÂÃ¦Â·Â»Ã¥ÂÂ Ã¨Â¯Â¥Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¯Â¼ÂÃ¤Â¾ÂÃ¥Â¦ÂOrderItemÃ¥ÂÂÃ¥ÂÂ OrderÃ¤Â¸ÂºOrders.OrderItem\r\n                            if (element.parentItem != null) {\r\n                                element.parentItem = navigationProperty.name + \".\" + element.parentItem;\r\n                            }\r\n                            //Ã¨ÂÂ¥Ã§ÂÂ¶Ã©Â¡Â¹Ã¤Â¸ÂºÃ§Â©ÂºÃ¯Â¼ÂÃ¥ÂÂÃ¨Â®Â¾Ã§Â½Â®Ã¨Â¯Â¥Ã¥Â±ÂÃ¦ÂÂ§Ã§ÂÂ¶Ã©Â¡Â¹Ã¤Â¸ÂºÃ¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂ\r\n                            else {\r\n                                element.parentItem = navigationProperty.name;\r\n                            }\r\n                            //Ã¨Â®Â¾Ã§Â½Â®Ã¨Â¯Â¥Ã¥Â±ÂÃ¦ÂÂ§Ã§ÂÂÃ¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂÃ§Â§Â°\r\n                            element.text = navigationProperty.displayName + \".\" + element.text;\r\n                            propertyList.push(element);\r\n                        });\r\n                    } break;\r\n                //Ã¨ÂÂ¥Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§Â±Â»Ã¥ÂÂÃ¤Â¸ÂºEntityType\r\n                case NavigationType.EntityType:\r\n                    {\r\n                        //Ã¦Â Â¹Ã¦ÂÂ®Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ°schemaÃ¤Â¸Â­Ã§ÂÂEntityType\r\n                        let entityType = schema.entityTypes.find(entityType => entityType.name == navigationProperty.navigationEntity);\r\n                        //Ã¥Â­ÂÃ¥Â®ÂÃ¤Â½ÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºArray\r\n                        this.convertEntityType(entityType, schema).forEach(element => {\r\n                            //Ã¨ÂÂ¥Ã¥Â­ÂÃ¥Â®ÂÃ¤Â½ÂÃ¤Â¸Â­Ã§ÂÂÃ¦Â¯ÂÃ¤Â¸ÂªÃ¥Â±ÂÃ¦ÂÂ§Ã§ÂÂ¶Ã©Â¡Â¹Ã¤Â¸ÂÃ¤Â¸ÂºÃ§Â©ÂºÃ¯Â¼ÂÃ¥ÂÂÃ¥ÂÂ¨Ã§ÂÂ¶Ã©Â¡Â¹Ã¥ÂÂÃ¥ÂÂÃ¦Â·Â»Ã¥ÂÂ Ã¨Â¯Â¥Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¯Â¼ÂÃ¤Â¾ÂÃ¥Â¦ÂOrderItemÃ¥ÂÂÃ¥ÂÂ OrderÃ¤Â¸ÂºOrder.OrderItem\r\n                            if (element.parentItem != null) {\r\n                                element.parentItem = navigationProperty.name + \".\" + element.parentItem;\r\n                            }\r\n                            //Ã¨ÂÂ¥Ã§ÂÂ¶Ã©Â¡Â¹Ã¤Â¸ÂºÃ§Â©ÂºÃ¯Â¼ÂÃ¥ÂÂÃ¨Â®Â¾Ã§Â½Â®Ã¨Â¯Â¥Ã¥Â±ÂÃ¦ÂÂ§Ã§ÂÂ¶Ã©Â¡Â¹Ã¤Â¸ÂºÃ¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂ\r\n                            else {\r\n                                element.parentItem = navigationProperty.name;\r\n                            }\r\n                            //Ã¨Â®Â¾Ã§Â½Â®Ã¨Â¯Â¥Ã¥Â±ÂÃ¦ÂÂ§Ã§ÂÂÃ¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂÃ§Â§Â°\r\n                            element.text = navigationProperty.displayName + \".\" + element.text;\r\n                            propertyList.push(element);\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        return propertyList;\r\n    }\r\n    /**\r\n     * Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºÃ¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¨Â¡Â¨\r\n     * @param entitySet Ã¥Â¾ÂÃ¨Â½Â¬Ã¥ÂÂÃ¥Â®ÂÃ¤Â½ÂÃ©ÂÂ\r\n     * @param schema Ã¦ÂÂÃ¥ÂÂ¨schema\r\n     */\r\n    convertEntitySet(entitySet: FilterEntitySet, schema: FilterEntitySchema): any {\r\n        let propertyList = Array<{ text: string, propertyDataType: PropertyDataType, value: string }>();\r\n        let entityType = schema.entityTypes.find(entityType => entityType.name == entitySet.entityTypeName);\r\n\r\n        entityType.properties.forEach(property => {\r\n            let propertyListItem =\r\n            {\r\n                text: property.displayName,\r\n                propertyDataType: property.propertyDataType,\r\n                value: property.name,\r\n                parentItem: null\r\n            };\r\n            propertyList.push(propertyListItem);\r\n        });\r\n        if (entityType.navigationProperties.length != 0) {\r\n            //Ã¥Â¯Â¼Ã¨ÂÂªÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â½Â¬Ã¥ÂÂ\r\n            entityType.navigationProperties.forEach(navigationProperty => {\r\n\r\n                switch (navigationProperty.navigationType) {\r\n                    case NavigationType.EntitySet:\r\n                        {\r\n                            let entitySet = schema.entitySets.find(entitySet => entitySet.name == navigationProperty.navigationEntity);\r\n                            this.convertEntitySet(entitySet, schema).forEach(element => {\r\n\r\n                                if (element.parentItem != null) {\r\n                                    element.parentItem = navigationProperty.name + \".\" + element.parentItem;\r\n                                }\r\n                                else {\r\n                                    element.parentItem = navigationProperty.name;\r\n                                }\r\n                                element.text = navigationProperty.displayName + \".\" + element.text;\r\n                                propertyList.push(element);\r\n                            });\r\n                        } break;\r\n                    case NavigationType.EntityType:\r\n                        {\r\n                            let entityType = schema.entityTypes.find(entityType => entityType.name == navigationProperty.navigationEntity);\r\n                            this.convertEntityType(entityType, schema).forEach(element => {\r\n\r\n                                if (element.parentItem != null) {\r\n                                    element.parentItem = navigationProperty.name + \".\" + element.parentItem;\r\n                                }\r\n                                else {\r\n                                    element.parentItem = navigationProperty.name;\r\n                                }\r\n                                element.text = navigationProperty.displayName + \".\" + element.text;\r\n                                propertyList.push(element);\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        return propertyList;\r\n    }\r\n\r\n    //==========================Ã¥ÂÂÃ¥ÂÂ²Ã§ÂºÂ¿Ã¯Â¼ÂNewSchemaÃ¯Â¼Â============================================\r\n    /**\r\n     * \r\n     * @param injectedEntity \r\n     * @param newSchemaMap \r\n     */\r\n    public adapterOfNewSchema(injectedEntity: FilterInjectedEntity, newSchemaMap: Map<string, NewSchema>) {\r\n        //injectedEntity.schemaNameÃ¦ÂÂ¾Ã¥ÂÂ°Schema\r\n        let schema = newSchemaMap.get(injectedEntity.schemaName);\r\n\r\n        //injectedEntity.injectedTypeÃ§Â¡Â®Ã¥Â®ÂÃ¦ÂÂ¾setsÃ¨Â¿ÂÃ¦ÂÂ¯types\r\n        switch (injectedEntity.injectedType) {\r\n            case FilterInjectedType.EntitySet: {\r\n                let set = schema.entitySets.find(set => set.code == injectedEntity.name);\r\n                return this.convertNewEntitySet(set, schema);\r\n            }\r\n            case FilterInjectedType.EntityType: {\r\n                let type = schema.entityTypes.find(type => type.code == injectedEntity.name);\r\n                return this.convertNewEntityType(type, schema);\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Ã¨Â½Â¬Ã¦ÂÂ¢EntityType\r\n     * @param type NewEntityType\r\n     * @param schema NewSchema\r\n     * @returns \r\n     */\r\n    convertNewEntityType(type: NewEntityType, schema: NewSchema): any {\r\n        let propertyList = Array<{ text: string, propertyDataType: PropertyDataType, value: string, parentItem: string }>();\r\n        //propertyÃ¨Â½Â¬Ã¦ÂÂ¢\r\n        type.properties.forEach(pro => {\r\n            let propertyListItem =\r\n            {\r\n                value: pro.code,\r\n                text: pro.name,\r\n                propertyDataType: this.convertNewDataType2PropertyDataType(pro.dataType),\r\n                parentItem: null\r\n            };\r\n            propertyList.push(propertyListItem);\r\n        });\r\n        //navigationPropertyÃ¨Â½Â¬Ã¦ÂÂ¢\r\n        type.navigationProperties.forEach(naPro => {\r\n            switch (naPro.navigationType) {\r\n                case NewNavigationType.EntitySet:\r\n                    {\r\n                        let naProSet = schema.entitySets.find(naProSet => naProSet.code == naPro.navigationName);\r\n                        this.convertNewEntitySet(naProSet, schema).forEach(ele => {\r\n                            if (ele.parentItem != null) {\r\n                                ele.parentItem = naPro.code + \".\" + ele.parentItem;\r\n                            } else {\r\n                                ele.parentItem = naPro.code;\r\n                            }\r\n                            ele.text = naPro.name + \".\" + ele.text;\r\n                            propertyList.push(ele);\r\n                        });\r\n                    }\r\n                    break;\r\n                case NewNavigationType.EntityType:\r\n                    {\r\n                        let naProType = schema.entityTypes.find(naProType => naProType.code == naPro.navigationName);\r\n                        this.convertNewEntityType(naProType, schema).forEach(ele => {\r\n                            if (ele.parentItem != null) {\r\n                                ele.parentItem = naPro.code + \".\" + ele.parentItem;\r\n                            } else {\r\n                                ele.parentItem = naPro.code;\r\n                            }\r\n                            ele.text = naPro.name + \".\" + ele.text;\r\n                            propertyList.push(ele);\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        })\r\n        return propertyList;\r\n    }\r\n\r\n\r\n    convertNewEntitySet(set: NewEntitySet, schema: NewSchema): any {\r\n        let propertyList = Array<{ text: string, propertyDataType: PropertyDataType, value: string, parentItem: string }>();\r\n        let type = schema.entityTypes.find(type => type.code == set.entityType);\r\n        type.properties.forEach(pro => {\r\n            let propertyListItem =\r\n            {\r\n                value: pro.code,\r\n                text: pro.name,\r\n                propertyDataType: this.convertNewDataType2PropertyDataType(pro.dataType),\r\n                parentItem: null\r\n            };\r\n            propertyList.push(propertyListItem);\r\n        });\r\n        if (type.navigationProperties.length != 0) {\r\n            type.navigationProperties.forEach(naPro => {\r\n                switch (naPro.navigationType) {\r\n                    case NewNavigationType.EntitySet:\r\n                        {\r\n                            let naProSet = schema.entitySets.find(naProSet => naProSet.code == naPro.navigationName);\r\n                            this.convertNewEntitySet(naProSet, schema).forEach(ele => {\r\n                                    if (ele.parentItem != null) {\r\n                                        ele.parentItem = naPro.code + \".\" + ele.parentItem;\r\n                                    } else {\r\n                                        ele.parentItem = naPro.code;\r\n                                    }\r\n                                    ele.text = naPro.name + \".\" + ele.text;\r\n                                    propertyList.push(ele);\r\n                            });\r\n                        }\r\n                        break;\r\n                    case NewNavigationType.EntityType:\r\n                        {\r\n                            let naProType = schema.entityTypes.find(naProType => naProType.code == naPro.navigationName);\r\n                            this.convertNewEntityType(naProType, schema).forEach(ele => {\r\n                                if (ele.parentItem != null) {\r\n                                    ele.parentItem = naPro.code + \".\" + ele.parentItem;\r\n                                } else {\r\n                                    ele.parentItem = naPro.code;\r\n                                }\r\n                                ele.text = naPro.name + \".\" + ele.text;\r\n                                propertyList.push(ele);\r\n                            });\r\n                        }\r\n                        break;\r\n                }\r\n            })\r\n        }\r\n        return propertyList;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param newType Ã§Â»ÂÃ¤Â¸ÂSchemaÃ§ÂÂÃ¥Â±ÂÃ¦ÂÂ§\r\n     * @returns \r\n     */\r\n    convertNewDataType2PropertyDataType(newType: NewDataType): PropertyDataType {\r\n        let type = PropertyDataType.String;\r\n        switch (newType) {\r\n            case NewDataType.Boolean:\r\n                type = PropertyDataType.Boolean;\r\n                break;\r\n            case NewDataType.Byte:\r\n                type = PropertyDataType.Byte;\r\n                break;\r\n            case NewDataType.Date:\r\n                type = PropertyDataType.DateTime;\r\n                break;\r\n            case NewDataType.DateTime:\r\n                type = PropertyDataType.DateTime;\r\n                break;\r\n            case NewDataType.Decimal:\r\n                type = PropertyDataType.Decimal;\r\n                break;\r\n            case NewDataType.Integer:\r\n                type = PropertyDataType.Int32;\r\n                break;\r\n            case NewDataType.String:\r\n                type = PropertyDataType.String;\r\n                break;\r\n        }\r\n        return type;\r\n    }\r\n\r\n}","import { Component, ViewChild, Input, EventEmitter, Output, OnInit, OnChanges, ViewEncapsulation, LOCALE_ID, Inject, Injector } from '@angular/core';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { FilterExpression, ExpressionItem } from '../filter-expression-entity';\r\nimport { VarEntity } from '@gsp-svc/expression';\r\nimport { Schema } from '@gsp-svc/expression';\r\nimport { GspCommonDataType } from '@gsp-bef/gsp-cm-metadata';\r\nimport { InjectedEntity } from '@gsp-svc/expression';\r\nimport { ExpressTypeEnum, RelationTypeEnum, CompareTypeEnum } from '../typeinfo';\r\nimport { ExpressionService } from '@gsp-svc/expression';\r\nimport { PropertyDataType } from '../property-entity';\r\nimport { FieldType } from '../field-type';\r\nimport { FilterInjectedEntity } from '../injected-entity';\r\nimport { PropertyAdapter } from '../property-adapter';\r\nimport { FilterEntitySchema, FilterEntityType } from '../schema';\r\nimport { GSPCommonObject } from '@gsp-bef/gsp-cm-metadata';\r\nimport { Adapter } from '../adapter';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { FilterConditionLocalePipe } from '../filter-condition-locale.pipe';\r\nimport { NewSchema } from '../NewSchema';\r\n@Component({\r\n  selector: 'app-filter-expression',\r\n  templateUrl: './filter-expression.component.html',\r\n  styleUrls: ['./filter-expression.component.css'],\r\n  providers: [ExpressionService, PropertyAdapter],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n/**\r\n * Ã¨Â¿ÂÃ¦Â»Â¤Ã¦ÂÂ¡Ã¤Â»Â¶Ã©ÂÂ¢Ã¦ÂÂ¿Ã©ÂÂ»Ã¨Â¾ÂÃ§Â±Â»\r\n */\r\nexport class FilterExpressionComponent implements OnChanges {\r\n  localePipe: FilterConditionLocalePipe;\r\n  constructor(private expr: ExpressionService,\r\n    private propertyAdapter: PropertyAdapter,\r\n    private notifyservice: NotifyService,\r\n    private injector: Injector,\r\n    @Inject(LOCALE_ID) localeId: string) {\r\n    this.localePipe = new FilterConditionLocalePipe(localeId);\r\n  }\r\n  treeDataTemp: TreeNode[]\r\n  //Ã¨ÂÂ·Ã¥Â¾ÂÃ¦Â ÂÃ¥ÂÂÃ¨Â¡Â¨Ã§Â»ÂÃ¤Â»Â¶Ã¦ÂÂ\r\n  @ViewChild('tt') tt: TreeTableComponent;\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥Â®ÂÃ¤Â½Â\r\n  @Input() contextEntity: VarEntity[] = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ©Â»ÂÃ¨Â®Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n  @Input() expressionText: string = \"\";\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â­Ã§ÂÂschema\r\n  @Input() expressionSchema: Array<{ name: string, schema: Schema }> = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â­Ã§ÂÂÃ¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n  @Input() expressionInjectedEntities: InjectedEntity[] = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂcdtÃ©ÂÂ\r\n  @Input() expressionCDT: GspCommonDataType[] = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¨Â¡Â¨\r\n  @Input() propertyList: Array<{ text: string, value: string, propertyFieldType: PropertyDataType }> = [];\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¤Â¸Â²\r\n  @Input() filterExpressionString: string = null;\r\n  //Ã©Â¢ÂÃ§Â½Â®schemaÃ¥ÂÂ\r\n  @Input() schemaName: string;\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Âschema\r\n  @Input() schema: FilterEntitySchema;\r\n  //===========================Ã¥ÂÂÃ¥ÂÂ²Ã§ÂºÂ¿Ã¤Â¹ÂNewSchema===============================\r\n  @Input() newSchema: NewSchema;\r\n  //schemaÃ¥Â­ÂÃ¥ÂÂ¨Ã§Â»ÂÃ¦ÂÂ\r\n  filterNewSchemaMap = new Map<string, NewSchema>();\r\n  //==========================================================================\r\n  //Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n  @Input() injectedEntity: FilterInjectedEntity;\r\n  //Ã¦Â³Â¨Ã¥ÂÂ¥CO\r\n  @Input() gspCommonObject: GSPCommonObject;\r\n\r\n  @Input() disabled: boolean = false;\r\n  //Ã¥ÂÂÃ©ÂÂ¨Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¨Â¡Â¨Ã¤Â½Â¿Ã§ÂÂ¨\r\n  propertyListInner: Array<{ text: string, propertyDataType: PropertyDataType, value: string, parentItem: string }> = [];\r\n  //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦Ã©ÂÂ\r\n  public operators = [];\r\n\r\n  public stringOperators = [];\r\n\r\n  public NumberOperators = [];\r\n  //Ã¥ÂÂ³Ã§Â³Â»Ã©ÂÂ\r\n  public relations = [];\r\n  //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ©ÂÂ\r\n  public expressTypes = [];\r\n  public filterExpression: FilterExpression;\r\n  //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¥Â®ÂÃ¤Â½ÂÃ©ÂÂ\r\n  public nodeTemp: TreeNode[];\r\n  defaultSelectGroup: string;\r\n  defaultSelectItem: string;\r\n  //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦Ã©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂ¼\r\n  public defaultOperatorText: string;\r\n  //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂ¼\r\n  public defaultExpressTypeText;\r\n\r\n  public displayPopup: boolean = false;\r\n  // public defaultOperator: { text: string, value: string } = { text: null, value: null };\r\n  //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ©Â»ÂÃ¨Â®Â¤Ã¦ÂÂ¾Ã§Â¤ÂºÃ¥ÂÂ¼ \r\n  // public defaultExpressType: { text: string, value: string } = { text: null, value: null };\r\n  //Ã©Â¢ÂÃ§Â½Â®Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â®ÂÃ¤Â½Â\r\n  public filterExpressionPre: FilterExpression;\r\n  //Ã¦Â£ÂÃ¦ÂÂ¥Ã¨Â¿ÂÃ¦Â»Â¤Ã¦ÂÂ¡Ã¤Â»Â¶Ã¥Â®ÂÃ¤Â½ÂÃ¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â®ÂÃ¦ÂÂ´Ã¦Â­Â£Ã§Â¡Â®\r\n  public checkFilterStruc: boolean = true;\r\n  //schemaÃ¥Â­ÂÃ¥ÂÂ¨Ã§Â»ÂÃ¦ÂÂ\r\n  filterSchemaMap = new Map<string, FilterEntitySchema>();\r\n  adapter: Adapter = new Adapter();\r\n  treeData: TreeNode[] = [];\r\n  columnWidth = [\"30%\", \"20%\", \"20%\", \"20%\", \"10%\"];\r\n  //Ã¦Â¶ÂÃ¦ÂÂ¯Ã¦ÂÂÃ§Â¤Âº\r\n  private notifies = {};\r\n  cols: any[];\r\n  //Ã¥ÂÂÃ¥Â§ÂÃ¥ÂÂÃ¯Â¼ÂÃ¥Â¤ÂÃ¥ÂÂ¶treeDataÃ¥ÂÂ¼,treeDataTempÃ§ÂÂ¨Ã¤ÂºÂÃ¨Â½Â¬Ã¦ÂÂ¢Ã¤Â¸ÂºFilterExpressionÃ¥Â®ÂÃ¤Â½Â\r\n  ngOnChanges(): void {\r\n    //Ã¥Â¹Â¶Ã¤Â¸ÂÃ¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§ÂÂÃ¦ÂÂ¾Ã§Â¤ÂºÃ§ÂÂÃ¥ÂÂ \r\n    this.cols = [\r\n      { field: 'item', title: this.localePipe.transform(\"Item\"), width: 271 },\r\n      { field: 'operator', title: this.localePipe.transform(\"Operator\"), width: 191 },\r\n      { field: 'expressType', title: this.localePipe.transform(\"ExpressType\"), width: 180 },\r\n      { field: 'value', title: this.localePipe.transform(\"Value\"), width: 214 },\r\n      { field: 'operation', title: this.localePipe.transform(\"Operation\"), width: 130 }];\r\n\r\n    this.propertyListInner = [];\r\n    this.treeDataTemp = this.treeData;\r\n    //=================================Ã¥ÂÂÃ¥ÂÂ²Ã§ÂºÂ¿Ã¤Â¹ÂNewSchema====================================\r\n    //Ã¦Â³Â¨Ã¥ÂÂ¥NewSchema\r\n    if (this.schemaName && this.newSchema) {\r\n      this.addNewSchema(this.schemaName, this.newSchema);\r\n      //Ã¦Â³Â¨Ã¥ÂÂ¥co\r\n      if (this.gspCommonObject) {\r\n        let newSchema: NewSchema;\r\n        //Ã¨ÂÂ¥schemaMapÃ¤Â¸Â­Ã¥Â­ÂÃ¥ÂÂ¨COÃ§ÂÂschema\r\n        if ((this.filterNewSchemaMap.get(\"CommonObject\"))) {\r\n          newSchema = this.filterNewSchemaMap.get(\"CommonObject\");\r\n        } else {\r\n          newSchema = new NewSchema();\r\n        }\r\n        //Ã¥Â°ÂÃ¦Â¯ÂÃ¤Â¸ÂÃ¤Â¸ÂªCOÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºschemaÃ¥ÂÂÃ©ÂÂ¨Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã§ÂÂentityType\r\n        let entityTypes = this.adapter.convertCOOfNewSchema(this.gspCommonObject);\r\n        if ((entityTypes) && entityTypes.length != 0) {\r\n          entityTypes.forEach(entityType => {\r\n            if (newSchema.entityTypes.find(x => x.code == entityType.code) == null) {\r\n              newSchema.entityTypes.push(entityType);\r\n            }\r\n          });\r\n        }\r\n        //Ã¥Â°ÂÃ¥ÂÂÃ¥Â¹Â¶Ã¥ÂÂÃ§ÂÂschemaÃ¦ÂÂ¾Ã¥ÂÂ¥Ã¥ÂÂÃ©ÂÂ¨Ã¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥Â®ÂÃ¤Â½ÂÃ¤Â¸Â­\r\n        this.addNewSchema(\"CommonObject\", newSchema);\r\n      }\r\n      //Ã¦Â·Â»Ã¥ÂÂ Ã¥Â±ÂÃ¦ÂÂ§Ã¥ÂÂÃ¨Â¡Â¨\r\n      this.propertyList.forEach(property => {\r\n        let propertyInner =\r\n        {\r\n          value: property.value,\r\n          text: property.text,\r\n          propertyDataType: property.propertyFieldType,\r\n          parentItem: null\r\n        };\r\n        this.propertyListInner.push(propertyInner);\r\n      });\r\n      if ((this.injectedEntity)) {\r\n        this.propertyAdapter.adapterOfNewSchema(this.injectedEntity, this.filterNewSchemaMap).forEach(element => {\r\n          this.propertyListInner.push(element);\r\n        });\r\n      }\r\n    } else {\r\n      //===========================================Ã¦ÂÂ§Schema==========================================\r\n      if (this.schemaName != null && (this.schema)) {\r\n        this.addSchema(this.schemaName, this.schema);\r\n      }\r\n      if ((this.gspCommonObject)) {\r\n        let schema: FilterEntitySchema;\r\n        //Ã¨ÂÂ¥schemaMapÃ¤Â¸Â­Ã¥Â­ÂÃ¥ÂÂ¨COÃ§ÂÂschema\r\n        if ((this.filterSchemaMap.get(\"CommonObject\"))) {\r\n          schema = this.filterSchemaMap.get(\"CommonObject\");\r\n        }\r\n        else\r\n          schema = new FilterEntitySchema();\r\n        //Ã¥Â°ÂÃ¦Â¯ÂÃ¤Â¸ÂÃ¤Â¸ÂªCOÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºschemaÃ¥ÂÂÃ©ÂÂ¨Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã§ÂÂentityType\r\n        let entityTypes = this.adapter.convertCO(this.gspCommonObject);\r\n        if ((entityTypes) && entityTypes.length != 0) {\r\n          entityTypes.forEach(entityType => {\r\n            if (schema.entityTypes.find(x => x.name == entityType.name) == null) {\r\n              schema.entityTypes.push(entityType);\r\n            }\r\n          });\r\n        }\r\n        //Ã¥Â°ÂÃ¥ÂÂÃ¥Â¹Â¶Ã¥ÂÂÃ§ÂÂschemaÃ¦ÂÂ¾Ã¥ÂÂ¥Ã¥ÂÂÃ©ÂÂ¨Ã¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥Â®ÂÃ¤Â½ÂÃ¤Â¸Â­\r\n        this.addSchema(\"CommonObject\", schema);\r\n      }\r\n      this.propertyList.forEach(property => {\r\n        let propertyInner =\r\n        {\r\n          text: property.text,\r\n          propertyDataType: property.propertyFieldType,\r\n          value: property.value,\r\n          parentItem: null\r\n        };\r\n        this.propertyListInner.push(propertyInner);\r\n      });\r\n      if ((this.injectedEntity)) {\r\n        this.propertyAdapter.adapter(this.injectedEntity, this.filterSchemaMap).forEach(element => {\r\n          this.propertyListInner.push(element);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.defaultExpressTypeText = this.localePipe.transform(\"Value\");\r\n    this.defaultSelectGroup = this.localePipe.transform('And');\r\n    this.defaultSelectItem = this.localePipe.transform(\"SelectItem\");\r\n    this.defaultOperatorText = this.localePipe.transform(\"GreaterThan\");\r\n    this.notifies = {\r\n      1: { type: 'success', msg: this.localePipe.transform(\"Success\") },\r\n      2: { type: 'warning', msg: this.localePipe.transform(\"Warning_SelectRelation\") },\r\n      3: { type: 'warning', msg: this.localePipe.transform(\"Warning_ContainsFilters\") },\r\n      4: { type: 'warning', msg: this.localePipe.transform(\"Warning_ConditionsComplete\") },\r\n      5: { type: 'warning', msg: this.localePipe.transform(\"Warning_NumericMatch\") }\r\n    };\r\n    this.expressTypes = [\r\n      { id: this.localePipe.transform(\"Value\") },\r\n      { id: this.localePipe.transform(\"Expression\") }\r\n    ];\r\n    this.relations = [\r\n      { id: this.localePipe.transform(\"And\") },\r\n      { id: this.localePipe.transform(\"Or\") },\r\n    ];\r\n    this.NumberOperators = [\r\n      { id: this.localePipe.transform(\"GreaterThan\") },\r\n      { id: this.localePipe.transform(\"GreaterThanOrEqual\") },\r\n      { id: this.localePipe.transform(\"LessThan\") },\r\n      { id: this.localePipe.transform(\"LessThanOrEqual\") },\r\n      { id: this.localePipe.transform(\"Equal\") },\r\n      { id: this.localePipe.transform(\"NotEqual\") },\r\n      { id: this.localePipe.transform(\"IsNull\") },\r\n      { id: this.localePipe.transform(\"IsNotNull\") },\r\n    ];\r\n    this.stringOperators = [\r\n      { id: this.localePipe.transform(\"Equal\") },\r\n      { id: this.localePipe.transform(\"NotEqual\") },\r\n      { id: this.localePipe.transform(\"Contains\") },\r\n      { id: this.localePipe.transform(\"NotContains\") },\r\n      { id: this.localePipe.transform(\"StartsWith\") },\r\n      { id: this.localePipe.transform(\"EndsWith\") },\r\n      { id: this.localePipe.transform(\"NotStartsWith\") },\r\n      { id: this.localePipe.transform(\"NotEndsWith\") },\r\n      { id: this.localePipe.transform(\"IsNull\") },\r\n      { id: this.localePipe.transform(\"IsNotNull\") },\r\n    ];\r\n    this.operators = [\r\n      { id: this.localePipe.transform(\"GreaterThan\") },\r\n      { id: this.localePipe.transform(\"GreaterThanOrEqual\") },\r\n      { id: this.localePipe.transform(\"LessThan\") },\r\n      { id: this.localePipe.transform(\"LessThanOrEqual\") },\r\n      { id: this.localePipe.transform(\"Equal\") },\r\n      { id: this.localePipe.transform(\"NotEqual\") },\r\n      { id: this.localePipe.transform(\"Contains\") },\r\n      { id: this.localePipe.transform(\"NotContains\") },\r\n      { id: this.localePipe.transform(\"StartsWith\") },\r\n      { id: this.localePipe.transform(\"EndsWith\") },\r\n      { id: this.localePipe.transform(\"NotStartsWith\") },\r\n      { id: this.localePipe.transform(\"NotEndsWith\") },\r\n      { id: this.localePipe.transform(\"IsNull\") },\r\n      { id: this.localePipe.transform(\"IsNotNull\") },\r\n      { id: this.localePipe.transform(\"In\") },\r\n      { id: this.localePipe.transform(\"NotIn\") },\r\n    ];\r\n    this.onCancel();\r\n  }\r\n\r\n  //=================Ã¦Â·Â»Ã¥ÂÂ NewSchema=====================\r\n  /**\r\n   * @description Ã¦Â·Â»Ã¥ÂÂ NewSchemaÃ¥ÂÂ°MapÃ¤Â¸Â­\r\n   * @param name schemaÃ¥ÂÂÃ§Â§Â°\r\n   * @param filterNewSchema Ã¦Â³Â¨Ã¥ÂÂ¥Ã§ÂÂÃ§Â»ÂÃ¤Â¸ÂÃ§Â»ÂÃ¦ÂÂNewSchema\r\n   */\r\n  addNewSchema(name: string, filterNewSchema: NewSchema) {\r\n    this.filterNewSchemaMap.set(name, filterNewSchema);\r\n  }\r\n  //==================================================\r\n\r\n  /**\r\n   * Ã¦Â·Â»Ã¥ÂÂ schemaÃ¥ÂÂ¥Map\r\n   * @param name schemaÃ¥ÂÂ\r\n   * @param filterSchema \r\n   */\r\n  addSchema(name: string, filterSchema: FilterEntitySchema) {\r\n    this.filterSchemaMap.set(name, filterSchema);\r\n  }\r\n  /**\r\n   * Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã¤Â¸Â­Ã¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©Ã¨Â§Â¦Ã¥ÂÂÃ¥ÂÂ½Ã¦ÂÂ°\r\n   * @param $event Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  nodeSelected($event) {\r\n    //Ã©ÂÂÃ¨ÂÂÃ¦ÂÂÃ¦ÂÂÃ¦ÂÂÃ§ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¬Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂ\r\n    this.hideNodeEditor(this.treeData);\r\n    //Ã¥Â°ÂÃ¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¦Â¯ÂÃ¨Â¾ÂÃ©Â¡Â¹Ã£ÂÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ©Â¡Â¹Ã£ÂÂÃ¥ÂÂ¼Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ¦ÂÂ¾Ã§Â¤ÂºÃ¯Â¼ÂÃ¥Â¹Â¶Ã¥Â°ÂÃ¦ÂÂÃ©ÂÂÃ¥Â¯Â¹Ã¥ÂºÂÃ¦ÂÂ°Ã¦ÂÂ®Ã¨ÂµÂÃ§Â»ÂÃ©Â»ÂÃ¨Â®Â¤Ã©Â¡Â¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n    this.defaultOperatorText = $event.node.data.operator;\r\n    this.defaultExpressTypeText = $event.node.data.expressType;\r\n    if ($event.node.data.item == this.localePipe.transform('And') || $event.node.data.item == this.localePipe.transform('Or')) {\r\n      this.defaultSelectGroup = $event.node.data.item;\r\n    }\r\n    else if ($event.node.data.item !== this.localePipe.transform(\"SelectProperty\")) {\r\n      let properties = this.propertyListInner.filter(x => x.text == $event.node.data.item);\r\n      this.defaultSelectItem = properties[0].value;\r\n    }\r\n    else if ($event.node.data.item == this.localePipe.transform(\"SelectProperty\")) {\r\n      this.defaultSelectItem = $event.node.data.item;\r\n    }\r\n    this.treeData = [...this.treeData];\r\n    $event.node.data.displayOperator = true;\r\n    $event.node.data.displayExpressType = true;\r\n    $event.node.data.displayValue = true;\r\n    $event.node.data.displaySelect = true;\r\n  };\r\n  /**\r\n   * Ã©ÂÂÃ¨ÂÂÃ¦ÂÂÃ¦ÂÂÃ¦ÂÂÃ§ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¬Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂ\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   */\r\n  hideNodeEditor(treeNodes: TreeNode[]) {\r\n    treeNodes.forEach(element => {\r\n      element.data.displayOperator = false;\r\n      element.data.displayExpressType = false;\r\n      element.data.displayValue = false;\r\n      element.data.displaySelect = false;\r\n      //Ã¨ÂÂ¥Ã¦ÂÂÃ¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¥Â°ÂÃ¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂÃ§Â¼ÂÃ¨Â¾ÂÃ©ÂÂÃ¦ÂÂ©Ã¦Â¡ÂÃ©ÂÂÃ¨ÂÂ\r\n      if ((element.children) && element.children.length != 0) {\r\n        this.hideNodeEditor(element.children);\r\n      }\r\n    });\r\n  };\r\n  //Ã¨ÂÂÃ§ÂÂ¹Ã¦ÂÂªÃ©ÂÂÃ¦ÂÂ©Ã¥ÂÂ½Ã¦ÂÂ°\r\n  nodeUnSelect() {\r\n    console.log(\"nodeUnselect\");\r\n  };\r\n  /***\r\n  * Ã©ÂÂÃ¦ÂÂ©Ã©ÂÂ»Ã¨Â¾ÂÃ©ÂÂÃ¦ÂÂ¶\r\n  */\r\n  selectGroup($event) {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Group);\r\n  }\r\n  /***\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¶\r\n   */\r\n  selectItem($event) {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Item);\r\n  }\r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã¦Â¯ÂÃ¨Â¾ÂÃ¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã¦ÂÂ¶\r\n   * @param $event Ã¦Â¯ÂÃ¨Â¾ÂÃ¦ÂÂÃ¤Â½ÂÃ©Â¡Â¹Ã¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  selectOperator($event) {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Operation);\r\n  };\r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã¥ÂÂ¼Ã§Â±Â»Ã¥ÂÂÃ¦ÂÂ¶\r\n   * @param $event Ã¥ÂÂ¼Ã§Â±Â»Ã¥ÂÂÃ©Â¡Â¹Ã¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  selectExpressType($event) {\r\n    this.propertyNodeOperate($event, this.treeData, FieldType.Valuetype);\r\n  };\r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã§Â»ÂÃ¦ÂÂÃ¥ÂÂÃ©ÂÂÃ¨ÂÂÃ¨Â¯Â¥Ã¥Â­ÂÃ¦Â®ÂµÃ©ÂÂÃ¦ÂÂ©Ã¦Â¡Â\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param fieldType Ã¦ÂÂÃ©ÂÂÃ¥Â­ÂÃ¦Â®Âµ\r\n   */\r\n  hideFieldEditor(treeNodes: TreeNode[], fieldType: FieldType) {\r\n    //Ã¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ¦ÂÂÃ¤Â½ÂÃ§ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¦Â Â¹Ã¦ÂÂ®Ã¦ÂÂÃ©ÂÂÃ¦ÂÂ©Ã§ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ¥Â°ÂÃ¥Â¯Â¹Ã¥ÂºÂÃ©ÂÂÃ¦ÂÂ©Ã§Â¼ÂÃ¨Â¾ÂÃ¦Â¡ÂÃ©ÂÂÃ¨ÂÂ\r\n    treeNodes.forEach(treeNode => {\r\n      if (this.tt.isSelected(treeNode)) {\r\n        switch (fieldType) {\r\n          case FieldType.Item: treeNode.data.displaySelect = false; break;\r\n          case FieldType.Operation: treeNode.data.displayOperator = false; break;\r\n          case FieldType.Valuetype: treeNode.data.displayExpressType = false; break;\r\n        }\r\n        return;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        this.hideFieldEditor(treeNode.children, fieldType);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Ã¦ÂÂÃ¥Â¼ÂÃ¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â¼ÂÃ¨Â¾ÂÃ¥ÂÂ¨\r\n   */\r\n  openExpressEditor() {\r\n    let that = this;\r\n    //Ã¦Â·Â»Ã¥ÂÂ Ã©Â¢ÂÃ§Â½Â®Ã¤Â¸ÂÃ¤Â¸ÂÃ¦ÂÂÃ¥ÂÂÃ©ÂÂ\r\n    if (this.contextEntity && this.contextEntity.length != 0) {\r\n      this.contextEntity.forEach(element => {\r\n        this.expr.addContext(element);\r\n      });\r\n    }\r\n    //Ã¦Â·Â»Ã¥ÂÂ Ã©Â¢ÂÃ§Â½Â®Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂÃ¦ÂÂ¬\r\n    let selectNode = this.isSelected(this.treeData);\r\n    if ((selectNode) && (selectNode.data.value != \"\") && (selectNode.data.value != null)) {\r\n      this.expr.addExpressionText(selectNode.data.value);\r\n    }\r\n    else this.expr.addExpressionText(this.expressionText);\r\n    //Ã¦Â·Â»Ã¥ÂÂ Ã¦Â³Â¨Ã¥ÂÂ¥Ã¥Â®ÂÃ¤Â½Â\r\n    this.expressionInjectedEntities.forEach(element => {\r\n      this.expr.addInjectedEntity(element.name, element.schemaName, element.injectedName, element.injectedType);\r\n    });\r\n    //Ã¦Â·Â»Ã¥ÂÂ CDT\r\n    this.expr.addCDT(this.expressionCDT);\r\n    //Ã¦Â·Â»Ã¥ÂÂ schema\r\n    this.expressionSchema.forEach(element => {\r\n      this.expr.addSchema(element.name, element.schema);\r\n    });\r\n    //Ã¦ÂÂÃ¥Â¼ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â¼ÂÃ¨Â¾ÂÃ¥ÂÂ¨Ã¥Â¹Â¶Ã¨Â¿ÂÃ¥ÂÂÃ§Â¼ÂÃ¨Â¾ÂÃ§Â»ÂÃ¦ÂÂ\r\n    this.expr.buildExpression().then(info => {\r\n      let expressInfo: any = info;\r\n      this.displayExpressResult(that.treeData, expressInfo);\r\n    });\r\n  }\r\n  /**\r\n   * Ã©ÂÂÃ¤Â¸Â­Ã¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¦ÂÂ©\r\n   * @param treeNodes Ã¥ÂÂ³Ã§Â³Â»Ã§Â»Â\r\n   */\r\n  isSelected(treeNodes: TreeNode[]): any {\r\n    let treeNode: TreeNode;\r\n    for (var i = 0; i < treeNodes.length; i++) {\r\n      if (this.tt.isSelected(treeNodes[i])) {\r\n        treeNode = treeNodes[i];\r\n        break;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¥ÂÂ¨Ã¨Â¯Â¥Ã¥Â±ÂÃ¨ÂÂÃ§ÂÂ¹Ã¤Â¸Â­Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNodes[i].children) && treeNodes[i].children.length != 0) {\r\n        treeNode = this.isSelected(treeNodes[i].children);\r\n        if ((treeNode)) break;\r\n      }\r\n    }\r\n    return treeNode;\r\n  }\r\n  /**\r\n   * Ã¥Â°ÂÃ¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â»ÂÃ¦ÂÂÃ¥Â±ÂÃ§Â¤ÂºÃ¥ÂÂ°Ã¥Â¯Â¹Ã¥ÂºÂÃ¨ÂÂÃ§ÂÂ¹\r\n   * @param treeNodes Ã¦Â ÂÃ¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param expressInfo Ã¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â¾ÂÃ¥ÂÂ°Ã§Â»ÂÃ¦ÂÂ\r\n   */\r\n  displayExpressResult(treeNodes: TreeNode[], expressInfo: string) {\r\n    //Ã¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¥Â®ÂÃ¤Â½ÂÃ¯Â¼ÂÃ¥Â¹Â¶Ã¥Â°ÂÃ¨Â®Â¡Ã§Â®ÂÃ¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂÃ¥Â¾ÂÃ§Â»ÂÃ¦ÂÂÃ¨ÂµÂÃ§Â»ÂÃ¥Â¯Â¹Ã¥ÂºÂÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â¿ÂÃ¨Â¡ÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n    treeNodes.forEach(treeNode => {\r\n      if (this.tt.isSelected(treeNode)) {\r\n        treeNode.data.value = expressInfo;\r\n        return;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¥ÂÂ¨Ã¨Â¯Â¥Ã¥Â±ÂÃ¨ÂÂÃ§ÂÂ¹Ã¤Â¸Â­Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ¾Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        this.displayExpressResult(treeNode.children, expressInfo);\r\n      }\r\n      //Ã¨ÂÂ¥Ã¤Â»ÂÃ¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¯Â¼ÂÃ¥ÂÂÃ¤Â¸ÂÃ¨Â¿ÂÃ¨Â¡ÂÃ¤Â»Â»Ã¤Â½ÂÃ¦ÂÂÃ¤Â½Â\r\n    });\r\n  }\r\n  /**\r\n   * Ã¥ÂÂ³Ã§Â³Â»Ã©ÂÂÃ¦ÂÂ©Ã¦ÂÂÃ©ÂÂ®Ã©ÂÂÃ¦ÂÂ©Ã¤ÂºÂÃ¤Â»Â¶\r\n   * @param $event Ã©ÂÂÃ¦ÂÂ©Ã¦ÂÂÃ©ÂÂ®Ã¦ÂÂÃ©ÂÂÃ¤Â¿Â¡Ã¦ÂÂ¯\r\n   */\r\n  itemClick($event) {\r\n    //Ã¨ÂÂ¥Ã©ÂÂÃ¦ÂÂ©Ã¦Â·Â»Ã¥ÂÂ Ã¥ÂÂ³Ã§Â³Â»\r\n    if ($event.value == RelationTypeEnum.AddRelation) {\r\n      this.addNode(this.treeData, this.localePipe.transform('And'), null, null);\r\n    }\r\n    //Ã¨ÂÂ¥Ã©ÂÂÃ¦ÂÂ©Ã¦Â·Â»Ã¥ÂÂ Ã¥Â±ÂÃ¦ÂÂ§\r\n    else if ($event.value == RelationTypeEnum.AddProperty) {\r\n      this.addNode(this.treeData, this.localePipe.transform(\"SelectProperty\"), this.localePipe.transform(\"Equal\"), this.localePipe.transform(\"Value\"));\r\n    }\r\n    else this.propertyNodeOperate($event, this.treeData, FieldType.Item);\r\n  }\r\n  /**\r\n   * Ã©ÂÂÃ¦ÂÂ©Ã¥Â±ÂÃ¦ÂÂ§Ã¨ÂÂÃ§ÂÂ¹Ã¦ÂÂÃ¤Â½Â\r\n   * Ã¥Â¯Â¹Ã¦ÂÂ°Ã¦Â·Â»Ã¥ÂÂ Ã§ÂÂÃ¥Â±ÂÃ¦ÂÂ§Ã¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ©ÂÂ»Ã¨Â¾ÂÃ¥Â¤ÂÃ§ÂÂ\r\n   * @param event Ã§ÂÂ¹Ã¥ÂÂ»Ã¤ÂºÂÃ¤Â»Â¶\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param fieldType Ã¨ÂÂÃ§ÂÂ¹Ã§Â±Â»Ã¥ÂÂ\r\n   */\r\n  propertyNodeOperate(event: any, treeNodes: TreeNode[], fieldType: FieldType) {\r\n    treeNodes.forEach(treenode => {\r\n      if (this.tt.isSelected(treenode)) {\r\n        //Ã¥Â¯Â¹Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¨ÂµÂÃ¥ÂÂ¼Ã¦ÂÂÃ¤Â½Â\r\n        switch (fieldType) {\r\n          case FieldType.Group:\r\n            {\r\n              treenode.data.item = event.data.id;\r\n              this.defaultSelectGroup = event.data.id;\r\n            } break;\r\n          case FieldType.Item:\r\n            {\r\n              treenode.data.item = event.data.text;\r\n              this.defaultSelectItem = event.data.value;\r\n              treenode.data.parentItem = event.data.parentItem;\r\n              treenode.data.propertyDataType = event.data.propertyDataType;\r\n            } break;\r\n          case FieldType.Operation:\r\n            {\r\n              treenode.data.operator = event.data.id;\r\n              this.defaultOperatorText = event.data.id;\r\n            } break;\r\n          case FieldType.Valuetype:\r\n            {\r\n              treenode.data.expressType = event.data.id;\r\n              this.defaultExpressTypeText = event.data.id;\r\n            } break;\r\n        }\r\n        return;\r\n      }\r\n      //Ã¥ÂÂ¦Ã¥ÂÂÃ¥Â¯Â¹Ã¥ÂÂ¶Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¨ÂµÂÃ¥ÂÂ¼Ã¦ÂÂÃ¤Â½Â\r\n      else if ((treenode.children) && treenode.children.length != 0) {\r\n        this.propertyNodeOperate(event, treenode.children, fieldType);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Ã¦Â Â¹Ã¦ÂÂ®Ã¦ÂÂÃ©ÂÂÃ¤Â¸ÂºÃ¥ÂÂ³Ã§Â³Â»Ã¦ÂÂÃ¨ÂÂÃ¥Â±ÂÃ¦ÂÂ§Ã¥Â¯Â¹Ã¦ÂÂ°Ã¨ÂÂÃ§ÂÂ¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¥ÂÂÃ¥Â§ÂÃ¥ÂÂ\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   * @param defaultString Ã¦ÂÂ°Ã¨ÂÂÃ§ÂÂ¹Ã¦ÂÂ¾Ã§Â¤ÂºÃ©Â»ÂÃ¨Â®Â¤Ã¥ÂÂ¼\r\n   */\r\n  addNode(treeNodes: TreeNode[], defaultString: any, defaultOperator: string, defalutExpressType: string) {\r\n    treeNodes.forEach(treeNode => {\r\n      if (this.tt.isSelected(treeNode)) {\r\n        //Ã¨ÂÂ¥Ã¥ÂÂ³Ã§Â³Â»Ã¥ÂÂ¼Ã¤Â¸ÂºÃ§Â©Âº\r\n        if (!(treeNode.data.item)) {\r\n          this.notifyservice[this.notifies['2'].type]({\r\n            msg: this.notifies['2'].msg\r\n          });\r\n          return;\r\n        }\r\n        //Ã¨ÂÂ¥Ã¤Â¸ÂºÃ¦ÂÂÃ©ÂÂÃ§ÂÂÃ¥ÂÂ³Ã§Â³Â»Ã¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¥ÂÂÃ¥ÂÂ¨Ã¥ÂÂ¶Ã¥Â­ÂÃ©Â¡Â¹Ã©ÂÂÃ¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ°Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹\r\n        let newNode: TreeNode =\r\n        {\r\n          data:\r\n          {\r\n            \"item\": defaultString,\r\n            \"propertyDataType\": null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n            \"operator\": defaultOperator,\r\n            \"expressType\": defalutExpressType,\r\n            \"value\": null,\r\n            \"id\": Math.random(),\r\n            \"parentItem\": null\r\n          },\r\n          parent: treeNode,\r\n          children: [],\r\n          expanded: true\r\n        };\r\n        //Ã¥ÂÂÃ¨Â¯Â¥Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂÃ¥Â­ÂÃ©Â¡Â¹Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ°Ã¨ÂÂÃ§ÂÂ¹\r\n        treeNode.children.push(newNode);\r\n        return;\r\n      }\r\n      //Ã¨ÂÂ¥Ã¦ÂÂªÃ¦ÂÂ¾Ã¥ÂÂ°Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¯Â¼ÂÃ¤Â¸ÂÃ¨Â¯Â¥Ã¨ÂÂÃ§ÂÂ¹Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂÃ¤Â¸ÂºÃ§Â©ÂºÃ¯Â¼ÂÃ¥ÂÂÃ¥ÂÂ¨Ã¥ÂÂ¶Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸Â­Ã¦ÂÂ¥Ã¦ÂÂ¾Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        this.addNode(treeNode.children, defaultString, defaultOperator, defalutExpressType);\r\n      }\r\n    });\r\n    this.tt.updateSerializedValue();\r\n  }\r\n  /**\r\n   * Ã¥ÂÂ Ã©ÂÂ¤Ã¨ÂÂÃ§ÂÂ¹\r\n   * @param treeNode Ã¨Â¦ÂÃ¥ÂÂ Ã©ÂÂ¤Ã§ÂÂÃ¨ÂÂÃ§ÂÂ¹\r\n   */\r\n  deleteNode($event) {\r\n    this.onDelete(this.treeData, $event);\r\n  }\r\n  /**\r\n  * Ã©ÂÂÃ§Â½Â®(Ã¥Â¤ÂÃ©ÂÂ¨Ã¨Â°ÂÃ§ÂÂ¨)\r\n  * Ã©ÂÂÃ§Â½Â®Ã¤Â¸ÂºÃ¥ÂÂÃ¥Â§ÂÃ§ÂÂ¶Ã¦ÂÂ\r\n  */\r\n  onCancel() {\r\n    if (this.filterExpressionString == null || this.filterExpressionString == \"\") {\r\n      this.treeData = [\r\n        {\r\n          data:\r\n          {\r\n            \"id\": 1,                    //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n            \"item\": this.localePipe.transform('And'),               //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n            \"propertyDataType\": null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n            \"operator\": null,           //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n            \"expressType\": null,        //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n            \"value\": null,              //Ã¥ÂÂ¼\r\n            \"displaySelect\": false,      //Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayOperator\": false,   //Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayExpressType\": false,//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n            \"displayValue\": false,      //Ã¥ÂÂ¼Ã¦ÂÂ¾Ã§Â¤Âº\r\n            \"parentItem\": null           //Ã§ÂÂ¶Ã©Â¡Â¹\r\n          },\r\n          children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n          expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n        }\r\n      ];\r\n    }\r\n    else {\r\n      this.filterExpressionPre = JSON.parse(this.filterExpressionString);\r\n      this.treeData = [];\r\n      this.treeData.push(this.unConvert(this.filterExpressionPre));\r\n      this.treeData[0].data.id = 1;\r\n    }\r\n  }\r\n  /**\r\n   * Ã¥ÂÂ Ã©ÂÂ¤Ã¨ÂÂÃ§ÂÂ¹Ã¥ÂÂ·Ã¤Â½ÂÃ¥Â®ÂÃ§ÂÂ°Ã§Â±Â»\r\n   * @param treeNodes Ã¦Â ÂÃ¥Â½Â¢Ã¨Â¡Â¨Ã§Â»ÂÃ¥Â®ÂÃ§Â»ÂÃ¦ÂÂ\r\n   */\r\n  onDelete(treeNodes: TreeNode[], id: number) {\r\n    treeNodes.forEach(treeNode => {\r\n      if (treeNode.data.id == id) {\r\n        if (treeNode.data.id == 1) {\r\n          this.treeData = [\r\n            {\r\n              data:\r\n              {\r\n                \"id\": 1,                    //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n                \"item\": this.localePipe.transform('And'),              //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n                \"propertyDataType\": null,   //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n                \"operator\": null,           //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n                \"expressType\": null,        //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n                \"value\": null,              //Ã¥ÂÂ¼\r\n                \"displaySelect\": false,      //Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n                \"displayOperator\": false,   //Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n                \"displayExpressType\": false,//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n                \"displayValue\": false,      //Ã¥ÂÂ¼Ã¦ÂÂ¾Ã§Â¤Âº\r\n                \"parentItem\": null           //Ã§ÂÂ¶Ã©Â¡Â¹\r\n              },\r\n              children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n              expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n            }\r\n          ];\r\n          return;\r\n        }\r\n        //Ã¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¦ÂÂÃ¥ÂÂ¨Ã¦ÂÂ°\r\n        let index = treeNodes.indexOf(treeNode);\r\n        //Ã¥Â°ÂÃ¦ÂÂÃ©ÂÂÃ¨ÂÂÃ§ÂÂ¹Ã¥ÂÂÃ©ÂÂ¤\r\n        treeNodes.splice(index, 1);\r\n      }\r\n      else if ((treeNode.children) && treeNode.children.length != 0) {\r\n        treeNode.children = this.onDelete(treeNode.children, id);\r\n      }\r\n    });\r\n    this.tt.updateSerializedValue();\r\n    return treeNodes;\r\n  }\r\n  /***\r\n  * Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ¡Ã¤Â»Â¶Ã©Â¡Â¹\r\n  */\r\n  addItem() {\r\n    this.defaultSelectItem = this.localePipe.transform(\"SelectItem\");\r\n    this.hideNodeEditor(this.treeData);\r\n    this.addNode(this.treeData, this.localePipe.transform(\"SelectProperty\"), this.localePipe.transform(\"Equal\"), this.localePipe.transform(\"Value\"));\r\n  }\r\n  /***\r\n   * Ã¦Â·Â»Ã¥ÂÂ Ã¦ÂÂ¡Ã¤Â»Â¶Ã§Â»Â\r\n   */\r\n  addGroup() {\r\n    this.addNode(this.treeData, this.localePipe.transform('And'), null, null);\r\n  }\r\n  /**\r\n   * Ã¥Â°ÂtreeDataÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºfiletrExpressionÃ¥Â®ÂÃ¤Â½Â\r\n   * @param filterExpression Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â®ÂÃ¤Â½Â\r\n   * @param treeNode Ã¦ÂÂÃ¥Â¤ÂÃ¥Â±ÂÃ§ÂÂtreeNode\r\n   */\r\n  convert(filterExpression: FilterExpression, treeNode: TreeNode): FilterExpression {\r\n    //Ã¥Â¾ÂÃ¥ÂÂ°Ã¦ÂÂÃ¥Â¤ÂÃ¥Â±ÂÃ§ÂÂÃ¥ÂÂ³Ã§Â³Â»Ã§Â¬Â¦\r\n    filterExpression.relationOperator = this.typeMatch(treeNode.data.item);\r\n    //Ã¨ÂÂ¥Ã¥ÂÂ¶Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂÃ¤Â¸ÂºÃ§Â©Âº\r\n    if (treeNode.children.length != 0) {\r\n      //Ã¥Â¯Â¹Ã¥ÂÂ¶Ã¦Â¯ÂÃ¤Â¸ÂÃ¤Â¸ÂªÃ¥Â­ÂÃ©Â¡Â¹Ã¨Â¿ÂÃ¨Â¡ÂÃ¨Â½Â¬Ã¥ÂÂÃ¦ÂÂÃ¤Â½Â\r\n      treeNode.children.forEach(treeNodeItem => {\r\n        //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºÃ¥Â¹Â¶Ã¤Â¸ÂÃ£ÂÂÃ¦ÂÂÃ¨ÂÂÃ¯Â¼ÂÃ¥ÂÂÃ¦ÂÂ°Ã¥Â»ÂºÃ¥Â¤ÂÃ¦ÂÂÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n        if (this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.And ||\r\n          this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.Or) {\r\n          let filterExpressionItem = new FilterExpression();\r\n          filterExpression.expressItems.push(this.convert(filterExpressionItem, treeNodeItem));\r\n        }\r\n        //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºÃ¥Â±ÂÃ¦ÂÂ§Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼Â\r\n        else {\r\n          let filterItem = new ExpressionItem();\r\n          let properties = this.propertyListInner.filter(x => x.text == treeNodeItem.data.item);\r\n          filterItem.propertyName = properties[0].value;\r\n          filterItem.propertyDataType = treeNodeItem.data.propertyDataType;\r\n          filterItem.operator = this.typeMatch(treeNodeItem.data.operator);\r\n          filterItem.expressType = this.typeMatch(treeNodeItem.data.expressType);\r\n          filterItem.value = treeNodeItem.data.value;\r\n          filterItem.parentItem = treeNodeItem.data.parentItem;\r\n          //Ã¨ÂÂ¥Ã¤Â¸ÂºÃ¦ÂÂ°Ã¥ÂÂ¼Ã¥ÂÂÃ¦Â¯ÂÃ¨Â¾ÂÃ¯Â¼ÂÃ¥ÂÂÃ¥Â°ÂvalueÃ¥ÂÂ¼Ã¥Â¼ÂºÃ¥ÂÂ¶Ã¨Â½Â¬Ã¦ÂÂ¢Ã¤Â¸ÂºÃ¦ÂÂ°Ã¥Â­Â\r\n          if (filterItem.expressType == ExpressTypeEnum.Value &&\r\n            (filterItem.operator == CompareTypeEnum.GreaterThan\r\n              || filterItem.operator == CompareTypeEnum.GreaterThanOrEqual\r\n              || filterItem.operator == CompareTypeEnum.LessThan\r\n              || filterItem.operator == CompareTypeEnum.LessThanOrEqual\r\n            )) {\r\n            filterItem.value = Number(treeNodeItem.data.value);\r\n          }\r\n          if (filterItem.expressType == ExpressTypeEnum.Value &&\r\n            (filterItem.operator == CompareTypeEnum.Equal\r\n              || filterItem.operator == CompareTypeEnum.NotEqual)) {\r\n            if (filterItem.propertyDataType == PropertyDataType.Decimal\r\n              || filterItem.propertyDataType == PropertyDataType.Double\r\n              || filterItem.propertyDataType == PropertyDataType.Int16\r\n              || filterItem.propertyDataType == PropertyDataType.Int32\r\n              || filterItem.propertyDataType == PropertyDataType.Int64) {\r\n              filterItem.value = Number(treeNodeItem.data.value);\r\n            }\r\n          }\r\n\r\n          //Ã¥Â°ÂÃ¥Â­ÂÃ©Â¡Â¹Ã¦ÂÂ¾Ã¥ÂÂ¥Ã§ÂÂ¶Ã©Â¡Â¹Ã§ÂÂÃ¥Â­ÂÃ¦Â®ÂµÃ¤Â¸Â­\r\n          filterExpression.expressItems.push(filterItem);\r\n        }\r\n      });\r\n    }\r\n    return filterExpression;\r\n  }\r\n  /**\r\n  * filetrExpressionÃ¥ÂÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºTreeNode\r\n  * @param filterExpress Ã¥Â¾ÂÃ¨Â½Â¬Ã¥ÂÂÃ§ÂÂfiletrExpressionÃ¥Â®ÂÃ¤Â½Â\r\n  */\r\n  unConvert(filterExpress: FilterExpression): TreeNode {\r\n    let treeData: TreeNode =\r\n    {\r\n      data:\r\n      {\r\n        \"id\": Math.random(),        //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n        \"item\": this.relationTypeReverseMatch(filterExpress.relationOperator), //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n        \"propertyDataType\": null,    //Ã¥Â±ÂÃ¦ÂÂ§Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â±Â»Ã¥ÂÂ\r\n        \"operator\": null,           //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n        \"expressType\": null,        //Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n        \"value\": null,              //Ã¥ÂÂ¼\r\n        \"displaySelect\": false,      //Ã©ÂÂÃ¦ÂÂ©Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n        \"displayOperator\": false,   //Ã¦ÂÂÃ¤Â½ÂÃ§Â¬Â¦Ã©Â¡Â¹Ã¦ÂÂ¾Ã§Â¤Âº\r\n        \"displayExpressType\": false,//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂÃ¦ÂÂ¾Ã§Â¤Âº\r\n        \"displayValue\": false,      //Ã¥ÂÂ¼Ã¦ÂÂ¾Ã§Â¤Âº\r\n        \"parentItem\": null           //Ã§ÂÂ¶Ã©Â¡Â¹\r\n      },\r\n      children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n      expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n    };\r\n    //Ã¥Â¯Â¹Ã¤ÂºÂÃ¦Â¯ÂÃ¤Â¸ÂÃ¤Â¸ÂªÃ¥Â­ÂÃ©Â¡Â¹\r\n    filterExpress.expressItems.forEach(expressItem => {\r\n      let filterExpressItem = expressItem as FilterExpression;\r\n      //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºFilterExpressionÃ§Â±Â»Ã¥ÂÂÃ¯Â¼ÂÃ¨ÂµÂÃ¥ÂÂ¼\r\n      if ((filterExpressItem.relationOperator == RelationTypeEnum.And || filterExpressItem.relationOperator == RelationTypeEnum.Or)) {\r\n        let treeDataChild = this.unConvert(filterExpressItem);\r\n        treeDataChild.data.parent = treeData;//Ã¦Â·Â»Ã¥ÂÂ Ã§ÂÂ¶Ã¨ÂÂÃ§ÂÂ¹\r\n        treeData.children.push(treeDataChild);\r\n      }\r\n      else //Ã¨ÂÂ¥Ã¥Â­ÂÃ©Â¡Â¹Ã¤Â¸ÂºExpressionItemÃ§Â±Â»Ã¥ÂÂÃ¯Â¼ÂÃ¨ÂµÂÃ¥ÂÂ¼\r\n      {\r\n        let expressionItem = expressItem as ExpressionItem;\r\n        let properties = this.propertyListInner.filter(x => x.value == expressionItem.propertyName);\r\n        let treeDataChild: TreeNode =\r\n        {\r\n          data:\r\n          {\r\n            \"id\": Math.random(),                      //Ã¦Â ÂÃ¥Â½Â¢Ã§Â»ÂÃ¦ÂÂÃ¤Â¸Â­Ã¦Â¯ÂÃ¤Â¸ÂªÃ¨ÂÂÃ§ÂÂ¹Ã§ÂÂid\r\n            \"item\": properties[0].text,               //Ã¥Â±ÂÃ¦ÂÂ§Ã©Â¡Â¹\r\n            \"propertyDataType\": expressionItem.propertyDataType,\r\n            \"operator\": this.operatorReverseMatch(expressionItem.operator),      //Ã¦ÂÂÃ¤Â½ÂÃ¦Â¯ÂÃ¨Â¾ÂÃ§Â¬Â¦\r\n            \"expressType\": this.expressTypeReverseMatch(expressionItem.expressType),//Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ§Â±Â»Ã¥ÂÂ\r\n            \"value\": expressionItem.value,            //Ã¥ÂÂ¼\r\n            \"parentItem\": expressionItem.parentItem    //Ã§ÂÂ¶Ã©Â¡Â¹\r\n          },\r\n          parent: treeData,             //Ã¦Â·Â»Ã¥ÂÂ Ã§ÂÂ¶Ã¨ÂÂÃ§ÂÂ¹\r\n          children: [],                 //Ã¥Â­ÂÃ¨ÂÂÃ§ÂÂ¹Ã©ÂÂÃ¥ÂÂ\r\n          expanded: true                //Ã¦ÂÂ¯Ã¥ÂÂ¦Ã¥Â±ÂÃ¥Â¼Â\r\n        }\r\n        treeData.children.push(treeDataChild);\r\n      }\r\n    });\r\n    return treeData;\r\n  }\r\n  /**\r\n   * Ã§Â±Â»Ã¥ÂÂÃ¤Â¿Â¡Ã¦ÂÂ¯Ã¥ÂÂ¹Ã©ÂÂ\r\n   * @param type Ã§Â±Â»Ã¥ÂÂ\r\n   */\r\n  typeMatch(type: any): any {\r\n    switch (type) {\r\n      case this.localePipe.transform(\"And\"): return RelationTypeEnum.And;\r\n      case this.localePipe.transform(\"Or\"): return RelationTypeEnum.Or;\r\n      case this.localePipe.transform(\"GreaterThan\"): return CompareTypeEnum.GreaterThan;\r\n      case this.localePipe.transform(\"GreaterThanOrEqual\"): return CompareTypeEnum.GreaterThanOrEqual;\r\n      case this.localePipe.transform(\"LessThan\"): return CompareTypeEnum.LessThan;\r\n      case this.localePipe.transform(\"LessThanOrEqual\"): return CompareTypeEnum.LessThanOrEqual;\r\n      case this.localePipe.transform(\"Equal\"): return CompareTypeEnum.Equal;\r\n      case this.localePipe.transform(\"NotEqual\"): return CompareTypeEnum.NotEqual;\r\n      case this.localePipe.transform(\"Contains\"): return CompareTypeEnum.Contains;\r\n      case this.localePipe.transform(\"NotContains\"): return CompareTypeEnum.NotContains;\r\n      case this.localePipe.transform(\"StartsWith\"): return CompareTypeEnum.StartsWith;\r\n      case this.localePipe.transform(\"EndsWith\"): return CompareTypeEnum.EndsWith;\r\n      case this.localePipe.transform(\"NotStartsWith\"): return CompareTypeEnum.NotStartsWith;\r\n      case this.localePipe.transform(\"NotEndsWith\"): return CompareTypeEnum.NotEndsWith;\r\n      case this.localePipe.transform(\"IsNull\"): return CompareTypeEnum.IsNull;\r\n      case this.localePipe.transform(\"IsNotNull\"): return CompareTypeEnum.IsNotNull;\r\n      case this.localePipe.transform(\"In\"): return CompareTypeEnum.In;\r\n      case this.localePipe.transform(\"NotIn\"): return CompareTypeEnum.NotIn;\r\n      case this.localePipe.transform(\"Value\"): return ExpressTypeEnum.Value;\r\n      case this.localePipe.transform(\"Expression\"): return ExpressTypeEnum.Expression;\r\n    }\r\n  }\r\n  relationTypeReverseMatch(type: RelationTypeEnum): string {\r\n    switch (type) {\r\n      case RelationTypeEnum.And: return this.localePipe.transform('And');\r\n      case RelationTypeEnum.Or: return this.localePipe.transform('Or');\r\n    }\r\n  }\r\n  operatorReverseMatch(type: CompareTypeEnum): string {\r\n    switch (type) {\r\n      case CompareTypeEnum.GreaterThan: return this.localePipe.transform(\"GreaterThan\");\r\n      case CompareTypeEnum.GreaterThanOrEqual: return this.localePipe.transform(\"GreaterThanOrEqual\");\r\n      case CompareTypeEnum.LessThan: return this.localePipe.transform(\"LessThan\");\r\n      case CompareTypeEnum.LessThanOrEqual: return this.localePipe.transform(\"LessThanOrEqual\");\r\n      case CompareTypeEnum.Equal: return this.localePipe.transform(\"Equal\");\r\n      case CompareTypeEnum.NotEqual: return this.localePipe.transform(\"NotEqual\");\r\n      case CompareTypeEnum.Contains: return this.localePipe.transform(\"Contains\");\r\n      case CompareTypeEnum.NotContains: return this.localePipe.transform(\"NotContains\");\r\n      case CompareTypeEnum.StartsWith: return this.localePipe.transform(\"StartsWith\");\r\n      case CompareTypeEnum.EndsWith: return this.localePipe.transform(\"EndsWith\");\r\n      case CompareTypeEnum.NotStartsWith: return this.localePipe.transform(\"NotStartsWith\");\r\n      case CompareTypeEnum.NotEndsWith: return this.localePipe.transform(\"NotEndsWith\");\r\n      case CompareTypeEnum.IsNull: return this.localePipe.transform(\"IsNull\");\r\n      case CompareTypeEnum.IsNotNull: return this.localePipe.transform(\"IsNotNull\");\r\n      case CompareTypeEnum.In: return this.localePipe.transform(\"In\");\r\n      case CompareTypeEnum.NotIn: return this.localePipe.transform(\"NotIn\");\r\n    }\r\n  }\r\n  expressTypeReverseMatch(type: ExpressTypeEnum): string {\r\n    switch (type) {\r\n      case ExpressTypeEnum.Value: return this.localePipe.transform(\"Value\");\r\n      case ExpressTypeEnum.Expression: return this.localePipe.transform('Expression');\r\n    }\r\n  }\r\n  /**\r\n   * Ã¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¨ÂÂ·Ã¥ÂÂ(Ã¥Â¤ÂÃ©ÂÂ¨Ã¨Â°ÂÃ§ÂÂ¨)\r\n   */\r\n  getFilterExpression(): string {\r\n    this.treeDataTemp = this.treeData;\r\n    let isNull = true;\r\n    let isMatch = true;\r\n    if (this.checkNull(this.treeDataTemp[0].children, isNull) && this.checkMatch(this.treeDataTemp[0].children, isMatch)) {\r\n      this.filterExpression = new FilterExpression();\r\n      //Ã¦Â Â¹Ã¦ÂÂ®Ã¦Â ÂÃ¥Â½Â¢Ã¦ÂÂ°Ã¦ÂÂ®Ã§Â»ÂÃ¦ÂÂÃ¨Â½Â¬Ã¥ÂÂÃ¤Â¸ÂºÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¥Â®ÂÃ¤Â½Â\r\n      this.convert(this.filterExpression, this.treeDataTemp[0]);\r\n      //Ã¨ÂÂ¥Ã¥ÂÂªÃ¥ÂÂÃ¥ÂÂ«Ã¥ÂÂ³Ã§Â³Â»Ã©Â¡Â¹Ã¥ÂÂÃ¨Â¿ÂÃ¥ÂÂÃ§Â©Âº\r\n      if (this.filterExpression.expressItems.length == 0) return null;\r\n      else {\r\n        if (this.filterExpression.relationOperator == null) {\r\n          this.filterExpression.relationOperator = RelationTypeEnum.Or;\r\n        }\r\n        return JSON.stringify(this.filterExpression);\r\n      }\r\n    }\r\n  }\r\n  //Ã©ÂÂÃ¥Â½ÂÃ¦Â£ÂÃ¦ÂÂ¥Ã¦ÂÂ´Ã¤Â¸ÂªÃ¨Â¿ÂÃ¦Â»Â¤Ã¨Â¡Â¨Ã¨Â¾Â¾Ã¥Â¼ÂÃ¦ÂÂ¯Ã¥ÂÂ¦Ã¦ÂÂÃ¦Â¼ÂÃ¥Â¡Â«Ã§ÂÂÃ©Â¡Â¹\r\n  public checkNull(treeNodes: TreeNode[], isNull: boolean): boolean {\r\n    for (var i = 0; i < treeNodes.length; i++) {\r\n      if (treeNodes[i].data.item == this.localePipe.transform('And') || treeNodes[i].data.item == this.localePipe.transform('Or')) {\r\n        if (!(treeNodes[i].children) || treeNodes[i].children.length == 0) {\r\n          this.checkFilterStruc = false;\r\n          this.notifyservice[this.notifies['3'].type]({\r\n            msg: this.notifies['3'].msg\r\n          });\r\n          isNull = false;\r\n          break;\r\n        }\r\n        else if (!this.checkNull(treeNodes[i].children, isNull)) {\r\n          isNull = false;\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        if (!(treeNodes[i].data.item) || treeNodes[i].data.item == this.localePipe.transform(\"SelectProperty\")\r\n          || !(treeNodes[i].data.operator) || !(treeNodes[i].data.expressType)\r\n          || !(treeNodes[i].data.value)) {\r\n          this.notifyservice[this.notifies['4'].type]({\r\n            msg: this.notifies['4'].msg\r\n          });\r\n          this.checkFilterStruc = false;\r\n          isNull = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return isNull;\r\n  }\r\n  onfocus() {\r\n    this.displayPopup = true;\r\n  }\r\n  onblur() {\r\n    this.displayPopup = false;\r\n  }\r\n  checkMatch(treeNodes: TreeNode[], isMatch: boolean) {\r\n    for (var i = 0; i < treeNodes.length; i++) {\r\n      if (treeNodes[i].data.item != this.localePipe.transform('And') && treeNodes[i].data.item != this.localePipe.transform('Or')) {\r\n        if (treeNodes[i].data.expressType == this.localePipe.transform(\"Value\")) {\r\n          if ((treeNodes[i].data.propertyDataType == PropertyDataType.Int16 || treeNodes[i].data.propertyDataType == PropertyDataType.Int32 || treeNodes[i].data.propertyDataType == PropertyDataType.Int64) && isNaN(treeNodes[i].data.value)) {\r\n            this.notifyservice[this.notifies['5'].type]({\r\n              msg: this.notifies['5'].msg\r\n            });\r\n            isMatch = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      else isMatch = this.checkMatch(treeNodes[i].children, isMatch);\r\n    }\r\n    return isMatch;\r\n  }\r\n}\r\n\r\n","import { LOCALE_ID,NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FilterConditionComponent } from './filter-condition/filter-condition.component';\r\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns'\r\nimport { TreeTableModule} from  '@farris/ui-treetable';\r\nimport { ButtonModule } from '@progress/kendo-angular-buttons';\r\nimport { DropDownButtonModule } from '@progress/kendo-angular-buttons';\r\nimport { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { PopupModule } from '@progress/kendo-angular-popup';\r\nimport { FilterExpressionComponent } from './filter-expression/filter-expression.component';\r\nimport {ExpressionModule} from '@gsp-svc/expression';\r\nimport { ModalModule, BsModalService} from '@farris/ui-modal';\r\nimport { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { FilterConditionLocalePipe } from './filter-condition-locale.pipe';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DropDownsModule,\r\n    ButtonModule,\r\n    DropDownButtonModule,\r\n    InputsModule,\r\n    FormsModule,\r\n    PopupModule,\r\n    ComboListModule,\r\n    ExpressionModule,\r\n    TreeTableModule,\r\n    InputGroupModule,\r\n    NotifyModule,\r\n    FDropdownDirectiveTypeModule,\r\n    ModalModule.forRoot(),\r\n  ],\r\n  declarations: [FilterConditionComponent, FilterExpressionComponent, FilterConditionLocalePipe],\r\n  entryComponents:[FilterConditionComponent,FilterExpressionComponent],\r\n  exports: [FilterConditionComponent,FilterExpressionComponent],\r\n  providers:[\r\n    BsModalService,\r\n    { provide: LOCALE_ID, useValue: localStorage.getItem('languageCode') || 'zh-CHS' }\r\n  ]\r\n})\r\nexport class FilterConditionModule { }\r\n"]}