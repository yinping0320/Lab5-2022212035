import { Injector, ApplicationRef, ComponentFactoryResolver } from "@angular/core";
import { GspCommonDataType } from "@gsp-bef/gsp-cm-metadata";
import { GSPCommonObject } from "@gsp-bef/gsp-cm-metadata";
import { VarEntity } from "@gsp-svc/expression";
import { Schema } from "@gsp-svc/expression";
import { InjectedEntity } from "@gsp-svc/expression";
import { InjectedType } from '@gsp-svc/expression';
import { FilterInjectedEntity, FilterInjectedType } from "./injected-entity";
import { FilterEntitySchema } from "./schema";
import { PropertyDataType } from "./property-entity";
import { Adapter } from "./adapter";
import { FilterConditionLocalePipe } from './filter-condition-locale.pipe';
import { NewSchema } from "./NewSchema";
import { HttpClient } from "@angular/common/http";
/**
 * 过滤表达式服务类
 * @author linchang 2018/12/10
 */
export declare class FilterService {
    private injector;
    private applicationRef;
    private compFactRes;
    private http;
    i: number;
    adapter: Adapter;
    propertyList: Array<{
        text: string;
        propertyDataType: PropertyDataType;
        value: string;
        parentItem: string;
    }>;
    contextEntity: VarEntity[];
    expressionText: string;
    expressionSchema: {
        name: string;
        schema: Schema;
    }[];
    expressionInjectedEntities: InjectedEntity[];
    expressionCDT: GspCommonDataType[];
    filterExpressionString: string;
    schemaMap: Map<string, FilterEntitySchema>;
    newSchemaMap: Map<string, NewSchema>;
    injectedEntity: FilterInjectedEntity;
    exprWinWidth: number;
    localePipe: FilterConditionLocalePipe;
    localeId: string;
    private modalService;
    simpleModalConfig: any;
    constructor(injector: Injector, applicationRef: ApplicationRef, compFactRes: ComponentFactoryResolver, http: HttpClient);
    buildExpression(): Promise<{}>;
    /**
     *  预置属性列表
     * @param name 属性语义
     * @param displayName 展示名称
     * @param propertyDataType 属性数据类型
     */
    addProperty(name: string, displayName: string, propertyDataType: PropertyDataType): void;
    /**
     * 添加上下文变量
     * @param contextEntity 上下文变量
     */
    addExpressionContext(contextEntity: VarEntity): void;
    /**
     * 预置表达式默认显示
     * @param text 预置文本
     */
    addExpressionText(text: string): void;
    /**
     * 预置Schema
     * @param name schema名称
     * @param schema schema实体
     */
    addExpressionSchema(name: string, schema: Schema): void;
    /**
     * 预置注册实体
     * @param name 注册实体名
     * @param schemaName 所在schema的名
     * @param typeNameInSchema 在schema中名称
     * @param injectedType 注册的类型
     * @author linchang 2018/12/10
     */
    addExpressionInjectedEntity(name: string, schemaName: string, typeNameInSchema: string, injectedType: InjectedType): void;
    /**
     * 预置CDT
     * @param gspCDTs 预置的CDT集合
     */
    addExpressionCDT(gspCDTs: GspCommonDataType[]): void;
    /**
     * 预置过滤条件表达式
     * @param filterExpression 预置的过滤表达式串
     */
    addFilterCondition(filterExpression: string): void;
    /**
     * 预置schema
     * @param name schema名,默认为CO
     * @param filterSchema schema实体
     */
    addSchema(name: string, filterSchema: FilterEntitySchema): void;
    /**
     * 添加注入实体
     * @param name 注入实体在schema中的名称
     * @param schemaName 注入实体所在的schema名
     * @param injectedType 注入类型，不填默认为EntityType
     */
    addInjectedEntity(name: string, schemaName: string, injectedType?: FilterInjectedType): void;
    /**
     * 添加GSPCommonObject
     * @param commonObject 待转化CO
     */
    addCommonObject(commonObject: GSPCommonObject): void;
    /**
     * 设置计算表达式弹出框宽度
     * @param exprWinWidth
     */
    addExprWinWidth(exprWinWidth: number): void;
    /**
     * @description 向newSchemaMap中添加NewSchema
     * @param name Map中的key值
     * @param schema Map的value
     */
    addNewSchema(name: string, schema: NewSchema): void;
    /**
     * 添加注入实体
     * @param name 注入实体在schema中的名称
     * @param schemaName 注入实体所在的schema名
     * @param injectedType 注入类型，默认为EntityType
     */
    addInjectedEntityOfNewSchema(name: string, schemaName: string, injectedType?: FilterInjectedType): void;
}
