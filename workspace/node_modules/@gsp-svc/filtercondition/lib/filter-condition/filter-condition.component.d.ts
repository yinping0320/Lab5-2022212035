import { EventEmitter, OnInit } from '@angular/core';
import { TreeTableComponent, TreeNode } from '@farris/ui-treetable';
import { FilterExpression } from '../filter-expression-entity';
import { ExpressionService } from '@gsp-svc/expression';
import { VarEntity } from '@gsp-svc/expression';
import { Schema } from '@gsp-svc/expression';
import { GspCommonDataType } from '@gsp-bef/gsp-cm-metadata';
import { InjectedEntity } from '@gsp-svc/expression';
import { ExpressTypeEnum, RelationTypeEnum, CompareTypeEnum } from '../typeinfo';
import { PropertyDataType } from '../property-entity';
import { FieldType } from '../field-type';
import { FilterEntitySchema } from '../schema';
import { FilterInjectedEntity } from '../injected-entity';
import { NotifyService } from '@farris/ui-notify';
import { FilterConditionLocalePipe } from '../filter-condition-locale.pipe';
import { NewSchema } from '../NewSchema';
export declare class FilterConditionComponent implements OnInit {
    private expr;
    private notifyservice;
    localePipe: FilterConditionLocalePipe;
    constructor(expr: ExpressionService, notifyservice: NotifyService, localeId: string);
    treeDataTemp: TreeNode[];
    tt: TreeTableComponent;
    closed: EventEmitter<string>;
    result: EventEmitter<string>;
    contextEntity: VarEntity[];
    expressionText: string;
    expressionSchema: Array<{
        name: string;
        schema: Schema;
    }>;
    expressionInjectedEntities: InjectedEntity[];
    expressionCDT: GspCommonDataType[];
    propertyList: Array<{
        text: string;
        propertyDataType: PropertyDataType;
        value: string;
        parentItem: string;
    }>;
    filterExpressionString: string;
    schemaMap: Map<string, FilterEntitySchema>;
    newSchemaMap: Map<string, NewSchema>;
    injectedEntity: FilterInjectedEntity;
    exprWinWidth: number;
    popupSettings: {
        popupClass: string;
    };
    operatorView: any[];
    operators: any[];
    stringOperators: any[];
    NumberOperators: any[];
    relations: any[];
    expressTypes: any[];
    filterExpression: FilterExpression;
    nodeTemp: TreeNode[];
    defaultSelectGroup: string;
    defaultSelectItem: string;
    defaultOperatorText: string;
    defaultExpressTypeText: string;
    isEdited: boolean;
    filterExpressionPre: FilterExpression;
    displayPopup: boolean;
    cols: any[];
    groupIcon: string;
    treeData: TreeNode[];
    private notifies;
    private itemValue;
    ngOnInit(): void;
    /**
     * 树形表中节点选择触发函数
     * @param $event 所选节点信息
     */
    nodeSelected($event: any): void;
    /**
     * 隐藏掉所有的节点选择编辑框，包括子节点的
     * @param treeNodes 树形表绑定结构
     */
    hideNodeEditor(treeNodes: TreeNode[]): void;
    /***
     * 选择逻辑集时
     */
    selectGroup($event: any): void;
    /***
     * 选择项时
     */
    selectItem($event: any): void;
    /**
     * 选择比较操作符时
     * @param $event 比较操作项信息
     */
    selectOperator($event: any): void;
    /**
     * 选择值类型时
     * @param $event 值类型项信息
     */
    selectExpressType($event: any): void;
    /**
     * 选择结束后隐藏该字段选择框
     * @param treeNodes 树形表绑定结构
     * @param fieldType 所选字段
     */
    hideFieldEditor(treeNodes: TreeNode[], fieldType: FieldType): void;
    /**
     * 打开计算表达式编辑器
     */
    openExpressEditor(): void;
    /**
    * 选中节点选择
    * @param treeNodes 关系组
    */
    isSelected(treeNodes: TreeNode[]): any;
    /**
     * 将计算表达式结果展示到对应节点
     * @param treeNodes 树表绑定结构
     * @param expressInfo 计算表达式得到结果
     */
    displayExpressResult(treeNodes: TreeNode[], expressInfo: string): void;
    /**
     * 关系选择按钮选择事件
     * @param $event 选择按钮所选信息
     */
    itemClick($event: any): void;
    /**
     * 选择属性节点操作
     * 对新添加的属性节点进行逻辑处理
     * @param value
     * @param treeNodes 树形表绑定结构
     * @param fieldType 节点类型
     */
    propertyNodeOperate(event: any, treeNodes: TreeNode[], fieldType: FieldType): void;
    /**
     * 根据所选为关系或者属性对新节点进行初始化
     * @param treeNodes 树形表绑定结构
     * @param defaultString 新节点显示默认值
     */
    addNode(treeNodes: TreeNode[], defaultString: any, defaultOperator: string, defalutExpressType: string): void;
    /**
     * 删除节点
     * @param treeNode 要删除的节点
     */
    deleteNode($event: any): void;
    /**
     * 删除节点具体实现类
     * @param treeNodes 树形表绑定结构
     */
    onDelete(treeNodes: TreeNode[], id: number): TreeNode[];
    /**
     * 确定
     * 生成过滤表达式
     */
    onConfirm(): void;
    checkNull(treeNodes: TreeNode[], isNull: boolean): boolean;
    /**
     * 重置
     * 重置为初始状态
     */
    onCancel(): void;
    /**取消 */
    cancle(): void;
    /**
     * 关闭窗口
     */
    close(): void;
    /**
     * 将treeData转化为filetrExpression实体
     * @param filterExpression 过滤表达式实体
     * @param treeNode 最外层的treeNode
     */
    convert(filterExpression: FilterExpression, treeNode: TreeNode): FilterExpression;
    /**
     * filetrExpression反转化为TreeNode
     * @param filterExpress 待转化的filetrExpression实体
     */
    unConvert(filterExpress: FilterExpression): TreeNode;
    /***
     * 添加条件项
     */
    addItem(): void;
    /***
     * 添加条件组
     */
    addGroup(): void;
    /**
     * 类型信息匹配
     * @param type 类型
     */
    typeMatch(type: any): any;
    relationTypeReverseMatch(type: RelationTypeEnum): string;
    operatorReverseMatch(type: CompareTypeEnum): string;
    expressTypeReverseMatch(type: ExpressTypeEnum): string;
    onfocus(): void;
    onblur(): void;
    checkMatch(treeNodes: TreeNode[], isMatch: boolean): boolean;
}
