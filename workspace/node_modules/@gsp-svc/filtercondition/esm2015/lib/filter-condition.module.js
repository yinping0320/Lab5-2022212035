/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LOCALE_ID, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FilterConditionComponent } from './filter-condition/filter-condition.component';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { TreeTableModule } from '@farris/ui-treetable';
import { ButtonModule } from '@progress/kendo-angular-buttons';
import { DropDownButtonModule } from '@progress/kendo-angular-buttons';
import { InputsModule } from '@progress/kendo-angular-inputs';
import { FormsModule } from '@angular/forms';
import { PopupModule } from '@progress/kendo-angular-popup';
import { FilterExpressionComponent } from './filter-expression/filter-expression.component';
import { ExpressionModule } from '@gsp-svc/expression';
import { ModalModule, BsModalService } from '@farris/ui-modal';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { ComboListModule } from '@farris/ui-combo-list';
import { InputGroupModule } from '@farris/ui-input-group';
import { NotifyModule } from '@farris/ui-notify';
import { FilterConditionLocalePipe } from './filter-condition-locale.pipe';
const ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS';
export class FilterConditionModule {
}
FilterConditionModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    DropDownsModule,
                    ButtonModule,
                    DropDownButtonModule,
                    InputsModule,
                    FormsModule,
                    PopupModule,
                    ComboListModule,
                    ExpressionModule,
                    TreeTableModule,
                    InputGroupModule,
                    NotifyModule,
                    FDropdownDirectiveTypeModule,
                    ModalModule.forRoot(),
                ],
                declarations: [FilterConditionComponent, FilterExpressionComponent, FilterConditionLocalePipe],
                entryComponents: [FilterConditionComponent, FilterExpressionComponent],
                exports: [FilterConditionComponent, FilterExpressionComponent],
                providers: [
                    BsModalService,
                    { provide: LOCALE_ID, useValue: ɵ0 }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbmRpdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9maWx0ZXJjb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvZmlsdGVyLWNvbmRpdGlvbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUMsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUN6RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUNBQW1DLENBQUE7QUFDbkUsT0FBTyxFQUFFLGVBQWUsRUFBQyxNQUFPLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUM1RixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzlELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7V0F1QnZDLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksUUFBUTtBQUdwRixNQUFNLE9BQU8scUJBQXFCOzs7WUF6QmpDLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixlQUFlO29CQUNmLFlBQVk7b0JBQ1osb0JBQW9CO29CQUNwQixZQUFZO29CQUNaLFdBQVc7b0JBQ1gsV0FBVztvQkFDWCxlQUFlO29CQUNmLGdCQUFnQjtvQkFDaEIsZUFBZTtvQkFDZixnQkFBZ0I7b0JBQ2hCLFlBQVk7b0JBQ1osNEJBQTRCO29CQUM1QixXQUFXLENBQUMsT0FBTyxFQUFFO2lCQUN0QjtnQkFDRCxZQUFZLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSx5QkFBeUIsRUFBRSx5QkFBeUIsQ0FBQztnQkFDOUYsZUFBZSxFQUFDLENBQUMsd0JBQXdCLEVBQUMseUJBQXlCLENBQUM7Z0JBQ3BFLE9BQU8sRUFBRSxDQUFDLHdCQUF3QixFQUFDLHlCQUF5QixDQUFDO2dCQUM3RCxTQUFTLEVBQUM7b0JBQ1IsY0FBYztvQkFDZCxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxJQUFrRCxFQUFFO2lCQUNuRjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTE9DQUxFX0lELE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWNvbmRpdGlvbi9maWx0ZXItY29uZGl0aW9uLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERyb3BEb3duc01vZHVsZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWRyb3Bkb3ducydcclxuaW1wb3J0IHsgVHJlZVRhYmxlTW9kdWxlfSBmcm9tICAnQGZhcnJpcy91aS10cmVldGFibGUnO1xyXG5pbXBvcnQgeyBCdXR0b25Nb2R1bGUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1idXR0b25zJztcclxuaW1wb3J0IHsgRHJvcERvd25CdXR0b25Nb2R1bGUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1idXR0b25zJztcclxuaW1wb3J0IHsgSW5wdXRzTW9kdWxlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW5wdXRzJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFBvcHVwTW9kdWxlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItcG9wdXAnO1xyXG5pbXBvcnQgeyBGaWx0ZXJFeHByZXNzaW9uQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItZXhwcmVzc2lvbi9maWx0ZXItZXhwcmVzc2lvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQge0V4cHJlc3Npb25Nb2R1bGV9IGZyb20gJ0Bnc3Atc3ZjL2V4cHJlc3Npb24nO1xyXG5pbXBvcnQgeyBNb2RhbE1vZHVsZSwgQnNNb2RhbFNlcnZpY2V9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBGRHJvcGRvd25EaXJlY3RpdmVUeXBlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kcm9wZG93bic7XHJcbmltcG9ydCB7IENvbWJvTGlzdE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbGlzdCc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBGaWx0ZXJDb25kaXRpb25Mb2NhbGVQaXBlIH0gZnJvbSAnLi9maWx0ZXItY29uZGl0aW9uLWxvY2FsZS5waXBlJztcclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBEcm9wRG93bnNNb2R1bGUsXHJcbiAgICBCdXR0b25Nb2R1bGUsXHJcbiAgICBEcm9wRG93bkJ1dHRvbk1vZHVsZSxcclxuICAgIElucHV0c01vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgUG9wdXBNb2R1bGUsXHJcbiAgICBDb21ib0xpc3RNb2R1bGUsXHJcbiAgICBFeHByZXNzaW9uTW9kdWxlLFxyXG4gICAgVHJlZVRhYmxlTW9kdWxlLFxyXG4gICAgSW5wdXRHcm91cE1vZHVsZSxcclxuICAgIE5vdGlmeU1vZHVsZSxcclxuICAgIEZEcm9wZG93bkRpcmVjdGl2ZVR5cGVNb2R1bGUsXHJcbiAgICBNb2RhbE1vZHVsZS5mb3JSb290KCksXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtGaWx0ZXJDb25kaXRpb25Db21wb25lbnQsIEZpbHRlckV4cHJlc3Npb25Db21wb25lbnQsIEZpbHRlckNvbmRpdGlvbkxvY2FsZVBpcGVdLFxyXG4gIGVudHJ5Q29tcG9uZW50czpbRmlsdGVyQ29uZGl0aW9uQ29tcG9uZW50LEZpbHRlckV4cHJlc3Npb25Db21wb25lbnRdLFxyXG4gIGV4cG9ydHM6IFtGaWx0ZXJDb25kaXRpb25Db21wb25lbnQsRmlsdGVyRXhwcmVzc2lvbkNvbXBvbmVudF0sXHJcbiAgcHJvdmlkZXJzOltcclxuICAgIEJzTW9kYWxTZXJ2aWNlLFxyXG4gICAgeyBwcm92aWRlOiBMT0NBTEVfSUQsIHVzZVZhbHVlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2VDb2RlJykgfHwgJ3poLUNIUycgfVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbHRlckNvbmRpdGlvbk1vZHVsZSB7IH1cclxuIl19