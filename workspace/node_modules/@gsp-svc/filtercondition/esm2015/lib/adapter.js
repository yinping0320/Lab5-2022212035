/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FilterEntityType } from "./schema";
import { GSPElementDataType, GSPElementObjectType } from "@gsp-bef/gsp-cm-metadata";
import { PropertyEntity, PropertyDataType } from "./property-entity";
import { NavigationProperty, NavigationType } from "./navigation-property-entity";
import { NewDataType, NewEntityType, NewProperty, NewNavigationProperty, NewNavigationType } from "./NewSchema";
export class Adapter {
    /**
     * @param {?} commonObject
     * @return {?}
     */
    convertCO(commonObject) {
        /** @type {?} */
        let entityTypes = [];
        entityTypes.push(this.adaptCO(commonObject, entityTypes));
        return entityTypes;
    }
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    adaptCO(gspCO, entityTypes) {
        /** @type {?} */
        let entityType = new FilterEntityType();
        entityType.name = gspCO.Code;
        entityType.displayName = gspCO.Name;
        //每个属性转化
        if ((gspCO.ContainElements) && gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (!element.IsUdt && element.ObjectType != GSPElementObjectType.Association) {
                    /** @type {?} */
                    let property = new PropertyEntity();
                    property.name = element.Code;
                    property.displayName = element.Name;
                    property.propertyDataType = this.convertPropertyDataType(element.MDataType);
                    entityType.properties.push(property);
                }
            }));
        }
        ;
        //子表转化为导航属性
        if ((gspCO.ContainChildObjects) && gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            childObject => {
                /** @type {?} */
                let naviproperty = new NavigationProperty();
                naviproperty.displayName = childObject.Name;
                naviproperty.name = childObject.Code + "s";
                naviproperty.navigationEntity = childObject.Code;
                naviproperty.navigationType = NavigationType.EntityType;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(this.adaptCO(childObject, entityTypes));
            }));
        }
        ;
        return entityType;
    }
    /**
     * 属性数据类型转换
     * @private
     * @param {?} dataType
     * @return {?}
     */
    convertPropertyDataType(dataType) {
        switch (dataType) {
            case GSPElementDataType.String:
            case GSPElementDataType.Text:
                return PropertyDataType.String;
            case GSPElementDataType.Integer:
                return PropertyDataType.Int32;
            case GSPElementDataType.Decimal:
                return PropertyDataType.Decimal;
            case GSPElementDataType.DateTime:
            case GSPElementDataType.Date:
                return PropertyDataType.DateTime;
            case GSPElementDataType.Boolean:
                return PropertyDataType.Boolean;
            case GSPElementDataType.Binary:
                return PropertyDataType.Array;
            default: return null;
        }
    }
    //=====================================转换CO---->NewSchema===================================
    /**
     * \@description 将CO转化为NewEntityType[]
     * @param {?} co 待转换CO
     * @return {?} NewEntityType[] NewEntityType[]
     */
    convertCOOfNewSchema(co) {
        /** @type {?} */
        let types = [];
        types.push(this.adaptCOOfNewSchema(co, types));
        return types;
    }
    /**
     * \@description 将CO转化为NewEntityType[]
     * @param {?} co 待转换CO
     * @param {?} types 数组:EntityType[]
     * @return {?} NewEntityType[] NewEntityType[]
     */
    adaptCOOfNewSchema(co, types) {
        /** @type {?} */
        let type = new NewEntityType();
        type.code = co.Code;
        type.name = co.Name;
        //一般属性转化
        if (co.ContainElements && co.ContainElements.length > 0) {
            co.ContainElements.forEach((/**
             * @param {?} ele
             * @return {?}
             */
            ele => {
                if (!ele.IsUdt && ele.ObjectType != GSPElementObjectType.Association) {
                    /** @type {?} */
                    let pro = new NewProperty();
                    pro.code = ele.Code;
                    pro.name = ele.Name;
                    pro.dataType = this.convertCOEleTypeProType(ele.MDataType);
                    type.properties.push(pro);
                }
            }));
        }
        //导航属性转化
        if (co.ContainChildObjects && co.ContainChildObjects.length > 0) {
            co.ContainChildObjects.forEach((/**
             * @param {?} obj
             * @return {?}
             */
            obj => {
                /** @type {?} */
                let naPro = new NewNavigationProperty();
                naPro.code = obj.Code + "s";
                naPro.name = obj.Name;
                naPro.navigationName = obj.ID;
                naPro.navigationType = NewNavigationType.EntityType;
                naPro.relationShip = "";
                type.navigationProperties.push(naPro);
                types.push(this.adaptCOOfNewSchema((/** @type {?} */ (obj)), types));
            }));
        }
        return type;
    }
    /**
     * \@description 将BE定义的字段类型转换为统一Schema的字段类型
     * @param {?} dataType BE定义的属性类型
     * @return {?} NewDataType 统一Schema的属性类型
     */
    convertCOEleTypeProType(dataType) {
        /** @type {?} */
        let type = NewDataType.String;
        switch (dataType) {
            case GSPElementDataType.String:
            case GSPElementDataType.Text:
                type = NewDataType.String;
                break;
            case GSPElementDataType.Integer:
                type = NewDataType.Integer;
                break;
            case GSPElementDataType.Decimal:
                type = NewDataType.Decimal;
                break;
            case GSPElementDataType.DateTime:
                type = NewDataType.DateTime;
                break;
            case GSPElementDataType.Date:
                type = NewDataType.Date;
                break;
            case GSPElementDataType.Boolean:
                type = NewDataType.Boolean;
                break;
            case GSPElementDataType.Binary:
                type = NewDataType.Byte;
                break;
        }
        return type;
    }
}
//# sourceMappingURL=data:application/json;base64,