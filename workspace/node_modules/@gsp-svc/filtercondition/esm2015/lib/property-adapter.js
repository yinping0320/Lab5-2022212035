/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FilterInjectedType } from "./injected-entity";
import { NavigationType } from "./navigation-property-entity";
import { PropertyDataType } from ".";
import { NewDataType, NewNavigationType } from "./NewSchema";
export class PropertyAdapter {
    /**
     * 属性适配器，注入多级实体转化为Array
     * @param {?} injectedEntity 注入的实体
     * @param {?} schemaMap 注入的schema
     * @return {?}
     */
    adapter(injectedEntity, schemaMap) {
        //根据注入schema名得到schema
        /** @type {?} */
        let schema = schemaMap.get(injectedEntity.schemaName);
        //根据注入类型分别进行转化
        switch (injectedEntity.injectedType) {
            case FilterInjectedType.EntitySet:
                {
                    /** @type {?} */
                    let entitySet = schema.entitySets.find((/**
                     * @param {?} entitySet
                     * @return {?}
                     */
                    entitySet => entitySet.name == injectedEntity.name));
                    return this.convertEntitySet(entitySet, schema);
                }
            case FilterInjectedType.EntityType:
                {
                    /** @type {?} */
                    let entityType = schema.entityTypes.find((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    entityType => entityType.name == injectedEntity.name));
                    return this.convertEntityType(entityType, schema);
                }
            default: break;
        }
    }
    /**
     * 将实体类转化成Arrray
     * @param {?} entityType 被转换的实体类
     * @param {?} schema
     * @return {?}
     */
    convertEntityType(entityType, schema) {
        /** @type {?} */
        let propertyList = Array();
        //常规属性转化
        entityType.properties.forEach((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            /** @type {?} */
            let propertyListItem = {
                text: property.displayName,
                propertyDataType: property.propertyDataType,
                value: property.name,
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        //导航属性转化
        entityType.navigationProperties.forEach((/**
         * @param {?} navigationProperty
         * @return {?}
         */
        navigationProperty => {
            //根据导航属性类型进行转化
            switch (navigationProperty.navigationType) {
                //若导航属性为EntitySet
                case NavigationType.EntitySet:
                    {
                        //根据导航属性名找到schema中的EntitySet
                        /** @type {?} */
                        let entitySet = schema.entitySets.find((/**
                         * @param {?} entitySet
                         * @return {?}
                         */
                        entitySet => entitySet.name == navigationProperty.navigationEntity));
                        //子实体集转化为Array
                        this.convertEntitySet(entitySet, schema).forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        element => {
                            //若子实体中的每个属性父项不为空，则在父项名前添加该导航属性名，例如OrderItem前加Order为Orders.OrderItem
                            if (element.parentItem != null) {
                                element.parentItem = navigationProperty.name + "." + element.parentItem;
                            }
                            //若父项为空，则设置该属性父项为导航属性名
                            else {
                                element.parentItem = navigationProperty.name;
                            }
                            //设置该属性的显示名称
                            element.text = navigationProperty.displayName + "." + element.text;
                            propertyList.push(element);
                        }));
                    }
                    break;
                //若导航属性类型为EntityType
                case NavigationType.EntityType:
                    {
                        //根据导航属性名找到schema中的EntityType
                        /** @type {?} */
                        let entityType = schema.entityTypes.find((/**
                         * @param {?} entityType
                         * @return {?}
                         */
                        entityType => entityType.name == navigationProperty.navigationEntity));
                        //子实体转化为Array
                        this.convertEntityType(entityType, schema).forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        element => {
                            //若子实体中的每个属性父项不为空，则在父项名前添加该导航属性名，例如OrderItem前加Order为Order.OrderItem
                            if (element.parentItem != null) {
                                element.parentItem = navigationProperty.name + "." + element.parentItem;
                            }
                            //若父项为空，则设置该属性父项为导航属性名
                            else {
                                element.parentItem = navigationProperty.name;
                            }
                            //设置该属性的显示名称
                            element.text = navigationProperty.displayName + "." + element.text;
                            propertyList.push(element);
                        }));
                    }
                    break;
            }
        }));
        return propertyList;
    }
    /**
     * 实体集转化为属性列表
     * @param {?} entitySet 待转化实体集
     * @param {?} schema 所在schema
     * @return {?}
     */
    convertEntitySet(entitySet, schema) {
        /** @type {?} */
        let propertyList = Array();
        /** @type {?} */
        let entityType = schema.entityTypes.find((/**
         * @param {?} entityType
         * @return {?}
         */
        entityType => entityType.name == entitySet.entityTypeName));
        entityType.properties.forEach((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            /** @type {?} */
            let propertyListItem = {
                text: property.displayName,
                propertyDataType: property.propertyDataType,
                value: property.name,
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        if (entityType.navigationProperties.length != 0) {
            //导航属性转化
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            navigationProperty => {
                switch (navigationProperty.navigationType) {
                    case NavigationType.EntitySet:
                        {
                            /** @type {?} */
                            let entitySet = schema.entitySets.find((/**
                             * @param {?} entitySet
                             * @return {?}
                             */
                            entitySet => entitySet.name == navigationProperty.navigationEntity));
                            this.convertEntitySet(entitySet, schema).forEach((/**
                             * @param {?} element
                             * @return {?}
                             */
                            element => {
                                if (element.parentItem != null) {
                                    element.parentItem = navigationProperty.name + "." + element.parentItem;
                                }
                                else {
                                    element.parentItem = navigationProperty.name;
                                }
                                element.text = navigationProperty.displayName + "." + element.text;
                                propertyList.push(element);
                            }));
                        }
                        break;
                    case NavigationType.EntityType:
                        {
                            /** @type {?} */
                            let entityType = schema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            entityType => entityType.name == navigationProperty.navigationEntity));
                            this.convertEntityType(entityType, schema).forEach((/**
                             * @param {?} element
                             * @return {?}
                             */
                            element => {
                                if (element.parentItem != null) {
                                    element.parentItem = navigationProperty.name + "." + element.parentItem;
                                }
                                else {
                                    element.parentItem = navigationProperty.name;
                                }
                                element.text = navigationProperty.displayName + "." + element.text;
                                propertyList.push(element);
                            }));
                        }
                        break;
                }
            }));
        }
        return propertyList;
    }
    //==========================分割线（NewSchema）============================================
    /**
     *
     * @param {?} injectedEntity
     * @param {?} newSchemaMap
     * @return {?}
     */
    adapterOfNewSchema(injectedEntity, newSchemaMap) {
        //injectedEntity.schemaName找到Schema
        /** @type {?} */
        let schema = newSchemaMap.get(injectedEntity.schemaName);
        //injectedEntity.injectedType确定找sets还是types
        switch (injectedEntity.injectedType) {
            case FilterInjectedType.EntitySet: {
                /** @type {?} */
                let set = schema.entitySets.find((/**
                 * @param {?} set
                 * @return {?}
                 */
                set => set.code == injectedEntity.name));
                return this.convertNewEntitySet(set, schema);
            }
            case FilterInjectedType.EntityType: {
                /** @type {?} */
                let type = schema.entityTypes.find((/**
                 * @param {?} type
                 * @return {?}
                 */
                type => type.code == injectedEntity.name));
                return this.convertNewEntityType(type, schema);
            }
            default:
                break;
        }
    }
    /**
     * \@description 转换EntityType
     * @param {?} type NewEntityType
     * @param {?} schema NewSchema
     * @return {?}
     */
    convertNewEntityType(type, schema) {
        /** @type {?} */
        let propertyList = Array();
        //property转换
        type.properties.forEach((/**
         * @param {?} pro
         * @return {?}
         */
        pro => {
            /** @type {?} */
            let propertyListItem = {
                value: pro.code,
                text: pro.name,
                propertyDataType: this.convertNewDataType2PropertyDataType(pro.dataType),
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        //navigationProperty转换
        type.navigationProperties.forEach((/**
         * @param {?} naPro
         * @return {?}
         */
        naPro => {
            switch (naPro.navigationType) {
                case NewNavigationType.EntitySet:
                    {
                        /** @type {?} */
                        let naProSet = schema.entitySets.find((/**
                         * @param {?} naProSet
                         * @return {?}
                         */
                        naProSet => naProSet.code == naPro.navigationName));
                        this.convertNewEntitySet(naProSet, schema).forEach((/**
                         * @param {?} ele
                         * @return {?}
                         */
                        ele => {
                            if (ele.parentItem != null) {
                                ele.parentItem = naPro.code + "." + ele.parentItem;
                            }
                            else {
                                ele.parentItem = naPro.code;
                            }
                            ele.text = naPro.name + "." + ele.text;
                            propertyList.push(ele);
                        }));
                    }
                    break;
                case NewNavigationType.EntityType:
                    {
                        /** @type {?} */
                        let naProType = schema.entityTypes.find((/**
                         * @param {?} naProType
                         * @return {?}
                         */
                        naProType => naProType.code == naPro.navigationName));
                        this.convertNewEntityType(naProType, schema).forEach((/**
                         * @param {?} ele
                         * @return {?}
                         */
                        ele => {
                            if (ele.parentItem != null) {
                                ele.parentItem = naPro.code + "." + ele.parentItem;
                            }
                            else {
                                ele.parentItem = naPro.code;
                            }
                            ele.text = naPro.name + "." + ele.text;
                            propertyList.push(ele);
                        }));
                    }
                    break;
            }
        }));
        return propertyList;
    }
    /**
     * @param {?} set
     * @param {?} schema
     * @return {?}
     */
    convertNewEntitySet(set, schema) {
        /** @type {?} */
        let propertyList = Array();
        /** @type {?} */
        let type = schema.entityTypes.find((/**
         * @param {?} type
         * @return {?}
         */
        type => type.code == set.entityType));
        type.properties.forEach((/**
         * @param {?} pro
         * @return {?}
         */
        pro => {
            /** @type {?} */
            let propertyListItem = {
                value: pro.code,
                text: pro.name,
                propertyDataType: this.convertNewDataType2PropertyDataType(pro.dataType),
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        if (type.navigationProperties.length != 0) {
            type.navigationProperties.forEach((/**
             * @param {?} naPro
             * @return {?}
             */
            naPro => {
                switch (naPro.navigationType) {
                    case NewNavigationType.EntitySet:
                        {
                            /** @type {?} */
                            let naProSet = schema.entitySets.find((/**
                             * @param {?} naProSet
                             * @return {?}
                             */
                            naProSet => naProSet.code == naPro.navigationName));
                            this.convertNewEntitySet(naProSet, schema).forEach((/**
                             * @param {?} ele
                             * @return {?}
                             */
                            ele => {
                                if (ele.parentItem != null) {
                                    ele.parentItem = naPro.code + "." + ele.parentItem;
                                }
                                else {
                                    ele.parentItem = naPro.code;
                                }
                                ele.text = naPro.name + "." + ele.text;
                                propertyList.push(ele);
                            }));
                        }
                        break;
                    case NewNavigationType.EntityType:
                        {
                            /** @type {?} */
                            let naProType = schema.entityTypes.find((/**
                             * @param {?} naProType
                             * @return {?}
                             */
                            naProType => naProType.code == naPro.navigationName));
                            this.convertNewEntityType(naProType, schema).forEach((/**
                             * @param {?} ele
                             * @return {?}
                             */
                            ele => {
                                if (ele.parentItem != null) {
                                    ele.parentItem = naPro.code + "." + ele.parentItem;
                                }
                                else {
                                    ele.parentItem = naPro.code;
                                }
                                ele.text = naPro.name + "." + ele.text;
                                propertyList.push(ele);
                            }));
                        }
                        break;
                }
            }));
        }
        return propertyList;
    }
    /**
     *
     * @param {?} newType 统一Schema的属性
     * @return {?}
     */
    convertNewDataType2PropertyDataType(newType) {
        /** @type {?} */
        let type = PropertyDataType.String;
        switch (newType) {
            case NewDataType.Boolean:
                type = PropertyDataType.Boolean;
                break;
            case NewDataType.Byte:
                type = PropertyDataType.Byte;
                break;
            case NewDataType.Date:
                type = PropertyDataType.DateTime;
                break;
            case NewDataType.DateTime:
                type = PropertyDataType.DateTime;
                break;
            case NewDataType.Decimal:
                type = PropertyDataType.Decimal;
                break;
            case NewDataType.Integer:
                type = PropertyDataType.Int32;
                break;
            case NewDataType.String:
                type = PropertyDataType.String;
                break;
        }
        return type;
    }
}
if (false) {
    /** @type {?} */
    PropertyAdapter.prototype.entityName;
}
//# sourceMappingURL=data:application/json;base64,