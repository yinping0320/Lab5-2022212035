/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ApplicationRef, ComponentFactoryResolver } from "@angular/core";
import { FilterConditionComponent } from "./filter-condition/filter-condition.component";
import { Schema } from "@gsp-svc/expression";
import { InjectedEntity } from "@gsp-svc/expression";
import { FilterInjectedEntity, FilterInjectedType } from "./injected-entity";
import { PropertyAdapter } from "./property-adapter";
import { Adapter } from "./adapter";
import { BsModalService } from '@farris/ui-modal';
import { HttpClient } from "@angular/common/http";
/**
 * 过滤表达式服务类
 * @author linchang 2018/12/10
 */
export class FilterService {
    /**
     * @param {?} injector
     * @param {?} applicationRef
     * @param {?} compFactRes
     * @param {?} http
     */
    constructor(injector, applicationRef, compFactRes, http) {
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.compFactRes = compFactRes;
        this.http = http;
        this.i = 0;
        this.adapter = new Adapter();
        //属性列表
        this.propertyList = [];
        //预置计算表达式变量
        this.contextEntity = [];
        this.expressionText = null;
        this.expressionSchema = Array();
        this.expressionInjectedEntities = [];
        this.expressionCDT = [];
        //预置条件表达式变量
        this.filterExpressionString = null; //过滤表达式序列化串
        //过滤表达式序列化串
        this.schemaMap = new Map();
        this.newSchemaMap = new Map(); //过滤表达式添加NewSchema
        this.exprWinWidth = 850;
        this.modalService = this.injector.get(BsModalService);
    }
    // 创建表达式
    /**
     * @return {?}
     */
    buildExpression() {
        /** @type {?} */
        let that = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            const compFactory = that.compFactRes.resolveComponentFactory(FilterConditionComponent);
            /** @type {?} */
            const compRef = compFactory.create(that.injector);
            compRef.instance.propertyList = that.propertyList;
            compRef.instance.contextEntity = that.contextEntity;
            compRef.instance.expressionCDT = that.expressionCDT;
            compRef.instance.expressionSchema = that.expressionSchema;
            compRef.instance.expressionText = that.expressionText;
            compRef.instance.expressionInjectedEntities = that.expressionInjectedEntities;
            compRef.instance.filterExpressionString = that.filterExpressionString;
            compRef.instance.schemaMap = that.schemaMap;
            //===================组件加入newSchemaMap===============
            compRef.instance.newSchemaMap = that.newSchemaMap;
            //=====================================================    
            compRef.instance.exprWinWidth = that.exprWinWidth;
            that.localePipe = compRef.instance.localePipe;
            /** @type {?} */
            const dialog = that.modalService.show(compRef, {
                title: that.localePipe.transform("WindowTitle"),
                width: 1010,
                height: 550,
                showButtons: false
            });
            compRef.instance.closed.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            $event => dialog.close()));
            compRef.instance.result.subscribe((/**
             * @param {?} expressionContent
             * @return {?}
             */
            (expressionContent) => {
                return resolve(expressionContent);
            }));
        }));
    }
    /**
     *  预置属性列表
     * @param {?} name 属性语义
     * @param {?} displayName 展示名称
     * @param {?} propertyDataType 属性数据类型
     * @return {?}
     */
    addProperty(name, displayName, propertyDataType) {
        /** @type {?} */
        let propertyEntity = {
            text: displayName,
            propertyDataType: propertyDataType,
            value: name,
            parentItem: null
        };
        this.propertyList = this.propertyList.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.value !== name));
        this.propertyList.push(propertyEntity);
    }
    /**
     * 添加上下文变量
     * @param {?} contextEntity 上下文变量
     * @return {?}
     */
    addExpressionContext(contextEntity) {
        this.contextEntity = this.contextEntity.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.key !== contextEntity.key));
        this.contextEntity.push(contextEntity);
    }
    /**
     * 预置表达式默认显示
     * @param {?} text 预置文本
     * @return {?}
     */
    addExpressionText(text) {
        this.expressionText = text;
    }
    /**
     * 预置Schema
     * @param {?} name schema名称
     * @param {?} schema schema实体
     * @return {?}
     */
    addExpressionSchema(name, schema) {
        this.expressionSchema = this.expressionSchema.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.name !== name));
        this.expressionSchema.push({ name, schema });
    }
    /**
     * 预置注册实体
     * @author linchang 2018/12/10
     * @param {?} name 注册实体名
     * @param {?} schemaName 所在schema的名
     * @param {?} typeNameInSchema 在schema中名称
     * @param {?} injectedType 注册的类型
     * @return {?}
     */
    addExpressionInjectedEntity(name, schemaName, typeNameInSchema, injectedType) {
        //构造注入实体对象
        /** @type {?} */
        let injectedEntity = new InjectedEntity();
        injectedEntity.name = name;
        injectedEntity.schemaName = schemaName;
        injectedEntity.injectedName = typeNameInSchema;
        injectedEntity.injectedType = injectedType;
        this.expressionInjectedEntities.push(injectedEntity);
    }
    /**
     * 预置CDT
     * @param {?} gspCDTs 预置的CDT集合
     * @return {?}
     */
    addExpressionCDT(gspCDTs) {
        this.expressionCDT = gspCDTs;
    }
    /**
     * 预置过滤条件表达式
     * @param {?} filterExpression 预置的过滤表达式串
     * @return {?}
     */
    addFilterCondition(filterExpression) {
        this.filterExpressionString = filterExpression;
    }
    /**
     * 预置schema
     * @param {?} name schema名,默认为CO
     * @param {?} filterSchema schema实体
     * @return {?}
     */
    addSchema(name, filterSchema) {
        if (filterSchema == null) {
            alert("Schema Cannot Null");
        }
        else
            this.schemaMap.set(name, filterSchema);
    }
    /**
     * 添加注入实体
     * @param {?} name 注入实体在schema中的名称
     * @param {?} schemaName 注入实体所在的schema名
     * @param {?=} injectedType 注入类型，不填默认为EntityType
     * @return {?}
     */
    addInjectedEntity(name, schemaName, injectedType = FilterInjectedType.EntityType) {
        this.injectedEntity = new FilterInjectedEntity();
        this.injectedEntity.name = name;
        this.injectedEntity.schemaName = schemaName;
        this.injectedEntity.injectedType = injectedType;
        /** @type {?} */
        let propertyAdapter = new PropertyAdapter();
        this.propertyList = propertyAdapter.adapter(this.injectedEntity, this.schemaMap);
    }
    /**
     * 添加GSPCommonObject
     * @param {?} commonObject 待转化CO
     * @return {?}
     */
    addCommonObject(commonObject) {
        /** @type {?} */
        let schema;
        //若schemaMap中存在CO的schema
        if (this.schemaMap.get("CommonObject")) {
            schema = this.schemaMap.get("CommonObject");
        }
        else
            schema = new Schema;
        //将每一个CO转化为schema内部结构中的entityType
        /** @type {?} */
        let entityTypes = this.adapter.convertCO(commonObject);
        entityTypes.forEach((/**
         * @param {?} entityType
         * @return {?}
         */
        entityType => {
            schema.entityTypes = schema.entityTypes.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.name !== entityType.name));
            schema.entityTypes.push(entityType);
        }));
        //将合并后的schema放入内部上下文实体中
        this.addSchema("CommonObject", schema);
    }
    /**
     * 设置计算表达式弹出框宽度
     * @param {?} exprWinWidth
     * @return {?}
     */
    addExprWinWidth(exprWinWidth) {
        this.exprWinWidth = exprWinWidth;
    }
    //======================华丽分割线之统一结构Schema============================================================
    /**
     * \@description 向newSchemaMap中添加NewSchema
     * @param {?} name Map中的key值
     * @param {?} schema Map的value
     * @return {?}
     */
    addNewSchema(name, schema) {
        if (name != null && name != "" && schema != null) {
            this.newSchemaMap.set(name, schema);
        }
        else {
            alert("Name or Schema is null !");
        }
    }
    /**
     * 添加注入实体
     * @param {?} name 注入实体在schema中的名称
     * @param {?} schemaName 注入实体所在的schema名
     * @param {?=} injectedType 注入类型，默认为EntityType
     * @return {?}
     */
    addInjectedEntityOfNewSchema(name, schemaName, injectedType = FilterInjectedType.EntityType) {
        this.injectedEntity = new FilterInjectedEntity();
        this.injectedEntity.name = name;
        this.injectedEntity.schemaName = schemaName;
        this.injectedEntity.injectedType = injectedType;
        /** @type {?} */
        let propertyAdapter = new PropertyAdapter();
        this.propertyList = propertyAdapter.adapterOfNewSchema(this.injectedEntity, this.newSchemaMap);
    }
}
FilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FilterService.ctorParameters = () => [
    { type: Injector },
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    FilterService.prototype.i;
    /** @type {?} */
    FilterService.prototype.adapter;
    /** @type {?} */
    FilterService.prototype.propertyList;
    /** @type {?} */
    FilterService.prototype.contextEntity;
    /** @type {?} */
    FilterService.prototype.expressionText;
    /** @type {?} */
    FilterService.prototype.expressionSchema;
    /** @type {?} */
    FilterService.prototype.expressionInjectedEntities;
    /** @type {?} */
    FilterService.prototype.expressionCDT;
    /** @type {?} */
    FilterService.prototype.filterExpressionString;
    /** @type {?} */
    FilterService.prototype.schemaMap;
    /** @type {?} */
    FilterService.prototype.newSchemaMap;
    /** @type {?} */
    FilterService.prototype.injectedEntity;
    /** @type {?} */
    FilterService.prototype.exprWinWidth;
    /** @type {?} */
    FilterService.prototype.localePipe;
    /** @type {?} */
    FilterService.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    FilterService.prototype.modalService;
    /** @type {?} */
    FilterService.prototype.simpleModalConfig;
    /**
     * @type {?}
     * @private
     */
    FilterService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterService.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    FilterService.prototype.compFactRes;
    /**
     * @type {?}
     * @private
     */
    FilterService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,