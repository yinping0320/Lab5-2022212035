/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, ViewEncapsulation, LOCALE_ID, Inject, Injector } from '@angular/core';
import { TreeTableComponent } from '@farris/ui-treetable';
import { FilterExpression, ExpressionItem } from '../filter-expression-entity';
import { ExpressTypeEnum, RelationTypeEnum, CompareTypeEnum } from '../typeinfo';
import { ExpressionService } from '@gsp-svc/expression';
import { PropertyDataType } from '../property-entity';
import { FilterInjectedEntity } from '../injected-entity';
import { PropertyAdapter } from '../property-adapter';
import { FilterEntitySchema } from '../schema';
import { GSPCommonObject } from '@gsp-bef/gsp-cm-metadata';
import { Adapter } from '../adapter';
import { NotifyService } from '@farris/ui-notify';
import { FilterConditionLocalePipe } from '../filter-condition-locale.pipe';
import { NewSchema } from '../NewSchema';
/**
 * 过滤条件面板逻辑类
 */
export class FilterExpressionComponent {
    /**
     * @param {?} expr
     * @param {?} propertyAdapter
     * @param {?} notifyservice
     * @param {?} injector
     * @param {?} localeId
     */
    constructor(expr, propertyAdapter, notifyservice, injector, localeId) {
        this.expr = expr;
        this.propertyAdapter = propertyAdapter;
        this.notifyservice = notifyservice;
        this.injector = injector;
        //预置计算表达式上下文实体
        this.contextEntity = [];
        //预置计算默认表达式显示
        this.expressionText = "";
        //预置计算表达式中的schema
        this.expressionSchema = [];
        //预置计算表达式中的注入实体
        this.expressionInjectedEntities = [];
        //预置计算表达式cdt集
        this.expressionCDT = [];
        //预置属性列表
        this.propertyList = [];
        //预置过滤表达式串
        this.filterExpressionString = null;
        //schema存储结构
        this.filterNewSchemaMap = new Map();
        this.disabled = false;
        //内部属性列表使用
        this.propertyListInner = [];
        //操作比较符集
        this.operators = [];
        this.stringOperators = [];
        this.NumberOperators = [];
        //关系集
        this.relations = [];
        //表达式类型集
        this.expressTypes = [];
        this.displayPopup = false;
        //检查过滤条件实体是否完整正确
        this.checkFilterStruc = true;
        //schema存储结构
        this.filterSchemaMap = new Map();
        this.adapter = new Adapter();
        this.treeData = [];
        this.columnWidth = ["30%", "20%", "20%", "20%", "10%"];
        //消息提示
        this.notifies = {};
        this.localePipe = new FilterConditionLocalePipe(localeId);
    }
    //初始化，复制treeData值,treeDataTemp用于转换为FilterExpression实体
    /**
     * @return {?}
     */
    ngOnChanges() {
        //并且树形表绑定的显示的列 
        this.cols = [
            { field: 'item', title: this.localePipe.transform("Item"), width: 271 },
            { field: 'operator', title: this.localePipe.transform("Operator"), width: 191 },
            { field: 'expressType', title: this.localePipe.transform("ExpressType"), width: 180 },
            { field: 'value', title: this.localePipe.transform("Value"), width: 214 },
            { field: 'operation', title: this.localePipe.transform("Operation"), width: 130 }
        ];
        this.propertyListInner = [];
        this.treeDataTemp = this.treeData;
        //=================================分割线之NewSchema====================================
        //注入NewSchema
        if (this.schemaName && this.newSchema) {
            this.addNewSchema(this.schemaName, this.newSchema);
            //注入co
            if (this.gspCommonObject) {
                /** @type {?} */
                let newSchema;
                //若schemaMap中存在CO的schema
                if ((this.filterNewSchemaMap.get("CommonObject"))) {
                    newSchema = this.filterNewSchemaMap.get("CommonObject");
                }
                else {
                    newSchema = new NewSchema();
                }
                //将每一个CO转化为schema内部结构中的entityType
                /** @type {?} */
                let entityTypes = this.adapter.convertCOOfNewSchema(this.gspCommonObject);
                if ((entityTypes) && entityTypes.length != 0) {
                    entityTypes.forEach((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    entityType => {
                        if (newSchema.entityTypes.find((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => x.code == entityType.code)) == null) {
                            newSchema.entityTypes.push(entityType);
                        }
                    }));
                }
                //将合并后的schema放入内部上下文实体中
                this.addNewSchema("CommonObject", newSchema);
            }
            //添加属性列表
            this.propertyList.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                /** @type {?} */
                let propertyInner = {
                    value: property.value,
                    text: property.text,
                    propertyDataType: property.propertyFieldType,
                    parentItem: null
                };
                this.propertyListInner.push(propertyInner);
            }));
            if ((this.injectedEntity)) {
                this.propertyAdapter.adapterOfNewSchema(this.injectedEntity, this.filterNewSchemaMap).forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.propertyListInner.push(element);
                }));
            }
        }
        else {
            //===========================================旧Schema==========================================
            if (this.schemaName != null && (this.schema)) {
                this.addSchema(this.schemaName, this.schema);
            }
            if ((this.gspCommonObject)) {
                /** @type {?} */
                let schema;
                //若schemaMap中存在CO的schema
                if ((this.filterSchemaMap.get("CommonObject"))) {
                    schema = this.filterSchemaMap.get("CommonObject");
                }
                else
                    schema = new FilterEntitySchema();
                //将每一个CO转化为schema内部结构中的entityType
                /** @type {?} */
                let entityTypes = this.adapter.convertCO(this.gspCommonObject);
                if ((entityTypes) && entityTypes.length != 0) {
                    entityTypes.forEach((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    entityType => {
                        if (schema.entityTypes.find((/**
                         * @param {?} x
                         * @return {?}
                         */
                        x => x.name == entityType.name)) == null) {
                            schema.entityTypes.push(entityType);
                        }
                    }));
                }
                //将合并后的schema放入内部上下文实体中
                this.addSchema("CommonObject", schema);
            }
            this.propertyList.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                /** @type {?} */
                let propertyInner = {
                    text: property.text,
                    propertyDataType: property.propertyFieldType,
                    value: property.value,
                    parentItem: null
                };
                this.propertyListInner.push(propertyInner);
            }));
            if ((this.injectedEntity)) {
                this.propertyAdapter.adapter(this.injectedEntity, this.filterSchemaMap).forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.propertyListInner.push(element);
                }));
            }
        }
        this.defaultExpressTypeText = this.localePipe.transform("Value");
        this.defaultSelectGroup = this.localePipe.transform('And');
        this.defaultSelectItem = this.localePipe.transform("SelectItem");
        this.defaultOperatorText = this.localePipe.transform("GreaterThan");
        this.notifies = {
            1: { type: 'success', msg: this.localePipe.transform("Success") },
            2: { type: 'warning', msg: this.localePipe.transform("Warning_SelectRelation") },
            3: { type: 'warning', msg: this.localePipe.transform("Warning_ContainsFilters") },
            4: { type: 'warning', msg: this.localePipe.transform("Warning_ConditionsComplete") },
            5: { type: 'warning', msg: this.localePipe.transform("Warning_NumericMatch") }
        };
        this.expressTypes = [
            { id: this.localePipe.transform("Value") },
            { id: this.localePipe.transform("Expression") }
        ];
        this.relations = [
            { id: this.localePipe.transform("And") },
            { id: this.localePipe.transform("Or") },
        ];
        this.NumberOperators = [
            { id: this.localePipe.transform("GreaterThan") },
            { id: this.localePipe.transform("GreaterThanOrEqual") },
            { id: this.localePipe.transform("LessThan") },
            { id: this.localePipe.transform("LessThanOrEqual") },
            { id: this.localePipe.transform("Equal") },
            { id: this.localePipe.transform("NotEqual") },
            { id: this.localePipe.transform("IsNull") },
            { id: this.localePipe.transform("IsNotNull") },
        ];
        this.stringOperators = [
            { id: this.localePipe.transform("Equal") },
            { id: this.localePipe.transform("NotEqual") },
            { id: this.localePipe.transform("Contains") },
            { id: this.localePipe.transform("NotContains") },
            { id: this.localePipe.transform("StartsWith") },
            { id: this.localePipe.transform("EndsWith") },
            { id: this.localePipe.transform("NotStartsWith") },
            { id: this.localePipe.transform("NotEndsWith") },
            { id: this.localePipe.transform("IsNull") },
            { id: this.localePipe.transform("IsNotNull") },
        ];
        this.operators = [
            { id: this.localePipe.transform("GreaterThan") },
            { id: this.localePipe.transform("GreaterThanOrEqual") },
            { id: this.localePipe.transform("LessThan") },
            { id: this.localePipe.transform("LessThanOrEqual") },
            { id: this.localePipe.transform("Equal") },
            { id: this.localePipe.transform("NotEqual") },
            { id: this.localePipe.transform("Contains") },
            { id: this.localePipe.transform("NotContains") },
            { id: this.localePipe.transform("StartsWith") },
            { id: this.localePipe.transform("EndsWith") },
            { id: this.localePipe.transform("NotStartsWith") },
            { id: this.localePipe.transform("NotEndsWith") },
            { id: this.localePipe.transform("IsNull") },
            { id: this.localePipe.transform("IsNotNull") },
            { id: this.localePipe.transform("In") },
            { id: this.localePipe.transform("NotIn") },
        ];
        this.onCancel();
    }
    //=================添加NewSchema=====================
    /**
     * \@description 添加NewSchema到Map中
     * @param {?} name schema名称
     * @param {?} filterNewSchema 注入的统一结构NewSchema
     * @return {?}
     */
    addNewSchema(name, filterNewSchema) {
        this.filterNewSchemaMap.set(name, filterNewSchema);
    }
    //==================================================
    /**
     * 添加schema入Map
     * @param {?} name schema名
     * @param {?} filterSchema
     * @return {?}
     */
    addSchema(name, filterSchema) {
        this.filterSchemaMap.set(name, filterSchema);
    }
    /**
     * 树形表中节点选择触发函数
     * @param {?} $event 所选节点信息
     * @return {?}
     */
    nodeSelected($event) {
        //隐藏掉所有的节点选择编辑框，包括子节点的
        this.hideNodeEditor(this.treeData);
        //将所选节点比较项、表达式类型项、值编辑框显示，并将所选对应数据赋给默认项进行显示
        this.defaultOperatorText = $event.node.data.operator;
        this.defaultExpressTypeText = $event.node.data.expressType;
        if ($event.node.data.item == this.localePipe.transform('And') || $event.node.data.item == this.localePipe.transform('Or')) {
            this.defaultSelectGroup = $event.node.data.item;
        }
        else if ($event.node.data.item !== this.localePipe.transform("SelectProperty")) {
            /** @type {?} */
            let properties = this.propertyListInner.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.text == $event.node.data.item));
            this.defaultSelectItem = properties[0].value;
        }
        else if ($event.node.data.item == this.localePipe.transform("SelectProperty")) {
            this.defaultSelectItem = $event.node.data.item;
        }
        this.treeData = [...this.treeData];
        $event.node.data.displayOperator = true;
        $event.node.data.displayExpressType = true;
        $event.node.data.displayValue = true;
        $event.node.data.displaySelect = true;
    }
    ;
    /**
     * 隐藏掉所有的节点选择编辑框，包括子节点的
     * @param {?} treeNodes 树形表绑定结构
     * @return {?}
     */
    hideNodeEditor(treeNodes) {
        treeNodes.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            element.data.displayOperator = false;
            element.data.displayExpressType = false;
            element.data.displayValue = false;
            element.data.displaySelect = false;
            //若有子节点，则将其子节点的编辑选择框隐藏
            if ((element.children) && element.children.length != 0) {
                this.hideNodeEditor(element.children);
            }
        }));
    }
    ;
    //节点未选择函数
    /**
     * @return {?}
     */
    nodeUnSelect() {
        console.log("nodeUnselect");
    }
    ;
    /**
     *
     * 选择逻辑集时
     * @param {?} $event
     * @return {?}
     */
    selectGroup($event) {
        this.propertyNodeOperate($event, this.treeData, 0 /* Group */);
    }
    /**
     *
     * 选择项时
     * @param {?} $event
     * @return {?}
     */
    selectItem($event) {
        this.propertyNodeOperate($event, this.treeData, 1 /* Item */);
    }
    /**
     * 选择比较操作符时
     * @param {?} $event 比较操作项信息
     * @return {?}
     */
    selectOperator($event) {
        this.propertyNodeOperate($event, this.treeData, 2 /* Operation */);
    }
    ;
    /**
     * 选择值类型时
     * @param {?} $event 值类型项信息
     * @return {?}
     */
    selectExpressType($event) {
        this.propertyNodeOperate($event, this.treeData, 3 /* Valuetype */);
    }
    ;
    /**
     * 选择结束后隐藏该字段选择框
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} fieldType 所选字段
     * @return {?}
     */
    hideFieldEditor(treeNodes, fieldType) {
        //找到所操作的节点，根据所选择的字段将对应选择编辑框隐藏
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (this.tt.isSelected(treeNode)) {
                switch (fieldType) {
                    case 1 /* Item */:
                        treeNode.data.displaySelect = false;
                        break;
                    case 2 /* Operation */:
                        treeNode.data.displayOperator = false;
                        break;
                    case 3 /* Valuetype */:
                        treeNode.data.displayExpressType = false;
                        break;
                }
                return;
            }
            //若未找到所选节点，则找其子节点
            else if ((treeNode.children) && treeNode.children.length != 0) {
                this.hideFieldEditor(treeNode.children, fieldType);
            }
        }));
    }
    /**
     * 打开计算表达式编辑器
     * @return {?}
     */
    openExpressEditor() {
        /** @type {?} */
        let that = this;
        //添加预置上下文变量
        if (this.contextEntity && this.contextEntity.length != 0) {
            this.contextEntity.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                this.expr.addContext(element);
            }));
        }
        //添加预置表达式文本
        /** @type {?} */
        let selectNode = this.isSelected(this.treeData);
        if ((selectNode) && (selectNode.data.value != "") && (selectNode.data.value != null)) {
            this.expr.addExpressionText(selectNode.data.value);
        }
        else
            this.expr.addExpressionText(this.expressionText);
        //添加注入实体
        this.expressionInjectedEntities.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.expr.addInjectedEntity(element.name, element.schemaName, element.injectedName, element.injectedType);
        }));
        //添加CDT
        this.expr.addCDT(this.expressionCDT);
        //添加schema
        this.expressionSchema.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.expr.addSchema(element.name, element.schema);
        }));
        //打开表达式编辑器并返回编辑结果
        this.expr.buildExpression().then((/**
         * @param {?} info
         * @return {?}
         */
        info => {
            /** @type {?} */
            let expressInfo = info;
            this.displayExpressResult(that.treeData, expressInfo);
        }));
    }
    /**
     * 选中节点选择
     * @param {?} treeNodes 关系组
     * @return {?}
     */
    isSelected(treeNodes) {
        /** @type {?} */
        let treeNode;
        for (var i = 0; i < treeNodes.length; i++) {
            if (this.tt.isSelected(treeNodes[i])) {
                treeNode = treeNodes[i];
                break;
            }
            //若在该层节点中未找到所选节点，则找其子节点
            else if ((treeNodes[i].children) && treeNodes[i].children.length != 0) {
                treeNode = this.isSelected(treeNodes[i].children);
                if ((treeNode))
                    break;
            }
        }
        return treeNode;
    }
    /**
     * 将计算表达式结果展示到对应节点
     * @param {?} treeNodes 树表绑定结构
     * @param {?} expressInfo 计算表达式得到结果
     * @return {?}
     */
    displayExpressResult(treeNodes, expressInfo) {
        //找到所选节点实体，并将计算表达式所得结果赋给对应属性进行显示
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (this.tt.isSelected(treeNode)) {
                treeNode.data.value = expressInfo;
                return;
            }
            //若在该层节点中未找到所选节点，则找其子节点
            else if ((treeNode.children) && treeNode.children.length != 0) {
                this.displayExpressResult(treeNode.children, expressInfo);
            }
            //若仍未找到，则不进行任何操作
        }));
    }
    /**
     * 关系选择按钮选择事件
     * @param {?} $event 选择按钮所选信息
     * @return {?}
     */
    itemClick($event) {
        //若选择添加关系
        if ($event.value == RelationTypeEnum.AddRelation) {
            this.addNode(this.treeData, this.localePipe.transform('And'), null, null);
        }
        //若选择添加属性
        else if ($event.value == RelationTypeEnum.AddProperty) {
            this.addNode(this.treeData, this.localePipe.transform("SelectProperty"), this.localePipe.transform("Equal"), this.localePipe.transform("Value"));
        }
        else
            this.propertyNodeOperate($event, this.treeData, 1 /* Item */);
    }
    /**
     * 选择属性节点操作
     * 对新添加的属性节点进行逻辑处理
     * @param {?} event 点击事件
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} fieldType 节点类型
     * @return {?}
     */
    propertyNodeOperate(event, treeNodes, fieldType) {
        treeNodes.forEach((/**
         * @param {?} treenode
         * @return {?}
         */
        treenode => {
            if (this.tt.isSelected(treenode)) {
                //对所选节点进行赋值操作
                switch (fieldType) {
                    case 0 /* Group */:
                        {
                            treenode.data.item = event.data.id;
                            this.defaultSelectGroup = event.data.id;
                        }
                        break;
                    case 1 /* Item */:
                        {
                            treenode.data.item = event.data.text;
                            this.defaultSelectItem = event.data.value;
                            treenode.data.parentItem = event.data.parentItem;
                            treenode.data.propertyDataType = event.data.propertyDataType;
                        }
                        break;
                    case 2 /* Operation */:
                        {
                            treenode.data.operator = event.data.id;
                            this.defaultOperatorText = event.data.id;
                        }
                        break;
                    case 3 /* Valuetype */:
                        {
                            treenode.data.expressType = event.data.id;
                            this.defaultExpressTypeText = event.data.id;
                        }
                        break;
                }
                return;
            }
            //否则对其子节点进行赋值操作
            else if ((treenode.children) && treenode.children.length != 0) {
                this.propertyNodeOperate(event, treenode.children, fieldType);
            }
        }));
    }
    /**
     * 根据所选为关系或者属性对新节点进行初始化
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} defaultString 新节点显示默认值
     * @param {?} defaultOperator
     * @param {?} defalutExpressType
     * @return {?}
     */
    addNode(treeNodes, defaultString, defaultOperator, defalutExpressType) {
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (this.tt.isSelected(treeNode)) {
                //若关系值为空
                if (!(treeNode.data.item)) {
                    this.notifyservice[this.notifies['2'].type]({
                        msg: this.notifies['2'].msg
                    });
                    return;
                }
                //若为所选的关系节点，则在其子项里添加新子节点
                /** @type {?} */
                let newNode = {
                    data: {
                        "item": defaultString,
                        "propertyDataType": null,
                        //属性数据类型
                        "operator": defaultOperator,
                        "expressType": defalutExpressType,
                        "value": null,
                        "id": Math.random(),
                        "parentItem": null
                    },
                    parent: treeNode,
                    children: [],
                    expanded: true
                };
                //向该所选节点的子项添加新节点
                treeNode.children.push(newNode);
                return;
            }
            //若未找到所选节点，且该节点子项不为空，则在其子项中查找所选节点
            else if ((treeNode.children) && treeNode.children.length != 0) {
                this.addNode(treeNode.children, defaultString, defaultOperator, defalutExpressType);
            }
        }));
        this.tt.updateSerializedValue();
    }
    /**
     * 删除节点
     * @param {?} $event
     * @return {?}
     */
    deleteNode($event) {
        this.onDelete(this.treeData, $event);
    }
    /**
     * 重置(外部调用)
     * 重置为初始状态
     * @return {?}
     */
    onCancel() {
        if (this.filterExpressionString == null || this.filterExpressionString == "") {
            this.treeData = [
                {
                    data: {
                        "id": 1,
                        //树形结构中每个节点的id
                        "item": this.localePipe.transform('And'),
                        //属性项
                        "propertyDataType": null,
                        //属性数据类型
                        "operator": null,
                        //操作比较符
                        "expressType": null,
                        //表达式类型
                        "value": null,
                        //值
                        "displaySelect": false,
                        //选择项显示
                        "displayOperator": false,
                        //操作符项显示
                        "displayExpressType": false,
                        //表达式类型显示
                        "displayValue": false,
                        //值显示
                        "parentItem": null //父项
                    },
                    children: [],
                    //子节点集合
                    expanded: true //是否展开
                }
            ];
        }
        else {
            this.filterExpressionPre = JSON.parse(this.filterExpressionString);
            this.treeData = [];
            this.treeData.push(this.unConvert(this.filterExpressionPre));
            this.treeData[0].data.id = 1;
        }
    }
    /**
     * 删除节点具体实现类
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} id
     * @return {?}
     */
    onDelete(treeNodes, id) {
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (treeNode.data.id == id) {
                if (treeNode.data.id == 1) {
                    this.treeData = [
                        {
                            data: {
                                "id": 1,
                                //树形结构中每个节点的id
                                "item": this.localePipe.transform('And'),
                                //属性项
                                "propertyDataType": null,
                                //属性数据类型
                                "operator": null,
                                //操作比较符
                                "expressType": null,
                                //表达式类型
                                "value": null,
                                //值
                                "displaySelect": false,
                                //选择项显示
                                "displayOperator": false,
                                //操作符项显示
                                "displayExpressType": false,
                                //表达式类型显示
                                "displayValue": false,
                                //值显示
                                "parentItem": null //父项
                            },
                            children: [],
                            //子节点集合
                            expanded: true //是否展开
                        }
                    ];
                    return;
                }
                //所选节点所在数
                /** @type {?} */
                let index = treeNodes.indexOf(treeNode);
                //将所选节点剔除
                treeNodes.splice(index, 1);
            }
            else if ((treeNode.children) && treeNode.children.length != 0) {
                treeNode.children = this.onDelete(treeNode.children, id);
            }
        }));
        this.tt.updateSerializedValue();
        return treeNodes;
    }
    /**
     *
     * 添加条件项
     * @return {?}
     */
    addItem() {
        this.defaultSelectItem = this.localePipe.transform("SelectItem");
        this.hideNodeEditor(this.treeData);
        this.addNode(this.treeData, this.localePipe.transform("SelectProperty"), this.localePipe.transform("Equal"), this.localePipe.transform("Value"));
    }
    /**
     *
     * 添加条件组
     * @return {?}
     */
    addGroup() {
        this.addNode(this.treeData, this.localePipe.transform('And'), null, null);
    }
    /**
     * 将treeData转化为filetrExpression实体
     * @param {?} filterExpression 过滤表达式实体
     * @param {?} treeNode 最外层的treeNode
     * @return {?}
     */
    convert(filterExpression, treeNode) {
        //得到最外层的关系符
        filterExpression.relationOperator = this.typeMatch(treeNode.data.item);
        //若其子项不为空
        if (treeNode.children.length != 0) {
            //对其每一个子项进行转化操作
            treeNode.children.forEach((/**
             * @param {?} treeNodeItem
             * @return {?}
             */
            treeNodeItem => {
                //若子项为并且、或者，则新建复杂过滤表达式
                if (this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.And ||
                    this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.Or) {
                    /** @type {?} */
                    let filterExpressionItem = new FilterExpression();
                    filterExpression.expressItems.push(this.convert(filterExpressionItem, treeNodeItem));
                }
                //若子项为属性表达式
                else {
                    /** @type {?} */
                    let filterItem = new ExpressionItem();
                    /** @type {?} */
                    let properties = this.propertyListInner.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.text == treeNodeItem.data.item));
                    filterItem.propertyName = properties[0].value;
                    filterItem.propertyDataType = treeNodeItem.data.propertyDataType;
                    filterItem.operator = this.typeMatch(treeNodeItem.data.operator);
                    filterItem.expressType = this.typeMatch(treeNodeItem.data.expressType);
                    filterItem.value = treeNodeItem.data.value;
                    filterItem.parentItem = treeNodeItem.data.parentItem;
                    //若为数值型比较，则将value值强制转换为数字
                    if (filterItem.expressType == ExpressTypeEnum.Value &&
                        (filterItem.operator == CompareTypeEnum.GreaterThan
                            || filterItem.operator == CompareTypeEnum.GreaterThanOrEqual
                            || filterItem.operator == CompareTypeEnum.LessThan
                            || filterItem.operator == CompareTypeEnum.LessThanOrEqual)) {
                        filterItem.value = Number(treeNodeItem.data.value);
                    }
                    if (filterItem.expressType == ExpressTypeEnum.Value &&
                        (filterItem.operator == CompareTypeEnum.Equal
                            || filterItem.operator == CompareTypeEnum.NotEqual)) {
                        if (filterItem.propertyDataType == PropertyDataType.Decimal
                            || filterItem.propertyDataType == PropertyDataType.Double
                            || filterItem.propertyDataType == PropertyDataType.Int16
                            || filterItem.propertyDataType == PropertyDataType.Int32
                            || filterItem.propertyDataType == PropertyDataType.Int64) {
                            filterItem.value = Number(treeNodeItem.data.value);
                        }
                    }
                    //将子项放入父项的字段中
                    filterExpression.expressItems.push(filterItem);
                }
            }));
        }
        return filterExpression;
    }
    /**
     * filetrExpression反转化为TreeNode
     * @param {?} filterExpress 待转化的filetrExpression实体
     * @return {?}
     */
    unConvert(filterExpress) {
        /** @type {?} */
        let treeData = {
            data: {
                "id": Math.random(),
                //树形结构中每个节点的id
                "item": this.relationTypeReverseMatch(filterExpress.relationOperator),
                //属性项
                "propertyDataType": null,
                //属性数据类型
                "operator": null,
                //操作比较符
                "expressType": null,
                //表达式类型
                "value": null,
                //值
                "displaySelect": false,
                //选择项显示
                "displayOperator": false,
                //操作符项显示
                "displayExpressType": false,
                //表达式类型显示
                "displayValue": false,
                //值显示
                "parentItem": null //父项
            },
            children: [],
            //子节点集合
            expanded: true //是否展开
        };
        //对于每一个子项
        filterExpress.expressItems.forEach((/**
         * @param {?} expressItem
         * @return {?}
         */
        expressItem => {
            /** @type {?} */
            let filterExpressItem = (/** @type {?} */ (expressItem));
            //若子项为FilterExpression类型，赋值
            if ((filterExpressItem.relationOperator == RelationTypeEnum.And || filterExpressItem.relationOperator == RelationTypeEnum.Or)) {
                /** @type {?} */
                let treeDataChild = this.unConvert(filterExpressItem);
                treeDataChild.data.parent = treeData; //添加父节点
                treeData.children.push(treeDataChild);
            }
            else //若子项为ExpressionItem类型，赋值
             {
                /** @type {?} */
                let expressionItem = (/** @type {?} */ (expressItem));
                /** @type {?} */
                let properties = this.propertyListInner.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.value == expressionItem.propertyName));
                /** @type {?} */
                let treeDataChild = {
                    data: {
                        "id": Math.random(),
                        //树形结构中每个节点的id
                        "item": properties[0].text,
                        //属性项
                        "propertyDataType": expressionItem.propertyDataType,
                        "operator": this.operatorReverseMatch(expressionItem.operator),
                        //操作比较符
                        "expressType": this.expressTypeReverseMatch(expressionItem.expressType),
                        //表达式类型
                        "value": expressionItem.value,
                        //值
                        "parentItem": expressionItem.parentItem //父项
                    },
                    parent: treeData,
                    //添加父节点
                    children: [],
                    //子节点集合
                    expanded: true //是否展开
                };
                treeData.children.push(treeDataChild);
            }
        }));
        return treeData;
    }
    /**
     * 类型信息匹配
     * @param {?} type 类型
     * @return {?}
     */
    typeMatch(type) {
        switch (type) {
            case this.localePipe.transform("And"): return RelationTypeEnum.And;
            case this.localePipe.transform("Or"): return RelationTypeEnum.Or;
            case this.localePipe.transform("GreaterThan"): return CompareTypeEnum.GreaterThan;
            case this.localePipe.transform("GreaterThanOrEqual"): return CompareTypeEnum.GreaterThanOrEqual;
            case this.localePipe.transform("LessThan"): return CompareTypeEnum.LessThan;
            case this.localePipe.transform("LessThanOrEqual"): return CompareTypeEnum.LessThanOrEqual;
            case this.localePipe.transform("Equal"): return CompareTypeEnum.Equal;
            case this.localePipe.transform("NotEqual"): return CompareTypeEnum.NotEqual;
            case this.localePipe.transform("Contains"): return CompareTypeEnum.Contains;
            case this.localePipe.transform("NotContains"): return CompareTypeEnum.NotContains;
            case this.localePipe.transform("StartsWith"): return CompareTypeEnum.StartsWith;
            case this.localePipe.transform("EndsWith"): return CompareTypeEnum.EndsWith;
            case this.localePipe.transform("NotStartsWith"): return CompareTypeEnum.NotStartsWith;
            case this.localePipe.transform("NotEndsWith"): return CompareTypeEnum.NotEndsWith;
            case this.localePipe.transform("IsNull"): return CompareTypeEnum.IsNull;
            case this.localePipe.transform("IsNotNull"): return CompareTypeEnum.IsNotNull;
            case this.localePipe.transform("In"): return CompareTypeEnum.In;
            case this.localePipe.transform("NotIn"): return CompareTypeEnum.NotIn;
            case this.localePipe.transform("Value"): return ExpressTypeEnum.Value;
            case this.localePipe.transform("Expression"): return ExpressTypeEnum.Expression;
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    relationTypeReverseMatch(type) {
        switch (type) {
            case RelationTypeEnum.And: return this.localePipe.transform('And');
            case RelationTypeEnum.Or: return this.localePipe.transform('Or');
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    operatorReverseMatch(type) {
        switch (type) {
            case CompareTypeEnum.GreaterThan: return this.localePipe.transform("GreaterThan");
            case CompareTypeEnum.GreaterThanOrEqual: return this.localePipe.transform("GreaterThanOrEqual");
            case CompareTypeEnum.LessThan: return this.localePipe.transform("LessThan");
            case CompareTypeEnum.LessThanOrEqual: return this.localePipe.transform("LessThanOrEqual");
            case CompareTypeEnum.Equal: return this.localePipe.transform("Equal");
            case CompareTypeEnum.NotEqual: return this.localePipe.transform("NotEqual");
            case CompareTypeEnum.Contains: return this.localePipe.transform("Contains");
            case CompareTypeEnum.NotContains: return this.localePipe.transform("NotContains");
            case CompareTypeEnum.StartsWith: return this.localePipe.transform("StartsWith");
            case CompareTypeEnum.EndsWith: return this.localePipe.transform("EndsWith");
            case CompareTypeEnum.NotStartsWith: return this.localePipe.transform("NotStartsWith");
            case CompareTypeEnum.NotEndsWith: return this.localePipe.transform("NotEndsWith");
            case CompareTypeEnum.IsNull: return this.localePipe.transform("IsNull");
            case CompareTypeEnum.IsNotNull: return this.localePipe.transform("IsNotNull");
            case CompareTypeEnum.In: return this.localePipe.transform("In");
            case CompareTypeEnum.NotIn: return this.localePipe.transform("NotIn");
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    expressTypeReverseMatch(type) {
        switch (type) {
            case ExpressTypeEnum.Value: return this.localePipe.transform("Value");
            case ExpressTypeEnum.Expression: return this.localePipe.transform('Expression');
        }
    }
    /**
     * 过滤表达式获取(外部调用)
     * @return {?}
     */
    getFilterExpression() {
        this.treeDataTemp = this.treeData;
        /** @type {?} */
        let isNull = true;
        /** @type {?} */
        let isMatch = true;
        if (this.checkNull(this.treeDataTemp[0].children, isNull) && this.checkMatch(this.treeDataTemp[0].children, isMatch)) {
            this.filterExpression = new FilterExpression();
            //根据树形数据结构转化为过滤表达式实体
            this.convert(this.filterExpression, this.treeDataTemp[0]);
            //若只包含关系项则返回空
            if (this.filterExpression.expressItems.length == 0)
                return null;
            else {
                if (this.filterExpression.relationOperator == null) {
                    this.filterExpression.relationOperator = RelationTypeEnum.Or;
                }
                return JSON.stringify(this.filterExpression);
            }
        }
    }
    //递归检查整个过滤表达式是否有漏填的项
    /**
     * @param {?} treeNodes
     * @param {?} isNull
     * @return {?}
     */
    checkNull(treeNodes, isNull) {
        for (var i = 0; i < treeNodes.length; i++) {
            if (treeNodes[i].data.item == this.localePipe.transform('And') || treeNodes[i].data.item == this.localePipe.transform('Or')) {
                if (!(treeNodes[i].children) || treeNodes[i].children.length == 0) {
                    this.checkFilterStruc = false;
                    this.notifyservice[this.notifies['3'].type]({
                        msg: this.notifies['3'].msg
                    });
                    isNull = false;
                    break;
                }
                else if (!this.checkNull(treeNodes[i].children, isNull)) {
                    isNull = false;
                    break;
                }
            }
            else {
                if (!(treeNodes[i].data.item) || treeNodes[i].data.item == this.localePipe.transform("SelectProperty")
                    || !(treeNodes[i].data.operator) || !(treeNodes[i].data.expressType)
                    || !(treeNodes[i].data.value)) {
                    this.notifyservice[this.notifies['4'].type]({
                        msg: this.notifies['4'].msg
                    });
                    this.checkFilterStruc = false;
                    isNull = false;
                    break;
                }
            }
        }
        return isNull;
    }
    /**
     * @return {?}
     */
    onfocus() {
        this.displayPopup = true;
    }
    /**
     * @return {?}
     */
    onblur() {
        this.displayPopup = false;
    }
    /**
     * @param {?} treeNodes
     * @param {?} isMatch
     * @return {?}
     */
    checkMatch(treeNodes, isMatch) {
        for (var i = 0; i < treeNodes.length; i++) {
            if (treeNodes[i].data.item != this.localePipe.transform('And') && treeNodes[i].data.item != this.localePipe.transform('Or')) {
                if (treeNodes[i].data.expressType == this.localePipe.transform("Value")) {
                    if ((treeNodes[i].data.propertyDataType == PropertyDataType.Int16 || treeNodes[i].data.propertyDataType == PropertyDataType.Int32 || treeNodes[i].data.propertyDataType == PropertyDataType.Int64) && isNaN(treeNodes[i].data.value)) {
                        this.notifyservice[this.notifies['5'].type]({
                            msg: this.notifies['5'].msg
                        });
                        isMatch = false;
                        break;
                    }
                }
            }
            else
                isMatch = this.checkMatch(treeNodes[i].children, isMatch);
        }
        return isMatch;
    }
}
FilterExpressionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-expression',
                template: "<div class=\"filter \">   \r\n    <farris-treetable #tt\r\n    class=\"farristreetable\"\r\n    [data]=\"treeData\" \r\n    [columns]=\"cols\" \r\n    [idField]=\"'id'\" \r\n    [showIcon]=\"false\" \r\n    [resizableColumns]=\"true\"\r\n    (nodeSelected)=\"nodeSelected($event)\" \r\n    [fitColumns]=\"true\" \r\n    [showFilterBar]=\"false\"\r\n    [showHeader]=\"true\"\r\n    [enableFindText]=\"true\"\r\n    [fit]=\"true\"\r\n    [disabled]=\"disabled\"\r\n    [fixedHeader]=\"true\"\r\n    [showBorder]=\"false\"\r\n    >\r\n      <ng-template farrisTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n        <tr [selectRow]=\"rowNode\" [dblclick]=\"true\">\r\n          <td *ngFor=\"let col of columns; let i = index\"\r\n          [ngStyle]=\"{'text-align':col.title=='' ?'center':'left'}\">\r\n          <div class=\"treetable-cell-content p-0 d-flex\">\r\n            <farris-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i == 0\"></farris-treeTableToggler>\r\n            <ng-container *ngIf=\"i==0\">\r\n              <div class=\"flex-grow-1 text d-flex\">\r\n                <span id=\"groupAnd\" *ngIf=\"rowData['item']==this.localePipe.transform('And') || rowData['item']==null\"><img src='/platform/common/web/assets/filter-icon/and.svg'></span>\r\n                <span id=\"groupOr\" *ngIf=\"rowData['item']==this.localePipe.transform('Or')\"><img src='/platform/common/web/assets/filter-icon/or.svg'></span>\r\n                <div class=\"flex-grow-1 text\">\r\n                <farris-combo-list *ngIf=\"(rowData['item']==this.localePipe.transform('Or') || rowData['item']==this.localePipe.transform('And') || rowData['item']==null)&& rowData['displaySelect']\"\r\n     \r\n                [(ngModel)]=\"defaultSelectGroup\"\r\n                [idField]=\"'id'\"\r\n                [textField]=\"'id'\"\r\n                [data]=\"relations\" \r\n                (selectChange)=\"selectGroup($event)\">\r\n                </farris-combo-list>\r\n                \r\n                <farris-combo-list *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displaySelect']\"\r\n              \r\n                [(ngModel)]=\"defaultSelectItem\"\r\n                [idField]=\"'value'\"\r\n                [textField]=\"'text'\"\r\n                [data]=\"propertyListInner\" \r\n                (selectChange)=\"selectItem($event)\">\r\n                </farris-combo-list>\r\n              \r\n                <ng-container *ngIf=\"!rowData['displaySelect']\">\r\n                  <span>{{rowData[col.field]}}</span>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"i==1\">\r\n              <farris-combo-list *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displayExpressType']\"\r\n                [(ngModel)]=\"defaultOperatorText\"\r\n                [idField]=\"'id'\"\r\n                [textField]=\"'id'\"\r\n                [data]=\"operators\"\r\n                [panelHeight]=200\r\n                (selectChange)=\"selectOperator($event)\">\r\n              </farris-combo-list>\r\n              <ng-container *ngIf=\"!rowData['displayOperator']\">\r\n                {{rowData[col.field]}}\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"i==2\">\r\n              <farris-combo-list *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displayExpressType']\"\r\n                [(ngModel)]=\"defaultExpressTypeText\"\r\n                [idField]=\"'id'\"\r\n                [textField]=\"'id'\"\r\n                [data]=\"expressTypes\"\r\n                (selectChange)=\"selectExpressType($event)\">\r\n              </farris-combo-list>\r\n              <ng-container *ngIf=\"!rowData['displayExpressType']\">\r\n                {{rowData[col.field]}}\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"i==3\">\r\n              <ng-container *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displayValue']\">\r\n              <div class=\"input-group\">\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"{{ 'PlaceHolder' | locale }}\" aria-describedby=\"button-addon\" [(ngModel)]=\"rowData['value']\"/>\r\n                <button *ngIf=\"rowData['expressType']==this.localePipe.transform('Expression')\" class=\"btn btn-outline-secondary\" style=\"border: none;width: 25px;padding-left: 4px\" type=\"button\" id=\"button-addon\" (click)=\"openExpressEditor()\"><span class=\"f-icon f-icon-windows\"></span></button>\r\n              </div>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"!rowData['displayValue']\">\r\n                <span style=\"display: inline-block;overflow: hidden;width: 100%\">{{rowData[col.field]}}</span>\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"i==4\">\r\n                <div class=\"btn-group mr-3\" fDropdown>\r\n                  <button class=\"btn btn-link\" fDropdownToggle type=\"button\">\r\n                    {{ 'Add' | locale }}\r\n                  </button>\r\n                  <div class=\"dropdown-menu\" fDropdownMenu>\r\n                    <li class=\"dropdown-item\" (click)=\"addGroup()\"><span>{{ 'AddGroup' | locale }}</span></li>\r\n                    <li class=\"dropdown-item\" (click)=\"addItem()\"><span>{{ 'AddItem' | locale }}</span></li>\r\n                  </div>\r\n                </div>\r\n                <button style=\"padding-left: 16px;\" type=\"button\" class=\"btn btn-link\" (click)=\"deleteNode(rowData['id'])\">{{ 'Delete' | locale }}</button> \r\n            </ng-container>\r\n          </div>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </farris-treetable>\r\n</div>\r\n",
                providers: [ExpressionService, PropertyAdapter],
                encapsulation: ViewEncapsulation.None,
                styles: [".lpopup kendo-button-list{height:250px;overflow-y:auto}.footer{position:fixed;bottom:0;left:0;right:0}.farristreetable .farris-treetable .farris-treetable-tbody tr td{overflow:inherit}.filter{height:100%}"]
            }] }
];
/** @nocollapse */
FilterExpressionComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: PropertyAdapter },
    { type: NotifyService },
    { type: Injector },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
FilterExpressionComponent.propDecorators = {
    tt: [{ type: ViewChild, args: ['tt',] }],
    contextEntity: [{ type: Input }],
    expressionText: [{ type: Input }],
    expressionSchema: [{ type: Input }],
    expressionInjectedEntities: [{ type: Input }],
    expressionCDT: [{ type: Input }],
    propertyList: [{ type: Input }],
    filterExpressionString: [{ type: Input }],
    schemaName: [{ type: Input }],
    schema: [{ type: Input }],
    newSchema: [{ type: Input }],
    injectedEntity: [{ type: Input }],
    gspCommonObject: [{ type: Input }],
    disabled: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilterExpressionComponent.prototype.localePipe;
    /** @type {?} */
    FilterExpressionComponent.prototype.treeDataTemp;
    /** @type {?} */
    FilterExpressionComponent.prototype.tt;
    /** @type {?} */
    FilterExpressionComponent.prototype.contextEntity;
    /** @type {?} */
    FilterExpressionComponent.prototype.expressionText;
    /** @type {?} */
    FilterExpressionComponent.prototype.expressionSchema;
    /** @type {?} */
    FilterExpressionComponent.prototype.expressionInjectedEntities;
    /** @type {?} */
    FilterExpressionComponent.prototype.expressionCDT;
    /** @type {?} */
    FilterExpressionComponent.prototype.propertyList;
    /** @type {?} */
    FilterExpressionComponent.prototype.filterExpressionString;
    /** @type {?} */
    FilterExpressionComponent.prototype.schemaName;
    /** @type {?} */
    FilterExpressionComponent.prototype.schema;
    /** @type {?} */
    FilterExpressionComponent.prototype.newSchema;
    /** @type {?} */
    FilterExpressionComponent.prototype.filterNewSchemaMap;
    /** @type {?} */
    FilterExpressionComponent.prototype.injectedEntity;
    /** @type {?} */
    FilterExpressionComponent.prototype.gspCommonObject;
    /** @type {?} */
    FilterExpressionComponent.prototype.disabled;
    /** @type {?} */
    FilterExpressionComponent.prototype.propertyListInner;
    /** @type {?} */
    FilterExpressionComponent.prototype.operators;
    /** @type {?} */
    FilterExpressionComponent.prototype.stringOperators;
    /** @type {?} */
    FilterExpressionComponent.prototype.NumberOperators;
    /** @type {?} */
    FilterExpressionComponent.prototype.relations;
    /** @type {?} */
    FilterExpressionComponent.prototype.expressTypes;
    /** @type {?} */
    FilterExpressionComponent.prototype.filterExpression;
    /** @type {?} */
    FilterExpressionComponent.prototype.nodeTemp;
    /** @type {?} */
    FilterExpressionComponent.prototype.defaultSelectGroup;
    /** @type {?} */
    FilterExpressionComponent.prototype.defaultSelectItem;
    /** @type {?} */
    FilterExpressionComponent.prototype.defaultOperatorText;
    /** @type {?} */
    FilterExpressionComponent.prototype.defaultExpressTypeText;
    /** @type {?} */
    FilterExpressionComponent.prototype.displayPopup;
    /** @type {?} */
    FilterExpressionComponent.prototype.filterExpressionPre;
    /** @type {?} */
    FilterExpressionComponent.prototype.checkFilterStruc;
    /** @type {?} */
    FilterExpressionComponent.prototype.filterSchemaMap;
    /** @type {?} */
    FilterExpressionComponent.prototype.adapter;
    /** @type {?} */
    FilterExpressionComponent.prototype.treeData;
    /** @type {?} */
    FilterExpressionComponent.prototype.columnWidth;
    /**
     * @type {?}
     * @private
     */
    FilterExpressionComponent.prototype.notifies;
    /** @type {?} */
    FilterExpressionComponent.prototype.cols;
    /**
     * @type {?}
     * @private
     */
    FilterExpressionComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    FilterExpressionComponent.prototype.propertyAdapter;
    /**
     * @type {?}
     * @private
     */
    FilterExpressionComponent.prototype.notifyservice;
    /**
     * @type {?}
     * @private
     */
    FilterExpressionComponent.prototype.injector;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,