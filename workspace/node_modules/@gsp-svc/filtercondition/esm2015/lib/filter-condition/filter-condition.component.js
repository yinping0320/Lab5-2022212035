/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, EventEmitter, Output, Inject, LOCALE_ID } from '@angular/core';
import { TreeTableComponent } from '@farris/ui-treetable';
import { FilterExpression, ExpressionItem } from '../filter-expression-entity';
import { ExpressionService } from '@gsp-svc/expression';
import { ExpressTypeEnum, RelationTypeEnum, CompareTypeEnum } from '../typeinfo';
import { PropertyDataType } from '../property-entity';
import { FilterInjectedEntity } from '../injected-entity';
import { ViewEncapsulation } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { FilterConditionLocalePipe } from '../filter-condition-locale.pipe';
/**
 * 过滤条件弹出框逻辑类
 */
export class FilterConditionComponent {
    /**
     * @param {?} expr
     * @param {?} notifyservice
     * @param {?} localeId
     */
    constructor(expr, notifyservice, localeId) {
        this.expr = expr;
        this.notifyservice = notifyservice;
        //关闭窗口事件
        this.closed = new EventEmitter();
        this.result = new EventEmitter();
        //预置计算表达式上下文实体
        this.contextEntity = [];
        //预置计算默认表达式显示
        this.expressionText = "";
        //预置计算表达式中的schema
        this.expressionSchema = [];
        //预置计算表达式中的注入实体
        this.expressionInjectedEntities = [];
        //预置计算表达式cdt集
        this.expressionCDT = [];
        //预置属性列表
        this.propertyList = [];
        //预置过滤表达式串
        this.filterExpressionString = null;
        //预置过滤表达式schema
        this.schemaMap = new Map();
        //==============新加入的newSchemaMap=======================
        //预置过滤表达式newSchema
        this.newSchemaMap = new Map();
        //========================================================
        //预置过滤表达式注入实体
        this.injectedEntity = new FilterInjectedEntity();
        //预置计算表达式弹出框宽度
        this.exprWinWidth = 850;
        this.popupSettings = {
            popupClass: "lpopup"
        };
        this.operatorView = [];
        //操作比较符集
        this.operators = [];
        this.stringOperators = [];
        this.NumberOperators = [];
        //关系集
        this.relations = [];
        //表达式类型集
        this.expressTypes = [];
        //判断是否保存编辑后的过滤表达式
        this.isEdited = false;
        this.displayPopup = false;
        this.groupIcon = '<span class="f-icon f-icon-windows"></span>';
        this.treeData = [];
        //消息提示
        this.notifies = {};
        localeId = localStorage.getItem('languageCode');
        this.localePipe = new FilterConditionLocalePipe(localeId);
    }
    //初始化，复制treeData值,treeDataTemp用于转换为FilterExpression实体
    /**
     * @return {?}
     */
    ngOnInit() {
        //并且树形表绑定的显示的列 
        this.cols = [
            { field: 'item', title: this.localePipe.transform("Item"), width: 271 },
            { field: 'operator', title: this.localePipe.transform("Operator"), width: 191 },
            { field: 'expressType', title: this.localePipe.transform("ExpressType"), width: 180 },
            { field: 'value', title: this.localePipe.transform("Value"), width: 214 },
            { field: 'operation', title: this.localePipe.transform("Operation"), width: 130 }
        ];
        if (!(this.filterExpressionString) || this.filterExpressionString == "") {
            this.treeData = [
                {
                    data: {
                        "id": 1,
                        //树形结构中每个节点的id
                        "item": this.localePipe.transform("And"),
                        //属性项
                        "propertyDataType": null,
                        //属性数据类型
                        "operator": null,
                        //操作比较符
                        "expressType": null,
                        //表达式类型
                        "value": null,
                        //值
                        "displaySelect": false,
                        //选择项显示
                        "displayOperator": false,
                        //操作符项显示
                        "displayExpressType": false,
                        //表达式类型显示
                        "displayValue": false,
                        //值显示
                        "parentItem": null //父子项 
                    },
                    children: [],
                    //子节点集合
                    expanded: true //是否展开
                }
            ];
        }
        else {
            this.filterExpressionPre = JSON.parse(this.filterExpressionString);
            this.treeData.push(this.unConvert(this.filterExpressionPre));
            this.treeData[0].data.id = 1;
        }
        this.treeDataTemp = this.treeData;
        this.defaultSelectItem = this.localePipe.transform("SelectItem");
        this.defaultExpressTypeText = this.localePipe.transform("Value");
        this.defaultSelectGroup = this.localePipe.transform("And");
        this.defaultOperatorText = this.localePipe.transform("GreaterThan");
        this.notifies = {
            1: { type: 'success', msg: this.localePipe.transform("Success") },
            2: { type: 'warning', msg: this.localePipe.transform("Warning_SelectRelation") },
            3: { type: 'warning', msg: this.localePipe.transform("Warning_ContainsFilters") },
            4: { type: 'warning', msg: this.localePipe.transform("Warning_ConditionsComplete") },
            5: { type: 'warning', msg: this.localePipe.transform("Warning_NumericMatch") }
        };
        this.expressTypes = [
            { id: this.localePipe.transform("Value") },
            { id: this.localePipe.transform("Expression") }
        ];
        this.relations = [
            { id: this.localePipe.transform("And") },
            { id: this.localePipe.transform("Or") },
        ];
        this.operators = [
            { id: this.localePipe.transform("GreaterThan") },
            { id: this.localePipe.transform("GreaterThanOrEqual") },
            { id: this.localePipe.transform("LessThan") },
            { id: this.localePipe.transform("LessThanOrEqual") },
            { id: this.localePipe.transform("Equal") },
            { id: this.localePipe.transform("NotEqual") },
            { id: this.localePipe.transform("Contains") },
            { id: this.localePipe.transform("NotContains") },
            { id: this.localePipe.transform("StartsWith") },
            { id: this.localePipe.transform("EndsWith") },
            { id: this.localePipe.transform("NotStartsWith") },
            { id: this.localePipe.transform("NotEndsWith") },
            { id: this.localePipe.transform("IsNull") },
            { id: this.localePipe.transform("IsNotNull") },
            { id: this.localePipe.transform("In") },
            { id: this.localePipe.transform("NotIn") },
        ];
        this.NumberOperators = [
            { id: this.localePipe.transform("GreaterThan") },
            { id: this.localePipe.transform("GreaterThanOrEqual") },
            { id: this.localePipe.transform("LessThan") },
            { id: this.localePipe.transform("LessThanOrEqual") },
            { id: this.localePipe.transform("Equal") },
            { id: this.localePipe.transform("NotEqual") },
            { id: this.localePipe.transform("IsNull") },
            { id: this.localePipe.transform("IsNotNull") },
        ];
        this.stringOperators = [
            { id: this.localePipe.transform("Equal") },
            { id: this.localePipe.transform("NotEqual") },
            { id: this.localePipe.transform("Contains") },
            { id: this.localePipe.transform("NotContains") },
            { id: this.localePipe.transform("StartsWith") },
            { id: this.localePipe.transform("EndsWith") },
            { id: this.localePipe.transform("NotStartsWith") },
            { id: this.localePipe.transform("NotEndsWith") },
            { id: this.localePipe.transform("IsNull") },
            { id: this.localePipe.transform("IsNotNull") },
        ];
    }
    /**
     * 树形表中节点选择触发函数
     * @param {?} $event 所选节点信息
     * @return {?}
     */
    nodeSelected($event) {
        //隐藏掉所有的节点选择编辑框，包括子节点的
        this.hideNodeEditor(this.treeData);
        //将所选节点比较项、表达式类型项、值编辑框显示，并将所选对应数据赋给默认项进行显示 
        this.defaultOperatorText = $event.node.data.operator;
        this.defaultExpressTypeText = $event.node.data.expressType;
        if ($event.node.data.item == this.localePipe.transform("And") || $event.node.data.item == this.localePipe.transform("Or")) {
            this.defaultSelectGroup = $event.node.data.item;
        }
        else if ($event.node.data.item !== this.localePipe.transform("SelectProperty")) {
            /** @type {?} */
            let properties = this.propertyList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.text == $event.node.data.item));
            this.defaultSelectItem = properties[0].value;
            if (properties[0].propertyDataType == PropertyDataType.String) {
                this.operatorView = this.stringOperators;
            }
            else if (properties[0].propertyDataType == PropertyDataType.Int16 ||
                properties[0].propertyDataType == PropertyDataType.Int32 ||
                properties[0].propertyDataType == PropertyDataType.Int64 ||
                properties[0].propertyDataType == PropertyDataType.Decimal ||
                properties[0].propertyDataType == PropertyDataType.Double) {
                this.operatorView = this.NumberOperators;
            }
            else
                this.operatorView = this.operators;
        }
        $event.node.data.displayOperator = true;
        $event.node.data.displayExpressType = true;
        $event.node.data.displayValue = true;
        $event.node.data.displaySelect = true;
    }
    ;
    /**
     * 隐藏掉所有的节点选择编辑框，包括子节点的
     * @param {?} treeNodes 树形表绑定结构
     * @return {?}
     */
    hideNodeEditor(treeNodes) {
        treeNodes.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            element.data.displayOperator = false;
            element.data.displayExpressType = false;
            element.data.displayValue = false;
            element.data.displaySelect = false;
            //若有子节点，则将其子节点的编辑选择框隐藏
            if ((element.children) && element.children.length != 0) {
                this.hideNodeEditor(element.children);
            }
        }));
    }
    ;
    /**
     *
     * 选择逻辑集时
     * @param {?} $event
     * @return {?}
     */
    selectGroup($event) {
        this.propertyNodeOperate($event, this.treeData, 0 /* Group */);
    }
    /**
     *
     * 选择项时
     * @param {?} $event
     * @return {?}
     */
    selectItem($event) {
        this.propertyNodeOperate($event, this.treeData, 1 /* Item */);
    }
    /**
     * 选择比较操作符时
     * @param {?} $event 比较操作项信息
     * @return {?}
     */
    selectOperator($event) {
        this.propertyNodeOperate($event, this.treeData, 2 /* Operation */);
    }
    ;
    /**
     * 选择值类型时
     * @param {?} $event 值类型项信息
     * @return {?}
     */
    selectExpressType($event) {
        this.propertyNodeOperate($event, this.treeData, 3 /* Valuetype */);
    }
    ;
    /**
     * 选择结束后隐藏该字段选择框
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} fieldType 所选字段
     * @return {?}
     */
    hideFieldEditor(treeNodes, fieldType) {
        //找到所操作的节点，根据所选择的字段将对应选择编辑框隐藏
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (this.tt.isSelected(treeNode)) {
                switch (fieldType) {
                    case 1 /* Item */:
                        treeNode.data.displaySelect = false;
                        break;
                    case 2 /* Operation */:
                        treeNode.data.displayOperator = false;
                        break;
                    case 3 /* Valuetype */:
                        treeNode.data.displayExpressType = false;
                        break;
                }
                return;
            }
            //若未找到所选节点，则找其子节点
            else if ((treeNode.children) && treeNode.children.length != 0) {
                this.hideFieldEditor(treeNode.children, fieldType);
            }
        }));
    }
    /**
     * 打开计算表达式编辑器
     * @return {?}
     */
    openExpressEditor() {
        /** @type {?} */
        let that = this;
        //预置计算表达式弹出框宽度
        //this.expr.addWindowWidth(this.exprWinWidth);
        //添加预置上下文变量
        if (this.contextEntity && this.contextEntity.length != 0) {
            this.contextEntity.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                this.expr.addContext(element);
            }));
        }
        //添加预置表达式文本
        /** @type {?} */
        let selectNode = this.isSelected(this.treeData);
        if ((selectNode) && (selectNode.data.value != "") && (selectNode.data.value != null)) {
            this.expr.addExpressionText(selectNode.data.value);
        }
        else
            this.expr.addExpressionText(this.expressionText);
        //添加注入实体
        this.expressionInjectedEntities.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.expr.addInjectedEntity(element.name, element.schemaName, element.injectedName, element.injectedType);
        }));
        //添加schema
        this.expressionSchema.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.expr.addSchema(element.name, element.schema);
        }));
        //添加cdt
        this.expr.addCDT(this.expressionCDT);
        //打开表达式编辑器并返回编辑结果
        this.expr.buildExpression().then((/**
         * @param {?} info
         * @return {?}
         */
        info => {
            /** @type {?} */
            let expressInfo = info;
            this.displayExpressResult(that.treeData, expressInfo);
        }));
    }
    /**
     * 选中节点选择
     * @param {?} treeNodes 关系组
     * @return {?}
     */
    isSelected(treeNodes) {
        /** @type {?} */
        let treeNode;
        for (var i = 0; i < treeNodes.length; i++) {
            if (this.tt.isSelected(treeNodes[i])) {
                treeNode = treeNodes[i];
                break;
            }
            //若在该层节点中未找到所选节点，则找其子节点
            else if ((treeNodes[i].children) && treeNodes[i].children.length != 0) {
                treeNode = this.isSelected(treeNodes[i].children);
                if ((treeNode))
                    break;
            }
        }
        return treeNode;
    }
    /**
     * 将计算表达式结果展示到对应节点
     * @param {?} treeNodes 树表绑定结构
     * @param {?} expressInfo 计算表达式得到结果
     * @return {?}
     */
    displayExpressResult(treeNodes, expressInfo) {
        //找到所选节点实体，并将计算表达式所得结果赋给对应属性进行显示
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (this.tt.isSelected(treeNode)) {
                treeNode.data.value = expressInfo;
                return;
            }
            //若在该层节点中未找到所选节点，则找其子节点
            else if ((treeNode.children) && treeNode.children.length != 0) {
                this.displayExpressResult(treeNode.children, expressInfo);
            }
            //若仍未找到，则不进行任何操作
        }));
    }
    /**
     * 关系选择按钮选择事件
     * @param {?} $event 选择按钮所选信息
     * @return {?}
     */
    itemClick($event) {
        //若选择添加关系
        if ($event.value == RelationTypeEnum.AddRelation) {
            this.addNode(this.treeData, this.localePipe.transform("And"), null, null);
        }
        //若选择添加属性
        else if ($event.value == RelationTypeEnum.AddProperty) {
            this.addNode(this.treeData, this.localePipe.transform("SelectProperty"), this.localePipe.transform("Equal"), this.localePipe.transform("Value"));
        }
        else
            this.propertyNodeOperate($event, this.treeData, 1 /* Item */);
    }
    /**
     * 选择属性节点操作
     * 对新添加的属性节点进行逻辑处理
     * @param {?} event
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} fieldType 节点类型
     * @return {?}
     */
    propertyNodeOperate(event, treeNodes, fieldType) {
        treeNodes.forEach((/**
         * @param {?} treenode
         * @return {?}
         */
        treenode => {
            if (this.tt.isSelected(treenode)) {
                //对所选节点进行赋值操作
                switch (fieldType) {
                    case 0 /* Group */:
                        {
                            treenode.data.item = event.data.id;
                            this.defaultSelectGroup = event.data.id;
                        }
                        break;
                    case 1 /* Item */:
                        {
                            treenode.data.item = event.data.text;
                            this.defaultSelectItem = event.data.value;
                            treenode.data.parentItem = event.data.parentItem;
                            treenode.data.propertyDataType = event.data.propertyDataType;
                            if (treenode.data.propertyDataType == PropertyDataType.String) {
                                this.operatorView = this.stringOperators;
                            }
                            else if (treenode.data.propertyDataType == PropertyDataType.Int16 ||
                                treenode.data.propertyDataType == PropertyDataType.Int32 ||
                                treenode.data.propertyDataType == PropertyDataType.Int64 ||
                                treenode.data.propertyDataType == PropertyDataType.Decimal ||
                                treenode.data.propertyDataType == PropertyDataType.Double) {
                                this.operatorView = this.NumberOperators;
                            }
                            else
                                this.operatorView = this.operators;
                        }
                        break;
                    case 2 /* Operation */:
                        {
                            treenode.data.operator = event.data.id;
                            this.defaultOperatorText = event.data.id;
                        }
                        break;
                    case 3 /* Valuetype */:
                        {
                            treenode.data.expressType = event.data.id;
                            this.defaultExpressTypeText = event.data.id;
                        }
                        break;
                }
                return;
            }
            //否则对其子节点进行赋值操作
            else if ((treenode.children) && treenode.children.length != 0) {
                this.propertyNodeOperate(event, treenode.children, fieldType);
            }
        }));
    }
    /**
     * 根据所选为关系或者属性对新节点进行初始化
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} defaultString 新节点显示默认值
     * @param {?} defaultOperator
     * @param {?} defalutExpressType
     * @return {?}
     */
    addNode(treeNodes, defaultString, defaultOperator, defalutExpressType) {
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (this.tt.isSelected(treeNode)) {
                //若关系值为空
                if (!(treeNode.data.item)) {
                    this.notifyservice[this.notifies['2'].type]({
                        msg: this.notifies['2'].msg
                    });
                    return;
                }
                //若为所选的关系节点，则在其子项里添加新子节点
                /** @type {?} */
                let newNode = {
                    data: {
                        "item": defaultString,
                        "propertyDataType": null,
                        //属性数据类型
                        "operator": defaultOperator,
                        "expressType": defalutExpressType,
                        "value": null,
                        "id": Math.random(),
                        "parentItem": null
                    },
                    parent: treeNode,
                    children: [],
                    expanded: true
                };
                //向该所选节点的子项添加新节点
                treeNode.children.push(newNode);
                return;
            }
            //若未找到所选节点，且该节点子项不为空，则在其子项中查找所选节点
            else if ((treeNode.children) && treeNode.children.length != 0) {
                this.addNode(treeNode.children, defaultString, defaultOperator, defalutExpressType);
            }
        }));
        this.tt.updateSerializedValue();
    }
    /**
     * 删除节点
     * @param {?} $event
     * @return {?}
     */
    deleteNode($event) {
        this.onDelete(this.treeData, $event);
    }
    /**
     * 删除节点具体实现类
     * @param {?} treeNodes 树形表绑定结构
     * @param {?} id
     * @return {?}
     */
    onDelete(treeNodes, id) {
        treeNodes.forEach((/**
         * @param {?} treeNode
         * @return {?}
         */
        treeNode => {
            if (treeNode.data.id == id) {
                if (treeNode.data.id == 1) {
                    this.treeData = [
                        {
                            data: {
                                "id": 1,
                                //树形结构中每个节点的id
                                "propertyDataType": null,
                                //属性数据类型
                                "item": this.localePipe.transform("And"),
                                //属性项
                                "operator": null,
                                //操作比较符
                                "expressType": null,
                                //表达式类型
                                "value": null,
                                //值
                                "displaySelect": false,
                                //选择项显示
                                "displayOperator": false,
                                //操作符项显示
                                "displayExpressType": false,
                                //表达式类型显示
                                "displayValue": false,
                                //值显示
                                "parentItem": null //父项
                            },
                            children: [],
                            //子节点集合
                            expanded: true //是否展开
                        }
                    ];
                    return;
                }
                //所选节点所在数
                /** @type {?} */
                let index = treeNodes.indexOf(treeNode);
                //将所选节点剔除
                treeNodes.splice(index, 1);
            }
            else if ((treeNode.children) && treeNode.children.length != 0) {
                treeNode.children = this.onDelete(treeNode.children, id);
            }
        }));
        this.tt.updateSerializedValue();
        return treeNodes;
    }
    /**
     * 确定
     * 生成过滤表达式
     * @return {?}
     */
    onConfirm() {
        this.treeDataTemp = this.treeData;
        /** @type {?} */
        let isNull = true;
        /** @type {?} */
        let isMatch = true;
        if (this.checkNull(this.treeDataTemp[0].children, isNull) && this.checkMatch(this.treeDataTemp[0].children, isMatch)) {
            this.filterExpression = new FilterExpression();
            //根据树形数据结构转化为过滤表达式实体
            this.convert(this.filterExpression, this.treeDataTemp[0]);
            this.isEdited = true;
            this.notifyservice[this.notifies['1'].type]({
                msg: this.notifies['1'].msg
            });
            this.close();
            this.closed.emit("close");
        }
    }
    //递归检查整个过滤表达式是否有漏填的项
    /**
     * @param {?} treeNodes
     * @param {?} isNull
     * @return {?}
     */
    checkNull(treeNodes, isNull) {
        for (var i = 0; i < treeNodes.length; i++) {
            if (treeNodes[i].data.item == this.localePipe.transform("And") || treeNodes[i].data.item == this.localePipe.transform("Or")) {
                if (!(treeNodes[i].children) || treeNodes[i].children.length == 0) {
                    this.notifyservice[this.notifies['3'].type]({
                        msg: this.notifies['3'].msg
                    });
                    isNull = false;
                    break;
                }
                else if (!this.checkNull(treeNodes[i].children, isNull)) {
                    isNull = false;
                    break;
                }
            }
            else {
                if (!(treeNodes[i].data.item) || treeNodes[i].data.item == this.localePipe.transform("SelectProperty")
                    || !(treeNodes[i].data.operator) || !(treeNodes[i].data.expressType)
                    || treeNodes[i].data.value == null || treeNodes[i].data.value == undefined) {
                    this.notifyservice[this.notifies['4'].type]({
                        msg: this.notifies['4'].msg
                    });
                    isNull = false;
                    break;
                }
            }
        }
        return isNull;
    }
    /**
     * 重置
     * 重置为初始状态
     * @return {?}
     */
    onCancel() {
        this.isEdited = false;
        if (this.filterExpressionString == null || this.filterExpressionString == "") {
            this.treeData = [
                {
                    data: {
                        "id": 1,
                        //树形结构中每个节点的id
                        "item": null,
                        //属性项
                        "propertyDataType": null,
                        //属性数据类型
                        "operator": null,
                        //操作比较符
                        "expressType": null,
                        //表达式类型
                        "value": null,
                        //值
                        "displaySelect": false,
                        //选择项显示
                        "displayOperator": false,
                        //操作符项显示
                        "displayExpressType": false,
                        //表达式类型显示
                        "displayValue": false,
                        //值显示
                        "parentItem": null //父项
                    },
                    children: [],
                    //子节点集合
                    expanded: true //是否展开
                }
            ];
        }
        else {
            this.filterExpressionPre = JSON.parse(this.filterExpressionString);
            this.treeData = [];
            this.treeData.push(this.unConvert(this.filterExpressionPre));
            this.treeData[0].data.id = 1;
        }
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.closed.emit("close");
    }
    /**
     * 关闭窗口
     * @return {?}
     */
    close() {
        if (this.isEdited == true) {
            //若只包含关系项则返回空
            if (this.filterExpression.expressItems.length == 0)
                this.result.next(null);
            //若最后一次点了确定，则将过滤表达式JSON序列化输出
            else
                this.result.next(JSON.stringify(this.filterExpression));
        }
        //若未点确定，默认无任何编辑文本，则输出空串
        else
            this.result.next(this.filterExpressionString);
    }
    /**
     * 将treeData转化为filetrExpression实体
     * @param {?} filterExpression 过滤表达式实体
     * @param {?} treeNode 最外层的treeNode
     * @return {?}
     */
    convert(filterExpression, treeNode) {
        //得到最外层的关系符
        filterExpression.relationOperator = this.typeMatch(treeNode.data.item);
        //若其子项不为空
        if (treeNode.children.length != 0) {
            //对其每一个子项进行转化操作
            treeNode.children.forEach((/**
             * @param {?} treeNodeItem
             * @return {?}
             */
            treeNodeItem => {
                //若子项为并且、或者，则新建复杂过滤表达式
                if (this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.And ||
                    this.typeMatch(treeNodeItem.data.item) == RelationTypeEnum.Or) {
                    /** @type {?} */
                    let filterExpressionItem = new FilterExpression();
                    filterExpression.expressItems.push(this.convert(filterExpressionItem, treeNodeItem));
                }
                //若子项为属性表达式
                else {
                    /** @type {?} */
                    let filterItem = new ExpressionItem();
                    //根据属性名展示值找到其在预置列表中的语义化值，将语义化值赋给实体保存
                    /** @type {?} */
                    let properties = this.propertyList.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.text == treeNodeItem.data.item));
                    filterItem.propertyName = properties[0].value;
                    filterItem.propertyDataType = treeNodeItem.data.propertyDataType;
                    filterItem.operator = this.typeMatch(treeNodeItem.data.operator);
                    filterItem.expressType = this.typeMatch(treeNodeItem.data.expressType);
                    filterItem.value = treeNodeItem.data.value;
                    filterItem.parentItem = treeNodeItem.data.parentItem;
                    //若为数值型比较，则将value值强制转换为数字
                    if (filterItem.expressType == ExpressTypeEnum.Value &&
                        (filterItem.operator == CompareTypeEnum.GreaterThan
                            || filterItem.operator == CompareTypeEnum.GreaterThanOrEqual
                            || filterItem.operator == CompareTypeEnum.LessThan
                            || filterItem.operator == CompareTypeEnum.LessThanOrEqual)) {
                        filterItem.value = Number(treeNodeItem.data.value);
                    }
                    if (filterItem.expressType == ExpressTypeEnum.Value &&
                        (filterItem.operator == CompareTypeEnum.Equal
                            || filterItem.operator == CompareTypeEnum.NotEqual)) {
                        if (filterItem.propertyDataType == PropertyDataType.Decimal
                            || filterItem.propertyDataType == PropertyDataType.Double
                            || filterItem.propertyDataType == PropertyDataType.Int16
                            || filterItem.propertyDataType == PropertyDataType.Int32
                            || filterItem.propertyDataType == PropertyDataType.Int64) {
                            filterItem.value = Number(treeNodeItem.data.value);
                        }
                    }
                    //将子项放入父项的字段中
                    filterExpression.expressItems.push(filterItem);
                }
            }));
        }
        return filterExpression;
    }
    /**
     * filetrExpression反转化为TreeNode
     * @param {?} filterExpress 待转化的filetrExpression实体
     * @return {?}
     */
    unConvert(filterExpress) {
        /** @type {?} */
        let treeData = {
            data: {
                "id": Math.random(),
                //树形结构中每个节点的id
                "item": this.relationTypeReverseMatch(filterExpress.relationOperator),
                //属性项
                "propertyDataType": null,
                //属性数据类型
                "operator": null,
                //操作比较符
                "expressType": null,
                //表达式类型
                "value": null,
                //值
                "displaySelect": false,
                //选择项显示
                "displayOperator": false,
                //操作符项显示
                "displayExpressType": false,
                //表达式类型显示
                "displayValue": false,
                //值显示
                "parentItem": null //父项
            },
            children: [],
            //子节点集合
            expanded: true //是否展开
        };
        //对于每一个子项
        filterExpress.expressItems.forEach((/**
         * @param {?} expressItem
         * @return {?}
         */
        expressItem => {
            /** @type {?} */
            let filterExpressItem = (/** @type {?} */ (expressItem));
            //若子项为FilterExpression类型，赋值
            if ((filterExpressItem.relationOperator == RelationTypeEnum.And || filterExpressItem.relationOperator == RelationTypeEnum.Or)) {
                /** @type {?} */
                let treeDataChild = this.unConvert(filterExpressItem);
                treeDataChild.data.parent = treeData; //添加父节点
                treeData.children.push(treeDataChild);
            }
            else //若子项为ExpressionItem类型，赋值
             {
                /** @type {?} */
                let expressionItem = (/** @type {?} */ (expressItem));
                /** @type {?} */
                let properties = this.propertyList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.value == expressionItem.propertyName));
                /** @type {?} */
                let treeDataChild = {
                    data: {
                        "id": Math.random(),
                        //树形结构中每个节点的id
                        "item": properties[0].text,
                        //属性项
                        "propertyDataType": expressionItem.propertyDataType,
                        //属性数据类型
                        "operator": this.operatorReverseMatch(expressionItem.operator),
                        //操作比较符
                        "expressType": this.expressTypeReverseMatch(expressionItem.expressType),
                        //表达式类型
                        "value": expressionItem.value,
                        //值
                        "parentItem": expressionItem.parentItem //父项
                    },
                    parent: treeData,
                    //添加父节点
                    children: [],
                    //子节点集合
                    expanded: true //是否展开
                };
                treeData.children.push(treeDataChild);
            }
        }));
        return treeData;
    }
    /**
     *
     * 添加条件项
     * @return {?}
     */
    addItem() {
        this.defaultSelectItem = this.localePipe.transform("SelectItem");
        this.hideNodeEditor(this.treeData);
        this.addNode(this.treeData, this.localePipe.transform("SelectProperty"), this.localePipe.transform("Equal"), this.localePipe.transform("Value"));
    }
    /**
     *
     * 添加条件组
     * @return {?}
     */
    addGroup() {
        this.addNode(this.treeData, this.localePipe.transform("And"), null, null);
    }
    /**
     * 类型信息匹配
     * @param {?} type 类型
     * @return {?}
     */
    typeMatch(type) {
        switch (type) {
            case this.localePipe.transform("And"): return RelationTypeEnum.And;
            case this.localePipe.transform("Or"): return RelationTypeEnum.Or;
            case this.localePipe.transform("GreaterThan"): return CompareTypeEnum.GreaterThan;
            case this.localePipe.transform("GreaterThanOrEqual"): return CompareTypeEnum.GreaterThanOrEqual;
            case this.localePipe.transform("LessThan"): return CompareTypeEnum.LessThan;
            case this.localePipe.transform("LessThanOrEqual"): return CompareTypeEnum.LessThanOrEqual;
            case this.localePipe.transform("Equal"): return CompareTypeEnum.Equal;
            case this.localePipe.transform("NotEqual"): return CompareTypeEnum.NotEqual;
            case this.localePipe.transform("Contains"): return CompareTypeEnum.Contains;
            case this.localePipe.transform("NotContains"): return CompareTypeEnum.NotContains;
            case this.localePipe.transform("StartsWith"): return CompareTypeEnum.StartsWith;
            case this.localePipe.transform("EndsWith"): return CompareTypeEnum.EndsWith;
            case this.localePipe.transform("NotStartsWith"): return CompareTypeEnum.NotStartsWith;
            case this.localePipe.transform("NotEndsWith"): return CompareTypeEnum.NotEndsWith;
            case this.localePipe.transform("IsNull"): return CompareTypeEnum.IsNull;
            case this.localePipe.transform("IsNotNull"): return CompareTypeEnum.IsNotNull;
            case this.localePipe.transform("In"): return CompareTypeEnum.In;
            case this.localePipe.transform("NotIn"): return CompareTypeEnum.NotIn;
            case this.localePipe.transform("Value"): return ExpressTypeEnum.Value;
            case this.localePipe.transform("Expression"): return ExpressTypeEnum.Expression;
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    relationTypeReverseMatch(type) {
        switch (type) {
            case RelationTypeEnum.And: return this.localePipe.transform("And");
            case RelationTypeEnum.Or: return this.localePipe.transform("Or");
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    operatorReverseMatch(type) {
        switch (type) {
            case CompareTypeEnum.GreaterThan: return this.localePipe.transform("GreaterThan");
            case CompareTypeEnum.GreaterThanOrEqual: return this.localePipe.transform("GreaterThanOrEqual");
            case CompareTypeEnum.LessThan: return this.localePipe.transform("LessThan");
            case CompareTypeEnum.LessThanOrEqual: return this.localePipe.transform("LessThanOrEqual");
            case CompareTypeEnum.Equal: return this.localePipe.transform("Equal");
            case CompareTypeEnum.NotEqual: return this.localePipe.transform("NotEqual");
            case CompareTypeEnum.Contains: return this.localePipe.transform("Contains");
            case CompareTypeEnum.NotContains: return this.localePipe.transform("NotContains");
            case CompareTypeEnum.StartsWith: return this.localePipe.transform("StartsWith");
            case CompareTypeEnum.EndsWith: return this.localePipe.transform("EndsWith");
            case CompareTypeEnum.NotStartsWith: return this.localePipe.transform("NotStartsWith");
            case CompareTypeEnum.NotEndsWith: return this.localePipe.transform("NotEndsWith");
            case CompareTypeEnum.IsNull: return this.localePipe.transform("IsNull");
            case CompareTypeEnum.IsNotNull: return this.localePipe.transform("IsNotNull");
            case CompareTypeEnum.In: return this.localePipe.transform("In");
            case CompareTypeEnum.NotIn: return this.localePipe.transform("NotIn");
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    expressTypeReverseMatch(type) {
        switch (type) {
            case ExpressTypeEnum.Value: return this.localePipe.transform("Value");
            case ExpressTypeEnum.Expression: return this.localePipe.transform("Expression");
        }
    }
    /**
     * @return {?}
     */
    onfocus() {
        this.displayPopup = true;
    }
    /**
     * @return {?}
     */
    onblur() {
        this.displayPopup = false;
    }
    /**
     * @param {?} treeNodes
     * @param {?} isMatch
     * @return {?}
     */
    checkMatch(treeNodes, isMatch) {
        for (var i = 0; i < treeNodes.length; i++) {
            if (treeNodes[i].data.item != this.localePipe.transform("And") && treeNodes[i].data.item != this.localePipe.transform("Or")) {
                if (treeNodes[i].data.expressType == this.localePipe.transform("Value")) {
                    if ((treeNodes[i].data.propertyDataType == PropertyDataType.Int16 || treeNodes[i].data.propertyDataType == PropertyDataType.Int32 || treeNodes[i].data.propertyDataType == PropertyDataType.Int64) && isNaN(treeNodes[i].data.value)) {
                        this.notifyservice[this.notifies['5'].type]({
                            msg: this.notifies['5'].msg
                        });
                        isMatch = false;
                        break;
                    }
                }
            }
            else
                isMatch = this.checkMatch(treeNodes[i].children, isMatch);
        }
        return isMatch;
    }
}
FilterConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-condition',
                template: "<div class=\"filter \">   \r\n    <farris-treetable #tt\r\n    class=\"farristreetable\"\r\n    [data]=\"treeData\" \r\n    [columns]=\"cols\" \r\n    [idField]=\"'id'\" \r\n    [showIcon]=\"false\" \r\n    [resizableColumns]=\"true\"\r\n    (nodeSelected)=\"nodeSelected($event)\" \r\n    [fitColumns]=\"true\" \r\n    [showFilterBar]=\"false\"\r\n    [showHeader]=\"true\"\r\n    [enableFindText]=\"true\"\r\n    [fit]=\"true\"\r\n    [fixedHeader]=\"true\"\r\n    [showBorder]=\"false\"\r\n    >\r\n      <ng-template farrisTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n        <tr [selectRow]=\"rowNode\" [dblclick]=\"true\">\r\n          <td *ngFor=\"let col of columns; let i = index\"\r\n          [ngStyle]=\"{'text-align':col.title=='' ?'center':'left'}\">\r\n            <farris-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i == 0\"></farris-treeTableToggler>\r\n            <ng-container *ngIf=\"i==0\">\r\n                <span style=\"display: inline-block;\" id=\"groupAnd\" *ngIf=\"rowData['item']==this.localePipe.transform('And') || rowData['item']==null\"><img src='/platform/common/web/assets/filter-icon/and.svg'></span>\r\n                <span style=\"display: inline-block;\" id=\"groupOr\" *ngIf=\"rowData['item']==this.localePipe.transform('Or')\"><img src='/platform/common/web/assets/filter-icon/or.svg'></span>\r\n\r\n                <farris-combo-list *ngIf=\"(rowData['item']==this.localePipe.transform('Or') || rowData['item']==this.localePipe.transform('And') || rowData['item']==null)&& rowData['displaySelect']\"\r\n                style=\"display: inline-block;\"\r\n                [(ngModel)]=\"defaultSelectGroup\"\r\n                [idField]=\"'id'\"\r\n                [textField]=\"'id'\"\r\n                [data]=\"relations\" \r\n                (selectChange)=\"selectGroup($event)\">\r\n                </farris-combo-list>\r\n                <farris-combo-list *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displaySelect']\"\r\n                style=\"display: inline-block;\"\r\n                [(ngModel)]=\"defaultSelectItem\"\r\n                [idField]=\"'value'\"\r\n                [textField]=\"'text'\"\r\n                [data]=\"propertyList\" \r\n                (selectChange)=\"selectItem($event)\">\r\n                </farris-combo-list>\r\n                <ng-container *ngIf=\"!rowData['displaySelect']\">\r\n                     {{rowData[col.field]}}\r\n                </ng-container>\r\n            </ng-container>\r\n          \r\n            <ng-container *ngIf=\"i==1\">\r\n              <farris-combo-list *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displayExpressType']\"\r\n                [(ngModel)]=\"defaultOperatorText\"\r\n                [idField]=\"'id'\"\r\n                [textField]=\"'id'\"\r\n                [data]=\"operatorView\"\r\n                [panelHeight]=200\r\n                (selectChange)=\"selectOperator($event)\">\r\n              </farris-combo-list>\r\n              <ng-container *ngIf=\"!rowData['displayOperator']\">\r\n                {{rowData[col.field]}}\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"i==2\">\r\n              <farris-combo-list *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displayExpressType']\"\r\n                [(ngModel)]=\"defaultExpressTypeText\"\r\n                [idField]=\"'id'\"\r\n                [textField]=\"'id'\"\r\n                [data]=\"expressTypes\"\r\n                (selectChange)=\"selectExpressType($event)\">\r\n              </farris-combo-list>\r\n              <ng-container *ngIf=\"!rowData['displayExpressType']\">\r\n                {{rowData[col.field]}}\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"i==3\">\r\n              <ng-container *ngIf=\"rowData['item']!=this.localePipe.transform('Or') && rowData['item']!=this.localePipe.transform('And') && rowData['item']!=null && rowData['displayValue']\">\r\n              <div class=\"input-group\">\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"{{ 'PlaceHolder' | locale }}\" aria-describedby=\"button-addon\" [(ngModel)]=\"rowData['value']\"/>\r\n                <button *ngIf=\"rowData['expressType']==this.localePipe.transform('Expression')\" class=\"btn btn-outline-secondary\" style=\"border: none;width: 25px;padding-left: 4px\" type=\"button\" id=\"button-addon\" (click)=\"openExpressEditor()\"><span class=\"f-icon f-icon-windows\"></span></button>\r\n              </div>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"!rowData['displayValue']\">\r\n                <span style=\"display: inline-block;overflow: hidden;width: 100%\">{{rowData[col.field]}}</span>\r\n              </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"i==4\">\r\n                <div class=\"btn-group mr-3\" fDropdown>\r\n                  <button class=\"btn btn-link\" fDropdownToggle type=\"button\">\r\n                    {{ 'Add' | locale }}\r\n                  </button>\r\n                  <div class=\"dropdown-menu\" fDropdownMenu>\r\n                    <li class=\"dropdown-item\" (click)=\"addGroup()\"><span> {{ 'AddGroup' | locale }}</span></li>\r\n                    <li class=\"dropdown-item\" (click)=\"addItem()\"><span> {{ 'AddItem' | locale }}</span></li>\r\n                  </div>\r\n                </div>\r\n                <button style=\"padding-left: 16px;\" type=\"button\" class=\"btn btn-link\" (click)=\"deleteNode(rowData['id'])\">{{ 'Delete' | locale }}</button> \r\n            </ng-container>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </farris-treetable>\r\n</div>\r\n<div class=\"modal-footer footer\">\r\n  <button type=\"button\" class=\"btn f-btn-mr btn-primary\" (click)=\"onConfirm()\">{{ 'Confirm' | locale }}</button>\r\n  <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"onCancel()\">{{ 'Reset' | locale }}</button>\r\n  <button type=\"button\" class=\"k-button k-button-icon k-flat\" (click)=\"cancle()\">{{ 'Cancle' | locale }}</button>\r\n</div>\r\n",
                providers: [ExpressionService],
                encapsulation: ViewEncapsulation.None,
                styles: [".lpopup kendo-button-list{height:250px;overflow-y:auto}.footer{position:fixed;bottom:0;left:0;right:0}.farristreetable .farris-treetable .farris-treetable-tbody tr td{overflow:inherit}.filter{padding-left:20px;padding-right:20px}"]
            }] }
];
/** @nocollapse */
FilterConditionComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: NotifyService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
FilterConditionComponent.propDecorators = {
    tt: [{ type: ViewChild, args: ['tt',] }],
    closed: [{ type: Output }],
    result: [{ type: Output }],
    contextEntity: [{ type: Input }],
    expressionText: [{ type: Input }],
    expressionSchema: [{ type: Input }],
    expressionInjectedEntities: [{ type: Input }],
    expressionCDT: [{ type: Input }],
    propertyList: [{ type: Input }],
    filterExpressionString: [{ type: Input }],
    schemaMap: [{ type: Input }],
    newSchemaMap: [{ type: Input }],
    injectedEntity: [{ type: Input }],
    exprWinWidth: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilterConditionComponent.prototype.localePipe;
    /** @type {?} */
    FilterConditionComponent.prototype.treeDataTemp;
    /** @type {?} */
    FilterConditionComponent.prototype.tt;
    /** @type {?} */
    FilterConditionComponent.prototype.closed;
    /** @type {?} */
    FilterConditionComponent.prototype.result;
    /** @type {?} */
    FilterConditionComponent.prototype.contextEntity;
    /** @type {?} */
    FilterConditionComponent.prototype.expressionText;
    /** @type {?} */
    FilterConditionComponent.prototype.expressionSchema;
    /** @type {?} */
    FilterConditionComponent.prototype.expressionInjectedEntities;
    /** @type {?} */
    FilterConditionComponent.prototype.expressionCDT;
    /** @type {?} */
    FilterConditionComponent.prototype.propertyList;
    /** @type {?} */
    FilterConditionComponent.prototype.filterExpressionString;
    /** @type {?} */
    FilterConditionComponent.prototype.schemaMap;
    /** @type {?} */
    FilterConditionComponent.prototype.newSchemaMap;
    /** @type {?} */
    FilterConditionComponent.prototype.injectedEntity;
    /** @type {?} */
    FilterConditionComponent.prototype.exprWinWidth;
    /** @type {?} */
    FilterConditionComponent.prototype.popupSettings;
    /** @type {?} */
    FilterConditionComponent.prototype.operatorView;
    /** @type {?} */
    FilterConditionComponent.prototype.operators;
    /** @type {?} */
    FilterConditionComponent.prototype.stringOperators;
    /** @type {?} */
    FilterConditionComponent.prototype.NumberOperators;
    /** @type {?} */
    FilterConditionComponent.prototype.relations;
    /** @type {?} */
    FilterConditionComponent.prototype.expressTypes;
    /** @type {?} */
    FilterConditionComponent.prototype.filterExpression;
    /** @type {?} */
    FilterConditionComponent.prototype.nodeTemp;
    /** @type {?} */
    FilterConditionComponent.prototype.defaultSelectGroup;
    /** @type {?} */
    FilterConditionComponent.prototype.defaultSelectItem;
    /** @type {?} */
    FilterConditionComponent.prototype.defaultOperatorText;
    /** @type {?} */
    FilterConditionComponent.prototype.defaultExpressTypeText;
    /** @type {?} */
    FilterConditionComponent.prototype.isEdited;
    /** @type {?} */
    FilterConditionComponent.prototype.filterExpressionPre;
    /** @type {?} */
    FilterConditionComponent.prototype.displayPopup;
    /** @type {?} */
    FilterConditionComponent.prototype.cols;
    /** @type {?} */
    FilterConditionComponent.prototype.groupIcon;
    /** @type {?} */
    FilterConditionComponent.prototype.treeData;
    /**
     * @type {?}
     * @private
     */
    FilterConditionComponent.prototype.notifies;
    /**
     * @type {?}
     * @private
     */
    FilterConditionComponent.prototype.itemValue;
    /**
     * @type {?}
     * @private
     */
    FilterConditionComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    FilterConditionComponent.prototype.notifyservice;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,