/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FilterEntityType } from "./schema";
import { GSPElementDataType, GSPElementObjectType } from "@gsp-bef/gsp-cm-metadata";
import { PropertyEntity, PropertyDataType } from "./property-entity";
import { NavigationProperty, NavigationType } from "./navigation-property-entity";
import { NewDataType, NewEntityType, NewProperty, NewNavigationProperty, NewNavigationType } from "./NewSchema";
var Adapter = /** @class */ (function () {
    function Adapter() {
    }
    /**
     * @param {?} commonObject
     * @return {?}
     */
    Adapter.prototype.convertCO = /**
     * @param {?} commonObject
     * @return {?}
     */
    function (commonObject) {
        /** @type {?} */
        var entityTypes = [];
        entityTypes.push(this.adaptCO(commonObject, entityTypes));
        return entityTypes;
    };
    /**
     * CO转化递归方法
     * @param gspCO 待转化gspCO
     * @param entityTypes 从gspCO提取的所有主从表
     */
    /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    Adapter.prototype.adaptCO = /**
     * CO转化递归方法
     * @private
     * @param {?} gspCO 待转化gspCO
     * @param {?} entityTypes 从gspCO提取的所有主从表
     * @return {?}
     */
    function (gspCO, entityTypes) {
        var _this = this;
        /** @type {?} */
        var entityType = new FilterEntityType();
        entityType.name = gspCO.Code;
        entityType.displayName = gspCO.Name;
        //每个属性转化
        if ((gspCO.ContainElements) && gspCO.ContainElements.length != 0) {
            gspCO.ContainElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (!element.IsUdt && element.ObjectType != GSPElementObjectType.Association) {
                    /** @type {?} */
                    var property = new PropertyEntity();
                    property.name = element.Code;
                    property.displayName = element.Name;
                    property.propertyDataType = _this.convertPropertyDataType(element.MDataType);
                    entityType.properties.push(property);
                }
            }));
        }
        ;
        //子表转化为导航属性
        if ((gspCO.ContainChildObjects) && gspCO.ContainChildObjects.length != 0) {
            gspCO.ContainChildObjects.forEach((/**
             * @param {?} childObject
             * @return {?}
             */
            function (childObject) {
                /** @type {?} */
                var naviproperty = new NavigationProperty();
                naviproperty.displayName = childObject.Name;
                naviproperty.name = childObject.Code + "s";
                naviproperty.navigationEntity = childObject.Code;
                naviproperty.navigationType = NavigationType.EntityType;
                entityType.navigationProperties.push(naviproperty);
                entityTypes.push(_this.adaptCO(childObject, entityTypes));
            }));
        }
        ;
        return entityType;
    };
    /**
     * 属性数据类型转换
     */
    /**
     * 属性数据类型转换
     * @private
     * @param {?} dataType
     * @return {?}
     */
    Adapter.prototype.convertPropertyDataType = /**
     * 属性数据类型转换
     * @private
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        switch (dataType) {
            case GSPElementDataType.String:
            case GSPElementDataType.Text:
                return PropertyDataType.String;
            case GSPElementDataType.Integer:
                return PropertyDataType.Int32;
            case GSPElementDataType.Decimal:
                return PropertyDataType.Decimal;
            case GSPElementDataType.DateTime:
            case GSPElementDataType.Date:
                return PropertyDataType.DateTime;
            case GSPElementDataType.Boolean:
                return PropertyDataType.Boolean;
            case GSPElementDataType.Binary:
                return PropertyDataType.Array;
            default: return null;
        }
    };
    //=====================================转换CO---->NewSchema===================================
    /**
     * @description 将CO转化为NewEntityType[]
     * @param co 待转换CO
     * @returns NewEntityType[] NewEntityType[]
     */
    //=====================================转换CO---->NewSchema===================================
    /**
     * \@description 将CO转化为NewEntityType[]
     * @param {?} co 待转换CO
     * @return {?} NewEntityType[] NewEntityType[]
     */
    Adapter.prototype.convertCOOfNewSchema = 
    //=====================================转换CO---->NewSchema===================================
    /**
     * \@description 将CO转化为NewEntityType[]
     * @param {?} co 待转换CO
     * @return {?} NewEntityType[] NewEntityType[]
     */
    function (co) {
        /** @type {?} */
        var types = [];
        types.push(this.adaptCOOfNewSchema(co, types));
        return types;
    };
    /**
     * @description 将CO转化为NewEntityType[]
     * @param co 待转换CO
     * @param types 数组:EntityType[]
     * @returns NewEntityType[] NewEntityType[]
     */
    /**
     * \@description 将CO转化为NewEntityType[]
     * @param {?} co 待转换CO
     * @param {?} types 数组:EntityType[]
     * @return {?} NewEntityType[] NewEntityType[]
     */
    Adapter.prototype.adaptCOOfNewSchema = /**
     * \@description 将CO转化为NewEntityType[]
     * @param {?} co 待转换CO
     * @param {?} types 数组:EntityType[]
     * @return {?} NewEntityType[] NewEntityType[]
     */
    function (co, types) {
        var _this = this;
        /** @type {?} */
        var type = new NewEntityType();
        type.code = co.Code;
        type.name = co.Name;
        //一般属性转化
        if (co.ContainElements && co.ContainElements.length > 0) {
            co.ContainElements.forEach((/**
             * @param {?} ele
             * @return {?}
             */
            function (ele) {
                if (!ele.IsUdt && ele.ObjectType != GSPElementObjectType.Association) {
                    /** @type {?} */
                    var pro = new NewProperty();
                    pro.code = ele.Code;
                    pro.name = ele.Name;
                    pro.dataType = _this.convertCOEleTypeProType(ele.MDataType);
                    type.properties.push(pro);
                }
            }));
        }
        //导航属性转化
        if (co.ContainChildObjects && co.ContainChildObjects.length > 0) {
            co.ContainChildObjects.forEach((/**
             * @param {?} obj
             * @return {?}
             */
            function (obj) {
                /** @type {?} */
                var naPro = new NewNavigationProperty();
                naPro.code = obj.Code + "s";
                naPro.name = obj.Name;
                naPro.navigationName = obj.ID;
                naPro.navigationType = NewNavigationType.EntityType;
                naPro.relationShip = "";
                type.navigationProperties.push(naPro);
                types.push(_this.adaptCOOfNewSchema((/** @type {?} */ (obj)), types));
            }));
        }
        return type;
    };
    /**
     * @description 将BE定义的字段类型转换为统一Schema的字段类型
     * @param dataType BE定义的属性类型
     * @returns NewDataType 统一Schema的属性类型
     */
    /**
     * \@description 将BE定义的字段类型转换为统一Schema的字段类型
     * @param {?} dataType BE定义的属性类型
     * @return {?} NewDataType 统一Schema的属性类型
     */
    Adapter.prototype.convertCOEleTypeProType = /**
     * \@description 将BE定义的字段类型转换为统一Schema的字段类型
     * @param {?} dataType BE定义的属性类型
     * @return {?} NewDataType 统一Schema的属性类型
     */
    function (dataType) {
        /** @type {?} */
        var type = NewDataType.String;
        switch (dataType) {
            case GSPElementDataType.String:
            case GSPElementDataType.Text:
                type = NewDataType.String;
                break;
            case GSPElementDataType.Integer:
                type = NewDataType.Integer;
                break;
            case GSPElementDataType.Decimal:
                type = NewDataType.Decimal;
                break;
            case GSPElementDataType.DateTime:
                type = NewDataType.DateTime;
                break;
            case GSPElementDataType.Date:
                type = NewDataType.Date;
                break;
            case GSPElementDataType.Boolean:
                type = NewDataType.Boolean;
                break;
            case GSPElementDataType.Binary:
                type = NewDataType.Byte;
                break;
        }
        return type;
    };
    return Adapter;
}());
export { Adapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2ZpbHRlcmNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDNUMsT0FBTyxFQUFxQyxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZILE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLHFCQUFxQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWhIO0lBQUE7SUFxSkEsQ0FBQzs7Ozs7SUFwSlUsMkJBQVM7Ozs7SUFBaEIsVUFBaUIsWUFBNkI7O1lBQ3RDLFdBQVcsR0FBdUIsRUFBRTtRQUN4QyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDMUQsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQztJQUNEOzs7O09BSUc7Ozs7Ozs7O0lBQ0sseUJBQU87Ozs7Ozs7SUFBZixVQUFnQixLQUF1QixFQUFFLFdBQStCO1FBQXhFLGlCQTZCQzs7WUE1Qk8sVUFBVSxHQUFHLElBQUksZ0JBQWdCLEVBQUU7UUFDdkMsVUFBVSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQzdCLFVBQVUsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNwQyxRQUFRO1FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLE1BQU0s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TUFBTTtZQUNWLEtBQUssa0JBQWtCLENBQUMsT0FBTztnQkFDM0IsSUFBSSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7Z0JBQzNCLE1BQU07WUFDVixLQUFLLGtCQUFrQixDQUFDLE1BQU07Z0JBQzFCLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUN4QixNQUFNO1NBQ2I7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUwsY0FBQztBQUFELENBQUMsQUFySkQsSUFxSkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJFbnRpdHlUeXBlIH0gZnJvbSBcIi4vc2NoZW1hXCI7XHJcbmltcG9ydCB7IEdTUENvbW1vbk9iamVjdCwgSUdTUENvbW1vbk9iamVjdCwgR1NQRWxlbWVudERhdGFUeXBlLCBHU1BFbGVtZW50T2JqZWN0VHlwZSB9IGZyb20gXCJAZ3NwLWJlZi9nc3AtY20tbWV0YWRhdGFcIjtcclxuaW1wb3J0IHsgUHJvcGVydHlFbnRpdHksIFByb3BlcnR5RGF0YVR5cGUgfSBmcm9tIFwiLi9wcm9wZXJ0eS1lbnRpdHlcIjtcclxuaW1wb3J0IHsgTmF2aWdhdGlvblByb3BlcnR5LCBOYXZpZ2F0aW9uVHlwZSB9IGZyb20gXCIuL25hdmlnYXRpb24tcHJvcGVydHktZW50aXR5XCI7XHJcbmltcG9ydCB7IE5ld0RhdGFUeXBlLCBOZXdFbnRpdHlUeXBlLCBOZXdQcm9wZXJ0eSwgTmV3TmF2aWdhdGlvblByb3BlcnR5LCBOZXdOYXZpZ2F0aW9uVHlwZSB9IGZyb20gXCIuL05ld1NjaGVtYVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFkYXB0ZXIge1xyXG4gICAgcHVibGljIGNvbnZlcnRDTyhjb21tb25PYmplY3Q6IEdTUENvbW1vbk9iamVjdCk6IEZpbHRlckVudGl0eVR5cGVbXSB7XHJcbiAgICAgICAgbGV0IGVudGl0eVR5cGVzOiBGaWx0ZXJFbnRpdHlUeXBlW10gPSBbXTtcclxuICAgICAgICBlbnRpdHlUeXBlcy5wdXNoKHRoaXMuYWRhcHRDTyhjb21tb25PYmplY3QsIGVudGl0eVR5cGVzKSk7XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eVR5cGVzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDT+i9rOWMlumAkuW9kuaWueazlVxyXG4gICAgICogQHBhcmFtIGdzcENPIOW+hei9rOWMlmdzcENPXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5VHlwZXMg5LuOZ3NwQ0/mj5Dlj5bnmoTmiYDmnInkuLvku47ooahcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhZGFwdENPKGdzcENPOiBJR1NQQ29tbW9uT2JqZWN0LCBlbnRpdHlUeXBlczogRmlsdGVyRW50aXR5VHlwZVtdKTogRmlsdGVyRW50aXR5VHlwZSB7XHJcbiAgICAgICAgbGV0IGVudGl0eVR5cGUgPSBuZXcgRmlsdGVyRW50aXR5VHlwZSgpO1xyXG4gICAgICAgIGVudGl0eVR5cGUubmFtZSA9IGdzcENPLkNvZGU7XHJcbiAgICAgICAgZW50aXR5VHlwZS5kaXNwbGF5TmFtZSA9IGdzcENPLk5hbWU7XHJcbiAgICAgICAgLy/mr4/kuKrlsZ7mgKfovazljJZcclxuICAgICAgICBpZiAoKGdzcENPLkNvbnRhaW5FbGVtZW50cykgJiYgZ3NwQ08uQ29udGFpbkVsZW1lbnRzLmxlbmd0aCAhPSAwKSB7XHJcbiAgICAgICAgICAgIGdzcENPLkNvbnRhaW5FbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LklzVWR0ICYmIGVsZW1lbnQuT2JqZWN0VHlwZSAhPSBHU1BFbGVtZW50T2JqZWN0VHlwZS5Bc3NvY2lhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eUVudGl0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5Lm5hbWUgPSBlbGVtZW50LkNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuZGlzcGxheU5hbWUgPSBlbGVtZW50Lk5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkucHJvcGVydHlEYXRhVHlwZSA9IHRoaXMuY29udmVydFByb3BlcnR5RGF0YVR5cGUoZWxlbWVudC5NRGF0YVR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eVR5cGUucHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvL+WtkOihqOi9rOWMluS4uuWvvOiIquWxnuaAp1xyXG4gICAgICAgIGlmICgoZ3NwQ08uQ29udGFpbkNoaWxkT2JqZWN0cykgJiYgZ3NwQ08uQ29udGFpbkNoaWxkT2JqZWN0cy5sZW5ndGggIT0gMCkge1xyXG4gICAgICAgICAgICBnc3BDTy5Db250YWluQ2hpbGRPYmplY3RzLmZvckVhY2goY2hpbGRPYmplY3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5hdmlwcm9wZXJ0eSA9IG5ldyBOYXZpZ2F0aW9uUHJvcGVydHkoKTtcclxuICAgICAgICAgICAgICAgIG5hdmlwcm9wZXJ0eS5kaXNwbGF5TmFtZSA9IGNoaWxkT2JqZWN0Lk5hbWU7XHJcbiAgICAgICAgICAgICAgICBuYXZpcHJvcGVydHkubmFtZSA9IGNoaWxkT2JqZWN0LkNvZGUgKyBcInNcIjtcclxuICAgICAgICAgICAgICAgIG5hdmlwcm9wZXJ0eS5uYXZpZ2F0aW9uRW50aXR5ID0gY2hpbGRPYmplY3QuQ29kZTtcclxuICAgICAgICAgICAgICAgIG5hdmlwcm9wZXJ0eS5uYXZpZ2F0aW9uVHlwZSA9IE5hdmlnYXRpb25UeXBlLkVudGl0eVR5cGU7XHJcbiAgICAgICAgICAgICAgICBlbnRpdHlUeXBlLm5hdmlnYXRpb25Qcm9wZXJ0aWVzLnB1c2gobmF2aXByb3BlcnR5KTtcclxuICAgICAgICAgICAgICAgIGVudGl0eVR5cGVzLnB1c2godGhpcy5hZGFwdENPKGNoaWxkT2JqZWN0LCBlbnRpdHlUeXBlcykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBlbnRpdHlUeXBlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlsZ7mgKfmlbDmja7nsbvlnovovazmjaJcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjb252ZXJ0UHJvcGVydHlEYXRhVHlwZShkYXRhVHlwZTogR1NQRWxlbWVudERhdGFUeXBlKTogUHJvcGVydHlEYXRhVHlwZSB7XHJcbiAgICAgICAgc3dpdGNoIChkYXRhVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEdTUEVsZW1lbnREYXRhVHlwZS5TdHJpbmc6XHJcbiAgICAgICAgICAgIGNhc2UgR1NQRWxlbWVudERhdGFUeXBlLlRleHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvcGVydHlEYXRhVHlwZS5TdHJpbmc7XHJcbiAgICAgICAgICAgIGNhc2UgR1NQRWxlbWVudERhdGFUeXBlLkludGVnZXI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvcGVydHlEYXRhVHlwZS5JbnQzMjtcclxuICAgICAgICAgICAgY2FzZSBHU1BFbGVtZW50RGF0YVR5cGUuRGVjaW1hbDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9wZXJ0eURhdGFUeXBlLkRlY2ltYWw7XHJcbiAgICAgICAgICAgIGNhc2UgR1NQRWxlbWVudERhdGFUeXBlLkRhdGVUaW1lOlxyXG4gICAgICAgICAgICBjYXNlIEdTUEVsZW1lbnREYXRhVHlwZS5EYXRlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb3BlcnR5RGF0YVR5cGUuRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgIGNhc2UgR1NQRWxlbWVudERhdGFUeXBlLkJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvcGVydHlEYXRhVHlwZS5Cb29sZWFuO1xyXG4gICAgICAgICAgICBjYXNlIEdTUEVsZW1lbnREYXRhVHlwZS5CaW5hcnk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvcGVydHlEYXRhVHlwZS5BcnJheTtcclxuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Pei9rOaNokNPLS0tLT5OZXdTY2hlbWE9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOWwhkNP6L2s5YyW5Li6TmV3RW50aXR5VHlwZVtdXHJcbiAgICAgKiBAcGFyYW0gY28g5b6F6L2s5o2iQ09cclxuICAgICAqIEByZXR1cm5zIE5ld0VudGl0eVR5cGVbXSBOZXdFbnRpdHlUeXBlW11cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnZlcnRDT09mTmV3U2NoZW1hKGNvOiBHU1BDb21tb25PYmplY3QpOiBOZXdFbnRpdHlUeXBlW10ge1xyXG4gICAgICAgIGxldCB0eXBlczogTmV3RW50aXR5VHlwZVtdID0gW107XHJcbiAgICAgICAgdHlwZXMucHVzaCh0aGlzLmFkYXB0Q09PZk5ld1NjaGVtYShjbywgdHlwZXMpKTtcclxuICAgICAgICByZXR1cm4gdHlwZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24g5bCGQ0/ovazljJbkuLpOZXdFbnRpdHlUeXBlW11cclxuICAgICAqIEBwYXJhbSBjbyDlvoXovazmjaJDT1xyXG4gICAgICogQHBhcmFtIHR5cGVzIOaVsOe7hDpFbnRpdHlUeXBlW11cclxuICAgICAqIEByZXR1cm5zIE5ld0VudGl0eVR5cGVbXSBOZXdFbnRpdHlUeXBlW11cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkYXB0Q09PZk5ld1NjaGVtYShjbzogR1NQQ29tbW9uT2JqZWN0LCB0eXBlczogTmV3RW50aXR5VHlwZVtdKTogTmV3RW50aXR5VHlwZSB7XHJcbiAgICAgICAgbGV0IHR5cGUgPSBuZXcgTmV3RW50aXR5VHlwZSgpO1xyXG4gICAgICAgIHR5cGUuY29kZSA9IGNvLkNvZGU7XHJcbiAgICAgICAgdHlwZS5uYW1lID0gY28uTmFtZTtcclxuICAgICAgICAvL+S4gOiIrOWxnuaAp+i9rOWMllxyXG4gICAgICAgIGlmIChjby5Db250YWluRWxlbWVudHMgJiYgY28uQ29udGFpbkVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY28uQ29udGFpbkVsZW1lbnRzLmZvckVhY2goZWxlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghZWxlLklzVWR0ICYmIGVsZS5PYmplY3RUeXBlICE9IEdTUEVsZW1lbnRPYmplY3RUeXBlLkFzc29jaWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBybyA9IG5ldyBOZXdQcm9wZXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByby5jb2RlID0gZWxlLkNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvLm5hbWUgPSBlbGUuTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBwcm8uZGF0YVR5cGUgPSB0aGlzLmNvbnZlcnRDT0VsZVR5cGVQcm9UeXBlKGVsZS5NRGF0YVR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvcGVydGllcy5wdXNoKHBybyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL+WvvOiIquWxnuaAp+i9rOWMllxyXG4gICAgICAgIGlmIChjby5Db250YWluQ2hpbGRPYmplY3RzICYmIGNvLkNvbnRhaW5DaGlsZE9iamVjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjby5Db250YWluQ2hpbGRPYmplY3RzLmZvckVhY2gob2JqID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBuYVBybyA9IG5ldyBOZXdOYXZpZ2F0aW9uUHJvcGVydHkoKTtcclxuICAgICAgICAgICAgICAgIG5hUHJvLmNvZGUgPSBvYmouQ29kZSArIFwic1wiO1xyXG4gICAgICAgICAgICAgICAgbmFQcm8ubmFtZSA9IG9iai5OYW1lO1xyXG4gICAgICAgICAgICAgICAgbmFQcm8ubmF2aWdhdGlvbk5hbWUgPSBvYmouSUQ7XHJcbiAgICAgICAgICAgICAgICBuYVByby5uYXZpZ2F0aW9uVHlwZSA9IE5ld05hdmlnYXRpb25UeXBlLkVudGl0eVR5cGU7XHJcbiAgICAgICAgICAgICAgICBuYVByby5yZWxhdGlvblNoaXAgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdHlwZS5uYXZpZ2F0aW9uUHJvcGVydGllcy5wdXNoKG5hUHJvKTtcclxuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2godGhpcy5hZGFwdENPT2ZOZXdTY2hlbWEob2JqIGFzIEdTUENvbW1vbk9iamVjdCwgdHlwZXMpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOWwhkJF5a6a5LmJ55qE5a2X5q6157G75Z6L6L2s5o2i5Li657uf5LiAU2NoZW1h55qE5a2X5q6157G75Z6LXHJcbiAgICAgKiBAcGFyYW0gZGF0YVR5cGUgQkXlrprkuYnnmoTlsZ7mgKfnsbvlnotcclxuICAgICAqIEByZXR1cm5zIE5ld0RhdGFUeXBlIOe7n+S4gFNjaGVtYeeahOWxnuaAp+exu+Wei1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29udmVydENPRWxlVHlwZVByb1R5cGUoZGF0YVR5cGU6IEdTUEVsZW1lbnREYXRhVHlwZSk6IE5ld0RhdGFUeXBlIHtcclxuICAgICAgICBsZXQgdHlwZSA9IE5ld0RhdGFUeXBlLlN0cmluZztcclxuICAgICAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgR1NQRWxlbWVudERhdGFUeXBlLlN0cmluZzpcclxuICAgICAgICAgICAgY2FzZSBHU1BFbGVtZW50RGF0YVR5cGUuVGV4dDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBOZXdEYXRhVHlwZS5TdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBHU1BFbGVtZW50RGF0YVR5cGUuSW50ZWdlcjpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBOZXdEYXRhVHlwZS5JbnRlZ2VyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgR1NQRWxlbWVudERhdGFUeXBlLkRlY2ltYWw6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gTmV3RGF0YVR5cGUuRGVjaW1hbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdTUEVsZW1lbnREYXRhVHlwZS5EYXRlVGltZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBOZXdEYXRhVHlwZS5EYXRlVGltZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdTUEVsZW1lbnREYXRhVHlwZS5EYXRlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IE5ld0RhdGFUeXBlLkRhdGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBHU1BFbGVtZW50RGF0YVR5cGUuQm9vbGVhbjpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBOZXdEYXRhVHlwZS5Cb29sZWFuO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgR1NQRWxlbWVudERhdGFUeXBlLkJpbmFyeTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBOZXdEYXRhVHlwZS5CeXRlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgfVxyXG5cclxufSJdfQ==