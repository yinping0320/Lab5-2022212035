/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FilterInjectedType } from "./injected-entity";
import { NavigationType } from "./navigation-property-entity";
import { PropertyDataType } from ".";
import { NewDataType, NewNavigationType } from "./NewSchema";
var PropertyAdapter = /** @class */ (function () {
    function PropertyAdapter() {
    }
    /**
     * 属性适配器，注入多级实体转化为Array
     * @param injectedEntity 注入的实体
     * @param schemaMap 注入的schema
     */
    /**
     * 属性适配器，注入多级实体转化为Array
     * @param {?} injectedEntity 注入的实体
     * @param {?} schemaMap 注入的schema
     * @return {?}
     */
    PropertyAdapter.prototype.adapter = /**
     * 属性适配器，注入多级实体转化为Array
     * @param {?} injectedEntity 注入的实体
     * @param {?} schemaMap 注入的schema
     * @return {?}
     */
    function (injectedEntity, schemaMap) {
        //根据注入schema名得到schema
        /** @type {?} */
        var schema = schemaMap.get(injectedEntity.schemaName);
        //根据注入类型分别进行转化
        switch (injectedEntity.injectedType) {
            case FilterInjectedType.EntitySet:
                {
                    /** @type {?} */
                    var entitySet = schema.entitySets.find((/**
                     * @param {?} entitySet
                     * @return {?}
                     */
                    function (entitySet) { return entitySet.name == injectedEntity.name; }));
                    return this.convertEntitySet(entitySet, schema);
                }
            case FilterInjectedType.EntityType:
                {
                    /** @type {?} */
                    var entityType = schema.entityTypes.find((/**
                     * @param {?} entityType
                     * @return {?}
                     */
                    function (entityType) { return entityType.name == injectedEntity.name; }));
                    return this.convertEntityType(entityType, schema);
                }
            default: break;
        }
    };
    /**
     * 将实体类转化成Arrray
     * @param entityType 被转换的实体类
     */
    /**
     * 将实体类转化成Arrray
     * @param {?} entityType 被转换的实体类
     * @param {?} schema
     * @return {?}
     */
    PropertyAdapter.prototype.convertEntityType = /**
     * 将实体类转化成Arrray
     * @param {?} entityType 被转换的实体类
     * @param {?} schema
     * @return {?}
     */
    function (entityType, schema) {
        var _this = this;
        /** @type {?} */
        var propertyList = Array();
        //常规属性转化
        entityType.properties.forEach((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            /** @type {?} */
            var propertyListItem = {
                text: property.displayName,
                propertyDataType: property.propertyDataType,
                value: property.name,
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        //导航属性转化
        entityType.navigationProperties.forEach((/**
         * @param {?} navigationProperty
         * @return {?}
         */
        function (navigationProperty) {
            //根据导航属性类型进行转化
            switch (navigationProperty.navigationType) {
                //若导航属性为EntitySet
                case NavigationType.EntitySet:
                    {
                        //根据导航属性名找到schema中的EntitySet
                        /** @type {?} */
                        var entitySet = schema.entitySets.find((/**
                         * @param {?} entitySet
                         * @return {?}
                         */
                        function (entitySet) { return entitySet.name == navigationProperty.navigationEntity; }));
                        //子实体集转化为Array
                        _this.convertEntitySet(entitySet, schema).forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        function (element) {
                            //若子实体中的每个属性父项不为空，则在父项名前添加该导航属性名，例如OrderItem前加Order为Orders.OrderItem
                            if (element.parentItem != null) {
                                element.parentItem = navigationProperty.name + "." + element.parentItem;
                            }
                            //若父项为空，则设置该属性父项为导航属性名
                            else {
                                element.parentItem = navigationProperty.name;
                            }
                            //设置该属性的显示名称
                            element.text = navigationProperty.displayName + "." + element.text;
                            propertyList.push(element);
                        }));
                    }
                    break;
                //若导航属性类型为EntityType
                case NavigationType.EntityType:
                    {
                        //根据导航属性名找到schema中的EntityType
                        /** @type {?} */
                        var entityType_1 = schema.entityTypes.find((/**
                         * @param {?} entityType
                         * @return {?}
                         */
                        function (entityType) { return entityType.name == navigationProperty.navigationEntity; }));
                        //子实体转化为Array
                        _this.convertEntityType(entityType_1, schema).forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        function (element) {
                            //若子实体中的每个属性父项不为空，则在父项名前添加该导航属性名，例如OrderItem前加Order为Order.OrderItem
                            if (element.parentItem != null) {
                                element.parentItem = navigationProperty.name + "." + element.parentItem;
                            }
                            //若父项为空，则设置该属性父项为导航属性名
                            else {
                                element.parentItem = navigationProperty.name;
                            }
                            //设置该属性的显示名称
                            element.text = navigationProperty.displayName + "." + element.text;
                            propertyList.push(element);
                        }));
                    }
                    break;
            }
        }));
        return propertyList;
    };
    /**
     * 实体集转化为属性列表
     * @param entitySet 待转化实体集
     * @param schema 所在schema
     */
    /**
     * 实体集转化为属性列表
     * @param {?} entitySet 待转化实体集
     * @param {?} schema 所在schema
     * @return {?}
     */
    PropertyAdapter.prototype.convertEntitySet = /**
     * 实体集转化为属性列表
     * @param {?} entitySet 待转化实体集
     * @param {?} schema 所在schema
     * @return {?}
     */
    function (entitySet, schema) {
        var _this = this;
        /** @type {?} */
        var propertyList = Array();
        /** @type {?} */
        var entityType = schema.entityTypes.find((/**
         * @param {?} entityType
         * @return {?}
         */
        function (entityType) { return entityType.name == entitySet.entityTypeName; }));
        entityType.properties.forEach((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            /** @type {?} */
            var propertyListItem = {
                text: property.displayName,
                propertyDataType: property.propertyDataType,
                value: property.name,
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        if (entityType.navigationProperties.length != 0) {
            //导航属性转化
            entityType.navigationProperties.forEach((/**
             * @param {?} navigationProperty
             * @return {?}
             */
            function (navigationProperty) {
                switch (navigationProperty.navigationType) {
                    case NavigationType.EntitySet:
                        {
                            /** @type {?} */
                            var entitySet_1 = schema.entitySets.find((/**
                             * @param {?} entitySet
                             * @return {?}
                             */
                            function (entitySet) { return entitySet.name == navigationProperty.navigationEntity; }));
                            _this.convertEntitySet(entitySet_1, schema).forEach((/**
                             * @param {?} element
                             * @return {?}
                             */
                            function (element) {
                                if (element.parentItem != null) {
                                    element.parentItem = navigationProperty.name + "." + element.parentItem;
                                }
                                else {
                                    element.parentItem = navigationProperty.name;
                                }
                                element.text = navigationProperty.displayName + "." + element.text;
                                propertyList.push(element);
                            }));
                        }
                        break;
                    case NavigationType.EntityType:
                        {
                            /** @type {?} */
                            var entityType_2 = schema.entityTypes.find((/**
                             * @param {?} entityType
                             * @return {?}
                             */
                            function (entityType) { return entityType.name == navigationProperty.navigationEntity; }));
                            _this.convertEntityType(entityType_2, schema).forEach((/**
                             * @param {?} element
                             * @return {?}
                             */
                            function (element) {
                                if (element.parentItem != null) {
                                    element.parentItem = navigationProperty.name + "." + element.parentItem;
                                }
                                else {
                                    element.parentItem = navigationProperty.name;
                                }
                                element.text = navigationProperty.displayName + "." + element.text;
                                propertyList.push(element);
                            }));
                        }
                        break;
                }
            }));
        }
        return propertyList;
    };
    //==========================分割线（NewSchema）============================================
    /**
     *
     * @param injectedEntity
     * @param newSchemaMap
     */
    //==========================分割线（NewSchema）============================================
    /**
     *
     * @param {?} injectedEntity
     * @param {?} newSchemaMap
     * @return {?}
     */
    PropertyAdapter.prototype.adapterOfNewSchema = 
    //==========================分割线（NewSchema）============================================
    /**
     *
     * @param {?} injectedEntity
     * @param {?} newSchemaMap
     * @return {?}
     */
    function (injectedEntity, newSchemaMap) {
        //injectedEntity.schemaName找到Schema
        /** @type {?} */
        var schema = newSchemaMap.get(injectedEntity.schemaName);
        //injectedEntity.injectedType确定找sets还是types
        switch (injectedEntity.injectedType) {
            case FilterInjectedType.EntitySet: {
                /** @type {?} */
                var set = schema.entitySets.find((/**
                 * @param {?} set
                 * @return {?}
                 */
                function (set) { return set.code == injectedEntity.name; }));
                return this.convertNewEntitySet(set, schema);
            }
            case FilterInjectedType.EntityType: {
                /** @type {?} */
                var type = schema.entityTypes.find((/**
                 * @param {?} type
                 * @return {?}
                 */
                function (type) { return type.code == injectedEntity.name; }));
                return this.convertNewEntityType(type, schema);
            }
            default:
                break;
        }
    };
    /**
     * @description 转换EntityType
     * @param type NewEntityType
     * @param schema NewSchema
     * @returns
     */
    /**
     * \@description 转换EntityType
     * @param {?} type NewEntityType
     * @param {?} schema NewSchema
     * @return {?}
     */
    PropertyAdapter.prototype.convertNewEntityType = /**
     * \@description 转换EntityType
     * @param {?} type NewEntityType
     * @param {?} schema NewSchema
     * @return {?}
     */
    function (type, schema) {
        var _this = this;
        /** @type {?} */
        var propertyList = Array();
        //property转换
        type.properties.forEach((/**
         * @param {?} pro
         * @return {?}
         */
        function (pro) {
            /** @type {?} */
            var propertyListItem = {
                value: pro.code,
                text: pro.name,
                propertyDataType: _this.convertNewDataType2PropertyDataType(pro.dataType),
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        //navigationProperty转换
        type.navigationProperties.forEach((/**
         * @param {?} naPro
         * @return {?}
         */
        function (naPro) {
            switch (naPro.navigationType) {
                case NewNavigationType.EntitySet:
                    {
                        /** @type {?} */
                        var naProSet = schema.entitySets.find((/**
                         * @param {?} naProSet
                         * @return {?}
                         */
                        function (naProSet) { return naProSet.code == naPro.navigationName; }));
                        _this.convertNewEntitySet(naProSet, schema).forEach((/**
                         * @param {?} ele
                         * @return {?}
                         */
                        function (ele) {
                            if (ele.parentItem != null) {
                                ele.parentItem = naPro.code + "." + ele.parentItem;
                            }
                            else {
                                ele.parentItem = naPro.code;
                            }
                            ele.text = naPro.name + "." + ele.text;
                            propertyList.push(ele);
                        }));
                    }
                    break;
                case NewNavigationType.EntityType:
                    {
                        /** @type {?} */
                        var naProType = schema.entityTypes.find((/**
                         * @param {?} naProType
                         * @return {?}
                         */
                        function (naProType) { return naProType.code == naPro.navigationName; }));
                        _this.convertNewEntityType(naProType, schema).forEach((/**
                         * @param {?} ele
                         * @return {?}
                         */
                        function (ele) {
                            if (ele.parentItem != null) {
                                ele.parentItem = naPro.code + "." + ele.parentItem;
                            }
                            else {
                                ele.parentItem = naPro.code;
                            }
                            ele.text = naPro.name + "." + ele.text;
                            propertyList.push(ele);
                        }));
                    }
                    break;
            }
        }));
        return propertyList;
    };
    /**
     * @param {?} set
     * @param {?} schema
     * @return {?}
     */
    PropertyAdapter.prototype.convertNewEntitySet = /**
     * @param {?} set
     * @param {?} schema
     * @return {?}
     */
    function (set, schema) {
        var _this = this;
        /** @type {?} */
        var propertyList = Array();
        /** @type {?} */
        var type = schema.entityTypes.find((/**
         * @param {?} type
         * @return {?}
         */
        function (type) { return type.code == set.entityType; }));
        type.properties.forEach((/**
         * @param {?} pro
         * @return {?}
         */
        function (pro) {
            /** @type {?} */
            var propertyListItem = {
                value: pro.code,
                text: pro.name,
                propertyDataType: _this.convertNewDataType2PropertyDataType(pro.dataType),
                parentItem: null
            };
            propertyList.push(propertyListItem);
        }));
        if (type.navigationProperties.length != 0) {
            type.navigationProperties.forEach((/**
             * @param {?} naPro
             * @return {?}
             */
            function (naPro) {
                switch (naPro.navigationType) {
                    case NewNavigationType.EntitySet:
                        {
                            /** @type {?} */
                            var naProSet = schema.entitySets.find((/**
                             * @param {?} naProSet
                             * @return {?}
                             */
                            function (naProSet) { return naProSet.code == naPro.navigationName; }));
                            _this.convertNewEntitySet(naProSet, schema).forEach((/**
                             * @param {?} ele
                             * @return {?}
                             */
                            function (ele) {
                                if (ele.parentItem != null) {
                                    ele.parentItem = naPro.code + "." + ele.parentItem;
                                }
                                else {
                                    ele.parentItem = naPro.code;
                                }
                                ele.text = naPro.name + "." + ele.text;
                                propertyList.push(ele);
                            }));
                        }
                        break;
                    case NewNavigationType.EntityType:
                        {
                            /** @type {?} */
                            var naProType = schema.entityTypes.find((/**
                             * @param {?} naProType
                             * @return {?}
                             */
                            function (naProType) { return naProType.code == naPro.navigationName; }));
                            _this.convertNewEntityType(naProType, schema).forEach((/**
                             * @param {?} ele
                             * @return {?}
                             */
                            function (ele) {
                                if (ele.parentItem != null) {
                                    ele.parentItem = naPro.code + "." + ele.parentItem;
                                }
                                else {
                                    ele.parentItem = naPro.code;
                                }
                                ele.text = naPro.name + "." + ele.text;
                                propertyList.push(ele);
                            }));
                        }
                        break;
                }
            }));
        }
        return propertyList;
    };
    /**
     *
     * @param newType 统一Schema的属性
     * @returns
     */
    /**
     *
     * @param {?} newType 统一Schema的属性
     * @return {?}
     */
    PropertyAdapter.prototype.convertNewDataType2PropertyDataType = /**
     *
     * @param {?} newType 统一Schema的属性
     * @return {?}
     */
    function (newType) {
        /** @type {?} */
        var type = PropertyDataType.String;
        switch (newType) {
            case NewDataType.Boolean:
                type = PropertyDataType.Boolean;
                break;
            case NewDataType.Byte:
                type = PropertyDataType.Byte;
                break;
            case NewDataType.Date:
                type = PropertyDataType.DateTime;
                break;
            case NewDataType.DateTime:
                type = PropertyDataType.DateTime;
                break;
            case NewDataType.Decimal:
                type = PropertyDataType.Decimal;
                break;
            case NewDataType.Integer:
                type = PropertyDataType.Int32;
                break;
            case NewDataType.String:
                type = PropertyDataType.String;
                break;
        }
        return type;
    };
    return PropertyAdapter;
}());
export { PropertyAdapter };
if (false) {
    /** @type {?} */
    PropertyAdapter.prototype.entityName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2ZpbHRlcmNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9wcm9wZXJ0eS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXdCLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFN0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUNyQyxPQUFPLEVBQUUsV0FBVyxFQUErQixpQkFBaUIsRUFBYSxNQUFNLGFBQWEsQ0FBQztBQUVyRztJQUFBO0lBNFRBLENBQUM7SUExVEc7Ozs7T0FJRzs7Ozs7OztJQUNILGlDQUFPOzs7Ozs7SUFBUCxVQUFRLGNBQW9DLEVBQUUsU0FBMEM7OztZQUVoRixNQUFNLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO1FBQ3JELGNBQWM7UUFDZCxRQUFRLGNBQWMsQ0FBQyxZQUFZLEVBQUU7WUFDakMsS0FBSyxrQkFBa0IsQ0FBQyxTQUFTO2dCQUM3Qjs7d0JBQ1EsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSTs7OztvQkFBQyxVQUFBLFNBQVMsSUFBSSxPQUFBLFNBQVMsQ0FBQyxJQUFJLElBQUksY0FBYyxDQUFDLElBQUksRUFBckMsQ0FBcUMsRUFBQztvQkFDMUYsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUNuRDtZQUNMLEtBQUssa0JBQWtCLENBQUMsVUFBVTtnQkFDOUI7O3dCQUNRLFVBQVUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUk7Ozs7b0JBQUMsVUFBQSxVQUFVLElBQUksT0FBQSxVQUFVLENBQUMsSUFBSSxJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQXRDLENBQXNDLEVB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Q2hELElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNO1FBQ2xDLFFBQVEsT0FBTyxFQUFFO1lBQ2IsS0FBSyxXQUFXLENBQUMsT0FBTztnQkFDcEIsSUFBSSxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQztnQkFDaEMsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLElBQUk7Z0JBQ2pCLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7Z0JBQzdCLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxJQUFJO2dCQUNqQixJQUFJLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO2dCQUNqQyxNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsUUFBUTtnQkFDckIsSUFBSSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztnQkFDakMsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLE9BQU87Z0JBQ3BCLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7Z0JBQ2hDLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxPQUFPO2dCQUNwQixJQUFJLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO2dCQUM5QixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsTUFBTTtnQkFDbkIsSUFBSSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztnQkFDL0IsTUFBTTtTQUNiO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVMLHNCQUFDO0FBQUQsQ0FBQyxBQTVURCxJQTRUQzs7OztJQTNURyxxQ0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJJbmplY3RlZEVudGl0eSwgRmlsdGVySW5qZWN0ZWRUeXBlIH0gZnJvbSBcIi4vaW5qZWN0ZWQtZW50aXR5XCI7XHJcbmltcG9ydCB7IEZpbHRlckVudGl0eVNjaGVtYSwgRmlsdGVyRW50aXR5VHlwZSwgRmlsdGVyRW50aXR5U2V0IH0gZnJvbSBcIi4vc2NoZW1hXCI7XHJcbmltcG9ydCB7IE5hdmlnYXRpb25UeXBlIH0gZnJvbSBcIi4vbmF2aWdhdGlvbi1wcm9wZXJ0eS1lbnRpdHlcIjtcclxuaW1wb3J0IHsgUHJvcGVydHlEYXRhVHlwZSB9IGZyb20gXCIuXCI7XHJcbmltcG9ydCB7IE5ld0RhdGFUeXBlLCBOZXdFbnRpdHlTZXQsIE5ld0VudGl0eVR5cGUsIE5ld05hdmlnYXRpb25UeXBlLCBOZXdTY2hlbWEgfSBmcm9tIFwiLi9OZXdTY2hlbWFcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eUFkYXB0ZXIge1xyXG4gICAgZW50aXR5TmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDlsZ7mgKfpgILphY3lmajvvIzms6jlhaXlpJrnuqflrp7kvZPovazljJbkuLpBcnJheVxyXG4gICAgICogQHBhcmFtIGluamVjdGVkRW50aXR5IOazqOWFpeeahOWunuS9k1xyXG4gICAgICogQHBhcmFtIHNjaGVtYU1hcCDms6jlhaXnmoRzY2hlbWFcclxuICAgICAqL1xyXG4gICAgYWRhcHRlcihpbmplY3RlZEVudGl0eTogRmlsdGVySW5qZWN0ZWRFbnRpdHksIHNjaGVtYU1hcDogTWFwPHN0cmluZywgRmlsdGVyRW50aXR5U2NoZW1hPikge1xyXG4gICAgICAgIC8v5qC55o2u5rOo5YWlc2NoZW1h5ZCN5b6X5Yiwc2NoZW1hXHJcbiAgICAgICAgbGV0IHNjaGVtYSA9IHNjaGVtYU1hcC5nZXQoaW5qZWN0ZWRFbnRpdHkuc2NoZW1hTmFtZSk7XHJcbiAgICAgICAgLy/moLnmja7ms6jlhaXnsbvlnovliIbliKvov5vooYzovazljJZcclxuICAgICAgICBzd2l0Y2ggKGluamVjdGVkRW50aXR5LmluamVjdGVkVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZpbHRlckluamVjdGVkVHlwZS5FbnRpdHlTZXQ6XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVudGl0eVNldCA9IHNjaGVtYS5lbnRpdHlTZXRzLmZpbmQoZW50aXR5U2V0ID0+IGVudGl0eVNldC5uYW1lID09IGluamVjdGVkRW50aXR5Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRFbnRpdHlTZXQoZW50aXR5U2V0LCBzY2hlbWEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIEZpbHRlckluamVjdGVkVHlwZS5FbnRpdHlUeXBlOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbnRpdHlUeXBlID0gc2NoZW1hLmVudGl0eVR5cGVzLmZpbmQoZW50aXR5VHlwZSA9PiBlbnRpdHlUeXBlLm5hbWUgPT0gaW5qZWN0ZWRFbnRpdHkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydEVudGl0eVR5cGUoZW50aXR5VHlwZSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlsIblrp7kvZPnsbvovazljJbmiJBBcnJyYXlcclxuICAgICAqIEBwYXJhbSBlbnRpdHlUeXBlIOiiq+i9rOaNoueahOWunuS9k+exu1xyXG4gICAgICovXHJcbiAgICBjb252ZXJ0RW50aXR5VHlwZShlbnRpdHlUeXBlOiBGaWx0ZXJFbnRpdHlUeXBlLCBzY2hlbWE6IEZpbHRlckVudGl0eVNjaGVtYSk6IGFueSB7XHJcbiAgICAgICAgbGV0IHByb3BlcnR5TGlzdCA9IEFycmF5PHsgdGV4dDogc3RyaW5nLCBwcm9wZXJ0eURhdGFUeXBlOiBQcm9wZXJ0eURhdGFUeXBlLCB2YWx1ZTogc3RyaW5nLCBwYXJlbnRJdGVtOiBzdHJpbmcgfT4oKTtcclxuICAgICAgICAvL+W4uOinhOWxnuaAp+i9rOWMllxyXG4gICAgICAgIGVudGl0eVR5cGUucHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcclxuICAgICAgICAgICAgbGV0IHByb3BlcnR5TGlzdEl0ZW0gPVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBwcm9wZXJ0eS5kaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGF0YVR5cGU6IHByb3BlcnR5LnByb3BlcnR5RGF0YVR5cGUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHJvcGVydHkubmFtZSxcclxuICAgICAgICAgICAgICAgIHBhcmVudEl0ZW06IG51bGxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcHJvcGVydHlMaXN0LnB1c2gocHJvcGVydHlMaXN0SXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy/lr7zoiKrlsZ7mgKfovazljJZcclxuICAgICAgICBlbnRpdHlUeXBlLm5hdmlnYXRpb25Qcm9wZXJ0aWVzLmZvckVhY2gobmF2aWdhdGlvblByb3BlcnR5ID0+IHtcclxuICAgICAgICAgICAgLy/moLnmja7lr7zoiKrlsZ7mgKfnsbvlnovov5vooYzovazljJZcclxuICAgICAgICAgICAgc3dpdGNoIChuYXZpZ2F0aW9uUHJvcGVydHkubmF2aWdhdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgICAgIC8v6Iul5a+86Iiq5bGe5oCn5Li6RW50aXR5U2V0XHJcbiAgICAgICAgICAgICAgICBjYXNlIE5hdmlnYXRpb25UeXBlLkVudGl0eVNldDpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5qC55o2u5a+86Iiq5bGe5oCn5ZCN5om+5Yiwc2NoZW1h5Lit55qERW50aXR5U2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbnRpdHlTZXQgPSBzY2hlbWEuZW50aXR5U2V0cy5maW5kKGVudGl0eVNldCA9PiBlbnRpdHlTZXQubmFtZSA9PSBuYXZpZ2F0aW9uUHJvcGVydHkubmF2aWdhdGlvbkVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5a2Q5a6e5L2T6ZuG6L2s5YyW5Li6QXJyYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0RW50aXR5U2V0KGVudGl0eVNldCwgc2NoZW1hKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/oi6XlrZDlrp7kvZPkuK3nmoTmr4/kuKrlsZ7mgKfniLbpobnkuI3kuLrnqbrvvIzliJnlnKjniLbpobnlkI3liY3mt7vliqDor6Xlr7zoiKrlsZ7mgKflkI3vvIzkvovlpoJPcmRlckl0ZW3liY3liqBPcmRlcuS4uk9yZGVycy5PcmRlckl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnBhcmVudEl0ZW0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50SXRlbSA9IG5hdmlnYXRpb25Qcm9wZXJ0eS5uYW1lICsgXCIuXCIgKyBlbGVtZW50LnBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iLpeeItumhueS4uuepuu+8jOWImeiuvue9ruivpeWxnuaAp+eItumhueS4uuWvvOiIquWxnuaAp+WQjVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRJdGVtID0gbmF2aWdhdGlvblByb3BlcnR5Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iuvue9ruivpeWxnuaAp+eahOaYvuekuuWQjeensFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0ID0gbmF2aWdhdGlvblByb3BlcnR5LmRpc3BsYXlOYW1lICsgXCIuXCIgKyBlbGVtZW50LnRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eUxpc3QucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICAgICAgICAgIC8v6Iul5a+86Iiq5bGe5oCn57G75Z6L5Li6RW50aXR5VHlwZVxyXG4gICAgICAgICAgICAgICAgY2FzZSBOYXZpZ2F0aW9uVHlwZS5FbnRpdHlUeXBlOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/moLnmja7lr7zoiKrlsZ7mgKflkI3mib7liLBzY2hlbWHkuK3nmoRFbnRpdHlUeXBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbnRpdHlUeXBlID0gc2NoZW1hLmVudGl0eVR5cGVzLmZpbmQoZW50aXR5VHlwZSA9PiBlbnRpdHlUeXBlLm5hbWUgPT0gbmF2aWdhdGlvblByb3BlcnR5Lm5hdmlnYXRpb25FbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+WtkOWunuS9k+i9rOWMluS4ukFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydEVudGl0eVR5cGUoZW50aXR5VHlwZSwgc2NoZW1hKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/oi6XlrZDlrp7kvZPkuK3nmoTmr4/kuKrlsZ7mgKfniLbpobnkuI3kuLrnqbrvvIzliJnlnKjniLbpobnlkI3liY3mt7vliqDor6Xlr7zoiKrlsZ7mgKflkI3vvIzkvovlpoJPcmRlckl0ZW3liY3liqBPcmRlcuS4uk9yZGVyLk9yZGVySXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50SXRlbSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRJdGVtID0gbmF2aWdhdGlvblByb3BlcnR5Lm5hbWUgKyBcIi5cIiArIGVsZW1lbnQucGFyZW50SXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6Iul54i26aG55Li656m677yM5YiZ6K6+572u6K+l5bGe5oCn54i26aG55Li65a+86Iiq5bGe5oCn5ZCNXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudEl0ZW0gPSBuYXZpZ2F0aW9uUHJvcGVydHkubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6K6+572u6K+l5bGe5oCn55qE5pi+56S65ZCN56ewXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRleHQgPSBuYXZpZ2F0aW9uUHJvcGVydHkuZGlzcGxheU5hbWUgKyBcIi5cIiArIGVsZW1lbnQudGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlzdC5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvcGVydHlMaXN0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlrp7kvZPpm4bovazljJbkuLrlsZ7mgKfliJfooahcclxuICAgICAqIEBwYXJhbSBlbnRpdHlTZXQg5b6F6L2s5YyW5a6e5L2T6ZuGXHJcbiAgICAgKiBAcGFyYW0gc2NoZW1hIOaJgOWcqHNjaGVtYVxyXG4gICAgICovXHJcbiAgICBjb252ZXJ0RW50aXR5U2V0KGVudGl0eVNldDogRmlsdGVyRW50aXR5U2V0LCBzY2hlbWE6IEZpbHRlckVudGl0eVNjaGVtYSk6IGFueSB7XHJcbiAgICAgICAgbGV0IHByb3BlcnR5TGlzdCA9IEFycmF5PHsgdGV4dDogc3RyaW5nLCBwcm9wZXJ0eURhdGFUeXBlOiBQcm9wZXJ0eURhdGFUeXBlLCB2YWx1ZTogc3RyaW5nIH0+KCk7XHJcbiAgICAgICAgbGV0IGVudGl0eVR5cGUgPSBzY2hlbWEuZW50aXR5VHlwZXMuZmluZChlbnRpdHlUeXBlID0+IGVudGl0eVR5cGUubmFtZSA9PSBlbnRpdHlTZXQuZW50aXR5VHlwZU5hbWUpO1xyXG5cclxuICAgICAgICBlbnRpdHlUeXBlLnByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUxpc3RJdGVtID1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogcHJvcGVydHkuZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFUeXBlOiBwcm9wZXJ0eS5wcm9wZXJ0eURhdGFUeXBlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHByb3BlcnR5Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICBwYXJlbnRJdGVtOiBudWxsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHByb3BlcnR5TGlzdC5wdXNoKHByb3BlcnR5TGlzdEl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChlbnRpdHlUeXBlLm5hdmlnYXRpb25Qcm9wZXJ0aWVzLmxlbmd0aCAhPSAwKSB7XHJcbiAgICAgICAgICAgIC8v5a+86Iiq5bGe5oCn6L2s5YyWXHJcbiAgICAgICAgICAgIGVudGl0eVR5cGUubmF2aWdhdGlvblByb3BlcnRpZXMuZm9yRWFjaChuYXZpZ2F0aW9uUHJvcGVydHkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAobmF2aWdhdGlvblByb3BlcnR5Lm5hdmlnYXRpb25UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBOYXZpZ2F0aW9uVHlwZS5FbnRpdHlTZXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbnRpdHlTZXQgPSBzY2hlbWEuZW50aXR5U2V0cy5maW5kKGVudGl0eVNldCA9PiBlbnRpdHlTZXQubmFtZSA9PSBuYXZpZ2F0aW9uUHJvcGVydHkubmF2aWdhdGlvbkVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRFbnRpdHlTZXQoZW50aXR5U2V0LCBzY2hlbWEpLmZvckVhY2goZWxlbWVudCA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnBhcmVudEl0ZW0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudEl0ZW0gPSBuYXZpZ2F0aW9uUHJvcGVydHkubmFtZSArIFwiLlwiICsgZWxlbWVudC5wYXJlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRJdGVtID0gbmF2aWdhdGlvblByb3BlcnR5Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudGV4dCA9IG5hdmlnYXRpb25Qcm9wZXJ0eS5kaXNwbGF5TmFtZSArIFwiLlwiICsgZWxlbWVudC50ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlzdC5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBOYXZpZ2F0aW9uVHlwZS5FbnRpdHlUeXBlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW50aXR5VHlwZSA9IHNjaGVtYS5lbnRpdHlUeXBlcy5maW5kKGVudGl0eVR5cGUgPT4gZW50aXR5VHlwZS5uYW1lID09IG5hdmlnYXRpb25Qcm9wZXJ0eS5uYXZpZ2F0aW9uRW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydEVudGl0eVR5cGUoZW50aXR5VHlwZSwgc2NoZW1hKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnRJdGVtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRJdGVtID0gbmF2aWdhdGlvblByb3BlcnR5Lm5hbWUgKyBcIi5cIiArIGVsZW1lbnQucGFyZW50SXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50SXRlbSA9IG5hdmlnYXRpb25Qcm9wZXJ0eS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRleHQgPSBuYXZpZ2F0aW9uUHJvcGVydHkuZGlzcGxheU5hbWUgKyBcIi5cIiArIGVsZW1lbnQudGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eUxpc3QucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5TGlzdDtcclxuICAgIH1cclxuXHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT095YiG5Ymy57q/77yITmV3U2NoZW1h77yJPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaW5qZWN0ZWRFbnRpdHkgXHJcbiAgICAgKiBAcGFyYW0gbmV3U2NoZW1hTWFwIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRhcHRlck9mTmV3U2NoZW1hKGluamVjdGVkRW50aXR5OiBGaWx0ZXJJbmplY3RlZEVudGl0eSwgbmV3U2NoZW1hTWFwOiBNYXA8c3RyaW5nLCBOZXdTY2hlbWE+KSB7XHJcbiAgICAgICAgLy9pbmplY3RlZEVudGl0eS5zY2hlbWFOYW1l5om+5YiwU2NoZW1hXHJcbiAgICAgICAgbGV0IHNjaGVtYSA9IG5ld1NjaGVtYU1hcC5nZXQoaW5qZWN0ZWRFbnRpdHkuc2NoZW1hTmFtZSk7XHJcblxyXG4gICAgICAgIC8vaW5qZWN0ZWRFbnRpdHkuaW5qZWN0ZWRUeXBl56Gu5a6a5om+c2V0c+i/mOaYr3R5cGVzXHJcbiAgICAgICAgc3dpdGNoIChpbmplY3RlZEVudGl0eS5pbmplY3RlZFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGaWx0ZXJJbmplY3RlZFR5cGUuRW50aXR5U2V0OiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2V0ID0gc2NoZW1hLmVudGl0eVNldHMuZmluZChzZXQgPT4gc2V0LmNvZGUgPT0gaW5qZWN0ZWRFbnRpdHkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0TmV3RW50aXR5U2V0KHNldCwgc2NoZW1hKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIEZpbHRlckluamVjdGVkVHlwZS5FbnRpdHlUeXBlOiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHNjaGVtYS5lbnRpdHlUeXBlcy5maW5kKHR5cGUgPT4gdHlwZS5jb2RlID09IGluamVjdGVkRW50aXR5Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydE5ld0VudGl0eVR5cGUodHlwZSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOi9rOaNokVudGl0eVR5cGVcclxuICAgICAqIEBwYXJhbSB0eXBlIE5ld0VudGl0eVR5cGVcclxuICAgICAqIEBwYXJhbSBzY2hlbWEgTmV3U2NoZW1hXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgY29udmVydE5ld0VudGl0eVR5cGUodHlwZTogTmV3RW50aXR5VHlwZSwgc2NoZW1hOiBOZXdTY2hlbWEpOiBhbnkge1xyXG4gICAgICAgIGxldCBwcm9wZXJ0eUxpc3QgPSBBcnJheTx7IHRleHQ6IHN0cmluZywgcHJvcGVydHlEYXRhVHlwZTogUHJvcGVydHlEYXRhVHlwZSwgdmFsdWU6IHN0cmluZywgcGFyZW50SXRlbTogc3RyaW5nIH0+KCk7XHJcbiAgICAgICAgLy9wcm9wZXJ0eei9rOaNolxyXG4gICAgICAgIHR5cGUucHJvcGVydGllcy5mb3JFYWNoKHBybyA9PiB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eUxpc3RJdGVtID1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHByby5jb2RlLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogcHJvLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURhdGFUeXBlOiB0aGlzLmNvbnZlcnROZXdEYXRhVHlwZTJQcm9wZXJ0eURhdGFUeXBlKHByby5kYXRhVHlwZSksXHJcbiAgICAgICAgICAgICAgICBwYXJlbnRJdGVtOiBudWxsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHByb3BlcnR5TGlzdC5wdXNoKHByb3BlcnR5TGlzdEl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vbmF2aWdhdGlvblByb3BlcnR56L2s5o2iXHJcbiAgICAgICAgdHlwZS5uYXZpZ2F0aW9uUHJvcGVydGllcy5mb3JFYWNoKG5hUHJvID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChuYVByby5uYXZpZ2F0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBOZXdOYXZpZ2F0aW9uVHlwZS5FbnRpdHlTZXQ6XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmFQcm9TZXQgPSBzY2hlbWEuZW50aXR5U2V0cy5maW5kKG5hUHJvU2V0ID0+IG5hUHJvU2V0LmNvZGUgPT0gbmFQcm8ubmF2aWdhdGlvbk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnROZXdFbnRpdHlTZXQobmFQcm9TZXQsIHNjaGVtYSkuZm9yRWFjaChlbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZS5wYXJlbnRJdGVtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGUucGFyZW50SXRlbSA9IG5hUHJvLmNvZGUgKyBcIi5cIiArIGVsZS5wYXJlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGUucGFyZW50SXRlbSA9IG5hUHJvLmNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGUudGV4dCA9IG5hUHJvLm5hbWUgKyBcIi5cIiArIGVsZS50ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlMaXN0LnB1c2goZWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBOZXdOYXZpZ2F0aW9uVHlwZS5FbnRpdHlUeXBlOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5hUHJvVHlwZSA9IHNjaGVtYS5lbnRpdHlUeXBlcy5maW5kKG5hUHJvVHlwZSA9PiBuYVByb1R5cGUuY29kZSA9PSBuYVByby5uYXZpZ2F0aW9uTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydE5ld0VudGl0eVR5cGUobmFQcm9UeXBlLCBzY2hlbWEpLmZvckVhY2goZWxlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUucGFyZW50SXRlbSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlLnBhcmVudEl0ZW0gPSBuYVByby5jb2RlICsgXCIuXCIgKyBlbGUucGFyZW50SXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlLnBhcmVudEl0ZW0gPSBuYVByby5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlLnRleHQgPSBuYVByby5uYW1lICsgXCIuXCIgKyBlbGUudGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlzdC5wdXNoKGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5TGlzdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY29udmVydE5ld0VudGl0eVNldChzZXQ6IE5ld0VudGl0eVNldCwgc2NoZW1hOiBOZXdTY2hlbWEpOiBhbnkge1xyXG4gICAgICAgIGxldCBwcm9wZXJ0eUxpc3QgPSBBcnJheTx7IHRleHQ6IHN0cmluZywgcHJvcGVydHlEYXRhVHlwZTogUHJvcGVydHlEYXRhVHlwZSwgdmFsdWU6IHN0cmluZywgcGFyZW50SXRlbTogc3RyaW5nIH0+KCk7XHJcbiAgICAgICAgbGV0IHR5cGUgPSBzY2hlbWEuZW50aXR5VHlwZXMuZmluZCh0eXBlID0+IHR5cGUuY29kZSA9PSBzZXQuZW50aXR5VHlwZSk7XHJcbiAgICAgICAgdHlwZS5wcm9wZXJ0aWVzLmZvckVhY2gocHJvID0+IHtcclxuICAgICAgICAgICAgbGV0IHByb3BlcnR5TGlzdEl0ZW0gPVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHJvLmNvZGUsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBwcm8ubmFtZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGF0YVR5cGU6IHRoaXMuY29udmVydE5ld0RhdGFUeXBlMlByb3BlcnR5RGF0YVR5cGUocHJvLmRhdGFUeXBlKSxcclxuICAgICAgICAgICAgICAgIHBhcmVudEl0ZW06IG51bGxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcHJvcGVydHlMaXN0LnB1c2gocHJvcGVydHlMaXN0SXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHR5cGUubmF2aWdhdGlvblByb3BlcnRpZXMubGVuZ3RoICE9IDApIHtcclxuICAgICAgICAgICAgdHlwZS5uYXZpZ2F0aW9uUHJvcGVydGllcy5mb3JFYWNoKG5hUHJvID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAobmFQcm8ubmF2aWdhdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE5ld05hdmlnYXRpb25UeXBlLkVudGl0eVNldDpcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5hUHJvU2V0ID0gc2NoZW1hLmVudGl0eVNldHMuZmluZChuYVByb1NldCA9PiBuYVByb1NldC5jb2RlID09IG5hUHJvLm5hdmlnYXRpb25OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydE5ld0VudGl0eVNldChuYVByb1NldCwgc2NoZW1hKS5mb3JFYWNoKGVsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUucGFyZW50SXRlbSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGUucGFyZW50SXRlbSA9IG5hUHJvLmNvZGUgKyBcIi5cIiArIGVsZS5wYXJlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlLnBhcmVudEl0ZW0gPSBuYVByby5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZS50ZXh0ID0gbmFQcm8ubmFtZSArIFwiLlwiICsgZWxlLnRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlzdC5wdXNoKGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE5ld05hdmlnYXRpb25UeXBlLkVudGl0eVR5cGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYVByb1R5cGUgPSBzY2hlbWEuZW50aXR5VHlwZXMuZmluZChuYVByb1R5cGUgPT4gbmFQcm9UeXBlLmNvZGUgPT0gbmFQcm8ubmF2aWdhdGlvbk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0TmV3RW50aXR5VHlwZShuYVByb1R5cGUsIHNjaGVtYSkuZm9yRWFjaChlbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUucGFyZW50SXRlbSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZS5wYXJlbnRJdGVtID0gbmFQcm8uY29kZSArIFwiLlwiICsgZWxlLnBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlLnBhcmVudEl0ZW0gPSBuYVByby5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGUudGV4dCA9IG5hUHJvLm5hbWUgKyBcIi5cIiArIGVsZS50ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlzdC5wdXNoKGVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5TGlzdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG5ld1R5cGUg57uf5LiAU2NoZW1h55qE5bGe5oCnXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgY29udmVydE5ld0RhdGFUeXBlMlByb3BlcnR5RGF0YVR5cGUobmV3VHlwZTogTmV3RGF0YVR5cGUpOiBQcm9wZXJ0eURhdGFUeXBlIHtcclxuICAgICAgICBsZXQgdHlwZSA9IFByb3BlcnR5RGF0YVR5cGUuU3RyaW5nO1xyXG4gICAgICAgIHN3aXRjaCAobmV3VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE5ld0RhdGFUeXBlLkJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gUHJvcGVydHlEYXRhVHlwZS5Cb29sZWFuO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTmV3RGF0YVR5cGUuQnl0ZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBQcm9wZXJ0eURhdGFUeXBlLkJ5dGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBOZXdEYXRhVHlwZS5EYXRlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IFByb3BlcnR5RGF0YVR5cGUuRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBOZXdEYXRhVHlwZS5EYXRlVGltZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBQcm9wZXJ0eURhdGFUeXBlLkRhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTmV3RGF0YVR5cGUuRGVjaW1hbDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBQcm9wZXJ0eURhdGFUeXBlLkRlY2ltYWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBOZXdEYXRhVHlwZS5JbnRlZ2VyOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IFByb3BlcnR5RGF0YVR5cGUuSW50MzI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBOZXdEYXRhVHlwZS5TdHJpbmc6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gUHJvcGVydHlEYXRhVHlwZS5TdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHR5cGU7XHJcbiAgICB9XHJcblxyXG59Il19