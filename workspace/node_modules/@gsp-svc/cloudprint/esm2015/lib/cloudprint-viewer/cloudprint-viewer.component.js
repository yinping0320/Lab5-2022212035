/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject, forwardRef, ElementRef } from '@angular/core';
import { CloudprintviewerService } from './cloudprint-viewer.service';
import { PrintEntity } from '../entitys/printEntity';
import { NotifyService } from '@farris/ui-notify';
import { Utils } from '../utils/cloudprint.utils';
import { CloudprintFunctionRegister } from '../functions/cloudprint.function.register';
import { PrintFormatService } from '../services/printFormatService';
import { LanguageService } from '@ecp-caf/caf-common';
import { OutputParam } from '../entitys/outputoptions/outputParam';
import { CloudprintService } from '../cloudprint.service';
import { LoadingService } from '@farris/ui-loading';
export class CloudprintViewerComponent {
    // private server: CloudprintviewerService,
    /**
     * @param {?} server
     * @param {?} formatSrv
     * @param {?} notifyService
     * @param {?} functionRegister
     * @param {?} langservice
     * @param {?} loadSrv
     * @param {?} elementRef
     * @param {?} printSrv
     */
    constructor(server, formatSrv, notifyService, functionRegister, langservice, loadSrv, elementRef, printSrv) {
        this.server = server;
        this.formatSrv = formatSrv;
        this.notifyService = notifyService;
        this.functionRegister = functionRegister;
        this.langservice = langservice;
        this.loadSrv = loadSrv;
        this.elementRef = elementRef;
        this.printSrv = printSrv;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        Stimulsoft.Base.StiLicense.key = '6vJhGtLLLz2GNviWmUTrhSqnOItdDwjBylQzQcAOiHmUA7xxS8GDDAme3ObyU+jZAO9YGs0yUwkFhPz4MWHZaEdiyH' +
            'ffzbOBGSAkqiNry5YZGU/0ZeiKWcHEB38tgR/zaXp8v+ktUiBOl5B2Dll4y33a3osXfKmsg7lHgK/JYlcS08G7Nggu' +
            'H8vVnzvNulyD1uv6QdfRDQOP/FfeKHq3M70ZPvUspYpkCzGqP4nJJ5ktST13+f3E90Y0n1BkbAbYCI3JqheM988LYP' +
            '2lmJ5mAzuV5t3ILzfUehp6/HIy8LPbzzVlU22X9I1t2xY6W1qsi/pKaXeAfJ0T5x/CUbywJ9JyKaTMwIUhDqUVIrle' +
            'QbFvNFUrLznXCcd55QNngQjoC6Wx9CZ9ryjdPdp0dMfCC0exZXtQW0IR+lWjD9pdUkYPJWn5eACs0ToahpEvdwlW76' +
            'eL5ufNRT6xYjBqlGQ/9VuV5LD9EROLqHxpucBoNPLl7s8ealNcm5seZjuR1iSiOPcqd05m3ellOoxBzSLWaB/sNMWT' +
            'AOhBIWNv7dPOcq8KuAfwaJCkV3WTbQAhX2XJ';
        this.printEntity.isUseMetaData = true;
        this.formatSrv.printEntity = this.printEntity;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.docTitle = document.title;
        // 初始化Viewer;
        this.initViewer();
        console.log('组件初始：加载预览器成功');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.printEntity.onExitEvent.emit();
        console.log('组件销毁');
    }
    /**
     * 设置PrintEntity参数
     * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     *
     * 如下代码是cloudprint.service.ts里的代码，在cloudprint.service.ts有新的printEntity，
     *           所以需要调用setPrintEntity来同步
     *           this.designercomponentRef.instance.setPrintEntity(this.printEntity)
     *
     * @param {?} entity
     * @return {?}
     */
    setPrintEntity(entity) {
        this.printEntity = entity;
        // this.server.printEntity = this.printEntity;
        this.formatSrv.printEntity = this.printEntity;
    }
    /**
     * 初始化Viewer
     * @private
     * @return {?}
     */
    initViewer() {
        // 加载数据
        /** @type {?} */
        const self = this;
        document.title = this.docTitle;
        this.loadSrv.show({
            message: 'loading...',
        });
        // 如果是后端渲染的合适，则前台直接使用
        /** @type {?} */
        const rendedFormat = this.printEntity.rendedFormat;
        /** @type {?} */
        const ret = this.renderPdf(rendedFormat);
        if (ret && ret.then) {
            ret.then((/**
             * @return {?}
             */
            () => {
                this.loadSrv.close();
            }));
        }
        else {
            this.loadSrv.close();
        }
    }
    /**
     * @private
     * @param {?} rendedFormat
     * @return {?}
     */
    renderPdf(rendedFormat) {
        /** @type {?} */
        const self = this;
        if (rendedFormat) { //有渲染的结果则直接展示
            //有渲染的结果则直接展示
            /** @type {?} */
            const ele = document.getElementById('viewer');
            // ele.hidden = true;
            Utils.renderPdfByByte(rendedFormat, ele);
        }
        else { //没有渲染的结果则通过后端渲染后展示
            this.outputParam.prnOutputOps.printJob = false;
            if (this.outputParam.prnSourceOptions.length > 1) {
                if (this.outputParam.isFilter) {
                    return this.formatSrv.printMultiByFilter((/** @type {?} */ (this.outputParam.prnSourceOptions)), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        /** @type {?} */
                        const b = new Blob([data]);
                        /** @type {?} */
                        const reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
                else {
                    return this.formatSrv.printMultiById((/** @type {?} */ (this.outputParam.prnSourceOptions)), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        /** @type {?} */
                        const b = new Blob([data]);
                        /** @type {?} */
                        const reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
            }
            else {
                if (this.outputParam.isFilter) {
                    return this.formatSrv.printSingleByFilter((/** @type {?} */ (this.outputParam.prnSourceOptions[0])), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        /** @type {?} */
                        const b = new Blob([data]);
                        /** @type {?} */
                        const reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
                else {
                    return this.formatSrv.printSingleById((/** @type {?} */ (this.outputParam.prnSourceOptions[0])), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        /** @type {?} */
                        const b = new Blob([data]);
                        /** @type {?} */
                        const reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
            }
        }
    }
    /**
     * 直接打印
     * @return {?}
     */
    printDirect() {
        /** @type {?} */
        const ele = document.getElementById('viewer');
        /** @type {?} */
        const iframe = (/** @type {?} */ (ele.firstChild));
        iframe.contentWindow.print();
        /** @type {?} */
        const sourceopslist = this.outputParam.prnSourceOptions;
        /** @type {?} */
        let su = [];
        /** @type {?} */
        let id = [];
        /** @type {?} */
        let billcate = [];
        /** @type {?} */
        let biztype = [];
        /** @type {?} */
        let source = [];
        /** @type {?} */
        let entityfilter = [];
        /** @type {?} */
        let dataid = [];
        /** @type {?} */
        let isfilter = [];
        sourceopslist.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            su.push(x.ServiceUnit);
            id.push(x.FormatId);
            source.push(x.SourceId);
            isfilter.push(this.outputParam.isFilter);
            if (this.outputParam.isFilter) {
                entityfilter.push(JSON.stringify(((/** @type {?} */ (x))).EntityFilter));
            }
            else {
                dataid.push(((/** @type {?} */ (x))).DataIds);
            }
            billcate.push(x.billCategoryId);
            biztype.push(x.bizTypeId);
        }));
        /** @type {?} */
        const data = {
            formatid: id,
            sourceid: source,
            entityfilter: entityfilter,
            dataid: dataid,
            isfilter: isfilter,
            su: su,
            billcategory: billcate,
            biztype: biztype
        };
        this.formatSrv.sendPrintEvent(data, "CloudPrint");
    }
    /**
     * 盒子后台打印
     * @return {?}
     */
    printBox() {
        /** @type {?} */
        const self = this;
        self.outputParam.prnOutputOps.printJob = true;
        if (self.outputParam.prnSourceOptions.length > 1) {
            if (self.outputParam.isFilter) {
                return self.printSrv.printMultiByFilter4Job((/** @type {?} */ (self.outputParam.prnSourceOptions)), self.outputParam.prnOutputOps);
            }
            else {
                return self.printSrv.printMultiById4Job((/** @type {?} */ (self.outputParam.prnSourceOptions)), self.outputParam.prnOutputOps);
            }
        }
        else {
            if (self.outputParam.isFilter) {
                return self.printSrv.printSingleByFilter4Job((/** @type {?} */ (self.outputParam.prnSourceOptions[0])), self.outputParam.prnOutputOps);
            }
            else {
                return self.printSrv.printSingleById4Job((/** @type {?} */ (self.outputParam.prnSourceOptions[0])), self.outputParam.prnOutputOps);
            }
        }
    }
}
CloudprintViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-cloudprint-viewer',
                template: "<!-- <div class=\"f-page f-page-navigate f-page-is-grid-grid\">\r\n    <div class=\"f-page-header\">\r\n        <nav class=\"f-page-header-base\">    \r\n            <div class=\"f-title\">\r\n                <span class=\"f-title-icon f-text-orna-bill\">\r\n                    <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n                </span>\r\n                <h4 class=\"farris-form-title mr-auto\">\u6253\u5370\u9884\u89C8</h4>\r\n            </div>\r\n            <f-response-toolbar\r\n                class=\"col-7 f-toolbar\"\r\n                [datas]=\"toolbarData\"\r\n                (rtClickEvent)=\"responseToolbarClick($event)\">\r\n            </f-response-toolbar>\r\n        </nav>\r\n    </div>\r\n    \r\n    <section class=\"f-page-main\">\r\n        <div style=\"overflow:auto;height: 100%;width: 100%\">\r\n            <div id=\"viewer\"  style=\"height:100%\"></div>\r\n        </div>\r\n    </section>    \r\n</div> -->\r\n\r\n<div class=\"f-page f-page-is-managelist\">\r\n    <div class=\"f-page-main\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist\" [showHeader]=\"false\">\r\n        <div class=\"f-section-header\" style=\"padding: 0px;margin: 0px\">\r\n          <div class=\"f-title\">\r\n            <h5 class=\"f-title__title\">{{'printview' | locale}}</h5>\r\n          </div>\r\n          <div class=\"f-toolbar\">\r\n            <div id=\"operate\" style=\"text-align: right;padding: 10px;min-width: 300px;\">\r\n                <farris-button style=\"padding: 3px\" (click)=\"printDirect()\">\r\n                    <span>{{'PrintWithoutPreview' | locale}}</span>\r\n                </farris-button>\r\n                <farris-button *ngIf=\"isRemotePrint\" [type]=\"'secondary'\" style=\"padding: 3px\" (click)=\"printBox()\">\r\n                    <span>{{'PrintWithBox' | locale}}</span>\r\n                </farris-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <div class=\"f-section-content\">\r\n          <div class=\"f-component-grid\">\r\n            <div style=\"overflow:auto;height: 100%;width: 100%\">\r\n                <div id=\"viewer\"  style=\"height:100%\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CloudprintViewerComponent.ctorParameters = () => [
    { type: CloudprintviewerService },
    { type: PrintFormatService },
    { type: NotifyService },
    { type: CloudprintFunctionRegister },
    { type: LanguageService },
    { type: LoadingService },
    { type: ElementRef },
    { type: CloudprintService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => CloudprintService)),] }] }
];
CloudprintViewerComponent.propDecorators = {
    outputParam: [{ type: Input }],
    isRemotePrint: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CloudprintViewerComponent.prototype.outputParam;
    /** @type {?} */
    CloudprintViewerComponent.prototype.isRemotePrint;
    /**
     * 预览器对象
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.viewer;
    /** @type {?} */
    CloudprintViewerComponent.prototype.localpipe;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.docTitle;
    /**
     * 打印参数实体
     * @type {?}
     */
    CloudprintViewerComponent.prototype.printEntity;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.server;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.formatSrv;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.functionRegister;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.langservice;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.loadSrv;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    CloudprintViewerComponent.prototype.printSrv;
}
//# sourceMappingURL=data:application/json;base64,