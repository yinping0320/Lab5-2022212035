/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印内置的函数
 */
export class PrintFunctionsOfFiltervalue {
    constructor() {
        // /**
        //  * 注意：
        //  * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
        //  * 2.数据源的传递，直接在参数上些上table名就行了。
        //  */
        // /**
        //  * 注意：
        //  * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
        //  * 2.数据源的传递，直接在参数上些上table名就行了。
        //  */
        // /**
        //  * 分页函数
        //  */
        // Pagination = {
        //     Category : "GSPBuildInFunc",
        //     GroupFunctionName : "FilterData",
        //     FunctionName : "Pagination",
        //     Description : "分页",
        //     TypeOfFunction : "void",
        //     ReturnType : 'void',
        //     ReturnDescription : "数据值",
        //     ArgumentTypes : [Object,Number],
        //     ArgumentNames : [ 'dataSource','pagesize'],
        //     ArgumentDescriptions : [ "数据源", "每页行数"],
        //     Function: function(dataSource,pagesize) {
        //         const pos = dataSource.position+1;
        //         // 换页
        //         if (pos % pagesize === 0 && pos !== 0) {
        //             dataSource.dictionary.report.engine.newPage();
        //         }
        //     },
        // };
        /**
         * 获取指定数据源中指定行和指定列的值
         */
        this.GetValue = {
            Category: 'IGixFucs',
            GroupFunctionName: 'FilterData',
            FunctionName: 'GetValue',
            Description: '获取指定数据源中指定行和指定列的值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '数据值',
            ArgumentTypes: [Object, Number, Number],
            ArgumentNames: ['dataSource', 'row', 'col'],
            ArgumentDescriptions: ['数据源', '每页行数'],
            Function: (/**
             * @param {?} dataSource
             * @param {?} row
             * @param {?} col
             * @return {?}
             */
            function (dataSource, row, col) {
                /** @type {?} */
                const table = dataSource.dataTable;
                if (table == null) {
                    return '';
                }
                /** @type {?} */
                const a = table.rows.list[row - 1].columns.list[col - 1].storage.values[row - 1];
                return a;
            }),
        };
        /**
         * 获取符合条件的目标列的值
         */
        this.GetFilterValues = {
            Category: 'IGixFucs',
            GroupFunctionName: 'FilterData',
            FunctionName: 'GetFilterValues',
            Description: '获取符合条件的目标列的值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '数据值',
            ArgumentTypes: [Object, String, String, String, Boolean],
            ArgumentNames: ['dataSource', 'filterColumn', 'filterValue', 'targetColumnName', 'first'],
            ArgumentDescriptions: ['数据源', '过滤列', '过滤值（必须是stirng）', '目标列', '是否获取第一个符合条件的值'],
            Function: (/**
             * @param {?} dataSource
             * @param {?} filterColumn
             * @param {?} filterValue
             * @param {?} targetColumnName
             * @param {?} first
             * @return {?}
             */
            function (dataSource, filterColumn, filterValue, targetColumnName, first) {
                /** @type {?} */
                const table = dataSource.dataTable;
                if (table == null) {
                    return '';
                }
                /** @type {?} */
                const colValues = table.columns.list.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => e.columnName === filterColumn)).storage.values;
                /** @type {?} */
                const a = [];
                for (let index = 0; index < colValues.length; index++) {
                    /** @type {?} */
                    const element = colValues[index];
                    if (element === filterValue) {
                        a.push(index);
                        if (first) {
                            break;
                        }
                    }
                }
                /** @type {?} */
                let res = '';
                /** @type {?} */
                const tmpIndex = a.pop();
                if (tmpIndex >= 0) {
                    res += table.columns.list.find((/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => e.columnName === targetColumnName)).storage.values[tmpIndex];
                    res += ';';
                }
                return res.substring(0, res.length - 2);
            }),
        };
    }
}
if (false) {
    /**
     * 获取指定数据源中指定行和指定列的值
     * @type {?}
     */
    PrintFunctionsOfFiltervalue.prototype.GetValue;
    /**
     * 获取符合条件的目标列的值
     * @type {?}
     */
    PrintFunctionsOfFiltervalue.prototype.GetFilterValues;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRwcmludC5mdW5jdGlvbi5maWx0ZXJ2YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2Nsb3VkcHJpbnQvIiwic291cmNlcyI6WyJsaWIvZnVuY3Rpb25zL2Nsb3VkcHJpbnQuZnVuY3Rpb24uZmlsdGVydmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BLE1BQU0sT0FBTywyQkFBMkI7SUFBeEM7UUFDSSxNQUFNO1FBQ04sU0FBUztRQUNULGlFQUFpRTtRQUNqRSxpQ0FBaUM7UUFDakMsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQTZCTixhQUFRLEdBQUc7WUFDUCxRQUFRLEVBQUcsVUFBVTtZQUNyQixpQkFBaUIsRUFBRyxZQUFZO1lBQ2hDLFlBQVksRUFBRyxVQUFVO1lBQ3pCLFdBQVcsRUFBRyxtQkFBbUI7WUFDakMsY0FBYyxFQUFHLE1BQU07WUFDdkIsVUFBVSxFQUFHLE1BQU07WUFDbkIsaUJBQWlCLEVBQUcsS0FBSztZQUN6QixhQUFhLEVBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN4QyxhQUFhLEVBQUcsQ0FBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUM3QyxvQkFBb0IsRUFBRyxDQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7WUFDdkMsUUFBUTs7Ozs7O1lBQUUsVUFBUyxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUc7O3NCQUM3QixLQUFLLEdBQUcsVUFBVSxDQUFDLFNBQVM7Z0JBQ2xDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtvQkFDZixPQUFPLEVBQUUsQ0FBQztpQkFDYjs7c0JBRUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ2hGLE9BQU8sQ0FBQyxDQUFDO1lBQ2IsQ0FBQyxDQUFBO1NBQ0osQ0FBQzs7OztRQU1GLG9CQUFlLEdBQUc7WUFDZCxRQUFRLEVBQUcsVUFBVTtZQUNyQixpQkFBaUIsRUFBRyxZQUFZO1lBQ2hDLFlBQVksRUFBRyxpQkFBaUI7WUFDaEMsV0FBVyxFQUFHLGNBQWM7WUFDNUIsY0FBYyxFQUFHLE1BQU07WUFDdkIsVUFBVSxFQUFHLE1BQU07WUFDbkIsaUJBQWlCLEVBQUcsS0FBSztZQUN6QixhQUFhLEVBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDO1lBQ3pELGFBQWEsRUFBRyxDQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLE9BQU8sQ0FBQztZQUMzRixvQkFBb0IsRUFBRyxDQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLGVBQWUsQ0FBRTtZQUNqRixRQUFROzs7Ozs7OztZQUFFLFVBQVMsVUFBZSxFQUFFLFlBQW9CLEVBQUUsV0FBZ0IsRUFBRSxnQkFBd0IsRUFBRSxLQUFjOztzQkFDMUcsS0FBSyxHQUFHLFVBQVUsQ0FBQyxTQUFTO2dCQUNsQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7b0JBQ2YsT0FBTyxFQUFFLENBQUM7aUJBQ2I7O3NCQUNLLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJOzs7O2dCQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLFlBQVksRUFBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNOztzQkFDeEYsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7OzBCQUM3QyxPQUFPLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztvQkFDaEMsSUFBSSxPQUFPLEtBQUssV0FBVyxFQUFFO3dCQUN6QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNkLElBQUksS0FBSyxFQUFFOzRCQUNQLE1BQU07eUJBQ1Q7cUJBQ0o7aUJBQ0o7O29CQUVHLEdBQUcsR0FBRyxFQUFFOztzQkFDTixRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRTtnQkFDeEIsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO29CQUNmLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJOzs7O29CQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLGdCQUFnQixFQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDbEcsR0FBRyxJQUFJLEdBQUcsQ0FBQztpQkFDZDtnQkFFRCxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFBO1NBQ0osQ0FBQztJQUdOLENBQUM7Q0FBQTs7Ozs7O0lBbEVHLCtDQW9CRTs7Ozs7SUFNRixzREFxQ0UiLCJzb3VyY2VzQ29udGVudCI6WyIvLyDlvJXlhaVTdGltdWxzb2Z055qEanPlupNcclxuZGVjbGFyZSB2YXIgU3RpbXVsc29mdDtcclxuXHJcbi8qKlxyXG4gKiDkupHmiZPljbDlhoXnva7nmoTlh73mlbBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcmludEZ1bmN0aW9uc09mRmlsdGVydmFsdWUge1xyXG4gICAgLy8gLyoqXHJcbiAgICAvLyAgKiDms6jmhI/vvJpcclxuICAgIC8vICAqIDEuQXJnc1R5cGXnmoTnsbvlnovlupTor6XkuLpKYXZhU2NyaXB055qE57G75Z6L6ICM5LiN5pivc3RpbXVsc29mdOeahOexu+Weiygg6L+Z6YeM5Lya6KKr5a6Y5pa55paH5qGj5bmy5omwIClcclxuICAgIC8vICAqIDIu5pWw5o2u5rqQ55qE5Lyg6YCS77yM55u05o6l5Zyo5Y+C5pWw5LiK5Lqb5LiKdGFibGXlkI3lsLHooYzkuobjgIJcclxuICAgIC8vICAqL1xyXG5cclxuICAgIC8vIC8qKlxyXG4gICAgLy8gICog5YiG6aG15Ye95pWwXHJcbiAgICAvLyAgKi9cclxuICAgIC8vIFBhZ2luYXRpb24gPSB7XHJcbiAgICAvLyAgICAgQ2F0ZWdvcnkgOiBcIkdTUEJ1aWxkSW5GdW5jXCIsXHJcbiAgICAvLyAgICAgR3JvdXBGdW5jdGlvbk5hbWUgOiBcIkZpbHRlckRhdGFcIixcclxuICAgIC8vICAgICBGdW5jdGlvbk5hbWUgOiBcIlBhZ2luYXRpb25cIixcclxuICAgIC8vICAgICBEZXNjcmlwdGlvbiA6IFwi5YiG6aG1XCIsXHJcbiAgICAvLyAgICAgVHlwZU9mRnVuY3Rpb24gOiBcInZvaWRcIixcclxuICAgIC8vICAgICBSZXR1cm5UeXBlIDogJ3ZvaWQnLFxyXG4gICAgLy8gICAgIFJldHVybkRlc2NyaXB0aW9uIDogXCLmlbDmja7lgLxcIixcclxuICAgIC8vICAgICBBcmd1bWVudFR5cGVzIDogW09iamVjdCxOdW1iZXJdLFxyXG4gICAgLy8gICAgIEFyZ3VtZW50TmFtZXMgOiBbICdkYXRhU291cmNlJywncGFnZXNpemUnXSxcclxuICAgIC8vICAgICBBcmd1bWVudERlc2NyaXB0aW9ucyA6IFsgXCLmlbDmja7mupBcIiwgXCLmr4/pobXooYzmlbBcIl0sXHJcbiAgICAvLyAgICAgRnVuY3Rpb246IGZ1bmN0aW9uKGRhdGFTb3VyY2UscGFnZXNpemUpIHtcclxuICAgIC8vICAgICAgICAgY29uc3QgcG9zID0gZGF0YVNvdXJjZS5wb3NpdGlvbisxO1xyXG4gICAgLy8gICAgICAgICAvLyDmjaLpobVcclxuICAgIC8vICAgICAgICAgaWYgKHBvcyAlIHBhZ2VzaXplID09PSAwICYmIHBvcyAhPT0gMCkge1xyXG4gICAgLy8gICAgICAgICAgICAgZGF0YVNvdXJjZS5kaWN0aW9uYXJ5LnJlcG9ydC5lbmdpbmUubmV3UGFnZSgpO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5oyH5a6a5pWw5o2u5rqQ5Lit5oyH5a6a6KGM5ZKM5oyH5a6a5YiX55qE5YC8XHJcbiAgICAgKi9cclxuICAgIEdldFZhbHVlID0ge1xyXG4gICAgICAgIENhdGVnb3J5IDogJ0lHaXhGdWNzJyxcclxuICAgICAgICBHcm91cEZ1bmN0aW9uTmFtZSA6ICdGaWx0ZXJEYXRhJyxcclxuICAgICAgICBGdW5jdGlvbk5hbWUgOiAnR2V0VmFsdWUnLFxyXG4gICAgICAgIERlc2NyaXB0aW9uIDogJ+iOt+WPluaMh+WumuaVsOaNrua6kOS4reaMh+WumuihjOWSjOaMh+WumuWIl+eahOWAvCcsXHJcbiAgICAgICAgVHlwZU9mRnVuY3Rpb24gOiAndm9pZCcsXHJcbiAgICAgICAgUmV0dXJuVHlwZSA6IFN0cmluZyxcclxuICAgICAgICBSZXR1cm5EZXNjcmlwdGlvbiA6ICfmlbDmja7lgLwnLFxyXG4gICAgICAgIEFyZ3VtZW50VHlwZXMgOiBbT2JqZWN0LCBOdW1iZXIsIE51bWJlcl0sXHJcbiAgICAgICAgQXJndW1lbnROYW1lcyA6IFsgJ2RhdGFTb3VyY2UnLCAncm93JywgJ2NvbCddLFxyXG4gICAgICAgIEFyZ3VtZW50RGVzY3JpcHRpb25zIDogWyAn5pWw5o2u5rqQJywgJ+avj+mhteihjOaVsCddLFxyXG4gICAgICAgIEZ1bmN0aW9uOiBmdW5jdGlvbihkYXRhU291cmNlLCByb3csIGNvbCkge1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZSA9IGRhdGFTb3VyY2UuZGF0YVRhYmxlO1xyXG4gICAgICAgICAgICBpZiAodGFibGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhID0gdGFibGUucm93cy5saXN0W3JvdyAtIDFdLmNvbHVtbnMubGlzdFtjb2wgLSAxXS5zdG9yYWdlLnZhbHVlc1tyb3cgLSAxXTtcclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W56ym5ZCI5p2h5Lu255qE55uu5qCH5YiX55qE5YC8XHJcbiAgICAgKi9cclxuICAgIEdldEZpbHRlclZhbHVlcyA9IHtcclxuICAgICAgICBDYXRlZ29yeSA6ICdJR2l4RnVjcycsXHJcbiAgICAgICAgR3JvdXBGdW5jdGlvbk5hbWUgOiAnRmlsdGVyRGF0YScsXHJcbiAgICAgICAgRnVuY3Rpb25OYW1lIDogJ0dldEZpbHRlclZhbHVlcycsXHJcbiAgICAgICAgRGVzY3JpcHRpb24gOiAn6I635Y+W56ym5ZCI5p2h5Lu255qE55uu5qCH5YiX55qE5YC8JyxcclxuICAgICAgICBUeXBlT2ZGdW5jdGlvbiA6ICd2b2lkJyxcclxuICAgICAgICBSZXR1cm5UeXBlIDogU3RyaW5nLFxyXG4gICAgICAgIFJldHVybkRlc2NyaXB0aW9uIDogJ+aVsOaNruWAvCcsXHJcbiAgICAgICAgQXJndW1lbnRUeXBlcyA6IFtPYmplY3QsIFN0cmluZywgU3RyaW5nLCBTdHJpbmcsIEJvb2xlYW5dLFxyXG4gICAgICAgIEFyZ3VtZW50TmFtZXMgOiBbICdkYXRhU291cmNlJywgJ2ZpbHRlckNvbHVtbicsICdmaWx0ZXJWYWx1ZScsICd0YXJnZXRDb2x1bW5OYW1lJywgJ2ZpcnN0J10sXHJcbiAgICAgICAgQXJndW1lbnREZXNjcmlwdGlvbnMgOiBbICfmlbDmja7mupAnLCAn6L+H5ruk5YiXJywgJ+i/h+a7pOWAvO+8iOW/hemhu+aYr3N0aXJuZ++8iScsICfnm67moIfliJcnLCAn5piv5ZCm6I635Y+W56ys5LiA5Liq56ym5ZCI5p2h5Lu255qE5YC8JyBdLFxyXG4gICAgICAgIEZ1bmN0aW9uOiBmdW5jdGlvbihkYXRhU291cmNlOiBhbnksIGZpbHRlckNvbHVtbjogc3RyaW5nLCBmaWx0ZXJWYWx1ZTogYW55LCB0YXJnZXRDb2x1bW5OYW1lOiBzdHJpbmcsIGZpcnN0OiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlID0gZGF0YVNvdXJjZS5kYXRhVGFibGU7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY29sVmFsdWVzID0gdGFibGUuY29sdW1ucy5saXN0LmZpbmQoKGUpID0+IGUuY29sdW1uTmFtZSA9PT0gZmlsdGVyQ29sdW1uKS5zdG9yYWdlLnZhbHVlcztcclxuICAgICAgICAgICAgY29uc3QgYSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY29sVmFsdWVzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbFZhbHVlc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gZmlsdGVyVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhLnB1c2goaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCByZXMgPSAnJztcclxuICAgICAgICAgICAgY29uc3QgdG1wSW5kZXggPSBhLnBvcCgpO1xyXG4gICAgICAgICAgICBpZiAodG1wSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IHRhYmxlLmNvbHVtbnMubGlzdC5maW5kKChlKSA9PiBlLmNvbHVtbk5hbWUgPT09IHRhcmdldENvbHVtbk5hbWUpLnN0b3JhZ2UudmFsdWVzW3RtcEluZGV4XTtcclxuICAgICAgICAgICAgICAgIHJlcyArPSAnOyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3Vic3RyaW5nKDAsIHJlcy5sZW5ndGggLSAyKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuXHJcblxyXG59XHJcbiJdfQ==