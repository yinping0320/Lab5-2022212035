/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印函数工具类
 */
export class PrintFunctionUtils {
    /**
     * 将数字转为汉字
     * @param {?} number 数值
     * @return {?}
     */
    static FormatToCurrencyNumber(number) {
        /** @type {?} */
        var result = PrintFunctionUtils.FormatToCurrencyNumberCN(number);
        // 把类似 【一十二】中的一去掉，改为【十二】
        if (result.startsWith('一十')) {
            result = result.substring(1);
        }
        return result;
    }
    /**
     * 将数字转换为汉字
     * @param {?} number 数值
     * @return {?}
     */
    static FormatToCurrencyNumberCN(number) {
        /** @type {?} */
        var res = PrintFunctionUtils.ConvertCurrency(number);
        /** @type {?} */
        var result = res;
        result = result.replace(new RegExp("壹", "gm"), "一");
        result = result.replace(new RegExp("贰", "gm"), "二");
        result = result.replace(new RegExp("叁", "gm"), "三");
        result = result.replace(new RegExp("肆", "gm"), "四");
        result = result.replace(new RegExp("伍", "gm"), "五");
        result = result.replace(new RegExp("陆", "gm"), "六");
        result = result.replace(new RegExp("柒", "gm"), "七");
        result = result.replace(new RegExp("捌", "gm"), "八");
        result = result.replace(new RegExp("玖", "gm"), "九");
        result = result.replace(new RegExp("拾", "gm"), "十");
        result = result.replace(new RegExp("佰", "gm"), "百");
        result = result.replace(new RegExp("仟", "gm"), "千");
        result = result.replace("元", "点");
        result = result.replace("角", "");
        result = result.replace("分", "");
        result = result.replace("整", "");
        if (result[result.length - 1] == '点') {
            result = result.substring(0, result.length - 1);
        }
        return result;
    }
    /**
     * @param {?} money
     * @return {?}
     */
    static ConvertCurrency(money) {
        //汉字的数字
        /** @type {?} */
        var cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');
        //基本单位
        /** @type {?} */
        var cnIntRadice = new Array('', '拾', '佰', '仟');
        //对应整数部分扩展单位
        /** @type {?} */
        var cnIntUnits = new Array('', '万', '亿', '兆');
        //对应小数部分单位
        /** @type {?} */
        var cnDecUnits = new Array('角', '分', '毫', '厘');
        //整数金额时后面跟的字符
        /** @type {?} */
        var cnInteger = '整';
        //整型完以后的单位
        /** @type {?} */
        var cnIntLast = '元';
        //最大处理的数字
        /** @type {?} */
        var maxNum = 999999999999999.9999;
        //金额整数部分
        /** @type {?} */
        var integerNum;
        //金额小数部分
        /** @type {?} */
        var decimalNum;
        //输出的中文金额字符串
        /** @type {?} */
        var chineseStr = '';
        //分离金额后用的数组，预定义
        /** @type {?} */
        var parts;
        if (money == '') {
            return '';
        }
        money = parseFloat(money);
        if (money >= maxNum) {
            //超出最大处理数字
            return '';
        }
        if (money == 0) {
            chineseStr = cnNums[0] + cnIntLast + cnInteger;
            return chineseStr;
        }
        //转换为字符串
        money = money.toString();
        if (money.indexOf('.') == -1) {
            integerNum = money;
            decimalNum = '';
        }
        else {
            parts = money.split('.');
            integerNum = parts[0];
            decimalNum = parts[1].substr(0, 4);
        }
        //获取整型部分转换
        if (parseInt(integerNum, 10) > 0) {
            /** @type {?} */
            var zeroCount = 0;
            /** @type {?} */
            var IntLen = integerNum.length;
            for (var i = 0; i < IntLen; i++) {
                /** @type {?} */
                var n = integerNum.substr(i, 1);
                /** @type {?} */
                var p = IntLen - i - 1;
                /** @type {?} */
                var q = p / 4;
                /** @type {?} */
                var m = p % 4;
                if (n == '0') {
                    zeroCount++;
                }
                else {
                    if (zeroCount > 0) {
                        chineseStr += cnNums[0];
                    }
                    //归零
                    zeroCount = 0;
                    chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];
                }
                if (m == 0 && zeroCount < 4) {
                    chineseStr += cnIntUnits[q];
                }
            }
            chineseStr += cnIntLast;
        }
        //小数部分
        if (decimalNum != '') {
            /** @type {?} */
            var decLen = decimalNum.length;
            //处理到分
            if (decLen > 2) {
                decLen = 2;
            }
            for (var i = 0; i < decLen; i++) {
                /** @type {?} */
                var n = decimalNum.substr(i, 1);
                if (n != '0') {
                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];
                }
            }
        }
        if (chineseStr == '') {
            chineseStr += cnNums[0] + cnIntLast + cnInteger;
        }
        else if (decimalNum == '') {
            chineseStr += cnInteger;
        }
        return chineseStr;
    }
    /**
     * 将数值格式化为中文大写货币金额，形如【壹拾万柒仟元零伍角叁分】
     * @param {?} money
     * @return {?}
     */
    static FormatToCurrencyCN(money) {
        return PrintFunctionUtils.ConvertCurrency(money);
    }
    /**
     * @param {?} money
     * @return {?}
     */
    static FormatToCurrency(money) {
        /** @type {?} */
        let str = this.FormatToCurrencyCN(money);
        str = str.replace('零', '');
        return str;
    }
    /**
     * @private
     * @param {?} str
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    static insert_item(str, item, index) {
        // 初始化一个空字符串
        /** @type {?} */
        let newstr = '';
        /** @type {?} */
        const tmp = str.substring(0, index);
        /** @type {?} */
        const estr = str.substring(index, str.length);
        newstr += tmp + item + estr;
        return newstr;
    }
    /**
     * 对日期进行格式化， 和C#大致一致 默认yyyy-MM-dd HH:mm:ss
     * 可不带参数 一个日期参数 或一个格式化参数
     * @author adswads\@gmail.com
     * @param {?=} date 要格式化的日期
     * @param {?=} format 进行格式化的模式字符串
     *     支持的模式字母有：
     *     y:年,
     *     M:年中的月份(1-12),
     *     d:月份中的天(1-31),
     *     H:小时(0-23),
     *     h:小时(0-11),
     *     m:分(0-59),
     *     s:秒(0-59),
     *     f:毫秒(0-999),
     *     q:季度(1-4)
     * @return {?} String
     */
    static dateFormat(date, format) {
        // 无参数
        if (date === undefined && format === undefined) {
            date = new Date();
            format = 'yyyy-MM-dd HH:mm:ss';
        }
        else if (typeof (date) === 'string') { // 无日期
            format = date;
            date = new Date();
        }
        else if (format === undefined) { // 无格式化参数
            format = 'yyyy-MM-dd HH:mm:ss';
        }
        else { } // 没有分隔符的特殊处理
        // 没有分隔符的特殊处理
        /** @type {?} */
        const map = {
            y: date.getFullYear() + '',
            // 年份
            M: date.getMonth() + 1 + '',
            // 月份
            d: date.getDate() + '',
            // 日
            H: date.getHours(),
            // 小时 24
            m: date.getMinutes() + '',
            // 分
            s: date.getSeconds() + '',
            // 秒
            q: Math.floor((date.getMonth() + 3) / 3) + '',
            // 季度
            f: date.getMilliseconds() + '' // 毫秒
        };
        // 小时 12
        if (map['H'] > 12) {
            map['h'] = map['H'] - 12 + '';
        }
        else {
            map['h'] = map['H'] + '';
        }
        map['H'] += '';
        /** @type {?} */
        const reg = 'yMdHhmsqf';
        /** @type {?} */
        let all = '';
        /** @type {?} */
        let str = '';
        for (let i = 0, n = 0; i < reg.length; i++) {
            n = format.indexOf(reg[i]);
            if (n < 0) {
                continue;
            }
            all = '';
            for (; n < format.length; n++) {
                if (format[n] !== reg[i]) {
                    break;
                }
                all += reg[i];
            }
            if (all.length > 0) {
                if (all.length === map[reg[i]].length) {
                    str = map[reg[i]];
                }
                else if (all.length > map[reg[i]].length) {
                    if (reg[i] === 'f') {
                        str = map[reg[i]] + this.charString('0', all.length - map[reg[i]].length);
                    }
                    else {
                        str = this.charString('0', all.length - map[reg[i]].length) + map[reg[i]];
                    }
                }
                else {
                    switch (reg[i]) {
                        case 'y':
                            str = map[reg[i]].substr(map[reg[i]].length - all.length);
                            break;
                        case 'f':
                            str = map[reg[i]].substr(0, all.length);
                            break;
                        default:
                            str = map[reg[i]];
                            break;
                    }
                }
                format = format.replace(all, str);
            }
        }
        return format;
    }
    /**
     * 返回字符串 为n个char构成
     * @author adswads\@gmail.com
     * @private
     * @param {?} char 重复的字符
     * @param {?} count 次数
     * @return {?} String
     */
    static charString(char, count) {
        /** @type {?} */
        let str = '';
        while (count--) {
            str += char;
        }
        return str;
    }
    /**
     * 格式化数字
     * @private
     * @param {?} number  [要格式化的数字]
     * @param {?} decimals         [保留几位小数]
     * @param {?} dec_point        [小数点符号]
     * @param {?} thousands_sep    [千分位符号]
     * @param {?} roundtag         [舍入参数，默认 "ceil" 向上取,"floor"向下取,"round" 四舍五入]
     * @return {?} 格式化后的结果
     */
    static number_format(number, decimals, dec_point, thousands_sep, roundtag) {
        number = (number + '').replace(/[^0-9+-Ee.]/g, '');
        roundtag = roundtag || 'ceil'; // "ceil","floor","round"
        // "ceil","floor","round"
        /** @type {?} */
        let n = !isFinite(+number) ? 0 : +number;
        /** @type {?} */
        let prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);
        /** @type {?} */
        let sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep;
        /** @type {?} */
        let dec = (typeof dec_point === 'undefined') ? '.' : dec_point;
        /** @type {?} */
        let s = [];
        /** @type {?} */
        let toFixedFix = (/**
         * @param {?} n
         * @param {?} prec
         * @return {?}
         */
        function (n, prec) {
            /** @type {?} */
            const k = Math.pow(10, prec);
            console.log();
            return '' + parseFloat(Math[roundtag](parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;
        });
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        /** @type {?} */
        const re = /(-?\d+)(\d{3})/;
        while (re.test(s[0])) {
            s[0] = s[0].replace(re, '$1' + sep + '$2');
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
}
//# sourceMappingURL=data:application/json;base64,