/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PrintFunctionsOfFiltervalue } from './cloudprint.function.filtervalue';
import { PrintFunctionsOfFormat } from './cloudprint.function.format';
import { Subject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { PrintFunctionsOfConvert } from './cloudprint.function.convert';
export class CloudprintFunctionRegister {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.httpoptions = {};
        this.httpoptions['headers'] = {
            SessionId: '',
            'Content-Type': 'application/json'
        };
    }
    /**
     * 初始化自定义函数
     * @param {?} configUrl
     * @return {?}
     */
    initCustomFunction(configUrl) {
        // 内置函数-数值过滤
        /** @type {?} */
        const funcs = new PrintFunctionsOfFiltervalue();
        // 内置函数-格式化
        /** @type {?} */
        const funcFormat = new PrintFunctionsOfFormat();
        // 内置函数-格式化
        /** @type {?} */
        const funcConvert = new PrintFunctionsOfConvert();
        // 这里默认的GSP内置函数分组为GSP
        if (Stimulsoft.Report.Dictionary.StiFunctions.getFunctions('IGixFucs').length === 0) {
            // tslint:disable-next-line:forin
            for (const f in funcs) {
                /** @type {?} */
                const func = funcs[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
            // tslint:disable-next-line:forin
            for (const f in funcFormat) {
                /** @type {?} */
                const func = funcFormat[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
            // tslint:disable-next-line:forin
            for (const f in funcConvert) {
                /** @type {?} */
                const func = funcConvert[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
        }
        // 自定义函数todo:最终自定义函数从后台取配置文件里的解析
        return this.http.get(configUrl, this.httpoptions).toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length > 0) {
                return this.addJsFuncPlugins(-1, data)
                    .then((/**
                 * @return {?}
                 */
                () => {
                    if (!data) {
                        return;
                    }
                    /** @type {?} */
                    const allFuncs = [];
                    // tslint:disable-next-line:forin
                    if (data.length > 0) {
                        for (const i in data) {
                            allFuncs.push(window[((/** @type {?} */ (data[i]))).key]);
                        }
                    }
                    if (Stimulsoft.Report.Dictionary.StiFunctions.getFunctions('CustomFucs').length === 0 && allFuncs.length > 0) {
                        // tslint:disable-next-line:forin
                        for (const f in allFuncs) {
                            /** @type {?} */
                            const item = allFuncs[f];
                            // tslint:disable-next-line:forin
                            for (const f2 in item) {
                                /** @type {?} */
                                const func = item[f2];
                                Stimulsoft.Report.Dictionary.StiFunctions.addFunction('CustomFucs', func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
                            }
                        }
                    }
                }));
            }
        }));
    }
    /**
     * 添加js业务函数插件
     * @private
     * @param {?} i
     * @param {?} data
     * @return {?}
     */
    addJsFuncPlugins(i, data) {
        if (!data && data.length == 0) {
            /** @type {?} */
            const sub = new Subject();
            sub.complete(); // 没有这句话toPromise()里的内容不跑
            return sub.toPromise();
        }
        /** @type {?} */
        const loader = window['System'];
        if (i < data.length - 1) {
            i++;
            this.addJsFuncPlugins(i, data);
        }
        return loader.import(data[i].path);
    }
}
CloudprintFunctionRegister.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CloudprintFunctionRegister.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudprintFunctionRegister.prototype.httpoptions;
    /**
     * @type {?}
     * @private
     */
    CloudprintFunctionRegister.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRwcmludC5mdW5jdGlvbi5yZWdpc3Rlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2Nsb3VkcHJpbnQvIiwic291cmNlcyI6WyJsaWIvZnVuY3Rpb25zL2Nsb3VkcHJpbnQuZnVuY3Rpb24ucmVnaXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFPeEUsTUFBTSxPQUFPLDBCQUEwQjs7OztJQUlyQyxZQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBRjVCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBR3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUc7WUFDNUIsU0FBUyxFQUFDLEVBQUU7WUFDWixjQUFjLEVBQUMsa0JBQWtCO1NBQ2xDLENBQUM7SUFDSixDQUFDOzs7Ozs7SUFLTSxrQkFBa0IsQ0FBQyxTQUFTOzs7Y0FHM0IsS0FBSyxHQUFHLElBQUksMkJBQTJCLEVBQUU7OztjQUV6QyxVQUFVLEdBQUcsSUFBSSxzQkFBc0IsRUFBRTs7O2NBRXpDLFdBQVcsR0FBRyxJQUFJLHVCQUF1QixFQUFFO1FBRWpELHFCQUFxQjtRQUNyQixJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNqRixpQ0FBaUM7WUFD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LENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7WUEvSUYsVUFBVTs7OztZQVBGLFVBQVU7Ozs7Ozs7SUFVakIsaURBQXlCOzs7OztJQUViLDBDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJpbnRGdW5jdGlvbnNPZkZpbHRlcnZhbHVlIH0gZnJvbSAnLi9jbG91ZHByaW50LmZ1bmN0aW9uLmZpbHRlcnZhbHVlJztcclxuaW1wb3J0IHsgUHJpbnRGdW5jdGlvbnNPZkZvcm1hdCB9IGZyb20gJy4vY2xvdWRwcmludC5mdW5jdGlvbi5mb3JtYXQnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IFByaW50RnVuY3Rpb25zT2ZDb252ZXJ0IH0gZnJvbSAnLi9jbG91ZHByaW50LmZ1bmN0aW9uLmNvbnZlcnQnO1xyXG5cclxuXHJcbi8vIOW8leWFpVN0aW11bHNvZnTnmoRqc+W6k1xyXG5kZWNsYXJlIHZhciBTdGltdWxzb2Z0O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2xvdWRwcmludEZ1bmN0aW9uUmVnaXN0ZXIge1xyXG5cclxuICBwcml2YXRlIGh0dHBvcHRpb25zID0ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyBcclxuICAgIHRoaXMuaHR0cG9wdGlvbnNbJ2hlYWRlcnMnXSA9IHtcclxuICAgICAgU2Vzc2lvbklkOicnLFxyXG4gICAgICAnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24vanNvbidcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJ3lp4vljJboh6rlrprkuYnlh73mlbBcclxuICAgKi9cclxuICBwdWJsaWMgaW5pdEN1c3RvbUZ1bmN0aW9uKGNvbmZpZ1VybCkge1xyXG5cclxuICAgIC8vIOWGhee9ruWHveaVsC3mlbDlgLzov4fmu6RcclxuICAgIGNvbnN0IGZ1bmNzID0gbmV3IFByaW50RnVuY3Rpb25zT2ZGaWx0ZXJ2YWx1ZSgpO1xyXG4gICAgLy8g5YaF572u5Ye95pWwLeagvOW8j+WMllxyXG4gICAgY29uc3QgZnVuY0Zvcm1hdCA9IG5ldyBQcmludEZ1bmN0aW9uc09mRm9ybWF0KCk7XHJcbiAgICAvLyDlhoXnva7lh73mlbAt5qC85byP5YyWXHJcbiAgICBjb25zdCBmdW5jQ29udmVydCA9IG5ldyBQcmludEZ1bmN0aW9uc09mQ29udmVydCgpO1xyXG5cclxuICAgIC8vIOi/memHjOm7mOiupOeahEdTUOWGhee9ruWHveaVsOWIhue7hOS4ukdTUFxyXG4gICAgaWYgKFN0aW11bHNvZnQuUmVwb3J0LkRpY3Rpb25hcnkuU3RpRnVuY3Rpb25zLmdldEZ1bmN0aW9ucygnSUdpeEZ1Y3MnKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cclxuICAgICAgICBmb3IgKGNvbnN0IGYgaW4gZnVuY3MpIHtcclxuICAgICAgICAgICAgY29uc3QgZnVuYyA9IGZ1bmNzW2ZdO1xyXG4gICAgICAgICAgICBTdGltdWxzb2Z0LlJlcG9ydC5EaWN0aW9uYXJ5LlN0aUZ1bmN0aW9ucy5hZGRGdW5jdGlvbihcclxuICAgICAgICAgICAgICBmdW5jLkNhdGVnb3J5LFxyXG4gICAgICAgICAgICAgIGZ1bmMuR3JvdXBGdW5jdGlvbk5hbWUsXHJcbiAgICAgICAgICAgICAgZnVuYy5GdW5jdGlvbk5hbWUsXHJcbiAgICAgICAgICAgICAgZnVuYy5EZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICBmdW5jLlR5cGVPZkZ1bmN0aW9uLFxyXG4gICAgICAgICAgICAgIGZ1bmMuUmV0dXJuVHlwZSxcclxuICAgICAgICAgICAgICBmdW5jLlJldHVybkRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgIGZ1bmMuQXJndW1lbnRUeXBlcyxcclxuICAgICAgICAgICAgICBmdW5jLkFyZ3VtZW50TmFtZXMsXHJcbiAgICAgICAgICAgICAgZnVuYy5Bcmd1bWVudERlc2NyaXB0aW9ucyxcclxuICAgICAgICAgICAgICBmdW5jLkZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxyXG4gICAgICAgIGZvciAoY29uc3QgZiBpbiBmdW5jRm9ybWF0KSB7XHJcbiAgICAgICAgICBjb25zdCBmdW5jID0gZnVuY0Zvcm1hdFtmXTtcclxuICAgICAgICAgIFN0aW11bHNvZnQuUmVwb3J0LkRpY3Rpb25hcnkuU3RpRnVuY3Rpb25zLmFkZEZ1bmN0aW9uKFxyXG4gICAgICAgICAgICBmdW5jLkNhdGVnb3J5LFxyXG4gICAgICAgICAgICBmdW5jLkdyb3VwRnVuY3Rpb25OYW1lLFxyXG4gICAgICAgICAgICBmdW5jLkZ1bmN0aW9uTmFtZSxcclxuICAgICAgICAgICAgZnVuYy5EZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgZnVuYy5UeXBlT2ZGdW5jdGlvbixcclxuICAgICAgICAgICAgZnVuYy5SZXR1cm5UeXBlLFxyXG4gICAgICAgICAgICBmdW5jLlJldHVybkRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBmdW5jLkFyZ3VtZW50VHlwZXMsXHJcbiAgICAgICAgICAgIGZ1bmMuQXJndW1lbnROYW1lcyxcclxuICAgICAgICAgICAgZnVuYy5Bcmd1bWVudERlc2NyaXB0aW9ucyxcclxuICAgICAgICAgICAgZnVuYy5GdW5jdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cclxuICAgICAgICBmb3IgKGNvbnN0IGYgaW4gZnVuY0NvbnZlcnQpIHtcclxuICAgICAgICAgIGNvbnN0IGZ1bmMgPSBmdW5jQ29udmVydFtmXTtcclxuICAgICAgICAgIFN0aW11bHNvZnQuUmVwb3J0LkRpY3Rpb25hcnkuU3RpRnVuY3Rpb25zLmFkZEZ1bmN0aW9uKFxyXG4gICAgICAgICAgICBmdW5jLkNhdGVnb3J5LFxyXG4gICAgICAgICAgICBmdW5jLkdyb3VwRnVuY3Rpb25OYW1lLFxyXG4gICAgICAgICAgICBmdW5jLkZ1bmN0aW9uTmFtZSxcclxuICAgICAgICAgICAgZnVuYy5EZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgZnVuYy5UeXBlT2ZGdW5jdGlvbixcclxuICAgICAgICAgICAgZnVuYy5SZXR1cm5UeXBlLFxyXG4gICAgICAgICAgICBmdW5jLlJldHVybkRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBmdW5jLkFyZ3VtZW50VHlwZXMsXHJcbiAgICAgICAgICAgIGZ1bmMuQXJndW1lbnROYW1lcyxcclxuICAgICAgICAgICAgZnVuYy5Bcmd1bWVudERlc2NyaXB0aW9ucyxcclxuICAgICAgICAgICAgZnVuYy5GdW5jdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyDoh6rlrprkuYnlh73mlbB0b2RvOuacgOe7iOiHquWumuS5ieWHveaVsOS7juWQjuWPsOWPlumFjee9ruaWh+S7tumHjOeahOino+aekFxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoY29uZmlnVXJsLHRoaXMuaHR0cG9wdGlvbnMpLnRvUHJvbWlzZSgpXHJcbiAgICAudGhlbigoZGF0YTpbXSkgPT4ge1xyXG4gICAgICBpZihkYXRhICYmIGRhdGEubGVuZ3RoPjApe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZEpzRnVuY1BsdWdpbnMoLTEsIGRhdGEpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGFsbEZ1bmNzID0gW107XHJcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cclxuICAgICAgICAgIGlmKGRhdGEubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gZGF0YSkge1xyXG4gICAgICAgICAgICAgIGFsbEZ1bmNzLnB1c2god2luZG93WyhkYXRhW2ldIGFzIGFueSkua2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChTdGltdWxzb2Z0LlJlcG9ydC5EaWN0aW9uYXJ5LlN0aUZ1bmN0aW9ucy5nZXRGdW5jdGlvbnMoJ0N1c3RvbUZ1Y3MnKS5sZW5ndGggPT09IDAgJiYgYWxsRnVuY3MubGVuZ3RoPjApIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmZvcmluXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZiBpbiBhbGxGdW5jcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGFsbEZ1bmNzW2ZdO1xyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmZvcmluXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGYyIGluIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZnVuYyA9IGl0ZW1bZjJdO1xyXG4gICAgICAgICAgICAgICAgICBTdGltdWxzb2Z0LlJlcG9ydC5EaWN0aW9uYXJ5LlN0aUZ1bmN0aW9ucy5hZGRGdW5jdGlvbihcclxuICAgICAgICAgICAgICAgICAgICAnQ3VzdG9tRnVjcycsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5Hcm91cEZ1bmN0aW9uTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLkZ1bmN0aW9uTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLkRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuVHlwZU9mRnVuY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5SZXR1cm5UeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuUmV0dXJuRGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5Bcmd1bWVudFR5cGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuQXJndW1lbnROYW1lcyxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLkFyZ3VtZW50RGVzY3JpcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuRnVuY3Rpb24pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vliqBqc+S4muWKoeWHveaVsOaPkuS7tlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkSnNGdW5jUGx1Z2lucyhpLCBkYXRhKSB7XHJcbiAgICBpZiAoIWRhdGEgJiYgZGF0YS5sZW5ndGg9PTApIHtcclxuICAgICAgY29uc3Qgc3ViID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgICBzdWIuY29tcGxldGUoKTsgLy8g5rKh5pyJ6L+Z5Y+l6K+ddG9Qcm9taXNlKCnph4znmoTlhoXlrrnkuI3ot5FcclxuICAgICAgcmV0dXJuIHN1Yi50b1Byb21pc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsb2FkZXIgPSB3aW5kb3dbJ1N5c3RlbSddO1xyXG4gICAgaWYgKGkgPCBkYXRhLmxlbmd0aCAtIDEpIHtcclxuICAgICAgaSsrO1xyXG4gICAgICB0aGlzLmFkZEpzRnVuY1BsdWdpbnMoaSwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbG9hZGVyLmltcG9ydChkYXRhW2ldLnBhdGgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19