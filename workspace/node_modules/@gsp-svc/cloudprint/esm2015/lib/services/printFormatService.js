/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PrintFormat } from '../entitys/printFormat';
import { Urls } from '../utils/cloudprint.Urls';
import { PrintEntity } from '../entitys/printEntity';
import { HttpClient } from '@angular/common/http';
import { Subject } from 'rxjs';
import { Config } from '../entitys/config';
import { DataValidator } from '../utils/cloudprint.datavalidator';
export class PrintFormatService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.printEntity = new PrintEntity();
        this.curSu = Config.PRINT_SU;
    }
    /**
     * @param {?} beId
     * @return {?}
     */
    createPrintFormatWithBE(beId) {
        /** @type {?} */
        const url = this.printEntity.appUrl + Urls.CreatePrintFormatWithBE + 'beId=' + beId + '&su=' + this.curSu;
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise();
    }
    /**
     * @param {?} voId
     * @return {?}
     */
    createPrintFormatWithVO(voId) {
        /** @type {?} */
        const url = this.printEntity.appUrl + Urls.CreatePrintFormatWithVO + 'voId=' + voId + '&su=' + this.curSu;
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise();
    }
    /**
     * @param {?} biznessObjectClassInfo
     * @return {?}
     */
    createPrintFormatWithBO(biznessObjectClassInfo) {
        /** @type {?} */
        const url = this.printEntity.appUrl + Urls.CreatePrintFormatWithBO + 'biznessObjectClassInfo=' + biznessObjectClassInfo + '&su=' + this.curSu;
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise();
    }
    /**
     * @param {?} boId
     * @return {?}
     */
    getDataSourceByBOId(boId) {
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        /** @type {?} */
        const url = this.printEntity.appUrl + Urls.GetDataSourceByBOId;
        return this.httpClient.get(url + 'boId=' + boId + '&su=' + this.curSu).toPromise();
    }
    /**
     * @param {?} dataSourceId
     * @return {?}
     */
    getFormatBySourceId(dataSourceId) {
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(this.printEntity.appUrl + Urls.GetPrintFormatByDataSrouceId + 'dataSrouceId=' + dataSourceId + '&su=' + this.curSu, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    getPrintFormatByDataSrouceAndDimension(billCategoryId, sourceId, firstDimension, secondDimension) {
        firstDimension = firstDimension || '';
        secondDimension = secondDimension || '';
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(this.printEntity.appUrl + Urls.GetPrintFormatByDataSrouceAndDimension + 'billCategoryId=' + billCategoryId + '&sourceId=' + sourceId + '&firstDimension=' + firstDimension + '&secondDimension=' + secondDimension + '&su=' + this.curSu, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    getPrintFormatAndDevice(billCategoryId, sourceId, firstDimension, secondDimension) {
        firstDimension = firstDimension || '';
        secondDimension = secondDimension || '';
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        /** @type {?} */
        const data = {
            billCategoryId: billCategoryId,
            sourceId: sourceId,
            firstDimension: firstDimension,
            secondDimension: secondDimension
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.GetPrintFormatAndDevice + 'su=' + this.curSu, data, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * @return {?}
     */
    getPrintDevice() {
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(Urls.CloudPrintDeviceUrl + Urls.GetPrintDevice + 'su=' + this.curSu, null, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * @param {?} formatId
     * @return {?}
     */
    getFormatByFormatId(formatId) {
        /** @type {?} */
        const url = this.printEntity.appUrl + Urls.LoadPrintFormatById + 'metadataId=' + formatId + '&su=' + this.curSu;
        // LoadPrintFormatById是个Get请求
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data;
        }));
    }
    /**
     * 根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @return {?}
     */
    getNewSourceFormatByFormatId(formatId) {
        /** @type {?} */
        const url = Urls.CloudPrintBaseUrl + Urls.LoadNewSourcePrintFormatById;
        return this.httpClient.get(url + 'formatId=' + formatId).toPromise();
    }
    /**
     * 根据已有的格式id和数据源id,语言，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @param {?} lang
     * @return {?}
     */
    getNewSourceFormatByFormatIdAndLang(formatId, lang) {
        /** @type {?} */
        const url = Urls.CloudPrintBaseUrl + Urls.LoadNewSourcePrintFormatByIdAndLang;
        return this.httpClient.get(url + 'formatId=' + formatId + '&lang=' + lang).toPromise();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    save(data) {
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.SavePrintFormat + '?su=' + this.curSu, data, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    saveWithRes(data) {
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.SavePrintFormatWithRes + '?su=' + this.curSu, data, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    remove(data) {
        // const body = { 'printFormatId':data};
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.DeletePrintFormat + '/' + data + '?su=' + this.curSu, null, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * 加载格式
     * @param {?} reportID id
     * @param {?} flag
     * @return {?}
     */
    loadFormat(reportID, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /**
         * 对于GS内部集成，再外层其实已经给this.printEntity.format赋值了
         */
        if (this.printEntity.format) {
            /** @type {?} */
            const sub = new Subject();
            sub.complete(); // 没有这句话toPromise()里的内容不跑
            return sub.toPromise()
                .then((/**
             * @return {?}
             */
            () => {
                this.printEntity.printFormat = this.printEntity.printFormat || new PrintFormat();
                this.printEntity.printFormat.content = this.printEntity.format;
                return this.printEntity.format;
            }));
        }
        /**
         * 这块主要还是针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现CreatePrintFormatWithBE,CreatePrintFormatWithSchema和GetPrintFormatById这俩个get请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        let url;
        /** @type {?} */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        if (reportID && reportID.length > 0) { // 加载已有的格式
            url = this.printEntity.appUrl + Urls.LoadPrintFormatById + 'metadataId=' + reportID + '&su=' + this.curSu;
            // LoadPrintFormatById是个Get请求
            return this.httpClient.get(url, httpoptions).toPromise()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // 加载了格式后把格式记住
                this.printEntity.printFormat = data;
                this.printEntity.format = data.content;
                return data.content;
            }));
        }
        else {
            console.log(this.printEntity.format);
            console.log(reportID);
            console.error('格式id为空，无法获取格式信息');
        }
    }
    /**
     * 加载数据
     * @param {?} dataIds 要加载的数据Id
     * @param {?} flag
     * @return {?}
     */
    loadData(dataIds, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /**
         * 对于GS内部集成，再外层其实已经给this.printEntity.data赋值了
         */
        if (this.printEntity.data) {
            /** @type {?} */
            const sub = new Subject();
            sub.complete(); // 没有这句话toPromise()里的内容不跑
            return sub.toPromise()
                .then((/**
             * @return {?}
             */
            () => {
                return this.printEntity.data;
            }));
        }
        /**
         * 这块主要还是针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现GetPrintData这个get请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(this.printEntity.appUrl + Urls.LoadPrintData + 'dataIds=' + dataIds + '&su=' + this.curSu, httpoptions).toPromise()
            .then((/**
         * @param {?} data2
         * @return {?}
         */
        (data2) => {
            return data2;
        }));
    }
    /**
     * 单格式数据id渲染打印
     * GS内部/第三方
     * @param {?} beOptions 数据源选项
     * @param {?} options 导出选项
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    printSingleById(beOptions, options, su, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        const body = {
            BEOptions: beOptions,
            Options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        const httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        if (!beOptions.ServiceUnit) {
            return this.getSuByFormatId(beOptions.FormatId)
                .then((/**
             * @param {?} sucode
             * @return {?}
             */
            (sucode) => {
                beOptions.ServiceUnit = sucode;
                su = su || beOptions.ServiceUnit;
                return this.httpClient.post(this.printEntity.appUrl + Urls.PrintSingleById + 'su=' + su, body, httpoptions).toPromise()
                    .then((/**
                 * @param {?} ret
                 * @return {?}
                 */
                (ret) => {
                    return ret;
                }));
            }));
        }
        else {
            su = su || beOptions.ServiceUnit;
            return this.httpClient.post(this.printEntity.appUrl + Urls.PrintSingleById + 'su=' + su, body, httpoptions).toPromise()
                .then((/**
             * @param {?} ret
             * @return {?}
             */
            (ret) => {
                return ret;
            }));
        }
    }
    /**
     * 单格式过滤条件渲染打印
     * GS内部/第三方
     * @param {?} beOptions BEFilter选项
     * @param {?} options 导出选项
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    printSingleByFilter(beOptions, options, su, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        const body = {
            BEOptions: beOptions,
            Options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        const httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        if (!beOptions.ServiceUnit) {
            return this.getSuByFormatId(beOptions.FormatId)
                .then((/**
             * @param {?} sucode
             * @return {?}
             */
            (sucode) => {
                beOptions.ServiceUnit = sucode;
                su = su || beOptions.ServiceUnit;
                return this.httpClient.post(this.printEntity.appUrl + Urls.PrintSingleByFilter + 'su=' + su, body, httpoptions).toPromise()
                    .then((/**
                 * @param {?} ret
                 * @return {?}
                 */
                (ret) => {
                    return ret;
                }));
            }));
        }
        else {
            su = su || beOptions.ServiceUnit;
            return this.httpClient.post(this.printEntity.appUrl + Urls.PrintSingleByFilter + 'su=' + su, body, httpoptions).toPromise()
                .then((/**
             * @param {?} ret
             * @return {?}
             */
            (ret) => {
                return ret;
            }));
        }
    }
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    printMultiById(beOptionsList, options, su, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        const body = {
            sourceOptionsList: beOptionsList,
            options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        const httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.PrintMultiById + 'su=' + su, body, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    printMultiByFilter(beOptionsList, options, su, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        const body = {
            sourceFilterOptionsList: beOptionsList,
            options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        const httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.PrintMultiByFilter + 'su=' + su, body, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * 渲染测试数据
     * @param {?} formats
     * @param {?} datas
     * @param {?} flag
     * @return {?}
     */
    printTestData(formats, datas, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        const body = {
            format: formats,
            data: JSON.stringify(datas),
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        const httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.PrintTestData + 'su=' + this.curSu, body, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * 触发打印事件
     * @param {?} data
     * @param {?} flag
     * @return {?}
     */
    sendPrintEvent(data, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        // const body = {
        //     formatid:formatid,
        //     su:su,
        // };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        const httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.SendPrintEvent + 'su=' + this.curSu, data, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        (ret) => {
            return ret;
        }));
    }
    /**
     * @return {?}
     */
    isRemotePrint() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const url = this.printEntity.appUrl + Urls.IsRemotePrint + 'su=' + this.curSu;
            // LoadPrintFormatById是个Get请求
            /** @type {?} */
            const httpoptions = {};
            httpoptions['headers'] = {
                SessionId: this.printEntity.sessionId || '',
                'Content-Type': 'application/json'
            };
            // var httpops = Object.assign({},httpoptions);
            // httpops['responseType']="text/html";
            return yield this.httpClient.get(url, httpoptions).toPromise()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                return data;
            }));
        });
    }
    /**
     * @return {?}
     */
    getEnableFonts() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const url = this.printEntity.appUrl + Urls.GetEnableFonts + 'su=' + this.curSu;
            // LoadPrintFormatById是个Get请求
            /** @type {?} */
            const httpoptions = {};
            httpoptions['headers'] = {
                SessionId: this.printEntity.sessionId || '',
                'Content-Type': 'application/json'
            };
            return yield this.httpClient.get(url, httpoptions).toPromise()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                return data;
            }));
        });
    }
    /**
     * 通过打印格式，获取bo，在获取su（这是一个临时方案）
     * @private
     * @param {?} formatId
     * @return {?}
     */
    getSuByFormatId(formatId) {
        /** @type {?} */
        const url = this.printEntity.appUrl + '/getSuByFormatId?formatId=' + formatId + '&su=cloudprint';
        /** @type {?} */
        const httpoptions = {};
        httpoptions['responseType'] = 'text/html';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            return data;
        }));
    }
}
PrintFormatService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrintFormatService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    PrintFormatService.prototype.printEntity;
    /**
     * @type {?}
     * @private
     */
    PrintFormatService.prototype.curSu;
    /**
     * @type {?}
     * @private
     */
    PrintFormatService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,