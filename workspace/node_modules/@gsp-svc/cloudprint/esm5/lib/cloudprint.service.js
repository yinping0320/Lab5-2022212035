/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ApplicationRef, LOCALE_ID } from '@angular/core';
import { ComponentFactoryResolver } from '@angular/core';
import { CloudprintDesignerComponent } from './cloudprint-designer/cloudprint-designer.component';
import { CloudprintViewerComponent } from './cloudprint-viewer/cloudprint-viewer.component';
import { PrintEntity } from './entitys/printEntity';
import { NotifyService } from '@farris/ui-notify';
import { Urls } from './utils/cloudprint.Urls';
import { AppService } from '@gsp-sys/rtf-common';
import { CmpType } from './entitys/enums/cmpType';
import { OutputParam } from './entitys/outputoptions/outputParam';
import { PrintFormatService } from './services/printFormatService';
import { SourceType } from './entitys/enums/sourceType';
import { PrintFormat } from './entitys/printFormat';
import { WindowService } from '@progress/kendo-angular-dialog';
import { FormatlistComponent } from './cloudprint-formatlist/formatlist.component';
import { Utils } from './utils/cloudprint.utils';
import { CloudprintdesignerService } from './cloudprint-designer/cloudprint-designer.service';
import { CloudprintviewerService } from './cloudprint-viewer/cloudprint-viewer.service';
import { QueryType } from './entitys/enums/querytype';
import { PrintType } from './entitys/enums/printtype';
import { DataValidator } from './utils/cloudprint.datavalidator';
import { FormatlistjobComponent } from './cloudprint-formatlistjob/formatlistjob.component';
import { BsModalService } from '@farris/ui-modal';
import { LocalLangPipe } from './local.pipe';
var CloudprintService = /** @class */ (function () {
    function CloudprintService(formatSrv, resolver, designerSrv, viewerSrv, injector, applicationRef, notifyService, appService, windowService, modalService) {
        this.formatSrv = formatSrv;
        this.resolver = resolver;
        this.designerSrv = designerSrv;
        this.viewerSrv = viewerSrv;
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.notifyService = notifyService;
        this.appService = appService;
        this.windowService = windowService;
        this.modalService = modalService;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        //#region 格式选择列表相关接口
        this.windowRef = undefined;
        // 设置printEntity的默认值
        this.printEntity.appUrl = Urls.CloudPrintBaseUrl;
        this.printEntity.isUseMetaData = true;
        this.printEntity.language = localStorage.getItem("languageCode") || 'zh-CHS';
        // 将printEntity设置到designer service上（不设置，后面调用服务会发现服务的printEntity是空的）
        // this.designerSrv.printEntity = this.printEntity;
        // 将printEntity设置到viewer service上（不设置，后面调用服务会发现服务的printEntity是空的）
        // this.viewerSrv.printEntity = this.printEntity;
        this.formatSrv.printEntity = this.printEntity;
        if (this.injector) {
            this.modalService = this.injector.get(BsModalService);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localpipe = new LocalLangPipe(this.localeid);
        }
    }
    Object.defineProperty(CloudprintService.prototype, "setPrintEntity", {
        /**
         * 设置PrintEntity参数
         * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         */
        set: /**
         * 设置PrintEntity参数
         * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            this.printEntity = entity;
            // this.designerSrv.printEntity = this.printEntity;
            // this.viewerSrv.printEntity = this.printEntity;
            this.formatSrv.printEntity = this.printEntity;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 运行时打印时根据维度过滤弹出打印格式选择列表
     * @param dataSourceId 数据源Id
     * @param filter 是否过滤条件
     * @param beOptions beOptions
     * @param options 输出options
     * @param ele 指定的element元素
     */
    /**
     * 运行时打印时根据维度过滤弹出打印格式选择列表
     * @private
     * @param {?} beOptions beOptions
     * @param {?} options 输出options
     * @param {?} ele 指定的element元素
     * @param {?} filter 是否过滤条件
     * @return {?}
     */
    CloudprintService.prototype.openFormatListByDimension = /**
     * 运行时打印时根据维度过滤弹出打印格式选择列表
     * @private
     * @param {?} beOptions beOptions
     * @param {?} options 输出options
     * @param {?} ele 指定的element元素
     * @param {?} filter 是否过滤条件
     * @return {?}
     */
    function (beOptions, options, ele, filter) {
        var _this = this;
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var dataSourceId = beOptions.SourceId;
        /** @type {?} */
        var billCategoryId = beOptions.billCategoryId;
        return this.formatSrv.getPrintFormatByDataSrouceAndDimension(billCategoryId, dataSourceId, ((/** @type {?} */ (beOptions))).FirstDimensionVal, ((/** @type {?} */ (beOptions))).SecondDimensionVal).then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var format = (res != null && res.length != undefined) ? res : [];
            //只有一条打印格式，直接输出预览
            if (format.length === 1) {
                return that.outputBySingleSelectionFormat({
                    'id': format[0].id,
                    'isFilter': filter,
                    'beoptions': Object.assign({}, beOptions),
                    'options': options,
                    'isJob': false,
                    'printerName': '',
                    'boxId': '',
                    'printSetting': null,
                    'ele': ele
                });
            }
            /** @type {?} */
            var factory = that.resolver.resolveComponentFactory(FormatlistComponent);
            /** @type {?} */
            var printsetting = factory.create(that.injector);
            printsetting.instance.formats = tslib_1.__spread(format);
            printsetting.instance.localepip = that.localpipe;
            /** @type {?} */
            var dlg = _this.modalService.show(printsetting, {
                title: _this.localpipe.transform('printformat'),
                width: 400,
                height: 500,
                showButtons: true,
                showMaxButton: false,
                buttons: [
                    { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            printsetting.instance.printJob();
                        }) },
                    { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            dlg.close();
                        }) }
                ],
            });
            // printsetting.instance.dlg = dlg;
            //订阅了弹出的格式选择列表的关闭事件
            printsetting.instance.print.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                dlg.close();
                return that.outputBySingleSelectionFormat({
                    'id': data.id,
                    'isFilter': filter,
                    'beoptions': Object.assign({}, beOptions),
                    'options': options,
                    'isJob': false,
                    'printerName': '',
                    'boxId': '',
                    'printSetting': null,
                    'ele': ele
                });
            }));
        }));
    };
    /**
     * 后台打印任务的格式选择和打印配置列表
     */
    /**
     * 后台打印任务的格式选择和打印配置列表
     * @private
     * @param {?} beOptions
     * @param {?} options
     * @param {?} filter
     * @param {?} isMulti
     * @return {?}
     */
    CloudprintService.prototype.openFormatListByDimension4Job = /**
     * 后台打印任务的格式选择和打印配置列表
     * @private
     * @param {?} beOptions
     * @param {?} options
     * @param {?} filter
     * @param {?} isMulti
     * @return {?}
     */
    function (beOptions, options, filter, isMulti) {
        var _this = this;
        /** @type {?} */
        var that = this;
        if (isMulti) { //批量打印
            return this.formatSrv.getPrintDevice().then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var device = data || [];
                /** @type {?} */
                var ids = '';
                beOptions.forEach((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return ids += x.FormatId + ','; }));
                /** @type {?} */
                var factory = that.resolver.resolveComponentFactory(FormatlistjobComponent);
                /** @type {?} */
                var printsetting = factory.create(that.injector);
                printsetting.instance.boxlist = device;
                printsetting.instance.formatId = ids.length > 0 ? ids.substr(0, ids.length - 1) : ids;
                printsetting.instance.isShowFormat = false;
                printsetting.instance.localepip = that.localpipe;
                /** @type {?} */
                var dlg = _this.modalService.show(printsetting, {
                    title: _this.localpipe.transform('printset'),
                    width: 800,
                    height: 500,
                    showButtons: true,
                    showMaxButton: false,
                    buttons: [
                        { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                printsetting.instance.printJob();
                            }) },
                        { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                dlg.close();
                            }) }
                    ],
                });
                //订阅了弹出的格式选择列表的关闭事件
                printsetting.instance.print.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    dlg.close();
                    return that.outputByMultiSelectionFormat({
                        'isFilter': filter,
                        'beoptions': tslib_1.__spread(beOptions),
                        'options': Object.assign({}, options),
                        'isJob': true,
                        'printerName': data.printter,
                        'boxId': data.boxId,
                        'printSetting': data.printSetting,
                        'ele': null
                    });
                }));
            }));
        }
        else {
            /** @type {?} */
            var billCategoryId = beOptions[0].billCategoryId;
            /** @type {?} */
            var dataSourceId = beOptions[0].SourceId;
            return this.formatSrv.getPrintFormatAndDevice(billCategoryId, dataSourceId, ((/** @type {?} */ (beOptions))).FirstDimensionVal, ((/** @type {?} */ (beOptions))).SecondDimensionVal).then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var format = res.format || [];
                /** @type {?} */
                var device = res.device || [];
                //只有一条打印格式，则不用再选择格式
                if (format.length === 1) {
                    beOptions[0].FormatId = format[0].id;
                }
                /** @type {?} */
                var factory = that.resolver.resolveComponentFactory(FormatlistjobComponent);
                /** @type {?} */
                var printsetting = factory.create(that.injector);
                printsetting.instance.formats = format;
                printsetting.instance.boxlist = device;
                printsetting.instance.formatId = beOptions[0].FormatId;
                printsetting.instance.isShowFormat = beOptions[0].FormatId ? false : true;
                printsetting.instance.localepip = that.localpipe;
                /** @type {?} */
                var dlg = _this.modalService.show(printsetting, {
                    title: _this.localpipe.transform('printset'),
                    width: 800,
                    height: 500,
                    showButtons: true,
                    showMaxButton: false,
                    buttons: [
                        { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                printsetting.instance.printJob();
                            }) },
                        { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                dlg.close();
                            }) }
                    ],
                });
                //订阅了弹出的格式选择列表的关闭事件
                printsetting.instance.print.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    dlg.close();
                    return that.outputBySingleSelectionFormat({
                        'id': data.id,
                        'isFilter': filter,
                        'beoptions': Object.assign({}, beOptions[0]),
                        'options': Object.assign({}, options),
                        'isJob': true,
                        'printerName': data.printter,
                        'boxId': data.boxId,
                        'printSetting': data.printSetting,
                        'ele': null
                    });
                }));
            }));
        }
    };
    // 选了格式后的输出
    // 选了格式后的输出
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    CloudprintService.prototype.outputBySingleSelectionFormat = 
    // 选了格式后的输出
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    function (res) {
        var _this = this;
        console.log('选完格式准备渲染: ' + JSON.stringify(res));
        /** @type {?} */
        var self = this;
        if (!res.id) {
            return;
        }
        res.beoptions.FormatId = res.id;
        res.options.DeviceId = res.boxId;
        res.options.printerName = res.printerName;
        res.options.printSetting = res.printSetting;
        res.options.printJob = res.isJob;
        if (res.isJob) { //后台打印
            if (res.isFilter === true) {
                return this.formatSrv.printSingleByFilter(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
            else {
                return this.formatSrv.printSingleById(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
        }
        else { //前台打印
            if (res.ele) { //有ele，则引擎负责渲染
                if (res.isFilter === true) {
                    if (res.ele === 'download') {
                        return this.formatSrv.printSingleByFilter(res.beoptions, res.options, res.su, 'CloudPrint')
                            .then((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            self.downloadFile(data);
                        }));
                    }
                    else {
                        self.openRendedViewer(res.ele, null, res.options, [res.beoptions], res.isFilter);
                    }
                }
                else {
                    if (res.ele === 'download') {
                        return this.formatSrv.printSingleById(res.beoptions, res.options, res.su, 'CloudPrint')
                            .then((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            self.downloadFile(data);
                        }));
                    }
                    else {
                        self.openRendedViewer(res.ele, null, res.options, [res.beoptions], res.isFilter);
                    }
                }
            }
            else { //没有ele，则只返回后台的渲染结果，给调用方自己处理
                if (res.filter === true) {
                    return this.formatSrv.printSingleByFilter(res.beoptions, res.options, res.su, 'CloudPrint');
                }
                else {
                    return this.formatSrv.printSingleById(res.beoptions, res.options, res.su, 'CloudPrint');
                }
            }
        }
    };
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    CloudprintService.prototype.outputByMultiSelectionFormat = /**
     * @private
     * @param {?} res
     * @return {?}
     */
    function (res) {
        var _this = this;
        console.log('选完格式准备渲染: ' + JSON.stringify(res));
        /** @type {?} */
        var self = this;
        res.options.DeviceId = res.boxId;
        res.options.printerName = res.printerName;
        res.options.printSetting = res.printSetting;
        res.options.printJob = res.isJob;
        if (res.isJob) { //后台打印
            if (res.isFilter === true) {
                return this.formatSrv.printMultiByFilter(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
            else {
                return this.formatSrv.printMultiById(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
        }
    };
    //#endregion
    //#region 对外设计器和预览器接口
    /**
     * 在当前页面Body上打开Designer
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    //#endregion
    //#region 对外设计器和预览器接口
    /**
     * 在当前页面Body上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesigner = 
    //#endregion
    //#region 对外设计器和预览器接口
    /**
     * 在当前页面Body上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (format, data, formatId, dataIds) {
        this.openDesignerInternal(window.document.body, format, data, formatId, dataIds);
    };
    /**
     * 在当前页面的指定的元素上打开Designer
     * @param ele 指定的元素
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    /**
     * 在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesignerOnEle = /**
     * 在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (ele, format, data, formatId, dataIds) {
        this.openDesignerInternal(ele, format, data, formatId, dataIds);
    };
    /**
     * 在新的tab页面上打开Designer
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    /**
     * 在新的tab页面上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesignerNewTab = /**
     * 在新的tab页面上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (format, data, formatId, dataIds) {
        this.openDesignerInternal(null, format, data, formatId, dataIds);
    };
    /**
     * 运行时在当前页面的指定的元素上打开Designer
     * @param ele 指定的元素
     * @param formatCode 格式编号
     * @param formatName 格式名称
     * @param bizObjectId 业务对象Id
     * @param datasourceId 数据源Id, BEId/VOId/BesinessObjectClassInfo
     * @param sourceType 数据源类型, SourceType.BE/SourceType.VO/SourceType.BO
     */
    /**
     * 运行时在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} formatId
     * @param {?} formatCode 格式编号
     * @param {?} formatName 格式名称
     * @param {?} bizObjectId 业务对象Id
     * @param {?} datasourceId 数据源Id, BEId/VOId/BesinessObjectClassInfo
     * @param {?} sourceType 数据源类型, SourceType.BE/SourceType.VO/SourceType.BO
     * @return {?}
     */
    CloudprintService.prototype.openDesignerOnEleForRuntime = /**
     * 运行时在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} formatId
     * @param {?} formatCode 格式编号
     * @param {?} formatName 格式名称
     * @param {?} bizObjectId 业务对象Id
     * @param {?} datasourceId 数据源Id, BEId/VOId/BesinessObjectClassInfo
     * @param {?} sourceType 数据源类型, SourceType.BE/SourceType.VO/SourceType.BO
     * @return {?}
     */
    function (ele, formatId, formatCode, formatName, bizObjectId, datasourceId, sourceType) {
        var _this = this;
        this.printEntity.printFormat = new PrintFormat();
        this.printEntity.isUseMetaData = true;
        if (formatId && formatId.length > 0) {
            // 编辑
            this.formatSrv.getNewSourceFormatByFormatId(formatId)
                .then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.printEntity.printFormat = res;
                //打开设计器
                _this.openDesignerOnEle(ele, _this.printEntity.printFormat.content, {}, '', '');
            }));
        }
        else {
            //初始化
            this.initPrintFormat(datasourceId, sourceType)
                .then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.printEntity.printFormat.id = Utils.uuid();
                _this.printEntity.printFormat.code = formatCode;
                _this.printEntity.printFormat.name = formatName;
                _this.printEntity.printFormat.bizObjectId = bizObjectId;
                _this.printEntity.printFormat.dataSourceId = datasourceId;
                _this.printEntity.printFormat.sourceType = sourceType;
                _this.printEntity.printFormat.isUseTemplate = false;
                _this.printEntity.printFormat.content = res.format; //打印格式mrt   
                _this.printEntity.printFormat.dataSchema = res.printschema; //PrintDataSchemaView描述   
                //打开设计器
                _this.openDesignerOnEle(ele, _this.printEntity.printFormat.content, {}, '', '');
            }));
        }
    };
    /**
     * 在指定的元素上打开Designer(前端渲染)
     * @param ele 指定的元素
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    /**
     * 在指定的元素上打开Designer(前端渲染)
     * @private
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesignerInternal = /**
     * 在指定的元素上打开Designer(前端渲染)
     * @private
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (ele, format, data, formatId, dataIds) {
        if (ele) {
            this.printEntity.format = format;
            this.printEntity.data = data;
            this.printEntity.foramtId = formatId;
            this.printEntity.dataId = dataIds;
            this.createDesignerRef();
            // 给视图添加脏检查(这个方式是配合@ViewChild的方法使用的)
            // this.applicationRef.attachView(this.designercomponentRef.hostView);
            // 将创建好的组件引用append到指定标签下
            // 这里将动态组件加载到指定的html里有两种方式：
            //  1.上面的@ViewChil
            //  2.如下的ele.appendChild(this.getComponentRootNode(this.viewercomponentRef));方式
            ele.appendChild(this.getComponentRootNode(this.designercomponentRef));
        }
        else {
            /** @type {?} */
            var param = new OutputParam();
            param.prnFormat = format;
            param.prnData = data;
            param.prnFormatId = formatId;
            param.prnDataId = dataIds;
            param.prnType = CmpType.Designer;
            this.appService.openAppByOptions({
                appType: 'app',
                funcId: '',
                tabName: this.localpipe.transform('printdesigner'),
                appId: 'cloudprint-view-index',
                appEntrance: 'cloudprint-view-index',
                tabId: Utils.uuid(),
                entityParams: {
                    foramtParam: param,
                    formatEntity: null,
                },
            });
        }
    };
    /**
     * 获取空白打印格式
     */
    /**
     * 获取空白打印格式
     * @private
     * @param {?} datasourceId
     * @param {?} sourceType
     * @return {?}
     */
    CloudprintService.prototype.initPrintFormat = /**
     * 获取空白打印格式
     * @private
     * @param {?} datasourceId
     * @param {?} sourceType
     * @return {?}
     */
    function (datasourceId, sourceType) {
        if (sourceType === SourceType.BE) {
            //bo数据源
            return this.formatSrv.createPrintFormatWithBE(datasourceId);
        }
        else if (sourceType === SourceType.VO) {
            // vo数据源
            return this.formatSrv.createPrintFormatWithVO(datasourceId);
        }
        else {
            // 默认用BE数据源
            return this.formatSrv.createPrintFormatWithBO(datasourceId);
        }
    };
    /**
     * 创建Designer构件的引用对象
     */
    /**
     * 创建Designer构件的引用对象
     * @private
     * @return {?}
     */
    CloudprintService.prototype.createDesignerRef = /**
     * 创建Designer构件的引用对象
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(CloudprintDesignerComponent);
        if (!this.viewContainer) {
            this.designercomponentRef = factory.create(this.injector);
            this.applicationRef.attachView(this.designercomponentRef.hostView);
        }
        else {
            this.viewContainer.clear();
            this.designercomponentRef = this.viewContainer.createComponent(factory);
        }
        // 同步组件和组件上依赖的服务的printEntity
        this.designercomponentRef.instance.setPrintEntity(this.printEntity);
        // this.designercomponentRef.instance.localeid = this.localeid;
        // 订阅退出事件
        this.designercomponentRef.instance.printEntity.onExitEvent.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.designercomponentRef.destroy();
            if (!_this.viewContainer) {
                _this.applicationRef.detachView(_this.designercomponentRef.hostView);
            }
            else {
                _this.viewContainer.clear();
            }
        }));
    };
    /**
     * 打开已经渲染的Viewer（后端渲染）
     * @param ele 指定的元素
     * @param data 已经渲染的格式(后端渲染是pdf的二进制流)
     */
    /**
     * 打开已经渲染的Viewer（后端渲染）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.openRendedViewer = /**
     * 打开已经渲染的Viewer（后端渲染）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    function (ele, data, options, sourceOptions, isFilter, printEntity, param) {
        if (sourceOptions === void 0) { sourceOptions = null; }
        if (isFilter === void 0) { isFilter = false; }
        if (printEntity === void 0) { printEntity = null; }
        if (param === void 0) { param = null; }
        if (printEntity != null) { //用外界的printEntity属性覆盖当前的printEntity的属性
            // tslint:disable-next-line:forin
            for (var key in printEntity) {
                this.printEntity[key] = printEntity[key];
            }
        }
        if (data) { //数据已渲染，直接打印，不存在后台打印了
            this.preViewLocal(ele, data, options, sourceOptions, printEntity, isFilter, param);
        }
        else {
            this.preViewRemote(ele, options, sourceOptions, isFilter, printEntity, param);
        }
    };
    /**
     * 打开已经渲染的Viewer（后端渲染,给附件用的）
     * @param ele 指定的元素
     * @param data 已经渲染的格式(后端渲染是pdf的二进制流)
     */
    /**
     * 打开已经渲染的Viewer（后端渲染,给附件用的）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @return {?}
     */
    CloudprintService.prototype.openRendedViewer4Attachment = /**
     * 打开已经渲染的Viewer（后端渲染,给附件用的）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @return {?}
     */
    function (ele, data, options) {
        this.openRendedViewer(ele, data, options, null, false, this.printEntity);
    };
    /**
     * 本地直接打印
     */
    /**
     * 本地直接打印
     * @private
     * @param {?} ele
     * @param {?} data
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} printEntity
     * @param {?=} isFilter
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.preViewLocal = /**
     * 本地直接打印
     * @private
     * @param {?} ele
     * @param {?} data
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} printEntity
     * @param {?=} isFilter
     * @param {?=} param
     * @return {?}
     */
    function (ele, data, options, sourceOptions, printEntity, isFilter, param) {
        if (sourceOptions === void 0) { sourceOptions = null; }
        if (printEntity === void 0) { printEntity = null; }
        if (param === void 0) { param = null; }
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var b = new Blob([data]);
        /** @type {?} */
        var reader = new FileReader();
        reader.readAsArrayBuffer(b);
        reader.onload = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var rendedFormat, param, remotePrint;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            rendedFormat = (/** @type {?} */ (reader.result));
                            param = new OutputParam();
                            param.prnRendedFormat = btoa((/** @type {?} */ (new Uint8Array(rendedFormat))));
                            param.prnType = CmpType.Viewer;
                            param.prnOutputOps = Object.assign({}, options);
                            param.prnSourceOptions = sourceOptions ? tslib_1.__spread(sourceOptions) : [];
                            param.isFilter = isFilter;
                            if (!(ele === 'tab')) return [3 /*break*/, 1];
                            self.appService.openAppByOptions({
                                appType: 'app',
                                funcId: '',
                                tabName: self.localpipe.transform('printview'),
                                appId: 'cloudprint-view-index',
                                appEntrance: 'cloudprint-view-index',
                                tabId: Utils.uuid(),
                                entityParams: {
                                    foramtParam: param,
                                    formatEntity: null,
                                },
                            });
                            return [3 /*break*/, 3];
                        case 1: return [4 /*yield*/, self.formatSrv.isRemotePrint()];
                        case 2:
                            remotePrint = _a.sent();
                            self.createViewerRef();
                            self.printEntity.rendedFormat = rendedFormat;
                            self.viewercomponentRef.instance.outputParam = param;
                            self.viewercomponentRef.instance.isRemotePrint = remotePrint;
                            ele.appendChild(self.getComponentRootNode(self.viewercomponentRef));
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        });
    };
    /**
     * 远程打印
     */
    /**
     * 远程打印
     * @private
     * @param {?} ele
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.preViewRemote = /**
     * 远程打印
     * @private
     * @param {?} ele
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    function (ele, options, sourceOptions, isFilter, printEntity, param) {
        if (sourceOptions === void 0) { sourceOptions = null; }
        if (printEntity === void 0) { printEntity = null; }
        if (param === void 0) { param = null; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var self, outputparam, remotePrint;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        self = this;
                        outputparam = new OutputParam();
                        outputparam.prnType = CmpType.Viewer;
                        outputparam.prnOutputOps = Object.assign({}, options);
                        outputparam.prnSourceOptions = tslib_1.__spread(sourceOptions);
                        outputparam.isFilter = isFilter;
                        if (!(ele === 'tab')) return [3 /*break*/, 1];
                        self.appService.openAppByOptions({
                            appType: 'app',
                            funcId: '',
                            tabName: self.localpipe.transform('printview'),
                            appId: 'cloudprint-view-index',
                            appEntrance: 'cloudprint-view-index',
                            tabId: Utils.uuid(),
                            entityParams: {
                                foramtParam: outputparam,
                                formatEntity: null,
                            },
                        });
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, self.formatSrv.isRemotePrint()];
                    case 2:
                        remotePrint = _a.sent();
                        self.createViewerRef();
                        self.viewercomponentRef.instance.outputParam = outputparam;
                        self.viewercomponentRef.instance.isRemotePrint = remotePrint;
                        ele.appendChild(self.getComponentRootNode(self.viewercomponentRef));
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 创建Viewer构件的引用对象
     */
    /**
     * 创建Viewer构件的引用对象
     * @private
     * @return {?}
     */
    CloudprintService.prototype.createViewerRef = /**
     * 创建Viewer构件的引用对象
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(CloudprintViewerComponent);
        if (!this.viewContainer) {
            this.viewercomponentRef = factory.create(this.injector);
            this.applicationRef.attachView(this.viewercomponentRef.hostView);
        }
        else {
            this.viewContainer.clear();
            this.viewercomponentRef = this.viewContainer.createComponent(factory);
        }
        // 同步组件和组件上依赖的服务的printEntity
        this.viewercomponentRef.instance.setPrintEntity(this.printEntity);
        this.viewercomponentRef.instance.localpipe = this.localpipe;
        // 订阅退出事件
        this.viewercomponentRef.instance.printEntity.onExitEvent.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.viewercomponentRef.destroy();
            if (!_this.viewContainer) {
                _this.applicationRef.detachView(_this.viewercomponentRef.hostView);
            }
            else {
                _this.viewContainer.clear();
            }
        }));
    };
    /**
     * 将ComponentRef类型的组件引用转换为DOM节点（参考自Material2）
     * @param cpRef 组件的引用对象
     */
    /**
     * 将ComponentRef类型的组件引用转换为DOM节点（参考自Material2）
     * @private
     * @param {?} cpRef 组件的引用对象
     * @return {?}
     */
    CloudprintService.prototype.getComponentRootNode = /**
     * 将ComponentRef类型的组件引用转换为DOM节点（参考自Material2）
     * @private
     * @param {?} cpRef 组件的引用对象
     * @return {?}
     */
    function (cpRef) {
        return (/** @type {?} */ (((/** @type {?} */ (cpRef.hostView))).rootNodes[0]));
    };
    //#endregion
    //#region 对外打印服务接口
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    //#endregion
    //#region 对外打印服务接口
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleById = 
    //#endregion
    //#region 对外打印服务接口
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beoptions, options, ele, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beoptions.queryType == undefined) { //兼容以前的逻辑
            beoptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        //与表单集成时，表单打印时有多个打印格式，需要选择，这时候格式id是空的
        if (beoptions.FormatId == undefined || beoptions.FormatId == '') {
            return this.openFormatListByDimension(beoptions, options, ele, false);
        }
        else {
            if (ele) {
                /** @type {?} */
                var self_1 = this;
                if (ele === 'download') {
                    return this.formatSrv.printSingleById(beoptions, options, su, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        self_1.downloadFile(data);
                    }));
                }
                else {
                    self_1.openRendedViewer(ele, null, options, [beoptions], false);
                }
            }
            else {
                return this.formatSrv.printSingleById(beoptions, options, su, 'CloudPrint');
            }
        }
    };
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleByFilter = /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beFilteroptions, options, ele, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beFilteroptions.queryType == undefined) { //兼容以前的逻辑
            beFilteroptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        //与表单集成时，表单打印时有多个打印格式，需要选择，这时候格式id是空的
        if (beFilteroptions.FormatId == undefined || beFilteroptions.FormatId == '') {
            return this.openFormatListByDimension(beFilteroptions, options, ele, true);
        }
        else {
            if (ele) {
                /** @type {?} */
                var self_2 = this;
                if (ele === 'download') {
                    return this.formatSrv.printSingleByFilter(beFilteroptions, options, su, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        self_2.downloadFile(data);
                    }));
                }
                else {
                    self_2.openRendedViewer(ele, null, options, [beFilteroptions], true);
                }
            }
            else {
                return this.formatSrv.printSingleByFilter(beFilteroptions, options, su, 'CloudPrint');
            }
        }
    };
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     */
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiById = /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beOptionsList, options, ele, su, param) {
        var _this = this;
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        for (var i = 0; i < beOptionsList.length; i++) {
            DataValidator.checkForNullReference(beOptionsList[i].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (ele) {
            /** @type {?} */
            var self_3 = this;
            if (ele === 'download') {
                return this.formatSrv.printMultiById(beOptionsList, options, su, 'CloudPrint')
                    .then((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.downloadFile(data);
                }));
            }
            else {
                self_3.openRendedViewer(ele, null, options, beOptionsList, false);
            }
        }
        else {
            return this.formatSrv.printMultiById(beOptionsList, options, su, 'CloudPrint');
        }
    };
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     */
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiByFilter = /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beOptionsList, options, ele, su, param) {
        var _this = this;
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        for (var i = 0; i < beOptionsList.length; i++) {
            DataValidator.checkForNullReference(beOptionsList[i].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (ele) {
            /** @type {?} */
            var self_4 = this;
            if (ele === 'download') {
                return this.formatSrv.printMultiByFilter(beOptionsList, options, su, 'CloudPrint')
                    .then((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.downloadFile(data);
                }));
            }
            else {
                self_4.openRendedViewer(ele, null, options, beOptionsList, true);
            }
        }
        else {
            return this.formatSrv.printMultiByFilter(beOptionsList, options, su, 'CloudPrint');
        }
    };
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleById4Job = /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beoptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beoptions.queryType == undefined) { //兼容以前的逻辑
            beoptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        return this.openFormatListByDimension4Job([beoptions], options, false, false);
    };
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleByFilter4Job = /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beFilteroptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beFilteroptions.queryType == undefined) { //兼容以前的逻辑
            beFilteroptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        return this.openFormatListByDimension4Job([beFilteroptions], options, true, false);
    };
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     */
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiById4Job = /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beOptionsList, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        // tslint:disable-next-line:forin
        for (var b in beOptionsList) {
            DataValidator.checkForNullReference(beOptionsList[0].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        return this.openFormatListByDimension4Job(beOptionsList, options, false, true);
    };
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     */
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiByFilter4Job = /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beFilteroptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        // tslint:disable-next-line:forin
        for (var b in beFilteroptions) {
            DataValidator.checkForNullReference(beFilteroptions[0].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        return this.openFormatListByDimension4Job(beFilteroptions, options, true, true);
    };
    /**
     * 创建blob对象，并利用浏览器打开url进行下载
     * @param data 文件流数据
     */
    /**
     * 创建blob对象，并利用浏览器打开url进行下载
     * @param {?} data 文件流数据
     * @return {?}
     */
    CloudprintService.prototype.downloadFile = /**
     * 创建blob对象，并利用浏览器打开url进行下载
     * @param {?} data 文件流数据
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var link = document.createElement('a');
        /** @type {?} */
        var blob = new Blob([data], { type: 'application/pdf;charset=UTF-8' });
        link.setAttribute('href', window.URL.createObjectURL(blob));
        link.setAttribute('download', this.printEntity.downLoadFileName + '.pdf');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    //#endregion
    /**
     * 打印（过期了，改为printSingleById）
     * @param beoptions 数据源选项
     * @param options 导出选项
     * @param ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载，
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     */
    //#endregion
    /**
     * 打印（过期了，改为printSingleById）
     * @param {?} beoptions 数据源选项
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载，
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    CloudprintService.prototype.outputBEData = 
    //#endregion
    /**
     * 打印（过期了，改为printSingleById）
     * @param {?} beoptions 数据源选项
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载，
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    function (beoptions, options, ele) {
        return this.printSingleById(beoptions, options, ele);
    };
    /**
     * 打印（过期了，改为printSingleByFilter）
     * @param beoptions BEFilter选项
     * @param options 导出选项
     * @param ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     */
    /**
     * 打印（过期了，改为printSingleByFilter）
     * @param {?} beFilteroptions
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    CloudprintService.prototype.outputBEDataWithFilter = /**
     * 打印（过期了，改为printSingleByFilter）
     * @param {?} beFilteroptions
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    function (beFilteroptions, options, ele) {
        return this.printSingleByFilter(beFilteroptions, options, ele);
    };
    CloudprintService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintService.ctorParameters = function () { return [
        { type: PrintFormatService },
        { type: ComponentFactoryResolver },
        { type: CloudprintdesignerService },
        { type: CloudprintviewerService },
        { type: Injector },
        { type: ApplicationRef },
        { type: NotifyService },
        { type: AppService },
        { type: WindowService },
        { type: BsModalService }
    ]; };
    return CloudprintService;
}());
export { CloudprintService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.designercomponentRef;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.viewercomponentRef;
    /**
     * Saas应用通过构造函数注入的ViewContainerRef对象
     *
     * 例子：
     *    xxx.html
     *          <ng-container #prndesigner></ng-container>
     *
     *    xxx.component.ts
     * \@ViewChild('prndesigner', {read: ViewContainerRef})
     *          private container: ViewContainerRef;
     * @type {?}
     */
    CloudprintService.prototype.viewContainer;
    /**
     * 打印参数实体
     * @type {?}
     */
    CloudprintService.prototype.printEntity;
    /** @type {?} */
    CloudprintService.prototype.localeid;
    /** @type {?} */
    CloudprintService.prototype.localpipe;
    /** @type {?} */
    CloudprintService.prototype.windowRef;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.formatSrv;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.designerSrv;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.viewerSrv;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.windowService;
    /**
     * @type {?}
     * @private
     */
    CloudprintService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,