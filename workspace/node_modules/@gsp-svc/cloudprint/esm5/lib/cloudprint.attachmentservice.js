/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ApplicationRef, LOCALE_ID } from '@angular/core';
import { ComponentFactoryResolver } from '@angular/core';
import { PrintEntity } from './entitys/printEntity';
import { NotifyService } from '@farris/ui-notify';
import { Urls } from './utils/cloudprint.Urls';
import { AppService } from '@gsp-sys/rtf-common';
import { PrintFormatService } from './services/printFormatService';
import { QueryType } from './entitys/enums/querytype';
import { PrintType } from './entitys/enums/printtype';
import { DataValidator } from './utils/cloudprint.datavalidator';
import { FormatlistjobComponent } from './cloudprint-formatlistjob/formatlistjob.component';
import { BsModalService } from '@farris/ui-modal';
import { LocalLangPipe } from './local.pipe';
import { HttpClient } from '@angular/common/http';
import { Config } from './entitys/config';
/**
 * 附件打印的服务
 */
var CloudPrintAttachmentService = /** @class */ (function () {
    function CloudPrintAttachmentService(formatSrv, resolver, injector, applicationRef, notifyService, appService, modalService, httpClient) {
        this.formatSrv = formatSrv;
        this.resolver = resolver;
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.notifyService = notifyService;
        this.appService = appService;
        this.modalService = modalService;
        this.httpClient = httpClient;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        // 设置printEntity的默认值
        this.printEntity.appUrl = Urls.CloudPrintBaseUrl;
        this.printEntity.isUseMetaData = true;
        this.printEntity.language = localStorage.getItem("languageCode") || 'zh-CHS';
        this.formatSrv.printEntity = this.printEntity;
        if (this.injector) {
            this.modalService = this.injector.get(BsModalService);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localpipe = new LocalLangPipe(this.localeid);
        }
    }
    Object.defineProperty(CloudPrintAttachmentService.prototype, "setPrintEntity", {
        /**
         * 设置PrintEntity参数
         * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         */
        set: /**
         * 设置PrintEntity参数
         * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            this.printEntity = entity;
            // this.designerSrv.printEntity = this.printEntity;
            // this.viewerSrv.printEntity = this.printEntity;
            this.formatSrv.printEntity = this.printEntity;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} attachmentoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudPrintAttachmentService.prototype.printAttachment = /**
     * @param {?} attachmentoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (attachmentoptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
                    this.notifyService.info(this.localpipe.transform('appurlerror'));
                    return [2 /*return*/];
                }
                if (attachmentoptions.queryType == undefined) { //兼容以前的逻辑
                    attachmentoptions.queryType = QueryType.Unknown;
                }
                if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
                    options.printType = PrintType.Attachment;
                }
                that = this;
                return [2 /*return*/, this.formatSrv.getPrintDevice().then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        /** @type {?} */
                        var device = data || [];
                        /** @type {?} */
                        var factory = that.resolver.resolveComponentFactory(FormatlistjobComponent);
                        /** @type {?} */
                        var printsetting = factory.create(that.injector);
                        printsetting.instance.boxlist = device;
                        printsetting.instance.formatId = '';
                        printsetting.instance.isShowFormat = false;
                        printsetting.instance.printType = 1;
                        printsetting.instance.localepip = that.localpipe;
                        /** @type {?} */
                        var dlg = _this.modalService.show(printsetting, {
                            title: _this.localpipe.transform('printset'),
                            width: 800,
                            height: 500,
                            showButtons: true,
                            showMaxButton: false,
                            buttons: [
                                { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        printsetting.instance.printJob();
                                    }) },
                                { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        dlg.close();
                                    }) }
                            ],
                        });
                        //订阅了弹出的格式选择列表的关闭事件
                        printsetting.instance.print.subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        dlg.close();
                                        options.printSetting = data.printSetting;
                                        options.printerName = data.printter;
                                        options.DeviceId = data.boxId;
                                        options.printJob = true;
                                        return [4 /*yield*/, this.printAttachmentJob(attachmentoptions, options)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); }));
                    }))];
            });
        });
    };
    /**
     * @private
     * @param {?} attachmentoptions
     * @param {?} options
     * @return {?}
     */
    CloudPrintAttachmentService.prototype.printAttachmentJob = /**
     * @private
     * @param {?} attachmentoptions
     * @param {?} options
     * @return {?}
     */
    function (attachmentoptions, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var url, httpoptions, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.printEntity.appUrl + Urls.PrintAttachment + 'su=' + Config.PRINT_SU;
                        ;
                        httpoptions = {};
                        httpoptions['headers'] = {
                            SessionId: this.printEntity.sessionId || '',
                            'Content-Type': 'application/json'
                        };
                        data = {
                            attachmentOptions: attachmentoptions,
                            options: options,
                        };
                        return [4 /*yield*/, this.httpClient.post(url, data, httpoptions).toPromise()
                                .then((/**
                             * @return {?}
                             */
                            function () {
                                _this.notifyService.info(_this.localpipe.transform('sendprintjob'));
                                return _this.localpipe.transform('sendprintjob');
                            }))
                                .catch((/**
                             * @param {?} err
                             * @return {?}
                             */
                            function (err) {
                                _this.notifyService.warning(err.error.Message);
                                return err.error.Message;
                            }))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CloudPrintAttachmentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudPrintAttachmentService.ctorParameters = function () { return [
        { type: PrintFormatService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: NotifyService },
        { type: AppService },
        { type: BsModalService },
        { type: HttpClient }
    ]; };
    return CloudPrintAttachmentService;
}());
export { CloudPrintAttachmentService };
if (false) {
    /**
     * 打印参数实体
     * @type {?}
     */
    CloudPrintAttachmentService.prototype.printEntity;
    /** @type {?} */
    CloudPrintAttachmentService.prototype.localeid;
    /** @type {?} */
    CloudPrintAttachmentService.prototype.localpipe;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.formatSrv;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    CloudPrintAttachmentService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,