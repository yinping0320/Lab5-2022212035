/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
/**
 * 不用了，但是得保留，不然的话别人用了这个npm包的得重新打包
 */
var CloudprintviewerService = /** @class */ (function () {
    // printEntity = new PrintEntity();
    function CloudprintviewerService(http) {
        this.http = http;
    }
    CloudprintviewerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintviewerService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CloudprintviewerService;
}());
export { CloudprintviewerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudprintviewerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,