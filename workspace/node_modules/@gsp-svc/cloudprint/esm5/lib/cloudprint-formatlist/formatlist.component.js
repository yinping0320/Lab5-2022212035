/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, LOCALE_ID, Inject } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
var FormatlistComponent = /** @class */ (function () {
    function FormatlistComponent(notifyService, localeid) {
        this.notifyService = notifyService;
        this.print = new EventEmitter();
        // dlg:BsModalRef;
        this.columns = [];
        debugger;
        // localeid = localStorage.getItem("languageCode") || localeid;
        // this.localepip = new LocalLangPipe(localeid);
    }
    /**
     * @return {?}
     */
    FormatlistComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columns = [
            { field: 'code', title: this.localepip.transform('formatcode') },
            { field: 'name', title: this.localepip.transform('formatname') },
        ];
    };
    /**
     * @param {?} rowdata
     * @return {?}
     */
    FormatlistComponent.prototype.selectChange = /**
     * @param {?} rowdata
     * @return {?}
     */
    function (rowdata) {
        this.formatId = rowdata.id;
    };
    /**
     * @return {?}
     */
    FormatlistComponent.prototype.printJob = /**
     * @return {?}
     */
    function () {
        if (this.checkBeforePrint()) {
            this.print.emit({
                id: this.formatId
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormatlistComponent.prototype.checkBeforePrint = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.formatId) {
            this.notifyService.warning(this.localepip.transform('selectformat'));
            return false;
        }
        else {
            return true;
        }
    };
    FormatlistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-formatlist',
                    template: "\r\n<div class=\"f-page f-page-navigate f-page-is-grid-card\">\r\n    <section class=\"f-page-main\">\r\n        <farris-section class=\"f-section-grid f-section-in-managelist\" [showHeader]=\"false\">\r\n    \r\n            <div class=\"f-section-content\">\r\n                <div class=\"f-component-grid\">\r\n                <farris-datagrid\r\n                    [fit]=\"true\" \r\n                    [pagination]=\"false\"\r\n                    [virtualized]=\"false\"\r\n                    [columns]=\"columns\"\r\n                    [pageSize]=\"50\"\r\n                    [showBorder]=\"false\"\r\n                    [striped]=\"false\"\r\n                    [data]=\"formats\"\r\n                    [fitColumns]=\"true\"\r\n                    [nowrap]=\"false\"\r\n                    (selectChanged)=\"selectChange($event)\">\r\n                </farris-datagrid>\r\n                </div>\r\n            </div>\r\n        </farris-section>\r\n    </section>    \r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormatlistComponent.ctorParameters = function () { return [
        { type: NotifyService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    FormatlistComponent.propDecorators = {
        formats: [{ type: Input }]
    };
    return FormatlistComponent;
}());
export { FormatlistComponent };
if (false) {
    /** @type {?} */
    FormatlistComponent.prototype.formats;
    /** @type {?} */
    FormatlistComponent.prototype.print;
    /** @type {?} */
    FormatlistComponent.prototype.columns;
    /** @type {?} */
    FormatlistComponent.prototype.formatId;
    /** @type {?} */
    FormatlistComponent.prototype.localepip;
    /**
     * @type {?}
     * @private
     */
    FormatlistComponent.prototype.notifyService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0bGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9jbG91ZHByaW50LyIsInNvdXJjZXMiOlsibGliL2Nsb3VkcHJpbnQtZm9ybWF0bGlzdC9mb3JtYXRsaXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsWUFBWSxFQUFhLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS2xEO0lBaUJFLDZCQUFvQixhQUE0QixFQUMzQixRQUFlO1FBRGhCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBUGhELFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7UUFFbkQsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQVFYLFFBQVEsQ0FBQztRQUNULCtEQUErRDtRQUMvRCxnREFBZ0Q7SUFDbEQsQ0FBQzs7OztJQUVELHNDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFDO1lBQzlELEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUM7U0FDaEUsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRUQsMENBQVk7Ozs7SUFBWixVQUFhLE9BQVk7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxzQ0FBUTs7O0lBQVI7UUFFRSxJQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDO1lBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUNkLEVBQUUsRUFBQyxJQUFJLENBQUMsUUFBUTthQUNqQixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Ozs7O0lBRU8sOENBQWdCOzs7O0lBQXhCO1FBQ0UsSUFBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUM7WUFDaEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUNyRSxPQUFPLEtBQUssQ0FBQztTQUNkO2FBQUk7WUFDSCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7Z0JBcERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixrL0JBQTBDOztpQkFFM0M7Ozs7Z0JBVFEsYUFBYTs2Q0F1QmpCLE1BQU0sU0FBQyxTQUFTOzs7MEJBVmxCLEtBQUs7O0lBNkNSLDBCQUFDO0NBQUEsQUFyREQsSUFxREM7U0FoRFksbUJBQW1COzs7SUFHOUIsc0NBQXdDOztJQUV4QyxvQ0FBbUQ7O0lBRW5ELHNDQUFhOztJQUNiLHVDQUFnQjs7SUFFaEIsd0NBQXdCOzs7OztJQUVaLDRDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQsIExPQ0FMRV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByaW50Rm9ybWF0IH0gZnJvbSAnLi4vZW50aXR5cy9wcmludEZvcm1hdCc7XHJcbmltcG9ydCB7IFBhZ2VDaGFuZ2VFdmVudCwgR3JpZERhdGFSZXN1bHQgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1ncmlkJztcclxuaW1wb3J0IHsgTm90aWZ5U2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBEaWFsb2dDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IExvY2FsTGFuZ1BpcGUgfSBmcm9tICcuLi9sb2NhbC5waXBlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbGliLWZvcm1hdGxpc3QnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtYXRsaXN0LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9mb3JtYXRsaXN0LmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRm9ybWF0bGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgLy8gQFZpZXdDaGlsZCgncHJpbnRqb2InKSBwcmludGpvYjogRGlhbG9nQ29tcG9uZW50O1xyXG5cclxuICBASW5wdXQoKSBwdWJsaWMgZm9ybWF0cyA6IFByaW50Rm9ybWF0W107XHJcblxyXG4gIHByaW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIC8vIGRsZzpCc01vZGFsUmVmO1xyXG4gIGNvbHVtbnMgPSBbXTtcclxuICBmb3JtYXRJZDpzdHJpbmc7XHJcblxyXG4gIGxvY2FsZXBpcDpMb2NhbExhbmdQaXBlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmeVNlcnZpY2UsXHJcbiAgICBASW5qZWN0KExPQ0FMRV9JRCkgbG9jYWxlaWQ6c3RyaW5nKSB7IFxyXG4gICAgICBcclxuICAgIGRlYnVnZ2VyO1xyXG4gICAgLy8gbG9jYWxlaWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxhbmd1YWdlQ29kZVwiKSB8fCBsb2NhbGVpZDtcclxuICAgIC8vIHRoaXMubG9jYWxlcGlwID0gbmV3IExvY2FsTGFuZ1BpcGUobG9jYWxlaWQpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmNvbHVtbnMgPSBbXHJcbiAgICAgIHtmaWVsZDogJ2NvZGUnLCB0aXRsZTogdGhpcy5sb2NhbGVwaXAudHJhbnNmb3JtKCdmb3JtYXRjb2RlJyl9LFxyXG4gICAgICB7ZmllbGQ6ICduYW1lJywgdGl0bGU6ICB0aGlzLmxvY2FsZXBpcC50cmFuc2Zvcm0oJ2Zvcm1hdG5hbWUnKX0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0Q2hhbmdlKHJvd2RhdGE6IGFueSl7XHJcbiAgICB0aGlzLmZvcm1hdElkID0gcm93ZGF0YS5pZDtcclxuICB9XHJcblxyXG4gIHByaW50Sm9iKCl7XHJcblxyXG4gICAgaWYodGhpcy5jaGVja0JlZm9yZVByaW50KCkpe1xyXG4gICAgICB0aGlzLnByaW50LmVtaXQoe1xyXG4gICAgICAgIGlkOnRoaXMuZm9ybWF0SWRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrQmVmb3JlUHJpbnQoKXtcclxuICAgIGlmKCF0aGlzLmZvcm1hdElkKXtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sb2NhbGVwaXAudHJhbnNmb3JtKCdzZWxlY3Rmb3JtYXQnKSk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1lbHNle1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19