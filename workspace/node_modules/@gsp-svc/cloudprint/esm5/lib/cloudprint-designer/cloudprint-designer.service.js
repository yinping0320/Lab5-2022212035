/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// @Injectable({
//   providedIn: 'root'
// })
/**
 * 不用了，但是得保留，不然的话别人用了这个npm包的得重新打包
 */
var CloudprintdesignerService = /** @class */ (function () {
    // printEntity = new PrintEntity();
    function CloudprintdesignerService(http) {
        this.http = http;
    }
    CloudprintdesignerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintdesignerService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CloudprintdesignerService;
}());
export { CloudprintdesignerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudprintdesignerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,