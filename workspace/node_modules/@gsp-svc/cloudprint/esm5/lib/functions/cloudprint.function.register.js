/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PrintFunctionsOfFiltervalue } from './cloudprint.function.filtervalue';
import { PrintFunctionsOfFormat } from './cloudprint.function.format';
import { Subject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { PrintFunctionsOfConvert } from './cloudprint.function.convert';
var CloudprintFunctionRegister = /** @class */ (function () {
    function CloudprintFunctionRegister(http) {
        this.http = http;
        this.httpoptions = {};
        this.httpoptions['headers'] = {
            SessionId: '',
            'Content-Type': 'application/json'
        };
    }
    /**
     * 初始化自定义函数
     */
    /**
     * 初始化自定义函数
     * @param {?} configUrl
     * @return {?}
     */
    CloudprintFunctionRegister.prototype.initCustomFunction = /**
     * 初始化自定义函数
     * @param {?} configUrl
     * @return {?}
     */
    function (configUrl) {
        var _this = this;
        // 内置函数-数值过滤
        /** @type {?} */
        var funcs = new PrintFunctionsOfFiltervalue();
        // 内置函数-格式化
        /** @type {?} */
        var funcFormat = new PrintFunctionsOfFormat();
        // 内置函数-格式化
        /** @type {?} */
        var funcConvert = new PrintFunctionsOfConvert();
        // 这里默认的GSP内置函数分组为GSP
        if (Stimulsoft.Report.Dictionary.StiFunctions.getFunctions('IGixFucs').length === 0) {
            // tslint:disable-next-line:forin
            for (var f in funcs) {
                /** @type {?} */
                var func = funcs[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
            // tslint:disable-next-line:forin
            for (var f in funcFormat) {
                /** @type {?} */
                var func = funcFormat[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
            // tslint:disable-next-line:forin
            for (var f in funcConvert) {
                /** @type {?} */
                var func = funcConvert[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
        }
        // 自定义函数todo:最终自定义函数从后台取配置文件里的解析
        return this.http.get(configUrl, this.httpoptions).toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data && data.length > 0) {
                return _this.addJsFuncPlugins(-1, data)
                    .then((/**
                 * @return {?}
                 */
                function () {
                    if (!data) {
                        return;
                    }
                    /** @type {?} */
                    var allFuncs = [];
                    // tslint:disable-next-line:forin
                    if (data.length > 0) {
                        for (var i in data) {
                            allFuncs.push(window[((/** @type {?} */ (data[i]))).key]);
                        }
                    }
                    if (Stimulsoft.Report.Dictionary.StiFunctions.getFunctions('CustomFucs').length === 0 && allFuncs.length > 0) {
                        // tslint:disable-next-line:forin
                        for (var f in allFuncs) {
                            /** @type {?} */
                            var item = allFuncs[f];
                            // tslint:disable-next-line:forin
                            for (var f2 in item) {
                                /** @type {?} */
                                var func = item[f2];
                                Stimulsoft.Report.Dictionary.StiFunctions.addFunction('CustomFucs', func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
                            }
                        }
                    }
                }));
            }
        }));
    };
    /**
     * 添加js业务函数插件
     */
    /**
     * 添加js业务函数插件
     * @private
     * @param {?} i
     * @param {?} data
     * @return {?}
     */
    CloudprintFunctionRegister.prototype.addJsFuncPlugins = /**
     * 添加js业务函数插件
     * @private
     * @param {?} i
     * @param {?} data
     * @return {?}
     */
    function (i, data) {
        if (!data && data.length == 0) {
            /** @type {?} */
            var sub = new Subject();
            sub.complete(); // 没有这句话toPromise()里的内容不跑
            return sub.toPromise();
        }
        /** @type {?} */
        var loader = window['System'];
        if (i < data.length - 1) {
            i++;
            this.addJsFuncPlugins(i, data);
        }
        return loader.import(data[i].path);
    };
    CloudprintFunctionRegister.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintFunctionRegister.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CloudprintFunctionRegister;
}());
export { CloudprintFunctionRegister };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudprintFunctionRegister.prototype.httpoptions;
    /**
     * @type {?}
     * @private
     */
    CloudprintFunctionRegister.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,