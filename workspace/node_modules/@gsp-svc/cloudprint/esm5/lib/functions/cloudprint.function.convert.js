/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印内置的函数
 */
var /**
 * 云打印内置的函数
 */
PrintFunctionsOfConvert = /** @class */ (function () {
    function PrintFunctionsOfConvert() {
        /**
         * 将字符串转化为BigDecimal
         */
        this.ConvertStringToBigDecimal = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'ConvertStringToBigDecimal',
            Description: '将字符串转化为BigDecimal',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '显示值',
            ArgumentTypes: [String],
            ArgumentNames: ['money'],
            ArgumentDescriptions: ['金额字符串'],
            Function: (/**
             * @param {?} money
             * @return {?}
             */
            function (money) {
                // const real = realValue.split('/');
                // const disPlay = disPlayValue.split('/');
                // if (real.length === disPlay.length) {
                //     const enumIntValue = enumObject.toString();
                //     const index = real.findIndex(x => x === enumIntValue);
                //     if (index > -1) {
                //         return disPlay[index];
                //     }
                // }
                // return '';
            }),
        };
        /**
         * 将Double转化为BigDecimal
         */
        this.ConvertDoubleToBigDecimal = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'ConvertDoubleToBigDecimal',
            Description: '将Double转化为BigDecimal',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '显示值',
            ArgumentTypes: [Number],
            ArgumentNames: ['money',],
            ArgumentDescriptions: ['double类型的金额'],
            Function: (/**
             * @param {?} money
             * @return {?}
             */
            function (money) {
                // const real = realValue.split('/');
                // const disPlay = disPlayValue.split('/');
                // if (real.length === disPlay.length) {
                //     const enumIntValue = enumObject.toString();
                //     const index = real.findIndex(x => x === enumIntValue);
                //     if (index > -1) {
                //         return disPlay[index];
                //     }
                // }
                // return '';
            }),
        };
        /**
         * 将Double转化为BigDecimal
         */
        this.SubStringMoney = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'SubStringMoney',
            Description: '按照位置截取金额数值',
            TypeOfFunction: 'string',
            ReturnType: String,
            ReturnDescription: '截取的金额（例如：SubStringMoney("1232.32","-1")返回3）',
            ArgumentTypes: [Number, String, Boolean],
            ArgumentNames: ['money', 'position', 'isZeroShow'],
            ArgumentDescriptions: ['string类型的金额', 'string截取的位置（小数点往左位置是1,2,3依次类推，往右是-1,-2依次类推）'],
            Function: (/**
             * @param {?} money
             * @param {?} position
             * @param {?} isZeroShow
             * @return {?}
             */
            function (money, position, isZeroShow) {
            }),
        };
        /**
         * 将Double转化为BigDecimal
         */
        this.SubDoubleMoney = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'SubDoubleMoney',
            Description: '按照位置截取金额数值',
            TypeOfFunction: 'string',
            ReturnType: String,
            ReturnDescription: '截取的金额（例如：SubStringMoney("1232.32","3")返回2）',
            ArgumentTypes: [Number, String, Boolean],
            ArgumentNames: ['money', 'position', 'isZeroShow'],
            ArgumentDescriptions: ['double类型的金额', 'string类型截取的位置（小数点往左位置是1,2,3依次类推，往右是-1,-2依次类推）'],
            Function: (/**
             * @param {?} money
             * @param {?} position
             * @param {?} isZeroShow
             * @return {?}
             */
            function (money, position, isZeroShow) {
            }),
        };
    }
    return PrintFunctionsOfConvert;
}());
/**
 * 云打印内置的函数
 */
export { PrintFunctionsOfConvert };
if (false) {
    /**
     * 将字符串转化为BigDecimal
     * @type {?}
     */
    PrintFunctionsOfConvert.prototype.ConvertStringToBigDecimal;
    /**
     * 将Double转化为BigDecimal
     * @type {?}
     */
    PrintFunctionsOfConvert.prototype.ConvertDoubleToBigDecimal;
    /**
     * 将Double转化为BigDecimal
     * @type {?}
     */
    PrintFunctionsOfConvert.prototype.SubStringMoney;
    /**
     * 将Double转化为BigDecimal
     * @type {?}
     */
    PrintFunctionsOfConvert.prototype.SubDoubleMoney;
}
//# sourceMappingURL=data:application/json;base64,