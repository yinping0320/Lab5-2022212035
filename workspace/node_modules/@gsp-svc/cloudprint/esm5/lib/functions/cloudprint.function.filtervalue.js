/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印内置的函数
 */
var /**
 * 云打印内置的函数
 */
PrintFunctionsOfFiltervalue = /** @class */ (function () {
    function PrintFunctionsOfFiltervalue() {
        // /**
        //  * 注意：
        //  * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
        //  * 2.数据源的传递，直接在参数上些上table名就行了。
        //  */
        // /**
        //  * 注意：
        //  * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
        //  * 2.数据源的传递，直接在参数上些上table名就行了。
        //  */
        // /**
        //  * 分页函数
        //  */
        // Pagination = {
        //     Category : "GSPBuildInFunc",
        //     GroupFunctionName : "FilterData",
        //     FunctionName : "Pagination",
        //     Description : "分页",
        //     TypeOfFunction : "void",
        //     ReturnType : 'void',
        //     ReturnDescription : "数据值",
        //     ArgumentTypes : [Object,Number],
        //     ArgumentNames : [ 'dataSource','pagesize'],
        //     ArgumentDescriptions : [ "数据源", "每页行数"],
        //     Function: function(dataSource,pagesize) {
        //         const pos = dataSource.position+1;
        //         // 换页
        //         if (pos % pagesize === 0 && pos !== 0) {
        //             dataSource.dictionary.report.engine.newPage();
        //         }
        //     },
        // };
        /**
         * 获取指定数据源中指定行和指定列的值
         */
        this.GetValue = {
            Category: 'IGixFucs',
            GroupFunctionName: 'FilterData',
            FunctionName: 'GetValue',
            Description: '获取指定数据源中指定行和指定列的值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '数据值',
            ArgumentTypes: [Object, Number, Number],
            ArgumentNames: ['dataSource', 'row', 'col'],
            ArgumentDescriptions: ['数据源', '每页行数'],
            Function: (/**
             * @param {?} dataSource
             * @param {?} row
             * @param {?} col
             * @return {?}
             */
            function (dataSource, row, col) {
                /** @type {?} */
                var table = dataSource.dataTable;
                if (table == null) {
                    return '';
                }
                /** @type {?} */
                var a = table.rows.list[row - 1].columns.list[col - 1].storage.values[row - 1];
                return a;
            }),
        };
        /**
         * 获取符合条件的目标列的值
         */
        this.GetFilterValues = {
            Category: 'IGixFucs',
            GroupFunctionName: 'FilterData',
            FunctionName: 'GetFilterValues',
            Description: '获取符合条件的目标列的值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '数据值',
            ArgumentTypes: [Object, String, String, String, Boolean],
            ArgumentNames: ['dataSource', 'filterColumn', 'filterValue', 'targetColumnName', 'first'],
            ArgumentDescriptions: ['数据源', '过滤列', '过滤值（必须是stirng）', '目标列', '是否获取第一个符合条件的值'],
            Function: (/**
             * @param {?} dataSource
             * @param {?} filterColumn
             * @param {?} filterValue
             * @param {?} targetColumnName
             * @param {?} first
             * @return {?}
             */
            function (dataSource, filterColumn, filterValue, targetColumnName, first) {
                /** @type {?} */
                var table = dataSource.dataTable;
                if (table == null) {
                    return '';
                }
                /** @type {?} */
                var colValues = table.columns.list.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.columnName === filterColumn; })).storage.values;
                /** @type {?} */
                var a = [];
                for (var index = 0; index < colValues.length; index++) {
                    /** @type {?} */
                    var element = colValues[index];
                    if (element === filterValue) {
                        a.push(index);
                        if (first) {
                            break;
                        }
                    }
                }
                /** @type {?} */
                var res = '';
                /** @type {?} */
                var tmpIndex = a.pop();
                if (tmpIndex >= 0) {
                    res += table.columns.list.find((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return e.columnName === targetColumnName; })).storage.values[tmpIndex];
                    res += ';';
                }
                return res.substring(0, res.length - 2);
            }),
        };
    }
    return PrintFunctionsOfFiltervalue;
}());
/**
 * 云打印内置的函数
 */
export { PrintFunctionsOfFiltervalue };
if (false) {
    /**
     * 获取指定数据源中指定行和指定列的值
     * @type {?}
     */
    PrintFunctionsOfFiltervalue.prototype.GetValue;
    /**
     * 获取符合条件的目标列的值
     * @type {?}
     */
    PrintFunctionsOfFiltervalue.prototype.GetFilterValues;
}
//# sourceMappingURL=data:application/json;base64,