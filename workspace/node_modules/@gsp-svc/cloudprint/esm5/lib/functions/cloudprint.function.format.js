/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PrintFunctionUtils } from './cloudprint.function.utils';
/**
 * 云打印内置的函数
 */
var /**
 * 云打印内置的函数
 */
PrintFunctionsOfFormat = /** @class */ (function () {
    function PrintFunctionsOfFormat() {
        /**
         * 注意：
         * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
         * 2.数据源的传递，直接在参数上些上table名就行了。
         */
        /**
             * 注意：
             * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
             * 2.数据源的传递，直接在参数上些上table名就行了。
             */
        /**
         * 将枚举值转换为显示值
         */
        this.ParseEnumValue = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'ParseEnumValue',
            Description: '将枚举值转换为显示值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '显示值',
            ArgumentTypes: [String, String, Object],
            ArgumentNames: ['realValue', 'disPlayValue', 'enumObject'],
            ArgumentDescriptions: ['枚举值(0/1/2)', '显示值(中/英/法)', '枚举实例'],
            Function: (/**
             * @param {?} realValue
             * @param {?} disPlayValue
             * @param {?} enumObject
             * @return {?}
             */
            function (realValue, disPlayValue, enumObject) {
                // const real = realValue.split('/');
                // const disPlay = disPlayValue.split('/');
                // if (real.length === disPlay.length) {
                //     const enumIntValue = enumObject.toString();
                //     const index = real.findIndex(x => x === enumIntValue);
                //     if (index > -1) {
                //         return disPlay[index];
                //     }
                // }
                // return '';
            }),
        };
        /**
         * 将8位字符串形式的日期转换为指定格式的日期格式
         */
        this.Format8CharDateTime = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'Format8CharDateTime',
            Description: '将8位字符串形式的日期转换为指定格式的日期格式',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '指定日期格式的字符串',
            ArgumentTypes: [String, String],
            ArgumentNames: ['format', 'dataString'],
            ArgumentDescriptions: ['枚举值(0/1/2)', '显示值(中/英/法)', '枚举实例'],
            Function: (/**
             * @param {?} format
             * @param {?} dataString
             * @return {?}
             */
            function (format, dataString) {
                // if (dataString.length !== 8) {
                //     return dataString;
                // }
                // // tslint:disable-next-line:radix
                // const year = parseInt(dataString.substring(0, 4));
                // // tslint:disable-next-line:radix
                // const mouth = parseInt(dataString.substring(4, 6));
                // // tslint:disable-next-line:radix
                // const day = parseInt(dataString.substring(6, 8));
                // const dateTime = new Date();
                // dateTime.setFullYear(year);
                // /**
                //  * Sets the month value in the Date object using local time.
                //  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //  * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                // */
                // dateTime.setMonth(mouth - 1);
                // dateTime.setDate(day);
                // return PrintFunctionUtils.dateFormat(dateTime, format);
            }),
        };
        /**
         * 将8位字符串形式的日期转换为指定格式的日期格式
         */
        this.FormatDateTime = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDateTime',
            Description: '将日期转换为指定格式的日期格式',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '指定日期格式的字符串',
            ArgumentTypes: [String, Object],
            ArgumentNames: ['format', 'datetime'],
            ArgumentDescriptions: ['格式', '日期(DateTime类型)'],
            Function: (/**
             * @param {?} format
             * @param {?} datetime
             * @return {?}
             */
            function (format, datetime) {
                // if (typeof (date) === 'string') {
                //     const year = parseInt(date.substring(0, 4));
                //     const mouth = parseInt(date.substring(5, 7));
                //     const day = parseInt(date.substring(8, 10));
                //     const dateTime = new Date();
                //     dateTime.setFullYear(year);
                //     /**
                //      * Sets the month value in the Date object using local time.
                //      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                //     */
                //     dateTime.setMonth(mouth - 1);
                //     dateTime.setDate(day);
                //     return PrintFunctionUtils.dateFormat(dateTime, format);
                // } else {
                //     const year = date.year;
                //     const mouth = date.month;
                //     const day = date.day;
                //     const dateTime = new Date();
                //     dateTime.setFullYear(year);
                //     /**
                //      * Sets the month value in the Date object using local time.
                //      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                //     */
                //     dateTime.setMonth(mouth - 1);
                //     dateTime.setDate(day);
                //     return PrintFunctionUtils.dateFormat(dateTime, format);
                // }
            }),
        };
        /**
         * 将字符串形式的日期转换为指定格式的日期格式
         */
        this.FormatDateTimeStr = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDateTimeStr',
            Description: '将日期字符串转换为指定格式的日期格式',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '指定日期格式的字符串',
            ArgumentTypes: [String, String],
            ArgumentNames: ['format', 'datestring'],
            ArgumentDescriptions: ['格式', '日期字符串)'],
            Function: (/**
             * @param {?} format
             * @param {?} datestring
             * @return {?}
             */
            function (format, datestring) {
                // const year = parseInt(date.substring(0, 4));
                // const mouth = parseInt(date.substring(5, 7));
                // const day = parseInt(date.substring(8, 10));
                // const dateTime = new Date();
                // dateTime.setFullYear(year);
                // /**
                //  * Sets the month value in the Date object using local time.
                //  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //  * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                // */
                // dateTime.setMonth(mouth - 1);
                // dateTime.setDate(day);
                // return PrintFunctionUtils.dateFormat(dateTime, format);
            }),
        };
        this.FormatDateTimeCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDateTimeCN',
            Description: '将数字日期转换为汉字日期',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字日期',
            ArgumentTypes: [Object, Boolean, Boolean],
            ArgumentNames: ['datetime', 'isSimple', 'isDeleteZero'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字', '是否去除零'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @param {?} isDeleteZero
             * @return {?}
             */
            function (datetime, isSimple, isDeleteZero) {
            }),
        };
        // FormatDateTimeStrCN = {
        //     Category : 'IGixFucs',
        //     GroupFunctionName : 'Format',
        //     FunctionName : 'FormatDateTimeStrCN',
        //     Description : '将数字日期字符转换为汉字日期',
        //     TypeOfFunction : 'void',
        //     ReturnType : String,
        //     ReturnDescription : '汉字日期',
        //     ArgumentTypes : [String, Boolean,Boolean],
        //     ArgumentNames : [ 'datestring', 'isSimple','isDeleteZero'],
        //     ArgumentDescriptions : [  '日期字符串（yyyy-MM-dd）', '是否简体汉字','是否去除零'],
        //     Function: function(datestring: string, isSimple: Boolean,isDeleteZero: Boolean) {
        //     },
        // };
        this.FormatYearCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatYearCN',
            Description: '将数字日期转换为汉字年',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字年',
            ArgumentTypes: [Object, Boolean],
            ArgumentNames: ['datetime', 'isSimple'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @return {?}
             */
            function (datetime, isSimple) {
            }),
        };
        this.FormatMonthCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatMonthCN',
            Description: '将数字日期转换为汉字月',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字月',
            ArgumentTypes: [Object, Boolean, Boolean],
            ArgumentNames: ['datetime', 'isSimple', 'isDeleteZero'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字', '是否去除零'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @param {?} isDeleteZero
             * @return {?}
             */
            function (datetime, isSimple, isDeleteZero) {
            }),
        };
        this.FormatDayCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDayCN',
            Description: '将数字日期转换为汉字日',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字日',
            ArgumentTypes: [Object, Boolean, Boolean],
            ArgumentNames: ['datetime', 'isSimple', 'isDeleteZero'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字', '是否去除零'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @param {?} isDeleteZero
             * @return {?}
             */
            function (datetime, isSimple, isDeleteZero) {
            }),
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrencyNumber = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrencyNumber',
            Description: '将数值格式化为大写中文，比如将12.38格式化为【十二点三八】',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '大写中文数字',
            ArgumentTypes: [Number],
            ArgumentNames: ['number'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrencyNumber,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrencyNumberCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrencyNumberCN',
            Description: '将数值格式化为大写中文金额数值，比如将12.38格式化为【一十二点三八】',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '大写中文数值',
            ArgumentTypes: [Number],
            ArgumentNames: ['number'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrencyNumberCN,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrencyCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrencyCN',
            Description: '将数值格式化为中文大写货币金额',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '中文大写货币金额',
            ArgumentTypes: [Number],
            ArgumentNames: ['money'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrencyCN,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrency = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrency',
            Description: '将数值格式化为中文大写货币金额',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '中文大写货币金额',
            ArgumentTypes: [Number],
            ArgumentNames: ['money'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrency,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatFloat = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatFloat',
            Description: '将浮点类型转化为指定的格式显示',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '浮点型数字结果',
            ArgumentTypes: [Number, String],
            ArgumentNames: ['f', 'format'],
            ArgumentDescriptions: ['浮点型数字', '格式'],
            Function: (/**
             * @param {?} f
             * @param {?} format
             * @return {?}
             */
            function (f, format) {
            }),
        };
        /**
         * 将连续出现的连接符转换为单个字符，
         * 例如将12---32转换为12-32
         */
        this.RemoveRepeatedJoiner = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'RemoveRepeatedJoiner',
            Description: '将连续出现的连接符转换为单个字符，例如将12---32转换为12-32',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '提换后的字符串',
            ArgumentTypes: [String, String],
            ArgumentNames: ['joiner', 'str'],
            ArgumentDescriptions: ['连接符', '字符串'],
            Function: (/**
             * @param {?} joiner
             * @param {?} str
             * @return {?}
             */
            function (joiner, str) {
                // if (joiner.length > 1 && str.trim().length) {
                //     return str;
                // }
                // joiner = joiner.substring(0, 1);
                // const patten = '(' + joiner + ')+';
                // const subStr = new RegExp(patten, 'g');
                // let res = str.replace(subStr, joiner);
                // if (res[0] === joiner) {
                //     res = res.substr(1);
                // }
                // if (res[res.length - 1] === joiner) {
                //     res = res.substr(0, res.length - 2);
                // }
                // return res;
            }),
        };
        /**
         * 根据起始页码转化页码
         */
        this.FormatPageIndexWithStartNumber = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatPageIndexWithStartNumber',
            Description: '根据起始页码重新计算页码，例如：起始页码为10，那第一页将显示10',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '转化后的页码',
            ArgumentTypes: [String, Number],
            ArgumentNames: ['page', 'start'],
            ArgumentDescriptions: ['当前页码(来自系统变量)', '起始页'],
            Function: (/**
             * @param {?} page
             * @param {?} start
             * @return {?}
             */
            function (page, start) {
                // const newline = Number(page)+start;
                // return newline;
            }),
        };
        /**
         * 返回指定key的资源值
         */
        // L = {
        //     Category : 'IGixFucs',
        //     GroupFunctionName : 'Location',
        //     FunctionName : 'L',
        //     Description : '本地化',
        //     TypeOfFunction : 'void',
        //     ReturnType : String,
        //     ReturnDescription : '返回指定key的资源值',
        //     ArgumentTypes : [String, String],
        //     ArgumentNames : [ 'resourceKey', 'defaultValue'],
        //     ArgumentDescriptions : ['资源Key', 'defaultValue'],
        //     Function: function(resourceKey: string, defaultValue: string) {
        //         return defaultValue;
        //     },
        // };
    }
    return PrintFunctionsOfFormat;
}());
/**
 * 云打印内置的函数
 */
export { PrintFunctionsOfFormat };
if (false) {
    /**
     * 将枚举值转换为显示值
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.ParseEnumValue;
    /**
     * 将8位字符串形式的日期转换为指定格式的日期格式
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.Format8CharDateTime;
    /**
     * 将8位字符串形式的日期转换为指定格式的日期格式
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatDateTime;
    /**
     * 将字符串形式的日期转换为指定格式的日期格式
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatDateTimeStr;
    /** @type {?} */
    PrintFunctionsOfFormat.prototype.FormatDateTimeCN;
    /** @type {?} */
    PrintFunctionsOfFormat.prototype.FormatYearCN;
    /** @type {?} */
    PrintFunctionsOfFormat.prototype.FormatMonthCN;
    /** @type {?} */
    PrintFunctionsOfFormat.prototype.FormatDayCN;
    /**
     * 将阿拉伯数字转换为汉字
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatToCurrencyNumber;
    /**
     * 将阿拉伯数字转换为汉字
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatToCurrencyNumberCN;
    /**
     * 将阿拉伯数字转换为汉字
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatToCurrencyCN;
    /**
     * 将阿拉伯数字转换为汉字
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatToCurrency;
    /**
     * 将阿拉伯数字转换为汉字
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatFloat;
    /**
     * 将连续出现的连接符转换为单个字符，
     * 例如将12---32转换为12-32
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.RemoveRepeatedJoiner;
    /**
     * 根据起始页码转化页码
     * @type {?}
     */
    PrintFunctionsOfFormat.prototype.FormatPageIndexWithStartNumber;
}
//# sourceMappingURL=data:application/json;base64,