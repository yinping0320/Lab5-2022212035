import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { GridModule } from '@progress/kendo-angular-grid';
import { LanguageService } from '@ecp-caf/caf-common';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { FarrisButtonModule } from '@farris/ui-button';
import { DatagridModule } from '@farris/ui-datagrid';
import { SplitterModule } from '@farris/ui-splitter';
import { FarrisSectionModule } from '@farris/ui-section';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisFormsModule } from '@farris/ui-forms';
import { FResponseToolbarModule } from '@farris/ui-response-toolbar';
import { WindowService, WindowModule, DialogModule } from '@progress/kendo-angular-dialog';
import { __awaiter, __generator, __spread, __extends } from 'tslib';
import { EventEmitter, Injectable, Component, Input, Inject, forwardRef, ElementRef, LOCALE_ID, Pipe, Injector, ApplicationRef, ComponentFactoryResolver, NgModule } from '@angular/core';
import { NotifyService, NotifyContainerComponent, NotifyModule } from '@farris/ui-notify';
import { AppService } from '@gsp-sys/rtf-common';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PrintEntity = /** @class */ (function () {
    function PrintEntity() {
        this.downLoadFileName = 'PrintReport';
        /**
         * 保存前事件
         */
        this.onSaveReportEvent = new EventEmitter();
        /**
         * 退出前事件
         * 可用于销毁资源
         */
        this.onExitEvent = new EventEmitter();
        /**
         * 保存成功之后的id事件
         */
        this.onGetPrintFormatIdEvent = new EventEmitter();
        /**
         * 保存成功后的事件
         */
        this.onSavedReportEvent = new EventEmitter();
    }
    return PrintEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印内置的函数
 */
var /**
 * 云打印内置的函数
 */
PrintFunctionsOfFiltervalue = /** @class */ (function () {
    function PrintFunctionsOfFiltervalue() {
        // /**
        //  * 注意：
        //  * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
        //  * 2.数据源的传递，直接在参数上些上table名就行了。
        //  */
        // /**
        //  * 注意：
        //  * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
        //  * 2.数据源的传递，直接在参数上些上table名就行了。
        //  */
        // /**
        //  * 分页函数
        //  */
        // Pagination = {
        //     Category : "GSPBuildInFunc",
        //     GroupFunctionName : "FilterData",
        //     FunctionName : "Pagination",
        //     Description : "分页",
        //     TypeOfFunction : "void",
        //     ReturnType : 'void',
        //     ReturnDescription : "数据值",
        //     ArgumentTypes : [Object,Number],
        //     ArgumentNames : [ 'dataSource','pagesize'],
        //     ArgumentDescriptions : [ "数据源", "每页行数"],
        //     Function: function(dataSource,pagesize) {
        //         const pos = dataSource.position+1;
        //         // 换页
        //         if (pos % pagesize === 0 && pos !== 0) {
        //             dataSource.dictionary.report.engine.newPage();
        //         }
        //     },
        // };
        /**
         * 获取指定数据源中指定行和指定列的值
         */
        this.GetValue = {
            Category: 'IGixFucs',
            GroupFunctionName: 'FilterData',
            FunctionName: 'GetValue',
            Description: '获取指定数据源中指定行和指定列的值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '数据值',
            ArgumentTypes: [Object, Number, Number],
            ArgumentNames: ['dataSource', 'row', 'col'],
            ArgumentDescriptions: ['数据源', '每页行数'],
            Function: (/**
             * @param {?} dataSource
             * @param {?} row
             * @param {?} col
             * @return {?}
             */
            function (dataSource, row, col) {
                /** @type {?} */
                var table = dataSource.dataTable;
                if (table == null) {
                    return '';
                }
                /** @type {?} */
                var a = table.rows.list[row - 1].columns.list[col - 1].storage.values[row - 1];
                return a;
            }),
        };
        /**
         * 获取符合条件的目标列的值
         */
        this.GetFilterValues = {
            Category: 'IGixFucs',
            GroupFunctionName: 'FilterData',
            FunctionName: 'GetFilterValues',
            Description: '获取符合条件的目标列的值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '数据值',
            ArgumentTypes: [Object, String, String, String, Boolean],
            ArgumentNames: ['dataSource', 'filterColumn', 'filterValue', 'targetColumnName', 'first'],
            ArgumentDescriptions: ['数据源', '过滤列', '过滤值（必须是stirng）', '目标列', '是否获取第一个符合条件的值'],
            Function: (/**
             * @param {?} dataSource
             * @param {?} filterColumn
             * @param {?} filterValue
             * @param {?} targetColumnName
             * @param {?} first
             * @return {?}
             */
            function (dataSource, filterColumn, filterValue, targetColumnName, first) {
                /** @type {?} */
                var table = dataSource.dataTable;
                if (table == null) {
                    return '';
                }
                /** @type {?} */
                var colValues = table.columns.list.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.columnName === filterColumn; })).storage.values;
                /** @type {?} */
                var a = [];
                for (var index = 0; index < colValues.length; index++) {
                    /** @type {?} */
                    var element = colValues[index];
                    if (element === filterValue) {
                        a.push(index);
                        if (first) {
                            break;
                        }
                    }
                }
                /** @type {?} */
                var res = '';
                /** @type {?} */
                var tmpIndex = a.pop();
                if (tmpIndex >= 0) {
                    res += table.columns.list.find((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) { return e.columnName === targetColumnName; })).storage.values[tmpIndex];
                    res += ';';
                }
                return res.substring(0, res.length - 2);
            }),
        };
    }
    return PrintFunctionsOfFiltervalue;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印函数工具类
 */
var /**
 * 云打印函数工具类
 */
PrintFunctionUtils = /** @class */ (function () {
    function PrintFunctionUtils() {
    }
    /**
     * 将数字转为汉字
     * @param number 数值
     */
    /**
     * 将数字转为汉字
     * @param {?} number 数值
     * @return {?}
     */
    PrintFunctionUtils.FormatToCurrencyNumber = /**
     * 将数字转为汉字
     * @param {?} number 数值
     * @return {?}
     */
    function (number) {
        /** @type {?} */
        var result = PrintFunctionUtils.FormatToCurrencyNumberCN(number);
        // 把类似 【一十二】中的一去掉，改为【十二】
        if (result.startsWith('一十')) {
            result = result.substring(1);
        }
        return result;
    };
    /**
     * 将数字转换为汉字
     * @param number 数值
     */
    /**
     * 将数字转换为汉字
     * @param {?} number 数值
     * @return {?}
     */
    PrintFunctionUtils.FormatToCurrencyNumberCN = /**
     * 将数字转换为汉字
     * @param {?} number 数值
     * @return {?}
     */
    function (number) {
        /** @type {?} */
        var res = PrintFunctionUtils.ConvertCurrency(number);
        /** @type {?} */
        var result = res;
        result = result.replace(new RegExp("壹", "gm"), "一");
        result = result.replace(new RegExp("贰", "gm"), "二");
        result = result.replace(new RegExp("叁", "gm"), "三");
        result = result.replace(new RegExp("肆", "gm"), "四");
        result = result.replace(new RegExp("伍", "gm"), "五");
        result = result.replace(new RegExp("陆", "gm"), "六");
        result = result.replace(new RegExp("柒", "gm"), "七");
        result = result.replace(new RegExp("捌", "gm"), "八");
        result = result.replace(new RegExp("玖", "gm"), "九");
        result = result.replace(new RegExp("拾", "gm"), "十");
        result = result.replace(new RegExp("佰", "gm"), "百");
        result = result.replace(new RegExp("仟", "gm"), "千");
        result = result.replace("元", "点");
        result = result.replace("角", "");
        result = result.replace("分", "");
        result = result.replace("整", "");
        if (result[result.length - 1] == '点') {
            result = result.substring(0, result.length - 1);
        }
        return result;
    };
    /**
     * @param {?} money
     * @return {?}
     */
    PrintFunctionUtils.ConvertCurrency = /**
     * @param {?} money
     * @return {?}
     */
    function (money) {
        //汉字的数字
        /** @type {?} */
        var cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');
        //基本单位
        /** @type {?} */
        var cnIntRadice = new Array('', '拾', '佰', '仟');
        //对应整数部分扩展单位
        /** @type {?} */
        var cnIntUnits = new Array('', '万', '亿', '兆');
        //对应小数部分单位
        /** @type {?} */
        var cnDecUnits = new Array('角', '分', '毫', '厘');
        //整数金额时后面跟的字符
        /** @type {?} */
        var cnInteger = '整';
        //整型完以后的单位
        /** @type {?} */
        var cnIntLast = '元';
        //最大处理的数字
        /** @type {?} */
        var maxNum = 999999999999999.9999;
        //金额整数部分
        /** @type {?} */
        var integerNum;
        //金额小数部分
        /** @type {?} */
        var decimalNum;
        //输出的中文金额字符串
        /** @type {?} */
        var chineseStr = '';
        //分离金额后用的数组，预定义
        /** @type {?} */
        var parts;
        if (money == '') {
            return '';
        }
        money = parseFloat(money);
        if (money >= maxNum) {
            //超出最大处理数字
            return '';
        }
        if (money == 0) {
            chineseStr = cnNums[0] + cnIntLast + cnInteger;
            return chineseStr;
        }
        //转换为字符串
        money = money.toString();
        if (money.indexOf('.') == -1) {
            integerNum = money;
            decimalNum = '';
        }
        else {
            parts = money.split('.');
            integerNum = parts[0];
            decimalNum = parts[1].substr(0, 4);
        }
        //获取整型部分转换
        if (parseInt(integerNum, 10) > 0) {
            /** @type {?} */
            var zeroCount = 0;
            /** @type {?} */
            var IntLen = integerNum.length;
            for (var i = 0; i < IntLen; i++) {
                /** @type {?} */
                var n = integerNum.substr(i, 1);
                /** @type {?} */
                var p = IntLen - i - 1;
                /** @type {?} */
                var q = p / 4;
                /** @type {?} */
                var m = p % 4;
                if (n == '0') {
                    zeroCount++;
                }
                else {
                    if (zeroCount > 0) {
                        chineseStr += cnNums[0];
                    }
                    //归零
                    zeroCount = 0;
                    chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];
                }
                if (m == 0 && zeroCount < 4) {
                    chineseStr += cnIntUnits[q];
                }
            }
            chineseStr += cnIntLast;
        }
        //小数部分
        if (decimalNum != '') {
            /** @type {?} */
            var decLen = decimalNum.length;
            //处理到分
            if (decLen > 2) {
                decLen = 2;
            }
            for (var i = 0; i < decLen; i++) {
                /** @type {?} */
                var n = decimalNum.substr(i, 1);
                if (n != '0') {
                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];
                }
            }
        }
        if (chineseStr == '') {
            chineseStr += cnNums[0] + cnIntLast + cnInteger;
        }
        else if (decimalNum == '') {
            chineseStr += cnInteger;
        }
        return chineseStr;
    };
    /**
     * 将数值格式化为中文大写货币金额，形如【壹拾万柒仟元零伍角叁分】
     */
    /**
     * 将数值格式化为中文大写货币金额，形如【壹拾万柒仟元零伍角叁分】
     * @param {?} money
     * @return {?}
     */
    PrintFunctionUtils.FormatToCurrencyCN = /**
     * 将数值格式化为中文大写货币金额，形如【壹拾万柒仟元零伍角叁分】
     * @param {?} money
     * @return {?}
     */
    function (money) {
        return PrintFunctionUtils.ConvertCurrency(money);
    };
    /**
     * @param {?} money
     * @return {?}
     */
    PrintFunctionUtils.FormatToCurrency = /**
     * @param {?} money
     * @return {?}
     */
    function (money) {
        /** @type {?} */
        var str = this.FormatToCurrencyCN(money);
        str = str.replace('零', '');
        return str;
    };
    /**
     * @private
     * @param {?} str
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    PrintFunctionUtils.insert_item = /**
     * @private
     * @param {?} str
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (str, item, index) {
        // 初始化一个空字符串
        /** @type {?} */
        var newstr = '';
        /** @type {?} */
        var tmp = str.substring(0, index);
        /** @type {?} */
        var estr = str.substring(index, str.length);
        newstr += tmp + item + estr;
        return newstr;
    };
    /**
    * 对日期进行格式化， 和C#大致一致 默认yyyy-MM-dd HH:mm:ss
    * 可不带参数 一个日期参数 或一个格式化参数
    * @param date 要格式化的日期
    * @param format 进行格式化的模式字符串
    *     支持的模式字母有：
    *     y:年,
    *     M:年中的月份(1-12),
    *     d:月份中的天(1-31),
    *     H:小时(0-23),
    *     h:小时(0-11),
    *     m:分(0-59),
    *     s:秒(0-59),
    *     f:毫秒(0-999),
    *     q:季度(1-4)
    * @return String
    * @author adswads@gmail.com
    */
    /**
     * 对日期进行格式化， 和C#大致一致 默认yyyy-MM-dd HH:mm:ss
     * 可不带参数 一个日期参数 或一个格式化参数
     * @author adswads\@gmail.com
     * @param {?=} date 要格式化的日期
     * @param {?=} format 进行格式化的模式字符串
     *     支持的模式字母有：
     *     y:年,
     *     M:年中的月份(1-12),
     *     d:月份中的天(1-31),
     *     H:小时(0-23),
     *     h:小时(0-11),
     *     m:分(0-59),
     *     s:秒(0-59),
     *     f:毫秒(0-999),
     *     q:季度(1-4)
     * @return {?} String
     */
    PrintFunctionUtils.dateFormat = /**
     * 对日期进行格式化， 和C#大致一致 默认yyyy-MM-dd HH:mm:ss
     * 可不带参数 一个日期参数 或一个格式化参数
     * @author adswads\@gmail.com
     * @param {?=} date 要格式化的日期
     * @param {?=} format 进行格式化的模式字符串
     *     支持的模式字母有：
     *     y:年,
     *     M:年中的月份(1-12),
     *     d:月份中的天(1-31),
     *     H:小时(0-23),
     *     h:小时(0-11),
     *     m:分(0-59),
     *     s:秒(0-59),
     *     f:毫秒(0-999),
     *     q:季度(1-4)
     * @return {?} String
     */
    function (date, format) {
        // 无参数
        if (date === undefined && format === undefined) {
            date = new Date();
            format = 'yyyy-MM-dd HH:mm:ss';
        }
        else if (typeof (date) === 'string') { // 无日期
            format = date;
            date = new Date();
        }
        else if (format === undefined) { // 无格式化参数
            format = 'yyyy-MM-dd HH:mm:ss';
        } // 没有分隔符的特殊处理
        // 没有分隔符的特殊处理
        /** @type {?} */
        var map = {
            y: date.getFullYear() + '',
            // 年份
            M: date.getMonth() + 1 + '',
            // 月份
            d: date.getDate() + '',
            // 日
            H: date.getHours(),
            // 小时 24
            m: date.getMinutes() + '',
            // 分
            s: date.getSeconds() + '',
            // 秒
            q: Math.floor((date.getMonth() + 3) / 3) + '',
            // 季度
            f: date.getMilliseconds() + '' // 毫秒
        };
        // 小时 12
        if (map['H'] > 12) {
            map['h'] = map['H'] - 12 + '';
        }
        else {
            map['h'] = map['H'] + '';
        }
        map['H'] += '';
        /** @type {?} */
        var reg = 'yMdHhmsqf';
        /** @type {?} */
        var all = '';
        /** @type {?} */
        var str = '';
        for (var i = 0, n = 0; i < reg.length; i++) {
            n = format.indexOf(reg[i]);
            if (n < 0) {
                continue;
            }
            all = '';
            for (; n < format.length; n++) {
                if (format[n] !== reg[i]) {
                    break;
                }
                all += reg[i];
            }
            if (all.length > 0) {
                if (all.length === map[reg[i]].length) {
                    str = map[reg[i]];
                }
                else if (all.length > map[reg[i]].length) {
                    if (reg[i] === 'f') {
                        str = map[reg[i]] + this.charString('0', all.length - map[reg[i]].length);
                    }
                    else {
                        str = this.charString('0', all.length - map[reg[i]].length) + map[reg[i]];
                    }
                }
                else {
                    switch (reg[i]) {
                        case 'y':
                            str = map[reg[i]].substr(map[reg[i]].length - all.length);
                            break;
                        case 'f':
                            str = map[reg[i]].substr(0, all.length);
                            break;
                        default:
                            str = map[reg[i]];
                            break;
                    }
                }
                format = format.replace(all, str);
            }
        }
        return format;
    };
    /**
    * 返回字符串 为n个char构成
    * @param char 重复的字符
    * @param count 次数
    * @return String
    * @author adswads@gmail.com
    */
    /**
     * 返回字符串 为n个char构成
     * @author adswads\@gmail.com
     * @private
     * @param {?} char 重复的字符
     * @param {?} count 次数
     * @return {?} String
     */
    PrintFunctionUtils.charString = /**
     * 返回字符串 为n个char构成
     * @author adswads\@gmail.com
     * @private
     * @param {?} char 重复的字符
     * @param {?} count 次数
     * @return {?} String
     */
    function (char, count) {
        /** @type {?} */
        var str = '';
        while (count--) {
            str += char;
        }
        return str;
    };
    /**
     * 格式化数字
     * @param  number  [要格式化的数字]
     * @param  decimals         [保留几位小数]
     * @param  dec_point        [小数点符号]
     * @param  thousands_sep    [千分位符号]
     * @param  roundtag         [舍入参数，默认 "ceil" 向上取,"floor"向下取,"round" 四舍五入]
     * @return  格式化后的结果
     */
    /**
     * 格式化数字
     * @private
     * @param {?} number  [要格式化的数字]
     * @param {?} decimals         [保留几位小数]
     * @param {?} dec_point        [小数点符号]
     * @param {?} thousands_sep    [千分位符号]
     * @param {?} roundtag         [舍入参数，默认 "ceil" 向上取,"floor"向下取,"round" 四舍五入]
     * @return {?} 格式化后的结果
     */
    PrintFunctionUtils.number_format = /**
     * 格式化数字
     * @private
     * @param {?} number  [要格式化的数字]
     * @param {?} decimals         [保留几位小数]
     * @param {?} dec_point        [小数点符号]
     * @param {?} thousands_sep    [千分位符号]
     * @param {?} roundtag         [舍入参数，默认 "ceil" 向上取,"floor"向下取,"round" 四舍五入]
     * @return {?} 格式化后的结果
     */
    function (number, decimals, dec_point, thousands_sep, roundtag) {
        number = (number + '').replace(/[^0-9+-Ee.]/g, '');
        roundtag = roundtag || 'ceil'; // "ceil","floor","round"
        // "ceil","floor","round"
        /** @type {?} */
        var n = !isFinite(+number) ? 0 : +number;
        /** @type {?} */
        var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);
        /** @type {?} */
        var sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep;
        /** @type {?} */
        var dec = (typeof dec_point === 'undefined') ? '.' : dec_point;
        /** @type {?} */
        var s = [];
        /** @type {?} */
        var toFixedFix = (/**
         * @param {?} n
         * @param {?} prec
         * @return {?}
         */
        function (n, prec) {
            /** @type {?} */
            var k = Math.pow(10, prec);
            console.log();
            return '' + parseFloat(Math[roundtag](parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;
        });
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        /** @type {?} */
        var re = /(-?\d+)(\d{3})/;
        while (re.test(s[0])) {
            s[0] = s[0].replace(re, '$1' + sep + '$2');
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    };
    return PrintFunctionUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印内置的函数
 */
var /**
 * 云打印内置的函数
 */
PrintFunctionsOfFormat = /** @class */ (function () {
    function PrintFunctionsOfFormat() {
        /**
         * 注意：
         * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
         * 2.数据源的传递，直接在参数上些上table名就行了。
         */
        /**
             * 注意：
             * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
             * 2.数据源的传递，直接在参数上些上table名就行了。
             */
        /**
         * 将枚举值转换为显示值
         */
        this.ParseEnumValue = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'ParseEnumValue',
            Description: '将枚举值转换为显示值',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '显示值',
            ArgumentTypes: [String, String, Object],
            ArgumentNames: ['realValue', 'disPlayValue', 'enumObject'],
            ArgumentDescriptions: ['枚举值(0/1/2)', '显示值(中/英/法)', '枚举实例'],
            Function: (/**
             * @param {?} realValue
             * @param {?} disPlayValue
             * @param {?} enumObject
             * @return {?}
             */
            function (realValue, disPlayValue, enumObject) {
                // const real = realValue.split('/');
                // const disPlay = disPlayValue.split('/');
                // if (real.length === disPlay.length) {
                //     const enumIntValue = enumObject.toString();
                //     const index = real.findIndex(x => x === enumIntValue);
                //     if (index > -1) {
                //         return disPlay[index];
                //     }
                // }
                // return '';
            }),
        };
        /**
         * 将8位字符串形式的日期转换为指定格式的日期格式
         */
        this.Format8CharDateTime = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'Format8CharDateTime',
            Description: '将8位字符串形式的日期转换为指定格式的日期格式',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '指定日期格式的字符串',
            ArgumentTypes: [String, String],
            ArgumentNames: ['format', 'dataString'],
            ArgumentDescriptions: ['枚举值(0/1/2)', '显示值(中/英/法)', '枚举实例'],
            Function: (/**
             * @param {?} format
             * @param {?} dataString
             * @return {?}
             */
            function (format, dataString) {
                // if (dataString.length !== 8) {
                //     return dataString;
                // }
                // // tslint:disable-next-line:radix
                // const year = parseInt(dataString.substring(0, 4));
                // // tslint:disable-next-line:radix
                // const mouth = parseInt(dataString.substring(4, 6));
                // // tslint:disable-next-line:radix
                // const day = parseInt(dataString.substring(6, 8));
                // const dateTime = new Date();
                // dateTime.setFullYear(year);
                // /**
                //  * Sets the month value in the Date object using local time.
                //  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //  * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                // */
                // dateTime.setMonth(mouth - 1);
                // dateTime.setDate(day);
                // return PrintFunctionUtils.dateFormat(dateTime, format);
            }),
        };
        /**
         * 将8位字符串形式的日期转换为指定格式的日期格式
         */
        this.FormatDateTime = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDateTime',
            Description: '将日期转换为指定格式的日期格式',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '指定日期格式的字符串',
            ArgumentTypes: [String, Object],
            ArgumentNames: ['format', 'datetime'],
            ArgumentDescriptions: ['格式', '日期(DateTime类型)'],
            Function: (/**
             * @param {?} format
             * @param {?} datetime
             * @return {?}
             */
            function (format, datetime) {
                // if (typeof (date) === 'string') {
                //     const year = parseInt(date.substring(0, 4));
                //     const mouth = parseInt(date.substring(5, 7));
                //     const day = parseInt(date.substring(8, 10));
                //     const dateTime = new Date();
                //     dateTime.setFullYear(year);
                //     /**
                //      * Sets the month value in the Date object using local time.
                //      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                //     */
                //     dateTime.setMonth(mouth - 1);
                //     dateTime.setDate(day);
                //     return PrintFunctionUtils.dateFormat(dateTime, format);
                // } else {
                //     const year = date.year;
                //     const mouth = date.month;
                //     const day = date.day;
                //     const dateTime = new Date();
                //     dateTime.setFullYear(year);
                //     /**
                //      * Sets the month value in the Date object using local time.
                //      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                //     */
                //     dateTime.setMonth(mouth - 1);
                //     dateTime.setDate(day);
                //     return PrintFunctionUtils.dateFormat(dateTime, format);
                // }
            }),
        };
        /**
         * 将字符串形式的日期转换为指定格式的日期格式
         */
        this.FormatDateTimeStr = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDateTimeStr',
            Description: '将日期字符串转换为指定格式的日期格式',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '指定日期格式的字符串',
            ArgumentTypes: [String, String],
            ArgumentNames: ['format', 'datestring'],
            ArgumentDescriptions: ['格式', '日期字符串)'],
            Function: (/**
             * @param {?} format
             * @param {?} datestring
             * @return {?}
             */
            function (format, datestring) {
                // const year = parseInt(date.substring(0, 4));
                // const mouth = parseInt(date.substring(5, 7));
                // const day = parseInt(date.substring(8, 10));
                // const dateTime = new Date();
                // dateTime.setFullYear(year);
                // /**
                //  * Sets the month value in the Date object using local time.
                //  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
                //  * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
                // */
                // dateTime.setMonth(mouth - 1);
                // dateTime.setDate(day);
                // return PrintFunctionUtils.dateFormat(dateTime, format);
            }),
        };
        this.FormatDateTimeCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDateTimeCN',
            Description: '将数字日期转换为汉字日期',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字日期',
            ArgumentTypes: [Object, Boolean, Boolean],
            ArgumentNames: ['datetime', 'isSimple', 'isDeleteZero'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字', '是否去除零'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @param {?} isDeleteZero
             * @return {?}
             */
            function (datetime, isSimple, isDeleteZero) {
            }),
        };
        // FormatDateTimeStrCN = {
        //     Category : 'IGixFucs',
        //     GroupFunctionName : 'Format',
        //     FunctionName : 'FormatDateTimeStrCN',
        //     Description : '将数字日期字符转换为汉字日期',
        //     TypeOfFunction : 'void',
        //     ReturnType : String,
        //     ReturnDescription : '汉字日期',
        //     ArgumentTypes : [String, Boolean,Boolean],
        //     ArgumentNames : [ 'datestring', 'isSimple','isDeleteZero'],
        //     ArgumentDescriptions : [  '日期字符串（yyyy-MM-dd）', '是否简体汉字','是否去除零'],
        //     Function: function(datestring: string, isSimple: Boolean,isDeleteZero: Boolean) {
        //     },
        // };
        this.FormatYearCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatYearCN',
            Description: '将数字日期转换为汉字年',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字年',
            ArgumentTypes: [Object, Boolean],
            ArgumentNames: ['datetime', 'isSimple'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @return {?}
             */
            function (datetime, isSimple) {
            }),
        };
        this.FormatMonthCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatMonthCN',
            Description: '将数字日期转换为汉字月',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字月',
            ArgumentTypes: [Object, Boolean, Boolean],
            ArgumentNames: ['datetime', 'isSimple', 'isDeleteZero'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字', '是否去除零'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @param {?} isDeleteZero
             * @return {?}
             */
            function (datetime, isSimple, isDeleteZero) {
            }),
        };
        this.FormatDayCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatDayCN',
            Description: '将数字日期转换为汉字日',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '汉字日',
            ArgumentTypes: [Object, Boolean, Boolean],
            ArgumentNames: ['datetime', 'isSimple', 'isDeleteZero'],
            ArgumentDescriptions: ['日期(DateTime类型)', '是否简体汉字', '是否去除零'],
            Function: (/**
             * @param {?} datetime
             * @param {?} isSimple
             * @param {?} isDeleteZero
             * @return {?}
             */
            function (datetime, isSimple, isDeleteZero) {
            }),
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrencyNumber = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrencyNumber',
            Description: '将数值格式化为大写中文，比如将12.38格式化为【十二点三八】',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '大写中文数字',
            ArgumentTypes: [Number],
            ArgumentNames: ['number'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrencyNumber,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrencyNumberCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrencyNumberCN',
            Description: '将数值格式化为大写中文金额数值，比如将12.38格式化为【一十二点三八】',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '大写中文数值',
            ArgumentTypes: [Number],
            ArgumentNames: ['number'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrencyNumberCN,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrencyCN = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrencyCN',
            Description: '将数值格式化为中文大写货币金额',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '中文大写货币金额',
            ArgumentTypes: [Number],
            ArgumentNames: ['money'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrencyCN,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatToCurrency = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatToCurrency',
            Description: '将数值格式化为中文大写货币金额',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '中文大写货币金额',
            ArgumentTypes: [Number],
            ArgumentNames: ['money'],
            ArgumentDescriptions: ['数值'],
            Function: PrintFunctionUtils.FormatToCurrency,
        };
        /**
         * 将阿拉伯数字转换为汉字
         */
        this.FormatFloat = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatFloat',
            Description: '将浮点类型转化为指定的格式显示',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '浮点型数字结果',
            ArgumentTypes: [Number, String],
            ArgumentNames: ['f', 'format'],
            ArgumentDescriptions: ['浮点型数字', '格式'],
            Function: (/**
             * @param {?} f
             * @param {?} format
             * @return {?}
             */
            function (f, format) {
            }),
        };
        /**
         * 将连续出现的连接符转换为单个字符，
         * 例如将12---32转换为12-32
         */
        this.RemoveRepeatedJoiner = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'RemoveRepeatedJoiner',
            Description: '将连续出现的连接符转换为单个字符，例如将12---32转换为12-32',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '提换后的字符串',
            ArgumentTypes: [String, String],
            ArgumentNames: ['joiner', 'str'],
            ArgumentDescriptions: ['连接符', '字符串'],
            Function: (/**
             * @param {?} joiner
             * @param {?} str
             * @return {?}
             */
            function (joiner, str) {
                // if (joiner.length > 1 && str.trim().length) {
                //     return str;
                // }
                // joiner = joiner.substring(0, 1);
                // const patten = '(' + joiner + ')+';
                // const subStr = new RegExp(patten, 'g');
                // let res = str.replace(subStr, joiner);
                // if (res[0] === joiner) {
                //     res = res.substr(1);
                // }
                // if (res[res.length - 1] === joiner) {
                //     res = res.substr(0, res.length - 2);
                // }
                // return res;
            }),
        };
        /**
         * 根据起始页码转化页码
         */
        this.FormatPageIndexWithStartNumber = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Format',
            FunctionName: 'FormatPageIndexWithStartNumber',
            Description: '根据起始页码重新计算页码，例如：起始页码为10，那第一页将显示10',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '转化后的页码',
            ArgumentTypes: [String, Number],
            ArgumentNames: ['page', 'start'],
            ArgumentDescriptions: ['当前页码(来自系统变量)', '起始页'],
            Function: (/**
             * @param {?} page
             * @param {?} start
             * @return {?}
             */
            function (page, start) {
                // const newline = Number(page)+start;
                // return newline;
            }),
        };
        /**
         * 返回指定key的资源值
         */
        // L = {
        //     Category : 'IGixFucs',
        //     GroupFunctionName : 'Location',
        //     FunctionName : 'L',
        //     Description : '本地化',
        //     TypeOfFunction : 'void',
        //     ReturnType : String,
        //     ReturnDescription : '返回指定key的资源值',
        //     ArgumentTypes : [String, String],
        //     ArgumentNames : [ 'resourceKey', 'defaultValue'],
        //     ArgumentDescriptions : ['资源Key', 'defaultValue'],
        //     Function: function(resourceKey: string, defaultValue: string) {
        //         return defaultValue;
        //     },
        // };
    }
    return PrintFunctionsOfFormat;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 云打印内置的函数
 */
var /**
 * 云打印内置的函数
 */
PrintFunctionsOfConvert = /** @class */ (function () {
    function PrintFunctionsOfConvert() {
        /**
         * 将字符串转化为BigDecimal
         */
        this.ConvertStringToBigDecimal = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'ConvertStringToBigDecimal',
            Description: '将字符串转化为BigDecimal',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '显示值',
            ArgumentTypes: [String],
            ArgumentNames: ['money'],
            ArgumentDescriptions: ['金额字符串'],
            Function: (/**
             * @param {?} money
             * @return {?}
             */
            function (money) {
                // const real = realValue.split('/');
                // const disPlay = disPlayValue.split('/');
                // if (real.length === disPlay.length) {
                //     const enumIntValue = enumObject.toString();
                //     const index = real.findIndex(x => x === enumIntValue);
                //     if (index > -1) {
                //         return disPlay[index];
                //     }
                // }
                // return '';
            }),
        };
        /**
         * 将Double转化为BigDecimal
         */
        this.ConvertDoubleToBigDecimal = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'ConvertDoubleToBigDecimal',
            Description: '将Double转化为BigDecimal',
            TypeOfFunction: 'void',
            ReturnType: String,
            ReturnDescription: '显示值',
            ArgumentTypes: [Number],
            ArgumentNames: ['money',],
            ArgumentDescriptions: ['double类型的金额'],
            Function: (/**
             * @param {?} money
             * @return {?}
             */
            function (money) {
                // const real = realValue.split('/');
                // const disPlay = disPlayValue.split('/');
                // if (real.length === disPlay.length) {
                //     const enumIntValue = enumObject.toString();
                //     const index = real.findIndex(x => x === enumIntValue);
                //     if (index > -1) {
                //         return disPlay[index];
                //     }
                // }
                // return '';
            }),
        };
        /**
         * 将Double转化为BigDecimal
         */
        this.SubStringMoney = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'SubStringMoney',
            Description: '按照位置截取金额数值',
            TypeOfFunction: 'string',
            ReturnType: String,
            ReturnDescription: '截取的金额（例如：SubStringMoney("1232.32","-1")返回3）',
            ArgumentTypes: [Number, String, Boolean],
            ArgumentNames: ['money', 'position', 'isZeroShow'],
            ArgumentDescriptions: ['string类型的金额', 'string截取的位置（小数点往左位置是1,2,3依次类推，往右是-1,-2依次类推）'],
            Function: (/**
             * @param {?} money
             * @param {?} position
             * @param {?} isZeroShow
             * @return {?}
             */
            function (money, position, isZeroShow) {
            }),
        };
        /**
         * 将Double转化为BigDecimal
         */
        this.SubDoubleMoney = {
            Category: 'IGixFucs',
            GroupFunctionName: 'Convert',
            FunctionName: 'SubDoubleMoney',
            Description: '按照位置截取金额数值',
            TypeOfFunction: 'string',
            ReturnType: String,
            ReturnDescription: '截取的金额（例如：SubStringMoney("1232.32","3")返回2）',
            ArgumentTypes: [Number, String, Boolean],
            ArgumentNames: ['money', 'position', 'isZeroShow'],
            ArgumentDescriptions: ['double类型的金额', 'string类型截取的位置（小数点往左位置是1,2,3依次类推，往右是-1,-2依次类推）'],
            Function: (/**
             * @param {?} money
             * @param {?} position
             * @param {?} isZeroShow
             * @return {?}
             */
            function (money, position, isZeroShow) {
            }),
        };
    }
    return PrintFunctionsOfConvert;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CloudprintFunctionRegister = /** @class */ (function () {
    function CloudprintFunctionRegister(http) {
        this.http = http;
        this.httpoptions = {};
        this.httpoptions['headers'] = {
            SessionId: '',
            'Content-Type': 'application/json'
        };
    }
    /**
     * 初始化自定义函数
     */
    /**
     * 初始化自定义函数
     * @param {?} configUrl
     * @return {?}
     */
    CloudprintFunctionRegister.prototype.initCustomFunction = /**
     * 初始化自定义函数
     * @param {?} configUrl
     * @return {?}
     */
    function (configUrl) {
        var _this = this;
        // 内置函数-数值过滤
        /** @type {?} */
        var funcs = new PrintFunctionsOfFiltervalue();
        // 内置函数-格式化
        /** @type {?} */
        var funcFormat = new PrintFunctionsOfFormat();
        // 内置函数-格式化
        /** @type {?} */
        var funcConvert = new PrintFunctionsOfConvert();
        // 这里默认的GSP内置函数分组为GSP
        if (Stimulsoft.Report.Dictionary.StiFunctions.getFunctions('IGixFucs').length === 0) {
            // tslint:disable-next-line:forin
            for (var f in funcs) {
                /** @type {?} */
                var func = funcs[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
            // tslint:disable-next-line:forin
            for (var f in funcFormat) {
                /** @type {?} */
                var func = funcFormat[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
            // tslint:disable-next-line:forin
            for (var f in funcConvert) {
                /** @type {?} */
                var func = funcConvert[f];
                Stimulsoft.Report.Dictionary.StiFunctions.addFunction(func.Category, func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
            }
        }
        // 自定义函数todo:最终自定义函数从后台取配置文件里的解析
        return this.http.get(configUrl, this.httpoptions).toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data && data.length > 0) {
                return _this.addJsFuncPlugins(-1, data)
                    .then((/**
                 * @return {?}
                 */
                function () {
                    if (!data) {
                        return;
                    }
                    /** @type {?} */
                    var allFuncs = [];
                    // tslint:disable-next-line:forin
                    if (data.length > 0) {
                        for (var i in data) {
                            allFuncs.push(window[((/** @type {?} */ (data[i]))).key]);
                        }
                    }
                    if (Stimulsoft.Report.Dictionary.StiFunctions.getFunctions('CustomFucs').length === 0 && allFuncs.length > 0) {
                        // tslint:disable-next-line:forin
                        for (var f in allFuncs) {
                            /** @type {?} */
                            var item = allFuncs[f];
                            // tslint:disable-next-line:forin
                            for (var f2 in item) {
                                /** @type {?} */
                                var func = item[f2];
                                Stimulsoft.Report.Dictionary.StiFunctions.addFunction('CustomFucs', func.GroupFunctionName, func.FunctionName, func.Description, func.TypeOfFunction, func.ReturnType, func.ReturnDescription, func.ArgumentTypes, func.ArgumentNames, func.ArgumentDescriptions, func.Function);
                            }
                        }
                    }
                }));
            }
        }));
    };
    /**
     * 添加js业务函数插件
     */
    /**
     * 添加js业务函数插件
     * @private
     * @param {?} i
     * @param {?} data
     * @return {?}
     */
    CloudprintFunctionRegister.prototype.addJsFuncPlugins = /**
     * 添加js业务函数插件
     * @private
     * @param {?} i
     * @param {?} data
     * @return {?}
     */
    function (i, data) {
        if (!data && data.length == 0) {
            /** @type {?} */
            var sub = new Subject();
            sub.complete(); // 没有这句话toPromise()里的内容不跑
            return sub.toPromise();
        }
        /** @type {?} */
        var loader = window['System'];
        if (i < data.length - 1) {
            i++;
            this.addJsFuncPlugins(i, data);
        }
        return loader.import(data[i].path);
    };
    CloudprintFunctionRegister.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintFunctionRegister.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CloudprintFunctionRegister;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Config = /** @class */ (function () {
    function Config() {
    }
    Config.PRINT_SU = 'Prt';
    return Config;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Urls = {
    // 第三方应用都统一走自己服务端转调
    /**
     * 云打印的基地址
     */
    CloudPrintBaseUrl: '/api/runtime/' + Config.PRINT_SU + '/v1.0/service',
    CloudPrintDimensionUrl: '/api/runtime/' + Config.PRINT_SU + '/v1.0/demensionservice',
    CloudPrintDeviceUrl: '/api/runtime/' + Config.PRINT_SU + '/v1.0/device',
    /**
     * 根据数据源获取格式
     */
    GetPrintFormatByDataSrouceId: '/GetPrintFormatByDataSrouceId?',
    /**
     * 根据数据源和维度获取格式
     */
    GetPrintFormatByDataSrouceAndDimension: '/GetPrintFormatByDataSrouceAndDimension?',
    /**
     * 获取格式和打印设备
     */
    GetPrintFormatAndDevice: '/getPrintFormatAndDevice?',
    GetPrintDevice: '/getPrintDevice?',
    /**
     * 保存格式
     */
    SavePrintFormat: '/SavePrintFormat',
    /**
     * 保存格式
     */
    SavePrintFormatWithRes: '/savePrintFormatWithRes',
    /**
     * 删除指定维度
     */
    DeletePrintFormat: '/DeletePrintFormat',
    /**
     * 获取指定业务对象下的打印数据源
     */
    GetDataSourceByBOId: '/GetDataSourceByBOId?',
    CreatePrintFormatWithBE: '/CreatePrintFormatWithBE?',
    CreatePrintFormatWithVO: '/CreatePrintFormatWithVO?',
    CreatePrintFormatWithBO: '/CreatePrintFormatWithBO?',
    CreatePrintFormatWithSchema: '/CreatePrintFormatWithSchema',
    /**
     * 加载已有格式API
     */
    LoadPrintFormatById: '/GetPrintFormatById?',
    LoadNewSourcePrintFormatById: '/getNewSourcePrintFormatById?',
    LoadNewSourcePrintFormatByIdAndLang: '/getNewSourcePrintFormatByIdAndLang?',
    /**
     * 加载打印数据API
     */
    LoadPrintData: '/GetPrintData?',
    /**
     * 获取设计器页面
     */
    GetDesigerHtml: '/GetDesigerHtml',
    /**
     * 获取扩展的js业务函数
     */
    GetCustomJsFunc: '/GetCustomJsFunc',
    /**
     * 打印API
     */
    PrintSingleById: '/OutputBEData?',
    PrintSingleByFilter: '/OutputBEDataWithFilter?',
    PrintMultiById: '/printMultiById?',
    PrintMultiByFilter: '/printMultiByFilter?',
    PrintSingleBOData: '/OutputBOData?',
    /**
     * 打印测试数据，用于设计时预览
     */
    PrintTestData: '/printTestData?',
    /**
     * 触发打印事件
     */
    SendPrintEvent: '/sendPrintEvent?',
    PrintAttachment: '/printAttachment?',
    IsRemotePrint: '/isRemotePrint?',
    GetEnableFonts: '/fonts?'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PrintFormat = /** @class */ (function () {
    function PrintFormat() {
        /**
         * 多语名称对象
         */
        this.nameMap = {};
        this.nameMap = {};
    }
    return PrintFormat;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataValidator = /** @class */ (function () {
    function DataValidator() {
    }
    /**
     * @param {?} obj
     * @param {?} s
     * @return {?}
     */
    DataValidator.checkForEmptyString = /**
     * @param {?} obj
     * @param {?} s
     * @return {?}
     */
    function (obj, s) {
        if (obj || obj.length === 0) {
            throw new Error(s + '为空');
        }
    };
    /**
     * @param {?} obj
     * @param {?} s
     * @return {?}
     */
    DataValidator.checkForNullReference = /**
     * @param {?} obj
     * @param {?} s
     * @return {?}
     */
    function (obj, s) {
        if (obj == null) {
            throw new Error(s + '为null');
        }
    };
    /**
     * 方法标志位校验
     */
    /**
     * 方法标志位校验
     * @param {?} flag
     * @return {?}
     */
    DataValidator.checkFlag = /**
     * 方法标志位校验
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        if (flag && flag === 'CloudPrint') {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * 校验appUrl
     */
    /**
     * 校验appUrl
     * @param {?} url
     * @return {?}
     */
    DataValidator.checkAppUrl = /**
     * 校验appUrl
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (!url) {
            return false;
        }
        else {
            return true;
        }
    };
    return DataValidator;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PrintFormatService = /** @class */ (function () {
    function PrintFormatService(httpClient) {
        this.httpClient = httpClient;
        this.printEntity = new PrintEntity();
        this.curSu = Config.PRINT_SU;
    }
    /**
     * @param {?} beId
     * @return {?}
     */
    PrintFormatService.prototype.createPrintFormatWithBE = /**
     * @param {?} beId
     * @return {?}
     */
    function (beId) {
        /** @type {?} */
        var url = this.printEntity.appUrl + Urls.CreatePrintFormatWithBE + 'beId=' + beId + '&su=' + this.curSu;
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise();
    };
    /**
     * @param {?} voId
     * @return {?}
     */
    PrintFormatService.prototype.createPrintFormatWithVO = /**
     * @param {?} voId
     * @return {?}
     */
    function (voId) {
        /** @type {?} */
        var url = this.printEntity.appUrl + Urls.CreatePrintFormatWithVO + 'voId=' + voId + '&su=' + this.curSu;
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise();
    };
    /**
     * @param {?} biznessObjectClassInfo
     * @return {?}
     */
    PrintFormatService.prototype.createPrintFormatWithBO = /**
     * @param {?} biznessObjectClassInfo
     * @return {?}
     */
    function (biznessObjectClassInfo) {
        /** @type {?} */
        var url = this.printEntity.appUrl + Urls.CreatePrintFormatWithBO + 'biznessObjectClassInfo=' + biznessObjectClassInfo + '&su=' + this.curSu;
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise();
    };
    /**
     * @param {?} boId
     * @return {?}
     */
    PrintFormatService.prototype.getDataSourceByBOId = /**
     * @param {?} boId
     * @return {?}
     */
    function (boId) {
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        /** @type {?} */
        var url = this.printEntity.appUrl + Urls.GetDataSourceByBOId;
        return this.httpClient.get(url + 'boId=' + boId + '&su=' + this.curSu).toPromise();
    };
    /**
     * @param {?} dataSourceId
     * @return {?}
     */
    PrintFormatService.prototype.getFormatBySourceId = /**
     * @param {?} dataSourceId
     * @return {?}
     */
    function (dataSourceId) {
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(this.printEntity.appUrl + Urls.GetPrintFormatByDataSrouceId + 'dataSrouceId=' + dataSourceId + '&su=' + this.curSu, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    PrintFormatService.prototype.getPrintFormatByDataSrouceAndDimension = /**
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    function (billCategoryId, sourceId, firstDimension, secondDimension) {
        firstDimension = firstDimension || '';
        secondDimension = secondDimension || '';
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(this.printEntity.appUrl + Urls.GetPrintFormatByDataSrouceAndDimension + 'billCategoryId=' + billCategoryId + '&sourceId=' + sourceId + '&firstDimension=' + firstDimension + '&secondDimension=' + secondDimension + '&su=' + this.curSu, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    PrintFormatService.prototype.getPrintFormatAndDevice = /**
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    function (billCategoryId, sourceId, firstDimension, secondDimension) {
        firstDimension = firstDimension || '';
        secondDimension = secondDimension || '';
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        /** @type {?} */
        var data = {
            billCategoryId: billCategoryId,
            sourceId: sourceId,
            firstDimension: firstDimension,
            secondDimension: secondDimension
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.GetPrintFormatAndDevice + 'su=' + this.curSu, data, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * @return {?}
     */
    PrintFormatService.prototype.getPrintDevice = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(Urls.CloudPrintDeviceUrl + Urls.GetPrintDevice + 'su=' + this.curSu, null, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * @param {?} formatId
     * @return {?}
     */
    PrintFormatService.prototype.getFormatByFormatId = /**
     * @param {?} formatId
     * @return {?}
     */
    function (formatId) {
        /** @type {?} */
        var url = this.printEntity.appUrl + Urls.LoadPrintFormatById + 'metadataId=' + formatId + '&su=' + this.curSu;
        // LoadPrintFormatById是个Get请求
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return data;
        }));
    };
    /**
     * 根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式
     */
    /**
     * 根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @return {?}
     */
    PrintFormatService.prototype.getNewSourceFormatByFormatId = /**
     * 根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @return {?}
     */
    function (formatId) {
        /** @type {?} */
        var url = Urls.CloudPrintBaseUrl + Urls.LoadNewSourcePrintFormatById;
        return this.httpClient.get(url + 'formatId=' + formatId).toPromise();
    };
    /**
     * 根据已有的格式id和数据源id,语言，实时获取数据源结构后组成新的格式
     */
    /**
     * 根据已有的格式id和数据源id,语言，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @param {?} lang
     * @return {?}
     */
    PrintFormatService.prototype.getNewSourceFormatByFormatIdAndLang = /**
     * 根据已有的格式id和数据源id,语言，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @param {?} lang
     * @return {?}
     */
    function (formatId, lang) {
        /** @type {?} */
        var url = Urls.CloudPrintBaseUrl + Urls.LoadNewSourcePrintFormatByIdAndLang;
        return this.httpClient.get(url + 'formatId=' + formatId + '&lang=' + lang).toPromise();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PrintFormatService.prototype.save = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.SavePrintFormat + '?su=' + this.curSu, data, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PrintFormatService.prototype.saveWithRes = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.SavePrintFormatWithRes + '?su=' + this.curSu, data, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PrintFormatService.prototype.remove = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        // const body = { 'printFormatId':data};
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.DeletePrintFormat + '/' + data + '?su=' + this.curSu, null, httpoptions)
            .toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * 加载格式
     * @param reportID id
     */
    /**
     * 加载格式
     * @param {?} reportID id
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.loadFormat = /**
     * 加载格式
     * @param {?} reportID id
     * @param {?} flag
     * @return {?}
     */
    function (reportID, flag) {
        var _this = this;
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /**
         * 对于GS内部集成，再外层其实已经给this.printEntity.format赋值了
         */
        if (this.printEntity.format) {
            /** @type {?} */
            var sub = new Subject();
            sub.complete(); // 没有这句话toPromise()里的内容不跑
            return sub.toPromise()
                .then((/**
             * @return {?}
             */
            function () {
                _this.printEntity.printFormat = _this.printEntity.printFormat || new PrintFormat();
                _this.printEntity.printFormat.content = _this.printEntity.format;
                return _this.printEntity.format;
            }));
        }
        /**
         * 这块主要还是针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现CreatePrintFormatWithBE,CreatePrintFormatWithSchema和GetPrintFormatById这俩个get请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var url;
        /** @type {?} */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        if (reportID && reportID.length > 0) { // 加载已有的格式
            url = this.printEntity.appUrl + Urls.LoadPrintFormatById + 'metadataId=' + reportID + '&su=' + this.curSu;
            // LoadPrintFormatById是个Get请求
            return this.httpClient.get(url, httpoptions).toPromise()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // 加载了格式后把格式记住
                _this.printEntity.printFormat = data;
                _this.printEntity.format = data.content;
                return data.content;
            }));
        }
        else {
            console.log(this.printEntity.format);
            console.log(reportID);
            console.error('格式id为空，无法获取格式信息');
        }
    };
    /**
     * 加载数据
     * @param dataIds 要加载的数据Id
     */
    /**
     * 加载数据
     * @param {?} dataIds 要加载的数据Id
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.loadData = /**
     * 加载数据
     * @param {?} dataIds 要加载的数据Id
     * @param {?} flag
     * @return {?}
     */
    function (dataIds, flag) {
        var _this = this;
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /**
         * 对于GS内部集成，再外层其实已经给this.printEntity.data赋值了
         */
        if (this.printEntity.data) {
            /** @type {?} */
            var sub = new Subject();
            sub.complete(); // 没有这句话toPromise()里的内容不跑
            return sub.toPromise()
                .then((/**
             * @return {?}
             */
            function () {
                return _this.printEntity.data;
            }));
        }
        /**
         * 这块主要还是针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现GetPrintData这个get请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(this.printEntity.appUrl + Urls.LoadPrintData + 'dataIds=' + dataIds + '&su=' + this.curSu, httpoptions).toPromise()
            .then((/**
         * @param {?} data2
         * @return {?}
         */
        function (data2) {
            return data2;
        }));
    };
    /**
     * 单格式数据id渲染打印
     * GS内部/第三方
     * @param beOptions 数据源选项
     * @param options 导出选项
     * @param su:双栈模式下，该su只是用来给nginx来配置路由
     */
    /**
     * 单格式数据id渲染打印
     * GS内部/第三方
     * @param {?} beOptions 数据源选项
     * @param {?} options 导出选项
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.printSingleById = /**
     * 单格式数据id渲染打印
     * GS内部/第三方
     * @param {?} beOptions 数据源选项
     * @param {?} options 导出选项
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    function (beOptions, options, su, flag) {
        var _this = this;
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        var body = {
            BEOptions: beOptions,
            Options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        if (!beOptions.ServiceUnit) {
            return this.getSuByFormatId(beOptions.FormatId)
                .then((/**
             * @param {?} sucode
             * @return {?}
             */
            function (sucode) {
                beOptions.ServiceUnit = sucode;
                su = su || beOptions.ServiceUnit;
                return _this.httpClient.post(_this.printEntity.appUrl + Urls.PrintSingleById + 'su=' + su, body, httpoptions).toPromise()
                    .then((/**
                 * @param {?} ret
                 * @return {?}
                 */
                function (ret) {
                    return ret;
                }));
            }));
        }
        else {
            su = su || beOptions.ServiceUnit;
            return this.httpClient.post(this.printEntity.appUrl + Urls.PrintSingleById + 'su=' + su, body, httpoptions).toPromise()
                .then((/**
             * @param {?} ret
             * @return {?}
             */
            function (ret) {
                return ret;
            }));
        }
    };
    /**
     * 单格式过滤条件渲染打印
     * GS内部/第三方
     * @param beOptions BEFilter选项
     * @param options 导出选项
     * @param su:双栈模式下，该su只是用来给nginx来配置路由
     */
    /**
     * 单格式过滤条件渲染打印
     * GS内部/第三方
     * @param {?} beOptions BEFilter选项
     * @param {?} options 导出选项
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.printSingleByFilter = /**
     * 单格式过滤条件渲染打印
     * GS内部/第三方
     * @param {?} beOptions BEFilter选项
     * @param {?} options 导出选项
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    function (beOptions, options, su, flag) {
        var _this = this;
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        var body = {
            BEOptions: beOptions,
            Options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        if (!beOptions.ServiceUnit) {
            return this.getSuByFormatId(beOptions.FormatId)
                .then((/**
             * @param {?} sucode
             * @return {?}
             */
            function (sucode) {
                beOptions.ServiceUnit = sucode;
                su = su || beOptions.ServiceUnit;
                return _this.httpClient.post(_this.printEntity.appUrl + Urls.PrintSingleByFilter + 'su=' + su, body, httpoptions).toPromise()
                    .then((/**
                 * @param {?} ret
                 * @return {?}
                 */
                function (ret) {
                    return ret;
                }));
            }));
        }
        else {
            su = su || beOptions.ServiceUnit;
            return this.httpClient.post(this.printEntity.appUrl + Urls.PrintSingleByFilter + 'su=' + su, body, httpoptions).toPromise()
                .then((/**
             * @param {?} ret
             * @return {?}
             */
            function (ret) {
                return ret;
            }));
        }
    };
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     */
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.printMultiById = /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    function (beOptionsList, options, su, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        var body = {
            sourceOptionsList: beOptionsList,
            options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.PrintMultiById + 'su=' + su, body, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     */
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.printMultiByFilter = /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} su
     * @param {?} flag
     * @return {?}
     */
    function (beOptionsList, options, su, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        var body = {
            sourceFilterOptionsList: beOptionsList,
            options: options
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.PrintMultiByFilter + 'su=' + su, body, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * 渲染测试数据
     */
    /**
     * 渲染测试数据
     * @param {?} formats
     * @param {?} datas
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.printTestData = /**
     * 渲染测试数据
     * @param {?} formats
     * @param {?} datas
     * @param {?} flag
     * @return {?}
     */
    function (formats, datas, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        /** @type {?} */
        var body = {
            format: formats,
            data: JSON.stringify(datas),
        };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var httpoptions = {};
        httpoptions['responseType'] = 'blob';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.PrintTestData + 'su=' + this.curSu, body, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * 触发打印事件
     */
    /**
     * 触发打印事件
     * @param {?} data
     * @param {?} flag
     * @return {?}
     */
    PrintFormatService.prototype.sendPrintEvent = /**
     * 触发打印事件
     * @param {?} data
     * @param {?} flag
     * @return {?}
     */
    function (data, flag) {
        if (DataValidator.checkFlag(flag) === false) {
            alert('内部方法，外部请使用cloudprint.service下的服务');
            return null;
        }
        // const body = {
        //     formatid:formatid,
        //     su:su,
        // };
        /**
         * 这块如果针对的第三方，第三方通过转调的方式
         * 1.第三方服务端实现Print这个post请求接口
         * 2.第三方服务端这俩请求接口调用云打印的服务
         * @type {?}
         */
        var httpoptions = {};
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.post(this.printEntity.appUrl + Urls.SendPrintEvent + 'su=' + this.curSu, data, httpoptions).toPromise()
            .then((/**
         * @param {?} ret
         * @return {?}
         */
        function (ret) {
            return ret;
        }));
    };
    /**
     * @return {?}
     */
    PrintFormatService.prototype.isRemotePrint = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, httpoptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.printEntity.appUrl + Urls.IsRemotePrint + 'su=' + this.curSu;
                        // LoadPrintFormatById是个Get请求
                        httpoptions = {};
                        httpoptions['headers'] = {
                            SessionId: this.printEntity.sessionId || '',
                            'Content-Type': 'application/json'
                        };
                        return [4 /*yield*/, this.httpClient.get(url, httpoptions).toPromise()
                                .then((/**
                             * @param {?} data
                             * @return {?}
                             */
                            function (data) {
                                return data;
                            }))];
                    case 1: 
                    // var httpops = Object.assign({},httpoptions);
                    // httpops['responseType']="text/html";
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    PrintFormatService.prototype.getEnableFonts = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, httpoptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.printEntity.appUrl + Urls.GetEnableFonts + 'su=' + this.curSu;
                        // LoadPrintFormatById是个Get请求
                        httpoptions = {};
                        httpoptions['headers'] = {
                            SessionId: this.printEntity.sessionId || '',
                            'Content-Type': 'application/json'
                        };
                        return [4 /*yield*/, this.httpClient.get(url, httpoptions).toPromise()
                                .then((/**
                             * @param {?} data
                             * @return {?}
                             */
                            function (data) {
                                return data;
                            }))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * 通过打印格式，获取bo，在获取su（这是一个临时方案）
     * @param id
     */
    /**
     * 通过打印格式，获取bo，在获取su（这是一个临时方案）
     * @private
     * @param {?} formatId
     * @return {?}
     */
    PrintFormatService.prototype.getSuByFormatId = /**
     * 通过打印格式，获取bo，在获取su（这是一个临时方案）
     * @private
     * @param {?} formatId
     * @return {?}
     */
    function (formatId) {
        /** @type {?} */
        var url = this.printEntity.appUrl + '/getSuByFormatId?formatId=' + formatId + '&su=cloudprint';
        /** @type {?} */
        var httpoptions = {};
        httpoptions['responseType'] = 'text/html';
        httpoptions['headers'] = {
            SessionId: this.printEntity.sessionId || '',
            'Content-Type': 'application/json'
        };
        return this.httpClient.get(url, httpoptions).toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return data;
        }));
    };
    PrintFormatService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PrintFormatService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PrintFormatService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @Injectable({
//   providedIn: 'root'
// })
/**
 * 不用了，但是得保留，不然的话别人用了这个npm包的得重新打包
 */
var CloudprintdesignerService = /** @class */ (function () {
    // printEntity = new PrintEntity();
    function CloudprintdesignerService(http) {
        this.http = http;
    }
    CloudprintdesignerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintdesignerService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CloudprintdesignerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var  
// @dynamic
Utils = /** @class */ (function () {
    function Utils() {
    }
    /**
     * 判断是否PC端 or 移动端
     * true:PC
     * false:Mobile
     */
    /**
     * 判断是否PC端 or 移动端
     * true:PC
     * false:Mobile
     * @return {?}
     */
    Utils.isPC = /**
     * 判断是否PC端 or 移动端
     * true:PC
     * false:Mobile
     * @return {?}
     */
    function () {
        if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {
            return false; // 移动端
        }
        else {
            return true;
        }
    };
    /**
     * @return {?}
     */
    Utils.uuid = /**
     * @return {?}
     */
    function () {
        return [this.gen(2), this.gen(1), this.gen(1), this.gen(1), this.gen(3)].join('-');
    };
    /**
     * @param {?} rendedFormat
     * @param {?} ele
     * @return {?}
     */
    Utils.renderPdfByByte = /**
     * @param {?} rendedFormat
     * @param {?} ele
     * @return {?}
     */
    function (rendedFormat, ele) {
        if (rendedFormat) {
            /** @type {?} */
            var lock_1 = setInterval((/**
             * @return {?}
             */
            function () {
                if (ele) {
                    /** @type {?} */
                    var v = (/** @type {?} */ (document.getElementById('viewframe')));
                    if (v) {
                        /** @type {?} */
                        var filebtn = v.contentWindow.document.getElementById('openFile');
                        /** @type {?} */
                        var printbtn = v.contentWindow.document.getElementById('print');
                        /** @type {?} */
                        var downbtn = v.contentWindow.document.getElementById('download');
                        /** @type {?} */
                        var file = false;
                        /** @type {?} */
                        var down = false;
                        /** @type {?} */
                        var print_1 = false;
                        if (filebtn) {
                            filebtn.style.display = 'none';
                            file = true;
                        }
                        if (downbtn) {
                            downbtn.style.display = 'none';
                            down = true;
                        }
                        if (printbtn) {
                            printbtn.style.display = 'none';
                            print_1 = true;
                        }
                        if (file && down && print_1) {
                            clearInterval(lock_1);
                        }
                    }
                    else {
                        /** @type {?} */
                        var binaryData = [];
                        // binaryData.push(self.convertBase64ToUint8Array(rendedFormat));
                        binaryData.push(new Uint8Array(rendedFormat));
                        this.url = window.URL.createObjectURL(new Blob(binaryData, { type: 'application/pdf' }));
                        // 通过pdfjs来预览pdf
                        ele.innerHTML = '<iframe id="viewframe" src="/platform/common/web/pdfjs/viewer.html?file=' + encodeURIComponent(this.url) + '" height="100%" width="100%"></iframe>';
                        ele.hidden = false;
                    }
                }
            }), 200);
        }
    };
    /**
     * @private
     * @param {?} count
     * @return {?}
     */
    Utils.gen = /**
     * @private
     * @param {?} count
     * @return {?}
     */
    function (count) {
        /** @type {?} */
        var out = '';
        for (var i = 0; i < count; i++) {
            // tslint:disable-next-line:no-bitwise
            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return out;
    };
    return Utils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CloudprintDesignerComponent = /** @class */ (function () {
    // localeid:string
    function CloudprintDesignerComponent(server, formatSrv, notifyService, functionRegister, editsrv, loadSrv) {
        this.server = server;
        this.formatSrv = formatSrv;
        this.notifyService = notifyService;
        this.functionRegister = functionRegister;
        this.editsrv = editsrv;
        this.loadSrv = loadSrv;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        Stimulsoft.Base.StiLicense.key = '6vJhGtLLLz2GNviWmUTrhSqnOItdDwjBylQzQcAOiHmUA7xxS8GDDAme3ObyU+jZAO9YGs0yUwkFhPz4MWHZaEdiyH' +
            'ffzbOBGSAkqiNry5YZGU/0ZeiKWcHEB38tgR/zaXp8v+ktUiBOl5B2Dll4y33a3osXfKmsg7lHgK/JYlcS08G7Nggu' +
            'H8vVnzvNulyD1uv6QdfRDQOP/FfeKHq3M70ZPvUspYpkCzGqP4nJJ5ktST13+f3E90Y0n1BkbAbYCI3JqheM988LYP' +
            '2lmJ5mAzuV5t3ILzfUehp6/HIy8LPbzzVlU22X9I1t2xY6W1qsi/pKaXeAfJ0T5x/CUbywJ9JyKaTMwIUhDqUVIrle' +
            'QbFvNFUrLznXCcd55QNngQjoC6Wx9CZ9ryjdPdp0dMfCC0exZXtQW0IR+lWjD9pdUkYPJWn5eACs0ToahpEvdwlW76' +
            'eL5ufNRT6xYjBqlGQ/9VuV5LD9EROLqHxpucBoNPLl7s8ealNcm5seZjuR1iSiOPcqd05m3ellOoxBzSLWaB/sNMWT' +
            'AOhBIWNv7dPOcq8KuAfwaJCkV3WTbQAhX2XJ';
        this.printEntity.isUseMetaData = true;
        // this.server.printEntity = this.printEntity;
        this.formatSrv.printEntity = this.printEntity;
    }
    /**
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.docTitle = document.title;
        this.initDesigner();
        console.log('加载设计器成功');
    };
    /**
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.printEntity.onExitEvent.emit();
    };
    /**
     * 设置PrintEntity参数
     * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     *
     * 如下代码是cloudprint.service.ts里的代码，在cloudprint.service.ts有新的printEntity，
     *           所以需要调用setPrintEntity来同步
     *           this.designercomponentRef.instance.setPrintEntity(this.printEntity)
     *
     */
    /**
     * 设置PrintEntity参数
     * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     *
     * 如下代码是cloudprint.service.ts里的代码，在cloudprint.service.ts有新的printEntity，
     *           所以需要调用setPrintEntity来同步
     *           this.designercomponentRef.instance.setPrintEntity(this.printEntity)
     *
     * @param {?} entity
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.setPrintEntity = /**
     * 设置PrintEntity参数
     * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     *
     * 如下代码是cloudprint.service.ts里的代码，在cloudprint.service.ts有新的printEntity，
     *           所以需要调用setPrintEntity来同步
     *           this.designercomponentRef.instance.setPrintEntity(this.printEntity)
     *
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        this.printEntity = entity;
        // this.server.printEntity = this.printEntity;
        this.formatSrv.printEntity = this.printEntity;
    };
    /**
     * 设置Designer的options
     * @param options Designer的options对象
     */
    /**
     * 设置Designer的options
     * @private
     * @param {?} options Designer的options对象
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.setOptions = /**
     * 设置Designer的options
     * @private
     * @param {?} options Designer的options对象
     * @return {?}
     */
    function (options) {
        options.toolbar.showAboutButton = false;
        // 文件tab
        // options.toolbar.showFileMenu = false;
        // 文件tab下的按钮
        options.toolbar.showFileMenuAbout = false;
        options.toolbar.showFileMenuClose = false;
        options.toolbar.showFileMenuExit = false;
        options.toolbar.showFileMenuInfo = false;
        options.toolbar.showFileMenuNew = false;
        // options.toolbar.showFileMenuOpen = false;
        options.toolbar.showFileMenuOptions = false;
        options.toolbar.showFileMenuReportSetup = false;
        options.toolbar.showFileMenuSave = false;
        // options.toolbar.showFileMenussSaveAs = false;
        // 预览tab
        // options.toolbar.showPreviewButton = false;
        options.toolbar.showPublishButton = false;
        // 保存按钮
        options.toolbar.showSaveButton = !(this.printEntity.state == 1);
        options.toolbar.showSetupToolboxButton = false;
        // options.appearance.showReportTree = false;
        options.appearance.showTooltipsHelp = false;
        options.appearance.fullScreenMode = this.printEntity.isFullScreen || false;
        // options.appearance.showSaveDialog = false;
        // options.components.showBarCode = false;
        // options.components.showChart = false;
        // options.components.showCheckBox = false;
        // options.components.showClone = false;
        // options.components.showImage = false;
        // options.components.showPanel = false;
        // options.components.showRichText = false;
        // options.components.showShape = false;
        // options.components.showSubReport = false;
        // options.components.showText = false;
        // options.components.showTextInCells = false;
        // options.components.showZipCode = false;
        // options.crossBands.showCrossDataBand = false;
        // options.crossBands.showCrossFooterBand = false;
        // options.crossBands.showCrossGroupFooterBand = false;
        // options.crossBands.showCrossGroupHeaderBand = false;
        // options.crossBands.showCrossHeaderBand = false;
        // options.crossBands.showCrossTab = false;
        // options.bands.showChildBand = false;
        // options.bands.showColumnFooterBand = false;
        // options.bands.showColumnHeaderBand = false;
        // options.bands.showDataBand = false;
        // options.bands.showEmptyBand = false;
        // options.bands.showFooterBand = false;
        // options.bands.showGroupFooterBand = false;
        // options.bands.showGroupHeaderBand = false;
        // options.bands.showHeaderBand = false;
        // options.bands.showHierarchicalBand = false;
        // options.bands.showOverlayBand = false;
        // options.bands.showPageFooterBand = false;
        // options.bands.showPageHeaderBand = false;
        // options.bands.showReportSummaryBand = false;
        // options.bands.showReportTitleBand = false;
        // options.bands.showTable = false;
        options.dictionary.dataSourcesPermissions = Stimulsoft.Designer.StiDesignerPermissions.ModifyView;
        options.dictionary.resourcesPermissions = Stimulsoft.Designer.StiDesignerPermissions.None;
        options.dictionary.dataRelationsPermissions = Stimulsoft.Designer.StiDesignerPermissions.ModifyView;
        options.dictionary.dataColumnsPermissions = Stimulsoft.Designer.StiDesignerPermissions.ModifyView;
    };
    /**
     * 初始化Designer的事件
     */
    /**
     * 初始化Designer的事件
     * @private
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.initEvents = /**
     * 初始化Designer的事件
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        // 保存前
        this.designer.onSaveReport = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var temp = e.report.saveToJsonString();
            /** @type {?} */
            var pages = this.report.pages.list;
            // 保存前事件
            self.printEntity.onSaveReportEvent.emit(temp);
            if (window.parent && window.parent['onSaveReportEvent']) {
                ((/** @type {?} */ (window.parent))).onSaveReportEvent({
                    format: temp,
                });
            }
            // isUseMetaData当个开关吧，外界设置为false，代表外界自己处理保存了
            if (self.printEntity.isUseMetaData) {
                self.printEntity.printFormat.content = temp;
                self.formatSrv.saveWithRes(self.printEntity.printFormat)
                    .then((/**
                 * @param {?} format
                 * @return {?}
                 */
                function (format) {
                    /** @type {?} */
                    var msg = Stimulsoft.Base.Localization.StiLocalization.get('Custom', 'sucSave');
                    self.notifyService.success(msg);
                    self.printEntity.printFormat = format;
                    //回调订阅格式id事件
                    self.printEntity.onGetPrintFormatIdEvent.emit(self.printEntity.printFormat.id);
                    //回调格式保存后事件
                    self.printEntity.onSavedReportEvent.emit({
                        printFormat: self.printEntity.printFormat,
                    });
                    //回调格式保存后事件
                    if (window.parent && window.parent['onSavedReportEvent']) {
                        ((/** @type {?} */ (window.parent))).onSavedReportEvent({
                            saved: true,
                            format: self.printEntity.printFormat,
                        });
                    }
                }))
                    .catch((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var msg = Stimulsoft.Base.Localization.StiLocalization.get('Custom', 'failSave');
                    self.notifyService.error(msg);
                    self.printEntity.onGetPrintFormatIdEvent.emit('');
                    console.log(e);
                }));
            }
        });
        // 预览前
        this.designer.onPreviewReport = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var temp = e.report.saveToJsonString();
            /** @type {?} */
            var ele = document.getElementById('StiDesigner_ViewerReportPanel');
            ele.hidden = true;
            self.loadSrv.show({
                message: 'loading...',
            });
            self.editsrv.printTestData(temp, self.printEntity.data, 'CloudPrint')
                .then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var b = new Blob([data]);
                /** @type {?} */
                var reader = new FileReader();
                reader.readAsArrayBuffer(b);
                reader.onload = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var rendedFormat = (/** @type {?} */ (reader.result));
                    Utils.renderPdfByByte(rendedFormat, ele);
                });
                self.loadSrv.close();
            }));
            return false;
        });
    };
    /**
     * 保存前校验
     * @param pages 报表的page
     */
    /**
     * 保存前校验
     * @private
     * @param {?} pages 报表的page
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.checkBeforeSave = /**
     * 保存前校验
     * @private
     * @param {?} pages 报表的page
     * @return {?}
     */
    function (pages) {
        /** @type {?} */
        var isSave = true;
        for (var i = 0; i < pages.count; i++) {
            if (pages[i].components.count === 0) {
                isSave = false;
                break;
            }
        }
        return isSave;
    };
    /**
     * 初始化Designer
     */
    /**
     * 初始化Designer
     * @private
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.initDesigner = /**
     * 初始化Designer
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return this.editsrv.getEnableFonts()
            .then((/**
         * @param {?} fonts
         * @return {?}
         */
        function (fonts) {
            // var temp = Stimulsoft.Base.StiFontCollection.getFontFamilies().filter(x=>x.name=='SimSun' || x.name=='SimHei' || x.name=='Arial');
            //families 是个只读属性，无法赋值，可直接修改其内部对象的值_families
            // Stimulsoft.System.Drawing.FontFamily.families.clear();
            // Stimulsoft.System.Drawing.FontFamily._families=temp;
            /** @type {?} */
            var fontsAll = [];
            fonts.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var copytemp = new Stimulsoft.System.Drawing.FontFamily(element);
                fontsAll.push(copytemp);
            }));
            Stimulsoft.System.Drawing.FontFamily._families = fontsAll;
            // Set full screen mode for the designer
            /** @type {?} */
            var options = new Stimulsoft.Designer.StiDesignerOptions();
            // Create the report designer with specified options
            _this.designer = new Stimulsoft.Designer.StiDesigner(options, 'StiDesigner', false);
            _this.designer.report = new Stimulsoft.Report.StiReport();
            // 国际化设置
            _this.initLocalizations();
            // 设置一些属性
            _this.setOptions(options);
            // 注册事件
            _this.initEvents();
            // 加载设计器
            return _this.loadDesigner(_this.printEntity.foramtId);
        }))
            .catch((/**
         * @return {?}
         */
        function () {
            _this.notifyService.error("Load Enable Fonts Error");
        }));
    };
    /**
     * 初始化本地化
     */
    /**
     * 初始化本地化
     * @private
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.initLocalizations = /**
     * 初始化本地化
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var loc = this.printEntity.language;
        // 设置本地化语言相关
        Stimulsoft.Base
            .Localization
            .StiLocalization
            .addLocalizationFile('/platform/common/web/stimulsoft/languages/' + loc + '.xml', false, loc);
        Stimulsoft.Base.Localization.StiLocalization.cultureName = loc;
    };
    /**
     * 初始化自定义函数
     */
    /**
     * 初始化自定义函数
     * @private
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.initCustomFunction = /**
     * 初始化自定义函数
     * @private
     * @return {?}
     */
    function () {
        return this.functionRegister.initCustomFunction(this.printEntity.appUrl + Urls.GetCustomJsFunc);
    };
    /**
     * 加载Designer
     * @param formatId 格式id
     */
    /**
     * 加载Designer
     * @private
     * @param {?} formatId 格式id
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.loadDesigner = /**
     * 加载Designer
     * @private
     * @param {?} formatId 格式id
     * @return {?}
     */
    function (formatId) {
        var _this = this;
        // 加载designer的schema
        return this.formatSrv.loadFormat(formatId, 'CloudPrint')
            .then((/**
         * @param {?} format
         * @return {?}
         */
        function (format) {
            _this.designer.report.load(format);
            // 加载数据
            return _this.formatSrv.loadData(_this.printEntity.dataId, 'CloudPrint');
        }))
            .then((/**
         * @param {?} data2
         * @return {?}
         */
        function (data2) {
            // 加载数据
            /** @type {?} */
            var dataSet = new Stimulsoft.System.Data.DataSet('Data');
            console.log('给数据源添加数据');
            dataSet.readJson(data2);
            console.log('清空报表的数据源，以便重新赋值');
            _this.designer.report.dictionary.databases.clear();
            _this.designer.report.regData('Data', 'Data', dataSet);
            // 初始化自定义函数
            return _this.initCustomFunction();
        }))
            .then((/**
         * @return {?}
         */
        function () {
            // 渲染
            _this.designer.renderHtml('designer');
            // 设置渲染后的属性
            _this.setOptionsAfterRend(_this.designer);
            // 修改stimulsoft渲染时设定的工作区的默认高度
            document.getElementById('StiDesigner').style.height = _this.printEntity.designerHeight;
            // 调整大小
            // this.designer.jsObject.ResizeDesigner();
            document.title = _this.docTitle;
        }))
            .catch((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            console.log(e);
        }));
    };
    /**
     * 渲染后需要设置的属性
     * @param designer 当前的Designer对象
     */
    /**
     * 渲染后需要设置的属性
     * @private
     * @param {?} designer 当前的Designer对象
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.setOptionsAfterRend = /**
     * 渲染后需要设置的属性
     * @private
     * @param {?} designer 当前的Designer对象
     * @return {?}
     */
    function (designer) {
        //屏蔽保存按钮的弹框
        designer.jsObject.options.report.properties.reportFile = 'report.mrt';
        designer.jsObject.options.buttons.dictionaryActions.hidden = true;
        designer.jsObject.options.buttons.dictionaryNewItem.hidden = true;
        designer.jsObject.options.buttons.pageToolButton.hidden = true;
        designer.jsObject.options.buttons.insertToolButton.hidden = true;
        // 属性面板的事件按钮
        designer.jsObject.options.buttons.propertiesToolbarEventsTab.hidden = true;
        // 属性面板的事件tab
        // designer.jsObject.options.buttons.propertiesToolbarEventsTab.hidden = true;
        // 属性面板的属性tab
        // designer.jsObject.options.buttons.propertiesToolbarPropertiesTab.hidden = true;
        designer.jsObject.options.buttons.redoButton.hidden = true;
        designer.jsObject.options.buttons.undoButton.hidden = true;
        designer.jsObject.options.buttons.reportCheckerButton.hidden = true;
        designer.jsObject.options.buttons.localizationButton.hidden = true;
        designer.jsObject.options.buttons.resizeDesigner.hidden = true;
        // 默认隐藏workpanel
        designer.jsObject.options.workPanel.changeVisibleState(!1);
        designer.jsObject.options.workPanel.visibleState = !1;
        /** @type {?} */
        var viewer = designer.jsObject.options.viewerContainer.firstChild;
        // viewer.jsObject.controls.menus.saveMenu.items["Html"].style.display = "none";
        // viewer.jsObject.controls.menus.saveMenu.items["separator2"].style.display = "none";
        // var toolbarTable = viewer.jsObject.controls.toolbar.firstChild;
        // viewer.jsObject.controls.toolbar.removeChild(toolbarTable);
        //预览界面的工具栏
        viewer.jsObject.controls.toolbar.style.display = 'none';
        //预览界面的缩放按钮
        viewer.jsObject.controls.buttons.Zoom.style.display = 'none';
        viewer.jsObject.controls.buttons.ZoomOnePage.style.display = 'none';
        viewer.jsObject.controls.buttons.ZoomPageWidth.style.display = 'none';
        // viewer.jsObject.controls.menus.printMenu.items['PrintPdf'].style.display='none'
        // viewer.jsObject.controls.menus.printMenu.items['PrintWithPreview'].style.display='none'
        // viewer.jsObject.controls.menus.printMenu.items['PrintWithoutPreview'].style.display='none'
    };
    /**
     * @private
     * @return {?}
     */
    CloudprintDesignerComponent.prototype.loadSystemFonts = /**
     * @private
     * @return {?}
     */
    function () {
    };
    CloudprintDesignerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-cloudprint-designer',
                    template: "<div style=\"overflow:auto;height: 100%;width: 100%\">\r\n    <div id=\"designer\" style=\"height: 100%;width: 100%\"></div>\r\n</div>\r\n",
                    styles: ["div #StiDesigner{height:100%}"]
                }] }
    ];
    /** @nocollapse */
    CloudprintDesignerComponent.ctorParameters = function () { return [
        { type: CloudprintdesignerService },
        { type: PrintFormatService },
        { type: NotifyService },
        { type: CloudprintFunctionRegister },
        { type: PrintFormatService },
        { type: LoadingService }
    ]; };
    return CloudprintDesignerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 不用了，但是得保留，不然的话别人用了这个npm包的得重新打包
 */
var CloudprintviewerService = /** @class */ (function () {
    // printEntity = new PrintEntity();
    function CloudprintviewerService(http) {
        this.http = http;
    }
    CloudprintviewerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintviewerService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CloudprintviewerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 导出设置
 */
var  /**
 * 导出设置
 */
OutputParam = /** @class */ (function () {
    function OutputParam() {
    }
    return OutputParam;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CloudprintViewerComponent = /** @class */ (function () {
    // private server: CloudprintviewerService,
    function CloudprintViewerComponent(server, formatSrv, notifyService, functionRegister, langservice, loadSrv, elementRef, printSrv) {
        this.server = server;
        this.formatSrv = formatSrv;
        this.notifyService = notifyService;
        this.functionRegister = functionRegister;
        this.langservice = langservice;
        this.loadSrv = loadSrv;
        this.elementRef = elementRef;
        this.printSrv = printSrv;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        Stimulsoft.Base.StiLicense.key = '6vJhGtLLLz2GNviWmUTrhSqnOItdDwjBylQzQcAOiHmUA7xxS8GDDAme3ObyU+jZAO9YGs0yUwkFhPz4MWHZaEdiyH' +
            'ffzbOBGSAkqiNry5YZGU/0ZeiKWcHEB38tgR/zaXp8v+ktUiBOl5B2Dll4y33a3osXfKmsg7lHgK/JYlcS08G7Nggu' +
            'H8vVnzvNulyD1uv6QdfRDQOP/FfeKHq3M70ZPvUspYpkCzGqP4nJJ5ktST13+f3E90Y0n1BkbAbYCI3JqheM988LYP' +
            '2lmJ5mAzuV5t3ILzfUehp6/HIy8LPbzzVlU22X9I1t2xY6W1qsi/pKaXeAfJ0T5x/CUbywJ9JyKaTMwIUhDqUVIrle' +
            'QbFvNFUrLznXCcd55QNngQjoC6Wx9CZ9ryjdPdp0dMfCC0exZXtQW0IR+lWjD9pdUkYPJWn5eACs0ToahpEvdwlW76' +
            'eL5ufNRT6xYjBqlGQ/9VuV5LD9EROLqHxpucBoNPLl7s8ealNcm5seZjuR1iSiOPcqd05m3ellOoxBzSLWaB/sNMWT' +
            'AOhBIWNv7dPOcq8KuAfwaJCkV3WTbQAhX2XJ';
        this.printEntity.isUseMetaData = true;
        this.formatSrv.printEntity = this.printEntity;
    }
    /**
     * @return {?}
     */
    CloudprintViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.docTitle = document.title;
        // 初始化Viewer;
        this.initViewer();
        console.log('组件初始：加载预览器成功');
    };
    /**
     * @return {?}
     */
    CloudprintViewerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.printEntity.onExitEvent.emit();
        console.log('组件销毁');
    };
    /**
     * 设置PrintEntity参数
     * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     *
     * 如下代码是cloudprint.service.ts里的代码，在cloudprint.service.ts有新的printEntity，
     *           所以需要调用setPrintEntity来同步
     *           this.designercomponentRef.instance.setPrintEntity(this.printEntity)
     *
     */
    /**
     * 设置PrintEntity参数
     * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     *
     * 如下代码是cloudprint.service.ts里的代码，在cloudprint.service.ts有新的printEntity，
     *           所以需要调用setPrintEntity来同步
     *           this.designercomponentRef.instance.setPrintEntity(this.printEntity)
     *
     * @param {?} entity
     * @return {?}
     */
    CloudprintViewerComponent.prototype.setPrintEntity = /**
     * 设置PrintEntity参数
     * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     *
     * 如下代码是cloudprint.service.ts里的代码，在cloudprint.service.ts有新的printEntity，
     *           所以需要调用setPrintEntity来同步
     *           this.designercomponentRef.instance.setPrintEntity(this.printEntity)
     *
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        this.printEntity = entity;
        // this.server.printEntity = this.printEntity;
        this.formatSrv.printEntity = this.printEntity;
    };
    /**
     * 初始化Viewer
     */
    /**
     * 初始化Viewer
     * @private
     * @return {?}
     */
    CloudprintViewerComponent.prototype.initViewer = /**
     * 初始化Viewer
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        document.title = this.docTitle;
        this.loadSrv.show({
            message: 'loading...',
        });
        // 如果是后端渲染的合适，则前台直接使用
        /** @type {?} */
        var rendedFormat = this.printEntity.rendedFormat;
        /** @type {?} */
        var ret = this.renderPdf(rendedFormat);
        if (ret && ret.then) {
            ret.then((/**
             * @return {?}
             */
            function () {
                _this.loadSrv.close();
            }));
        }
        else {
            this.loadSrv.close();
        }
    };
    /**
     * @private
     * @param {?} rendedFormat
     * @return {?}
     */
    CloudprintViewerComponent.prototype.renderPdf = /**
     * @private
     * @param {?} rendedFormat
     * @return {?}
     */
    function (rendedFormat) {
        /** @type {?} */
        var self = this;
        if (rendedFormat) { //有渲染的结果则直接展示
            //有渲染的结果则直接展示
            /** @type {?} */
            var ele = document.getElementById('viewer');
            // ele.hidden = true;
            Utils.renderPdfByByte(rendedFormat, ele);
        }
        else { //没有渲染的结果则通过后端渲染后展示
            this.outputParam.prnOutputOps.printJob = false;
            if (this.outputParam.prnSourceOptions.length > 1) {
                if (this.outputParam.isFilter) {
                    return this.formatSrv.printMultiByFilter((/** @type {?} */ (this.outputParam.prnSourceOptions)), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        /** @type {?} */
                        var b = new Blob([data]);
                        /** @type {?} */
                        var reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
                else {
                    return this.formatSrv.printMultiById((/** @type {?} */ (this.outputParam.prnSourceOptions)), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        /** @type {?} */
                        var b = new Blob([data]);
                        /** @type {?} */
                        var reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
            }
            else {
                if (this.outputParam.isFilter) {
                    return this.formatSrv.printSingleByFilter((/** @type {?} */ (this.outputParam.prnSourceOptions[0])), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        /** @type {?} */
                        var b = new Blob([data]);
                        /** @type {?} */
                        var reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
                else {
                    return this.formatSrv.printSingleById((/** @type {?} */ (this.outputParam.prnSourceOptions[0])), this.outputParam.prnOutputOps, null, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        /** @type {?} */
                        var b = new Blob([data]);
                        /** @type {?} */
                        var reader = new FileReader();
                        reader.readAsArrayBuffer(b);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            self.renderPdf((/** @type {?} */ (reader.result)));
                        });
                    }));
                }
            }
        }
    };
    /** 直接打印 */
    /**
     * 直接打印
     * @return {?}
     */
    CloudprintViewerComponent.prototype.printDirect = /**
     * 直接打印
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var ele = document.getElementById('viewer');
        /** @type {?} */
        var iframe = (/** @type {?} */ (ele.firstChild));
        iframe.contentWindow.print();
        /** @type {?} */
        var sourceopslist = this.outputParam.prnSourceOptions;
        /** @type {?} */
        var su = [];
        /** @type {?} */
        var id = [];
        /** @type {?} */
        var billcate = [];
        /** @type {?} */
        var biztype = [];
        /** @type {?} */
        var source = [];
        /** @type {?} */
        var entityfilter = [];
        /** @type {?} */
        var dataid = [];
        /** @type {?} */
        var isfilter = [];
        sourceopslist.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            su.push(x.ServiceUnit);
            id.push(x.FormatId);
            source.push(x.SourceId);
            isfilter.push(_this.outputParam.isFilter);
            if (_this.outputParam.isFilter) {
                entityfilter.push(JSON.stringify(((/** @type {?} */ (x))).EntityFilter));
            }
            else {
                dataid.push(((/** @type {?} */ (x))).DataIds);
            }
            billcate.push(x.billCategoryId);
            biztype.push(x.bizTypeId);
        }));
        /** @type {?} */
        var data = {
            formatid: id,
            sourceid: source,
            entityfilter: entityfilter,
            dataid: dataid,
            isfilter: isfilter,
            su: su,
            billcategory: billcate,
            biztype: biztype
        };
        this.formatSrv.sendPrintEvent(data, "CloudPrint");
    };
    /** 盒子后台打印 */
    /**
     * 盒子后台打印
     * @return {?}
     */
    CloudprintViewerComponent.prototype.printBox = /**
     * 盒子后台打印
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        self.outputParam.prnOutputOps.printJob = true;
        if (self.outputParam.prnSourceOptions.length > 1) {
            if (self.outputParam.isFilter) {
                return self.printSrv.printMultiByFilter4Job((/** @type {?} */ (self.outputParam.prnSourceOptions)), self.outputParam.prnOutputOps);
            }
            else {
                return self.printSrv.printMultiById4Job((/** @type {?} */ (self.outputParam.prnSourceOptions)), self.outputParam.prnOutputOps);
            }
        }
        else {
            if (self.outputParam.isFilter) {
                return self.printSrv.printSingleByFilter4Job((/** @type {?} */ (self.outputParam.prnSourceOptions[0])), self.outputParam.prnOutputOps);
            }
            else {
                return self.printSrv.printSingleById4Job((/** @type {?} */ (self.outputParam.prnSourceOptions[0])), self.outputParam.prnOutputOps);
            }
        }
    };
    CloudprintViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-cloudprint-viewer',
                    template: "<!-- <div class=\"f-page f-page-navigate f-page-is-grid-grid\">\r\n    <div class=\"f-page-header\">\r\n        <nav class=\"f-page-header-base\">    \r\n            <div class=\"f-title\">\r\n                <span class=\"f-title-icon f-text-orna-bill\">\r\n                    <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n                </span>\r\n                <h4 class=\"farris-form-title mr-auto\">\u6253\u5370\u9884\u89C8</h4>\r\n            </div>\r\n            <f-response-toolbar\r\n                class=\"col-7 f-toolbar\"\r\n                [datas]=\"toolbarData\"\r\n                (rtClickEvent)=\"responseToolbarClick($event)\">\r\n            </f-response-toolbar>\r\n        </nav>\r\n    </div>\r\n    \r\n    <section class=\"f-page-main\">\r\n        <div style=\"overflow:auto;height: 100%;width: 100%\">\r\n            <div id=\"viewer\"  style=\"height:100%\"></div>\r\n        </div>\r\n    </section>    \r\n</div> -->\r\n\r\n<div class=\"f-page f-page-is-managelist\">\r\n    <div class=\"f-page-main\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist\" [showHeader]=\"false\">\r\n        <div class=\"f-section-header\" style=\"padding: 0px;margin: 0px\">\r\n          <div class=\"f-title\">\r\n            <h5 class=\"f-title__title\">{{'printview' | locale}}</h5>\r\n          </div>\r\n          <div class=\"f-toolbar\">\r\n            <div id=\"operate\" style=\"text-align: right;padding: 10px;min-width: 300px;\">\r\n                <farris-button style=\"padding: 3px\" (click)=\"printDirect()\">\r\n                    <span>{{'PrintWithoutPreview' | locale}}</span>\r\n                </farris-button>\r\n                <farris-button *ngIf=\"isRemotePrint\" [type]=\"'secondary'\" style=\"padding: 3px\" (click)=\"printBox()\">\r\n                    <span>{{'PrintWithBox' | locale}}</span>\r\n                </farris-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <div class=\"f-section-content\">\r\n          <div class=\"f-component-grid\">\r\n            <div style=\"overflow:auto;height: 100%;width: 100%\">\r\n                <div id=\"viewer\"  style=\"height:100%\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CloudprintViewerComponent.ctorParameters = function () { return [
        { type: CloudprintviewerService },
        { type: PrintFormatService },
        { type: NotifyService },
        { type: CloudprintFunctionRegister },
        { type: LanguageService },
        { type: LoadingService },
        { type: ElementRef },
        { type: CloudprintService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return CloudprintService; })),] }] }
    ]; };
    CloudprintViewerComponent.propDecorators = {
        outputParam: [{ type: Input }],
        isRemotePrint: [{ type: Input }]
    };
    return CloudprintViewerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var CmpType = {
    Designer: 1,
    Viewer: 2,
};
CmpType[CmpType.Designer] = 'Designer';
CmpType[CmpType.Viewer] = 'Viewer';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var SourceType = {
    BE: 0,
    VO: 1,
    BO: 2,
    CO: 3,
};
SourceType[SourceType.BE] = 'BE';
SourceType[SourceType.VO] = 'VO';
SourceType[SourceType.BO] = 'BO';
SourceType[SourceType.CO] = 'CO';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormatlistComponent = /** @class */ (function () {
    function FormatlistComponent(notifyService, localeid) {
        this.notifyService = notifyService;
        this.print = new EventEmitter();
        // dlg:BsModalRef;
        this.columns = [];
        debugger;
        // localeid = localStorage.getItem("languageCode") || localeid;
        // this.localepip = new LocalLangPipe(localeid);
    }
    /**
     * @return {?}
     */
    FormatlistComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columns = [
            { field: 'code', title: this.localepip.transform('formatcode') },
            { field: 'name', title: this.localepip.transform('formatname') },
        ];
    };
    /**
     * @param {?} rowdata
     * @return {?}
     */
    FormatlistComponent.prototype.selectChange = /**
     * @param {?} rowdata
     * @return {?}
     */
    function (rowdata) {
        this.formatId = rowdata.id;
    };
    /**
     * @return {?}
     */
    FormatlistComponent.prototype.printJob = /**
     * @return {?}
     */
    function () {
        if (this.checkBeforePrint()) {
            this.print.emit({
                id: this.formatId
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormatlistComponent.prototype.checkBeforePrint = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.formatId) {
            this.notifyService.warning(this.localepip.transform('selectformat'));
            return false;
        }
        else {
            return true;
        }
    };
    FormatlistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-formatlist',
                    template: "\r\n<div class=\"f-page f-page-navigate f-page-is-grid-card\">\r\n    <section class=\"f-page-main\">\r\n        <farris-section class=\"f-section-grid f-section-in-managelist\" [showHeader]=\"false\">\r\n    \r\n            <div class=\"f-section-content\">\r\n                <div class=\"f-component-grid\">\r\n                <farris-datagrid\r\n                    [fit]=\"true\" \r\n                    [pagination]=\"false\"\r\n                    [virtualized]=\"false\"\r\n                    [columns]=\"columns\"\r\n                    [pageSize]=\"50\"\r\n                    [showBorder]=\"false\"\r\n                    [striped]=\"false\"\r\n                    [data]=\"formats\"\r\n                    [fitColumns]=\"true\"\r\n                    [nowrap]=\"false\"\r\n                    (selectChanged)=\"selectChange($event)\">\r\n                </farris-datagrid>\r\n                </div>\r\n            </div>\r\n        </farris-section>\r\n    </section>    \r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormatlistComponent.ctorParameters = function () { return [
        { type: NotifyService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    FormatlistComponent.propDecorators = {
        formats: [{ type: Input }]
    };
    return FormatlistComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var QueryType = {
    BusinessEntity: 'BusinessEntity',
    ViewModel: 'ViewModel',
    InternalService: 'InternalService',
    CunstomComponent: 'CunstomComponent',
    CommonStructure: 'CommonStructure',
    PrintReport: 'PrintReport',
    BusinessObject: 'BusinessObject',
    Unknown: 'Unknown',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PrintType = {
    /**
     * 表单打印
     */
    Form: 'Form',
    /**
     * 查询打印
     */
    Query: 'Query',
    /**
     * 账页打印
     */
    LedgerPaper: 'LedgerPaper',
    /**
     * 附件打印
     */
    Attachment: 'Attachment',
    Unknown: 'Unknown',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PrintSetting = /** @class */ (function () {
    function PrintSetting() {
    }
    return PrintSetting;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PrintOritation = {
    Portrait: 'Portrait',
    Landscape: 'Landscape' //横向
    ,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PaperKind = [
    {
        key: 'A2',
        value: 'A2'
    },
    {
        key: 'A3',
        value: 'A3'
    },
    // {
    //     key:'A3Extra',
    //     value:'A3Extra'
    // },
    // {
    //     key:'A3ExtraTransverse',
    //     value:'A3ExtraTransverse'
    // },
    // {
    //     key:'A3Transverse',
    //     value:'A3Transverse'
    // },
    {
        key: 'A4',
        value: 'A4'
    },
    {
        key: 'A5',
        value: 'A5'
    },
    {
        key: 'B4',
        value: 'B4'
    },
    {
        key: 'B5',
        value: 'B5'
    },
    {
        key: 'Legal',
        value: 'Legal'
    },
    {
        key: 'Letter',
        value: 'Letter'
    },
    {
        key: 'Statement',
        value: 'Statement'
    },
    {
        key: 'Tabloid',
        value: 'Tabloid'
    }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormatlistjobComponent = /** @class */ (function () {
    function FormatlistjobComponent(notifyService, localeid) {
        this.notifyService = notifyService;
        this.print = new EventEmitter();
        // dlg:BsModalRef;
        this.paperlist = [];
        this.layoutlist = [];
        this.columns = [];
        //是否展示格式列表
        this.isShowFormat = true;
        //打印类型0:表单打印，1:附件打印
        this.printType = 0;
        this.height = 0; //默认为0，根据纸张大小来
        //默认为0，根据纸张大小来
        this.width = 0; //默认为0,根据纸张大小来
        //默认为0,根据纸张大小来
        this.top = 0;
        this.bottom = 0;
        this.left = 0;
        this.right = 0;
        this.copy = 1;
        this.paperkind = 'A4';
        this.layout = 'Portrait';
        this.printboxid = '';
        //自定义纸张
        this.isCustomPaper = false;
        //自定义页边距
        this.isCustomMargin = false;
        this.custompaper = '自定义纸张:';
        this.custommargin = '自定义页边距:';
        debugger;
        // localeid = localStorage.getItem("languageCode") || localeid;
        // this.localepip = new LocalLangPipe(localeid);
    }
    /**
     * @return {?}
     */
    FormatlistjobComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        debugger;
        this.custompaper = this.localepip.transform('custompaper');
        this.custommargin = this.localepip.transform('custommargin');
        this.columns = [
            { field: 'code', title: this.localepip.transform('formatcode') },
            { field: 'name', title: this.localepip.transform('formatname') },
        ];
        //纸张
        this.paperlist = PaperKind;
        //布局
        this.layoutlist = [
            {
                key: 'Portrait',
                value: this.localepip.transform('portrait')
            },
            {
                key: 'Landscape',
                value: this.localepip.transform('landscape')
            }
        ];
    };
    /**
     * @param {?} rowdata
     * @return {?}
     */
    FormatlistjobComponent.prototype.printerSelectChange = /**
     * @param {?} rowdata
     * @return {?}
     */
    function (rowdata) {
        this.printboxid = rowdata.data.boxId;
    };
    /**
     * @param {?} rowdata
     * @return {?}
     */
    FormatlistjobComponent.prototype.selectChange = /**
     * @param {?} rowdata
     * @return {?}
     */
    function (rowdata) {
        this.formatId = rowdata.id;
    };
    /**
     * @return {?}
     */
    FormatlistjobComponent.prototype.printJob = /**
     * @return {?}
     */
    function () {
        if (this.checkBeforePrint()) {
            /** @type {?} */
            var ps = new PrintSetting();
            ps.bottom = this.bottom;
            ps.top = this.top;
            ps.left = this.left;
            ps.right = this.right;
            ps.height = this.height;
            ps.width = this.width;
            ps.copys = this.copy;
            ps.paperName = this.paperkind;
            if (this.isCustomPaper) {
                ps.centerPrint = false;
            }
            else {
                ps.centerPrint = true;
            }
            if (PrintOritation.Landscape.toString() == this.layout) {
                ps.printOritation = PrintOritation.Landscape;
            }
            else {
                ps.printOritation = PrintOritation.Portrait;
            }
            this.print.emit({
                id: this.formatId,
                boxId: this.printboxid,
                printter: this.printter,
                printSetting: ps
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormatlistjobComponent.prototype.checkBeforePrint = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.formatId && this.printType != 1) {
            this.notifyService.warning(this.localepip.transform('selectformat'));
            return false;
        }
        else if (!this.printter) {
            this.notifyService.warning(this.localepip.transform('selectprinter'));
            return false;
        }
        else if (!this.layout) {
            this.notifyService.warning(this.localepip.transform('selectlayout'));
            return false;
        }
        else if (!this.paperkind && this.height == 0 && this.width == 0) {
            this.notifyService.warning(this.localepip.transform('nopapersize'));
            return false;
        }
        else if (!this.printboxid) {
            this.notifyService.warning(this.localepip.transform('noagent'));
            return false;
        }
        else {
            return true;
        }
    };
    FormatlistjobComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-formatlistjob',
                    template: "\r\n<div class=\"f-page f-page-navigate f-page-is-grid-card\">\r\n  <section class=\"f-page-main\">\r\n    <farris-splitter class=\"f-page-content\">\r\n        <farris-splitter-pane *ngIf=\"isShowFormat\"  class=\"f-col-w5 f-page-content-nav\"\r\n        [ngResizable]=\"true\" \r\n        [rzHandles]=\"'e'\">\r\n            <farris-section class=\"f-section-grid f-section-in-managelist\" [showHeader]=\"false\">\r\n              <div class=\"f-section-header\">\r\n                <div class=\"f-title\">\r\n                  <h5 class=\"f-title__title\">{{'printformat' | locale}}</h5>\r\n                </div>\r\n              </div>\r\n        \r\n              <div class=\"f-section-content\">\r\n                <div class=\"f-component-grid\">\r\n                  <farris-datagrid\r\n                      [fit]=\"true\" \r\n                      [pagination]=\"false\"\r\n                      [virtualized]=\"false\"\r\n                      [columns]=\"columns\"\r\n                      [pageSize]=\"50\"\r\n                      [showBorder]=\"false\"\r\n                      [fitColumns]=\"true\"\r\n                      [striped]=\"false\"\r\n                      [data]=\"formats\"\r\n                      [nowrap]=\"false\"\r\n                      (selectChanged)=\"selectChange($event)\">\r\n                  </farris-datagrid>\r\n                </div>\r\n              </div>\r\n            </farris-section>\r\n        </farris-splitter-pane>\r\n\r\n        <farris-splitter-pane class=\"f-page-content-main\">\r\n            <farris-section class=\"f-section-grid f-section-in-managelist farris-form-controls-inline\" [showHeader]=\"false\">\r\n              <div class=\"f-section-header\">\r\n                <div class=\"f-title\">\r\n                  <h5 class=\"f-title__title\">{{'printset' | locale}}</h5>\r\n                </div>\r\n              </div>\r\n        \r\n              <fieldset class=\"f-section-formgroup\">\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                  <div class=\"col-12\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-info text-danger\">*</span>\r\n                            <span class=\"farris-label-text\">{{'printer' | locale}}</span>\r\n                          </label>\r\n                          <div class=\"farris-input-wrap\">\r\n                            <farris-combo-list \r\n                              [(ngModel)]=\"printter\"\r\n                              [idField]=\"'name'\"\r\n                              [textField]=\"'description'\"\r\n                              [data]=\"boxlist\"\r\n                              [editable]=\"false\"\r\n                              (selectChange)=\"printerSelectChange($event)\">\r\n                            </farris-combo-list>\r\n                          </div>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-text\">{{'paper' | locale}}</span>\r\n                          </label>\r\n                          <div class=\"farris-input-wrap\">\r\n                            <farris-combo-list \r\n                              [disabled]=\"isCustomPaper\"\r\n                              [(ngModel)]=\"paperkind\"\r\n                              [idField]=\"'key'\"\r\n                              [textField]=\"'value'\"\r\n                              [data]=\"paperlist\"\r\n                              [editable]=\"false\">\r\n                            </farris-combo-list>\r\n                          </div>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-text\">{{'paperway' | locale}}</span>\r\n                          </label>\r\n                          <div class=\"farris-input-wrap\">\r\n                            <farris-combo-list \r\n                              [(ngModel)]=\"layout\"\r\n                              [idField]=\"'key'\"\r\n                              [textField]=\"'value'\"\r\n                              [data]=\"layoutlist\"\r\n                              [editable]=\"false\">\r\n                            </farris-combo-list>\r\n                          </div>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12\">\r\n                    <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{'copys' | locale}}</span>\r\n                        </label>\r\n                        <farris-number-spinner style=\"width: 100%;\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"copy\"></farris-number-spinner>\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12\">\r\n                    <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <farris-checkboxgroup style=\"font-weight: bold;\" [(ngModel)]=\"isCustomPaper\"\r\n                          [data]=\"[{value:true,name:custompaper}]\">\r\n                      </farris-checkboxgroup>\r\n                      <!-- <label class=\"col-form-label\">\r\n                        <span style=\"font-weight: bold;\" class=\"farris-label-text\">\u81EA\u5B9A\u4E49\u7EB8\u5F20:</span>\r\n                      </label> -->\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12 col-md-6\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-text\">{{'length' | locale}}</span>\r\n                          </label>\r\n                          <farris-number-spinner [disabled]=\"!isCustomPaper\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"height\"></farris-number-spinner>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12 col-md-6\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-text\">{{'width' | locale}}</span>\r\n                          </label>\r\n                          <farris-number-spinner [disabled]=\"!isCustomPaper\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"width\"></farris-number-spinner>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12\">\r\n                    <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <farris-checkboxgroup style=\"font-weight: bold;\" [(ngModel)]=\"isCustomMargin\"\r\n                          [data]=\"[{value:true,name:custommargin}]\">\r\n                      </farris-checkboxgroup>\r\n                        <!-- <label class=\"col-form-label\">\r\n                          <span style=\"font-weight: bold;\" class=\"farris-label-text\">\u9875\u8FB9\u8DDD:</span>\r\n                        </label> -->\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12 col-md-6\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label for=\"hpinput01\" class=\"col-form-label\">\r\n                            <span class=\"farris-label-text\">{{'top' | locale}}</span>\r\n                          </label>\r\n                            <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"top\"></farris-number-spinner>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12 col-md-6\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-text\">{{'bottom' | locale}}</span>\r\n                          </label>\r\n                          <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"bottom\"></farris-number-spinner>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12 col-md-6\">\r\n                      <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                          <label class=\"col-form-label\">\r\n                            <span class=\"farris-label-text\">{{'left' | locale}}</span>\r\n                          </label>\r\n                          <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"left\"></farris-number-spinner>\r\n                      </div>\r\n                      </div>\r\n                  </div>\r\n                  <div *ngIf=\"printType!=1\" class=\"col-12 col-md-6\">\r\n                    <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{'right' | locale}}</span>\r\n                        </label>\r\n                        <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"right\"></farris-number-spinner>\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </fieldset>\r\n            </farris-section>\r\n        </farris-splitter-pane>\r\n\r\n    </farris-splitter>\r\n\r\n    <!-- <farris-section *ngIf=\"!isShowFormat\" class=\"f-section-grid f-section-in-managelist farris-form-controls-inline\" [showHeader]=\"false\">\r\n      <div class=\"f-section-header\">\r\n        <div class=\"f-title\">\r\n          <h5 class=\"f-title__title\">{{'printset' | locale}}</h5>\r\n        </div>\r\n      </div>\r\n\r\n      <fieldset class=\"f-section-formgroup\">\r\n        <div class=\"f-section-formgroup-inputs\">\r\n          <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">{{'printer' | locale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-combo-list \r\n                      [(ngModel)]=\"printter\"\r\n                      [idField]=\"'name'\"\r\n                      [textField]=\"'description'\"\r\n                      [data]=\"boxlist\"\r\n                      [editable]=\"false\"\r\n                      (selectChange)=\"printerSelectChange($event)\">\r\n                    </farris-combo-list>\r\n                  </div>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'paper' | locale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-combo-list \r\n                      [disabled]=\"isCustomPaper\"\r\n                      [(ngModel)]=\"paperkind\"\r\n                      [idField]=\"'key'\"\r\n                      [textField]=\"'value'\"\r\n                      [data]=\"paperlist\"\r\n                      [editable]=\"false\">\r\n                    </farris-combo-list>\r\n                  </div>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'paperway' | locale}}</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-combo-list \r\n                      [(ngModel)]=\"layout\"\r\n                      [idField]=\"'key'\"\r\n                      [textField]=\"'value'\"\r\n                      [data]=\"layoutlist\"\r\n                      [editable]=\"false\">\r\n                    </farris-combo-list>\r\n                  </div>\r\n              </div>\r\n              </div>\r\n          </div>\r\n\r\n          <div class=\"col-12\">\r\n            <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'copys' | locale}}</span>\r\n                </label>\r\n                <farris-number-spinner style=\"width: 100%;\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"copy\"></farris-number-spinner>\r\n            </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <farris-checkboxgroup style=\"font-weight: bold;\" [(ngModel)]=\"isCustomPaper\"\r\n                    [data]=\"[{value:'1',name:custompaper}]\">\r\n                </farris-checkboxgroup>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12 col-md-6\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'length' | locale}}</span>\r\n                  </label>\r\n                  <farris-number-spinner [disabled]=\"!isCustomPaper\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"height\"></farris-number-spinner>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12 col-md-6\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'width' | locale}}</span>\r\n                  </label>\r\n                  <farris-number-spinner [disabled]=\"!isCustomPaper\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"width\"></farris-number-spinner>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12\">\r\n            <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group\">\r\n              <farris-checkboxgroup style=\"font-weight: bold;\" [(ngModel)]=\"isCustomMargin\"\r\n                  [data]=\"[{value:'1',name:custommargin}]\">\r\n              </farris-checkboxgroup>\r\n            </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 col-md-6\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label for=\"hpinput01\" class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'top' | locale}}</span>\r\n                  </label>\r\n                    <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"top\"></farris-number-spinner>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12 col-md-6\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'bottom' | locale}}</span>\r\n                  </label>\r\n                  <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"bottom\"></farris-number-spinner>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12 col-md-6\">\r\n              <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">{{'left' | locale}}</span>\r\n                  </label>\r\n                  <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"left\"></farris-number-spinner>\r\n              </div>\r\n              </div>\r\n          </div>\r\n          <div class=\"col-12 col-md-6\">\r\n            <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{'right' | locale}}</span>\r\n                </label>\r\n                <farris-number-spinner [disabled]=\"!isCustomMargin\" [precision]=\"0\" [min]=\"1\" [(ngModel)]=\"right\"></farris-number-spinner>\r\n            </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </fieldset>\r\n    </farris-section> -->\r\n  </section>\r\n</div>\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormatlistjobComponent.ctorParameters = function () { return [
        { type: NotifyService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    FormatlistjobComponent.propDecorators = {
        formats: [{ type: Input }],
        boxlist: [{ type: Input }]
    };
    return FormatlistjobComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LANG_RESOURCES = {
    'zh-CHS': {
        'printview': '打印预览',
        'printformat': '打印格式',
        'printdesigner': '打印设计器',
        'printset': '打印配置',
        'printer': '打印机',
        'print': '打印',
        'cancel': '取消',
        'sendprintjob': '已成功发送打印任务',
        'appurlerror': '未配置正确的appUrl',
        'formatcode': '格式编号',
        'formatname': '格式名称',
        'portrait': '纵向',
        'landscape': '横向',
        'selectprinter': '请选择打印机',
        'selectformat': '请选择打印格式',
        'selectlayout': '请选择布局',
        'noagent': '打印机对应的打印代理为空,后续打印将无法定位打印机',
        'nopapersize': '纸张和自定义大小不可同时为空',
        'paper': '纸张',
        'paperway': '纸张方向',
        'copys': '打印份数',
        'length': '长(厘米)',
        'width': '宽(厘米)',
        'top': '上(厘米)',
        'bottom': '下(厘米)',
        'left': '左(厘米)',
        'right': '右(厘米)',
        'custompaper': '自定义纸张:',
        'custommargin': '自定义页边距:',
        'PrintWithoutPreview': '直接打印',
        'PrintWithBox': '远程打印',
    },
    'en-US': {
        'printview': 'Print View',
        'printformat': 'Print Format',
        'printdesigner': 'Print Designer',
        'printset': 'Print Setting',
        'print': 'Print',
        'cancel': 'Cancel',
        'printer': 'Printer',
        'sendprintjob': 'Send Print Job Success',
        'appurlerror': 'AppUrl Error',
        'formatcode': 'Format Code',
        'formatname': 'Format Name',
        'portrait': 'Portrait',
        'landscape': 'Landscape',
        'selectprinter': 'Please Select Printer',
        'selectformat': 'Please Select Format',
        'selectlayout': 'Please Select Layout',
        'noagent': 'Agent Is Empty,It May Can Not Locate The Printer',
        'nopapersize': 'Paper Size Is Not Allowed Empty',
        'paper': 'Paper',
        'paperway': 'Paper Direction',
        'copys': 'Copy',
        'length': 'Length(centimetre)',
        'width': 'Width(centimetre)',
        'top': 'Top(centimetre)',
        'bottom': 'Bottom(centimetre)',
        'left': 'Left(centimetre)',
        'right': 'Right(centimetre)',
        'custompaper': 'Custom Paper:',
        'custommargin': 'Custom Margin:',
        'PrintWithoutPreview': 'Direct Print',
        'PrintWithBox': 'Remote Print',
    },
    'en': {
        'printview': 'Print View',
        'printformat': 'Print Format',
        'printdesigner': 'Print Designer',
        'printset': 'Print Setting',
        'print': 'Print',
        'cancel': 'Cancel',
        'printer': 'Printer',
        'sendprintjob': 'Send Print Job Success',
        'appurlerror': 'AppUrl Error',
        'formatcode': 'Format Code',
        'formatname': 'Format Name',
        'portrait': 'Portrait',
        'landscape': 'Landscape',
        'selectprinter': 'Please Select Printer',
        'selectformat': 'Please Select Format',
        'selectlayout': 'Please Select Layout',
        'noagent': 'Agent Is Empty,It May Can Not Locate The Printer',
        'nopapersize': 'Paper Size Is Not Allowed Empty',
        'paper': 'Paper',
        'paperway': 'Paper Direction',
        'copys': 'Copy',
        'length': 'Length(centimetre)',
        'width': 'Width(centimetre)',
        'top': 'Top(centimetre)',
        'bottom': 'Bottom(centimetre)',
        'left': 'Left(centimetre)',
        'right': 'Right(centimetre)',
        'custompaper': 'Custom Paper:',
        'custommargin': 'Custom Margin:',
        'PrintWithoutPreview': 'Direct Print',
        'PrintWithBox': 'Remote Print',
    },
    'zh-CHT': {
        'printview': '打印預覽',
        'printformat': '打印格式',
        'printdesigner': '打印設計器',
        'printset': '打印配置',
        'printer': '打印機',
        'print': '打印',
        'cancel': '取消',
        'sendprintjob': '已成功發送打印任務',
        'appurlerror': '未配置正確的appUrl',
        'formatcode': '格式編號',
        'formatname': '格式名稱',
        'portrait': '縱向',
        'landscape': '橫向',
        'selectprinter': '請選擇打印機',
        'selectformat': '請選擇打印格式',
        'selectlayout': '請選擇佈局',
        'noagent': '打印機對應的打印代理為空,後續打印將無法定位打印機',
        'nopapersize': '紙張和自定義大小不可同時為空',
        'paper': '紙張',
        'paperway': '紙張方向',
        'copys': '打印份數',
        'length': '長(厘米)',
        'width': '寬(厘米)',
        'top': '上(厘米)',
        'bottom': '下(厘米)',
        'left': '左(厘米)',
        'right': '右(厘米)',
        'custompaper': '自定義紙張:',
        'custommargin': '自定義頁邊距:',
        'PrintWithoutPreview': '直接打印',
        'PrintWithBox': '遠程打印',
    },
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LocalLangPipe = /** @class */ (function () {
    function LocalLangPipe(localeId) {
        this.defaultLang = "zh-CHS";
        this.langCode = localStorage.getItem("languageCode") || localeId || this.defaultLang;
        this.lang = LANG_RESOURCES[this.langCode] || LANG_RESOURCES[this.defaultLang];
    }
    /**
     * @param {?} name
     * @return {?}
     */
    LocalLangPipe.prototype.transform = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.lang[name] || name;
    };
    LocalLangPipe.decorators = [
        { type: Pipe, args: [{ name: 'locale' },] }
    ];
    /** @nocollapse */
    LocalLangPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return LocalLangPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CloudprintService = /** @class */ (function () {
    function CloudprintService(formatSrv, resolver, designerSrv, viewerSrv, injector, applicationRef, notifyService, appService, windowService, modalService) {
        this.formatSrv = formatSrv;
        this.resolver = resolver;
        this.designerSrv = designerSrv;
        this.viewerSrv = viewerSrv;
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.notifyService = notifyService;
        this.appService = appService;
        this.windowService = windowService;
        this.modalService = modalService;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        //#region 格式选择列表相关接口
        this.windowRef = undefined;
        // 设置printEntity的默认值
        this.printEntity.appUrl = Urls.CloudPrintBaseUrl;
        this.printEntity.isUseMetaData = true;
        this.printEntity.language = localStorage.getItem("languageCode") || 'zh-CHS';
        // 将printEntity设置到designer service上（不设置，后面调用服务会发现服务的printEntity是空的）
        // this.designerSrv.printEntity = this.printEntity;
        // 将printEntity设置到viewer service上（不设置，后面调用服务会发现服务的printEntity是空的）
        // this.viewerSrv.printEntity = this.printEntity;
        this.formatSrv.printEntity = this.printEntity;
        if (this.injector) {
            this.modalService = this.injector.get(BsModalService);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localpipe = new LocalLangPipe(this.localeid);
        }
    }
    Object.defineProperty(CloudprintService.prototype, "setPrintEntity", {
        /**
         * 设置PrintEntity参数
         * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         */
        set: /**
         * 设置PrintEntity参数
         * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            this.printEntity = entity;
            // this.designerSrv.printEntity = this.printEntity;
            // this.viewerSrv.printEntity = this.printEntity;
            this.formatSrv.printEntity = this.printEntity;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 运行时打印时根据维度过滤弹出打印格式选择列表
     * @param dataSourceId 数据源Id
     * @param filter 是否过滤条件
     * @param beOptions beOptions
     * @param options 输出options
     * @param ele 指定的element元素
     */
    /**
     * 运行时打印时根据维度过滤弹出打印格式选择列表
     * @private
     * @param {?} beOptions beOptions
     * @param {?} options 输出options
     * @param {?} ele 指定的element元素
     * @param {?} filter 是否过滤条件
     * @return {?}
     */
    CloudprintService.prototype.openFormatListByDimension = /**
     * 运行时打印时根据维度过滤弹出打印格式选择列表
     * @private
     * @param {?} beOptions beOptions
     * @param {?} options 输出options
     * @param {?} ele 指定的element元素
     * @param {?} filter 是否过滤条件
     * @return {?}
     */
    function (beOptions, options, ele, filter) {
        var _this = this;
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var dataSourceId = beOptions.SourceId;
        /** @type {?} */
        var billCategoryId = beOptions.billCategoryId;
        return this.formatSrv.getPrintFormatByDataSrouceAndDimension(billCategoryId, dataSourceId, ((/** @type {?} */ (beOptions))).FirstDimensionVal, ((/** @type {?} */ (beOptions))).SecondDimensionVal).then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var format = (res != null && res.length != undefined) ? res : [];
            //只有一条打印格式，直接输出预览
            if (format.length === 1) {
                return that.outputBySingleSelectionFormat({
                    'id': format[0].id,
                    'isFilter': filter,
                    'beoptions': Object.assign({}, beOptions),
                    'options': options,
                    'isJob': false,
                    'printerName': '',
                    'boxId': '',
                    'printSetting': null,
                    'ele': ele
                });
            }
            /** @type {?} */
            var factory = that.resolver.resolveComponentFactory(FormatlistComponent);
            /** @type {?} */
            var printsetting = factory.create(that.injector);
            printsetting.instance.formats = __spread(format);
            printsetting.instance.localepip = that.localpipe;
            /** @type {?} */
            var dlg = _this.modalService.show(printsetting, {
                title: _this.localpipe.transform('printformat'),
                width: 400,
                height: 500,
                showButtons: true,
                showMaxButton: false,
                buttons: [
                    { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            printsetting.instance.printJob();
                        }) },
                    { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            dlg.close();
                        }) }
                ],
            });
            // printsetting.instance.dlg = dlg;
            //订阅了弹出的格式选择列表的关闭事件
            printsetting.instance.print.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                dlg.close();
                return that.outputBySingleSelectionFormat({
                    'id': data.id,
                    'isFilter': filter,
                    'beoptions': Object.assign({}, beOptions),
                    'options': options,
                    'isJob': false,
                    'printerName': '',
                    'boxId': '',
                    'printSetting': null,
                    'ele': ele
                });
            }));
        }));
    };
    /**
     * 后台打印任务的格式选择和打印配置列表
     */
    /**
     * 后台打印任务的格式选择和打印配置列表
     * @private
     * @param {?} beOptions
     * @param {?} options
     * @param {?} filter
     * @param {?} isMulti
     * @return {?}
     */
    CloudprintService.prototype.openFormatListByDimension4Job = /**
     * 后台打印任务的格式选择和打印配置列表
     * @private
     * @param {?} beOptions
     * @param {?} options
     * @param {?} filter
     * @param {?} isMulti
     * @return {?}
     */
    function (beOptions, options, filter, isMulti) {
        var _this = this;
        /** @type {?} */
        var that = this;
        if (isMulti) { //批量打印
            return this.formatSrv.getPrintDevice().then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var device = data || [];
                /** @type {?} */
                var ids = '';
                beOptions.forEach((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return ids += x.FormatId + ','; }));
                /** @type {?} */
                var factory = that.resolver.resolveComponentFactory(FormatlistjobComponent);
                /** @type {?} */
                var printsetting = factory.create(that.injector);
                printsetting.instance.boxlist = device;
                printsetting.instance.formatId = ids.length > 0 ? ids.substr(0, ids.length - 1) : ids;
                printsetting.instance.isShowFormat = false;
                printsetting.instance.localepip = that.localpipe;
                /** @type {?} */
                var dlg = _this.modalService.show(printsetting, {
                    title: _this.localpipe.transform('printset'),
                    width: 800,
                    height: 500,
                    showButtons: true,
                    showMaxButton: false,
                    buttons: [
                        { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                printsetting.instance.printJob();
                            }) },
                        { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                dlg.close();
                            }) }
                    ],
                });
                //订阅了弹出的格式选择列表的关闭事件
                printsetting.instance.print.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    dlg.close();
                    return that.outputByMultiSelectionFormat({
                        'isFilter': filter,
                        'beoptions': __spread(beOptions),
                        'options': Object.assign({}, options),
                        'isJob': true,
                        'printerName': data.printter,
                        'boxId': data.boxId,
                        'printSetting': data.printSetting,
                        'ele': null
                    });
                }));
            }));
        }
        else {
            /** @type {?} */
            var billCategoryId = beOptions[0].billCategoryId;
            /** @type {?} */
            var dataSourceId = beOptions[0].SourceId;
            return this.formatSrv.getPrintFormatAndDevice(billCategoryId, dataSourceId, ((/** @type {?} */ (beOptions))).FirstDimensionVal, ((/** @type {?} */ (beOptions))).SecondDimensionVal).then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var format = res.format || [];
                /** @type {?} */
                var device = res.device || [];
                //只有一条打印格式，则不用再选择格式
                if (format.length === 1) {
                    beOptions[0].FormatId = format[0].id;
                }
                /** @type {?} */
                var factory = that.resolver.resolveComponentFactory(FormatlistjobComponent);
                /** @type {?} */
                var printsetting = factory.create(that.injector);
                printsetting.instance.formats = format;
                printsetting.instance.boxlist = device;
                printsetting.instance.formatId = beOptions[0].FormatId;
                printsetting.instance.isShowFormat = beOptions[0].FormatId ? false : true;
                printsetting.instance.localepip = that.localpipe;
                /** @type {?} */
                var dlg = _this.modalService.show(printsetting, {
                    title: _this.localpipe.transform('printset'),
                    width: 800,
                    height: 500,
                    showButtons: true,
                    showMaxButton: false,
                    buttons: [
                        { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                printsetting.instance.printJob();
                            }) },
                        { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                             * @return {?}
                             */
                            function () {
                                dlg.close();
                            }) }
                    ],
                });
                //订阅了弹出的格式选择列表的关闭事件
                printsetting.instance.print.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    dlg.close();
                    return that.outputBySingleSelectionFormat({
                        'id': data.id,
                        'isFilter': filter,
                        'beoptions': Object.assign({}, beOptions[0]),
                        'options': Object.assign({}, options),
                        'isJob': true,
                        'printerName': data.printter,
                        'boxId': data.boxId,
                        'printSetting': data.printSetting,
                        'ele': null
                    });
                }));
            }));
        }
    };
    // 选了格式后的输出
    // 选了格式后的输出
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    CloudprintService.prototype.outputBySingleSelectionFormat = 
    // 选了格式后的输出
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    function (res) {
        var _this = this;
        console.log('选完格式准备渲染: ' + JSON.stringify(res));
        /** @type {?} */
        var self = this;
        if (!res.id) {
            return;
        }
        res.beoptions.FormatId = res.id;
        res.options.DeviceId = res.boxId;
        res.options.printerName = res.printerName;
        res.options.printSetting = res.printSetting;
        res.options.printJob = res.isJob;
        if (res.isJob) { //后台打印
            if (res.isFilter === true) {
                return this.formatSrv.printSingleByFilter(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
            else {
                return this.formatSrv.printSingleById(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
        }
        else { //前台打印
            if (res.ele) { //有ele，则引擎负责渲染
                if (res.isFilter === true) {
                    if (res.ele === 'download') {
                        return this.formatSrv.printSingleByFilter(res.beoptions, res.options, res.su, 'CloudPrint')
                            .then((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            self.downloadFile(data);
                        }));
                    }
                    else {
                        self.openRendedViewer(res.ele, null, res.options, [res.beoptions], res.isFilter);
                    }
                }
                else {
                    if (res.ele === 'download') {
                        return this.formatSrv.printSingleById(res.beoptions, res.options, res.su, 'CloudPrint')
                            .then((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            self.downloadFile(data);
                        }));
                    }
                    else {
                        self.openRendedViewer(res.ele, null, res.options, [res.beoptions], res.isFilter);
                    }
                }
            }
            else { //没有ele，则只返回后台的渲染结果，给调用方自己处理
                if (res.filter === true) {
                    return this.formatSrv.printSingleByFilter(res.beoptions, res.options, res.su, 'CloudPrint');
                }
                else {
                    return this.formatSrv.printSingleById(res.beoptions, res.options, res.su, 'CloudPrint');
                }
            }
        }
    };
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    CloudprintService.prototype.outputByMultiSelectionFormat = /**
     * @private
     * @param {?} res
     * @return {?}
     */
    function (res) {
        var _this = this;
        console.log('选完格式准备渲染: ' + JSON.stringify(res));
        /** @type {?} */
        var self = this;
        res.options.DeviceId = res.boxId;
        res.options.printerName = res.printerName;
        res.options.printSetting = res.printSetting;
        res.options.printJob = res.isJob;
        if (res.isJob) { //后台打印
            if (res.isFilter === true) {
                return this.formatSrv.printMultiByFilter(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
            else {
                return this.formatSrv.printMultiById(res.beoptions, res.options, res.su, 'CloudPrint')
                    .then((/**
                 * @return {?}
                 */
                function () {
                    self.notifyService.success(_this.localpipe.transform('sendprintjob'));
                }));
            }
        }
    };
    //#endregion
    //#region 对外设计器和预览器接口
    /**
     * 在当前页面Body上打开Designer
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    //#endregion
    //#region 对外设计器和预览器接口
    /**
     * 在当前页面Body上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesigner = 
    //#endregion
    //#region 对外设计器和预览器接口
    /**
     * 在当前页面Body上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (format, data, formatId, dataIds) {
        this.openDesignerInternal(window.document.body, format, data, formatId, dataIds);
    };
    /**
     * 在当前页面的指定的元素上打开Designer
     * @param ele 指定的元素
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    /**
     * 在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesignerOnEle = /**
     * 在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (ele, format, data, formatId, dataIds) {
        this.openDesignerInternal(ele, format, data, formatId, dataIds);
    };
    /**
     * 在新的tab页面上打开Designer
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    /**
     * 在新的tab页面上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesignerNewTab = /**
     * 在新的tab页面上打开Designer
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (format, data, formatId, dataIds) {
        this.openDesignerInternal(null, format, data, formatId, dataIds);
    };
    /**
     * 运行时在当前页面的指定的元素上打开Designer
     * @param ele 指定的元素
     * @param formatCode 格式编号
     * @param formatName 格式名称
     * @param bizObjectId 业务对象Id
     * @param datasourceId 数据源Id, BEId/VOId/BesinessObjectClassInfo
     * @param sourceType 数据源类型, SourceType.BE/SourceType.VO/SourceType.BO
     */
    /**
     * 运行时在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} formatId
     * @param {?} formatCode 格式编号
     * @param {?} formatName 格式名称
     * @param {?} bizObjectId 业务对象Id
     * @param {?} datasourceId 数据源Id, BEId/VOId/BesinessObjectClassInfo
     * @param {?} sourceType 数据源类型, SourceType.BE/SourceType.VO/SourceType.BO
     * @return {?}
     */
    CloudprintService.prototype.openDesignerOnEleForRuntime = /**
     * 运行时在当前页面的指定的元素上打开Designer
     * @param {?} ele 指定的元素
     * @param {?} formatId
     * @param {?} formatCode 格式编号
     * @param {?} formatName 格式名称
     * @param {?} bizObjectId 业务对象Id
     * @param {?} datasourceId 数据源Id, BEId/VOId/BesinessObjectClassInfo
     * @param {?} sourceType 数据源类型, SourceType.BE/SourceType.VO/SourceType.BO
     * @return {?}
     */
    function (ele, formatId, formatCode, formatName, bizObjectId, datasourceId, sourceType) {
        var _this = this;
        this.printEntity.printFormat = new PrintFormat();
        this.printEntity.isUseMetaData = true;
        if (formatId && formatId.length > 0) {
            // 编辑
            this.formatSrv.getNewSourceFormatByFormatId(formatId)
                .then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.printEntity.printFormat = res;
                //打开设计器
                _this.openDesignerOnEle(ele, _this.printEntity.printFormat.content, {}, '', '');
            }));
        }
        else {
            //初始化
            this.initPrintFormat(datasourceId, sourceType)
                .then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.printEntity.printFormat.id = Utils.uuid();
                _this.printEntity.printFormat.code = formatCode;
                _this.printEntity.printFormat.name = formatName;
                _this.printEntity.printFormat.bizObjectId = bizObjectId;
                _this.printEntity.printFormat.dataSourceId = datasourceId;
                _this.printEntity.printFormat.sourceType = sourceType;
                _this.printEntity.printFormat.isUseTemplate = false;
                _this.printEntity.printFormat.content = res.format; //打印格式mrt   
                _this.printEntity.printFormat.dataSchema = res.printschema; //PrintDataSchemaView描述   
                //打开设计器
                _this.openDesignerOnEle(ele, _this.printEntity.printFormat.content, {}, '', '');
            }));
        }
    };
    /**
     * 在指定的元素上打开Designer(前端渲染)
     * @param ele 指定的元素
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    /**
     * 在指定的元素上打开Designer(前端渲染)
     * @private
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    CloudprintService.prototype.openDesignerInternal = /**
     * 在指定的元素上打开Designer(前端渲染)
     * @private
     * @param {?} ele 指定的元素
     * @param {?} format 格式
     * @param {?} data 数据
     * @param {?} formatId 格式id
     * @param {?} dataIds 数据ids
     * @return {?}
     */
    function (ele, format, data, formatId, dataIds) {
        if (ele) {
            this.printEntity.format = format;
            this.printEntity.data = data;
            this.printEntity.foramtId = formatId;
            this.printEntity.dataId = dataIds;
            this.createDesignerRef();
            // 给视图添加脏检查(这个方式是配合@ViewChild的方法使用的)
            // this.applicationRef.attachView(this.designercomponentRef.hostView);
            // 将创建好的组件引用append到指定标签下
            // 这里将动态组件加载到指定的html里有两种方式：
            //  1.上面的@ViewChil
            //  2.如下的ele.appendChild(this.getComponentRootNode(this.viewercomponentRef));方式
            ele.appendChild(this.getComponentRootNode(this.designercomponentRef));
        }
        else {
            /** @type {?} */
            var param = new OutputParam();
            param.prnFormat = format;
            param.prnData = data;
            param.prnFormatId = formatId;
            param.prnDataId = dataIds;
            param.prnType = CmpType.Designer;
            this.appService.openAppByOptions({
                appType: 'app',
                funcId: '',
                tabName: this.localpipe.transform('printdesigner'),
                appId: 'cloudprint-view-index',
                appEntrance: 'cloudprint-view-index',
                tabId: Utils.uuid(),
                entityParams: {
                    foramtParam: param,
                    formatEntity: null,
                },
            });
        }
    };
    /**
     * 获取空白打印格式
     */
    /**
     * 获取空白打印格式
     * @private
     * @param {?} datasourceId
     * @param {?} sourceType
     * @return {?}
     */
    CloudprintService.prototype.initPrintFormat = /**
     * 获取空白打印格式
     * @private
     * @param {?} datasourceId
     * @param {?} sourceType
     * @return {?}
     */
    function (datasourceId, sourceType) {
        if (sourceType === SourceType.BE) {
            //bo数据源
            return this.formatSrv.createPrintFormatWithBE(datasourceId);
        }
        else if (sourceType === SourceType.VO) {
            // vo数据源
            return this.formatSrv.createPrintFormatWithVO(datasourceId);
        }
        else {
            // 默认用BE数据源
            return this.formatSrv.createPrintFormatWithBO(datasourceId);
        }
    };
    /**
     * 创建Designer构件的引用对象
     */
    /**
     * 创建Designer构件的引用对象
     * @private
     * @return {?}
     */
    CloudprintService.prototype.createDesignerRef = /**
     * 创建Designer构件的引用对象
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(CloudprintDesignerComponent);
        if (!this.viewContainer) {
            this.designercomponentRef = factory.create(this.injector);
            this.applicationRef.attachView(this.designercomponentRef.hostView);
        }
        else {
            this.viewContainer.clear();
            this.designercomponentRef = this.viewContainer.createComponent(factory);
        }
        // 同步组件和组件上依赖的服务的printEntity
        this.designercomponentRef.instance.setPrintEntity(this.printEntity);
        // this.designercomponentRef.instance.localeid = this.localeid;
        // 订阅退出事件
        this.designercomponentRef.instance.printEntity.onExitEvent.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.designercomponentRef.destroy();
            if (!_this.viewContainer) {
                _this.applicationRef.detachView(_this.designercomponentRef.hostView);
            }
            else {
                _this.viewContainer.clear();
            }
        }));
    };
    /**
     * 打开已经渲染的Viewer（后端渲染）
     * @param ele 指定的元素
     * @param data 已经渲染的格式(后端渲染是pdf的二进制流)
     */
    /**
     * 打开已经渲染的Viewer（后端渲染）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.openRendedViewer = /**
     * 打开已经渲染的Viewer（后端渲染）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    function (ele, data, options, sourceOptions, isFilter, printEntity, param) {
        if (sourceOptions === void 0) { sourceOptions = null; }
        if (isFilter === void 0) { isFilter = false; }
        if (printEntity === void 0) { printEntity = null; }
        if (param === void 0) { param = null; }
        if (printEntity != null) { //用外界的printEntity属性覆盖当前的printEntity的属性
            // tslint:disable-next-line:forin
            for (var key in printEntity) {
                this.printEntity[key] = printEntity[key];
            }
        }
        if (data) { //数据已渲染，直接打印，不存在后台打印了
            this.preViewLocal(ele, data, options, sourceOptions, printEntity, isFilter, param);
        }
        else {
            this.preViewRemote(ele, options, sourceOptions, isFilter, printEntity, param);
        }
    };
    /**
     * 打开已经渲染的Viewer（后端渲染,给附件用的）
     * @param ele 指定的元素
     * @param data 已经渲染的格式(后端渲染是pdf的二进制流)
     */
    /**
     * 打开已经渲染的Viewer（后端渲染,给附件用的）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @return {?}
     */
    CloudprintService.prototype.openRendedViewer4Attachment = /**
     * 打开已经渲染的Viewer（后端渲染,给附件用的）
     * @param {?} ele 指定的元素
     * @param {?} data 已经渲染的格式(后端渲染是pdf的二进制流)
     * @param {?} options
     * @return {?}
     */
    function (ele, data, options) {
        this.openRendedViewer(ele, data, options, null, false, this.printEntity);
    };
    /**
     * 本地直接打印
     */
    /**
     * 本地直接打印
     * @private
     * @param {?} ele
     * @param {?} data
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} printEntity
     * @param {?=} isFilter
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.preViewLocal = /**
     * 本地直接打印
     * @private
     * @param {?} ele
     * @param {?} data
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} printEntity
     * @param {?=} isFilter
     * @param {?=} param
     * @return {?}
     */
    function (ele, data, options, sourceOptions, printEntity, isFilter, param) {
        if (sourceOptions === void 0) { sourceOptions = null; }
        if (printEntity === void 0) { printEntity = null; }
        if (param === void 0) { param = null; }
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var b = new Blob([data]);
        /** @type {?} */
        var reader = new FileReader();
        reader.readAsArrayBuffer(b);
        reader.onload = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return __awaiter(this, void 0, void 0, function () {
                var rendedFormat, param, remotePrint;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            rendedFormat = (/** @type {?} */ (reader.result));
                            param = new OutputParam();
                            param.prnRendedFormat = btoa((/** @type {?} */ (new Uint8Array(rendedFormat))));
                            param.prnType = CmpType.Viewer;
                            param.prnOutputOps = Object.assign({}, options);
                            param.prnSourceOptions = sourceOptions ? __spread(sourceOptions) : [];
                            param.isFilter = isFilter;
                            if (!(ele === 'tab')) return [3 /*break*/, 1];
                            self.appService.openAppByOptions({
                                appType: 'app',
                                funcId: '',
                                tabName: self.localpipe.transform('printview'),
                                appId: 'cloudprint-view-index',
                                appEntrance: 'cloudprint-view-index',
                                tabId: Utils.uuid(),
                                entityParams: {
                                    foramtParam: param,
                                    formatEntity: null,
                                },
                            });
                            return [3 /*break*/, 3];
                        case 1: return [4 /*yield*/, self.formatSrv.isRemotePrint()];
                        case 2:
                            remotePrint = _a.sent();
                            self.createViewerRef();
                            self.printEntity.rendedFormat = rendedFormat;
                            self.viewercomponentRef.instance.outputParam = param;
                            self.viewercomponentRef.instance.isRemotePrint = remotePrint;
                            ele.appendChild(self.getComponentRootNode(self.viewercomponentRef));
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        });
    };
    /**
     * 远程打印
     */
    /**
     * 远程打印
     * @private
     * @param {?} ele
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.preViewRemote = /**
     * 远程打印
     * @private
     * @param {?} ele
     * @param {?} options
     * @param {?=} sourceOptions
     * @param {?=} isFilter
     * @param {?=} printEntity
     * @param {?=} param
     * @return {?}
     */
    function (ele, options, sourceOptions, isFilter, printEntity, param) {
        if (sourceOptions === void 0) { sourceOptions = null; }
        if (printEntity === void 0) { printEntity = null; }
        if (param === void 0) { param = null; }
        return __awaiter(this, void 0, void 0, function () {
            var self, outputparam, remotePrint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        self = this;
                        outputparam = new OutputParam();
                        outputparam.prnType = CmpType.Viewer;
                        outputparam.prnOutputOps = Object.assign({}, options);
                        outputparam.prnSourceOptions = __spread(sourceOptions);
                        outputparam.isFilter = isFilter;
                        if (!(ele === 'tab')) return [3 /*break*/, 1];
                        self.appService.openAppByOptions({
                            appType: 'app',
                            funcId: '',
                            tabName: self.localpipe.transform('printview'),
                            appId: 'cloudprint-view-index',
                            appEntrance: 'cloudprint-view-index',
                            tabId: Utils.uuid(),
                            entityParams: {
                                foramtParam: outputparam,
                                formatEntity: null,
                            },
                        });
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, self.formatSrv.isRemotePrint()];
                    case 2:
                        remotePrint = _a.sent();
                        self.createViewerRef();
                        self.viewercomponentRef.instance.outputParam = outputparam;
                        self.viewercomponentRef.instance.isRemotePrint = remotePrint;
                        ele.appendChild(self.getComponentRootNode(self.viewercomponentRef));
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 创建Viewer构件的引用对象
     */
    /**
     * 创建Viewer构件的引用对象
     * @private
     * @return {?}
     */
    CloudprintService.prototype.createViewerRef = /**
     * 创建Viewer构件的引用对象
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(CloudprintViewerComponent);
        if (!this.viewContainer) {
            this.viewercomponentRef = factory.create(this.injector);
            this.applicationRef.attachView(this.viewercomponentRef.hostView);
        }
        else {
            this.viewContainer.clear();
            this.viewercomponentRef = this.viewContainer.createComponent(factory);
        }
        // 同步组件和组件上依赖的服务的printEntity
        this.viewercomponentRef.instance.setPrintEntity(this.printEntity);
        this.viewercomponentRef.instance.localpipe = this.localpipe;
        // 订阅退出事件
        this.viewercomponentRef.instance.printEntity.onExitEvent.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.viewercomponentRef.destroy();
            if (!_this.viewContainer) {
                _this.applicationRef.detachView(_this.viewercomponentRef.hostView);
            }
            else {
                _this.viewContainer.clear();
            }
        }));
    };
    /**
     * 将ComponentRef类型的组件引用转换为DOM节点（参考自Material2）
     * @param cpRef 组件的引用对象
     */
    /**
     * 将ComponentRef类型的组件引用转换为DOM节点（参考自Material2）
     * @private
     * @param {?} cpRef 组件的引用对象
     * @return {?}
     */
    CloudprintService.prototype.getComponentRootNode = /**
     * 将ComponentRef类型的组件引用转换为DOM节点（参考自Material2）
     * @private
     * @param {?} cpRef 组件的引用对象
     * @return {?}
     */
    function (cpRef) {
        return (/** @type {?} */ (((/** @type {?} */ (cpRef.hostView))).rootNodes[0]));
    };
    //#endregion
    //#region 对外打印服务接口
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    //#endregion
    //#region 对外打印服务接口
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleById = 
    //#endregion
    //#region 对外打印服务接口
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beoptions, options, ele, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beoptions.queryType == undefined) { //兼容以前的逻辑
            beoptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        //与表单集成时，表单打印时有多个打印格式，需要选择，这时候格式id是空的
        if (beoptions.FormatId == undefined || beoptions.FormatId == '') {
            return this.openFormatListByDimension(beoptions, options, ele, false);
        }
        else {
            if (ele) {
                /** @type {?} */
                var self_1 = this;
                if (ele === 'download') {
                    return this.formatSrv.printSingleById(beoptions, options, su, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        self_1.downloadFile(data);
                    }));
                }
                else {
                    self_1.openRendedViewer(ele, null, options, [beoptions], false);
                }
            }
            else {
                return this.formatSrv.printSingleById(beoptions, options, su, 'CloudPrint');
            }
        }
    };
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleByFilter = /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beFilteroptions, options, ele, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beFilteroptions.queryType == undefined) { //兼容以前的逻辑
            beFilteroptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        //与表单集成时，表单打印时有多个打印格式，需要选择，这时候格式id是空的
        if (beFilteroptions.FormatId == undefined || beFilteroptions.FormatId == '') {
            return this.openFormatListByDimension(beFilteroptions, options, ele, true);
        }
        else {
            if (ele) {
                /** @type {?} */
                var self_2 = this;
                if (ele === 'download') {
                    return this.formatSrv.printSingleByFilter(beFilteroptions, options, su, 'CloudPrint')
                        .then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        self_2.downloadFile(data);
                    }));
                }
                else {
                    self_2.openRendedViewer(ele, null, options, [beFilteroptions], true);
                }
            }
            else {
                return this.formatSrv.printSingleByFilter(beFilteroptions, options, su, 'CloudPrint');
            }
        }
    };
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     */
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiById = /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beOptionsList, options, ele, su, param) {
        var _this = this;
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        for (var i = 0; i < beOptionsList.length; i++) {
            DataValidator.checkForNullReference(beOptionsList[i].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (ele) {
            /** @type {?} */
            var self_3 = this;
            if (ele === 'download') {
                return this.formatSrv.printMultiById(beOptionsList, options, su, 'CloudPrint')
                    .then((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.downloadFile(data);
                }));
            }
            else {
                self_3.openRendedViewer(ele, null, options, beOptionsList, false);
            }
        }
        else {
            return this.formatSrv.printMultiById(beOptionsList, options, su, 'CloudPrint');
        }
    };
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     */
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiByFilter = /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?} ele
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beOptionsList, options, ele, su, param) {
        var _this = this;
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        for (var i = 0; i < beOptionsList.length; i++) {
            DataValidator.checkForNullReference(beOptionsList[i].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (ele) {
            /** @type {?} */
            var self_4 = this;
            if (ele === 'download') {
                return this.formatSrv.printMultiByFilter(beOptionsList, options, su, 'CloudPrint')
                    .then((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.downloadFile(data);
                }));
            }
            else {
                self_4.openRendedViewer(ele, null, options, beOptionsList, true);
            }
        }
        else {
            return this.formatSrv.printMultiByFilter(beOptionsList, options, su, 'CloudPrint');
        }
    };
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleById4Job = /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beoptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beoptions.queryType == undefined) { //兼容以前的逻辑
            beoptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        return this.openFormatListByDimension4Job([beoptions], options, false, false);
    };
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printSingleByFilter4Job = /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beFilteroptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        if (beFilteroptions.queryType == undefined) { //兼容以前的逻辑
            beFilteroptions.queryType = QueryType.Unknown;
        }
        if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
            options.printType = PrintType.Form;
        }
        return this.openFormatListByDimension4Job([beFilteroptions], options, true, false);
    };
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     */
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiById4Job = /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beOptionsList
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beOptionsList, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        // tslint:disable-next-line:forin
        for (var b in beOptionsList) {
            DataValidator.checkForNullReference(beOptionsList[0].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        return this.openFormatListByDimension4Job(beOptionsList, options, false, true);
    };
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     */
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudprintService.prototype.printMultiByFilter4Job = /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     * @param {?} beFilteroptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (beFilteroptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        // tslint:disable-next-line:forin
        for (var b in beFilteroptions) {
            DataValidator.checkForNullReference(beFilteroptions[0].queryType, 'queryType');
        }
        DataValidator.checkForNullReference(options.printType, 'printType');
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info(this.localpipe.transform('appurlerror'));
            return;
        }
        return this.openFormatListByDimension4Job(beFilteroptions, options, true, true);
    };
    /**
     * 创建blob对象，并利用浏览器打开url进行下载
     * @param data 文件流数据
     */
    /**
     * 创建blob对象，并利用浏览器打开url进行下载
     * @param {?} data 文件流数据
     * @return {?}
     */
    CloudprintService.prototype.downloadFile = /**
     * 创建blob对象，并利用浏览器打开url进行下载
     * @param {?} data 文件流数据
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var link = document.createElement('a');
        /** @type {?} */
        var blob = new Blob([data], { type: 'application/pdf;charset=UTF-8' });
        link.setAttribute('href', window.URL.createObjectURL(blob));
        link.setAttribute('download', this.printEntity.downLoadFileName + '.pdf');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    //#endregion
    /**
     * 打印（过期了，改为printSingleById）
     * @param beoptions 数据源选项
     * @param options 导出选项
     * @param ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载，
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     */
    //#endregion
    /**
     * 打印（过期了，改为printSingleById）
     * @param {?} beoptions 数据源选项
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载，
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    CloudprintService.prototype.outputBEData = 
    //#endregion
    /**
     * 打印（过期了，改为printSingleById）
     * @param {?} beoptions 数据源选项
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载，
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    function (beoptions, options, ele) {
        return this.printSingleById(beoptions, options, ele);
    };
    /**
     * 打印（过期了，改为printSingleByFilter）
     * @param beoptions BEFilter选项
     * @param options 导出选项
     * @param ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     */
    /**
     * 打印（过期了，改为printSingleByFilter）
     * @param {?} beFilteroptions
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    CloudprintService.prototype.outputBEDataWithFilter = /**
     * 打印（过期了，改为printSingleByFilter）
     * @param {?} beFilteroptions
     * @param {?} options 导出选项
     * @param {?} ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     * @return {?}
     */
    function (beFilteroptions, options, ele) {
        return this.printSingleByFilter(beFilteroptions, options, ele);
    };
    CloudprintService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintService.ctorParameters = function () { return [
        { type: PrintFormatService },
        { type: ComponentFactoryResolver },
        { type: CloudprintdesignerService },
        { type: CloudprintviewerService },
        { type: Injector },
        { type: ApplicationRef },
        { type: NotifyService },
        { type: AppService },
        { type: WindowService },
        { type: BsModalService }
    ]; };
    return CloudprintService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS';
var CloudPrintModule = /** @class */ (function () {
    function CloudPrintModule() {
    }
    CloudPrintModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        // BrowserModule,
                        HttpClientModule,
                        NotifyModule,
                        WindowModule,
                        FormsModule,
                        GridModule,
                        DialogModule,
                        LoadingModule,
                        LoadingModule.forRoot(),
                        FarrisDialogModule,
                        FarrisButtonModule,
                        SplitterModule,
                        DatagridModule,
                        AngularDraggableModule,
                        FarrisSectionModule,
                        ModalModule.forRoot(),
                        NumberSpinnerModule,
                        ComboListModule,
                        FarrisFormsModule,
                        FResponseToolbarModule
                    ],
                    declarations: [
                        CloudprintDesignerComponent,
                        CloudprintViewerComponent,
                        FormatlistComponent,
                        FormatlistjobComponent,
                        LocalLangPipe
                    ],
                    entryComponents: [
                        CloudprintDesignerComponent,
                        CloudprintViewerComponent,
                        NotifyContainerComponent,
                        FormatlistComponent,
                        FormatlistjobComponent
                    ],
                    providers: [
                        // component里依赖的服务都需要在这里申明下
                        CloudprintdesignerService,
                        CloudprintviewerService,
                        CloudprintService,
                        NotifyService,
                        CloudprintFunctionRegister,
                        AppService,
                        PrintFormatService,
                        LanguageService,
                        LoadingService,
                        { provide: LOCALE_ID, useValue: ɵ0 },
                    ],
                },] }
    ];
    return CloudPrintModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BaseSourceOptions = /** @class */ (function () {
    function BaseSourceOptions() {
        this.includeChildData = true;
    }
    return BaseSourceOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SourceFilterOptions = /** @class */ (function (_super) {
    __extends(SourceFilterOptions, _super);
    function SourceFilterOptions() {
        var _this = _super.call(this) || this;
        _this.queryType = QueryType.Unknown;
        return _this;
    }
    return SourceFilterOptions;
}(BaseSourceOptions));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SourceOptions = /** @class */ (function (_super) {
    __extends(SourceOptions, _super);
    function SourceOptions() {
        var _this = _super.call(this) || this;
        _this.queryType = QueryType.Unknown;
        return _this;
    }
    return SourceOptions;
}(BaseSourceOptions));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 这个类以后不用了，但是不能删，财务已经使用
 */
var RetrieveParam = /** @class */ (function () {
    function RetrieveParam() {
    }
    return RetrieveParam;
}());
var NodeSortInfos = /** @class */ (function () {
    function NodeSortInfos() {
    }
    return NodeSortInfos;
}());
var SortConditions = /** @class */ (function () {
    function SortConditions() {
    }
    return SortConditions;
}());
/** @enum {number} */
var RequestedBufferType = {
    //
    // 摘要:
    //     本次请求中的数据。
    //
    // 言论：
    //     如果本次请求执行成功,提交到Inspur.Gsp.Bef.Api.Parameter.RequestedBufferType.TransactionalBuffer,否则被丢弃
    CurrentData: 0,
    //
    // 摘要:
    //     包含会话过程中已经接受的变更数据
    TransactionalBuffer: 1,
    //
    // 摘要:
    //     修改之前的老值,用于比较变更,获取差异或触发事件。会话过程中保持与数据库中一致
    Original: 2,
};
RequestedBufferType[RequestedBufferType.CurrentData] = 'CurrentData';
RequestedBufferType[RequestedBufferType.TransactionalBuffer] = 'TransactionalBuffer';
RequestedBufferType[RequestedBufferType.Original] = 'Original';
/** @enum {number} */
var SortType = {
    Asc: 0,
    Desc: 1,
};
SortType[SortType.Asc] = 'Asc';
SortType[SortType.Desc] = 'Desc';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var FileType = {
    None: 'None',
    //
    // 摘要:1
    //     Adobe PDF format for export.
    Pdf: 'Pdf',
    //
    // 摘要:36
    //     HTML5 format for export.
    Html5: 'Html5',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 导出设置
 */
var  /**
 * 导出设置
 */
OutputOptions = /** @class */ (function () {
    function OutputOptions() {
        /**
         * 是否后台任务打印
         */
        this.printJob = false;
        /**
         * 打印机名称
         */
        this.printerName = '';
        /**
         * 打印设置
         */
        this.printSetting = new PrintSetting();
        this.FileType = FileType.Pdf;
        this.printType = PrintType.Form;
    }
    return OutputOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var OutputType = {
    /**
     * 0
     */
    None: 'None',
    /** 打印 1*/
    PRINT: 'PRINT',
    /** 导出 2*/
    EXPORT: 'EXPORT',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CloudprintInternalService = /** @class */ (function () {
    function CloudprintInternalService(formatSrv, resolver, injector, applicationRef, notifyService, appService, windowService, modalService) {
        this.formatSrv = formatSrv;
        this.resolver = resolver;
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.notifyService = notifyService;
        this.appService = appService;
        this.windowService = windowService;
        this.modalService = modalService;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        // 设置printEntity的默认值
        this.printEntity.appUrl = Urls.CloudPrintBaseUrl;
        this.printEntity.isUseMetaData = true;
        this.printEntity.language = localStorage.getItem("languageCode") || 'zh-CHS';
        this.formatSrv.printEntity = this.printEntity;
    }
    Object.defineProperty(CloudprintInternalService.prototype, "setPrintEntity", {
        /**
         * 设置PrintEntity参数
         * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         */
        set: /**
         * 设置PrintEntity参数
         * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            this.printEntity = entity;
            // this.designerSrv.printEntity = this.printEntity;
            // this.viewerSrv.printEntity = this.printEntity;
            this.formatSrv.printEntity = this.printEntity;
        },
        enumerable: true,
        configurable: true
    });
    /**be数据源创建格式*/
    /**
     * be数据源创建格式
     * @param {?} beId
     * @return {?}
     */
    CloudprintInternalService.prototype.createPrintFormatWithBE = /**
     * be数据源创建格式
     * @param {?} beId
     * @return {?}
     */
    function (beId) {
        return this.formatSrv.createPrintFormatWithBE(beId);
    };
    /**vo数据源创建格式*/
    /**
     * vo数据源创建格式
     * @param {?} voId
     * @return {?}
     */
    CloudprintInternalService.prototype.createPrintFormatWithVO = /**
     * vo数据源创建格式
     * @param {?} voId
     * @return {?}
     */
    function (voId) {
        return this.formatSrv.createPrintFormatWithVO(voId);
    };
    /**根据数据源id获取格式*/
    /**
     * 根据数据源id获取格式
     * @param {?} sourceId
     * @return {?}
     */
    CloudprintInternalService.prototype.getPrintFormatByDataSrouceId = /**
     * 根据数据源id获取格式
     * @param {?} sourceId
     * @return {?}
     */
    function (sourceId) {
        return this.formatSrv.getFormatBySourceId(sourceId);
    };
    /**根据数据源和维度获取格式*/
    /**
     * 根据数据源和维度获取格式
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    CloudprintInternalService.prototype.getPrintFormatByDataSrouceAndDimension = /**
     * 根据数据源和维度获取格式
     * @param {?} billCategoryId
     * @param {?} sourceId
     * @param {?} firstDimension
     * @param {?} secondDimension
     * @return {?}
     */
    function (billCategoryId, sourceId, firstDimension, secondDimension) {
        return this.formatSrv.getPrintFormatByDataSrouceAndDimension(billCategoryId, sourceId, firstDimension, secondDimension);
    };
    /**根据业务对象id获取数据源*/
    /**
     * 根据业务对象id获取数据源
     * @param {?} boId
     * @return {?}
     */
    CloudprintInternalService.prototype.getDataSourceByBOId = /**
     * 根据业务对象id获取数据源
     * @param {?} boId
     * @return {?}
     */
    function (boId) {
        return this.formatSrv.getDataSourceByBOId(boId);
    };
    /**根据格式id获取格式*/
    /**
     * 根据格式id获取格式
     * @param {?} formatId
     * @return {?}
     */
    CloudprintInternalService.prototype.getFormatByFormatId = /**
     * 根据格式id获取格式
     * @param {?} formatId
     * @return {?}
     */
    function (formatId) {
        return this.formatSrv.getFormatByFormatId(formatId);
    };
    /**根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式*/
    /**
     * 根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @return {?}
     */
    CloudprintInternalService.prototype.getNewSourceFormatByFormatId = /**
     * 根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @return {?}
     */
    function (formatId) {
        return this.formatSrv.getNewSourceFormatByFormatId(formatId);
    };
    /**根据已有的格式id和数据源id，语言，实时获取数据源结构后组成新的格式*/
    /**
     * 根据已有的格式id和数据源id，语言，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @param {?} lang
     * @return {?}
     */
    CloudprintInternalService.prototype.getNewSourceFormatByFormatIdAndLang = /**
     * 根据已有的格式id和数据源id，语言，实时获取数据源结构后组成新的格式
     * @param {?} formatId
     * @param {?} lang
     * @return {?}
     */
    function (formatId, lang) {
        return this.formatSrv.getNewSourceFormatByFormatIdAndLang(formatId, lang);
    };
    /**保存格式*/
    /**
     * 保存格式
     * @param {?} data
     * @return {?}
     */
    CloudprintInternalService.prototype.save = /**
     * 保存格式
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return this.formatSrv.save(data);
    };
    /**保存格式*/
    /**
     * 保存格式
     * @param {?} data
     * @return {?}
     */
    CloudprintInternalService.prototype.saveWithRes = /**
     * 保存格式
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return this.formatSrv.saveWithRes(data);
    };
    /**删除格式*/
    /**
     * 删除格式
     * @param {?} formatId
     * @return {?}
     */
    CloudprintInternalService.prototype.remove = /**
     * 删除格式
     * @param {?} formatId
     * @return {?}
     */
    function (formatId) {
        return this.formatSrv.remove(formatId);
    };
    /**根据格式id获取格式*/
    /**
     * 根据格式id获取格式
     * @param {?} id
     * @return {?}
     */
    CloudprintInternalService.prototype.getFormatById = /**
     * 根据格式id获取格式
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
            this.notifyService.info('未配置正确的appUrl');
            return;
        }
        return this.formatSrv.loadFormat(id, 'CloudPrint');
    };
    CloudprintInternalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudprintInternalService.ctorParameters = function () { return [
        { type: PrintFormatService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: NotifyService },
        { type: AppService },
        { type: WindowService },
        { type: BsModalService }
    ]; };
    return CloudprintInternalService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件打印的服务
 */
var CloudPrintAttachmentService = /** @class */ (function () {
    function CloudPrintAttachmentService(formatSrv, resolver, injector, applicationRef, notifyService, appService, modalService, httpClient) {
        this.formatSrv = formatSrv;
        this.resolver = resolver;
        this.injector = injector;
        this.applicationRef = applicationRef;
        this.notifyService = notifyService;
        this.appService = appService;
        this.modalService = modalService;
        this.httpClient = httpClient;
        /**
         * 打印参数实体
         */
        this.printEntity = new PrintEntity();
        // 设置printEntity的默认值
        this.printEntity.appUrl = Urls.CloudPrintBaseUrl;
        this.printEntity.isUseMetaData = true;
        this.printEntity.language = localStorage.getItem("languageCode") || 'zh-CHS';
        this.formatSrv.printEntity = this.printEntity;
        if (this.injector) {
            this.modalService = this.injector.get(BsModalService);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localpipe = new LocalLangPipe(this.localeid);
        }
    }
    Object.defineProperty(CloudPrintAttachmentService.prototype, "setPrintEntity", {
        /**
         * 设置PrintEntity参数
         * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         */
        set: /**
         * 设置PrintEntity参数
         * \@description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
         *              外界没有new新的PrintEntity，则不需要调用该方法
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            this.printEntity = entity;
            // this.designerSrv.printEntity = this.printEntity;
            // this.viewerSrv.printEntity = this.printEntity;
            this.formatSrv.printEntity = this.printEntity;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} attachmentoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    CloudPrintAttachmentService.prototype.printAttachment = /**
     * @param {?} attachmentoptions
     * @param {?} options
     * @param {?=} su
     * @param {?=} param
     * @return {?}
     */
    function (attachmentoptions, options, su, param) {
        if (su === void 0) { su = null; }
        if (param === void 0) { param = null; }
        return __awaiter(this, void 0, void 0, function () {
            var that;
            var _this = this;
            return __generator(this, function (_a) {
                if (DataValidator.checkAppUrl(this.printEntity.appUrl) == false) {
                    this.notifyService.info(this.localpipe.transform('appurlerror'));
                    return [2 /*return*/];
                }
                if (attachmentoptions.queryType == undefined) { //兼容以前的逻辑
                    attachmentoptions.queryType = QueryType.Unknown;
                }
                if (options.printType == undefined) { //兼容以前的逻辑这里默认为表单打印
                    options.printType = PrintType.Attachment;
                }
                that = this;
                return [2 /*return*/, this.formatSrv.getPrintDevice().then((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        /** @type {?} */
                        var device = data || [];
                        /** @type {?} */
                        var factory = that.resolver.resolveComponentFactory(FormatlistjobComponent);
                        /** @type {?} */
                        var printsetting = factory.create(that.injector);
                        printsetting.instance.boxlist = device;
                        printsetting.instance.formatId = '';
                        printsetting.instance.isShowFormat = false;
                        printsetting.instance.printType = 1;
                        printsetting.instance.localepip = that.localpipe;
                        /** @type {?} */
                        var dlg = _this.modalService.show(printsetting, {
                            title: _this.localpipe.transform('printset'),
                            width: 800,
                            height: 500,
                            showButtons: true,
                            showMaxButton: false,
                            buttons: [
                                { text: _this.localpipe.transform('print'), cls: 'btn btn-primary', handle: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        printsetting.instance.printJob();
                                    }) },
                                { text: _this.localpipe.transform('cancel'), cls: 'btn btn-secondary', handle: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        dlg.close();
                                    }) }
                            ],
                        });
                        //订阅了弹出的格式选择列表的关闭事件
                        printsetting.instance.print.subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        dlg.close();
                                        options.printSetting = data.printSetting;
                                        options.printerName = data.printter;
                                        options.DeviceId = data.boxId;
                                        options.printJob = true;
                                        return [4 /*yield*/, this.printAttachmentJob(attachmentoptions, options)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); }));
                    }))];
            });
        });
    };
    /**
     * @private
     * @param {?} attachmentoptions
     * @param {?} options
     * @return {?}
     */
    CloudPrintAttachmentService.prototype.printAttachmentJob = /**
     * @private
     * @param {?} attachmentoptions
     * @param {?} options
     * @return {?}
     */
    function (attachmentoptions, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, httpoptions, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.printEntity.appUrl + Urls.PrintAttachment + 'su=' + Config.PRINT_SU;
                        httpoptions = {};
                        httpoptions['headers'] = {
                            SessionId: this.printEntity.sessionId || '',
                            'Content-Type': 'application/json'
                        };
                        data = {
                            attachmentOptions: attachmentoptions,
                            options: options,
                        };
                        return [4 /*yield*/, this.httpClient.post(url, data, httpoptions).toPromise()
                                .then((/**
                             * @return {?}
                             */
                            function () {
                                _this.notifyService.info(_this.localpipe.transform('sendprintjob'));
                                return _this.localpipe.transform('sendprintjob');
                            }))
                                .catch((/**
                             * @param {?} err
                             * @return {?}
                             */
                            function (err) {
                                _this.notifyService.warning(err.error.Message);
                                return err.error.Message;
                            }))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CloudPrintAttachmentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CloudPrintAttachmentService.ctorParameters = function () { return [
        { type: PrintFormatService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: NotifyService },
        { type: AppService },
        { type: BsModalService },
        { type: HttpClient }
    ]; };
    return CloudPrintAttachmentService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CloudprintService, PrintFormatService as ɵa, CloudPrintModule, CmpType, SourceType, PrintEntity, PrintFormat, SourceFilterOptions, SourceOptions, RetrieveParam, NodeSortInfos, SortConditions, RequestedBufferType, SortType, Utils, OutputOptions, OutputParam, FileType, OutputType, PrintType, Config, PaperKind, PrintSetting, CloudprintInternalService, CloudPrintAttachmentService, CloudprintDesignerComponent as ɵd, CloudprintdesignerService as ɵb, FormatlistComponent as ɵg, FormatlistjobComponent as ɵh, CloudprintViewerComponent as ɵf, CloudprintviewerService as ɵc, BaseSourceOptions as ɵj, CloudprintFunctionRegister as ɵe, LocalLangPipe as ɵi };

//# sourceMappingURL=gsp-svc-cloudprint.js.map