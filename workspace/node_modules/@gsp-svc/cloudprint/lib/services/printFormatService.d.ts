import { PrintFormat } from '../entitys/printFormat';
import { PrintEntity } from '../entitys/printEntity';
import { HttpClient } from '@angular/common/http';
import { SourceOptions } from '../entitys/datasourceoptions/sourceOptions';
import { OutputOptions } from '../entitys/outputoptions/outputOptions';
import { SourceFilterOptions } from '../entitys/datasourceoptions/sourceFilterOptions';
export declare class PrintFormatService {
    private httpClient;
    printEntity: PrintEntity;
    private curSu;
    constructor(httpClient: HttpClient);
    createPrintFormatWithBE(beId: string): Promise<any>;
    createPrintFormatWithVO(voId: string): Promise<any>;
    createPrintFormatWithBO(biznessObjectClassInfo: string): Promise<any>;
    getDataSourceByBOId(boId: string): Promise<any>;
    getFormatBySourceId(dataSourceId: string): Promise<any>;
    getPrintFormatByDataSrouceAndDimension(billCategoryId: any, sourceId: any, firstDimension: any, secondDimension: any): Promise<any>;
    getPrintFormatAndDevice(billCategoryId: any, sourceId: any, firstDimension: any, secondDimension: any): Promise<any>;
    getPrintDevice(): Promise<any>;
    getFormatByFormatId(formatId: string): Promise<any>;
    /**
     * 根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式
     */
    getNewSourceFormatByFormatId(formatId: string): Promise<any>;
    /**
     * 根据已有的格式id和数据源id,语言，实时获取数据源结构后组成新的格式
     */
    getNewSourceFormatByFormatIdAndLang(formatId: string, lang: string): Promise<any>;
    save(data: PrintFormat): Promise<any>;
    saveWithRes(data: PrintFormat): Promise<any>;
    remove(data: string): Promise<Object>;
    /**
     * 加载格式
     * @param reportID id
     */
    loadFormat(reportID: string, flag: string): Promise<any>;
    /**
     * 加载数据
     * @param dataIds 要加载的数据Id
     */
    loadData(dataIds: string, flag: string): Promise<any>;
    /**
     * 单格式数据id渲染打印
     * GS内部/第三方
     * @param beOptions 数据源选项
     * @param options 导出选项
     * @param su:双栈模式下，该su只是用来给nginx来配置路由
     */
    printSingleById(beOptions: SourceOptions, options: OutputOptions, su: string, flag: any): Promise<string>;
    /**
     * 单格式过滤条件渲染打印
     * GS内部/第三方
     * @param beOptions BEFilter选项
     * @param options 导出选项
     * @param su:双栈模式下，该su只是用来给nginx来配置路由
     */
    printSingleByFilter(beOptions: SourceFilterOptions, options: OutputOptions, su: string, flag: any): Promise<string>;
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     */
    printMultiById(beOptionsList: Array<SourceOptions>, options: OutputOptions, su: String, flag: any): Promise<string>;
    /**
     * su:双栈模式下，该su只是用来给nginx来配置路由
     */
    printMultiByFilter(beOptionsList: Array<SourceFilterOptions>, options: OutputOptions, su: String, flag: any): Promise<string>;
    /**
     * 渲染测试数据
     */
    printTestData(formats: String, datas: String, flag: any): Promise<string>;
    /**
     * 触发打印事件
     */
    sendPrintEvent(data: any, flag: any): Promise<string>;
    isRemotePrint(): Promise<any>;
    getEnableFonts(): Promise<any>;
    /**
     * 通过打印格式，获取bo，在获取su（这是一个临时方案）
     * @param id
     */
    private getSuByFormatId;
}
