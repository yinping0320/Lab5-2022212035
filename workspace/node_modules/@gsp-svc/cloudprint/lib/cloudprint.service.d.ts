import { Injector, ApplicationRef } from '@angular/core';
import { ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { PrintEntity } from './entitys/printEntity';
import { NotifyService } from '@farris/ui-notify';
import { OutputOptions } from './entitys/outputoptions/outputOptions';
import { SourceOptions } from './entitys/datasourceoptions/sourceOptions';
import { SourceFilterOptions } from './entitys/datasourceoptions/sourceFilterOptions';
import { AppService } from '@gsp-sys/rtf-common';
import { PrintFormatService } from './services/printFormatService';
import { SourceType } from './entitys/enums/sourceType';
import { WindowRef, WindowService } from '@progress/kendo-angular-dialog';
import { CloudprintdesignerService } from './cloudprint-designer/cloudprint-designer.service';
import { CloudprintviewerService } from './cloudprint-viewer/cloudprint-viewer.service';
import { BaseSourceOptions } from './entitys/datasourceoptions/basesourceoptions';
import { BsModalService } from '@farris/ui-modal';
import { LocalLangPipe } from './local.pipe';
export declare class CloudprintService {
    private formatSrv;
    private resolver;
    private designerSrv;
    private viewerSrv;
    private injector;
    private applicationRef;
    private notifyService;
    private appService;
    private windowService;
    private modalService;
    private designercomponentRef;
    private viewercomponentRef;
    /**
     * Saas应用通过构造函数注入的ViewContainerRef对象
     *
     * 例子：
     *    xxx.html
     *          <ng-container #prndesigner></ng-container>
     *
     *    xxx.component.ts
     *          @ViewChild('prndesigner', {read: ViewContainerRef})
     *          private container: ViewContainerRef;
     */
    viewContainer: ViewContainerRef;
    /**
     * 打印参数实体
     */
    printEntity: PrintEntity;
    /**
     * 设置PrintEntity参数
     * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     */
    setPrintEntity: any;
    localeid: string;
    localpipe: LocalLangPipe;
    constructor(formatSrv: PrintFormatService, resolver: ComponentFactoryResolver, designerSrv: CloudprintdesignerService, viewerSrv: CloudprintviewerService, injector: Injector, applicationRef: ApplicationRef, notifyService: NotifyService, appService: AppService, windowService: WindowService, modalService: BsModalService);
    windowRef: WindowRef;
    /**
     * 运行时打印时根据维度过滤弹出打印格式选择列表
     * @param dataSourceId 数据源Id
     * @param filter 是否过滤条件
     * @param beOptions beOptions
     * @param options 输出options
     * @param ele 指定的element元素
     */
    private openFormatListByDimension;
    /**
     * 后台打印任务的格式选择和打印配置列表
     */
    private openFormatListByDimension4Job;
    private outputBySingleSelectionFormat;
    private outputByMultiSelectionFormat;
    /**
     * 在当前页面Body上打开Designer
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    openDesigner(format: string, data: object, formatId: string, dataIds: string): void;
    /**
     * 在当前页面的指定的元素上打开Designer
     * @param ele 指定的元素
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    openDesignerOnEle(ele: HTMLElement, format: string, data: object, formatId: string, dataIds: string): void;
    /**
     * 在新的tab页面上打开Designer
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    openDesignerNewTab(format: string, data: object, formatId: string, dataIds: string): void;
    /**
     * 运行时在当前页面的指定的元素上打开Designer
     * @param ele 指定的元素
     * @param formatCode 格式编号
     * @param formatName 格式名称
     * @param bizObjectId 业务对象Id
     * @param datasourceId 数据源Id, BEId/VOId/BesinessObjectClassInfo
     * @param sourceType 数据源类型, SourceType.BE/SourceType.VO/SourceType.BO
     */
    openDesignerOnEleForRuntime(ele: HTMLElement, formatId: string, formatCode: string, formatName: string, bizObjectId: string, datasourceId: string, sourceType: SourceType): void;
    /**
     * 在指定的元素上打开Designer(前端渲染)
     * @param ele 指定的元素
     * @param format 格式
     * @param data 数据
     * @param formatId 格式id
     * @param dataIds 数据ids
     */
    private openDesignerInternal;
    /**
     * 获取空白打印格式
     */
    private initPrintFormat;
    /**
     * 创建Designer构件的引用对象
     */
    private createDesignerRef;
    /**
     * 打开已经渲染的Viewer（后端渲染）
     * @param ele 指定的元素
     * @param data 已经渲染的格式(后端渲染是pdf的二进制流)
     */
    openRendedViewer(ele: any, data: any, options: OutputOptions, sourceOptions?: Array<BaseSourceOptions>, isFilter?: boolean, printEntity?: PrintEntity, param?: any): void;
    /**
     * 打开已经渲染的Viewer（后端渲染,给附件用的）
     * @param ele 指定的元素
     * @param data 已经渲染的格式(后端渲染是pdf的二进制流)
     */
    openRendedViewer4Attachment(ele: any, data: any, options: OutputOptions): void;
    /**
     * 本地直接打印
     */
    private preViewLocal;
    /**
     * 远程打印
     */
    private preViewRemote;
    /**
     * 创建Viewer构件的引用对象
     */
    private createViewerRef;
    /**
     * 将ComponentRef类型的组件引用转换为DOM节点（参考自Material2）
     * @param cpRef 组件的引用对象
     */
    private getComponentRootNode;
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    printSingleById(beoptions: SourceOptions, options: OutputOptions, ele: any, su?: any, param?: any): any;
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    printSingleByFilter(beFilteroptions: SourceFilterOptions, options: OutputOptions, ele: any, su?: any, param?: any): any;
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     */
    printMultiById(beOptionsList: Array<SourceOptions>, options: OutputOptions, ele: any, su?: any, param?: any): any;
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器,需要外界组织好格式和数据的对应关系
     */
    printMultiByFilter(beOptionsList: Array<SourceFilterOptions>, options: OutputOptions, ele: any, su?: any, param?: any): any;
    /**
     * 单格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    printSingleById4Job(beoptions: SourceOptions, options: OutputOptions, su?: any, param?: any): any;
    /**
     * 单格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * 1.带维度过滤格式选择器
     */
    printSingleByFilter4Job(beFilteroptions: SourceFilterOptions, options: OutputOptions, su?: any, param?: any): any;
    /**
     * 多格式数据id打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     */
    printMultiById4Job(beOptionsList: Array<SourceOptions>, options: OutputOptions, su?: any, param?: any): any;
    /**
     * 多格式过滤器打印
     * su：双栈模式下nginx路由的su
     *
     * TODO: 目前不带格式选择器
     */
    printMultiByFilter4Job(beFilteroptions: Array<SourceFilterOptions>, options: OutputOptions, su?: any, param?: any): any;
    /**
     * 创建blob对象，并利用浏览器打开url进行下载
     * @param data 文件流数据
     */
    downloadFile(data: any): void;
    /**
     * 打印（过期了，改为printSingleById）
     * @param beoptions 数据源选项
     * @param options 导出选项
     * @param ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载，
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     */
    outputBEData(beoptions: any, options: OutputOptions, ele: any): any;
    /**
     * 打印（过期了，改为printSingleByFilter）
     * @param beoptions BEFilter选项
     * @param options 导出选项
     * @param ele 预览时要渲染的主体
     * ele为空时：返回渲染流，
     * ele为tab字符串时：新的tab页打开预览器，
     * ele为download字符串时：下载
     * ele为element元素时，当前页的element上渲染预览器
     *
     * 注意beoptions里的RetrieveParam内的属性值都需要小写字母开头
     */
    outputBEDataWithFilter(beFilteroptions: any, options: OutputOptions, ele: any): any;
}
