import { Injector, ApplicationRef } from '@angular/core';
import { ComponentFactoryResolver } from '@angular/core';
import { PrintEntity } from './entitys/printEntity';
import { NotifyService } from '@farris/ui-notify';
import { AppService } from '@gsp-sys/rtf-common';
import { PrintFormatService } from './services/printFormatService';
import { PrintFormat } from './entitys/printFormat';
import { WindowService } from '@progress/kendo-angular-dialog';
import { BsModalService } from '@farris/ui-modal';
export declare class CloudprintInternalService {
    private formatSrv;
    private resolver;
    private injector;
    private applicationRef;
    private notifyService;
    private appService;
    private windowService;
    private modalService;
    /**
     * 打印参数实体
     */
    printEntity: PrintEntity;
    /**
     * 设置PrintEntity参数
     * @description 如果外界new新的PrintEntity，则需要调用该方法同步service的entity
     *              外界没有new新的PrintEntity，则不需要调用该方法
     */
    setPrintEntity: any;
    constructor(formatSrv: PrintFormatService, resolver: ComponentFactoryResolver, injector: Injector, applicationRef: ApplicationRef, notifyService: NotifyService, appService: AppService, windowService: WindowService, modalService: BsModalService);
    /**be数据源创建格式*/
    createPrintFormatWithBE(beId: string): Promise<any>;
    /**vo数据源创建格式*/
    createPrintFormatWithVO(voId: string): Promise<any>;
    /**根据数据源id获取格式*/
    getPrintFormatByDataSrouceId(sourceId: string): Promise<any>;
    /**根据数据源和维度获取格式*/
    getPrintFormatByDataSrouceAndDimension(billCategoryId: any, sourceId: any, firstDimension: any, secondDimension: any): Promise<any>;
    /**根据业务对象id获取数据源*/
    getDataSourceByBOId(boId: string): Promise<any>;
    /**根据格式id获取格式*/
    getFormatByFormatId(formatId: string): Promise<any>;
    /**根据已有的格式id和数据源id，实时获取数据源结构后组成新的格式*/
    getNewSourceFormatByFormatId(formatId: string): Promise<any>;
    /**根据已有的格式id和数据源id，语言，实时获取数据源结构后组成新的格式*/
    getNewSourceFormatByFormatIdAndLang(formatId: string, lang: string): Promise<any>;
    /**保存格式*/
    save(data: PrintFormat): Promise<any>;
    /**保存格式*/
    saveWithRes(data: PrintFormat): Promise<any>;
    /**删除格式*/
    remove(formatId: string): Promise<Object>;
    /**根据格式id获取格式*/
    getFormatById(id: string): any;
}
