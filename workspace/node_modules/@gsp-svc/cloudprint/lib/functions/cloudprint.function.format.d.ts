import { PrintFunctionUtils } from './cloudprint.function.utils';
/**
 * 云打印内置的函数
 */
export declare class PrintFunctionsOfFormat {
    /**
     * 注意：
     * 1.ArgsType的类型应该为JavaScript的类型而不是stimulsoft的类型( 这里会被官方文档干扰 )
     * 2.数据源的传递，直接在参数上些上table名就行了。
     */
    /**
     * 将枚举值转换为显示值
     */
    ParseEnumValue: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (ObjectConstructor | StringConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (realValue: string, disPlayValue: string, enumObject: any) => void;
    };
    /**
     * 将8位字符串形式的日期转换为指定格式的日期格式
     */
    Format8CharDateTime: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: StringConstructor[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (format: string, dataString: string) => void;
    };
    /**
     * 将8位字符串形式的日期转换为指定格式的日期格式
     */
    FormatDateTime: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (ObjectConstructor | StringConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (format: string, datetime: any) => void;
    };
    /**
     * 将字符串形式的日期转换为指定格式的日期格式
     */
    FormatDateTimeStr: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: StringConstructor[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (format: string, datestring: string) => void;
    };
    FormatDateTimeCN: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (ObjectConstructor | BooleanConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (datetime: any, isSimple: any, isDeleteZero: any) => void;
    };
    FormatYearCN: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (ObjectConstructor | BooleanConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (datetime: any, isSimple: any) => void;
    };
    FormatMonthCN: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (ObjectConstructor | BooleanConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (datetime: any, isSimple: any, isDeleteZero: any) => void;
    };
    FormatDayCN: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (ObjectConstructor | BooleanConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (datetime: any, isSimple: any, isDeleteZero: any) => void;
    };
    /**
     * 将阿拉伯数字转换为汉字
     */
    FormatToCurrencyNumber: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: NumberConstructor[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: typeof PrintFunctionUtils.FormatToCurrencyNumber;
    };
    /**
     * 将阿拉伯数字转换为汉字
     */
    FormatToCurrencyNumberCN: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: NumberConstructor[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: typeof PrintFunctionUtils.FormatToCurrencyNumberCN;
    };
    /**
     * 将阿拉伯数字转换为汉字
     */
    FormatToCurrencyCN: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: NumberConstructor[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: typeof PrintFunctionUtils.FormatToCurrencyCN;
    };
    /**
     * 将阿拉伯数字转换为汉字
     */
    FormatToCurrency: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: NumberConstructor[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: typeof PrintFunctionUtils.FormatToCurrency;
    };
    /**
     * 将阿拉伯数字转换为汉字
     */
    FormatFloat: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (StringConstructor | NumberConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (f: number, format: string) => void;
    };
    /**
     * 将连续出现的连接符转换为单个字符，
     * 例如将12---32转换为12-32
     */
    RemoveRepeatedJoiner: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: StringConstructor[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (joiner: string, str: string) => void;
    };
    /**
     * 根据起始页码转化页码
     */
    FormatPageIndexWithStartNumber: {
        Category: string;
        GroupFunctionName: string;
        FunctionName: string;
        Description: string;
        TypeOfFunction: string;
        ReturnType: StringConstructor;
        ReturnDescription: string;
        ArgumentTypes: (StringConstructor | NumberConstructor)[];
        ArgumentNames: string[];
        ArgumentDescriptions: string[];
        Function: (page: string, start: number) => void;
    };
}
