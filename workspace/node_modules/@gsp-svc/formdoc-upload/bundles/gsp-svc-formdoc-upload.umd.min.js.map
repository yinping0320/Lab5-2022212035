{"version":3,"sources":["ng://@gsp-svc/formdoc-upload/lib/formdoc-upload.service.ts","ng://@gsp-svc/formdoc-upload/lib/formdoc-upload.component.ts","ng://@gsp-svc/formdoc-upload/lib/formdoc-upload.module.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/doctype.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/operatingmodes.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformremovelistentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformdocoperateentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/changeinstancerequest.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/copyfilerequest.ts","ng://@gsp-svc/formdoc-upload/lib/upload/upload.service.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/uploadfileinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/extensionstoragefileinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/filestate.ts","ng://@gsp-svc/formdoc-upload/lib/i18n/language.resource.ts","ng://@gsp-svc/formdoc-upload/lib/local.pipe.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/initmultiuploadrequest.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/completemultiuploadrequest.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformstreamentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/multiuploadrequest.ts","ng://@gsp-svc/formdoc-upload/lib/upload/file-upload/file-upload.component.ts","ng://@gsp-svc/formdoc-upload/lib/upload/download.service.ts","ng://@gsp-svc/formdoc-upload/lib/upload/upload.module.ts","ng://@gsp-svc/formdoc-upload/lib/uploaddialog/uploaddialog/uploaddialog.component.ts","ng://@gsp-svc/formdoc-upload/lib/uploaddialog.service.ts","ng://@gsp-svc/formdoc-upload/lib/uploaddialog/uploaddialog.module.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/uploadlimit.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformuploadlistentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformdocinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspdocmetaproperty.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformuploadentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/fileinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspdocsecuritybaseinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/securityentity.ts"],"names":["FormdocUploadService","Injectable","args","providedIn","FormdocUploadComponent","prototype","ngOnInit","Component","selector","template","ɵ0","localStorage","getItem","FormdocUploadModule","NgModule","declarations","imports","HttpClientModule","exports","providers","LanguageService","HttpService","CacheService","SessionService","provide","LOCALE_ID","useValue","Word","Excel","Powerpoint","Pdf","Txt","Image","Other","Formal","Temp","GspFormRemoveListEntity","GspFormDocOperateEntity","ChangeInstanceRequest","CopyFileRequest","UploadService","http","httpclient","this","uploadList","docListInfo","rootId","post","pipe","tap","res","catchError","error","of","commit","metadataIdList","entity","cancel","put","removeList","idList","idListInfo","mode","OperatingModes","delete","getFile","metadataId","url","get","uploadFile","docInfo","uploadSliceFile","formdata","getStorageExtensionInfo","getSecurityInfoList","baseInfo","securityId","securityLevel","changeStorageInstance","storageInfoList","request","fileInfoList","copyFile","path","responseType","saveSecurityInfo","uploadFileInfoList","reqList","forEach","element","id","exProperty","JSON","stringify","securityInfo","push","getUploadedFileInfoList","formId","getUploadInfo","HttpClient","UploadFileInfo","ExStorageFileInfo","New","Update","LANG_RESOURCES","zh-CHS","uploading","selectedCount","limitCount","rechooseFile","save","haveSameName","rename","replace","sizeZero","sizeMax","uploadFailure","uploadSucceed","wait","saveTo","selectAll","selectNull","detail","fileName","state","operation","size","close","loading","mismatchChunkSize","en-US","en","zh-CHT","LocalLangPipe","localeId","defaultLang","langCode","lang","transform","name","Pipe","Inject","InitMultiUploadRequest","CompleteMultiUploadRequest","GspFormStreamEntity","MultiUploadRequest","FileUploadComponent","msgService","uploadService","loadService","injector","files","errFileList","errTypeList","nullFileList","beyondFileList","showType","mouseOn","bufferSize","selectedFileCount","uploadIconAddress","uploadLittleIconAddress","hasSelectedFile","fileAllSelected","uploadProcess","width","fileTotalChunk","requestArray","Array","requestBodyArray","uploadedChunk","uploadedProcess","defaultPropertyName","propertiesNames","securityInfoList","queueListStyle","dropListValue","uploadedFileTotal","haveExtensionProperty","haveSecurityInfo","uploadedFileInfoList","oldUploadedFileList","sameNameAllowed","maxFileSize","checkboxPos","top","fileType","fileCount","oldIdList","totalLoad","exStorageFileList","localeid","localepipe","_this","navigator","userAgent","indexOf","subscribe","i","toString","storageExtension","i_1","extensionPropertyNameList","parseInt","parse","validateConfiguration","allowedMultiUpload","length","radioButtonGroupValue","showLoading","fileSelected","$event","selectedFiles","document","querySelector","selectedNum","warning","selectedFile","this_1","uuid","UUID","find","x","msg_1","show","initialState","buttons","text","cls","handle","newName","oldName","flag","substring","lastIndexOf","FileState","splice","filter","name_1","listToString","name_2","name_3","slice","target","value","showErrorMessage","file","errorMessage","handleFileInfo","fileInfo","type","source","getFileSize","fileSize","picListDisplayName","getPicListDisplayName","queueListDisplayName","getQueueDisplayName","hasUploaded","selectd","isUploading","uploadResult","extensionDropListId","extensionName","securityDropListId","includes","addDocInfo","DocType","uploadFileInfo","initRequest","initMultiUpload","Message","uploadId_1","uploadId","chunkTotal","Math","ceil","chunkIndex","multiResultList_1","nextSize","min","fileData","multiRequest","index","total","formData","FormData","append","multiUpload","result","Number","toFixed","completeMultiUploadRequest","partList","exPropertyName","completeMultiUpload","status","concat","uploadSingleFile","selectAllFile","checkoutSelectFile","listDeleteFile","listMultipleDeleteFile","getElementById","checked","metadataList","allBox","selectdFile","docType","reader_1","FileReader","readAsDataURL","onload","_event","imgUrl","DomSanitizer","bypassSecurityTrustResourceUrl","strList","securityChange","data","typeChange","exStorageFileInfo","findIndex","upload","loading_1","message","map","getUploadFileInfoList","showByGroup","showByList","mouseOver","mouseOut","MessagerService","LoadingService","Injector","Input","ViewChild","DownloadService","getDownloadUrl","getToken","mergeString","getStreamDownloadUrl","getMultipleDownloadUrl","list","getMultipleDownloadUrlWithName","zipName","endsWith","encodeURIComponent","getHistoryDownloadUrl","version","str","str1","array","floor","str2","str3","randomArray","random","timeStamp","round","Date","getTime","switchStr","ɵ0$1","UploadModule","CommonModule","NotifyModule","MessagerModule","forRoot","LoadingModule","ProgressModule","FormsModule","FarrisFormsModule","ComboListModule","entryComponents","ɵa","UploadDialogComponent","modalService","showDialog","dlg","title","height","iconCls","fileUpload","showButtons","content","BsModalService","UploadDialogService","componentFactoryResolver","localpipe","Promise","resolve","viewerRef","resolveComponentFactory","create","instance","showMaxButton","beforeClose","uploadFileWithLimit","limit","uploadRef","ComponentFactoryResolver","UploadDialogMoudle","FarrisDialogModule","UploadLimit","GspFormUploadListEntity","GspFormDocInfo","GspDocMetaProperty","GspFormUploadEntity","FileInfo","GspDocSecurityBaseInfo","SecurityEntity"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormdocUploadService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-formdoc-upload',\n  template: `\n    <p>\n      formdoc-upload works!\n    </p>\n  `,\n  styles: []\n})\nexport class FormdocUploadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { LOCALE_ID, NgModule } from '@angular/core';\nimport { CacheService, HttpService, LanguageService, SessionService } from '@ecp-caf/caf-common';\nimport { FormdocUploadComponent } from './formdoc-upload.component';\nimport { LocalLangPipe } from './local.pipe';\n\n\n@NgModule({\n  declarations: [FormdocUploadComponent],\n  imports: [\n    HttpClientModule\n  ],\n  \n  exports: [FormdocUploadComponent],\n  providers:[    LanguageService,HttpService,CacheService,SessionService,\n    { provide: LOCALE_ID, useValue: localStorage.getItem('languageCode') || 'zh-CHS' },]\n})\nexport class FormdocUploadModule { }\n","export enum DocType{\r\n    Word,\r\n    Excel,\r\n    Powerpoint,\r\n    Pdf,\r\n    Txt,\r\n    Image,\r\n    Other\r\n}","export enum OperatingModes{\r\n    Formal,\r\n    Temp\r\n}","import { OperatingModes } from \"./operatingmodes\";\r\n\r\nexport class GspFormRemoveListEntity {\r\n    public metadataIdList: string[];\r\n    public mode: OperatingModes;\r\n    public rootId: string;\r\n}","export class GspFormDocOperateEntity {\r\n    public metadataIdList: string[];\r\n    public rootId: string;\r\n}","import { ExStorageFileInfo } from './extensionstoragefileinfo';\r\n\r\nexport class ChangeInstanceRequest {\r\n    public fileInfoList: ExStorageFileInfo[];\r\n    public rootId: string;\r\n}","export class CopyFileRequest{\r\n    public metadataId:string;\r\n    public rootId:string;\r\n    public path:string;\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { GspFormUploadListEntity } from './entity/gspformuploadlistentity';\r\nimport { HttpService } from '@ecp-caf/caf-common';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { GspFormRemoveListEntity } from './entity/gspformremovelistentity';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { GspFormDocOperateEntity } from './entity/gspformdocoperateentity';\r\n\r\nimport { GspFormUploadEntity } from './entity/gspformuploadentity';\r\nimport { ExStorageFileInfo } from './entity/extensionstoragefileinfo';\r\nimport { ChangeInstanceRequest } from './entity/changeinstancerequest';\r\nimport { OperatingModes } from './entity/operatingmodes';\r\nimport { GspDocSecurityBaseInfo } from './entity/gspdocsecuritybaseinfo';\r\nimport { UploadFileInfo } from './entity/uploadfileinfo';\r\nimport { ExPropertyRequest } from './entity/expropertyrequest';\r\nimport { CopyFileRequest } from './entity/copyfilerequest';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class UploadService {\r\n\r\n  constructor(private http: HttpService, private httpclient: HttpClient) { }\r\n\r\n  uploadList(docListInfo: GspFormUploadListEntity, rootId: string): Observable<any> {\r\n    let url;\r\n    docListInfo.rootId = rootId;\r\n\r\n    url = \"/api/runtime/dfs/v1.0/formdoc/list\";\r\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\r\n\r\n    return this.http.post(url, docListInfo).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n\r\n  commit(metadataIdList: string[], rootId: string): Observable<any> {\r\n    let url;\r\n    let entity: GspFormDocOperateEntity = new GspFormDocOperateEntity;\r\n    entity.metadataIdList = metadataIdList;\r\n    entity.rootId = rootId;\r\n    url = \"/api/runtime/dfs/v1.0/formdoc/commit\";\r\n    //url = \"http://localhost:5000/api/runtime/dfs/v1.0/formdoc/commit\";\r\n\r\n    return this.http.post(url, entity).pipe();\r\n  }\r\n\r\n  cancel(metadataIdList: string[], rootId: string): Observable<any> {\r\n    let url;\r\n    let entity: GspFormDocOperateEntity = new GspFormDocOperateEntity;\r\n    entity.metadataIdList = metadataIdList;\r\n    entity.rootId = rootId;\r\n    url = \"/api/runtime/dfs/v1.0/formdoc/cancel\";\r\n    //url = \"http://localhost:5000/api/runtime/dfs/v1.0/formdoc/cancel\";\r\n    //localStorage.setItem(\"SessionId\",\"huoliang\");\r\n    return this.http.put(url, entity).pipe();\r\n  }\r\n\r\n  removeList(idList: string[], rootId: string) {\r\n    let url;\r\n    //url = \"http://localhost:5000/api/runtime/dfs/v1.0/formdoc/list\";\r\n    url = \"/api/runtime/dfs/v1.0/formdoc/list\";\r\n    var idListInfo = new GspFormRemoveListEntity;\r\n    idListInfo.metadataIdList = idList;\r\n    idListInfo.mode = OperatingModes.Temp;\r\n    idListInfo.rootId = rootId;\r\n    return this.http.delete(url, idListInfo).pipe();\r\n  }\r\n\r\n  getFile(metadataId: string, rootId: string) {\r\n\r\n    let url;\r\n    if (rootId == \"\")\r\n      url = \"/api/runtime/dfs/v1.0/formdoc/file/\" + metadataId;\r\n    else\r\n      url = \"/api/runtime/dfs/v1.0/formdoc/file/\" + metadataId + \"/\" + rootId;\r\n    return this.http.get(url).pipe(tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n\r\n  }\r\n\r\n  uploadFile(docInfo: GspFormUploadEntity): Observable<any> {\r\n\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc\";\r\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\r\n\r\n    return this.http.post(url, docInfo).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  uploadSliceFile(formdata: FormData): Observable<any> {\r\n\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/slice\";\r\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\r\n\r\n    return this.httpclient.post(url, formdata).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n\r\n  getStorageExtensionInfo(): Observable<any> {\r\n    let url = \"/api/runtime/dfs/v1.0/storagestrategy/extension\";\r\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\r\n\r\n    return this.http.get(url).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  getSecurityInfoList(baseInfo: GspDocSecurityBaseInfo): Observable<any> {\r\n    let url = \"/api/runtime/dfs/v1.0/storagestrategy/security\";\r\n    url = url + \"?id=\" + baseInfo.securityId + \"&level=\" + baseInfo.securityLevel;\r\n\r\n    return this.http.get(url).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  changeStorageInstance(storageInfoList: ExStorageFileInfo[], rootId: string): Observable<any> {\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/changeinstance\";\r\n    let request: ChangeInstanceRequest = new ChangeInstanceRequest;\r\n    request.fileInfoList = storageInfoList;\r\n    request.rootId = rootId;\r\n    return this.http.post(url, request).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  copyFile(metadataId: string, rootId: string, path: string): Observable<any> {\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/copy\";\r\n    let request: CopyFileRequest = new CopyFileRequest;\r\n    request.metadataId = metadataId;\r\n    request.rootId = rootId;\r\n    request.path = path;\r\n    return this.httpclient.post(url, request,{responseType: 'text'}).pipe(\r\n      tap(res => { }),\r\n      // catchError((error: HttpErrorResponse) => {\r\n      //   return of(error);\r\n      // })\r\n      );\r\n  }\r\n\r\n  saveSecurityInfo(uploadFileInfoList: UploadFileInfo[], rootId: string): Observable<any> {\r\n    let url = \"/api/runtime/dfs/v1.0/doc/exproperty\";\r\n    let reqList: ExPropertyRequest[] = [];\r\n    uploadFileInfoList.forEach(element => {\r\n      let request: ExPropertyRequest = { id: element.metadataId, rootId: rootId, exProperty: JSON.stringify(element.securityInfo) };\r\n      reqList.push(request);\r\n    })\r\n    return this.http.post(url, reqList).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }))\r\n  }\r\n\r\n\r\n  getUploadedFileInfoList(formId: string, rootId: string): Observable<any> {\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/uploadedfile/infolist\" + \"?formid=\" + formId + \"&rootid=\" + rootId;\r\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\r\n\r\n    return this.http.get(url).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n    getUploadInfo(rootId: string): Observable<any> {\r\n    let url = \"/api/runtime/dfs/v1.0/rootsetting/info?id=\" + rootId;\r\n\r\n    return this.http.get(url).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  // getRootSetting(rootId: string): Observable<any> {\r\n  //   let url = \"/api/runtime/dfs/v1.0/rootsetting/\" + rootId;\r\n\r\n  //   return this.http.get(url).pipe(\r\n  //     tap(res => { }),\r\n  //     catchError((error: HttpErrorResponse) => {\r\n  //       return of(error);\r\n  //     }));\r\n  // }\r\n\r\n  // getValidation(id: string): Observable<any> {\r\n  //   let url = \"/api/runtime/dfs/v1.0/validation/\" + id;\r\n\r\n  //   return this.http.get(url).pipe(\r\n  //     tap(res => { }),\r\n  //     catchError((error: HttpErrorResponse) => {\r\n  //       return of(error);\r\n  //     }));\r\n  // }\r\n\r\n}\r\n","import { FileState } from \"./filestate\";\r\nimport { SecurityEntity } from \"./securityentity\";\r\n\r\nexport class UploadFileInfo {\r\n\r\n    public metadataId: string;\r\n    public fileName: string;\r\n    public fileSize: string;\r\n    public state: FileState;\r\n    public securityInfo: SecurityEntity;\r\n\r\n}","export class ExStorageFileInfo {\r\n    public metadataId: string;\r\n    public exPropertyName: string;\r\n}","export enum FileState{\r\n    New,\r\n    Update\r\n}","export const LANG_RESOURCES = {\r\n    'zh-CHS': {\r\n        'uploadFile': 'ä¸ä¼ æä»¶',\r\n        'uploading':'æ­£å¨ä¸ä¼ æä»¶â¦â¦',\r\n        'selectedCount':'å·²éæ©æä»¶æ°éï¼',\r\n        'limitCount':'è¶åºç³»ç»éå¶æ°éï¼',\r\n        'rechooseFile':',éæ°éæ©ä¸ä¼ æä»¶ã',\r\n        'save':'ä¿å­',\r\n        'cancel':'åæ¶',\r\n        'haveSameName':'å·²ä¸ä¼ è¿ååæä»¶: ',\r\n        'rename':'éå½å',\r\n\t\t'replace':'æ¿æ¢',\r\n        'sizeZero':'æä»¶å¤§å°ä¸º0',\r\n        'sizeMax':'æä»¶å¤§å°è¶åºéå¶',\r\n        'uploadFailure':'ä¸ä¼ å¤±è´¥',\r\n        'uploadSucceed':'ä¸ä¼ æå',\r\n        'wait':'ç­ä¸ä¸ï¼ææ¡£æ­£å¨ä¸ä¼ ã',\r\n        'saveTo':'æ­£å¨å°æä»¶ä¿å­å°',\r\n        'delete':'å é¤',\r\n        'selectAll':'å¨é',\r\n        'selectNull':'å¨ä¸é',\r\n        'detail':'è¯¦æ',\r\n        'fileName':'æä»¶å',\r\n        'state':'ç¶æ',\r\n        'operation':'æä½',\r\n        'size':'å¤§å°',\r\n        'close':'å³é­',\r\n        'loading':'æ¼å½å è½½ä¸­',\r\n        'mismatchChunkSize':'ææ¡£åçä¸ä¼ é¨åä¸¢å¤±ï¼è¯·éæ°ä¸ä¼ ï¼å¦æå¤æ¬¡ä¸ä¼ å¤±è´¥ï¼è¯·èç³»ç®¡çåã'\r\n    },\r\n    'en-US': {\r\n        'uploadFile': 'Upload File',\r\n        'uploading':'File Uploadingâ¦â¦',\r\n        'selectedCount':'Selected files countï¼',\r\n        'limitCount':'System limit countï¼',\r\n        'rechooseFile':',Reselect upload file.',\r\n        'save':'Save',\r\n        'cancel':'Cancel',\r\n        'haveSameName':'A file with the same name has been uploaded: ',\r\n        'rename':'Rename',\r\n\t\t'replace':'Replace',\r\n        'sizeZero':'File size is 0',\r\n        'sizeMax':'File size beyond limit',\r\n        'uploadFailure':'Upload failed',\r\n        'uploadSucceed':'Upload successfully',\r\n        'wait':'Wait a minute, the file is uploading.',\r\n        'saveTo':'Saving file to',\r\n        'delete':'Delete',\r\n        'selectAll':'Select all',\r\n        'selectNull':'Not at all',\r\n        'detail':'Details',\r\n        'fileName':'Filename',\r\n        'state':'State',\r\n        'operation':'Operation',\r\n        'size':'Size',\r\n        'close':'Close',\r\n        'loading':'Loading',\r\n        'mismatchChunkSize':'The partial upload of document shards is missing. Please upload again. If multiple uploads fail, please contact the administrator.'\r\n    },\r\n    'en': {\r\n        'uploadFile': 'Upload File',\r\n        'uploading':'File Uploadingâ¦â¦',\r\n        'selectedCount':'Selected files countï¼',\r\n        'limitCount':'System limit countï¼',\r\n        'rechooseFile':',Reselect upload file.',\r\n        'save':'Save',\r\n        'cancel':'Cancel',\r\n        'haveSameName':'A file with the same name has been uploaded: ',\r\n        'rename':'Rename',\r\n\t\t'replace':'Replace',\r\n        'sizeZero':'File size is 0',\r\n        'sizeMax':'File size beyond limit',\r\n        'uploadFailure':'Upload failed',\r\n        'uploadSucceed':'Upload successfully',\r\n        'wait':'Wait a minute, the file is uploading.',\r\n        'saveTo':'Saving file to',\r\n        'delete':'Delete',\r\n        'selectAll':'Select all',\r\n        'selectNull':'Not at all',\r\n        'detail':'Details',\r\n        'fileName':'Filename',\r\n        'state':'State',\r\n        'operation':'Operation',\r\n        'size':'Size',\r\n        'close':'Close',\r\n        'loading':'Loading',\r\n        'mismatchChunkSize':'The partial upload of document shards is missing. Please upload again. If multiple uploads fail, please contact the administrator.'\r\n    },\r\n    'zh-CHT': {\r\n        'uploadFile': 'ä¸å³æä»¶',\r\n        'uploading':'æ­£å¨ä¸å³æä»¶â¦â¦',\r\n        'selectedCount':'å·²é¸ææä»¶æ¸éï¼',\r\n        'limitCount':'è¶åºç³»çµ±éå¶æ¸éï¼',\r\n        'rechooseFile':',éæ°é¸æä¸å³æä»¶ã',\r\n        'save':'ä¿å­',\r\n        'cancel':'åæ¶',\r\n        'haveSameName':'å·²ä¸å³éååæä»¶: ',\r\n        'rename':'éå½å',\r\n\t\t'replace':'æ¿æ',\r\n        'sizeZero':'æä»¶å¤§å°çº0',\r\n        'sizeMax':'æä»¶å¤§å°è¶åºéå¶',\r\n        'uploadFailure':'ä¸å³å¤±æ',\r\n        'uploadSucceed':'ä¸å³æå',\r\n        'wait':'ç­ä¸ä¸ï¼æä»¶æ­£å¨ä¸å³ã',\r\n        'saveTo':'æ­£å¨å°æä»¶ä¿å­å°',\r\n        'delete':'å é¤',\r\n        'selectAll':'å¨é¸',\r\n        'selectNull':'å¨ä¸é¸',\r\n        'detail':'è©³æ',\r\n        'fileName':'æä»¶å',\r\n        'state':'çæ',\r\n        'operation':'æä½',\r\n        'size':'å¤§å°',\r\n        'close':'éé',\r\n        'loading':'æ¼å½å è¼ä¸­',\r\n        'mismatchChunkSize':'ææªåçä¸å³é¨åéºå¤±ï¼è«éæ°ä¸å³ï¼å¦æå¤æ¬¡ä¸å³å¤±æï¼è«è¯ç³»ç®¡çå¡ã'\r\n    },\r\n};","import { Pipe, PipeTransform, Inject, LOCALE_ID } from '@angular/core';\r\nimport { LANG_RESOURCES } from './i18n/language.resource';\r\n\r\n@Pipe({ name: 'locale' })\r\nexport class LocalLangPipe implements PipeTransform {\r\n    private readonly defaultLang: string = \"zh-CHS\";\r\n    private langCode: string;\r\n    private lang: {};\r\n    constructor(\r\n        @Inject(LOCALE_ID) localeId: string\r\n    ) {\r\n        this.langCode = localStorage.getItem(\"languageCode\") || localeId || this.defaultLang;\r\n        this.lang = LANG_RESOURCES[this.langCode] || LANG_RESOURCES[this.defaultLang];\r\n    }\r\n    transform(name: string): any {\r\n        return this.lang[name] || name;\r\n    }\r\n}\r\n\r\n","export class InitMultiUploadRequest {\r\n    public path: string;\r\n    public metadataId: string;\r\n    public rootId: string;\r\n    public fileName: string;\r\n    public size: number;\r\n}","import { MultiUploadResult } from \"./multiuploadresult\";\r\n\r\nexport class CompleteMultiUploadRequest {\r\n    public metadataId: string;\r\n    public rootId: string;\r\n    public uploadId: string;\r\n    public size: number;\r\n    public partList: MultiUploadResult[];\r\n    public exPropertyName: string;\r\n}","import { GspDocMetaProperty } from \"./gspdocmetaproperty\";\r\nimport { OperatingModes } from \"./operatingmodes\";\r\n\r\nexport class GspFormStreamEntity {\r\n    public formId: string;\r\n    public metadataId: string;\r\n    public rootId: string;\r\n    public fileName: string;\r\n    public size: number;\r\n    public mode: OperatingModes;\r\n    public exPropertyName: string;\r\n    public extProperty: GspDocMetaProperty;\r\n}","export class MultiUploadRequest {\r\n    public metadataId: string;\r\n\r\n    public total: number;\r\n\r\n    public size: number;\r\n\r\n    public index: number;\r\n\r\n    public rootId: string;\r\n\r\n    public uploadId: string;\r\n}","import { Component, OnInit, Input, ViewChild, TemplateRef, Injector, LOCALE_ID } from '@angular/core';\r\nimport { FileInfo } from '../entity/fileinfo';\r\nimport { DocType } from '../entity/doctype';\r\nimport { GspFormDocInfo } from '../entity/gspformdocinfo';\r\nimport { OperatingModes } from '../entity/operatingmodes';\r\nimport { UploadService } from '../upload.service';\r\nimport { UploadFileInfo } from '../entity/uploadfileinfo';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport { GspFormUploadEntity } from '../entity/gspformuploadentity';\r\nimport { UUID } from 'angular2-uuid';\r\nimport { StorageExtension } from '../entity/storageextension';\r\nimport { ExStorageFileInfo } from '../entity/extensionstoragefileinfo';\r\nimport { DropListEntity } from '../entity/droplistentity';\r\nimport { LoadingService } from '@farris/ui-loading';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { FileState } from '../entity/filestate';\r\nimport { LocalLangPipe } from '../../local.pipe';\r\nimport { GspDocSecurityBaseInfo } from '../entity/gspdocsecuritybaseinfo';\r\nimport { SecurityEntity } from '../entity/securityentity';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { InitMultiUploadRequest } from '../entity/initmultiuploadrequest';\r\nimport { CompleteMultiUploadRequest } from '../entity/completemultiuploadrequest';\r\nimport { GspFormStreamEntity } from '../entity/gspformstreamentity';\r\nimport { MultiUploadRequest } from '../entity/multiuploadrequest';\r\nimport { MultiUploadResult } from '../entity/multiuploadresult';\r\n\r\n\r\n@Component({\r\n  selector: 'app-file-upload',\r\n  templateUrl: './file-upload.component.html',\r\n  styleUrls: ['./file-upload.component.css'],\r\n})\r\nexport class FileUploadComponent implements OnInit {\r\n\r\n  files: FileInfo[] = [];\r\n  metadataIdList: string[] = [];\r\n  uploadFileInfoList: UploadFileInfo[] = [];\r\n  errFileList: string[] = [];\r\n  errTypeList: string[] = [];\r\n  nullFileList: string[] = [];\r\n  beyondFileList: string[] = [];\r\n  showType: number = 0;\r\n  mouseOn: boolean = false;\r\n  bufferSize = 5 * 1024 * 1024;\r\n  selectedFiles: any;\r\n  radioButtonGroupValue;\r\n  selectedFileCount: number = 0;\r\n\r\n  uploadIconAddress = '/platform/runtime/dfs/images/upload.svg';\r\n  uploadLittleIconAddress = '/platform/runtime/dfs/images/uploadIcon.svg';\r\n\r\n  hasSelectedFile: boolean = false;\r\n\r\n  fileAllSelected: boolean = false;\r\n\r\n  uploadProcess = { width: '0%' };\r\n\r\n  fileTotalChunk: { [key: string]: number } = {};\r\n\r\n  requestArray: Array<Observable<any>> = new Array;\r\n\r\n  requestBodyArray: Array<GspFormUploadEntity> = new Array;\r\n\r\n  uploadedChunk: { [key: string]: number } = {};\r\n  uploadedProcess: { [key: string]: number } = {};\r\n\r\n  //allSelected: boolean = true;\r\n  storageExtension: StorageExtension;\r\n\r\n  defaultPropertyName: string = \"\";\r\n  propertiesNames: DropListEntity[] = [];\r\n\r\n  securityInfoList: SecurityEntity[] = [];\r\n\r\n  queueListStyle = { width: '480px' };\r\n\r\n  dropListValue: string = \"\";\r\n\r\n  uploadedFileTotal: number = 0;\r\n\r\n  allowedMultiUpload: boolean;\r\n\r\n  haveExtensionProperty: boolean = false;\r\n\r\n  haveSecurityInfo: boolean = false;\r\n\r\n  uploadedFileInfoList = [];\r\n  oldUploadedFileList = [];\r\n  //uploadedNameList = [];\r\n\r\n  sameNameAllowed = true;\r\n  maxFileSize: number = 0;;\r\n  localeid: string;\r\n  localepipe: LocalLangPipe;\r\n  httpclient: HttpClient;\r\n  checkboxPos = { top: '0px' }\r\n\r\n  constructor(private msgService: MessagerService, private uploadService: UploadService, private loadService: LoadingService, private injector?: Injector) {\r\n    if (this.injector) {\r\n      this.httpclient = this.injector.get(HttpClient);\r\n      this.localeid = localStorage.getItem(\"languageCode\") || this.injector.get(LOCALE_ID);\r\n      this.localepipe = new LocalLangPipe(this.localeid);\r\n    }\r\n  }\r\n  @Input() formId: string;\r\n  @Input() rootId: string;\r\n  @Input() fileType: string = \"*\";\r\n  @Input() fileCount: number = 0;\r\n  @Input() oldIdList: string[] = [];\r\n  @Input() securityInfo: GspDocSecurityBaseInfo = null;\r\n\r\n  @ViewChild('opCell') opCell: TemplateRef<any>;\r\n\r\n  ngOnInit() {\r\n    if (navigator.userAgent.indexOf('Firefox') >= 0)\r\n      this.checkboxPos.top = '14px';\r\n    //if (this.storageService != null) {\r\n    if (this.securityInfo != null) {\r\n      this.uploadService.getSecurityInfoList(this.securityInfo).subscribe(\r\n        res => {\r\n          this.haveSecurityInfo = true;\r\n          let i = 0;\r\n          res.forEach(element => {\r\n            this.securityInfoList.push({ id: i.toString(), securityId: element.securityId, securityLevel: element.securityLevel, name: element.name });\r\n            i++;\r\n          });\r\n        }\r\n      )\r\n    }\r\n    this.uploadService.getStorageExtensionInfo().subscribe(\r\n      res => {\r\n        if (res != null && res.error == null) {\r\n          this.storageExtension = res;\r\n          this.defaultPropertyName = this.storageExtension.defaultPropertyName;\r\n          this.propertiesNames.push({ id: \"0\", name: this.storageExtension.defaultPropertyName });\r\n          let i = 0;\r\n          // this.propertiesNames.push(...(this.storageExtension.extensionPropertyNameList));\r\n          this.storageExtension.extensionPropertyNameList.forEach(element => {\r\n            this.propertiesNames.push({ id: (++i).toString(), name: element });\r\n          });\r\n          this.queueListStyle.width = '380px';\r\n          this.haveExtensionProperty = true;\r\n        }\r\n      }\r\n    )\r\n\r\n    this.uploadService.getUploadInfo(this.rootId).subscribe(\r\n      res => {\r\n        if (res != null && res.error == null) {\r\n          this.sameNameAllowed = res.sameNameAllowed;\r\n          this.maxFileSize = parseInt(JSON.parse(res.validateConfiguration).maxFileSize);\r\n          this.allowedMultiUpload = res.allowedMultiUpload;\r\n          if (!this.sameNameAllowed) {\r\n            this.uploadService.getUploadedFileInfoList(this.formId, this.rootId).subscribe(\r\n              res => {\r\n                if (res != null && res.error == null) {\r\n                  this.uploadedFileInfoList = res;\r\n                  this.oldUploadedFileList = JSON.parse(JSON.stringify(res));;\r\n\r\n                }\r\n              })\r\n          }\r\n\r\n        }\r\n      }\r\n    )\r\n    if (this.oldIdList != null && this.oldIdList.length > 0) {\r\n      // this.uploadService.cancel(this.oldIdList, this.rootId).subscribe();\r\n    }\r\n\r\n    this.radioButtonGroupValue = 'showByGroup';\r\n  }\r\n\r\n  totalLoad: any = null;\r\n\r\n  showLoading() {\r\n    this.hasSelectedFile = true;\r\n    // if (this.totalLoad == null)\r\n    //   this.totalLoad = this.loadService.show({\r\n    //     message: this.localepipe.transform('uploading')\r\n    //   });\r\n  }\r\n\r\n\r\n  fileSelected($event) {\r\n\r\n    this.hasSelectedFile = true;\r\n    this.selectedFiles = document.querySelector('#file');\r\n\r\n    if (this.fileCount > 0) {\r\n      if (this.selectedFiles.files.length + this.files.length > this.fileCount) {\r\n        let selectedNum: number = (this.selectedFiles.files.length as number) + this.files.length;\r\n        this.msgService.warning(this.localepipe.transform('selectedCount') + selectedNum + this.localepipe.transform('limitCount') + this.fileCount + this.localepipe.transform('rechooseFile'));\r\n        return;\r\n      }\r\n    }\r\n\r\n    //this.flag = 0;\r\n    for (let i = 0; i < this.selectedFiles.files.length; i++) {\r\n      let selectedFile = this.selectedFiles.files[i];\r\n      //selectedFile.slice\r\n      let uuid = UUID.UUID();\r\n\r\n      if (selectedFile.size == 0) {\r\n        this.nullFileList.push(selectedFile.name);\r\n        continue;\r\n      }\r\n\r\n      if (this.maxFileSize != null && this.maxFileSize > 0) {\r\n        if (selectedFile.size > this.maxFileSize * 1000) {\r\n          this.beyondFileList.push(selectedFile.name);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (!this.sameNameAllowed) {\r\n        if (this.uploadedFileInfoList.find(x => x.fileName == selectedFile.name) != null) {\r\n\r\n          const msg = this.msgService.show('warning', this.localepipe.transform('haveSameName') + selectedFile.name, {\r\n            initialState: {\r\n              buttons: [\r\n                {\r\n                  text: this.localepipe.transform('rename'),\r\n                  cls: 'btn btn-secondary',\r\n                  handle: () => {\r\n                    let oldName: string = selectedFile.name;\r\n                    let newName\r\n                    let flag = true;\r\n                    let i = 1;\r\n                    while (flag) {\r\n                      newName = oldName.substring(0, oldName.lastIndexOf('.')) + '(' + i + ')' + oldName.substring(oldName.lastIndexOf('.'));\r\n                      if (this.uploadedFileInfoList.find(x => x.fileName == newName) != null) {\r\n                        i++;\r\n                      }\r\n                      else\r\n                        flag = false;\r\n                    }\r\n\r\n                    this.uploadFile(uuid, selectedFile, newName);\r\n                    msg.close();\r\n                  }\r\n                },\r\n                {\r\n                  text: this.localepipe.transform('replace'),\r\n                  cls: 'btn btn-secondary',\r\n                  handle: () => {\r\n                    uuid = this.uploadedFileInfoList.find(x => x.fileName == selectedFile.name).metadataId;\r\n                    this.uploadFile(uuid, selectedFile, selectedFile.name, FileState.Update);\r\n                    this.uploadedFileTotal--;\r\n                    if (this.oldUploadedFileList.find(x => x.fileName == selectedFile.name)) {\r\n                      this.uploadedFileTotal++;\r\n                      this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter(x => x.fileName == selectedFile.name)[0]), 1);\r\n                    }\r\n                    msg.close();\r\n                  }\r\n                },\r\n                {\r\n                  text: this.localepipe.transform('cancel'),\r\n                  cls: 'btn btn-secondary',\r\n                  handle: () => {\r\n                    msg.close();\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          })\r\n          continue;\r\n        }\r\n      }\r\n      this.uploadFile(uuid, selectedFile, selectedFile.name);\r\n\r\n    }\r\n\r\n    if (this.errFileList.length > 0) {\r\n      let name: string = this.listToString(this.errFileList);\r\n      this.msgService.warning(this.localepipe.transform('haveSameName') + name + this.localepipe.transform('rechooseFile'));\r\n      this.errFileList = [];\r\n    }\r\n\r\n    if (this.nullFileList.length > 0) {\r\n      let name: string = this.listToString(this.nullFileList);\r\n      name = name.substring(0, name.length - 1);\r\n      this.msgService.warning(name + this.localepipe.transform('sizeZero') + this.localepipe.transform('rechooseFile'));\r\n      this.nullFileList = [];\r\n    }\r\n\r\n    if (this.beyondFileList.length > 0) {\r\n      let name: string = this.listToString(this.beyondFileList);\r\n      name = name.substring(0, name.length - 1);\r\n      this.msgService.warning(name + this.localepipe.transform('sizeMax') + this.maxFileSize + \"KB\" + this.localepipe.transform('rechooseFile'));\r\n      this.beyondFileList = [];\r\n    }\r\n    this.files = this.files.slice();\r\n    this.fileAllSelected = false;\r\n    $event.target.value = '';\r\n    // loading.close();\r\n  }\r\n\r\n  showErrorMessage(file) {\r\n    this.msgService.error(this.localepipe.transform('uploadFailure') + file.errorMessage);\r\n  }\r\n\r\n  handleFileInfo(uuid: string, selectedFile, fileName: string): any {\r\n\r\n    let fileInfo: FileInfo;\r\n\r\n    fileInfo = {\r\n      id: uuid,\r\n      name: fileName,\r\n      type: selectedFile.type,\r\n      source: \"\",\r\n      size: this.getFileSize(selectedFile.size),\r\n      fileSize: selectedFile.size,\r\n      picListDisplayName: this.getPicListDisplayName(fileName),\r\n      queueListDisplayName: this.getQueueDisplayName(fileName),\r\n      //content: reader.result.toString(),\r\n      hasUploaded: false,\r\n      mouseOn: false,\r\n      selectd: false,\r\n      isUploading: true,\r\n      uploadResult: false,\r\n      uploadProcess: 0,\r\n      errorMessage: \"\",\r\n      extensionDropListId: 0,\r\n      extensionName: \"\",\r\n      securityDropListId: 0,\r\n      securityInfo: this.securityInfoList[0]\r\n    }\r\n\r\n    if (this.storageExtension != null)\r\n      fileInfo.extensionName = this.defaultPropertyName;\r\n\r\n\r\n    let type: string = selectedFile.type;\r\n    if (type.includes(\"tiff\")) {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Other);\r\n    }\r\n    else if (type.includes(\"image\")) {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Image);\r\n    }\r\n    else if (type.includes(\"word\")) {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Word);\r\n    }\r\n    else if (type.includes(\"pdf\")) {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Pdf);\r\n    }\r\n    else if (type.includes(\"plain\")) {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Txt);\r\n    }\r\n    else if (type.includes(\"sheet\") || type.includes(\"excel\")) {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Excel)\r\n    }\r\n    else if (type.includes(\"powerpoint\") || type.includes(\"presentation\")) {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Powerpoint);\r\n    }\r\n    else {\r\n      this.addDocInfo(selectedFile, fileInfo, DocType.Other);\r\n      // let name: string = selectedFile.name;\r\n      // let errType = name.substring(selectedFile.name.lastIndexOf('.'));\r\n      // this.errTypeList.push(errType);\r\n    }\r\n    return fileInfo;\r\n  }\r\n\r\n  uploadFile(uuid: string, selectedFile, fileName: string, state: FileState = FileState.New) {\r\n\r\n    let fileInfo = this.handleFileInfo(uuid, selectedFile, fileName);\r\n\r\n    let uploadFileInfo = new UploadFileInfo();\r\n\r\n    uploadFileInfo.metadataId = uuid;\r\n    uploadFileInfo.fileName = fileInfo.name;\r\n    uploadFileInfo.fileSize = fileInfo.size;\r\n    uploadFileInfo.state = state;\r\n    uploadFileInfo.securityInfo = this.securityInfoList[0];\r\n\r\n\r\n    //å¤æ­æ¯å¦æ¯æåçä¸ä¼ \r\n    if (this.allowedMultiUpload) {\r\n\r\n      //æ¯æåçä¸ä¼ \r\n      let initRequest: InitMultiUploadRequest = new InitMultiUploadRequest;\r\n\r\n      initRequest.path = this.formId;\r\n      initRequest.metadataId = uuid;\r\n      initRequest.rootId = this.rootId;\r\n      initRequest.size = fileInfo.fileSize;\r\n      initRequest.fileName = fileName;\r\n\r\n      //åå§ååç\r\n      this.initMultiUpload(initRequest).subscribe(res => {\r\n        if (res.error != null) {\r\n          this.files[this.files.indexOf(fileInfo)].uploadResult = false;\r\n          this.files[this.files.indexOf(fileInfo)].isUploading = false;\r\n          this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;\r\n        } else {\r\n          let uploadId = res.uploadId;\r\n          let chunkTotal: number = Math.ceil(selectedFile.size / this.bufferSize);\r\n          let chunkIndex: number = 0;\r\n\r\n          let multiResultList: MultiUploadResult[] = [];\r\n\r\n          this.fileTotalChunk[uuid] = chunkTotal;\r\n          this.uploadedChunk[uuid] = 0;\r\n\r\n          while (chunkIndex < chunkTotal) {\r\n\r\n            let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, selectedFile.size);\r\n            let fileData = selectedFile.slice(chunkIndex * this.bufferSize, nextSize);\r\n\r\n            let multiRequest = new MultiUploadRequest;\r\n            multiRequest.metadataId = uuid;\r\n            multiRequest.rootId = this.rootId;\r\n            multiRequest.uploadId = uploadId;\r\n            multiRequest.index = chunkIndex;\r\n            multiRequest.total = chunkTotal;\r\n            multiRequest.size = fileData.size;\r\n\r\n            let formData = new FormData();\r\n            formData.append('multiRequest', JSON.stringify(multiRequest));\r\n            formData.append('file', fileData);\r\n\r\n            this.multiUpload(formData).subscribe(res => {\r\n              if (res.error != null) {\r\n                this.files[this.files.indexOf(fileInfo)].uploadResult = false;\r\n                this.files[this.files.indexOf(fileInfo)].isUploading = false;\r\n                this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;\r\n              } else {\r\n                multiResultList.push(res.result);\r\n                this.uploadedChunk[uuid]++;\r\n                this.files[this.files.indexOf(fileInfo)].uploadProcess = Number.parseInt((this.uploadedChunk[uuid] / this.fileTotalChunk[uuid] * 100).toFixed(0));\r\n                if (this.uploadedChunk[uuid] == this.fileTotalChunk[uuid]) {\r\n                  if (multiResultList.length == this.fileTotalChunk[uuid]) {\r\n\r\n                    let completeMultiUploadRequest: CompleteMultiUploadRequest = new CompleteMultiUploadRequest;\r\n                    completeMultiUploadRequest.metadataId = uuid;\r\n                    completeMultiUploadRequest.partList = multiResultList;\r\n                    completeMultiUploadRequest.rootId = this.rootId;\r\n                    completeMultiUploadRequest.uploadId = uploadId;\r\n                    completeMultiUploadRequest.size = fileInfo.fileSize;\r\n                    if (this.haveExtensionProperty)\r\n                      completeMultiUploadRequest.exPropertyName = this.defaultPropertyName;\r\n                    this.completeMultiUpload(completeMultiUploadRequest).subscribe(res => {\r\n                      if (res.status != 200) {\r\n                        this.files[this.files.indexOf(fileInfo)].uploadResult = false;\r\n                        this.files[this.files.indexOf(fileInfo)].isUploading = false;\r\n                        this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;\r\n                      } else {\r\n                        this.files[this.files.indexOf(fileInfo)].uploadResult = true;\r\n                        this.files[this.files.indexOf(fileInfo)].isUploading = false;\r\n                        this.uploadFileInfoList = this.uploadFileInfoList.concat(uploadFileInfo);\r\n                        this.uploadedFileInfoList = this.uploadedFileInfoList.concat(uploadFileInfo);\r\n                        this.uploadedFileTotal++;\r\n                      }\r\n                    })\r\n                    //åå°å¼æ­¥æ¼æ¥ææ¡£\r\n                  } else {\r\n                    this.files[this.files.indexOf(fileInfo)].uploadResult = false;\r\n                    this.files[this.files.indexOf(fileInfo)].isUploading = false;\r\n                    this.files[this.files.indexOf(fileInfo)].errorMessage = this.localepipe.transform('mismatchChunkSize');\r\n                  }\r\n\r\n                }\r\n              }\r\n            })\r\n\r\n            chunkIndex = chunkIndex + 1;\r\n          }\r\n        }\r\n\r\n      })\r\n\r\n    } else {\r\n      let entity = new GspFormStreamEntity;\r\n      entity.formId = this.formId;\r\n      entity.metadataId = uuid;\r\n      entity.mode = OperatingModes.Temp;\r\n      entity.rootId = this.rootId;\r\n      entity.size = selectedFile.size;\r\n      entity.fileName = fileName;\r\n      if (this.haveExtensionProperty)\r\n        entity.exPropertyName = this.defaultPropertyName;\r\n\r\n      let formData = new FormData();\r\n      formData.append('uploadEntity', JSON.stringify(entity));\r\n      formData.append('file', selectedFile);\r\n\r\n      this.uploadSingleFile(formData).subscribe(res => {\r\n        if (res != null) {\r\n          this.files[this.files.indexOf(fileInfo)].uploadResult = false;\r\n          this.files[this.files.indexOf(fileInfo)].isUploading = false;\r\n          this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;\r\n        } else {\r\n          this.files[this.files.indexOf(fileInfo)].uploadResult = true;\r\n          this.files[this.files.indexOf(fileInfo)].isUploading = false;\r\n          this.uploadFileInfoList = this.uploadFileInfoList.concat(uploadFileInfo);\r\n          this.uploadedFileInfoList = this.uploadedFileInfoList.concat(uploadFileInfo);\r\n          this.uploadedFileTotal++;\r\n\r\n        }\r\n      })\r\n\r\n    }\r\n\r\n\r\n\r\n    let index = -1;\r\n    this.files.forEach(x => {\r\n      if (x.name == fileInfo.name) {\r\n        if (index == -1)\r\n          index = this.files.indexOf(x);\r\n      }\r\n    })\r\n    if (index != -1 && index != this.files.length - 1) {\r\n      this.files.splice(index, 1);\r\n      this.uploadFileInfoList.splice(index, 1);\r\n      this.uploadedFileInfoList.splice(index, 1);\r\n      //this.uploadedFileTotal--;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  uploadSingleFile(formdata: FormData): Observable<any> {\r\n\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/single\";\r\n\r\n    return this.httpclient.post(url, formdata).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  uploadSliceFile(formdata: FormData): Observable<any> {\r\n\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/slice\";\r\n\r\n    return this.httpclient.post(url, formdata).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  initMultiUpload(request: InitMultiUploadRequest): Observable<any> {\r\n\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/multi/init\";\r\n\r\n    return this.httpclient.post(url, request).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  multiUpload(formdata: FormData): Observable<any> {\r\n\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/multi/upload\";\r\n\r\n    return this.httpclient.post(url, formdata).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n  completeMultiUpload(request: CompleteMultiUploadRequest): Observable<any> {\r\n\r\n    let url = \"/api/runtime/dfs/v1.0/formdoc/multi/complete\";\r\n\r\n    return this.httpclient.post(url, request).pipe(\r\n      tap(res => { }),\r\n      catchError((error: HttpErrorResponse) => {\r\n        return of(error);\r\n      }));\r\n  }\r\n\r\n\r\n\r\n  selectAllFile() {\r\n\r\n    if (!this.fileAllSelected) {\r\n      this.files.forEach(element => {\r\n\r\n        element.selectd = true;\r\n      });\r\n      this.fileAllSelected = true;\r\n      this.selectedFileCount = this.files.length;\r\n\r\n    } else {\r\n      this.files.forEach(element => {\r\n\r\n        element.selectd = false;\r\n      });\r\n      this.fileAllSelected = false;\r\n      this.selectedFileCount = 0;\r\n    }\r\n  }\r\n\r\n\r\n  checkoutSelectFile(file: FileInfo) {\r\n    // let obj: any = document.getElementById(fileName);\r\n    file.selectd = !file.selectd;\r\n    if (file.selectd)\r\n      this.selectedFileCount++;\r\n    else\r\n      this.selectedFileCount--;\r\n    if (this.selectedFileCount == this.files.length) {\r\n      this.fileAllSelected = true;\r\n      //this.isFileAllSelected();\r\n    }\r\n    else {\r\n      this.fileAllSelected = false;\r\n      //this.isFileAllSelected();\r\n    }\r\n\r\n  }\r\n\r\n  listDeleteFile(fileInfo: FileInfo) {\r\n    if (fileInfo.selectd)\r\n      this.selectedFileCount--;\r\n    //console.log(fileName);\r\n    this.files.splice(this.files.indexOf(fileInfo), 1);\r\n    if (fileInfo.uploadResult) {\r\n      let idList: string[] = [];\r\n      idList.push(fileInfo.id);\r\n      this.uploadService.cancel(idList, this.rootId).subscribe();\r\n\r\n      this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter(x => x.fileName == fileInfo.name)[0]), 1);\r\n      this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter(x => x.fileName == fileInfo.name)[0]), 1);\r\n      this.uploadedFileTotal--;\r\n    }\r\n    if (this.selectedFileCount == 0)\r\n      this.fileAllSelected = false;\r\n  }\r\n\r\n  listMultipleDeleteFile() {\r\n    let selectedFile: FileInfo[] = [];\r\n    this.files.forEach(element => {\r\n      let obj: any = document.getElementById(element.name);\r\n      if (obj.checked)\r\n        selectedFile.push(element);\r\n    })\r\n    let metadataList: string[] = [];\r\n    selectedFile.forEach(element => {\r\n      metadataList.push(element.id);\r\n      this.files.splice(this.files.indexOf(element), 1);\r\n      if (element.uploadResult) {\r\n\r\n        this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter(x => x.fileName == element.name)[0]), 1);\r\n        this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter(x => x.fileName == element.name)[0]), 1);\r\n        this.uploadedFileTotal--;\r\n      }\r\n    })\r\n    this.uploadService.cancel(metadataList, this.rootId).subscribe();\r\n\r\n    let allBox: any = document.getElementById(\"allCheckBox\");\r\n    if (allBox != null)\r\n      allBox.checked = false;\r\n    this.selectedFileCount = 0;\r\n    this.fileAllSelected = false;\r\n  }\r\n\r\n\r\n  getPicListDisplayName(fileName: string) {\r\n    if (fileName.length <= 10)\r\n      return fileName;\r\n    else {\r\n      let headContent = fileName.substring(0, 2);\r\n      let tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);\r\n      return headContent + \"â¦\" + tailContent;\r\n    }\r\n  }\r\n\r\n  getQueueDisplayName(fileName: string) {\r\n    return fileName;\r\n  }\r\n\r\n  addDocInfo(selectdFile, fileInfo: FileInfo, docType: DocType) {\r\n\r\n    switch (docType) {\r\n      case DocType.Word: {\r\n        fileInfo.source = \"/platform/runtime/dfs/images/word.png\"\r\n        this.files.push(fileInfo);\r\n        break;\r\n      }\r\n\r\n      case DocType.Pdf: {\r\n        fileInfo.source = \"/platform/runtime/dfs/images/pdf.png\"\r\n        this.files.push(fileInfo);\r\n        break;\r\n      }\r\n\r\n      case DocType.Excel: {\r\n        fileInfo.source = \"/platform/runtime/dfs/images/excel.png\";\r\n        this.files.push(fileInfo);\r\n        break;\r\n      }\r\n\r\n      case DocType.Txt: {\r\n        fileInfo.source = \"/platform/runtime/dfs/images/txt.png\";\r\n        this.files.push(fileInfo);\r\n        break;\r\n      }\r\n\r\n      case DocType.Powerpoint: {\r\n        fileInfo.source = \"/platform/runtime/dfs/images/ppt.png\";\r\n        this.files.push(fileInfo);\r\n        break;\r\n      }\r\n\r\n      case DocType.Other: {\r\n        fileInfo.source = \"/platform/runtime/dfs/images/file.png\";\r\n        this.files.push(fileInfo);\r\n        break;\r\n      }\r\n\r\n      case DocType.Image: {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(selectdFile);\r\n        reader.onload = (_event) => {\r\n          let imgUrl = reader.result;\r\n          if (this.injector != null) {\r\n            let sanitizer = this.injector.get(DomSanitizer);\r\n            imgUrl = sanitizer.bypassSecurityTrustResourceUrl(imgUrl);\r\n          }\r\n          fileInfo.source = imgUrl;\r\n          this.files.push(fileInfo);\r\n\r\n          //å ä¸ºå¼æ­¥å¤ççå·®å¼ï¼è¡¥å¿ä¸æ¬¡å é¤\r\n          let index = -1;\r\n          this.files.forEach(x => {\r\n            if (x.name == fileInfo.name) {\r\n              if (index == -1)\r\n                index = this.files.indexOf(x);\r\n            }\r\n          })\r\n          if (index != -1 && index != this.files.length - 1) {\r\n            this.files.splice(index, 1);\r\n            this.uploadFileInfoList.splice(index, 1);\r\n            this.uploadedFileInfoList.splice(index, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  listToString(strList: string[]) {\r\n    let name: string = \"\";\r\n    for (let i = 0; i < strList.length; i++) {\r\n      name += strList[i] + \",\";\r\n    }\r\n    return name;\r\n  }\r\n\r\n  securityChange($event: any, file: FileInfo) {\r\n    file.securityInfo = $event.data;\r\n    let uploadFile = this.uploadFileInfoList.filter(x => x.metadataId = file.id)[0];\r\n    uploadFile.securityInfo = $event.data;\r\n  }\r\n\r\n\r\n  exStorageFileList: ExStorageFileInfo[] = [];\r\n\r\n  typeChange($event: any, file: FileInfo) {\r\n    file.extensionName = $event.data.name;\r\n    let exStorageFileInfo: ExStorageFileInfo = new ExStorageFileInfo;\r\n    if (file.extensionName == this.storageExtension.defaultPropertyName) {\r\n      if (this.exStorageFileList.filter(x => x.metadataId == file.id).length > 0)\r\n        this.exStorageFileList.splice(this.exStorageFileList.findIndex(x => x.metadataId == file.id), 1)\r\n    } else {\r\n      if (this.exStorageFileList.filter(x => x.metadataId == file.id).length > 0) {\r\n        exStorageFileInfo = this.exStorageFileList.filter(x => x.metadataId == file.id)[0];\r\n        exStorageFileInfo.exPropertyName = file.extensionName;\r\n      } else {\r\n        exStorageFileInfo.metadataId = file.id;\r\n        exStorageFileInfo.exPropertyName = file.extensionName;\r\n        this.exStorageFileList.push(exStorageFileInfo);\r\n      }\r\n    }\r\n  }\r\n\r\n  upload(): Observable<any> {\r\n    if (this.uploadedFileTotal != this.files.filter(x => x.isUploading || x.uploadResult).length) {\r\n\r\n      this.msgService.warning(this.localepipe.transform('wait'));\r\n      return of(false);\r\n    }\r\n    if (this.haveSecurityInfo) {\r\n      this.uploadService.saveSecurityInfo(this.uploadFileInfoList, this.rootId).subscribe();\r\n    }\r\n    if (this.storageExtension == null)\r\n      return of(this.uploadFileInfoList);\r\n    else {\r\n      if (this.exStorageFileList.length == 0)\r\n        return of(this.uploadFileInfoList);\r\n      else {\r\n        const loading = this.loadService.show({\r\n          message: this.localepipe.transform('saveTo') + this.storageExtension.extensionName\r\n        });\r\n        return this.uploadService.changeStorageInstance(this.exStorageFileList, this.rootId).pipe(\r\n          map(res => {\r\n            // if (res != null)\r\n            //   this.msgService.error('ä¿å­å°' + this.storageExtension.extensionName + \"å¤±è´¥ï¼ä¸ä¼ æä»¶èªå¨ä¿å­å°\" + this.storageExtension.defaultPropertyName + \"å­å¨ã\" + res.error.Message);\r\n            loading.close();\r\n            return this.uploadFileInfoList;\r\n          }))\r\n      }\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    if (this.uploadFileInfoList.length == 0)\r\n      return;\r\n    this.uploadFileInfoList.forEach(element => {\r\n      this.metadataIdList.push(element.metadataId);\r\n    })\r\n    this.uploadService.cancel(this.metadataIdList, this.rootId).subscribe();\r\n\r\n  }\r\n\r\n  getUploadFileInfoList() {\r\n    return this.uploadFileInfoList;\r\n  }\r\n\r\n  delete(file) {\r\n    this.files.splice(this.files.indexOf(file), 1);\r\n    if (file.uploadResult)\r\n      this.uploadedFileTotal--;\r\n    if (this.exStorageFileList.filter(x => x.metadataId == file.id).length > 0) {\r\n      this.exStorageFileList.splice(this.exStorageFileList.findIndex(x => x.metadataId == file.id), 1);\r\n    }\r\n\r\n  }\r\n\r\n  getFileSize(size: number) {\r\n    if (size < 102400)\r\n      return (size / 1024).toFixed(1) + \"K\";\r\n    else if (size < 1024 * 1024)\r\n      return (size / 1024).toFixed(0) + \"K\";\r\n    else if (size < 100 * 1024 * 1024)\r\n      return (size / 1024 / 1024).toFixed(1) + \"M\";\r\n    else if (size < 1024 * 1024 * 1024)\r\n      return (size / 1024 / 1024).toFixed(0) + \"M\";\r\n    else\r\n      return (size / 1024 / 1024 / 1024).toFixed(1) + \"G\";\r\n  }\r\n  showByGroup() {\r\n    this.showType = 0;\r\n    // this.selectedFileCount = 0;\r\n  }\r\n\r\n  showByList() {\r\n    this.showType = 1;\r\n    // this.selectedFileCount = 0;\r\n    if (this.selectedFileCount != 0 && this.selectedFileCount == this.files.length) {\r\n      this.fileAllSelected = true;\r\n    }\r\n  }\r\n\r\n  mouseOver(file) {\r\n    file.mouseOn = true;\r\n  }\r\n  mouseOut(file) {\r\n    file.mouseOn = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable()\r\nexport class DownloadService {\r\n\r\n  constructor() { }\r\n\r\n  getDownloadUrl(metadataId: string, rootId: string) {\r\n    return \"/api/runtime/dfs/v1.0/doc/filecontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\r\n  }\r\n\r\n\r\n  getStreamDownloadUrl(metadataId: string, rootId: string) {\r\n    return \"/api/runtime/dfs/v1.0/formdoc/stream?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\r\n  }\r\n\r\n  getMultipleDownloadUrl(metadataIdList: string, rootId: string) {\r\n    let list: string[] = JSON.parse(metadataIdList);\r\n    return \"/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=\" + metadataIdList + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(list[0], rootId));\r\n  }\r\n\r\n  getMultipleDownloadUrlWithName(metadataIdList: string, rootId: string, zipName: string) {\r\n    let list: string[] = JSON.parse(metadataIdList);\r\n    if (zipName == null || zipName == \"\")\r\n      zipName = 'unifile.zip';\r\n    if (!zipName.endsWith(\".zip\"))\r\n      zipName += '.zip';\r\n\r\n\r\n\r\n    return \"/api/runtime/dfs/v1.0/doc/compress/download?metadataidlist=\" + metadataIdList + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(list[0], rootId)) + \"&zipName=\" + encodeURIComponent(zipName);\r\n  }\r\n\r\n  getHistoryDownloadUrl(metadataId: string, rootId: string, version: string) {\r\n    //let list:string[]=JSON.parse(metadataIdList);\r\n    return \"/api/runtime/dfs/v1.0/doc/historycontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&version=\" + version + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\r\n  }\r\n\r\n\r\n\r\n  private mergeString(str: string, str1: string): string {\r\n    let min = str.length < str1.length ? str.length : str1.length;\r\n    let res: string = \"\";\r\n    let i = 0;\r\n    for (i = 0; i < min; i++) {\r\n      res += str.substring(i, i + 1);\r\n      res += str1.substring(i, i + 1);\r\n    }\r\n    res += str.length < str1.length ? str1.substring(i) : str.substring(i);\r\n    return res;\r\n  }\r\n\r\n  private getToken(str: string): string {\r\n    let array = [1, 2, 3];\r\n    if (str.length > 24)\r\n      str = str.substring(0, 24);\r\n    let length = Math.floor(str.length / 3);\r\n    let str1 = str.substring(0, length);\r\n    let str2 = str.substring(length, 2 * length);\r\n    let str3 = str.substring(2 * length, 3 * length);\r\n    let randomArray = [];\r\n    var random = Math.ceil(Math.random() * 3);\r\n    randomArray.push(array[random - 1]);\r\n    array.splice(random - 1, 1);\r\n    random = Math.ceil(Math.random() * 2);\r\n    randomArray.push(array[random - 1]);\r\n    array.splice(random - 1, 1);\r\n    randomArray.push(array[0]);\r\n    let timeStamp: string = Math.round(new Date().getTime() / 1000) + \"\";\r\n\r\n    return timeStamp.substring(0, 5) + \"times\" + randomArray[0] + \"\" + randomArray[1] + \"\" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + \"times\" + timeStamp.substring(5);\r\n  }\r\n\r\n  private switchStr(str1: string, str2: string, str3: string, i: number): string {\r\n    switch (i) {\r\n      case 1: return str1;\r\n      case 2: return str2;\r\n      case 3: return str3;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { LOCALE_ID, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FileUploadComponent } from './file-upload/file-upload.component';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { UploadService } from './upload.service';\r\nimport { LoadingModule } from '@farris/ui-loading';\r\nimport { ProgressModule } from '@farris/ui-progress'\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { FarrisFormsModule } from '@farris/ui-forms'\r\nimport { DownloadService } from './download.service';\r\nimport { LocalLangPipe } from '../local.pipe';\r\nimport { CacheService, HttpService, LanguageService, SessionService } from '@ecp-caf/caf-common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [FileUploadComponent, LocalLangPipe],\r\n  imports: [\r\n    CommonModule,\r\n    NotifyModule,\r\n    MessagerModule.forRoot(),\r\n    LoadingModule.forRoot(),\r\n    ProgressModule,\r\n    FormsModule,\r\n    FarrisFormsModule,\r\n    ComboListModule,\r\n    HttpClientModule\r\n  ],\r\n  exports: [FileUploadComponent],\r\n  entryComponents: [FileUploadComponent],\r\n  providers: [UploadService, DownloadService, LanguageService, HttpService, CacheService, SessionService,\r\n    { provide: LOCALE_ID, useValue: localStorage.getItem('languageCode') || 'zh-CHS' },]\r\n\r\n})\r\nexport class UploadModule { }\r\n\r\nexport const Éµa = UploadModule;\r\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { BsModalRef, BsModalService } from '@farris/ui-modal';\nimport { FileUploadComponent } from '../../upload/file-upload/file-upload.component';\n\n@Component({\n  selector: 'app-uploaddialog',\n  templateUrl: './uploaddialog.component.html',\n  styleUrls: ['./uploaddialog.component.css']\n})\nexport class UploadDialogComponent implements OnInit {\n\n  dlg: BsModalRef;\n\n  metadataIdList:string[]=[];\n\n  @Input() formId:string;\n\n  constructor(private modalService: BsModalService) { }\n\n  @ViewChild(FileUploadComponent) fileUpload: FileUploadComponent;\n\n  ngOnInit() {\n  }\n\n  showDialog() {\n    this.dlg = this.modalService.show(FileUploadComponent, {\n      title: 'éæ©æä»¶',\n      width: 800, height: 500,\n      buttons: [\n        {\n          text: 'ä¸ä¼ ', cls: 'k-button k-button-icontext k-primary', iconCls: \"k-icon k-i-check\", handle: () => {\n            this.fileUpload.upload();\n            this.dlg.close();\n          }\n        },\n        {\n          text: 'å³é­', cls: 'k-button k-button-icontext', iconCls: \"k-icon k-i-close\", handle: () => {\n            this.fileUpload.cancel();\n            this.dlg.close();\n          }\n        }\n      ],\n\n      showButtons: true,\n\n    });\n    this.dlg.content.formId=this.formId;\n\n  }\n\n}\n","import { Injectable, Injector, ComponentFactoryResolver, LOCALE_ID } from '@angular/core';\r\nimport { FileUploadComponent } from './upload/file-upload/file-upload.component';\r\nimport { BsModalService, BsModalRef } from '@farris/ui-modal';\r\nimport { UploadFileInfo } from './upload/entity/uploadfileinfo';\r\nimport { Observable, of } from 'rxjs';\r\nimport { UploadLimit } from './upload/entity/uploadlimit';\r\nimport { LocalLangPipe } from './local.pipe';\r\n\r\n\r\n@Injectable()\r\nexport class UploadDialogService {\r\n\r\n    localeid: string;\r\n    localpipe: LocalLangPipe;\r\n    constructor(private modalService: BsModalService, private componentFactoryResolver: ComponentFactoryResolver, private injector: Injector) {\r\n        if (this.injector) {\r\n            this.modalService = this.injector.get(BsModalService);\r\n            this.localeid = localStorage.getItem(\"languageCode\") || this.injector.get(LOCALE_ID);\r\n            this.localpipe = new LocalLangPipe(this.localeid);\r\n        }\r\n    }\r\n\r\n    dlg: BsModalRef;\r\n\r\n    fileInfoList: UploadFileInfo[] = [];\r\n\r\n    showDialog(formId: string, rootId: string) {\r\n        let flag = 0;\r\n        return new Promise(resolve => {\r\n            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);\r\n            var viewerRef = viewerFactory.create(this.injector);\r\n\r\n            viewerRef.instance.rootId = rootId;\r\n            viewerRef.instance.formId = formId;\r\n\r\n            this.dlg = this.modalService.show(viewerRef, {\r\n                title: this.localpipe.transform('uploadFile'),\r\n                width: 950, height: 570,\r\n                buttons: [\r\n                    {\r\n                        text: this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: () => {\r\n                            this.dlg.content.upload().subscribe(\r\n                                res => {\r\n                                    if (res) {\r\n                                        resolve(res);\r\n                                        flag = 1;\r\n                                        this.dlg.close();\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: () => {\r\n                            this.dlg.close();\r\n                        }\r\n                    }\r\n                ],\r\n\r\n                showButtons: true,\r\n                showMaxButton: false,\r\n                beforeClose: (): Observable<boolean> => {\r\n                    if (flag == 0)\r\n                        this.dlg.content.cancel();\r\n                    return of(true);\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    uploadFile(formId: string, rootId: string, oldIdList: string[] = []) {\r\n        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);\r\n    }\r\n\r\n\r\n    uploadFileWithLimit(formId: string, rootId: string, limit: UploadLimit, oldIdList: string[] = []) {\r\n        let flag = 0;\r\n        return new Promise(resolve => {\r\n            var uploadFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);\r\n            var uploadRef = uploadFactory.create(this.injector);\r\n            if (limit != null) {\r\n                uploadRef.instance.fileCount = limit.fileCount;\r\n                uploadRef.instance.securityInfo=limit.securityInfo;\r\n                if (limit.fileType != null && limit.fileType != \"\")\r\n                    uploadRef.instance.fileType = limit.fileType\r\n            }\r\n\r\n            uploadRef.instance.rootId = rootId;\r\n            uploadRef.instance.formId = formId;\r\n            uploadRef.instance.oldIdList = oldIdList;\r\n\r\n            this.dlg = this.modalService.show(uploadRef, {\r\n                title: this.localpipe.transform('uploadFile'),\r\n                width: 950, height: 570,\r\n                buttons: [\r\n                    {\r\n\r\n                        text: this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: () => {\r\n                            this.dlg.content.upload().subscribe(\r\n                                res => {\r\n                                    if (res) {\r\n                                        resolve(res);\r\n                                        flag = 1;\r\n                                        this.dlg.close();\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: () => {\r\n                            this.dlg.close();\r\n                        }\r\n                    }\r\n                ],\r\n\r\n                showButtons: true,\r\n                showMaxButton: false,\r\n                beforeClose: (): Observable<boolean> => {\r\n                    if (flag == 0)\r\n                        this.dlg.content.cancel();\r\n                    return of(true);\r\n                }\r\n            });\r\n        })\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FarrisDialogModule } from '@farris/ui-dialog';\nimport { MessagerModule } from '@farris/ui-messager';\nimport { BsModalService } from '@farris/ui-modal';\n\nimport { UploadModule } from '../upload/upload.module';\nimport { UploadDialogComponent } from './uploaddialog/uploaddialog.component';\nimport { HttpService } from '@ecp-caf/caf-common';\nimport { UploadService } from '../upload/upload.service';\nimport { UploadDialogService } from '../uploaddialog.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NotifyModule } from '@farris/ui-notify';\nimport { FileUploadComponent } from '../upload/file-upload/file-upload.component';\n\n\n@NgModule({\n  declarations: [UploadDialogComponent],\n  imports: [\n    CommonModule,\n    FarrisDialogModule,\n    MessagerModule.forRoot(),\n    UploadModule,\n    NotifyModule.forRoot(),\n    HttpClientModule\n  ],\n  exports: [UploadDialogComponent,FileUploadComponent],\n  entryComponents: [UploadDialogComponent,FileUploadComponent],\n  providers: [BsModalService, HttpService, UploadDialogService, UploadService]\n})\nexport class UploadDialogMoudle { }\n","import { GspDocSecurityBaseInfo } from \"./gspdocsecuritybaseinfo\";\r\n\r\nexport class UploadLimit {\r\n    public fileType: string = \"*\";\r\n    public fileCount: number = 0;\r\n    public securityInfo: GspDocSecurityBaseInfo = null;\r\n}","import { GspFormDocInfo } from './gspformdocinfo';\r\nimport { OperatingModes } from './operatingmodes';\r\n\r\nexport class GspFormUploadListEntity {\r\n    public formId: string;\r\n    public docInfoList: GspFormDocInfo[];\r\n    public mode: OperatingModes;\r\n    public rootId: string;\r\n}","import { GspDocMetaProperty } from './gspdocmetaproperty';\r\n\r\nexport class GspFormDocInfo {\r\n    public metadataId: string;\r\n    public fileName: string;\r\n    public fileContent: string;\r\n    public index: number;\r\n    public total: number;\r\n    public size: number;\r\n    public exPropertyName: string;\r\n    public extProperty: GspDocMetaProperty;\r\n}","export class GspDocMetaProperty{\r\n    public extProperties1:string;\r\n    public extProperties2:string;\r\n    public extProperties3:string;\r\n    public extProperties4:string;\r\n    public extProperties5:string;\r\n}","import { OperatingModes } from './operatingmodes';\r\nimport { GspFormDocInfo } from './gspformdocinfo';\r\n\r\nexport class GspFormUploadEntity{\r\n    public formId: string;\r\n    public docInfo: GspFormDocInfo;\r\n    public mode: OperatingModes;\r\n    public rootId: string;\r\n\r\n} ","import { SecurityEntity } from \"./securityentity\";\r\n\r\nexport class FileInfo {\r\n    public id: string;\r\n    public name: string;\r\n    public type: string;\r\n    public source: any;\r\n    public picListDisplayName: string;\r\n    public queueListDisplayName: string;\r\n    //public content: string;\r\n    public size: string;\r\n    public fileSize: number;\r\n    public hasUploaded: boolean;\r\n    public mouseOn: boolean;\r\n    public selectd: boolean;\r\n    public isUploading: boolean;\r\n    public uploadResult: boolean;\r\n    public uploadProcess: number;\r\n    public errorMessage: string;\r\n    public extensionDropListId:number;\r\n    public extensionName: string;\r\n    public securityDropListId:number;\r\n    public securityInfo:SecurityEntity;\r\n}","export class GspDocSecurityBaseInfo {\r\n    public securityId: string;\r\n    public securityLevel: number;\r\n    public name: string;\r\n}","export class SecurityEntity {\r\n    public id: string;\r\n    public securityId: string;\r\n    public securityLevel: number;\r\n    public name: string;\r\n}"]}