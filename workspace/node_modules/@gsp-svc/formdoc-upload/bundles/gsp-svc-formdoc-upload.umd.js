(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-dialog'), require('@angular/common'), require('rxjs/observable/of'), require('rxjs/operators'), require('angular2-uuid'), require('@angular/platform-browser'), require('@farris/ui-messager'), require('@farris/ui-loading'), require('@farris/ui-progress'), require('@angular/forms'), require('@farris/ui-combo-list'), require('@farris/ui-forms'), require('@ecp-caf/caf-common'), require('@angular/core'), require('@farris/ui-modal'), require('rxjs'), require('@angular/common/http'), require('@farris/ui-notify')) :
    typeof define === 'function' && define.amd ? define('@gsp-svc/formdoc-upload', ['exports', '@farris/ui-dialog', '@angular/common', 'rxjs/observable/of', 'rxjs/operators', 'angular2-uuid', '@angular/platform-browser', '@farris/ui-messager', '@farris/ui-loading', '@farris/ui-progress', '@angular/forms', '@farris/ui-combo-list', '@farris/ui-forms', '@ecp-caf/caf-common', '@angular/core', '@farris/ui-modal', 'rxjs', '@angular/common/http', '@farris/ui-notify'], factory) :
    (factory((global['gsp-svc'] = global['gsp-svc'] || {}, global['gsp-svc']['formdoc-upload'] = {}),global.uiDialog,global.ng.common,global.rxjs['observable/of'],global.rxjs.operators,global.angular2Uuid,global.ng.platformBrowser,global.uiMessager,global.uiLoading,global.uiProgress,global.ng.forms,global.uiComboList,global.uiForms,global.cafCommon,global.ng.core,global.uiModal,global.rxjs,global.ng.common.http,global.uiNotify));
}(this, (function (exports,uiDialog,common,of,operators,angular2Uuid,platformBrowser,uiMessager,uiLoading,uiProgress,forms,uiComboList,uiForms,cafCommon,i0,uiModal,rxjs,http,uiNotify) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormdocUploadService = /** @class */ (function () {
        function FormdocUploadService() {
        }
        FormdocUploadService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FormdocUploadService.ctorParameters = function () { return []; };
        /** @nocollapse */ FormdocUploadService.ngInjectableDef = i0.defineInjectable({ factory: function FormdocUploadService_Factory() { return new FormdocUploadService(); }, token: FormdocUploadService, providedIn: "root" });
        return FormdocUploadService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormdocUploadComponent = /** @class */ (function () {
        function FormdocUploadComponent() {
        }
        /**
         * @return {?}
         */
        FormdocUploadComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        FormdocUploadComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-formdoc-upload',
                        template: "\n    <p>\n      formdoc-upload works!\n    </p>\n  "
                    }] }
        ];
        /** @nocollapse */
        FormdocUploadComponent.ctorParameters = function () { return []; };
        return FormdocUploadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS';
    var FormdocUploadModule = /** @class */ (function () {
        function FormdocUploadModule() {
        }
        FormdocUploadModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [FormdocUploadComponent],
                        imports: [
                            http.HttpClientModule
                        ],
                        exports: [FormdocUploadComponent],
                        providers: [cafCommon.LanguageService, cafCommon.HttpService, cafCommon.CacheService, cafCommon.SessionService,
                            { provide: i0.LOCALE_ID, useValue: ɵ0 },]
                    },] }
        ];
        return FormdocUploadModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var DocType = {
        Word: 0,
        Excel: 1,
        Powerpoint: 2,
        Pdf: 3,
        Txt: 4,
        Image: 5,
        Other: 6,
    };
    DocType[DocType.Word] = 'Word';
    DocType[DocType.Excel] = 'Excel';
    DocType[DocType.Powerpoint] = 'Powerpoint';
    DocType[DocType.Pdf] = 'Pdf';
    DocType[DocType.Txt] = 'Txt';
    DocType[DocType.Image] = 'Image';
    DocType[DocType.Other] = 'Other';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var OperatingModes = {
        Formal: 0,
        Temp: 1,
    };
    OperatingModes[OperatingModes.Formal] = 'Formal';
    OperatingModes[OperatingModes.Temp] = 'Temp';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspFormRemoveListEntity = /** @class */ (function () {
        function GspFormRemoveListEntity() {
        }
        return GspFormRemoveListEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspFormDocOperateEntity = /** @class */ (function () {
        function GspFormDocOperateEntity() {
        }
        return GspFormDocOperateEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChangeInstanceRequest = /** @class */ (function () {
        function ChangeInstanceRequest() {
        }
        return ChangeInstanceRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CopyFileRequest = /** @class */ (function () {
        function CopyFileRequest() {
        }
        return CopyFileRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UploadService = /** @class */ (function () {
        function UploadService(http$$1, httpclient) {
            this.http = http$$1;
            this.httpclient = httpclient;
        }
        /**
         * @param {?} docListInfo
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.uploadList = /**
         * @param {?} docListInfo
         * @param {?} rootId
         * @return {?}
         */
            function (docListInfo, rootId) {
                /** @type {?} */
                var url;
                docListInfo.rootId = rootId;
                url = "/api/runtime/dfs/v1.0/formdoc/list";
                //url = "/api/runtime/dfs/v1.0/formdoc/list";
                return this.http.post(url, docListInfo).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.commit = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
            function (metadataIdList, rootId) {
                /** @type {?} */
                var url;
                /** @type {?} */
                var entity = new GspFormDocOperateEntity;
                entity.metadataIdList = metadataIdList;
                entity.rootId = rootId;
                url = "/api/runtime/dfs/v1.0/formdoc/commit";
                //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/commit";
                return this.http.post(url, entity).pipe();
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.cancel = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
            function (metadataIdList, rootId) {
                /** @type {?} */
                var url;
                /** @type {?} */
                var entity = new GspFormDocOperateEntity;
                entity.metadataIdList = metadataIdList;
                entity.rootId = rootId;
                url = "/api/runtime/dfs/v1.0/formdoc/cancel";
                //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/cancel";
                //localStorage.setItem("SessionId","huoliang");
                return this.http.put(url, entity).pipe();
            };
        /**
         * @param {?} idList
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.removeList = /**
         * @param {?} idList
         * @param {?} rootId
         * @return {?}
         */
            function (idList, rootId) {
                /** @type {?} */
                var url;
                //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/list";
                url = "/api/runtime/dfs/v1.0/formdoc/list";
                /** @type {?} */
                var idListInfo = new GspFormRemoveListEntity;
                idListInfo.metadataIdList = idList;
                idListInfo.mode = OperatingModes.Temp;
                idListInfo.rootId = rootId;
                return this.http.delete(url, idListInfo).pipe();
            };
        /**
         * @param {?} metadataId
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.getFile = /**
         * @param {?} metadataId
         * @param {?} rootId
         * @return {?}
         */
            function (metadataId, rootId) {
                /** @type {?} */
                var url;
                if (rootId == "")
                    url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId;
                else
                    url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId + "/" + rootId;
                return this.http.get(url).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} docInfo
         * @return {?}
         */
        UploadService.prototype.uploadFile = /**
         * @param {?} docInfo
         * @return {?}
         */
            function (docInfo) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc";
                //url = "/api/runtime/dfs/v1.0/formdoc/list";
                return this.http.post(url, docInfo).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} formdata
         * @return {?}
         */
        UploadService.prototype.uploadSliceFile = /**
         * @param {?} formdata
         * @return {?}
         */
            function (formdata) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/slice";
                //url = "/api/runtime/dfs/v1.0/formdoc/list";
                return this.httpclient.post(url, formdata).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @return {?}
         */
        UploadService.prototype.getStorageExtensionInfo = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/storagestrategy/extension";
                //url = "/api/runtime/dfs/v1.0/formdoc/list";
                return this.http.get(url).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} baseInfo
         * @return {?}
         */
        UploadService.prototype.getSecurityInfoList = /**
         * @param {?} baseInfo
         * @return {?}
         */
            function (baseInfo) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/storagestrategy/security";
                url = url + "?id=" + baseInfo.securityId + "&level=" + baseInfo.securityLevel;
                return this.http.get(url).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} storageInfoList
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.changeStorageInstance = /**
         * @param {?} storageInfoList
         * @param {?} rootId
         * @return {?}
         */
            function (storageInfoList, rootId) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/changeinstance";
                /** @type {?} */
                var request = new ChangeInstanceRequest;
                request.fileInfoList = storageInfoList;
                request.rootId = rootId;
                return this.http.post(url, request).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} metadataId
         * @param {?} rootId
         * @param {?} path
         * @return {?}
         */
        UploadService.prototype.copyFile = /**
         * @param {?} metadataId
         * @param {?} rootId
         * @param {?} path
         * @return {?}
         */
            function (metadataId, rootId, path) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/copy";
                /** @type {?} */
                var request = new CopyFileRequest;
                request.metadataId = metadataId;
                request.rootId = rootId;
                request.path = path;
                return this.httpclient.post(url, request, { responseType: 'text' }).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })));
            };
        /**
         * @param {?} uploadFileInfoList
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.saveSecurityInfo = /**
         * @param {?} uploadFileInfoList
         * @param {?} rootId
         * @return {?}
         */
            function (uploadFileInfoList, rootId) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/doc/exproperty";
                /** @type {?} */
                var reqList = [];
                uploadFileInfoList.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    /** @type {?} */
                    var request = { id: element.metadataId, rootId: rootId, exProperty: JSON.stringify(element.securityInfo) };
                    reqList.push(request);
                }));
                return this.http.post(url, reqList).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} formId
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.getUploadedFileInfoList = /**
         * @param {?} formId
         * @param {?} rootId
         * @return {?}
         */
            function (formId, rootId) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/uploadedfile/infolist" + "?formid=" + formId + "&rootid=" + rootId;
                //url = "/api/runtime/dfs/v1.0/formdoc/list";
                return this.http.get(url).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        /**
         * @param {?} rootId
         * @return {?}
         */
        UploadService.prototype.getUploadInfo = /**
         * @param {?} rootId
         * @return {?}
         */
            function (rootId) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/rootsetting/info?id=" + rootId;
                return this.http.get(url).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return of.of(error);
                })));
            };
        UploadService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        UploadService.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService },
                { type: http.HttpClient }
            ];
        };
        return UploadService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UploadFileInfo = /** @class */ (function () {
        function UploadFileInfo() {
        }
        return UploadFileInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExStorageFileInfo = /** @class */ (function () {
        function ExStorageFileInfo() {
        }
        return ExStorageFileInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var FileState = {
        New: 0,
        Update: 1,
    };
    FileState[FileState.New] = 'New';
    FileState[FileState.Update] = 'Update';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LANG_RESOURCES = {
        'zh-CHS': {
            'uploadFile': '上传文件',
            'uploading': '正在上传文件……',
            'selectedCount': '已选择文件数量：',
            'limitCount': '超出系统限制数量：',
            'rechooseFile': ',重新选择上传文件。',
            'save': '保存',
            'cancel': '取消',
            'haveSameName': '已上传过同名文件: ',
            'rename': '重命名',
            'replace': '替换',
            'sizeZero': '文件大小为0',
            'sizeMax': '文件大小超出限制',
            'uploadFailure': '上传失败',
            'uploadSucceed': '上传成功',
            'wait': '等一下，文档正在上传。',
            'saveTo': '正在将文件保存到',
            'delete': '删除',
            'selectAll': '全选',
            'selectNull': '全不选',
            'detail': '详情',
            'fileName': '文件名',
            'state': '状态',
            'operation': '操作',
            'size': '大小',
            'close': '关闭',
            'loading': '拼命加载中',
            'mismatchChunkSize': '文档分片上传部分丢失，请重新上传，如果多次上传失败，请联系管理员。'
        },
        'en-US': {
            'uploadFile': 'Upload File',
            'uploading': 'File Uploading……',
            'selectedCount': 'Selected files count：',
            'limitCount': 'System limit count：',
            'rechooseFile': ',Reselect upload file.',
            'save': 'Save',
            'cancel': 'Cancel',
            'haveSameName': 'A file with the same name has been uploaded: ',
            'rename': 'Rename',
            'replace': 'Replace',
            'sizeZero': 'File size is 0',
            'sizeMax': 'File size beyond limit',
            'uploadFailure': 'Upload failed',
            'uploadSucceed': 'Upload successfully',
            'wait': 'Wait a minute, the file is uploading.',
            'saveTo': 'Saving file to',
            'delete': 'Delete',
            'selectAll': 'Select all',
            'selectNull': 'Not at all',
            'detail': 'Details',
            'fileName': 'Filename',
            'state': 'State',
            'operation': 'Operation',
            'size': 'Size',
            'close': 'Close',
            'loading': 'Loading',
            'mismatchChunkSize': 'The partial upload of document shards is missing. Please upload again. If multiple uploads fail, please contact the administrator.'
        },
        'en': {
            'uploadFile': 'Upload File',
            'uploading': 'File Uploading……',
            'selectedCount': 'Selected files count：',
            'limitCount': 'System limit count：',
            'rechooseFile': ',Reselect upload file.',
            'save': 'Save',
            'cancel': 'Cancel',
            'haveSameName': 'A file with the same name has been uploaded: ',
            'rename': 'Rename',
            'replace': 'Replace',
            'sizeZero': 'File size is 0',
            'sizeMax': 'File size beyond limit',
            'uploadFailure': 'Upload failed',
            'uploadSucceed': 'Upload successfully',
            'wait': 'Wait a minute, the file is uploading.',
            'saveTo': 'Saving file to',
            'delete': 'Delete',
            'selectAll': 'Select all',
            'selectNull': 'Not at all',
            'detail': 'Details',
            'fileName': 'Filename',
            'state': 'State',
            'operation': 'Operation',
            'size': 'Size',
            'close': 'Close',
            'loading': 'Loading',
            'mismatchChunkSize': 'The partial upload of document shards is missing. Please upload again. If multiple uploads fail, please contact the administrator.'
        },
        'zh-CHT': {
            'uploadFile': '上傳文件',
            'uploading': '正在上傳文件……',
            'selectedCount': '已選擇文件數量：',
            'limitCount': '超出系統限制數量：',
            'rechooseFile': ',重新選擇上傳文件。',
            'save': '保存',
            'cancel': '取消',
            'haveSameName': '已上傳過同名文件: ',
            'rename': '重命名',
            'replace': '替換',
            'sizeZero': '文件大小為0',
            'sizeMax': '文件大小超出限制',
            'uploadFailure': '上傳失敗',
            'uploadSucceed': '上傳成功',
            'wait': '等一下，文件正在上傳。',
            'saveTo': '正在將文件保存到',
            'delete': '删除',
            'selectAll': '全選',
            'selectNull': '全不選',
            'detail': '詳情',
            'fileName': '文件名',
            'state': '狀態',
            'operation': '操作',
            'size': '大小',
            'close': '關閉',
            'loading': '拼命加載中',
            'mismatchChunkSize': '文檔分片上傳部分遺失，請重新上傳，如果多次上傳失敗，請聯系管理員。'
        },
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LocalLangPipe = /** @class */ (function () {
        function LocalLangPipe(localeId) {
            this.defaultLang = "zh-CHS";
            this.langCode = localStorage.getItem("languageCode") || localeId || this.defaultLang;
            this.lang = LANG_RESOURCES[this.langCode] || LANG_RESOURCES[this.defaultLang];
        }
        /**
         * @param {?} name
         * @return {?}
         */
        LocalLangPipe.prototype.transform = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.lang[name] || name;
            };
        LocalLangPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'locale' },] }
        ];
        /** @nocollapse */
        LocalLangPipe.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
            ];
        };
        return LocalLangPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InitMultiUploadRequest = /** @class */ (function () {
        function InitMultiUploadRequest() {
        }
        return InitMultiUploadRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CompleteMultiUploadRequest = /** @class */ (function () {
        function CompleteMultiUploadRequest() {
        }
        return CompleteMultiUploadRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspFormStreamEntity = /** @class */ (function () {
        function GspFormStreamEntity() {
        }
        return GspFormStreamEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MultiUploadRequest = /** @class */ (function () {
        function MultiUploadRequest() {
        }
        return MultiUploadRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileUploadComponent = /** @class */ (function () {
        function FileUploadComponent(msgService, uploadService, loadService, injector) {
            this.msgService = msgService;
            this.uploadService = uploadService;
            this.loadService = loadService;
            this.injector = injector;
            this.files = [];
            this.metadataIdList = [];
            this.uploadFileInfoList = [];
            this.errFileList = [];
            this.errTypeList = [];
            this.nullFileList = [];
            this.beyondFileList = [];
            this.showType = 0;
            this.mouseOn = false;
            this.bufferSize = 5 * 1024 * 1024;
            this.selectedFileCount = 0;
            this.uploadIconAddress = '/platform/runtime/dfs/images/upload.svg';
            this.uploadLittleIconAddress = '/platform/runtime/dfs/images/uploadIcon.svg';
            this.hasSelectedFile = false;
            this.fileAllSelected = false;
            this.uploadProcess = { width: '0%' };
            this.fileTotalChunk = {};
            this.requestArray = new Array;
            this.requestBodyArray = new Array;
            this.uploadedChunk = {};
            this.uploadedProcess = {};
            this.defaultPropertyName = "";
            this.propertiesNames = [];
            this.securityInfoList = [];
            this.queueListStyle = { width: '480px' };
            this.dropListValue = "";
            this.uploadedFileTotal = 0;
            this.haveExtensionProperty = false;
            this.haveSecurityInfo = false;
            this.uploadedFileInfoList = [];
            this.oldUploadedFileList = [];
            //uploadedNameList = [];
            this.sameNameAllowed = true;
            this.maxFileSize = 0;
            this.checkboxPos = { top: '0px' };
            this.fileType = "*";
            this.fileCount = 0;
            this.oldIdList = [];
            this.securityInfo = null;
            this.totalLoad = null;
            this.exStorageFileList = [];
            if (this.injector) {
                this.httpclient = this.injector.get(http.HttpClient);
                this.localeid = localStorage.getItem("languageCode") || this.injector.get(i0.LOCALE_ID);
                this.localepipe = new LocalLangPipe(this.localeid);
            }
        }
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (navigator.userAgent.indexOf('Firefox') >= 0)
                    this.checkboxPos.top = '14px';
                //if (this.storageService != null) {
                if (this.securityInfo != null) {
                    this.uploadService.getSecurityInfoList(this.securityInfo).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.haveSecurityInfo = true;
                        /** @type {?} */
                        var i = 0;
                        res.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            _this.securityInfoList.push({ id: i.toString(), securityId: element.securityId, securityLevel: element.securityLevel, name: element.name });
                            i++;
                        }));
                    }));
                }
                this.uploadService.getStorageExtensionInfo().subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    if (res != null && res.error == null) {
                        _this.storageExtension = res;
                        _this.defaultPropertyName = _this.storageExtension.defaultPropertyName;
                        _this.propertiesNames.push({ id: "0", name: _this.storageExtension.defaultPropertyName });
                        /** @type {?} */
                        var i_1 = 0;
                        // this.propertiesNames.push(...(this.storageExtension.extensionPropertyNameList));
                        _this.storageExtension.extensionPropertyNameList.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            _this.propertiesNames.push({ id: (++i_1).toString(), name: element });
                        }));
                        _this.queueListStyle.width = '380px';
                        _this.haveExtensionProperty = true;
                    }
                }));
                this.uploadService.getUploadInfo(this.rootId).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    if (res != null && res.error == null) {
                        _this.sameNameAllowed = res.sameNameAllowed;
                        _this.maxFileSize = parseInt(JSON.parse(res.validateConfiguration).maxFileSize);
                        _this.allowedMultiUpload = res.allowedMultiUpload;
                        if (!_this.sameNameAllowed) {
                            _this.uploadService.getUploadedFileInfoList(_this.formId, _this.rootId).subscribe(( /**
                             * @param {?} res
                             * @return {?}
                             */function (res) {
                                if (res != null && res.error == null) {
                                    _this.uploadedFileInfoList = res;
                                    _this.oldUploadedFileList = JSON.parse(JSON.stringify(res));
                                }
                            }));
                        }
                    }
                }));
                if (this.oldIdList != null && this.oldIdList.length > 0) ;
                this.radioButtonGroupValue = 'showByGroup';
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.showLoading = /**
         * @return {?}
         */
            function () {
                this.hasSelectedFile = true;
                // if (this.totalLoad == null)
                //   this.totalLoad = this.loadService.show({
                //     message: this.localepipe.transform('uploading')
                //   });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FileUploadComponent.prototype.fileSelected = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                this.hasSelectedFile = true;
                this.selectedFiles = document.querySelector('#file');
                if (this.fileCount > 0) {
                    if (this.selectedFiles.files.length + this.files.length > this.fileCount) {
                        /** @type {?} */
                        var selectedNum = (( /** @type {?} */(this.selectedFiles.files.length))) + this.files.length;
                        this.msgService.warning(this.localepipe.transform('selectedCount') + selectedNum + this.localepipe.transform('limitCount') + this.fileCount + this.localepipe.transform('rechooseFile'));
                        return;
                    }
                }
                var _loop_1 = function (i) {
                    /** @type {?} */
                    var selectedFile = this_1.selectedFiles.files[i];
                    //selectedFile.slice
                    /** @type {?} */
                    var uuid = angular2Uuid.UUID.UUID();
                    if (selectedFile.size == 0) {
                        this_1.nullFileList.push(selectedFile.name);
                        return "continue";
                    }
                    if (this_1.maxFileSize != null && this_1.maxFileSize > 0) {
                        if (selectedFile.size > this_1.maxFileSize * 1000) {
                            this_1.beyondFileList.push(selectedFile.name);
                            return "continue";
                        }
                    }
                    if (!this_1.sameNameAllowed) {
                        if (this_1.uploadedFileInfoList.find(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.fileName == selectedFile.name; })) != null) {
                            /** @type {?} */
                            var msg_1 = this_1.msgService.show('warning', this_1.localepipe.transform('haveSameName') + selectedFile.name, {
                                initialState: {
                                    buttons: [
                                        {
                                            text: this_1.localepipe.transform('rename'),
                                            cls: 'btn btn-secondary',
                                            handle: ( /**
                                             * @return {?}
                                             */function () {
                                                /** @type {?} */
                                                var oldName = selectedFile.name;
                                                /** @type {?} */
                                                var newName;
                                                /** @type {?} */
                                                var flag = true;
                                                /** @type {?} */
                                                var i = 1;
                                                while (flag) {
                                                    newName = oldName.substring(0, oldName.lastIndexOf('.')) + '(' + i + ')' + oldName.substring(oldName.lastIndexOf('.'));
                                                    if (_this.uploadedFileInfoList.find(( /**
                                                     * @param {?} x
                                                     * @return {?}
                                                     */function (x) { return x.fileName == newName; })) != null) {
                                                        i++;
                                                    }
                                                    else
                                                        flag = false;
                                                }
                                                _this.uploadFile(uuid, selectedFile, newName);
                                                msg_1.close();
                                            })
                                        },
                                        {
                                            text: this_1.localepipe.transform('replace'),
                                            cls: 'btn btn-secondary',
                                            handle: ( /**
                                             * @return {?}
                                             */function () {
                                                uuid = _this.uploadedFileInfoList.find(( /**
                                                 * @param {?} x
                                                 * @return {?}
                                                 */function (x) { return x.fileName == selectedFile.name; })).metadataId;
                                                _this.uploadFile(uuid, selectedFile, selectedFile.name, FileState.Update);
                                                _this.uploadedFileTotal--;
                                                if (_this.oldUploadedFileList.find(( /**
                                                 * @param {?} x
                                                 * @return {?}
                                                 */function (x) { return x.fileName == selectedFile.name; }))) {
                                                    _this.uploadedFileTotal++;
                                                    _this.uploadedFileInfoList.splice(_this.uploadedFileInfoList.indexOf(_this.uploadedFileInfoList.filter(( /**
                                                     * @param {?} x
                                                     * @return {?}
                                                     */function (x) { return x.fileName == selectedFile.name; }))[0]), 1);
                                                }
                                                msg_1.close();
                                            })
                                        },
                                        {
                                            text: this_1.localepipe.transform('cancel'),
                                            cls: 'btn btn-secondary',
                                            handle: ( /**
                                             * @return {?}
                                             */function () {
                                                msg_1.close();
                                            })
                                        }
                                    ]
                                }
                            });
                            return "continue";
                        }
                    }
                    this_1.uploadFile(uuid, selectedFile, selectedFile.name);
                };
                var this_1 = this;
                //this.flag = 0;
                for (var i = 0; i < this.selectedFiles.files.length; i++) {
                    _loop_1(i);
                }
                if (this.errFileList.length > 0) {
                    /** @type {?} */
                    var name_1 = this.listToString(this.errFileList);
                    this.msgService.warning(this.localepipe.transform('haveSameName') + name_1 + this.localepipe.transform('rechooseFile'));
                    this.errFileList = [];
                }
                if (this.nullFileList.length > 0) {
                    /** @type {?} */
                    var name_2 = this.listToString(this.nullFileList);
                    name_2 = name_2.substring(0, name_2.length - 1);
                    this.msgService.warning(name_2 + this.localepipe.transform('sizeZero') + this.localepipe.transform('rechooseFile'));
                    this.nullFileList = [];
                }
                if (this.beyondFileList.length > 0) {
                    /** @type {?} */
                    var name_3 = this.listToString(this.beyondFileList);
                    name_3 = name_3.substring(0, name_3.length - 1);
                    this.msgService.warning(name_3 + this.localepipe.transform('sizeMax') + this.maxFileSize + "KB" + this.localepipe.transform('rechooseFile'));
                    this.beyondFileList = [];
                }
                this.files = this.files.slice();
                this.fileAllSelected = false;
                $event.target.value = '';
                // loading.close();
            };
        /**
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.showErrorMessage = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                this.msgService.error(this.localepipe.transform('uploadFailure') + file.errorMessage);
            };
        /**
         * @param {?} uuid
         * @param {?} selectedFile
         * @param {?} fileName
         * @return {?}
         */
        FileUploadComponent.prototype.handleFileInfo = /**
         * @param {?} uuid
         * @param {?} selectedFile
         * @param {?} fileName
         * @return {?}
         */
            function (uuid, selectedFile, fileName) {
                /** @type {?} */
                var fileInfo;
                fileInfo = {
                    id: uuid,
                    name: fileName,
                    type: selectedFile.type,
                    source: "",
                    size: this.getFileSize(selectedFile.size),
                    fileSize: selectedFile.size,
                    picListDisplayName: this.getPicListDisplayName(fileName),
                    queueListDisplayName: this.getQueueDisplayName(fileName),
                    //content: reader.result.toString(),
                    hasUploaded: false,
                    mouseOn: false,
                    selectd: false,
                    isUploading: true,
                    uploadResult: false,
                    uploadProcess: 0,
                    errorMessage: "",
                    extensionDropListId: 0,
                    extensionName: "",
                    securityDropListId: 0,
                    securityInfo: this.securityInfoList[0]
                };
                if (this.storageExtension != null)
                    fileInfo.extensionName = this.defaultPropertyName;
                /** @type {?} */
                var type = selectedFile.type;
                if (type.includes("tiff")) {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Other);
                }
                else if (type.includes("image")) {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Image);
                }
                else if (type.includes("word")) {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Word);
                }
                else if (type.includes("pdf")) {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Pdf);
                }
                else if (type.includes("plain")) {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Txt);
                }
                else if (type.includes("sheet") || type.includes("excel")) {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Excel);
                }
                else if (type.includes("powerpoint") || type.includes("presentation")) {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Powerpoint);
                }
                else {
                    this.addDocInfo(selectedFile, fileInfo, DocType.Other);
                    // let name: string = selectedFile.name;
                    // let errType = name.substring(selectedFile.name.lastIndexOf('.'));
                    // this.errTypeList.push(errType);
                }
                return fileInfo;
            };
        /**
         * @param {?} uuid
         * @param {?} selectedFile
         * @param {?} fileName
         * @param {?=} state
         * @return {?}
         */
        FileUploadComponent.prototype.uploadFile = /**
         * @param {?} uuid
         * @param {?} selectedFile
         * @param {?} fileName
         * @param {?=} state
         * @return {?}
         */
            function (uuid, selectedFile, fileName, state) {
                var _this = this;
                if (state === void 0) {
                    state = FileState.New;
                }
                /** @type {?} */
                var fileInfo = this.handleFileInfo(uuid, selectedFile, fileName);
                /** @type {?} */
                var uploadFileInfo = new UploadFileInfo();
                uploadFileInfo.metadataId = uuid;
                uploadFileInfo.fileName = fileInfo.name;
                uploadFileInfo.fileSize = fileInfo.size;
                uploadFileInfo.state = state;
                uploadFileInfo.securityInfo = this.securityInfoList[0];
                //判断是否支持分片上传
                if (this.allowedMultiUpload) {
                    //支持分片上传
                    /** @type {?} */
                    var initRequest = new InitMultiUploadRequest;
                    initRequest.path = this.formId;
                    initRequest.metadataId = uuid;
                    initRequest.rootId = this.rootId;
                    initRequest.size = fileInfo.fileSize;
                    initRequest.fileName = fileName;
                    //初始化分片
                    this.initMultiUpload(initRequest).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        if (res.error != null) {
                            _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                            _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                            _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                        }
                        else {
                            /** @type {?} */
                            var uploadId_1 = res.uploadId;
                            /** @type {?} */
                            var chunkTotal = Math.ceil(selectedFile.size / _this.bufferSize);
                            /** @type {?} */
                            var chunkIndex = 0;
                            /** @type {?} */
                            var multiResultList_1 = [];
                            _this.fileTotalChunk[uuid] = chunkTotal;
                            _this.uploadedChunk[uuid] = 0;
                            while (chunkIndex < chunkTotal) {
                                /** @type {?} */
                                var nextSize = Math.min((chunkIndex + 1) * _this.bufferSize, selectedFile.size);
                                /** @type {?} */
                                var fileData = selectedFile.slice(chunkIndex * _this.bufferSize, nextSize);
                                /** @type {?} */
                                var multiRequest = new MultiUploadRequest;
                                multiRequest.metadataId = uuid;
                                multiRequest.rootId = _this.rootId;
                                multiRequest.uploadId = uploadId_1;
                                multiRequest.index = chunkIndex;
                                multiRequest.total = chunkTotal;
                                multiRequest.size = fileData.size;
                                /** @type {?} */
                                var formData = new FormData();
                                formData.append('multiRequest', JSON.stringify(multiRequest));
                                formData.append('file', fileData);
                                _this.multiUpload(formData).subscribe(( /**
                                 * @param {?} res
                                 * @return {?}
                                 */function (res) {
                                    if (res.error != null) {
                                        _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                                        _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                        _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                                    }
                                    else {
                                        multiResultList_1.push(res.result);
                                        _this.uploadedChunk[uuid]++;
                                        _this.files[_this.files.indexOf(fileInfo)].uploadProcess = Number.parseInt((_this.uploadedChunk[uuid] / _this.fileTotalChunk[uuid] * 100).toFixed(0));
                                        if (_this.uploadedChunk[uuid] == _this.fileTotalChunk[uuid]) {
                                            if (multiResultList_1.length == _this.fileTotalChunk[uuid]) {
                                                /** @type {?} */
                                                var completeMultiUploadRequest = new CompleteMultiUploadRequest;
                                                completeMultiUploadRequest.metadataId = uuid;
                                                completeMultiUploadRequest.partList = multiResultList_1;
                                                completeMultiUploadRequest.rootId = _this.rootId;
                                                completeMultiUploadRequest.uploadId = uploadId_1;
                                                completeMultiUploadRequest.size = fileInfo.fileSize;
                                                if (_this.haveExtensionProperty)
                                                    completeMultiUploadRequest.exPropertyName = _this.defaultPropertyName;
                                                _this.completeMultiUpload(completeMultiUploadRequest).subscribe(( /**
                                                 * @param {?} res
                                                 * @return {?}
                                                 */function (res) {
                                                    if (res.status != 200) {
                                                        _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                                                        _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                                        _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                                                    }
                                                    else {
                                                        _this.files[_this.files.indexOf(fileInfo)].uploadResult = true;
                                                        _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                                        _this.uploadFileInfoList = _this.uploadFileInfoList.concat(uploadFileInfo);
                                                        _this.uploadedFileInfoList = _this.uploadedFileInfoList.concat(uploadFileInfo);
                                                        _this.uploadedFileTotal++;
                                                    }
                                                }));
                                                //后台异步拼接文档
                                            }
                                            else {
                                                _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                                                _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                                _this.files[_this.files.indexOf(fileInfo)].errorMessage = _this.localepipe.transform('mismatchChunkSize');
                                            }
                                        }
                                    }
                                }));
                                chunkIndex = chunkIndex + 1;
                            }
                        }
                    }));
                }
                else {
                    /** @type {?} */
                    var entity = new GspFormStreamEntity;
                    entity.formId = this.formId;
                    entity.metadataId = uuid;
                    entity.mode = OperatingModes.Temp;
                    entity.rootId = this.rootId;
                    entity.size = selectedFile.size;
                    entity.fileName = fileName;
                    if (this.haveExtensionProperty)
                        entity.exPropertyName = this.defaultPropertyName;
                    /** @type {?} */
                    var formData = new FormData();
                    formData.append('uploadEntity', JSON.stringify(entity));
                    formData.append('file', selectedFile);
                    this.uploadSingleFile(formData).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        if (res != null) {
                            _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                            _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                            _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                        }
                        else {
                            _this.files[_this.files.indexOf(fileInfo)].uploadResult = true;
                            _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                            _this.uploadFileInfoList = _this.uploadFileInfoList.concat(uploadFileInfo);
                            _this.uploadedFileInfoList = _this.uploadedFileInfoList.concat(uploadFileInfo);
                            _this.uploadedFileTotal++;
                        }
                    }));
                }
                /** @type {?} */
                var index = -1;
                this.files.forEach(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    if (x.name == fileInfo.name) {
                        if (index == -1)
                            index = _this.files.indexOf(x);
                    }
                }));
                if (index != -1 && index != this.files.length - 1) {
                    this.files.splice(index, 1);
                    this.uploadFileInfoList.splice(index, 1);
                    this.uploadedFileInfoList.splice(index, 1);
                    //this.uploadedFileTotal--;
                }
            };
        /**
         * @param {?} formdata
         * @return {?}
         */
        FileUploadComponent.prototype.uploadSingleFile = /**
         * @param {?} formdata
         * @return {?}
         */
            function (formdata) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/single";
                return this.httpclient.post(url, formdata).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @param {?} formdata
         * @return {?}
         */
        FileUploadComponent.prototype.uploadSliceFile = /**
         * @param {?} formdata
         * @return {?}
         */
            function (formdata) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/slice";
                return this.httpclient.post(url, formdata).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @param {?} request
         * @return {?}
         */
        FileUploadComponent.prototype.initMultiUpload = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/multi/init";
                return this.httpclient.post(url, request).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @param {?} formdata
         * @return {?}
         */
        FileUploadComponent.prototype.multiUpload = /**
         * @param {?} formdata
         * @return {?}
         */
            function (formdata) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/multi/upload";
                return this.httpclient.post(url, formdata).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @param {?} request
         * @return {?}
         */
        FileUploadComponent.prototype.completeMultiUpload = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/formdoc/multi/complete";
                return this.httpclient.post(url, request).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.selectAllFile = /**
         * @return {?}
         */
            function () {
                if (!this.fileAllSelected) {
                    this.files.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        element.selectd = true;
                    }));
                    this.fileAllSelected = true;
                    this.selectedFileCount = this.files.length;
                }
                else {
                    this.files.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        element.selectd = false;
                    }));
                    this.fileAllSelected = false;
                    this.selectedFileCount = 0;
                }
            };
        /**
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.checkoutSelectFile = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                // let obj: any = document.getElementById(fileName);
                file.selectd = !file.selectd;
                if (file.selectd)
                    this.selectedFileCount++;
                else
                    this.selectedFileCount--;
                if (this.selectedFileCount == this.files.length) {
                    this.fileAllSelected = true;
                    //this.isFileAllSelected();
                }
                else {
                    this.fileAllSelected = false;
                    //this.isFileAllSelected();
                }
            };
        /**
         * @param {?} fileInfo
         * @return {?}
         */
        FileUploadComponent.prototype.listDeleteFile = /**
         * @param {?} fileInfo
         * @return {?}
         */
            function (fileInfo) {
                if (fileInfo.selectd)
                    this.selectedFileCount--;
                //console.log(fileName);
                this.files.splice(this.files.indexOf(fileInfo), 1);
                if (fileInfo.uploadResult) {
                    /** @type {?} */
                    var idList = [];
                    idList.push(fileInfo.id);
                    this.uploadService.cancel(idList, this.rootId).subscribe();
                    this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.fileName == fileInfo.name; }))[0]), 1);
                    this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.fileName == fileInfo.name; }))[0]), 1);
                    this.uploadedFileTotal--;
                }
                if (this.selectedFileCount == 0)
                    this.fileAllSelected = false;
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.listMultipleDeleteFile = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var selectedFile = [];
                this.files.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    /** @type {?} */
                    var obj = document.getElementById(element.name);
                    if (obj.checked)
                        selectedFile.push(element);
                }));
                /** @type {?} */
                var metadataList = [];
                selectedFile.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    metadataList.push(element.id);
                    _this.files.splice(_this.files.indexOf(element), 1);
                    if (element.uploadResult) {
                        _this.uploadFileInfoList.splice(_this.uploadFileInfoList.indexOf(_this.uploadFileInfoList.filter(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.fileName == element.name; }))[0]), 1);
                        _this.uploadedFileInfoList.splice(_this.uploadedFileInfoList.indexOf(_this.uploadedFileInfoList.filter(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.fileName == element.name; }))[0]), 1);
                        _this.uploadedFileTotal--;
                    }
                }));
                this.uploadService.cancel(metadataList, this.rootId).subscribe();
                /** @type {?} */
                var allBox = document.getElementById("allCheckBox");
                if (allBox != null)
                    allBox.checked = false;
                this.selectedFileCount = 0;
                this.fileAllSelected = false;
            };
        /**
         * @param {?} fileName
         * @return {?}
         */
        FileUploadComponent.prototype.getPicListDisplayName = /**
         * @param {?} fileName
         * @return {?}
         */
            function (fileName) {
                if (fileName.length <= 10)
                    return fileName;
                else {
                    /** @type {?} */
                    var headContent = fileName.substring(0, 2);
                    /** @type {?} */
                    var tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);
                    return headContent + "…" + tailContent;
                }
            };
        /**
         * @param {?} fileName
         * @return {?}
         */
        FileUploadComponent.prototype.getQueueDisplayName = /**
         * @param {?} fileName
         * @return {?}
         */
            function (fileName) {
                return fileName;
            };
        /**
         * @param {?} selectdFile
         * @param {?} fileInfo
         * @param {?} docType
         * @return {?}
         */
        FileUploadComponent.prototype.addDocInfo = /**
         * @param {?} selectdFile
         * @param {?} fileInfo
         * @param {?} docType
         * @return {?}
         */
            function (selectdFile, fileInfo, docType) {
                var _this = this;
                switch (docType) {
                    case DocType.Word: {
                        fileInfo.source = "/platform/runtime/dfs/images/word.png";
                        this.files.push(fileInfo);
                        break;
                    }
                    case DocType.Pdf: {
                        fileInfo.source = "/platform/runtime/dfs/images/pdf.png";
                        this.files.push(fileInfo);
                        break;
                    }
                    case DocType.Excel: {
                        fileInfo.source = "/platform/runtime/dfs/images/excel.png";
                        this.files.push(fileInfo);
                        break;
                    }
                    case DocType.Txt: {
                        fileInfo.source = "/platform/runtime/dfs/images/txt.png";
                        this.files.push(fileInfo);
                        break;
                    }
                    case DocType.Powerpoint: {
                        fileInfo.source = "/platform/runtime/dfs/images/ppt.png";
                        this.files.push(fileInfo);
                        break;
                    }
                    case DocType.Other: {
                        fileInfo.source = "/platform/runtime/dfs/images/file.png";
                        this.files.push(fileInfo);
                        break;
                    }
                    case DocType.Image: {
                        /** @type {?} */
                        var reader_1 = new FileReader();
                        reader_1.readAsDataURL(selectdFile);
                        reader_1.onload = ( /**
                         * @param {?} _event
                         * @return {?}
                         */function (_event) {
                            /** @type {?} */
                            var imgUrl = reader_1.result;
                            if (_this.injector != null) {
                                /** @type {?} */
                                var sanitizer = _this.injector.get(platformBrowser.DomSanitizer);
                                imgUrl = sanitizer.bypassSecurityTrustResourceUrl(imgUrl);
                            }
                            fileInfo.source = imgUrl;
                            _this.files.push(fileInfo);
                            //因为异步处理的差异，补偿一次删除
                            /** @type {?} */
                            var index = -1;
                            _this.files.forEach(( /**
                             * @param {?} x
                             * @return {?}
                             */function (x) {
                                if (x.name == fileInfo.name) {
                                    if (index == -1)
                                        index = _this.files.indexOf(x);
                                }
                            }));
                            if (index != -1 && index != _this.files.length - 1) {
                                _this.files.splice(index, 1);
                                _this.uploadFileInfoList.splice(index, 1);
                                _this.uploadedFileInfoList.splice(index, 1);
                            }
                        });
                    }
                }
            };
        /**
         * @param {?} strList
         * @return {?}
         */
        FileUploadComponent.prototype.listToString = /**
         * @param {?} strList
         * @return {?}
         */
            function (strList) {
                /** @type {?} */
                var name = "";
                for (var i = 0; i < strList.length; i++) {
                    name += strList[i] + ",";
                }
                return name;
            };
        /**
         * @param {?} $event
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.securityChange = /**
         * @param {?} $event
         * @param {?} file
         * @return {?}
         */
            function ($event, file) {
                file.securityInfo = $event.data;
                /** @type {?} */
                var uploadFile = this.uploadFileInfoList.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x.metadataId = file.id; }))[0];
                uploadFile.securityInfo = $event.data;
            };
        /**
         * @param {?} $event
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.typeChange = /**
         * @param {?} $event
         * @param {?} file
         * @return {?}
         */
            function ($event, file) {
                file.extensionName = $event.data.name;
                /** @type {?} */
                var exStorageFileInfo = new ExStorageFileInfo;
                if (file.extensionName == this.storageExtension.defaultPropertyName) {
                    if (this.exStorageFileList.filter(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.metadataId == file.id; })).length > 0)
                        this.exStorageFileList.splice(this.exStorageFileList.findIndex(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.metadataId == file.id; })), 1);
                }
                else {
                    if (this.exStorageFileList.filter(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.metadataId == file.id; })).length > 0) {
                        exStorageFileInfo = this.exStorageFileList.filter(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.metadataId == file.id; }))[0];
                        exStorageFileInfo.exPropertyName = file.extensionName;
                    }
                    else {
                        exStorageFileInfo.metadataId = file.id;
                        exStorageFileInfo.exPropertyName = file.extensionName;
                        this.exStorageFileList.push(exStorageFileInfo);
                    }
                }
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.upload = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.uploadedFileTotal != this.files.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x.isUploading || x.uploadResult; })).length) {
                    this.msgService.warning(this.localepipe.transform('wait'));
                    return rxjs.of(false);
                }
                if (this.haveSecurityInfo) {
                    this.uploadService.saveSecurityInfo(this.uploadFileInfoList, this.rootId).subscribe();
                }
                if (this.storageExtension == null)
                    return rxjs.of(this.uploadFileInfoList);
                else {
                    if (this.exStorageFileList.length == 0)
                        return rxjs.of(this.uploadFileInfoList);
                    else {
                        /** @type {?} */
                        var loading_1 = this.loadService.show({
                            message: this.localepipe.transform('saveTo') + this.storageExtension.extensionName
                        });
                        return this.uploadService.changeStorageInstance(this.exStorageFileList, this.rootId).pipe(operators.map(( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            // if (res != null)
                            //   this.msgService.error('保存到' + this.storageExtension.extensionName + "失败，上传文件自动保存到" + this.storageExtension.defaultPropertyName + "存储。" + res.error.Message);
                            loading_1.close();
                            return _this.uploadFileInfoList;
                        })));
                    }
                }
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.uploadFileInfoList.length == 0)
                    return;
                this.uploadFileInfoList.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    _this.metadataIdList.push(element.metadataId);
                }));
                this.uploadService.cancel(this.metadataIdList, this.rootId).subscribe();
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.getUploadFileInfoList = /**
         * @return {?}
         */
            function () {
                return this.uploadFileInfoList;
            };
        /**
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.delete = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                this.files.splice(this.files.indexOf(file), 1);
                if (file.uploadResult)
                    this.uploadedFileTotal--;
                if (this.exStorageFileList.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x.metadataId == file.id; })).length > 0) {
                    this.exStorageFileList.splice(this.exStorageFileList.findIndex(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.metadataId == file.id; })), 1);
                }
            };
        /**
         * @param {?} size
         * @return {?}
         */
        FileUploadComponent.prototype.getFileSize = /**
         * @param {?} size
         * @return {?}
         */
            function (size) {
                if (size < 102400)
                    return (size / 1024).toFixed(1) + "K";
                else if (size < 1024 * 1024)
                    return (size / 1024).toFixed(0) + "K";
                else if (size < 100 * 1024 * 1024)
                    return (size / 1024 / 1024).toFixed(1) + "M";
                else if (size < 1024 * 1024 * 1024)
                    return (size / 1024 / 1024).toFixed(0) + "M";
                else
                    return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.showByGroup = /**
         * @return {?}
         */
            function () {
                this.showType = 0;
                // this.selectedFileCount = 0;
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.showByList = /**
         * @return {?}
         */
            function () {
                this.showType = 1;
                // this.selectedFileCount = 0;
                if (this.selectedFileCount != 0 && this.selectedFileCount == this.files.length) {
                    this.fileAllSelected = true;
                }
            };
        /**
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.mouseOver = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                file.mouseOn = true;
            };
        /**
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.mouseOut = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                file.mouseOn = false;
            };
        FileUploadComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-file-upload',
                        template: "<div *ngIf=\"hasSelectedFile\">\n\n    <div class=\"farris-header\" style=\"height: 50px; width: 100%\">\n        <div class=\"btn btn-secondary upload_button\">\n            <img [src]=\"uploadLittleIconAddress\">\n            <span>{{'uploadFile' | locale}} </span>\n            <input type=\"file\" (focus)=\"showLoading()\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\"\n                title=\"\" [accept]=\"fileType\">\n        </div>\n\n\n        <button *ngIf=\"showType==0 && !fileAllSelected && files.length >0 \" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">{{'selectAll' | locale}}</button>\n        <button *ngIf=\"showType==0 && fileAllSelected  && files.length >0 \" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">{{'selectNull' | locale}}</button>\n        <button *ngIf=\"showType==0 && selectedFileCount>0\" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">{{'delete' | locale}}</button>\n\n        <button *ngIf=\"showType==1 && selectedFileCount>0\" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">{{'delete' | locale}}</button>\n\n        <farris-radio-group class=\"button_group_upload\" [(model)]=\"radioButtonGroupValue\" [horizontal]=\"false\">\n            <farris-radio-button [label]=\"'showByGroup'\" (click)=\"showByGroup()\">\n                <span  class=\"f-icon f-icon-sudoku-new\"> </span>\n            </farris-radio-button>\n            <farris-radio-button [label]=\"'showByList'\" (click)=\"showByList()\">\n                <span  class=\"f-icon f-icon-page-title-define\"> </span>\n            </farris-radio-button>\n\n        </farris-radio-group>\n\n        <!-- <kendo-buttongroup [selection]=\"'single'\" class=\"button_group_upload \"\n            style=\"background-color: #ffffff; color: #388FFF;border: 1px solid #ddd;\" look=\"flat\">\n            <button kendoButton [selected]=\"true\" [toggleable]=\"true\"\n                [imageUrl]=\"'/platform/runtime/dfs/images/piclist.png'\" (click)=\"showByGroup()\"></button>\n            <button kendoButton [toggleable]=\"true\" [imageUrl]=\"'/platform/runtime/dfs/images/queuelist.png'\"\n                (click)=\"showByList()\"></button>\n        </kendo-buttongroup> -->\n\n\n    </div>\n\n    <!-- <div class=\"progress\" style=\"height: 12px;\">\n    <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"uploadProcess\"></div>\n  </div> -->\n\n    <div class=\"pic_list\" *ngIf=\"showType==0\">\n        <ul *ngFor=\"let file of files\">\n            <li (mouseenter)=\"mouseOver(file)\" (mouseleave)=\"mouseOut(file)\">\n                <div *ngIf=\"file.isUploading\">\n                    <farris-progress [type]=\"'circle'\" [percent]=\"file.uploadProcess\" [strokeLinecap]=\"'square'\"\n                        [status]=\"'active'\"></farris-progress>\n                </div>\n\n                <table *ngIf=\"!file.uploadResult && !file.isUploading\"\n                    style=\"margin: 0 auto; border: 1px solid #ddd; width: 135px; height: 160px;\">\n                    <tr style=\"margin: 0 auto ; height: 80px;\">\n                        <td style=\"text-align: center\"><span class=\"f-icon f-icon-warn\"></span></td>\n                    </tr>\n                    <tr style=\"margin: 0 auto ; height: 30px;\">\n                        <td style=\"text-align: center\"> {{'uploadFailure' | locale}} </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: center\"><button style=\"margin: 0 auto ; height: 20px; \"\n                                class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">{{'detail' |\n                                locale}}</button></td>\n                    </tr>\n                </table>\n                <div *ngIf=\"!file.isUploading && file.uploadResult\" style=\"border: 1px solid #ddd;\">\n                    <img [src]='file.source'>\n                    <div *ngIf=\"haveExtensionProperty\"\n                        style=\"width: 133px; height: 25px; background-color: white; position: absolute;bottom: 0; \">\n\n                        <div style=\"width: 100px;height: 25px;position:absolute;margin: 0 17px;\">\n                            <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\"\n                                [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\"\n                                [enableClear]=\"false\">\n                                <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                            </farris-combo-list>\n                        </div>\n                    </div>\n                    <div *ngIf=\"haveSecurityInfo\"\n                        style=\"width: 133px; height: 25px; background-color: white; position: absolute;bottom: 0; \">\n\n                        <div style=\"width: 100px;height: 25px;position:absolute;margin: 0 17px;\">\n                            <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"securityInfoList\"\n                                [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"securityChange($event,file)\"\n                                [enableClear]=\"false\">\n                                <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                            </farris-combo-list>\n                        </div>\n                    </div>\n                </div>\n                <table *ngIf=\"!file.isUploading\">\n                    <tr style=\"height: 20px\">\n                        <td style=\"width: 15px; vertical-align: middle; text-align: center\">\n                            <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\">  -->\n                            <div class=\"farris-input-wrap\" style=\"height: 20px\" (click)=\"checkoutSelectFile(file)\">\n                                <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0;height: 20px;\"\n                                    [ngStyle]=\"checkboxPos\">\n                                    <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\"\n                                        [(ngModel)]=\"file.selectd\">\n                                    <label class=\"custom-control-label\"\n                                        style=\"padding: 0 0 10px 0; position: relative; top: -8px;\"></label>\n                                </div>\n                            </div>\n                        </td>\n                        <td style=\"width: 120px; vertical-align: middle; text-align: center\" [title]=\"file.name\">\n                            {{file.picListDisplayName}}</td>\n                    </tr>\n                </table>\n                <!-- <span>{{file.picListDisplayName}}</span> -->\n                <!-- <p class=\"filename\">{{file.picListDisplayName}}</p> -->\n                <button *ngIf=\"!file.isUploading && file.mouseOn\"\n                    style=\"position: absolute; top: 0; right: 0px; width: 24px; height: 24px; border: none;\"\n                    (click)=\"listDeleteFile(file)\">\n                    <span style=\"position: relative;  right: 2px; \" class=\"f-icon f-icon-delete\"> </span>\n                </button>\n                <!-- <button *ngIf=\"file.hasUploaded\" class=\"k-primary\" kendoButton [icon]=\"'check'\" [disabled]=\"true\"></button> -->\n            </li>\n        </ul>\n        <br>\n    </div>\n\n    <div class=\"queue_list\" *ngIf=\"showType==1\">\n        <table>\n            <tr style=\"height: 50px; table-layout:fixed;\">\n                <th style=\"width: 40px; vertical-align: middle; text-align: center\">\n                    <!-- <input type=\"checkbox\" id=\"allCheckBox\" (click)=\"selectAllFile()\"> -->\n                    <div class=\"farris-input-wrap\" (click)=\"selectAllFile()\">\n                        <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                            <input class=\"custom-control-input\" type=\"checkbox\" id=\"allCheckBox\"\n                                [(ngModel)]=\"fileAllSelected\">\n                            <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                        </div>\n                    </div>\n                </th>\n                <th style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">{{'fileName' | locale}}</th>\n                <th style=\"width: 100px; vertical-align: middle\">{{'size' | locale}}</th>\n                <th style=\"width: 170px; vertical-align: middle; text-align: center\">{{'state' | locale}}</th>\n                <th *ngIf=\"haveExtensionProperty\" style=\"width: 100px; vertical-align: middle; text-align: center\">\n                    {{storageExtension.extensionName}}\n                </th>\n                <th style=\"width: 140px; vertical-align: middle; text-align: center\">{{'operation' | locale}}</th>\n            </tr>\n        </table>\n        <div style=\"height: 370px; overflow: auto;\">\n            <table>\n                <tr *ngFor=\"let file of files\" style=\"height: 40px\">\n                    <td colspan=\"5\" *ngIf=\"file.isUploading\">\n                        <!-- <div style=\"width:100%; display: table-cell; vertical-align: middle; text-align: center; \"> -->\n                        <div style=\"width: 500px;margin:0 auto\">\n                            <farris-progress [percent]=\"file.uploadProcess\" [status]=\"'active'\">\n                            </farris-progress>\n                        </div>\n\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\" width: 40px; vertical-align: middle; text-align: center\">\n                        <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\"> -->\n                        <div class=\"farris-input-wrap\" (click)=\"checkoutSelectFile(file)\">\n                            <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                                <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\"\n                                    [(ngModel)]=\"file.selectd\">\n                                <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                            </div>\n                        </div>\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">\n                        {{file.queueListDisplayName}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"width: 100px; vertical-align: middle\">{{file.size}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 170px; vertical-align: middle;\">\n                        <table *ngIf=\"!file.uploadResult\" style=\"margin: 0 auto\">\n                            <tr style=\"margin: 0 auto\">\n                                <td><span class=\"f-icon f-icon-error\"></span></td>\n                                <td> {{'uploadFailure' | locale}} </td>\n                                <td><button style=\"height: 24px\" class=\"btn-link btn ng-star-inserted\"\n                                        (click)=\"showErrorMessage(file)\">{{'detail' | locale}}</button></td>\n                            </tr>\n                        </table>\n                        <!-- <span *ngIf=\"!file.uploadResult\"><span class=\"f-icon f-icon-error\"></span> \u4E0A\u4F20\u5931\u8D25 <button\n              class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">\u8BE6\u60C5</button></span> -->\n                        <span *ngIf=\"file.uploadResult\"><span class=\"f-icon f-icon-success\"></span> {{'uploadSucceed' |\n                            locale}}</span>\n                    </td>\n                    <td *ngIf=\"!file.isUploading&&haveExtensionProperty\"\n                        style=\"text-align: center; width: 100px; vertical-align: middle;\">\n                        <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\"\n                            [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\"\n                            [enableClear]=\"false\">\n                            <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                        </farris-combo-list>\n                    </td>\n                    <td *ngIf=\"!file.isUploading&&haveSecurityInfo\"\n                        style=\"text-align: center; width: 100px; vertical-align: middle;\">\n                        <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"securityInfoList\"\n                            [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"securityChange($event,file)\"\n                            [enableClear]=\"false\">\n                            <!-- <ng-template #itemTemp let-item>\n                            <div class=\"combo-list\">\n                                <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                <span class=\"combo-list-label\">{{item.label}}</span>\n                            </div>\n                        </ng-template> -->\n                        </farris-combo-list>\n                    </td>\n\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 140px; vertical-align: middle;\">\n                        <!-- <button *ngIf=\"file.uploadResult\" class=\"btn-link btn ng-star-inserted\" (click)=\"retryUploadFile(file.name)\">\u91CD\u8BD5</button> -->\n                        <button class=\"btn-link btn ng-star-inserted\" style=\"margin: 0 auto\"\n                            (click)=\"listDeleteFile(file)\">{{'delete' | locale}}</button>\n                    </td>\n\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"!hasSelectedFile\" class='home_page'>\n    <img [src]=\"uploadIconAddress\">\n    <div>\n        <span class=\"btn btn-primary btn-lg\">{{'uploadFile' | locale}} </span>\n        <input type=\"file\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\">\n        <!-- <input type=\"file\" (focus)=\"showLoading()\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\"> -->\n    </div>\n</div>",
                        styles: [".home_page{text-align:center}.home_page img{position:absolute;top:180px;margin-left:-35px;width:70px;height:56px}.home_page div{position:absolute;left:50%;top:255px;margin-left:-75px;width:150px;height:32px;overflow:hidden}.home_page div span{width:150px;height:32px;position:absolute;z-index:10;left:0}.home_page div input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)';z-index:11}.upload_button{width:110px;height:32px;overflow:hidden}.upload_button span{position:relative;right:-4px;top:4px;width:56px;height:22px;font-size:14px}.upload_button input{height:32px;width:110px;position:absolute;left:22px;top:12px;opacity:0;filter:'alpha(opacity=0)';overflow:hidden}.upload_button img{position:relative;left:-6px;top:3px;width:14px;height:14px}.button_group_upload{position:absolute;right:18px;top:12px;height:26px;width:90px}.button_group_upload button{height:26px;width:26px}.fileinput-button{position:absolute;right:60px;bottom:40px;overflow:hidden;width:24px;height:24px;border-radius:12px;transform:scale(2.5);-ms-transform:scale(2.5);-moz-transform:scale(2.5);-webkit-transform:scale(2.5);-o-transform:scale(2.5);color:#0686fd}.fileinput-button input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)'}.pic-droplist{height:24px;color:#e0e1e2;background-color:#e0e1e2}.pic-droplist input-group{display:table-cell;width:100px;text-align:center;border:0}.pic-droplist input-group div{border:0}.pic-droplist input-group div div,.pic-droplist input-group div input{background-color:#e0e1e2}.pic_list{padding:0;height:415px;overflow-y:auto;overflow-x:hidden}.pic_list ul{padding:0;list-style:none;width:100%;margin:20px 0 0 20px}.pic_list ul li{height:179px;width:135px;margin:8px 0 8px 12px;float:left;overflow:hidden;align-items:center;position:relative}.pic_list ul li div{width:135px;height:159px;margin:auto;display:table-cell;vertical-align:middle;text-align:center;position:relative}.pic_list ul li div img{max-width:120px;max-height:118px;align-items:center;margin:auto;vertical-align:middle;text-align:center}.pic_list ul li span.filename{width:100px;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.queue_list{display:block;height:420px;overflow-y:auto}.file_list{list-style:none;margin:0;padding:0;overflow-x:hidden;overflow-y:auto}.file_list li{height:50px;line-height:35px;font-size:16px;position:relative}.file_list li button{float:right;top:6px;right:10px;width:20px}.file_list li p.title{padding:0 0 0 6px;margin:0 210px 0 0}.file_list li p.size{position:absolute;width:100px;top:0;right:100px}"]
                    }] }
        ];
        /** @nocollapse */
        FileUploadComponent.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: UploadService },
                { type: uiLoading.LoadingService },
                { type: i0.Injector }
            ];
        };
        FileUploadComponent.propDecorators = {
            formId: [{ type: i0.Input }],
            rootId: [{ type: i0.Input }],
            fileType: [{ type: i0.Input }],
            fileCount: [{ type: i0.Input }],
            oldIdList: [{ type: i0.Input }],
            securityInfo: [{ type: i0.Input }],
            opCell: [{ type: i0.ViewChild, args: ['opCell',] }]
        };
        return FileUploadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DownloadService = /** @class */ (function () {
        function DownloadService() {
        }
        /**
         * @param {?} metadataId
         * @param {?} rootId
         * @return {?}
         */
        DownloadService.prototype.getDownloadUrl = /**
         * @param {?} metadataId
         * @param {?} rootId
         * @return {?}
         */
            function (metadataId, rootId) {
                return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
            };
        /**
         * @param {?} metadataId
         * @param {?} rootId
         * @return {?}
         */
        DownloadService.prototype.getStreamDownloadUrl = /**
         * @param {?} metadataId
         * @param {?} rootId
         * @return {?}
         */
            function (metadataId, rootId) {
                return "/api/runtime/dfs/v1.0/formdoc/stream?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
        DownloadService.prototype.getMultipleDownloadUrl = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
            function (metadataIdList, rootId) {
                /** @type {?} */
                var list = JSON.parse(metadataIdList);
                return "/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId));
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?} zipName
         * @return {?}
         */
        DownloadService.prototype.getMultipleDownloadUrlWithName = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?} zipName
         * @return {?}
         */
            function (metadataIdList, rootId, zipName) {
                /** @type {?} */
                var list = JSON.parse(metadataIdList);
                if (zipName == null || zipName == "")
                    zipName = 'unifile.zip';
                if (!zipName.endsWith(".zip"))
                    zipName += '.zip';
                return "/api/runtime/dfs/v1.0/doc/compress/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId)) + "&zipName=" + encodeURIComponent(zipName);
            };
        /**
         * @param {?} metadataId
         * @param {?} rootId
         * @param {?} version
         * @return {?}
         */
        DownloadService.prototype.getHistoryDownloadUrl = /**
         * @param {?} metadataId
         * @param {?} rootId
         * @param {?} version
         * @return {?}
         */
            function (metadataId, rootId, version) {
                //let list:string[]=JSON.parse(metadataIdList);
                return "/api/runtime/dfs/v1.0/doc/historycontent?metadataid=" + metadataId + "&rootid=" + rootId + "&version=" + version + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
            };
        /**
         * @private
         * @param {?} str
         * @param {?} str1
         * @return {?}
         */
        DownloadService.prototype.mergeString = /**
         * @private
         * @param {?} str
         * @param {?} str1
         * @return {?}
         */
            function (str, str1) {
                /** @type {?} */
                var min = str.length < str1.length ? str.length : str1.length;
                /** @type {?} */
                var res = "";
                /** @type {?} */
                var i = 0;
                for (i = 0; i < min; i++) {
                    res += str.substring(i, i + 1);
                    res += str1.substring(i, i + 1);
                }
                res += str.length < str1.length ? str1.substring(i) : str.substring(i);
                return res;
            };
        /**
         * @private
         * @param {?} str
         * @return {?}
         */
        DownloadService.prototype.getToken = /**
         * @private
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var array = [1, 2, 3];
                if (str.length > 24)
                    str = str.substring(0, 24);
                /** @type {?} */
                var length = Math.floor(str.length / 3);
                /** @type {?} */
                var str1 = str.substring(0, length);
                /** @type {?} */
                var str2 = str.substring(length, 2 * length);
                /** @type {?} */
                var str3 = str.substring(2 * length, 3 * length);
                /** @type {?} */
                var randomArray = [];
                /** @type {?} */
                var random = Math.ceil(Math.random() * 3);
                randomArray.push(array[random - 1]);
                array.splice(random - 1, 1);
                random = Math.ceil(Math.random() * 2);
                randomArray.push(array[random - 1]);
                array.splice(random - 1, 1);
                randomArray.push(array[0]);
                /** @type {?} */
                var timeStamp = Math.round(new Date().getTime() / 1000) + "";
                return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
            };
        /**
         * @private
         * @param {?} str1
         * @param {?} str2
         * @param {?} str3
         * @param {?} i
         * @return {?}
         */
        DownloadService.prototype.switchStr = /**
         * @private
         * @param {?} str1
         * @param {?} str2
         * @param {?} str3
         * @param {?} i
         * @return {?}
         */
            function (str1, str2, str3, i) {
                switch (i) {
                    case 1: return str1;
                    case 2: return str2;
                    case 3: return str3;
                }
            };
        DownloadService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        DownloadService.ctorParameters = function () { return []; };
        return DownloadService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$1 = localStorage.getItem('languageCode') || 'zh-CHS';
    var UploadModule = /** @class */ (function () {
        function UploadModule() {
        }
        UploadModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [FileUploadComponent, LocalLangPipe],
                        imports: [
                            common.CommonModule,
                            uiNotify.NotifyModule,
                            uiMessager.MessagerModule.forRoot(),
                            uiLoading.LoadingModule.forRoot(),
                            uiProgress.ProgressModule,
                            forms.FormsModule,
                            uiForms.FarrisFormsModule,
                            uiComboList.ComboListModule,
                            http.HttpClientModule
                        ],
                        exports: [FileUploadComponent],
                        entryComponents: [FileUploadComponent],
                        providers: [UploadService, DownloadService, cafCommon.LanguageService, cafCommon.HttpService, cafCommon.CacheService, cafCommon.SessionService,
                            { provide: i0.LOCALE_ID, useValue: ɵ0$1 },]
                    },] }
        ];
        return UploadModule;
    }());
    /** @type {?} */
    var ɵa = UploadModule;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UploadDialogComponent = /** @class */ (function () {
        function UploadDialogComponent(modalService) {
            this.modalService = modalService;
            this.metadataIdList = [];
        }
        /**
         * @return {?}
         */
        UploadDialogComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        UploadDialogComponent.prototype.showDialog = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.dlg = this.modalService.show(FileUploadComponent, {
                    title: '选择文件',
                    width: 800, height: 500,
                    buttons: [
                        {
                            text: '上传', cls: 'k-button k-button-icontext k-primary', iconCls: "k-icon k-i-check", handle: ( /**
                             * @return {?}
                             */function () {
                                _this.fileUpload.upload();
                                _this.dlg.close();
                            })
                        },
                        {
                            text: '关闭', cls: 'k-button k-button-icontext', iconCls: "k-icon k-i-close", handle: ( /**
                             * @return {?}
                             */function () {
                                _this.fileUpload.cancel();
                                _this.dlg.close();
                            })
                        }
                    ],
                    showButtons: true,
                });
                this.dlg.content.formId = this.formId;
            };
        UploadDialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-uploaddialog',
                        template: "\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        UploadDialogComponent.ctorParameters = function () {
            return [
                { type: uiModal.BsModalService }
            ];
        };
        UploadDialogComponent.propDecorators = {
            formId: [{ type: i0.Input }],
            fileUpload: [{ type: i0.ViewChild, args: [FileUploadComponent,] }]
        };
        return UploadDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UploadDialogService = /** @class */ (function () {
        function UploadDialogService(modalService, componentFactoryResolver, injector) {
            this.modalService = modalService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.injector = injector;
            this.fileInfoList = [];
            if (this.injector) {
                this.modalService = this.injector.get(uiModal.BsModalService);
                this.localeid = localStorage.getItem("languageCode") || this.injector.get(i0.LOCALE_ID);
                this.localpipe = new LocalLangPipe(this.localeid);
            }
        }
        /**
         * @param {?} formId
         * @param {?} rootId
         * @return {?}
         */
        UploadDialogService.prototype.showDialog = /**
         * @param {?} formId
         * @param {?} rootId
         * @return {?}
         */
            function (formId, rootId) {
                var _this = this;
                /** @type {?} */
                var flag = 0;
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    /** @type {?} */
                    var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
                    /** @type {?} */
                    var viewerRef = viewerFactory.create(_this.injector);
                    viewerRef.instance.rootId = rootId;
                    viewerRef.instance.formId = formId;
                    _this.dlg = _this.modalService.show(viewerRef, {
                        title: _this.localpipe.transform('uploadFile'),
                        width: 950, height: 570,
                        buttons: [
                            {
                                text: _this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: ( /**
                                 * @return {?}
                                 */function () {
                                    _this.dlg.content.upload().subscribe(( /**
                                     * @param {?} res
                                     * @return {?}
                                     */function (res) {
                                        if (res) {
                                            resolve(res);
                                            flag = 1;
                                            _this.dlg.close();
                                        }
                                    }));
                                })
                            },
                            {
                                text: _this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: ( /**
                                 * @return {?}
                                 */function () {
                                    _this.dlg.close();
                                })
                            }
                        ],
                        showButtons: true,
                        showMaxButton: false,
                        beforeClose: ( /**
                         * @return {?}
                         */function () {
                            if (flag == 0)
                                _this.dlg.content.cancel();
                            return rxjs.of(true);
                        })
                    });
                }));
            };
        /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?=} oldIdList
         * @return {?}
         */
        UploadDialogService.prototype.uploadFile = /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?=} oldIdList
         * @return {?}
         */
            function (formId, rootId, oldIdList) {
                if (oldIdList === void 0) {
                    oldIdList = [];
                }
                return this.uploadFileWithLimit(formId, rootId, null, oldIdList);
            };
        /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?} limit
         * @param {?=} oldIdList
         * @return {?}
         */
        UploadDialogService.prototype.uploadFileWithLimit = /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?} limit
         * @param {?=} oldIdList
         * @return {?}
         */
            function (formId, rootId, limit, oldIdList) {
                var _this = this;
                if (oldIdList === void 0) {
                    oldIdList = [];
                }
                /** @type {?} */
                var flag = 0;
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    /** @type {?} */
                    var uploadFactory = _this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
                    /** @type {?} */
                    var uploadRef = uploadFactory.create(_this.injector);
                    if (limit != null) {
                        uploadRef.instance.fileCount = limit.fileCount;
                        uploadRef.instance.securityInfo = limit.securityInfo;
                        if (limit.fileType != null && limit.fileType != "")
                            uploadRef.instance.fileType = limit.fileType;
                    }
                    uploadRef.instance.rootId = rootId;
                    uploadRef.instance.formId = formId;
                    uploadRef.instance.oldIdList = oldIdList;
                    _this.dlg = _this.modalService.show(uploadRef, {
                        title: _this.localpipe.transform('uploadFile'),
                        width: 950, height: 570,
                        buttons: [
                            {
                                text: _this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: ( /**
                                 * @return {?}
                                 */function () {
                                    _this.dlg.content.upload().subscribe(( /**
                                     * @param {?} res
                                     * @return {?}
                                     */function (res) {
                                        if (res) {
                                            resolve(res);
                                            flag = 1;
                                            _this.dlg.close();
                                        }
                                    }));
                                })
                            },
                            {
                                text: _this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: ( /**
                                 * @return {?}
                                 */function () {
                                    _this.dlg.close();
                                })
                            }
                        ],
                        showButtons: true,
                        showMaxButton: false,
                        beforeClose: ( /**
                         * @return {?}
                         */function () {
                            if (flag == 0)
                                _this.dlg.content.cancel();
                            return rxjs.of(true);
                        })
                    });
                }));
            };
        UploadDialogService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        UploadDialogService.ctorParameters = function () {
            return [
                { type: uiModal.BsModalService },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector }
            ];
        };
        return UploadDialogService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UploadDialogMoudle = /** @class */ (function () {
        function UploadDialogMoudle() {
        }
        UploadDialogMoudle.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [UploadDialogComponent],
                        imports: [
                            common.CommonModule,
                            uiDialog.FarrisDialogModule,
                            uiMessager.MessagerModule.forRoot(),
                            UploadModule,
                            uiNotify.NotifyModule.forRoot(),
                            http.HttpClientModule
                        ],
                        exports: [UploadDialogComponent, FileUploadComponent],
                        entryComponents: [UploadDialogComponent, FileUploadComponent],
                        providers: [uiModal.BsModalService, cafCommon.HttpService, UploadDialogService, UploadService]
                    },] }
        ];
        return UploadDialogMoudle;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UploadLimit = /** @class */ (function () {
        function UploadLimit() {
            this.fileType = "*";
            this.fileCount = 0;
            this.securityInfo = null;
        }
        return UploadLimit;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspFormUploadListEntity = /** @class */ (function () {
        function GspFormUploadListEntity() {
        }
        return GspFormUploadListEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspFormDocInfo = /** @class */ (function () {
        function GspFormDocInfo() {
        }
        return GspFormDocInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspDocMetaProperty = /** @class */ (function () {
        function GspDocMetaProperty() {
        }
        return GspDocMetaProperty;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspFormUploadEntity = /** @class */ (function () {
        function GspFormUploadEntity() {
        }
        return GspFormUploadEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileInfo = /** @class */ (function () {
        function FileInfo() {
        }
        return FileInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspDocSecurityBaseInfo = /** @class */ (function () {
        function GspDocSecurityBaseInfo() {
        }
        return GspDocSecurityBaseInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SecurityEntity = /** @class */ (function () {
        function SecurityEntity() {
        }
        return SecurityEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormdocUploadService = FormdocUploadService;
    exports.FormdocUploadComponent = FormdocUploadComponent;
    exports.FormdocUploadModule = FormdocUploadModule;
    exports.UploadDialogMoudle = UploadDialogMoudle;
    exports.UploadDialogComponent = UploadDialogComponent;
    exports.UploadDialogService = UploadDialogService;
    exports.UploadService = UploadService;
    exports.DownloadService = DownloadService;
    exports.FileUploadComponent = FileUploadComponent;
    exports.UploadFileInfo = UploadFileInfo;
    exports.UploadModule = UploadModule;
    exports.ɵa = ɵa;
    exports.UploadLimit = UploadLimit;
    exports.GspFormDocOperateEntity = GspFormDocOperateEntity;
    exports.GspFormRemoveListEntity = GspFormRemoveListEntity;
    exports.GspFormUploadListEntity = GspFormUploadListEntity;
    exports.GspFormDocInfo = GspFormDocInfo;
    exports.GspDocMetaProperty = GspDocMetaProperty;
    exports.GspFormUploadEntity = GspFormUploadEntity;
    exports.FileInfo = FileInfo;
    exports.OperatingModes = OperatingModes;
    exports.FileState = FileState;
    exports.GspDocSecurityBaseInfo = GspDocSecurityBaseInfo;
    exports.SecurityEntity = SecurityEntity;
    exports.ExStorageFileInfo = ExStorageFileInfo;
    exports.CopyFileRequest = CopyFileRequest;
    exports.ɵb = LocalLangPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-svc-formdoc-upload.umd.js.map