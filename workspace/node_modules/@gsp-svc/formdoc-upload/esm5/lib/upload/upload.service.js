/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { catchError, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { GspFormRemoveListEntity } from './entity/gspformremovelistentity';
import { of } from 'rxjs/observable/of';
import { GspFormDocOperateEntity } from './entity/gspformdocoperateentity';
import { ChangeInstanceRequest } from './entity/changeinstancerequest';
import { OperatingModes } from './entity/operatingmodes';
import { CopyFileRequest } from './entity/copyfilerequest';
var UploadService = /** @class */ (function () {
    function UploadService(http, httpclient) {
        this.http = http;
        this.httpclient = httpclient;
    }
    /**
     * @param {?} docListInfo
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.uploadList = /**
     * @param {?} docListInfo
     * @param {?} rootId
     * @return {?}
     */
    function (docListInfo, rootId) {
        /** @type {?} */
        var url;
        docListInfo.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docListInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.commit = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    function (metadataIdList, rootId) {
        /** @type {?} */
        var url;
        /** @type {?} */
        var entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/commit";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/commit";
        return this.http.post(url, entity).pipe();
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.cancel = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    function (metadataIdList, rootId) {
        /** @type {?} */
        var url;
        /** @type {?} */
        var entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/cancel";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/cancel";
        //localStorage.setItem("SessionId","huoliang");
        return this.http.put(url, entity).pipe();
    };
    /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.removeList = /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    function (idList, rootId) {
        /** @type {?} */
        var url;
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/list";
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        /** @type {?} */
        var idListInfo = new GspFormRemoveListEntity;
        idListInfo.metadataIdList = idList;
        idListInfo.mode = OperatingModes.Temp;
        idListInfo.rootId = rootId;
        return this.http.delete(url, idListInfo).pipe();
    };
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.getFile = /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    function (metadataId, rootId) {
        /** @type {?} */
        var url;
        if (rootId == "")
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId;
        else
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId + "/" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} docInfo
     * @return {?}
     */
    UploadService.prototype.uploadFile = /**
     * @param {?} docInfo
     * @return {?}
     */
    function (docInfo) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} formdata
     * @return {?}
     */
    UploadService.prototype.uploadSliceFile = /**
     * @param {?} formdata
     * @return {?}
     */
    function (formdata) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/slice";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @return {?}
     */
    UploadService.prototype.getStorageExtensionInfo = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/storagestrategy/extension";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} baseInfo
     * @return {?}
     */
    UploadService.prototype.getSecurityInfoList = /**
     * @param {?} baseInfo
     * @return {?}
     */
    function (baseInfo) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/storagestrategy/security";
        url = url + "?id=" + baseInfo.securityId + "&level=" + baseInfo.securityLevel;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} storageInfoList
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.changeStorageInstance = /**
     * @param {?} storageInfoList
     * @param {?} rootId
     * @return {?}
     */
    function (storageInfoList, rootId) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/changeinstance";
        /** @type {?} */
        var request = new ChangeInstanceRequest;
        request.fileInfoList = storageInfoList;
        request.rootId = rootId;
        return this.http.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} path
     * @return {?}
     */
    UploadService.prototype.copyFile = /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} path
     * @return {?}
     */
    function (metadataId, rootId, path) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/copy";
        /** @type {?} */
        var request = new CopyFileRequest;
        request.metadataId = metadataId;
        request.rootId = rootId;
        request.path = path;
        return this.httpclient.post(url, request, { responseType: 'text' }).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })));
    };
    /**
     * @param {?} uploadFileInfoList
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.saveSecurityInfo = /**
     * @param {?} uploadFileInfoList
     * @param {?} rootId
     * @return {?}
     */
    function (uploadFileInfoList, rootId) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/doc/exproperty";
        /** @type {?} */
        var reqList = [];
        uploadFileInfoList.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var request = { id: element.metadataId, rootId: rootId, exProperty: JSON.stringify(element.securityInfo) };
            reqList.push(request);
        }));
        return this.http.post(url, reqList).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.getUploadedFileInfoList = /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    function (formId, rootId) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/uploadedfile/infolist" + "?formid=" + formId + "&rootid=" + rootId;
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} rootId
     * @return {?}
     */
    UploadService.prototype.getUploadInfo = /**
     * @param {?} rootId
     * @return {?}
     */
    function (rootId) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/rootsetting/info?id=" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    UploadService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UploadService.ctorParameters = function () { return [
        { type: HttpService },
        { type: HttpClient }
    ]; };
    return UploadService;
}());
export { UploadService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.httpclient;
}
//# sourceMappingURL=data:application/json;base64,