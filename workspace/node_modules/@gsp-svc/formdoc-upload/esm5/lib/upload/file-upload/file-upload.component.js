/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, TemplateRef, Injector, LOCALE_ID } from '@angular/core';
import { DocType } from '../entity/doctype';
import { OperatingModes } from '../entity/operatingmodes';
import { UploadService } from '../upload.service';
import { UploadFileInfo } from '../entity/uploadfileinfo';
import { MessagerService } from '@farris/ui-messager';
import { catchError, map, tap } from 'rxjs/operators';
import { of } from 'rxjs';
import { UUID } from 'angular2-uuid';
import { ExStorageFileInfo } from '../entity/extensionstoragefileinfo';
import { LoadingService } from '@farris/ui-loading';
import { DomSanitizer } from '@angular/platform-browser';
import { FileState } from '../entity/filestate';
import { LocalLangPipe } from '../../local.pipe';
import { GspDocSecurityBaseInfo } from '../entity/gspdocsecuritybaseinfo';
import { HttpClient } from '@angular/common/http';
import { InitMultiUploadRequest } from '../entity/initmultiuploadrequest';
import { CompleteMultiUploadRequest } from '../entity/completemultiuploadrequest';
import { GspFormStreamEntity } from '../entity/gspformstreamentity';
import { MultiUploadRequest } from '../entity/multiuploadrequest';
var FileUploadComponent = /** @class */ (function () {
    function FileUploadComponent(msgService, uploadService, loadService, injector) {
        this.msgService = msgService;
        this.uploadService = uploadService;
        this.loadService = loadService;
        this.injector = injector;
        this.files = [];
        this.metadataIdList = [];
        this.uploadFileInfoList = [];
        this.errFileList = [];
        this.errTypeList = [];
        this.nullFileList = [];
        this.beyondFileList = [];
        this.showType = 0;
        this.mouseOn = false;
        this.bufferSize = 5 * 1024 * 1024;
        this.selectedFileCount = 0;
        this.uploadIconAddress = '/platform/runtime/dfs/images/upload.svg';
        this.uploadLittleIconAddress = '/platform/runtime/dfs/images/uploadIcon.svg';
        this.hasSelectedFile = false;
        this.fileAllSelected = false;
        this.uploadProcess = { width: '0%' };
        this.fileTotalChunk = {};
        this.requestArray = new Array;
        this.requestBodyArray = new Array;
        this.uploadedChunk = {};
        this.uploadedProcess = {};
        this.defaultPropertyName = "";
        this.propertiesNames = [];
        this.securityInfoList = [];
        this.queueListStyle = { width: '480px' };
        this.dropListValue = "";
        this.uploadedFileTotal = 0;
        this.haveExtensionProperty = false;
        this.haveSecurityInfo = false;
        this.uploadedFileInfoList = [];
        this.oldUploadedFileList = [];
        //uploadedNameList = [];
        this.sameNameAllowed = true;
        this.maxFileSize = 0;
        this.checkboxPos = { top: '0px' };
        this.fileType = "*";
        this.fileCount = 0;
        this.oldIdList = [];
        this.securityInfo = null;
        this.totalLoad = null;
        this.exStorageFileList = [];
        if (this.injector) {
            this.httpclient = this.injector.get(HttpClient);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localepipe = new LocalLangPipe(this.localeid);
        }
    }
    ;
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (navigator.userAgent.indexOf('Firefox') >= 0)
            this.checkboxPos.top = '14px';
        //if (this.storageService != null) {
        if (this.securityInfo != null) {
            this.uploadService.getSecurityInfoList(this.securityInfo).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.haveSecurityInfo = true;
                /** @type {?} */
                var i = 0;
                res.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.securityInfoList.push({ id: i.toString(), securityId: element.securityId, securityLevel: element.securityLevel, name: element.name });
                    i++;
                }));
            }));
        }
        this.uploadService.getStorageExtensionInfo().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res != null && res.error == null) {
                _this.storageExtension = res;
                _this.defaultPropertyName = _this.storageExtension.defaultPropertyName;
                _this.propertiesNames.push({ id: "0", name: _this.storageExtension.defaultPropertyName });
                /** @type {?} */
                var i_1 = 0;
                // this.propertiesNames.push(...(this.storageExtension.extensionPropertyNameList));
                _this.storageExtension.extensionPropertyNameList.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.propertiesNames.push({ id: (++i_1).toString(), name: element });
                }));
                _this.queueListStyle.width = '380px';
                _this.haveExtensionProperty = true;
            }
        }));
        this.uploadService.getUploadInfo(this.rootId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res != null && res.error == null) {
                _this.sameNameAllowed = res.sameNameAllowed;
                _this.maxFileSize = parseInt(JSON.parse(res.validateConfiguration).maxFileSize);
                _this.allowedMultiUpload = res.allowedMultiUpload;
                if (!_this.sameNameAllowed) {
                    _this.uploadService.getUploadedFileInfoList(_this.formId, _this.rootId).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (res != null && res.error == null) {
                            _this.uploadedFileInfoList = res;
                            _this.oldUploadedFileList = JSON.parse(JSON.stringify(res));
                            ;
                        }
                    }));
                }
            }
        }));
        if (this.oldIdList != null && this.oldIdList.length > 0) {
            // this.uploadService.cancel(this.oldIdList, this.rootId).subscribe();
        }
        this.radioButtonGroupValue = 'showByGroup';
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.showLoading = /**
     * @return {?}
     */
    function () {
        this.hasSelectedFile = true;
        // if (this.totalLoad == null)
        //   this.totalLoad = this.loadService.show({
        //     message: this.localepipe.transform('uploading')
        //   });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FileUploadComponent.prototype.fileSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.hasSelectedFile = true;
        this.selectedFiles = document.querySelector('#file');
        if (this.fileCount > 0) {
            if (this.selectedFiles.files.length + this.files.length > this.fileCount) {
                /** @type {?} */
                var selectedNum = ((/** @type {?} */ (this.selectedFiles.files.length))) + this.files.length;
                this.msgService.warning(this.localepipe.transform('selectedCount') + selectedNum + this.localepipe.transform('limitCount') + this.fileCount + this.localepipe.transform('rechooseFile'));
                return;
            }
        }
        var _loop_1 = function (i) {
            /** @type {?} */
            var selectedFile = this_1.selectedFiles.files[i];
            //selectedFile.slice
            /** @type {?} */
            var uuid = UUID.UUID();
            if (selectedFile.size == 0) {
                this_1.nullFileList.push(selectedFile.name);
                return "continue";
            }
            if (this_1.maxFileSize != null && this_1.maxFileSize > 0) {
                if (selectedFile.size > this_1.maxFileSize * 1000) {
                    this_1.beyondFileList.push(selectedFile.name);
                    return "continue";
                }
            }
            if (!this_1.sameNameAllowed) {
                if (this_1.uploadedFileInfoList.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.fileName == selectedFile.name; })) != null) {
                    /** @type {?} */
                    var msg_1 = this_1.msgService.show('warning', this_1.localepipe.transform('haveSameName') + selectedFile.name, {
                        initialState: {
                            buttons: [
                                {
                                    text: this_1.localepipe.transform('rename'),
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        /** @type {?} */
                                        var oldName = selectedFile.name;
                                        /** @type {?} */
                                        var newName;
                                        /** @type {?} */
                                        var flag = true;
                                        /** @type {?} */
                                        var i = 1;
                                        while (flag) {
                                            newName = oldName.substring(0, oldName.lastIndexOf('.')) + '(' + i + ')' + oldName.substring(oldName.lastIndexOf('.'));
                                            if (_this.uploadedFileInfoList.find((/**
                                             * @param {?} x
                                             * @return {?}
                                             */
                                            function (x) { return x.fileName == newName; })) != null) {
                                                i++;
                                            }
                                            else
                                                flag = false;
                                        }
                                        _this.uploadFile(uuid, selectedFile, newName);
                                        msg_1.close();
                                    })
                                },
                                {
                                    text: this_1.localepipe.transform('replace'),
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        uuid = _this.uploadedFileInfoList.find((/**
                                         * @param {?} x
                                         * @return {?}
                                         */
                                        function (x) { return x.fileName == selectedFile.name; })).metadataId;
                                        _this.uploadFile(uuid, selectedFile, selectedFile.name, FileState.Update);
                                        _this.uploadedFileTotal--;
                                        if (_this.oldUploadedFileList.find((/**
                                         * @param {?} x
                                         * @return {?}
                                         */
                                        function (x) { return x.fileName == selectedFile.name; }))) {
                                            _this.uploadedFileTotal++;
                                            _this.uploadedFileInfoList.splice(_this.uploadedFileInfoList.indexOf(_this.uploadedFileInfoList.filter((/**
                                             * @param {?} x
                                             * @return {?}
                                             */
                                            function (x) { return x.fileName == selectedFile.name; }))[0]), 1);
                                        }
                                        msg_1.close();
                                    })
                                },
                                {
                                    text: this_1.localepipe.transform('cancel'),
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    function () {
                                        msg_1.close();
                                    })
                                }
                            ]
                        }
                    });
                    return "continue";
                }
            }
            this_1.uploadFile(uuid, selectedFile, selectedFile.name);
        };
        var this_1 = this;
        //this.flag = 0;
        for (var i = 0; i < this.selectedFiles.files.length; i++) {
            _loop_1(i);
        }
        if (this.errFileList.length > 0) {
            /** @type {?} */
            var name_1 = this.listToString(this.errFileList);
            this.msgService.warning(this.localepipe.transform('haveSameName') + name_1 + this.localepipe.transform('rechooseFile'));
            this.errFileList = [];
        }
        if (this.nullFileList.length > 0) {
            /** @type {?} */
            var name_2 = this.listToString(this.nullFileList);
            name_2 = name_2.substring(0, name_2.length - 1);
            this.msgService.warning(name_2 + this.localepipe.transform('sizeZero') + this.localepipe.transform('rechooseFile'));
            this.nullFileList = [];
        }
        if (this.beyondFileList.length > 0) {
            /** @type {?} */
            var name_3 = this.listToString(this.beyondFileList);
            name_3 = name_3.substring(0, name_3.length - 1);
            this.msgService.warning(name_3 + this.localepipe.transform('sizeMax') + this.maxFileSize + "KB" + this.localepipe.transform('rechooseFile'));
            this.beyondFileList = [];
        }
        this.files = this.files.slice();
        this.fileAllSelected = false;
        $event.target.value = '';
        // loading.close();
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.showErrorMessage = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.msgService.error(this.localepipe.transform('uploadFailure') + file.errorMessage);
    };
    /**
     * @param {?} uuid
     * @param {?} selectedFile
     * @param {?} fileName
     * @return {?}
     */
    FileUploadComponent.prototype.handleFileInfo = /**
     * @param {?} uuid
     * @param {?} selectedFile
     * @param {?} fileName
     * @return {?}
     */
    function (uuid, selectedFile, fileName) {
        /** @type {?} */
        var fileInfo;
        fileInfo = {
            id: uuid,
            name: fileName,
            type: selectedFile.type,
            source: "",
            size: this.getFileSize(selectedFile.size),
            fileSize: selectedFile.size,
            picListDisplayName: this.getPicListDisplayName(fileName),
            queueListDisplayName: this.getQueueDisplayName(fileName),
            //content: reader.result.toString(),
            hasUploaded: false,
            mouseOn: false,
            selectd: false,
            isUploading: true,
            uploadResult: false,
            uploadProcess: 0,
            errorMessage: "",
            extensionDropListId: 0,
            extensionName: "",
            securityDropListId: 0,
            securityInfo: this.securityInfoList[0]
        };
        if (this.storageExtension != null)
            fileInfo.extensionName = this.defaultPropertyName;
        /** @type {?} */
        var type = selectedFile.type;
        if (type.includes("tiff")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Other);
        }
        else if (type.includes("image")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Image);
        }
        else if (type.includes("word")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Word);
        }
        else if (type.includes("pdf")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Pdf);
        }
        else if (type.includes("plain")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Txt);
        }
        else if (type.includes("sheet") || type.includes("excel")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Excel);
        }
        else if (type.includes("powerpoint") || type.includes("presentation")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Powerpoint);
        }
        else {
            this.addDocInfo(selectedFile, fileInfo, DocType.Other);
            // let name: string = selectedFile.name;
            // let errType = name.substring(selectedFile.name.lastIndexOf('.'));
            // this.errTypeList.push(errType);
        }
        return fileInfo;
    };
    /**
     * @param {?} uuid
     * @param {?} selectedFile
     * @param {?} fileName
     * @param {?=} state
     * @return {?}
     */
    FileUploadComponent.prototype.uploadFile = /**
     * @param {?} uuid
     * @param {?} selectedFile
     * @param {?} fileName
     * @param {?=} state
     * @return {?}
     */
    function (uuid, selectedFile, fileName, state) {
        var _this = this;
        if (state === void 0) { state = FileState.New; }
        /** @type {?} */
        var fileInfo = this.handleFileInfo(uuid, selectedFile, fileName);
        /** @type {?} */
        var uploadFileInfo = new UploadFileInfo();
        uploadFileInfo.metadataId = uuid;
        uploadFileInfo.fileName = fileInfo.name;
        uploadFileInfo.fileSize = fileInfo.size;
        uploadFileInfo.state = state;
        uploadFileInfo.securityInfo = this.securityInfoList[0];
        //判断是否支持分片上传
        if (this.allowedMultiUpload) {
            //支持分片上传
            /** @type {?} */
            var initRequest = new InitMultiUploadRequest;
            initRequest.path = this.formId;
            initRequest.metadataId = uuid;
            initRequest.rootId = this.rootId;
            initRequest.size = fileInfo.fileSize;
            initRequest.fileName = fileName;
            //初始化分片
            this.initMultiUpload(initRequest).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                if (res.error != null) {
                    _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                    _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                    _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                }
                else {
                    /** @type {?} */
                    var uploadId_1 = res.uploadId;
                    /** @type {?} */
                    var chunkTotal = Math.ceil(selectedFile.size / _this.bufferSize);
                    /** @type {?} */
                    var chunkIndex = 0;
                    /** @type {?} */
                    var multiResultList_1 = [];
                    _this.fileTotalChunk[uuid] = chunkTotal;
                    _this.uploadedChunk[uuid] = 0;
                    while (chunkIndex < chunkTotal) {
                        /** @type {?} */
                        var nextSize = Math.min((chunkIndex + 1) * _this.bufferSize, selectedFile.size);
                        /** @type {?} */
                        var fileData = selectedFile.slice(chunkIndex * _this.bufferSize, nextSize);
                        /** @type {?} */
                        var multiRequest = new MultiUploadRequest;
                        multiRequest.metadataId = uuid;
                        multiRequest.rootId = _this.rootId;
                        multiRequest.uploadId = uploadId_1;
                        multiRequest.index = chunkIndex;
                        multiRequest.total = chunkTotal;
                        multiRequest.size = fileData.size;
                        /** @type {?} */
                        var formData = new FormData();
                        formData.append('multiRequest', JSON.stringify(multiRequest));
                        formData.append('file', fileData);
                        _this.multiUpload(formData).subscribe((/**
                         * @param {?} res
                         * @return {?}
                         */
                        function (res) {
                            if (res.error != null) {
                                _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                                _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                            }
                            else {
                                multiResultList_1.push(res.result);
                                _this.uploadedChunk[uuid]++;
                                _this.files[_this.files.indexOf(fileInfo)].uploadProcess = Number.parseInt((_this.uploadedChunk[uuid] / _this.fileTotalChunk[uuid] * 100).toFixed(0));
                                if (_this.uploadedChunk[uuid] == _this.fileTotalChunk[uuid]) {
                                    if (multiResultList_1.length == _this.fileTotalChunk[uuid]) {
                                        /** @type {?} */
                                        var completeMultiUploadRequest = new CompleteMultiUploadRequest;
                                        completeMultiUploadRequest.metadataId = uuid;
                                        completeMultiUploadRequest.partList = multiResultList_1;
                                        completeMultiUploadRequest.rootId = _this.rootId;
                                        completeMultiUploadRequest.uploadId = uploadId_1;
                                        completeMultiUploadRequest.size = fileInfo.fileSize;
                                        if (_this.haveExtensionProperty)
                                            completeMultiUploadRequest.exPropertyName = _this.defaultPropertyName;
                                        _this.completeMultiUpload(completeMultiUploadRequest).subscribe((/**
                                         * @param {?} res
                                         * @return {?}
                                         */
                                        function (res) {
                                            if (res.status != 200) {
                                                _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                                                _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                                _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                                            }
                                            else {
                                                _this.files[_this.files.indexOf(fileInfo)].uploadResult = true;
                                                _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                                _this.uploadFileInfoList = _this.uploadFileInfoList.concat(uploadFileInfo);
                                                _this.uploadedFileInfoList = _this.uploadedFileInfoList.concat(uploadFileInfo);
                                                _this.uploadedFileTotal++;
                                            }
                                        }));
                                        //后台异步拼接文档
                                    }
                                    else {
                                        _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                                        _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                                        _this.files[_this.files.indexOf(fileInfo)].errorMessage = _this.localepipe.transform('mismatchChunkSize');
                                    }
                                }
                            }
                        }));
                        chunkIndex = chunkIndex + 1;
                    }
                }
            }));
        }
        else {
            /** @type {?} */
            var entity = new GspFormStreamEntity;
            entity.formId = this.formId;
            entity.metadataId = uuid;
            entity.mode = OperatingModes.Temp;
            entity.rootId = this.rootId;
            entity.size = selectedFile.size;
            entity.fileName = fileName;
            if (this.haveExtensionProperty)
                entity.exPropertyName = this.defaultPropertyName;
            /** @type {?} */
            var formData = new FormData();
            formData.append('uploadEntity', JSON.stringify(entity));
            formData.append('file', selectedFile);
            this.uploadSingleFile(formData).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                if (res != null) {
                    _this.files[_this.files.indexOf(fileInfo)].uploadResult = false;
                    _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                    _this.files[_this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                }
                else {
                    _this.files[_this.files.indexOf(fileInfo)].uploadResult = true;
                    _this.files[_this.files.indexOf(fileInfo)].isUploading = false;
                    _this.uploadFileInfoList = _this.uploadFileInfoList.concat(uploadFileInfo);
                    _this.uploadedFileInfoList = _this.uploadedFileInfoList.concat(uploadFileInfo);
                    _this.uploadedFileTotal++;
                }
            }));
        }
        /** @type {?} */
        var index = -1;
        this.files.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (x.name == fileInfo.name) {
                if (index == -1)
                    index = _this.files.indexOf(x);
            }
        }));
        if (index != -1 && index != this.files.length - 1) {
            this.files.splice(index, 1);
            this.uploadFileInfoList.splice(index, 1);
            this.uploadedFileInfoList.splice(index, 1);
            //this.uploadedFileTotal--;
        }
    };
    /**
     * @param {?} formdata
     * @return {?}
     */
    FileUploadComponent.prototype.uploadSingleFile = /**
     * @param {?} formdata
     * @return {?}
     */
    function (formdata) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/single";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} formdata
     * @return {?}
     */
    FileUploadComponent.prototype.uploadSliceFile = /**
     * @param {?} formdata
     * @return {?}
     */
    function (formdata) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/slice";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} request
     * @return {?}
     */
    FileUploadComponent.prototype.initMultiUpload = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/multi/init";
        return this.httpclient.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} formdata
     * @return {?}
     */
    FileUploadComponent.prototype.multiUpload = /**
     * @param {?} formdata
     * @return {?}
     */
    function (formdata) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/multi/upload";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} request
     * @return {?}
     */
    FileUploadComponent.prototype.completeMultiUpload = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/multi/complete";
        return this.httpclient.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.selectAllFile = /**
     * @return {?}
     */
    function () {
        if (!this.fileAllSelected) {
            this.files.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                element.selectd = true;
            }));
            this.fileAllSelected = true;
            this.selectedFileCount = this.files.length;
        }
        else {
            this.files.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                element.selectd = false;
            }));
            this.fileAllSelected = false;
            this.selectedFileCount = 0;
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.checkoutSelectFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        // let obj: any = document.getElementById(fileName);
        file.selectd = !file.selectd;
        if (file.selectd)
            this.selectedFileCount++;
        else
            this.selectedFileCount--;
        if (this.selectedFileCount == this.files.length) {
            this.fileAllSelected = true;
            //this.isFileAllSelected();
        }
        else {
            this.fileAllSelected = false;
            //this.isFileAllSelected();
        }
    };
    /**
     * @param {?} fileInfo
     * @return {?}
     */
    FileUploadComponent.prototype.listDeleteFile = /**
     * @param {?} fileInfo
     * @return {?}
     */
    function (fileInfo) {
        if (fileInfo.selectd)
            this.selectedFileCount--;
        //console.log(fileName);
        this.files.splice(this.files.indexOf(fileInfo), 1);
        if (fileInfo.uploadResult) {
            /** @type {?} */
            var idList = [];
            idList.push(fileInfo.id);
            this.uploadService.cancel(idList, this.rootId).subscribe();
            this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.fileName == fileInfo.name; }))[0]), 1);
            this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.fileName == fileInfo.name; }))[0]), 1);
            this.uploadedFileTotal--;
        }
        if (this.selectedFileCount == 0)
            this.fileAllSelected = false;
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.listMultipleDeleteFile = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectedFile = [];
        this.files.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var obj = document.getElementById(element.name);
            if (obj.checked)
                selectedFile.push(element);
        }));
        /** @type {?} */
        var metadataList = [];
        selectedFile.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            metadataList.push(element.id);
            _this.files.splice(_this.files.indexOf(element), 1);
            if (element.uploadResult) {
                _this.uploadFileInfoList.splice(_this.uploadFileInfoList.indexOf(_this.uploadFileInfoList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.fileName == element.name; }))[0]), 1);
                _this.uploadedFileInfoList.splice(_this.uploadedFileInfoList.indexOf(_this.uploadedFileInfoList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.fileName == element.name; }))[0]), 1);
                _this.uploadedFileTotal--;
            }
        }));
        this.uploadService.cancel(metadataList, this.rootId).subscribe();
        /** @type {?} */
        var allBox = document.getElementById("allCheckBox");
        if (allBox != null)
            allBox.checked = false;
        this.selectedFileCount = 0;
        this.fileAllSelected = false;
    };
    /**
     * @param {?} fileName
     * @return {?}
     */
    FileUploadComponent.prototype.getPicListDisplayName = /**
     * @param {?} fileName
     * @return {?}
     */
    function (fileName) {
        if (fileName.length <= 10)
            return fileName;
        else {
            /** @type {?} */
            var headContent = fileName.substring(0, 2);
            /** @type {?} */
            var tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);
            return headContent + "…" + tailContent;
        }
    };
    /**
     * @param {?} fileName
     * @return {?}
     */
    FileUploadComponent.prototype.getQueueDisplayName = /**
     * @param {?} fileName
     * @return {?}
     */
    function (fileName) {
        return fileName;
    };
    /**
     * @param {?} selectdFile
     * @param {?} fileInfo
     * @param {?} docType
     * @return {?}
     */
    FileUploadComponent.prototype.addDocInfo = /**
     * @param {?} selectdFile
     * @param {?} fileInfo
     * @param {?} docType
     * @return {?}
     */
    function (selectdFile, fileInfo, docType) {
        var _this = this;
        switch (docType) {
            case DocType.Word: {
                fileInfo.source = "/platform/runtime/dfs/images/word.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Pdf: {
                fileInfo.source = "/platform/runtime/dfs/images/pdf.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Excel: {
                fileInfo.source = "/platform/runtime/dfs/images/excel.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Txt: {
                fileInfo.source = "/platform/runtime/dfs/images/txt.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Powerpoint: {
                fileInfo.source = "/platform/runtime/dfs/images/ppt.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Other: {
                fileInfo.source = "/platform/runtime/dfs/images/file.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Image: {
                /** @type {?} */
                var reader_1 = new FileReader();
                reader_1.readAsDataURL(selectdFile);
                reader_1.onload = (/**
                 * @param {?} _event
                 * @return {?}
                 */
                function (_event) {
                    /** @type {?} */
                    var imgUrl = reader_1.result;
                    if (_this.injector != null) {
                        /** @type {?} */
                        var sanitizer = _this.injector.get(DomSanitizer);
                        imgUrl = sanitizer.bypassSecurityTrustResourceUrl(imgUrl);
                    }
                    fileInfo.source = imgUrl;
                    _this.files.push(fileInfo);
                    //因为异步处理的差异，补偿一次删除
                    /** @type {?} */
                    var index = -1;
                    _this.files.forEach((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) {
                        if (x.name == fileInfo.name) {
                            if (index == -1)
                                index = _this.files.indexOf(x);
                        }
                    }));
                    if (index != -1 && index != _this.files.length - 1) {
                        _this.files.splice(index, 1);
                        _this.uploadFileInfoList.splice(index, 1);
                        _this.uploadedFileInfoList.splice(index, 1);
                    }
                });
            }
        }
    };
    /**
     * @param {?} strList
     * @return {?}
     */
    FileUploadComponent.prototype.listToString = /**
     * @param {?} strList
     * @return {?}
     */
    function (strList) {
        /** @type {?} */
        var name = "";
        for (var i = 0; i < strList.length; i++) {
            name += strList[i] + ",";
        }
        return name;
    };
    /**
     * @param {?} $event
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.securityChange = /**
     * @param {?} $event
     * @param {?} file
     * @return {?}
     */
    function ($event, file) {
        file.securityInfo = $event.data;
        /** @type {?} */
        var uploadFile = this.uploadFileInfoList.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.metadataId = file.id; }))[0];
        uploadFile.securityInfo = $event.data;
    };
    /**
     * @param {?} $event
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.typeChange = /**
     * @param {?} $event
     * @param {?} file
     * @return {?}
     */
    function ($event, file) {
        file.extensionName = $event.data.name;
        /** @type {?} */
        var exStorageFileInfo = new ExStorageFileInfo;
        if (file.extensionName == this.storageExtension.defaultPropertyName) {
            if (this.exStorageFileList.filter((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.metadataId == file.id; })).length > 0)
                this.exStorageFileList.splice(this.exStorageFileList.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.metadataId == file.id; })), 1);
        }
        else {
            if (this.exStorageFileList.filter((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.metadataId == file.id; })).length > 0) {
                exStorageFileInfo = this.exStorageFileList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.metadataId == file.id; }))[0];
                exStorageFileInfo.exPropertyName = file.extensionName;
            }
            else {
                exStorageFileInfo.metadataId = file.id;
                exStorageFileInfo.exPropertyName = file.extensionName;
                this.exStorageFileList.push(exStorageFileInfo);
            }
        }
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.upload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.uploadedFileTotal != this.files.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.isUploading || x.uploadResult; })).length) {
            this.msgService.warning(this.localepipe.transform('wait'));
            return of(false);
        }
        if (this.haveSecurityInfo) {
            this.uploadService.saveSecurityInfo(this.uploadFileInfoList, this.rootId).subscribe();
        }
        if (this.storageExtension == null)
            return of(this.uploadFileInfoList);
        else {
            if (this.exStorageFileList.length == 0)
                return of(this.uploadFileInfoList);
            else {
                /** @type {?} */
                var loading_1 = this.loadService.show({
                    message: this.localepipe.transform('saveTo') + this.storageExtension.extensionName
                });
                return this.uploadService.changeStorageInstance(this.exStorageFileList, this.rootId).pipe(map((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    // if (res != null)
                    //   this.msgService.error('保存到' + this.storageExtension.extensionName + "失败，上传文件自动保存到" + this.storageExtension.defaultPropertyName + "存储。" + res.error.Message);
                    loading_1.close();
                    return _this.uploadFileInfoList;
                })));
            }
        }
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.uploadFileInfoList.length == 0)
            return;
        this.uploadFileInfoList.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _this.metadataIdList.push(element.metadataId);
        }));
        this.uploadService.cancel(this.metadataIdList, this.rootId).subscribe();
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.getUploadFileInfoList = /**
     * @return {?}
     */
    function () {
        return this.uploadFileInfoList;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.delete = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.files.splice(this.files.indexOf(file), 1);
        if (file.uploadResult)
            this.uploadedFileTotal--;
        if (this.exStorageFileList.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.metadataId == file.id; })).length > 0) {
            this.exStorageFileList.splice(this.exStorageFileList.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.metadataId == file.id; })), 1);
        }
    };
    /**
     * @param {?} size
     * @return {?}
     */
    FileUploadComponent.prototype.getFileSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        if (size < 102400)
            return (size / 1024).toFixed(1) + "K";
        else if (size < 1024 * 1024)
            return (size / 1024).toFixed(0) + "K";
        else if (size < 100 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(1) + "M";
        else if (size < 1024 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(0) + "M";
        else
            return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.showByGroup = /**
     * @return {?}
     */
    function () {
        this.showType = 0;
        // this.selectedFileCount = 0;
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.showByList = /**
     * @return {?}
     */
    function () {
        this.showType = 1;
        // this.selectedFileCount = 0;
        if (this.selectedFileCount != 0 && this.selectedFileCount == this.files.length) {
            this.fileAllSelected = true;
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.mouseOver = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.mouseOn = true;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.mouseOut = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.mouseOn = false;
    };
    FileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-file-upload',
                    template: "<div *ngIf=\"hasSelectedFile\">\n\n    <div class=\"farris-header\" style=\"height: 50px; width: 100%\">\n        <div class=\"btn btn-secondary upload_button\">\n            <img [src]=\"uploadLittleIconAddress\">\n            <span>{{'uploadFile' | locale}} </span>\n            <input type=\"file\" (focus)=\"showLoading()\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\"\n                title=\"\" [accept]=\"fileType\">\n        </div>\n\n\n        <button *ngIf=\"showType==0 && !fileAllSelected && files.length >0 \" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">{{'selectAll' | locale}}</button>\n        <button *ngIf=\"showType==0 && fileAllSelected  && files.length >0 \" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">{{'selectNull' | locale}}</button>\n        <button *ngIf=\"showType==0 && selectedFileCount>0\" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">{{'delete' | locale}}</button>\n\n        <button *ngIf=\"showType==1 && selectedFileCount>0\" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">{{'delete' | locale}}</button>\n\n        <farris-radio-group class=\"button_group_upload\" [(model)]=\"radioButtonGroupValue\" [horizontal]=\"false\">\n            <farris-radio-button [label]=\"'showByGroup'\" (click)=\"showByGroup()\">\n                <span  class=\"f-icon f-icon-sudoku-new\"> </span>\n            </farris-radio-button>\n            <farris-radio-button [label]=\"'showByList'\" (click)=\"showByList()\">\n                <span  class=\"f-icon f-icon-page-title-define\"> </span>\n            </farris-radio-button>\n\n        </farris-radio-group>\n\n        <!-- <kendo-buttongroup [selection]=\"'single'\" class=\"button_group_upload \"\n            style=\"background-color: #ffffff; color: #388FFF;border: 1px solid #ddd;\" look=\"flat\">\n            <button kendoButton [selected]=\"true\" [toggleable]=\"true\"\n                [imageUrl]=\"'/platform/runtime/dfs/images/piclist.png'\" (click)=\"showByGroup()\"></button>\n            <button kendoButton [toggleable]=\"true\" [imageUrl]=\"'/platform/runtime/dfs/images/queuelist.png'\"\n                (click)=\"showByList()\"></button>\n        </kendo-buttongroup> -->\n\n\n    </div>\n\n    <!-- <div class=\"progress\" style=\"height: 12px;\">\n    <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"uploadProcess\"></div>\n  </div> -->\n\n    <div class=\"pic_list\" *ngIf=\"showType==0\">\n        <ul *ngFor=\"let file of files\">\n            <li (mouseenter)=\"mouseOver(file)\" (mouseleave)=\"mouseOut(file)\">\n                <div *ngIf=\"file.isUploading\">\n                    <farris-progress [type]=\"'circle'\" [percent]=\"file.uploadProcess\" [strokeLinecap]=\"'square'\"\n                        [status]=\"'active'\"></farris-progress>\n                </div>\n\n                <table *ngIf=\"!file.uploadResult && !file.isUploading\"\n                    style=\"margin: 0 auto; border: 1px solid #ddd; width: 135px; height: 160px;\">\n                    <tr style=\"margin: 0 auto ; height: 80px;\">\n                        <td style=\"text-align: center\"><span class=\"f-icon f-icon-warn\"></span></td>\n                    </tr>\n                    <tr style=\"margin: 0 auto ; height: 30px;\">\n                        <td style=\"text-align: center\"> {{'uploadFailure' | locale}} </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: center\"><button style=\"margin: 0 auto ; height: 20px; \"\n                                class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">{{'detail' |\n                                locale}}</button></td>\n                    </tr>\n                </table>\n                <div *ngIf=\"!file.isUploading && file.uploadResult\" style=\"border: 1px solid #ddd;\">\n                    <img [src]='file.source'>\n                    <div *ngIf=\"haveExtensionProperty\"\n                        style=\"width: 133px; height: 25px; background-color: white; position: absolute;bottom: 0; \">\n\n                        <div style=\"width: 100px;height: 25px;position:absolute;margin: 0 17px;\">\n                            <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\"\n                                [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\"\n                                [enableClear]=\"false\">\n                                <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                            </farris-combo-list>\n                        </div>\n                    </div>\n                    <div *ngIf=\"haveSecurityInfo\"\n                        style=\"width: 133px; height: 25px; background-color: white; position: absolute;bottom: 0; \">\n\n                        <div style=\"width: 100px;height: 25px;position:absolute;margin: 0 17px;\">\n                            <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"securityInfoList\"\n                                [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"securityChange($event,file)\"\n                                [enableClear]=\"false\">\n                                <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                            </farris-combo-list>\n                        </div>\n                    </div>\n                </div>\n                <table *ngIf=\"!file.isUploading\">\n                    <tr style=\"height: 20px\">\n                        <td style=\"width: 15px; vertical-align: middle; text-align: center\">\n                            <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\">  -->\n                            <div class=\"farris-input-wrap\" style=\"height: 20px\" (click)=\"checkoutSelectFile(file)\">\n                                <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0;height: 20px;\"\n                                    [ngStyle]=\"checkboxPos\">\n                                    <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\"\n                                        [(ngModel)]=\"file.selectd\">\n                                    <label class=\"custom-control-label\"\n                                        style=\"padding: 0 0 10px 0; position: relative; top: -8px;\"></label>\n                                </div>\n                            </div>\n                        </td>\n                        <td style=\"width: 120px; vertical-align: middle; text-align: center\" [title]=\"file.name\">\n                            {{file.picListDisplayName}}</td>\n                    </tr>\n                </table>\n                <!-- <span>{{file.picListDisplayName}}</span> -->\n                <!-- <p class=\"filename\">{{file.picListDisplayName}}</p> -->\n                <button *ngIf=\"!file.isUploading && file.mouseOn\"\n                    style=\"position: absolute; top: 0; right: 0px; width: 24px; height: 24px; border: none;\"\n                    (click)=\"listDeleteFile(file)\">\n                    <span style=\"position: relative;  right: 2px; \" class=\"f-icon f-icon-delete\"> </span>\n                </button>\n                <!-- <button *ngIf=\"file.hasUploaded\" class=\"k-primary\" kendoButton [icon]=\"'check'\" [disabled]=\"true\"></button> -->\n            </li>\n        </ul>\n        <br>\n    </div>\n\n    <div class=\"queue_list\" *ngIf=\"showType==1\">\n        <table>\n            <tr style=\"height: 50px; table-layout:fixed;\">\n                <th style=\"width: 40px; vertical-align: middle; text-align: center\">\n                    <!-- <input type=\"checkbox\" id=\"allCheckBox\" (click)=\"selectAllFile()\"> -->\n                    <div class=\"farris-input-wrap\" (click)=\"selectAllFile()\">\n                        <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                            <input class=\"custom-control-input\" type=\"checkbox\" id=\"allCheckBox\"\n                                [(ngModel)]=\"fileAllSelected\">\n                            <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                        </div>\n                    </div>\n                </th>\n                <th style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">{{'fileName' | locale}}</th>\n                <th style=\"width: 100px; vertical-align: middle\">{{'size' | locale}}</th>\n                <th style=\"width: 170px; vertical-align: middle; text-align: center\">{{'state' | locale}}</th>\n                <th *ngIf=\"haveExtensionProperty\" style=\"width: 100px; vertical-align: middle; text-align: center\">\n                    {{storageExtension.extensionName}}\n                </th>\n                <th style=\"width: 140px; vertical-align: middle; text-align: center\">{{'operation' | locale}}</th>\n            </tr>\n        </table>\n        <div style=\"height: 370px; overflow: auto;\">\n            <table>\n                <tr *ngFor=\"let file of files\" style=\"height: 40px\">\n                    <td colspan=\"5\" *ngIf=\"file.isUploading\">\n                        <!-- <div style=\"width:100%; display: table-cell; vertical-align: middle; text-align: center; \"> -->\n                        <div style=\"width: 500px;margin:0 auto\">\n                            <farris-progress [percent]=\"file.uploadProcess\" [status]=\"'active'\">\n                            </farris-progress>\n                        </div>\n\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\" width: 40px; vertical-align: middle; text-align: center\">\n                        <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\"> -->\n                        <div class=\"farris-input-wrap\" (click)=\"checkoutSelectFile(file)\">\n                            <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                                <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\"\n                                    [(ngModel)]=\"file.selectd\">\n                                <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                            </div>\n                        </div>\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">\n                        {{file.queueListDisplayName}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"width: 100px; vertical-align: middle\">{{file.size}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 170px; vertical-align: middle;\">\n                        <table *ngIf=\"!file.uploadResult\" style=\"margin: 0 auto\">\n                            <tr style=\"margin: 0 auto\">\n                                <td><span class=\"f-icon f-icon-error\"></span></td>\n                                <td> {{'uploadFailure' | locale}} </td>\n                                <td><button style=\"height: 24px\" class=\"btn-link btn ng-star-inserted\"\n                                        (click)=\"showErrorMessage(file)\">{{'detail' | locale}}</button></td>\n                            </tr>\n                        </table>\n                        <!-- <span *ngIf=\"!file.uploadResult\"><span class=\"f-icon f-icon-error\"></span> \u4E0A\u4F20\u5931\u8D25 <button\n              class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">\u8BE6\u60C5</button></span> -->\n                        <span *ngIf=\"file.uploadResult\"><span class=\"f-icon f-icon-success\"></span> {{'uploadSucceed' |\n                            locale}}</span>\n                    </td>\n                    <td *ngIf=\"!file.isUploading&&haveExtensionProperty\"\n                        style=\"text-align: center; width: 100px; vertical-align: middle;\">\n                        <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\"\n                            [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\"\n                            [enableClear]=\"false\">\n                            <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                        </farris-combo-list>\n                    </td>\n                    <td *ngIf=\"!file.isUploading&&haveSecurityInfo\"\n                        style=\"text-align: center; width: 100px; vertical-align: middle;\">\n                        <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"securityInfoList\"\n                            [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"securityChange($event,file)\"\n                            [enableClear]=\"false\">\n                            <!-- <ng-template #itemTemp let-item>\n                            <div class=\"combo-list\">\n                                <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                <span class=\"combo-list-label\">{{item.label}}</span>\n                            </div>\n                        </ng-template> -->\n                        </farris-combo-list>\n                    </td>\n\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 140px; vertical-align: middle;\">\n                        <!-- <button *ngIf=\"file.uploadResult\" class=\"btn-link btn ng-star-inserted\" (click)=\"retryUploadFile(file.name)\">\u91CD\u8BD5</button> -->\n                        <button class=\"btn-link btn ng-star-inserted\" style=\"margin: 0 auto\"\n                            (click)=\"listDeleteFile(file)\">{{'delete' | locale}}</button>\n                    </td>\n\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"!hasSelectedFile\" class='home_page'>\n    <img [src]=\"uploadIconAddress\">\n    <div>\n        <span class=\"btn btn-primary btn-lg\">{{'uploadFile' | locale}} </span>\n        <input type=\"file\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\">\n        <!-- <input type=\"file\" (focus)=\"showLoading()\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\"> -->\n    </div>\n</div>",
                    styles: [".home_page{text-align:center}.home_page img{position:absolute;top:180px;margin-left:-35px;width:70px;height:56px}.home_page div{position:absolute;left:50%;top:255px;margin-left:-75px;width:150px;height:32px;overflow:hidden}.home_page div span{width:150px;height:32px;position:absolute;z-index:10;left:0}.home_page div input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)';z-index:11}.upload_button{width:110px;height:32px;overflow:hidden}.upload_button span{position:relative;right:-4px;top:4px;width:56px;height:22px;font-size:14px}.upload_button input{height:32px;width:110px;position:absolute;left:22px;top:12px;opacity:0;filter:'alpha(opacity=0)';overflow:hidden}.upload_button img{position:relative;left:-6px;top:3px;width:14px;height:14px}.button_group_upload{position:absolute;right:18px;top:12px;height:26px;width:90px}.button_group_upload button{height:26px;width:26px}.fileinput-button{position:absolute;right:60px;bottom:40px;overflow:hidden;width:24px;height:24px;border-radius:12px;transform:scale(2.5);-ms-transform:scale(2.5);-moz-transform:scale(2.5);-webkit-transform:scale(2.5);-o-transform:scale(2.5);color:#0686fd}.fileinput-button input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)'}.pic-droplist{height:24px;color:#e0e1e2;background-color:#e0e1e2}.pic-droplist input-group{display:table-cell;width:100px;text-align:center;border:0}.pic-droplist input-group div{border:0}.pic-droplist input-group div div,.pic-droplist input-group div input{background-color:#e0e1e2}.pic_list{padding:0;height:415px;overflow-y:auto;overflow-x:hidden}.pic_list ul{padding:0;list-style:none;width:100%;margin:20px 0 0 20px}.pic_list ul li{height:179px;width:135px;margin:8px 0 8px 12px;float:left;overflow:hidden;align-items:center;position:relative}.pic_list ul li div{width:135px;height:159px;margin:auto;display:table-cell;vertical-align:middle;text-align:center;position:relative}.pic_list ul li div img{max-width:120px;max-height:118px;align-items:center;margin:auto;vertical-align:middle;text-align:center}.pic_list ul li span.filename{width:100px;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.queue_list{display:block;height:420px;overflow-y:auto}.file_list{list-style:none;margin:0;padding:0;overflow-x:hidden;overflow-y:auto}.file_list li{height:50px;line-height:35px;font-size:16px;position:relative}.file_list li button{float:right;top:6px;right:10px;width:20px}.file_list li p.title{padding:0 0 0 6px;margin:0 210px 0 0}.file_list li p.size{position:absolute;width:100px;top:0;right:100px}"]
                }] }
    ];
    /** @nocollapse */
    FileUploadComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: UploadService },
        { type: LoadingService },
        { type: Injector }
    ]; };
    FileUploadComponent.propDecorators = {
        formId: [{ type: Input }],
        rootId: [{ type: Input }],
        fileType: [{ type: Input }],
        fileCount: [{ type: Input }],
        oldIdList: [{ type: Input }],
        securityInfo: [{ type: Input }],
        opCell: [{ type: ViewChild, args: ['opCell',] }]
    };
    return FileUploadComponent;
}());
export { FileUploadComponent };
if (false) {
    /** @type {?} */
    FileUploadComponent.prototype.files;
    /** @type {?} */
    FileUploadComponent.prototype.metadataIdList;
    /** @type {?} */
    FileUploadComponent.prototype.uploadFileInfoList;
    /** @type {?} */
    FileUploadComponent.prototype.errFileList;
    /** @type {?} */
    FileUploadComponent.prototype.errTypeList;
    /** @type {?} */
    FileUploadComponent.prototype.nullFileList;
    /** @type {?} */
    FileUploadComponent.prototype.beyondFileList;
    /** @type {?} */
    FileUploadComponent.prototype.showType;
    /** @type {?} */
    FileUploadComponent.prototype.mouseOn;
    /** @type {?} */
    FileUploadComponent.prototype.bufferSize;
    /** @type {?} */
    FileUploadComponent.prototype.selectedFiles;
    /** @type {?} */
    FileUploadComponent.prototype.radioButtonGroupValue;
    /** @type {?} */
    FileUploadComponent.prototype.selectedFileCount;
    /** @type {?} */
    FileUploadComponent.prototype.uploadIconAddress;
    /** @type {?} */
    FileUploadComponent.prototype.uploadLittleIconAddress;
    /** @type {?} */
    FileUploadComponent.prototype.hasSelectedFile;
    /** @type {?} */
    FileUploadComponent.prototype.fileAllSelected;
    /** @type {?} */
    FileUploadComponent.prototype.uploadProcess;
    /** @type {?} */
    FileUploadComponent.prototype.fileTotalChunk;
    /** @type {?} */
    FileUploadComponent.prototype.requestArray;
    /** @type {?} */
    FileUploadComponent.prototype.requestBodyArray;
    /** @type {?} */
    FileUploadComponent.prototype.uploadedChunk;
    /** @type {?} */
    FileUploadComponent.prototype.uploadedProcess;
    /** @type {?} */
    FileUploadComponent.prototype.storageExtension;
    /** @type {?} */
    FileUploadComponent.prototype.defaultPropertyName;
    /** @type {?} */
    FileUploadComponent.prototype.propertiesNames;
    /** @type {?} */
    FileUploadComponent.prototype.securityInfoList;
    /** @type {?} */
    FileUploadComponent.prototype.queueListStyle;
    /** @type {?} */
    FileUploadComponent.prototype.dropListValue;
    /** @type {?} */
    FileUploadComponent.prototype.uploadedFileTotal;
    /** @type {?} */
    FileUploadComponent.prototype.allowedMultiUpload;
    /** @type {?} */
    FileUploadComponent.prototype.haveExtensionProperty;
    /** @type {?} */
    FileUploadComponent.prototype.haveSecurityInfo;
    /** @type {?} */
    FileUploadComponent.prototype.uploadedFileInfoList;
    /** @type {?} */
    FileUploadComponent.prototype.oldUploadedFileList;
    /** @type {?} */
    FileUploadComponent.prototype.sameNameAllowed;
    /** @type {?} */
    FileUploadComponent.prototype.maxFileSize;
    /** @type {?} */
    FileUploadComponent.prototype.localeid;
    /** @type {?} */
    FileUploadComponent.prototype.localepipe;
    /** @type {?} */
    FileUploadComponent.prototype.httpclient;
    /** @type {?} */
    FileUploadComponent.prototype.checkboxPos;
    /** @type {?} */
    FileUploadComponent.prototype.formId;
    /** @type {?} */
    FileUploadComponent.prototype.rootId;
    /** @type {?} */
    FileUploadComponent.prototype.fileType;
    /** @type {?} */
    FileUploadComponent.prototype.fileCount;
    /** @type {?} */
    FileUploadComponent.prototype.oldIdList;
    /** @type {?} */
    FileUploadComponent.prototype.securityInfo;
    /** @type {?} */
    FileUploadComponent.prototype.opCell;
    /** @type {?} */
    FileUploadComponent.prototype.totalLoad;
    /** @type {?} */
    FileUploadComponent.prototype.exStorageFileList;
    /**
     * @type {?}
     * @private
     */
    FileUploadComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    FileUploadComponent.prototype.uploadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadComponent.prototype.loadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadComponent.prototype.injector;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,