/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, LOCALE_ID } from '@angular/core';
import { FileUploadComponent } from './upload/file-upload/file-upload.component';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
import { LocalLangPipe } from './local.pipe';
var UploadDialogService = /** @class */ (function () {
    function UploadDialogService(modalService, componentFactoryResolver, injector) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileInfoList = [];
        if (this.injector) {
            this.modalService = this.injector.get(BsModalService);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localpipe = new LocalLangPipe(this.localeid);
        }
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    UploadDialogService.prototype.showDialog = /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    function (formId, rootId) {
        var _this = this;
        /** @type {?} */
        var flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(_this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            _this.dlg = _this.modalService.show(viewerRef, {
                title: _this.localpipe.transform('uploadFile'),
                width: 950, height: 570,
                buttons: [
                    {
                        text: _this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            function (res) {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    _this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: _this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                function () {
                    if (flag == 0)
                        _this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    UploadDialogService.prototype.uploadFile = /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    function (formId, rootId, oldIdList) {
        if (oldIdList === void 0) { oldIdList = []; }
        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    UploadDialogService.prototype.uploadFileWithLimit = /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    function (formId, rootId, limit, oldIdList) {
        var _this = this;
        if (oldIdList === void 0) { oldIdList = []; }
        /** @type {?} */
        var flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var uploadFactory = _this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var uploadRef = uploadFactory.create(_this.injector);
            if (limit != null) {
                uploadRef.instance.fileCount = limit.fileCount;
                uploadRef.instance.securityInfo = limit.securityInfo;
                if (limit.fileType != null && limit.fileType != "")
                    uploadRef.instance.fileType = limit.fileType;
            }
            uploadRef.instance.rootId = rootId;
            uploadRef.instance.formId = formId;
            uploadRef.instance.oldIdList = oldIdList;
            _this.dlg = _this.modalService.show(uploadRef, {
                title: _this.localpipe.transform('uploadFile'),
                width: 950, height: 570,
                buttons: [
                    {
                        text: _this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            function (res) {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    _this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: _this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                function () {
                    if (flag == 0)
                        _this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    };
    UploadDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UploadDialogService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return UploadDialogService;
}());
export { UploadDialogService };
if (false) {
    /** @type {?} */
    UploadDialogService.prototype.localeid;
    /** @type {?} */
    UploadDialogService.prototype.localpipe;
    /** @type {?} */
    UploadDialogService.prototype.dlg;
    /** @type {?} */
    UploadDialogService.prototype.fileInfoList;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9mb3JtZG9jLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi91cGxvYWRkaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxjQUFjLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUU5RCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFHN0M7SUFLSSw2QkFBb0IsWUFBNEIsRUFBVSx3QkFBa0QsRUFBVSxRQUFrQjtRQUFwSCxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFBVSw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVV4SSxpQkFBWSxHQUFxQixFQUFFLENBQUM7UUFUaEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDckYsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDOzs7Ozs7SUFNRCx3Q0FBVTs7Ozs7SUFBVixVQUFXLE1BQWMsRUFBRSxNQUFjO1FBQXpD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RUFBRSw0QkFBNEIsRUFBRSxNQUFNOzs7d0JBQUU7NEJBQ2hGLEtBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQ3JCLENBQUMsQ0FBQTtxQkFDSjtpQkFDSjtnQkFFRCxXQUFXLEVBQUUsSUFBSTtnQkFDakIsYUFBYSxFQUFFLEtBQUs7Z0JBQ3BCLFdBQVc7OztnQkFBRTtvQkFDVCxJQUFJLElBQUksSUFBSSxDQUFDO3dCQUNULEtBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUM5QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEIsQ0FBQyxDQUFBO2FBQ0osQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxFQUFDLENBQUE7SUFDTixDQUFDOztnQkFwSEosVUFBVTs7OztnQkFQRixjQUFjO2dCQUZRLHdCQUF3QjtnQkFBbEMsUUFBUTs7SUE4SDdCLDBCQUFDO0NBQUEsQUFySEQsSUFxSEM7U0FwSFksbUJBQW1COzs7SUFFNUIsdUNBQWlCOztJQUNqQix3Q0FBeUI7O0lBU3pCLGtDQUFnQjs7SUFFaEIsMkNBQW9DOzs7OztJQVZ4QiwyQ0FBb0M7Ozs7O0lBQUUsdURBQTBEOzs7OztJQUFFLHVDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIExPQ0FMRV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi91cGxvYWQvZmlsZS11cGxvYWQvZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UsIEJzTW9kYWxSZWYgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgVXBsb2FkRmlsZUluZm8gfSBmcm9tICcuL3VwbG9hZC9lbnRpdHkvdXBsb2FkZmlsZWluZm8nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBVcGxvYWRMaW1pdCB9IGZyb20gJy4vdXBsb2FkL2VudGl0eS91cGxvYWRsaW1pdCc7XHJcbmltcG9ydCB7IExvY2FsTGFuZ1BpcGUgfSBmcm9tICcuL2xvY2FsLnBpcGUnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFVwbG9hZERpYWxvZ1NlcnZpY2Uge1xyXG5cclxuICAgIGxvY2FsZWlkOiBzdHJpbmc7XHJcbiAgICBsb2NhbHBpcGU6IExvY2FsTGFuZ1BpcGU7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5qZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RhbFNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChCc01vZGFsU2VydmljZSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxlaWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxhbmd1YWdlQ29kZVwiKSB8fCB0aGlzLmluamVjdG9yLmdldChMT0NBTEVfSUQpO1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FscGlwZSA9IG5ldyBMb2NhbExhbmdQaXBlKHRoaXMubG9jYWxlaWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkbGc6IEJzTW9kYWxSZWY7XHJcblxyXG4gICAgZmlsZUluZm9MaXN0OiBVcGxvYWRGaWxlSW5mb1tdID0gW107XHJcblxyXG4gICAgc2hvd0RpYWxvZyhmb3JtSWQ6IHN0cmluZywgcm9vdElkOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgZmxhZyA9IDA7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICB2YXIgdmlld2VyRmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEZpbGVVcGxvYWRDb21wb25lbnQpO1xyXG4gICAgICAgICAgICB2YXIgdmlld2VyUmVmID0gdmlld2VyRmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcblxyXG4gICAgICAgICAgICB2aWV3ZXJSZWYuaW5zdGFuY2Uucm9vdElkID0gcm9vdElkO1xyXG4gICAgICAgICAgICB2aWV3ZXJSZWYuaW5zdGFuY2UuZm9ybUlkID0gZm9ybUlkO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kbGcgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KHZpZXdlclJlZiwge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMubG9jYWxwaXBlLnRyYW5zZm9ybSgndXBsb2FkRmlsZScpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDk1MCwgaGVpZ2h0OiA1NzAsXHJcbiAgICAgICAgICAgICAgICBidXR0b25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLmxvY2FscGlwZS50cmFuc2Zvcm0oJ3NhdmUnKSwgY2xzOiAnay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1wcmltYXJ5JywgaGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRsZy5jb250ZW50LnVwbG9hZCgpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMubG9jYWxwaXBlLnRyYW5zZm9ybSgnY2xvc2UnKSwgY2xzOiAnay1idXR0b24gay1idXR0b24taWNvbnRleHQnLCBoYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdLFxyXG5cclxuICAgICAgICAgICAgICAgIHNob3dCdXR0b25zOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2hvd01heEJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBiZWZvcmVDbG9zZTogKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFnID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGxnLmNvbnRlbnQuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHVwbG9hZEZpbGUoZm9ybUlkOiBzdHJpbmcsIHJvb3RJZDogc3RyaW5nLCBvbGRJZExpc3Q6IHN0cmluZ1tdID0gW10pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRGaWxlV2l0aExpbWl0KGZvcm1JZCwgcm9vdElkLCBudWxsLCBvbGRJZExpc3QpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB1cGxvYWRGaWxlV2l0aExpbWl0KGZvcm1JZDogc3RyaW5nLCByb290SWQ6IHN0cmluZywgbGltaXQ6IFVwbG9hZExpbWl0LCBvbGRJZExpc3Q6IHN0cmluZ1tdID0gW10pIHtcclxuICAgICAgICBsZXQgZmxhZyA9IDA7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICB2YXIgdXBsb2FkRmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEZpbGVVcGxvYWRDb21wb25lbnQpO1xyXG4gICAgICAgICAgICB2YXIgdXBsb2FkUmVmID0gdXBsb2FkRmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgICAgIGlmIChsaW1pdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB1cGxvYWRSZWYuaW5zdGFuY2UuZmlsZUNvdW50ID0gbGltaXQuZmlsZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgdXBsb2FkUmVmLmluc3RhbmNlLnNlY3VyaXR5SW5mbz1saW1pdC5zZWN1cml0eUluZm87XHJcbiAgICAgICAgICAgICAgICBpZiAobGltaXQuZmlsZVR5cGUgIT0gbnVsbCAmJiBsaW1pdC5maWxlVHlwZSAhPSBcIlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZFJlZi5pbnN0YW5jZS5maWxlVHlwZSA9IGxpbWl0LmZpbGVUeXBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVwbG9hZFJlZi5pbnN0YW5jZS5yb290SWQgPSByb290SWQ7XHJcbiAgICAgICAgICAgIHVwbG9hZFJlZi5pbnN0YW5jZS5mb3JtSWQgPSBmb3JtSWQ7XHJcbiAgICAgICAgICAgIHVwbG9hZFJlZi5pbnN0YW5jZS5vbGRJZExpc3QgPSBvbGRJZExpc3Q7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRsZyA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3codXBsb2FkUmVmLCB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbHBpcGUudHJhbnNmb3JtKCd1cGxvYWRGaWxlJyksXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogOTUwLCBoZWlnaHQ6IDU3MCxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLmxvY2FscGlwZS50cmFuc2Zvcm0oJ3NhdmUnKSwgY2xzOiAnay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1wcmltYXJ5JywgaGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRsZy5jb250ZW50LnVwbG9hZCgpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMubG9jYWxwaXBlLnRyYW5zZm9ybSgnY2xvc2UnKSwgY2xzOiAnay1idXR0b24gay1idXR0b24taWNvbnRleHQnLCBoYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdLFxyXG5cclxuICAgICAgICAgICAgICAgIHNob3dCdXR0b25zOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2hvd01heEJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBiZWZvcmVDbG9zZTogKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFnID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGxnLmNvbnRlbnQuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59Il19