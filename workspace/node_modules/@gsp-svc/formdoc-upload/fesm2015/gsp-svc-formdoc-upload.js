import { FarrisDialogModule } from '@farris/ui-dialog';
import { CommonModule } from '@angular/common';
import { of } from 'rxjs/observable/of';
import { catchError, tap, map } from 'rxjs/operators';
import { UUID } from 'angular2-uuid';
import { DomSanitizer } from '@angular/platform-browser';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { ProgressModule } from '@farris/ui-progress';
import { FormsModule } from '@angular/forms';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisFormsModule } from '@farris/ui-forms';
import { CacheService, HttpService, LanguageService, SessionService } from '@ecp-caf/caf-common';
import { Injectable, Pipe, Inject, LOCALE_ID, Component, NgModule, Injector, ComponentFactoryResolver, ViewChild, Input, defineInjectable } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { of as of$1 } from 'rxjs';
import { HttpClientModule, HttpClient } from '@angular/common/http';
import { NotifyModule } from '@farris/ui-notify';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormdocUploadService {
    constructor() { }
}
FormdocUploadService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FormdocUploadService.ctorParameters = () => [];
/** @nocollapse */ FormdocUploadService.ngInjectableDef = defineInjectable({ factory: function FormdocUploadService_Factory() { return new FormdocUploadService(); }, token: FormdocUploadService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormdocUploadComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
FormdocUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-formdoc-upload',
                template: `
    <p>
      formdoc-upload works!
    </p>
  `
            }] }
];
/** @nocollapse */
FormdocUploadComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS';
class FormdocUploadModule {
}
FormdocUploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormdocUploadComponent],
                imports: [
                    HttpClientModule
                ],
                exports: [FormdocUploadComponent],
                providers: [LanguageService, HttpService, CacheService, SessionService,
                    { provide: LOCALE_ID, useValue: ɵ0 },]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DocType = {
    Word: 0,
    Excel: 1,
    Powerpoint: 2,
    Pdf: 3,
    Txt: 4,
    Image: 5,
    Other: 6,
};
DocType[DocType.Word] = 'Word';
DocType[DocType.Excel] = 'Excel';
DocType[DocType.Powerpoint] = 'Powerpoint';
DocType[DocType.Pdf] = 'Pdf';
DocType[DocType.Txt] = 'Txt';
DocType[DocType.Image] = 'Image';
DocType[DocType.Other] = 'Other';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const OperatingModes = {
    Formal: 0,
    Temp: 1,
};
OperatingModes[OperatingModes.Formal] = 'Formal';
OperatingModes[OperatingModes.Temp] = 'Temp';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormRemoveListEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormDocOperateEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChangeInstanceRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CopyFileRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadService {
    /**
     * @param {?} http
     * @param {?} httpclient
     */
    constructor(http, httpclient) {
        this.http = http;
        this.httpclient = httpclient;
    }
    /**
     * @param {?} docListInfo
     * @param {?} rootId
     * @return {?}
     */
    uploadList(docListInfo, rootId) {
        /** @type {?} */
        let url;
        docListInfo.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docListInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    commit(metadataIdList, rootId) {
        /** @type {?} */
        let url;
        /** @type {?} */
        let entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/commit";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/commit";
        return this.http.post(url, entity).pipe();
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    cancel(metadataIdList, rootId) {
        /** @type {?} */
        let url;
        /** @type {?} */
        let entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/cancel";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/cancel";
        //localStorage.setItem("SessionId","huoliang");
        return this.http.put(url, entity).pipe();
    }
    /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    removeList(idList, rootId) {
        /** @type {?} */
        let url;
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/list";
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        /** @type {?} */
        var idListInfo = new GspFormRemoveListEntity;
        idListInfo.metadataIdList = idList;
        idListInfo.mode = OperatingModes.Temp;
        idListInfo.rootId = rootId;
        return this.http.delete(url, idListInfo).pipe();
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getFile(metadataId, rootId) {
        /** @type {?} */
        let url;
        if (rootId == "")
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId;
        else
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId + "/" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} docInfo
     * @return {?}
     */
    uploadFile(docInfo) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} formdata
     * @return {?}
     */
    uploadSliceFile(formdata) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/slice";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @return {?}
     */
    getStorageExtensionInfo() {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/storagestrategy/extension";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} baseInfo
     * @return {?}
     */
    getSecurityInfoList(baseInfo) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/storagestrategy/security";
        url = url + "?id=" + baseInfo.securityId + "&level=" + baseInfo.securityLevel;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} storageInfoList
     * @param {?} rootId
     * @return {?}
     */
    changeStorageInstance(storageInfoList, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/changeinstance";
        /** @type {?} */
        let request = new ChangeInstanceRequest;
        request.fileInfoList = storageInfoList;
        request.rootId = rootId;
        return this.http.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} path
     * @return {?}
     */
    copyFile(metadataId, rootId, path) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/copy";
        /** @type {?} */
        let request = new CopyFileRequest;
        request.metadataId = metadataId;
        request.rootId = rootId;
        request.path = path;
        return this.httpclient.post(url, request, { responseType: 'text' }).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })));
    }
    /**
     * @param {?} uploadFileInfoList
     * @param {?} rootId
     * @return {?}
     */
    saveSecurityInfo(uploadFileInfoList, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/doc/exproperty";
        /** @type {?} */
        let reqList = [];
        uploadFileInfoList.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let request = { id: element.metadataId, rootId: rootId, exProperty: JSON.stringify(element.securityInfo) };
            reqList.push(request);
        }));
        return this.http.post(url, reqList).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    getUploadedFileInfoList(formId, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/uploadedfile/infolist" + "?formid=" + formId + "&rootid=" + rootId;
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} rootId
     * @return {?}
     */
    getUploadInfo(rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/rootsetting/info?id=" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
}
UploadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UploadService.ctorParameters = () => [
    { type: HttpService },
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadFileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExStorageFileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const FileState = {
    New: 0,
    Update: 1,
};
FileState[FileState.New] = 'New';
FileState[FileState.Update] = 'Update';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LANG_RESOURCES = {
    'zh-CHS': {
        'uploadFile': '上传文件',
        'uploading': '正在上传文件……',
        'selectedCount': '已选择文件数量：',
        'limitCount': '超出系统限制数量：',
        'rechooseFile': ',重新选择上传文件。',
        'save': '保存',
        'cancel': '取消',
        'haveSameName': '已上传过同名文件: ',
        'rename': '重命名',
        'replace': '替换',
        'sizeZero': '文件大小为0',
        'sizeMax': '文件大小超出限制',
        'uploadFailure': '上传失败',
        'uploadSucceed': '上传成功',
        'wait': '等一下，文档正在上传。',
        'saveTo': '正在将文件保存到',
        'delete': '删除',
        'selectAll': '全选',
        'selectNull': '全不选',
        'detail': '详情',
        'fileName': '文件名',
        'state': '状态',
        'operation': '操作',
        'size': '大小',
        'close': '关闭',
        'loading': '拼命加载中',
        'mismatchChunkSize': '文档分片上传部分丢失，请重新上传，如果多次上传失败，请联系管理员。'
    },
    'en-US': {
        'uploadFile': 'Upload File',
        'uploading': 'File Uploading……',
        'selectedCount': 'Selected files count：',
        'limitCount': 'System limit count：',
        'rechooseFile': ',Reselect upload file.',
        'save': 'Save',
        'cancel': 'Cancel',
        'haveSameName': 'A file with the same name has been uploaded: ',
        'rename': 'Rename',
        'replace': 'Replace',
        'sizeZero': 'File size is 0',
        'sizeMax': 'File size beyond limit',
        'uploadFailure': 'Upload failed',
        'uploadSucceed': 'Upload successfully',
        'wait': 'Wait a minute, the file is uploading.',
        'saveTo': 'Saving file to',
        'delete': 'Delete',
        'selectAll': 'Select all',
        'selectNull': 'Not at all',
        'detail': 'Details',
        'fileName': 'Filename',
        'state': 'State',
        'operation': 'Operation',
        'size': 'Size',
        'close': 'Close',
        'loading': 'Loading',
        'mismatchChunkSize': 'The partial upload of document shards is missing. Please upload again. If multiple uploads fail, please contact the administrator.'
    },
    'en': {
        'uploadFile': 'Upload File',
        'uploading': 'File Uploading……',
        'selectedCount': 'Selected files count：',
        'limitCount': 'System limit count：',
        'rechooseFile': ',Reselect upload file.',
        'save': 'Save',
        'cancel': 'Cancel',
        'haveSameName': 'A file with the same name has been uploaded: ',
        'rename': 'Rename',
        'replace': 'Replace',
        'sizeZero': 'File size is 0',
        'sizeMax': 'File size beyond limit',
        'uploadFailure': 'Upload failed',
        'uploadSucceed': 'Upload successfully',
        'wait': 'Wait a minute, the file is uploading.',
        'saveTo': 'Saving file to',
        'delete': 'Delete',
        'selectAll': 'Select all',
        'selectNull': 'Not at all',
        'detail': 'Details',
        'fileName': 'Filename',
        'state': 'State',
        'operation': 'Operation',
        'size': 'Size',
        'close': 'Close',
        'loading': 'Loading',
        'mismatchChunkSize': 'The partial upload of document shards is missing. Please upload again. If multiple uploads fail, please contact the administrator.'
    },
    'zh-CHT': {
        'uploadFile': '上傳文件',
        'uploading': '正在上傳文件……',
        'selectedCount': '已選擇文件數量：',
        'limitCount': '超出系統限制數量：',
        'rechooseFile': ',重新選擇上傳文件。',
        'save': '保存',
        'cancel': '取消',
        'haveSameName': '已上傳過同名文件: ',
        'rename': '重命名',
        'replace': '替換',
        'sizeZero': '文件大小為0',
        'sizeMax': '文件大小超出限制',
        'uploadFailure': '上傳失敗',
        'uploadSucceed': '上傳成功',
        'wait': '等一下，文件正在上傳。',
        'saveTo': '正在將文件保存到',
        'delete': '删除',
        'selectAll': '全選',
        'selectNull': '全不選',
        'detail': '詳情',
        'fileName': '文件名',
        'state': '狀態',
        'operation': '操作',
        'size': '大小',
        'close': '關閉',
        'loading': '拼命加載中',
        'mismatchChunkSize': '文檔分片上傳部分遺失，請重新上傳，如果多次上傳失敗，請聯系管理員。'
    },
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LocalLangPipe {
    /**
     * @param {?} localeId
     */
    constructor(localeId) {
        this.defaultLang = "zh-CHS";
        this.langCode = localStorage.getItem("languageCode") || localeId || this.defaultLang;
        this.lang = LANG_RESOURCES[this.langCode] || LANG_RESOURCES[this.defaultLang];
    }
    /**
     * @param {?} name
     * @return {?}
     */
    transform(name) {
        return this.lang[name] || name;
    }
}
LocalLangPipe.decorators = [
    { type: Pipe, args: [{ name: 'locale' },] }
];
/** @nocollapse */
LocalLangPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspDocSecurityBaseInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InitMultiUploadRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CompleteMultiUploadRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormStreamEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiUploadRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileUploadComponent {
    /**
     * @param {?} msgService
     * @param {?} uploadService
     * @param {?} loadService
     * @param {?=} injector
     */
    constructor(msgService, uploadService, loadService, injector) {
        this.msgService = msgService;
        this.uploadService = uploadService;
        this.loadService = loadService;
        this.injector = injector;
        this.files = [];
        this.metadataIdList = [];
        this.uploadFileInfoList = [];
        this.errFileList = [];
        this.errTypeList = [];
        this.nullFileList = [];
        this.beyondFileList = [];
        this.showType = 0;
        this.mouseOn = false;
        this.bufferSize = 5 * 1024 * 1024;
        this.selectedFileCount = 0;
        this.uploadIconAddress = '/platform/runtime/dfs/images/upload.svg';
        this.uploadLittleIconAddress = '/platform/runtime/dfs/images/uploadIcon.svg';
        this.hasSelectedFile = false;
        this.fileAllSelected = false;
        this.uploadProcess = { width: '0%' };
        this.fileTotalChunk = {};
        this.requestArray = new Array;
        this.requestBodyArray = new Array;
        this.uploadedChunk = {};
        this.uploadedProcess = {};
        this.defaultPropertyName = "";
        this.propertiesNames = [];
        this.securityInfoList = [];
        this.queueListStyle = { width: '480px' };
        this.dropListValue = "";
        this.uploadedFileTotal = 0;
        this.haveExtensionProperty = false;
        this.haveSecurityInfo = false;
        this.uploadedFileInfoList = [];
        this.oldUploadedFileList = [];
        //uploadedNameList = [];
        this.sameNameAllowed = true;
        this.maxFileSize = 0;
        this.checkboxPos = { top: '0px' };
        this.fileType = "*";
        this.fileCount = 0;
        this.oldIdList = [];
        this.securityInfo = null;
        this.totalLoad = null;
        this.exStorageFileList = [];
        if (this.injector) {
            this.httpclient = this.injector.get(HttpClient);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localepipe = new LocalLangPipe(this.localeid);
        }
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        if (navigator.userAgent.indexOf('Firefox') >= 0)
            this.checkboxPos.top = '14px';
        //if (this.storageService != null) {
        if (this.securityInfo != null) {
            this.uploadService.getSecurityInfoList(this.securityInfo).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                this.haveSecurityInfo = true;
                /** @type {?} */
                let i = 0;
                res.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.securityInfoList.push({ id: i.toString(), securityId: element.securityId, securityLevel: element.securityLevel, name: element.name });
                    i++;
                }));
            }));
        }
        this.uploadService.getStorageExtensionInfo().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res != null && res.error == null) {
                this.storageExtension = res;
                this.defaultPropertyName = this.storageExtension.defaultPropertyName;
                this.propertiesNames.push({ id: "0", name: this.storageExtension.defaultPropertyName });
                /** @type {?} */
                let i = 0;
                // this.propertiesNames.push(...(this.storageExtension.extensionPropertyNameList));
                this.storageExtension.extensionPropertyNameList.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.propertiesNames.push({ id: (++i).toString(), name: element });
                }));
                this.queueListStyle.width = '380px';
                this.haveExtensionProperty = true;
            }
        }));
        this.uploadService.getUploadInfo(this.rootId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res != null && res.error == null) {
                this.sameNameAllowed = res.sameNameAllowed;
                this.maxFileSize = parseInt(JSON.parse(res.validateConfiguration).maxFileSize);
                this.allowedMultiUpload = res.allowedMultiUpload;
                if (!this.sameNameAllowed) {
                    this.uploadService.getUploadedFileInfoList(this.formId, this.rootId).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => {
                        if (res != null && res.error == null) {
                            this.uploadedFileInfoList = res;
                            this.oldUploadedFileList = JSON.parse(JSON.stringify(res));
                        }
                    }));
                }
            }
        }));
        if (this.oldIdList != null && this.oldIdList.length > 0) ;
        this.radioButtonGroupValue = 'showByGroup';
    }
    /**
     * @return {?}
     */
    showLoading() {
        this.hasSelectedFile = true;
        // if (this.totalLoad == null)
        //   this.totalLoad = this.loadService.show({
        //     message: this.localepipe.transform('uploading')
        //   });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    fileSelected($event) {
        this.hasSelectedFile = true;
        this.selectedFiles = document.querySelector('#file');
        if (this.fileCount > 0) {
            if (this.selectedFiles.files.length + this.files.length > this.fileCount) {
                /** @type {?} */
                let selectedNum = ((/** @type {?} */ (this.selectedFiles.files.length))) + this.files.length;
                this.msgService.warning(this.localepipe.transform('selectedCount') + selectedNum + this.localepipe.transform('limitCount') + this.fileCount + this.localepipe.transform('rechooseFile'));
                return;
            }
        }
        //this.flag = 0;
        for (let i = 0; i < this.selectedFiles.files.length; i++) {
            /** @type {?} */
            let selectedFile = this.selectedFiles.files[i];
            //selectedFile.slice
            /** @type {?} */
            let uuid = UUID.UUID();
            if (selectedFile.size == 0) {
                this.nullFileList.push(selectedFile.name);
                continue;
            }
            if (this.maxFileSize != null && this.maxFileSize > 0) {
                if (selectedFile.size > this.maxFileSize * 1000) {
                    this.beyondFileList.push(selectedFile.name);
                    continue;
                }
            }
            if (!this.sameNameAllowed) {
                if (this.uploadedFileInfoList.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.fileName == selectedFile.name)) != null) {
                    /** @type {?} */
                    const msg = this.msgService.show('warning', this.localepipe.transform('haveSameName') + selectedFile.name, {
                        initialState: {
                            buttons: [
                                {
                                    text: this.localepipe.transform('rename'),
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        /** @type {?} */
                                        let oldName = selectedFile.name;
                                        /** @type {?} */
                                        let newName;
                                        /** @type {?} */
                                        let flag = true;
                                        /** @type {?} */
                                        let i = 1;
                                        while (flag) {
                                            newName = oldName.substring(0, oldName.lastIndexOf('.')) + '(' + i + ')' + oldName.substring(oldName.lastIndexOf('.'));
                                            if (this.uploadedFileInfoList.find((/**
                                             * @param {?} x
                                             * @return {?}
                                             */
                                            x => x.fileName == newName)) != null) {
                                                i++;
                                            }
                                            else
                                                flag = false;
                                        }
                                        this.uploadFile(uuid, selectedFile, newName);
                                        msg.close();
                                    })
                                },
                                {
                                    text: this.localepipe.transform('replace'),
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        uuid = this.uploadedFileInfoList.find((/**
                                         * @param {?} x
                                         * @return {?}
                                         */
                                        x => x.fileName == selectedFile.name)).metadataId;
                                        this.uploadFile(uuid, selectedFile, selectedFile.name, FileState.Update);
                                        this.uploadedFileTotal--;
                                        if (this.oldUploadedFileList.find((/**
                                         * @param {?} x
                                         * @return {?}
                                         */
                                        x => x.fileName == selectedFile.name))) {
                                            this.uploadedFileTotal++;
                                            this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter((/**
                                             * @param {?} x
                                             * @return {?}
                                             */
                                            x => x.fileName == selectedFile.name))[0]), 1);
                                        }
                                        msg.close();
                                    })
                                },
                                {
                                    text: this.localepipe.transform('cancel'),
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        msg.close();
                                    })
                                }
                            ]
                        }
                    });
                    continue;
                }
            }
            this.uploadFile(uuid, selectedFile, selectedFile.name);
        }
        if (this.errFileList.length > 0) {
            /** @type {?} */
            let name = this.listToString(this.errFileList);
            this.msgService.warning(this.localepipe.transform('haveSameName') + name + this.localepipe.transform('rechooseFile'));
            this.errFileList = [];
        }
        if (this.nullFileList.length > 0) {
            /** @type {?} */
            let name = this.listToString(this.nullFileList);
            name = name.substring(0, name.length - 1);
            this.msgService.warning(name + this.localepipe.transform('sizeZero') + this.localepipe.transform('rechooseFile'));
            this.nullFileList = [];
        }
        if (this.beyondFileList.length > 0) {
            /** @type {?} */
            let name = this.listToString(this.beyondFileList);
            name = name.substring(0, name.length - 1);
            this.msgService.warning(name + this.localepipe.transform('sizeMax') + this.maxFileSize + "KB" + this.localepipe.transform('rechooseFile'));
            this.beyondFileList = [];
        }
        this.files = this.files.slice();
        this.fileAllSelected = false;
        $event.target.value = '';
        // loading.close();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    showErrorMessage(file) {
        this.msgService.error(this.localepipe.transform('uploadFailure') + file.errorMessage);
    }
    /**
     * @param {?} uuid
     * @param {?} selectedFile
     * @param {?} fileName
     * @return {?}
     */
    handleFileInfo(uuid, selectedFile, fileName) {
        /** @type {?} */
        let fileInfo;
        fileInfo = {
            id: uuid,
            name: fileName,
            type: selectedFile.type,
            source: "",
            size: this.getFileSize(selectedFile.size),
            fileSize: selectedFile.size,
            picListDisplayName: this.getPicListDisplayName(fileName),
            queueListDisplayName: this.getQueueDisplayName(fileName),
            //content: reader.result.toString(),
            hasUploaded: false,
            mouseOn: false,
            selectd: false,
            isUploading: true,
            uploadResult: false,
            uploadProcess: 0,
            errorMessage: "",
            extensionDropListId: 0,
            extensionName: "",
            securityDropListId: 0,
            securityInfo: this.securityInfoList[0]
        };
        if (this.storageExtension != null)
            fileInfo.extensionName = this.defaultPropertyName;
        /** @type {?} */
        let type = selectedFile.type;
        if (type.includes("tiff")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Other);
        }
        else if (type.includes("image")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Image);
        }
        else if (type.includes("word")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Word);
        }
        else if (type.includes("pdf")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Pdf);
        }
        else if (type.includes("plain")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Txt);
        }
        else if (type.includes("sheet") || type.includes("excel")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Excel);
        }
        else if (type.includes("powerpoint") || type.includes("presentation")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Powerpoint);
        }
        else {
            this.addDocInfo(selectedFile, fileInfo, DocType.Other);
            // let name: string = selectedFile.name;
            // let errType = name.substring(selectedFile.name.lastIndexOf('.'));
            // this.errTypeList.push(errType);
        }
        return fileInfo;
    }
    /**
     * @param {?} uuid
     * @param {?} selectedFile
     * @param {?} fileName
     * @param {?=} state
     * @return {?}
     */
    uploadFile(uuid, selectedFile, fileName, state = FileState.New) {
        /** @type {?} */
        let fileInfo = this.handleFileInfo(uuid, selectedFile, fileName);
        /** @type {?} */
        let uploadFileInfo = new UploadFileInfo();
        uploadFileInfo.metadataId = uuid;
        uploadFileInfo.fileName = fileInfo.name;
        uploadFileInfo.fileSize = fileInfo.size;
        uploadFileInfo.state = state;
        uploadFileInfo.securityInfo = this.securityInfoList[0];
        //判断是否支持分片上传
        if (this.allowedMultiUpload) {
            //支持分片上传
            /** @type {?} */
            let initRequest = new InitMultiUploadRequest;
            initRequest.path = this.formId;
            initRequest.metadataId = uuid;
            initRequest.rootId = this.rootId;
            initRequest.size = fileInfo.fileSize;
            initRequest.fileName = fileName;
            //初始化分片
            this.initMultiUpload(initRequest).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                if (res.error != null) {
                    this.files[this.files.indexOf(fileInfo)].uploadResult = false;
                    this.files[this.files.indexOf(fileInfo)].isUploading = false;
                    this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                }
                else {
                    /** @type {?} */
                    let uploadId = res.uploadId;
                    /** @type {?} */
                    let chunkTotal = Math.ceil(selectedFile.size / this.bufferSize);
                    /** @type {?} */
                    let chunkIndex = 0;
                    /** @type {?} */
                    let multiResultList = [];
                    this.fileTotalChunk[uuid] = chunkTotal;
                    this.uploadedChunk[uuid] = 0;
                    while (chunkIndex < chunkTotal) {
                        /** @type {?} */
                        let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, selectedFile.size);
                        /** @type {?} */
                        let fileData = selectedFile.slice(chunkIndex * this.bufferSize, nextSize);
                        /** @type {?} */
                        let multiRequest = new MultiUploadRequest;
                        multiRequest.metadataId = uuid;
                        multiRequest.rootId = this.rootId;
                        multiRequest.uploadId = uploadId;
                        multiRequest.index = chunkIndex;
                        multiRequest.total = chunkTotal;
                        multiRequest.size = fileData.size;
                        /** @type {?} */
                        let formData = new FormData();
                        formData.append('multiRequest', JSON.stringify(multiRequest));
                        formData.append('file', fileData);
                        this.multiUpload(formData).subscribe((/**
                         * @param {?} res
                         * @return {?}
                         */
                        res => {
                            if (res.error != null) {
                                this.files[this.files.indexOf(fileInfo)].uploadResult = false;
                                this.files[this.files.indexOf(fileInfo)].isUploading = false;
                                this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                            }
                            else {
                                multiResultList.push(res.result);
                                this.uploadedChunk[uuid]++;
                                this.files[this.files.indexOf(fileInfo)].uploadProcess = Number.parseInt((this.uploadedChunk[uuid] / this.fileTotalChunk[uuid] * 100).toFixed(0));
                                if (this.uploadedChunk[uuid] == this.fileTotalChunk[uuid]) {
                                    if (multiResultList.length == this.fileTotalChunk[uuid]) {
                                        /** @type {?} */
                                        let completeMultiUploadRequest = new CompleteMultiUploadRequest;
                                        completeMultiUploadRequest.metadataId = uuid;
                                        completeMultiUploadRequest.partList = multiResultList;
                                        completeMultiUploadRequest.rootId = this.rootId;
                                        completeMultiUploadRequest.uploadId = uploadId;
                                        completeMultiUploadRequest.size = fileInfo.fileSize;
                                        if (this.haveExtensionProperty)
                                            completeMultiUploadRequest.exPropertyName = this.defaultPropertyName;
                                        this.completeMultiUpload(completeMultiUploadRequest).subscribe((/**
                                         * @param {?} res
                                         * @return {?}
                                         */
                                        res => {
                                            if (res.status != 200) {
                                                this.files[this.files.indexOf(fileInfo)].uploadResult = false;
                                                this.files[this.files.indexOf(fileInfo)].isUploading = false;
                                                this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                                            }
                                            else {
                                                this.files[this.files.indexOf(fileInfo)].uploadResult = true;
                                                this.files[this.files.indexOf(fileInfo)].isUploading = false;
                                                this.uploadFileInfoList = this.uploadFileInfoList.concat(uploadFileInfo);
                                                this.uploadedFileInfoList = this.uploadedFileInfoList.concat(uploadFileInfo);
                                                this.uploadedFileTotal++;
                                            }
                                        }));
                                        //后台异步拼接文档
                                    }
                                    else {
                                        this.files[this.files.indexOf(fileInfo)].uploadResult = false;
                                        this.files[this.files.indexOf(fileInfo)].isUploading = false;
                                        this.files[this.files.indexOf(fileInfo)].errorMessage = this.localepipe.transform('mismatchChunkSize');
                                    }
                                }
                            }
                        }));
                        chunkIndex = chunkIndex + 1;
                    }
                }
            }));
        }
        else {
            /** @type {?} */
            let entity = new GspFormStreamEntity;
            entity.formId = this.formId;
            entity.metadataId = uuid;
            entity.mode = OperatingModes.Temp;
            entity.rootId = this.rootId;
            entity.size = selectedFile.size;
            entity.fileName = fileName;
            if (this.haveExtensionProperty)
                entity.exPropertyName = this.defaultPropertyName;
            /** @type {?} */
            let formData = new FormData();
            formData.append('uploadEntity', JSON.stringify(entity));
            formData.append('file', selectedFile);
            this.uploadSingleFile(formData).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                if (res != null) {
                    this.files[this.files.indexOf(fileInfo)].uploadResult = false;
                    this.files[this.files.indexOf(fileInfo)].isUploading = false;
                    this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                }
                else {
                    this.files[this.files.indexOf(fileInfo)].uploadResult = true;
                    this.files[this.files.indexOf(fileInfo)].isUploading = false;
                    this.uploadFileInfoList = this.uploadFileInfoList.concat(uploadFileInfo);
                    this.uploadedFileInfoList = this.uploadedFileInfoList.concat(uploadFileInfo);
                    this.uploadedFileTotal++;
                }
            }));
        }
        /** @type {?} */
        let index = -1;
        this.files.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (x.name == fileInfo.name) {
                if (index == -1)
                    index = this.files.indexOf(x);
            }
        }));
        if (index != -1 && index != this.files.length - 1) {
            this.files.splice(index, 1);
            this.uploadFileInfoList.splice(index, 1);
            this.uploadedFileInfoList.splice(index, 1);
            //this.uploadedFileTotal--;
        }
    }
    /**
     * @param {?} formdata
     * @return {?}
     */
    uploadSingleFile(formdata) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/single";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of$1(error);
        })));
    }
    /**
     * @param {?} formdata
     * @return {?}
     */
    uploadSliceFile(formdata) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/slice";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of$1(error);
        })));
    }
    /**
     * @param {?} request
     * @return {?}
     */
    initMultiUpload(request) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/multi/init";
        return this.httpclient.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of$1(error);
        })));
    }
    /**
     * @param {?} formdata
     * @return {?}
     */
    multiUpload(formdata) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/multi/upload";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of$1(error);
        })));
    }
    /**
     * @param {?} request
     * @return {?}
     */
    completeMultiUpload(request) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/multi/complete";
        return this.httpclient.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of$1(error);
        })));
    }
    /**
     * @return {?}
     */
    selectAllFile() {
        if (!this.fileAllSelected) {
            this.files.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                element.selectd = true;
            }));
            this.fileAllSelected = true;
            this.selectedFileCount = this.files.length;
        }
        else {
            this.files.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                element.selectd = false;
            }));
            this.fileAllSelected = false;
            this.selectedFileCount = 0;
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    checkoutSelectFile(file) {
        // let obj: any = document.getElementById(fileName);
        file.selectd = !file.selectd;
        if (file.selectd)
            this.selectedFileCount++;
        else
            this.selectedFileCount--;
        if (this.selectedFileCount == this.files.length) {
            this.fileAllSelected = true;
            //this.isFileAllSelected();
        }
        else {
            this.fileAllSelected = false;
            //this.isFileAllSelected();
        }
    }
    /**
     * @param {?} fileInfo
     * @return {?}
     */
    listDeleteFile(fileInfo) {
        if (fileInfo.selectd)
            this.selectedFileCount--;
        //console.log(fileName);
        this.files.splice(this.files.indexOf(fileInfo), 1);
        if (fileInfo.uploadResult) {
            /** @type {?} */
            let idList = [];
            idList.push(fileInfo.id);
            this.uploadService.cancel(idList, this.rootId).subscribe();
            this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.fileName == fileInfo.name))[0]), 1);
            this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.fileName == fileInfo.name))[0]), 1);
            this.uploadedFileTotal--;
        }
        if (this.selectedFileCount == 0)
            this.fileAllSelected = false;
    }
    /**
     * @return {?}
     */
    listMultipleDeleteFile() {
        /** @type {?} */
        let selectedFile = [];
        this.files.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let obj = document.getElementById(element.name);
            if (obj.checked)
                selectedFile.push(element);
        }));
        /** @type {?} */
        let metadataList = [];
        selectedFile.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            metadataList.push(element.id);
            this.files.splice(this.files.indexOf(element), 1);
            if (element.uploadResult) {
                this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.fileName == element.name))[0]), 1);
                this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.fileName == element.name))[0]), 1);
                this.uploadedFileTotal--;
            }
        }));
        this.uploadService.cancel(metadataList, this.rootId).subscribe();
        /** @type {?} */
        let allBox = document.getElementById("allCheckBox");
        if (allBox != null)
            allBox.checked = false;
        this.selectedFileCount = 0;
        this.fileAllSelected = false;
    }
    /**
     * @param {?} fileName
     * @return {?}
     */
    getPicListDisplayName(fileName) {
        if (fileName.length <= 10)
            return fileName;
        else {
            /** @type {?} */
            let headContent = fileName.substring(0, 2);
            /** @type {?} */
            let tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);
            return headContent + "…" + tailContent;
        }
    }
    /**
     * @param {?} fileName
     * @return {?}
     */
    getQueueDisplayName(fileName) {
        return fileName;
    }
    /**
     * @param {?} selectdFile
     * @param {?} fileInfo
     * @param {?} docType
     * @return {?}
     */
    addDocInfo(selectdFile, fileInfo, docType) {
        switch (docType) {
            case DocType.Word: {
                fileInfo.source = "/platform/runtime/dfs/images/word.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Pdf: {
                fileInfo.source = "/platform/runtime/dfs/images/pdf.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Excel: {
                fileInfo.source = "/platform/runtime/dfs/images/excel.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Txt: {
                fileInfo.source = "/platform/runtime/dfs/images/txt.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Powerpoint: {
                fileInfo.source = "/platform/runtime/dfs/images/ppt.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Other: {
                fileInfo.source = "/platform/runtime/dfs/images/file.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Image: {
                /** @type {?} */
                let reader = new FileReader();
                reader.readAsDataURL(selectdFile);
                reader.onload = (/**
                 * @param {?} _event
                 * @return {?}
                 */
                (_event) => {
                    /** @type {?} */
                    let imgUrl = reader.result;
                    if (this.injector != null) {
                        /** @type {?} */
                        let sanitizer = this.injector.get(DomSanitizer);
                        imgUrl = sanitizer.bypassSecurityTrustResourceUrl(imgUrl);
                    }
                    fileInfo.source = imgUrl;
                    this.files.push(fileInfo);
                    //因为异步处理的差异，补偿一次删除
                    /** @type {?} */
                    let index = -1;
                    this.files.forEach((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => {
                        if (x.name == fileInfo.name) {
                            if (index == -1)
                                index = this.files.indexOf(x);
                        }
                    }));
                    if (index != -1 && index != this.files.length - 1) {
                        this.files.splice(index, 1);
                        this.uploadFileInfoList.splice(index, 1);
                        this.uploadedFileInfoList.splice(index, 1);
                    }
                });
            }
        }
    }
    /**
     * @param {?} strList
     * @return {?}
     */
    listToString(strList) {
        /** @type {?} */
        let name = "";
        for (let i = 0; i < strList.length; i++) {
            name += strList[i] + ",";
        }
        return name;
    }
    /**
     * @param {?} $event
     * @param {?} file
     * @return {?}
     */
    securityChange($event, file) {
        file.securityInfo = $event.data;
        /** @type {?} */
        let uploadFile = this.uploadFileInfoList.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.metadataId = file.id))[0];
        uploadFile.securityInfo = $event.data;
    }
    /**
     * @param {?} $event
     * @param {?} file
     * @return {?}
     */
    typeChange($event, file) {
        file.extensionName = $event.data.name;
        /** @type {?} */
        let exStorageFileInfo = new ExStorageFileInfo;
        if (file.extensionName == this.storageExtension.defaultPropertyName) {
            if (this.exStorageFileList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.metadataId == file.id)).length > 0)
                this.exStorageFileList.splice(this.exStorageFileList.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.metadataId == file.id)), 1);
        }
        else {
            if (this.exStorageFileList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.metadataId == file.id)).length > 0) {
                exStorageFileInfo = this.exStorageFileList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.metadataId == file.id))[0];
                exStorageFileInfo.exPropertyName = file.extensionName;
            }
            else {
                exStorageFileInfo.metadataId = file.id;
                exStorageFileInfo.exPropertyName = file.extensionName;
                this.exStorageFileList.push(exStorageFileInfo);
            }
        }
    }
    /**
     * @return {?}
     */
    upload() {
        if (this.uploadedFileTotal != this.files.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.isUploading || x.uploadResult)).length) {
            this.msgService.warning(this.localepipe.transform('wait'));
            return of$1(false);
        }
        if (this.haveSecurityInfo) {
            this.uploadService.saveSecurityInfo(this.uploadFileInfoList, this.rootId).subscribe();
        }
        if (this.storageExtension == null)
            return of$1(this.uploadFileInfoList);
        else {
            if (this.exStorageFileList.length == 0)
                return of$1(this.uploadFileInfoList);
            else {
                /** @type {?} */
                const loading = this.loadService.show({
                    message: this.localepipe.transform('saveTo') + this.storageExtension.extensionName
                });
                return this.uploadService.changeStorageInstance(this.exStorageFileList, this.rootId).pipe(map((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    // if (res != null)
                    //   this.msgService.error('保存到' + this.storageExtension.extensionName + "失败，上传文件自动保存到" + this.storageExtension.defaultPropertyName + "存储。" + res.error.Message);
                    loading.close();
                    return this.uploadFileInfoList;
                })));
            }
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        if (this.uploadFileInfoList.length == 0)
            return;
        this.uploadFileInfoList.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.metadataIdList.push(element.metadataId);
        }));
        this.uploadService.cancel(this.metadataIdList, this.rootId).subscribe();
    }
    /**
     * @return {?}
     */
    getUploadFileInfoList() {
        return this.uploadFileInfoList;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    delete(file) {
        this.files.splice(this.files.indexOf(file), 1);
        if (file.uploadResult)
            this.uploadedFileTotal--;
        if (this.exStorageFileList.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.metadataId == file.id)).length > 0) {
            this.exStorageFileList.splice(this.exStorageFileList.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.metadataId == file.id)), 1);
        }
    }
    /**
     * @param {?} size
     * @return {?}
     */
    getFileSize(size) {
        if (size < 102400)
            return (size / 1024).toFixed(1) + "K";
        else if (size < 1024 * 1024)
            return (size / 1024).toFixed(0) + "K";
        else if (size < 100 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(1) + "M";
        else if (size < 1024 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(0) + "M";
        else
            return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
    }
    /**
     * @return {?}
     */
    showByGroup() {
        this.showType = 0;
        // this.selectedFileCount = 0;
    }
    /**
     * @return {?}
     */
    showByList() {
        this.showType = 1;
        // this.selectedFileCount = 0;
        if (this.selectedFileCount != 0 && this.selectedFileCount == this.files.length) {
            this.fileAllSelected = true;
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    mouseOver(file) {
        file.mouseOn = true;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    mouseOut(file) {
        file.mouseOn = false;
    }
}
FileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-file-upload',
                template: "<div *ngIf=\"hasSelectedFile\">\n\n    <div class=\"farris-header\" style=\"height: 50px; width: 100%\">\n        <div class=\"btn btn-secondary upload_button\">\n            <img [src]=\"uploadLittleIconAddress\">\n            <span>{{'uploadFile' | locale}} </span>\n            <input type=\"file\" (focus)=\"showLoading()\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\"\n                title=\"\" [accept]=\"fileType\">\n        </div>\n\n\n        <button *ngIf=\"showType==0 && !fileAllSelected && files.length >0 \" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">{{'selectAll' | locale}}</button>\n        <button *ngIf=\"showType==0 && fileAllSelected  && files.length >0 \" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">{{'selectNull' | locale}}</button>\n        <button *ngIf=\"showType==0 && selectedFileCount>0\" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">{{'delete' | locale}}</button>\n\n        <button *ngIf=\"showType==1 && selectedFileCount>0\" style=\"padding-left: 20px\"\n            class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">{{'delete' | locale}}</button>\n\n        <farris-radio-group class=\"button_group_upload\" [(model)]=\"radioButtonGroupValue\" [horizontal]=\"false\">\n            <farris-radio-button [label]=\"'showByGroup'\" (click)=\"showByGroup()\">\n                <span  class=\"f-icon f-icon-sudoku-new\"> </span>\n            </farris-radio-button>\n            <farris-radio-button [label]=\"'showByList'\" (click)=\"showByList()\">\n                <span  class=\"f-icon f-icon-page-title-define\"> </span>\n            </farris-radio-button>\n\n        </farris-radio-group>\n\n        <!-- <kendo-buttongroup [selection]=\"'single'\" class=\"button_group_upload \"\n            style=\"background-color: #ffffff; color: #388FFF;border: 1px solid #ddd;\" look=\"flat\">\n            <button kendoButton [selected]=\"true\" [toggleable]=\"true\"\n                [imageUrl]=\"'/platform/runtime/dfs/images/piclist.png'\" (click)=\"showByGroup()\"></button>\n            <button kendoButton [toggleable]=\"true\" [imageUrl]=\"'/platform/runtime/dfs/images/queuelist.png'\"\n                (click)=\"showByList()\"></button>\n        </kendo-buttongroup> -->\n\n\n    </div>\n\n    <!-- <div class=\"progress\" style=\"height: 12px;\">\n    <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"uploadProcess\"></div>\n  </div> -->\n\n    <div class=\"pic_list\" *ngIf=\"showType==0\">\n        <ul *ngFor=\"let file of files\">\n            <li (mouseenter)=\"mouseOver(file)\" (mouseleave)=\"mouseOut(file)\">\n                <div *ngIf=\"file.isUploading\">\n                    <farris-progress [type]=\"'circle'\" [percent]=\"file.uploadProcess\" [strokeLinecap]=\"'square'\"\n                        [status]=\"'active'\"></farris-progress>\n                </div>\n\n                <table *ngIf=\"!file.uploadResult && !file.isUploading\"\n                    style=\"margin: 0 auto; border: 1px solid #ddd; width: 135px; height: 160px;\">\n                    <tr style=\"margin: 0 auto ; height: 80px;\">\n                        <td style=\"text-align: center\"><span class=\"f-icon f-icon-warn\"></span></td>\n                    </tr>\n                    <tr style=\"margin: 0 auto ; height: 30px;\">\n                        <td style=\"text-align: center\"> {{'uploadFailure' | locale}} </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: center\"><button style=\"margin: 0 auto ; height: 20px; \"\n                                class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">{{'detail' |\n                                locale}}</button></td>\n                    </tr>\n                </table>\n                <div *ngIf=\"!file.isUploading && file.uploadResult\" style=\"border: 1px solid #ddd;\">\n                    <img [src]='file.source'>\n                    <div *ngIf=\"haveExtensionProperty\"\n                        style=\"width: 133px; height: 25px; background-color: white; position: absolute;bottom: 0; \">\n\n                        <div style=\"width: 100px;height: 25px;position:absolute;margin: 0 17px;\">\n                            <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\"\n                                [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\"\n                                [enableClear]=\"false\">\n                                <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                            </farris-combo-list>\n                        </div>\n                    </div>\n                    <div *ngIf=\"haveSecurityInfo\"\n                        style=\"width: 133px; height: 25px; background-color: white; position: absolute;bottom: 0; \">\n\n                        <div style=\"width: 100px;height: 25px;position:absolute;margin: 0 17px;\">\n                            <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"securityInfoList\"\n                                [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"securityChange($event,file)\"\n                                [enableClear]=\"false\">\n                                <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                            </farris-combo-list>\n                        </div>\n                    </div>\n                </div>\n                <table *ngIf=\"!file.isUploading\">\n                    <tr style=\"height: 20px\">\n                        <td style=\"width: 15px; vertical-align: middle; text-align: center\">\n                            <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\">  -->\n                            <div class=\"farris-input-wrap\" style=\"height: 20px\" (click)=\"checkoutSelectFile(file)\">\n                                <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0;height: 20px;\"\n                                    [ngStyle]=\"checkboxPos\">\n                                    <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\"\n                                        [(ngModel)]=\"file.selectd\">\n                                    <label class=\"custom-control-label\"\n                                        style=\"padding: 0 0 10px 0; position: relative; top: -8px;\"></label>\n                                </div>\n                            </div>\n                        </td>\n                        <td style=\"width: 120px; vertical-align: middle; text-align: center\" [title]=\"file.name\">\n                            {{file.picListDisplayName}}</td>\n                    </tr>\n                </table>\n                <!-- <span>{{file.picListDisplayName}}</span> -->\n                <!-- <p class=\"filename\">{{file.picListDisplayName}}</p> -->\n                <button *ngIf=\"!file.isUploading && file.mouseOn\"\n                    style=\"position: absolute; top: 0; right: 0px; width: 24px; height: 24px; border: none;\"\n                    (click)=\"listDeleteFile(file)\">\n                    <span style=\"position: relative;  right: 2px; \" class=\"f-icon f-icon-delete\"> </span>\n                </button>\n                <!-- <button *ngIf=\"file.hasUploaded\" class=\"k-primary\" kendoButton [icon]=\"'check'\" [disabled]=\"true\"></button> -->\n            </li>\n        </ul>\n        <br>\n    </div>\n\n    <div class=\"queue_list\" *ngIf=\"showType==1\">\n        <table>\n            <tr style=\"height: 50px; table-layout:fixed;\">\n                <th style=\"width: 40px; vertical-align: middle; text-align: center\">\n                    <!-- <input type=\"checkbox\" id=\"allCheckBox\" (click)=\"selectAllFile()\"> -->\n                    <div class=\"farris-input-wrap\" (click)=\"selectAllFile()\">\n                        <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                            <input class=\"custom-control-input\" type=\"checkbox\" id=\"allCheckBox\"\n                                [(ngModel)]=\"fileAllSelected\">\n                            <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                        </div>\n                    </div>\n                </th>\n                <th style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">{{'fileName' | locale}}</th>\n                <th style=\"width: 100px; vertical-align: middle\">{{'size' | locale}}</th>\n                <th style=\"width: 170px; vertical-align: middle; text-align: center\">{{'state' | locale}}</th>\n                <th *ngIf=\"haveExtensionProperty\" style=\"width: 100px; vertical-align: middle; text-align: center\">\n                    {{storageExtension.extensionName}}\n                </th>\n                <th style=\"width: 140px; vertical-align: middle; text-align: center\">{{'operation' | locale}}</th>\n            </tr>\n        </table>\n        <div style=\"height: 370px; overflow: auto;\">\n            <table>\n                <tr *ngFor=\"let file of files\" style=\"height: 40px\">\n                    <td colspan=\"5\" *ngIf=\"file.isUploading\">\n                        <!-- <div style=\"width:100%; display: table-cell; vertical-align: middle; text-align: center; \"> -->\n                        <div style=\"width: 500px;margin:0 auto\">\n                            <farris-progress [percent]=\"file.uploadProcess\" [status]=\"'active'\">\n                            </farris-progress>\n                        </div>\n\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\" width: 40px; vertical-align: middle; text-align: center\">\n                        <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\"> -->\n                        <div class=\"farris-input-wrap\" (click)=\"checkoutSelectFile(file)\">\n                            <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                                <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\"\n                                    [(ngModel)]=\"file.selectd\">\n                                <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                            </div>\n                        </div>\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">\n                        {{file.queueListDisplayName}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"width: 100px; vertical-align: middle\">{{file.size}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 170px; vertical-align: middle;\">\n                        <table *ngIf=\"!file.uploadResult\" style=\"margin: 0 auto\">\n                            <tr style=\"margin: 0 auto\">\n                                <td><span class=\"f-icon f-icon-error\"></span></td>\n                                <td> {{'uploadFailure' | locale}} </td>\n                                <td><button style=\"height: 24px\" class=\"btn-link btn ng-star-inserted\"\n                                        (click)=\"showErrorMessage(file)\">{{'detail' | locale}}</button></td>\n                            </tr>\n                        </table>\n                        <!-- <span *ngIf=\"!file.uploadResult\"><span class=\"f-icon f-icon-error\"></span> \u4E0A\u4F20\u5931\u8D25 <button\n              class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">\u8BE6\u60C5</button></span> -->\n                        <span *ngIf=\"file.uploadResult\"><span class=\"f-icon f-icon-success\"></span> {{'uploadSucceed' |\n                            locale}}</span>\n                    </td>\n                    <td *ngIf=\"!file.isUploading&&haveExtensionProperty\"\n                        style=\"text-align: center; width: 100px; vertical-align: middle;\">\n                        <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\"\n                            [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\"\n                            [enableClear]=\"false\">\n                            <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                        </farris-combo-list>\n                    </td>\n                    <td *ngIf=\"!file.isUploading&&haveSecurityInfo\"\n                        style=\"text-align: center; width: 100px; vertical-align: middle;\">\n                        <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"securityInfoList\"\n                            [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"securityChange($event,file)\"\n                            [enableClear]=\"false\">\n                            <!-- <ng-template #itemTemp let-item>\n                            <div class=\"combo-list\">\n                                <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                <span class=\"combo-list-label\">{{item.label}}</span>\n                            </div>\n                        </ng-template> -->\n                        </farris-combo-list>\n                    </td>\n\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 140px; vertical-align: middle;\">\n                        <!-- <button *ngIf=\"file.uploadResult\" class=\"btn-link btn ng-star-inserted\" (click)=\"retryUploadFile(file.name)\">\u91CD\u8BD5</button> -->\n                        <button class=\"btn-link btn ng-star-inserted\" style=\"margin: 0 auto\"\n                            (click)=\"listDeleteFile(file)\">{{'delete' | locale}}</button>\n                    </td>\n\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"!hasSelectedFile\" class='home_page'>\n    <img [src]=\"uploadIconAddress\">\n    <div>\n        <span class=\"btn btn-primary btn-lg\">{{'uploadFile' | locale}} </span>\n        <input type=\"file\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\">\n        <!-- <input type=\"file\" (focus)=\"showLoading()\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\"> -->\n    </div>\n</div>",
                styles: [".home_page{text-align:center}.home_page img{position:absolute;top:180px;margin-left:-35px;width:70px;height:56px}.home_page div{position:absolute;left:50%;top:255px;margin-left:-75px;width:150px;height:32px;overflow:hidden}.home_page div span{width:150px;height:32px;position:absolute;z-index:10;left:0}.home_page div input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)';z-index:11}.upload_button{width:110px;height:32px;overflow:hidden}.upload_button span{position:relative;right:-4px;top:4px;width:56px;height:22px;font-size:14px}.upload_button input{height:32px;width:110px;position:absolute;left:22px;top:12px;opacity:0;filter:'alpha(opacity=0)';overflow:hidden}.upload_button img{position:relative;left:-6px;top:3px;width:14px;height:14px}.button_group_upload{position:absolute;right:18px;top:12px;height:26px;width:90px}.button_group_upload button{height:26px;width:26px}.fileinput-button{position:absolute;right:60px;bottom:40px;overflow:hidden;width:24px;height:24px;border-radius:12px;transform:scale(2.5);-ms-transform:scale(2.5);-moz-transform:scale(2.5);-webkit-transform:scale(2.5);-o-transform:scale(2.5);color:#0686fd}.fileinput-button input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)'}.pic-droplist{height:24px;color:#e0e1e2;background-color:#e0e1e2}.pic-droplist input-group{display:table-cell;width:100px;text-align:center;border:0}.pic-droplist input-group div{border:0}.pic-droplist input-group div div,.pic-droplist input-group div input{background-color:#e0e1e2}.pic_list{padding:0;height:415px;overflow-y:auto;overflow-x:hidden}.pic_list ul{padding:0;list-style:none;width:100%;margin:20px 0 0 20px}.pic_list ul li{height:179px;width:135px;margin:8px 0 8px 12px;float:left;overflow:hidden;align-items:center;position:relative}.pic_list ul li div{width:135px;height:159px;margin:auto;display:table-cell;vertical-align:middle;text-align:center;position:relative}.pic_list ul li div img{max-width:120px;max-height:118px;align-items:center;margin:auto;vertical-align:middle;text-align:center}.pic_list ul li span.filename{width:100px;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.queue_list{display:block;height:420px;overflow-y:auto}.file_list{list-style:none;margin:0;padding:0;overflow-x:hidden;overflow-y:auto}.file_list li{height:50px;line-height:35px;font-size:16px;position:relative}.file_list li button{float:right;top:6px;right:10px;width:20px}.file_list li p.title{padding:0 0 0 6px;margin:0 210px 0 0}.file_list li p.size{position:absolute;width:100px;top:0;right:100px}"]
            }] }
];
/** @nocollapse */
FileUploadComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: UploadService },
    { type: LoadingService },
    { type: Injector }
];
FileUploadComponent.propDecorators = {
    formId: [{ type: Input }],
    rootId: [{ type: Input }],
    fileType: [{ type: Input }],
    fileCount: [{ type: Input }],
    oldIdList: [{ type: Input }],
    securityInfo: [{ type: Input }],
    opCell: [{ type: ViewChild, args: ['opCell',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DownloadService {
    constructor() { }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getDownloadUrl(metadataId, rootId) {
        return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getStreamDownloadUrl(metadataId, rootId) {
        return "/api/runtime/dfs/v1.0/formdoc/stream?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    getMultipleDownloadUrl(metadataIdList, rootId) {
        /** @type {?} */
        let list = JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} zipName
     * @return {?}
     */
    getMultipleDownloadUrlWithName(metadataIdList, rootId, zipName) {
        /** @type {?} */
        let list = JSON.parse(metadataIdList);
        if (zipName == null || zipName == "")
            zipName = 'unifile.zip';
        if (!zipName.endsWith(".zip"))
            zipName += '.zip';
        return "/api/runtime/dfs/v1.0/doc/compress/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId)) + "&zipName=" + encodeURIComponent(zipName);
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} version
     * @return {?}
     */
    getHistoryDownloadUrl(metadataId, rootId, version) {
        //let list:string[]=JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/historycontent?metadataid=" + metadataId + "&rootid=" + rootId + "&version=" + version + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    mergeString(str, str1) {
        /** @type {?} */
        let min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        let res = "";
        /** @type {?} */
        let i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    getToken(str) {
        /** @type {?} */
        let array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        let length = Math.floor(str.length / 3);
        /** @type {?} */
        let str1 = str.substring(0, length);
        /** @type {?} */
        let str2 = str.substring(length, 2 * length);
        /** @type {?} */
        let str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        let randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        let timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    }
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    switchStr(str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    }
}
DownloadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DownloadService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$1 = localStorage.getItem('languageCode') || 'zh-CHS';
class UploadModule {
}
UploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FileUploadComponent, LocalLangPipe],
                imports: [
                    CommonModule,
                    NotifyModule,
                    MessagerModule.forRoot(),
                    LoadingModule.forRoot(),
                    ProgressModule,
                    FormsModule,
                    FarrisFormsModule,
                    ComboListModule,
                    HttpClientModule
                ],
                exports: [FileUploadComponent],
                entryComponents: [FileUploadComponent],
                providers: [UploadService, DownloadService, LanguageService, HttpService, CacheService, SessionService,
                    { provide: LOCALE_ID, useValue: ɵ0$1 },]
            },] }
];
/** @type {?} */
const ɵa = UploadModule;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadDialogComponent {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
        this.metadataIdList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    showDialog() {
        this.dlg = this.modalService.show(FileUploadComponent, {
            title: '选择文件',
            width: 800, height: 500,
            buttons: [
                {
                    text: '上传', cls: 'k-button k-button-icontext k-primary', iconCls: "k-icon k-i-check", handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.fileUpload.upload();
                        this.dlg.close();
                    })
                },
                {
                    text: '关闭', cls: 'k-button k-button-icontext', iconCls: "k-icon k-i-close", handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.fileUpload.cancel();
                        this.dlg.close();
                    })
                }
            ],
            showButtons: true,
        });
        this.dlg.content.formId = this.formId;
    }
}
UploadDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-uploaddialog',
                template: "\n",
                styles: [""]
            }] }
];
/** @nocollapse */
UploadDialogComponent.ctorParameters = () => [
    { type: BsModalService }
];
UploadDialogComponent.propDecorators = {
    formId: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: [FileUploadComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadDialogService {
    /**
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(modalService, componentFactoryResolver, injector) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileInfoList = [];
        if (this.injector) {
            this.modalService = this.injector.get(BsModalService);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localpipe = new LocalLangPipe(this.localeid);
        }
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    showDialog(formId, rootId) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            this.dlg = this.modalService.show(viewerRef, {
                title: this.localpipe.transform('uploadFile'),
                width: 950, height: 570,
                buttons: [
                    {
                        text: this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of$1(true);
                })
            });
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFile(formId, rootId, oldIdList = []) {
        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFileWithLimit(formId, rootId, limit, oldIdList = []) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var uploadFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var uploadRef = uploadFactory.create(this.injector);
            if (limit != null) {
                uploadRef.instance.fileCount = limit.fileCount;
                uploadRef.instance.securityInfo = limit.securityInfo;
                if (limit.fileType != null && limit.fileType != "")
                    uploadRef.instance.fileType = limit.fileType;
            }
            uploadRef.instance.rootId = rootId;
            uploadRef.instance.formId = formId;
            uploadRef.instance.oldIdList = oldIdList;
            this.dlg = this.modalService.show(uploadRef, {
                title: this.localpipe.transform('uploadFile'),
                width: 950, height: 570,
                buttons: [
                    {
                        text: this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of$1(true);
                })
            });
        }));
    }
}
UploadDialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UploadDialogService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadDialogMoudle {
}
UploadDialogMoudle.decorators = [
    { type: NgModule, args: [{
                declarations: [UploadDialogComponent],
                imports: [
                    CommonModule,
                    FarrisDialogModule,
                    MessagerModule.forRoot(),
                    UploadModule,
                    NotifyModule.forRoot(),
                    HttpClientModule
                ],
                exports: [UploadDialogComponent, FileUploadComponent],
                entryComponents: [UploadDialogComponent, FileUploadComponent],
                providers: [BsModalService, HttpService, UploadDialogService, UploadService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadLimit {
    constructor() {
        this.fileType = "*";
        this.fileCount = 0;
        this.securityInfo = null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormUploadListEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormDocInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspDocMetaProperty {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormUploadEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SecurityEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormdocUploadService, FormdocUploadComponent, FormdocUploadModule, UploadDialogMoudle, UploadDialogComponent, UploadDialogService, UploadService, DownloadService, FileUploadComponent, UploadFileInfo, UploadModule, ɵa, UploadLimit, GspFormDocOperateEntity, GspFormRemoveListEntity, GspFormUploadListEntity, GspFormDocInfo, GspDocMetaProperty, GspFormUploadEntity, FileInfo, OperatingModes, FileState, GspDocSecurityBaseInfo, SecurityEntity, ExStorageFileInfo, CopyFileRequest, LocalLangPipe as ɵb };

//# sourceMappingURL=gsp-svc-formdoc-upload.js.map