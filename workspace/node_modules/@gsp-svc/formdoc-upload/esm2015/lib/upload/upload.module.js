/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LOCALE_ID, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FileUploadComponent } from './file-upload/file-upload.component';
import { NotifyModule } from '@farris/ui-notify';
import { MessagerModule } from '@farris/ui-messager';
import { UploadService } from './upload.service';
import { LoadingModule } from '@farris/ui-loading';
import { ProgressModule } from '@farris/ui-progress';
import { FormsModule } from '@angular/forms';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisFormsModule } from '@farris/ui-forms';
import { DownloadService } from './download.service';
import { LocalLangPipe } from '../local.pipe';
import { CacheService, HttpService, LanguageService, SessionService } from '@ecp-caf/caf-common';
import { HttpClientModule } from '@angular/common/http';
const ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS';
export class UploadModule {
}
UploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FileUploadComponent, LocalLangPipe],
                imports: [
                    CommonModule,
                    NotifyModule,
                    MessagerModule.forRoot(),
                    LoadingModule.forRoot(),
                    ProgressModule,
                    FormsModule,
                    FarrisFormsModule,
                    ComboListModule,
                    HttpClientModule
                ],
                exports: [FileUploadComponent],
                entryComponents: [FileUploadComponent],
                providers: [UploadService, DownloadService, LanguageService, HttpService, CacheService, SessionService,
                    { provide: LOCALE_ID, useValue: ɵ0 },]
            },] }
];
/** @type {?} */
export const ɵa = UploadModule;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2Zvcm1kb2MtdXBsb2FkLyIsInNvdXJjZXMiOlsibGliL3VwbG9hZC91cGxvYWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztXQW9CcEIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxRQUFRO0FBR3BGLE1BQU0sT0FBTyxZQUFZOzs7WUFuQnhCLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxhQUFhLENBQUM7Z0JBQ2xELE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFlBQVk7b0JBQ1osY0FBYyxDQUFDLE9BQU8sRUFBRTtvQkFDeEIsYUFBYSxDQUFDLE9BQU8sRUFBRTtvQkFDdkIsY0FBYztvQkFDZCxXQUFXO29CQUNYLGlCQUFpQjtvQkFDakIsZUFBZTtvQkFDZixnQkFBZ0I7aUJBQ2pCO2dCQUNELE9BQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDO2dCQUM5QixlQUFlLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztnQkFDdEMsU0FBUyxFQUFFLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxjQUFjO29CQUNwRyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxJQUFrRCxFQUFFLEVBQUU7YUFFdkY7OztBQUdELE1BQU0sT0FBTyxFQUFFLEdBQUcsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExPQ0FMRV9JRCwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vZmlsZS11cGxvYWQvZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBNZXNzYWdlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBVcGxvYWRTZXJ2aWNlIH0gZnJvbSAnLi91cGxvYWQuc2VydmljZSc7XHJcbmltcG9ydCB7IExvYWRpbmdNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWxvYWRpbmcnO1xyXG5pbXBvcnQgeyBQcm9ncmVzc01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktcHJvZ3Jlc3MnXHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDb21ib0xpc3RNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxpc3QnO1xyXG5pbXBvcnQgeyBGYXJyaXNGb3Jtc01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZm9ybXMnXHJcbmltcG9ydCB7IERvd25sb2FkU2VydmljZSB9IGZyb20gJy4vZG93bmxvYWQuc2VydmljZSc7XHJcbmltcG9ydCB7IExvY2FsTGFuZ1BpcGUgfSBmcm9tICcuLi9sb2NhbC5waXBlJztcclxuaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlLCBIdHRwU2VydmljZSwgTGFuZ3VhZ2VTZXJ2aWNlLCBTZXNzaW9uU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0ZpbGVVcGxvYWRDb21wb25lbnQsIExvY2FsTGFuZ1BpcGVdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIE5vdGlmeU1vZHVsZSxcclxuICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIExvYWRpbmdNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgUHJvZ3Jlc3NNb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZSxcclxuICAgIEZhcnJpc0Zvcm1zTW9kdWxlLFxyXG4gICAgQ29tYm9MaXN0TW9kdWxlLFxyXG4gICAgSHR0cENsaWVudE1vZHVsZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW0ZpbGVVcGxvYWRDb21wb25lbnRdLFxyXG4gIGVudHJ5Q29tcG9uZW50czogW0ZpbGVVcGxvYWRDb21wb25lbnRdLFxyXG4gIHByb3ZpZGVyczogW1VwbG9hZFNlcnZpY2UsIERvd25sb2FkU2VydmljZSwgTGFuZ3VhZ2VTZXJ2aWNlLCBIdHRwU2VydmljZSwgQ2FjaGVTZXJ2aWNlLCBTZXNzaW9uU2VydmljZSxcclxuICAgIHsgcHJvdmlkZTogTE9DQUxFX0lELCB1c2VWYWx1ZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpIHx8ICd6aC1DSFMnIH0sXVxyXG5cclxufSlcclxuZXhwb3J0IGNsYXNzIFVwbG9hZE1vZHVsZSB7IH1cclxuXHJcbmV4cG9ydCBjb25zdCDJtWEgPSBVcGxvYWRNb2R1bGU7XHJcbiJdfQ==