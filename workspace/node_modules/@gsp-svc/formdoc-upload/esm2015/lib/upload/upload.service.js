/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { catchError, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { GspFormRemoveListEntity } from './entity/gspformremovelistentity';
import { of } from 'rxjs/observable/of';
import { GspFormDocOperateEntity } from './entity/gspformdocoperateentity';
import { ChangeInstanceRequest } from './entity/changeinstancerequest';
import { OperatingModes } from './entity/operatingmodes';
import { CopyFileRequest } from './entity/copyfilerequest';
export class UploadService {
    /**
     * @param {?} http
     * @param {?} httpclient
     */
    constructor(http, httpclient) {
        this.http = http;
        this.httpclient = httpclient;
    }
    /**
     * @param {?} docListInfo
     * @param {?} rootId
     * @return {?}
     */
    uploadList(docListInfo, rootId) {
        /** @type {?} */
        let url;
        docListInfo.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docListInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    commit(metadataIdList, rootId) {
        /** @type {?} */
        let url;
        /** @type {?} */
        let entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/commit";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/commit";
        return this.http.post(url, entity).pipe();
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    cancel(metadataIdList, rootId) {
        /** @type {?} */
        let url;
        /** @type {?} */
        let entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/cancel";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/cancel";
        //localStorage.setItem("SessionId","huoliang");
        return this.http.put(url, entity).pipe();
    }
    /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    removeList(idList, rootId) {
        /** @type {?} */
        let url;
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/list";
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        /** @type {?} */
        var idListInfo = new GspFormRemoveListEntity;
        idListInfo.metadataIdList = idList;
        idListInfo.mode = OperatingModes.Temp;
        idListInfo.rootId = rootId;
        return this.http.delete(url, idListInfo).pipe();
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getFile(metadataId, rootId) {
        /** @type {?} */
        let url;
        if (rootId == "")
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId;
        else
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId + "/" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} docInfo
     * @return {?}
     */
    uploadFile(docInfo) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} formdata
     * @return {?}
     */
    uploadSliceFile(formdata) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/slice";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.httpclient.post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @return {?}
     */
    getStorageExtensionInfo() {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/storagestrategy/extension";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} baseInfo
     * @return {?}
     */
    getSecurityInfoList(baseInfo) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/storagestrategy/security";
        url = url + "?id=" + baseInfo.securityId + "&level=" + baseInfo.securityLevel;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} storageInfoList
     * @param {?} rootId
     * @return {?}
     */
    changeStorageInstance(storageInfoList, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/changeinstance";
        /** @type {?} */
        let request = new ChangeInstanceRequest;
        request.fileInfoList = storageInfoList;
        request.rootId = rootId;
        return this.http.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} path
     * @return {?}
     */
    copyFile(metadataId, rootId, path) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/copy";
        /** @type {?} */
        let request = new CopyFileRequest;
        request.metadataId = metadataId;
        request.rootId = rootId;
        request.path = path;
        return this.httpclient.post(url, request, { responseType: 'text' }).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })));
    }
    /**
     * @param {?} uploadFileInfoList
     * @param {?} rootId
     * @return {?}
     */
    saveSecurityInfo(uploadFileInfoList, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/doc/exproperty";
        /** @type {?} */
        let reqList = [];
        uploadFileInfoList.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let request = { id: element.metadataId, rootId: rootId, exProperty: JSON.stringify(element.securityInfo) };
            reqList.push(request);
        }));
        return this.http.post(url, reqList).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    getUploadedFileInfoList(formId, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/uploadedfile/infolist" + "?formid=" + formId + "&rootid=" + rootId;
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} rootId
     * @return {?}
     */
    getUploadInfo(rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/rootsetting/info?id=" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
}
UploadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UploadService.ctorParameters = () => [
    { type: HttpService },
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.httpclient;
}
//# sourceMappingURL=data:application/json;base64,