/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class DownloadService {
    constructor() { }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getDownloadUrl(metadataId, rootId) {
        return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getStreamDownloadUrl(metadataId, rootId) {
        return "/api/runtime/dfs/v1.0/formdoc/stream?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    getMultipleDownloadUrl(metadataIdList, rootId) {
        /** @type {?} */
        let list = JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} zipName
     * @return {?}
     */
    getMultipleDownloadUrlWithName(metadataIdList, rootId, zipName) {
        /** @type {?} */
        let list = JSON.parse(metadataIdList);
        if (zipName == null || zipName == "")
            zipName = 'unifile.zip';
        if (!zipName.endsWith(".zip"))
            zipName += '.zip';
        return "/api/runtime/dfs/v1.0/doc/compress/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId)) + "&zipName=" + encodeURIComponent(zipName);
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} version
     * @return {?}
     */
    getHistoryDownloadUrl(metadataId, rootId, version) {
        //let list:string[]=JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/historycontent?metadataid=" + metadataId + "&rootid=" + rootId + "&version=" + version + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    mergeString(str, str1) {
        /** @type {?} */
        let min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        let res = "";
        /** @type {?} */
        let i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    getToken(str) {
        /** @type {?} */
        let array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        let length = Math.floor(str.length / 3);
        /** @type {?} */
        let str1 = str.substring(0, length);
        /** @type {?} */
        let str2 = str.substring(length, 2 * length);
        /** @type {?} */
        let str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        let randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        let timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    }
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    switchStr(str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    }
}
DownloadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DownloadService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2Zvcm1kb2MtdXBsb2FkLyIsInNvdXJjZXMiOlsibGliL3VwbG9hZC9kb3dubG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTNDLE1BQU0sT0FBTyxlQUFlO0lBRTFCLGdCQUFnQixDQUFDOzs7Ozs7SUFFakIsY0FBYyxDQUFDLFVBQWtCLEVBQUUsTUFBYztRQUMvQyxPQUFPLG1EQUFtRCxHQUFHLFVBQVUsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbEssQ0FBQzs7Ozs7O0lBR0Qsb0JBQW9CLENBQUMsVUFBa0IsRUFBRSxNQUFjO1FBQ3JELE9BQU8sa0RBQWtELEdBQUcsVUFBVSxHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqSyxDQUFDOzs7Ozs7SUFFRCxzQkFBc0IsQ0FBQyxjQUFzQixFQUFFLE1BQWM7O1lBQ3ZELElBQUksR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQztRQUMvQyxPQUFPLDZEQUE2RCxHQUFHLGNBQWMsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0ssQ0FBQzs7Ozs7OztJQUVELDhCQUE4QixDQUFDLGNBQXNCLEVBQUUsTUFBYyxFQUFFLE9BQWU7O1lBQ2hG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LENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUN2QixTQUFTLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFFcEUsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxPQUFPLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0UyxDQUFDOzs7Ozs7Ozs7SUFFTyxTQUFTLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsQ0FBUztRQUNuRSxRQUFRLENBQUMsRUFBRTtZQUNULEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUM7WUFDcEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztZQUNwQixLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7O1lBN0VGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRG93bmxvYWRTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgZ2V0RG93bmxvYWRVcmwobWV0YWRhdGFJZDogc3RyaW5nLCByb290SWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIFwiL2FwaS9ydW50aW1lL2Rmcy92MS4wL2RvYy9maWxlY29udGVudD9tZXRhZGF0YWlkPVwiICsgbWV0YWRhdGFJZCArIFwiJnJvb3RpZD1cIiArIHJvb3RJZCArIFwiJnRva2VuPVwiICsgdGhpcy5nZXRUb2tlbih0aGlzLm1lcmdlU3RyaW5nKG1ldGFkYXRhSWQsIHJvb3RJZCkpO1xyXG4gIH1cclxuXHJcblxyXG4gIGdldFN0cmVhbURvd25sb2FkVXJsKG1ldGFkYXRhSWQ6IHN0cmluZywgcm9vdElkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBcIi9hcGkvcnVudGltZS9kZnMvdjEuMC9mb3JtZG9jL3N0cmVhbT9tZXRhZGF0YWlkPVwiICsgbWV0YWRhdGFJZCArIFwiJnJvb3RpZD1cIiArIHJvb3RJZCArIFwiJnRva2VuPVwiICsgdGhpcy5nZXRUb2tlbih0aGlzLm1lcmdlU3RyaW5nKG1ldGFkYXRhSWQsIHJvb3RJZCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TXVsdGlwbGVEb3dubG9hZFVybChtZXRhZGF0YUlkTGlzdDogc3RyaW5nLCByb290SWQ6IHN0cmluZykge1xyXG4gICAgbGV0IGxpc3Q6IHN0cmluZ1tdID0gSlNPTi5wYXJzZShtZXRhZGF0YUlkTGlzdCk7XHJcbiAgICByZXR1cm4gXCIvYXBpL3J1bnRpbWUvZGZzL3YxLjAvZG9jL211bHRpcGxlL2Rvd25sb2FkP21ldGFkYXRhaWRsaXN0PVwiICsgbWV0YWRhdGFJZExpc3QgKyBcIiZyb290aWQ9XCIgKyByb290SWQgKyBcIiZ0b2tlbj1cIiArIHRoaXMuZ2V0VG9rZW4odGhpcy5tZXJnZVN0cmluZyhsaXN0WzBdLCByb290SWQpKTtcclxuICB9XHJcblxyXG4gIGdldE11bHRpcGxlRG93bmxvYWRVcmxXaXRoTmFtZShtZXRhZGF0YUlkTGlzdDogc3RyaW5nLCByb290SWQ6IHN0cmluZywgemlwTmFtZTogc3RyaW5nKSB7XHJcbiAgICBsZXQgbGlzdDogc3RyaW5nW10gPSBKU09OLnBhcnNlKG1ldGFkYXRhSWRMaXN0KTtcclxuICAgIGlmICh6aXBOYW1lID09IG51bGwgfHwgemlwTmFtZSA9PSBcIlwiKVxyXG4gICAgICB6aXBOYW1lID0gJ3VuaWZpbGUuemlwJztcclxuICAgIGlmICghemlwTmFtZS5lbmRzV2l0aChcIi56aXBcIikpXHJcbiAgICAgIHppcE5hbWUgKz0gJy56aXAnO1xyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIFwiL2FwaS9ydW50aW1lL2Rmcy92MS4wL2RvYy9jb21wcmVzcy9kb3dubG9hZD9tZXRhZGF0YWlkbGlzdD1cIiArIG1ldGFkYXRhSWRMaXN0ICsgXCImcm9vdGlkPVwiICsgcm9vdElkICsgXCImdG9rZW49XCIgKyB0aGlzLmdldFRva2VuKHRoaXMubWVyZ2VTdHJpbmcobGlzdFswXSwgcm9vdElkKSkgKyBcIiZ6aXBOYW1lPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHppcE5hbWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SGlzdG9yeURvd25sb2FkVXJsKG1ldGFkYXRhSWQ6IHN0cmluZywgcm9vdElkOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZykge1xyXG4gICAgLy9sZXQgbGlzdDpzdHJpbmdbXT1KU09OLnBhcnNlKG1ldGFkYXRhSWRMaXN0KTtcclxuICAgIHJldHVybiBcIi9hcGkvcnVudGltZS9kZnMvdjEuMC9kb2MvaGlzdG9yeWNvbnRlbnQ/bWV0YWRhdGFpZD1cIiArIG1ldGFkYXRhSWQgKyBcIiZyb290aWQ9XCIgKyByb290SWQgKyBcIiZ2ZXJzaW9uPVwiICsgdmVyc2lvbiArIFwiJnRva2VuPVwiICsgdGhpcy5nZXRUb2tlbih0aGlzLm1lcmdlU3RyaW5nKG1ldGFkYXRhSWQsIHJvb3RJZCkpO1xyXG4gIH1cclxuXHJcblxyXG5cclxuICBwcml2YXRlIG1lcmdlU3RyaW5nKHN0cjogc3RyaW5nLCBzdHIxOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgbGV0IG1pbiA9IHN0ci5sZW5ndGggPCBzdHIxLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBzdHIxLmxlbmd0aDtcclxuICAgIGxldCByZXM6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbWluOyBpKyspIHtcclxuICAgICAgcmVzICs9IHN0ci5zdWJzdHJpbmcoaSwgaSArIDEpO1xyXG4gICAgICByZXMgKz0gc3RyMS5zdWJzdHJpbmcoaSwgaSArIDEpO1xyXG4gICAgfVxyXG4gICAgcmVzICs9IHN0ci5sZW5ndGggPCBzdHIxLmxlbmd0aCA/IHN0cjEuc3Vic3RyaW5nKGkpIDogc3RyLnN1YnN0cmluZyhpKTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFRva2VuKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGxldCBhcnJheSA9IFsxLCAyLCAzXTtcclxuICAgIGlmIChzdHIubGVuZ3RoID4gMjQpXHJcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgMjQpO1xyXG4gICAgbGV0IGxlbmd0aCA9IE1hdGguZmxvb3Ioc3RyLmxlbmd0aCAvIDMpO1xyXG4gICAgbGV0IHN0cjEgPSBzdHIuc3Vic3RyaW5nKDAsIGxlbmd0aCk7XHJcbiAgICBsZXQgc3RyMiA9IHN0ci5zdWJzdHJpbmcobGVuZ3RoLCAyICogbGVuZ3RoKTtcclxuICAgIGxldCBzdHIzID0gc3RyLnN1YnN0cmluZygyICogbGVuZ3RoLCAzICogbGVuZ3RoKTtcclxuICAgIGxldCByYW5kb21BcnJheSA9IFtdO1xyXG4gICAgdmFyIHJhbmRvbSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMyk7XHJcbiAgICByYW5kb21BcnJheS5wdXNoKGFycmF5W3JhbmRvbSAtIDFdKTtcclxuICAgIGFycmF5LnNwbGljZShyYW5kb20gLSAxLCAxKTtcclxuICAgIHJhbmRvbSA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMik7XHJcbiAgICByYW5kb21BcnJheS5wdXNoKGFycmF5W3JhbmRvbSAtIDFdKTtcclxuICAgIGFycmF5LnNwbGljZShyYW5kb20gLSAxLCAxKTtcclxuICAgIHJhbmRvbUFycmF5LnB1c2goYXJyYXlbMF0pO1xyXG4gICAgbGV0IHRpbWVTdGFtcDogc3RyaW5nID0gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApICsgXCJcIjtcclxuXHJcbiAgICByZXR1cm4gdGltZVN0YW1wLnN1YnN0cmluZygwLCA1KSArIFwidGltZXNcIiArIHJhbmRvbUFycmF5WzBdICsgXCJcIiArIHJhbmRvbUFycmF5WzFdICsgXCJcIiArIHJhbmRvbUFycmF5WzJdICsgdGhpcy5zd2l0Y2hTdHIoc3RyMSwgc3RyMiwgc3RyMywgcmFuZG9tQXJyYXlbMF0pICsgdGhpcy5zd2l0Y2hTdHIoc3RyMSwgc3RyMiwgc3RyMywgcmFuZG9tQXJyYXlbMV0pICsgdGhpcy5zd2l0Y2hTdHIoc3RyMSwgc3RyMiwgc3RyMywgcmFuZG9tQXJyYXlbMl0pICsgXCJ0aW1lc1wiICsgdGltZVN0YW1wLnN1YnN0cmluZyg1KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3dpdGNoU3RyKHN0cjE6IHN0cmluZywgc3RyMjogc3RyaW5nLCBzdHIzOiBzdHJpbmcsIGk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2ggKGkpIHtcclxuICAgICAgY2FzZSAxOiByZXR1cm4gc3RyMTtcclxuICAgICAgY2FzZSAyOiByZXR1cm4gc3RyMjtcclxuICAgICAgY2FzZSAzOiByZXR1cm4gc3RyMztcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=