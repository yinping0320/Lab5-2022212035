/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, LOCALE_ID } from '@angular/core';
import { FileUploadComponent } from './upload/file-upload/file-upload.component';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
import { LocalLangPipe } from './local.pipe';
export class UploadDialogService {
    /**
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(modalService, componentFactoryResolver, injector) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileInfoList = [];
        if (this.injector) {
            this.modalService = this.injector.get(BsModalService);
            this.localeid = localStorage.getItem("languageCode") || this.injector.get(LOCALE_ID);
            this.localpipe = new LocalLangPipe(this.localeid);
        }
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    showDialog(formId, rootId) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            this.dlg = this.modalService.show(viewerRef, {
                title: this.localpipe.transform('uploadFile'),
                width: 950, height: 570,
                buttons: [
                    {
                        text: this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFile(formId, rootId, oldIdList = []) {
        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFileWithLimit(formId, rootId, limit, oldIdList = []) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var uploadFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var uploadRef = uploadFactory.create(this.injector);
            if (limit != null) {
                uploadRef.instance.fileCount = limit.fileCount;
                uploadRef.instance.securityInfo = limit.securityInfo;
                if (limit.fileType != null && limit.fileType != "")
                    uploadRef.instance.fileType = limit.fileType;
            }
            uploadRef.instance.rootId = rootId;
            uploadRef.instance.formId = formId;
            uploadRef.instance.oldIdList = oldIdList;
            this.dlg = this.modalService.show(uploadRef, {
                title: this.localpipe.transform('uploadFile'),
                width: 950, height: 570,
                buttons: [
                    {
                        text: this.localpipe.transform('save'), cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: this.localpipe.transform('close'), cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    }
}
UploadDialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UploadDialogService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    UploadDialogService.prototype.localeid;
    /** @type {?} */
    UploadDialogService.prototype.localpipe;
    /** @type {?} */
    UploadDialogService.prototype.dlg;
    /** @type {?} */
    UploadDialogService.prototype.fileInfoList;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,