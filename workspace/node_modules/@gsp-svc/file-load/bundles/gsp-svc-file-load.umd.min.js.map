{"version":3,"sources":["ng://@gsp-svc/file-load/lib/download.service.ts"],"names":["DownloadService","prototype","getDownloadUrl","metadataId","rootId","this","getToken","mergeString","getMultipleDownloadUrl","metadataIdList","list","JSON","parse","getHistoryDownloadUrl","version","str","str1","min","length","res","i","substring","array","Math","floor","str2","str3","randomArray","random","ceil","push","splice","timeStamp","round","Date","getTime","switchStr","Injectable"],"mappings":"oTAAA,IAAAA,EAAA,WAME,SAAAA,KA4DF,OA1DEA,EAAAC,UAAAC,eAAA,SAAeC,EAAoBC,GACjC,MAAO,oDAAsDD,EAAa,WAAaC,EAAS,UAAYC,KAAKC,SAASD,KAAKE,YAAYJ,EAAYC,KAGzJJ,EAAAC,UAAAO,uBAAA,SAAuBC,EAAwBL,OACzCM,EAAiBC,KAAKC,MAAMH,GAChC,MAAO,8DAAgEA,EAAiB,WAAaL,EAAS,UAAYC,KAAKC,SAASD,KAAKE,YAAYG,EAAK,GAAIN,KAGpKJ,EAAAC,UAAAY,sBAAA,SAAsBV,EAAoBC,EAAgBU,GAExD,MAAO,uDAAyDX,EAAa,WAAaC,EAAS,YAAcU,EAAU,UAAYT,KAAKC,SAASD,KAAKE,YAAYJ,EAAYC,KAK5KJ,EAAAC,UAAAM,YAAR,SAAoBQ,EAAaC,OAC3BC,EAAMF,EAAIG,OAASF,EAAKE,OAASH,EAAIG,OAASF,EAAKE,OACnDC,EAAc,GACdC,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAIH,EAAKG,IACnBD,GAAOJ,EAAIM,UAAUD,EAAGA,EAAI,GAC5BD,GAAOH,EAAKK,UAAUD,EAAGA,EAAI,GAG/B,OADAD,GAAOJ,EAAIG,OAASF,EAAKE,OAASF,EAAKK,UAAUD,GAAKL,EAAIM,UAAUD,IAI9DpB,EAAAC,UAAAK,SAAR,SAAiBS,OACXO,EAAQ,CAAC,EAAG,EAAG,GACF,GAAbP,EAAIG,SACNH,EAAMA,EAAIM,UAAU,EAAG,SACrBH,EAASK,KAAKC,MAAMT,EAAIG,OAAS,GACjCF,EAAOD,EAAIM,UAAU,EAAGH,GACxBO,EAAOV,EAAIM,UAAUH,EAAQ,EAAIA,GACjCQ,EAAOX,EAAIM,UAAU,EAAIH,EAAQ,EAAIA,GACrCS,EAAc,GACdC,EAASL,KAAKM,KAAqB,EAAhBN,KAAKK,UAC5BD,EAAYG,KAAKR,EAAMM,EAAS,IAChCN,EAAMS,OAAOH,EAAS,EAAG,GACzBA,EAASL,KAAKM,KAAqB,EAAhBN,KAAKK,UACxBD,EAAYG,KAAKR,EAAMM,EAAS,IAChCN,EAAMS,OAAOH,EAAS,EAAG,GACzBD,EAAYG,KAAKR,EAAM,QACnBU,EAAoBT,KAAKU,OAAM,IAAIC,MAAOC,UAAY,KAAQ,GAElE,OAAOH,EAAUX,UAAU,EAAG,GAAK,QAAUM,EAAY,GAAUA,EAAY,GAAUA,EAAY,GAAKtB,KAAK+B,UAAUpB,EAAMS,EAAMC,EAAMC,EAAY,IAAMtB,KAAK+B,UAAUpB,EAAMS,EAAMC,EAAMC,EAAY,IAAMtB,KAAK+B,UAAUpB,EAAMS,EAAMC,EAAMC,EAAY,IAAM,QAAUK,EAAUX,UAAU,IAG3RrB,EAAAC,UAAAmC,UAAR,SAAkBpB,EAAcS,EAAcC,EAAcN,GAC1D,OAAQA,GACN,KAAK,EAAG,OAAOJ,EACf,KAAK,EAAG,OAAOS,EACf,KAAK,EAAG,OAAOC,wBA1DpBW,EAAAA,mDA+DDrC,EAlEA","sourcesContent":["import { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class DownloadService {\n\n  constructor() { }\n\n  getDownloadUrl(metadataId: string, rootId: string) {\n    return \"/api/runtime/dfs/v1.0/doc/filecontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\n  }\n\n  getMultipleDownloadUrl(metadataIdList: string, rootId: string) {\n    let list: string[] = JSON.parse(metadataIdList);\n    return \"/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=\" + metadataIdList + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(list[0], rootId));\n  }\n\n  getHistoryDownloadUrl(metadataId: string, rootId: string, version: string) {\n    //let list:string[]=JSON.parse(metadataIdList);\n    return \"/api/runtime/dfs/v1.0/doc/historycontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&version=\" + version + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\n  }\n\n\n\n  private mergeString(str: string, str1: string): string {\n    let min = str.length < str1.length ? str.length : str1.length;\n    let res: string = \"\";\n    let i = 0;\n    for (i = 0; i < min; i++) {\n      res += str.substring(i, i + 1);\n      res += str1.substring(i, i + 1);\n    }\n    res += str.length < str1.length ? str1.substring(i) : str.substring(i);\n    return res;\n  }\n\n  private getToken(str: string): string {\n    let array = [1, 2, 3];\n    if (str.length > 24)\n      str = str.substring(0, 24);\n    let length = Math.floor(str.length / 3);\n    let str1 = str.substring(0, length);\n    let str2 = str.substring(length, 2 * length);\n    let str3 = str.substring(2 * length, 3 * length);\n    let randomArray = [];\n    var random = Math.ceil(Math.random() * 3);\n    randomArray.push(array[random - 1]);\n    array.splice(random - 1, 1);\n    random = Math.ceil(Math.random() * 2);\n    randomArray.push(array[random - 1]);\n    array.splice(random - 1, 1);\n    randomArray.push(array[0]);\n    let timeStamp: string = Math.round(new Date().getTime() / 1000) + \"\";\n\n    return timeStamp.substring(0, 5) + \"times\" + randomArray[0] + \"\" + randomArray[1] + \"\" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + \"times\" + timeStamp.substring(5);\n  }\n\n  private switchStr(str1: string, str2: string, str3: string, i: number): string {\n    switch (i) {\n      case 1: return str1;\n      case 2: return str2;\n      case 3: return str3;\n    }\n  }\n\n\n}\n"]}