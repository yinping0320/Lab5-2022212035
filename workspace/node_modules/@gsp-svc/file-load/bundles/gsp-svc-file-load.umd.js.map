{"version":3,"file":"gsp-svc-file-load.umd.js.map","sources":["ng://@gsp-svc/file-load/lib/download.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class DownloadService {\n\n  constructor() { }\n\n  getDownloadUrl(metadataId: string, rootId: string) {\n    return \"/api/runtime/dfs/v1.0/doc/filecontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\n  }\n\n  getMultipleDownloadUrl(metadataIdList: string, rootId: string) {\n    let list: string[] = JSON.parse(metadataIdList);\n    return \"/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=\" + metadataIdList + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(list[0], rootId));\n  }\n\n  getHistoryDownloadUrl(metadataId: string, rootId: string, version: string) {\n    //let list:string[]=JSON.parse(metadataIdList);\n    return \"/api/runtime/dfs/v1.0/doc/historycontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&version=\" + version + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\n  }\n\n\n\n  private mergeString(str: string, str1: string): string {\n    let min = str.length < str1.length ? str.length : str1.length;\n    let res: string = \"\";\n    let i = 0;\n    for (i = 0; i < min; i++) {\n      res += str.substring(i, i + 1);\n      res += str1.substring(i, i + 1);\n    }\n    res += str.length < str1.length ? str1.substring(i) : str.substring(i);\n    return res;\n  }\n\n  private getToken(str: string): string {\n    let array = [1, 2, 3];\n    if (str.length > 24)\n      str = str.substring(0, 24);\n    let length = Math.floor(str.length / 3);\n    let str1 = str.substring(0, length);\n    let str2 = str.substring(length, 2 * length);\n    let str3 = str.substring(2 * length, 3 * length);\n    let randomArray = [];\n    var random = Math.ceil(Math.random() * 3);\n    randomArray.push(array[random - 1]);\n    array.splice(random - 1, 1);\n    random = Math.ceil(Math.random() * 2);\n    randomArray.push(array[random - 1]);\n    array.splice(random - 1, 1);\n    randomArray.push(array[0]);\n    let timeStamp: string = Math.round(new Date().getTime() / 1000) + \"\";\n\n    return timeStamp.substring(0, 5) + \"times\" + randomArray[0] + \"\" + randomArray[1] + \"\" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + \"times\" + timeStamp.substring(5);\n  }\n\n  private switchStr(str1: string, str2: string, str3: string, i: number): string {\n    switch (i) {\n      case 1: return str1;\n      case 2: return str2;\n      case 3: return str3;\n    }\n  }\n\n\n}\n"],"names":["Injectable"],"mappings":"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"}
