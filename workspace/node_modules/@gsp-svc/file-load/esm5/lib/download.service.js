/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var DownloadService = /** @class */ (function () {
    function DownloadService() {
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    DownloadService.prototype.getDownloadUrl = /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    function (metadataId, rootId) {
        return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    DownloadService.prototype.getMultipleDownloadUrl = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    function (metadataIdList, rootId) {
        /** @type {?} */
        var list = JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId));
    };
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} version
     * @return {?}
     */
    DownloadService.prototype.getHistoryDownloadUrl = /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} version
     * @return {?}
     */
    function (metadataId, rootId, version) {
        //let list:string[]=JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/historycontent?metadataid=" + metadataId + "&rootid=" + rootId + "&version=" + version + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    };
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    DownloadService.prototype.mergeString = /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    function (str, str1) {
        /** @type {?} */
        var min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        var res = "";
        /** @type {?} */
        var i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    DownloadService.prototype.getToken = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        var length = Math.floor(str.length / 3);
        /** @type {?} */
        var str1 = str.substring(0, length);
        /** @type {?} */
        var str2 = str.substring(length, 2 * length);
        /** @type {?} */
        var str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        var randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        var timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    };
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    DownloadService.prototype.switchStr = /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    function (str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    };
    DownloadService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DownloadService.ctorParameters = function () { return []; };
    return DownloadService;
}());
export { DownloadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2ZpbGUtbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9kb3dubG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDO0lBR0U7SUFBZ0IsQ0FBQzs7Ozs7O0lBRWpCLHdDQUFjOzs7OztJQUFkLFVBQWUsVUFBa0IsRUFBRSxNQUFjO1FBQy9DLE9BQU8sbURBQW1ELEdBQUcsVUFBVSxHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsSyxDQUFDOzs7Ozs7SUFFRCxnREFBc0I7Ozs7O0lBQXRCLFVBQXVCLGNBQXNCLEVBQUUsTUFBYzs7WUFDdkQsSUFBSSxHQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO1FBQy9DLE9BQU8sNkRBQTZELEdBQUcsY0FBYyxHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM3SyxDQUFDOzs7Ozs7O0lBRUQsK0NBQXFCOzs7Ozs7SUFBckIsVUFBc0IsVUFBa0IsRUFBRSxNQUFjLEVBQUUsT0FBZTtRQUN2RSwrQ0FBK0M7UUFDL0MsT0FBTyxzREFBc0QsR0FBRyxVQUFVLEdBQUcsVUFBVSxHQUFHLE1BQU0sR0FBRyxXQUFXLEdBQUcsT0FBTyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0wsQ0FBQzs7Ozs7OztJ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QUFFLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RTLENBQUM7Ozs7Ozs7OztJQUVPLG1DQUFTOzs7Ozs7OztJQUFqQixVQUFrQixJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxDQUFTO1FBQ25FLFFBQVEsQ0FBQyxFQUFFO1lBQ1QsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztZQUNwQixLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO1lBQ3BCLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUM7U0FDckI7SUFDSCxDQUFDOztnQkE1REYsVUFBVTs7OztJQStEWCxzQkFBQztDQUFBLEFBL0RELElBK0RDO1NBOURZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvd25sb2FkU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBnZXREb3dubG9hZFVybChtZXRhZGF0YUlkOiBzdHJpbmcsIHJvb3RJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFwiL2FwaS9ydW50aW1lL2Rmcy92MS4wL2RvYy9maWxlY29udGVudD9tZXRhZGF0YWlkPVwiICsgbWV0YWRhdGFJZCArIFwiJnJvb3RpZD1cIiArIHJvb3RJZCArIFwiJnRva2VuPVwiICsgdGhpcy5nZXRUb2tlbih0aGlzLm1lcmdlU3RyaW5nKG1ldGFkYXRhSWQsIHJvb3RJZCkpO1xuICB9XG5cbiAgZ2V0TXVsdGlwbGVEb3dubG9hZFVybChtZXRhZGF0YUlkTGlzdDogc3RyaW5nLCByb290SWQ6IHN0cmluZykge1xuICAgIGxldCBsaXN0OiBzdHJpbmdbXSA9IEpTT04ucGFyc2UobWV0YWRhdGFJZExpc3QpO1xuICAgIHJldHVybiBcIi9hcGkvcnVudGltZS9kZnMvdjEuMC9kb2MvbXVsdGlwbGUvZG93bmxvYWQ/bWV0YWRhdGFpZGxpc3Q9XCIgKyBtZXRhZGF0YUlkTGlzdCArIFwiJnJvb3RpZD1cIiArIHJvb3RJZCArIFwiJnRva2VuPVwiICsgdGhpcy5nZXRUb2tlbih0aGlzLm1lcmdlU3RyaW5nKGxpc3RbMF0sIHJvb3RJZCkpO1xuICB9XG5cbiAgZ2V0SGlzdG9yeURvd25sb2FkVXJsKG1ldGFkYXRhSWQ6IHN0cmluZywgcm9vdElkOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZykge1xuICAgIC8vbGV0IGxpc3Q6c3RyaW5nW109SlNPTi5wYXJzZShtZXRhZGF0YUlkTGlzdCk7XG4gICAgcmV0dXJuIFwiL2FwaS9ydW50aW1lL2Rmcy92MS4wL2RvYy9oaXN0b3J5Y29udGVudD9tZXRhZGF0YWlkPVwiICsgbWV0YWRhdGFJZCArIFwiJnJvb3RpZD1cIiArIHJvb3RJZCArIFwiJnZlcnNpb249XCIgKyB2ZXJzaW9uICsgXCImdG9rZW49XCIgKyB0aGlzLmdldFRva2VuKHRoaXMubWVyZ2VTdHJpbmcobWV0YWRhdGFJZCwgcm9vdElkKSk7XG4gIH1cblxuXG5cbiAgcHJpdmF0ZSBtZXJnZVN0cmluZyhzdHI6IHN0cmluZywgc3RyMTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgbWluID0gc3RyLmxlbmd0aCA8IHN0cjEubGVuZ3RoID8gc3RyLmxlbmd0aCA6IHN0cjEubGVuZ3RoO1xuICAgIGxldCByZXM6IHN0cmluZyA9IFwiXCI7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBtaW47IGkrKykge1xuICAgICAgcmVzICs9IHN0ci5zdWJzdHJpbmcoaSwgaSArIDEpO1xuICAgICAgcmVzICs9IHN0cjEuc3Vic3RyaW5nKGksIGkgKyAxKTtcbiAgICB9XG4gICAgcmVzICs9IHN0ci5sZW5ndGggPCBzdHIxLmxlbmd0aCA/IHN0cjEuc3Vic3RyaW5nKGkpIDogc3RyLnN1YnN0cmluZyhpKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUb2tlbihzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IGFycmF5ID0gWzEsIDIsIDNdO1xuICAgIGlmIChzdHIubGVuZ3RoID4gMjQpXG4gICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIDI0KTtcbiAgICBsZXQgbGVuZ3RoID0gTWF0aC5mbG9vcihzdHIubGVuZ3RoIC8gMyk7XG4gICAgbGV0IHN0cjEgPSBzdHIuc3Vic3RyaW5nKDAsIGxlbmd0aCk7XG4gICAgbGV0IHN0cjIgPSBzdHIuc3Vic3RyaW5nKGxlbmd0aCwgMiAqIGxlbmd0aCk7XG4gICAgbGV0IHN0cjMgPSBzdHIuc3Vic3RyaW5nKDIgKiBsZW5ndGgsIDMgKiBsZW5ndGgpO1xuICAgIGxldCByYW5kb21BcnJheSA9IFtdO1xuICAgIHZhciByYW5kb20gPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDMpO1xuICAgIHJhbmRvbUFycmF5LnB1c2goYXJyYXlbcmFuZG9tIC0gMV0pO1xuICAgIGFycmF5LnNwbGljZShyYW5kb20gLSAxLCAxKTtcbiAgICByYW5kb20gPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDIpO1xuICAgIHJhbmRvbUFycmF5LnB1c2goYXJyYXlbcmFuZG9tIC0gMV0pO1xuICAgIGFycmF5LnNwbGljZShyYW5kb20gLSAxLCAxKTtcbiAgICByYW5kb21BcnJheS5wdXNoKGFycmF5WzBdKTtcbiAgICBsZXQgdGltZVN0YW1wOiBzdHJpbmcgPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkgKyBcIlwiO1xuXG4gICAgcmV0dXJuIHRpbWVTdGFtcC5zdWJzdHJpbmcoMCwgNSkgKyBcInRpbWVzXCIgKyByYW5kb21BcnJheVswXSArIFwiXCIgKyByYW5kb21BcnJheVsxXSArIFwiXCIgKyByYW5kb21BcnJheVsyXSArIHRoaXMuc3dpdGNoU3RyKHN0cjEsIHN0cjIsIHN0cjMsIHJhbmRvbUFycmF5WzBdKSArIHRoaXMuc3dpdGNoU3RyKHN0cjEsIHN0cjIsIHN0cjMsIHJhbmRvbUFycmF5WzFdKSArIHRoaXMuc3dpdGNoU3RyKHN0cjEsIHN0cjIsIHN0cjMsIHJhbmRvbUFycmF5WzJdKSArIFwidGltZXNcIiArIHRpbWVTdGFtcC5zdWJzdHJpbmcoNSk7XG4gIH1cblxuICBwcml2YXRlIHN3aXRjaFN0cihzdHIxOiBzdHJpbmcsIHN0cjI6IHN0cmluZywgc3RyMzogc3RyaW5nLCBpOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAoaSkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gc3RyMTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIHN0cjI7XG4gICAgICBjYXNlIDM6IHJldHVybiBzdHIzO1xuICAgIH1cbiAgfVxuXG5cbn1cbiJdfQ==