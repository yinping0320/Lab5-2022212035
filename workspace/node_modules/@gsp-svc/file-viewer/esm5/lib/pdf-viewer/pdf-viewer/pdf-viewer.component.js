/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { PdfViewOptions } from '../entitires/pdfviewoptions';
var PdfViewerComponent = /** @class */ (function () {
    function PdfViewerComponent(sanitizer) {
        this.sanitizer = sanitizer;
        this.pdfUrl = "";
        this.baseUrl = "/platform/common/web/pdfjs/viewer.html?file=";
    }
    /**
     * @return {?}
     */
    PdfViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.getViewUrl(this.baseUrl + encodeURIComponent(this.pdfUrl)));
    };
    /**
     * @param {?} url
     * @return {?}
     */
    PdfViewerComponent.prototype.pdfChange = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.getViewUrl(this.baseUrl + encodeURIComponent(url)));
    };
    /**
     * @param {?} url
     * @return {?}
     */
    PdfViewerComponent.prototype.getViewUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (!this.viewOptions.showPaging)
            url += "&showpaging=false";
        if (!this.viewOptions.showHeader)
            url += "&showheader=false";
        if (!this.viewOptions.showThumbnails)
            url += "&showthumbnails=false";
        if (!this.viewOptions.showDownload)
            url += "&showdownload=false";
        if (!this.viewOptions.showSearch)
            url += "&showsearch=false";
        if (!this.viewOptions.showPrint)
            url += "&showprint=false";
        if (!this.viewOptions.showZoom)
            url += "&showzoom=false";
        if (!this.viewOptions.showSecondaryToolBar)
            url += "&showsecondarytoolbar=false";
        return url;
    };
    PdfViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-pdf-viewer',
                    template: "<iframe id=\"viewframe\" [src]=\"viewUrl\" height=\"100%\" width=\"100%\"></iframe>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PdfViewerComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    PdfViewerComponent.propDecorators = {
        pdfUrl: [{ type: Input }],
        viewOptions: [{ type: Input }]
    };
    return PdfViewerComponent;
}());
export { PdfViewerComponent };
if (false) {
    /** @type {?} */
    PdfViewerComponent.prototype.pdfUrl;
    /** @type {?} */
    PdfViewerComponent.prototype.viewOptions;
    /** @type {?} */
    PdfViewerComponent.prototype.baseUrl;
    /** @type {?} */
    PdfViewerComponent.prototype.viewUrl;
    /**
     * @type {?}
     * @private
     */
    PdfViewerComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9maWxlLXZpZXdlci8iLCJzb3VyY2VzIjpbImxpYi9wZGYtdmlld2VyL3BkZi12aWV3ZXIvcGRmLXZpZXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFN0Q7SUFhRSw0QkFBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQU5sQyxXQUFNLEdBQVcsRUFBRSxDQUFDO1FBRzdCLFlBQU8sR0FBRyw4Q0FBOEMsQ0FBQztJQUdWLENBQUM7Ozs7SUFFaEQscUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hJLENBQUM7Ozs7O0lBRUQsc0NBQVM7Ozs7SUFBVCxVQUFVLEdBQVc7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEgsQ0FBQzs7Ozs7SUFFRCx1Q0FBVTs7OztJQUFWLFVBQVcsR0FBVztRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVO1lBQzlCLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVO1lBQzlCLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjO1lBQ2xDLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZO1lBQ2hDLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVO1lBQzlCLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTO1lBQzdCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRO1lBQzVCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0I7WUFDeEMsR0FBRyxJQUFJLDZCQUE2QixDQUFDO1FBRXZDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7Z0JBMUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQiwrRkFBMEM7O2lCQUUzQzs7OztnQkFQUSxZQUFZOzs7eUJBVWxCLEtBQUs7OEJBQ0wsS0FBSzs7SUFvQ1IseUJBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQXZDWSxrQkFBa0I7OztJQUU3QixvQ0FBNkI7O0lBQzdCLHlDQUFxQzs7SUFFckMscUNBQXlEOztJQUN6RCxxQ0FBWTs7Ozs7SUFFQSx1Q0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgUGRmVmlld09wdGlvbnMgfSBmcm9tICcuLi9lbnRpdGlyZXMvcGRmdmlld29wdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtcGRmLXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wZGYtdmlld2VyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcGRmLXZpZXdlci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUGRmVmlld2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBwZGZVcmw6IHN0cmluZyA9IFwiXCI7XG4gIEBJbnB1dCgpIHZpZXdPcHRpb25zOiBQZGZWaWV3T3B0aW9ucztcblxuICBiYXNlVXJsID0gXCIvcGxhdGZvcm0vY29tbW9uL3dlYi9wZGZqcy92aWV3ZXIuaHRtbD9maWxlPVwiO1xuICB2aWV3VXJsOiBhbnlcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnZpZXdVcmwgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwodGhpcy5nZXRWaWV3VXJsKHRoaXMuYmFzZVVybCArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnBkZlVybCkpKTtcbiAgfVxuXG4gIHBkZkNoYW5nZSh1cmw6IHN0cmluZykge1xuICAgIHRoaXMudmlld1VybCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCh0aGlzLmdldFZpZXdVcmwodGhpcy5iYXNlVXJsICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkpKTtcbiAgfVxuXG4gIGdldFZpZXdVcmwodXJsOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMudmlld09wdGlvbnMuc2hvd1BhZ2luZylcbiAgICAgIHVybCArPSBcIiZzaG93cGFnaW5nPWZhbHNlXCI7XG4gICAgaWYgKCF0aGlzLnZpZXdPcHRpb25zLnNob3dIZWFkZXIpXG4gICAgICB1cmwgKz0gXCImc2hvd2hlYWRlcj1mYWxzZVwiO1xuICAgIGlmICghdGhpcy52aWV3T3B0aW9ucy5zaG93VGh1bWJuYWlscylcbiAgICAgIHVybCArPSBcIiZzaG93dGh1bWJuYWlscz1mYWxzZVwiO1xuICAgIGlmICghdGhpcy52aWV3T3B0aW9ucy5zaG93RG93bmxvYWQpXG4gICAgICB1cmwgKz0gXCImc2hvd2Rvd25sb2FkPWZhbHNlXCI7XG4gICAgaWYgKCF0aGlzLnZpZXdPcHRpb25zLnNob3dTZWFyY2gpXG4gICAgICB1cmwgKz0gXCImc2hvd3NlYXJjaD1mYWxzZVwiO1xuICAgIGlmICghdGhpcy52aWV3T3B0aW9ucy5zaG93UHJpbnQpXG4gICAgICB1cmwgKz0gXCImc2hvd3ByaW50PWZhbHNlXCI7XG4gICAgaWYgKCF0aGlzLnZpZXdPcHRpb25zLnNob3dab29tKVxuICAgICAgdXJsICs9IFwiJnNob3d6b29tPWZhbHNlXCI7XG4gICAgaWYgKCF0aGlzLnZpZXdPcHRpb25zLnNob3dTZWNvbmRhcnlUb29sQmFyKVxuICAgICAgdXJsICs9IFwiJnNob3dzZWNvbmRhcnl0b29sYmFyPWZhbHNlXCI7XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbn0iXX0=