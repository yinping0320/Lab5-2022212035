/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { catchError, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { StorageType } from '../file-list-mobile/entity/storagetype';
import { ViewFileRequest } from '../file-list-mobile/entity/viewfilerequest';
import { UnifileListInfo } from '../file-list-mobile/entity/unifilelistinfo';
import { MergePdfRequest } from '../pdf-viewer/entitires/mergepdfrequest';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@angular/common/http";
var FileListService = /** @class */ (function () {
    function FileListService(http, httpClient) {
        this.http = http;
        this.httpClient = httpClient;
    }
    /**
     * @param {?} filePath
     * @param {?} storageType
     * @return {?}
     */
    FileListService.prototype.getViewFile = /**
     * @param {?} filePath
     * @param {?} storageType
     * @return {?}
     */
    function (filePath, storageType) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/fileviewer/file";
        /** @type {?} */
        var viewRequest = new ViewFileRequest;
        viewRequest.storageType = storageType;
        viewRequest.filePath = filePath;
        /** @type {?} */
        var body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body: body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    FileListService.prototype.getFormFileList = /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    function (formId, rootId) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
        /** @type {?} */
        var unifileInfo = new UnifileListInfo;
        unifileInfo.formId = formId;
        unifileInfo.rootId = rootId;
        /** @type {?} */
        var viewRequest = new ViewFileRequest;
        viewRequest.storageType = StorageType.UniFile;
        viewRequest.filePath = JSON.stringify(unifileInfo);
        /** @type {?} */
        var body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body: body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    FileListService.prototype.setHeader = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.headers = {
            'Content-Type': 'application/json'
        };
        return options;
    };
    /**
     * @param {?} idList
     * @param {?=} rootId
     * @return {?}
     */
    FileListService.prototype.getFileList = /**
     * @param {?} idList
     * @param {?=} rootId
     * @return {?}
     */
    function (idList, rootId) {
        if (rootId === void 0) { rootId = ""; }
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
        /** @type {?} */
        var unifileInfo = new UnifileListInfo;
        unifileInfo.metadataIdList = idList;
        unifileInfo.rootId = rootId;
        /** @type {?} */
        var viewRequest = new ViewFileRequest;
        viewRequest.storageType = StorageType.UniFile;
        viewRequest.filePath = JSON.stringify(unifileInfo);
        /** @type {?} */
        var body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body: body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    FileListService.prototype.getMergedFile = /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    function (idList, rootId) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/doc/mergepdf";
        /** @type {?} */
        var httpOptions = {};
        httpOptions['responseType'] = "blob";
        /** @type {?} */
        var body = new MergePdfRequest;
        body.metadataIdList = idList;
        body.rootId = rootId;
        body.token = this.getToken(this.mergeString(idList[0], rootId));
        return this.httpClient.post(url, body, httpOptions).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    FileListService.prototype.mergeString = /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    function (str, str1) {
        /** @type {?} */
        var min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        var res = "";
        /** @type {?} */
        var i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    FileListService.prototype.getToken = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        var length = Math.floor(str.length / 3);
        /** @type {?} */
        var str1 = str.substring(0, length);
        /** @type {?} */
        var str2 = str.substring(length, 2 * length);
        /** @type {?} */
        var str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        var randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        var timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    };
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    FileListService.prototype.switchStr = /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    function (str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    };
    FileListService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FileListService.ctorParameters = function () { return [
        { type: HttpService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ FileListService.ngInjectableDef = i0.defineInjectable({ factory: function FileListService_Factory() { return new FileListService(i0.inject(i1.HttpService), i0.inject(i2.HttpClient)); }, token: FileListService, providedIn: "root" });
    return FileListService;
}());
export { FileListService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileListService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FileListService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,