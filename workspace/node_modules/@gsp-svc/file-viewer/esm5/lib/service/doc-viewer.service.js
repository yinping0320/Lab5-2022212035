/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { HttpClient } from '@angular/common/http';
import { catchError, tap } from 'rxjs/operators';
import { of } from 'rxjs';
import { ConfigService, Api } from './config.service';
import { RotateDocumentPagesRequest } from '../doc-viewer/entity/RotateDocumentPagesRequest';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@angular/common/http";
import * as i3 from "./config.service";
var DocViewerService = /** @class */ (function () {
    function DocViewerService(http, _http, _config) {
        this.http = http;
        this._http = _http;
        this._config = _config;
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    DocViewerService.prototype.setHeader = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.headers = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        };
        return options;
    };
    /**
     * @param {?} body
     * @return {?}
     */
    DocViewerService.prototype.loadFileInfo = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        /** @type {?} */
        var url = '/api/runtime/dfs/v1.0/docviewer/loaddocument';
        return this.http.request('Post', url, this.setHeader({ body: body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    // loadFiles(path: string) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_FILE_TREE, {'path': path}, Api.httpOptionsJson);
    // }
    // loadFile(credentials: FileCredentials) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_DOCUMENT_DESCRIPTION, credentials, Api.httpOptionsJson);
    // }
    // upload(file: File, url: string, rewrite: boolean) {
    //   const formData = new FormData();
    //   formData.append("file", file);
    //   formData.append('rewrite', String(rewrite));
    //   if (url) {
    //     formData.append("url", url);
    //   }
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.UPLOAD_DOCUMENTS, formData);
    // }
    // loadFiles(path: string) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_FILE_TREE, {'path': path}, Api.httpOptionsJson);
    // }
    // loadFile(credentials: FileCredentials) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_DOCUMENT_DESCRIPTION, credentials, Api.httpOptionsJson);
    // }
    // upload(file: File, url: string, rewrite: boolean) {
    //   const formData = new FormData();
    //   formData.append("file", file);
    //   formData.append('rewrite', String(rewrite));
    //   if (url) {
    //     formData.append("url", url);
    //   }
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.UPLOAD_DOCUMENTS, formData);
    // }
    /**
     * @param {?} credentials
     * @param {?} page
     * @return {?}
     */
    DocViewerService.prototype.loadPage = 
    // loadFiles(path: string) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_FILE_TREE, {'path': path}, Api.httpOptionsJson);
    // }
    // loadFile(credentials: FileCredentials) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_DOCUMENT_DESCRIPTION, credentials, Api.httpOptionsJson);
    // }
    // upload(file: File, url: string, rewrite: boolean) {
    //   const formData = new FormData();
    //   formData.append("file", file);
    //   formData.append('rewrite', String(rewrite));
    //   if (url) {
    //     formData.append("url", url);
    //   }
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.UPLOAD_DOCUMENTS, formData);
    // }
    /**
     * @param {?} credentials
     * @param {?} page
     * @return {?}
     */
    function (credentials, page) {
        return this._http.post('/api/runtime/dfs/v1.0/docviewer/loaddocumentPage', {
            'filePath': credentials.guid,
            'password': credentials.password,
            'page': page
        }, Api.httpOptionsJson);
    };
    /**
     * @param {?} credentials
     * @param {?} angle
     * @param {?} page
     * @return {?}
     */
    DocViewerService.prototype.rotate = /**
     * @param {?} credentials
     * @param {?} angle
     * @param {?} page
     * @return {?}
     */
    function (credentials, angle, page) {
        /** @type {?} */
        var url = '/api/runtime/dfs/v1.0/docviewer/rotatedocumentPage';
        // return this._http.post(url, {
        //   'filePath': credentials.guid,
        //   'password': credentials.password,
        //   'pages': [page],
        //   'angle': angle
        // }, Api.httpOptionsJson);
        /** @type {?} */
        var body = new RotateDocumentPagesRequest;
        body.filePath = credentials.guid;
        body.angle = angle;
        body.pages = [page];
        return this.http.request('Post', url, this.setHeader({ body: body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    DocViewerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DocViewerService.ctorParameters = function () { return [
        { type: HttpService },
        { type: HttpClient },
        { type: ConfigService }
    ]; };
    /** @nocollapse */ DocViewerService.ngInjectableDef = i0.defineInjectable({ factory: function DocViewerService_Factory() { return new DocViewerService(i0.inject(i1.HttpService), i0.inject(i2.HttpClient), i0.inject(i3.ConfigService)); }, token: DocViewerService, providedIn: "root" });
    return DocViewerService;
}());
export { DocViewerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DocViewerService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DocViewerService.prototype._http;
    /**
     * @type {?}
     * @private
     */
    DocViewerService.prototype._config;
}
//# sourceMappingURL=data:application/json;base64,