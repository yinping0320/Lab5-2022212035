/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
//import { FileUploadComponent } from './upload/file-upload/file-upload.component';
import { BsModalService } from '@farris/ui-modal';
import { FileListComponent } from './file-list/file-list/file-list.component';
import { FileListService } from './service/file-list.service';
import { MessagerService } from '@farris/ui-messager';
import { CloudprintService, PrintType, FileType, OutputType } from "@gsp-svc/cloudprint";
import { PdfViewOptions } from './pdf-viewer/entitires/pdfviewoptions';
import { AppService } from '@gsp-sys/rtf-common';
import { UUID } from 'angular2-uuid';
//import { UploadLimit } from './upload/entity/uploadlimit';
var FileViewerService = /** @class */ (function () {
    function FileViewerService(modalService, componentFactoryResolver, injector, fileListService, msgService, cloudprintService, appService) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileListService = fileListService;
        this.msgService = msgService;
        this.cloudprintService = cloudprintService;
        this.appService = appService;
        this.windowWidth = window.innerWidth;
        this.windowHeigth = window.innerHeight;
    }
    //fileInfoList: UploadFileInfo[] = [];
    //fileInfoList: UploadFileInfo[] = [];
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFormFile = 
    //fileInfoList: UploadFileInfo[] = [];
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (formId, rootId, viewOptions) {
        var _this = this;
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(_this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            _this.dlg = _this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false
            });
            _this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.formId = formId;
            // this.dlg.content.rootId = rootId;
        }));
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFileList = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (metadataIdList, rootId, viewOptions) {
        var _this = this;
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(_this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.metadataIdList = metadataIdList;
            _this.dlg = _this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            _this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.metadataIdList = metadataIdList;
            // this.dlg.content.rootId = rootId;
        }));
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFormFileWithIndex = /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (formId, rootId, metadataId, viewOptions) {
        var _this = this;
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(_this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            viewerRef.instance.metadataId = metadataId;
            _this.dlg = _this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            _this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.formId = formId;
            // this.dlg.content.rootId = rootId;
        }));
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFileListWithIndex = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (metadataIdList, rootId, metadataId, viewOptions) {
        var _this = this;
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(_this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.metadataIdList = metadataIdList;
            viewerRef.instance.metadataId = metadataId;
            _this.dlg = _this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            _this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.metadataIdList = metadataIdList;
            // this.dlg.content.rootId = rootId;
        }));
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    FileViewerService.prototype.mergeAndViewPdfFiles = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    function (metadataIdList, rootId) {
        var _this = this;
        this.fileListService.getMergedFile(metadataIdList, rootId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res.error != null) {
                _this.msgService.error(res.error.Message);
            }
            else {
                /** @type {?} */
                var options = {
                    OutputType: OutputType.PRINT,
                    FileType: FileType.Pdf,
                    Path: '',
                    DeviceId: '',
                    printType: PrintType.Form
                };
                _this.cloudprintService.openRendedViewer4Attachment("tab", res, options);
            }
        }));
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFormFileInpage = /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (formId, rootId, viewOptions) {
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        this.viewerFormFileWithIndexInPage(formId, rootId, null, viewOptions);
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFileListInPage = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (metadataIdList, rootId, viewOptions) {
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        this.viewerFileListWithIndexInPage(metadataIdList, rootId, null, viewOptions);
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFormFileWithIndexInPage = /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (formId, rootId, metadataId, viewOptions) {
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        this.appService.openAppByOptions({
            appType: 'app',
            funcId: '',
            tabName: '文档在线预览',
            appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
            appEntrance: 'docviewertab',
            tabId: UUID.UUID(),
            entityParams: {
                formId: formId,
                rootId: rootId,
                metadataId: metadataId,
                viewOptions: viewOptions
            },
        });
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    FileViewerService.prototype.viewerFileListWithIndexInPage = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    function (metadataIdList, rootId, metadataId, viewOptions) {
        if (viewOptions === void 0) { viewOptions = new PdfViewOptions; }
        this.appService.openAppByOptions({
            appType: 'app',
            funcId: '',
            tabName: '文档在线预览',
            appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
            appEntrance: 'docviewertab',
            tabId: UUID.UUID(),
            entityParams: {
                metadataIdList: metadataIdList,
                rootId: rootId,
                metadataId: metadataId,
                viewOptions: viewOptions
            },
        });
    };
    FileViewerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FileViewerService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: FileListService },
        { type: MessagerService },
        { type: CloudprintService },
        { type: AppService }
    ]; };
    return FileViewerService;
}());
export { FileViewerService };
if (false) {
    /** @type {?} */
    FileViewerService.prototype.dlg;
    /** @type {?} */
    FileViewerService.prototype.windowWidth;
    /** @type {?} */
    FileViewerService.prototype.windowHeigth;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.fileListService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.cloudprintService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.appService;
}
//# sourceMappingURL=data:application/json;base64,