/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef } from '@angular/core';
import { FileDescription } from '../entities/filedescription';
import { FileUtil } from '../util/FileUtil';
import { ZoomService } from '../../service/zoom.service';
import { WindowService } from '../../service/window.service';
import { NavigateService } from '../../service/navigate.service';
export class GspDocumentComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _zoomService
     * @param {?} _windowService
     * @param {?} _navigateService
     */
    constructor(_elementRef, _zoomService, _windowService, _navigateService) {
        this._elementRef = _elementRef;
        this._zoomService = _zoomService;
        this._windowService = _windowService;
        this._navigateService = _navigateService;
        this.wait = false;
        this.docWidth = null;
        this.docHeight = null;
        this.viewportWidth = null;
        this.viewportHeight = null;
        this.scale = null;
        this.lastScale = null;
        this.container = null;
        this.doc = null;
        this.x = 0;
        this.lastX = 0;
        this.y = 0;
        this.lastY = 0;
        this.pinchCenter = null;
        this.pinchCenterOffset = null;
        this.curWidth = 0;
        this.curHeight = 0;
        _zoomService.zoomChange.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this.zoom = val;
        }));
        this.isDesktop = _windowService.isDesktop();
        this._navigateService.navigate.subscribe((((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.selectedPage = value;
        }))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.ifPresentation()) {
            this.selectedPage = this._navigateService.currentPage;
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.refreshView = !this.refreshView;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // For current iteration we take .panzoom as a document
        this.doc = this._elementRef.nativeElement.children.item(0).children.item(0);
        // For current iteration we take .gd-document as a container
        this.container = this._elementRef.nativeElement;
        this.docWidth = this.doc.clientWidth;
        this.docHeight = this.doc.clientHeight;
        this.viewportWidth = this.doc.offsetWidth;
        // For cases where we already have zoom defined we should include it
        this.scale = (this.viewportWidth / this.docWidth) * this._zoomService.zoom / 100;
        this.lastScale = this.scale;
        this.viewportHeight = this.container.offsetHeight;
        this.curWidth = this.docWidth * this.scale;
        this.curHeight = this.docHeight * this.scale;
        //const hammer = new Hammer(this.container);
    }
    // TODO: this temporary crutch for Excel files should be documented
    /**
     * @return {?}
     */
    ifExcel() {
        return FileUtil.find(this.file.filePath, false).format === "Microsoft Excel";
    }
    /**
     * @return {?}
     */
    ifPresentation() {
        return FileUtil.find(this.file.filePath, false).format === "Microsoft PowerPoint";
    }
    /**
     * @param {?} value
     * @param {?} pageNumber
     * @return {?}
     */
    getDimensionWithUnit(value, pageNumber) {
        return this.ifPresentation() && this.showActiveSlide && !this.isVisible(pageNumber) ? 0 : value + (this.mode ? FileUtil.find(this.file.filePath, false).unit : 'px');
    }
    /**
     * @return {?}
     */
    ifChromeOrFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('chrome') > -1 || this.ifFirefox();
    }
    /**
     * @return {?}
     */
    ifFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    }
    /**
     * @return {?}
     */
    ifEdge() {
        return navigator.userAgent.toLowerCase().indexOf('edge') > -1;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        // for now we are not sure that need this action in current implementation
        // const elementNodeListOf = this._elementRef.nativeElement.querySelectorAll('.gd-wrapper');
        // const element = elementNodeListOf.item(0);
        // if (element) {
        //   $(element).trigger('focus');
        // }
    }
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    isVisible(pageNumber) {
        if (this.ifPresentation()) {
            return pageNumber === this.selectedPage ? true : false;
        }
        else {
            return true;
        }
    }
}
GspDocumentComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-gsp-document',
                template: "<!-- <div id=\"document\" class=\"document\" gdScrollable [onRefresh]=\"refreshView\">\n    <div class=\"panzoom\" gdZoom [zoomActive]=\"!ifEdge()\" gdSearchable>\n        <div [ngStyle]=\"divWidth\" [ngClass]=\"(ifFirefox() && zoom > 110) ? 'page gsp-zoomed' : 'page'\" *ngFor=\"let page of file?.pages\" gdZoom [zoomActive]=\"ifEdge()\" [isEdge]=\"ifEdge()\" [style.width.pt]=\"ifPdf() ? page.width : 'unset'\" [style.height.pt]=\"(ifPdf() || ifImage()) && ifChromeOrFirefox() ? page.height : 'unset'\"\n            gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\" [width]=\"page.width\" [height]=\"page.height\">\n            <app-gsp-page [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\"></app-gsp-page>\n        </div>\n    </div>\n    <ng-content></ng-content>\n</div> -->\n\n<div id=\"document\" class=\"document\" gdScrollable [onRefresh]=\"refreshView\">\n    <div [ngClass]=\"isDesktop ? 'panzoom' : 'panzoom mobile'\" gdZoom [zoomActive]=\"true\" [file]=\"file\" gdSearchable>\n        <div [ngClass]=\"ifExcel() ? 'page excel' : ifPresentation() && showActiveSlide ? (isVisible(page.number) ? 'page presentation active' : 'page presentation') : 'page'\" *ngFor=\"let page of file?.pages\" [style.height]=\"getDimensionWithUnit(page.height, page.number)\"\n            [style.width]=\"getDimensionWithUnit(page.width, page.number)\" gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\" [width]=\"page.width\" [height]=\"page.height\">\n            <app-gsp-page *ngIf=\"!showActiveSlide || isVisible(page.number)\" [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\" gdPageMarker></app-gsp-page>\n        </div>\n    </div>\n    <ng-content></ng-content>\n</div>",
                styles: [".document{background-color:#e7e7e7;width:100%;height:100%;overflow-x:auto;overflow-y:auto!important;transition:.4s;padding:0;margin:0;position:relative}.page{display:inline-block;background-color:#fff;margin:20px 0;box-shadow:0 4px 12px -4px rgba(0,0,0,.38);transition:.3s}.panzoom{-webkit-transform:none;transform:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:0 50% 0;transform-origin:0 50% 0;display:flex;justify-content:center;flex-wrap:wrap}.gsp-zoomed{margin:10px 98px}@media (max-width:1025px){.document{overflow-x:auto!important}.page{min-width:unset!important;min-height:unset!important;margin:5px 0}}"]
            }] }
];
/** @nocollapse */
GspDocumentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ZoomService },
    { type: WindowService },
    { type: NavigateService }
];
GspDocumentComponent.propDecorators = {
    mode: [{ type: Input }],
    preloadPageCount: [{ type: Input }],
    file: [{ type: Input }],
    selectedPage: [{ type: Input }],
    showActiveSlide: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GspDocumentComponent.prototype.mode;
    /** @type {?} */
    GspDocumentComponent.prototype.preloadPageCount;
    /** @type {?} */
    GspDocumentComponent.prototype.file;
    /** @type {?} */
    GspDocumentComponent.prototype.selectedPage;
    /** @type {?} */
    GspDocumentComponent.prototype.showActiveSlide;
    /** @type {?} */
    GspDocumentComponent.prototype.wait;
    /** @type {?} */
    GspDocumentComponent.prototype.zoom;
    /** @type {?} */
    GspDocumentComponent.prototype.docWidth;
    /** @type {?} */
    GspDocumentComponent.prototype.docHeight;
    /** @type {?} */
    GspDocumentComponent.prototype.viewportWidth;
    /** @type {?} */
    GspDocumentComponent.prototype.viewportHeight;
    /** @type {?} */
    GspDocumentComponent.prototype.scale;
    /** @type {?} */
    GspDocumentComponent.prototype.lastScale;
    /** @type {?} */
    GspDocumentComponent.prototype.container;
    /** @type {?} */
    GspDocumentComponent.prototype.doc;
    /** @type {?} */
    GspDocumentComponent.prototype.x;
    /** @type {?} */
    GspDocumentComponent.prototype.lastX;
    /** @type {?} */
    GspDocumentComponent.prototype.y;
    /** @type {?} */
    GspDocumentComponent.prototype.lastY;
    /** @type {?} */
    GspDocumentComponent.prototype.pinchCenter;
    /** @type {?} */
    GspDocumentComponent.prototype.pinchCenterOffset;
    /** @type {?} */
    GspDocumentComponent.prototype.curWidth;
    /** @type {?} */
    GspDocumentComponent.prototype.curHeight;
    /** @type {?} */
    GspDocumentComponent.prototype.isDesktop;
    /** @type {?} */
    GspDocumentComponent.prototype.refreshView;
    /**
     * @type {?}
     * @protected
     */
    GspDocumentComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    GspDocumentComponent.prototype._zoomService;
    /**
     * @type {?}
     * @private
     */
    GspDocumentComponent.prototype._windowService;
    /**
     * @type {?}
     * @private
     */
    GspDocumentComponent.prototype._navigateService;
}
//# sourceMappingURL=data:application/json;base64,