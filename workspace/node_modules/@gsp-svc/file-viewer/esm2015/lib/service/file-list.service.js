/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { catchError, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { StorageType } from '../file-list-mobile/entity/storagetype';
import { ViewFileRequest } from '../file-list-mobile/entity/viewfilerequest';
import { UnifileListInfo } from '../file-list-mobile/entity/unifilelistinfo';
import { MergePdfRequest } from '../pdf-viewer/entitires/mergepdfrequest';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@angular/common/http";
export class FileListService {
    /**
     * @param {?} http
     * @param {?} httpClient
     */
    constructor(http, httpClient) {
        this.http = http;
        this.httpClient = httpClient;
    }
    /**
     * @param {?} filePath
     * @param {?} storageType
     * @return {?}
     */
    getViewFile(filePath, storageType) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/fileviewer/file";
        /** @type {?} */
        let viewRequest = new ViewFileRequest;
        viewRequest.storageType = storageType;
        viewRequest.filePath = filePath;
        /** @type {?} */
        let body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    getFormFileList(formId, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
        /** @type {?} */
        let unifileInfo = new UnifileListInfo;
        unifileInfo.formId = formId;
        unifileInfo.rootId = rootId;
        /** @type {?} */
        let viewRequest = new ViewFileRequest;
        viewRequest.storageType = StorageType.UniFile;
        viewRequest.filePath = JSON.stringify(unifileInfo);
        /** @type {?} */
        let body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setHeader(options) {
        options.headers = {
            'Content-Type': 'application/json'
        };
        return options;
    }
    /**
     * @param {?} idList
     * @param {?=} rootId
     * @return {?}
     */
    getFileList(idList, rootId = "") {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
        /** @type {?} */
        let unifileInfo = new UnifileListInfo;
        unifileInfo.metadataIdList = idList;
        unifileInfo.rootId = rootId;
        /** @type {?} */
        let viewRequest = new ViewFileRequest;
        viewRequest.storageType = StorageType.UniFile;
        viewRequest.filePath = JSON.stringify(unifileInfo);
        /** @type {?} */
        let body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    getMergedFile(idList, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/doc/mergepdf";
        /** @type {?} */
        let httpOptions = {};
        httpOptions['responseType'] = "blob";
        /** @type {?} */
        let body = new MergePdfRequest;
        body.metadataIdList = idList;
        body.rootId = rootId;
        body.token = this.getToken(this.mergeString(idList[0], rootId));
        return this.httpClient.post(url, body, httpOptions).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    mergeString(str, str1) {
        /** @type {?} */
        let min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        let res = "";
        /** @type {?} */
        let i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    getToken(str) {
        /** @type {?} */
        let array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        let length = Math.floor(str.length / 3);
        /** @type {?} */
        let str1 = str.substring(0, length);
        /** @type {?} */
        let str2 = str.substring(length, 2 * length);
        /** @type {?} */
        let str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        let randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        let timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    }
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    switchStr(str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    }
}
FileListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FileListService.ctorParameters = () => [
    { type: HttpService },
    { type: HttpClient }
];
/** @nocollapse */ FileListService.ngInjectableDef = i0.defineInjectable({ factory: function FileListService_Factory() { return new FileListService(i0.inject(i1.HttpService), i0.inject(i2.HttpClient)); }, token: FileListService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileListService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FileListService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,