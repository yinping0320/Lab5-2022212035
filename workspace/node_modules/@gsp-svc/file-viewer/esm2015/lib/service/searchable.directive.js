/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from '@angular/core';
import { SearchService } from "./search.service";
//import {HighlightSearchPipe} from "./pipes";
import { ZoomService } from "./zoom.service";
import * as jquery from "jquery";
/** @type {?} */
const $ = jquery.default;
export class SearchableDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _searchService
     * @param {?} _zoomService
     */
    constructor(_elementRef, _searchService, _zoomService) {
        this._elementRef = _elementRef;
        this._searchService = _searchService;
        this._zoomService = _zoomService;
        this.current = 0;
        this.total = 0;
        this.zoom = 100;
        _searchService.currentChange.subscribe((/**
         * @param {?} current
         * @return {?}
         */
        (current) => {
            this.current = current;
            if (this.current !== 0) {
                //this.moveToCurrent();
            }
        }));
        _searchService.textChange.subscribe((/**
         * @param {?} text
         * @return {?}
         */
        (text) => {
            this.text = text;
            //this.highlightSearch();
        }));
        this.zoom = _zoomService.zoom ? _zoomService.zoom : this.zoom;
        _zoomService.zoomChange.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this.zoom = val ? val : this.zoom;
        }));
    }
    // private highlightSearch() {
    //   const el = this._elementRef ? this._elementRef.nativeElement : null;
    //   if (el) {
    //     this.cleanHighlight(el);
    //     if (this.text) {
    //       this.highlightEl(el);
    //       const count = el.querySelectorAll('.gd-highlight').length;
    //       this.total = count;
    //     } else {
    //       this.total = 0;
    //     }
    //     this._searchService.setTotal(this.total);
    //   }
    // }
    // private moveToCurrent() {
    //   if (this.current === 0) {
    //     return;
    //   }
    //   const currentZoom = this.getZoom();
    //   const el = this._elementRef ? this._elementRef.nativeElement : null;
    //   if (el) {
    //     el.querySelectorAll('.gd-highlight-select').forEach(function (value) {
    //       $(value).removeClass('gd-highlight-select');
    //     });
    //     const currentEl = el.querySelectorAll('.gd-highlight')[this.current - 1];
    //     $(currentEl).addClass('gd-highlight-select');
    //     if (currentEl) {
    //       const options = {
    //         left: 0,
    //         top: ($(currentEl).offset().top * currentZoom) + el.parentElement.scrollTop - 150,
    //       };
    //       el.parentElement.scrollTo(options);
    //     }
    //   }
    // }
    // private highlightEl(el: Element) {
    //   const textNodes = $(el).find('*').contents().filter(function () {
    //     const nodeName = this.parentElement.nodeName.toLowerCase();
    //     const checkClass = (<Element>this).classList ? !(<Element>this).classList.contains('gd-highlight') : true;
    //     return this.nodeType === 3 &&
    //       this.textContent.trim().length !== 0 &&
    //       nodeName !== 'style' &&
    //       nodeName !== 'title' &&
    //       nodeName !== 'body' &&
    //       nodeName !== 'script' &&
    //       checkClass;
    //   });
    //   const text = this.text;
    //   const highlight = this._highlight;
    //   textNodes.each(function () {
    //     const $this = $(this);
    //     let content = $this.text();
    //     content = highlight.transform(content, text);
    //     $this.replaceWith(content);
    //   });
    //   el.normalize();
    // }
    // private cleanHighlight(el: HTMLElement) {
    //   const nodeListOf = el.querySelectorAll('.gd-highlight');
    //   for (let i = 0; i < nodeListOf.length; i++) {
    //     const element = nodeListOf.item(i);
    //     element.replaceWith((<HTMLElement>element).innerText);
    //   }
    //   el.normalize();
    // }
    /**
     * @private
     * @return {?}
     */
    getZoom() {
        return this.zoom / 100;
    }
}
SearchableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gdSearchable]'
            },] }
];
/** @nocollapse */
SearchableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: SearchService },
    { type: ZoomService }
];
if (false) {
    /** @type {?} */
    SearchableDirective.prototype.text;
    /** @type {?} */
    SearchableDirective.prototype.current;
    /** @type {?} */
    SearchableDirective.prototype.total;
    /**
     * @type {?}
     * @private
     */
    SearchableDirective.prototype.zoom;
    /**
     * @type {?}
     * @private
     */
    SearchableDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SearchableDirective.prototype._searchService;
    /**
     * @type {?}
     * @private
     */
    SearchableDirective.prototype._zoomService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoYWJsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN2Yy9maWxlLXZpZXdlci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL3NlYXJjaGFibGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7O0FBRS9DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQzs7TUFDM0IsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPO0FBS3hCLE1BQU0sT0FBTyxtQkFBbUI7Ozs7OztJQU85QixZQUFvQixXQUFvQyxFQUNwQyxjQUE2QixFQUU3QixZQUF5QjtRQUh6QixnQkFBVyxHQUFYLFdBQVcsQ0FBeUI7UUFDcEMsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUFFN0IsaUJBQVksR0FBWixZQUFZLENBQWE7UUFQN0MsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUNaLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDRixTQUFJLEdBQUcsR0FBRyxDQUFDO1FBTWpCLGNBQWMsQ0FBQyxhQUFhLENBQUMsU0FBUzs7OztRQUFDLENBQUMsT0FBZSxFQUFFLEVBQUU7WUFDekQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDdkIsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsdUJBQXVCO2FBQ3hCO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ25ELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLHlCQUF5QjtRQUMzQixDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUM5RCxZQUFZLENBQUMsVUFBVSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO1lBQ2hELElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBdUVPLE9BQU87UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3pCLENBQUM7OztZQXZHRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7OztZQVRrQixVQUFVO1lBQ3JCLGFBQWE7WUFFYixXQUFXOzs7O0lBU2pCLG1DQUFhOztJQUNiLHNDQUFZOztJQUNaLG9DQUFVOzs7OztJQUNWLG1DQUFtQjs7Ozs7SUFFUCwwQ0FBNEM7Ozs7O0lBQzVDLDZDQUFxQzs7Ozs7SUFFckMsMkNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTZWFyY2hTZXJ2aWNlfSBmcm9tIFwiLi9zZWFyY2guc2VydmljZVwiO1xuLy9pbXBvcnQge0hpZ2hsaWdodFNlYXJjaFBpcGV9IGZyb20gXCIuL3BpcGVzXCI7XG5pbXBvcnQge1pvb21TZXJ2aWNlfSBmcm9tIFwiLi96b29tLnNlcnZpY2VcIjtcbmltcG9ydCAqIGFzIGpxdWVyeSBmcm9tIFwianF1ZXJ5XCI7XG5jb25zdCAkID0ganF1ZXJ5LmRlZmF1bHQ7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tnZFNlYXJjaGFibGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hhYmxlRGlyZWN0aXZlIHtcblxuICB0ZXh0OiBzdHJpbmc7XG4gIGN1cnJlbnQgPSAwO1xuICB0b3RhbCA9IDA7XG4gIHByaXZhdGUgem9vbSA9IDEwMDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfc2VhcmNoU2VydmljZTogU2VhcmNoU2VydmljZSxcbiAgICAgICAgICAgICAgLy9wcml2YXRlIF9oaWdobGlnaHQ6IEhpZ2hsaWdodFNlYXJjaFBpcGUsXG4gICAgICAgICAgICAgIHByaXZhdGUgX3pvb21TZXJ2aWNlOiBab29tU2VydmljZSkge1xuICAgIF9zZWFyY2hTZXJ2aWNlLmN1cnJlbnRDaGFuZ2Uuc3Vic2NyaWJlKChjdXJyZW50OiBudW1iZXIpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICBpZiAodGhpcy5jdXJyZW50ICE9PSAwKSB7XG4gICAgICAgIC8vdGhpcy5tb3ZlVG9DdXJyZW50KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfc2VhcmNoU2VydmljZS50ZXh0Q2hhbmdlLnN1YnNjcmliZSgodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgLy90aGlzLmhpZ2hsaWdodFNlYXJjaCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy56b29tID0gX3pvb21TZXJ2aWNlLnpvb20gPyBfem9vbVNlcnZpY2Uuem9vbSA6IHRoaXMuem9vbTtcbiAgICBfem9vbVNlcnZpY2Uuem9vbUNoYW5nZS5zdWJzY3JpYmUoKHZhbDogbnVtYmVyKSA9PiB7XG4gICAgICB0aGlzLnpvb20gPSB2YWwgPyB2YWwgOiB0aGlzLnpvb207XG4gICAgfSk7XG4gIH1cblxuICAvLyBwcml2YXRlIGhpZ2hsaWdodFNlYXJjaCgpIHtcbiAgLy8gICBjb25zdCBlbCA9IHRoaXMuX2VsZW1lbnRSZWYgPyB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgOiBudWxsO1xuICAvLyAgIGlmIChlbCkge1xuICAvLyAgICAgdGhpcy5jbGVhbkhpZ2hsaWdodChlbCk7XG4gIC8vICAgICBpZiAodGhpcy50ZXh0KSB7XG4gIC8vICAgICAgIHRoaXMuaGlnaGxpZ2h0RWwoZWwpO1xuICAvLyAgICAgICBjb25zdCBjb3VudCA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5nZC1oaWdobGlnaHQnKS5sZW5ndGg7XG4gIC8vICAgICAgIHRoaXMudG90YWwgPSBjb3VudDtcbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIHRoaXMudG90YWwgPSAwO1xuICAvLyAgICAgfVxuICAvLyAgICAgdGhpcy5fc2VhcmNoU2VydmljZS5zZXRUb3RhbCh0aGlzLnRvdGFsKTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICAvLyBwcml2YXRlIG1vdmVUb0N1cnJlbnQoKSB7XG4gIC8vICAgaWYgKHRoaXMuY3VycmVudCA9PT0gMCkge1xuICAvLyAgICAgcmV0dXJuO1xuICAvLyAgIH1cbiAgLy8gICBjb25zdCBjdXJyZW50Wm9vbSA9IHRoaXMuZ2V0Wm9vbSgpO1xuICAvLyAgIGNvbnN0IGVsID0gdGhpcy5fZWxlbWVudFJlZiA/IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCA6IG51bGw7XG4gIC8vICAgaWYgKGVsKSB7XG4gIC8vICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2QtaGlnaGxpZ2h0LXNlbGVjdCcpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gIC8vICAgICAgICQodmFsdWUpLnJlbW92ZUNsYXNzKCdnZC1oaWdobGlnaHQtc2VsZWN0Jyk7XG4gIC8vICAgICB9KTtcbiAgLy8gICAgIGNvbnN0IGN1cnJlbnRFbCA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5nZC1oaWdobGlnaHQnKVt0aGlzLmN1cnJlbnQgLSAxXTtcbiAgLy8gICAgICQoY3VycmVudEVsKS5hZGRDbGFzcygnZ2QtaGlnaGxpZ2h0LXNlbGVjdCcpO1xuICAvLyAgICAgaWYgKGN1cnJlbnRFbCkge1xuICAvLyAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAvLyAgICAgICAgIGxlZnQ6IDAsXG4gIC8vICAgICAgICAgdG9wOiAoJChjdXJyZW50RWwpLm9mZnNldCgpLnRvcCAqIGN1cnJlbnRab29tKSArIGVsLnBhcmVudEVsZW1lbnQuc2Nyb2xsVG9wIC0gMTUwLFxuICAvLyAgICAgICB9O1xuICAvLyAgICAgICBlbC5wYXJlbnRFbGVtZW50LnNjcm9sbFRvKG9wdGlvbnMpO1xuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIHByaXZhdGUgaGlnaGxpZ2h0RWwoZWw6IEVsZW1lbnQpIHtcbiAgLy8gICBjb25zdCB0ZXh0Tm9kZXMgPSAkKGVsKS5maW5kKCcqJykuY29udGVudHMoKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAvLyAgICAgY29uc3Qgbm9kZU5hbWUgPSB0aGlzLnBhcmVudEVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgLy8gICAgIGNvbnN0IGNoZWNrQ2xhc3MgPSAoPEVsZW1lbnQ+dGhpcykuY2xhc3NMaXN0ID8gISg8RWxlbWVudD50aGlzKS5jbGFzc0xpc3QuY29udGFpbnMoJ2dkLWhpZ2hsaWdodCcpIDogdHJ1ZTtcbiAgLy8gICAgIHJldHVybiB0aGlzLm5vZGVUeXBlID09PSAzICYmXG4gIC8vICAgICAgIHRoaXMudGV4dENvbnRlbnQudHJpbSgpLmxlbmd0aCAhPT0gMCAmJlxuICAvLyAgICAgICBub2RlTmFtZSAhPT0gJ3N0eWxlJyAmJlxuICAvLyAgICAgICBub2RlTmFtZSAhPT0gJ3RpdGxlJyAmJlxuICAvLyAgICAgICBub2RlTmFtZSAhPT0gJ2JvZHknICYmXG4gIC8vICAgICAgIG5vZGVOYW1lICE9PSAnc2NyaXB0JyAmJlxuICAvLyAgICAgICBjaGVja0NsYXNzO1xuICAvLyAgIH0pO1xuICAvLyAgIGNvbnN0IHRleHQgPSB0aGlzLnRleHQ7XG4gIC8vICAgY29uc3QgaGlnaGxpZ2h0ID0gdGhpcy5faGlnaGxpZ2h0O1xuICAvLyAgIHRleHROb2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgLy8gICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKTtcbiAgLy8gICAgIGxldCBjb250ZW50ID0gJHRoaXMudGV4dCgpO1xuICAvLyAgICAgY29udGVudCA9IGhpZ2hsaWdodC50cmFuc2Zvcm0oY29udGVudCwgdGV4dCk7XG4gIC8vICAgICAkdGhpcy5yZXBsYWNlV2l0aChjb250ZW50KTtcbiAgLy8gICB9KTtcbiAgLy8gICBlbC5ub3JtYWxpemUoKTtcbiAgLy8gfVxuXG4gIC8vIHByaXZhdGUgY2xlYW5IaWdobGlnaHQoZWw6IEhUTUxFbGVtZW50KSB7XG4gIC8vICAgY29uc3Qgbm9kZUxpc3RPZiA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5nZC1oaWdobGlnaHQnKTtcbiAgLy8gICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVMaXN0T2YubGVuZ3RoOyBpKyspIHtcbiAgLy8gICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlTGlzdE9mLml0ZW0oaSk7XG4gIC8vICAgICBlbGVtZW50LnJlcGxhY2VXaXRoKCg8SFRNTEVsZW1lbnQ+ZWxlbWVudCkuaW5uZXJUZXh0KTtcbiAgLy8gICB9XG4gIC8vICAgZWwubm9ybWFsaXplKCk7XG4gIC8vIH1cblxuICBwcml2YXRlIGdldFpvb20oKSB7XG4gICAgcmV0dXJuIHRoaXMuem9vbSAvIDEwMDtcbiAgfVxufVxuIl19