/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
//import { FileUploadComponent } from './upload/file-upload/file-upload.component';
import { BsModalService } from '@farris/ui-modal';
import { FileListComponent } from './file-list/file-list/file-list.component';
import { FileListService } from './service/file-list.service';
import { MessagerService } from '@farris/ui-messager';
import { CloudprintService, PrintType, FileType, OutputType } from "@gsp-svc/cloudprint";
import { PdfViewOptions } from './pdf-viewer/entitires/pdfviewoptions';
import { AppService } from '@gsp-sys/rtf-common';
import { UUID } from 'angular2-uuid';
//import { UploadLimit } from './upload/entity/uploadlimit';
export class FileViewerService {
    /**
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} injector
     * @param {?} fileListService
     * @param {?} msgService
     * @param {?} cloudprintService
     * @param {?} appService
     */
    constructor(modalService, componentFactoryResolver, injector, fileListService, msgService, cloudprintService, appService) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileListService = fileListService;
        this.msgService = msgService;
        this.cloudprintService = cloudprintService;
        this.appService = appService;
        this.windowWidth = window.innerWidth;
        this.windowHeigth = window.innerHeight;
    }
    //fileInfoList: UploadFileInfo[] = [];
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFile(formId, rootId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.formId = formId;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileList(metadataIdList, rootId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.metadataIdList = metadataIdList;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.metadataIdList = metadataIdList;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFileWithIndex(formId, rootId, metadataId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            viewerRef.instance.metadataId = metadataId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.formId = formId;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileListWithIndex(metadataIdList, rootId, metadataId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.metadataIdList = metadataIdList;
            viewerRef.instance.metadataId = metadataId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.metadataIdList = metadataIdList;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    mergeAndViewPdfFiles(metadataIdList, rootId) {
        this.fileListService.getMergedFile(metadataIdList, rootId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res.error != null) {
                this.msgService.error(res.error.Message);
            }
            else {
                /** @type {?} */
                let options = {
                    OutputType: OutputType.PRINT,
                    FileType: FileType.Pdf,
                    Path: '',
                    DeviceId: '',
                    printType: PrintType.Form
                };
                this.cloudprintService.openRendedViewer4Attachment("tab", res, options);
            }
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFileInpage(formId, rootId, viewOptions = new PdfViewOptions) {
        this.viewerFormFileWithIndexInPage(formId, rootId, null, viewOptions);
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileListInPage(metadataIdList, rootId, viewOptions = new PdfViewOptions) {
        this.viewerFileListWithIndexInPage(metadataIdList, rootId, null, viewOptions);
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFileWithIndexInPage(formId, rootId, metadataId, viewOptions = new PdfViewOptions) {
        this.appService.openAppByOptions({
            appType: 'app',
            funcId: '',
            tabName: '文档在线预览',
            appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
            appEntrance: 'docviewertab',
            tabId: UUID.UUID(),
            entityParams: {
                formId: formId,
                rootId: rootId,
                metadataId: metadataId,
                viewOptions: viewOptions
            },
        });
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileListWithIndexInPage(metadataIdList, rootId, metadataId, viewOptions = new PdfViewOptions) {
        this.appService.openAppByOptions({
            appType: 'app',
            funcId: '',
            tabName: '文档在线预览',
            appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
            appEntrance: 'docviewertab',
            tabId: UUID.UUID(),
            entityParams: {
                metadataIdList: metadataIdList,
                rootId: rootId,
                metadataId: metadataId,
                viewOptions: viewOptions
            },
        });
    }
}
FileViewerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileViewerService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: FileListService },
    { type: MessagerService },
    { type: CloudprintService },
    { type: AppService }
];
if (false) {
    /** @type {?} */
    FileViewerService.prototype.dlg;
    /** @type {?} */
    FileViewerService.prototype.windowWidth;
    /** @type {?} */
    FileViewerService.prototype.windowHeigth;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.fileListService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.cloudprintService;
    /**
     * @type {?}
     * @private
     */
    FileViewerService.prototype.appService;
}
//# sourceMappingURL=data:application/json;base64,