/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
import { StorageType } from '../file-list-mobile/entity/storagetype';
import { FileListService } from '../service/file-list.service';
import { UnifileInfo } from './entity/unifileinfo';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { GspFileViewType } from '../file-list-mobile/entity/gspfileviewtype';
import { ImageViewerComponent } from '../image-viewer/image-viewer/image-viewer.component';
import { DocViewerComponent } from '../doc-viewer/doc-viewer/doc-viewer.component';
import { OfdViewerComponent } from '../ofd-viewer/ofd-viewer/ofd-viewer.component';
import { PdfViewerComponent } from '../pdf-viewer/pdf-viewer/pdf-viewer.component';
import { PdfViewOptions } from '../pdf-viewer/entitires/pdfviewoptions';
import { UrlFileInfo } from './entity/urlfileinfo';
import { CostomFileInfo } from './entity/customfileinfo';
export class GspViewerComponent {
    /**
     * @param {?} listService
     * @param {?} msgService
     * @param {?} loadService
     */
    constructor(listService, msgService, loadService) {
        this.listService = listService;
        this.msgService = msgService;
        this.loadService = loadService;
        this.viewOptions = new PdfViewOptions;
        this.isImage = true;
        this.isOfd = true;
        this.isPdf = true;
        //srcList: string[] = [];
        this.isDocShow = false;
        this.isOfdShow = false;
        this.isPdfShow = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewFile(this.filePath, this.metadataId, this.rootId, this.fileType, this.fileName, this.serviceUnit, this.params);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.viewFile(this.filePath, this.metadataId, this.rootId, this.fileType, this.fileName, this.serviceUnit, this.params);
    }
    /**
     * @param {?} filePath
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} fileType
     * @param {?} fileName
     * @param {?} suName
     * @param {?} params
     * @return {?}
     */
    viewFile(filePath, metadataId, rootId, fileType, fileName, suName, params) {
        if (fileType == StorageType.UniFile) {
            /** @type {?} */
            let info = new UnifileInfo;
            info.metadataId = metadataId;
            info.rootId = rootId;
            filePath = JSON.stringify(info);
        }
        if (fileType == StorageType.Url) {
            /** @type {?} */
            let info = new UrlFileInfo;
            info.fileUrl = filePath;
            info.fileName = fileName;
            filePath = JSON.stringify(info);
        }
        if (fileType == StorageType.Customer) {
            /** @type {?} */
            let info = new CostomFileInfo;
            info.suName = suName;
            info.param = params;
            filePath = JSON.stringify(info);
        }
        /** @type {?} */
        const loading = this.loadService.show({
            message: '拼命的请求中'
        });
        this.listService.getViewFile(filePath, fileType).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            loading.close();
            if (res.error != null) {
                this.msgService.warning('获取预览文件失败' + res.error.Message);
            }
            else {
                this.file = res;
                this.fileChange();
            }
        }));
    }
    /**
     * @return {?}
     */
    fileChange() {
        //this.file=src;
        this.isImage = this.file.fileType == GspFileViewType.Image || this.file.fileType == 'Image';
        this.isOfd = this.file.fileType == GspFileViewType.Ofd || this.file.fileType == 'Ofd';
        this.isPdf = this.file.fileType == GspFileViewType.Pdf || this.file.fileType == 'Pdf';
        if (this.isImage) {
            this.isDocShow = false;
            this.isOfdShow = false; //this.imageChange(this.file.fileUrl);
            return;
        }
        else if (this.isOfd) {
            //this.file.fileUrl="/platform/runtime/dfs/images/file.jpg";
            if (this.isOfdShow)
                this.ofdChange(this.file.filePath);
            else {
                this.isDocShow = false;
                this.isOfdShow = true;
                this.isPdfShow = false;
            }
        }
        else if (this.isPdf) {
            if (this.isPdfShow)
                this.pdfChange(this.file.filePath);
            else {
                this.isDocShow = false;
                this.isOfdShow = false;
                this.isPdfShow = true;
            }
        }
        else {
            if (this.isDocShow)
                this.docChange(this.file.filePath);
            else {
                this.isDocShow = true;
                this.isOfdShow = false;
                this.isPdfShow = false;
            }
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    imageChange(url) {
        this.imageUrl = url;
        this.imageViewer.imageChange(url);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    docChange(filePath) {
        this.docPath = filePath;
        this.docViewer.docChange(filePath);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    pdfChange(filePath) {
        //this.docPath = filePath;
        this.pdfViewer.pdfChange(filePath);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    ofdChange(filePath) {
        this.ofdViewer.fileChange(filePath);
    }
}
GspViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'gsp-viewer',
                template: "<div class=\"f-page\">\n    <div *ngIf='isImage&&!isOfd&&!isPdf'>\n        <app-image-viewer [imageUrl]=\"file.fileUrl\"></app-image-viewer>\n    </div>\n    <div *ngIf='!isImage&&!isOfd&&!isPdf'>\n        <app-doc-viewer [filePath]=\"file.filePath\"></app-doc-viewer>\n    </div>\n    <div *ngIf='!isImage&&isOfd&&!isPdf'>\n        <app-ofd-viewer [filePath]=\"file.filePath\"></app-ofd-viewer>\n    </div>\n    <div *ngIf='!isImage&&!isOfd&&isPdf' class=\"f-utils-fill\" style=\"height: 100%\">\n        <app-pdf-viewer [pdfUrl]=\"file.filePath\" [viewOptions]=\"viewOptions\"></app-pdf-viewer>\n    </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
GspViewerComponent.ctorParameters = () => [
    { type: FileListService },
    { type: MessagerService },
    { type: LoadingService }
];
GspViewerComponent.propDecorators = {
    filePath: [{ type: Input }],
    metadataId: [{ type: Input }],
    rootId: [{ type: Input }],
    fileName: [{ type: Input }],
    fileType: [{ type: Input }],
    viewOptions: [{ type: Input }],
    serviceUnit: [{ type: Input }],
    params: [{ type: Input }],
    imageViewer: [{ type: ViewChild, args: [ImageViewerComponent,] }],
    docViewer: [{ type: ViewChild, args: [DocViewerComponent,] }],
    ofdViewer: [{ type: ViewChild, args: [OfdViewerComponent,] }],
    pdfViewer: [{ type: ViewChild, args: [PdfViewerComponent,] }]
};
if (false) {
    /** @type {?} */
    GspViewerComponent.prototype.filePath;
    /** @type {?} */
    GspViewerComponent.prototype.metadataId;
    /** @type {?} */
    GspViewerComponent.prototype.rootId;
    /** @type {?} */
    GspViewerComponent.prototype.fileName;
    /** @type {?} */
    GspViewerComponent.prototype.fileType;
    /** @type {?} */
    GspViewerComponent.prototype.viewOptions;
    /** @type {?} */
    GspViewerComponent.prototype.serviceUnit;
    /** @type {?} */
    GspViewerComponent.prototype.params;
    /** @type {?} */
    GspViewerComponent.prototype.file;
    /** @type {?} */
    GspViewerComponent.prototype.isImage;
    /** @type {?} */
    GspViewerComponent.prototype.isOfd;
    /** @type {?} */
    GspViewerComponent.prototype.isPdf;
    /** @type {?} */
    GspViewerComponent.prototype.imageUrl;
    /** @type {?} */
    GspViewerComponent.prototype.docPath;
    /** @type {?} */
    GspViewerComponent.prototype.isDocShow;
    /** @type {?} */
    GspViewerComponent.prototype.isOfdShow;
    /** @type {?} */
    GspViewerComponent.prototype.isPdfShow;
    /** @type {?} */
    GspViewerComponent.prototype.imageViewer;
    /** @type {?} */
    GspViewerComponent.prototype.docViewer;
    /** @type {?} */
    GspViewerComponent.prototype.ofdViewer;
    /** @type {?} */
    GspViewerComponent.prototype.pdfViewer;
    /**
     * @type {?}
     * @private
     */
    GspViewerComponent.prototype.listService;
    /**
     * @type {?}
     * @private
     */
    GspViewerComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    GspViewerComponent.prototype.loadService;
}
//# sourceMappingURL=data:application/json;base64,