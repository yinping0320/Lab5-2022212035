import { OnInit, Injector } from '@angular/core';
import { DocViewerConfig } from '../entity/docviewerconfig';
import { DocViewerService } from '../../service/doc-viewer.service';
import { FileCredentials } from '../../service/file.service';
import { ZoomService } from '../../service/zoom.service';
import { NavigateService } from '../../service/navigate.service';
import { WindowService } from '../../service/window.service';
import { LoadingService } from '@farris/ui-loading';
import { FileDescription } from '../../gsp-document/entities/filedescription';
import { ExcelDocumentComponent } from '../../excel-document/excel-document.component';
import { PagePreloadService } from '../../service/page-preload.service';
export declare class DocViewerComponent implements OnInit {
    private _viewerService;
    private _zoomService;
    private _navigateService;
    private _windowService;
    private loadService;
    private pagePreloadService;
    private injector?;
    excelView: ExcelDocumentComponent;
    filePath: string;
    title: string;
    file: FileDescription;
    viewerConfig: DocViewerConfig;
    countPages: number;
    formatDisabled: boolean;
    showThumbnails: boolean;
    showSearch: boolean;
    isDesktop: boolean;
    isLoading: boolean;
    credentials: FileCredentials;
    _zoom: number;
    _pageWidth: number;
    _pageHeight: number;
    options: any;
    fileWasDropped: boolean;
    constructor(_viewerService: DocViewerService, _zoomService: ZoomService, _navigateService: NavigateService, _windowService: WindowService, loadService: LoadingService, pagePreloadService: PagePreloadService, injector?: Injector);
    preloadPages(start: number, end: number): void;
    viewType(file: FileDescription): boolean;
    ngOnInit(): void;
    rotate(deg: number): void;
    private changeAngle;
    docChange(filePath: string): void;
    getFile(): any;
    notExcel(): boolean;
    readonly rewriteConfig: boolean;
    readonly zoomConfig: boolean;
    readonly pageSelectorConfig: boolean;
    readonly searchConfig: boolean;
    readonly thumbnailsConfig: boolean;
    readonly rotateConfig: boolean;
    readonly downloadConfig: boolean;
    readonly uploadConfig: boolean;
    readonly printConfig: boolean;
    readonly browseConfig: boolean;
    readonly htmlModeConfig: boolean;
    readonly saveRotateStateConfig: boolean;
    readonly enableRightClickConfig: boolean;
    style: {
        transform: string;
        msTransform: string;
        oTransform: string;
        webkitTransform: string;
    };
    scale: number;
    rotation: number;
    translateX: number;
    translateY: number;
    rotateClockwise(): void;
    rotateCounterClockwise(): void;
    readonly currentPage: number;
    nextPage(): void;
    prevPage(): void;
    toLastPage(): void;
    toFirstPage(): void;
    navigateToPage(page: number): void;
    zoomIn(): void;
    zoomOut(): void;
    zoomReset(): void;
    zoomOptions(): {
        value: any;
        name: string;
        separator: boolean;
    }[];
    private refreshZoom;
    private getFitToWidth;
    private getFitToHeight;
    private ptToPx;
    zoom: any;
}
