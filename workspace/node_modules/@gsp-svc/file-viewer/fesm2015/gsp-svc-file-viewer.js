import * as jquery from 'jquery';
import jquery__default, {  } from 'jquery';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { catchError, tap, debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { of, Subject, Observable, fromEvent } from 'rxjs';
import { DomSanitizer } from '@angular/platform-browser';
import { WindowContainerService, WindowService } from '@progress/kendo-angular-dialog';
import { ModalModule, BsModalService } from '@farris/ui-modal';
import { CloudprintService, ɵa, ɵb, ɵc, PrintType, FileType, OutputType } from '@gsp-svc/cloudprint';
import { AppService } from '@gsp-sys/rtf-common';
import { UUID } from 'angular2-uuid';
import { CommonModule } from '@angular/common';
import { Component, Input, NgModule, Injectable, ElementRef, ViewChildren, Renderer2, ChangeDetectorRef, Injector, ComponentFactoryResolver, Pipe, Directive, HostBinding, HostListener, ViewChild, defineInjectable, inject } from '@angular/core';
import { LoadingModule, LoadingService } from '@farris/ui-loading';
import { MessagerModule, MessagerService } from '@farris/ui-messager';
import { NotifyModule } from '@farris/ui-notify';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageViewerComponent {
    constructor() {
        this.index = 0;
        this.style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };
        this.scale = 1;
        this.rotation = 0;
        this.translateX = 0;
        this.translateY = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    zoomIn() {
        this.scale < 4 ? this.scale += 0.1 : 4;
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    zoomOut() {
        this.scale > 0.3 ? this.scale -= 0.1 : 0.3;
        this.scale = Number(this.scale.toFixed(1));
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    zoomReset() {
        this.scale = 1;
        this.updateStyle();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    scrollZoom(evt) {
        evt.deltaY > 0 ? this.zoomOut() : this.zoomIn();
        return false;
    }
    /**
     * @return {?}
     */
    rotateClockwise() {
        this.rotation += 90;
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    rotateCounterClockwise() {
        this.rotation -= 90;
        this.updateStyle();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onDragStart(evt) {
        this.prevX = evt.clientX;
        this.prevY = evt.clientY;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onDragOver(evt) {
        this.translateX += (evt.clientX - this.prevX);
        this.translateY += (evt.clientY - this.prevY);
        this.prevX = evt.clientX;
        this.prevY = evt.clientY;
        this.updateStyle();
    }
    // @HostListener('window:keyup.ArrowLeft')
    // preFile() {
    //   if (this.index > 0) {
    //     this.index -= 1;
    //     this.reset();
    //   }
    // }
    // @HostListener('window:keyup.ArrowRight')
    // nextFile() {
    //   if (this.index < this.src.length - 1) {
    //     this.index += 1;
    //     this.reset();
    //   }
    // }
    /**
     * @param {?} url
     * @return {?}
     */
    imageChange(url) {
        this.imageUrl = url;
        this.reset();
    }
    /**
     * @return {?}
     */
    reset() {
        this.scale = 1;
        this.rotation = 0;
        this.translateX = 0;
        this.translateY = 0;
        this.updateStyle();
    }
    /**
     * @return {?}
     */
    updateStyle() {
        this.style.transform = `translate(${this.translateX}px, ${this.translateY}px) rotate(${this.rotation}deg) scale(${this.scale})`;
        this.style.msTransform = this.style.transform;
        this.style.webkitTransform = this.style.transform;
        this.style.oTransform = this.style.transform;
    }
}
ImageViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-image-viewer',
                template: "<div (wheel)=\"scrollZoom($event)\" (dragover)=\"onDragOver($event)\" (dragstart)=\"onDragStart($event)\"  >\n  <img [src]='imageUrl' id=\"image\" [ngStyle]=\"style\">\n  <!-- <div>\n      <button id=\"zoomin\" kendoButton [icon]=\"'zoom-in'\" (click)=\"zoomIn()\"></button>\n      <button id=\"zoomout\" kendoButton [icon]=\"'zoom-out'\" (click)=\"zoomOut()\"></button>\n      <button id=\"clockwise\" kendoButton [icon]=\"'reload'\" (click)=\"rotateClockwise()\"></button>\n      <button id=\"counterclockwise\" kendoButton [icon]=\"'reset'\" (click)=\"rotateCounterClockwise()\"></button>\n  </div> -->\n  <!--div id=\"picchange\">\n      <button *ngIf=\"src.length>1\" id=\"prepic\" kendoButton [icon]=\"'arrow-chevron-left'\" (click)=\"prePicture()\"\n          [disabled]=\"index == 0\"></button>\n\n      <button *ngIf=\"src.length>1\" id=\"nextpic\" kendoButton [icon]=\"'arrow-chevron-right'\" (click)=\"nextPicture()\"\n          [disabled]=\"index == src.length - 1\"></button>\n  </div-->\n</div>\n",
                styles: ["#image{text-align:center;margin:auto;top:0;left:0;bottom:0;right:0;position:absolute;max-height:100%;max-width:100%;overflow:hidden}#zoomin{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:285px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#zoomout{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:205px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#clockwise{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:125px;transform:scale(1.5) rotate(45deg);-ms-transform:scale(1.5) rotate(45deg);-moz-transform:scale(1.5) rotate(45deg);-webkit-transform:scale(1.5) rotate(45deg);-o-transform:scale(1.5) rotate(45deg)}#counterclockwise{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:45px;transform:scale(1.5) rotate(-45deg);-ms-transform:scale(1.5) rotate(-45deg);-moz-transform:scale(1.5) rotate(-45deg);-webkit-transform:scale(1.5) rotate(-45deg);-o-transform:scale(1.5) rotate(-45deg)}#prepic{width:40px;height:40px;border-radius:20px;position:absolute;bottom:25px;right:50px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#nextpic{width:40px;height:40px;border-radius:20px;position:relative;bottom:25px;left:50px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#picchange{position:fixed;bottom:0;left:50%}"]
            }] }
];
/** @nocollapse */
ImageViewerComponent.ctorParameters = () => [];
ImageViewerComponent.propDecorators = {
    imageUrl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageViewerModule {
}
ImageViewerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ImageViewerComponent],
                imports: [
                    CommonModule,
                    ButtonsModule,
                    MessagerModule.forRoot(),
                    ModalModule.forRoot(),
                    LoadingModule.forRoot({
                        message: 'Loading...'
                    }),
                ],
                exports: [ImageViewerComponent],
                entryComponents: [ImageViewerComponent],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DocViewRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Api {
}
Api.VIEWER_APP = '/viewer';
Api.EDITOR_APP = '/editor';
Api.COMPARISON_APP = '/comparison';
Api.CONVERSION_APP = '/conversion';
Api.DEFAULT_API_ENDPOINT = window.location.href;
Api.LOAD_FILE_TREE = '/loadFileTree';
Api.LOAD_CONFIG = '/loadConfig';
Api.LOAD_DOCUMENT_DESCRIPTION = '/loadDocumentDescription';
Api.LOAD_DOCUMENT_PAGE = '/loadDocumentPage';
Api.ROTATE_DOCUMENT_PAGE = '/rotateDocumentPages';
Api.UPLOAD_DOCUMENTS = '/uploadDocument';
Api.DOWNLOAD_DOCUMENTS = '/downloadDocument';
Api.LOAD_PRINT = '/loadPrint';
Api.LOAD_PRINT_PDF = '/printPdf';
Api.LOAD_THUMBNAILS = '/loadThumbnails';
Api.LOAD_FORMATS = '/loadFormats';
Api.SAVE_FILE = '/saveFile';
Api.COMPARE_FILES = '/compare';
Api.CONVERT_FILE = '/convert';
Api.httpOptionsJson = {
    headers: new HttpHeaders({
        'Content-Type': 'application/json',
    })
};
Api.httpOptionsJsonResponseTypeBlob = {
    headers: new HttpHeaders({
        'Content-Type': 'application/json',
    }),
    responseType: (/** @type {?} */ ('blob'))
};
class ConfigService {
    constructor() {
        this.apiEndpoint = Api.DEFAULT_API_ENDPOINT;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    set apiEndpoint(url) {
        this._apiEndpoint = url && url.trim().endsWith('/') ? url.substring(0, url.length - 1) : url;
    }
    /**
     * @param {?} app
     * @return {?}
     */
    getConfigEndpoint(app) {
        return (this.apiEndpoint.endsWith(app) ? this.apiEndpoint : this.apiEndpoint + app) + Api.LOAD_CONFIG;
    }
    /**
     * @return {?}
     */
    getViewerApiEndpoint() {
        return this._apiEndpoint.endsWith(Api.VIEWER_APP) ? this._apiEndpoint : this._apiEndpoint + Api.VIEWER_APP;
    }
    /**
     * @return {?}
     */
    getEditorApiEndpoint() {
        return this._apiEndpoint.trim().endsWith(Api.EDITOR_APP) ? this._apiEndpoint : this._apiEndpoint + Api.EDITOR_APP;
    }
    /**
     * @return {?}
     */
    getComparisonApiEndpoint() {
        return this._apiEndpoint.trim().endsWith(Api.COMPARISON_APP) ? this._apiEndpoint : this._apiEndpoint + Api.COMPARISON_APP;
    }
    /**
     * @return {?}
     */
    getConversionApiEndpoint() {
        return this._apiEndpoint.trim().endsWith(Api.CONVERSION_APP) ? this._apiEndpoint : this._apiEndpoint + Api.CONVERSION_APP;
    }
    /**
     * @return {?}
     */
    get apiEndpoint() {
        return this._apiEndpoint;
    }
}
ConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ConfigService.ctorParameters = () => [];
/** @nocollapse */ ConfigService.ngInjectableDef = defineInjectable({ factory: function ConfigService_Factory() { return new ConfigService(); }, token: ConfigService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RotateDocumentPagesRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DocViewerService {
    /**
     * @param {?} http
     * @param {?} _http
     * @param {?} _config
     */
    constructor(http, _http, _config) {
        this.http = http;
        this._http = _http;
        this._config = _config;
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    setHeader(options) {
        options.headers = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        };
        return options;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    loadFileInfo(body) {
        /** @type {?} */
        let url = '/api/runtime/dfs/v1.0/docviewer/loaddocument';
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    // loadFiles(path: string) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_FILE_TREE, {'path': path}, Api.httpOptionsJson);
    // }
    // loadFile(credentials: FileCredentials) {
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_DOCUMENT_DESCRIPTION, credentials, Api.httpOptionsJson);
    // }
    // upload(file: File, url: string, rewrite: boolean) {
    //   const formData = new FormData();
    //   formData.append("file", file);
    //   formData.append('rewrite', String(rewrite));
    //   if (url) {
    //     formData.append("url", url);
    //   }
    //   return this._http.post(this._config.getViewerApiEndpoint() + Api.UPLOAD_DOCUMENTS, formData);
    // }
    /**
     * @param {?} credentials
     * @param {?} page
     * @return {?}
     */
    loadPage(credentials, page) {
        return this._http.post('/api/runtime/dfs/v1.0/docviewer/loaddocumentPage', {
            'filePath': credentials.guid,
            'password': credentials.password,
            'page': page
        }, Api.httpOptionsJson);
    }
    /**
     * @param {?} credentials
     * @param {?} angle
     * @param {?} page
     * @return {?}
     */
    rotate(credentials, angle, page) {
        /** @type {?} */
        let url = '/api/runtime/dfs/v1.0/docviewer/rotatedocumentPage';
        // return this._http.post(url, {
        //   'filePath': credentials.guid,
        //   'password': credentials.password,
        //   'pages': [page],
        //   'angle': angle
        // }, Api.httpOptionsJson);
        /** @type {?} */
        let body = new RotateDocumentPagesRequest;
        body.filePath = credentials.guid;
        body.angle = angle;
        body.pages = [page];
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
}
DocViewerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DocViewerService.ctorParameters = () => [
    { type: HttpService },
    { type: HttpClient },
    { type: ConfigService }
];
/** @nocollapse */ DocViewerService.ngInjectableDef = defineInjectable({ factory: function DocViewerService_Factory() { return new DocViewerService(inject(HttpService), inject(HttpClient), inject(ConfigService)); }, token: DocViewerService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ZoomService {
    constructor() {
        this._observer = new Subject();
        this._zoomChange = this._observer.asObservable();
    }
    /**
     * @return {?}
     */
    get zoom() {
        return this._zoom;
    }
    /**
     * @return {?}
     */
    get zoomChange() {
        return this._zoomChange;
    }
    /**
     * @param {?} zoom
     * @return {?}
     */
    changeZoom(zoom) {
        this._zoom = zoom;
        this._observer.next(zoom);
    }
    /**
     * @private
     * @param {?} val
     * @param {?} name
     * @param {?=} sep
     * @return {?}
     */
    createZoomOption(val, name, sep = false) {
        return { value: val, name: name, separator: sep };
    }
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    zoomOptions(width, height) {
        return [this.createZoomOption(25, '25%'),
            this.createZoomOption(50, '50%'),
            this.createZoomOption(100, '100%'),
            this.createZoomOption(150, '150%'),
            this.createZoomOption(200, '200%'),
            this.createZoomOption(300, '300%'),
            this.createZoomOption(0, '', true),
            this.createZoomOption(width, 'Fit Width'),
            this.createZoomOption(height, 'Fit Height')];
    }
}
ZoomService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ZoomService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PagePreloadService {
    constructor() {
        this._checkPreload = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => this._observer = observer));
    }
    /**
     * @return {?}
     */
    get checkPreload() {
        return this._checkPreload;
    }
    /**
     * @param {?} page
     * @return {?}
     */
    changeLastPageInView(page) {
        if (this._observer) {
            this._observer.next(page);
        }
    }
}
PagePreloadService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PagePreloadService.ctorParameters = () => [];
/** @nocollapse */ PagePreloadService.ngInjectableDef = defineInjectable({ factory: function PagePreloadService_Factory() { return new PagePreloadService(); }, token: PagePreloadService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NavigateService {
    /**
     * @param {?} _pagePreloadService
     */
    constructor(_pagePreloadService) {
        this._pagePreloadService = _pagePreloadService;
        this._currentPage = 0;
        this._countPages = 0;
        this._navigate = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => this._observer = observer));
    }
    /**
     * @return {?}
     */
    get navigate() {
        return this._navigate;
    }
    /**
     * @return {?}
     */
    get countPages() {
        return this._countPages;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set countPages(value) {
        this._countPages = value;
    }
    /**
     * @return {?}
     */
    get currentPage() {
        return this._currentPage;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentPage(value) {
        this._currentPage = value;
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (this._currentPage < this._countPages) {
            this._currentPage++;
            this.navigateTo(this._currentPage);
        }
    }
    /**
     * @return {?}
     */
    prevPage() {
        if (this._currentPage > 1) {
            this._currentPage--;
            this.navigateTo(this._currentPage);
        }
    }
    /**
     * @return {?}
     */
    toLastPage() {
        this._currentPage = this._countPages;
        this.navigateTo(this._currentPage);
    }
    /**
     * @return {?}
     */
    toFirstPage() {
        this._currentPage = 1;
        this.navigateTo(this._currentPage);
    }
    /**
     * @param {?} page
     * @return {?}
     */
    navigateTo(page) {
        this.currentPage = page;
        this._pagePreloadService.changeLastPageInView(page);
        this._observer.next(page);
    }
}
NavigateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NavigateService.ctorParameters = () => [
    { type: PagePreloadService }
];
/** @nocollapse */ NavigateService.ngInjectableDef = defineInjectable({ factory: function NavigateService_Factory() { return new NavigateService(inject(PagePreloadService)); }, token: NavigateService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MOBILE_MAX_WIDTH = 425;
/** @type {?} */
const TABLET_MAX_WIDTH = 1024;
class WindowService$1 {
    constructor() {
        this.resizeSubject = new Subject();
        this.width = window.innerWidth;
        this.height = window.innerHeight;
        this._resize$ = fromEvent(window, 'resize')
            .pipe(debounceTime(200), distinctUntilChanged(), startWith({ target: { innerWidth: window.innerWidth, innerHeight: window.innerHeight } }), tap((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.resizeSubject.next((/** @type {?} */ (event.target)));
            this.width = ((/** @type {?} */ (event.target))).innerWidth;
            this.height = ((/** @type {?} */ (event.target))).innerHeight;
        })));
        this._resize$.subscribe();
    }
    /**
     * @return {?}
     */
    get onResize() {
        return this.resizeSubject.asObservable();
    }
    /**
     * @return {?}
     */
    isMobile() {
        return this.width <= MOBILE_MAX_WIDTH;
    }
    /**
     * @return {?}
     */
    isTablet() {
        return this.width <= TABLET_MAX_WIDTH;
    }
    /**
     * @return {?}
     */
    isDesktop() {
        return !this.isMobile() && !this.isTablet();
    }
    /**
     * @return {?}
     */
    getWidth() {
        return this.width;
    }
    /**
     * @return {?}
     */
    getHeight() {
        return this.height;
    }
    /**
     * @return {?}
     */
    isEdge() {
        return window.navigator.userAgent.toLowerCase().indexOf('edge') > -1;
    }
    /**
     * @return {?}
     */
    isFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    }
}
WindowService$1.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WindowService$1.ctorParameters = () => [];
/** @nocollapse */ WindowService$1.ngInjectableDef = defineInjectable({ factory: function WindowService_Factory() { return new WindowService$1(); }, token: WindowService$1, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExcelPageService {
    constructor() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getUpdatedPage(data) {
        /** @type {?} */
        const doc = new DOMParser().parseFromString(data, "text/html");
        /** @type {?} */
        const table = doc.querySelector('table');
        /** @type {?} */
        let numCellsInFirstRow = 0;
        /** @type {?} */
        const cellsFromFirstRow = doc.querySelectorAll('table > tbody > tr:first-child td');
        cellsFromFirstRow.forEach((/**
         * @param {?} elm
         * @return {?}
         */
        elm => {
            numCellsInFirstRow += elm.attributes['colspan'] ? parseInt(elm.attributes['colspan'].value, 10) : 1;
        }));
        /** @type {?} */
        const newTable = this.createHeader(numCellsInFirstRow, table);
        doc.querySelector('table').replaceWith(newTable);
        /** @type {?} */
        const resultData = new XMLSerializer().serializeToString(doc)
        // work-around for FF which is adds a0 namespace during serialization
        ;
        // work-around for FF which is adds a0 namespace during serialization
        return resultData.replace(/a0:/g, "").replace(/:a0/g, "");
    }
    /**
     * @param {?} numCols
     * @param {?} table
     * @return {?}
     */
    createHeader(numCols, table) {
        /** @type {?} */
        const header = document.createElement('thead');
        header.append(document.createElement('tr'));
        for (let i = 0; i < numCols; ++i) {
            /** @type {?} */
            const th = document.createElement('th');
            th.innerText = this.colName(i);
            header.querySelector("tr").append(th);
        }
        /** @type {?} */
        const colgroup = table.querySelector('colgroup');
        /** @type {?} */
        const col = document.createElement('col');
        col.width = '80px';
        colgroup.prepend(col);
        table.prepend(header);
        /** @type {?} */
        let cnt = 0;
        table.querySelectorAll('tr').forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            /** @type {?} */
            const div = document.createElement('div');
            if (cnt !== 0) {
                /** @type {?} */
                const td = document.createElement('td');
                td.className = "excel";
                td.append(div);
                div.innerText = cnt.toString();
                row.prepend(td);
            }
            else {
                /** @type {?} */
                const th = document.createElement('th');
                th.append(div);
                row.prepend(th);
            }
            cnt++;
        }));
        return table;
    }
    /**
     * @param {?} n
     * @return {?}
     */
    colName(n) {
        /** @type {?} */
        const ordA = 'a'.charCodeAt(0);
        /** @type {?} */
        const ordZ = 'z'.charCodeAt(0);
        /** @type {?} */
        const len = ordZ - ordA + 1;
        /** @type {?} */
        let s = "";
        while (n >= 0) {
            s = String.fromCharCode(n % len + ordA) + s;
            n = Math.floor(n / len) - 1;
        }
        return s;
    }
}
ExcelPageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ExcelPageService.ctorParameters = () => [];
/** @nocollapse */ ExcelPageService.ngInjectableDef = defineInjectable({ factory: function ExcelPageService_Factory() { return new ExcelPageService(); }, token: ExcelPageService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExcelPageComponent {
    /**
     * @param {?} _excelPageService
     */
    constructor(_excelPageService) {
        this._excelPageService = _excelPageService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const isIE = /*@cc_on!@*/ !!/(MSIE|Trident\/|Edge\/)/i.test(navigator.userAgent);
        if (isIE && this.number === 0) {
            this.editable = false;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isHtml) {
            // TODO: this is temporary needed to remove unneeded spaces and BOM symbol 
            // which leads to undesired spaces on the top of the docs pages
            this.data = this.data
                ? this.data.replace(/>\s+</g, '><')
                    .replace(/\uFEFF/g, "")
                : null;
        }
        else {
            if (this.data) {
                this.imgData = this.data.startsWith('data:image')
                    ? this.data
                    : 'data:image/png;base64,' + this.data;
            }
        }
    }
}
ExcelPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-excel-page',
                template: "<div id=\"page-{{number}}\">\r\n    <div class=\"gd-wrapper\" [innerHTML]=\"data | safeHtml\" *ngIf=\"data && isHtml\" [contentEditable]=\"(editable) ? true : false\"></div>\r\n    <img class=\"gd-page-image\" [style.width.px]=\"width\" [style.height.px]=\"height\" [attr.src]=\"imgData | safeResourceHtml\" alt=\"\" *ngIf=\"data && !isHtml\">\r\n    <div class=\"gd-page-spinner\" *ngIf=\"!data\">\r\n        <!-- <fa-icon [icon]=\"['fas','circle-notch']\" [spin]=\"true\"></fa-icon> -->\r\n        <!-- &nbsp;Loading... Please wait. -->\r\n    </div>\r\n</div>",
                styles: [".gd-page-spinner{margin-top:150px;text-align:center}.gd-wrapper{width:inherit;height:inherit}.gd-wrapper div{width:100%}::ng-deep .gd-highlight{background-color:#ff0}::ng-deep .gd-highlight-select{background-color:#ff9b00}::ng-deep th{color:#959da5;background-color:#f4f4f4;font-weight:unset;border:1px solid #e7e7e7!important;text-transform:uppercase;font-size:14px;overflow:hidden}::ng-deep td{vertical-align:middle!important}::ng-deep .page-grid-lines td{border:1px solid #e7e7e7!important}::ng-deep .page td:nth-child(1){border:1px solid #e7e7e7!important}::ng-deep tr td.excel:first-child{color:#959da5;background-color:#f4f4f4;font-weight:unset;width:1%;text-align:center}::ng-deep tr td.excel:first-child div{width:80px}::ng-deep tr th.excel:first-child{background-color:#f4f4f4;width:1%}::ng-deep tr th.excel:first-child div{width:80px}.gd-page-image{height:100%!important;width:100%!important}"]
            }] }
];
/** @nocollapse */
ExcelPageComponent.ctorParameters = () => [
    { type: ExcelPageService }
];
ExcelPageComponent.propDecorators = {
    angle: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    number: [{ type: Input }],
    data: [{ type: Input }],
    isHtml: [{ type: Input }],
    editable: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileUtil {
    /**
     * @param {?} filename
     * @param {?} isDirectory
     * @return {?}
     */
    static find(filename, isDirectory) {
        if (filename && !isDirectory) {
            /** @type {?} */
            const strings = filename.split('.');
            /** @type {?} */
            const name = strings.pop().toLowerCase();
            if (typeof FileUtil.map[name] === "undefined") {
                return strings.length > 0 ? FileUtil.map['unknown'] : FileUtil.map['folder'];
            }
            else {
                return FileUtil.map[name];
            }
        }
        else {
            return FileUtil.map['folder'];
        }
    }
}
FileUtil.map = {
    'folder': { 'format': '', 'icon': 'folder' },
    'pdf': { 'format': 'Portable Document Format', 'icon': 'file-pdf' },
    'doc': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'docx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'docm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'dot': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'dotx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'dotm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'xls': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xlsx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xlsm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xlsb': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xls2003': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xltx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xltm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'ppt': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'pptx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'pps': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'ppsx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'vsd': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vss': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vsx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vst': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vtx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vsdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vdw': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vstx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vssx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'mpp': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
    'mpt': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
    'msg': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
    'eml': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
    'emlx': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
    'one': { 'format': 'Microsoft OneNote', 'icon': 'file-word' },
    'odt': { 'format': 'Open Document Text', 'icon': 'file-word' },
    'ott': { 'format': 'Open Document Text Template', 'icon': 'file-word' },
    'ods': { 'format': 'Open Document Spreadsheet', 'icon': 'file-excel' },
    'odp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'otp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'ots': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'potx': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'potm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'pptm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'ppsm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'rtf': { 'format': 'Rich Text Format', 'icon': 'file-alt' },
    'txt': { 'format': 'Plain Text File', 'icon': 'file-alt' },
    'csv': { 'format': 'Comma-Separated Values', 'icon': 'file-excel' },
    'html': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
    'mht': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
    'mhtml': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
    'xml': { 'format': 'Extensible Markup Language', 'icon': 'file-word' },
    'xps': { 'format': 'XML Paper Specification', 'icon': 'file-word' },
    'dxf': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
    'dwg': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
    'bmp': { 'format': 'Bitmap Picture', 'icon': 'file-image' },
    'gif': { 'format': 'Graphics Interchange Format', 'icon': 'file-image' },
    'jpg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'jpe': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'jpeg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'jfif': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'png': { 'format': 'Portable Network Graphics', 'icon': 'file-image' },
    'tiff': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'tif': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'psd': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'svg': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'jp2': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'epub': { 'format': 'Electronic Publication', 'icon': 'file-pdf' },
    'ico': { 'format': 'Windows Icon', 'icon': 'file-image' },
    'webp': { 'format': 'Compressed Image', 'icon': 'file-image' },
    'mobi': { 'format': 'Mobipocket eBook', 'icon': 'file-pdf' },
    'tex': { 'format': 'LaTeX Source Document', 'icon': 'file-pdf' },
    'djvu': { 'format': 'Multi-Layer Raster Image', 'icon': 'file-alt' },
    'unknown': { 'format': 'This format is not supported', 'icon': 'file' },
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspDocumentComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _zoomService
     * @param {?} _windowService
     * @param {?} _navigateService
     */
    constructor(_elementRef, _zoomService, _windowService, _navigateService) {
        this._elementRef = _elementRef;
        this._zoomService = _zoomService;
        this._windowService = _windowService;
        this._navigateService = _navigateService;
        this.wait = false;
        this.docWidth = null;
        this.docHeight = null;
        this.viewportWidth = null;
        this.viewportHeight = null;
        this.scale = null;
        this.lastScale = null;
        this.container = null;
        this.doc = null;
        this.x = 0;
        this.lastX = 0;
        this.y = 0;
        this.lastY = 0;
        this.pinchCenter = null;
        this.pinchCenterOffset = null;
        this.curWidth = 0;
        this.curHeight = 0;
        _zoomService.zoomChange.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this.zoom = val;
        }));
        this.isDesktop = _windowService.isDesktop();
        this._navigateService.navigate.subscribe((((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.selectedPage = value;
        }))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.ifPresentation()) {
            this.selectedPage = this._navigateService.currentPage;
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.refreshView = !this.refreshView;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // For current iteration we take .panzoom as a document
        this.doc = this._elementRef.nativeElement.children.item(0).children.item(0);
        // For current iteration we take .gd-document as a container
        this.container = this._elementRef.nativeElement;
        this.docWidth = this.doc.clientWidth;
        this.docHeight = this.doc.clientHeight;
        this.viewportWidth = this.doc.offsetWidth;
        // For cases where we already have zoom defined we should include it
        this.scale = (this.viewportWidth / this.docWidth) * this._zoomService.zoom / 100;
        this.lastScale = this.scale;
        this.viewportHeight = this.container.offsetHeight;
        this.curWidth = this.docWidth * this.scale;
        this.curHeight = this.docHeight * this.scale;
        //const hammer = new Hammer(this.container);
    }
    // TODO: this temporary crutch for Excel files should be documented
    /**
     * @return {?}
     */
    ifExcel() {
        return FileUtil.find(this.file.filePath, false).format === "Microsoft Excel";
    }
    /**
     * @return {?}
     */
    ifPresentation() {
        return FileUtil.find(this.file.filePath, false).format === "Microsoft PowerPoint";
    }
    /**
     * @param {?} value
     * @param {?} pageNumber
     * @return {?}
     */
    getDimensionWithUnit(value, pageNumber) {
        return this.ifPresentation() && this.showActiveSlide && !this.isVisible(pageNumber) ? 0 : value + (this.mode ? FileUtil.find(this.file.filePath, false).unit : 'px');
    }
    /**
     * @return {?}
     */
    ifChromeOrFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('chrome') > -1 || this.ifFirefox();
    }
    /**
     * @return {?}
     */
    ifFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    }
    /**
     * @return {?}
     */
    ifEdge() {
        return navigator.userAgent.toLowerCase().indexOf('edge') > -1;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        // for now we are not sure that need this action in current implementation
        // const elementNodeListOf = this._elementRef.nativeElement.querySelectorAll('.gd-wrapper');
        // const element = elementNodeListOf.item(0);
        // if (element) {
        //   $(element).trigger('focus');
        // }
    }
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    isVisible(pageNumber) {
        if (this.ifPresentation()) {
            return pageNumber === this.selectedPage ? true : false;
        }
        else {
            return true;
        }
    }
}
GspDocumentComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-gsp-document',
                template: "<!-- <div id=\"document\" class=\"document\" gdScrollable [onRefresh]=\"refreshView\">\n    <div class=\"panzoom\" gdZoom [zoomActive]=\"!ifEdge()\" gdSearchable>\n        <div [ngStyle]=\"divWidth\" [ngClass]=\"(ifFirefox() && zoom > 110) ? 'page gsp-zoomed' : 'page'\" *ngFor=\"let page of file?.pages\" gdZoom [zoomActive]=\"ifEdge()\" [isEdge]=\"ifEdge()\" [style.width.pt]=\"ifPdf() ? page.width : 'unset'\" [style.height.pt]=\"(ifPdf() || ifImage()) && ifChromeOrFirefox() ? page.height : 'unset'\"\n            gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\" [width]=\"page.width\" [height]=\"page.height\">\n            <app-gsp-page [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\"></app-gsp-page>\n        </div>\n    </div>\n    <ng-content></ng-content>\n</div> -->\n\n<div id=\"document\" class=\"document\" gdScrollable [onRefresh]=\"refreshView\">\n    <div [ngClass]=\"isDesktop ? 'panzoom' : 'panzoom mobile'\" gdZoom [zoomActive]=\"true\" [file]=\"file\" gdSearchable>\n        <div [ngClass]=\"ifExcel() ? 'page excel' : ifPresentation() && showActiveSlide ? (isVisible(page.number) ? 'page presentation active' : 'page presentation') : 'page'\" *ngFor=\"let page of file?.pages\" [style.height]=\"getDimensionWithUnit(page.height, page.number)\"\n            [style.width]=\"getDimensionWithUnit(page.width, page.number)\" gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\" [width]=\"page.width\" [height]=\"page.height\">\n            <app-gsp-page *ngIf=\"!showActiveSlide || isVisible(page.number)\" [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\" gdPageMarker></app-gsp-page>\n        </div>\n    </div>\n    <ng-content></ng-content>\n</div>",
                styles: [".document{background-color:#e7e7e7;width:100%;height:100%;overflow-x:auto;overflow-y:auto!important;transition:.4s;padding:0;margin:0;position:relative}.page{display:inline-block;background-color:#fff;margin:20px 0;box-shadow:0 4px 12px -4px rgba(0,0,0,.38);transition:.3s}.panzoom{-webkit-transform:none;transform:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:0 50% 0;transform-origin:0 50% 0;display:flex;justify-content:center;flex-wrap:wrap}.gsp-zoomed{margin:10px 98px}@media (max-width:1025px){.document{overflow-x:auto!important}.page{min-width:unset!important;min-height:unset!important;margin:5px 0}}"]
            }] }
];
/** @nocollapse */
GspDocumentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ZoomService },
    { type: WindowService$1 },
    { type: NavigateService }
];
GspDocumentComponent.propDecorators = {
    mode: [{ type: Input }],
    preloadPageCount: [{ type: Input }],
    file: [{ type: Input }],
    selectedPage: [{ type: Input }],
    showActiveSlide: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExcelDocumentComponent extends GspDocumentComponent {
    //@Input() file: FileDescription;
    /**
     * @param {?} _elementRef
     * @param {?} zoomService
     * @param {?} windowService
     * @param {?} navigateService
     * @param {?} viewerService
     * @param {?} renderer
     */
    constructor(_elementRef, zoomService, windowService, navigateService, viewerService, renderer) {
        super(_elementRef, zoomService, windowService, navigateService);
        this.viewerService = viewerService;
        this.renderer = renderer;
        this.panzoom = null;
        this.navigateService = navigateService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentPageNo = 1;
        document.getElementById("excelContent").style.height = document.getElementById("paneContent").offsetHeight - 23 + 'px';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.refreshExcelDocHeight();
        this.pages.changes.subscribe((/**
         * @return {?}
         */
        () => {
            this.refreshExcelDocHeight();
        }));
        this.navigateService.navigate.subscribe((((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value) {
                this.selectSheet(value);
            }
        }))));
        /** @type {?} */
        const scrollbarWidth = this.getScrollBarWidth();
        this.renderer.setStyle(this._elementRef.nativeElement.querySelector('.sheets'), 'right', this.getScrollBarWidth() + 'px');
        this.renderer.setStyle(this._elementRef.nativeElement.querySelector('.sheets'), 'bottom', this.getScrollBarWidth() + 'px');
        if (scrollbarWidth === 0) {
            this.renderer.setStyle(this._elementRef.nativeElement.querySelector('.sheets'), 'padding-right', '17px');
        }
    }
    /**
     * @return {?}
     */
    getScrollBarWidth() {
        /** @type {?} */
        const documentBox = (/** @type {?} */ (document.querySelector('.app-gsp-document')));
        /** @type {?} */
        const scrollbarWidth = documentBox.offsetWidth - documentBox.clientWidth;
        return scrollbarWidth;
    }
    /**
     * @return {?}
     */
    refreshExcelDocHeight() {
        // For current iteration we'll change actual height of .document
        this.doc = this._elementRef.nativeElement.children.item(0);
        this.panzoom = this._elementRef.nativeElement.children.item(0).children.item(0);
        // magic number 37 is the height of the bottom-bar with navigation between pages
        this.doc.style.height = this.panzoom.scrollHeight + 37 + "px";
    }
    /**
     * @param {?} number
     * @return {?}
     */
    selectSheet(number) {
        this.currentPageNo = number;
        if (this.file.pages[number - 1].data == "") {
            /** @type {?} */
            let credentials = { guid: this.file.filePath, password: "" };
            this.viewerService.loadPage(credentials, number).subscribe((/**
             * @param {?} page
             * @return {?}
             */
            (page) => {
                this.file.pages[number - 1] = page;
            }));
        }
    }
}
ExcelDocumentComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-excel-document',
                template: "<!-- <div class=\"wait\" *ngIf=\"wait\">Please wait...</div> -->\r\n<div class=\"f-utils-fill-flex-column\" style=\"height: 100%;\">\r\n    <div style=\"height: 100%;\">\r\n        <div style=\"background-color: white; overflow: auto;\">\r\n            <div id=\"document f-utils-fill\" class=\"document\">\r\n                <div id=\"excelContent\" [ngClass]=\"isDesktop ? 'panzoom auto-height' : 'panzoom mobile'\" style=\"overflow: auto;\" gdZoom [zoomActive]=\"true\" [file]=\"file\" gdSearchable>\r\n                    <div [ngClass]=\"file.showGridLines ? 'page-grid-lines' : 'page'\" *ngFor=\"let page of file?.pages\" gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\">\r\n                        <app-excel-page *ngIf=\"currentPageNo == page.number\" [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\">\r\n                        </app-excel-page>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"sheets\" style=\"position: absolute; bottom: 0px;\">\r\n            <div class=\"sheets-wrapper\">\r\n                <div *ngFor=\"let page of file?.pages\">\r\n                    <button style=\"background-color: white; border: 0;\" [ngClass]=\"{'active': currentPageNo == page.number }\" (click)=\"selectSheet(page.number)\">{{page.name}}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [":host{overflow:scroll;width:100%;background-color:#e7e7e7}.document{width:100%;transition:.4s;padding:0;margin:0;position:relative}.sheets{background-color:#fff;display:flex;border-top:1px solid #e7e7e7;position:fixed;width:100%}.sheets ::ng-deep gd-button.active .text{background-color:#272727;border-radius:10px;color:#eee}.sheets ::ng-deep gd-button .text{padding:1px 12px;color:#000}.sheets ::ng-deep gd-button fa-icon{display:none}.sheets-wrapper{margin-left:29px;display:flex}.page{position:relative;display:inline-block;background-color:#fff;transition:.3s}.wait{position:absolute;top:55px;left:Calc(30%)}.panzoom.auto-height{-webkit-transform:none;transform:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:50% 50% 0;transform-origin:50% 50% 0;display:flex;flex-wrap:wrap}.gd-zoomed{margin:10px 98px}.highlights{position:absolute;top:0;left:0;bottom:0;right:0}.page-grid-lines{background-color:#fff}@media (max-width:1037px){.document{overflow-x:auto!important}.page{min-width:unset!important;min-height:unset!important;margin:5px 0}}"]
            }] }
];
/** @nocollapse */
ExcelDocumentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ZoomService },
    { type: WindowService$1 },
    { type: NavigateService },
    { type: DocViewerService },
    { type: Renderer2 }
];
ExcelDocumentComponent.propDecorators = {
    pages: [{ type: ViewChildren, args: [ExcelPageComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DocViewerComponent {
    /**
     * @param {?} _viewerService
     * @param {?} _zoomService
     * @param {?} _navigateService
     * @param {?} _windowService
     * @param {?} loadService
     * @param {?} pagePreloadService
     * @param {?=} injector
     */
    constructor(_viewerService, _zoomService, _navigateService, _windowService, loadService, pagePreloadService, injector) {
        // configService.updatedConfig.subscribe((viewerConfig) => {
        //   // this.viewerConfig = viewerConfig;
        // });
        this._viewerService = _viewerService;
        this._zoomService = _zoomService;
        this._navigateService = _navigateService;
        this._windowService = _windowService;
        this.loadService = loadService;
        this.pagePreloadService = pagePreloadService;
        this.injector = injector;
        this.title = 'GspCloudViewer';
        this.countPages = 0;
        this.formatDisabled = !this.file;
        this.showThumbnails = false;
        this.showSearch = false;
        this._zoom = 100;
        this.fileWasDropped = false;
        this.style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };
        this.scale = 1;
        this.rotation = 0;
        this.translateX = 0;
        this.translateY = 0;
    }
    /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    preloadPages(start, end) {
        for (let i = start; i <= end; i++) {
            this._viewerService.loadPage(this.credentials, i).subscribe((/**
             * @param {?} page
             * @return {?}
             */
            (page) => {
                this.file.pages[i - 1] = page;
                if (this.file.thumbnails && !this.file.thumbnails[i - 1].data) {
                    if (page.data) {
                        page.data = page.data.replace(/>\s+</g, '><')
                            .replace(/\uFEFF/g, "");
                    }
                    this.file.thumbnails[i - 1].data = page.data;
                }
            }));
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    viewType(file) {
        return file.filePath.endsWith('.pdf');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let request = new DocViewRequest();
        request.filePath = this.filePath;
        /** @type {?} */
        const loading = this.loadService.show({
            message: '文档加载中'
        });
        this._viewerService.loadFileInfo(request).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            loading.close();
            if (res.error != null) ;
            else {
                this.file = res;
                this.credentials = { guid: this.file.filePath, password: "" };
                this.formatDisabled = !this.file;
                if (this.file) {
                    if (this.file.pages && this.file.pages[0]) {
                        this._pageHeight = this.file.pages[0].height;
                        this._pageWidth = this.file.pages[0].width;
                        this.options = this.zoomOptions();
                        this.refreshZoom();
                    }
                    //const preloadPageCount = this.viewerConfig.preloadPageCount;
                    /** @type {?} */
                    const countPages = this.file.pages ? this.file.pages.length : 0;
                    this._navigateService.countPages = countPages;
                    this._navigateService.currentPage = 1;
                    this.countPages = countPages;
                    this.pagePreloadService.checkPreload.subscribe((/**
                     * @param {?} page
                     * @return {?}
                     */
                    (page) => {
                        //if (this.viewerConfig.preloadPageCount !== 0) {
                        for (let i = page; i < page + 2; i++) {
                            if (i > 0 && i <= this.countPages && !this.file.pages[i - 1].data) {
                                this.preloadPages(i, i);
                            }
                        }
                        // }
                    }));
                }
                this.getFile();
                // if (!this.notExcel()) {
                //   this.file.pages.forEach(ele => {
                //     if (ele.data.includes("<x:Name>"))
                //       ele.sheetName = ele.data.split("<x:Name>")[1].split("</x:Name>")[0];
                //   })
                // }
            }
            if (this.injector) {
                /** @type {?} */
                let changeDetector = this.injector.get(ChangeDetectorRef);
                changeDetector.detectChanges();
            }
        }));
    }
    /**
     * @param {?} deg
     * @return {?}
     */
    rotate(deg) {
        if (this.formatDisabled)
            return;
        /** @type {?} */
        const pageNumber = this._navigateService.currentPage;
        /** @type {?} */
        const loading = this.loadService.show({
            message: '文档加载中'
        });
        if (this.saveRotateStateConfig && this.file) {
            this._viewerService.rotate(this.credentials, deg, pageNumber).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                loading.close();
                if (res.error != null) ;
                else {
                    /** @type {?} */
                    let data = res;
                    for (const page of data) {
                        /** @type {?} */
                        const pageModel = this.file.pages[page.pageNumber - 1];
                        if (this.file && this.file.pages && pageModel) {
                            this.changeAngle(pageModel, page.angle);
                        }
                    }
                }
                // this._viewerService.rotate(this.credentials, deg, pageNumber).subscribe((data: RotatedPage[]) => {
                //   for (const page of data) {
                //     const pageModel = this.file.pages[page.pageNumber - 1];
                //     if (this.file && this.file.pages && pageModel) {
                //       this.changeAngle(pageModel, page.angle);
                //     }
                //   }
            }));
        }
        else {
            /** @type {?} */
            const pageModel = this.file.pages[pageNumber - 1];
            if (this.file && this.file.pages && pageModel) {
                /** @type {?} */
                const angle = pageModel.angle + deg;
                if (angle > 360) {
                    this.changeAngle(pageModel, 90);
                }
                else if (angle < -360) {
                    this.changeAngle(pageModel, -90);
                }
                else {
                    this.changeAngle(pageModel, angle);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} page
     * @param {?} angle
     * @return {?}
     */
    changeAngle(page, angle) {
        page.angle = angle;
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    docChange(filePath) {
        /** @type {?} */
        let request = new DocViewRequest();
        request.filePath = filePath;
        /** @type {?} */
        const loading = this.loadService.show({
            message: '文档加载中'
        });
        this._viewerService.loadFileInfo(request).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            loading.close();
            if (res.error != null) ;
            else {
                this.file = res;
                this.credentials = { guid: this.file.filePath, password: "" };
                this.formatDisabled = !this.file;
                if (this.file) {
                    if (this.file.pages && this.file.pages[0]) {
                        this._pageHeight = this.file.pages[0].height;
                        this._pageWidth = this.file.pages[0].width;
                        this.options = this.zoomOptions();
                        this.refreshZoom();
                    }
                    //const preloadPageCount = this.viewerConfig.preloadPageCount;
                    /** @type {?} */
                    const countPages = this.file.pages ? this.file.pages.length : 0;
                    this._navigateService.countPages = countPages;
                    this._navigateService.currentPage = 1;
                    this.countPages = countPages;
                }
                this.getFile();
                if (!this.notExcel())
                    this.excelView.currentPageNo = 1;
                // if (!this.notExcel()) {
                //   this.file.pages.forEach(ele => {
                //     if (ele.data.includes("<x:Name>"))
                //       ele.sheetName = ele.data.split("<x:Name>")[1].split("</x:Name>")[0];
                //   })
                // }
            }
        }));
    }
    /**
     * @return {?}
     */
    getFile() {
        return this.file;
    }
    /**
     * @return {?}
     */
    notExcel() {
        return !(this.filePath.endsWith('.xls') || this.filePath.endsWith('.xlsx'));
    }
    /**
     * @return {?}
     */
    get rewriteConfig() {
        return this.viewerConfig ? this.viewerConfig.rewrite : true;
    }
    /**
     * @return {?}
     */
    get zoomConfig() {
        return this.viewerConfig ? this.viewerConfig.zoom : true;
    }
    /**
     * @return {?}
     */
    get pageSelectorConfig() {
        return this.viewerConfig ? this.viewerConfig.pageSelector : true;
    }
    /**
     * @return {?}
     */
    get searchConfig() {
        return this.viewerConfig ? this.viewerConfig.search : true;
    }
    /**
     * @return {?}
     */
    get thumbnailsConfig() {
        return this.viewerConfig ? this.viewerConfig.thumbnails : true;
    }
    /**
     * @return {?}
     */
    get rotateConfig() {
        return this.viewerConfig ? this.viewerConfig.rotate : true;
    }
    /**
     * @return {?}
     */
    get downloadConfig() {
        return this.viewerConfig ? this.viewerConfig.download : true;
    }
    /**
     * @return {?}
     */
    get uploadConfig() {
        return this.viewerConfig ? this.viewerConfig.upload : true;
    }
    /**
     * @return {?}
     */
    get printConfig() {
        return this.viewerConfig ? this.viewerConfig.print : true;
    }
    /**
     * @return {?}
     */
    get browseConfig() {
        return this.viewerConfig ? this.viewerConfig.browse : true;
    }
    /**
     * @return {?}
     */
    get htmlModeConfig() {
        return this.viewerConfig ? this.viewerConfig.htmlMode : true;
    }
    /**
     * @return {?}
     */
    get saveRotateStateConfig() {
        return this.viewerConfig ? this.viewerConfig.saveRotateState : true;
    }
    /**
     * @return {?}
     */
    get enableRightClickConfig() {
        return this.viewerConfig ? this.viewerConfig.enableRightClick : true;
    }
    /**
     * @return {?}
     */
    rotateClockwise() {
        this.rotate(90);
    }
    /**
     * @return {?}
     */
    rotateCounterClockwise() {
        this.rotate(-90);
    }
    /**
     * @return {?}
     */
    get currentPage() {
        return this._navigateService.currentPage;
    }
    // selectDir($event: string) {
    //   this._viewerService.loadFiles($event).subscribe((files: FileModel[]) => this.files = files || []);
    // }
    // preloadPages(start: number, end: number) {
    //   for (let i = start; i <= end; i++) {
    //     this._viewerService.loadPage(this.credentials, i).subscribe((page: PageModel) => {
    //       this.file.pages[i - 1] = page;
    //     });
    //   }
    // }
    // upload($event: string) {
    //   this._viewerService.upload(null, $event, this.rewriteConfig).subscribe(() => {
    //     this.selectDir('');
    //   });
    // }
    /**
     * @return {?}
     */
    nextPage() {
        if (this.formatDisabled)
            return;
        this._navigateService.nextPage();
    }
    /**
     * @return {?}
     */
    prevPage() {
        if (this.formatDisabled)
            return;
        this._navigateService.prevPage();
    }
    /**
     * @return {?}
     */
    toLastPage() {
        if (this.formatDisabled)
            return;
        this._navigateService.toLastPage();
    }
    /**
     * @return {?}
     */
    toFirstPage() {
        if (this.formatDisabled)
            return;
        this._navigateService.toFirstPage();
    }
    /**
     * @param {?} page
     * @return {?}
     */
    navigateToPage(page) {
        if (this.formatDisabled)
            return;
        this._navigateService.navigateTo(page);
    }
    /**
     * @return {?}
     */
    zoomIn() {
        if (this.formatDisabled)
            return;
        if (this._zoom < 490) {
            this.zoom = this._zoom + 10;
        }
    }
    /**
     * @return {?}
     */
    zoomOut() {
        if (this.formatDisabled)
            return;
        if (this._zoom > 30) {
            this.zoom = this._zoom - 10;
        }
    }
    /**
     * @return {?}
     */
    zoomReset() {
        this.zoom = 100;
    }
    /**
     * @return {?}
     */
    zoomOptions() {
        /** @type {?} */
        const width = this.getFitToWidth();
        /** @type {?} */
        const height = this.getFitToHeight();
        return this._zoomService.zoomOptions(width, height);
    }
    /**
     * @private
     * @return {?}
     */
    refreshZoom() {
        this.zoom = this._windowService.isDesktop() ? 100 : this.getFitToWidth();
        //this.zoom = 100;  
    }
    /**
     * @private
     * @return {?}
     */
    getFitToWidth() {
        // const pageWidth = this.ptToPx(this._pageWidth);
        // const pageHeight = this.ptToPx(this._pageHeight);
        /** @type {?} */
        const pageWidth = !this.notExcel() ? this._pageWidth : this.ptToPx(this._pageWidth);
        /** @type {?} */
        const pageHeight = !this.notExcel() ? this._pageHeight : this.ptToPx(this._pageHeight);
        /** @type {?} */
        const offsetWidth = pageWidth ? pageWidth : window.innerWidth;
        return (pageHeight > pageWidth && Math.round(offsetWidth / window.innerWidth) < 2) ? 200 - Math.round(offsetWidth * 100 / window.innerWidth) : Math.round(window.innerWidth * 100 / offsetWidth);
    }
    /**
     * @private
     * @return {?}
     */
    getFitToHeight() {
        /** @type {?} */
        const pageWidth = !this.notExcel() ? this._pageWidth : this.ptToPx(this._pageWidth);
        /** @type {?} */
        const pageHeight = !this.notExcel() ? this._pageHeight : this.ptToPx(this._pageHeight);
        /** @type {?} */
        const windowHeight = (pageHeight > pageWidth) ? window.innerHeight - 100 : window.innerHeight + 100;
        /** @type {?} */
        const offsetHeight = pageHeight ? pageHeight : windowHeight;
        return (pageHeight > pageWidth) ? Math.round(windowHeight * 100 / offsetHeight) : Math.round(offsetHeight * 100 / windowHeight);
    }
    /**
     * @private
     * @param {?} pt
     * @return {?}
     */
    ptToPx(pt) {
        //pt * 96 / 72 = px.
        return pt * 96 / 72;
    }
    /**
     * @param {?} zoom
     * @return {?}
     */
    set zoom(zoom) {
        this._zoom = zoom;
        this._zoomService.changeZoom(this._zoom);
    }
    /**
     * @return {?}
     */
    get zoom() {
        return this._zoom;
    }
}
DocViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-doc-viewer',
                template: "<!-- <gd-loading-mask [loadingMask]=\"isLoading\"></gd-loading-mask> -->\n<div class=\"f-page\">\n    <div class=\"wrapper f-utils-fill-flex-column\" style=\"overflow-x:auto;overflow-y: hidden;\">\n        <div class=\"top-panel\" *ngIf=\"notExcel()\">\n            <app-gsp-top-toolbar class=\"toolbar-panel\">\n                <!-- <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-double-left'\" [tooltip]=\"'First Page'\" (click)=\"toFirstPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button> -->\n                <div class=\"btn btn-secondary page-button\" (click)=\"toFirstPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/firstPage.png'\" title=\"'\u7B2C\u4E00\u9875'\">\n                </div>\n                <!-- <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-left'\" [tooltip]=\"'Previous Page'\" (click)=\"prevPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button> -->\n                <div class=\"btn btn-secondary page-button\" (click)=\"prevPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/prePage.png'\" title=\"'\u524D\u4E00\u9875'\">\n                </div>\n                <div class=\"current-page-number\" [ngClass]=\"{'active': !formatDisabled}\" style=\"position: relative;  bottom: 11px; right:-47px\">{{currentPage}}/{{countPages}}\n                </div>\n                <div class=\"btn btn-secondary page-button\" (click)=\"nextPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/nextPage.png'\" title=\"'\u540E\u4E00\u9875'\">\n                </div>\n                <div class=\"btn btn-secondary page-button\" (click)=\"toLastPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/lastPage.png'\" title=\"'\u6700\u540E\u4E00\u9875'\">\n                </div>\n                <!-- <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-right'\" [tooltip]=\"'Next Page'\" (click)=\"nextPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button>\n                <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-double-right'\" [tooltip]=\"'Last Page'\" (click)=\"nextPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button> -->\n            </app-gsp-top-toolbar>\n        </div>\n        <div class=\"doc-panel  f-utils-fill-flex-column\" *ngIf=\"file\">\n\n            <app-gsp-document class=\"gsp-document\" *ngIf=\"file &&  notExcel()\" [file]=\"getFile()\" [mode]=\"htmlModeConfig\" [preloadPageCount]=\"viewerConfig?.preloadPageCount\" [ngStyle]=\"style\"></app-gsp-document>\n            <app-excel-document class=\"gsp-document\" *ngIf=\"file &&  !notExcel() \" style=\"overflow: hidden;\" [file]=\"getFile()\" [mode]=\"htmlModeConfig\" gdScrollable [preloadPageCount]=\"viewerConfig?.preloadPageCount\">\n            </app-excel-document>\n\n        </div>\n    </div>\n</div>",
                styles: [":host *{font-family:'Open Sans',Arial,Helvetica,sans-serif}.current-page-number{margin-left:7px;font-size:14px;color:#959da5;width:37px;height:37px;line-height:37px;text-align:center}.current-page-number.active{color:#fff}.page-button{background-color:#212529;width:28px;height:28px;border:none;position:relative;bottom:14px;right:-50px}.page-button img{position:relative;left:-13px}.wrapper{align-items:stretch;height:100%;width:100%;position:absolute;top:0;bottom:0;left:0;right:0}.doc-panel{display:flex}.thumbnails-button{position:absolute;right:3px}.gsp-document{width:100%;height:100%}.top-panel{display:flex;align-items:center;width:100%;height:32px}.toolbar-panel{background-color:#3e4e5a;width:100%;height:32px}::ng-deep .tools .button,::ng-deep .tools .nav-caret,::ng-deep .tools .selected-value{color:#fff!important}::ng-deep .tools .button.inactive,::ng-deep .tools .nav-caret.inactive,::ng-deep .tools .selected-value.inactive{color:#959da5!important}::ng-deep .tools .button{flex-flow:column}::ng-deep .tools .dropdown-menu .option{color:#6e6e6e!important}::ng-deep .tools .dropdown-menu .option:hover{background-color:#4b566c!important}::ng-deep .tools .icon-button{margin:0 0 0 7px!important}::ng-deep .tools .select{width:65px;height:37px;margin-left:7px;line-height:37px;text-align:center}"]
            }] }
];
/** @nocollapse */
DocViewerComponent.ctorParameters = () => [
    { type: DocViewerService },
    { type: ZoomService },
    { type: NavigateService },
    { type: WindowService$1 },
    { type: LoadingService },
    { type: PagePreloadService },
    { type: Injector }
];
DocViewerComponent.propDecorators = {
    excelView: [{ type: ViewChild, args: [ExcelDocumentComponent,] }],
    filePath: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspPageComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const isIE = /*@cc_on!@*/ !!/(MSIE|Trident\/|Edge\/)/i.test(navigator.userAgent);
        if (isIE && this.number === 0) {
            this.editable = false;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isHtml) {
            // TODO: this is temporary needed to remove unneeded spaces and BOM symbol 
            // which leads to undesired spaces on the top of the docs pages
            this.data = this.data
                ? this.data.replace(/>\s+</g, '><')
                    .replace(/\uFEFF/g, "")
                : null;
        }
        else {
            if (this.data) {
                this.imgData = this.data.startsWith('data:image') ? this.data : 'data:image/png;base64,' + this.data;
            }
        }
    }
}
GspPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-gsp-page',
                template: "<div id=\"page-{{number}}\">\n  <div class=\"gsp-wrapper\" [innerHTML]=\"data | safeHtml\" *ngIf=\"data && isHtml\" [contentEditable]=\"(editable) ? true : false\"></div>\n  <img class=\"gsp-page-image\" [style.width.px]=\"width\" [style.height.px]=\"height\" [attr.src]=\"imgData | safeResourceHtml\"\n       alt=\"\"\n       *ngIf=\"data && !isHtml\">\n  <div class=\"gsp-page-spinner\" *ngIf=\"!data\">\n  </div>\n</div>",
                styles: [".gsp-page-spinner{margin-top:150px;text-align:center}.gsp-wrapper{width:inherit;height:inherit}.gsp-wrapper img{width:inherit}.gsp-wrapper div{width:100%}.gsp-highlight{background-color:#ff0}.gsp-highlight-select{background-color:#ff9b00}.gsp-page-image{height:100%!important;width:100%!important}"]
            }] }
];
/** @nocollapse */
GspPageComponent.ctorParameters = () => [];
GspPageComponent.propDecorators = {
    angle: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    number: [{ type: Input }],
    data: [{ type: Input }],
    isHtml: [{ type: Input }],
    editable: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PageModel {
}
PageModel.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PageModel.ngInjectableDef = defineInjectable({ factory: function PageModel_Factory() { return new PageModel(); }, token: PageModel, providedIn: "root" });
class FileUtil$1 {
    /**
     * @param {?} filename
     * @param {?} isDirectory
     * @return {?}
     */
    static find(filename, isDirectory) {
        if (filename && !isDirectory) {
            /** @type {?} */
            const strings = filename.split('.');
            /** @type {?} */
            const name = strings.pop().toLowerCase();
            if (typeof FileUtil$1.map[name] === "undefined") {
                return strings.length > 0 ? FileUtil$1.map['unknown'] : FileUtil$1.map['folder'];
            }
            else {
                return FileUtil$1.map[name];
            }
        }
        else {
            return FileUtil$1.map['folder'];
        }
    }
}
FileUtil$1.map = {
    'folder': { 'format': '', 'icon': 'folder' },
    'pdf': { 'format': 'Portable Document Format', 'icon': 'file-pdf' },
    'doc': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'docx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'docm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'dot': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'dotx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'dotm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
    'xls': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xlsx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xlsm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xlsb': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xls2003': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xltx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'xltm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
    'ppt': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'pptx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'pps': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'ppsx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
    'vsd': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vss': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vsx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vst': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vtx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vsdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vdw': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vstx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'vssx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
    'mpp': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
    'mpt': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
    'msg': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
    'eml': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
    'emlx': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
    'one': { 'format': 'Microsoft OneNote', 'icon': 'file-word' },
    'odt': { 'format': 'Open Document Text', 'icon': 'file-word' },
    'ott': { 'format': 'Open Document Text Template', 'icon': 'file-word' },
    'ods': { 'format': 'Open Document Spreadsheet', 'icon': 'file-excel' },
    'odp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'otp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'ots': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'potx': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'potm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'pptm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'ppsm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
    'rtf': { 'format': 'Rich Text Format', 'icon': 'file-alt' },
    'txt': { 'format': 'Plain Text File', 'icon': 'file-alt' },
    'csv': { 'format': 'Comma-Separated Values', 'icon': 'file-excel' },
    'html': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
    'mht': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
    'mhtml': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
    'xml': { 'format': 'Extensible Markup Language', 'icon': 'file-word' },
    'xps': { 'format': 'XML Paper Specification', 'icon': 'file-word' },
    'dxf': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
    'dwg': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
    'bmp': { 'format': 'Bitmap Picture', 'icon': 'file-image' },
    'gif': { 'format': 'Graphics Interchange Format', 'icon': 'file-image' },
    'jpg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'jpe': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'jpeg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'jfif': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
    'png': { 'format': 'Portable Network Graphics', 'icon': 'file-image' },
    'tiff': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'tif': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'psd': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'svg': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'jp2': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
    'epub': { 'format': 'Electronic Publication', 'icon': 'file-pdf' },
    'ico': { 'format': 'Windows Icon', 'icon': 'file-image' },
    'webp': { 'format': 'Compressed Image', 'icon': 'file-image' },
    'mobi': { 'format': 'Mobipocket eBook', 'icon': 'file-pdf' },
    'tex': { 'format': 'LaTeX Source Document', 'icon': 'file-pdf' },
    'djvu': { 'format': 'Multi-Layer Raster Image', 'icon': 'file-alt' },
    'unknown': { 'format': 'This format is not supported', 'icon': 'file' },
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ZoomDirective {
    /**
     * @param {?} _zoomService
     * @param {?} _windowService
     * @param {?} el
     */
    constructor(_zoomService, _windowService, el) {
        this._zoomService = _zoomService;
        this._windowService = _windowService;
        this.zoomActive = true;
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.setStyles(this._zoomService.zoom);
        this.resizePages(this._zoomService.zoom);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.zoomActive) {
            return;
        }
        this.setStyles(this._zoomService.zoom);
        this._zoomService.zoomChange.subscribe((/**
         * @param {?} zoom
         * @return {?}
         */
        (zoom) => {
            this.setStyles(zoom);
            this.resizePages(zoom);
        }));
    }
    /**
     * @private
     * @param {?} zoom
     * @return {?}
     */
    setStyles(zoom) {
        if (!this.zoomActive) {
            return;
        }
        /** @type {?} */
        const zoomInt = zoom === 100 ? 1 : zoom / 100;
        if (this._windowService.isEdge()) {
            this.zoomInt = zoomInt;
        }
        else {
            this.zoomInt = null;
        }
        if (!this._windowService.isEdge()) {
            this.transform = 'scale(' + zoomInt + ')';
            this.transformOrigin = 'top left';
        }
        else {
            this.transform = "";
            this.transformOrigin = "";
        }
        /** @type {?} */
        let maxWidth = 0;
        this.file.pages.forEach((/**
         * @param {?} page
         * @return {?}
         */
        page => {
            {
                if (page.width > maxWidth) {
                    maxWidth = page.width;
                }
            }
        }));
        // Images and Excel-related files receiving dimensions in px from server
        this.minWidth = maxWidth + FileUtil$1.find(this.file.guid, false).unit;
    }
    /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    getScrollWidth(elm) {
        return elm.offsetWidth - elm.clientWidth;
    }
    /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    getScrollHeight(elm) {
        return elm.offsetHeight - elm.clientHeight;
    }
    /**
     * @private
     * @param {?} zoom
     * @return {?}
     */
    resizePages(zoom) {
        /** @type {?} */
        const zoomInt = zoom === 100 ? 1 : zoom / 100;
        /** @type {?} */
        const viewPortWidth = this.el.nativeElement.parentElement.offsetWidth;
        /** @type {?} */
        const viewPortHeight = this.el.nativeElement.parentElement.offsetHeight;
        /** @type {?} */
        const scrollWidth = this.getScrollWidth(this.el.nativeElement.parentElement);
        /** @type {?} */
        const scrollHeight = this.getScrollHeight(this.el.nativeElement.parentElement);
        this.width = (viewPortWidth / zoomInt - scrollWidth / zoomInt) + 'px';
        this.height = (viewPortHeight / zoomInt - scrollHeight / zoomInt) + 'px';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setStyles(this._zoomService.zoom);
    }
}
ZoomDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gdZoom]'
            },] }
];
/** @nocollapse */
ZoomDirective.ctorParameters = () => [
    { type: ZoomService },
    { type: WindowService$1 },
    { type: ElementRef }
];
ZoomDirective.propDecorators = {
    zoomActive: [{ type: Input }],
    file: [{ type: Input }],
    zoomInt: [{ type: HostBinding, args: ['style.zoom',] }],
    transform: [{ type: HostBinding, args: ['style.transform',] }],
    transformOrigin: [{ type: HostBinding, args: ['style.transform-origin',] }],
    width: [{ type: HostBinding, args: ['style.width',] }],
    height: [{ type: HostBinding, args: ['style.height',] }],
    minWidth: [{ type: HostBinding, args: ['style.min-width',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectionService {
    constructor() {
        this.isIE = !!/(MSIE|Trident\/|Edge\/)/i.test(navigator.userAgent);
    }
    /**
     * @return {?}
     */
    restoreSelection() {
        if (this.selection && !this.selection.collapsed || this.isIE) {
            this.putSelection(this.selection);
        }
    }
    /**
     * @return {?}
     */
    captureSelection() {
        /** @type {?} */
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
            this.selection = selection.getRangeAt(0);
        }
    }
    /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    putSelection(selection) {
        /** @type {?} */
        const sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(selection.cloneRange());
    }
    /**
     * @return {?}
     */
    refreshSelection() {
        this.captureSelection();
        this.restoreSelection();
    }
}
SelectionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ SelectionService.ngInjectableDef = defineInjectable({ factory: function SelectionService_Factory() { return new SelectionService(); }, token: SelectionService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchService {
    constructor() {
        this._observer = new Subject();
        this._textChange = this._observer.asObservable();
        this._observerCurrent = new Subject();
        this._currentChange = this._observerCurrent.asObservable();
        this._observerTotal = new Subject();
        this._totalChange = this._observerTotal.asObservable();
    }
    /**
     * @return {?}
     */
    get textChange() {
        return this._textChange;
    }
    /**
     * @param {?} text
     * @return {?}
     */
    setText(text) {
        this._observer.next(text);
    }
    /**
     * @return {?}
     */
    get currentChange() {
        return this._currentChange;
    }
    /**
     * @return {?}
     */
    get totalChange() {
        return this._totalChange;
    }
    /**
     * @param {?} current
     * @return {?}
     */
    setCurrent(current) {
        this._observerCurrent.next(current);
    }
    /**
     * @param {?} total
     * @return {?}
     */
    setTotal(total) {
        this._observerTotal.next(total);
    }
}
SearchService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SearchService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchableDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _searchService
     * @param {?} _zoomService
     */
    constructor(_elementRef, _searchService, _zoomService) {
        this._elementRef = _elementRef;
        this._searchService = _searchService;
        this._zoomService = _zoomService;
        this.current = 0;
        this.total = 0;
        this.zoom = 100;
        _searchService.currentChange.subscribe((/**
         * @param {?} current
         * @return {?}
         */
        (current) => {
            this.current = current;
            if (this.current !== 0) ;
        }));
        _searchService.textChange.subscribe((/**
         * @param {?} text
         * @return {?}
         */
        (text) => {
            this.text = text;
            //this.highlightSearch();
        }));
        this.zoom = _zoomService.zoom ? _zoomService.zoom : this.zoom;
        _zoomService.zoomChange.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this.zoom = val ? val : this.zoom;
        }));
    }
    // private highlightSearch() {
    //   const el = this._elementRef ? this._elementRef.nativeElement : null;
    //   if (el) {
    //     this.cleanHighlight(el);
    //     if (this.text) {
    //       this.highlightEl(el);
    //       const count = el.querySelectorAll('.gd-highlight').length;
    //       this.total = count;
    //     } else {
    //       this.total = 0;
    //     }
    //     this._searchService.setTotal(this.total);
    //   }
    // }
    // private moveToCurrent() {
    //   if (this.current === 0) {
    //     return;
    //   }
    //   const currentZoom = this.getZoom();
    //   const el = this._elementRef ? this._elementRef.nativeElement : null;
    //   if (el) {
    //     el.querySelectorAll('.gd-highlight-select').forEach(function (value) {
    //       $(value).removeClass('gd-highlight-select');
    //     });
    //     const currentEl = el.querySelectorAll('.gd-highlight')[this.current - 1];
    //     $(currentEl).addClass('gd-highlight-select');
    //     if (currentEl) {
    //       const options = {
    //         left: 0,
    //         top: ($(currentEl).offset().top * currentZoom) + el.parentElement.scrollTop - 150,
    //       };
    //       el.parentElement.scrollTo(options);
    //     }
    //   }
    // }
    // private highlightEl(el: Element) {
    //   const textNodes = $(el).find('*').contents().filter(function () {
    //     const nodeName = this.parentElement.nodeName.toLowerCase();
    //     const checkClass = (<Element>this).classList ? !(<Element>this).classList.contains('gd-highlight') : true;
    //     return this.nodeType === 3 &&
    //       this.textContent.trim().length !== 0 &&
    //       nodeName !== 'style' &&
    //       nodeName !== 'title' &&
    //       nodeName !== 'body' &&
    //       nodeName !== 'script' &&
    //       checkClass;
    //   });
    //   const text = this.text;
    //   const highlight = this._highlight;
    //   textNodes.each(function () {
    //     const $this = $(this);
    //     let content = $this.text();
    //     content = highlight.transform(content, text);
    //     $this.replaceWith(content);
    //   });
    //   el.normalize();
    // }
    // private cleanHighlight(el: HTMLElement) {
    //   const nodeListOf = el.querySelectorAll('.gd-highlight');
    //   for (let i = 0; i < nodeListOf.length; i++) {
    //     const element = nodeListOf.item(i);
    //     element.replaceWith((<HTMLElement>element).innerText);
    //   }
    //   el.normalize();
    // }
    /**
     * @private
     * @return {?}
     */
    getZoom() {
        return this.zoom / 100;
    }
}
SearchableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gdSearchable]'
            },] }
];
/** @nocollapse */
SearchableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: SearchService },
    { type: ZoomService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RotationDirective {
    constructor() {
        this.withMargin = true;
    }
    /**
     * @private
     * @return {?}
     */
    updateCursor() {
        if (typeof this.angle === "string") {
            this.angle = parseInt(this.angle, 10);
        }
        if (this.angle) {
            this.animation = 'none';
            this.transition = 'none';
            this.transform = 'rotate(' + this.angle + 'deg)';
        }
        else if (this.angle === 0 && this.animation) {
            this.animation = null;
            this.transition = null;
            this.transform = null;
        }
        if (this.withMargin) {
            if (this.angle === 90 || this.angle === 270 || this.angle === -90 || this.angle === -270) {
                if (this.isHtmlMode) {
                    if (this.isLandscape()) {
                        this.margin = '164px 254px';
                    }
                    else {
                        this.margin = '-111px 254px';
                    }
                }
                else {
                    if (this.isLandscape()) {
                        this.margin = '129px 100px -79px';
                    }
                    else {
                        this.margin = '-72px 100px -79px';
                    }
                }
            }
            else if (this.angle === -180 || this.angle === 180) {
                this.margin = '280px';
            }
            else {
                this.margin = null;
            }
        }
    }
    /**
     * @return {?}
     */
    isLandscape() {
        return this.width > this.height;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateCursor();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.updateCursor();
    }
}
RotationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gdRotation]'
            },] }
];
/** @nocollapse */
RotationDirective.ctorParameters = () => [];
RotationDirective.propDecorators = {
    angle: [{ type: Input }],
    isHtmlMode: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    withMargin: [{ type: Input }],
    animation: [{ type: HostBinding, args: ['style.animation',] }],
    transition: [{ type: HostBinding, args: ['style.transition-property',] }],
    transform: [{ type: HostBinding, args: ['style.transform',] }],
    margin: [{ type: HostBinding, args: ['style.margin',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SanitizeHtmlPipe {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} html
     * @return {?}
     */
    transform(html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
}
SanitizeHtmlPipe.decorators = [
    { type: Pipe, args: [{ name: 'safeHtml' },] }
];
/** @nocollapse */
SanitizeHtmlPipe.ctorParameters = () => [
    { type: DomSanitizer }
];
class SanitizeResourceHtmlPipe {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} html
     * @return {?}
     */
    transform(html) {
        return this.sanitizer.bypassSecurityTrustResourceUrl(html);
    }
}
SanitizeResourceHtmlPipe.decorators = [
    { type: Pipe, args: [{ name: 'safeResourceHtml' },] }
];
/** @nocollapse */
SanitizeResourceHtmlPipe.ctorParameters = () => [
    { type: DomSanitizer }
];
class SanitizeStylePipe {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} html
     * @return {?}
     */
    transform(html) {
        return this.sanitizer.bypassSecurityTrustStyle(html);
    }
}
SanitizeStylePipe.decorators = [
    { type: Pipe, args: [{ name: 'safeStyle' },] }
];
/** @nocollapse */
SanitizeStylePipe.ctorParameters = () => [
    { type: DomSanitizer }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const $$1 = jquery__default;
class ViewportService {
    constructor() {
    }
    /**
     * @param {?} el
     * @param {?=} zoom
     * @param {?=} leftOffset
     * @param {?=} deltaX
     * @return {?}
     */
    checkInViewport(el, zoom = 100, leftOffset = 0, deltaX = 0.5) {
        if (!el) {
            return false;
        }
        /** @type {?} */
        const x = deltaX;
        /** @type {?} */
        const y = 0.5;
        /** @type {?} */
        const win = $$1(window);
        /** @type {?} */
        const viewport = {
            top: win.scrollTop(),
            left: win.scrollLeft() + leftOffset,
            right: win.scrollLeft() + win.width() - 10,
            bottom: win.scrollTop() + win.height()
        };
        if (isNaN(zoom)) {
            zoom = 100;
        }
        /** @type {?} */
        const zoomN = zoom / 100;
        /** @type {?} */
        const height = $$1(el).outerHeight() * (zoomN);
        /** @type {?} */
        const width = $$1(el).outerWidth() * (zoomN);
        if (!width || !height) {
            return false;
        }
        /** @type {?} */
        const bounds = $$1(el).offset();
        /** @type {?} */
        const right = (bounds.left * (zoomN)) + width;
        /** @type {?} */
        const bottom = (bounds.top * (zoomN)) + height;
        /** @type {?} */
        const visible = (!(viewport.right < (bounds.left * (zoomN)) || viewport.left > right || viewport.bottom < (bounds.top * (zoomN)) || viewport.top > bottom));
        if (!visible) {
            return false;
        }
        /** @type {?} */
        const deltas = {
            top: Math.min(1, (bottom - viewport.top) / height),
            bottom: Math.min(1, (viewport.bottom - (bounds.top * (zoomN))) / height),
            left: Math.min(1, (right - viewport.left) / width),
            right: Math.min(1, (viewport.right - (bounds.left * (zoomN))) / width)
        };
        return (deltas.left * deltas.right) >= x && (deltas.top * deltas.bottom) >= y;
    }
}
ViewportService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ViewportService.ctorParameters = () => [];
/** @nocollapse */ ViewportService.ngInjectableDef = defineInjectable({ factory: function ViewportService_Factory() { return new ViewportService(); }, token: ViewportService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const $$2 = jquery;
class ScrollableDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _navigateService
     * @param {?} _pagePreloadService
     * @param {?} _zoomService
     * @param {?} _windowService
     * @param {?} _viewportService
     */
    constructor(_elementRef, _navigateService, _pagePreloadService, _zoomService, _windowService, _viewportService) {
        this._elementRef = _elementRef;
        this._navigateService = _navigateService;
        this._pagePreloadService = _pagePreloadService;
        this._zoomService = _zoomService;
        this._windowService = _windowService;
        this._viewportService = _viewportService;
        this.zoom = 100;
        this.zoom = _zoomService.zoom ? _zoomService.zoom : this.zoom;
        _zoomService.zoomChange.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this.zoom = val ? val : this.zoom;
            this.refresh();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.zoom = this._zoomService.zoom ? this._zoomService.zoom : this.zoom;
        this._navigateService.navigate.subscribe(((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.currentPage = value;
            this.scrollToPage(value);
        })));
        this.refresh();
    }
    /**
     * @return {?}
     */
    scrolling() {
        this.refresh();
    }
    /**
     * @return {?}
     */
    resizing() {
        this.refresh();
    }
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    scrollToPage(pageNumber) {
        /** @type {?} */
        const el = this._elementRef.nativeElement;
        /** @type {?} */
        const page = this.getPage(pageNumber);
        /** @type {?} */
        const prev = pageNumber > 0 ? this.getPage(pageNumber - 1) : null;
        /** @type {?} */
        const isSameTop = (prev && $$2(prev).offset().top === $$2(page).offset().top);
        if (this._viewportService.checkInViewport(page, this.zoom) && isSameTop) {
            return;
        }
        /** @type {?} */
        const pagesHeight = this.calculateOffset(pageNumber);
        /** @type {?} */
        const options = {
            left: 0,
            top: pagesHeight
        };
        if (el) {
            el.scrollTo(options);
        }
    }
    /**
     * @private
     * @return {?}
     */
    getChildren() {
        /** @type {?} */
        const el = this._elementRef ? this._elementRef.nativeElement : null;
        if (el) {
            return el.children.item(0).children;
        }
    }
    /**
     * @private
     * @param {?} pageNumber
     * @return {?}
     */
    getPage(pageNumber) {
        /** @type {?} */
        const el = this._elementRef ? this._elementRef.nativeElement : null;
        if (el) {
            return el.children.item(0).children.item(pageNumber - 1);
        }
    }
    /**
     * @private
     * @param {?} pageNumber
     * @return {?}
     */
    calculateOffset(pageNumber) {
        /** @type {?} */
        const count = this.ifFirefox() ? 1 : this.countPagesOnWidth();
        /** @type {?} */
        const margin = this._windowService.isDesktop() ? 40 : 10;
        /** @type {?} */
        let pagesHeight = 0;
        for (let i = 1; i < pageNumber / count; i++) {
            /** @type {?} */
            const item = this.getPage(i);
            /** @type {?} */
            const clientHeight = item ? item.clientHeight : 0;
            pagesHeight += clientHeight > 0 ? clientHeight * this.getZoom() + margin : 0;
        }
        return pagesHeight;
    }
    /**
     * @private
     * @return {?}
     */
    countPagesOnWidth() {
        /** @type {?} */
        const pageEl = this.getPage(1);
        /** @type {?} */
        const offset = 150;
        /** @type {?} */
        const count = Math.floor((this.getWidth() - offset) / (pageEl.getBoundingClientRect().width * this.getZoom()));
        return count === 0 ? 1 : count;
    }
    /**
     * @return {?}
     */
    ifFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    }
    /**
     * @return {?}
     */
    refresh() {
        /** @type {?} */
        let page;
        /** @type {?} */
        let currentPageSet = false;
        /** @type {?} */
        const pageElem = this.getPage(this.currentPage);
        /** @type {?} */
        const currentPageRect = this.currentPage && pageElem ? pageElem.getBoundingClientRect() : null;
        for (page = 1; page < this.getChildren().length + 1; page++) {
            /** @type {?} */
            const element = this.getPage(page);
            if (this._viewportService.checkInViewport(element, this.zoom)) {
                if (!currentPageSet) {
                    if (!this.currentPage || !pageElem || (this.currentPage && currentPageRect && element.getBoundingClientRect().top !== currentPageRect.top)) {
                        this.currentPage = page;
                        this._navigateService.currentPage = page;
                    }
                    currentPageSet = true;
                }
                this._pagePreloadService.changeLastPageInView(page);
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refresh();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.zoom = this._zoomService.zoom ? this._zoomService.zoom : this.zoom;
    }
    /**
     * @private
     * @return {?}
     */
    getWidth() {
        return this._elementRef ? this._elementRef.nativeElement.offsetWidth : window.innerWidth;
    }
    /**
     * @private
     * @return {?}
     */
    getZoom() {
        return this.zoom / 100;
    }
}
ScrollableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gdScrollable]'
            },] }
];
/** @nocollapse */
ScrollableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NavigateService },
    { type: PagePreloadService },
    { type: ZoomService },
    { type: WindowService$1 },
    { type: ViewportService }
];
ScrollableDirective.propDecorators = {
    onRefresh: [{ type: Input }],
    scrolling: [{ type: HostListener, args: ['scroll',] }],
    resizing: [{ type: HostListener, args: ['window:resize',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspDocumentModule {
}
GspDocumentModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GspDocumentComponent, GspPageComponent, ExcelDocumentComponent, ExcelPageComponent,
                    ZoomDirective, SearchableDirective,
                    RotationDirective, SanitizeHtmlPipe, SanitizeResourceHtmlPipe, SanitizeStylePipe, ScrollableDirective],
                imports: [
                    CommonModule
                ],
                exports: [GspDocumentComponent, ExcelDocumentComponent, ZoomDirective, SearchableDirective],
                entryComponents: [GspDocumentComponent, ExcelDocumentComponent],
                providers: [
                    ZoomService,
                    SelectionService,
                    SearchService,
                    PagePreloadService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const $$3 = jquery__default;
class GspTopToolbarComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _viewportService
     * @param {?} _cdRef
     */
    constructor(_elementRef, _viewportService, _cdRef) {
        this._elementRef = _elementRef;
        this._viewportService = _viewportService;
        this._cdRef = _cdRef;
        this.leftOffset = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refresh();
        /** @type {?} */
        const el = this.getToolsElem();
        /** @type {?} */
        const $this = this;
        el.addEventListener('scroll', (/**
         * @return {?}
         */
        function () {
            $this.refresh();
        }));
    }
    /**
     * @return {?}
     */
    moveLeft() {
        /** @type {?} */
        const el = this.getToolsElem();
        if (el) {
            /** @type {?} */
            const elem = this.canMoveTo(true);
            if (elem) {
                /** @type {?} */
                const options = {
                    left: $$3(elem).offset().left + el.scrollLeft - this.getLeftOffset(),
                    top: 0,
                };
                el.scrollTo(options);
            }
        }
    }
    /**
     * @return {?}
     */
    moveRight() {
        /** @type {?} */
        const el = this.getToolsElem();
        if (el) {
            /** @type {?} */
            const elem = this.canMoveTo(false);
            if (elem) {
                /** @type {?} */
                const options = {
                    left: $$3(elem).offset().left + el.scrollLeft - this.getLeftOffset(),
                    top: 0,
                };
                el.scrollTo(options);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getToolsElem() {
        return this._elementRef ? this._elementRef.nativeElement.children[0].querySelector('#tools') : null;
    }
    /**
     * @private
     * @param {?} left
     * @return {?}
     */
    canMoveTo(left) {
        /** @type {?} */
        let elem;
        /** @type {?} */
        const children = this.getChildren();
        /** @type {?} */
        const countElem = children.length;
        for (elem = 0; elem < countElem; elem++) {
            /** @type {?} */
            const element = this.getElem(elem);
            if (this._viewportService.checkInViewport(element, 100, this.getLeftOffset())) {
                if (left) {
                    return elem > 0 ? children.item(elem - 1) : null;
                }
                else {
                    return elem + 1 < countElem ? children.item(elem + 1) : null;
                }
            }
        }
        return;
    }
    /**
     * @private
     * @param {?} num
     * @return {?}
     */
    getElem(num) {
        /** @type {?} */
        const elems = this.getChildren();
        return elems.item(num !== null ? num : elems.length - 1);
    }
    /**
     * @private
     * @return {?}
     */
    getChildren() {
        /** @type {?} */
        const el = this.getToolsElem();
        if (!el) {
            return;
        }
        return el.children;
    }
    /**
     * @private
     * @return {?}
     */
    getLeftOffset() {
        if (!this.leftOffset) {
            return 0;
        }
        /** @type {?} */
        const el = this._elementRef.nativeElement ? this._elementRef.nativeElement.parentElement.children[0] : null;
        if (!el) {
            return 0;
        }
        return el.clientWidth;
    }
    /**
     * @private
     * @return {?}
     */
    refresh() {
        this.showLeft = !this._viewportService.checkInViewport(this.getElem(0), 100, this.getLeftOffset(), 0.8);
        this.showRight = !this._viewportService.checkInViewport(this.getElem(null), 100, this.getLeftOffset(), 0.8);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        /** @type {?} */
        const showLeft = !this._viewportService.checkInViewport(this.getElem(0), 100, this.getLeftOffset(), 0.8);
        /** @type {?} */
        const showRight = !this._viewportService.checkInViewport(this.getElem(null), 100, this.getLeftOffset(), 0.8);
        if (showLeft !== this.showLeft || showRight !== this.showRight) {
            this.showLeft = showLeft;
            this.showRight = showRight;
            this._cdRef.detectChanges();
        }
    }
}
GspTopToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-gsp-top-toolbar',
                template: "<div class=\"top-toolbar\">\n    <!-- <app-gsp-button [className]=\"'arrow-button'\" class=\"arrow-left\" id=\"left\" [icon]=\"'caret-left'\" [tooltip]=\"'Scroll left'\" (click)=\"moveLeft()\" *ngIf=\"showLeft\">\n    </app-gsp-button> -->\n    <div id=\"tools\" class=\"tools\">\n        <ng-content></ng-content>\n    </div>\n    <!-- <app-gsp-button [className]=\"'arrow-button'\" class=\"arrow-right\" id=\"right\" [icon]=\"'caret-right'\" [tooltip]=\"'Scroll right'\" (click)=\"moveRight()\" *ngIf=\"showRight\">\n    </app-gsp-button> -->\n</div>",
                styles: [".top-toolbar{width:100%;height:60px;z-index:999;display:flex;align-items:center}.tools{width:100%;height:100%;display:flex;align-items:center}@media (max-width:1037px){.top-toolbar{height:60px}.arrow-right{position:absolute;right:0}.arrow-left{position:absolute;left:0}.tools{height:100%;overflow-x:auto;display:flex;align-items:center;transition:.3s ease-in-out;scroll-behavior:smooth;-webkit-overflow-scrolling:touch}.tools::-webkit-scrollbar{width:0;height:0;background-color:#3e4e5a}}"]
            }] }
];
/** @nocollapse */
GspTopToolbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewportService },
    { type: ChangeDetectorRef }
];
GspTopToolbarComponent.propDecorators = {
    leftOffset: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspTopToolbarModule {
}
GspTopToolbarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GspTopToolbarComponent],
                imports: [
                    CommonModule
                ],
                exports: [GspTopToolbarComponent],
                entryComponents: [GspTopToolbarComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DocViewerModule {
}
DocViewerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DocViewerComponent],
                imports: [
                    CommonModule,
                    GspDocumentModule,
                    GspTopToolbarModule
                ],
                exports: [DocViewerComponent],
                entryComponents: [DocViewerComponent],
                providers: [PagePreloadService, NavigateService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OfdViewerComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ocx = suwell.ofdReaderInit("ofdDiv", "100%", "100%");
        this.ocx.setCompsiteVisible("f_open", true);
        this.ocx.openFile(this.filePath, true);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    fileChange(filePath) {
        this.filePath = filePath;
        this.ocx.openFile(filePath, true);
    }
}
OfdViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-ofd-viewer',
                template: "<div id=\"ofdDiv\" style=\"width:100%;height:100%;\" ></div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
OfdViewerComponent.ctorParameters = () => [];
OfdViewerComponent.propDecorators = {
    filePath: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OfdViewerModule {
}
OfdViewerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [OfdViewerComponent],
                imports: [
                    CommonModule
                ],
                exports: [OfdViewerComponent],
                entryComponents: [OfdViewerComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const StorageType = {
    FileSystem: 0,
    Url: 1,
    UniFile: 2,
    Customer: 3,
};
StorageType[StorageType.FileSystem] = 'FileSystem';
StorageType[StorageType.Url] = 'Url';
StorageType[StorageType.UniFile] = 'UniFile';
StorageType[StorageType.Customer] = 'Customer';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ViewFileRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UnifileListInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MergePdfRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileListService {
    /**
     * @param {?} http
     * @param {?} httpClient
     */
    constructor(http, httpClient) {
        this.http = http;
        this.httpClient = httpClient;
    }
    /**
     * @param {?} filePath
     * @param {?} storageType
     * @return {?}
     */
    getViewFile(filePath, storageType) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/fileviewer/file";
        /** @type {?} */
        let viewRequest = new ViewFileRequest;
        viewRequest.storageType = storageType;
        viewRequest.filePath = filePath;
        /** @type {?} */
        let body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    getFormFileList(formId, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
        /** @type {?} */
        let unifileInfo = new UnifileListInfo;
        unifileInfo.formId = formId;
        unifileInfo.rootId = rootId;
        /** @type {?} */
        let viewRequest = new ViewFileRequest;
        viewRequest.storageType = StorageType.UniFile;
        viewRequest.filePath = JSON.stringify(unifileInfo);
        /** @type {?} */
        let body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setHeader(options) {
        options.headers = {
            'Content-Type': 'application/json'
        };
        return options;
    }
    /**
     * @param {?} idList
     * @param {?=} rootId
     * @return {?}
     */
    getFileList(idList, rootId = "") {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
        /** @type {?} */
        let unifileInfo = new UnifileListInfo;
        unifileInfo.metadataIdList = idList;
        unifileInfo.rootId = rootId;
        /** @type {?} */
        let viewRequest = new ViewFileRequest;
        viewRequest.storageType = StorageType.UniFile;
        viewRequest.filePath = JSON.stringify(unifileInfo);
        /** @type {?} */
        let body = viewRequest;
        return this.http.request('Post', url, this.setHeader({ body })).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    getMergedFile(idList, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/doc/mergepdf";
        /** @type {?} */
        let httpOptions = {};
        httpOptions['responseType'] = "blob";
        /** @type {?} */
        let body = new MergePdfRequest;
        body.metadataIdList = idList;
        body.rootId = rootId;
        body.token = this.getToken(this.mergeString(idList[0], rootId));
        return this.httpClient.post(url, body, httpOptions).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    mergeString(str, str1) {
        /** @type {?} */
        let min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        let res = "";
        /** @type {?} */
        let i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    getToken(str) {
        /** @type {?} */
        let array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        let length = Math.floor(str.length / 3);
        /** @type {?} */
        let str1 = str.substring(0, length);
        /** @type {?} */
        let str2 = str.substring(length, 2 * length);
        /** @type {?} */
        let str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        let randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        let timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    }
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    switchStr(str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    }
}
FileListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FileListService.ctorParameters = () => [
    { type: HttpService },
    { type: HttpClient }
];
/** @nocollapse */ FileListService.ngInjectableDef = defineInjectable({ factory: function FileListService_Factory() { return new FileListService(inject(HttpService), inject(HttpClient)); }, token: FileListService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const GspFileViewType = {
    Image: 0,
    Ofd: 1,
    Pdf: 2,
    Ppt: 3,
    Document: 4,
};
GspFileViewType[GspFileViewType.Image] = 'Image';
GspFileViewType[GspFileViewType.Ofd] = 'Ofd';
GspFileViewType[GspFileViewType.Pdf] = 'Pdf';
GspFileViewType[GspFileViewType.Ppt] = 'Ppt';
GspFileViewType[GspFileViewType.Document] = 'Document';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PdfViewOptions {
    constructor() {
        this.showHeader = true;
        this.showPaging = true;
        this.showThumbnails = true;
        this.showDownload = true;
        this.showSearch = true;
        this.showZoom = true;
        this.showPrint = true;
        this.showSecondaryToolBar = true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PdfViewerComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.pdfUrl = "";
        this.baseUrl = "/platform/common/web/pdfjs/viewer.html?file=";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.getViewUrl(this.baseUrl + encodeURIComponent(this.pdfUrl)));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    pdfChange(url) {
        this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.getViewUrl(this.baseUrl + encodeURIComponent(url)));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getViewUrl(url) {
        if (!this.viewOptions.showPaging)
            url += "&showpaging=false";
        if (!this.viewOptions.showHeader)
            url += "&showheader=false";
        if (!this.viewOptions.showThumbnails)
            url += "&showthumbnails=false";
        if (!this.viewOptions.showDownload)
            url += "&showdownload=false";
        if (!this.viewOptions.showSearch)
            url += "&showsearch=false";
        if (!this.viewOptions.showPrint)
            url += "&showprint=false";
        if (!this.viewOptions.showZoom)
            url += "&showzoom=false";
        if (!this.viewOptions.showSecondaryToolBar)
            url += "&showsecondarytoolbar=false";
        return url;
    }
}
PdfViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-pdf-viewer',
                template: "<iframe id=\"viewframe\" [src]=\"viewUrl\" height=\"100%\" width=\"100%\"></iframe>",
                styles: [""]
            }] }
];
/** @nocollapse */
PdfViewerComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
PdfViewerComponent.propDecorators = {
    pdfUrl: [{ type: Input }],
    viewOptions: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PptViewerComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.pptUrl);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    pptChange(url) {
        this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
    }
}
PptViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-ppt-viewer',
                template: "<div class=\"f-page\"><iframe id=\"viewPpt\" [src]=\"viewUrl\" height=\"100%\" width=\"100%\"></iframe></div>",
                styles: [""]
            }] }
];
/** @nocollapse */
PptViewerComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
PptViewerComponent.propDecorators = {
    pptUrl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileListComponent {
    /**
     * @param {?} listService
     * @param {?} msgService
     * @param {?} loadService
     * @param {?=} injector
     */
    constructor(listService, msgService, loadService, injector) {
        this.listService = listService;
        this.msgService = msgService;
        this.loadService = loadService;
        this.injector = injector;
        this.formId = '123456';
        this.rootId = 'default-root';
        this.metadataIdList = [];
        this.index = 0;
        this.metadataId = "";
        this.fileList = [];
        this.isImage = true;
        this.isOfd = true;
        this.isPdf = true;
        this.isPpt = true;
        //srcList: string[] = [];
        this.isDocShow = false;
        this.isOfdShow = false;
        this.isPdfShow = false;
        this.isPptShow = false;
        this.isFileListOpend = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const loading = this.loadService.show({
            message: '拼命的请求中'
        });
        if (this.metadataIdList.length > 0) {
            this.listService.getFileList(this.metadataIdList, this.rootId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                loading.close();
                if (res.error != null) {
                    this.msgService.warning('获取表单附件信息失败,请稍后重试。');
                }
                else {
                    this.fileList = res;
                    this.getFileIcon();
                    this.getIndex();
                    this.fileChange();
                    if (this.injector) {
                        /** @type {?} */
                        let changeDetector = this.injector.get(ChangeDetectorRef);
                        changeDetector.detectChanges();
                    }
                }
            }));
        }
        else {
            this.listService.getFormFileList(this.formId, this.rootId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                loading.close();
                if (res.error != null) {
                    this.msgService.warning('获取表单附件信息失败,请稍后重试。');
                }
                else {
                    this.fileList = res;
                    this.getFileIcon();
                    this.getIndex();
                    this.fileChange();
                    if (this.injector) {
                        /** @type {?} */
                        let changeDetector = this.injector.get(ChangeDetectorRef);
                        changeDetector.detectChanges();
                    }
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    getIndex() {
        if (this.metadataId == null || this.metadataId == "") {
            this.index = 0;
        }
        else if (this.fileList.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.metadataId == this.metadataId)).length == 0) {
            this.index = 0;
        }
        else {
            this.index = this.fileList.indexOf(this.fileList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.metadataId == this.metadataId))[0]);
        }
    }
    /**
     * @return {?}
     */
    fileChange() {
        this.file = this.fileList[this.index];
        //this.file=src;
        this.isImage = this.file.fileType == GspFileViewType.Image || this.file.fileType == 'Image';
        this.isOfd = this.file.fileType == GspFileViewType.Ofd || this.file.fileType == 'Ofd';
        this.isPdf = this.file.fileType == GspFileViewType.Pdf || this.file.fileType == 'Pdf';
        this.isPpt = this.file.fileType == GspFileViewType.Ppt || this.file.fileType == 'Ppt';
        if (this.isImage) {
            this.isDocShow = false;
            this.isOfdShow = false; //this.imageChange(this.file.fileUrl);
            this.isPptShow = false;
            return;
        }
        else if (this.isOfd) {
            //this.file.fileUrl="/platform/runtime/dfs/images/file.jpg";
            if (this.isOfdShow)
                this.ofdChange(this.file.filePath);
            else {
                this.isDocShow = false;
                this.isOfdShow = true;
                this.isPdfShow = false;
                this.isPptShow = false;
            }
        }
        else if (this.isPdf) {
            if (this.isPdfShow)
                this.pdfChange(this.file.filePath);
            else {
                this.isDocShow = false;
                this.isOfdShow = false;
                this.isPdfShow = true;
                this.isPptShow = false;
            }
        }
        else if (this.isPpt) {
            if (this.isPptShow)
                this.pptChange(this.file.filePath);
            else {
                this.isDocShow = false;
                this.isOfdShow = false;
                this.isPdfShow = false;
                this.isPptShow = true;
            }
        }
        else {
            if (this.isDocShow)
                this.docChange(this.file.filePath);
            else {
                this.isDocShow = true;
                this.isOfdShow = false;
                this.isPdfShow = false;
                this.isPptShow = false;
            }
        }
    }
    /**
     * @param {?} src
     * @return {?}
     */
    listBackColor(src) {
        if (this.file == src)
            return { "background-color": "#E6F7FF" };
    }
    /**
     * @param {?} src
     * @return {?}
     */
    fileSelect(src) {
        // this.file==src;
        this.index = this.fileList.indexOf(src);
        this.fileChange();
        //this.imageViewer.changeFile(this.index);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    imageChange(url) {
        this.imageUrl = url;
        this.imageViewer.imageChange(url);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    docChange(filePath) {
        this.docPath = filePath;
        this.docViewer.docChange(filePath);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    pdfChange(filePath) {
        //this.docPath = filePath;
        this.pdfViewer.pdfChange(filePath);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    pptChange(filePath) {
        //this.docPath = filePath;
        this.pptViewer.pptChange(filePath);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    ofdChange(filePath) {
        this.ofdViewer.fileChange(filePath);
    }
    /**
     * @return {?}
     */
    getFileIcon() {
        /** @type {?} */
        let elementIsImage = true;
        /** @type {?} */
        let elementIsOfd = false;
        this.fileList.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            elementIsImage = element.fileType == GspFileViewType.Image || element.fileType == 'Image';
            elementIsOfd = element.fileType == GspFileViewType.Ofd || element.fileType == 'Ofd';
            if (!elementIsImage && !elementIsOfd) {
                if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("doc") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("docx") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("wps"))
                    element.fileUrl = "/platform/runtime/dfs/images/word.png";
                else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("xls") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("xlsx") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("et"))
                    element.fileUrl = "/platform/runtime/dfs/images/excel.png";
                else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("ppt") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("pptx") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("dps"))
                    element.fileUrl = "/platform/runtime/dfs/images/ppt.png";
                else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("pdf"))
                    element.fileUrl = "/platform/runtime/dfs/images/pdf.png";
                else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("txt"))
                    element.fileUrl = "/platform/runtime/dfs/images/txt.png";
                else
                    element.fileUrl = "/platform/runtime/dfs/images/file.png";
            }
            if (elementIsOfd)
                element.fileUrl = "/platform/runtime/dfs/images/file.png";
        }));
    }
    /**
     * @return {?}
     */
    isShowFileList() {
        this.isFileListOpend = !this.isFileListOpend;
    }
    /**
     * @return {?}
     */
    download() {
        window.open(this.file.downloadUrl);
    }
    /**
     * @return {?}
     */
    zoomIn() {
        if (this.isImage) {
            this.imageViewer.zoomIn();
        }
        else if (this.isOfd) ;
        else {
            this.docViewer.zoomIn();
        }
    }
    /**
     * @return {?}
     */
    zoomOut() {
        if (this.isImage) {
            this.imageViewer.zoomOut();
        }
        else if (this.isOfd) ;
        else {
            this.docViewer.zoomOut();
        }
    }
    /**
     * @return {?}
     */
    zoomReset() {
        if (this.isImage) {
            this.imageViewer.zoomReset();
        }
        else if (this.isOfd) ;
        else {
            this.docViewer.zoomReset();
        }
    }
    /**
     * @return {?}
     */
    rotateClockwise() {
        if (this.isImage) {
            this.imageViewer.rotateClockwise();
        }
        else if (this.isOfd) ;
        else {
            this.docViewer.rotateClockwise();
        }
    }
    /**
     * @return {?}
     */
    rotateCounterClockwise() {
        if (this.isImage) {
            this.imageViewer.rotateCounterClockwise();
        }
        else if (this.isOfd) ;
        else {
            this.docViewer.rotateCounterClockwise();
        }
    }
}
FileListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-file-list',
                template: "<div class=\"f-utils-absolute-all\">\n    <kendo-splitter style=\"height:100%;width:100%\" orientation=\"vertical\">\n        <kendo-splitter-pane [collapsible]=\"true\" size=\"50px\" [resizable]='false'>\n\n            <div style=\"width: 100%\">\n                <div class=\"btn btn-secondary upload_button\" (click)=\"isShowFileList()\" style=\"left:40px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/discount.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u6587\u6863\u5217\u8868'\">\n                </div>\n                <div class=\"btn btn-secondary upload_button\" (click)=\"download()\" style=\"left:90px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/download.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u4E0B\u8F7D'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"zoomIn()\" style=\"left:50%; margin-left: -12.5px;;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/zoomin.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u653E\u5927'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"zoomOut()\" style=\"left:50%; margin-left: -62.5px;;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/zoomout.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u7F29\u5C0F'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"zoomReset()\" style=\"left:50%; margin-left: 37.5px;;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/zoomreset.png'\" class=\"upload_button\" style=\"top:2.5px;left:2.5px;width:20px;height:20px\" title=\"'\u91CD\u7F6E'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"rotateClockwise()\" style=\"right:40px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/rotate.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u987A\u65F6\u9488\u65CB\u8F6C'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"rotateCounterClockwise()\" style=\"right:90px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/conrotate.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u9006\u65F6\u9488\u65CB\u8F6C'\">\n                </div>\n            </div>\n\n        </kendo-splitter-pane>\n        <kendo-splitter-pane>\n            <kendo-splitter style=\"height:100%;width:100%\">\n                <kendo-splitter-pane [collapsible]=\"true\" size=\"200px\" [collapsed]=\"isFileListOpend\" [resizable]='false' [scrollable]='true' style=\"overflow-x:hidden\">\n                    <ul *ngFor=\"let src of fileList\" class=\"pic_list\" [ngStyle]=\"listBackColor(src)\">\n                        <a (click)=\"fileSelect(src)\">\n                            <div>\n                                <img [src]='src.fileUrl'>\n                            </div>\n                            <p>{{src.fileName}}</p>\n                        </a>\n                    </ul>\n                </kendo-splitter-pane>\n                <kendo-splitter-pane id=\"paneContent\" [scrollable]='true'>\n                    <div *ngIf='isImage&&!isOfd&&!isPdf&&!isPpt'>\n                        <app-image-viewer [imageUrl]=\"file.fileUrl\"></app-image-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&!isOfd&&!isPdf&&!isPpt'>\n                        <app-doc-viewer [filePath]=\"file.filePath\"></app-doc-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&isOfd&&!isPdf&&!isPpt'>\n                        <app-ofd-viewer [filePath]=\"file.filePath\"></app-ofd-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&!isOfd&&!isPdf&&isPpt'>\n                        <app-ppt-viewer [pptUrl]=\"file.filePath\"></app-ppt-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&!isOfd&&isPdf&&!isPpt' class=\"f-utils-fill\" style=\"height: 100%\">\n                        <app-pdf-viewer [pdfUrl]=\"file.filePath\" [viewOptions]=\"viewOptions\"></app-pdf-viewer>\n                    </div>\n                </kendo-splitter-pane>\n            </kendo-splitter>\n        </kendo-splitter-pane>\n    </kendo-splitter>\n</div>",
                styles: [".button-group{width:100%;height:50px;display:table-cell}.button-group button{width:25px;height:25px;vertical-align:middle;position:absolute;top:12.5px}.button-group button img{width:25px;height:25px;vertical-align:middle}.pic_list{border:1px solid #ddd;padding:0;list-style:none;width:200px;height:200px;text-align:center}.pic_list a div{display:table-cell;vertical-align:middle;text-align:center;width:120px;height:140px;margin:20px 40px 10px}.pic_list a div img{vertical-align:middle;text-align:center;max-width:120px;max-height:140px}.pic_list a p{width:170px;height:40px;font-size:14px;text-align:center;overflow:hidden;text-overflow:ellipsis;word-wrap:break-word;word-break:break-all;white-space:nowrap;margin:10px 15px 0}.upload_button{width:25px;height:25px;vertical-align:middle;position:absolute;top:12.5px}"]
            }] }
];
/** @nocollapse */
FileListComponent.ctorParameters = () => [
    { type: FileListService },
    { type: MessagerService },
    { type: LoadingService },
    { type: Injector }
];
FileListComponent.propDecorators = {
    formId: [{ type: Input }],
    rootId: [{ type: Input }],
    metadataIdList: [{ type: Input }],
    index: [{ type: Input }],
    metadataId: [{ type: Input }],
    viewOptions: [{ type: Input }],
    imageViewer: [{ type: ViewChild, args: [ImageViewerComponent,] }],
    docViewer: [{ type: ViewChild, args: [DocViewerComponent,] }],
    ofdViewer: [{ type: ViewChild, args: [OfdViewerComponent,] }],
    pdfViewer: [{ type: ViewChild, args: [PdfViewerComponent,] }],
    pptViewer: [{ type: ViewChild, args: [PptViewerComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PdfViewerModule {
}
PdfViewerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [PdfViewerComponent],
                imports: [
                    CommonModule,
                ],
                exports: [PdfViewerComponent],
                entryComponents: [PdfViewerComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PptViewerModule {
}
PptViewerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [PptViewerComponent],
                imports: [
                    CommonModule
                ], exports: [PptViewerComponent],
                entryComponents: [PptViewerComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileListModule {
}
FileListModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FileListComponent],
                imports: [
                    CommonModule,
                    ImageViewerModule,
                    DocViewerModule,
                    OfdViewerModule,
                    LayoutModule,
                    ButtonsModule,
                    PdfViewerModule,
                    PptViewerModule
                ],
                exports: [FileListComponent],
                entryComponents: [FileListComponent],
                providers: [HttpService, SessionService, LoadingService, RotationDirective,
                    SearchService, SelectionService, ZoomService, ConfigService, DocViewerService,
                    FileListService, NavigateService, PagePreloadService, WindowService$1, CloudprintService,
                    ɵa, ɵb, ɵc, AppService, WindowService, WindowContainerService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//import { UploadLimit } from './upload/entity/uploadlimit';
class FileViewerService {
    /**
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} injector
     * @param {?} fileListService
     * @param {?} msgService
     * @param {?} cloudprintService
     * @param {?} appService
     */
    constructor(modalService, componentFactoryResolver, injector, fileListService, msgService, cloudprintService, appService) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileListService = fileListService;
        this.msgService = msgService;
        this.cloudprintService = cloudprintService;
        this.appService = appService;
        this.windowWidth = window.innerWidth;
        this.windowHeigth = window.innerHeight;
    }
    //fileInfoList: UploadFileInfo[] = [];
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFile(formId, rootId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.formId = formId;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileList(metadataIdList, rootId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.metadataIdList = metadataIdList;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.metadataIdList = metadataIdList;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFileWithIndex(formId, rootId, metadataId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            viewerRef.instance.metadataId = metadataId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.formId = formId;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileListWithIndex(metadataIdList, rootId, metadataId, viewOptions = new PdfViewOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.metadataIdList = metadataIdList;
            viewerRef.instance.metadataId = metadataId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '',
                width: document.scrollingElement.clientWidth - 20,
                height: document.scrollingElement.clientWidth - 20,
                showButtons: false,
                showMaxButton: false,
                resizable: false,
                opened: (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                    }), 500);
                })
            });
            this.dlg.content.viewOptions = viewOptions;
            // this.dlg.content.metadataIdList = metadataIdList;
            // this.dlg.content.rootId = rootId;
        }));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    mergeAndViewPdfFiles(metadataIdList, rootId) {
        this.fileListService.getMergedFile(metadataIdList, rootId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res.error != null) {
                this.msgService.error(res.error.Message);
            }
            else {
                /** @type {?} */
                let options = {
                    OutputType: OutputType.PRINT,
                    FileType: FileType.Pdf,
                    Path: '',
                    DeviceId: '',
                    printType: PrintType.Form
                };
                this.cloudprintService.openRendedViewer4Attachment("tab", res, options);
            }
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFileInpage(formId, rootId, viewOptions = new PdfViewOptions) {
        this.viewerFormFileWithIndexInPage(formId, rootId, null, viewOptions);
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileListInPage(metadataIdList, rootId, viewOptions = new PdfViewOptions) {
        this.viewerFileListWithIndexInPage(metadataIdList, rootId, null, viewOptions);
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFormFileWithIndexInPage(formId, rootId, metadataId, viewOptions = new PdfViewOptions) {
        this.appService.openAppByOptions({
            appType: 'app',
            funcId: '',
            tabName: '文档在线预览',
            appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
            appEntrance: 'docviewertab',
            tabId: UUID.UUID(),
            entityParams: {
                formId: formId,
                rootId: rootId,
                metadataId: metadataId,
                viewOptions: viewOptions
            },
        });
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} metadataId
     * @param {?=} viewOptions
     * @return {?}
     */
    viewerFileListWithIndexInPage(metadataIdList, rootId, metadataId, viewOptions = new PdfViewOptions) {
        this.appService.openAppByOptions({
            appType: 'app',
            funcId: '',
            tabName: '文档在线预览',
            appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
            appEntrance: 'docviewertab',
            tabId: UUID.UUID(),
            entityParams: {
                metadataIdList: metadataIdList,
                rootId: rootId,
                metadataId: metadataId,
                viewOptions: viewOptions
            },
        });
    }
}
FileViewerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileViewerService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: FileListService },
    { type: MessagerService },
    { type: CloudprintService },
    { type: AppService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UnifileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UrlFileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CostomFileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspViewerComponent {
    /**
     * @param {?} listService
     * @param {?} msgService
     * @param {?} loadService
     */
    constructor(listService, msgService, loadService) {
        this.listService = listService;
        this.msgService = msgService;
        this.loadService = loadService;
        this.viewOptions = new PdfViewOptions;
        this.isImage = true;
        this.isOfd = true;
        this.isPdf = true;
        //srcList: string[] = [];
        this.isDocShow = false;
        this.isOfdShow = false;
        this.isPdfShow = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewFile(this.filePath, this.metadataId, this.rootId, this.fileType, this.fileName, this.serviceUnit, this.params);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.viewFile(this.filePath, this.metadataId, this.rootId, this.fileType, this.fileName, this.serviceUnit, this.params);
    }
    /**
     * @param {?} filePath
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} fileType
     * @param {?} fileName
     * @param {?} suName
     * @param {?} params
     * @return {?}
     */
    viewFile(filePath, metadataId, rootId, fileType, fileName, suName, params) {
        if (fileType == StorageType.UniFile) {
            /** @type {?} */
            let info = new UnifileInfo;
            info.metadataId = metadataId;
            info.rootId = rootId;
            filePath = JSON.stringify(info);
        }
        if (fileType == StorageType.Url) {
            /** @type {?} */
            let info = new UrlFileInfo;
            info.fileUrl = filePath;
            info.fileName = fileName;
            filePath = JSON.stringify(info);
        }
        if (fileType == StorageType.Customer) {
            /** @type {?} */
            let info = new CostomFileInfo;
            info.suName = suName;
            info.param = params;
            filePath = JSON.stringify(info);
        }
        /** @type {?} */
        const loading = this.loadService.show({
            message: '拼命的请求中'
        });
        this.listService.getViewFile(filePath, fileType).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            loading.close();
            if (res.error != null) {
                this.msgService.warning('获取预览文件失败' + res.error.Message);
            }
            else {
                this.file = res;
                this.fileChange();
            }
        }));
    }
    /**
     * @return {?}
     */
    fileChange() {
        //this.file=src;
        this.isImage = this.file.fileType == GspFileViewType.Image || this.file.fileType == 'Image';
        this.isOfd = this.file.fileType == GspFileViewType.Ofd || this.file.fileType == 'Ofd';
        this.isPdf = this.file.fileType == GspFileViewType.Pdf || this.file.fileType == 'Pdf';
        if (this.isImage) {
            this.isDocShow = false;
            this.isOfdShow = false; //this.imageChange(this.file.fileUrl);
            return;
        }
        else if (this.isOfd) {
            //this.file.fileUrl="/platform/runtime/dfs/images/file.jpg";
            if (this.isOfdShow)
                this.ofdChange(this.file.filePath);
            else {
                this.isDocShow = false;
                this.isOfdShow = true;
                this.isPdfShow = false;
            }
        }
        else if (this.isPdf) {
            if (this.isPdfShow)
                this.pdfChange(this.file.filePath);
            else {
                this.isDocShow = false;
                this.isOfdShow = false;
                this.isPdfShow = true;
            }
        }
        else {
            if (this.isDocShow)
                this.docChange(this.file.filePath);
            else {
                this.isDocShow = true;
                this.isOfdShow = false;
                this.isPdfShow = false;
            }
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    imageChange(url) {
        this.imageUrl = url;
        this.imageViewer.imageChange(url);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    docChange(filePath) {
        this.docPath = filePath;
        this.docViewer.docChange(filePath);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    pdfChange(filePath) {
        //this.docPath = filePath;
        this.pdfViewer.pdfChange(filePath);
    }
    /**
     * @param {?} filePath
     * @return {?}
     */
    ofdChange(filePath) {
        this.ofdViewer.fileChange(filePath);
    }
}
GspViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'gsp-viewer',
                template: "<div class=\"f-page\">\n    <div *ngIf='isImage&&!isOfd&&!isPdf'>\n        <app-image-viewer [imageUrl]=\"file.fileUrl\"></app-image-viewer>\n    </div>\n    <div *ngIf='!isImage&&!isOfd&&!isPdf'>\n        <app-doc-viewer [filePath]=\"file.filePath\"></app-doc-viewer>\n    </div>\n    <div *ngIf='!isImage&&isOfd&&!isPdf'>\n        <app-ofd-viewer [filePath]=\"file.filePath\"></app-ofd-viewer>\n    </div>\n    <div *ngIf='!isImage&&!isOfd&&isPdf' class=\"f-utils-fill\" style=\"height: 100%\">\n        <app-pdf-viewer [pdfUrl]=\"file.filePath\" [viewOptions]=\"viewOptions\"></app-pdf-viewer>\n    </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
GspViewerComponent.ctorParameters = () => [
    { type: FileListService },
    { type: MessagerService },
    { type: LoadingService }
];
GspViewerComponent.propDecorators = {
    filePath: [{ type: Input }],
    metadataId: [{ type: Input }],
    rootId: [{ type: Input }],
    fileName: [{ type: Input }],
    fileType: [{ type: Input }],
    viewOptions: [{ type: Input }],
    serviceUnit: [{ type: Input }],
    params: [{ type: Input }],
    imageViewer: [{ type: ViewChild, args: [ImageViewerComponent,] }],
    docViewer: [{ type: ViewChild, args: [DocViewerComponent,] }],
    ofdViewer: [{ type: ViewChild, args: [OfdViewerComponent,] }],
    pdfViewer: [{ type: ViewChild, args: [PdfViewerComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspViewerModule {
}
GspViewerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GspViewerComponent],
                imports: [
                    CommonModule,
                    ImageViewerModule,
                    DocViewerModule,
                    OfdViewerModule,
                    PdfViewerModule,
                    NotifyModule.forRoot()
                ],
                exports: [GspViewerComponent],
                entryComponents: [GspViewerComponent],
                providers: [RotationDirective, SearchService, SelectionService, ZoomService, ConfigService, DocViewerService,
                    FileListService, NavigateService, PagePreloadService, WindowService$1]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DocViewerModule as ɵg, DocViewerComponent as ɵc, GspDocumentModule as ɵh, GspDocumentComponent as ɵi, GspPageComponent as ɵk, SanitizeHtmlPipe as ɵp, SanitizeResourceHtmlPipe as ɵq, SanitizeStylePipe as ɵr, RotationDirective as ɵo, SearchService as ɵn, SearchableDirective as ɵm, SelectionService as ɵs, ZoomDirective as ɵl, ZoomService as ɵj, ImageViewerModule as ɵf, ImageViewerComponent as ɵb, OfdViewerModule as ɵt, OfdViewerComponent as ɵe, ConfigService as ɵz, DocViewerService as ɵd, FileListService as ɵa, NavigateService as ɵv, PagePreloadService as ɵu, WindowService$1 as ɵy, FileListModule, FileListComponent, FileViewerService, PdfViewOptions, GspViewerModule, GspViewerComponent, ScrollableDirective, ExcelDocumentComponent as ɵw, ExcelPageComponent as ɵx, GspTopToolbarComponent as ɵbf, GspTopToolbarModule as ɵbe, PdfViewerModule as ɵbg, PdfViewerComponent as ɵbb, PptViewerModule as ɵbh, PptViewerComponent as ɵbc, ExcelPageService as ɵba, ViewportService as ɵbd };

//# sourceMappingURL=gsp-svc-file-viewer.js.map