(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery'), require('@progress/kendo-angular-layout'), require('@progress/kendo-angular-buttons'), require('@ecp-caf/caf-common'), require('rxjs/operators'), require('@angular/common/http'), require('rxjs'), require('@angular/platform-browser'), require('@progress/kendo-angular-dialog'), require('@farris/ui-modal'), require('@gsp-svc/cloudprint'), require('@gsp-sys/rtf-common'), require('angular2-uuid'), require('@angular/common'), require('@angular/core'), require('@farris/ui-loading'), require('@farris/ui-messager'), require('@farris/ui-notify')) :
    typeof define === 'function' && define.amd ? define('@gsp-svc/file-viewer', ['exports', 'jquery', '@progress/kendo-angular-layout', '@progress/kendo-angular-buttons', '@ecp-caf/caf-common', 'rxjs/operators', '@angular/common/http', 'rxjs', '@angular/platform-browser', '@progress/kendo-angular-dialog', '@farris/ui-modal', '@gsp-svc/cloudprint', '@gsp-sys/rtf-common', 'angular2-uuid', '@angular/common', '@angular/core', '@farris/ui-loading', '@farris/ui-messager', '@farris/ui-notify'], factory) :
    (factory((global['gsp-svc'] = global['gsp-svc'] || {}, global['gsp-svc']['file-viewer'] = {}),global.jquery,global.kendoAngularLayout,global.kendoAngularButtons,global.i1,global.rxjs.operators,global.ng.common.http,global.rxjs,global.ng.platformBrowser,global.kendoAngularDialog,global.uiModal,global.cloudprint,global.rtfCommon,global.angular2Uuid,global.ng.common,global.ng.core,global.uiLoading,global.uiMessager,global.uiNotify));
}(this, (function (exports,jquery,kendoAngularLayout,kendoAngularButtons,i1,operators,i2,rxjs,platformBrowser,kendoAngularDialog,uiModal,cloudprint,rtfCommon,angular2Uuid,common,i0,uiLoading,uiMessager,uiNotify) { 'use strict';

    var jquery__default = 'default' in jquery ? jquery['default'] : jquery;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImageViewerComponent = /** @class */ (function () {
        function ImageViewerComponent() {
            this.index = 0;
            this.style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };
            this.scale = 1;
            this.rotation = 0;
            this.translateX = 0;
            this.translateY = 0;
        }
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.zoomIn = /**
         * @return {?}
         */
            function () {
                this.scale < 4 ? this.scale += 0.1 : 4;
                this.updateStyle();
            };
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.zoomOut = /**
         * @return {?}
         */
            function () {
                this.scale > 0.3 ? this.scale -= 0.1 : 0.3;
                this.scale = Number(this.scale.toFixed(1));
                this.updateStyle();
            };
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.zoomReset = /**
         * @return {?}
         */
            function () {
                this.scale = 1;
                this.updateStyle();
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        ImageViewerComponent.prototype.scrollZoom = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                evt.deltaY > 0 ? this.zoomOut() : this.zoomIn();
                return false;
            };
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.rotateClockwise = /**
         * @return {?}
         */
            function () {
                this.rotation += 90;
                this.updateStyle();
            };
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.rotateCounterClockwise = /**
         * @return {?}
         */
            function () {
                this.rotation -= 90;
                this.updateStyle();
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        ImageViewerComponent.prototype.onDragStart = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                this.prevX = evt.clientX;
                this.prevY = evt.clientY;
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        ImageViewerComponent.prototype.onDragOver = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                this.translateX += (evt.clientX - this.prevX);
                this.translateY += (evt.clientY - this.prevY);
                this.prevX = evt.clientX;
                this.prevY = evt.clientY;
                this.updateStyle();
            };
        // @HostListener('window:keyup.ArrowLeft')
        // preFile() {
        //   if (this.index > 0) {
        //     this.index -= 1;
        //     this.reset();
        //   }
        // }
        // @HostListener('window:keyup.ArrowRight')
        // nextFile() {
        //   if (this.index < this.src.length - 1) {
        //     this.index += 1;
        //     this.reset();
        //   }
        // }
        // @HostListener('window:keyup.ArrowLeft')
        // preFile() {
        //   if (this.index > 0) {
        //     this.index -= 1;
        //     this.reset();
        //   }
        // }
        // @HostListener('window:keyup.ArrowRight')
        // nextFile() {
        //   if (this.index < this.src.length - 1) {
        //     this.index += 1;
        //     this.reset();
        //   }
        // }
        /**
         * @param {?} url
         * @return {?}
         */
        ImageViewerComponent.prototype.imageChange =
            // @HostListener('window:keyup.ArrowLeft')
            // preFile() {
            //   if (this.index > 0) {
            //     this.index -= 1;
            //     this.reset();
            //   }
            // }
            // @HostListener('window:keyup.ArrowRight')
            // nextFile() {
            //   if (this.index < this.src.length - 1) {
            //     this.index += 1;
            //     this.reset();
            //   }
            // }
            /**
             * @param {?} url
             * @return {?}
             */
            function (url) {
                this.imageUrl = url;
                this.reset();
            };
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.scale = 1;
                this.rotation = 0;
                this.translateX = 0;
                this.translateY = 0;
                this.updateStyle();
            };
        /**
         * @return {?}
         */
        ImageViewerComponent.prototype.updateStyle = /**
         * @return {?}
         */
            function () {
                this.style.transform = "translate(" + this.translateX + "px, " + this.translateY + "px) rotate(" + this.rotation + "deg) scale(" + this.scale + ")";
                this.style.msTransform = this.style.transform;
                this.style.webkitTransform = this.style.transform;
                this.style.oTransform = this.style.transform;
            };
        ImageViewerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-image-viewer',
                        template: "<div (wheel)=\"scrollZoom($event)\" (dragover)=\"onDragOver($event)\" (dragstart)=\"onDragStart($event)\"  >\n  <img [src]='imageUrl' id=\"image\" [ngStyle]=\"style\">\n  <!-- <div>\n      <button id=\"zoomin\" kendoButton [icon]=\"'zoom-in'\" (click)=\"zoomIn()\"></button>\n      <button id=\"zoomout\" kendoButton [icon]=\"'zoom-out'\" (click)=\"zoomOut()\"></button>\n      <button id=\"clockwise\" kendoButton [icon]=\"'reload'\" (click)=\"rotateClockwise()\"></button>\n      <button id=\"counterclockwise\" kendoButton [icon]=\"'reset'\" (click)=\"rotateCounterClockwise()\"></button>\n  </div> -->\n  <!--div id=\"picchange\">\n      <button *ngIf=\"src.length>1\" id=\"prepic\" kendoButton [icon]=\"'arrow-chevron-left'\" (click)=\"prePicture()\"\n          [disabled]=\"index == 0\"></button>\n\n      <button *ngIf=\"src.length>1\" id=\"nextpic\" kendoButton [icon]=\"'arrow-chevron-right'\" (click)=\"nextPicture()\"\n          [disabled]=\"index == src.length - 1\"></button>\n  </div-->\n</div>\n",
                        styles: ["#image{text-align:center;margin:auto;top:0;left:0;bottom:0;right:0;position:absolute;max-height:100%;max-width:100%;overflow:hidden}#zoomin{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:285px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#zoomout{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:205px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#clockwise{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:125px;transform:scale(1.5) rotate(45deg);-ms-transform:scale(1.5) rotate(45deg);-moz-transform:scale(1.5) rotate(45deg);-webkit-transform:scale(1.5) rotate(45deg);-o-transform:scale(1.5) rotate(45deg)}#counterclockwise{width:40px;height:40px;border-radius:20px;position:absolute;right:30px;bottom:45px;transform:scale(1.5) rotate(-45deg);-ms-transform:scale(1.5) rotate(-45deg);-moz-transform:scale(1.5) rotate(-45deg);-webkit-transform:scale(1.5) rotate(-45deg);-o-transform:scale(1.5) rotate(-45deg)}#prepic{width:40px;height:40px;border-radius:20px;position:absolute;bottom:25px;right:50px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#nextpic{width:40px;height:40px;border-radius:20px;position:relative;bottom:25px;left:50px;transform:scale(1.5);-ms-transform:scale(1.5);-moz-transform:scale(1.5);-webkit-transform:scale(1.5);-o-transform:scale(1.5)}#picchange{position:fixed;bottom:0;left:50%}"]
                    }] }
        ];
        /** @nocollapse */
        ImageViewerComponent.ctorParameters = function () { return []; };
        ImageViewerComponent.propDecorators = {
            imageUrl: [{ type: i0.Input }]
        };
        return ImageViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ImageViewerModule = /** @class */ (function () {
        function ImageViewerModule() {
        }
        ImageViewerModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [ImageViewerComponent],
                        imports: [
                            common.CommonModule,
                            kendoAngularButtons.ButtonsModule,
                            uiMessager.MessagerModule.forRoot(),
                            uiModal.ModalModule.forRoot(),
                            uiLoading.LoadingModule.forRoot({
                                message: 'Loading...'
                            }),
                        ],
                        exports: [ImageViewerComponent],
                        entryComponents: [ImageViewerComponent],
                    },] }
        ];
        return ImageViewerModule;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocViewRequest = /** @class */ (function () {
        function DocViewRequest() {
        }
        return DocViewRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Api = /** @class */ (function () {
        function Api() {
        }
        Api.VIEWER_APP = '/viewer';
        Api.EDITOR_APP = '/editor';
        Api.COMPARISON_APP = '/comparison';
        Api.CONVERSION_APP = '/conversion';
        Api.DEFAULT_API_ENDPOINT = window.location.href;
        Api.LOAD_FILE_TREE = '/loadFileTree';
        Api.LOAD_CONFIG = '/loadConfig';
        Api.LOAD_DOCUMENT_DESCRIPTION = '/loadDocumentDescription';
        Api.LOAD_DOCUMENT_PAGE = '/loadDocumentPage';
        Api.ROTATE_DOCUMENT_PAGE = '/rotateDocumentPages';
        Api.UPLOAD_DOCUMENTS = '/uploadDocument';
        Api.DOWNLOAD_DOCUMENTS = '/downloadDocument';
        Api.LOAD_PRINT = '/loadPrint';
        Api.LOAD_PRINT_PDF = '/printPdf';
        Api.LOAD_THUMBNAILS = '/loadThumbnails';
        Api.LOAD_FORMATS = '/loadFormats';
        Api.SAVE_FILE = '/saveFile';
        Api.COMPARE_FILES = '/compare';
        Api.CONVERT_FILE = '/convert';
        Api.httpOptionsJson = {
            headers: new i2.HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        Api.httpOptionsJsonResponseTypeBlob = {
            headers: new i2.HttpHeaders({
                'Content-Type': 'application/json',
            }),
            responseType: ( /** @type {?} */('blob'))
        };
        return Api;
    }());
    var ConfigService = /** @class */ (function () {
        function ConfigService() {
            this.apiEndpoint = Api.DEFAULT_API_ENDPOINT;
        }
        Object.defineProperty(ConfigService.prototype, "apiEndpoint", {
            get: /**
             * @return {?}
             */ function () {
                return this._apiEndpoint;
            },
            set: /**
             * @param {?} url
             * @return {?}
             */ function (url) {
                this._apiEndpoint = url && url.trim().endsWith('/') ? url.substring(0, url.length - 1) : url;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} app
         * @return {?}
         */
        ConfigService.prototype.getConfigEndpoint = /**
         * @param {?} app
         * @return {?}
         */
            function (app) {
                return (this.apiEndpoint.endsWith(app) ? this.apiEndpoint : this.apiEndpoint + app) + Api.LOAD_CONFIG;
            };
        /**
         * @return {?}
         */
        ConfigService.prototype.getViewerApiEndpoint = /**
         * @return {?}
         */
            function () {
                return this._apiEndpoint.endsWith(Api.VIEWER_APP) ? this._apiEndpoint : this._apiEndpoint + Api.VIEWER_APP;
            };
        /**
         * @return {?}
         */
        ConfigService.prototype.getEditorApiEndpoint = /**
         * @return {?}
         */
            function () {
                return this._apiEndpoint.trim().endsWith(Api.EDITOR_APP) ? this._apiEndpoint : this._apiEndpoint + Api.EDITOR_APP;
            };
        /**
         * @return {?}
         */
        ConfigService.prototype.getComparisonApiEndpoint = /**
         * @return {?}
         */
            function () {
                return this._apiEndpoint.trim().endsWith(Api.COMPARISON_APP) ? this._apiEndpoint : this._apiEndpoint + Api.COMPARISON_APP;
            };
        /**
         * @return {?}
         */
        ConfigService.prototype.getConversionApiEndpoint = /**
         * @return {?}
         */
            function () {
                return this._apiEndpoint.trim().endsWith(Api.CONVERSION_APP) ? this._apiEndpoint : this._apiEndpoint + Api.CONVERSION_APP;
            };
        ConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ConfigService.ctorParameters = function () { return []; };
        /** @nocollapse */ ConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ConfigService_Factory() { return new ConfigService(); }, token: ConfigService, providedIn: "root" });
        return ConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RotateDocumentPagesRequest = /** @class */ (function () {
        function RotateDocumentPagesRequest() {
        }
        return RotateDocumentPagesRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocViewerService = /** @class */ (function () {
        function DocViewerService(http, _http, _config) {
            this.http = http;
            this._http = _http;
            this._config = _config;
        }
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        DocViewerService.prototype.setHeader = /**
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                options.headers = {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                };
                return options;
            };
        /**
         * @param {?} body
         * @return {?}
         */
        DocViewerService.prototype.loadFileInfo = /**
         * @param {?} body
         * @return {?}
         */
            function (body) {
                /** @type {?} */
                var url = '/api/runtime/dfs/v1.0/docviewer/loaddocument';
                return this.http.request('Post', url, this.setHeader({ body: body })).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        // loadFiles(path: string) {
        //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_FILE_TREE, {'path': path}, Api.httpOptionsJson);
        // }
        // loadFile(credentials: FileCredentials) {
        //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_DOCUMENT_DESCRIPTION, credentials, Api.httpOptionsJson);
        // }
        // upload(file: File, url: string, rewrite: boolean) {
        //   const formData = new FormData();
        //   formData.append("file", file);
        //   formData.append('rewrite', String(rewrite));
        //   if (url) {
        //     formData.append("url", url);
        //   }
        //   return this._http.post(this._config.getViewerApiEndpoint() + Api.UPLOAD_DOCUMENTS, formData);
        // }
        // loadFiles(path: string) {
        //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_FILE_TREE, {'path': path}, Api.httpOptionsJson);
        // }
        // loadFile(credentials: FileCredentials) {
        //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_DOCUMENT_DESCRIPTION, credentials, Api.httpOptionsJson);
        // }
        // upload(file: File, url: string, rewrite: boolean) {
        //   const formData = new FormData();
        //   formData.append("file", file);
        //   formData.append('rewrite', String(rewrite));
        //   if (url) {
        //     formData.append("url", url);
        //   }
        //   return this._http.post(this._config.getViewerApiEndpoint() + Api.UPLOAD_DOCUMENTS, formData);
        // }
        /**
         * @param {?} credentials
         * @param {?} page
         * @return {?}
         */
        DocViewerService.prototype.loadPage =
            // loadFiles(path: string) {
            //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_FILE_TREE, {'path': path}, Api.httpOptionsJson);
            // }
            // loadFile(credentials: FileCredentials) {
            //   return this._http.post(this._config.getViewerApiEndpoint() + Api.LOAD_DOCUMENT_DESCRIPTION, credentials, Api.httpOptionsJson);
            // }
            // upload(file: File, url: string, rewrite: boolean) {
            //   const formData = new FormData();
            //   formData.append("file", file);
            //   formData.append('rewrite', String(rewrite));
            //   if (url) {
            //     formData.append("url", url);
            //   }
            //   return this._http.post(this._config.getViewerApiEndpoint() + Api.UPLOAD_DOCUMENTS, formData);
            // }
            /**
             * @param {?} credentials
             * @param {?} page
             * @return {?}
             */
            function (credentials, page) {
                return this._http.post('/api/runtime/dfs/v1.0/docviewer/loaddocumentPage', {
                    'filePath': credentials.guid,
                    'password': credentials.password,
                    'page': page
                }, Api.httpOptionsJson);
            };
        /**
         * @param {?} credentials
         * @param {?} angle
         * @param {?} page
         * @return {?}
         */
        DocViewerService.prototype.rotate = /**
         * @param {?} credentials
         * @param {?} angle
         * @param {?} page
         * @return {?}
         */
            function (credentials, angle, page) {
                /** @type {?} */
                var url = '/api/runtime/dfs/v1.0/docviewer/rotatedocumentPage';
                // return this._http.post(url, {
                //   'filePath': credentials.guid,
                //   'password': credentials.password,
                //   'pages': [page],
                //   'angle': angle
                // }, Api.httpOptionsJson);
                /** @type {?} */
                var body = new RotateDocumentPagesRequest;
                body.filePath = credentials.guid;
                body.angle = angle;
                body.pages = [page];
                return this.http.request('Post', url, this.setHeader({ body: body })).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        DocViewerService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DocViewerService.ctorParameters = function () {
            return [
                { type: i1.HttpService },
                { type: i2.HttpClient },
                { type: ConfigService }
            ];
        };
        /** @nocollapse */ DocViewerService.ngInjectableDef = i0.defineInjectable({ factory: function DocViewerService_Factory() { return new DocViewerService(i0.inject(i1.HttpService), i0.inject(i2.HttpClient), i0.inject(ConfigService)); }, token: DocViewerService, providedIn: "root" });
        return DocViewerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ZoomService = /** @class */ (function () {
        function ZoomService() {
            this._observer = new rxjs.Subject();
            this._zoomChange = this._observer.asObservable();
        }
        Object.defineProperty(ZoomService.prototype, "zoom", {
            get: /**
             * @return {?}
             */ function () {
                return this._zoom;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ZoomService.prototype, "zoomChange", {
            get: /**
             * @return {?}
             */ function () {
                return this._zoomChange;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} zoom
         * @return {?}
         */
        ZoomService.prototype.changeZoom = /**
         * @param {?} zoom
         * @return {?}
         */
            function (zoom) {
                this._zoom = zoom;
                this._observer.next(zoom);
            };
        /**
         * @private
         * @param {?} val
         * @param {?} name
         * @param {?=} sep
         * @return {?}
         */
        ZoomService.prototype.createZoomOption = /**
         * @private
         * @param {?} val
         * @param {?} name
         * @param {?=} sep
         * @return {?}
         */
            function (val, name, sep) {
                if (sep === void 0) {
                    sep = false;
                }
                return { value: val, name: name, separator: sep };
            };
        /**
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        ZoomService.prototype.zoomOptions = /**
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
            function (width, height) {
                return [this.createZoomOption(25, '25%'),
                    this.createZoomOption(50, '50%'),
                    this.createZoomOption(100, '100%'),
                    this.createZoomOption(150, '150%'),
                    this.createZoomOption(200, '200%'),
                    this.createZoomOption(300, '300%'),
                    this.createZoomOption(0, '', true),
                    this.createZoomOption(width, 'Fit Width'),
                    this.createZoomOption(height, 'Fit Height')];
            };
        ZoomService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        ZoomService.ctorParameters = function () { return []; };
        return ZoomService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PagePreloadService = /** @class */ (function () {
        function PagePreloadService() {
            var _this = this;
            this._checkPreload = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) {
                return _this._observer = observer;
            }));
        }
        Object.defineProperty(PagePreloadService.prototype, "checkPreload", {
            get: /**
             * @return {?}
             */ function () {
                return this._checkPreload;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} page
         * @return {?}
         */
        PagePreloadService.prototype.changeLastPageInView = /**
         * @param {?} page
         * @return {?}
         */
            function (page) {
                if (this._observer) {
                    this._observer.next(page);
                }
            };
        PagePreloadService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        PagePreloadService.ctorParameters = function () { return []; };
        /** @nocollapse */ PagePreloadService.ngInjectableDef = i0.defineInjectable({ factory: function PagePreloadService_Factory() { return new PagePreloadService(); }, token: PagePreloadService, providedIn: "root" });
        return PagePreloadService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NavigateService = /** @class */ (function () {
        function NavigateService(_pagePreloadService) {
            var _this = this;
            this._pagePreloadService = _pagePreloadService;
            this._currentPage = 0;
            this._countPages = 0;
            this._navigate = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) {
                return _this._observer = observer;
            }));
        }
        Object.defineProperty(NavigateService.prototype, "navigate", {
            get: /**
             * @return {?}
             */ function () {
                return this._navigate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigateService.prototype, "countPages", {
            get: /**
             * @return {?}
             */ function () {
                return this._countPages;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._countPages = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigateService.prototype, "currentPage", {
            get: /**
             * @return {?}
             */ function () {
                return this._currentPage;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._currentPage = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NavigateService.prototype.nextPage = /**
         * @return {?}
         */
            function () {
                if (this._currentPage < this._countPages) {
                    this._currentPage++;
                    this.navigateTo(this._currentPage);
                }
            };
        /**
         * @return {?}
         */
        NavigateService.prototype.prevPage = /**
         * @return {?}
         */
            function () {
                if (this._currentPage > 1) {
                    this._currentPage--;
                    this.navigateTo(this._currentPage);
                }
            };
        /**
         * @return {?}
         */
        NavigateService.prototype.toLastPage = /**
         * @return {?}
         */
            function () {
                this._currentPage = this._countPages;
                this.navigateTo(this._currentPage);
            };
        /**
         * @return {?}
         */
        NavigateService.prototype.toFirstPage = /**
         * @return {?}
         */
            function () {
                this._currentPage = 1;
                this.navigateTo(this._currentPage);
            };
        /**
         * @param {?} page
         * @return {?}
         */
        NavigateService.prototype.navigateTo = /**
         * @param {?} page
         * @return {?}
         */
            function (page) {
                this.currentPage = page;
                this._pagePreloadService.changeLastPageInView(page);
                this._observer.next(page);
            };
        NavigateService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NavigateService.ctorParameters = function () {
            return [
                { type: PagePreloadService }
            ];
        };
        /** @nocollapse */ NavigateService.ngInjectableDef = i0.defineInjectable({ factory: function NavigateService_Factory() { return new NavigateService(i0.inject(PagePreloadService)); }, token: NavigateService, providedIn: "root" });
        return NavigateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MOBILE_MAX_WIDTH = 425;
    /** @type {?} */
    var TABLET_MAX_WIDTH = 1024;
    var WindowService = /** @class */ (function () {
        function WindowService() {
            var _this = this;
            this.resizeSubject = new rxjs.Subject();
            this.width = window.innerWidth;
            this.height = window.innerHeight;
            this._resize$ = rxjs.fromEvent(window, 'resize')
                .pipe(operators.debounceTime(200), operators.distinctUntilChanged(), operators.startWith({ target: { innerWidth: window.innerWidth, innerHeight: window.innerHeight } }), operators.tap(( /**
         * @param {?} event
         * @return {?}
         */function (event) {
                _this.resizeSubject.next(( /** @type {?} */(event.target)));
                _this.width = (( /** @type {?} */(event.target))).innerWidth;
                _this.height = (( /** @type {?} */(event.target))).innerHeight;
            })));
            this._resize$.subscribe();
        }
        Object.defineProperty(WindowService.prototype, "onResize", {
            get: /**
             * @return {?}
             */ function () {
                return this.resizeSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        WindowService.prototype.isMobile = /**
         * @return {?}
         */
            function () {
                return this.width <= MOBILE_MAX_WIDTH;
            };
        /**
         * @return {?}
         */
        WindowService.prototype.isTablet = /**
         * @return {?}
         */
            function () {
                return this.width <= TABLET_MAX_WIDTH;
            };
        /**
         * @return {?}
         */
        WindowService.prototype.isDesktop = /**
         * @return {?}
         */
            function () {
                return !this.isMobile() && !this.isTablet();
            };
        /**
         * @return {?}
         */
        WindowService.prototype.getWidth = /**
         * @return {?}
         */
            function () {
                return this.width;
            };
        /**
         * @return {?}
         */
        WindowService.prototype.getHeight = /**
         * @return {?}
         */
            function () {
                return this.height;
            };
        /**
         * @return {?}
         */
        WindowService.prototype.isEdge = /**
         * @return {?}
         */
            function () {
                return window.navigator.userAgent.toLowerCase().indexOf('edge') > -1;
            };
        /**
         * @return {?}
         */
        WindowService.prototype.isFirefox = /**
         * @return {?}
         */
            function () {
                return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
            };
        WindowService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        WindowService.ctorParameters = function () { return []; };
        /** @nocollapse */ WindowService.ngInjectableDef = i0.defineInjectable({ factory: function WindowService_Factory() { return new WindowService(); }, token: WindowService, providedIn: "root" });
        return WindowService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExcelPageService = /** @class */ (function () {
        function ExcelPageService() {
        }
        /**
         * @param {?} data
         * @return {?}
         */
        ExcelPageService.prototype.getUpdatedPage = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                /** @type {?} */
                var doc = new DOMParser().parseFromString(data, "text/html");
                /** @type {?} */
                var table = doc.querySelector('table');
                /** @type {?} */
                var numCellsInFirstRow = 0;
                /** @type {?} */
                var cellsFromFirstRow = doc.querySelectorAll('table > tbody > tr:first-child td');
                cellsFromFirstRow.forEach(( /**
                 * @param {?} elm
                 * @return {?}
                 */function (elm) {
                    numCellsInFirstRow += elm.attributes['colspan'] ? parseInt(elm.attributes['colspan'].value, 10) : 1;
                }));
                /** @type {?} */
                var newTable = this.createHeader(numCellsInFirstRow, table);
                doc.querySelector('table').replaceWith(newTable);
                /** @type {?} */
                var resultData = new XMLSerializer().serializeToString(doc);
                // work-around for FF which is adds a0 namespace during serialization
                return resultData.replace(/a0:/g, "").replace(/:a0/g, "");
            };
        /**
         * @param {?} numCols
         * @param {?} table
         * @return {?}
         */
        ExcelPageService.prototype.createHeader = /**
         * @param {?} numCols
         * @param {?} table
         * @return {?}
         */
            function (numCols, table) {
                /** @type {?} */
                var header = document.createElement('thead');
                header.append(document.createElement('tr'));
                for (var i = 0; i < numCols; ++i) {
                    /** @type {?} */
                    var th = document.createElement('th');
                    th.innerText = this.colName(i);
                    header.querySelector("tr").append(th);
                }
                /** @type {?} */
                var colgroup = table.querySelector('colgroup');
                /** @type {?} */
                var col = document.createElement('col');
                col.width = '80px';
                colgroup.prepend(col);
                table.prepend(header);
                /** @type {?} */
                var cnt = 0;
                table.querySelectorAll('tr').forEach(( /**
                 * @param {?} row
                 * @return {?}
                 */function (row) {
                    /** @type {?} */
                    var div = document.createElement('div');
                    if (cnt !== 0) {
                        /** @type {?} */
                        var td = document.createElement('td');
                        td.className = "excel";
                        td.append(div);
                        div.innerText = cnt.toString();
                        row.prepend(td);
                    }
                    else {
                        /** @type {?} */
                        var th = document.createElement('th');
                        th.append(div);
                        row.prepend(th);
                    }
                    cnt++;
                }));
                return table;
            };
        /**
         * @param {?} n
         * @return {?}
         */
        ExcelPageService.prototype.colName = /**
         * @param {?} n
         * @return {?}
         */
            function (n) {
                /** @type {?} */
                var ordA = 'a'.charCodeAt(0);
                /** @type {?} */
                var ordZ = 'z'.charCodeAt(0);
                /** @type {?} */
                var len = ordZ - ordA + 1;
                /** @type {?} */
                var s = "";
                while (n >= 0) {
                    s = String.fromCharCode(n % len + ordA) + s;
                    n = Math.floor(n / len) - 1;
                }
                return s;
            };
        ExcelPageService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ExcelPageService.ctorParameters = function () { return []; };
        /** @nocollapse */ ExcelPageService.ngInjectableDef = i0.defineInjectable({ factory: function ExcelPageService_Factory() { return new ExcelPageService(); }, token: ExcelPageService, providedIn: "root" });
        return ExcelPageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExcelPageComponent = /** @class */ (function () {
        function ExcelPageComponent(_excelPageService) {
            this._excelPageService = _excelPageService;
        }
        /**
         * @return {?}
         */
        ExcelPageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var isIE = /*@cc_on!@*/ !!/(MSIE|Trident\/|Edge\/)/i.test(navigator.userAgent);
                if (isIE && this.number === 0) {
                    this.editable = false;
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ExcelPageComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.isHtml) {
                    // TODO: this is temporary needed to remove unneeded spaces and BOM symbol 
                    // which leads to undesired spaces on the top of the docs pages
                    this.data = this.data
                        ? this.data.replace(/>\s+</g, '><')
                            .replace(/\uFEFF/g, "")
                        : null;
                }
                else {
                    if (this.data) {
                        this.imgData = this.data.startsWith('data:image')
                            ? this.data
                            : 'data:image/png;base64,' + this.data;
                    }
                }
            };
        ExcelPageComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-excel-page',
                        template: "<div id=\"page-{{number}}\">\r\n    <div class=\"gd-wrapper\" [innerHTML]=\"data | safeHtml\" *ngIf=\"data && isHtml\" [contentEditable]=\"(editable) ? true : false\"></div>\r\n    <img class=\"gd-page-image\" [style.width.px]=\"width\" [style.height.px]=\"height\" [attr.src]=\"imgData | safeResourceHtml\" alt=\"\" *ngIf=\"data && !isHtml\">\r\n    <div class=\"gd-page-spinner\" *ngIf=\"!data\">\r\n        <!-- <fa-icon [icon]=\"['fas','circle-notch']\" [spin]=\"true\"></fa-icon> -->\r\n        <!-- &nbsp;Loading... Please wait. -->\r\n    </div>\r\n</div>",
                        styles: [".gd-page-spinner{margin-top:150px;text-align:center}.gd-wrapper{width:inherit;height:inherit}.gd-wrapper div{width:100%}::ng-deep .gd-highlight{background-color:#ff0}::ng-deep .gd-highlight-select{background-color:#ff9b00}::ng-deep th{color:#959da5;background-color:#f4f4f4;font-weight:unset;border:1px solid #e7e7e7!important;text-transform:uppercase;font-size:14px;overflow:hidden}::ng-deep td{vertical-align:middle!important}::ng-deep .page-grid-lines td{border:1px solid #e7e7e7!important}::ng-deep .page td:nth-child(1){border:1px solid #e7e7e7!important}::ng-deep tr td.excel:first-child{color:#959da5;background-color:#f4f4f4;font-weight:unset;width:1%;text-align:center}::ng-deep tr td.excel:first-child div{width:80px}::ng-deep tr th.excel:first-child{background-color:#f4f4f4;width:1%}::ng-deep tr th.excel:first-child div{width:80px}.gd-page-image{height:100%!important;width:100%!important}"]
                    }] }
        ];
        /** @nocollapse */
        ExcelPageComponent.ctorParameters = function () {
            return [
                { type: ExcelPageService }
            ];
        };
        ExcelPageComponent.propDecorators = {
            angle: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            number: [{ type: i0.Input }],
            data: [{ type: i0.Input }],
            isHtml: [{ type: i0.Input }],
            editable: [{ type: i0.Input }]
        };
        return ExcelPageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileUtil = /** @class */ (function () {
        function FileUtil() {
        }
        /**
         * @param {?} filename
         * @param {?} isDirectory
         * @return {?}
         */
        FileUtil.find = /**
         * @param {?} filename
         * @param {?} isDirectory
         * @return {?}
         */
            function (filename, isDirectory) {
                if (filename && !isDirectory) {
                    /** @type {?} */
                    var strings = filename.split('.');
                    /** @type {?} */
                    var name_1 = strings.pop().toLowerCase();
                    if (typeof FileUtil.map[name_1] === "undefined") {
                        return strings.length > 0 ? FileUtil.map['unknown'] : FileUtil.map['folder'];
                    }
                    else {
                        return FileUtil.map[name_1];
                    }
                }
                else {
                    return FileUtil.map['folder'];
                }
            };
        FileUtil.map = {
            'folder': { 'format': '', 'icon': 'folder' },
            'pdf': { 'format': 'Portable Document Format', 'icon': 'file-pdf' },
            'doc': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'docx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'docm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'dot': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'dotx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'dotm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'xls': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xlsx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xlsm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xlsb': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xls2003': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xltx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xltm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'ppt': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'pptx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'pps': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'ppsx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'vsd': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vss': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vsx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vst': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vtx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vsdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vdw': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vstx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vssx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'mpp': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
            'mpt': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
            'msg': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
            'eml': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
            'emlx': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
            'one': { 'format': 'Microsoft OneNote', 'icon': 'file-word' },
            'odt': { 'format': 'Open Document Text', 'icon': 'file-word' },
            'ott': { 'format': 'Open Document Text Template', 'icon': 'file-word' },
            'ods': { 'format': 'Open Document Spreadsheet', 'icon': 'file-excel' },
            'odp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'otp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'ots': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'potx': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'potm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'pptm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'ppsm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'rtf': { 'format': 'Rich Text Format', 'icon': 'file-alt' },
            'txt': { 'format': 'Plain Text File', 'icon': 'file-alt' },
            'csv': { 'format': 'Comma-Separated Values', 'icon': 'file-excel' },
            'html': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
            'mht': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
            'mhtml': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
            'xml': { 'format': 'Extensible Markup Language', 'icon': 'file-word' },
            'xps': { 'format': 'XML Paper Specification', 'icon': 'file-word' },
            'dxf': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
            'dwg': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
            'bmp': { 'format': 'Bitmap Picture', 'icon': 'file-image' },
            'gif': { 'format': 'Graphics Interchange Format', 'icon': 'file-image' },
            'jpg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'jpe': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'jpeg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'jfif': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'png': { 'format': 'Portable Network Graphics', 'icon': 'file-image' },
            'tiff': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'tif': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'psd': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'svg': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'jp2': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'epub': { 'format': 'Electronic Publication', 'icon': 'file-pdf' },
            'ico': { 'format': 'Windows Icon', 'icon': 'file-image' },
            'webp': { 'format': 'Compressed Image', 'icon': 'file-image' },
            'mobi': { 'format': 'Mobipocket eBook', 'icon': 'file-pdf' },
            'tex': { 'format': 'LaTeX Source Document', 'icon': 'file-pdf' },
            'djvu': { 'format': 'Multi-Layer Raster Image', 'icon': 'file-alt' },
            'unknown': { 'format': 'This format is not supported', 'icon': 'file' },
        };
        return FileUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspDocumentComponent = /** @class */ (function () {
        function GspDocumentComponent(_elementRef, _zoomService, _windowService, _navigateService) {
            var _this = this;
            this._elementRef = _elementRef;
            this._zoomService = _zoomService;
            this._windowService = _windowService;
            this._navigateService = _navigateService;
            this.wait = false;
            this.docWidth = null;
            this.docHeight = null;
            this.viewportWidth = null;
            this.viewportHeight = null;
            this.scale = null;
            this.lastScale = null;
            this.container = null;
            this.doc = null;
            this.x = 0;
            this.lastX = 0;
            this.y = 0;
            this.lastY = 0;
            this.pinchCenter = null;
            this.pinchCenterOffset = null;
            this.curWidth = 0;
            this.curHeight = 0;
            _zoomService.zoomChange.subscribe(( /**
             * @param {?} val
             * @return {?}
             */function (val) {
                _this.zoom = val;
            }));
            this.isDesktop = _windowService.isDesktop();
            this._navigateService.navigate.subscribe(((( /**
             * @param {?} value
             * @return {?}
             */function (value) {
                _this.selectedPage = value;
            }))));
        }
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.ifPresentation()) {
                    this.selectedPage = this._navigateService.currentPage;
                }
            };
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.refreshView = !this.refreshView;
            };
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // For current iteration we take .panzoom as a document
                this.doc = this._elementRef.nativeElement.children.item(0).children.item(0);
                // For current iteration we take .gd-document as a container
                this.container = this._elementRef.nativeElement;
                this.docWidth = this.doc.clientWidth;
                this.docHeight = this.doc.clientHeight;
                this.viewportWidth = this.doc.offsetWidth;
                // For cases where we already have zoom defined we should include it
                this.scale = (this.viewportWidth / this.docWidth) * this._zoomService.zoom / 100;
                this.lastScale = this.scale;
                this.viewportHeight = this.container.offsetHeight;
                this.curWidth = this.docWidth * this.scale;
                this.curHeight = this.docHeight * this.scale;
                //const hammer = new Hammer(this.container);
            };
        // TODO: this temporary crutch for Excel files should be documented
        // TODO: this temporary crutch for Excel files should be documented
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ifExcel =
            // TODO: this temporary crutch for Excel files should be documented
            /**
             * @return {?}
             */
            function () {
                return FileUtil.find(this.file.filePath, false).format === "Microsoft Excel";
            };
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ifPresentation = /**
         * @return {?}
         */
            function () {
                return FileUtil.find(this.file.filePath, false).format === "Microsoft PowerPoint";
            };
        /**
         * @param {?} value
         * @param {?} pageNumber
         * @return {?}
         */
        GspDocumentComponent.prototype.getDimensionWithUnit = /**
         * @param {?} value
         * @param {?} pageNumber
         * @return {?}
         */
            function (value, pageNumber) {
                return this.ifPresentation() && this.showActiveSlide && !this.isVisible(pageNumber) ? 0 : value + (this.mode ? FileUtil.find(this.file.filePath, false).unit : 'px');
            };
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ifChromeOrFirefox = /**
         * @return {?}
         */
            function () {
                return navigator.userAgent.toLowerCase().indexOf('chrome') > -1 || this.ifFirefox();
            };
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ifFirefox = /**
         * @return {?}
         */
            function () {
                return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
            };
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ifEdge = /**
         * @return {?}
         */
            function () {
                return navigator.userAgent.toLowerCase().indexOf('edge') > -1;
            };
        /**
         * @return {?}
         */
        GspDocumentComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                // for now we are not sure that need this action in current implementation
                // const elementNodeListOf = this._elementRef.nativeElement.querySelectorAll('.gd-wrapper');
                // const element = elementNodeListOf.item(0);
                // if (element) {
                //   $(element).trigger('focus');
                // }
            };
        /**
         * @param {?} pageNumber
         * @return {?}
         */
        GspDocumentComponent.prototype.isVisible = /**
         * @param {?} pageNumber
         * @return {?}
         */
            function (pageNumber) {
                if (this.ifPresentation()) {
                    return pageNumber === this.selectedPage ? true : false;
                }
                else {
                    return true;
                }
            };
        GspDocumentComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-gsp-document',
                        template: "<!-- <div id=\"document\" class=\"document\" gdScrollable [onRefresh]=\"refreshView\">\n    <div class=\"panzoom\" gdZoom [zoomActive]=\"!ifEdge()\" gdSearchable>\n        <div [ngStyle]=\"divWidth\" [ngClass]=\"(ifFirefox() && zoom > 110) ? 'page gsp-zoomed' : 'page'\" *ngFor=\"let page of file?.pages\" gdZoom [zoomActive]=\"ifEdge()\" [isEdge]=\"ifEdge()\" [style.width.pt]=\"ifPdf() ? page.width : 'unset'\" [style.height.pt]=\"(ifPdf() || ifImage()) && ifChromeOrFirefox() ? page.height : 'unset'\"\n            gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\" [width]=\"page.width\" [height]=\"page.height\">\n            <app-gsp-page [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\"></app-gsp-page>\n        </div>\n    </div>\n    <ng-content></ng-content>\n</div> -->\n\n<div id=\"document\" class=\"document\" gdScrollable [onRefresh]=\"refreshView\">\n    <div [ngClass]=\"isDesktop ? 'panzoom' : 'panzoom mobile'\" gdZoom [zoomActive]=\"true\" [file]=\"file\" gdSearchable>\n        <div [ngClass]=\"ifExcel() ? 'page excel' : ifPresentation() && showActiveSlide ? (isVisible(page.number) ? 'page presentation active' : 'page presentation') : 'page'\" *ngFor=\"let page of file?.pages\" [style.height]=\"getDimensionWithUnit(page.height, page.number)\"\n            [style.width]=\"getDimensionWithUnit(page.width, page.number)\" gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\" [width]=\"page.width\" [height]=\"page.height\">\n            <app-gsp-page *ngIf=\"!showActiveSlide || isVisible(page.number)\" [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\" gdPageMarker></app-gsp-page>\n        </div>\n    </div>\n    <ng-content></ng-content>\n</div>",
                        styles: [".document{background-color:#e7e7e7;width:100%;height:100%;overflow-x:auto;overflow-y:auto!important;transition:.4s;padding:0;margin:0;position:relative}.page{display:inline-block;background-color:#fff;margin:20px 0;box-shadow:0 4px 12px -4px rgba(0,0,0,.38);transition:.3s}.panzoom{-webkit-transform:none;transform:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:0 50% 0;transform-origin:0 50% 0;display:flex;justify-content:center;flex-wrap:wrap}.gsp-zoomed{margin:10px 98px}@media (max-width:1025px){.document{overflow-x:auto!important}.page{min-width:unset!important;min-height:unset!important;margin:5px 0}}"]
                    }] }
        ];
        /** @nocollapse */
        GspDocumentComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: ZoomService },
                { type: WindowService },
                { type: NavigateService }
            ];
        };
        GspDocumentComponent.propDecorators = {
            mode: [{ type: i0.Input }],
            preloadPageCount: [{ type: i0.Input }],
            file: [{ type: i0.Input }],
            selectedPage: [{ type: i0.Input }],
            showActiveSlide: [{ type: i0.Input }]
        };
        return GspDocumentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExcelDocumentComponent = /** @class */ (function (_super) {
        __extends(ExcelDocumentComponent, _super);
        //@Input() file: FileDescription;
        function ExcelDocumentComponent(_elementRef, zoomService, windowService, navigateService, viewerService, renderer) {
            var _this = _super.call(this, _elementRef, zoomService, windowService, navigateService) || this;
            _this.viewerService = viewerService;
            _this.renderer = renderer;
            _this.panzoom = null;
            _this.navigateService = navigateService;
            return _this;
        }
        /**
         * @return {?}
         */
        ExcelDocumentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.currentPageNo = 1;
                document.getElementById("excelContent").style.height = document.getElementById("paneContent").offsetHeight - 23 + 'px';
            };
        /**
         * @return {?}
         */
        ExcelDocumentComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.refreshExcelDocHeight();
                this.pages.changes.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.refreshExcelDocHeight();
                }));
                this.navigateService.navigate.subscribe(((( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    if (value) {
                        _this.selectSheet(value);
                    }
                }))));
                /** @type {?} */
                var scrollbarWidth = this.getScrollBarWidth();
                this.renderer.setStyle(this._elementRef.nativeElement.querySelector('.sheets'), 'right', this.getScrollBarWidth() + 'px');
                this.renderer.setStyle(this._elementRef.nativeElement.querySelector('.sheets'), 'bottom', this.getScrollBarWidth() + 'px');
                if (scrollbarWidth === 0) {
                    this.renderer.setStyle(this._elementRef.nativeElement.querySelector('.sheets'), 'padding-right', '17px');
                }
            };
        /**
         * @return {?}
         */
        ExcelDocumentComponent.prototype.getScrollBarWidth = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var documentBox = ( /** @type {?} */(document.querySelector('.app-gsp-document')));
                /** @type {?} */
                var scrollbarWidth = documentBox.offsetWidth - documentBox.clientWidth;
                return scrollbarWidth;
            };
        /**
         * @return {?}
         */
        ExcelDocumentComponent.prototype.refreshExcelDocHeight = /**
         * @return {?}
         */
            function () {
                // For current iteration we'll change actual height of .document
                this.doc = this._elementRef.nativeElement.children.item(0);
                this.panzoom = this._elementRef.nativeElement.children.item(0).children.item(0);
                // magic number 37 is the height of the bottom-bar with navigation between pages
                this.doc.style.height = this.panzoom.scrollHeight + 37 + "px";
            };
        /**
         * @param {?} number
         * @return {?}
         */
        ExcelDocumentComponent.prototype.selectSheet = /**
         * @param {?} number
         * @return {?}
         */
            function (number) {
                var _this = this;
                this.currentPageNo = number;
                if (this.file.pages[number - 1].data == "") {
                    /** @type {?} */
                    var credentials = { guid: this.file.filePath, password: "" };
                    this.viewerService.loadPage(credentials, number).subscribe(( /**
                     * @param {?} page
                     * @return {?}
                     */function (page) {
                        _this.file.pages[number - 1] = page;
                    }));
                }
            };
        ExcelDocumentComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-excel-document',
                        template: "<!-- <div class=\"wait\" *ngIf=\"wait\">Please wait...</div> -->\r\n<div class=\"f-utils-fill-flex-column\" style=\"height: 100%;\">\r\n    <div style=\"height: 100%;\">\r\n        <div style=\"background-color: white; overflow: auto;\">\r\n            <div id=\"document f-utils-fill\" class=\"document\">\r\n                <div id=\"excelContent\" [ngClass]=\"isDesktop ? 'panzoom auto-height' : 'panzoom mobile'\" style=\"overflow: auto;\" gdZoom [zoomActive]=\"true\" [file]=\"file\" gdSearchable>\r\n                    <div [ngClass]=\"file.showGridLines ? 'page-grid-lines' : 'page'\" *ngFor=\"let page of file?.pages\" gdRotation [angle]=\"page.angle\" [isHtmlMode]=\"mode\">\r\n                        <app-excel-page *ngIf=\"currentPageNo == page.number\" [number]=\"page.number\" [data]=\"page.data\" [isHtml]=\"mode\" [angle]=\"page.angle\" [width]=\"page.width\" [height]=\"page.height\" [editable]=\"page.editable\">\r\n                        </app-excel-page>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"sheets\" style=\"position: absolute; bottom: 0px;\">\r\n            <div class=\"sheets-wrapper\">\r\n                <div *ngFor=\"let page of file?.pages\">\r\n                    <button style=\"background-color: white; border: 0;\" [ngClass]=\"{'active': currentPageNo == page.number }\" (click)=\"selectSheet(page.number)\">{{page.name}}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                        styles: [":host{overflow:scroll;width:100%;background-color:#e7e7e7}.document{width:100%;transition:.4s;padding:0;margin:0;position:relative}.sheets{background-color:#fff;display:flex;border-top:1px solid #e7e7e7;position:fixed;width:100%}.sheets ::ng-deep gd-button.active .text{background-color:#272727;border-radius:10px;color:#eee}.sheets ::ng-deep gd-button .text{padding:1px 12px;color:#000}.sheets ::ng-deep gd-button fa-icon{display:none}.sheets-wrapper{margin-left:29px;display:flex}.page{position:relative;display:inline-block;background-color:#fff;transition:.3s}.wait{position:absolute;top:55px;left:Calc(30%)}.panzoom.auto-height{-webkit-transform:none;transform:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:50% 50% 0;transform-origin:50% 50% 0;display:flex;flex-wrap:wrap}.gd-zoomed{margin:10px 98px}.highlights{position:absolute;top:0;left:0;bottom:0;right:0}.page-grid-lines{background-color:#fff}@media (max-width:1037px){.document{overflow-x:auto!important}.page{min-width:unset!important;min-height:unset!important;margin:5px 0}}"]
                    }] }
        ];
        /** @nocollapse */
        ExcelDocumentComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: ZoomService },
                { type: WindowService },
                { type: NavigateService },
                { type: DocViewerService },
                { type: i0.Renderer2 }
            ];
        };
        ExcelDocumentComponent.propDecorators = {
            pages: [{ type: i0.ViewChildren, args: [ExcelPageComponent,] }]
        };
        return ExcelDocumentComponent;
    }(GspDocumentComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocViewerComponent = /** @class */ (function () {
        function DocViewerComponent(_viewerService, _zoomService, _navigateService, _windowService, loadService, pagePreloadService, injector) {
            // configService.updatedConfig.subscribe((viewerConfig) => {
            //   // this.viewerConfig = viewerConfig;
            // });
            this._viewerService = _viewerService;
            this._zoomService = _zoomService;
            this._navigateService = _navigateService;
            this._windowService = _windowService;
            this.loadService = loadService;
            this.pagePreloadService = pagePreloadService;
            this.injector = injector;
            this.title = 'GspCloudViewer';
            this.countPages = 0;
            this.formatDisabled = !this.file;
            this.showThumbnails = false;
            this.showSearch = false;
            this._zoom = 100;
            this.fileWasDropped = false;
            this.style = { transform: '', msTransform: '', oTransform: '', webkitTransform: '' };
            this.scale = 1;
            this.rotation = 0;
            this.translateX = 0;
            this.translateY = 0;
        }
        /**
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
        DocViewerComponent.prototype.preloadPages = /**
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
            function (start, end) {
                var _this = this;
                var _loop_1 = function (i) {
                    this_1._viewerService.loadPage(this_1.credentials, i).subscribe(( /**
                     * @param {?} page
                     * @return {?}
                     */function (page) {
                        _this.file.pages[i - 1] = page;
                        if (_this.file.thumbnails && !_this.file.thumbnails[i - 1].data) {
                            if (page.data) {
                                page.data = page.data.replace(/>\s+</g, '><')
                                    .replace(/\uFEFF/g, "");
                            }
                            _this.file.thumbnails[i - 1].data = page.data;
                        }
                    }));
                };
                var this_1 = this;
                for (var i = start; i <= end; i++) {
                    _loop_1(i);
                }
            };
        /**
         * @param {?} file
         * @return {?}
         */
        DocViewerComponent.prototype.viewType = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                return file.filePath.endsWith('.pdf');
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var request = new DocViewRequest();
                request.filePath = this.filePath;
                /** @type {?} */
                var loading = this.loadService.show({
                    message: '文档加载中'
                });
                this._viewerService.loadFileInfo(request).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    loading.close();
                    if (res.error != null) ;
                    else {
                        _this.file = res;
                        _this.credentials = { guid: _this.file.filePath, password: "" };
                        _this.formatDisabled = !_this.file;
                        if (_this.file) {
                            if (_this.file.pages && _this.file.pages[0]) {
                                _this._pageHeight = _this.file.pages[0].height;
                                _this._pageWidth = _this.file.pages[0].width;
                                _this.options = _this.zoomOptions();
                                _this.refreshZoom();
                            }
                            //const preloadPageCount = this.viewerConfig.preloadPageCount;
                            /** @type {?} */
                            var countPages = _this.file.pages ? _this.file.pages.length : 0;
                            _this._navigateService.countPages = countPages;
                            _this._navigateService.currentPage = 1;
                            _this.countPages = countPages;
                            _this.pagePreloadService.checkPreload.subscribe(( /**
                             * @param {?} page
                             * @return {?}
                             */function (page) {
                                //if (this.viewerConfig.preloadPageCount !== 0) {
                                for (var i = page; i < page + 2; i++) {
                                    if (i > 0 && i <= _this.countPages && !_this.file.pages[i - 1].data) {
                                        _this.preloadPages(i, i);
                                    }
                                }
                                // }
                            }));
                        }
                        _this.getFile();
                        // if (!this.notExcel()) {
                        //   this.file.pages.forEach(ele => {
                        //     if (ele.data.includes("<x:Name>"))
                        //       ele.sheetName = ele.data.split("<x:Name>")[1].split("</x:Name>")[0];
                        //   })
                        // }
                    }
                    if (_this.injector) {
                        /** @type {?} */
                        var changeDetector = _this.injector.get(i0.ChangeDetectorRef);
                        changeDetector.detectChanges();
                    }
                }));
            };
        /**
         * @param {?} deg
         * @return {?}
         */
        DocViewerComponent.prototype.rotate = /**
         * @param {?} deg
         * @return {?}
         */
            function (deg) {
                var _this = this;
                if (this.formatDisabled)
                    return;
                /** @type {?} */
                var pageNumber = this._navigateService.currentPage;
                /** @type {?} */
                var loading = this.loadService.show({
                    message: '文档加载中'
                });
                if (this.saveRotateStateConfig && this.file) {
                    this._viewerService.rotate(this.credentials, deg, pageNumber).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        var e_1, _a;
                        loading.close();
                        if (res.error != null) ;
                        else {
                            /** @type {?} */
                            var data = res;
                            try {
                                for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                                    var page = data_1_1.value;
                                    /** @type {?} */
                                    var pageModel = _this.file.pages[page.pageNumber - 1];
                                    if (_this.file && _this.file.pages && pageModel) {
                                        _this.changeAngle(pageModel, page.angle);
                                    }
                                }
                            }
                            catch (e_1_1) {
                                e_1 = { error: e_1_1 };
                            }
                            finally {
                                try {
                                    if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                                        _a.call(data_1);
                                }
                                finally {
                                    if (e_1)
                                        throw e_1.error;
                                }
                            }
                        }
                        // this._viewerService.rotate(this.credentials, deg, pageNumber).subscribe((data: RotatedPage[]) => {
                        //   for (const page of data) {
                        //     const pageModel = this.file.pages[page.pageNumber - 1];
                        //     if (this.file && this.file.pages && pageModel) {
                        //       this.changeAngle(pageModel, page.angle);
                        //     }
                        //   }
                    }));
                }
                else {
                    /** @type {?} */
                    var pageModel = this.file.pages[pageNumber - 1];
                    if (this.file && this.file.pages && pageModel) {
                        /** @type {?} */
                        var angle = pageModel.angle + deg;
                        if (angle > 360) {
                            this.changeAngle(pageModel, 90);
                        }
                        else if (angle < -360) {
                            this.changeAngle(pageModel, -90);
                        }
                        else {
                            this.changeAngle(pageModel, angle);
                        }
                    }
                }
            };
        /**
         * @private
         * @param {?} page
         * @param {?} angle
         * @return {?}
         */
        DocViewerComponent.prototype.changeAngle = /**
         * @private
         * @param {?} page
         * @param {?} angle
         * @return {?}
         */
            function (page, angle) {
                page.angle = angle;
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        DocViewerComponent.prototype.docChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                var _this = this;
                /** @type {?} */
                var request = new DocViewRequest();
                request.filePath = filePath;
                /** @type {?} */
                var loading = this.loadService.show({
                    message: '文档加载中'
                });
                this._viewerService.loadFileInfo(request).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    loading.close();
                    if (res.error != null) ;
                    else {
                        _this.file = res;
                        _this.credentials = { guid: _this.file.filePath, password: "" };
                        _this.formatDisabled = !_this.file;
                        if (_this.file) {
                            if (_this.file.pages && _this.file.pages[0]) {
                                _this._pageHeight = _this.file.pages[0].height;
                                _this._pageWidth = _this.file.pages[0].width;
                                _this.options = _this.zoomOptions();
                                _this.refreshZoom();
                            }
                            //const preloadPageCount = this.viewerConfig.preloadPageCount;
                            /** @type {?} */
                            var countPages = _this.file.pages ? _this.file.pages.length : 0;
                            _this._navigateService.countPages = countPages;
                            _this._navigateService.currentPage = 1;
                            _this.countPages = countPages;
                        }
                        _this.getFile();
                        if (!_this.notExcel())
                            _this.excelView.currentPageNo = 1;
                        // if (!this.notExcel()) {
                        //   this.file.pages.forEach(ele => {
                        //     if (ele.data.includes("<x:Name>"))
                        //       ele.sheetName = ele.data.split("<x:Name>")[1].split("</x:Name>")[0];
                        //   })
                        // }
                    }
                }));
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.getFile = /**
         * @return {?}
         */
            function () {
                return this.file;
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.notExcel = /**
         * @return {?}
         */
            function () {
                return !(this.filePath.endsWith('.xls') || this.filePath.endsWith('.xlsx'));
            };
        Object.defineProperty(DocViewerComponent.prototype, "rewriteConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.rewrite : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "zoomConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.zoom : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "pageSelectorConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.pageSelector : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "searchConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.search : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "thumbnailsConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.thumbnails : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "rotateConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.rotate : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "downloadConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.download : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "uploadConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.upload : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "printConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.print : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "browseConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.browse : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "htmlModeConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.htmlMode : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "saveRotateStateConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.saveRotateState : true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocViewerComponent.prototype, "enableRightClickConfig", {
            get: /**
             * @return {?}
             */ function () {
                return this.viewerConfig ? this.viewerConfig.enableRightClick : true;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.rotateClockwise = /**
         * @return {?}
         */
            function () {
                this.rotate(90);
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.rotateCounterClockwise = /**
         * @return {?}
         */
            function () {
                this.rotate(-90);
            };
        Object.defineProperty(DocViewerComponent.prototype, "currentPage", {
            get: /**
             * @return {?}
             */ function () {
                return this._navigateService.currentPage;
            },
            enumerable: true,
            configurable: true
        });
        // selectDir($event: string) {
        //   this._viewerService.loadFiles($event).subscribe((files: FileModel[]) => this.files = files || []);
        // }
        // preloadPages(start: number, end: number) {
        //   for (let i = start; i <= end; i++) {
        //     this._viewerService.loadPage(this.credentials, i).subscribe((page: PageModel) => {
        //       this.file.pages[i - 1] = page;
        //     });
        //   }
        // }
        // upload($event: string) {
        //   this._viewerService.upload(null, $event, this.rewriteConfig).subscribe(() => {
        //     this.selectDir('');
        //   });
        // }
        // selectDir($event: string) {
        //   this._viewerService.loadFiles($event).subscribe((files: FileModel[]) => this.files = files || []);
        // }
        // preloadPages(start: number, end: number) {
        //   for (let i = start; i <= end; i++) {
        //     this._viewerService.loadPage(this.credentials, i).subscribe((page: PageModel) => {
        //       this.file.pages[i - 1] = page;
        //     });
        //   }
        // }
        // upload($event: string) {
        //   this._viewerService.upload(null, $event, this.rewriteConfig).subscribe(() => {
        //     this.selectDir('');
        //   });
        // }
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.nextPage =
            // selectDir($event: string) {
            //   this._viewerService.loadFiles($event).subscribe((files: FileModel[]) => this.files = files || []);
            // }
            // preloadPages(start: number, end: number) {
            //   for (let i = start; i <= end; i++) {
            //     this._viewerService.loadPage(this.credentials, i).subscribe((page: PageModel) => {
            //       this.file.pages[i - 1] = page;
            //     });
            //   }
            // }
            // upload($event: string) {
            //   this._viewerService.upload(null, $event, this.rewriteConfig).subscribe(() => {
            //     this.selectDir('');
            //   });
            // }
            /**
             * @return {?}
             */
            function () {
                if (this.formatDisabled)
                    return;
                this._navigateService.nextPage();
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.prevPage = /**
         * @return {?}
         */
            function () {
                if (this.formatDisabled)
                    return;
                this._navigateService.prevPage();
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.toLastPage = /**
         * @return {?}
         */
            function () {
                if (this.formatDisabled)
                    return;
                this._navigateService.toLastPage();
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.toFirstPage = /**
         * @return {?}
         */
            function () {
                if (this.formatDisabled)
                    return;
                this._navigateService.toFirstPage();
            };
        /**
         * @param {?} page
         * @return {?}
         */
        DocViewerComponent.prototype.navigateToPage = /**
         * @param {?} page
         * @return {?}
         */
            function (page) {
                if (this.formatDisabled)
                    return;
                this._navigateService.navigateTo(page);
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.zoomIn = /**
         * @return {?}
         */
            function () {
                if (this.formatDisabled)
                    return;
                if (this._zoom < 490) {
                    this.zoom = this._zoom + 10;
                }
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.zoomOut = /**
         * @return {?}
         */
            function () {
                if (this.formatDisabled)
                    return;
                if (this._zoom > 30) {
                    this.zoom = this._zoom - 10;
                }
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.zoomReset = /**
         * @return {?}
         */
            function () {
                this.zoom = 100;
            };
        /**
         * @return {?}
         */
        DocViewerComponent.prototype.zoomOptions = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var width = this.getFitToWidth();
                /** @type {?} */
                var height = this.getFitToHeight();
                return this._zoomService.zoomOptions(width, height);
            };
        /**
         * @private
         * @return {?}
         */
        DocViewerComponent.prototype.refreshZoom = /**
         * @private
         * @return {?}
         */
            function () {
                this.zoom = this._windowService.isDesktop() ? 100 : this.getFitToWidth();
                //this.zoom = 100;  
            };
        /**
         * @private
         * @return {?}
         */
        DocViewerComponent.prototype.getFitToWidth = /**
         * @private
         * @return {?}
         */
            function () {
                // const pageWidth = this.ptToPx(this._pageWidth);
                // const pageHeight = this.ptToPx(this._pageHeight);
                /** @type {?} */
                var pageWidth = !this.notExcel() ? this._pageWidth : this.ptToPx(this._pageWidth);
                /** @type {?} */
                var pageHeight = !this.notExcel() ? this._pageHeight : this.ptToPx(this._pageHeight);
                /** @type {?} */
                var offsetWidth = pageWidth ? pageWidth : window.innerWidth;
                return (pageHeight > pageWidth && Math.round(offsetWidth / window.innerWidth) < 2) ? 200 - Math.round(offsetWidth * 100 / window.innerWidth) : Math.round(window.innerWidth * 100 / offsetWidth);
            };
        /**
         * @private
         * @return {?}
         */
        DocViewerComponent.prototype.getFitToHeight = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var pageWidth = !this.notExcel() ? this._pageWidth : this.ptToPx(this._pageWidth);
                /** @type {?} */
                var pageHeight = !this.notExcel() ? this._pageHeight : this.ptToPx(this._pageHeight);
                /** @type {?} */
                var windowHeight = (pageHeight > pageWidth) ? window.innerHeight - 100 : window.innerHeight + 100;
                /** @type {?} */
                var offsetHeight = pageHeight ? pageHeight : windowHeight;
                return (pageHeight > pageWidth) ? Math.round(windowHeight * 100 / offsetHeight) : Math.round(offsetHeight * 100 / windowHeight);
            };
        /**
         * @private
         * @param {?} pt
         * @return {?}
         */
        DocViewerComponent.prototype.ptToPx = /**
         * @private
         * @param {?} pt
         * @return {?}
         */
            function (pt) {
                //pt * 96 / 72 = px.
                return pt * 96 / 72;
            };
        Object.defineProperty(DocViewerComponent.prototype, "zoom", {
            get: /**
             * @return {?}
             */ function () {
                return this._zoom;
            },
            set: /**
             * @param {?} zoom
             * @return {?}
             */ function (zoom) {
                this._zoom = zoom;
                this._zoomService.changeZoom(this._zoom);
            },
            enumerable: true,
            configurable: true
        });
        DocViewerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-doc-viewer',
                        template: "<!-- <gd-loading-mask [loadingMask]=\"isLoading\"></gd-loading-mask> -->\n<div class=\"f-page\">\n    <div class=\"wrapper f-utils-fill-flex-column\" style=\"overflow-x:auto;overflow-y: hidden;\">\n        <div class=\"top-panel\" *ngIf=\"notExcel()\">\n            <app-gsp-top-toolbar class=\"toolbar-panel\">\n                <!-- <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-double-left'\" [tooltip]=\"'First Page'\" (click)=\"toFirstPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button> -->\n                <div class=\"btn btn-secondary page-button\" (click)=\"toFirstPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/firstPage.png'\" title=\"'\u7B2C\u4E00\u9875'\">\n                </div>\n                <!-- <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-left'\" [tooltip]=\"'Previous Page'\" (click)=\"prevPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button> -->\n                <div class=\"btn btn-secondary page-button\" (click)=\"prevPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/prePage.png'\" title=\"'\u524D\u4E00\u9875'\">\n                </div>\n                <div class=\"current-page-number\" [ngClass]=\"{'active': !formatDisabled}\" style=\"position: relative;  bottom: 11px; right:-47px\">{{currentPage}}/{{countPages}}\n                </div>\n                <div class=\"btn btn-secondary page-button\" (click)=\"nextPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/nextPage.png'\" title=\"'\u540E\u4E00\u9875'\">\n                </div>\n                <div class=\"btn btn-secondary page-button\" (click)=\"toLastPage()\">\n                    <img [src]=\"'/platform/runtime/dfs/images/lastPage.png'\" title=\"'\u6700\u540E\u4E00\u9875'\">\n                </div>\n                <!-- <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-right'\" [tooltip]=\"'Next Page'\" (click)=\"nextPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button>\n                <app-gsp-button [disabled]=\"formatDisabled\" [icon]=\"'angle-double-right'\" [tooltip]=\"'Last Page'\" (click)=\"nextPage()\" *ngIf=\"pageSelectorConfig\"></app-gsp-button> -->\n            </app-gsp-top-toolbar>\n        </div>\n        <div class=\"doc-panel  f-utils-fill-flex-column\" *ngIf=\"file\">\n\n            <app-gsp-document class=\"gsp-document\" *ngIf=\"file &&  notExcel()\" [file]=\"getFile()\" [mode]=\"htmlModeConfig\" [preloadPageCount]=\"viewerConfig?.preloadPageCount\" [ngStyle]=\"style\"></app-gsp-document>\n            <app-excel-document class=\"gsp-document\" *ngIf=\"file &&  !notExcel() \" style=\"overflow: hidden;\" [file]=\"getFile()\" [mode]=\"htmlModeConfig\" gdScrollable [preloadPageCount]=\"viewerConfig?.preloadPageCount\">\n            </app-excel-document>\n\n        </div>\n    </div>\n</div>",
                        styles: [":host *{font-family:'Open Sans',Arial,Helvetica,sans-serif}.current-page-number{margin-left:7px;font-size:14px;color:#959da5;width:37px;height:37px;line-height:37px;text-align:center}.current-page-number.active{color:#fff}.page-button{background-color:#212529;width:28px;height:28px;border:none;position:relative;bottom:14px;right:-50px}.page-button img{position:relative;left:-13px}.wrapper{align-items:stretch;height:100%;width:100%;position:absolute;top:0;bottom:0;left:0;right:0}.doc-panel{display:flex}.thumbnails-button{position:absolute;right:3px}.gsp-document{width:100%;height:100%}.top-panel{display:flex;align-items:center;width:100%;height:32px}.toolbar-panel{background-color:#3e4e5a;width:100%;height:32px}::ng-deep .tools .button,::ng-deep .tools .nav-caret,::ng-deep .tools .selected-value{color:#fff!important}::ng-deep .tools .button.inactive,::ng-deep .tools .nav-caret.inactive,::ng-deep .tools .selected-value.inactive{color:#959da5!important}::ng-deep .tools .button{flex-flow:column}::ng-deep .tools .dropdown-menu .option{color:#6e6e6e!important}::ng-deep .tools .dropdown-menu .option:hover{background-color:#4b566c!important}::ng-deep .tools .icon-button{margin:0 0 0 7px!important}::ng-deep .tools .select{width:65px;height:37px;margin-left:7px;line-height:37px;text-align:center}"]
                    }] }
        ];
        /** @nocollapse */
        DocViewerComponent.ctorParameters = function () {
            return [
                { type: DocViewerService },
                { type: ZoomService },
                { type: NavigateService },
                { type: WindowService },
                { type: uiLoading.LoadingService },
                { type: PagePreloadService },
                { type: i0.Injector }
            ];
        };
        DocViewerComponent.propDecorators = {
            excelView: [{ type: i0.ViewChild, args: [ExcelDocumentComponent,] }],
            filePath: [{ type: i0.Input }]
        };
        return DocViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspPageComponent = /** @class */ (function () {
        function GspPageComponent() {
        }
        /**
         * @return {?}
         */
        GspPageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var isIE = /*@cc_on!@*/ !!/(MSIE|Trident\/|Edge\/)/i.test(navigator.userAgent);
                if (isIE && this.number === 0) {
                    this.editable = false;
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        GspPageComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.isHtml) {
                    // TODO: this is temporary needed to remove unneeded spaces and BOM symbol 
                    // which leads to undesired spaces on the top of the docs pages
                    this.data = this.data
                        ? this.data.replace(/>\s+</g, '><')
                            .replace(/\uFEFF/g, "")
                        : null;
                }
                else {
                    if (this.data) {
                        this.imgData = this.data.startsWith('data:image') ? this.data : 'data:image/png;base64,' + this.data;
                    }
                }
            };
        GspPageComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-gsp-page',
                        template: "<div id=\"page-{{number}}\">\n  <div class=\"gsp-wrapper\" [innerHTML]=\"data | safeHtml\" *ngIf=\"data && isHtml\" [contentEditable]=\"(editable) ? true : false\"></div>\n  <img class=\"gsp-page-image\" [style.width.px]=\"width\" [style.height.px]=\"height\" [attr.src]=\"imgData | safeResourceHtml\"\n       alt=\"\"\n       *ngIf=\"data && !isHtml\">\n  <div class=\"gsp-page-spinner\" *ngIf=\"!data\">\n  </div>\n</div>",
                        styles: [".gsp-page-spinner{margin-top:150px;text-align:center}.gsp-wrapper{width:inherit;height:inherit}.gsp-wrapper img{width:inherit}.gsp-wrapper div{width:100%}.gsp-highlight{background-color:#ff0}.gsp-highlight-select{background-color:#ff9b00}.gsp-page-image{height:100%!important;width:100%!important}"]
                    }] }
        ];
        /** @nocollapse */
        GspPageComponent.ctorParameters = function () { return []; };
        GspPageComponent.propDecorators = {
            angle: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            number: [{ type: i0.Input }],
            data: [{ type: i0.Input }],
            isHtml: [{ type: i0.Input }],
            editable: [{ type: i0.Input }]
        };
        return GspPageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PageModel = /** @class */ (function () {
        function PageModel() {
        }
        PageModel.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ PageModel.ngInjectableDef = i0.defineInjectable({ factory: function PageModel_Factory() { return new PageModel(); }, token: PageModel, providedIn: "root" });
        return PageModel;
    }());
    var FileCredentials = /** @class */ (function () {
        function FileCredentials(guid, password) {
            this.guid = guid;
            this.password = password;
        }
        return FileCredentials;
    }());
    var SaveFile = /** @class */ (function (_super) {
        __extends(SaveFile, _super);
        function SaveFile(guid, password, content) {
            var _this = _super.call(this, guid, password) || this;
            _this.content = content;
            return _this;
        }
        return SaveFile;
    }(FileCredentials));
    var FileUtil$1 = /** @class */ (function () {
        function FileUtil() {
        }
        /**
         * @param {?} filename
         * @param {?} isDirectory
         * @return {?}
         */
        FileUtil.find = /**
         * @param {?} filename
         * @param {?} isDirectory
         * @return {?}
         */
            function (filename, isDirectory) {
                if (filename && !isDirectory) {
                    /** @type {?} */
                    var strings = filename.split('.');
                    /** @type {?} */
                    var name_1 = strings.pop().toLowerCase();
                    if (typeof FileUtil.map[name_1] === "undefined") {
                        return strings.length > 0 ? FileUtil.map['unknown'] : FileUtil.map['folder'];
                    }
                    else {
                        return FileUtil.map[name_1];
                    }
                }
                else {
                    return FileUtil.map['folder'];
                }
            };
        FileUtil.map = {
            'folder': { 'format': '', 'icon': 'folder' },
            'pdf': { 'format': 'Portable Document Format', 'icon': 'file-pdf' },
            'doc': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'docx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'docm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'dot': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'dotx': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'dotm': { 'format': 'Microsoft Word', 'icon': 'file-word' },
            'xls': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xlsx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xlsm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xlsb': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xls2003': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xltx': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'xltm': { 'format': 'Microsoft Excel', 'icon': 'file-excel' },
            'ppt': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'pptx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'pps': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'ppsx': { 'format': 'Microsoft PowerPoint', 'icon': 'file-powerpoint' },
            'vsd': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vss': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vsx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vst': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vtx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vsdx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vdw': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vstx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'vssx': { 'format': 'Microsoft Visio', 'icon': 'file-code' },
            'mpp': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
            'mpt': { 'format': 'Microsoft Project', 'icon': 'file-alt' },
            'msg': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
            'eml': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
            'emlx': { 'format': 'Microsoft Outlook', 'icon': 'file-alt' },
            'one': { 'format': 'Microsoft OneNote', 'icon': 'file-word' },
            'odt': { 'format': 'Open Document Text', 'icon': 'file-word' },
            'ott': { 'format': 'Open Document Text Template', 'icon': 'file-word' },
            'ods': { 'format': 'Open Document Spreadsheet', 'icon': 'file-excel' },
            'odp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'otp': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'ots': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'potx': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'potm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'pptm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'ppsm': { 'format': 'Open Document Presentation', 'icon': 'file-powerpoint' },
            'rtf': { 'format': 'Rich Text Format', 'icon': 'file-alt' },
            'txt': { 'format': 'Plain Text File', 'icon': 'file-alt' },
            'csv': { 'format': 'Comma-Separated Values', 'icon': 'file-excel' },
            'html': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
            'mht': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
            'mhtml': { 'format': 'HyperText Markup Language', 'icon': 'file-word' },
            'xml': { 'format': 'Extensible Markup Language', 'icon': 'file-word' },
            'xps': { 'format': 'XML Paper Specification', 'icon': 'file-word' },
            'dxf': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
            'dwg': { 'format': 'AutoCAD Drawing File Format', 'icon': 'file-image' },
            'bmp': { 'format': 'Bitmap Picture', 'icon': 'file-image' },
            'gif': { 'format': 'Graphics Interchange Format', 'icon': 'file-image' },
            'jpg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'jpe': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'jpeg': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'jfif': { 'format': 'Joint Photographic Experts Group', 'icon': 'file-image' },
            'png': { 'format': 'Portable Network Graphics', 'icon': 'file-image' },
            'tiff': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'tif': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'psd': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'svg': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'jp2': { 'format': 'Tagged Image File Format', 'icon': 'file-image' },
            'epub': { 'format': 'Electronic Publication', 'icon': 'file-pdf' },
            'ico': { 'format': 'Windows Icon', 'icon': 'file-image' },
            'webp': { 'format': 'Compressed Image', 'icon': 'file-image' },
            'mobi': { 'format': 'Mobipocket eBook', 'icon': 'file-pdf' },
            'tex': { 'format': 'LaTeX Source Document', 'icon': 'file-pdf' },
            'djvu': { 'format': 'Multi-Layer Raster Image', 'icon': 'file-alt' },
            'unknown': { 'format': 'This format is not supported', 'icon': 'file' },
        };
        return FileUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ZoomDirective = /** @class */ (function () {
        function ZoomDirective(_zoomService, _windowService, el) {
            this._zoomService = _zoomService;
            this._windowService = _windowService;
            this.zoomActive = true;
            this.el = el;
        }
        /**
         * @return {?}
         */
        ZoomDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ZoomDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.setStyles(this._zoomService.zoom);
                this.resizePages(this._zoomService.zoom);
            };
        /**
         * @return {?}
         */
        ZoomDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.zoomActive) {
                    return;
                }
                this.setStyles(this._zoomService.zoom);
                this._zoomService.zoomChange.subscribe(( /**
                 * @param {?} zoom
                 * @return {?}
                 */function (zoom) {
                    _this.setStyles(zoom);
                    _this.resizePages(zoom);
                }));
            };
        /**
         * @private
         * @param {?} zoom
         * @return {?}
         */
        ZoomDirective.prototype.setStyles = /**
         * @private
         * @param {?} zoom
         * @return {?}
         */
            function (zoom) {
                if (!this.zoomActive) {
                    return;
                }
                /** @type {?} */
                var zoomInt = zoom === 100 ? 1 : zoom / 100;
                if (this._windowService.isEdge()) {
                    this.zoomInt = zoomInt;
                }
                else {
                    this.zoomInt = null;
                }
                if (!this._windowService.isEdge()) {
                    this.transform = 'scale(' + zoomInt + ')';
                    this.transformOrigin = 'top left';
                }
                else {
                    this.transform = "";
                    this.transformOrigin = "";
                }
                /** @type {?} */
                var maxWidth = 0;
                this.file.pages.forEach(( /**
                 * @param {?} page
                 * @return {?}
                 */function (page) {
                    {
                        if (page.width > maxWidth) {
                            maxWidth = page.width;
                        }
                    }
                }));
                // Images and Excel-related files receiving dimensions in px from server
                this.minWidth = maxWidth + FileUtil$1.find(this.file.guid, false).unit;
            };
        /**
         * @private
         * @param {?} elm
         * @return {?}
         */
        ZoomDirective.prototype.getScrollWidth = /**
         * @private
         * @param {?} elm
         * @return {?}
         */
            function (elm) {
                return elm.offsetWidth - elm.clientWidth;
            };
        /**
         * @private
         * @param {?} elm
         * @return {?}
         */
        ZoomDirective.prototype.getScrollHeight = /**
         * @private
         * @param {?} elm
         * @return {?}
         */
            function (elm) {
                return elm.offsetHeight - elm.clientHeight;
            };
        /**
         * @private
         * @param {?} zoom
         * @return {?}
         */
        ZoomDirective.prototype.resizePages = /**
         * @private
         * @param {?} zoom
         * @return {?}
         */
            function (zoom) {
                /** @type {?} */
                var zoomInt = zoom === 100 ? 1 : zoom / 100;
                /** @type {?} */
                var viewPortWidth = this.el.nativeElement.parentElement.offsetWidth;
                /** @type {?} */
                var viewPortHeight = this.el.nativeElement.parentElement.offsetHeight;
                /** @type {?} */
                var scrollWidth = this.getScrollWidth(this.el.nativeElement.parentElement);
                /** @type {?} */
                var scrollHeight = this.getScrollHeight(this.el.nativeElement.parentElement);
                this.width = (viewPortWidth / zoomInt - scrollWidth / zoomInt) + 'px';
                this.height = (viewPortHeight / zoomInt - scrollHeight / zoomInt) + 'px';
            };
        /**
         * @return {?}
         */
        ZoomDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.setStyles(this._zoomService.zoom);
            };
        ZoomDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[gdZoom]'
                    },] }
        ];
        /** @nocollapse */
        ZoomDirective.ctorParameters = function () {
            return [
                { type: ZoomService },
                { type: WindowService },
                { type: i0.ElementRef }
            ];
        };
        ZoomDirective.propDecorators = {
            zoomActive: [{ type: i0.Input }],
            file: [{ type: i0.Input }],
            zoomInt: [{ type: i0.HostBinding, args: ['style.zoom',] }],
            transform: [{ type: i0.HostBinding, args: ['style.transform',] }],
            transformOrigin: [{ type: i0.HostBinding, args: ['style.transform-origin',] }],
            width: [{ type: i0.HostBinding, args: ['style.width',] }],
            height: [{ type: i0.HostBinding, args: ['style.height',] }],
            minWidth: [{ type: i0.HostBinding, args: ['style.min-width',] }]
        };
        return ZoomDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectionService = /** @class */ (function () {
        function SelectionService() {
            this.isIE = !!/(MSIE|Trident\/|Edge\/)/i.test(navigator.userAgent);
        }
        /**
         * @return {?}
         */
        SelectionService.prototype.restoreSelection = /**
         * @return {?}
         */
            function () {
                if (this.selection && !this.selection.collapsed || this.isIE) {
                    this.putSelection(this.selection);
                }
            };
        /**
         * @return {?}
         */
        SelectionService.prototype.captureSelection = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selection = window.getSelection();
                if (selection.rangeCount > 0) {
                    this.selection = selection.getRangeAt(0);
                }
            };
        /**
         * @private
         * @param {?} selection
         * @return {?}
         */
        SelectionService.prototype.putSelection = /**
         * @private
         * @param {?} selection
         * @return {?}
         */
            function (selection) {
                /** @type {?} */
                var sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(selection.cloneRange());
            };
        /**
         * @return {?}
         */
        SelectionService.prototype.refreshSelection = /**
         * @return {?}
         */
            function () {
                this.captureSelection();
                this.restoreSelection();
            };
        SelectionService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ SelectionService.ngInjectableDef = i0.defineInjectable({ factory: function SelectionService_Factory() { return new SelectionService(); }, token: SelectionService, providedIn: "root" });
        return SelectionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchService = /** @class */ (function () {
        function SearchService() {
            this._observer = new rxjs.Subject();
            this._textChange = this._observer.asObservable();
            this._observerCurrent = new rxjs.Subject();
            this._currentChange = this._observerCurrent.asObservable();
            this._observerTotal = new rxjs.Subject();
            this._totalChange = this._observerTotal.asObservable();
        }
        Object.defineProperty(SearchService.prototype, "textChange", {
            get: /**
             * @return {?}
             */ function () {
                return this._textChange;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} text
         * @return {?}
         */
        SearchService.prototype.setText = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                this._observer.next(text);
            };
        Object.defineProperty(SearchService.prototype, "currentChange", {
            get: /**
             * @return {?}
             */ function () {
                return this._currentChange;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchService.prototype, "totalChange", {
            get: /**
             * @return {?}
             */ function () {
                return this._totalChange;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} current
         * @return {?}
         */
        SearchService.prototype.setCurrent = /**
         * @param {?} current
         * @return {?}
         */
            function (current) {
                this._observerCurrent.next(current);
            };
        /**
         * @param {?} total
         * @return {?}
         */
        SearchService.prototype.setTotal = /**
         * @param {?} total
         * @return {?}
         */
            function (total) {
                this._observerTotal.next(total);
            };
        SearchService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        SearchService.ctorParameters = function () { return []; };
        return SearchService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchableDirective = /** @class */ (function () {
        function SearchableDirective(_elementRef, _searchService, _zoomService) {
            var _this = this;
            this._elementRef = _elementRef;
            this._searchService = _searchService;
            this._zoomService = _zoomService;
            this.current = 0;
            this.total = 0;
            this.zoom = 100;
            _searchService.currentChange.subscribe(( /**
             * @param {?} current
             * @return {?}
             */function (current) {
                _this.current = current;
                if (_this.current !== 0) ;
            }));
            _searchService.textChange.subscribe(( /**
             * @param {?} text
             * @return {?}
             */function (text) {
                _this.text = text;
                //this.highlightSearch();
            }));
            this.zoom = _zoomService.zoom ? _zoomService.zoom : this.zoom;
            _zoomService.zoomChange.subscribe(( /**
             * @param {?} val
             * @return {?}
             */function (val) {
                _this.zoom = val ? val : _this.zoom;
            }));
        }
        // private highlightSearch() {
        //   const el = this._elementRef ? this._elementRef.nativeElement : null;
        //   if (el) {
        //     this.cleanHighlight(el);
        //     if (this.text) {
        //       this.highlightEl(el);
        //       const count = el.querySelectorAll('.gd-highlight').length;
        //       this.total = count;
        //     } else {
        //       this.total = 0;
        //     }
        //     this._searchService.setTotal(this.total);
        //   }
        // }
        // private moveToCurrent() {
        //   if (this.current === 0) {
        //     return;
        //   }
        //   const currentZoom = this.getZoom();
        //   const el = this._elementRef ? this._elementRef.nativeElement : null;
        //   if (el) {
        //     el.querySelectorAll('.gd-highlight-select').forEach(function (value) {
        //       $(value).removeClass('gd-highlight-select');
        //     });
        //     const currentEl = el.querySelectorAll('.gd-highlight')[this.current - 1];
        //     $(currentEl).addClass('gd-highlight-select');
        //     if (currentEl) {
        //       const options = {
        //         left: 0,
        //         top: ($(currentEl).offset().top * currentZoom) + el.parentElement.scrollTop - 150,
        //       };
        //       el.parentElement.scrollTo(options);
        //     }
        //   }
        // }
        // private highlightEl(el: Element) {
        //   const textNodes = $(el).find('*').contents().filter(function () {
        //     const nodeName = this.parentElement.nodeName.toLowerCase();
        //     const checkClass = (<Element>this).classList ? !(<Element>this).classList.contains('gd-highlight') : true;
        //     return this.nodeType === 3 &&
        //       this.textContent.trim().length !== 0 &&
        //       nodeName !== 'style' &&
        //       nodeName !== 'title' &&
        //       nodeName !== 'body' &&
        //       nodeName !== 'script' &&
        //       checkClass;
        //   });
        //   const text = this.text;
        //   const highlight = this._highlight;
        //   textNodes.each(function () {
        //     const $this = $(this);
        //     let content = $this.text();
        //     content = highlight.transform(content, text);
        //     $this.replaceWith(content);
        //   });
        //   el.normalize();
        // }
        // private cleanHighlight(el: HTMLElement) {
        //   const nodeListOf = el.querySelectorAll('.gd-highlight');
        //   for (let i = 0; i < nodeListOf.length; i++) {
        //     const element = nodeListOf.item(i);
        //     element.replaceWith((<HTMLElement>element).innerText);
        //   }
        //   el.normalize();
        // }
        // private highlightSearch() {
        //   const el = this._elementRef ? this._elementRef.nativeElement : null;
        //   if (el) {
        //     this.cleanHighlight(el);
        //     if (this.text) {
        //       this.highlightEl(el);
        //       const count = el.querySelectorAll('.gd-highlight').length;
        //       this.total = count;
        //     } else {
        //       this.total = 0;
        //     }
        //     this._searchService.setTotal(this.total);
        //   }
        // }
        // private moveToCurrent() {
        //   if (this.current === 0) {
        //     return;
        //   }
        //   const currentZoom = this.getZoom();
        //   const el = this._elementRef ? this._elementRef.nativeElement : null;
        //   if (el) {
        //     el.querySelectorAll('.gd-highlight-select').forEach(function (value) {
        //       $(value).removeClass('gd-highlight-select');
        //     });
        //     const currentEl = el.querySelectorAll('.gd-highlight')[this.current - 1];
        //     $(currentEl).addClass('gd-highlight-select');
        //     if (currentEl) {
        //       const options = {
        //         left: 0,
        //         top: ($(currentEl).offset().top * currentZoom) + el.parentElement.scrollTop - 150,
        //       };
        //       el.parentElement.scrollTo(options);
        //     }
        //   }
        // }
        // private highlightEl(el: Element) {
        //   const textNodes = $(el).find('*').contents().filter(function () {
        //     const nodeName = this.parentElement.nodeName.toLowerCase();
        //     const checkClass = (<Element>this).classList ? !(<Element>this).classList.contains('gd-highlight') : true;
        //     return this.nodeType === 3 &&
        //       this.textContent.trim().length !== 0 &&
        //       nodeName !== 'style' &&
        //       nodeName !== 'title' &&
        //       nodeName !== 'body' &&
        //       nodeName !== 'script' &&
        //       checkClass;
        //   });
        //   const text = this.text;
        //   const highlight = this._highlight;
        //   textNodes.each(function () {
        //     const $this = $(this);
        //     let content = $this.text();
        //     content = highlight.transform(content, text);
        //     $this.replaceWith(content);
        //   });
        //   el.normalize();
        // }
        // private cleanHighlight(el: HTMLElement) {
        //   const nodeListOf = el.querySelectorAll('.gd-highlight');
        //   for (let i = 0; i < nodeListOf.length; i++) {
        //     const element = nodeListOf.item(i);
        //     element.replaceWith((<HTMLElement>element).innerText);
        //   }
        //   el.normalize();
        // }
        /**
         * @private
         * @return {?}
         */
        SearchableDirective.prototype.getZoom =
            // private highlightSearch() {
            //   const el = this._elementRef ? this._elementRef.nativeElement : null;
            //   if (el) {
            //     this.cleanHighlight(el);
            //     if (this.text) {
            //       this.highlightEl(el);
            //       const count = el.querySelectorAll('.gd-highlight').length;
            //       this.total = count;
            //     } else {
            //       this.total = 0;
            //     }
            //     this._searchService.setTotal(this.total);
            //   }
            // }
            // private moveToCurrent() {
            //   if (this.current === 0) {
            //     return;
            //   }
            //   const currentZoom = this.getZoom();
            //   const el = this._elementRef ? this._elementRef.nativeElement : null;
            //   if (el) {
            //     el.querySelectorAll('.gd-highlight-select').forEach(function (value) {
            //       $(value).removeClass('gd-highlight-select');
            //     });
            //     const currentEl = el.querySelectorAll('.gd-highlight')[this.current - 1];
            //     $(currentEl).addClass('gd-highlight-select');
            //     if (currentEl) {
            //       const options = {
            //         left: 0,
            //         top: ($(currentEl).offset().top * currentZoom) + el.parentElement.scrollTop - 150,
            //       };
            //       el.parentElement.scrollTo(options);
            //     }
            //   }
            // }
            // private highlightEl(el: Element) {
            //   const textNodes = $(el).find('*').contents().filter(function () {
            //     const nodeName = this.parentElement.nodeName.toLowerCase();
            //     const checkClass = (<Element>this).classList ? !(<Element>this).classList.contains('gd-highlight') : true;
            //     return this.nodeType === 3 &&
            //       this.textContent.trim().length !== 0 &&
            //       nodeName !== 'style' &&
            //       nodeName !== 'title' &&
            //       nodeName !== 'body' &&
            //       nodeName !== 'script' &&
            //       checkClass;
            //   });
            //   const text = this.text;
            //   const highlight = this._highlight;
            //   textNodes.each(function () {
            //     const $this = $(this);
            //     let content = $this.text();
            //     content = highlight.transform(content, text);
            //     $this.replaceWith(content);
            //   });
            //   el.normalize();
            // }
            // private cleanHighlight(el: HTMLElement) {
            //   const nodeListOf = el.querySelectorAll('.gd-highlight');
            //   for (let i = 0; i < nodeListOf.length; i++) {
            //     const element = nodeListOf.item(i);
            //     element.replaceWith((<HTMLElement>element).innerText);
            //   }
            //   el.normalize();
            // }
            /**
             * @private
             * @return {?}
             */
            function () {
                return this.zoom / 100;
            };
        SearchableDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[gdSearchable]'
                    },] }
        ];
        /** @nocollapse */
        SearchableDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: SearchService },
                { type: ZoomService }
            ];
        };
        return SearchableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RotationDirective = /** @class */ (function () {
        function RotationDirective() {
            this.withMargin = true;
        }
        /**
         * @private
         * @return {?}
         */
        RotationDirective.prototype.updateCursor = /**
         * @private
         * @return {?}
         */
            function () {
                if (typeof this.angle === "string") {
                    this.angle = parseInt(this.angle, 10);
                }
                if (this.angle) {
                    this.animation = 'none';
                    this.transition = 'none';
                    this.transform = 'rotate(' + this.angle + 'deg)';
                }
                else if (this.angle === 0 && this.animation) {
                    this.animation = null;
                    this.transition = null;
                    this.transform = null;
                }
                if (this.withMargin) {
                    if (this.angle === 90 || this.angle === 270 || this.angle === -90 || this.angle === -270) {
                        if (this.isHtmlMode) {
                            if (this.isLandscape()) {
                                this.margin = '164px 254px';
                            }
                            else {
                                this.margin = '-111px 254px';
                            }
                        }
                        else {
                            if (this.isLandscape()) {
                                this.margin = '129px 100px -79px';
                            }
                            else {
                                this.margin = '-72px 100px -79px';
                            }
                        }
                    }
                    else if (this.angle === -180 || this.angle === 180) {
                        this.margin = '280px';
                    }
                    else {
                        this.margin = null;
                    }
                }
            };
        /**
         * @return {?}
         */
        RotationDirective.prototype.isLandscape = /**
         * @return {?}
         */
            function () {
                return this.width > this.height;
            };
        /**
         * @return {?}
         */
        RotationDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.updateCursor();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        RotationDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.updateCursor();
            };
        RotationDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[gdRotation]'
                    },] }
        ];
        /** @nocollapse */
        RotationDirective.ctorParameters = function () { return []; };
        RotationDirective.propDecorators = {
            angle: [{ type: i0.Input }],
            isHtmlMode: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            withMargin: [{ type: i0.Input }],
            animation: [{ type: i0.HostBinding, args: ['style.animation',] }],
            transition: [{ type: i0.HostBinding, args: ['style.transition-property',] }],
            transform: [{ type: i0.HostBinding, args: ['style.transform',] }],
            margin: [{ type: i0.HostBinding, args: ['style.margin',] }]
        };
        return RotationDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SanitizeHtmlPipe = /** @class */ (function () {
        function SanitizeHtmlPipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @param {?} html
         * @return {?}
         */
        SanitizeHtmlPipe.prototype.transform = /**
         * @param {?} html
         * @return {?}
         */
            function (html) {
                return this.sanitizer.bypassSecurityTrustHtml(html);
            };
        SanitizeHtmlPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'safeHtml' },] }
        ];
        /** @nocollapse */
        SanitizeHtmlPipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return SanitizeHtmlPipe;
    }());
    var SanitizeResourceHtmlPipe = /** @class */ (function () {
        function SanitizeResourceHtmlPipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @param {?} html
         * @return {?}
         */
        SanitizeResourceHtmlPipe.prototype.transform = /**
         * @param {?} html
         * @return {?}
         */
            function (html) {
                return this.sanitizer.bypassSecurityTrustResourceUrl(html);
            };
        SanitizeResourceHtmlPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'safeResourceHtml' },] }
        ];
        /** @nocollapse */
        SanitizeResourceHtmlPipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return SanitizeResourceHtmlPipe;
    }());
    var SanitizeStylePipe = /** @class */ (function () {
        function SanitizeStylePipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @param {?} html
         * @return {?}
         */
        SanitizeStylePipe.prototype.transform = /**
         * @param {?} html
         * @return {?}
         */
            function (html) {
                return this.sanitizer.bypassSecurityTrustStyle(html);
            };
        SanitizeStylePipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'safeStyle' },] }
        ];
        /** @nocollapse */
        SanitizeStylePipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return SanitizeStylePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var $$1 = jquery__default;
    var ViewportService = /** @class */ (function () {
        function ViewportService() {
        }
        /**
         * @param {?} el
         * @param {?=} zoom
         * @param {?=} leftOffset
         * @param {?=} deltaX
         * @return {?}
         */
        ViewportService.prototype.checkInViewport = /**
         * @param {?} el
         * @param {?=} zoom
         * @param {?=} leftOffset
         * @param {?=} deltaX
         * @return {?}
         */
            function (el, zoom, leftOffset, deltaX) {
                if (zoom === void 0) {
                    zoom = 100;
                }
                if (leftOffset === void 0) {
                    leftOffset = 0;
                }
                if (deltaX === void 0) {
                    deltaX = 0.5;
                }
                if (!el) {
                    return false;
                }
                /** @type {?} */
                var x = deltaX;
                /** @type {?} */
                var y = 0.5;
                /** @type {?} */
                var win = $$1(window);
                /** @type {?} */
                var viewport = {
                    top: win.scrollTop(),
                    left: win.scrollLeft() + leftOffset,
                    right: win.scrollLeft() + win.width() - 10,
                    bottom: win.scrollTop() + win.height()
                };
                if (isNaN(zoom)) {
                    zoom = 100;
                }
                /** @type {?} */
                var zoomN = zoom / 100;
                /** @type {?} */
                var height = $$1(el).outerHeight() * (zoomN);
                /** @type {?} */
                var width = $$1(el).outerWidth() * (zoomN);
                if (!width || !height) {
                    return false;
                }
                /** @type {?} */
                var bounds = $$1(el).offset();
                /** @type {?} */
                var right = (bounds.left * (zoomN)) + width;
                /** @type {?} */
                var bottom = (bounds.top * (zoomN)) + height;
                /** @type {?} */
                var visible = (!(viewport.right < (bounds.left * (zoomN)) || viewport.left > right || viewport.bottom < (bounds.top * (zoomN)) || viewport.top > bottom));
                if (!visible) {
                    return false;
                }
                /** @type {?} */
                var deltas = {
                    top: Math.min(1, (bottom - viewport.top) / height),
                    bottom: Math.min(1, (viewport.bottom - (bounds.top * (zoomN))) / height),
                    left: Math.min(1, (right - viewport.left) / width),
                    right: Math.min(1, (viewport.right - (bounds.left * (zoomN))) / width)
                };
                return (deltas.left * deltas.right) >= x && (deltas.top * deltas.bottom) >= y;
            };
        ViewportService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ViewportService.ctorParameters = function () { return []; };
        /** @nocollapse */ ViewportService.ngInjectableDef = i0.defineInjectable({ factory: function ViewportService_Factory() { return new ViewportService(); }, token: ViewportService, providedIn: "root" });
        return ViewportService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var $$2 = jquery;
    var ScrollableDirective = /** @class */ (function () {
        function ScrollableDirective(_elementRef, _navigateService, _pagePreloadService, _zoomService, _windowService, _viewportService) {
            var _this = this;
            this._elementRef = _elementRef;
            this._navigateService = _navigateService;
            this._pagePreloadService = _pagePreloadService;
            this._zoomService = _zoomService;
            this._windowService = _windowService;
            this._viewportService = _viewportService;
            this.zoom = 100;
            this.zoom = _zoomService.zoom ? _zoomService.zoom : this.zoom;
            _zoomService.zoomChange.subscribe(( /**
             * @param {?} val
             * @return {?}
             */function (val) {
                _this.zoom = val ? val : _this.zoom;
                _this.refresh();
            }));
        }
        /**
         * @return {?}
         */
        ScrollableDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zoom = this._zoomService.zoom ? this._zoomService.zoom : this.zoom;
                this._navigateService.navigate.subscribe((( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    _this.currentPage = value;
                    _this.scrollToPage(value);
                })));
                this.refresh();
            };
        /**
         * @return {?}
         */
        ScrollableDirective.prototype.scrolling = /**
         * @return {?}
         */
            function () {
                this.refresh();
            };
        /**
         * @return {?}
         */
        ScrollableDirective.prototype.resizing = /**
         * @return {?}
         */
            function () {
                this.refresh();
            };
        /**
         * @param {?} pageNumber
         * @return {?}
         */
        ScrollableDirective.prototype.scrollToPage = /**
         * @param {?} pageNumber
         * @return {?}
         */
            function (pageNumber) {
                /** @type {?} */
                var el = this._elementRef.nativeElement;
                /** @type {?} */
                var page = this.getPage(pageNumber);
                /** @type {?} */
                var prev = pageNumber > 0 ? this.getPage(pageNumber - 1) : null;
                /** @type {?} */
                var isSameTop = (prev && $$2(prev).offset().top === $$2(page).offset().top);
                if (this._viewportService.checkInViewport(page, this.zoom) && isSameTop) {
                    return;
                }
                /** @type {?} */
                var pagesHeight = this.calculateOffset(pageNumber);
                /** @type {?} */
                var options = {
                    left: 0,
                    top: pagesHeight
                };
                if (el) {
                    el.scrollTo(options);
                }
            };
        /**
         * @private
         * @return {?}
         */
        ScrollableDirective.prototype.getChildren = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this._elementRef ? this._elementRef.nativeElement : null;
                if (el) {
                    return el.children.item(0).children;
                }
            };
        /**
         * @private
         * @param {?} pageNumber
         * @return {?}
         */
        ScrollableDirective.prototype.getPage = /**
         * @private
         * @param {?} pageNumber
         * @return {?}
         */
            function (pageNumber) {
                /** @type {?} */
                var el = this._elementRef ? this._elementRef.nativeElement : null;
                if (el) {
                    return el.children.item(0).children.item(pageNumber - 1);
                }
            };
        /**
         * @private
         * @param {?} pageNumber
         * @return {?}
         */
        ScrollableDirective.prototype.calculateOffset = /**
         * @private
         * @param {?} pageNumber
         * @return {?}
         */
            function (pageNumber) {
                /** @type {?} */
                var count = this.ifFirefox() ? 1 : this.countPagesOnWidth();
                /** @type {?} */
                var margin = this._windowService.isDesktop() ? 40 : 10;
                /** @type {?} */
                var pagesHeight = 0;
                for (var i = 1; i < pageNumber / count; i++) {
                    /** @type {?} */
                    var item = this.getPage(i);
                    /** @type {?} */
                    var clientHeight = item ? item.clientHeight : 0;
                    pagesHeight += clientHeight > 0 ? clientHeight * this.getZoom() + margin : 0;
                }
                return pagesHeight;
            };
        /**
         * @private
         * @return {?}
         */
        ScrollableDirective.prototype.countPagesOnWidth = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var pageEl = this.getPage(1);
                /** @type {?} */
                var offset = 150;
                /** @type {?} */
                var count = Math.floor((this.getWidth() - offset) / (pageEl.getBoundingClientRect().width * this.getZoom()));
                return count === 0 ? 1 : count;
            };
        /**
         * @return {?}
         */
        ScrollableDirective.prototype.ifFirefox = /**
         * @return {?}
         */
            function () {
                return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
            };
        /**
         * @return {?}
         */
        ScrollableDirective.prototype.refresh = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var page;
                /** @type {?} */
                var currentPageSet = false;
                /** @type {?} */
                var pageElem = this.getPage(this.currentPage);
                /** @type {?} */
                var currentPageRect = this.currentPage && pageElem ? pageElem.getBoundingClientRect() : null;
                for (page = 1; page < this.getChildren().length + 1; page++) {
                    /** @type {?} */
                    var element = this.getPage(page);
                    if (this._viewportService.checkInViewport(element, this.zoom)) {
                        if (!currentPageSet) {
                            if (!this.currentPage || !pageElem || (this.currentPage && currentPageRect && element.getBoundingClientRect().top !== currentPageRect.top)) {
                                this.currentPage = page;
                                this._navigateService.currentPage = page;
                            }
                            currentPageSet = true;
                        }
                        this._pagePreloadService.changeLastPageInView(page);
                    }
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ScrollableDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.refresh();
            };
        /**
         * @return {?}
         */
        ScrollableDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.zoom = this._zoomService.zoom ? this._zoomService.zoom : this.zoom;
            };
        /**
         * @private
         * @return {?}
         */
        ScrollableDirective.prototype.getWidth = /**
         * @private
         * @return {?}
         */
            function () {
                return this._elementRef ? this._elementRef.nativeElement.offsetWidth : window.innerWidth;
            };
        /**
         * @private
         * @return {?}
         */
        ScrollableDirective.prototype.getZoom = /**
         * @private
         * @return {?}
         */
            function () {
                return this.zoom / 100;
            };
        ScrollableDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[gdScrollable]'
                    },] }
        ];
        /** @nocollapse */
        ScrollableDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: NavigateService },
                { type: PagePreloadService },
                { type: ZoomService },
                { type: WindowService },
                { type: ViewportService }
            ];
        };
        ScrollableDirective.propDecorators = {
            onRefresh: [{ type: i0.Input }],
            scrolling: [{ type: i0.HostListener, args: ['scroll',] }],
            resizing: [{ type: i0.HostListener, args: ['window:resize',] }]
        };
        return ScrollableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspDocumentModule = /** @class */ (function () {
        function GspDocumentModule() {
        }
        GspDocumentModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [GspDocumentComponent, GspPageComponent, ExcelDocumentComponent, ExcelPageComponent,
                            ZoomDirective, SearchableDirective,
                            RotationDirective, SanitizeHtmlPipe, SanitizeResourceHtmlPipe, SanitizeStylePipe, ScrollableDirective],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [GspDocumentComponent, ExcelDocumentComponent, ZoomDirective, SearchableDirective],
                        entryComponents: [GspDocumentComponent, ExcelDocumentComponent],
                        providers: [
                            ZoomService,
                            SelectionService,
                            SearchService,
                            PagePreloadService
                        ]
                    },] }
        ];
        return GspDocumentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var $$3 = jquery__default;
    var GspTopToolbarComponent = /** @class */ (function () {
        function GspTopToolbarComponent(_elementRef, _viewportService, _cdRef) {
            this._elementRef = _elementRef;
            this._viewportService = _viewportService;
            this._cdRef = _cdRef;
            this.leftOffset = true;
        }
        /**
         * @return {?}
         */
        GspTopToolbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.refresh();
                /** @type {?} */
                var el = this.getToolsElem();
                /** @type {?} */
                var $this = this;
                el.addEventListener('scroll', ( /**
                 * @return {?}
                 */function () {
                    $this.refresh();
                }));
            };
        /**
         * @return {?}
         */
        GspTopToolbarComponent.prototype.moveLeft = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.getToolsElem();
                if (el) {
                    /** @type {?} */
                    var elem = this.canMoveTo(true);
                    if (elem) {
                        /** @type {?} */
                        var options = {
                            left: $$3(elem).offset().left + el.scrollLeft - this.getLeftOffset(),
                            top: 0,
                        };
                        el.scrollTo(options);
                    }
                }
            };
        /**
         * @return {?}
         */
        GspTopToolbarComponent.prototype.moveRight = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.getToolsElem();
                if (el) {
                    /** @type {?} */
                    var elem = this.canMoveTo(false);
                    if (elem) {
                        /** @type {?} */
                        var options = {
                            left: $$3(elem).offset().left + el.scrollLeft - this.getLeftOffset(),
                            top: 0,
                        };
                        el.scrollTo(options);
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        GspTopToolbarComponent.prototype.getToolsElem = /**
         * @private
         * @return {?}
         */
            function () {
                return this._elementRef ? this._elementRef.nativeElement.children[0].querySelector('#tools') : null;
            };
        /**
         * @private
         * @param {?} left
         * @return {?}
         */
        GspTopToolbarComponent.prototype.canMoveTo = /**
         * @private
         * @param {?} left
         * @return {?}
         */
            function (left) {
                /** @type {?} */
                var elem;
                /** @type {?} */
                var children = this.getChildren();
                /** @type {?} */
                var countElem = children.length;
                for (elem = 0; elem < countElem; elem++) {
                    /** @type {?} */
                    var element = this.getElem(elem);
                    if (this._viewportService.checkInViewport(element, 100, this.getLeftOffset())) {
                        if (left) {
                            return elem > 0 ? children.item(elem - 1) : null;
                        }
                        else {
                            return elem + 1 < countElem ? children.item(elem + 1) : null;
                        }
                    }
                }
                return;
            };
        /**
         * @private
         * @param {?} num
         * @return {?}
         */
        GspTopToolbarComponent.prototype.getElem = /**
         * @private
         * @param {?} num
         * @return {?}
         */
            function (num) {
                /** @type {?} */
                var elems = this.getChildren();
                return elems.item(num !== null ? num : elems.length - 1);
            };
        /**
         * @private
         * @return {?}
         */
        GspTopToolbarComponent.prototype.getChildren = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.getToolsElem();
                if (!el) {
                    return;
                }
                return el.children;
            };
        /**
         * @private
         * @return {?}
         */
        GspTopToolbarComponent.prototype.getLeftOffset = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.leftOffset) {
                    return 0;
                }
                /** @type {?} */
                var el = this._elementRef.nativeElement ? this._elementRef.nativeElement.parentElement.children[0] : null;
                if (!el) {
                    return 0;
                }
                return el.clientWidth;
            };
        /**
         * @private
         * @return {?}
         */
        GspTopToolbarComponent.prototype.refresh = /**
         * @private
         * @return {?}
         */
            function () {
                this.showLeft = !this._viewportService.checkInViewport(this.getElem(0), 100, this.getLeftOffset(), 0.8);
                this.showRight = !this._viewportService.checkInViewport(this.getElem(null), 100, this.getLeftOffset(), 0.8);
            };
        /**
         * @return {?}
         */
        GspTopToolbarComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var showLeft = !this._viewportService.checkInViewport(this.getElem(0), 100, this.getLeftOffset(), 0.8);
                /** @type {?} */
                var showRight = !this._viewportService.checkInViewport(this.getElem(null), 100, this.getLeftOffset(), 0.8);
                if (showLeft !== this.showLeft || showRight !== this.showRight) {
                    this.showLeft = showLeft;
                    this.showRight = showRight;
                    this._cdRef.detectChanges();
                }
            };
        GspTopToolbarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-gsp-top-toolbar',
                        template: "<div class=\"top-toolbar\">\n    <!-- <app-gsp-button [className]=\"'arrow-button'\" class=\"arrow-left\" id=\"left\" [icon]=\"'caret-left'\" [tooltip]=\"'Scroll left'\" (click)=\"moveLeft()\" *ngIf=\"showLeft\">\n    </app-gsp-button> -->\n    <div id=\"tools\" class=\"tools\">\n        <ng-content></ng-content>\n    </div>\n    <!-- <app-gsp-button [className]=\"'arrow-button'\" class=\"arrow-right\" id=\"right\" [icon]=\"'caret-right'\" [tooltip]=\"'Scroll right'\" (click)=\"moveRight()\" *ngIf=\"showRight\">\n    </app-gsp-button> -->\n</div>",
                        styles: [".top-toolbar{width:100%;height:60px;z-index:999;display:flex;align-items:center}.tools{width:100%;height:100%;display:flex;align-items:center}@media (max-width:1037px){.top-toolbar{height:60px}.arrow-right{position:absolute;right:0}.arrow-left{position:absolute;left:0}.tools{height:100%;overflow-x:auto;display:flex;align-items:center;transition:.3s ease-in-out;scroll-behavior:smooth;-webkit-overflow-scrolling:touch}.tools::-webkit-scrollbar{width:0;height:0;background-color:#3e4e5a}}"]
                    }] }
        ];
        /** @nocollapse */
        GspTopToolbarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: ViewportService },
                { type: i0.ChangeDetectorRef }
            ];
        };
        GspTopToolbarComponent.propDecorators = {
            leftOffset: [{ type: i0.Input }]
        };
        return GspTopToolbarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspTopToolbarModule = /** @class */ (function () {
        function GspTopToolbarModule() {
        }
        GspTopToolbarModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [GspTopToolbarComponent],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [GspTopToolbarComponent],
                        entryComponents: [GspTopToolbarComponent]
                    },] }
        ];
        return GspTopToolbarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocViewerModule = /** @class */ (function () {
        function DocViewerModule() {
        }
        DocViewerModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [DocViewerComponent],
                        imports: [
                            common.CommonModule,
                            GspDocumentModule,
                            GspTopToolbarModule
                        ],
                        exports: [DocViewerComponent],
                        entryComponents: [DocViewerComponent],
                        providers: [PagePreloadService, NavigateService]
                    },] }
        ];
        return DocViewerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OfdViewerComponent = /** @class */ (function () {
        function OfdViewerComponent() {
        }
        /**
         * @return {?}
         */
        OfdViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.ocx = suwell.ofdReaderInit("ofdDiv", "100%", "100%");
                this.ocx.setCompsiteVisible("f_open", true);
                this.ocx.openFile(this.filePath, true);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        OfdViewerComponent.prototype.fileChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                this.filePath = filePath;
                this.ocx.openFile(filePath, true);
            };
        OfdViewerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-ofd-viewer',
                        template: "<div id=\"ofdDiv\" style=\"width:100%;height:100%;\" ></div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        OfdViewerComponent.ctorParameters = function () { return []; };
        OfdViewerComponent.propDecorators = {
            filePath: [{ type: i0.Input }]
        };
        return OfdViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OfdViewerModule = /** @class */ (function () {
        function OfdViewerModule() {
        }
        OfdViewerModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [OfdViewerComponent],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [OfdViewerComponent],
                        entryComponents: [OfdViewerComponent]
                    },] }
        ];
        return OfdViewerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var StorageType = {
        FileSystem: 0,
        Url: 1,
        UniFile: 2,
        Customer: 3,
    };
    StorageType[StorageType.FileSystem] = 'FileSystem';
    StorageType[StorageType.Url] = 'Url';
    StorageType[StorageType.UniFile] = 'UniFile';
    StorageType[StorageType.Customer] = 'Customer';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ViewFileRequest = /** @class */ (function () {
        function ViewFileRequest() {
        }
        return ViewFileRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UnifileListInfo = /** @class */ (function () {
        function UnifileListInfo() {
        }
        return UnifileListInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MergePdfRequest = /** @class */ (function () {
        function MergePdfRequest() {
        }
        return MergePdfRequest;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileListService = /** @class */ (function () {
        function FileListService(http, httpClient) {
            this.http = http;
            this.httpClient = httpClient;
        }
        /**
         * @param {?} filePath
         * @param {?} storageType
         * @return {?}
         */
        FileListService.prototype.getViewFile = /**
         * @param {?} filePath
         * @param {?} storageType
         * @return {?}
         */
            function (filePath, storageType) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/fileviewer/file";
                /** @type {?} */
                var viewRequest = new ViewFileRequest;
                viewRequest.storageType = storageType;
                viewRequest.filePath = filePath;
                /** @type {?} */
                var body = viewRequest;
                return this.http.request('Post', url, this.setHeader({ body: body })).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @param {?} formId
         * @param {?} rootId
         * @return {?}
         */
        FileListService.prototype.getFormFileList = /**
         * @param {?} formId
         * @param {?} rootId
         * @return {?}
         */
            function (formId, rootId) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
                /** @type {?} */
                var unifileInfo = new UnifileListInfo;
                unifileInfo.formId = formId;
                unifileInfo.rootId = rootId;
                /** @type {?} */
                var viewRequest = new ViewFileRequest;
                viewRequest.storageType = StorageType.UniFile;
                viewRequest.filePath = JSON.stringify(unifileInfo);
                /** @type {?} */
                var body = viewRequest;
                return this.http.request('Post', url, this.setHeader({ body: body })).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @param {?} options
         * @return {?}
         */
        FileListService.prototype.setHeader = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                options.headers = {
                    'Content-Type': 'application/json'
                };
                return options;
            };
        /**
         * @param {?} idList
         * @param {?=} rootId
         * @return {?}
         */
        FileListService.prototype.getFileList = /**
         * @param {?} idList
         * @param {?=} rootId
         * @return {?}
         */
            function (idList, rootId) {
                if (rootId === void 0) {
                    rootId = "";
                }
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/fileviewer/filelist";
                /** @type {?} */
                var unifileInfo = new UnifileListInfo;
                unifileInfo.metadataIdList = idList;
                unifileInfo.rootId = rootId;
                /** @type {?} */
                var viewRequest = new ViewFileRequest;
                viewRequest.storageType = StorageType.UniFile;
                viewRequest.filePath = JSON.stringify(unifileInfo);
                /** @type {?} */
                var body = viewRequest;
                return this.http.request('Post', url, this.setHeader({ body: body })).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @param {?} idList
         * @param {?} rootId
         * @return {?}
         */
        FileListService.prototype.getMergedFile = /**
         * @param {?} idList
         * @param {?} rootId
         * @return {?}
         */
            function (idList, rootId) {
                /** @type {?} */
                var url = "/api/runtime/dfs/v1.0/doc/mergepdf";
                /** @type {?} */
                var httpOptions = {};
                httpOptions['responseType'] = "blob";
                /** @type {?} */
                var body = new MergePdfRequest;
                body.metadataIdList = idList;
                body.rootId = rootId;
                body.token = this.getToken(this.mergeString(idList[0], rootId));
                return this.httpClient.post(url, body, httpOptions).pipe(operators.tap(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { })), operators.catchError(( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    return rxjs.of(error);
                })));
            };
        /**
         * @private
         * @param {?} str
         * @param {?} str1
         * @return {?}
         */
        FileListService.prototype.mergeString = /**
         * @private
         * @param {?} str
         * @param {?} str1
         * @return {?}
         */
            function (str, str1) {
                /** @type {?} */
                var min = str.length < str1.length ? str.length : str1.length;
                /** @type {?} */
                var res = "";
                /** @type {?} */
                var i = 0;
                for (i = 0; i < min; i++) {
                    res += str.substring(i, i + 1);
                    res += str1.substring(i, i + 1);
                }
                res += str.length < str1.length ? str1.substring(i) : str.substring(i);
                return res;
            };
        /**
         * @private
         * @param {?} str
         * @return {?}
         */
        FileListService.prototype.getToken = /**
         * @private
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var array = [1, 2, 3];
                if (str.length > 24)
                    str = str.substring(0, 24);
                /** @type {?} */
                var length = Math.floor(str.length / 3);
                /** @type {?} */
                var str1 = str.substring(0, length);
                /** @type {?} */
                var str2 = str.substring(length, 2 * length);
                /** @type {?} */
                var str3 = str.substring(2 * length, 3 * length);
                /** @type {?} */
                var randomArray = [];
                /** @type {?} */
                var random = Math.ceil(Math.random() * 3);
                randomArray.push(array[random - 1]);
                array.splice(random - 1, 1);
                random = Math.ceil(Math.random() * 2);
                randomArray.push(array[random - 1]);
                array.splice(random - 1, 1);
                randomArray.push(array[0]);
                /** @type {?} */
                var timeStamp = Math.round(new Date().getTime() / 1000) + "";
                return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
            };
        /**
         * @private
         * @param {?} str1
         * @param {?} str2
         * @param {?} str3
         * @param {?} i
         * @return {?}
         */
        FileListService.prototype.switchStr = /**
         * @private
         * @param {?} str1
         * @param {?} str2
         * @param {?} str3
         * @param {?} i
         * @return {?}
         */
            function (str1, str2, str3, i) {
                switch (i) {
                    case 1: return str1;
                    case 2: return str2;
                    case 3: return str3;
                }
            };
        FileListService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FileListService.ctorParameters = function () {
            return [
                { type: i1.HttpService },
                { type: i2.HttpClient }
            ];
        };
        /** @nocollapse */ FileListService.ngInjectableDef = i0.defineInjectable({ factory: function FileListService_Factory() { return new FileListService(i0.inject(i1.HttpService), i0.inject(i2.HttpClient)); }, token: FileListService, providedIn: "root" });
        return FileListService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var GspFileViewType = {
        Image: 0,
        Ofd: 1,
        Pdf: 2,
        Ppt: 3,
        Document: 4,
    };
    GspFileViewType[GspFileViewType.Image] = 'Image';
    GspFileViewType[GspFileViewType.Ofd] = 'Ofd';
    GspFileViewType[GspFileViewType.Pdf] = 'Pdf';
    GspFileViewType[GspFileViewType.Ppt] = 'Ppt';
    GspFileViewType[GspFileViewType.Document] = 'Document';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PdfViewerComponent = /** @class */ (function () {
        function PdfViewerComponent(sanitizer) {
            this.sanitizer = sanitizer;
            this.pdfUrl = "";
            this.baseUrl = "/platform/common/web/pdfjs/viewer.html?file=";
        }
        /**
         * @return {?}
         */
        PdfViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.getViewUrl(this.baseUrl + encodeURIComponent(this.pdfUrl)));
            };
        /**
         * @param {?} url
         * @return {?}
         */
        PdfViewerComponent.prototype.pdfChange = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.getViewUrl(this.baseUrl + encodeURIComponent(url)));
            };
        /**
         * @param {?} url
         * @return {?}
         */
        PdfViewerComponent.prototype.getViewUrl = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (!this.viewOptions.showPaging)
                    url += "&showpaging=false";
                if (!this.viewOptions.showHeader)
                    url += "&showheader=false";
                if (!this.viewOptions.showThumbnails)
                    url += "&showthumbnails=false";
                if (!this.viewOptions.showDownload)
                    url += "&showdownload=false";
                if (!this.viewOptions.showSearch)
                    url += "&showsearch=false";
                if (!this.viewOptions.showPrint)
                    url += "&showprint=false";
                if (!this.viewOptions.showZoom)
                    url += "&showzoom=false";
                if (!this.viewOptions.showSecondaryToolBar)
                    url += "&showsecondarytoolbar=false";
                return url;
            };
        PdfViewerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-pdf-viewer',
                        template: "<iframe id=\"viewframe\" [src]=\"viewUrl\" height=\"100%\" width=\"100%\"></iframe>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        PdfViewerComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        PdfViewerComponent.propDecorators = {
            pdfUrl: [{ type: i0.Input }],
            viewOptions: [{ type: i0.Input }]
        };
        return PdfViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PptViewerComponent = /** @class */ (function () {
        function PptViewerComponent(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @return {?}
         */
        PptViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.pptUrl);
            };
        /**
         * @param {?} url
         * @return {?}
         */
        PptViewerComponent.prototype.pptChange = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                this.viewUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
            };
        PptViewerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-ppt-viewer',
                        template: "<div class=\"f-page\"><iframe id=\"viewPpt\" [src]=\"viewUrl\" height=\"100%\" width=\"100%\"></iframe></div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        PptViewerComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        PptViewerComponent.propDecorators = {
            pptUrl: [{ type: i0.Input }]
        };
        return PptViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileListComponent = /** @class */ (function () {
        function FileListComponent(listService, msgService, loadService, injector) {
            this.listService = listService;
            this.msgService = msgService;
            this.loadService = loadService;
            this.injector = injector;
            this.formId = '123456';
            this.rootId = 'default-root';
            this.metadataIdList = [];
            this.index = 0;
            this.metadataId = "";
            this.fileList = [];
            this.isImage = true;
            this.isOfd = true;
            this.isPdf = true;
            this.isPpt = true;
            //srcList: string[] = [];
            this.isDocShow = false;
            this.isOfdShow = false;
            this.isPdfShow = false;
            this.isPptShow = false;
            this.isFileListOpend = false;
        }
        /**
         * @return {?}
         */
        FileListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var loading = this.loadService.show({
                    message: '拼命的请求中'
                });
                if (this.metadataIdList.length > 0) {
                    this.listService.getFileList(this.metadataIdList, this.rootId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        loading.close();
                        if (res.error != null) {
                            _this.msgService.warning('获取表单附件信息失败,请稍后重试。');
                        }
                        else {
                            _this.fileList = res;
                            _this.getFileIcon();
                            _this.getIndex();
                            _this.fileChange();
                            if (_this.injector) {
                                /** @type {?} */
                                var changeDetector = _this.injector.get(i0.ChangeDetectorRef);
                                changeDetector.detectChanges();
                            }
                        }
                    }));
                }
                else {
                    this.listService.getFormFileList(this.formId, this.rootId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        loading.close();
                        if (res.error != null) {
                            _this.msgService.warning('获取表单附件信息失败,请稍后重试。');
                        }
                        else {
                            _this.fileList = res;
                            _this.getFileIcon();
                            _this.getIndex();
                            _this.fileChange();
                            if (_this.injector) {
                                /** @type {?} */
                                var changeDetector = _this.injector.get(i0.ChangeDetectorRef);
                                changeDetector.detectChanges();
                            }
                        }
                    }));
                }
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.getIndex = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.metadataId == null || this.metadataId == "") {
                    this.index = 0;
                }
                else if (this.fileList.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x.metadataId == _this.metadataId; })).length == 0) {
                    this.index = 0;
                }
                else {
                    this.index = this.fileList.indexOf(this.fileList.filter(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) { return x.metadataId == _this.metadataId; }))[0]);
                }
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.fileChange = /**
         * @return {?}
         */
            function () {
                this.file = this.fileList[this.index];
                //this.file=src;
                this.isImage = this.file.fileType == GspFileViewType.Image || this.file.fileType == 'Image';
                this.isOfd = this.file.fileType == GspFileViewType.Ofd || this.file.fileType == 'Ofd';
                this.isPdf = this.file.fileType == GspFileViewType.Pdf || this.file.fileType == 'Pdf';
                this.isPpt = this.file.fileType == GspFileViewType.Ppt || this.file.fileType == 'Ppt';
                if (this.isImage) {
                    this.isDocShow = false;
                    this.isOfdShow = false; //this.imageChange(this.file.fileUrl);
                    this.isPptShow = false;
                    return;
                }
                else if (this.isOfd) {
                    //this.file.fileUrl="/platform/runtime/dfs/images/file.jpg";
                    if (this.isOfdShow)
                        this.ofdChange(this.file.filePath);
                    else {
                        this.isDocShow = false;
                        this.isOfdShow = true;
                        this.isPdfShow = false;
                        this.isPptShow = false;
                    }
                }
                else if (this.isPdf) {
                    if (this.isPdfShow)
                        this.pdfChange(this.file.filePath);
                    else {
                        this.isDocShow = false;
                        this.isOfdShow = false;
                        this.isPdfShow = true;
                        this.isPptShow = false;
                    }
                }
                else if (this.isPpt) {
                    if (this.isPptShow)
                        this.pptChange(this.file.filePath);
                    else {
                        this.isDocShow = false;
                        this.isOfdShow = false;
                        this.isPdfShow = false;
                        this.isPptShow = true;
                    }
                }
                else {
                    if (this.isDocShow)
                        this.docChange(this.file.filePath);
                    else {
                        this.isDocShow = true;
                        this.isOfdShow = false;
                        this.isPdfShow = false;
                        this.isPptShow = false;
                    }
                }
            };
        /**
         * @param {?} src
         * @return {?}
         */
        FileListComponent.prototype.listBackColor = /**
         * @param {?} src
         * @return {?}
         */
            function (src) {
                if (this.file == src)
                    return { "background-color": "#E6F7FF" };
            };
        /**
         * @param {?} src
         * @return {?}
         */
        FileListComponent.prototype.fileSelect = /**
         * @param {?} src
         * @return {?}
         */
            function (src) {
                // this.file==src;
                this.index = this.fileList.indexOf(src);
                this.fileChange();
                //this.imageViewer.changeFile(this.index);
            };
        /**
         * @param {?} url
         * @return {?}
         */
        FileListComponent.prototype.imageChange = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                this.imageUrl = url;
                this.imageViewer.imageChange(url);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        FileListComponent.prototype.docChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                this.docPath = filePath;
                this.docViewer.docChange(filePath);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        FileListComponent.prototype.pdfChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                //this.docPath = filePath;
                this.pdfViewer.pdfChange(filePath);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        FileListComponent.prototype.pptChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                //this.docPath = filePath;
                this.pptViewer.pptChange(filePath);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        FileListComponent.prototype.ofdChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                this.ofdViewer.fileChange(filePath);
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.getFileIcon = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var elementIsImage = true;
                /** @type {?} */
                var elementIsOfd = false;
                this.fileList.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    elementIsImage = element.fileType == GspFileViewType.Image || element.fileType == 'Image';
                    elementIsOfd = element.fileType == GspFileViewType.Ofd || element.fileType == 'Ofd';
                    if (!elementIsImage && !elementIsOfd) {
                        if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("doc") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("docx") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("wps"))
                            element.fileUrl = "/platform/runtime/dfs/images/word.png";
                        else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("xls") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("xlsx") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("et"))
                            element.fileUrl = "/platform/runtime/dfs/images/excel.png";
                        else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("ppt") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("pptx") || element.fileName.substring(element.fileName.lastIndexOf(".")).includes("dps"))
                            element.fileUrl = "/platform/runtime/dfs/images/ppt.png";
                        else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("pdf"))
                            element.fileUrl = "/platform/runtime/dfs/images/pdf.png";
                        else if (element.fileName.substring(element.fileName.lastIndexOf(".")).includes("txt"))
                            element.fileUrl = "/platform/runtime/dfs/images/txt.png";
                        else
                            element.fileUrl = "/platform/runtime/dfs/images/file.png";
                    }
                    if (elementIsOfd)
                        element.fileUrl = "/platform/runtime/dfs/images/file.png";
                }));
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.isShowFileList = /**
         * @return {?}
         */
            function () {
                this.isFileListOpend = !this.isFileListOpend;
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.download = /**
         * @return {?}
         */
            function () {
                window.open(this.file.downloadUrl);
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.zoomIn = /**
         * @return {?}
         */
            function () {
                if (this.isImage) {
                    this.imageViewer.zoomIn();
                }
                else if (this.isOfd) ;
                else {
                    this.docViewer.zoomIn();
                }
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.zoomOut = /**
         * @return {?}
         */
            function () {
                if (this.isImage) {
                    this.imageViewer.zoomOut();
                }
                else if (this.isOfd) ;
                else {
                    this.docViewer.zoomOut();
                }
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.zoomReset = /**
         * @return {?}
         */
            function () {
                if (this.isImage) {
                    this.imageViewer.zoomReset();
                }
                else if (this.isOfd) ;
                else {
                    this.docViewer.zoomReset();
                }
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.rotateClockwise = /**
         * @return {?}
         */
            function () {
                if (this.isImage) {
                    this.imageViewer.rotateClockwise();
                }
                else if (this.isOfd) ;
                else {
                    this.docViewer.rotateClockwise();
                }
            };
        /**
         * @return {?}
         */
        FileListComponent.prototype.rotateCounterClockwise = /**
         * @return {?}
         */
            function () {
                if (this.isImage) {
                    this.imageViewer.rotateCounterClockwise();
                }
                else if (this.isOfd) ;
                else {
                    this.docViewer.rotateCounterClockwise();
                }
            };
        FileListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-file-list',
                        template: "<div class=\"f-utils-absolute-all\">\n    <kendo-splitter style=\"height:100%;width:100%\" orientation=\"vertical\">\n        <kendo-splitter-pane [collapsible]=\"true\" size=\"50px\" [resizable]='false'>\n\n            <div style=\"width: 100%\">\n                <div class=\"btn btn-secondary upload_button\" (click)=\"isShowFileList()\" style=\"left:40px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/discount.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u6587\u6863\u5217\u8868'\">\n                </div>\n                <div class=\"btn btn-secondary upload_button\" (click)=\"download()\" style=\"left:90px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/download.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u4E0B\u8F7D'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"zoomIn()\" style=\"left:50%; margin-left: -12.5px;;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/zoomin.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u653E\u5927'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"zoomOut()\" style=\"left:50%; margin-left: -62.5px;;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/zoomout.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u7F29\u5C0F'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"zoomReset()\" style=\"left:50%; margin-left: 37.5px;;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/zoomreset.png'\" class=\"upload_button\" style=\"top:2.5px;left:2.5px;width:20px;height:20px\" title=\"'\u91CD\u7F6E'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"rotateClockwise()\" style=\"right:40px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/rotate.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u987A\u65F6\u9488\u65CB\u8F6C'\">\n                </div>\n                <div *ngIf=\"!isOfd && !isPdf && !isPpt\" class=\"btn btn-secondary upload_button\" (click)=\"rotateCounterClockwise()\" style=\"right:90px;border:0\">\n                    <img [src]=\"'/platform/runtime/dfs/images/conrotate.png'\" class=\"upload_button\" style=\"top:0;left:0\" title=\"'\u9006\u65F6\u9488\u65CB\u8F6C'\">\n                </div>\n            </div>\n\n        </kendo-splitter-pane>\n        <kendo-splitter-pane>\n            <kendo-splitter style=\"height:100%;width:100%\">\n                <kendo-splitter-pane [collapsible]=\"true\" size=\"200px\" [collapsed]=\"isFileListOpend\" [resizable]='false' [scrollable]='true' style=\"overflow-x:hidden\">\n                    <ul *ngFor=\"let src of fileList\" class=\"pic_list\" [ngStyle]=\"listBackColor(src)\">\n                        <a (click)=\"fileSelect(src)\">\n                            <div>\n                                <img [src]='src.fileUrl'>\n                            </div>\n                            <p>{{src.fileName}}</p>\n                        </a>\n                    </ul>\n                </kendo-splitter-pane>\n                <kendo-splitter-pane id=\"paneContent\" [scrollable]='true'>\n                    <div *ngIf='isImage&&!isOfd&&!isPdf&&!isPpt'>\n                        <app-image-viewer [imageUrl]=\"file.fileUrl\"></app-image-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&!isOfd&&!isPdf&&!isPpt'>\n                        <app-doc-viewer [filePath]=\"file.filePath\"></app-doc-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&isOfd&&!isPdf&&!isPpt'>\n                        <app-ofd-viewer [filePath]=\"file.filePath\"></app-ofd-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&!isOfd&&!isPdf&&isPpt'>\n                        <app-ppt-viewer [pptUrl]=\"file.filePath\"></app-ppt-viewer>\n                    </div>\n                    <div *ngIf='!isImage&&!isOfd&&isPdf&&!isPpt' class=\"f-utils-fill\" style=\"height: 100%\">\n                        <app-pdf-viewer [pdfUrl]=\"file.filePath\" [viewOptions]=\"viewOptions\"></app-pdf-viewer>\n                    </div>\n                </kendo-splitter-pane>\n            </kendo-splitter>\n        </kendo-splitter-pane>\n    </kendo-splitter>\n</div>",
                        styles: [".button-group{width:100%;height:50px;display:table-cell}.button-group button{width:25px;height:25px;vertical-align:middle;position:absolute;top:12.5px}.button-group button img{width:25px;height:25px;vertical-align:middle}.pic_list{border:1px solid #ddd;padding:0;list-style:none;width:200px;height:200px;text-align:center}.pic_list a div{display:table-cell;vertical-align:middle;text-align:center;width:120px;height:140px;margin:20px 40px 10px}.pic_list a div img{vertical-align:middle;text-align:center;max-width:120px;max-height:140px}.pic_list a p{width:170px;height:40px;font-size:14px;text-align:center;overflow:hidden;text-overflow:ellipsis;word-wrap:break-word;word-break:break-all;white-space:nowrap;margin:10px 15px 0}.upload_button{width:25px;height:25px;vertical-align:middle;position:absolute;top:12.5px}"]
                    }] }
        ];
        /** @nocollapse */
        FileListComponent.ctorParameters = function () {
            return [
                { type: FileListService },
                { type: uiMessager.MessagerService },
                { type: uiLoading.LoadingService },
                { type: i0.Injector }
            ];
        };
        FileListComponent.propDecorators = {
            formId: [{ type: i0.Input }],
            rootId: [{ type: i0.Input }],
            metadataIdList: [{ type: i0.Input }],
            index: [{ type: i0.Input }],
            metadataId: [{ type: i0.Input }],
            viewOptions: [{ type: i0.Input }],
            imageViewer: [{ type: i0.ViewChild, args: [ImageViewerComponent,] }],
            docViewer: [{ type: i0.ViewChild, args: [DocViewerComponent,] }],
            ofdViewer: [{ type: i0.ViewChild, args: [OfdViewerComponent,] }],
            pdfViewer: [{ type: i0.ViewChild, args: [PdfViewerComponent,] }],
            pptViewer: [{ type: i0.ViewChild, args: [PptViewerComponent,] }]
        };
        return FileListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PdfViewerModule = /** @class */ (function () {
        function PdfViewerModule() {
        }
        PdfViewerModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [PdfViewerComponent],
                        imports: [
                            common.CommonModule,
                        ],
                        exports: [PdfViewerComponent],
                        entryComponents: [PdfViewerComponent]
                    },] }
        ];
        return PdfViewerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PptViewerModule = /** @class */ (function () {
        function PptViewerModule() {
        }
        PptViewerModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [PptViewerComponent],
                        imports: [
                            common.CommonModule
                        ], exports: [PptViewerComponent],
                        entryComponents: [PptViewerComponent]
                    },] }
        ];
        return PptViewerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileListModule = /** @class */ (function () {
        function FileListModule() {
        }
        FileListModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [FileListComponent],
                        imports: [
                            common.CommonModule,
                            ImageViewerModule,
                            DocViewerModule,
                            OfdViewerModule,
                            kendoAngularLayout.LayoutModule,
                            kendoAngularButtons.ButtonsModule,
                            PdfViewerModule,
                            PptViewerModule
                        ],
                        exports: [FileListComponent],
                        entryComponents: [FileListComponent],
                        providers: [i1.HttpService, i1.SessionService, uiLoading.LoadingService, RotationDirective,
                            SearchService, SelectionService, ZoomService, ConfigService, DocViewerService,
                            FileListService, NavigateService, PagePreloadService, WindowService, cloudprint.CloudprintService,
                            cloudprint.ɵa, cloudprint.ɵb, cloudprint.ɵc, rtfCommon.AppService, kendoAngularDialog.WindowService, kendoAngularDialog.WindowContainerService]
                    },] }
        ];
        return FileListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PdfViewOptions = /** @class */ (function () {
        function PdfViewOptions() {
            this.showHeader = true;
            this.showPaging = true;
            this.showThumbnails = true;
            this.showDownload = true;
            this.showSearch = true;
            this.showZoom = true;
            this.showPrint = true;
            this.showSecondaryToolBar = true;
        }
        return PdfViewOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //import { UploadLimit } from './upload/entity/uploadlimit';
    var FileViewerService = /** @class */ (function () {
        function FileViewerService(modalService, componentFactoryResolver, injector, fileListService, msgService, cloudprintService, appService) {
            this.modalService = modalService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.injector = injector;
            this.fileListService = fileListService;
            this.msgService = msgService;
            this.cloudprintService = cloudprintService;
            this.appService = appService;
            this.windowWidth = window.innerWidth;
            this.windowHeigth = window.innerHeight;
        }
        //fileInfoList: UploadFileInfo[] = [];
        //fileInfoList: UploadFileInfo[] = [];
        /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFormFile =
            //fileInfoList: UploadFileInfo[] = [];
            /**
             * @param {?} formId
             * @param {?} rootId
             * @param {?=} viewOptions
             * @return {?}
             */
            function (formId, rootId, viewOptions) {
                var _this = this;
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    /** @type {?} */
                    var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
                    /** @type {?} */
                    var viewerRef = viewerFactory.create(_this.injector);
                    viewerRef.instance.rootId = rootId;
                    viewerRef.instance.formId = formId;
                    _this.dlg = _this.modalService.show(viewerRef, {
                        title: '',
                        width: document.scrollingElement.clientWidth - 20,
                        height: document.scrollingElement.clientWidth - 20,
                        showButtons: false,
                        showMaxButton: false,
                        resizable: false
                    });
                    _this.dlg.content.viewOptions = viewOptions;
                    // this.dlg.content.formId = formId;
                    // this.dlg.content.rootId = rootId;
                }));
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFileList = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?=} viewOptions
         * @return {?}
         */
            function (metadataIdList, rootId, viewOptions) {
                var _this = this;
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    /** @type {?} */
                    var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
                    /** @type {?} */
                    var viewerRef = viewerFactory.create(_this.injector);
                    viewerRef.instance.rootId = rootId;
                    viewerRef.instance.metadataIdList = metadataIdList;
                    _this.dlg = _this.modalService.show(viewerRef, {
                        title: '',
                        width: document.scrollingElement.clientWidth - 20,
                        height: document.scrollingElement.clientWidth - 20,
                        showButtons: false,
                        showMaxButton: false,
                        resizable: false,
                        opened: ( /**
                         * @return {?}
                         */function () {
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                            }), 500);
                        })
                    });
                    _this.dlg.content.viewOptions = viewOptions;
                    // this.dlg.content.metadataIdList = metadataIdList;
                    // this.dlg.content.rootId = rootId;
                }));
            };
        /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFormFileWithIndex = /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
            function (formId, rootId, metadataId, viewOptions) {
                var _this = this;
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    /** @type {?} */
                    var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
                    /** @type {?} */
                    var viewerRef = viewerFactory.create(_this.injector);
                    viewerRef.instance.rootId = rootId;
                    viewerRef.instance.formId = formId;
                    viewerRef.instance.metadataId = metadataId;
                    _this.dlg = _this.modalService.show(viewerRef, {
                        title: '',
                        width: document.scrollingElement.clientWidth - 20,
                        height: document.scrollingElement.clientWidth - 20,
                        showButtons: false,
                        showMaxButton: false,
                        resizable: false,
                        opened: ( /**
                         * @return {?}
                         */function () {
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                            }), 500);
                        })
                    });
                    _this.dlg.content.viewOptions = viewOptions;
                    // this.dlg.content.formId = formId;
                    // this.dlg.content.rootId = rootId;
                }));
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFileListWithIndex = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
            function (metadataIdList, rootId, metadataId, viewOptions) {
                var _this = this;
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    /** @type {?} */
                    var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileListComponent);
                    /** @type {?} */
                    var viewerRef = viewerFactory.create(_this.injector);
                    viewerRef.instance.rootId = rootId;
                    viewerRef.instance.metadataIdList = metadataIdList;
                    viewerRef.instance.metadataId = metadataId;
                    _this.dlg = _this.modalService.show(viewerRef, {
                        title: '',
                        width: document.scrollingElement.clientWidth - 20,
                        height: document.scrollingElement.clientWidth - 20,
                        showButtons: false,
                        showMaxButton: false,
                        resizable: false,
                        opened: ( /**
                         * @return {?}
                         */function () {
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this.dlg.dialog.changeDetectorRef['_appRef'].tick();
                            }), 500);
                        })
                    });
                    _this.dlg.content.viewOptions = viewOptions;
                    // this.dlg.content.metadataIdList = metadataIdList;
                    // this.dlg.content.rootId = rootId;
                }));
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
        FileViewerService.prototype.mergeAndViewPdfFiles = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @return {?}
         */
            function (metadataIdList, rootId) {
                var _this = this;
                this.fileListService.getMergedFile(metadataIdList, rootId).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    if (res.error != null) {
                        _this.msgService.error(res.error.Message);
                    }
                    else {
                        /** @type {?} */
                        var options = {
                            OutputType: cloudprint.OutputType.PRINT,
                            FileType: cloudprint.FileType.Pdf,
                            Path: '',
                            DeviceId: '',
                            printType: cloudprint.PrintType.Form
                        };
                        _this.cloudprintService.openRendedViewer4Attachment("tab", res, options);
                    }
                }));
            };
        /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFormFileInpage = /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?=} viewOptions
         * @return {?}
         */
            function (formId, rootId, viewOptions) {
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                this.viewerFormFileWithIndexInPage(formId, rootId, null, viewOptions);
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFileListInPage = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?=} viewOptions
         * @return {?}
         */
            function (metadataIdList, rootId, viewOptions) {
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                this.viewerFileListWithIndexInPage(metadataIdList, rootId, null, viewOptions);
            };
        /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFormFileWithIndexInPage = /**
         * @param {?} formId
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
            function (formId, rootId, metadataId, viewOptions) {
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                this.appService.openAppByOptions({
                    appType: 'app',
                    funcId: '',
                    tabName: '文档在线预览',
                    appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
                    appEntrance: 'docviewertab',
                    tabId: angular2Uuid.UUID.UUID(),
                    entityParams: {
                        formId: formId,
                        rootId: rootId,
                        metadataId: metadataId,
                        viewOptions: viewOptions
                    },
                });
            };
        /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
        FileViewerService.prototype.viewerFileListWithIndexInPage = /**
         * @param {?} metadataIdList
         * @param {?} rootId
         * @param {?} metadataId
         * @param {?=} viewOptions
         * @return {?}
         */
            function (metadataIdList, rootId, metadataId, viewOptions) {
                if (viewOptions === void 0) {
                    viewOptions = new PdfViewOptions;
                }
                this.appService.openAppByOptions({
                    appType: 'app',
                    funcId: '',
                    tabName: '文档在线预览',
                    appId: '6ccb476b-f2ba-df8f-6f47-d37d100c56e2',
                    appEntrance: 'docviewertab',
                    tabId: angular2Uuid.UUID.UUID(),
                    entityParams: {
                        metadataIdList: metadataIdList,
                        rootId: rootId,
                        metadataId: metadataId,
                        viewOptions: viewOptions
                    },
                });
            };
        FileViewerService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FileViewerService.ctorParameters = function () {
            return [
                { type: uiModal.BsModalService },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector },
                { type: FileListService },
                { type: uiMessager.MessagerService },
                { type: cloudprint.CloudprintService },
                { type: rtfCommon.AppService }
            ];
        };
        return FileViewerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UnifileInfo = /** @class */ (function () {
        function UnifileInfo() {
        }
        return UnifileInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UrlFileInfo = /** @class */ (function () {
        function UrlFileInfo() {
        }
        return UrlFileInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CostomFileInfo = /** @class */ (function () {
        function CostomFileInfo() {
        }
        return CostomFileInfo;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspViewerComponent = /** @class */ (function () {
        function GspViewerComponent(listService, msgService, loadService) {
            this.listService = listService;
            this.msgService = msgService;
            this.loadService = loadService;
            this.viewOptions = new PdfViewOptions;
            this.isImage = true;
            this.isOfd = true;
            this.isPdf = true;
            //srcList: string[] = [];
            this.isDocShow = false;
            this.isOfdShow = false;
            this.isPdfShow = false;
        }
        /**
         * @return {?}
         */
        GspViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.viewFile(this.filePath, this.metadataId, this.rootId, this.fileType, this.fileName, this.serviceUnit, this.params);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        GspViewerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.viewFile(this.filePath, this.metadataId, this.rootId, this.fileType, this.fileName, this.serviceUnit, this.params);
            };
        /**
         * @param {?} filePath
         * @param {?} metadataId
         * @param {?} rootId
         * @param {?} fileType
         * @param {?} fileName
         * @param {?} suName
         * @param {?} params
         * @return {?}
         */
        GspViewerComponent.prototype.viewFile = /**
         * @param {?} filePath
         * @param {?} metadataId
         * @param {?} rootId
         * @param {?} fileType
         * @param {?} fileName
         * @param {?} suName
         * @param {?} params
         * @return {?}
         */
            function (filePath, metadataId, rootId, fileType, fileName, suName, params) {
                var _this = this;
                if (fileType == StorageType.UniFile) {
                    /** @type {?} */
                    var info = new UnifileInfo;
                    info.metadataId = metadataId;
                    info.rootId = rootId;
                    filePath = JSON.stringify(info);
                }
                if (fileType == StorageType.Url) {
                    /** @type {?} */
                    var info = new UrlFileInfo;
                    info.fileUrl = filePath;
                    info.fileName = fileName;
                    filePath = JSON.stringify(info);
                }
                if (fileType == StorageType.Customer) {
                    /** @type {?} */
                    var info = new CostomFileInfo;
                    info.suName = suName;
                    info.param = params;
                    filePath = JSON.stringify(info);
                }
                /** @type {?} */
                var loading = this.loadService.show({
                    message: '拼命的请求中'
                });
                this.listService.getViewFile(filePath, fileType).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    loading.close();
                    if (res.error != null) {
                        _this.msgService.warning('获取预览文件失败' + res.error.Message);
                    }
                    else {
                        _this.file = res;
                        _this.fileChange();
                    }
                }));
            };
        /**
         * @return {?}
         */
        GspViewerComponent.prototype.fileChange = /**
         * @return {?}
         */
            function () {
                //this.file=src;
                this.isImage = this.file.fileType == GspFileViewType.Image || this.file.fileType == 'Image';
                this.isOfd = this.file.fileType == GspFileViewType.Ofd || this.file.fileType == 'Ofd';
                this.isPdf = this.file.fileType == GspFileViewType.Pdf || this.file.fileType == 'Pdf';
                if (this.isImage) {
                    this.isDocShow = false;
                    this.isOfdShow = false; //this.imageChange(this.file.fileUrl);
                    return;
                }
                else if (this.isOfd) {
                    //this.file.fileUrl="/platform/runtime/dfs/images/file.jpg";
                    if (this.isOfdShow)
                        this.ofdChange(this.file.filePath);
                    else {
                        this.isDocShow = false;
                        this.isOfdShow = true;
                        this.isPdfShow = false;
                    }
                }
                else if (this.isPdf) {
                    if (this.isPdfShow)
                        this.pdfChange(this.file.filePath);
                    else {
                        this.isDocShow = false;
                        this.isOfdShow = false;
                        this.isPdfShow = true;
                    }
                }
                else {
                    if (this.isDocShow)
                        this.docChange(this.file.filePath);
                    else {
                        this.isDocShow = true;
                        this.isOfdShow = false;
                        this.isPdfShow = false;
                    }
                }
            };
        /**
         * @param {?} url
         * @return {?}
         */
        GspViewerComponent.prototype.imageChange = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                this.imageUrl = url;
                this.imageViewer.imageChange(url);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        GspViewerComponent.prototype.docChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                this.docPath = filePath;
                this.docViewer.docChange(filePath);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        GspViewerComponent.prototype.pdfChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                //this.docPath = filePath;
                this.pdfViewer.pdfChange(filePath);
            };
        /**
         * @param {?} filePath
         * @return {?}
         */
        GspViewerComponent.prototype.ofdChange = /**
         * @param {?} filePath
         * @return {?}
         */
            function (filePath) {
                this.ofdViewer.fileChange(filePath);
            };
        GspViewerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gsp-viewer',
                        template: "<div class=\"f-page\">\n    <div *ngIf='isImage&&!isOfd&&!isPdf'>\n        <app-image-viewer [imageUrl]=\"file.fileUrl\"></app-image-viewer>\n    </div>\n    <div *ngIf='!isImage&&!isOfd&&!isPdf'>\n        <app-doc-viewer [filePath]=\"file.filePath\"></app-doc-viewer>\n    </div>\n    <div *ngIf='!isImage&&isOfd&&!isPdf'>\n        <app-ofd-viewer [filePath]=\"file.filePath\"></app-ofd-viewer>\n    </div>\n    <div *ngIf='!isImage&&!isOfd&&isPdf' class=\"f-utils-fill\" style=\"height: 100%\">\n        <app-pdf-viewer [pdfUrl]=\"file.filePath\" [viewOptions]=\"viewOptions\"></app-pdf-viewer>\n    </div>\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        GspViewerComponent.ctorParameters = function () {
            return [
                { type: FileListService },
                { type: uiMessager.MessagerService },
                { type: uiLoading.LoadingService }
            ];
        };
        GspViewerComponent.propDecorators = {
            filePath: [{ type: i0.Input }],
            metadataId: [{ type: i0.Input }],
            rootId: [{ type: i0.Input }],
            fileName: [{ type: i0.Input }],
            fileType: [{ type: i0.Input }],
            viewOptions: [{ type: i0.Input }],
            serviceUnit: [{ type: i0.Input }],
            params: [{ type: i0.Input }],
            imageViewer: [{ type: i0.ViewChild, args: [ImageViewerComponent,] }],
            docViewer: [{ type: i0.ViewChild, args: [DocViewerComponent,] }],
            ofdViewer: [{ type: i0.ViewChild, args: [OfdViewerComponent,] }],
            pdfViewer: [{ type: i0.ViewChild, args: [PdfViewerComponent,] }]
        };
        return GspViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspViewerModule = /** @class */ (function () {
        function GspViewerModule() {
        }
        GspViewerModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [GspViewerComponent],
                        imports: [
                            common.CommonModule,
                            ImageViewerModule,
                            DocViewerModule,
                            OfdViewerModule,
                            PdfViewerModule,
                            uiNotify.NotifyModule.forRoot()
                        ],
                        exports: [GspViewerComponent],
                        entryComponents: [GspViewerComponent],
                        providers: [RotationDirective, SearchService, SelectionService, ZoomService, ConfigService, DocViewerService,
                            FileListService, NavigateService, PagePreloadService, WindowService]
                    },] }
        ];
        return GspViewerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ɵg = DocViewerModule;
    exports.ɵc = DocViewerComponent;
    exports.ɵh = GspDocumentModule;
    exports.ɵi = GspDocumentComponent;
    exports.ɵk = GspPageComponent;
    exports.ɵp = SanitizeHtmlPipe;
    exports.ɵq = SanitizeResourceHtmlPipe;
    exports.ɵr = SanitizeStylePipe;
    exports.ɵo = RotationDirective;
    exports.ɵn = SearchService;
    exports.ɵm = SearchableDirective;
    exports.ɵs = SelectionService;
    exports.ɵl = ZoomDirective;
    exports.ɵj = ZoomService;
    exports.ɵf = ImageViewerModule;
    exports.ɵb = ImageViewerComponent;
    exports.ɵt = OfdViewerModule;
    exports.ɵe = OfdViewerComponent;
    exports.ɵz = ConfigService;
    exports.ɵd = DocViewerService;
    exports.ɵa = FileListService;
    exports.ɵv = NavigateService;
    exports.ɵu = PagePreloadService;
    exports.ɵy = WindowService;
    exports.FileListModule = FileListModule;
    exports.FileListComponent = FileListComponent;
    exports.FileViewerService = FileViewerService;
    exports.PdfViewOptions = PdfViewOptions;
    exports.GspViewerModule = GspViewerModule;
    exports.GspViewerComponent = GspViewerComponent;
    exports.ScrollableDirective = ScrollableDirective;
    exports.ɵw = ExcelDocumentComponent;
    exports.ɵx = ExcelPageComponent;
    exports.ɵbf = GspTopToolbarComponent;
    exports.ɵbe = GspTopToolbarModule;
    exports.ɵbg = PdfViewerModule;
    exports.ɵbb = PdfViewerComponent;
    exports.ɵbh = PptViewerModule;
    exports.ɵbc = PptViewerComponent;
    exports.ɵba = ExcelPageService;
    exports.ɵbd = ViewportService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-svc-file-viewer.umd.js.map