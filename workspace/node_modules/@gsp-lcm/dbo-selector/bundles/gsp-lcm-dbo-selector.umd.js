(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@progress/kendo-angular-grid'), require('@angular/forms'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@gsp-lcm/dbo-selector', ['exports', '@angular/core', '@angular/common', '@progress/kendo-angular-grid', '@angular/forms', '@angular/common/http'], factory) :
    (factory((global['gsp-lcm'] = global['gsp-lcm'] || {}, global['gsp-lcm']['dbo-selector'] = {}),global.ng.core,global.ng.common,global.kendoAngularGrid,global.ng.forms,global.ng.common.http));
}(this, (function (exports,core,common,kendoAngularGrid,forms,http) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DboHelpDevService = /** @class */ (function () {
        function DboHelpDevService(rest) {
            this.rest = rest;
            this.databaseurlDev = '/api/dev/main/v1.0/database-objects';
        }
        /**
         * 数据库对象选择帮助界面（设计时）
         */
        /**
         * 数据库对象选择帮助界面（设计时）
         * @param {?} relativePath
         * @return {?}
         */
        DboHelpDevService.prototype.getAllDatabaseObject = /**
         * 数据库对象选择帮助界面（设计时）
         * @param {?} relativePath
         * @return {?}
         */
            function (relativePath) {
                /** @type {?} */
                var url = this.databaseurlDev + '?relativePath=' + relativePath;
                return this.rest.get(url).pipe();
            };
        /**
         * 数据库对象详细信息选择帮助界面
         */
        /**
         * 数据库对象详细信息选择帮助界面
         * @param {?} relativePath
         * @param {?} databaseobjectid
         * @return {?}
         */
        DboHelpDevService.prototype.getCurrentDatabaseObject = /**
         * 数据库对象详细信息选择帮助界面
         * @param {?} relativePath
         * @param {?} databaseobjectid
         * @return {?}
         */
            function (relativePath, databaseobjectid) {
                /** @type {?} */
                var url = this.databaseurlDev + '/single?relativePath=' + relativePath
                    + '&databaseobjectid=' + databaseobjectid;
                return this.rest.get(url).pipe();
            };
        DboHelpDevService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DboHelpDevService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return DboHelpDevService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DboSelectComponent = /** @class */ (function () {
        function DboSelectComponent(dboHelpService) {
            this.dboHelpService = dboHelpService;
            this.url = '';
            /**
             * 帮助标题
             */
            this.title = '帮助';
            /**
             * 输出事件
             */
            this.selectedAfterOk = new core.EventEmitter();
            this.modalClosed = new core.EventEmitter();
            // 模式
            this.selectableSettings = {
                checkboxOnly: true,
                mode: 'single',
                enabled: true
            };
        }
        /**输入属性变化后 */
        /**
         * 输入属性变化后
         * @param {?} changes
         * @return {?}
         */
        DboSelectComponent.prototype.ngOnChanges = /**
         * 输入属性变化后
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        DboSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // 服务端获取数据
                this.dboHelpService.getAllDatabaseObject(this.url)
                    .subscribe(( /**
             * @param {?} result
             * @return {?}
             */function (result) {
                    _this.data = result;
                    _this.curSelectedKeys = [];
                    if (_this.initSelectedKeys) {
                        _this.initSelectedKeys.map(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return _this.curSelectedKeys.push(item); }));
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.log('获取数据源失败！');
                    console.log(error);
                }));
            };
        /**帮助确定按钮 */
        /**
         * 帮助确定按钮
         * @return {?}
         */
        DboSelectComponent.prototype.btnOk = /**
         * 帮助确定按钮
         * @return {?}
         */
            function () {
                var _this = this;
                // 根据选中行获取实体数据
                /** @type {?} */
                var selectPosEntity = [];
                this.curSelectedKeys.forEach(( /**
                 * @param {?} dboID
                 * @return {?}
                 */function (dboID) {
                    /** @type {?} */
                    var selectDBO = _this.data.find(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item['id'] === dboID; }));
                    selectPosEntity.push(selectDBO);
                }));
                if (!selectPosEntity) {
                    alert('请选择数据库对象');
                    return;
                }
                else {
                    // 发射当前选中数据
                    this.selectedAfterOk.next(selectPosEntity);
                }
                this.hideModal();
            };
        /**
         * @return {?}
         */
        DboSelectComponent.prototype.hideModal = /**
         * @return {?}
         */
            function () {
                this.modalClosed.emit();
            };
        DboSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-dbo-select',
                        template: "<div class=\"modal-body\">\r\n<div class=\"templateBlock\">\r\n  <kendo-grid [class]=\"'flex-auto'\" [selectable]=\"selectableSettings\" [kendoGridSelectBy]=\"'id'\" [selectedKeys]=\"curSelectedKeys\"\r\n    [kendoGridBinding]=\"data\">\r\n    <kendo-grid-checkbox-column width=\"10%\"></kendo-grid-checkbox-column>\r\n    <kendo-grid-column field=\"code\" title=\"\u7F16\u53F7\" width=\"40%\"></kendo-grid-column>\r\n    <kendo-grid-column field=\"name\" title=\"\u540D\u79F0\" width=\"45%\"></kendo-grid-column>\r\n  </kendo-grid>\r\n  </div>\r\n</div>\r\n<ng-template #btns>\r\n<button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"btnOk()\">\u786E\u5B9A</button>\r\n<button type=\"button\" class=\"btn btn-default\" (click)=\"hideModal()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        DboSelectComponent.ctorParameters = function () {
            return [
                { type: DboHelpDevService }
            ];
        };
        DboSelectComponent.propDecorators = {
            url: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isShow: [{ type: core.Input }],
            initSelectedKeys: [{ type: core.Input }],
            selectedAfterOk: [{ type: core.Output }],
            modalClosed: [{ type: core.Output }],
            modalFooter: [{ type: core.ViewChild, args: ['modalFooter',] }],
            btns: [{ type: core.ViewChild, args: ['btns',] }]
        };
        return DboSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DboSelectModule = /** @class */ (function () {
        function DboSelectModule() {
        }
        DboSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            kendoAngularGrid.GridModule,
                            forms.FormsModule,
                            http.HttpClientModule
                        ],
                        providers: [DboHelpDevService],
                        declarations: [DboSelectComponent],
                        entryComponents: [DboSelectComponent],
                        exports: [DboSelectComponent]
                    },] }
        ];
        return DboSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.DboHelpDevService = DboHelpDevService;
    exports.DboSelectComponent = DboSelectComponent;
    exports.DboSelectModule = DboSelectModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-lcm-dbo-selector.umd.js.map