/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-object-rt.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs/observable/of';
import { HttpService } from '@ecp-caf/caf-common';
/** @type {?} */
var PROJECTS_DIRECTORY = '/api/dev/main/v1.0/business-object-trees';
/** @type {?} */
var url = '/api/runtime/sys/v1.0/business-objects/';
var BusinessObjectRtService = /** @class */ (function () {
    function BusinessObjectRtService(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    BusinessObjectRtService.prototype.getBusinessObjectTree = /**
     * @return {?}
     */
    function () {
        return this.http.get(PROJECTS_DIRECTORY).pipe();
    };
    /**
     * @param {?} boId
     * @return {?}
     */
    BusinessObjectRtService.prototype.getBusinessObject = /**
     * @param {?} boId
     * @return {?}
     */
    function (boId) {
        /** @type {?} */
        var getUrl = url + boId;
        return this.http.get(getUrl).pipe();
    };
    /**
     * @return {?}
     */
    BusinessObjectRtService.prototype.getBusinessObjects = /**
     * @return {?}
     */
    function () {
        return this.http.get(url).pipe();
    };
    /**
   * 保存
   */
    /**
     * 保存
     * @param {?} postData
     * @return {?}
     */
    BusinessObjectRtService.prototype.save = /**
     * 保存
     * @param {?} postData
     * @return {?}
     */
    function (postData) {
        return this.http.post(url, postData).pipe();
    };
    /**
     * @param {?} postData
     * @return {?}
     */
    BusinessObjectRtService.prototype.saveChanges = /**
     * @param {?} postData
     * @return {?}
     */
    function (postData) {
        return this.http.put(url, postData).pipe();
    };
    /**
       * 删除并重新加载
       */
    /**
     * 删除并重新加载
     * @param {?} dataId
     * @return {?}
     */
    BusinessObjectRtService.prototype.remove = /**
     * 删除并重新加载
     * @param {?} dataId
     * @return {?}
     */
    function (dataId) {
        /** @type {?} */
        var deleteUrl = url + dataId;
        return this.http.delete(deleteUrl, null).pipe();
    };
    /**
     * @param {?} boId
     * @return {?}
     */
    BusinessObjectRtService.prototype.getDevBasicBOInfo = /**
     * @param {?} boId
     * @return {?}
     */
    function (boId) {
        /** @type {?} */
        var devUrl = url + 'dev-basic-boinfos/';
        /** @type {?} */
        var getUrl = devUrl + boId;
        return this.http.get(getUrl).pipe();
    };
    /**
     * @param {?} parentId
     * @return {?}
     */
    BusinessObjectRtService.prototype.getBOListByParentId = /**
     * @param {?} parentId
     * @return {?}
     */
    function (parentId) {
        /** @type {?} */
        var getUrl = url + '?parentID=' + parentId;
        return this.http.get(getUrl).pipe();
    };
    /**
     * @private
     * @template T
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    BusinessObjectRtService.prototype.handleError = /**
     * @private
     * @template T
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    function (operation, result) {
        if (operation === void 0) { operation = 'operation'; }
        return (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.error(error); // log to console instead
            return of((/** @type {?} */ (result)));
        });
    };
    BusinessObjectRtService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BusinessObjectRtService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return BusinessObjectRtService;
}());
export { BusinessObjectRtService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BusinessObjectRtService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVzaW5lc3Mtb2JqZWN0LXJ0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWxjbS9iby1ydC1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL2J1c2luZXNzLW9iamVjdC1ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztJQUM1QyxrQkFBa0IsR0FBRywwQ0FBMEM7O0lBQy9ELEdBQUcsR0FBRSx5Q0FBeUM7QUFDcEQ7SUFHRSxpQ0FBb0IsSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtJQUNyQyxDQUFDOzs7O0lBRUQsdURBQXFCOzs7SUFBckI7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFRCxtREFBaUI7Ozs7SUFBakIsVUFBa0IsSUFBVzs7WUFDckIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7OztJQUVELG9EQUFrQjs7O0lBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUM7O0tBRUM7Ozs7OztJQUNILHNDQUFJOzs7OztJQUFKLFVBQUssUUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzs7OztJQUVELDZDQUFXOzs7O0lBQVgsVUFBWSxRQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQy9DLENBQUM7SUFDSDs7U0FFSzs7Ozs7O0lBQ0gsd0NBQU07Ozs7O0lBQU4sVUFBTyxNQUFjOztZQUNiLFNBQVMsR0FBRyxHQUFHLEdBQUcsTUFBTTtRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsRCxDQUFDOzs7OztJQUNELG1EQUFpQjs7OztJQUFqQixVQUFrQixJQUFXOztZQUNyQixNQUFNLEdBQUUsR0FBRyxHQUFDLG9CQUFvQjs7WUFDaEMsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJO1FBQzVCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Ozs7SUFFRCxxREFBbUI7Ozs7SUFBbkIsVUFBb0IsUUFBZTs7WUFDM0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxZQUFZLEdBQUMsUUFBUTtRQUMxQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RDLENBQUM7Ozs7Ozs7O0lBQ08sNkNBQVc7Ozs7Ozs7SUFBbkIsVUFBdUIsU0FBdUIsRUFBRSxNQUFVO1FBQW5DLDBCQUFBLEVBQUEsdUJBQXVCO1FBQzVDOzs7O1FBQU8sVUFBQyxLQUFVO1lBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7WUFDL0MsT0FBTyxFQUFFLENBQUMsbUJBQUEsTUFBTSxFQUFLLENBQUMsQ0FBQztRQUN6QixDQUFDLEVBQUM7SUFDSixDQUFDOztnQkFuREYsVUFBVTs7OztnQkFIRixXQUFXOztJQXVEcEIsOEJBQUM7Q0FBQSxBQXBERCxJQW9EQztTQW5EWSx1QkFBdUI7Ozs7OztJQUV0Qix1Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9vZic7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmNvbnN0IFBST0pFQ1RTX0RJUkVDVE9SWSA9ICcvYXBpL2Rldi9tYWluL3YxLjAvYnVzaW5lc3Mtb2JqZWN0LXRyZWVzJztcclxuY29uc3QgdXJsPSAnL2FwaS9ydW50aW1lL3N5cy92MS4wL2J1c2luZXNzLW9iamVjdHMvJztcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQnVzaW5lc3NPYmplY3RSdFNlcnZpY2Uge1xyXG4gIFxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UpIHtcclxuICB9XHJcblxyXG4gIGdldEJ1c2luZXNzT2JqZWN0VHJlZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoUFJPSkVDVFNfRElSRUNUT1JZKS5waXBlKCk7XHJcbiAgfVxyXG4gIFxyXG4gIGdldEJ1c2luZXNzT2JqZWN0KGJvSWQ6c3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGdldFVybCA9IHVybCArIGJvSWQ7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChnZXRVcmwpLnBpcGUoKTtcclxuICB9XHJcblxyXG4gIGdldEJ1c2luZXNzT2JqZWN0cygpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKCk7XHJcbiAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAqIOS/neWtmFxyXG4gICAqL1xyXG4gIHNhdmUocG9zdERhdGE6IGFueSk6IE9ic2VydmFibGU8YW55PiAge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgcG9zdERhdGEpLnBpcGUoKTtcclxuICB9XHJcblxyXG4gIHNhdmVDaGFuZ2VzKHBvc3REYXRhOiBhbnkpOk9ic2VydmFibGU8YW55PiAge1xyXG4gICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodXJsLCBwb3N0RGF0YSkucGlwZSgpXHJcbiAgfVxyXG4vKipcclxuICAgKiDliKDpmaTlubbph43mlrDliqDovb1cclxuICAgKi9cclxuICByZW1vdmUoZGF0YUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4gIHtcclxuICAgIGNvbnN0IGRlbGV0ZVVybCA9IHVybCArIGRhdGFJZDtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKGRlbGV0ZVVybCwgbnVsbCkucGlwZSgpO1xyXG4gIH1cclxuICBnZXREZXZCYXNpY0JPSW5mbyhib0lkOnN0cmluZyk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgY29uc3QgZGV2VXJsPSB1cmwrJ2Rldi1iYXNpYy1ib2luZm9zLyc7XHJcbiAgICBjb25zdCBnZXRVcmwgPSBkZXZVcmwgKyBib0lkO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoZ2V0VXJsKS5waXBlKCk7XHJcbiAgfVxyXG5cclxuICBnZXRCT0xpc3RCeVBhcmVudElkKHBhcmVudElkOnN0cmluZyk6T2JzZXJ2YWJsZTxhbnk+e1xyXG4gICAgY29uc3QgZ2V0VXJsID0gdXJsICsgJz9wYXJlbnRJRD0nK3BhcmVudElkO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoZ2V0VXJsKS5waXBlKCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgaGFuZGxlRXJyb3I8VD4ob3BlcmF0aW9uID0gJ29wZXJhdGlvbicsIHJlc3VsdD86IFQpIHtcclxuICAgIHJldHVybiAoZXJyb3I6IGFueSk6IE9ic2VydmFibGU8VD4gPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsgLy8gbG9nIHRvIGNvbnNvbGUgaW5zdGVhZFxyXG4gICAgICByZXR1cm4gb2YocmVzdWx0IGFzIFQpO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19