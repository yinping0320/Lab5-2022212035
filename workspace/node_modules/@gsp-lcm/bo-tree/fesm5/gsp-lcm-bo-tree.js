import { CommonModule } from '@angular/common';
import { Injectable, EventEmitter, Component, ViewChild, Output, Input, Directive, ViewContainerRef, NgModule } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { BusinessObjectRtService } from '@gsp-lcm/bo-rt-service';
import { TreeTableModule } from '@farris/ui-treetable';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/views/bo-tree-panel/bo-tree-panel.state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BOTreePanelState = /** @class */ (function () {
    function BOTreePanelState() {
        this.boTreeNodeActived = new EventEmitter();
        this.boTreeNodeDoubleClick = new EventEmitter();
        this.boTreeNodeAdding = new EventEmitter();
        this.boTreeNodeClick = new EventEmitter();
    }
    BOTreePanelState.decorators = [
        { type: Injectable }
    ];
    return BOTreePanelState;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/views/bo-tree-panel/bo-tree-panel.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 设置需要显示的值
/** @type {?} */
var CUSTOM_TEMPLATE_STRING = '{{ node.name }} ({{ node.subTitle }})';
var BOTreePanelComponent = /** @class */ (function () {
    // 注入文件树数据获取服务，以获取数据
    function BOTreePanelComponent(boRtService, boTreePanelState) {
        this.boRtService = boRtService;
        this.boTreePanelState = boTreePanelState;
        this.selectionChanged = new EventEmitter();
        this.cols = [
            { field: 'name', title: 'Name', width: 200 }
        ];
        this.customTemplateStringOptions = { treeNodeTemplate: CUSTOM_TEMPLATE_STRING };
        this.getInitBOTreeData();
    }
    /**
     * 获取根目录树
     */
    /**
     * 获取根目录树
     * @return {?}
     */
    BOTreePanelComponent.prototype.getInitBOTreeData = /**
     * 获取根目录树
     * @return {?}
     */
    function () {
        var _this = this;
        this.boRtService.getBusinessObjects().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res instanceof Array) {
                res.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.parentID === undefined || item.parentID === null || item.parentID === '') {
                        item.parentID = undefined;
                    }
                    if (item.sysInit === '1') {
                        item.isSysInit = true;
                    }
                    else {
                        item.isSysInit = false;
                    }
                }));
            }
            else {
                if (res.parentID === undefined || res.parentID === null || res.parentID === '') {
                    res.parentID = undefined;
                    if (res.sysInit === '1') {
                        res.isSysInit = true;
                    }
                    else {
                        res.isSysInit = false;
                    }
                }
            }
            _this.treeNodes = _this.makeTree(res);
        }));
    };
    /**
     * @param {?} id
     * @param {?=} detectChanges
     * @return {?}
     */
    BOTreePanelComponent.prototype.selectNode = /**
     * @param {?} id
     * @param {?=} detectChanges
     * @return {?}
     */
    function (id, detectChanges) {
        this.treetable.selectNode(id, detectChanges);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    BOTreePanelComponent.prototype.doubleClickEventHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.boTreePanelState.boTreeNodeDoubleClick.emit($event.node);
    };
    /**
     * @return {?}
     */
    BOTreePanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    BOTreePanelComponent.prototype.selectionChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selctedBO = $event.node.data;
        this.selectionChanged.emit($event.node);
    };
    /**
     * @return {?}
     */
    BOTreePanelComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.getInitBOTreeData();
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    BOTreePanelComponent.prototype.makeTree = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var r = data.filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.layer === 1; })).map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return {
                id: t.id,
                data: t,
                children: [],
                expanded: true
            };
        }));
        r.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.children = _this.makeTreeChildren(data, e.data);
        }));
        return r;
    };
    /**
     * @private
     * @param {?} data
     * @param {?} treeInfo
     * @return {?}
     */
    BOTreePanelComponent.prototype.makeTreeChildren = /**
     * @private
     * @param {?} data
     * @param {?} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        var _this = this;
        /** @type {?} */
        var pLayer = treeInfo.layer + 1;
        return data.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.layer === pLayer && c.parentID === treeInfo.id; })).map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return {
                data: d,
                children: _this.makeTreeChildren(data, d),
                expanded: false
            };
        }));
    };
    BOTreePanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-bo-tree-panel',
                    template: "\r\n<div  #test class=\"botreepanel farris-main-area flex-column\">\r\n  <farris-treetable #treetable class=\"farris-overflow-y-auto flex-fill\"\r\n    [data]=\"treeNodes\" \r\n    [columns]=\"cols\" \r\n    [fit] =\"true\" \r\n    [fixedHeader]=\"true\" \r\n    [idField]=\"'id'\" \r\n    [checkOnSelect]=\"true\"  \r\n    [showIcon]=\"showIcon\"\r\n    [showHeader]=\"false\" \r\n    (nodeSelected)=\"selectionChange($event)\">\r\n  </farris-treetable>\r\n</div>",
                    styles: [".botreepanel{overflow:hidden;cursor:pointer;-webkit-user-select:none;-ms-user-select:none;-moz-user-select:none;user-select:none;white-space:nowrap}"]
                }] }
    ];
    /** @nocollapse */
    BOTreePanelComponent.ctorParameters = function () { return [
        { type: BusinessObjectRtService },
        { type: BOTreePanelState }
    ]; };
    BOTreePanelComponent.propDecorators = {
        showIcon: [{ type: Input }],
        selectionChanged: [{ type: Output }],
        treetable: [{ type: ViewChild, args: ['treetable',] }]
    };
    return BOTreePanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/tree-node-content.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 定义辅助指令TreeNodeContent，用来在模板中标记插入点
var TreeNodeContentDirective = /** @class */ (function () {
    // 依赖注入ViewContainerRef，获取对容器视图的访问权限
    function TreeNodeContentDirective(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    TreeNodeContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[treeNodeContent-host]'
                },] }
    ];
    /** @nocollapse */
    TreeNodeContentDirective.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return TreeNodeContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bo-tree.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BOTreePanelPackageModule = /** @class */ (function () {
    function BOTreePanelPackageModule() {
    }
    BOTreePanelPackageModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TreeNodeContentDirective,
                        BOTreePanelComponent
                    ],
                    imports: [
                        CommonModule,
                        TreeTableModule
                    ],
                    exports: [BOTreePanelComponent],
                    providers: [BOTreePanelState, HttpService, BusinessObjectRtService],
                    entryComponents: [BOTreePanelComponent]
                },] }
    ];
    return BOTreePanelPackageModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-lcm-bo-tree.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BOTreePanelComponent, BOTreePanelPackageModule, TreeNodeContentDirective as ɵb, BOTreePanelState as ɵa };

//# sourceMappingURL=gsp-lcm-bo-tree.js.map