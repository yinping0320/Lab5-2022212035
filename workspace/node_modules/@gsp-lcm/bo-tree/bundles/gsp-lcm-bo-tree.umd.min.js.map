{"version":3,"sources":["ng://@gsp-lcm/bo-tree/lib/views/bo-tree-panel/bo-tree-panel.state.ts","ng://@gsp-lcm/bo-tree/lib/views/bo-tree-panel/bo-tree-panel.component.ts","ng://@gsp-lcm/bo-tree/lib/directives/tree-node-content.directive.ts","ng://@gsp-lcm/bo-tree/lib/bo-tree.module.ts"],"names":["BOTreePanelState","Injectable","this","boTreeNodeActived","EventEmitter","boTreeNodeDoubleClick","boTreeNodeAdding","boTreeNodeClick","BOTreePanelComponent","prototype","getInitBOTreeData","_this","boRtService","getBusinessObjects","subscribe","res","Array","forEach","item","parentID","undefined","sysInit","isSysInit","treeNodes","makeTree","selectNode","id","detectChanges","treetable","doubleClickEventHandler","$event","boTreePanelState","emit","node","ngOnInit","selectionChange","selctedBO","data","selectionChanged","refresh","r","filter","t","layer","map","children","expanded","e","makeTreeChildren","treeInfo","pLayer","c","d","Component","args","selector","template","BusinessObjectRtService","Input","Output","ViewChild","cols","field","title","width","customTemplateStringOptions","treeNodeTemplate","TreeNodeContentDirective","Directive","ViewContainerRef","viewContainerRef","BOTreePanelPackageModule","NgModule","declarations","imports","CommonModule","TreeTableModule","exports","providers","HttpService","entryComponents"],"mappings":"gkBAAA,IAAAA,uBAECC,EAAAA,aAMDD,GANA,SAAAA,IAEEE,KAAAC,kBAAoB,IAAIC,EAAAA,aACxBF,KAAAG,sBAAwB,IAAID,EAAAA,aAC5BF,KAAAI,iBAAmB,IAAIF,EAAAA,aACvBF,KAAAK,gBAAkB,IAAIH,EAAAA,iBCAxBI,GA0BEA,EAAAC,UAAAC,kBAAA,WAAA,IAAAC,EAAAT,KACEA,KAAKU,YAAYC,qBAAqBC,UAAS,SAAEC,GAC3CA,aAAeC,MACjBD,EAAIE,QAAO,SAAEC,GACPA,EAAKC,WAAWC,WAA+B,OAAlBF,EAAKC,UAAuC,KAAlBD,EAAKC,WAC9DD,EAAKC,SAAWC,WAEG,MAAjBF,EAAKG,QACPH,EAAKI,WAAY,EAEjBJ,EAAKI,WAAY,IAIjBP,EAAII,WAAWC,WAA8B,OAAjBL,EAAII,UAAsC,KAAjBJ,EAAII,WAC3DJ,EAAII,SAAWC,UACK,MAAhBL,EAAIM,QACNN,EAAIO,WAAY,EAEhBP,EAAIO,WAAY,GAItBX,EAAKY,UAAWZ,EAAKa,SAAST,MAIlCP,EAAAC,UAAAgB,WAAA,SAAWC,EAAYC,GACrBzB,KAAK0B,UAAUH,WAAWC,EAAGC,IAK/BnB,EAAAC,UAAAoB,wBAAA,SAAwBC,GAClB5B,KAAK6B,iBAAiB1B,sBAAsB2B,KAAKF,EAAOG,OAI9DzB,EAAAC,UAAAyB,SAAA,aAEA1B,EAAAC,UAAA0B,gBAAA,SAAgBL,GACd5B,KAAKkC,UAAYN,EAAOG,KAAKI,KAC7BnC,KAAKoC,iBAAiBN,KAAKF,EAAOG,OAGpCzB,EAAAC,UAAA8B,QAAA,WACErC,KAAKQ,qBAECF,EAAAC,UAAAe,SAAR,SAAiBa,GAAjB,IAAA1B,EAAAT,KACQsC,EAAIH,EAAKI,OAAM,SAACC,GAAK,OAAY,IAAZA,EAAEC,QAAaC,IAAG,SAACF,GAC1C,MAAO,CACHhB,GAAGgB,EAAEhB,GACLW,KAAMK,EACNG,SAAU,GACVC,UAAU,KAQlB,OAJAN,EAAEvB,QAAO,SAAC8B,GACNA,EAAEF,SAAWlC,EAAKqC,iBAAiBX,EAAMU,EAAEV,QAGxCG,GAEDhC,EAAAC,UAAAuC,iBAAR,SAAyBX,EAAMY,GAA/B,IAAAtC,EAAAT,KACQgD,EAASD,EAASN,MAAQ,EAEhC,OAAON,EAAKI,OAAM,SAAEU,GAAK,OAAAA,EAAER,QAAUO,GAAUC,EAAEhC,WAAW8B,EAASvB,KAAIkB,IAAG,SAAEQ,GAC5E,MAAO,CACHf,KAAMe,EACNP,SAAUlC,EAAKqC,iBAAiBX,EAAMe,GACtCN,UAAU,0BAjGnBO,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,oBACVC,SAAA,4oBAPOC,EAAAA,+BADAzD,uCAaN0D,EAAAA,gCACAC,EAAAA,0BACAC,EAAAA,UAASN,KAAA,CAAC,gBA4Fb9C,GAlFE,SAAAA,EAAmBI,EAA8CmB,GAA9C7B,KAAAU,YAAAA,EAA8CV,KAAA6B,iBAAAA,EAXvD7B,KAAAoC,iBAAmB,IAAIlC,EAAAA,aAEjCF,KAAA2D,KAAO,CACL,CAAEC,MAAO,OAAQC,MAAO,OAAQC,MAAO,MAKzC9D,KAAA+D,4BAA8B,CAAEC,iBAlBH,yCAsB3BhE,KAAKQ,oBCxBT,IAAAyD,uBAACC,EAAAA,UAASd,KAAA,CAAC,CACTC,SAAU,sEAJQc,EAAAA,oBAapBF,GAHE,SAAAA,EAAmBG,GAAApE,KAAAoE,iBAAAA,ECVrB,IAAAC,uBASCC,EAAAA,SAAQlB,KAAA,CAAC,CACRmB,aAAc,CACZN,EACA3D,GAEFkE,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBAEFC,QAAS,CAACrE,GACVsE,UAAW,CAAC9E,EAAmB+E,EAAAA,YAAatB,EAAAA,yBAC5CuB,gBAAiB,CAACxE,OAGpB+D,GAdA,SAAAA","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class BOTreePanelState {\r\n  boTreeNodeActived = new EventEmitter<any>();\r\n  boTreeNodeDoubleClick = new EventEmitter<any>();\r\n  boTreeNodeAdding = new EventEmitter<any>();\r\n  boTreeNodeClick = new EventEmitter<any>();\r\n}\r\n","import { Component, OnInit, ViewChild, EventEmitter, Output, Input} from '@angular/core';\r\nimport { BOTreePanelState} from './bo-tree-panel.state';\r\nimport { BusinessObjectRtService } from '@gsp-lcm/bo-rt-service';\r\nimport { TreeTableComponent } from '@farris/ui-treetable'; \r\n// è®¾ç½®éè¦æ¾ç¤ºçå¼\r\nconst CUSTOM_TEMPLATE_STRING = '{{ node.name }} ({{ node.subTitle }})';\r\n\r\n@Component({\r\n  selector: 'app-bo-tree-panel',\r\n  templateUrl: './bo-tree-panel.component.html',\r\n  styleUrls: ['./bo-tree-panel.component.css'],\r\n})\r\n\r\nexport class BOTreePanelComponent implements OnInit {\r\n  @Input() showIcon : boolean;\r\n  @Output() selectionChanged = new EventEmitter<any>();\r\n  @ViewChild('treetable') treetable : TreeTableComponent;\r\n  cols = [\r\n    { field: 'name', title: 'Name', width: 200}\r\n  ];\r\n  // è·åæ°æ®\r\n  treeNodes: any[];\r\n  selctedBO: any;\r\n  customTemplateStringOptions = { treeNodeTemplate: CUSTOM_TEMPLATE_STRING };\r\n  \r\n  // æ³¨å¥æä»¶æ æ°æ®è·åæå¡ï¼ä»¥è·åæ°æ®\r\n  constructor(public boRtService: BusinessObjectRtService, private boTreePanelState: BOTreePanelState) {\r\n    this.getInitBOTreeData();\r\n  }\r\n\r\n  /**\r\n   * è·åæ ¹ç®å½æ \r\n   */\r\n  getInitBOTreeData() {\r\n    this.boRtService.getBusinessObjects().subscribe((res: any) => {\r\n      if (res instanceof Array) {\r\n        res.forEach((item) => {// kendoUi treeview parentId ä¸ºç¬¬ä¸çº§çæ¶å å¿é¡»undefinedï¼å¿é¡»åwebapiå¾å°å®ä½å¤§å°åä¸è´\r\n          if (item.parentID===undefined || item.parentID === null || item.parentID === '') {\r\n            item.parentID = undefined;\r\n          }\r\n          if (item.sysInit === '1') {\r\n            item.isSysInit = true;\r\n          } else {\r\n            item.isSysInit = false;\r\n          }\r\n        });\r\n      } else {\r\n        if (res.parentID===undefined || res.parentID === null || res.parentID === '') {\r\n          res.parentID = undefined;\r\n          if (res.sysInit === '1') {\r\n            res.isSysInit = true;\r\n          } else {\r\n            res.isSysInit = false;\r\n          }\r\n        }\r\n      }\r\n      this.treeNodes =this.makeTree(res);\r\n    });\r\n  }\r\n\r\n  selectNode(id: string, detectChanges?: boolean){\r\n    this.treetable.selectNode(id,detectChanges);\r\n  }\r\n  \r\n\r\n\r\n  doubleClickEventHandler($event) {\r\n        this.boTreePanelState.boTreeNodeDoubleClick.emit($event.node);\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n  }\r\n  selectionChange($event) {\r\n    this.selctedBO = $event.node.data;\r\n    this.selectionChanged.emit($event.node);\r\n  }\r\n\r\n  refresh() {\r\n    this.getInitBOTreeData();\r\n  }\r\n  private makeTree(data) {\r\n    const r = data.filter(t => t.layer === 1).map(t => {\r\n        return {\r\n            id:t.id,\r\n            data: t,\r\n            children: [],\r\n            expanded: true\r\n        };\r\n    });\r\n\r\n    r.forEach(e => {\r\n        e.children = this.makeTreeChildren(data, e.data);\r\n    });\r\n\r\n    return r;\r\n  }   \r\n  private makeTreeChildren(data, treeInfo) {\r\n    const pLayer = treeInfo.layer + 1;      \r\n\r\n    return data.filter( c => c.layer === pLayer && c.parentID===treeInfo.id).map( d => {\r\n      return {\r\n          data: d,\r\n          children: this.makeTreeChildren(data, d),\r\n          expanded: false\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n// å®ä¹è¾å©æä»¤TreeNodeContentï¼ç¨æ¥å¨æ¨¡æ¿ä¸­æ è®°æå¥ç¹\r\n@Directive({\r\n  selector: '[treeNodeContent-host]'\r\n})\r\n\r\nexport class TreeNodeContentDirective {\r\n\r\n  // ä¾èµæ³¨å¥ViewContainerRefï¼è·åå¯¹å®¹å¨è§å¾çè®¿é®æé\r\n  constructor(public viewContainerRef: ViewContainerRef) {\r\n\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeNodeContentDirective } from './directives/tree-node-content.directive';\r\nimport { BOTreePanelComponent } from './views/bo-tree-panel/bo-tree-panel.component';\r\nimport { BOTreePanelState} from './views/bo-tree-panel/bo-tree-panel.state';\r\nimport { HttpService } from '@ecp-caf/caf-common';\r\nimport { BusinessObjectRtService } from \"@gsp-lcm/bo-rt-service\";\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeNodeContentDirective,\r\n    BOTreePanelComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TreeTableModule\r\n  ],\r\n  exports: [BOTreePanelComponent],\r\n  providers: [BOTreePanelState,  HttpService, BusinessObjectRtService],\r\n  entryComponents: [BOTreePanelComponent]\r\n})\r\nexport class BOTreePanelPackageModule {\r\n}\r\n"]}