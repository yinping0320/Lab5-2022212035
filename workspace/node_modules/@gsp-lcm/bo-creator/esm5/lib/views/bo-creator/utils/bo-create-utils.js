/**
 * @fileoverview added by tsickle
 * Generated from: lib/views/bo-creator/utils/bo-create-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var BoCreatorUtils = /** @class */ (function () {
    function BoCreatorUtils() {
    }
    /**
     * @return {?}
     */
    BoCreatorUtils.prototype.newGuid = /**
     * @return {?}
     */
    function () {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    };
    /**
     * @return {?}
     */
    BoCreatorUtils.prototype.s4 = /**
     * @return {?}
     */
    function () {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    /**
     * @param {?} entities
     * @param {?} parentID
     * @return {?}
     */
    BoCreatorUtils.prototype.getMaxOrder = /**
     * @param {?} entities
     * @param {?} parentID
     * @return {?}
     */
    function (entities, parentID) {
        /** @type {?} */
        var maxNum = 0;
        /** @type {?} */
        var children = entities.filter((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) { return entity.parentID === parentID; }));
        if (children === undefined || children === null || children.length <= 0) {
            return maxNum;
        }
        else {
            children.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element.sortOrder > maxNum) {
                    maxNum = element.sortOrder;
                }
            }));
        }
        return maxNum;
    };
    BoCreatorUtils.decorators = [
        { type: Injectable }
    ];
    return BoCreatorUtils;
}());
export { BoCreatorUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm8tY3JlYXRlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1sY20vYm8tY3JlYXRvci8iLCJzb3VyY2VzIjpbImxpYi92aWV3cy9iby1jcmVhdG9yL3V0aWxzL2JvLWNyZWF0ZS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7SUFBQTtJQTBCQSxDQUFDOzs7O0lBdkJJLGdDQUFPOzs7SUFBUDtRQUNHLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25JLENBQUM7Ozs7SUFFRCwyQkFBRTs7O0lBQUY7UUFDSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7Ozs7OztJQUVELG9DQUFXOzs7OztJQUFYLFVBQVksUUFBYSxFQUFFLFFBQWdCOztZQUNuQyxNQUFNLEdBQUcsQ0FBQzs7WUFDUixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUE1QixDQUE0QixFQUFDO1FBQ3hFLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3JFLE9BQU8sTUFBTSxDQUFDO1NBQ2pCO2FBQU07WUFDSCxRQUFRLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsT0FBTztnQkFDcEIsSUFBSSxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sRUFBRTtvQkFDNUIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7aUJBQzlCO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7O2dCQXhCSixVQUFVOztJQTBCWCxxQkFBQztDQUFBLEFBMUJELElBMEJDO1NBekJZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCb0NyZWF0b3JVdGlsc3tcclxuXHJcbiAgICAgbmV3R3VpZCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuczQoKSArIHRoaXMuczQoKSArIFwiLVwiICsgdGhpcy5zNCgpICsgXCItXCIgKyB0aGlzLnM0KCkgKyBcIi1cIiArIHRoaXMuczQoKSArIFwiLVwiICsgdGhpcy5zNCgpICsgdGhpcy5zNCgpICsgdGhpcy5zNCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBzNCgpIHtcclxuICAgICAgICByZXR1cm4gKCgoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1heE9yZGVyKGVudGl0aWVzOiBhbnksIHBhcmVudElEOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBtYXhOdW0gPSAwO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gZW50aXRpZXMuZmlsdGVyKGVudGl0eSA9PiBlbnRpdHkucGFyZW50SUQgPT09IHBhcmVudElEKTtcclxuICAgICAgICBpZiAoY2hpbGRyZW4gPT09IHVuZGVmaW5lZCB8fCBjaGlsZHJlbiA9PT0gbnVsbCB8fCBjaGlsZHJlbi5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF4TnVtO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zb3J0T3JkZXIgPiBtYXhOdW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhOdW0gPSBlbGVtZW50LnNvcnRPcmRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXhOdW07XHJcbiAgICB9XHJcbiAgIFxyXG59Il19