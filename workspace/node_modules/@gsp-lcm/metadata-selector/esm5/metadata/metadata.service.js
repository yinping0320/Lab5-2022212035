/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { MetadataPackageDto } from './metadatapackagedto';
import { Inject } from '@angular/core';
import { Subject } from 'rxjs';
var GSPMetadataService = /** @class */ (function () {
    function GSPMetadataService(http, url) {
        this.http = http;
        this.url = url;
        this.METADATA_BASE_PATH = '/api/dev/main/v1.0/metadatas';
        this.GSP_PROJECT_BASE_PATH = '/api/dev/main/v1.0/gsp-projects';
        this.Project_Base_Path = '/api/dev/main/v1.0/project';
        this.DBO_BASE_PATH = '/api/dev/main/v1.0/database-objects'; // dbo相关
        // dbo相关
        this.METADATA_PROJECT_BASE_PATH = '/api/dev/main/v1.0/metadata-projects';
        this.METADATA_PACKAGE_BASE_PATH = '/api/dev/main/v1.0/metadata-packages';
        this.METADATA_CONFIG_BASE_PATH = '/api/dev/main/v1.0/metadata-configs';
        // private Metadata4RefDto_Base_Path = '/api/dev/main/v1.0/metadata4refdtos'; pickMetadataIndex，dotnet不需要
        // tslint:disable-next-line:variable-name
        this.DevBasinBOInfo_Base_Path = '/api/dev/main/v1.0/dev-basic-boinfos'; // 业务对象
        // 业务对象
        this.NUGET_BASE_PATH = '/api/dev/main/v1.0/nuget-packages';
        this.SETTING_BASE_PATH = '/api/dev/main/v1.0/ide/settings';
        this.MAVEN_JAVA_BASE_PATH = '/api/dev/main/v1.0/repo-packages';
        this.FS_JAVA_BASE_PATH = '/api/dev/main/v1.0/file-system';
        this.JAVA_CODE_GENERATOR = '/api/dev/main/v1.0/generator';
        this.JAVA_BUILD = '/api/dev/main/v1.0/repo-packages';
        this.METADATA_JAVA_BASE_PATH = '/api/dev/main/v1.0/mdservice';
        this.SERVER_IP = (url === null || url === undefined) ? '' : url;
        this.sessionId = gsp.cache.get('sessionId');
    }
    /**
     * 元数据设计时服务
     */
    // 打包（功能触发）
    /**
     * 元数据设计时服务
     * @return {?}
     */
    // 打包（功能触发）
    GSPMetadataService.prototype.Pack = /**
     * 元数据设计时服务
     * @return {?}
     */
    // 打包（功能触发）
    function () {
        if (this.selectType === 'folder' || this.selectType === 'project') {
            if (this.selectPath !== '' && this.selectPath !== undefined) {
                this.PackageBuild(this.selectPath.substring(1));
            }
        }
        else {
            alert('请选择合适的目录');
        }
    };
    // 打包（外部调用）
    // 打包（外部调用）
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.PackageBuild = 
    // 打包（外部调用）
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        var headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
        /** @type {?} */
        var packageDto = new MetadataPackageDto('', '', '', path);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH;
        return this.http.post(url, packageDto, {
            headers: headers,
            observe: 'response'
        });
    };
    // 递归查找是否存在工程文件
    // 递归查找是否存在工程文件
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.IsProjExistRecursively = 
    // 递归查找是否存在工程文件
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/validationrecursively?path=' + path;
        /** @type {?} */
        var metadata = new Subject();
        this.http.get(url).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            // if (result) {
            metadata.next(result);
            // }
        }));
        return metadata;
    };
    // 初始化元数据实体
    // 初始化元数据实体
    /**
     * @param {?} metadataDto
     * @return {?}
     */
    GSPMetadataService.prototype.InitializeMetadataEntity = 
    // 初始化元数据实体
    /**
     * @param {?} metadataDto
     * @return {?}
     */
    function (metadataDto) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/initialized?nameSpace=' + metadataDto.nameSpace + '&code=' + metadataDto.code + '&name=' + metadataDto.name + '&type=' + metadataDto.type + '&bizObjectID=' + metadataDto.bizobjectID + '&metadataPath=' + metadataDto.relativePath + '&extendProperty=' + metadataDto.extendProperty;
        return this.http.get(url, { headers: headers });
    };
    // 新建元数据
    // 新建元数据
    /**
     * @param {?} metadataDto
     * @return {?}
     */
    GSPMetadataService.prototype.CreateMetadata = 
    // 新建元数据
    /**
     * @param {?} metadataDto
     * @return {?}
     */
    function (metadataDto) {
        /** @type {?} */
        var content = {
            'ID': metadataDto.id,
            'NameSpace': metadataDto.nameSpace,
            'Code': metadataDto.code,
            'Name': metadataDto.name,
            'FileName': metadataDto.fileName,
            'RelativePath': metadataDto.relativePath,
            'Content': metadataDto.content,
            'Type': metadataDto.type,
            'BizobjectID': metadataDto.bizobjectID,
            'ExtendProperty': metadataDto.extendProperty
        };
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH;
        return this.http.post(url, content, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    // 删除元数据文件
    // 删除元数据文件
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.DeleteMetadata = 
    // 删除元数据文件
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectPath !== '' && this.selectPath !== undefined) {
            if (this.selectType === 'file') {
                this.DeleteMetadataOrDir(this.selectPath.substring(1)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    // 刷新节点
                    // this.treeModel.removeFileNode();
                    alert('删除成功！');
                    _this.selectPath = '';
                    _this.selectType = '';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    alert('删除失败！');
                }));
            }
            else {
                alert('请选择正确的文件进行删除！');
            }
        }
        else {
            alert('请选择正确的文件进行删除！');
        }
    };
    // 保存元数据
    // 保存元数据
    /**
     * @param {?} metadataDto
     * @param {?} sessionId
     * @return {?}
     */
    GSPMetadataService.prototype.SaveMetadata = 
    // 保存元数据
    /**
     * @param {?} metadataDto
     * @param {?} sessionId
     * @return {?}
     */
    function (metadataDto, sessionId) {
        /** @type {?} */
        var content = {
            'ID': metadataDto.id,
            'NameSpace': metadataDto.nameSpace,
            'Code': metadataDto.code,
            'Name': metadataDto.name,
            'FileName': metadataDto.fileName,
            'RelativePath': metadataDto.relativePath,
            'Content': metadataDto.content,
            'Type': metadataDto.type,
            'BizobjectID': metadataDto.bizobjectID,
            'ExtendProperty': metadataDto.extendProperty,
            'Extendable': metadataDto.extendable
        };
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH;
        return this.http.put(url, content, {
            headers: headers,
            observe: 'response'
        });
    };
    // Load元数据（外部调用）
    // Load元数据（外部调用）
    /**
     * @param {?} fullName
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.LoadMetadata = 
    // Load元数据（外部调用）
    /**
     * @param {?} fullName
     * @param {?} path
     * @return {?}
     */
    function (fullName, path) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var metadataFullPath = path.replace(/\\/g, '/') + '/' + fullName;
        /** @type {?} */
        var encMetadataFullPath = encodeURIComponent(metadataFullPath);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/load?metadataFullPath=' + encMetadataFullPath;
        return this.http.get(url, { headers: headers });
    };
    // Load bo内元数据（外部调用）
    // Load bo内元数据（外部调用）
    /**
     * @param {?} fullName
     * @param {?} path
     * @param {?} currentProjPath
     * @return {?}
     */
    GSPMetadataService.prototype.LoadMetadataInBo = 
    // Load bo内元数据（外部调用）
    /**
     * @param {?} fullName
     * @param {?} path
     * @param {?} currentProjPath
     * @return {?}
     */
    function (fullName, path, currentProjPath) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var metadataFullPath = path.replace(/\\/g, '/') + '/' + fullName;
        /** @type {?} */
        var encMetadataFullPath = encodeURIComponent(metadataFullPath);
        // tslint:disable-next-line: max-line-length
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/metadataInBo?metadataFullPath=' + encMetadataFullPath
            + '&currentProjPath=' + currentProjPath;
        return this.http.get(url, { headers: headers });
    };
    // 删除文件夹
    // 删除文件夹
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.DeleteFolder = 
    // 删除文件夹
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectPath !== '' && this.selectPath !== undefined) {
            if (this.selectType === 'folder') {
                this.DeleteMetadataOrDir(this.selectPath.substring(1)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    // 刷新节点
                    // this.treeModel.removeFolderNode();
                    alert('删除成功！');
                    _this.selectPath = '';
                    _this.selectType = '';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    alert('删除失败！');
                }));
            }
            else {
                alert('请选择正确的目录进行删除！');
            }
        }
        else {
            alert('请选择正确的目录进行删除！');
        }
    };
    // 删除工程
    // 删除工程
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.DeleteProj = 
    // 删除工程
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectPath !== '' && this.selectPath !== undefined) {
            if (this.selectType === 'project') {
                this.DeleteProject(this.selectPath.substring(1)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    // 刷新节点
                    // this.treeModel.removeProjectNode();
                    alert('删除成功！');
                    _this.selectPath = '';
                    _this.selectType = '';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    alert('删除失败！');
                }));
            }
            else {
                alert('请选择正确的工程节点进行删除！');
            }
        }
        else {
            alert('请选择正确的工程节点进行删除！');
        }
    };
    // 元数据或者文件夹的删除（外部调用）
    // 元数据或者文件夹的删除（外部调用）
    /**
     * @param {?} fullPath
     * @return {?}
     */
    GSPMetadataService.prototype.DeleteMetadataOrDir = 
    // 元数据或者文件夹的删除（外部调用）
    /**
     * @param {?} fullPath
     * @return {?}
     */
    function (fullPath) {
        /** @type {?} */
        var sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        var encFullPath = encodeURIComponent(fullPath.replace(/\\/g, '/'));
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/delete?fullPath=' + encFullPath;
        return this.http.delete(url, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    // 判断元数据是否被依赖
    // 判断元数据是否被依赖
    /**
     * @param {?} fullPath
     * @return {?}
     */
    GSPMetadataService.prototype.isMetadataRefed = 
    // 判断元数据是否被依赖
    /**
     * @param {?} fullPath
     * @return {?}
     */
    function (fullPath) {
        /** @type {?} */
        var sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        var encFullPath = encodeURIComponent(fullPath.replace(/\\/g, '/'));
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/isMetadataRefed?path=' + encFullPath;
        return this.http.get(url, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    // 删除工程
    // 删除工程
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.DeleteProject = 
    // 删除工程
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.Project_Base_Path + '/' + path.replace(/\\/g, '/');
        return this.http.delete(url, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.GetDevRootPath = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var options = {
            params: {},
            headers: headers,
            responseType: 'text'
        };
        /** @type {?} */
        var url = this.SERVER_IP + this.Project_Base_Path + '/rootpath';
        /** @type {?} */
        var metadata = new Subject();
        this.http.get(url, { responseType: 'text' }).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (result) {
                metadata.next(result);
            }
        }));
        return metadata;
    };
    /**
     * @param {?} fullName
     * @param {?} path
     * @param {?} sessionId
     * @return {?}
     */
    GSPMetadataService.prototype.LoadDBO = /**
     * @param {?} fullName
     * @param {?} path
     * @param {?} sessionId
     * @return {?}
     */
    function (fullName, path, sessionId) {
        /** @type {?} */
        var dboFullPath = path.replace(/\\/g, '/') + '/' + fullName;
        /** @type {?} */
        var url = this.SERVER_IP + this.DBO_BASE_PATH + '/' + dboFullPath;
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        return this.http.get(url, { headers: headers });
    };
    // 新建文件夹
    // 新建文件夹
    /**
     * @param {?} path
     * @param {?} name
     * @return {?}
     */
    GSPMetadataService.prototype.CreateDir = 
    // 新建文件夹
    /**
     * @param {?} path
     * @param {?} name
     * @return {?}
     */
    function (path, name) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.Project_Base_Path + '/folder' + path + '/' + name + '?quiet=true';
        return this.http.post(url, null, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    // 获取元数据工程信息
    // 获取元数据工程信息
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.GetProjectInfo = 
    // 获取元数据工程信息
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '?path=' + path;
        return this.http.get(url, { headers: headers });
    };
    // 获取工程信息
    // 获取工程信息
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.GetGspProjInfo = 
    // 获取工程信息
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.GSP_PROJECT_BASE_PATH + '?path=' + path;
        return this.http.get(url, { headers: headers });
    };
    // 获取工程路径
    // 获取工程路径
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.GetProjPath = 
    // 获取工程路径
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/path?path=' + path;
        return this.http.get(url, { responseType: 'text' });
    };
    // 获取当前工程下或者其他元数据包中依赖的元数据
    // 获取当前工程下或者其他元数据包中依赖的元数据
    /**
     * @param {?} path
     * @param {?} metadataid
     * @param {?} sessionId
     * @return {?}
     */
    GSPMetadataService.prototype.GetRefMetadata = 
    // 获取当前工程下或者其他元数据包中依赖的元数据
    /**
     * @param {?} path
     * @param {?} metadataid
     * @param {?} sessionId
     * @return {?}
     */
    function (path, metadataid, sessionId) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/relied?metadataPath=' + path + '&metadataID=' + metadataid;
        return this.http.get(url, { headers: headers });
    };
    // 获取当前工程下所有的元数据包
    // 获取当前工程下所有的元数据包
    /**
     * @param {?} spacePath
     * @param {?} typeName
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataList = 
    // 获取当前工程下所有的元数据包
    /**
     * @param {?} spacePath
     * @param {?} typeName
     * @return {?}
     */
    function (spacePath, typeName) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '?path=' + spacePath + '&metadataTypeList=' + typeName;
        return this.http.get(url, { headers: headers });
    };
    // 获取bo工程下所有的元数据列表
    // 获取bo工程下所有的元数据列表
    /**
     * @param {?} projPath
     * @param {?} typeName
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataListInBo = 
    // 获取bo工程下所有的元数据列表
    /**
     * @param {?} projPath
     * @param {?} typeName
     * @return {?}
     */
    function (projPath, typeName) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/metadataListInBo?path=' + projPath + '&metadataTypeList=' + typeName;
        return this.http.get(url, { headers: headers });
    };
    /**
     * @param {?} path
     * @param {?} typeCode
     * @param {?} filter
     * @param {?} postfix
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataByFilter = /**
     * @param {?} path
     * @param {?} typeCode
     * @param {?} filter
     * @param {?} postfix
     * @return {?}
     */
    function (path, typeCode, filter, postfix) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/filter?path=' + path +
            '&typeCode=' + typeCode + '&filter=' + filter + '&postfix=' + postfix;
        return this.http.get(url, { headers: headers });
    };
    // pickMetadataIndex(scope: number, currentProjPath: string, metadataIndexDto: any): Observable<any> {
    //   const sessionId = gsp.cache.get('sessionId');
    //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '/scope/' + scope + '?currentPath=' + currentProjPath;
    //   return this.http.post(url, metadataIndexDto, {
    //     headers
    //   });
    // }
    // pickMetadataIndex(scope: number, currentProjPath: string, metadataIndexDto: any): Observable<any> {
    //   const sessionId = gsp.cache.get('sessionId');
    //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '/scope/' + scope + '?currentPath=' + currentProjPath;
    //   return this.http.post(url, metadataIndexDto, {
    //     headers
    //   });
    // }
    /**
     * @param {?} scope
     * @param {?} currentProjPath
     * @param {?} metadataIndexDto
     * @return {?}
     */
    GSPMetadataService.prototype.pickMetadataIndex = 
    // pickMetadataIndex(scope: number, currentProjPath: string, metadataIndexDto: any): Observable<any> {
    //   const sessionId = gsp.cache.get('sessionId');
    //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '/scope/' + scope + '?currentPath=' + currentProjPath;
    //   return this.http.post(url, metadataIndexDto, {
    //     headers
    //   });
    // }
    /**
     * @param {?} scope
     * @param {?} currentProjPath
     * @param {?} metadataIndexDto
     * @return {?}
     */
    function (scope, currentProjPath, metadataIndexDto) {
        /** @type {?} */
        var sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        var headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/pickmd?scopeType=' + scope + '&currentPath=' + currentProjPath;
        return this.http.post(url, metadataIndexDto, {
            headers: headers
        });
    };
    // 获取元数据包中所包含的元数据信息
    // 获取元数据包中所包含的元数据信息
    /**
     * @param {?} packagePath
     * @param {?} packageName
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataPackageInfo = 
    // 获取元数据包中所包含的元数据信息
    /**
     * @param {?} packagePath
     * @param {?} packageName
     * @return {?}
     */
    function (packagePath, packageName) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var packageFullName = '';
        if (packagePath) {
            packageFullName = packagePath.replace(/\\/g, '/') + '/' + packageName;
        }
        else {
            packageFullName = packageName;
        }
        /** @type {?} */
        var encPackageFullName = encodeURIComponent(packageFullName);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH + '/packagePath?packagePath=' + encPackageFullName;
        return this.http.get(url, { headers: headers });
    };
    // 获取本地包
    // 获取本地包
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.GetLocalPackages = 
    // 获取本地包
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH + '/local?path=' + path;
        return this.http.get(url, { headers: headers });
    };
    /**
     * @param {?} scope
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @param {?=} currentProjPath
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataInfosByScope = /**
     * @param {?} scope
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @param {?=} currentProjPath
     * @return {?}
     */
    function (scope, metadataType, searchText, page, selectedPackageSource, currentProjPath) {
        if (metadataType === void 0) { metadataType = null; }
        if (searchText === void 0) { searchText = null; }
        if (page === void 0) { page = null; }
        if (selectedPackageSource === void 0) { selectedPackageSource = null; }
        if (currentProjPath === void 0) { currentProjPath = ''; }
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/scope/' + scope + '?path=' + currentProjPath;
        if (page) {
            url = url + '&page=true&pageIndex=' + page.pageIndex + '&pageSize=' + page.pageSize;
        }
        else {
            url = url + '&page=false';
        }
        if (metadataType) {
            url = url + '&metadataTypeList=' + metadataType;
        }
        if (searchText) {
            url = url + '&text=' + searchText;
        }
        if ((scope === 2 || scope === 3) && selectedPackageSource) {
            url = url + '&selectedPackageSource=' + selectedPackageSource;
        }
        return this.http.get(url, { headers: headers });
    };
    /**
     * @param {?} scope
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @param {?=} currentProjPath
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataInfosByScope4Java = /**
     * @param {?} scope
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @param {?=} currentProjPath
     * @return {?}
     */
    function (scope, metadataType, searchText, page, selectedPackageSource, currentProjPath) {
        if (metadataType === void 0) { metadataType = null; }
        if (searchText === void 0) { searchText = null; }
        if (page === void 0) { page = null; }
        if (selectedPackageSource === void 0) { selectedPackageSource = null; }
        if (currentProjPath === void 0) { currentProjPath = ''; }
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/mdlist?scopeType=' + scope + '&path=' + currentProjPath;
        if (page) {
            url = url + '&page=true&pageIndex=' + page.pageIndex + '&pageSize=' + page.pageSize;
        }
        else {
            url = url + '&page=false';
        }
        if (metadataType) {
            url = url + '&metadataTypeList=' + metadataType;
        }
        if (searchText) {
            url = url + '&text=' + searchText;
        }
        if ((scope === 2 || scope === 3) && selectedPackageSource) {
            url = url + '&selectedPackageSource=' + selectedPackageSource;
        }
        return this.http.get(url, { headers: headers });
    };
    // 获取元数据以及包的信息
    // GetMetadataFromPackage(packageName: string, packagePath: string, metadataID: string): Observable<any> {
    //   const headers = new HttpHeaders().set('SessionId', this.sessionId);
    //   let fullName = '';
    //   if (packageName.endsWith('mdpkg')) {
    //     fullName = packageName;
    //   } else {
    //     fullName = packageName + '.mdpkg';
    //   }
    //   let path = '';
    //   if (packagePath) {
    //     path = packagePath;
    //   }
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '?packageName=' + fullName +
    //     '&packagePath=' + path + '&metadataID=' + metadataID;
    //   return this.http.get(url, { headers });
    // }
    // 获取某个路径下的所有元数据包
    // 获取元数据以及包的信息
    // GetMetadataFromPackage(packageName: string, packagePath: string, metadataID: string): Observable<any> {
    //   const headers = new HttpHeaders().set('SessionId', this.sessionId);
    //   let fullName = '';
    //   if (packageName.endsWith('mdpkg')) {
    //     fullName = packageName;
    //   } else {
    //     fullName = packageName + '.mdpkg';
    //   }
    //   let path = '';
    //   if (packagePath) {
    //     path = packagePath;
    //   }
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '?packageName=' + fullName +
    //     '&packagePath=' + path + '&metadataID=' + metadataID;
    //   return this.http.get(url, { headers });
    // }
    // 获取某个路径下的所有元数据包
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataPackages = 
    // 获取元数据以及包的信息
    // GetMetadataFromPackage(packageName: string, packagePath: string, metadataID: string): Observable<any> {
    //   const headers = new HttpHeaders().set('SessionId', this.sessionId);
    //   let fullName = '';
    //   if (packageName.endsWith('mdpkg')) {
    //     fullName = packageName;
    //   } else {
    //     fullName = packageName + '.mdpkg';
    //   }
    //   let path = '';
    //   if (packagePath) {
    //     path = packagePath;
    //   }
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '?packageName=' + fullName +
    //     '&packagePath=' + path + '&metadataID=' + metadataID;
    //   return this.http.get(url, { headers });
    // }
    // 获取某个路径下的所有元数据包
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.Project_Base_Path + '/children/' + path;
        return this.http.get(url, { headers: headers });
    };
    // 获取元数据类型及后缀信息
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataTypeList = 
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_CONFIG_BASE_PATH;
        return this.http.get(url, { headers: headers });
    };
    // 获取后缀
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    GSPMetadataService.prototype.GetPostfix = 
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    function (metadataType) {
        this.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        function (typeList) {
            typeList.forEach((/**
             * @param {?} type
             * @return {?}
             */
            function (type) {
                if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                    return type.postfix;
                }
            }));
        }));
        return new Observable();
    };
    // 更新工程引用
    // 更新工程引用
    /**
     * @param {?} projectPath
     * @param {?} packageHeader
     * @return {?}
     */
    GSPMetadataService.prototype.UpdateMetadataProject = 
    // 更新工程引用
    /**
     * @param {?} projectPath
     * @param {?} packageHeader
     * @return {?}
     */
    function (projectPath, packageHeader) {
        /** @type {?} */
        var content = {
            ProjectPath: projectPath,
            DepPackageName: packageHeader.name,
            DepPackageVersion: packageHeader.version.versionString,
            DepPackageLocation: packageHeader.location
        };
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH;
        return this.http.put(url, content, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    // 根据业务对象ID获取app、su等信息
    // 根据业务对象ID获取app、su等信息
    /**
     * @param {?} businessObjectID
     * @param {?} sessionId
     * @return {?}
     */
    GSPMetadataService.prototype.GetDevBasicBOInfo = 
    // 根据业务对象ID获取app、su等信息
    /**
     * @param {?} businessObjectID
     * @param {?} sessionId
     * @return {?}
     */
    function (businessObjectID, sessionId) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.DevBasinBOInfo_Base_Path + '/' + businessObjectID;
        return this.http.get(url, { headers: headers });
    };
    /**
     * @param {?} path
     * @param {?} fileName
     * @return {?}
     */
    GSPMetadataService.prototype.ValidateRepeatName = /**
     * @param {?} path
     * @param {?} fileName
     * @return {?}
     */
    function (path, fileName) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/validation?path=' + path + '&fileName=' + fileName;
        /** @type {?} */
        var metadata = new Subject();
        this.http.get(url).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            // if (result) {
            metadata.next(result);
            // }
        }));
        return metadata;
    };
    /**
     * @param {?} path
     * @param {?} sessionId
     * @return {?}
     */
    GSPMetadataService.prototype.SetMetadataUri = /**
     * @param {?} path
     * @param {?} sessionId
     * @return {?}
     */
    function (path, sessionId) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_CONFIG_BASE_PATH + '?path=' + path;
        return this.http.put(url, null, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.getGspProjectType = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.GSP_PROJECT_BASE_PATH + '/type';
        return this.http.get(url, { headers: headers });
    };
    /**
     * @param {?} path
     * @param {?} codeLanguage
     * @return {?}
     */
    GSPMetadataService.prototype.updateGspProject = /**
     * @param {?} path
     * @param {?} codeLanguage
     * @return {?}
     */
    function (path, codeLanguage) {
        /** @type {?} */
        var sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.GSP_PROJECT_BASE_PATH + '?path=' + path + '&codeLanguage=' + codeLanguage;
        return this.http.put(url, null, {
            params: {},
            headers: headers,
            observe: 'response'
        });
    };
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.getNugetSourceList = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.NUGET_BASE_PATH + '/sources';
        return this.http.get(url, { headers: headers });
    };
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.getMavenSourceList = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.MAVEN_JAVA_BASE_PATH + '/repolist';
        return this.http.get(url, { headers: headers });
    };
    // 获取技术栈
    // tslint:disable-next-line:adjacent-overload-signatures
    // 获取技术栈
    // tslint:disable-next-line:adjacent-overload-signatures
    /**
     * @param {?} projPath
     * @return {?}
     */
    GSPMetadataService.prototype.getCodeLanguage = 
    // 获取技术栈
    // tslint:disable-next-line:adjacent-overload-signatures
    /**
     * @param {?} projPath
     * @return {?}
     */
    function (projPath) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/codelanguage?projPath=' + projPath;
        return this.http.get(url, { responseType: 'text' });
    };
    // 获取setting信息
    // 获取setting信息
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.getSettingInfo = 
    // 获取setting信息
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.SETTING_BASE_PATH;
        return this.http.get(url, { headers: headers });
    };
    // 是否开启maven
    // 是否开启maven
    /**
     * @return {?}
     */
    GSPMetadataService.prototype.getMavenSetting = 
    // 是否开启maven
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_BASE_PATH + '/mavensetting';
        return this.http.get(url);
    };
    // 获取bo路径
    // 获取bo路径
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.getBoPath = 
    // 获取bo路径
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/bopath?path=' + path;
        return this.http.get(url, { responseType: 'text' });
    };
    // 获取是否是maven引用
    // 获取是否是maven引用
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.getMavenStatus = 
    // 获取是否是maven引用
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/isMaven?path=' + path;
        return this.http.get(url);
    };
    // 获取是否是解析型工具
    // 获取是否是解析型工具
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.isInterpretation = 
    // 获取是否是解析型工具
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/isInterpretation?path=' + path;
        return this.http.get(url);
    };
    // 生成代码
    // 生成代码
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.generate = 
    // 生成代码
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.JAVA_CODE_GENERATOR + '?path=' + path;
        return this.http.post(url, null);
    };
    // 获取ProcessMode
    // 获取ProcessMode
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.getProcessMode = 
    // 获取ProcessMode
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/processMode?path=' + path;
        return this.http.get(url, { responseType: 'text' });
    };
    // 添加依赖并更新版本
    // 添加依赖并更新版本
    /**
     * @param {?} path
     * @param {?} metadataPackages
     * @param {?} isMaven
     * @return {?}
     */
    GSPMetadataService.prototype.addDependencyAndRestore = 
    // 添加依赖并更新版本
    /**
     * @param {?} path
     * @param {?} metadataPackages
     * @param {?} isMaven
     * @return {?}
     */
    function (path, metadataPackages, isMaven) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url;
        if (isMaven) {
            url = this.SERVER_IP + this.MAVEN_JAVA_BASE_PATH + '/adddepedency?path=' + path
                + '&metadataPackages=' + metadataPackages;
            return this.http.put(url, null, {
                params: {},
                headers: headers,
                observe: 'response'
            });
        }
        else {
            url = this.SERVER_IP + this.NUGET_BASE_PATH + '/adddepedency?projPath=' + path
                + '&metadataPackages=' + metadataPackages;
            return this.http.post(url, null, {
                params: {},
                headers: headers,
                observe: 'response'
            });
        }
    };
    // 在资源管理器中打开
    // 在资源管理器中打开
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.showInExplorer = 
    // 在资源管理器中打开
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.FS_JAVA_BASE_PATH + '?path=' + path;
        return this.http.get(url);
    };
    /**
     * @param {?} path
     * @param {?} metadataPackages
     * @return {?}
     */
    GSPMetadataService.prototype.restoreMavenPackage = /**
     * @param {?} path
     * @param {?} metadataPackages
     * @return {?}
     */
    function (path, metadataPackages) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.MAVEN_JAVA_BASE_PATH + '/adddepedency?path=' + path + '&metadataPackages=' + metadataPackages;
        return this.http.put(url, null, {
            headers: headers,
            observe: 'response'
        });
    };
    // 获取菜单
    // 获取菜单
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.getMenu = 
    // 获取菜单
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.SETTING_BASE_PATH + '/menu?path=' + path;
        return this.http.get(url);
    };
    /**
     * @param {?} projPath
     * @param {?=} fakeFlag
     * @return {?}
     */
    GSPMetadataService.prototype.mavenBuildAll = /**
     * @param {?} projPath
     * @param {?=} fakeFlag
     * @return {?}
     */
    function (projPath, fakeFlag) {
        if (fakeFlag === void 0) { fakeFlag = false; }
        if (fakeFlag) {
            return this.getMenu(projPath);
        }
        /** @type {?} */
        var url = this.JAVA_BUILD + '/compileAll?path=' + projPath;
        return this.http.post(url, null);
    };
    // 获取路径下的工程路径
    // 获取路径下的工程路径
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.getProjPathsInPath = 
    // 获取路径下的工程路径
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/projinpath?path=' + path;
        return this.http.get(url);
    };
    /**
     * @param {?} path
     * @param {?} mdpkgName
     * @return {?}
     */
    GSPMetadataService.prototype.getMdpkgNameExistInBo = /**
     * @param {?} path
     * @param {?} mdpkgName
     * @return {?}
     */
    function (path, mdpkgName) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/mdpkgNameExist?path=' + path + '&mdpkgName=' + mdpkgName;
        return this.http.get(url, { responseType: 'text' });
    };
    // 是否存在工程文件，废弃，使用getProjPath代替
    // 是否存在工程文件，废弃，使用getProjPath代替
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.IsProjExist = 
    // 是否存在工程文件，废弃，使用getProjPath代替
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/validation?path=' + path;
        /** @type {?} */
        var metadata = new Subject();
        this.http.get(url).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            metadata.next(result);
        }));
        return metadata;
    };
    // 获取Nuget包下所有的元数据包，nuget已废弃
    // 获取Nuget包下所有的元数据包，nuget已废弃
    /**
     * @param {?} path
     * @return {?}
     */
    GSPMetadataService.prototype.GetMetadataPackagesUnderNugetDir = 
    // 获取Nuget包下所有的元数据包，nuget已废弃
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        var url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH + '?path=' + path;
        return this.http.get(url, { headers: headers });
    };
    GSPMetadataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GSPMetadataService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String, decorators: [{ type: Inject, args: ['url',] }] }
    ]; };
    return GSPMetadataService;
}());
export { GSPMetadataService };
if (false) {
    /** @type {?} */
    GSPMetadataService.prototype.selectPath;
    /** @type {?} */
    GSPMetadataService.prototype.selectType;
    /** @type {?} */
    GSPMetadataService.prototype.sessionId;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.SERVER_IP;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.METADATA_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.GSP_PROJECT_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.Project_Base_Path;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.DBO_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.METADATA_PROJECT_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.METADATA_PACKAGE_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.METADATA_CONFIG_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.DevBasinBOInfo_Base_Path;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.NUGET_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.SETTING_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.MAVEN_JAVA_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.FS_JAVA_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.JAVA_CODE_GENERATOR;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.JAVA_BUILD;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.METADATA_JAVA_BASE_PATH;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataService.prototype.url;
}
//# sourceMappingURL=data:application/json;base64,