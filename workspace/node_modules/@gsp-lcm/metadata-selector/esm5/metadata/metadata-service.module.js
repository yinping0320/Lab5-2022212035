/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-service.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { GSPMetadataService } from './metadata.service';
import { HttpClient } from '@angular/common/http';
import { GSP } from '@farris/ide-devkit';
/**
 * @param {?} http
 * @param {?} url
 * @return {?}
 */
export function factory(http, url) {
    return new GSPMetadataService(http, url);
}
var GSPMetadataServiceModule = /** @class */ (function () {
    function GSPMetadataServiceModule() {
    }
    /**
     * @param {?} url
     * @return {?}
     */
    GSPMetadataServiceModule.forRoot = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return {
            ngModule: GSPMetadataServiceModule,
            providers: [
                { provide: 'url', useValue: url },
                { provide: GSPMetadataService, useFactory: factory, deps: [HttpClient, 'url'] }
            ]
        };
    };
    GSPMetadataServiceModule.decorators = [
        { type: NgModule, args: [{
                    exports: [],
                    providers: []
                },] }
    ];
    return GSPMetadataServiceModule;
}());
export { GSPMetadataServiceModule };
/** @type {?} */
var globalGsp = ((/** @type {?} */ (window.top))).gsp;
if (!((/** @type {?} */ (window))).gsp) {
    ((/** @type {?} */ (window))).gsp = /*(globalGsp && globalGsp.createChild()) ||*/ new GSP(globalGsp);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEtc2VydmljZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWxjbS9tZXRhZGF0YS1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbIm1ldGFkYXRhL21ldGFkYXRhLXNlcnZpY2UubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7O0FBRXpDLE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBZ0IsRUFBRSxHQUFXO0lBQ25ELE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVEO0lBQUE7SUFjQSxDQUFDOzs7OztJQVRRLGdDQUFPOzs7O0lBQWQsVUFBZSxHQUFXO1FBQ3hCLE9BQU87WUFDTCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBQztnQkFDL0IsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEVBQUM7YUFDOUU7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBYkYsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxFQUFFO29CQUNYLFNBQVMsRUFBRSxFQUFFO2lCQUNkOztJQVdELCtCQUFDO0NBQUEsQUFkRCxJQWNDO1NBVlksd0JBQXdCOztJQWdCL0IsU0FBUyxHQUFHLENBQUMsbUJBQUEsTUFBTSxDQUFDLEdBQUcsRUFBTyxDQUFDLENBQUMsR0FBRztBQUN6QyxJQUFJLENBQUMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRTtJQUN4QixDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsR0FBRyxHQUFHLDZDQUE2QyxDQUFDLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ3hGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR1NQTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9tZXRhZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgR1NQIH0gZnJvbSAnQGZhcnJpcy9pZGUtZGV2a2l0JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmYWN0b3J5KGh0dHA6IEh0dHBDbGllbnQsIHVybDogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIG5ldyBHU1BNZXRhZGF0YVNlcnZpY2UoaHR0cCwgdXJsKTtcclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBleHBvcnRzOiBbXSxcclxuICBwcm92aWRlcnM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHU1BNZXRhZGF0YVNlcnZpY2VNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KHVybDogc3RyaW5nKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogR1NQTWV0YWRhdGFTZXJ2aWNlTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7cHJvdmlkZTogJ3VybCcsIHVzZVZhbHVlOiB1cmx9LFxyXG4gICAgICAgIHtwcm92aWRlOiBHU1BNZXRhZGF0YVNlcnZpY2UsIHVzZUZhY3Rvcnk6IGZhY3RvcnksIGRlcHM6IFtIdHRwQ2xpZW50LCAndXJsJ119XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgdmFyIGdzcDogR1NQO1xyXG59XHJcblxyXG5jb25zdCBnbG9iYWxHc3AgPSAod2luZG93LnRvcCBhcyBhbnkpLmdzcDtcclxuaWYgKCEod2luZG93IGFzIGFueSkuZ3NwKSB7XHJcbiAgKHdpbmRvdyBhcyBhbnkpLmdzcCA9IC8qKGdsb2JhbEdzcCAmJiBnbG9iYWxHc3AuY3JlYXRlQ2hpbGQoKSkgfHwqLyBuZXcgR1NQKGdsb2JhbEdzcCk7XHJcbn1cclxuIl19