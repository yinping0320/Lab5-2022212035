/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/metadatalist/metadatalist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { MetadataService } from '../../metadata.service';
import { GSPMetadataService } from '../../../metadata.service';
import { distinctUntilChanged, debounceTime } from 'rxjs/operators';
import { Subject } from 'rxjs';
var TemplatemetadataComponent = /** @class */ (function () {
    function TemplatemetadataComponent(metadataService, gspMetaService) {
        var _this = this;
        this.metadataService = metadataService;
        this.gspMetaService = gspMetaService;
        this.subscriptions = [];
        this.dotnet = 'dotnet';
        this.java = 'java';
        this.technologyStack = new EventEmitter();
        this.loading = false;
        this.selectedMetadataChanged = new EventEmitter();
        this.allSource = { text: '全选', value: 'All' };
        this.selectedSource = this.allSource;
        this.sourceList = [this.allSource];
        this.popupSettings = { width: 'auto' };
        this.allowCustom = true;
        this.allType = { text: '全选', value: 'All' };
        this.selectedType = this.allType;
        this.typeList = [
            this.allType
        ];
        this.postfixSelected = '';
        this.initPageIndex = 0;
        this.initPageSize = 10;
        this.page = {
            pageIndex: this.initPageIndex,
            pageSize: this.initPageSize
        };
        this.typeListReadonly = false;
        this.hasNext = true;
        this.searchText = '';
        this.searchTextForDup = '';
        this.searchTextSub = new Subject();
        this.postfix = '';
        this.postfixFlag = true;
        this.scope = 0;
        this.conflictAvoidFlag = false;
        this.reload = true;
        this.mySelection = [];
        // tslint:disable-next-line:member-ordering
        this.state = {
            skip: 0,
            take: 9999,
            // Initial filter descriptor
            filter: {
                logic: 'and',
                filters: []
            }
        };
        // tslint:disable-next-line:member-ordering
        this.selectableSetting = { mode: 'single', checkboxOnly: false };
        this.rowSelected = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.mySelection.indexOf(e.index) >= 0; });
        this.classifier = { id: '' };
        this.searchTextSub.pipe(debounceTime(2048), distinctUntilChanged()).subscribe((/**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            _this.searchText = text.trim();
            // 搜索
            console.log('search for ' + _this.searchText);
            _this.getData();
        }));
        // this.unsubscribeAll();
        /** @type {?} */
        var subscription = this.metadataService.selectedChange.subscribe((/**
         * @param {?} classifier
         * @return {?}
         */
        function (classifier) {
            if (_this.classifier && classifier && _this.classifier.id === classifier.id) {
                return;
            }
            // 元数据类型
            if (_this.postfixFlag) {
                _this.gspMetaService.GetMetadataTypeList().subscribe((/**
                 * @param {?} typeList
                 * @return {?}
                 */
                function (typeList) {
                    /** @type {?} */
                    var count = 0;
                    typeList.forEach((/**
                     * @param {?} type
                     * @return {?}
                     */
                    function (type) {
                        _this.postfixFlag = false;
                        /** @type {?} */
                        var typeNameArray = _this.typeName.split(',');
                        typeNameArray.forEach((/**
                         * @param {?} typeName
                         * @return {?}
                         */
                        function (typeName) {
                            if (typeName.toLowerCase() === type.typeCode.toLowerCase()) {
                                _this.postfix = _this.postfix + type.postfix + ',';
                                _this.typeList.push({ text: type.typeName, value: type.postfix });
                                count++;
                            }
                        }));
                    }));
                    if (count === 1) {
                        _this.typeList.shift();
                        _this.selectedType = _this.typeList[0];
                        _this.typeListReadonly = true;
                    }
                    _this.postfixSelected = _this.postfix;
                    _this.scopeChanged(classifier);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    /** @type {?} */
                    var msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
                    gsp.ide.messager.error('Fetch Metadata Type error:' + msg);
                }));
            }
            else {
                _this.scopeChanged(classifier);
            }
            // 技术栈赋值
            _this.metadataService.getCodeLanguage().subscribe((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item) {
                    // 如果目前工程非单栈，则获取环境默认技术栈
                    if (item.indexOf(';') > -1) {
                        _this.gspMetaService.getSettingInfo().subscribe((/**
                         * @param {?} setting
                         * @return {?}
                         */
                        function (setting) {
                            if (setting && setting.technologyStack) {
                                _this.codelanguage = setting.technologyStack;
                                _this.technologyStack.emit(_this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    if (_this.codelanguage === 'dotnet' || _this.isMavenEnable === false) {
                                        _this.initNugetSourceList();
                                    }
                                    else {
                                        _this.initMavenSourceList();
                                    }
                                }
                            }
                            else if (_this.isMavenEnable === true) {
                                // 环境默认配置为空，则按照java技术栈处理
                                _this.codelanguage = 'java';
                                _this.technologyStack.emit(_this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    _this.initMavenSourceList();
                                }
                            }
                            else {
                                _this.codelanguage = 'dotnet';
                                _this.technologyStack.emit(_this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    _this.initNugetSourceList();
                                }
                            }
                        }));
                    }
                    else {
                        _this.codelanguage = item;
                        _this.technologyStack.emit(_this.codelanguage);
                        if (classifier.id === 'ref' || classifier.id === 'remote') {
                            if (_this.codelanguage === 'dotnet' || _this.isMavenEnable === false) {
                                _this.initNugetSourceList();
                            }
                            else {
                                _this.initMavenSourceList();
                            }
                        }
                    }
                }
                else {
                    // 工程的技术栈为空，则也是从环境默认技术栈读取
                    _this.gspMetaService.getSettingInfo().subscribe((/**
                     * @param {?} setting
                     * @return {?}
                     */
                    function (setting) {
                        if (setting && setting.technologyStack) {
                            _this.codelanguage = setting.technologyStack;
                            _this.technologyStack.emit(_this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                if (_this.codelanguage === 'dotnet' || _this.isMavenEnable === false) {
                                    _this.initNugetSourceList();
                                }
                                else {
                                    _this.initMavenSourceList();
                                }
                            }
                        }
                        else if (_this.isMavenEnable === true) {
                            // 环境默认配置为空，则按照java技术栈处理
                            _this.codelanguage = 'java';
                            _this.technologyStack.emit(_this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                _this.initMavenSourceList();
                            }
                        }
                        else {
                            _this.codelanguage = 'dotnet';
                            _this.technologyStack.emit(_this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                _this.initNugetSourceList();
                            }
                        }
                    }));
                }
            }));
            // 处理模式
            _this.metadataService.getProcessMode().subscribe((/**
             * @param {?} processMode
             * @return {?}
             */
            function (processMode) {
                _this.processMode = processMode;
            }));
        }));
        this.subscriptions.push(subscription);
    }
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.data = [];
        this.selectionChanged(null, []);
        this.page = {
            pageIndex: this.initPageIndex,
            pageSize: this.initPageSize
        };
    };
    /**
     * @param {?} state
     * @return {?}
     */
    TemplatemetadataComponent.prototype.dataStateChange = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.state = state;
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.subscriptions && this.subscriptions.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    item.unsubscribe();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.initNugetSourceList = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.sourceList.length === 1) {
            this.gspMetaService.getNugetSourceList().subscribe((/**
             * @param {?} sources
             * @return {?}
             */
            function (sources) {
                sources.forEach((/**
                 * @param {?} source
                 * @return {?}
                 */
                function (source) {
                    _this.sourceList.push({ text: source.name, value: source.name });
                }));
            }));
        }
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.initMavenSourceList = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.sourceList.length === 1) {
            this.gspMetaService.getMavenSourceList().subscribe((/**
             * @param {?} sources
             * @return {?}
             */
            function (sources) {
                if (sources.repoList) {
                    sources.repoList.forEach((/**
                     * @param {?} source
                     * @return {?}
                     */
                    function (source) {
                        _this.sourceList.push({ text: source.id, value: source.id });
                    }));
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.onSearchTextChanged = /**
     * @return {?}
     */
    function () {
        if (!this.searchText) {
            this.searchText = '';
        }
        /** @type {?} */
        var searchTextTrim = this.searchText.trim();
        if (this.searchTextForDup === searchTextTrim) {
            return;
        }
        this.searchTextForDup = searchTextTrim;
        console.log(this.searchText);
        this.searchTextSub.next(searchTextTrim);
    };
    /**
     * @private
     * @return {?}
     */
    TemplatemetadataComponent.prototype.GetMetadataList = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var metadatadto = [];
        this.loading = true;
        this.metadataService.GetMetadataList(this.postfixSelected).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        function (templates) {
            _this.loading = false;
            if (!templates) {
                _this.gridData = _this.data;
                gsp.ide.messager.error('error to get response');
                return;
            }
            // tslint:disable-next-line: prefer-for-of
            for (var index = 0; index < templates.length; index++) {
                /** @type {?} */
                var template = templates[index];
                if (_this.searchText) {
                    // tslint:disable-next-line: max-line-length
                    if (template.code.indexOf(_this.searchText) > -1 || template.name.indexOf(_this.searchText) > -1) {
                        metadatadto.push(template);
                    }
                }
                else {
                    metadatadto.push(template);
                }
            }
            if (metadatadto.length > 0) {
                _this.onSelectionChangedInternal(metadatadto[0], [0]);
            }
            _this.hasNext = false;
            _this.data = metadatadto;
            _this.gridData = _this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.data = metadatadto;
            _this.gridData = _this.data;
            _this.loading = false;
            /** @type {?} */
            var msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Get Metadatas Error:' + msg);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TemplatemetadataComponent.prototype.GetMetadataListInBo = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var metadatadto = [];
        this.loading = true;
        this.metadataService.GetMetadataListInBo(this.postfixSelected).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        function (templates) {
            _this.loading = false;
            if (!templates) {
                _this.gridData = _this.data;
                gsp.ide.messager.error('error to get response');
                return;
            }
            // tslint:disable-next-line: prefer-for-of
            for (var index = 0; index < templates.length; index++) {
                /** @type {?} */
                var template = templates[index];
                if (_this.searchText) {
                    // tslint:disable-next-line: max-line-length
                    if (template.projectName.toLowerCase().indexOf(_this.searchText.toLowerCase()) > -1
                        || template.code.toLowerCase().indexOf(_this.searchText.toLowerCase()) > -1
                        || template.name.toLowerCase().indexOf(_this.searchText.toLowerCase()) > -1) {
                        metadatadto.push(template);
                    }
                }
                else {
                    metadatadto.push(template);
                }
            }
            if (metadatadto.length > 0) {
                _this.onSelectionChangedInternal(metadatadto[0], [0]);
            }
            _this.hasNext = false;
            _this.data = metadatadto;
            _this.gridData = _this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.data = metadatadto;
            _this.gridData = _this.data;
            _this.loading = false;
            /** @type {?} */
            var msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Get Metadatas Error:' + msg);
        }));
    };
    /**
     * @private
     * @param {?=} reloadT
     * @return {?}
     */
    TemplatemetadataComponent.prototype.GetLocalMetadataList = /**
     * @private
     * @param {?=} reloadT
     * @return {?}
     */
    function (reloadT) {
        var _this = this;
        if (reloadT === void 0) { reloadT = true; }
        /** @type {?} */
        var metadatadto = [];
        this.loading = true;
        // this.gspMetaService.GetDevRootPath().subscribe(root => {
        // this.metadataService.rootPath = root;
        // tslint:disable-next-line:max-line-length
        this.metadataService.GetMetadataInfos(this.scope, this.codelanguage, this.isMavenEnable, this.postfixSelected, this.searchText, this.page).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        function (templates) {
            _this.loading = false;
            if (!templates) {
                gsp.ide.messager.error('error to get metadata infos');
                return;
            }
            // 页码处理
            if (templates.page) {
                if (templates.page.pageSize < _this.initPageSize) {
                    _this.hasNext = false;
                }
                else {
                    _this.hasNext = true;
                }
                _this.page.pageSize = templates.page.pageSize;
                _this.page.pageIndex = templates.page.pageIndex;
            }
            else {
                _this.hasNext = false;
            }
            /** @type {?} */
            var metadataList = templates.metadataIndexItems;
            if (!metadataList || metadataList.length < 1) {
                _this.mySelection = [];
                _this.gridData = _this.data;
                return;
            }
            metadataList.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element.repoPkg && element.repoPkg.length > 0) {
                    element.nugetPkgName = element.repoPkg[0].name;
                    element.nugetPkgVersion = element.repoPkg[0].version;
                }
                metadatadto.push(element);
            }));
            if (reloadT) {
                _this.onSelectionChangedInternal(metadatadto[0], [0]);
                _this.data = metadatadto;
            }
            else {
                metadatadto.forEach((/**
                 * @param {?} dto
                 * @return {?}
                 */
                function (dto) {
                    _this.data.push(dto);
                }));
            }
            _this.gridData = _this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.data = metadatadto;
            _this.gridData = _this.data;
            _this.loading = false;
            /** @type {?} */
            var msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Metadata req failed: ' + msg);
        }));
    };
    /**
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    TemplatemetadataComponent.prototype.showOnlyBeveragesDetails = /**
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    function (dataItem, index) {
        return dataItem.repoPkg && dataItem.repoPkg.length > 1;
    };
    /**
     * @param {?} reload
     * @return {?}
     */
    TemplatemetadataComponent.prototype.getRemoteMetadataList = /**
     * @param {?} reload
     * @return {?}
     */
    function (reload) {
        var _this = this;
        /** @type {?} */
        var metadatadto = [];
        this.loading = true;
        // tslint:disable-next-line:max-line-length
        this.metadataService.GetMetadataInfos(this.scope, this.codelanguage, this.isMavenEnable, this.postfixSelected, this.searchText, this.page, this.selectedSource.value).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        function (templates) {
            _this.loading = false;
            if (!templates) {
                gsp.ide.messager.error('error to get metadata infos');
                return;
            }
            // 页码处理
            if (templates.page) {
                if (templates.page.pageSize < _this.initPageSize) {
                    _this.hasNext = false;
                }
                else {
                    _this.hasNext = true;
                }
                _this.page.pageSize = templates.page.pageSize;
                _this.page.pageIndex = templates.page.pageIndex;
            }
            else {
                _this.hasNext = false;
            }
            /** @type {?} */
            var metadataList = templates.metadataIndexItems;
            if (!metadataList || metadataList.length < 1) {
                _this.mySelection = [];
                _this.gridData = _this.data;
                return;
            }
            metadataList.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (!element.repoPkg || element.repoPkg.length < 1) {
                    return;
                }
                if (_this.codelanguage === 'dotnet' || _this.isMavenEnable === false) {
                    element.repoPkg.sort(_this.compareNuget('version'));
                    element.nugetPkgName = element.repoPkg[0].name;
                    element.nugetPkgVersion = element.repoPkg[0].version;
                }
                else {
                    element.repoPkg.sort(_this.compare('version'));
                    element.groupId = element.repoPkg[0].groupId;
                    element.artifactId = element.repoPkg[0].artifactId;
                    element.mavenPkgVersion = element.repoPkg[0].version;
                }
                metadatadto.push(element);
            }));
            if (!metadatadto || metadatadto.length < 1) {
                _this.mySelection = [];
                _this.gridData = _this.data;
                return;
            }
            if (reload) {
                _this.onSelectionChangedInternal(metadatadto[0], [0]);
                _this.data = metadatadto;
            }
            else {
                metadatadto.forEach((/**
                 * @param {?} dto
                 * @return {?}
                 */
                function (dto) {
                    _this.data.push(dto);
                }));
            }
            _this.gridData = _this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.data = metadatadto;
            _this.gridData = _this.data;
            _this.loading = false;
            /** @type {?} */
            var msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Metadata req failed: ' + msg);
        }));
    };
    /**
     * @param {?} pro
     * @return {?}
     */
    TemplatemetadataComponent.prototype.compare = /**
     * @param {?} pro
     * @return {?}
     */
    function (pro) {
        return (/**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        function (obj1, obj2) {
            /** @type {?} */
            var val1 = obj1[pro];
            /** @type {?} */
            var val2 = obj2[pro];
            /** @type {?} */
            var vala1 = val1.split('.');
            /** @type {?} */
            var vala2 = val2.split('.');
            /** @type {?} */
            var v10 = vala1[0].substr(1);
            /** @type {?} */
            var v20 = vala2[0].substr(1);
            if (Number(v10) < Number(v20)) {
                return 1;
            }
            if (Number(v10) > Number(v20)) {
                return -1;
            }
            if (Number(vala1[1]) < Number(vala2[1])) {
                return 1;
            }
            if (Number(vala1[1]) > Number(vala2[1])) {
                return -1;
            }
            /** @type {?} */
            var v12 = vala1[2].replace('-SNAPSHOT', '');
            /** @type {?} */
            var v22 = vala2[2].replace('-SNAPSHOT', '');
            if (Number(v12) < Number(v22)) {
                return 1;
            }
            if (Number(v12) > Number(v22)) {
                return -1;
            }
            if (vala1[2].indexOf('-SNAPSHOT') > 0) {
                return 1;
            }
            else {
                return -1;
            }
        });
    };
    /**
     * @param {?} pro
     * @return {?}
     */
    TemplatemetadataComponent.prototype.compareNuget = /**
     * @param {?} pro
     * @return {?}
     */
    function (pro) {
        return (/**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        function (obj1, obj2) {
            /** @type {?} */
            var val1 = obj1[pro];
            /** @type {?} */
            var val2 = obj2[pro];
            /** @type {?} */
            var vala1 = val1.split('.');
            /** @type {?} */
            var vala2 = val2.split('.');
            /** @type {?} */
            var v10 = vala1[0];
            /** @type {?} */
            var v20 = vala2[0];
            if (Number(v10) < Number(v20)) {
                return -1;
            }
            if (Number(v10) > Number(v20)) {
                return 1;
            }
            if (Number(vala1[1]) < Number(vala2[1])) {
                return 1;
            }
            if (Number(vala1[1]) > Number(vala2[1])) {
                return -1;
            }
            /** @type {?} */
            var v12 = vala1[2];
            /** @type {?} */
            var v22 = vala2[2];
            if (v12.indexOf('alpha') > 0) {
                if (v12 < v22) {
                    return 1;
                }
                if (v12 > v22) {
                    return -1;
                }
            }
            else {
                if (Number(v12) < Number(v22)) {
                    return 1;
                }
                if (Number(v12) > Number(v22)) {
                    return -1;
                }
            }
        });
    };
    /**
     * @param {?} classifier
     * @return {?}
     */
    TemplatemetadataComponent.prototype.scopeChanged = /**
     * @param {?} classifier
     * @return {?}
     */
    function (classifier) {
        this.classifier = classifier;
        this.getData();
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.getData = /**
     * @return {?}
     */
    function () {
        if (this.classifier) {
            if (this.reload) {
                this.clear();
            }
            /** @type {?} */
            var reloadT = this.reload;
            if (this.classifier.id === 'project') {
                this.scope = 0;
                this.GetMetadataList();
            }
            else if (this.classifier.id === 'bo') {
                this.scope = 0;
                this.GetMetadataListInBo();
            }
            else if (this.classifier.id === 'ref') {
                this.scope = 3;
                this.getRemoteMetadataList(reloadT);
            }
            else if (this.classifier.id === 'remote') {
                this.scope = 2;
                this.getRemoteMetadataList(reloadT);
            }
            else if (this.classifier.id === 'local') {
                this.scope = 1;
                this.GetLocalMetadataList(reloadT);
            }
            // 重置一次请求中的状态
            this.reload = true;
        }
    };
    // 选中元数据后的事件处理
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    TemplatemetadataComponent.prototype.onSelectionChange = 
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.selectedRows && event.selectedRows.length > 0) {
            /** @type {?} */
            var dataItem = event.selectedRows[0].dataItem;
            this.onSelectionChangedInternal(dataItem, [event.selectedRows[0].index]);
        }
    };
    /**
     * @private
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    TemplatemetadataComponent.prototype.onSelectionChangedInternal = /**
     * @private
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    function (dataItem, index) {
        /** @type {?} */
        var newData = this.makeNewData(dataItem);
        if (this.scope === 2 || this.scope === 3) {
            newData.repoPkg.push(dataItem.repoPkg[0]);
        }
        this.selectionChanged(newData, index);
    };
    /**
     * @private
     * @param {?} dataItem
     * @param {?=} index
     * @return {?}
     */
    TemplatemetadataComponent.prototype.selectionChanged = /**
     * @private
     * @param {?} dataItem
     * @param {?=} index
     * @return {?}
     */
    function (dataItem, index) {
        if (index === void 0) { index = []; }
        this.selectedMetadataChanged.emit(dataItem);
        this.mySelection = index;
    };
    /**
     * @private
     * @param {?} dataItem
     * @return {?}
     */
    TemplatemetadataComponent.prototype.makeNewData = /**
     * @private
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        return {
            mdPkgName: dataItem.mdPkgName,
            repoPkg: [],
            id: dataItem.id,
            nameSpace: dataItem.nameSpace,
            code: dataItem.code,
            name: dataItem.name,
            fileName: dataItem.fileName,
            type: dataItem.type,
            bizobjectID: dataItem.bizobjectID,
            language: dataItem.language,
            isTranslating: dataItem.isTranslating,
            relativePath: dataItem.relativePath,
            extendProperty: dataItem.extendProperty,
            processMode: dataItem.processMode
        };
    };
    /**
     * @param {?} dataItem
     * @return {?}
     */
    TemplatemetadataComponent.prototype.onSelectedPkgChanged = /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        if (dataItem && dataItem.repoPkg && dataItem.repoPkg.length > 0) {
            /** @type {?} */
            var newData = this.makeNewData(dataItem);
            if (dataItem.selectedPkg) {
                newData.repoPkg.push(dataItem.selectedPkg);
            }
            else {
                newData.repoPkg.push(dataItem.repoPkg[0]);
            }
            this.selectionChanged(newData, []);
        }
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.goSearch = /**
     * @return {?}
     */
    function () {
        if (!this.searchText) {
            this.searchText = '';
        }
        console.log('搜索');
        /** @type {?} */
        var searchTextTrim = this.searchText.trim();
        if (this.searchText && this.searchTextForDup === searchTextTrim) {
            return;
        }
        this.searchTextForDup = searchTextTrim;
        console.log(this.searchText);
        this.searchText = searchTextTrim;
        // 搜索
        console.log('search for ' + this.searchText);
        this.getData();
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.goNext = /**
     * @return {?}
     */
    function () {
        console.log('下一页');
        this.page.pageIndex = this.page.pageIndex + 1;
        this.reload = false;
        this.getData();
    };
    /**
     * @return {?}
     */
    TemplatemetadataComponent.prototype.onConflictAvoidFlagChanged = /**
     * @return {?}
     */
    function () {
        console.log('ConflictAvoidFlag ' + this.conflictAvoidFlag);
        this.getData();
    };
    /**
     * @param {?} mdSeleted
     * @return {?}
     */
    TemplatemetadataComponent.prototype.typeSelectedChanged = /**
     * @param {?} mdSeleted
     * @return {?}
     */
    function (mdSeleted) {
        if (!mdSeleted) {
            mdSeleted = this.selectedType;
        }
        if (mdSeleted) {
            if (mdSeleted.value === this.allType.value) {
                this.postfixSelected = this.postfix;
            }
            else {
                this.postfixSelected = mdSeleted.value;
            }
            this.getData();
        }
    };
    /**
     * @param {?} source
     * @return {?}
     */
    TemplatemetadataComponent.prototype.sourceSelectedChanged = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        if (!source) {
            source = this.selectedSource;
        }
        this.selectedSource = source;
        this.getData();
    };
    TemplatemetadataComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-metadatalist',
                    template: "<div class=\"templateInfo farris-main-area flex-column\">\r\n  <div class=\"templateSelectorHeader m-2\">\r\n    <div class=\"searchArea d-flex flex-row\">\r\n\r\n      <input id=\"url\" class=\"textInput flex-fill\" type=\"text\" size=\"30\" kendoTextBox [(ngModel)]=\"this.searchText\"\r\n        #url=\"ngModel\" required (ngModelChange)=\"onSearchTextChanged()\">\r\n      <button type=\"button\" class=\"btn btn-light btn-sm px-3 mx-2\"\r\n          (click)=\"goSearch()\">\u641C\u7D22</button>\r\n\r\n      <!-- <div class=\"conflictAvoidFlag\" *ngIf=\"this.scope === 2\">\r\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"check1\"\r\n          [(ngModel)]=\"this.conflictAvoidFlag\" (ngModelChange)=\"this.onConflictAvoidFlagChanged()\">\r\n        <label class=\"form-check-label text-label\" for=\"check1\">\u907F\u514D\u51B2\u7A81</label>\r\n      </div> -->\r\n\r\n      <kendo-combobox class=\"mx-2\" [allowCustom]=\"allowCustom\" *ngIf=\"this.scope === 2 || this.scope === 3\" [data]=\"sourceList\" \r\n        [textField]=\"'text'\" [valueField]=\"'value'\" [(ngModel)]=\"this.selectedSource\" \r\n        (selectionChange)=\"sourceSelectedChanged($event)\" [popupSettings]=\"popupSettings\">\r\n      </kendo-combobox>\r\n\r\n      <kendo-combobox [readonly]=\"this.typeListReadonly\" [data]=\"typeList\" [(ngModel)]=\"selectedType\"\r\n        [textField]=\"'text'\" [valueField]=\"'value'\"  (selectionChange)=\"typeSelectedChanged($event)\">\r\n      </kendo-combobox>\r\n    </div>\r\n  </div>\r\n  <div class=\"templateSelector flex-fill d-flex flex-column\">\r\n    <kendo-grid class=\"flex-fill\"\r\n                [data]=\"gridData\"\r\n                [selectable]=\"selectableSetting\" \r\n                (selectionChange)=onSelectionChange($event)\r\n                [sortable]=\"true\"\r\n                [pageable]=\"false\"\r\n                [filterable]=\"false\"\r\n                [resizable]=\"true\"\r\n                [loading]=\"this.loading\"\r\n                [rowSelected]=\"rowSelected\">\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 0 && this.classifier.id === 'bo') && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"projectName\" title=\"\u5DE5\u7A0B\u540D\u79F0\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"150\" field=\"code\" title=\"\u7F16\u53F7\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"150\" field=\"name\" title=\"\u540D\u79F0\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column field=\"type\" [width]=\"130\" title=\"\u7C7B\u578B\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"this.scope === 1 || this.scope === 2 || this.scope === 3\" field=\"mdPkgName\"\r\n        title=\"\u5143\u6570\u636E\u5305\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === false || this.codelanguage === dotnet)\" field=\"nugetPkgName\" title=\"\u6240\u5C5ENuget\u5305\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === false || this.codelanguage === dotnet)\" field=\"nugetPkgVersion\" title=\"\u6240\u5C5ENuget\u5305\u7248\u672C\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"groupId\" title=\"\u6240\u5C5EMaven\u5305GroupId\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"artifactId\" title=\"\u6240\u5C5EMaven\u5305ArtifactId\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"mavenPkgVersion\" title=\"\u6240\u5C5EMaven\u5305\u7248\u672C\">\r\n      </kendo-grid-column>\r\n\r\n      <ng-template kendoGridDetailTemplate let-dataItem [kendoGridDetailTemplateShowIf]=\"showOnlyBeveragesDetails\">\r\n        <lib-metadatalistdetails (selectedPkgChanged)=\"this.onSelectedPkgChanged($event)\" [isMavenEnable]=\"isMavenEnable\" [mdItem]=\"dataItem\" [codelanguage]=\"codelanguage\">\r\n        </lib-metadatalistdetails>\r\n      </ng-template>\r\n\r\n    </kendo-grid>\r\n  </div>\r\n  <div *ngIf=\"this.hasNext && !this.loading\" class=\"model-footer\">\r\n    <button type=\"button\" class=\"btn btn-link btn-sm\" (click)=\"goNext()\">\u52A0\u8F7D\u66F4\u591A</button>\r\n  </div>\r\n  <div *ngIf=\"this.loading\" class=\"model-footer\">\r\n    <label class=\"text-label\">\u52A0\u8F7D\u4E2D...</label>\r\n  </div>\r\n  <div *ngIf=\"!this.hasNext && !this.loading\" class=\"model-footer\">\r\n    <label class=\"text-label\">\u5DF2\u7ECF\u5230\u5E95\u4E86</label>\r\n  </div>\r\n</div>",
                    styles: [".templateSelector{overflow-y:hidden;overflow-x:auto}.templateInfo{display:flex;overflow:hidden}.conflictAvoidFlag{margin-left:25px;align-content:baseline;margin-top:1px;margin-right:3px;min-width:65px}.scope1{min-width:800px}.scope2{min-width:1000px}.text-label{margin-top:1.3px}"]
                }] }
    ];
    /** @nocollapse */
    TemplatemetadataComponent.ctorParameters = function () { return [
        { type: MetadataService },
        { type: GSPMetadataService }
    ]; };
    TemplatemetadataComponent.propDecorators = {
        isMavenEnable: [{ type: Input }],
        technologyStack: [{ type: Output }],
        typeName: [{ type: Input }],
        filter: [{ type: Input }],
        selectedMetadataChanged: [{ type: Output }]
    };
    return TemplatemetadataComponent;
}());
export { TemplatemetadataComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TemplatemetadataComponent.prototype.subscriptions;
    /** @type {?} */
    TemplatemetadataComponent.prototype.classifier;
    /** @type {?} */
    TemplatemetadataComponent.prototype.codelanguage;
    /** @type {?} */
    TemplatemetadataComponent.prototype.processMode;
    /** @type {?} */
    TemplatemetadataComponent.prototype.isMavenEnable;
    /** @type {?} */
    TemplatemetadataComponent.prototype.dotnet;
    /** @type {?} */
    TemplatemetadataComponent.prototype.java;
    /** @type {?} */
    TemplatemetadataComponent.prototype.technologyStack;
    /** @type {?} */
    TemplatemetadataComponent.prototype.loading;
    /** @type {?} */
    TemplatemetadataComponent.prototype.typeName;
    /** @type {?} */
    TemplatemetadataComponent.prototype.filter;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectedMetadataChanged;
    /** @type {?} */
    TemplatemetadataComponent.prototype.allSource;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectedSource;
    /** @type {?} */
    TemplatemetadataComponent.prototype.sourceList;
    /** @type {?} */
    TemplatemetadataComponent.prototype.popupSettings;
    /** @type {?} */
    TemplatemetadataComponent.prototype.allowCustom;
    /** @type {?} */
    TemplatemetadataComponent.prototype.allType;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectedType;
    /** @type {?} */
    TemplatemetadataComponent.prototype.typeList;
    /** @type {?} */
    TemplatemetadataComponent.prototype.postfixSelected;
    /** @type {?} */
    TemplatemetadataComponent.prototype.initPageIndex;
    /** @type {?} */
    TemplatemetadataComponent.prototype.initPageSize;
    /** @type {?} */
    TemplatemetadataComponent.prototype.page;
    /** @type {?} */
    TemplatemetadataComponent.prototype.typeListReadonly;
    /** @type {?} */
    TemplatemetadataComponent.prototype.hasNext;
    /** @type {?} */
    TemplatemetadataComponent.prototype.searchText;
    /** @type {?} */
    TemplatemetadataComponent.prototype.searchTextForDup;
    /** @type {?} */
    TemplatemetadataComponent.prototype.searchTextSub;
    /** @type {?} */
    TemplatemetadataComponent.prototype.postfix;
    /** @type {?} */
    TemplatemetadataComponent.prototype.postfixFlag;
    /** @type {?} */
    TemplatemetadataComponent.prototype.scope;
    /** @type {?} */
    TemplatemetadataComponent.prototype.data;
    /** @type {?} */
    TemplatemetadataComponent.prototype.conflictAvoidFlag;
    /** @type {?} */
    TemplatemetadataComponent.prototype.reload;
    /** @type {?} */
    TemplatemetadataComponent.prototype.mySelection;
    /** @type {?} */
    TemplatemetadataComponent.prototype.state;
    /** @type {?} */
    TemplatemetadataComponent.prototype.gridData;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectableSetting;
    /** @type {?} */
    TemplatemetadataComponent.prototype.rowSelected;
    /**
     * @type {?}
     * @private
     */
    TemplatemetadataComponent.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    TemplatemetadataComponent.prototype.gspMetaService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGFsaXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtbGNtL21ldGFkYXRhLXNlbGVjdG9yLyIsInNvdXJjZXMiOlsibWV0YWRhdGEvbWV0YWRhdGEtc2VsZWN0L2NvbXBvbmVudHMvbWV0YWRhdGFsaXN0L21ldGFkYXRhbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFJekQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0I7SUFzRkUsbUNBQW9CLGVBQWdDLEVBQVUsY0FBa0M7UUFBaEcsaUJBMEhDO1FBMUhtQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBb0I7UUEvRXhGLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBUTNCLFdBQU0sR0FBRyxRQUFRLENBQUM7UUFDbEIsU0FBSSxHQUFHLE1BQU0sQ0FBQztRQUNKLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvQyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBR04sNEJBQXVCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU1RCxjQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN6QyxtQkFBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDaEMsZUFBVSxHQUEyQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FB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bWl0dGVyLCBPdXRwdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi9tZXRhZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VsZWN0YWJsZVNldHRpbmdzLCBSb3dBcmdzIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZ3JpZCc7XHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xyXG5pbXBvcnQgeyBEYXRhU3RhdGVDaGFuZ2VFdmVudCB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWdyaWQnO1xyXG5pbXBvcnQgeyBHU1BNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9tZXRhZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBQcm9jZXNzTW9kZSB9IGZyb20gJy4uLy4uL3Byb2Nlc3Ntb2RlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2FwcC1tZXRhZGF0YWxpc3QnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9tZXRhZGF0YWxpc3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL21ldGFkYXRhbGlzdC5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlbWV0YWRhdGFDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IFtdO1xyXG4gIC8vIOWIhuexu1xyXG4gIGNsYXNzaWZpZXI6IGFueTtcclxuICAvLyDmioDmnK/moIhcclxuICBjb2RlbGFuZ3VhZ2U6IHN0cmluZztcclxuICAvLyDlpITnkIbmqKHlvI9cclxuICBwcm9jZXNzTW9kZTogUHJvY2Vzc01vZGU7XHJcbiAgQElucHV0KCkgaXNNYXZlbkVuYWJsZTogYm9vbGVhbjtcclxuICBkb3RuZXQgPSAnZG90bmV0JztcclxuICBqYXZhID0gJ2phdmEnO1xyXG4gIEBPdXRwdXQoKSB0ZWNobm9sb2d5U3RhY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgbG9hZGluZyA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIHR5cGVOYW1lOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgZmlsdGVyOiBzdHJpbmc7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkTWV0YWRhdGFDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIGFsbFNvdXJjZSA9IHsgdGV4dDogJ+WFqOmAiScsIHZhbHVlOiAnQWxsJyB9O1xyXG4gIHNlbGVjdGVkU291cmNlID0gdGhpcy5hbGxTb3VyY2U7XHJcbiAgc291cmNlTGlzdDogQXJyYXk8eyB0ZXh0OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfT4gPSBbdGhpcy5hbGxTb3VyY2VdO1xyXG4gIHBvcHVwU2V0dGluZ3MgPSB7IHdpZHRoOiAnYXV0bycgfTtcclxuICBhbGxvd0N1c3RvbSA9IHRydWU7XHJcblxyXG4gIGFsbFR5cGUgPSB7IHRleHQ6ICflhajpgIknLCB2YWx1ZTogJ0FsbCcgfTtcclxuICBzZWxlY3RlZFR5cGUgPSB0aGlzLmFsbFR5cGU7XHJcbiAgdHlwZUxpc3Q6IEFycmF5PHsgdGV4dDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH0+ID0gW1xyXG4gICAgdGhpcy5hbGxUeXBlXHJcbiAgXTtcclxuICBwb3N0Zml4U2VsZWN0ZWQgPSAnJztcclxuICBpbml0UGFnZUluZGV4ID0gMDtcclxuICBpbml0UGFnZVNpemUgPSAxMDtcclxuICBwYWdlID0ge1xyXG4gICAgcGFnZUluZGV4OiB0aGlzLmluaXRQYWdlSW5kZXgsXHJcbiAgICBwYWdlU2l6ZTogdGhpcy5pbml0UGFnZVNpemVcclxuICB9O1xyXG4gIHR5cGVMaXN0UmVhZG9ubHkgPSBmYWxzZTtcclxuICBoYXNOZXh0ID0gdHJ1ZTtcclxuICBzZWFyY2hUZXh0ID0gJyc7XHJcbiAgc2VhcmNoVGV4dEZvckR1cCA9ICcnO1xyXG4gIHNlYXJjaFRleHRTdWIgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcbiAgcG9zdGZpeCA9ICcnO1xyXG4gIHBvc3RmaXhGbGFnID0gdHJ1ZTtcclxuICBzY29wZSA9IDA7XHJcbiAgZGF0YTogYW55W107XHJcbiAgY29uZmxpY3RBdm9pZEZsYWcgPSBmYWxzZTtcclxuICByZWxvYWQgPSB0cnVlO1xyXG4gIG15U2VsZWN0aW9uID0gW107XHJcbiAgY2xlYXIoKSB7XHJcbiAgICB0aGlzLmRhdGEgPSBbXTtcclxuICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZChudWxsLCBbXSk7XHJcbiAgICB0aGlzLnBhZ2UgPSB7XHJcbiAgICAgIHBhZ2VJbmRleDogdGhpcy5pbml0UGFnZUluZGV4LFxyXG4gICAgICBwYWdlU2l6ZTogdGhpcy5pbml0UGFnZVNpemVcclxuICAgIH07XHJcbiAgfVxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptZW1iZXItb3JkZXJpbmdcclxuICBwdWJsaWMgc3RhdGU6IFN0YXRlID0ge1xyXG4gICAgc2tpcDogMCxcclxuICAgIHRha2U6IDk5OTksXHJcbiAgICAvLyBJbml0aWFsIGZpbHRlciBkZXNjcmlwdG9yXHJcbiAgICBmaWx0ZXI6IHtcclxuICAgICAgbG9naWM6ICdhbmQnLFxyXG4gICAgICBmaWx0ZXJzOiBbXVxyXG4gICAgfVxyXG4gIH07XHJcbiAgLy8gcHVibGljIGdyaWREYXRhOiBHcmlkRGF0YVJlc3VsdCA9IHRoaXMuZGF0YTtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWVtYmVyLW9yZGVyaW5nXHJcbiAgcHVibGljIGdyaWREYXRhOiBhbnlbXTtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWVtYmVyLW9yZGVyaW5nXHJcbiAgc2VsZWN0YWJsZVNldHRpbmc6IFNlbGVjdGFibGVTZXR0aW5ncyA9IHsgbW9kZTogJ3NpbmdsZScsIGNoZWNrYm94T25seTogZmFsc2UgfTtcclxuICBwdWJsaWMgZGF0YVN0YXRlQ2hhbmdlKHN0YXRlOiBEYXRhU3RhdGVDaGFuZ2VFdmVudCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbnMgJiYgdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuc3Vic2NyaXB0aW9ucykge1xyXG4gICAgICAgIGl0ZW0udW5zdWJzY3JpYmUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1ldGFkYXRhU2VydmljZTogTWV0YWRhdGFTZXJ2aWNlLCBwcml2YXRlIGdzcE1ldGFTZXJ2aWNlOiBHU1BNZXRhZGF0YVNlcnZpY2UpIHtcclxuICAgIHRoaXMuY2xhc3NpZmllciA9IHsgaWQ6ICcnIH07XHJcbiAgICB0aGlzLnNlYXJjaFRleHRTdWIucGlwZShkZWJvdW5jZVRpbWUoMjA0OCksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpLnN1YnNjcmliZSh0ZXh0ID0+IHtcclxuICAgICAgdGhpcy5zZWFyY2hUZXh0ID0gdGV4dC50cmltKCk7XHJcbiAgICAgIC8vIOaQnOe0olxyXG4gICAgICBjb25zb2xlLmxvZygnc2VhcmNoIGZvciAnICsgdGhpcy5zZWFyY2hUZXh0KTtcclxuICAgICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyB0aGlzLnVuc3Vic2NyaWJlQWxsKCk7XHJcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLm1ldGFkYXRhU2VydmljZS5zZWxlY3RlZENoYW5nZS5zdWJzY3JpYmUoY2xhc3NpZmllciA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmNsYXNzaWZpZXIgJiYgY2xhc3NpZmllciAmJiB0aGlzLmNsYXNzaWZpZXIuaWQgPT09IGNsYXNzaWZpZXIuaWQpIHsgcmV0dXJuOyB9XHJcbiAgICAgIC8vIOWFg+aVsOaNruexu+Wei1xyXG4gICAgICBpZiAodGhpcy5wb3N0Zml4RmxhZykge1xyXG4gICAgICAgIHRoaXMuZ3NwTWV0YVNlcnZpY2UuR2V0TWV0YWRhdGFUeXBlTGlzdCgpLnN1YnNjcmliZSh0eXBlTGlzdCA9PiB7XHJcbiAgICAgICAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgICAgICAgdHlwZUxpc3QuZm9yRWFjaCh0eXBlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wb3N0Zml4RmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlTmFtZUFycmF5ID0gdGhpcy50eXBlTmFtZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB0eXBlTmFtZUFycmF5LmZvckVhY2godHlwZU5hbWUgPT4ge1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0eXBlLnR5cGVDb2RlLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zdGZpeCA9IHRoaXMucG9zdGZpeCArIHR5cGUucG9zdGZpeCArICcsJztcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZUxpc3QucHVzaCh7IHRleHQ6IHR5cGUudHlwZU5hbWUsIHZhbHVlOiB0eXBlLnBvc3RmaXggfSk7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmIChjb3VudCA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnR5cGVMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUeXBlID0gdGhpcy50eXBlTGlzdFswXTtcclxuICAgICAgICAgICAgdGhpcy50eXBlTGlzdFJlYWRvbmx5ID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMucG9zdGZpeFNlbGVjdGVkID0gdGhpcy5wb3N0Zml4O1xyXG4gICAgICAgICAgdGhpcy5zY29wZUNoYW5nZWQoY2xhc3NpZmllcik7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgY29uc3QgbXNnID0gZXJyb3IuZXJyb3IuTWVzc2FnZSAhPT0gdW5kZWZpbmVkID8gZXJyb3IuZXJyb3IuTWVzc2FnZSA6IGVycm9yLmVycm9yLmVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdGZXRjaCBNZXRhZGF0YSBUeXBlIGVycm9yOicgKyBtc2cpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2NvcGVDaGFuZ2VkKGNsYXNzaWZpZXIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDmioDmnK/moIjotYvlgLxcclxuICAgICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuZ2V0Q29kZUxhbmd1YWdlKCkuc3Vic2NyaWJlKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAvLyDlpoLmnpznm67liY3lt6XnqIvpnZ7ljZXmoIjvvIzliJnojrflj5bnjq/looPpu5jorqTmioDmnK/moIhcclxuICAgICAgICAgIGlmIChpdGVtLmluZGV4T2YoJzsnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3NwTWV0YVNlcnZpY2UuZ2V0U2V0dGluZ0luZm8oKS5zdWJzY3JpYmUoc2V0dGluZyA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKHNldHRpbmcgJiYgc2V0dGluZy50ZWNobm9sb2d5U3RhY2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29kZWxhbmd1YWdlID0gc2V0dGluZy50ZWNobm9sb2d5U3RhY2s7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlY2hub2xvZ3lTdGFjay5lbWl0KHRoaXMuY29kZWxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc2lmaWVyLmlkID09PSAncmVmJyB8fCBjbGFzc2lmaWVyLmlkID09PSAncmVtb3RlJykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2RlbGFuZ3VhZ2UgPT09ICdkb3RuZXQnIHx8IHRoaXMuaXNNYXZlbkVuYWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXROdWdldFNvdXJjZUxpc3QoKTtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRNYXZlblNvdXJjZUxpc3QoKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc01hdmVuRW5hYmxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDnjq/looPpu5jorqTphY3nva7kuLrnqbrvvIzliJnmjInnhadqYXZh5oqA5pyv5qCI5aSE55CGXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvZGVsYW5ndWFnZSA9ICdqYXZhJztcclxuICAgICAgICAgICAgICAgIHRoaXMudGVjaG5vbG9neVN0YWNrLmVtaXQodGhpcy5jb2RlbGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzaWZpZXIuaWQgPT09ICdyZWYnIHx8IGNsYXNzaWZpZXIuaWQgPT09ICdyZW1vdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdE1hdmVuU291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvZGVsYW5ndWFnZSA9ICdkb3RuZXQnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZWNobm9sb2d5U3RhY2suZW1pdCh0aGlzLmNvZGVsYW5ndWFnZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NpZmllci5pZCA9PT0gJ3JlZicgfHwgY2xhc3NpZmllci5pZCA9PT0gJ3JlbW90ZScpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5pbml0TnVnZXRTb3VyY2VMaXN0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29kZWxhbmd1YWdlID0gaXRlbTtcclxuICAgICAgICAgICAgdGhpcy50ZWNobm9sb2d5U3RhY2suZW1pdCh0aGlzLmNvZGVsYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIGlmIChjbGFzc2lmaWVyLmlkID09PSAncmVmJyB8fCBjbGFzc2lmaWVyLmlkID09PSAncmVtb3RlJykge1xyXG4gICAgICAgICAgICAgIGlmICh0aGlzLmNvZGVsYW5ndWFnZSA9PT0gJ2RvdG5ldCcgfHwgdGhpcy5pc01hdmVuRW5hYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0TnVnZXRTb3VyY2VMaXN0KCk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE1hdmVuU291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyDlt6XnqIvnmoTmioDmnK/moIjkuLrnqbrvvIzliJnkuZ/mmK/ku47njq/looPpu5jorqTmioDmnK/moIjor7vlj5ZcclxuICAgICAgICAgIHRoaXMuZ3NwTWV0YVNlcnZpY2UuZ2V0U2V0dGluZ0luZm8oKS5zdWJzY3JpYmUoc2V0dGluZyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5nICYmIHNldHRpbmcudGVjaG5vbG9neVN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jb2RlbGFuZ3VhZ2UgPSBzZXR0aW5nLnRlY2hub2xvZ3lTdGFjaztcclxuICAgICAgICAgICAgICB0aGlzLnRlY2hub2xvZ3lTdGFjay5lbWl0KHRoaXMuY29kZWxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICBpZiAoY2xhc3NpZmllci5pZCA9PT0gJ3JlZicgfHwgY2xhc3NpZmllci5pZCA9PT0gJ3JlbW90ZScpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvZGVsYW5ndWFnZSA9PT0gJ2RvdG5ldCcgfHwgdGhpcy5pc01hdmVuRW5hYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmluaXROdWdldFNvdXJjZUxpc3QoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdE1hdmVuU291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTWF2ZW5FbmFibGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAvLyDnjq/looPpu5jorqTphY3nva7kuLrnqbrvvIzliJnmjInnhadqYXZh5oqA5pyv5qCI5aSE55CGXHJcbiAgICAgICAgICAgICAgdGhpcy5jb2RlbGFuZ3VhZ2UgPSAnamF2YSc7XHJcbiAgICAgICAgICAgICAgdGhpcy50ZWNobm9sb2d5U3RhY2suZW1pdCh0aGlzLmNvZGVsYW5ndWFnZSk7XHJcbiAgICAgICAgICAgICAgaWYgKGNsYXNzaWZpZXIuaWQgPT09ICdyZWYnIHx8IGNsYXNzaWZpZXIuaWQgPT09ICdyZW1vdGUnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRNYXZlblNvdXJjZUxpc3QoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jb2RlbGFuZ3VhZ2UgPSAnZG90bmV0JztcclxuICAgICAgICAgICAgICB0aGlzLnRlY2hub2xvZ3lTdGFjay5lbWl0KHRoaXMuY29kZWxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICBpZiAoY2xhc3NpZmllci5pZCA9PT0gJ3JlZicgfHwgY2xhc3NpZmllci5pZCA9PT0gJ3JlbW90ZScpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE51Z2V0U291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIOWkhOeQhuaooeW8j1xyXG4gICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5nZXRQcm9jZXNzTW9kZSgpLnN1YnNjcmliZShwcm9jZXNzTW9kZSA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzTW9kZSA9IHByb2Nlc3NNb2RlO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XHJcbiAgfVxyXG5cclxuICBpbml0TnVnZXRTb3VyY2VMaXN0KCkge1xyXG4gICAgaWYgKHRoaXMuc291cmNlTGlzdC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgdGhpcy5nc3BNZXRhU2VydmljZS5nZXROdWdldFNvdXJjZUxpc3QoKS5zdWJzY3JpYmUoc291cmNlcyA9PiB7XHJcbiAgICAgICAgc291cmNlcy5mb3JFYWNoKHNvdXJjZSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnNvdXJjZUxpc3QucHVzaCh7IHRleHQ6IHNvdXJjZS5uYW1lLCB2YWx1ZTogc291cmNlLm5hbWUgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBpbml0TWF2ZW5Tb3VyY2VMaXN0KCkge1xyXG4gICAgaWYgKHRoaXMuc291cmNlTGlzdC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgdGhpcy5nc3BNZXRhU2VydmljZS5nZXRNYXZlblNvdXJjZUxpc3QoKS5zdWJzY3JpYmUoc291cmNlcyA9PiB7XHJcbiAgICAgICAgaWYgKHNvdXJjZXMucmVwb0xpc3QpIHtcclxuICAgICAgICAgIHNvdXJjZXMucmVwb0xpc3QuZm9yRWFjaChzb3VyY2UgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZUxpc3QucHVzaCh7IHRleHQ6IHNvdXJjZS5pZCwgdmFsdWU6IHNvdXJjZS5pZCB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblNlYXJjaFRleHRDaGFuZ2VkKCkge1xyXG4gICAgaWYgKCF0aGlzLnNlYXJjaFRleHQpIHsgdGhpcy5zZWFyY2hUZXh0ID0gJyc7IH1cclxuICAgIGNvbnN0IHNlYXJjaFRleHRUcmltID0gdGhpcy5zZWFyY2hUZXh0LnRyaW0oKTtcclxuICAgIGlmICh0aGlzLnNlYXJjaFRleHRGb3JEdXAgPT09IHNlYXJjaFRleHRUcmltKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuc2VhcmNoVGV4dEZvckR1cCA9IHNlYXJjaFRleHRUcmltO1xyXG4gICAgY29uc29sZS5sb2codGhpcy5zZWFyY2hUZXh0KTtcclxuICAgIHRoaXMuc2VhcmNoVGV4dFN1Yi5uZXh0KHNlYXJjaFRleHRUcmltKTtcclxuICB9XHJcblxyXG4gIHJvd1NlbGVjdGVkID0gKGU6IFJvd0FyZ3MpID0+IHRoaXMubXlTZWxlY3Rpb24uaW5kZXhPZihlLmluZGV4KSA+PSAwO1xyXG5cclxuICBwcml2YXRlIEdldE1ldGFkYXRhTGlzdCgpIHtcclxuICAgIGNvbnN0IG1ldGFkYXRhZHRvID0gW107XHJcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuR2V0TWV0YWRhdGFMaXN0KHRoaXMucG9zdGZpeFNlbGVjdGVkKS5zdWJzY3JpYmUodGVtcGxhdGVzID0+IHtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGlmICghdGVtcGxhdGVzKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdlcnJvciB0byBnZXQgcmVzcG9uc2UnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBwcmVmZXItZm9yLW9mXHJcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0ZW1wbGF0ZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZXNbaW5kZXhdO1xyXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaFRleHQpIHtcclxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXHJcbiAgICAgICAgICBpZiAodGVtcGxhdGUuY29kZS5pbmRleE9mKHRoaXMuc2VhcmNoVGV4dCkgPiAtMSB8fCB0ZW1wbGF0ZS5uYW1lLmluZGV4T2YodGhpcy5zZWFyY2hUZXh0KSA+IC0xKSB7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhZHRvLnB1c2godGVtcGxhdGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBtZXRhZGF0YWR0by5wdXNoKHRlbXBsYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1ldGFkYXRhZHRvLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlZEludGVybmFsKG1ldGFkYXRhZHRvWzBdLCBbMF0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuaGFzTmV4dCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmRhdGEgPSBtZXRhZGF0YWR0bztcclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgdGhpcy5kYXRhID0gbWV0YWRhdGFkdG87XHJcbiAgICAgIHRoaXMuZ3JpZERhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBjb25zdCBtc2cgPSBlcnJvci5lcnJvci5NZXNzYWdlICE9PSB1bmRlZmluZWQgPyBlcnJvci5lcnJvci5NZXNzYWdlIDogZXJyb3IuZXJyb3IuZXJyb3IubWVzc2FnZTtcclxuICAgICAgZ3NwLmlkZS5tZXNzYWdlci5lcnJvcignR2V0IE1ldGFkYXRhcyBFcnJvcjonICsgbXNnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBHZXRNZXRhZGF0YUxpc3RJbkJvKCkge1xyXG4gICAgY29uc3QgbWV0YWRhdGFkdG8gPSBbXTtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YUxpc3RJbkJvKHRoaXMucG9zdGZpeFNlbGVjdGVkKS5zdWJzY3JpYmUodGVtcGxhdGVzID0+IHtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGlmICghdGVtcGxhdGVzKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdlcnJvciB0byBnZXQgcmVzcG9uc2UnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBwcmVmZXItZm9yLW9mXHJcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0ZW1wbGF0ZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZXNbaW5kZXhdO1xyXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaFRleHQpIHtcclxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXHJcbiAgICAgICAgICBpZiAodGVtcGxhdGUucHJvamVjdE5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRoaXMuc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKSA+IC0xXHJcbiAgICAgICAgICAgIHx8IHRlbXBsYXRlLmNvZGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRoaXMuc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKSA+IC0xXHJcbiAgICAgICAgICAgIHx8IHRlbXBsYXRlLm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRoaXMuc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhZHRvLnB1c2godGVtcGxhdGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBtZXRhZGF0YWR0by5wdXNoKHRlbXBsYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1ldGFkYXRhZHRvLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlZEludGVybmFsKG1ldGFkYXRhZHRvWzBdLCBbMF0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuaGFzTmV4dCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmRhdGEgPSBtZXRhZGF0YWR0bztcclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgdGhpcy5kYXRhID0gbWV0YWRhdGFkdG87XHJcbiAgICAgIHRoaXMuZ3JpZERhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBjb25zdCBtc2cgPSBlcnJvci5lcnJvci5NZXNzYWdlICE9PSB1bmRlZmluZWQgPyBlcnJvci5lcnJvci5NZXNzYWdlIDogZXJyb3IuZXJyb3IuZXJyb3IubWVzc2FnZTtcclxuICAgICAgZ3NwLmlkZS5tZXNzYWdlci5lcnJvcignR2V0IE1ldGFkYXRhcyBFcnJvcjonICsgbXNnKTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIHByaXZhdGUgR2V0TG9jYWxNZXRhZGF0YUxpc3QocmVsb2FkVCA9IHRydWUpIHtcclxuICAgIGNvbnN0IG1ldGFkYXRhZHRvID0gW107XHJcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgLy8gdGhpcy5nc3BNZXRhU2VydmljZS5HZXREZXZSb290UGF0aCgpLnN1YnNjcmliZShyb290ID0+IHtcclxuICAgIC8vIHRoaXMubWV0YWRhdGFTZXJ2aWNlLnJvb3RQYXRoID0gcm9vdDtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcclxuICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLkdldE1ldGFkYXRhSW5mb3ModGhpcy5zY29wZSwgdGhpcy5jb2RlbGFuZ3VhZ2UsIHRoaXMuaXNNYXZlbkVuYWJsZSwgdGhpcy5wb3N0Zml4U2VsZWN0ZWQsIHRoaXMuc2VhcmNoVGV4dCwgdGhpcy5wYWdlKS5zdWJzY3JpYmUoKHRlbXBsYXRlczogYW55KSA9PiB7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBpZiAoIXRlbXBsYXRlcykge1xyXG4gICAgICAgIGdzcC5pZGUubWVzc2FnZXIuZXJyb3IoJ2Vycm9yIHRvIGdldCBtZXRhZGF0YSBpbmZvcycpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6aG156CB5aSE55CGXHJcbiAgICAgIGlmICh0ZW1wbGF0ZXMucGFnZSkge1xyXG4gICAgICAgIGlmICh0ZW1wbGF0ZXMucGFnZS5wYWdlU2l6ZSA8IHRoaXMuaW5pdFBhZ2VTaXplKSB7XHJcbiAgICAgICAgICB0aGlzLmhhc05leHQgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5oYXNOZXh0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYWdlLnBhZ2VTaXplID0gdGVtcGxhdGVzLnBhZ2UucGFnZVNpemU7XHJcbiAgICAgICAgdGhpcy5wYWdlLnBhZ2VJbmRleCA9IHRlbXBsYXRlcy5wYWdlLnBhZ2VJbmRleDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmhhc05leHQgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgbWV0YWRhdGFMaXN0ID0gdGVtcGxhdGVzLm1ldGFkYXRhSW5kZXhJdGVtcztcclxuICAgICAgaWYgKCFtZXRhZGF0YUxpc3QgfHwgbWV0YWRhdGFMaXN0Lmxlbmd0aCA8IDEpIHtcclxuICAgICAgICB0aGlzLm15U2VsZWN0aW9uID0gW107XHJcbiAgICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1ldGFkYXRhTGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmIChlbGVtZW50LnJlcG9Qa2cgJiYgZWxlbWVudC5yZXBvUGtnLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGVsZW1lbnQubnVnZXRQa2dOYW1lID0gZWxlbWVudC5yZXBvUGtnWzBdLm5hbWU7XHJcbiAgICAgICAgICBlbGVtZW50Lm51Z2V0UGtnVmVyc2lvbiA9IGVsZW1lbnQucmVwb1BrZ1swXS52ZXJzaW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXRhZGF0YWR0by5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHJlbG9hZFQpIHtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlZEludGVybmFsKG1ldGFkYXRhZHRvWzBdLCBbMF0pO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IG1ldGFkYXRhZHRvO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1ldGFkYXRhZHRvLmZvckVhY2goZHRvID0+IHtcclxuICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKGR0byk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgdGhpcy5kYXRhID0gbWV0YWRhdGFkdG87XHJcbiAgICAgIHRoaXMuZ3JpZERhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBjb25zdCBtc2cgPSBlcnJvci5lcnJvci5NZXNzYWdlICE9PSB1bmRlZmluZWQgPyBlcnJvci5lcnJvci5NZXNzYWdlIDogZXJyb3IuZXJyb3IuZXJyb3IubWVzc2FnZTtcclxuICAgICAgZ3NwLmlkZS5tZXNzYWdlci5lcnJvcignTWV0YWRhdGEgcmVxIGZhaWxlZDogJyArIG1zZyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzaG93T25seUJldmVyYWdlc0RldGFpbHMoZGF0YUl0ZW06IGFueSwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGRhdGFJdGVtLnJlcG9Qa2cgJiYgZGF0YUl0ZW0ucmVwb1BrZy5sZW5ndGggPiAxO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmVtb3RlTWV0YWRhdGFMaXN0KHJlbG9hZCkge1xyXG4gICAgY29uc3QgbWV0YWRhdGFkdG8gPSBbXTtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXHJcbiAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YUluZm9zKHRoaXMuc2NvcGUsIHRoaXMuY29kZWxhbmd1YWdlLCB0aGlzLmlzTWF2ZW5FbmFibGUsIHRoaXMucG9zdGZpeFNlbGVjdGVkLCB0aGlzLnNlYXJjaFRleHQsIHRoaXMucGFnZSwgdGhpcy5zZWxlY3RlZFNvdXJjZS52YWx1ZSkuc3Vic2NyaWJlKCh0ZW1wbGF0ZXM6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgaWYgKCF0ZW1wbGF0ZXMpIHtcclxuICAgICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdlcnJvciB0byBnZXQgbWV0YWRhdGEgaW5mb3MnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOmhteeggeWkhOeQhlxyXG4gICAgICBpZiAodGVtcGxhdGVzLnBhZ2UpIHtcclxuICAgICAgICBpZiAodGVtcGxhdGVzLnBhZ2UucGFnZVNpemUgPCB0aGlzLmluaXRQYWdlU2l6ZSkge1xyXG4gICAgICAgICAgdGhpcy5oYXNOZXh0ID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuaGFzTmV4dCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFnZS5wYWdlU2l6ZSA9IHRlbXBsYXRlcy5wYWdlLnBhZ2VTaXplO1xyXG4gICAgICAgIHRoaXMucGFnZS5wYWdlSW5kZXggPSB0ZW1wbGF0ZXMucGFnZS5wYWdlSW5kZXg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5oYXNOZXh0ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IG1ldGFkYXRhTGlzdCA9IHRlbXBsYXRlcy5tZXRhZGF0YUluZGV4SXRlbXM7XHJcbiAgICAgIGlmICghbWV0YWRhdGFMaXN0IHx8IG1ldGFkYXRhTGlzdC5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgdGhpcy5teVNlbGVjdGlvbiA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ3JpZERhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtZXRhZGF0YUxpc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQucmVwb1BrZyB8fCBlbGVtZW50LnJlcG9Qa2cubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb2RlbGFuZ3VhZ2UgPT09ICdkb3RuZXQnIHx8IHRoaXMuaXNNYXZlbkVuYWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIGVsZW1lbnQucmVwb1BrZy5zb3J0KHRoaXMuY29tcGFyZU51Z2V0KCd2ZXJzaW9uJykpO1xyXG4gICAgICAgICAgZWxlbWVudC5udWdldFBrZ05hbWUgPSBlbGVtZW50LnJlcG9Qa2dbMF0ubmFtZTtcclxuICAgICAgICAgIGVsZW1lbnQubnVnZXRQa2dWZXJzaW9uID0gZWxlbWVudC5yZXBvUGtnWzBdLnZlcnNpb247XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVsZW1lbnQucmVwb1BrZy5zb3J0KHRoaXMuY29tcGFyZSgndmVyc2lvbicpKTtcclxuICAgICAgICAgIGVsZW1lbnQuZ3JvdXBJZCA9IGVsZW1lbnQucmVwb1BrZ1swXS5ncm91cElkO1xyXG4gICAgICAgICAgZWxlbWVudC5hcnRpZmFjdElkID0gZWxlbWVudC5yZXBvUGtnWzBdLmFydGlmYWN0SWQ7XHJcbiAgICAgICAgICBlbGVtZW50Lm1hdmVuUGtnVmVyc2lvbiA9IGVsZW1lbnQucmVwb1BrZ1swXS52ZXJzaW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXRhZGF0YWR0by5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgICAgaWYgKCFtZXRhZGF0YWR0byB8fCBtZXRhZGF0YWR0by5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgdGhpcy5teVNlbGVjdGlvbiA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ3JpZERhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChyZWxvYWQpIHtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlZEludGVybmFsKG1ldGFkYXRhZHRvWzBdLCBbMF0pO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IG1ldGFkYXRhZHRvO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1ldGFkYXRhZHRvLmZvckVhY2goZHRvID0+IHtcclxuICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKGR0byk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgdGhpcy5kYXRhID0gbWV0YWRhdGFkdG87XHJcbiAgICAgIHRoaXMuZ3JpZERhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBjb25zdCBtc2cgPSBlcnJvci5lcnJvci5NZXNzYWdlICE9PSB1bmRlZmluZWQgPyBlcnJvci5lcnJvci5NZXNzYWdlIDogZXJyb3IuZXJyb3IuZXJyb3IubWVzc2FnZTtcclxuICAgICAgZ3NwLmlkZS5tZXNzYWdlci5lcnJvcignTWV0YWRhdGEgcmVxIGZhaWxlZDogJyArIG1zZyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbXBhcmUocHJvKSB7XHJcbiAgICByZXR1cm4gKG9iajEsIG9iajIpID0+IHtcclxuICAgICAgY29uc3QgdmFsMSA9IG9iajFbcHJvXTtcclxuICAgICAgY29uc3QgdmFsMiA9IG9iajJbcHJvXTtcclxuICAgICAgY29uc3QgdmFsYTEgPSB2YWwxLnNwbGl0KCcuJyk7XHJcbiAgICAgIGNvbnN0IHZhbGEyID0gdmFsMi5zcGxpdCgnLicpO1xyXG4gICAgICBjb25zdCB2MTAgPSB2YWxhMVswXS5zdWJzdHIoMSk7XHJcbiAgICAgIGNvbnN0IHYyMCA9IHZhbGEyWzBdLnN1YnN0cigxKTtcclxuICAgICAgaWYgKE51bWJlcih2MTApIDwgTnVtYmVyKHYyMCkpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTnVtYmVyKHYxMCkgPiBOdW1iZXIodjIwKSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTnVtYmVyKHZhbGExWzFdKSA8IE51bWJlcih2YWxhMlsxXSkpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTnVtYmVyKHZhbGExWzFdKSA+IE51bWJlcih2YWxhMlsxXSkpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdjEyID0gdmFsYTFbMl0ucmVwbGFjZSgnLVNOQVBTSE9UJywgJycpO1xyXG4gICAgICBjb25zdCB2MjIgPSB2YWxhMlsyXS5yZXBsYWNlKCctU05BUFNIT1QnLCAnJyk7XHJcbiAgICAgIGlmIChOdW1iZXIodjEyKSA8IE51bWJlcih2MjIpKSB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKE51bWJlcih2MTIpID4gTnVtYmVyKHYyMikpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHZhbGExWzJdLmluZGV4T2YoJy1TTkFQU0hPVCcpID4gMCkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBhcmVOdWdldChwcm8pIHtcclxuICAgIHJldHVybiAob2JqMSwgb2JqMikgPT4ge1xyXG4gICAgICBjb25zdCB2YWwxID0gb2JqMVtwcm9dO1xyXG4gICAgICBjb25zdCB2YWwyID0gb2JqMltwcm9dO1xyXG4gICAgICBjb25zdCB2YWxhMSA9IHZhbDEuc3BsaXQoJy4nKTtcclxuICAgICAgY29uc3QgdmFsYTIgPSB2YWwyLnNwbGl0KCcuJyk7XHJcbiAgICAgIGNvbnN0IHYxMCA9IHZhbGExWzBdO1xyXG4gICAgICBjb25zdCB2MjAgPSB2YWxhMlswXTtcclxuICAgICAgaWYgKE51bWJlcih2MTApIDwgTnVtYmVyKHYyMCkpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKE51bWJlcih2MTApID4gTnVtYmVyKHYyMCkpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTnVtYmVyKHZhbGExWzFdKSA8IE51bWJlcih2YWxhMlsxXSkpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTnVtYmVyKHZhbGExWzFdKSA+IE51bWJlcih2YWxhMlsxXSkpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdjEyID0gdmFsYTFbMl07XHJcbiAgICAgIGNvbnN0IHYyMiA9IHZhbGEyWzJdO1xyXG4gICAgICBpZiAodjEyLmluZGV4T2YoJ2FscGhhJykgPiAwKSB7XHJcbiAgICAgICAgaWYgKHYxMiA8IHYyMikge1xyXG4gICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2MTIgPiB2MjIpIHtcclxuICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKE51bWJlcih2MTIpIDwgTnVtYmVyKHYyMikpIHtcclxuICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTnVtYmVyKHYxMikgPiBOdW1iZXIodjIyKSkge1xyXG4gICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNjb3BlQ2hhbmdlZChjbGFzc2lmaWVyKSB7XHJcbiAgICB0aGlzLmNsYXNzaWZpZXIgPSBjbGFzc2lmaWVyO1xyXG4gICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgfVxyXG5cclxuICBnZXREYXRhKCkge1xyXG4gICAgaWYgKHRoaXMuY2xhc3NpZmllcikge1xyXG4gICAgICBpZiAodGhpcy5yZWxvYWQpIHtcclxuICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmVsb2FkVCA9IHRoaXMucmVsb2FkO1xyXG4gICAgICBpZiAodGhpcy5jbGFzc2lmaWVyLmlkID09PSAncHJvamVjdCcpIHtcclxuICAgICAgICB0aGlzLnNjb3BlID0gMDtcclxuICAgICAgICB0aGlzLkdldE1ldGFkYXRhTGlzdCgpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY2xhc3NpZmllci5pZCA9PT0gJ2JvJykge1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSAwO1xyXG4gICAgICAgIHRoaXMuR2V0TWV0YWRhdGFMaXN0SW5CbygpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY2xhc3NpZmllci5pZCA9PT0gJ3JlZicpIHtcclxuICAgICAgICB0aGlzLnNjb3BlID0gMztcclxuICAgICAgICB0aGlzLmdldFJlbW90ZU1ldGFkYXRhTGlzdChyZWxvYWRUKTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmNsYXNzaWZpZXIuaWQgPT09ICdyZW1vdGUnKSB7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IDI7XHJcbiAgICAgICAgdGhpcy5nZXRSZW1vdGVNZXRhZGF0YUxpc3QocmVsb2FkVCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jbGFzc2lmaWVyLmlkID09PSAnbG9jYWwnKSB7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IDE7XHJcbiAgICAgICAgdGhpcy5HZXRMb2NhbE1ldGFkYXRhTGlzdChyZWxvYWRUKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6YeN572u5LiA5qyh6K+35rGC5Lit55qE54q25oCBXHJcbiAgICAgIHRoaXMucmVsb2FkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOmAieS4reWFg+aVsOaNruWQjueahOS6i+S7tuWkhOeQhlxyXG4gIG9uU2VsZWN0aW9uQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICBpZiAoZXZlbnQgJiYgZXZlbnQuc2VsZWN0ZWRSb3dzICYmIGV2ZW50LnNlbGVjdGVkUm93cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGRhdGFJdGVtID0gZXZlbnQuc2VsZWN0ZWRSb3dzWzBdLmRhdGFJdGVtO1xyXG4gICAgICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlZEludGVybmFsKGRhdGFJdGVtLCBbZXZlbnQuc2VsZWN0ZWRSb3dzWzBdLmluZGV4XSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uU2VsZWN0aW9uQ2hhbmdlZEludGVybmFsKGRhdGFJdGVtLCBpbmRleCkge1xyXG4gICAgY29uc3QgbmV3RGF0YSA9IHRoaXMubWFrZU5ld0RhdGEoZGF0YUl0ZW0pO1xyXG4gICAgaWYgKHRoaXMuc2NvcGUgPT09IDIgfHwgdGhpcy5zY29wZSA9PT0gMykge1xyXG4gICAgICBuZXdEYXRhLnJlcG9Qa2cucHVzaChkYXRhSXRlbS5yZXBvUGtnWzBdKTtcclxuICAgIH1cclxuICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZChuZXdEYXRhLCBpbmRleCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNlbGVjdGlvbkNoYW5nZWQoZGF0YUl0ZW0sIGluZGV4ID0gW10pIHtcclxuICAgIHRoaXMuc2VsZWN0ZWRNZXRhZGF0YUNoYW5nZWQuZW1pdChkYXRhSXRlbSk7XHJcbiAgICB0aGlzLm15U2VsZWN0aW9uID0gaW5kZXg7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1ha2VOZXdEYXRhKGRhdGFJdGVtKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtZFBrZ05hbWU6IGRhdGFJdGVtLm1kUGtnTmFtZSxcclxuICAgICAgcmVwb1BrZzogW10sXHJcbiAgICAgIGlkOiBkYXRhSXRlbS5pZCxcclxuICAgICAgbmFtZVNwYWNlOiBkYXRhSXRlbS5uYW1lU3BhY2UsXHJcbiAgICAgIGNvZGU6IGRhdGFJdGVtLmNvZGUsXHJcbiAgICAgIG5hbWU6IGRhdGFJdGVtLm5hbWUsXHJcbiAgICAgIGZpbGVOYW1lOiBkYXRhSXRlbS5maWxlTmFtZSxcclxuICAgICAgdHlwZTogZGF0YUl0ZW0udHlwZSxcclxuICAgICAgYml6b2JqZWN0SUQ6IGRhdGFJdGVtLmJpem9iamVjdElELFxyXG4gICAgICBsYW5ndWFnZTogZGF0YUl0ZW0ubGFuZ3VhZ2UsXHJcbiAgICAgIGlzVHJhbnNsYXRpbmc6IGRhdGFJdGVtLmlzVHJhbnNsYXRpbmcsXHJcbiAgICAgIHJlbGF0aXZlUGF0aDogZGF0YUl0ZW0ucmVsYXRpdmVQYXRoLFxyXG4gICAgICBleHRlbmRQcm9wZXJ0eTogZGF0YUl0ZW0uZXh0ZW5kUHJvcGVydHksXHJcbiAgICAgIHByb2Nlc3NNb2RlOiBkYXRhSXRlbS5wcm9jZXNzTW9kZVxyXG4gICAgfTtcclxuICB9XHJcbiAgb25TZWxlY3RlZFBrZ0NoYW5nZWQoZGF0YUl0ZW0pIHtcclxuICAgIGlmIChkYXRhSXRlbSAmJiBkYXRhSXRlbS5yZXBvUGtnICYmIGRhdGFJdGVtLnJlcG9Qa2cubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBuZXdEYXRhID0gdGhpcy5tYWtlTmV3RGF0YShkYXRhSXRlbSk7XHJcbiAgICAgIGlmIChkYXRhSXRlbS5zZWxlY3RlZFBrZykge1xyXG4gICAgICAgIG5ld0RhdGEucmVwb1BrZy5wdXNoKGRhdGFJdGVtLnNlbGVjdGVkUGtnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBuZXdEYXRhLnJlcG9Qa2cucHVzaChkYXRhSXRlbS5yZXBvUGtnWzBdKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZWQobmV3RGF0YSwgW10pO1xyXG4gICAgfVxyXG4gIH1cclxuICBnb1NlYXJjaCgpIHtcclxuICAgIGlmICghdGhpcy5zZWFyY2hUZXh0KSB7IHRoaXMuc2VhcmNoVGV4dCA9ICcnOyB9XHJcbiAgICBjb25zb2xlLmxvZygn5pCc57SiJyk7XHJcbiAgICBjb25zdCBzZWFyY2hUZXh0VHJpbSA9IHRoaXMuc2VhcmNoVGV4dC50cmltKCk7XHJcbiAgICBpZiAodGhpcy5zZWFyY2hUZXh0ICYmIHRoaXMuc2VhcmNoVGV4dEZvckR1cCA9PT0gc2VhcmNoVGV4dFRyaW0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZWFyY2hUZXh0Rm9yRHVwID0gc2VhcmNoVGV4dFRyaW07XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLnNlYXJjaFRleHQpO1xyXG4gICAgdGhpcy5zZWFyY2hUZXh0ID0gc2VhcmNoVGV4dFRyaW07XHJcbiAgICAvLyDmkJzntKJcclxuICAgIGNvbnNvbGUubG9nKCdzZWFyY2ggZm9yICcgKyB0aGlzLnNlYXJjaFRleHQpO1xyXG4gICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgfVxyXG5cclxuICBnb05leHQoKSB7XHJcbiAgICBjb25zb2xlLmxvZygn5LiL5LiA6aG1Jyk7XHJcbiAgICB0aGlzLnBhZ2UucGFnZUluZGV4ID0gdGhpcy5wYWdlLnBhZ2VJbmRleCArIDE7XHJcbiAgICB0aGlzLnJlbG9hZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgfVxyXG5cclxuICBvbkNvbmZsaWN0QXZvaWRGbGFnQ2hhbmdlZCgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdDb25mbGljdEF2b2lkRmxhZyAnICsgdGhpcy5jb25mbGljdEF2b2lkRmxhZyk7XHJcbiAgICB0aGlzLmdldERhdGEoKTtcclxuICB9XHJcblxyXG4gIHR5cGVTZWxlY3RlZENoYW5nZWQobWRTZWxldGVkKSB7XHJcbiAgICBpZiAoIW1kU2VsZXRlZCkge1xyXG4gICAgICBtZFNlbGV0ZWQgPSB0aGlzLnNlbGVjdGVkVHlwZTtcclxuICAgIH1cclxuICAgIGlmIChtZFNlbGV0ZWQpIHtcclxuICAgICAgaWYgKG1kU2VsZXRlZC52YWx1ZSA9PT0gdGhpcy5hbGxUeXBlLnZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5wb3N0Zml4U2VsZWN0ZWQgPSB0aGlzLnBvc3RmaXg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wb3N0Zml4U2VsZWN0ZWQgPSBtZFNlbGV0ZWQudmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzb3VyY2VTZWxlY3RlZENoYW5nZWQoc291cmNlKSB7XHJcbiAgICBpZiAoIXNvdXJjZSkge1xyXG4gICAgICBzb3VyY2UgPSB0aGlzLnNlbGVjdGVkU291cmNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZWxlY3RlZFNvdXJjZSA9IHNvdXJjZTtcclxuICAgIHRoaXMuZ2V0RGF0YSgpO1xyXG4gIH1cclxufVxyXG4iXX0=