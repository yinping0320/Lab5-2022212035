/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/treeclassifier/treeclassifier.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { MetadataService } from '../../metadata.service';
import { GSPMetadataService } from '../../../metadata.service';
var TreeclassifierComponent = /** @class */ (function () {
    function TreeclassifierComponent(metadataService, gspMetadataService) {
        this.metadataService = metadataService;
        this.gspMetadataService = gspMetadataService;
        this.selectedKeys = ['0'];
        this.classifier = [
            { id: 'project', text: '当前工程' }
        ];
    }
    /**
     * @return {?}
     */
    TreeclassifierComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.metadataService.GetMetadataProjPath(this.metadataPath).subscribe((/**
         * @param {?} proj
         * @return {?}
         */
        function (proj) {
            _this.metadataService.currentProjectPath = proj.projectPath;
            if (_this.onlyDisplayCurrentProject === true) {
                _this.files = _this.classifier;
                _this.metadataService.selectedChange.emit(_this.files[0]); // 默认本工程下的
            }
            else {
                // 树节点mock数据
                _this.gspMetadataService.getMavenSetting().subscribe((/**
                 * @param {?} maven
                 * @return {?}
                 */
                function (maven) {
                    if (maven === true) {
                        _this.gspMetadataService.getCodeLanguage(proj.projectPath).subscribe((/**
                         * @param {?} lang
                         * @return {?}
                         */
                        function (lang) {
                            if (lang === 'java') {
                                _this.files = _this.metadataService.getMetadataClassifier('bo');
                                _this.metadataService.selectedChange.emit(_this.files[0]); // 默认本工程下的
                            }
                            else {
                                _this.files = _this.metadataService.getMetadataClassifier('project');
                                _this.metadataService.selectedChange.emit(_this.files[0]); // 默认本工程下的
                            }
                        }));
                    }
                    else {
                        _this.files = _this.metadataService.getMetadataClassifier('project');
                        _this.metadataService.selectedChange.emit(_this.files[0]); // 默认本工程下的
                    }
                }));
            }
        }));
    };
    // 树节点点击后事件
    // 树节点点击后事件
    /**
     * @param {?} event
     * @return {?}
     */
    TreeclassifierComponent.prototype.nodeSelect = 
    // 树节点点击后事件
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.metadataService.selectedChange.emit(event.dataItem);
    };
    TreeclassifierComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-treeclassifier',
                    template: "<div class=\"templateTree befTree\">\r\n    <div class=\"treeClassifier\">\r\n        <kendo-treeview\r\n            [nodes]=\"files\"\r\n            textField=\"text\"\r\n            kendoTreeViewExpandable\r\n            kendoTreeViewSelectable\r\n            kendoTreeViewHierarchyBinding\r\n            childrenField=\"items\"\r\n            (selectionChange)=\"this.nodeSelect($event)\"\r\n            [(selectedKeys)]=\"this.selectedKeys\"\r\n        >\r\n        </kendo-treeview>\r\n    </div>\r\n</div>",
                    styles: [".treeClassifier .k-treeview{overflow:visible}.templateTree{padding:5px;margin-left:5px}"]
                }] }
    ];
    /** @nocollapse */
    TreeclassifierComponent.ctorParameters = function () { return [
        { type: MetadataService },
        { type: GSPMetadataService }
    ]; };
    TreeclassifierComponent.propDecorators = {
        metadataPath: [{ type: Input }],
        onlyDisplayCurrentProject: [{ type: Input }]
    };
    return TreeclassifierComponent;
}());
export { TreeclassifierComponent };
if (false) {
    /** @type {?} */
    TreeclassifierComponent.prototype.metadataPath;
    /** @type {?} */
    TreeclassifierComponent.prototype.onlyDisplayCurrentProject;
    /** @type {?} */
    TreeclassifierComponent.prototype.files;
    /** @type {?} */
    TreeclassifierComponent.prototype.selectedKeys;
    /** @type {?} */
    TreeclassifierComponent.prototype.classifier;
    /**
     * @type {?}
     * @private
     */
    TreeclassifierComponent.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    TreeclassifierComponent.prototype.gspMetadataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZWNsYXNzaWZpZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1sY20vbWV0YWRhdGEtc2VsZWN0b3IvIiwic291cmNlcyI6WyJtZXRhZGF0YS9tZXRhZGF0YS1zZWxlY3QvY29tcG9uZW50cy90cmVlY2xhc3NpZmllci90cmVlY2xhc3NpZmllci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFnQyxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRS9EO0lBZ0JFLGlDQUFvQixlQUFnQyxFQUFVLGtCQUFzQztRQUFoRixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFBVSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBTHBHLGlCQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixlQUFVLEdBQVU7WUFDbEIsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7U0FDaEMsQ0FBQztJQUVzRyxDQUFDOzs7O0lBRXpHLDBDQUFROzs7SUFBUjtRQUFBLGlCQTBCQztRQXpCQyxJQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxJQUFJO1lBQ3hFLEtBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUMzRCxJQUFJLEtBQUksQ0FBQyx5QkFBeUIsS0FBSyxJQUFJLEVBQUU7Z0JBQzNDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQztnQkFDN0IsS0FBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7YUFDcEU7aUJBQU07Z0JBQ0wsWUFBWTtnQkFDWixLQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZSxFQUFFLENBQUMsU0FBUzs7OztnQkFBQyxVQUFBLEtBQUs7b0JBQ3ZELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTt3QkFDbEIsS0FBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUzs7Ozt3QkFBQyxVQUFBLElBQUk7NEJBQ3RFLElBQUksSUFBSSxLQUFLLE1BQU0sRUFBRTtnQ0FDbkIsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO2dDQUM5RCxLQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTs2QkFDcEU7aUNBQU07Z0NBQ0wsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2dDQUNuRSxLQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTs2QkFDcEU7d0JBQ0gsQ0FBQyxFQUFDLENBQUM7cUJBQ0o7eUJBQU07d0JBQ0wsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUNuRSxLQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTtxQkFDcEU7Z0JBQ0gsQ0FBQyxFQUFDLENBQUM7YUFDSjtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7Ozs7OztJQUNYLDRDQUFVOzs7Ozs7SUFBVixVQUFXLEtBQUs7UUFDZCxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7O2dCQWpERixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLDJnQkFBOEM7O2lCQUUvQzs7OztnQkFSUSxlQUFlO2dCQUNmLGtCQUFrQjs7OytCQVV4QixLQUFLOzRDQUNMLEtBQUs7O0lBeUNSLDhCQUFDO0NBQUEsQUFsREQsSUFrREM7U0EzQ1ksdUJBQXVCOzs7SUFDbEMsK0NBQThCOztJQUM5Qiw0REFBNEM7O0lBQzVDLHdDQUFXOztJQUNYLCtDQUFxQjs7SUFDckIsNkNBRUU7Ozs7O0lBRVUsa0RBQXdDOzs7OztJQUFFLHFEQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbWV0YWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IEdTUE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL21ldGFkYXRhLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnYXBwLXRyZWVjbGFzc2lmaWVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdHJlZWNsYXNzaWZpZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3RyZWVjbGFzc2lmaWVyLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFRyZWVjbGFzc2lmaWVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKSBtZXRhZGF0YVBhdGg6IHN0cmluZztcclxuICBASW5wdXQoKSBvbmx5RGlzcGxheUN1cnJlbnRQcm9qZWN0OiBib29sZWFuO1xyXG4gIGZpbGVzOiBhbnk7XHJcbiAgc2VsZWN0ZWRLZXlzID0gWycwJ107XHJcbiAgY2xhc3NpZmllcjogYW55W10gPSBbXHJcbiAgICB7IGlkOiAncHJvamVjdCcsIHRleHQ6ICflvZPliY3lt6XnqIsnIH1cclxuICBdO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1ldGFkYXRhU2VydmljZTogTWV0YWRhdGFTZXJ2aWNlLCBwcml2YXRlIGdzcE1ldGFkYXRhU2VydmljZTogR1NQTWV0YWRhdGFTZXJ2aWNlKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YVByb2pQYXRoKHRoaXMubWV0YWRhdGFQYXRoKS5zdWJzY3JpYmUocHJvaiA9PiB7XHJcbiAgICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLmN1cnJlbnRQcm9qZWN0UGF0aCA9IHByb2oucHJvamVjdFBhdGg7XHJcbiAgICAgIGlmICh0aGlzLm9ubHlEaXNwbGF5Q3VycmVudFByb2plY3QgPT09IHRydWUpIHtcclxuICAgICAgICB0aGlzLmZpbGVzID0gdGhpcy5jbGFzc2lmaWVyO1xyXG4gICAgICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLnNlbGVjdGVkQ2hhbmdlLmVtaXQodGhpcy5maWxlc1swXSk7IC8vIOm7mOiupOacrOW3peeoi+S4i+eahFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIOagkeiKgueCuW1vY2vmlbDmja5cclxuICAgICAgICB0aGlzLmdzcE1ldGFkYXRhU2VydmljZS5nZXRNYXZlblNldHRpbmcoKS5zdWJzY3JpYmUobWF2ZW4gPT4ge1xyXG4gICAgICAgICAgaWYgKG1hdmVuID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3NwTWV0YWRhdGFTZXJ2aWNlLmdldENvZGVMYW5ndWFnZShwcm9qLnByb2plY3RQYXRoKS5zdWJzY3JpYmUobGFuZyA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGxhbmcgPT09ICdqYXZhJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlcyA9IHRoaXMubWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhQ2xhc3NpZmllcignYm8nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLnNlbGVjdGVkQ2hhbmdlLmVtaXQodGhpcy5maWxlc1swXSk7IC8vIOm7mOiupOacrOW3peeoi+S4i+eahFxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVzID0gdGhpcy5tZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGFDbGFzc2lmaWVyKCdwcm9qZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5zZWxlY3RlZENoYW5nZS5lbWl0KHRoaXMuZmlsZXNbMF0pOyAvLyDpu5jorqTmnKzlt6XnqIvkuIvnmoRcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5maWxlcyA9IHRoaXMubWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhQ2xhc3NpZmllcigncHJvamVjdCcpO1xyXG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5zZWxlY3RlZENoYW5nZS5lbWl0KHRoaXMuZmlsZXNbMF0pOyAvLyDpu5jorqTmnKzlt6XnqIvkuIvnmoRcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyDmoJHoioLngrnngrnlh7vlkI7kuovku7ZcclxuICBub2RlU2VsZWN0KGV2ZW50KSB7XHJcbiAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5zZWxlY3RlZENoYW5nZS5lbWl0KGV2ZW50LmRhdGFJdGVtKTtcclxuICB9XHJcbn1cclxuIl19