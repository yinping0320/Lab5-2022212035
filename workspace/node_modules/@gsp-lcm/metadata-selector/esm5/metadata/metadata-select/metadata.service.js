/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/metadata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { GSPMetadataService } from '../metadata.service';
// mock数据
/** @type {?} */
var classifier = [
    { id: 'project', text: '工程内元数据' },
    { id: 'local', text: '离线的元数据' },
    { id: 'remote', text: '仓库中元数据' },
    { id: 'ref', text: '引用的元数据' } // 3
];
/** @type {?} */
var classifierForBo = [
    { id: 'bo', text: 'BO内元数据' },
    { id: 'local', text: '离线的元数据' },
    { id: 'remote', text: '仓库中元数据' },
    { id: 'ref', text: '引用的元数据' } // 3
];
var MetadataService = /** @class */ (function () {
    function MetadataService(gspMetadataService) {
        this.gspMetadataService = gspMetadataService;
        this.selectedChange = new EventEmitter();
        // tslint:disable-next-line:member-ordering
        this.metadatas = [];
        // tslint:disable-next-line:member-ordering
        this.packages = [];
        this.packRefPath = '/packages';
    }
    /**
     * @param {?} type
     * @return {?}
     */
    MetadataService.prototype.getMetadataClassifier = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'bo':
                return classifierForBo;
            case 'project':
            default:
                return classifier;
        }
    };
    /**
     * @param {?} metadata
     * @return {?}
     */
    MetadataService.prototype.addMetadata = /**
     * @param {?} metadata
     * @return {?}
     */
    function (metadata) {
        this.metadatas.push(metadata);
    };
    /**
     * @return {?}
     */
    MetadataService.prototype.clearMetadata = /**
     * @return {?}
     */
    function () {
        this.metadatas = [];
    };
    /**
     * @param {?} mp
     * @return {?}
     */
    MetadataService.prototype.addPackage = /**
     * @param {?} mp
     * @return {?}
     */
    function (mp) {
        this.packages.push(mp);
    };
    /**
     * @return {?}
     */
    MetadataService.prototype.clearPackage = /**
     * @return {?}
     */
    function () {
        this.packages = [];
    };
    // 获取当前工程下所有的元数据
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    MetadataService.prototype.GetMetadataList = 
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    function (typeName) {
        return this.gspMetadataService.GetMetadataList(this.currentProjectPath, typeName);
    };
    // 获取当前工程下所有的元数据
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    MetadataService.prototype.GetMetadataListInBo = 
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    function (typeName) {
        return this.gspMetadataService.GetMetadataListInBo(this.currentProjectPath, typeName);
    };
    /**
     * @param {?} typeCode
     * @param {?} postfix
     * @param {?} filter
     * @return {?}
     */
    MetadataService.prototype.GetMetadataByFilter = /**
     * @param {?} typeCode
     * @param {?} postfix
     * @param {?} filter
     * @return {?}
     */
    function (typeCode, postfix, filter) {
        return this.gspMetadataService.GetMetadataByFilter(this.currentProjectPath, typeCode, filter, postfix);
    };
    // 获取元数据工程信息（获取本工程依赖的元数据包基本信息）
    // 获取元数据工程信息（获取本工程依赖的元数据包基本信息）
    /**
     * @return {?}
     */
    MetadataService.prototype.GetMetadataProjectInfo = 
    // 获取元数据工程信息（获取本工程依赖的元数据包基本信息）
    /**
     * @return {?}
     */
    function () {
        return this.gspMetadataService.GetProjectInfo(this.currentProjectPath);
    };
    // 获取工程路径
    // 获取工程路径
    /**
     * @param {?} metadataPath
     * @return {?}
     */
    MetadataService.prototype.GetMetadataProjPath = 
    // 获取工程路径
    /**
     * @param {?} metadataPath
     * @return {?}
     */
    function (metadataPath) {
        return this.gspMetadataService.GetProjectInfo(metadataPath);
    };
    // tslint:disable-next-line:max-line-length
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} scope
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @return {?}
     */
    MetadataService.prototype.GetMetadataInfos = 
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} scope
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @return {?}
     */
    function (scope, codelanguage, isMavenEnable, metadataType, searchText, page, selectedPackageSource) {
        if (metadataType === void 0) { metadataType = null; }
        if (searchText === void 0) { searchText = null; }
        if (page === void 0) { page = null; }
        if (selectedPackageSource === void 0) { selectedPackageSource = null; }
        if (codelanguage === 'dotnet' || isMavenEnable === false) {
            return this.gspMetadataService.GetMetadataInfosByScope(scope, metadataType, searchText, page, selectedPackageSource, this.currentProjectPath);
        }
        else {
            return this.gspMetadataService.GetMetadataInfosByScope4Java(scope, metadataType, searchText, page, selectedPackageSource, this.currentProjectPath);
        }
    };
    // 获取元数据包中所包含的元数据信息
    // 获取元数据包中所包含的元数据信息
    /**
     * @param {?} packPath
     * @param {?} packageName
     * @return {?}
     */
    MetadataService.prototype.GetMetadataPackageInfo = 
    // 获取元数据包中所包含的元数据信息
    /**
     * @param {?} packPath
     * @param {?} packageName
     * @return {?}
     */
    function (packPath, packageName) {
        /** @type {?} */
        var fullName = '';
        if (packageName.endsWith('mdpkg')) {
            fullName = packageName;
        }
        else {
            fullName = packageName + '.mdpkg';
        }
        return this.gspMetadataService.GetMetadataPackageInfo(packPath, fullName);
    };
    /**
     * @param {?} scope
     * @param {?} metadataIndexDto
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @return {?}
     */
    MetadataService.prototype.pickMetadataIndex = /**
     * @param {?} scope
     * @param {?} metadataIndexDto
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @return {?}
     */
    function (scope, metadataIndexDto, codelanguage, isMavenEnable) {
        // if (codelanguage === 'dotnet' || isMavenEnable === false) {
        //   scope = scope === 3 ? 2 : scope;
        //   return this.gspMetadataService.pickMetadataIndex(scope, this.currentProjectPath, metadataIndexDto);
        // } else {
        return this.gspMetadataService.pickMetadataIndex(scope, this.currentProjectPath, metadataIndexDto);
        // }
    };
    // Load元数据
    // Load元数据
    /**
     * @param {?} metadata
     * @return {?}
     */
    MetadataService.prototype.LoadTheMetadata = 
    // Load元数据
    /**
     * @param {?} metadata
     * @return {?}
     */
    function (metadata) {
        if (metadata) {
            /** @type {?} */
            var fileName = metadata.fileName;
            /** @type {?} */
            var relativePath = metadata.relativePath;
            return this.gspMetadataService.LoadMetadataInBo(fileName, relativePath, this.currentProjectPath);
        }
        return new Observable();
    };
    // Load元数据
    // Load元数据
    /**
     * @return {?}
     */
    MetadataService.prototype.LoadMetadata = 
    // Load元数据
    /**
     * @return {?}
     */
    function () {
        if (this.metadatas.length > 0) {
            /** @type {?} */
            var index1 = this.metadatas.length;
            if (index1 > 0) {
                /** @type {?} */
                var index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
                if (index2 > 0) {
                    /** @type {?} */
                    var fileName = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].FileName;
                    /** @type {?} */
                    var relativePath = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].RelativePath;
                    return this.gspMetadataService.LoadMetadata(fileName, relativePath);
                }
            }
            else {
                return new Observable();
            }
        }
    };
    // // 获取元数据以及包的信息
    // GetTheMetadataFromPackage(metadata): Observable<any> {
    //   if (metadata) {
    //     const packageName = metadata.mdPkgName;
    //     const metadataID = metadata.id;
    //     return this.gspMetadataService.GetMetadataFromPackage(packageName, null, metadataID);
    //   }
    //   return new Observable<any>();
    // }
    // // 获取元数据以及包的信息
    // GetMetadataFromPackage(): Observable<any> {
    //   const index1 = this.metadatas.length;
    //   if (index1 > 0) {
    //     const index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
    //     if (index2 > 0) {
    //       const packageName = this.metadatas[index1 - 1].treenode.PackageName;
    //       const packagePath = this.metadatas[index1 - 1].treenode.Location;
    //       const metadataID = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].ID;
    //       return this.gspMetadataService.GetMetadataFromPackage(packageName, packagePath, metadataID);
    //     }
    //   } else {
    //     return new Observable<any>();
    //   }
    // }
    // 获取某个路径下的所有元数据包
    // // 获取元数据以及包的信息
    // GetTheMetadataFromPackage(metadata): Observable<any> {
    //   if (metadata) {
    //     const packageName = metadata.mdPkgName;
    //     const metadataID = metadata.id;
    //     return this.gspMetadataService.GetMetadataFromPackage(packageName, null, metadataID);
    //   }
    //   return new Observable<any>();
    // }
    // // 获取元数据以及包的信息
    // GetMetadataFromPackage(): Observable<any> {
    //   const index1 = this.metadatas.length;
    //   if (index1 > 0) {
    //     const index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
    //     if (index2 > 0) {
    //       const packageName = this.metadatas[index1 - 1].treenode.PackageName;
    //       const packagePath = this.metadatas[index1 - 1].treenode.Location;
    //       const metadataID = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].ID;
    //       return this.gspMetadataService.GetMetadataFromPackage(packageName, packagePath, metadataID);
    //     }
    //   } else {
    //     return new Observable<any>();
    //   }
    // }
    // 获取某个路径下的所有元数据包
    /**
     * @return {?}
     */
    MetadataService.prototype.GetMetadataPackages = 
    // // 获取元数据以及包的信息
    // GetTheMetadataFromPackage(metadata): Observable<any> {
    //   if (metadata) {
    //     const packageName = metadata.mdPkgName;
    //     const metadataID = metadata.id;
    //     return this.gspMetadataService.GetMetadataFromPackage(packageName, null, metadataID);
    //   }
    //   return new Observable<any>();
    // }
    // // 获取元数据以及包的信息
    // GetMetadataFromPackage(): Observable<any> {
    //   const index1 = this.metadatas.length;
    //   if (index1 > 0) {
    //     const index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
    //     if (index2 > 0) {
    //       const packageName = this.metadatas[index1 - 1].treenode.PackageName;
    //       const packagePath = this.metadatas[index1 - 1].treenode.Location;
    //       const metadataID = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].ID;
    //       return this.gspMetadataService.GetMetadataFromPackage(packageName, packagePath, metadataID);
    //     }
    //   } else {
    //     return new Observable<any>();
    //   }
    // }
    // 获取某个路径下的所有元数据包
    /**
     * @return {?}
     */
    function () {
        return this.gspMetadataService.GetMetadataPackages('packages');
    };
    // 更新工程引用
    // 更新工程引用
    /**
     * @param {?} packageHeader
     * @return {?}
     */
    MetadataService.prototype.UpdateMetadataProject = 
    // 更新工程引用
    /**
     * @param {?} packageHeader
     * @return {?}
     */
    function (packageHeader) {
        // this.gspMetadataService.UpdateMetadataProject(this.currentProjectPath, packageHeader).then(response => {
        //   if (response.status === 200) {
        //     this.treeData = [];
        //     this.Refresh();
        //   }
        // });
        return this.gspMetadataService.UpdateMetadataProject(this.currentProjectPath, packageHeader);
    };
    /**
     * @return {?}
     */
    MetadataService.prototype.getCodeLanguage = /**
     * @return {?}
     */
    function () {
        return this.gspMetadataService.getCodeLanguage(this.currentProjectPath);
    };
    /**
     * @return {?}
     */
    MetadataService.prototype.getProcessMode = /**
     * @return {?}
     */
    function () {
        return this.gspMetadataService.getProcessMode(this.currentProjectPath);
    };
    /**
     * @return {?}
     */
    MetadataService.prototype.Refresh = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeData = this.getMetadataClassifier('');
        this.treeData[1].items = [];
        /** @type {?} */
        var packages = [];
        this.GetMetadataProjPath(this.currentProjectPath).subscribe((/**
         * @param {?} proj
         * @return {?}
         */
        function (proj) {
            _this.currentProjectPath = proj.projectPath;
            _this.GetMetadataProjectInfo().subscribe((/**
             * @param {?} meta
             * @return {?}
             */
            function (meta) {
                packages = meta.nugetPackageRefs;
                /** @type {?} */
                var index = 0;
                packages.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var child = {
                        id: item.name,
                        text: item.name,
                        items: []
                    };
                    if (_this.treeData) {
                        _this.treeData[1].items.push(child);
                    }
                    _this.gspMetadataService.GetDevRootPath().subscribe((/**
                     * @param {?} root
                     * @return {?}
                     */
                    function (root) {
                        /** @type {?} */
                        var rootPath = root + _this.packRefPath;
                        _this.gspMetadataService.GetMetadataPackagesUnderNugetDir(rootPath + '/' + item.name).subscribe((/**
                         * @param {?} pkgs
                         * @return {?}
                         */
                        function (pkgs) {
                            if (pkgs) {
                                /** @type {?} */
                                var mdpkg_1;
                                pkgs.forEach((/**
                                 * @param {?} pkg
                                 * @return {?}
                                 */
                                function (pkg) {
                                    mdpkg_1 = {
                                        id: pkg.header.name,
                                        text: pkg.header.name,
                                        desc: pkg.header.location
                                    };
                                    child.items.push(mdpkg_1);
                                }));
                                // this.files[1].items[index].push(mdpkg);
                            }
                            index = index + 1;
                        }));
                    }));
                }));
            }));
        }));
    };
    /**
     * @return {?}
     */
    MetadataService.prototype.getBoPath = /**
     * @return {?}
     */
    function () {
        return this.gspMetadataService.getBoPath(this.currentProjectPath);
    };
    MetadataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MetadataService.ctorParameters = function () { return [
        { type: GSPMetadataService }
    ]; };
    return MetadataService;
}());
export { MetadataService };
if (false) {
    /** @type {?} */
    MetadataService.prototype.currentProjectPath;
    /** @type {?} */
    MetadataService.prototype.rootPath;
    /** @type {?} */
    MetadataService.prototype.packRefPath;
    /** @type {?} */
    MetadataService.prototype.selectedChange;
    /** @type {?} */
    MetadataService.prototype.treeData;
    /** @type {?} */
    MetadataService.prototype.metadatas;
    /** @type {?} */
    MetadataService.prototype.packages;
    /**
     * @type {?}
     * @private
     */
    MetadataService.prototype.gspMetadataService;
}
//# sourceMappingURL=data:application/json;base64,