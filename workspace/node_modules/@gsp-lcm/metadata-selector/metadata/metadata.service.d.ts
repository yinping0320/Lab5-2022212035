import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { MetadataDto } from './metadatadto';
import { Subject } from 'rxjs';
export declare class GSPMetadataService {
    private http;
    private url;
    selectPath: string;
    selectType: string;
    sessionId: string;
    private SERVER_IP;
    private METADATA_BASE_PATH;
    private GSP_PROJECT_BASE_PATH;
    private Project_Base_Path;
    private DBO_BASE_PATH;
    private METADATA_PROJECT_BASE_PATH;
    private METADATA_PACKAGE_BASE_PATH;
    private METADATA_CONFIG_BASE_PATH;
    private DevBasinBOInfo_Base_Path;
    private NUGET_BASE_PATH;
    private SETTING_BASE_PATH;
    private MAVEN_JAVA_BASE_PATH;
    private FS_JAVA_BASE_PATH;
    private JAVA_CODE_GENERATOR;
    private JAVA_BUILD;
    private METADATA_JAVA_BASE_PATH;
    constructor(http: HttpClient, url: string);
    /**
     * 元数据设计时服务
     */
    Pack(): void;
    PackageBuild(path: string): Observable<any>;
    IsProjExistRecursively(path: string): Observable<any>;
    InitializeMetadataEntity(metadataDto: MetadataDto): Observable<any>;
    CreateMetadata(metadataDto: MetadataDto): Observable<any>;
    DeleteMetadata(): void;
    SaveMetadata(metadataDto: MetadataDto, sessionId: string): Observable<any>;
    LoadMetadata(fullName: string, path: string): Observable<any>;
    LoadMetadataInBo(fullName: string, path: string, currentProjPath: string): Observable<any>;
    DeleteFolder(): void;
    DeleteProj(): void;
    DeleteMetadataOrDir(fullPath: string): Observable<any>;
    isMetadataRefed(fullPath: string): Observable<any>;
    DeleteProject(path: string): Observable<any>;
    GetDevRootPath(): Observable<any>;
    LoadDBO(fullName: string, path: string, sessionId: string): Observable<any>;
    CreateDir(path: string, name: string): Observable<any>;
    GetProjectInfo(path: string): Observable<any>;
    GetGspProjInfo(path: string): Observable<any>;
    GetProjPath(path: string): Observable<any>;
    GetRefMetadata(path: string, metadataid: string, sessionId: string): Observable<any>;
    GetMetadataList(spacePath: string, typeName: string): Observable<any>;
    GetMetadataListInBo(projPath: string, typeName: string): Observable<any>;
    GetMetadataByFilter(path: string, typeCode: string, filter: string, postfix: string): Observable<Object>;
    pickMetadataIndex(scope: number, currentProjPath: string, metadataIndexDto: any): Observable<any>;
    GetMetadataPackageInfo(packagePath: string, packageName: string): Observable<any>;
    GetLocalPackages(path: string): Observable<any>;
    GetMetadataInfosByScope(scope: number, metadataType?: any, searchText?: any, page?: any, selectedPackageSource?: any, currentProjPath?: string): Observable<Object>;
    GetMetadataInfosByScope4Java(scope: number, metadataType?: any, searchText?: any, page?: any, selectedPackageSource?: any, currentProjPath?: string): Observable<Object>;
    GetMetadataPackages(path: string): Observable<any>;
    GetMetadataTypeList(): Observable<any>;
    GetPostfix(metadataType: any): Observable<any>;
    UpdateMetadataProject(projectPath: string, packageHeader: any): Observable<any>;
    GetDevBasicBOInfo(businessObjectID: string, sessionId: string): Observable<any>;
    ValidateRepeatName(path: string, fileName: string): Subject<any>;
    SetMetadataUri(path: string, sessionId: string): Observable<any>;
    getGspProjectType(): Observable<any>;
    updateGspProject(path: string, codeLanguage: string): Observable<any>;
    getNugetSourceList(): Observable<any>;
    getMavenSourceList(): Observable<any>;
    getCodeLanguage(projPath: string): Observable<any>;
    getSettingInfo(): Observable<any>;
    getMavenSetting(): Observable<any>;
    getBoPath(path: string): Observable<any>;
    getMavenStatus(path: string): Observable<any>;
    isInterpretation(path: string): Observable<any>;
    generate(path: string): Observable<any>;
    getProcessMode(path: string): Observable<any>;
    addDependencyAndRestore(path: string, metadataPackages: string, isMaven: boolean): Observable<any>;
    showInExplorer(path: string): Observable<any>;
    restoreMavenPackage(path: string, metadataPackages: string): Observable<any>;
    getMenu(path: string): Observable<any>;
    mavenBuildAll(projPath: string, fakeFlag?: boolean): Observable<any>;
    getProjPathsInPath(path: string): Observable<any>;
    getMdpkgNameExistInBo(path: string, mdpkgName: string): Observable<string>;
    IsProjExist(path: string): Observable<any>;
    GetMetadataPackagesUnderNugetDir(path: string): Observable<any>;
}
