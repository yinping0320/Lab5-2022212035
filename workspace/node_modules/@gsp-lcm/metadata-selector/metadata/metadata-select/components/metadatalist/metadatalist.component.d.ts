import { EventEmitter, OnDestroy } from '@angular/core';
import { MetadataService } from '../../metadata.service';
import { SelectableSettings, RowArgs } from '@progress/kendo-angular-grid';
import { State } from '@progress/kendo-data-query';
import { DataStateChangeEvent } from '@progress/kendo-angular-grid';
import { GSPMetadataService } from '../../../metadata.service';
import { Subject } from 'rxjs';
import { ProcessMode } from '../../processmode';
export declare class TemplatemetadataComponent implements OnDestroy {
    private metadataService;
    private gspMetaService;
    private subscriptions;
    classifier: any;
    codelanguage: string;
    processMode: ProcessMode;
    isMavenEnable: boolean;
    dotnet: string;
    java: string;
    technologyStack: EventEmitter<{}>;
    loading: boolean;
    typeName: string;
    filter: string;
    selectedMetadataChanged: EventEmitter<any>;
    allSource: {
        text: string;
        value: string;
    };
    selectedSource: {
        text: string;
        value: string;
    };
    sourceList: Array<{
        text: string;
        value: string;
    }>;
    popupSettings: {
        width: string;
    };
    allowCustom: boolean;
    allType: {
        text: string;
        value: string;
    };
    selectedType: {
        text: string;
        value: string;
    };
    typeList: Array<{
        text: string;
        value: string;
    }>;
    postfixSelected: string;
    initPageIndex: number;
    initPageSize: number;
    page: {
        pageIndex: number;
        pageSize: number;
    };
    typeListReadonly: boolean;
    hasNext: boolean;
    searchText: string;
    searchTextForDup: string;
    searchTextSub: Subject<string>;
    postfix: string;
    postfixFlag: boolean;
    scope: number;
    data: any[];
    conflictAvoidFlag: boolean;
    reload: boolean;
    mySelection: any[];
    clear(): void;
    state: State;
    gridData: any[];
    selectableSetting: SelectableSettings;
    dataStateChange(state: DataStateChangeEvent): void;
    ngOnDestroy(): void;
    constructor(metadataService: MetadataService, gspMetaService: GSPMetadataService);
    initNugetSourceList(): void;
    initMavenSourceList(): void;
    onSearchTextChanged(): void;
    rowSelected: (e: RowArgs) => boolean;
    private GetMetadataList;
    private GetMetadataListInBo;
    private GetLocalMetadataList;
    showOnlyBeveragesDetails(dataItem: any, index: number): boolean;
    getRemoteMetadataList(reload: any): void;
    compare(pro: any): (obj1: any, obj2: any) => 1 | -1;
    compareNuget(pro: any): (obj1: any, obj2: any) => 1 | -1;
    scopeChanged(classifier: any): void;
    getData(): void;
    onSelectionChange(event: any): void;
    private onSelectionChangedInternal;
    private selectionChanged;
    private makeNewData;
    onSelectedPkgChanged(dataItem: any): void;
    goSearch(): void;
    goNext(): void;
    onConflictAvoidFlagChanged(): void;
    typeSelectedChanged(mdSeleted: any): void;
    sourceSelectedChanged(source: any): void;
}
