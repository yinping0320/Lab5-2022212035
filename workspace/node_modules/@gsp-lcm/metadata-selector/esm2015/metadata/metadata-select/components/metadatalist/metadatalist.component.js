/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/metadatalist/metadatalist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { MetadataService } from '../../metadata.service';
import { GSPMetadataService } from '../../../metadata.service';
import { distinctUntilChanged, debounceTime } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class TemplatemetadataComponent {
    /**
     * @param {?} metadataService
     * @param {?} gspMetaService
     */
    constructor(metadataService, gspMetaService) {
        this.metadataService = metadataService;
        this.gspMetaService = gspMetaService;
        this.subscriptions = [];
        this.dotnet = 'dotnet';
        this.java = 'java';
        this.technologyStack = new EventEmitter();
        this.loading = false;
        this.selectedMetadataChanged = new EventEmitter();
        this.allSource = { text: '全选', value: 'All' };
        this.selectedSource = this.allSource;
        this.sourceList = [this.allSource];
        this.popupSettings = { width: 'auto' };
        this.allowCustom = true;
        this.allType = { text: '全选', value: 'All' };
        this.selectedType = this.allType;
        this.typeList = [
            this.allType
        ];
        this.postfixSelected = '';
        this.initPageIndex = 0;
        this.initPageSize = 10;
        this.page = {
            pageIndex: this.initPageIndex,
            pageSize: this.initPageSize
        };
        this.typeListReadonly = false;
        this.hasNext = true;
        this.searchText = '';
        this.searchTextForDup = '';
        this.searchTextSub = new Subject();
        this.postfix = '';
        this.postfixFlag = true;
        this.scope = 0;
        this.conflictAvoidFlag = false;
        this.reload = true;
        this.mySelection = [];
        // tslint:disable-next-line:member-ordering
        this.state = {
            skip: 0,
            take: 9999,
            // Initial filter descriptor
            filter: {
                logic: 'and',
                filters: []
            }
        };
        // tslint:disable-next-line:member-ordering
        this.selectableSetting = { mode: 'single', checkboxOnly: false };
        this.rowSelected = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => this.mySelection.indexOf(e.index) >= 0);
        this.classifier = { id: '' };
        this.searchTextSub.pipe(debounceTime(2048), distinctUntilChanged()).subscribe((/**
         * @param {?} text
         * @return {?}
         */
        text => {
            this.searchText = text.trim();
            // 搜索
            console.log('search for ' + this.searchText);
            this.getData();
        }));
        // this.unsubscribeAll();
        /** @type {?} */
        const subscription = this.metadataService.selectedChange.subscribe((/**
         * @param {?} classifier
         * @return {?}
         */
        classifier => {
            if (this.classifier && classifier && this.classifier.id === classifier.id) {
                return;
            }
            // 元数据类型
            if (this.postfixFlag) {
                this.gspMetaService.GetMetadataTypeList().subscribe((/**
                 * @param {?} typeList
                 * @return {?}
                 */
                typeList => {
                    /** @type {?} */
                    let count = 0;
                    typeList.forEach((/**
                     * @param {?} type
                     * @return {?}
                     */
                    type => {
                        this.postfixFlag = false;
                        /** @type {?} */
                        const typeNameArray = this.typeName.split(',');
                        typeNameArray.forEach((/**
                         * @param {?} typeName
                         * @return {?}
                         */
                        typeName => {
                            if (typeName.toLowerCase() === type.typeCode.toLowerCase()) {
                                this.postfix = this.postfix + type.postfix + ',';
                                this.typeList.push({ text: type.typeName, value: type.postfix });
                                count++;
                            }
                        }));
                    }));
                    if (count === 1) {
                        this.typeList.shift();
                        this.selectedType = this.typeList[0];
                        this.typeListReadonly = true;
                    }
                    this.postfixSelected = this.postfix;
                    this.scopeChanged(classifier);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    /** @type {?} */
                    const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
                    gsp.ide.messager.error('Fetch Metadata Type error:' + msg);
                }));
            }
            else {
                this.scopeChanged(classifier);
            }
            // 技术栈赋值
            this.metadataService.getCodeLanguage().subscribe((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item) {
                    // 如果目前工程非单栈，则获取环境默认技术栈
                    if (item.indexOf(';') > -1) {
                        this.gspMetaService.getSettingInfo().subscribe((/**
                         * @param {?} setting
                         * @return {?}
                         */
                        setting => {
                            if (setting && setting.technologyStack) {
                                this.codelanguage = setting.technologyStack;
                                this.technologyStack.emit(this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                                        this.initNugetSourceList();
                                    }
                                    else {
                                        this.initMavenSourceList();
                                    }
                                }
                            }
                            else if (this.isMavenEnable === true) {
                                // 环境默认配置为空，则按照java技术栈处理
                                this.codelanguage = 'java';
                                this.technologyStack.emit(this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    this.initMavenSourceList();
                                }
                            }
                            else {
                                this.codelanguage = 'dotnet';
                                this.technologyStack.emit(this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    this.initNugetSourceList();
                                }
                            }
                        }));
                    }
                    else {
                        this.codelanguage = item;
                        this.technologyStack.emit(this.codelanguage);
                        if (classifier.id === 'ref' || classifier.id === 'remote') {
                            if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                                this.initNugetSourceList();
                            }
                            else {
                                this.initMavenSourceList();
                            }
                        }
                    }
                }
                else {
                    // 工程的技术栈为空，则也是从环境默认技术栈读取
                    this.gspMetaService.getSettingInfo().subscribe((/**
                     * @param {?} setting
                     * @return {?}
                     */
                    setting => {
                        if (setting && setting.technologyStack) {
                            this.codelanguage = setting.technologyStack;
                            this.technologyStack.emit(this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                                    this.initNugetSourceList();
                                }
                                else {
                                    this.initMavenSourceList();
                                }
                            }
                        }
                        else if (this.isMavenEnable === true) {
                            // 环境默认配置为空，则按照java技术栈处理
                            this.codelanguage = 'java';
                            this.technologyStack.emit(this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                this.initMavenSourceList();
                            }
                        }
                        else {
                            this.codelanguage = 'dotnet';
                            this.technologyStack.emit(this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                this.initNugetSourceList();
                            }
                        }
                    }));
                }
            }));
            // 处理模式
            this.metadataService.getProcessMode().subscribe((/**
             * @param {?} processMode
             * @return {?}
             */
            processMode => {
                this.processMode = processMode;
            }));
        }));
        this.subscriptions.push(subscription);
    }
    /**
     * @return {?}
     */
    clear() {
        this.data = [];
        this.selectionChanged(null, []);
        this.page = {
            pageIndex: this.initPageIndex,
            pageSize: this.initPageSize
        };
    }
    /**
     * @param {?} state
     * @return {?}
     */
    dataStateChange(state) {
        this.state = state;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions && this.subscriptions.length > 0) {
            for (const item of this.subscriptions) {
                item.unsubscribe();
            }
        }
    }
    /**
     * @return {?}
     */
    initNugetSourceList() {
        if (this.sourceList.length === 1) {
            this.gspMetaService.getNugetSourceList().subscribe((/**
             * @param {?} sources
             * @return {?}
             */
            sources => {
                sources.forEach((/**
                 * @param {?} source
                 * @return {?}
                 */
                source => {
                    this.sourceList.push({ text: source.name, value: source.name });
                }));
            }));
        }
    }
    /**
     * @return {?}
     */
    initMavenSourceList() {
        if (this.sourceList.length === 1) {
            this.gspMetaService.getMavenSourceList().subscribe((/**
             * @param {?} sources
             * @return {?}
             */
            sources => {
                if (sources.repoList) {
                    sources.repoList.forEach((/**
                     * @param {?} source
                     * @return {?}
                     */
                    source => {
                        this.sourceList.push({ text: source.id, value: source.id });
                    }));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    onSearchTextChanged() {
        if (!this.searchText) {
            this.searchText = '';
        }
        /** @type {?} */
        const searchTextTrim = this.searchText.trim();
        if (this.searchTextForDup === searchTextTrim) {
            return;
        }
        this.searchTextForDup = searchTextTrim;
        console.log(this.searchText);
        this.searchTextSub.next(searchTextTrim);
    }
    /**
     * @private
     * @return {?}
     */
    GetMetadataList() {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        this.metadataService.GetMetadataList(this.postfixSelected).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        templates => {
            this.loading = false;
            if (!templates) {
                this.gridData = this.data;
                gsp.ide.messager.error('error to get response');
                return;
            }
            // tslint:disable-next-line: prefer-for-of
            for (let index = 0; index < templates.length; index++) {
                /** @type {?} */
                const template = templates[index];
                if (this.searchText) {
                    // tslint:disable-next-line: max-line-length
                    if (template.code.indexOf(this.searchText) > -1 || template.name.indexOf(this.searchText) > -1) {
                        metadatadto.push(template);
                    }
                }
                else {
                    metadatadto.push(template);
                }
            }
            if (metadatadto.length > 0) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
            }
            this.hasNext = false;
            this.data = metadatadto;
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Get Metadatas Error:' + msg);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    GetMetadataListInBo() {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        this.metadataService.GetMetadataListInBo(this.postfixSelected).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        templates => {
            this.loading = false;
            if (!templates) {
                this.gridData = this.data;
                gsp.ide.messager.error('error to get response');
                return;
            }
            // tslint:disable-next-line: prefer-for-of
            for (let index = 0; index < templates.length; index++) {
                /** @type {?} */
                const template = templates[index];
                if (this.searchText) {
                    // tslint:disable-next-line: max-line-length
                    if (template.projectName.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1
                        || template.code.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1
                        || template.name.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1) {
                        metadatadto.push(template);
                    }
                }
                else {
                    metadatadto.push(template);
                }
            }
            if (metadatadto.length > 0) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
            }
            this.hasNext = false;
            this.data = metadatadto;
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Get Metadatas Error:' + msg);
        }));
    }
    /**
     * @private
     * @param {?=} reloadT
     * @return {?}
     */
    GetLocalMetadataList(reloadT = true) {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        // this.gspMetaService.GetDevRootPath().subscribe(root => {
        // this.metadataService.rootPath = root;
        // tslint:disable-next-line:max-line-length
        this.metadataService.GetMetadataInfos(this.scope, this.codelanguage, this.isMavenEnable, this.postfixSelected, this.searchText, this.page).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        (templates) => {
            this.loading = false;
            if (!templates) {
                gsp.ide.messager.error('error to get metadata infos');
                return;
            }
            // 页码处理
            if (templates.page) {
                if (templates.page.pageSize < this.initPageSize) {
                    this.hasNext = false;
                }
                else {
                    this.hasNext = true;
                }
                this.page.pageSize = templates.page.pageSize;
                this.page.pageIndex = templates.page.pageIndex;
            }
            else {
                this.hasNext = false;
            }
            /** @type {?} */
            const metadataList = templates.metadataIndexItems;
            if (!metadataList || metadataList.length < 1) {
                this.mySelection = [];
                this.gridData = this.data;
                return;
            }
            metadataList.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element.repoPkg && element.repoPkg.length > 0) {
                    element.nugetPkgName = element.repoPkg[0].name;
                    element.nugetPkgVersion = element.repoPkg[0].version;
                }
                metadatadto.push(element);
            }));
            if (reloadT) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
                this.data = metadatadto;
            }
            else {
                metadatadto.forEach((/**
                 * @param {?} dto
                 * @return {?}
                 */
                dto => {
                    this.data.push(dto);
                }));
            }
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Metadata req failed: ' + msg);
        }));
    }
    /**
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    showOnlyBeveragesDetails(dataItem, index) {
        return dataItem.repoPkg && dataItem.repoPkg.length > 1;
    }
    /**
     * @param {?} reload
     * @return {?}
     */
    getRemoteMetadataList(reload) {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        // tslint:disable-next-line:max-line-length
        this.metadataService.GetMetadataInfos(this.scope, this.codelanguage, this.isMavenEnable, this.postfixSelected, this.searchText, this.page, this.selectedSource.value).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        (templates) => {
            this.loading = false;
            if (!templates) {
                gsp.ide.messager.error('error to get metadata infos');
                return;
            }
            // 页码处理
            if (templates.page) {
                if (templates.page.pageSize < this.initPageSize) {
                    this.hasNext = false;
                }
                else {
                    this.hasNext = true;
                }
                this.page.pageSize = templates.page.pageSize;
                this.page.pageIndex = templates.page.pageIndex;
            }
            else {
                this.hasNext = false;
            }
            /** @type {?} */
            const metadataList = templates.metadataIndexItems;
            if (!metadataList || metadataList.length < 1) {
                this.mySelection = [];
                this.gridData = this.data;
                return;
            }
            metadataList.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (!element.repoPkg || element.repoPkg.length < 1) {
                    return;
                }
                if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                    element.repoPkg.sort(this.compareNuget('version'));
                    element.nugetPkgName = element.repoPkg[0].name;
                    element.nugetPkgVersion = element.repoPkg[0].version;
                }
                else {
                    element.repoPkg.sort(this.compare('version'));
                    element.groupId = element.repoPkg[0].groupId;
                    element.artifactId = element.repoPkg[0].artifactId;
                    element.mavenPkgVersion = element.repoPkg[0].version;
                }
                metadatadto.push(element);
            }));
            if (!metadatadto || metadatadto.length < 1) {
                this.mySelection = [];
                this.gridData = this.data;
                return;
            }
            if (reload) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
                this.data = metadatadto;
            }
            else {
                metadatadto.forEach((/**
                 * @param {?} dto
                 * @return {?}
                 */
                dto => {
                    this.data.push(dto);
                }));
            }
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Metadata req failed: ' + msg);
        }));
    }
    /**
     * @param {?} pro
     * @return {?}
     */
    compare(pro) {
        return (/**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        (obj1, obj2) => {
            /** @type {?} */
            const val1 = obj1[pro];
            /** @type {?} */
            const val2 = obj2[pro];
            /** @type {?} */
            const vala1 = val1.split('.');
            /** @type {?} */
            const vala2 = val2.split('.');
            /** @type {?} */
            const v10 = vala1[0].substr(1);
            /** @type {?} */
            const v20 = vala2[0].substr(1);
            if (Number(v10) < Number(v20)) {
                return 1;
            }
            if (Number(v10) > Number(v20)) {
                return -1;
            }
            if (Number(vala1[1]) < Number(vala2[1])) {
                return 1;
            }
            if (Number(vala1[1]) > Number(vala2[1])) {
                return -1;
            }
            /** @type {?} */
            const v12 = vala1[2].replace('-SNAPSHOT', '');
            /** @type {?} */
            const v22 = vala2[2].replace('-SNAPSHOT', '');
            if (Number(v12) < Number(v22)) {
                return 1;
            }
            if (Number(v12) > Number(v22)) {
                return -1;
            }
            if (vala1[2].indexOf('-SNAPSHOT') > 0) {
                return 1;
            }
            else {
                return -1;
            }
        });
    }
    /**
     * @param {?} pro
     * @return {?}
     */
    compareNuget(pro) {
        return (/**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        (obj1, obj2) => {
            /** @type {?} */
            const val1 = obj1[pro];
            /** @type {?} */
            const val2 = obj2[pro];
            /** @type {?} */
            const vala1 = val1.split('.');
            /** @type {?} */
            const vala2 = val2.split('.');
            /** @type {?} */
            const v10 = vala1[0];
            /** @type {?} */
            const v20 = vala2[0];
            if (Number(v10) < Number(v20)) {
                return -1;
            }
            if (Number(v10) > Number(v20)) {
                return 1;
            }
            if (Number(vala1[1]) < Number(vala2[1])) {
                return 1;
            }
            if (Number(vala1[1]) > Number(vala2[1])) {
                return -1;
            }
            /** @type {?} */
            const v12 = vala1[2];
            /** @type {?} */
            const v22 = vala2[2];
            if (v12.indexOf('alpha') > 0) {
                if (v12 < v22) {
                    return 1;
                }
                if (v12 > v22) {
                    return -1;
                }
            }
            else {
                if (Number(v12) < Number(v22)) {
                    return 1;
                }
                if (Number(v12) > Number(v22)) {
                    return -1;
                }
            }
        });
    }
    /**
     * @param {?} classifier
     * @return {?}
     */
    scopeChanged(classifier) {
        this.classifier = classifier;
        this.getData();
    }
    /**
     * @return {?}
     */
    getData() {
        if (this.classifier) {
            if (this.reload) {
                this.clear();
            }
            /** @type {?} */
            const reloadT = this.reload;
            if (this.classifier.id === 'project') {
                this.scope = 0;
                this.GetMetadataList();
            }
            else if (this.classifier.id === 'bo') {
                this.scope = 0;
                this.GetMetadataListInBo();
            }
            else if (this.classifier.id === 'ref') {
                this.scope = 3;
                this.getRemoteMetadataList(reloadT);
            }
            else if (this.classifier.id === 'remote') {
                this.scope = 2;
                this.getRemoteMetadataList(reloadT);
            }
            else if (this.classifier.id === 'local') {
                this.scope = 1;
                this.GetLocalMetadataList(reloadT);
            }
            // 重置一次请求中的状态
            this.reload = true;
        }
    }
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChange(event) {
        if (event && event.selectedRows && event.selectedRows.length > 0) {
            /** @type {?} */
            const dataItem = event.selectedRows[0].dataItem;
            this.onSelectionChangedInternal(dataItem, [event.selectedRows[0].index]);
        }
    }
    /**
     * @private
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    onSelectionChangedInternal(dataItem, index) {
        /** @type {?} */
        const newData = this.makeNewData(dataItem);
        if (this.scope === 2 || this.scope === 3) {
            newData.repoPkg.push(dataItem.repoPkg[0]);
        }
        this.selectionChanged(newData, index);
    }
    /**
     * @private
     * @param {?} dataItem
     * @param {?=} index
     * @return {?}
     */
    selectionChanged(dataItem, index = []) {
        this.selectedMetadataChanged.emit(dataItem);
        this.mySelection = index;
    }
    /**
     * @private
     * @param {?} dataItem
     * @return {?}
     */
    makeNewData(dataItem) {
        return {
            mdPkgName: dataItem.mdPkgName,
            repoPkg: [],
            id: dataItem.id,
            nameSpace: dataItem.nameSpace,
            code: dataItem.code,
            name: dataItem.name,
            fileName: dataItem.fileName,
            type: dataItem.type,
            bizobjectID: dataItem.bizobjectID,
            language: dataItem.language,
            isTranslating: dataItem.isTranslating,
            relativePath: dataItem.relativePath,
            extendProperty: dataItem.extendProperty,
            processMode: dataItem.processMode
        };
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    onSelectedPkgChanged(dataItem) {
        if (dataItem && dataItem.repoPkg && dataItem.repoPkg.length > 0) {
            /** @type {?} */
            const newData = this.makeNewData(dataItem);
            if (dataItem.selectedPkg) {
                newData.repoPkg.push(dataItem.selectedPkg);
            }
            else {
                newData.repoPkg.push(dataItem.repoPkg[0]);
            }
            this.selectionChanged(newData, []);
        }
    }
    /**
     * @return {?}
     */
    goSearch() {
        if (!this.searchText) {
            this.searchText = '';
        }
        console.log('搜索');
        /** @type {?} */
        const searchTextTrim = this.searchText.trim();
        if (this.searchText && this.searchTextForDup === searchTextTrim) {
            return;
        }
        this.searchTextForDup = searchTextTrim;
        console.log(this.searchText);
        this.searchText = searchTextTrim;
        // 搜索
        console.log('search for ' + this.searchText);
        this.getData();
    }
    /**
     * @return {?}
     */
    goNext() {
        console.log('下一页');
        this.page.pageIndex = this.page.pageIndex + 1;
        this.reload = false;
        this.getData();
    }
    /**
     * @return {?}
     */
    onConflictAvoidFlagChanged() {
        console.log('ConflictAvoidFlag ' + this.conflictAvoidFlag);
        this.getData();
    }
    /**
     * @param {?} mdSeleted
     * @return {?}
     */
    typeSelectedChanged(mdSeleted) {
        if (!mdSeleted) {
            mdSeleted = this.selectedType;
        }
        if (mdSeleted) {
            if (mdSeleted.value === this.allType.value) {
                this.postfixSelected = this.postfix;
            }
            else {
                this.postfixSelected = mdSeleted.value;
            }
            this.getData();
        }
    }
    /**
     * @param {?} source
     * @return {?}
     */
    sourceSelectedChanged(source) {
        if (!source) {
            source = this.selectedSource;
        }
        this.selectedSource = source;
        this.getData();
    }
}
TemplatemetadataComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatalist',
                template: "<div class=\"templateInfo farris-main-area flex-column\">\r\n  <div class=\"templateSelectorHeader m-2\">\r\n    <div class=\"searchArea d-flex flex-row\">\r\n\r\n      <input id=\"url\" class=\"textInput flex-fill\" type=\"text\" size=\"30\" kendoTextBox [(ngModel)]=\"this.searchText\"\r\n        #url=\"ngModel\" required (ngModelChange)=\"onSearchTextChanged()\">\r\n      <button type=\"button\" class=\"btn btn-light btn-sm px-3 mx-2\"\r\n          (click)=\"goSearch()\">\u641C\u7D22</button>\r\n\r\n      <!-- <div class=\"conflictAvoidFlag\" *ngIf=\"this.scope === 2\">\r\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"check1\"\r\n          [(ngModel)]=\"this.conflictAvoidFlag\" (ngModelChange)=\"this.onConflictAvoidFlagChanged()\">\r\n        <label class=\"form-check-label text-label\" for=\"check1\">\u907F\u514D\u51B2\u7A81</label>\r\n      </div> -->\r\n\r\n      <kendo-combobox class=\"mx-2\" [allowCustom]=\"allowCustom\" *ngIf=\"this.scope === 2 || this.scope === 3\" [data]=\"sourceList\" \r\n        [textField]=\"'text'\" [valueField]=\"'value'\" [(ngModel)]=\"this.selectedSource\" \r\n        (selectionChange)=\"sourceSelectedChanged($event)\" [popupSettings]=\"popupSettings\">\r\n      </kendo-combobox>\r\n\r\n      <kendo-combobox [readonly]=\"this.typeListReadonly\" [data]=\"typeList\" [(ngModel)]=\"selectedType\"\r\n        [textField]=\"'text'\" [valueField]=\"'value'\"  (selectionChange)=\"typeSelectedChanged($event)\">\r\n      </kendo-combobox>\r\n    </div>\r\n  </div>\r\n  <div class=\"templateSelector flex-fill d-flex flex-column\">\r\n    <kendo-grid class=\"flex-fill\"\r\n                [data]=\"gridData\"\r\n                [selectable]=\"selectableSetting\" \r\n                (selectionChange)=onSelectionChange($event)\r\n                [sortable]=\"true\"\r\n                [pageable]=\"false\"\r\n                [filterable]=\"false\"\r\n                [resizable]=\"true\"\r\n                [loading]=\"this.loading\"\r\n                [rowSelected]=\"rowSelected\">\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 0 && this.classifier.id === 'bo') && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"projectName\" title=\"\u5DE5\u7A0B\u540D\u79F0\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"150\" field=\"code\" title=\"\u7F16\u53F7\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"150\" field=\"name\" title=\"\u540D\u79F0\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column field=\"type\" [width]=\"130\" title=\"\u7C7B\u578B\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"this.scope === 1 || this.scope === 2 || this.scope === 3\" field=\"mdPkgName\"\r\n        title=\"\u5143\u6570\u636E\u5305\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === false || this.codelanguage === dotnet)\" field=\"nugetPkgName\" title=\"\u6240\u5C5ENuget\u5305\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === false || this.codelanguage === dotnet)\" field=\"nugetPkgVersion\" title=\"\u6240\u5C5ENuget\u5305\u7248\u672C\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"groupId\" title=\"\u6240\u5C5EMaven\u5305GroupId\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"artifactId\" title=\"\u6240\u5C5EMaven\u5305ArtifactId\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"mavenPkgVersion\" title=\"\u6240\u5C5EMaven\u5305\u7248\u672C\">\r\n      </kendo-grid-column>\r\n\r\n      <ng-template kendoGridDetailTemplate let-dataItem [kendoGridDetailTemplateShowIf]=\"showOnlyBeveragesDetails\">\r\n        <lib-metadatalistdetails (selectedPkgChanged)=\"this.onSelectedPkgChanged($event)\" [isMavenEnable]=\"isMavenEnable\" [mdItem]=\"dataItem\" [codelanguage]=\"codelanguage\">\r\n        </lib-metadatalistdetails>\r\n      </ng-template>\r\n\r\n    </kendo-grid>\r\n  </div>\r\n  <div *ngIf=\"this.hasNext && !this.loading\" class=\"model-footer\">\r\n    <button type=\"button\" class=\"btn btn-link btn-sm\" (click)=\"goNext()\">\u52A0\u8F7D\u66F4\u591A</button>\r\n  </div>\r\n  <div *ngIf=\"this.loading\" class=\"model-footer\">\r\n    <label class=\"text-label\">\u52A0\u8F7D\u4E2D...</label>\r\n  </div>\r\n  <div *ngIf=\"!this.hasNext && !this.loading\" class=\"model-footer\">\r\n    <label class=\"text-label\">\u5DF2\u7ECF\u5230\u5E95\u4E86</label>\r\n  </div>\r\n</div>",
                styles: [".templateSelector{overflow-y:hidden;overflow-x:auto}.templateInfo{display:flex;overflow:hidden}.conflictAvoidFlag{margin-left:25px;align-content:baseline;margin-top:1px;margin-right:3px;min-width:65px}.scope1{min-width:800px}.scope2{min-width:1000px}.text-label{margin-top:1.3px}"]
            }] }
];
/** @nocollapse */
TemplatemetadataComponent.ctorParameters = () => [
    { type: MetadataService },
    { type: GSPMetadataService }
];
TemplatemetadataComponent.propDecorators = {
    isMavenEnable: [{ type: Input }],
    technologyStack: [{ type: Output }],
    typeName: [{ type: Input }],
    filter: [{ type: Input }],
    selectedMetadataChanged: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    TemplatemetadataComponent.prototype.subscriptions;
    /** @type {?} */
    TemplatemetadataComponent.prototype.classifier;
    /** @type {?} */
    TemplatemetadataComponent.prototype.codelanguage;
    /** @type {?} */
    TemplatemetadataComponent.prototype.processMode;
    /** @type {?} */
    TemplatemetadataComponent.prototype.isMavenEnable;
    /** @type {?} */
    TemplatemetadataComponent.prototype.dotnet;
    /** @type {?} */
    TemplatemetadataComponent.prototype.java;
    /** @type {?} */
    TemplatemetadataComponent.prototype.technologyStack;
    /** @type {?} */
    TemplatemetadataComponent.prototype.loading;
    /** @type {?} */
    TemplatemetadataComponent.prototype.typeName;
    /** @type {?} */
    TemplatemetadataComponent.prototype.filter;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectedMetadataChanged;
    /** @type {?} */
    TemplatemetadataComponent.prototype.allSource;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectedSource;
    /** @type {?} */
    TemplatemetadataComponent.prototype.sourceList;
    /** @type {?} */
    TemplatemetadataComponent.prototype.popupSettings;
    /** @type {?} */
    TemplatemetadataComponent.prototype.allowCustom;
    /** @type {?} */
    TemplatemetadataComponent.prototype.allType;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectedType;
    /** @type {?} */
    TemplatemetadataComponent.prototype.typeList;
    /** @type {?} */
    TemplatemetadataComponent.prototype.postfixSelected;
    /** @type {?} */
    TemplatemetadataComponent.prototype.initPageIndex;
    /** @type {?} */
    TemplatemetadataComponent.prototype.initPageSize;
    /** @type {?} */
    TemplatemetadataComponent.prototype.page;
    /** @type {?} */
    TemplatemetadataComponent.prototype.typeListReadonly;
    /** @type {?} */
    TemplatemetadataComponent.prototype.hasNext;
    /** @type {?} */
    TemplatemetadataComponent.prototype.searchText;
    /** @type {?} */
    TemplatemetadataComponent.prototype.searchTextForDup;
    /** @type {?} */
    TemplatemetadataComponent.prototype.searchTextSub;
    /** @type {?} */
    TemplatemetadataComponent.prototype.postfix;
    /** @type {?} */
    TemplatemetadataComponent.prototype.postfixFlag;
    /** @type {?} */
    TemplatemetadataComponent.prototype.scope;
    /** @type {?} */
    TemplatemetadataComponent.prototype.data;
    /** @type {?} */
    TemplatemetadataComponent.prototype.conflictAvoidFlag;
    /** @type {?} */
    TemplatemetadataComponent.prototype.reload;
    /** @type {?} */
    TemplatemetadataComponent.prototype.mySelection;
    /** @type {?} */
    TemplatemetadataComponent.prototype.state;
    /** @type {?} */
    TemplatemetadataComponent.prototype.gridData;
    /** @type {?} */
    TemplatemetadataComponent.prototype.selectableSetting;
    /** @type {?} */
    TemplatemetadataComponent.prototype.rowSelected;
    /**
     * @type {?}
     * @private
     */
    TemplatemetadataComponent.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    TemplatemetadataComponent.prototype.gspMetaService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGFsaXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtbGNtL21ldGFkYXRhLXNlbGVjdG9yLyIsInNvdXJjZXMiOlsibWV0YWRhdGEvbWV0YWRhdGEtc2VsZWN0L2NvbXBvbmVudHMvbWV0YWRhdGFsaXN0L21ldGFkYXRhbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUl6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVMvQixNQUFNLE9BQU8seUJBQXlCOzs7OztJQWdGcEMsWUFBb0IsZUFBZ0MsRUFBVSxjQUFrQztRQUE1RSxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBb0I7UUEvRXhGLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBUTNCLFdBQU0sR0FBRyxRQUFRLENBQUM7UUFDbEIsU0FBSSxHQUFHLE1BQU0sQ0FBQztRQUNKLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvQyxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBR04sNEJBQXVCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU1RCxjQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN6QyxtQkFBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDaEMsZUFBVSxHQUEyQyxDQUFDLElBQUksQ0FBQyxTQUFTLENB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QTJCOztJQUUzQiwrQ0FBZ0I7O0lBRWhCLGlEQUFxQjs7SUFFckIsZ0RBQXlCOztJQUN6QixrREFBZ0M7O0lBQ2hDLDJDQUFrQjs7SUFDbEIseUNBQWM7O0lBQ2Qsb0RBQStDOztJQUMvQyw0Q0FBZ0I7O0lBQ2hCLDZDQUEwQjs7SUFDMUIsMkNBQXdCOztJQUN4Qiw0REFBNEQ7O0lBRTVELDhDQUF5Qzs7SUFDekMsbURBQWdDOztJQUNoQywrQ0FBc0U7O0lBQ3RFLGtEQUFrQzs7SUFDbEMsZ0RBQW1COztJQUVuQiw0Q0FBdUM7O0lBQ3ZDLGlEQUE0Qjs7SUFDNUIsNkNBRUU7O0lBQ0Ysb0RBQXFCOztJQUNyQixrREFBa0I7O0lBQ2xCLGlEQUFrQjs7SUFDbEIseUNBR0U7O0lBQ0YscURBQXlCOztJQUN6Qiw0Q0FBZTs7SUFDZiwrQ0FBZ0I7O0lBQ2hCLHFEQUFzQjs7SUFDdEIsa0RBQXNDOztJQUN0Qyw0Q0FBYTs7SUFDYixnREFBbUI7O0lBQ25CLDBDQUFVOztJQUNWLHlDQUFZOztJQUNaLHNEQUEwQjs7SUFDMUIsMkNBQWM7O0lBQ2QsZ0RBQWlCOztJQVVqQiwwQ0FRRTs7SUFHRiw2Q0FBdUI7O0lBRXZCLHNEQUFnRjs7SUF1S2hGLGdEQUFxRTs7Ozs7SUE1SnpELG9EQUF3Qzs7Ozs7SUFBRSxtREFBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uLy4uL21ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTZWxlY3RhYmxlU2V0dGluZ3MsIFJvd0FyZ3MgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1ncmlkJztcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeSc7XHJcbmltcG9ydCB7IERhdGFTdGF0ZUNoYW5nZUV2ZW50IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZ3JpZCc7XHJcbmltcG9ydCB7IEdTUE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL21ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFByb2Nlc3NNb2RlIH0gZnJvbSAnLi4vLi4vcHJvY2Vzc21vZGUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnYXBwLW1ldGFkYXRhbGlzdCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL21ldGFkYXRhbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vbWV0YWRhdGFsaXN0LmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVtZXRhZGF0YUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zID0gW107XHJcbiAgLy8g5YiG57G7XHJcbiAgY2xhc3NpZmllcjogYW55O1xyXG4gIC8vIOaKgOacr+agiFxyXG4gIGNvZGVsYW5ndWFnZTogc3RyaW5nO1xyXG4gIC8vIOWkhOeQhuaooeW8j1xyXG4gIHByb2Nlc3NNb2RlOiBQcm9jZXNzTW9kZTtcclxuICBASW5wdXQoKSBpc01hdmVuRW5hYmxlOiBib29sZWFuO1xyXG4gIGRvdG5ldCA9ICdkb3RuZXQnO1xyXG4gIGphdmEgPSAnamF2YSc7XHJcbiAgQE91dHB1dCgpIHRlY2hub2xvZ3lTdGFjayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBsb2FkaW5nID0gZmFsc2U7XHJcbiAgQElucHV0KCkgdHlwZU5hbWU6IHN0cmluZztcclxuICBASW5wdXQoKSBmaWx0ZXI6IHN0cmluZztcclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRNZXRhZGF0YUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgYWxsU291cmNlID0geyB0ZXh0OiAn5YWo6YCJJywgdmFsdWU6ICdBbGwnIH07XHJcbiAgc2VsZWN0ZWRTb3VyY2UgPSB0aGlzLmFsbFNvdXJjZTtcclxuICBzb3VyY2VMaXN0OiBBcnJheTx7IHRleHQ6IHN0cmluZywgdmFsdWU6IHN0cmluZyB9PiA9IFt0aGlzLmFsbFNvdXJjZV07XHJcbiAgcG9wdXBTZXR0aW5ncyA9IHsgd2lkdGg6ICdhdXRvJyB9O1xyXG4gIGFsbG93Q3VzdG9tID0gdHJ1ZTtcclxuXHJcbiAgYWxsVHlwZSA9IHsgdGV4dDogJ+WFqOmAiScsIHZhbHVlOiAnQWxsJyB9O1xyXG4gIHNlbGVjdGVkVHlwZSA9IHRoaXMuYWxsVHlwZTtcclxuICB0eXBlTGlzdDogQXJyYXk8eyB0ZXh0OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfT4gPSBbXHJcbiAgICB0aGlzLmFsbFR5cGVcclxuICBdO1xyXG4gIHBvc3RmaXhTZWxlY3RlZCA9ICcnO1xyXG4gIGluaXRQYWdlSW5kZXggPSAwO1xyXG4gIGluaXRQYWdlU2l6ZSA9IDEwO1xyXG4gIHBhZ2UgPSB7XHJcbiAgICBwYWdlSW5kZXg6IHRoaXMuaW5pdFBhZ2VJbmRleCxcclxuICAgIHBhZ2VTaXplOiB0aGlzLmluaXRQYWdlU2l6ZVxyXG4gIH07XHJcbiAgdHlwZUxpc3RSZWFkb25seSA9IGZhbHNlO1xyXG4gIGhhc05leHQgPSB0cnVlO1xyXG4gIHNlYXJjaFRleHQgPSAnJztcclxuICBzZWFyY2hUZXh0Rm9yRHVwID0gJyc7XHJcbiAgc2VhcmNoVGV4dFN1YiA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcclxuICBwb3N0Zml4ID0gJyc7XHJcbiAgcG9zdGZpeEZsYWcgPSB0cnVlO1xyXG4gIHNjb3BlID0gMDtcclxuICBkYXRhOiBhbnlbXTtcclxuICBjb25mbGljdEF2b2lkRmxhZyA9IGZhbHNlO1xyXG4gIHJlbG9hZCA9IHRydWU7XHJcbiAgbXlTZWxlY3Rpb24gPSBbXTtcclxuICBjbGVhcigpIHtcclxuICAgIHRoaXMuZGF0YSA9IFtdO1xyXG4gICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VkKG51bGwsIFtdKTtcclxuICAgIHRoaXMucGFnZSA9IHtcclxuICAgICAgcGFnZUluZGV4OiB0aGlzLmluaXRQYWdlSW5kZXgsXHJcbiAgICAgIHBhZ2VTaXplOiB0aGlzLmluaXRQYWdlU2l6ZVxyXG4gICAgfTtcclxuICB9XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1lbWJlci1vcmRlcmluZ1xyXG4gIHB1YmxpYyBzdGF0ZTogU3RhdGUgPSB7XHJcbiAgICBza2lwOiAwLFxyXG4gICAgdGFrZTogOTk5OSxcclxuICAgIC8vIEluaXRpYWwgZmlsdGVyIGRlc2NyaXB0b3JcclxuICAgIGZpbHRlcjoge1xyXG4gICAgICBsb2dpYzogJ2FuZCcsXHJcbiAgICAgIGZpbHRlcnM6IFtdXHJcbiAgICB9XHJcbiAgfTtcclxuICAvLyBwdWJsaWMgZ3JpZERhdGE6IEdyaWREYXRhUmVzdWx0ID0gdGhpcy5kYXRhO1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptZW1iZXItb3JkZXJpbmdcclxuICBwdWJsaWMgZ3JpZERhdGE6IGFueVtdO1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptZW1iZXItb3JkZXJpbmdcclxuICBzZWxlY3RhYmxlU2V0dGluZzogU2VsZWN0YWJsZVNldHRpbmdzID0geyBtb2RlOiAnc2luZ2xlJywgY2hlY2tib3hPbmx5OiBmYWxzZSB9O1xyXG4gIHB1YmxpYyBkYXRhU3RhdGVDaGFuZ2Uoc3RhdGU6IERhdGFTdGF0ZUNoYW5nZUV2ZW50KTogdm9pZCB7XHJcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgfVxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucyAmJiB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5zdWJzY3JpcHRpb25zKSB7XHJcbiAgICAgICAgaXRlbS51bnN1YnNjcmliZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWV0YWRhdGFTZXJ2aWNlOiBNZXRhZGF0YVNlcnZpY2UsIHByaXZhdGUgZ3NwTWV0YVNlcnZpY2U6IEdTUE1ldGFkYXRhU2VydmljZSkge1xyXG4gICAgdGhpcy5jbGFzc2lmaWVyID0geyBpZDogJycgfTtcclxuICAgIHRoaXMuc2VhcmNoVGV4dFN1Yi5waXBlKGRlYm91bmNlVGltZSgyMDQ4KSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSkuc3Vic2NyaWJlKHRleHQgPT4ge1xyXG4gICAgICB0aGlzLnNlYXJjaFRleHQgPSB0ZXh0LnRyaW0oKTtcclxuICAgICAgLy8g5pCc57SiXHJcbiAgICAgIGNvbnNvbGUubG9nKCdzZWFyY2ggZm9yICcgKyB0aGlzLnNlYXJjaFRleHQpO1xyXG4gICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHRoaXMudW5zdWJzY3JpYmVBbGwoKTtcclxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMubWV0YWRhdGFTZXJ2aWNlLnNlbGVjdGVkQ2hhbmdlLnN1YnNjcmliZShjbGFzc2lmaWVyID0+IHtcclxuICAgICAgaWYgKHRoaXMuY2xhc3NpZmllciAmJiBjbGFzc2lmaWVyICYmIHRoaXMuY2xhc3NpZmllci5pZCA9PT0gY2xhc3NpZmllci5pZCkgeyByZXR1cm47IH1cclxuICAgICAgLy8g5YWD5pWw5o2u57G75Z6LXHJcbiAgICAgIGlmICh0aGlzLnBvc3RmaXhGbGFnKSB7XHJcbiAgICAgICAgdGhpcy5nc3BNZXRhU2VydmljZS5HZXRNZXRhZGF0YVR5cGVMaXN0KCkuc3Vic2NyaWJlKHR5cGVMaXN0ID0+IHtcclxuICAgICAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgICAgICB0eXBlTGlzdC5mb3JFYWNoKHR5cGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBvc3RmaXhGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lQXJyYXkgPSB0aGlzLnR5cGVOYW1lLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHR5cGVOYW1lQXJyYXkuZm9yRWFjaCh0eXBlTmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHR5cGUudHlwZUNvZGUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3N0Zml4ID0gdGhpcy5wb3N0Zml4ICsgdHlwZS5wb3N0Zml4ICsgJywnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlTGlzdC5wdXNoKHsgdGV4dDogdHlwZS50eXBlTmFtZSwgdmFsdWU6IHR5cGUucG9zdGZpeCB9KTtcclxuICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgaWYgKGNvdW50ID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZUxpc3Quc2hpZnQoKTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFR5cGUgPSB0aGlzLnR5cGVMaXN0WzBdO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGVMaXN0UmVhZG9ubHkgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5wb3N0Zml4U2VsZWN0ZWQgPSB0aGlzLnBvc3RmaXg7XHJcbiAgICAgICAgICB0aGlzLnNjb3BlQ2hhbmdlZChjbGFzc2lmaWVyKTtcclxuICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICBjb25zdCBtc2cgPSBlcnJvci5lcnJvci5NZXNzYWdlICE9PSB1bmRlZmluZWQgPyBlcnJvci5lcnJvci5NZXNzYWdlIDogZXJyb3IuZXJyb3IuZXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgIGdzcC5pZGUubWVzc2FnZXIuZXJyb3IoJ0ZldGNoIE1ldGFkYXRhIFR5cGUgZXJyb3I6JyArIG1zZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zY29wZUNoYW5nZWQoY2xhc3NpZmllcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOaKgOacr+agiOi1i+WAvFxyXG4gICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5nZXRDb2RlTGFuZ3VhZ2UoKS5zdWJzY3JpYmUoaXRlbSA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgIC8vIOWmguaenOebruWJjeW3peeoi+mdnuWNleagiO+8jOWImeiOt+WPlueOr+Wig+m7mOiupOaKgOacr+agiFxyXG4gICAgICAgICAgaWYgKGl0ZW0uaW5kZXhPZignOycpID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5nc3BNZXRhU2VydmljZS5nZXRTZXR0aW5nSW5mbygpLnN1YnNjcmliZShzZXR0aW5nID0+IHtcclxuICAgICAgICAgICAgICBpZiAoc2V0dGluZyAmJiBzZXR0aW5nLnRlY2hub2xvZ3lTdGFjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2RlbGFuZ3VhZ2UgPSBzZXR0aW5nLnRlY2hub2xvZ3lTdGFjaztcclxuICAgICAgICAgICAgICAgIHRoaXMudGVjaG5vbG9neVN0YWNrLmVtaXQodGhpcy5jb2RlbGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzaWZpZXIuaWQgPT09ICdyZWYnIHx8IGNsYXNzaWZpZXIuaWQgPT09ICdyZW1vdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvZGVsYW5ndWFnZSA9PT0gJ2RvdG5ldCcgfHwgdGhpcy5pc01hdmVuRW5hYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdE51Z2V0U291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdE1hdmVuU291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTWF2ZW5FbmFibGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIOeOr+Wig+m7mOiupOmFjee9ruS4uuepuu+8jOWImeaMieeFp2phdmHmioDmnK/moIjlpITnkIZcclxuICAgICAgICAgICAgICAgIHRoaXMuY29kZWxhbmd1YWdlID0gJ2phdmEnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZWNobm9sb2d5U3RhY2suZW1pdCh0aGlzLmNvZGVsYW5ndWFnZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NpZmllci5pZCA9PT0gJ3JlZicgfHwgY2xhc3NpZmllci5pZCA9PT0gJ3JlbW90ZScpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5pbml0TWF2ZW5Tb3VyY2VMaXN0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29kZWxhbmd1YWdlID0gJ2RvdG5ldCc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlY2hub2xvZ3lTdGFjay5lbWl0KHRoaXMuY29kZWxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc2lmaWVyLmlkID09PSAncmVmJyB8fCBjbGFzc2lmaWVyLmlkID09PSAncmVtb3RlJykge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmluaXROdWdldFNvdXJjZUxpc3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb2RlbGFuZ3VhZ2UgPSBpdGVtO1xyXG4gICAgICAgICAgICB0aGlzLnRlY2hub2xvZ3lTdGFjay5lbWl0KHRoaXMuY29kZWxhbmd1YWdlKTtcclxuICAgICAgICAgICAgaWYgKGNsYXNzaWZpZXIuaWQgPT09ICdyZWYnIHx8IGNsYXNzaWZpZXIuaWQgPT09ICdyZW1vdGUnKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuY29kZWxhbmd1YWdlID09PSAnZG90bmV0JyB8fCB0aGlzLmlzTWF2ZW5FbmFibGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXROdWdldFNvdXJjZUxpc3QoKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0TWF2ZW5Tb3VyY2VMaXN0KCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIOW3peeoi+eahOaKgOacr+agiOS4uuepuu+8jOWImeS5n+aYr+S7jueOr+Wig+m7mOiupOaKgOacr+agiOivu+WPllxyXG4gICAgICAgICAgdGhpcy5nc3BNZXRhU2VydmljZS5nZXRTZXR0aW5nSW5mbygpLnN1YnNjcmliZShzZXR0aW5nID0+IHtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmcgJiYgc2V0dGluZy50ZWNobm9sb2d5U3RhY2spIHtcclxuICAgICAgICAgICAgICB0aGlzLmNvZGVsYW5ndWFnZSA9IHNldHRpbmcudGVjaG5vbG9neVN0YWNrO1xyXG4gICAgICAgICAgICAgIHRoaXMudGVjaG5vbG9neVN0YWNrLmVtaXQodGhpcy5jb2RlbGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICAgIGlmIChjbGFzc2lmaWVyLmlkID09PSAncmVmJyB8fCBjbGFzc2lmaWVyLmlkID09PSAncmVtb3RlJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29kZWxhbmd1YWdlID09PSAnZG90bmV0JyB8fCB0aGlzLmlzTWF2ZW5FbmFibGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdE51Z2V0U291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5pbml0TWF2ZW5Tb3VyY2VMaXN0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNNYXZlbkVuYWJsZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgIC8vIOeOr+Wig+m7mOiupOmFjee9ruS4uuepuu+8jOWImeaMieeFp2phdmHmioDmnK/moIjlpITnkIZcclxuICAgICAgICAgICAgICB0aGlzLmNvZGVsYW5ndWFnZSA9ICdqYXZhJztcclxuICAgICAgICAgICAgICB0aGlzLnRlY2hub2xvZ3lTdGFjay5lbWl0KHRoaXMuY29kZWxhbmd1YWdlKTtcclxuICAgICAgICAgICAgICBpZiAoY2xhc3NpZmllci5pZCA9PT0gJ3JlZicgfHwgY2xhc3NpZmllci5pZCA9PT0gJ3JlbW90ZScpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdE1hdmVuU291cmNlTGlzdCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLmNvZGVsYW5ndWFnZSA9ICdkb3RuZXQnO1xyXG4gICAgICAgICAgICAgIHRoaXMudGVjaG5vbG9neVN0YWNrLmVtaXQodGhpcy5jb2RlbGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICAgIGlmIChjbGFzc2lmaWVyLmlkID09PSAncmVmJyB8fCBjbGFzc2lmaWVyLmlkID09PSAncmVtb3RlJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0TnVnZXRTb3VyY2VMaXN0KCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8g5aSE55CG5qih5byPXHJcbiAgICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLmdldFByb2Nlc3NNb2RlKCkuc3Vic2NyaWJlKHByb2Nlc3NNb2RlID0+IHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NNb2RlID0gcHJvY2Vzc01vZGU7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcclxuICB9XHJcblxyXG4gIGluaXROdWdldFNvdXJjZUxpc3QoKSB7XHJcbiAgICBpZiAodGhpcy5zb3VyY2VMaXN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICB0aGlzLmdzcE1ldGFTZXJ2aWNlLmdldE51Z2V0U291cmNlTGlzdCgpLnN1YnNjcmliZShzb3VyY2VzID0+IHtcclxuICAgICAgICBzb3VyY2VzLmZvckVhY2goc291cmNlID0+IHtcclxuICAgICAgICAgIHRoaXMuc291cmNlTGlzdC5wdXNoKHsgdGV4dDogc291cmNlLm5hbWUsIHZhbHVlOiBzb3VyY2UubmFtZSB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGluaXRNYXZlblNvdXJjZUxpc3QoKSB7XHJcbiAgICBpZiAodGhpcy5zb3VyY2VMaXN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICB0aGlzLmdzcE1ldGFTZXJ2aWNlLmdldE1hdmVuU291cmNlTGlzdCgpLnN1YnNjcmliZShzb3VyY2VzID0+IHtcclxuICAgICAgICBpZiAoc291cmNlcy5yZXBvTGlzdCkge1xyXG4gICAgICAgICAgc291cmNlcy5yZXBvTGlzdC5mb3JFYWNoKHNvdXJjZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTGlzdC5wdXNoKHsgdGV4dDogc291cmNlLmlkLCB2YWx1ZTogc291cmNlLmlkIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uU2VhcmNoVGV4dENoYW5nZWQoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2VhcmNoVGV4dCkgeyB0aGlzLnNlYXJjaFRleHQgPSAnJzsgfVxyXG4gICAgY29uc3Qgc2VhcmNoVGV4dFRyaW0gPSB0aGlzLnNlYXJjaFRleHQudHJpbSgpO1xyXG4gICAgaWYgKHRoaXMuc2VhcmNoVGV4dEZvckR1cCA9PT0gc2VhcmNoVGV4dFRyaW0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZWFyY2hUZXh0Rm9yRHVwID0gc2VhcmNoVGV4dFRyaW07XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLnNlYXJjaFRleHQpO1xyXG4gICAgdGhpcy5zZWFyY2hUZXh0U3ViLm5leHQoc2VhcmNoVGV4dFRyaW0pO1xyXG4gIH1cclxuXHJcbiAgcm93U2VsZWN0ZWQgPSAoZTogUm93QXJncykgPT4gdGhpcy5teVNlbGVjdGlvbi5pbmRleE9mKGUuaW5kZXgpID49IDA7XHJcblxyXG4gIHByaXZhdGUgR2V0TWV0YWRhdGFMaXN0KCkge1xyXG4gICAgY29uc3QgbWV0YWRhdGFkdG8gPSBbXTtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YUxpc3QodGhpcy5wb3N0Zml4U2VsZWN0ZWQpLnN1YnNjcmliZSh0ZW1wbGF0ZXMgPT4ge1xyXG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgaWYgKCF0ZW1wbGF0ZXMpIHtcclxuICAgICAgICB0aGlzLmdyaWREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIGdzcC5pZGUubWVzc2FnZXIuZXJyb3IoJ2Vycm9yIHRvIGdldCByZXNwb25zZScpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHByZWZlci1mb3Itb2ZcclxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRlbXBsYXRlcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlc1tpbmRleF07XHJcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoVGV4dCkge1xyXG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcclxuICAgICAgICAgIGlmICh0ZW1wbGF0ZS5jb2RlLmluZGV4T2YodGhpcy5zZWFyY2hUZXh0KSA+IC0xIHx8IHRlbXBsYXRlLm5hbWUuaW5kZXhPZih0aGlzLnNlYXJjaFRleHQpID4gLTEpIHtcclxuICAgICAgICAgICAgbWV0YWRhdGFkdG8ucHVzaCh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1ldGFkYXRhZHRvLnB1c2godGVtcGxhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWV0YWRhdGFkdG8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRoaXMub25TZWxlY3Rpb25DaGFuZ2VkSW50ZXJuYWwobWV0YWRhdGFkdG9bMF0sIFswXSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5oYXNOZXh0ID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZGF0YSA9IG1ldGFkYXRhZHRvO1xyXG4gICAgICB0aGlzLmdyaWREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICB0aGlzLmRhdGEgPSBtZXRhZGF0YWR0bztcclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnN0IG1zZyA9IGVycm9yLmVycm9yLk1lc3NhZ2UgIT09IHVuZGVmaW5lZCA/IGVycm9yLmVycm9yLk1lc3NhZ2UgOiBlcnJvci5lcnJvci5lcnJvci5tZXNzYWdlO1xyXG4gICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdHZXQgTWV0YWRhdGFzIEVycm9yOicgKyBtc2cpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIEdldE1ldGFkYXRhTGlzdEluQm8oKSB7XHJcbiAgICBjb25zdCBtZXRhZGF0YWR0byA9IFtdO1xyXG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLkdldE1ldGFkYXRhTGlzdEluQm8odGhpcy5wb3N0Zml4U2VsZWN0ZWQpLnN1YnNjcmliZSh0ZW1wbGF0ZXMgPT4ge1xyXG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgaWYgKCF0ZW1wbGF0ZXMpIHtcclxuICAgICAgICB0aGlzLmdyaWREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIGdzcC5pZGUubWVzc2FnZXIuZXJyb3IoJ2Vycm9yIHRvIGdldCByZXNwb25zZScpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IHByZWZlci1mb3Itb2ZcclxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRlbXBsYXRlcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlc1tpbmRleF07XHJcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoVGV4dCkge1xyXG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcclxuICAgICAgICAgIGlmICh0ZW1wbGF0ZS5wcm9qZWN0TmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGhpcy5zZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkpID4gLTFcclxuICAgICAgICAgICAgfHwgdGVtcGxhdGUuY29kZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGhpcy5zZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkpID4gLTFcclxuICAgICAgICAgICAgfHwgdGVtcGxhdGUubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGhpcy5zZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcclxuICAgICAgICAgICAgbWV0YWRhdGFkdG8ucHVzaCh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1ldGFkYXRhZHRvLnB1c2godGVtcGxhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobWV0YWRhdGFkdG8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRoaXMub25TZWxlY3Rpb25DaGFuZ2VkSW50ZXJuYWwobWV0YWRhdGFkdG9bMF0sIFswXSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5oYXNOZXh0ID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZGF0YSA9IG1ldGFkYXRhZHRvO1xyXG4gICAgICB0aGlzLmdyaWREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICB0aGlzLmRhdGEgPSBtZXRhZGF0YWR0bztcclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnN0IG1zZyA9IGVycm9yLmVycm9yLk1lc3NhZ2UgIT09IHVuZGVmaW5lZCA/IGVycm9yLmVycm9yLk1lc3NhZ2UgOiBlcnJvci5lcnJvci5lcnJvci5tZXNzYWdlO1xyXG4gICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdHZXQgTWV0YWRhdGFzIEVycm9yOicgKyBtc2cpO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBHZXRMb2NhbE1ldGFkYXRhTGlzdChyZWxvYWRUID0gdHJ1ZSkge1xyXG4gICAgY29uc3QgbWV0YWRhdGFkdG8gPSBbXTtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICAvLyB0aGlzLmdzcE1ldGFTZXJ2aWNlLkdldERldlJvb3RQYXRoKCkuc3Vic2NyaWJlKHJvb3QgPT4ge1xyXG4gICAgLy8gdGhpcy5tZXRhZGF0YVNlcnZpY2Uucm9vdFBhdGggPSByb290O1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxyXG4gICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuR2V0TWV0YWRhdGFJbmZvcyh0aGlzLnNjb3BlLCB0aGlzLmNvZGVsYW5ndWFnZSwgdGhpcy5pc01hdmVuRW5hYmxlLCB0aGlzLnBvc3RmaXhTZWxlY3RlZCwgdGhpcy5zZWFyY2hUZXh0LCB0aGlzLnBhZ2UpLnN1YnNjcmliZSgodGVtcGxhdGVzOiBhbnkpID0+IHtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGlmICghdGVtcGxhdGVzKSB7XHJcbiAgICAgICAgZ3NwLmlkZS5tZXNzYWdlci5lcnJvcignZXJyb3IgdG8gZ2V0IG1ldGFkYXRhIGluZm9zJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDpobXnoIHlpITnkIZcclxuICAgICAgaWYgKHRlbXBsYXRlcy5wYWdlKSB7XHJcbiAgICAgICAgaWYgKHRlbXBsYXRlcy5wYWdlLnBhZ2VTaXplIDwgdGhpcy5pbml0UGFnZVNpemUpIHtcclxuICAgICAgICAgIHRoaXMuaGFzTmV4dCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmhhc05leHQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2UucGFnZVNpemUgPSB0ZW1wbGF0ZXMucGFnZS5wYWdlU2l6ZTtcclxuICAgICAgICB0aGlzLnBhZ2UucGFnZUluZGV4ID0gdGVtcGxhdGVzLnBhZ2UucGFnZUluZGV4O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaGFzTmV4dCA9IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBtZXRhZGF0YUxpc3QgPSB0ZW1wbGF0ZXMubWV0YWRhdGFJbmRleEl0ZW1zO1xyXG4gICAgICBpZiAoIW1ldGFkYXRhTGlzdCB8fCBtZXRhZGF0YUxpc3QubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIHRoaXMubXlTZWxlY3Rpb24gPSBbXTtcclxuICAgICAgICB0aGlzLmdyaWREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWV0YWRhdGFMaXN0LmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQucmVwb1BrZyAmJiBlbGVtZW50LnJlcG9Qa2cubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZWxlbWVudC5udWdldFBrZ05hbWUgPSBlbGVtZW50LnJlcG9Qa2dbMF0ubmFtZTtcclxuICAgICAgICAgIGVsZW1lbnQubnVnZXRQa2dWZXJzaW9uID0gZWxlbWVudC5yZXBvUGtnWzBdLnZlcnNpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1ldGFkYXRhZHRvLnB1c2goZWxlbWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocmVsb2FkVCkge1xyXG4gICAgICAgIHRoaXMub25TZWxlY3Rpb25DaGFuZ2VkSW50ZXJuYWwobWV0YWRhdGFkdG9bMF0sIFswXSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gbWV0YWRhdGFkdG87XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbWV0YWRhdGFkdG8uZm9yRWFjaChkdG8gPT4ge1xyXG4gICAgICAgICAgdGhpcy5kYXRhLnB1c2goZHRvKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmdyaWREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICB0aGlzLmRhdGEgPSBtZXRhZGF0YWR0bztcclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnN0IG1zZyA9IGVycm9yLmVycm9yLk1lc3NhZ2UgIT09IHVuZGVmaW5lZCA/IGVycm9yLmVycm9yLk1lc3NhZ2UgOiBlcnJvci5lcnJvci5lcnJvci5tZXNzYWdlO1xyXG4gICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdNZXRhZGF0YSByZXEgZmFpbGVkOiAnICsgbXNnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNob3dPbmx5QmV2ZXJhZ2VzRGV0YWlscyhkYXRhSXRlbTogYW55LCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZGF0YUl0ZW0ucmVwb1BrZyAmJiBkYXRhSXRlbS5yZXBvUGtnLmxlbmd0aCA+IDE7XHJcbiAgfVxyXG5cclxuICBnZXRSZW1vdGVNZXRhZGF0YUxpc3QocmVsb2FkKSB7XHJcbiAgICBjb25zdCBtZXRhZGF0YWR0byA9IFtdO1xyXG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcclxuICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLkdldE1ldGFkYXRhSW5mb3ModGhpcy5zY29wZSwgdGhpcy5jb2RlbGFuZ3VhZ2UsIHRoaXMuaXNNYXZlbkVuYWJsZSwgdGhpcy5wb3N0Zml4U2VsZWN0ZWQsIHRoaXMuc2VhcmNoVGV4dCwgdGhpcy5wYWdlLCB0aGlzLnNlbGVjdGVkU291cmNlLnZhbHVlKS5zdWJzY3JpYmUoKHRlbXBsYXRlczogYW55KSA9PiB7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBpZiAoIXRlbXBsYXRlcykge1xyXG4gICAgICAgIGdzcC5pZGUubWVzc2FnZXIuZXJyb3IoJ2Vycm9yIHRvIGdldCBtZXRhZGF0YSBpbmZvcycpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6aG156CB5aSE55CGXHJcbiAgICAgIGlmICh0ZW1wbGF0ZXMucGFnZSkge1xyXG4gICAgICAgIGlmICh0ZW1wbGF0ZXMucGFnZS5wYWdlU2l6ZSA8IHRoaXMuaW5pdFBhZ2VTaXplKSB7XHJcbiAgICAgICAgICB0aGlzLmhhc05leHQgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5oYXNOZXh0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYWdlLnBhZ2VTaXplID0gdGVtcGxhdGVzLnBhZ2UucGFnZVNpemU7XHJcbiAgICAgICAgdGhpcy5wYWdlLnBhZ2VJbmRleCA9IHRlbXBsYXRlcy5wYWdlLnBhZ2VJbmRleDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmhhc05leHQgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgbWV0YWRhdGFMaXN0ID0gdGVtcGxhdGVzLm1ldGFkYXRhSW5kZXhJdGVtcztcclxuICAgICAgaWYgKCFtZXRhZGF0YUxpc3QgfHwgbWV0YWRhdGFMaXN0Lmxlbmd0aCA8IDEpIHtcclxuICAgICAgICB0aGlzLm15U2VsZWN0aW9uID0gW107XHJcbiAgICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1ldGFkYXRhTGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmICghZWxlbWVudC5yZXBvUGtnIHx8IGVsZW1lbnQucmVwb1BrZy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvZGVsYW5ndWFnZSA9PT0gJ2RvdG5ldCcgfHwgdGhpcy5pc01hdmVuRW5hYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgZWxlbWVudC5yZXBvUGtnLnNvcnQodGhpcy5jb21wYXJlTnVnZXQoJ3ZlcnNpb24nKSk7XHJcbiAgICAgICAgICBlbGVtZW50Lm51Z2V0UGtnTmFtZSA9IGVsZW1lbnQucmVwb1BrZ1swXS5uYW1lO1xyXG4gICAgICAgICAgZWxlbWVudC5udWdldFBrZ1ZlcnNpb24gPSBlbGVtZW50LnJlcG9Qa2dbMF0udmVyc2lvbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZWxlbWVudC5yZXBvUGtnLnNvcnQodGhpcy5jb21wYXJlKCd2ZXJzaW9uJykpO1xyXG4gICAgICAgICAgZWxlbWVudC5ncm91cElkID0gZWxlbWVudC5yZXBvUGtnWzBdLmdyb3VwSWQ7XHJcbiAgICAgICAgICBlbGVtZW50LmFydGlmYWN0SWQgPSBlbGVtZW50LnJlcG9Qa2dbMF0uYXJ0aWZhY3RJZDtcclxuICAgICAgICAgIGVsZW1lbnQubWF2ZW5Qa2dWZXJzaW9uID0gZWxlbWVudC5yZXBvUGtnWzBdLnZlcnNpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1ldGFkYXRhZHRvLnB1c2goZWxlbWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAoIW1ldGFkYXRhZHRvIHx8IG1ldGFkYXRhZHRvLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICB0aGlzLm15U2VsZWN0aW9uID0gW107XHJcbiAgICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHJlbG9hZCkge1xyXG4gICAgICAgIHRoaXMub25TZWxlY3Rpb25DaGFuZ2VkSW50ZXJuYWwobWV0YWRhdGFkdG9bMF0sIFswXSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gbWV0YWRhdGFkdG87XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbWV0YWRhdGFkdG8uZm9yRWFjaChkdG8gPT4ge1xyXG4gICAgICAgICAgdGhpcy5kYXRhLnB1c2goZHRvKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmdyaWREYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICB0aGlzLmRhdGEgPSBtZXRhZGF0YWR0bztcclxuICAgICAgdGhpcy5ncmlkRGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGNvbnN0IG1zZyA9IGVycm9yLmVycm9yLk1lc3NhZ2UgIT09IHVuZGVmaW5lZCA/IGVycm9yLmVycm9yLk1lc3NhZ2UgOiBlcnJvci5lcnJvci5lcnJvci5tZXNzYWdlO1xyXG4gICAgICBnc3AuaWRlLm1lc3NhZ2VyLmVycm9yKCdNZXRhZGF0YSByZXEgZmFpbGVkOiAnICsgbXNnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29tcGFyZShwcm8pIHtcclxuICAgIHJldHVybiAob2JqMSwgb2JqMikgPT4ge1xyXG4gICAgICBjb25zdCB2YWwxID0gb2JqMVtwcm9dO1xyXG4gICAgICBjb25zdCB2YWwyID0gb2JqMltwcm9dO1xyXG4gICAgICBjb25zdCB2YWxhMSA9IHZhbDEuc3BsaXQoJy4nKTtcclxuICAgICAgY29uc3QgdmFsYTIgPSB2YWwyLnNwbGl0KCcuJyk7XHJcbiAgICAgIGNvbnN0IHYxMCA9IHZhbGExWzBdLnN1YnN0cigxKTtcclxuICAgICAgY29uc3QgdjIwID0gdmFsYTJbMF0uc3Vic3RyKDEpO1xyXG4gICAgICBpZiAoTnVtYmVyKHYxMCkgPCBOdW1iZXIodjIwKSkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChOdW1iZXIodjEwKSA+IE51bWJlcih2MjApKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChOdW1iZXIodmFsYTFbMV0pIDwgTnVtYmVyKHZhbGEyWzFdKSkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChOdW1iZXIodmFsYTFbMV0pID4gTnVtYmVyKHZhbGEyWzFdKSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB2MTIgPSB2YWxhMVsyXS5yZXBsYWNlKCctU05BUFNIT1QnLCAnJyk7XHJcbiAgICAgIGNvbnN0IHYyMiA9IHZhbGEyWzJdLnJlcGxhY2UoJy1TTkFQU0hPVCcsICcnKTtcclxuICAgICAgaWYgKE51bWJlcih2MTIpIDwgTnVtYmVyKHYyMikpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTnVtYmVyKHYxMikgPiBOdW1iZXIodjIyKSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodmFsYTFbMl0uaW5kZXhPZignLVNOQVBTSE9UJykgPiAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29tcGFyZU51Z2V0KHBybykge1xyXG4gICAgcmV0dXJuIChvYmoxLCBvYmoyKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbDEgPSBvYmoxW3Byb107XHJcbiAgICAgIGNvbnN0IHZhbDIgPSBvYmoyW3Byb107XHJcbiAgICAgIGNvbnN0IHZhbGExID0gdmFsMS5zcGxpdCgnLicpO1xyXG4gICAgICBjb25zdCB2YWxhMiA9IHZhbDIuc3BsaXQoJy4nKTtcclxuICAgICAgY29uc3QgdjEwID0gdmFsYTFbMF07XHJcbiAgICAgIGNvbnN0IHYyMCA9IHZhbGEyWzBdO1xyXG4gICAgICBpZiAoTnVtYmVyKHYxMCkgPCBOdW1iZXIodjIwKSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoTnVtYmVyKHYxMCkgPiBOdW1iZXIodjIwKSkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChOdW1iZXIodmFsYTFbMV0pIDwgTnVtYmVyKHZhbGEyWzFdKSkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChOdW1iZXIodmFsYTFbMV0pID4gTnVtYmVyKHZhbGEyWzFdKSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCB2MTIgPSB2YWxhMVsyXTtcclxuICAgICAgY29uc3QgdjIyID0gdmFsYTJbMl07XHJcbiAgICAgIGlmICh2MTIuaW5kZXhPZignYWxwaGEnKSA+IDApIHtcclxuICAgICAgICBpZiAodjEyIDwgdjIyKSB7XHJcbiAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYxMiA+IHYyMikge1xyXG4gICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoTnVtYmVyKHYxMikgPCBOdW1iZXIodjIyKSkge1xyXG4gICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChOdW1iZXIodjEyKSA+IE51bWJlcih2MjIpKSB7XHJcbiAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2NvcGVDaGFuZ2VkKGNsYXNzaWZpZXIpIHtcclxuICAgIHRoaXMuY2xhc3NpZmllciA9IGNsYXNzaWZpZXI7XHJcbiAgICB0aGlzLmdldERhdGEoKTtcclxuICB9XHJcblxyXG4gIGdldERhdGEoKSB7XHJcbiAgICBpZiAodGhpcy5jbGFzc2lmaWVyKSB7XHJcbiAgICAgIGlmICh0aGlzLnJlbG9hZCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCByZWxvYWRUID0gdGhpcy5yZWxvYWQ7XHJcbiAgICAgIGlmICh0aGlzLmNsYXNzaWZpZXIuaWQgPT09ICdwcm9qZWN0Jykge1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSAwO1xyXG4gICAgICAgIHRoaXMuR2V0TWV0YWRhdGFMaXN0KCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jbGFzc2lmaWVyLmlkID09PSAnYm8nKSB7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IDA7XHJcbiAgICAgICAgdGhpcy5HZXRNZXRhZGF0YUxpc3RJbkJvKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jbGFzc2lmaWVyLmlkID09PSAncmVmJykge1xyXG4gICAgICAgIHRoaXMuc2NvcGUgPSAzO1xyXG4gICAgICAgIHRoaXMuZ2V0UmVtb3RlTWV0YWRhdGFMaXN0KHJlbG9hZFQpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY2xhc3NpZmllci5pZCA9PT0gJ3JlbW90ZScpIHtcclxuICAgICAgICB0aGlzLnNjb3BlID0gMjtcclxuICAgICAgICB0aGlzLmdldFJlbW90ZU1ldGFkYXRhTGlzdChyZWxvYWRUKTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmNsYXNzaWZpZXIuaWQgPT09ICdsb2NhbCcpIHtcclxuICAgICAgICB0aGlzLnNjb3BlID0gMTtcclxuICAgICAgICB0aGlzLkdldExvY2FsTWV0YWRhdGFMaXN0KHJlbG9hZFQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDph43nva7kuIDmrKHor7fmsYLkuK3nmoTnirbmgIFcclxuICAgICAgdGhpcy5yZWxvYWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g6YCJ5Lit5YWD5pWw5o2u5ZCO55qE5LqL5Lu25aSE55CGXHJcbiAgb25TZWxlY3Rpb25DaGFuZ2UoZXZlbnQpIHtcclxuICAgIGlmIChldmVudCAmJiBldmVudC5zZWxlY3RlZFJvd3MgJiYgZXZlbnQuc2VsZWN0ZWRSb3dzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgZGF0YUl0ZW0gPSBldmVudC5zZWxlY3RlZFJvd3NbMF0uZGF0YUl0ZW07XHJcbiAgICAgIHRoaXMub25TZWxlY3Rpb25DaGFuZ2VkSW50ZXJuYWwoZGF0YUl0ZW0sIFtldmVudC5zZWxlY3RlZFJvd3NbMF0uaW5kZXhdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25TZWxlY3Rpb25DaGFuZ2VkSW50ZXJuYWwoZGF0YUl0ZW0sIGluZGV4KSB7XHJcbiAgICBjb25zdCBuZXdEYXRhID0gdGhpcy5tYWtlTmV3RGF0YShkYXRhSXRlbSk7XHJcbiAgICBpZiAodGhpcy5zY29wZSA9PT0gMiB8fCB0aGlzLnNjb3BlID09PSAzKSB7XHJcbiAgICAgIG5ld0RhdGEucmVwb1BrZy5wdXNoKGRhdGFJdGVtLnJlcG9Qa2dbMF0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VkKG5ld0RhdGEsIGluZGV4KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2VsZWN0aW9uQ2hhbmdlZChkYXRhSXRlbSwgaW5kZXggPSBbXSkge1xyXG4gICAgdGhpcy5zZWxlY3RlZE1ldGFkYXRhQ2hhbmdlZC5lbWl0KGRhdGFJdGVtKTtcclxuICAgIHRoaXMubXlTZWxlY3Rpb24gPSBpbmRleDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWFrZU5ld0RhdGEoZGF0YUl0ZW0pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG1kUGtnTmFtZTogZGF0YUl0ZW0ubWRQa2dOYW1lLFxyXG4gICAgICByZXBvUGtnOiBbXSxcclxuICAgICAgaWQ6IGRhdGFJdGVtLmlkLFxyXG4gICAgICBuYW1lU3BhY2U6IGRhdGFJdGVtLm5hbWVTcGFjZSxcclxuICAgICAgY29kZTogZGF0YUl0ZW0uY29kZSxcclxuICAgICAgbmFtZTogZGF0YUl0ZW0ubmFtZSxcclxuICAgICAgZmlsZU5hbWU6IGRhdGFJdGVtLmZpbGVOYW1lLFxyXG4gICAgICB0eXBlOiBkYXRhSXRlbS50eXBlLFxyXG4gICAgICBiaXpvYmplY3RJRDogZGF0YUl0ZW0uYml6b2JqZWN0SUQsXHJcbiAgICAgIGxhbmd1YWdlOiBkYXRhSXRlbS5sYW5ndWFnZSxcclxuICAgICAgaXNUcmFuc2xhdGluZzogZGF0YUl0ZW0uaXNUcmFuc2xhdGluZyxcclxuICAgICAgcmVsYXRpdmVQYXRoOiBkYXRhSXRlbS5yZWxhdGl2ZVBhdGgsXHJcbiAgICAgIGV4dGVuZFByb3BlcnR5OiBkYXRhSXRlbS5leHRlbmRQcm9wZXJ0eSxcclxuICAgICAgcHJvY2Vzc01vZGU6IGRhdGFJdGVtLnByb2Nlc3NNb2RlXHJcbiAgICB9O1xyXG4gIH1cclxuICBvblNlbGVjdGVkUGtnQ2hhbmdlZChkYXRhSXRlbSkge1xyXG4gICAgaWYgKGRhdGFJdGVtICYmIGRhdGFJdGVtLnJlcG9Qa2cgJiYgZGF0YUl0ZW0ucmVwb1BrZy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IG5ld0RhdGEgPSB0aGlzLm1ha2VOZXdEYXRhKGRhdGFJdGVtKTtcclxuICAgICAgaWYgKGRhdGFJdGVtLnNlbGVjdGVkUGtnKSB7XHJcbiAgICAgICAgbmV3RGF0YS5yZXBvUGtnLnB1c2goZGF0YUl0ZW0uc2VsZWN0ZWRQa2cpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld0RhdGEucmVwb1BrZy5wdXNoKGRhdGFJdGVtLnJlcG9Qa2dbMF0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZChuZXdEYXRhLCBbXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdvU2VhcmNoKCkge1xyXG4gICAgaWYgKCF0aGlzLnNlYXJjaFRleHQpIHsgdGhpcy5zZWFyY2hUZXh0ID0gJyc7IH1cclxuICAgIGNvbnNvbGUubG9nKCfmkJzntKInKTtcclxuICAgIGNvbnN0IHNlYXJjaFRleHRUcmltID0gdGhpcy5zZWFyY2hUZXh0LnRyaW0oKTtcclxuICAgIGlmICh0aGlzLnNlYXJjaFRleHQgJiYgdGhpcy5zZWFyY2hUZXh0Rm9yRHVwID09PSBzZWFyY2hUZXh0VHJpbSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnNlYXJjaFRleHRGb3JEdXAgPSBzZWFyY2hUZXh0VHJpbTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMuc2VhcmNoVGV4dCk7XHJcbiAgICB0aGlzLnNlYXJjaFRleHQgPSBzZWFyY2hUZXh0VHJpbTtcclxuICAgIC8vIOaQnOe0olxyXG4gICAgY29uc29sZS5sb2coJ3NlYXJjaCBmb3IgJyArIHRoaXMuc2VhcmNoVGV4dCk7XHJcbiAgICB0aGlzLmdldERhdGEoKTtcclxuICB9XHJcblxyXG4gIGdvTmV4dCgpIHtcclxuICAgIGNvbnNvbGUubG9nKCfkuIvkuIDpobUnKTtcclxuICAgIHRoaXMucGFnZS5wYWdlSW5kZXggPSB0aGlzLnBhZ2UucGFnZUluZGV4ICsgMTtcclxuICAgIHRoaXMucmVsb2FkID0gZmFsc2U7XHJcbiAgICB0aGlzLmdldERhdGEoKTtcclxuICB9XHJcblxyXG4gIG9uQ29uZmxpY3RBdm9pZEZsYWdDaGFuZ2VkKCkge1xyXG4gICAgY29uc29sZS5sb2coJ0NvbmZsaWN0QXZvaWRGbGFnICcgKyB0aGlzLmNvbmZsaWN0QXZvaWRGbGFnKTtcclxuICAgIHRoaXMuZ2V0RGF0YSgpO1xyXG4gIH1cclxuXHJcbiAgdHlwZVNlbGVjdGVkQ2hhbmdlZChtZFNlbGV0ZWQpIHtcclxuICAgIGlmICghbWRTZWxldGVkKSB7XHJcbiAgICAgIG1kU2VsZXRlZCA9IHRoaXMuc2VsZWN0ZWRUeXBlO1xyXG4gICAgfVxyXG4gICAgaWYgKG1kU2VsZXRlZCkge1xyXG4gICAgICBpZiAobWRTZWxldGVkLnZhbHVlID09PSB0aGlzLmFsbFR5cGUudmFsdWUpIHtcclxuICAgICAgICB0aGlzLnBvc3RmaXhTZWxlY3RlZCA9IHRoaXMucG9zdGZpeDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnBvc3RmaXhTZWxlY3RlZCA9IG1kU2VsZXRlZC52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNvdXJjZVNlbGVjdGVkQ2hhbmdlZChzb3VyY2UpIHtcclxuICAgIGlmICghc291cmNlKSB7XHJcbiAgICAgIHNvdXJjZSA9IHRoaXMuc2VsZWN0ZWRTb3VyY2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNlbGVjdGVkU291cmNlID0gc291cmNlO1xyXG4gICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==