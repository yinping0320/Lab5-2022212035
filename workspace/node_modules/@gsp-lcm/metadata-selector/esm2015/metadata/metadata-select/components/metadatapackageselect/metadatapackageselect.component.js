/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/metadatapackageselect/metadatapackageselect.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, EventEmitter, Output } from '@angular/core';
import { MetadataService } from '../../metadata.service';
import { TreeclassifierComponent } from '../treeclassifier/treeclassifier.component';
import { GSPMetadataService } from '../../../metadata.service';
export class MetadatapackageselectComponent {
    /**
     * @param {?} metadataService
     * @param {?} gspMetaService
     */
    constructor(metadataService, gspMetaService) {
        this.metadataService = metadataService;
        this.gspMetaService = gspMetaService;
        this.closeModalEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    showModal() {
        // this.isModalShown = true;
    }
    /**
     * @return {?}
     */
    hideModal() {
        // this.isModalShown = false;
        this.closeModalEmitter.emit();
    }
    /**
     * @return {?}
     */
    onHidden() {
        // this.isModalShown = false;
        this.closeModalEmitter.emit();
    }
    /**
     * @param {?} classifier
     * @return {?}
     */
    onSelectedChange(classifier) {
        // this.classifier = classifier;
    }
    /**
     * @return {?}
     */
    ResolvePackage() {
        this.closeModalEmitter.emit();
        if (this.metadataService.packages.length > 0) {
            /** @type {?} */
            let flag = false;
            /** @type {?} */
            const packageName = this.metadataService.packages[0];
            this.gspMetaService.GetDevRootPath().subscribe((/**
             * @param {?} root
             * @return {?}
             */
            root => {
                this.metadataService.rootPath = root;
                this.metadataService.GetMetadataPackageInfo(root + this.metadataService.packRefPath, packageName).subscribe((/**
                 * @param {?} packageInfo
                 * @return {?}
                 */
                packageInfo => {
                    /** @type {?} */
                    const header = packageInfo.header;
                    // 检测依赖项
                    this.metadataService.GetMetadataProjectInfo().subscribe((/**
                     * @param {?} projInfo
                     * @return {?}
                     */
                    projInfo => {
                        // 已有依赖关系
                        /** @type {?} */
                        const refs = projInfo.metadataPackageRefs;
                        refs.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            if (item.name === header.name) {
                                alert('已添加对该元数据包的依赖');
                                flag = true;
                            }
                        }));
                        if (flag === true) {
                            return;
                        }
                        // 更新工程引用
                        this.metadataService.UpdateMetadataProject(header).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        data => {
                            this.metadataService.treeData = [];
                            this.metadataService.Refresh();
                        }));
                        // 刷新树节点
                        if (this.treeclassifierComponent) {
                            this.treeclassifierComponent.files = this.metadataService.treeData;
                        }
                    }));
                }));
            }));
        }
    }
}
MetadatapackageselectComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatapackageselect',
                template: "<!--\u7B2C\u4E8C\u79CD\u5F39\u51FA\u65B9\u6CD5\u7684\u7EC4\u4EF6-->\r\n<!-- <div *ngIf=\"isModalShown\" [config]=\"{ show: true }\" (onHidden)=\"onHidden()\" bsModal #autoShownModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" style='min-height: 800px; min-width: 900px; max-width: none'>\r\n    <div class=\"modal-dialog\" style='max-width:none; width: 615px;margin-top:0'>\r\n        <div class=\"modal-content\"> -->\r\n            <!-- <div class=\"modal-header\">\r\n                <h4 class=\"modal-title pull-left\">\u9009\u62E9\u5143\u6570\u636E\u5305</h4>\r\n                <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"hideModal()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n            </div> -->\r\n            <div class=\"modal-body\">\r\n                <div class=\"templateBlock\">\r\n                    <app-metadatapackagelist></app-metadatapackagelist>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"ResolvePackage()\">\u786E\u5B9A</button>\r\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"hideModal()\">\u53D6\u6D88</button>\r\n            </div>\r\n        <!-- </div>\r\n    </div>\r\n</div> -->",
                styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
            }] }
];
/** @nocollapse */
MetadatapackageselectComponent.ctorParameters = () => [
    { type: MetadataService },
    { type: GSPMetadataService }
];
MetadatapackageselectComponent.propDecorators = {
    closeModalEmitter: [{ type: Output }],
    treeclassifierComponent: [{ type: ViewChild, args: [TreeclassifierComponent,] }]
};
if (false) {
    /** @type {?} */
    MetadatapackageselectComponent.prototype.closeModalEmitter;
    /** @type {?} */
    MetadatapackageselectComponent.prototype.treeclassifierComponent;
    /**
     * @type {?}
     * @private
     */
    MetadatapackageselectComponent.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    MetadatapackageselectComponent.prototype.gspMetaService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGFwYWNrYWdlc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtbGNtL21ldGFkYXRhLXNlbGVjdG9yLyIsInNvdXJjZXMiOlsibWV0YWRhdGEvbWV0YWRhdGEtc2VsZWN0L2NvbXBvbmVudHMvbWV0YWRhdGFwYWNrYWdlc2VsZWN0L21ldGFkYXRhcGFja2FnZXNlbGVjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQVEvRCxNQUFNLE9BQU8sOEJBQThCOzs7OztJQUd6QyxZQUFvQixlQUFnQyxFQUNoQyxjQUFrQztRQURsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsbUJBQWMsR0FBZCxjQUFjLENBQW9CO1FBQUksSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFBQyxDQUFDOzs7O0lBQzdHLFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsU0FBUztRQUNQLDRCQUE0QjtJQUM5QixDQUFDOzs7O0lBRUQsU0FBUztRQUNQLDZCQUE2QjtRQUM3QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELFFBQVE7UUFDTiw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsVUFBa0I7UUFDakMsZ0NBQWdDO0lBQ2xDLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ3hDLElBQUksR0FBRyxLQUFLOztrQkFDVixXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLENBQUMsU0FBUzs7OztZQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxlQUFlLENBQUMsc0JBQXNCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLFNBQVM7Ozs7Z0JBQUMsV0FBVyxDQUFDLEVBQUU7OzBCQUNsSCxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU07b0JBQ2pDLFFBQVE7b0JBQ1IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLFNBQVM7Ozs7b0JBQUMsUUFBUSxDQUFDLEVBQUU7Ozs4QkFFM0QsSUFBSSxHQUFHLFFBQVEsQ0FBQyxtQkFBbUI7d0JBQ3pDLElBQUksQ0FBQyxPQUFPOzs7O3dCQUFDLElBQUksQ0FBQyxFQUFFOzRCQUNsQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtnQ0FDN0IsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dDQUN0QixJQUFJLEdBQUcsSUFBSSxDQUFDOzZCQUNiO3dCQUNILENBQUMsRUFBQyxDQUFDO3dCQUNILElBQUksSUFBSSxLQUFLLElBQUksRUFBRTs0QkFDakIsT0FBTzt5QkFDUjt3QkFDSCxTQUFTO3dCQUNQLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUzs7Ozt3QkFBQyxJQUFJLENBQUMsRUFBRTs0QkFDcEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDOzRCQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO3dCQUNqQyxDQUFDLEVBQUMsQ0FBQzt3QkFDSCxRQUFRO3dCQUNOLElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFOzRCQUNsQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDO3lCQUNuRTtvQkFDQSxDQUFDLEVBQUMsQ0FBQztnQkFDUCxDQUFDLEVBQUMsQ0FBQztZQUNMLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7WUFuRUYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyx1NENBQXFEOzthQUV0RDs7OztZQVRRLGVBQWU7WUFFZixrQkFBa0I7OztnQ0FTeEIsTUFBTTtzQ0FDTixTQUFTLFNBQUMsdUJBQXVCOzs7O0lBRGxDLDJEQUErQzs7SUFDL0MsaUVBQXFGOzs7OztJQUN6RSx5REFBd0M7Ozs7O0lBQ3hDLHdEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uLy4uL21ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUcmVlY2xhc3NpZmllckNvbXBvbmVudCB9IGZyb20gJy4uL3RyZWVjbGFzc2lmaWVyL3RyZWVjbGFzc2lmaWVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEdTUE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL21ldGFkYXRhLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnYXBwLW1ldGFkYXRhcGFja2FnZXNlbGVjdCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL21ldGFkYXRhcGFja2FnZXNlbGVjdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vbWV0YWRhdGFwYWNrYWdlc2VsZWN0LmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFwYWNrYWdlc2VsZWN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBAT3V0cHV0KCkgY2xvc2VNb2RhbEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoVHJlZWNsYXNzaWZpZXJDb21wb25lbnQpIHRyZWVjbGFzc2lmaWVyQ29tcG9uZW50OiBUcmVlY2xhc3NpZmllckNvbXBvbmVudDtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1ldGFkYXRhU2VydmljZTogTWV0YWRhdGFTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgZ3NwTWV0YVNlcnZpY2U6IEdTUE1ldGFkYXRhU2VydmljZSkgeyB0aGlzLmNsb3NlTW9kYWxFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IH1cclxuICBuZ09uSW5pdCgpIHtcclxuICB9XHJcblxyXG4gIHNob3dNb2RhbCgpOiB2b2lkIHtcclxuICAgIC8vIHRoaXMuaXNNb2RhbFNob3duID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGhpZGVNb2RhbCgpOiB2b2lkIHtcclxuICAgIC8vIHRoaXMuaXNNb2RhbFNob3duID0gZmFsc2U7XHJcbiAgICB0aGlzLmNsb3NlTW9kYWxFbWl0dGVyLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIG9uSGlkZGVuKCk6IHZvaWQge1xyXG4gICAgLy8gdGhpcy5pc01vZGFsU2hvd24gPSBmYWxzZTtcclxuICAgIHRoaXMuY2xvc2VNb2RhbEVtaXR0ZXIuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgb25TZWxlY3RlZENoYW5nZShjbGFzc2lmaWVyOiBzdHJpbmcpIHtcclxuICAgIC8vIHRoaXMuY2xhc3NpZmllciA9IGNsYXNzaWZpZXI7XHJcbiAgfVxyXG5cclxuICBSZXNvbHZlUGFja2FnZSgpIHtcclxuICAgIHRoaXMuY2xvc2VNb2RhbEVtaXR0ZXIuZW1pdCgpO1xyXG4gICAgaWYgKHRoaXMubWV0YWRhdGFTZXJ2aWNlLnBhY2thZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcclxuICAgICAgY29uc3QgcGFja2FnZU5hbWUgPSB0aGlzLm1ldGFkYXRhU2VydmljZS5wYWNrYWdlc1swXTtcclxuICAgICAgdGhpcy5nc3BNZXRhU2VydmljZS5HZXREZXZSb290UGF0aCgpLnN1YnNjcmliZShyb290ID0+IHtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5yb290UGF0aCA9IHJvb3Q7XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuR2V0TWV0YWRhdGFQYWNrYWdlSW5mbyhyb290ICsgdGhpcy5tZXRhZGF0YVNlcnZpY2UucGFja1JlZlBhdGgsIHBhY2thZ2VOYW1lKS5zdWJzY3JpYmUocGFja2FnZUluZm8gPT4ge1xyXG4gICAgICAgICAgY29uc3QgaGVhZGVyID0gcGFja2FnZUluZm8uaGVhZGVyO1xyXG4gICAgICAgICAgLy8g5qOA5rWL5L6d6LWW6aG5XHJcbiAgICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YVByb2plY3RJbmZvKCkuc3Vic2NyaWJlKHByb2pJbmZvID0+IHtcclxuICAgICAgICAgICAgLy8g5bey5pyJ5L6d6LWW5YWz57O7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlZnMgPSBwcm9qSW5mby5tZXRhZGF0YVBhY2thZ2VSZWZzO1xyXG4gICAgICAgICAgICByZWZzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZSA9PT0gaGVhZGVyLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KCflt7Lmt7vliqDlr7nor6XlhYPmlbDmja7ljIXnmoTkvp3otZYnKTtcclxuICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChmbGFnID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyDmm7TmlrDlt6XnqIvlvJXnlKhcclxuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuVXBkYXRlTWV0YWRhdGFQcm9qZWN0KGhlYWRlcikuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS50cmVlRGF0YSA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5SZWZyZXNoKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIC8vIOWIt+aWsOagkeiKgueCuVxyXG4gICAgICAgICAgICBpZiAodGhpcy50cmVlY2xhc3NpZmllckNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnRyZWVjbGFzc2lmaWVyQ29tcG9uZW50LmZpbGVzID0gdGhpcy5tZXRhZGF0YVNlcnZpY2UudHJlZURhdGE7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==