/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/selectmetadate/onclick.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, HostListener, Output, EventEmitter, Renderer2, ElementRef } from '@angular/core';
import { throttleTime } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class OnceClickDirective {
    /**
     * @param {?} renderer
     * @param {?} element
     */
    constructor(renderer, // Angular 2.x导入Renderer
    element) {
        this.renderer = renderer;
        this.element = element;
        // tslint:disable-next-line:no-output-rename
        this.clickCall = new EventEmitter();
        this.duration = 1000; // 必须是数字，传入时要用绑定语法
        // 必须是数字，传入时要用绑定语法
        this.$sub = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 如此绑定事件亦可
        // this.renderer.listen(
        //   this.element.nativeElement, 'click', event => {
        //     event.preventDefault();
        //     event.stopPropagation();
        //     this.$sub.next(event);
        //   }
        // );
        this.subscription = this.$sub.pipe(throttleTime(this.duration)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.clickCall.emit(e);
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickEvent(event) {
        event.preventDefault(); // 通常是不需要冒泡的
        event.stopPropagation();
        this.$sub.next(event);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
OnceClickDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[click.once]'
            },] }
];
/** @nocollapse */
OnceClickDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
OnceClickDirective.propDecorators = {
    clickCall: [{ type: Output, args: ['click.once',] }],
    duration: [{ type: Input }],
    clickEvent: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    OnceClickDirective.prototype.clickCall;
    /** @type {?} */
    OnceClickDirective.prototype.duration;
    /**
     * @type {?}
     * @private
     */
    OnceClickDirective.prototype.$sub;
    /**
     * @type {?}
     * @private
     */
    OnceClickDirective.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    OnceClickDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    OnceClickDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25jbGljay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWxjbS9tZXRhZGF0YS1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbIm1ldGFkYXRhL21ldGFkYXRhLXNlbGVjdC9jb21wb25lbnRzL3NlbGVjdG1ldGFkYXRlL29uY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFlBQVksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0gsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBTTdDLE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBTTdCLFlBQ1UsUUFBbUIsRUFBRSx3QkFBd0I7SUFDN0MsT0FBbUI7UUFEbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixZQUFPLEdBQVAsT0FBTyxDQUFZOztRQU5QLGNBQVMsR0FBNkIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN0RSxhQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsa0JBQWtCOztRQUNwQyxTQUFJLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztJQUs5QixDQUFDOzs7O0lBQ0wsUUFBUTtRQUNOLFdBQVc7UUFDWCx3QkFBd0I7UUFDeEIsb0RBQW9EO1FBQ3BELDhCQUE4QjtRQUM5QiwrQkFBK0I7UUFDL0IsNkJBQTZCO1FBQzdCLE1BQU07UUFDTixLQUFLO1FBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDaEMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDNUIsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEtBQWlCO1FBQzFCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFHLFlBQVk7UUFDdEMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFDRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7WUFyQ0YsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsY0FBYzthQUN6Qjs7OztZQVBpRixTQUFTO1lBQUUsVUFBVTs7O3dCQVVwRyxNQUFNLFNBQUMsWUFBWTt1QkFDbkIsS0FBSzt5QkFzQkwsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7OztJQXZCakMsdUNBQStFOztJQUMvRSxzQ0FBeUI7Ozs7O0lBQ3pCLGtDQUFrQzs7Ozs7SUFDbEMsMENBQW1DOzs7OztJQUVqQyxzQ0FBMkI7Ozs7O0lBQzNCLHFDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBIb3N0TGlzdGVuZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgdGhyb3R0bGVUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ1tjbGljay5vbmNlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE9uY2VDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tb3V0cHV0LXJlbmFtZVxyXG4gIEBPdXRwdXQoJ2NsaWNrLm9uY2UnKSBjbGlja0NhbGw6IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBASW5wdXQoKSBkdXJhdGlvbiA9IDEwMDA7IC8vIOW/hemhu+aYr+aVsOWtl++8jOS8oOWFpeaXtuimgeeUqOe7keWumuivreazlVxyXG4gIHByaXZhdGUgJHN1YiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCAvLyBBbmd1bGFyIDIueOWvvOWFpVJlbmRlcmVyXHJcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWZcclxuICApIHsgfVxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgLy8g5aaC5q2k57uR5a6a5LqL5Lu25Lqm5Y+vXHJcbiAgICAvLyB0aGlzLnJlbmRlcmVyLmxpc3RlbihcclxuICAgIC8vICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdjbGljaycsIGV2ZW50ID0+IHtcclxuICAgIC8vICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgLy8gICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgLy8gICAgIHRoaXMuJHN1Yi5uZXh0KGV2ZW50KTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gKTtcclxuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy4kc3ViLnBpcGUoXHJcbiAgICAgIHRocm90dGxlVGltZSh0aGlzLmR1cmF0aW9uKVxyXG4gICAgKS5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgIHRoaXMuY2xpY2tDYWxsLmVtaXQoZSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxyXG4gIGNsaWNrRXZlbnQoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7ICAgLy8g6YCa5bi45piv5LiN6ZyA6KaB5YaS5rOh55qEXHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIHRoaXMuJHN1Yi5uZXh0KGV2ZW50KTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=