/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/treeclassifier/treeclassifier.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { MetadataService } from '../../metadata.service';
import { GSPMetadataService } from '../../../metadata.service';
export class TreeclassifierComponent {
    /**
     * @param {?} metadataService
     * @param {?} gspMetadataService
     */
    constructor(metadataService, gspMetadataService) {
        this.metadataService = metadataService;
        this.gspMetadataService = gspMetadataService;
        this.selectedKeys = ['0'];
        this.classifier = [
            { id: 'project', text: '当前工程' }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.metadataService.GetMetadataProjPath(this.metadataPath).subscribe((/**
         * @param {?} proj
         * @return {?}
         */
        proj => {
            this.metadataService.currentProjectPath = proj.projectPath;
            if (this.onlyDisplayCurrentProject === true) {
                this.files = this.classifier;
                this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
            }
            else {
                // 树节点mock数据
                this.gspMetadataService.getMavenSetting().subscribe((/**
                 * @param {?} maven
                 * @return {?}
                 */
                maven => {
                    if (maven === true) {
                        this.gspMetadataService.getCodeLanguage(proj.projectPath).subscribe((/**
                         * @param {?} lang
                         * @return {?}
                         */
                        lang => {
                            if (lang === 'java') {
                                this.files = this.metadataService.getMetadataClassifier('bo');
                                this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
                            }
                            else {
                                this.files = this.metadataService.getMetadataClassifier('project');
                                this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
                            }
                        }));
                    }
                    else {
                        this.files = this.metadataService.getMetadataClassifier('project');
                        this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
                    }
                }));
            }
        }));
    }
    // 树节点点击后事件
    /**
     * @param {?} event
     * @return {?}
     */
    nodeSelect(event) {
        this.metadataService.selectedChange.emit(event.dataItem);
    }
}
TreeclassifierComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-treeclassifier',
                template: "<div class=\"templateTree befTree\">\r\n    <div class=\"treeClassifier\">\r\n        <kendo-treeview\r\n            [nodes]=\"files\"\r\n            textField=\"text\"\r\n            kendoTreeViewExpandable\r\n            kendoTreeViewSelectable\r\n            kendoTreeViewHierarchyBinding\r\n            childrenField=\"items\"\r\n            (selectionChange)=\"this.nodeSelect($event)\"\r\n            [(selectedKeys)]=\"this.selectedKeys\"\r\n        >\r\n        </kendo-treeview>\r\n    </div>\r\n</div>",
                styles: [".treeClassifier .k-treeview{overflow:visible}.templateTree{padding:5px;margin-left:5px}"]
            }] }
];
/** @nocollapse */
TreeclassifierComponent.ctorParameters = () => [
    { type: MetadataService },
    { type: GSPMetadataService }
];
TreeclassifierComponent.propDecorators = {
    metadataPath: [{ type: Input }],
    onlyDisplayCurrentProject: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TreeclassifierComponent.prototype.metadataPath;
    /** @type {?} */
    TreeclassifierComponent.prototype.onlyDisplayCurrentProject;
    /** @type {?} */
    TreeclassifierComponent.prototype.files;
    /** @type {?} */
    TreeclassifierComponent.prototype.selectedKeys;
    /** @type {?} */
    TreeclassifierComponent.prototype.classifier;
    /**
     * @type {?}
     * @private
     */
    TreeclassifierComponent.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    TreeclassifierComponent.prototype.gspMetadataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZWNsYXNzaWZpZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1sY20vbWV0YWRhdGEtc2VsZWN0b3IvIiwic291cmNlcyI6WyJtZXRhZGF0YS9tZXRhZGF0YS1zZWxlY3QvY29tcG9uZW50cy90cmVlY2xhc3NpZmllci90cmVlY2xhc3NpZmllci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFnQyxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBUy9ELE1BQU0sT0FBTyx1QkFBdUI7Ozs7O0lBU2xDLFlBQW9CLGVBQWdDLEVBQVUsa0JBQXNDO1FBQWhGLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUFVLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFMcEcsaUJBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLGVBQVUsR0FBVTtZQUNsQixFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtTQUNoQyxDQUFDO0lBRXNHLENBQUM7Ozs7SUFFekcsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRTtZQUMzRSxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDM0QsSUFBSSxJQUFJLENBQUMseUJBQXlCLEtBQUssSUFBSSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO2FBQ3BFO2lCQUFNO2dCQUNMLFlBQVk7Z0JBQ1osSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsRUFBRSxDQUFDLFNBQVM7Ozs7Z0JBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQzFELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTt3QkFDbEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUzs7Ozt3QkFBQyxJQUFJLENBQUMsRUFBRTs0QkFDekUsSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO2dDQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0NBQzlELElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVOzZCQUNwRTtpQ0FBTTtnQ0FDTCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7Z0NBQ25FLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVOzZCQUNwRTt3QkFDSCxDQUFDLEVBQUMsQ0FBQztxQkFDSjt5QkFBTTt3QkFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQ25FLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO3FCQUNwRTtnQkFDSCxDQUFDLEVBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFHRCxVQUFVLENBQUMsS0FBSztRQUNkLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7O1lBakRGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsMmdCQUE4Qzs7YUFFL0M7Ozs7WUFSUSxlQUFlO1lBQ2Ysa0JBQWtCOzs7MkJBVXhCLEtBQUs7d0NBQ0wsS0FBSzs7OztJQUROLCtDQUE4Qjs7SUFDOUIsNERBQTRDOztJQUM1Qyx3Q0FBVzs7SUFDWCwrQ0FBcUI7O0lBQ3JCLDZDQUVFOzs7OztJQUVVLGtEQUF3Qzs7Ozs7SUFBRSxxREFBOEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uLy4uL21ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHU1BNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9tZXRhZGF0YS5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2FwcC10cmVlY2xhc3NpZmllcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3RyZWVjbGFzc2lmaWVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi90cmVlY2xhc3NpZmllci5jb21wb25lbnQuY3NzJ11cclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmVlY2xhc3NpZmllckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQElucHV0KCkgbWV0YWRhdGFQYXRoOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgb25seURpc3BsYXlDdXJyZW50UHJvamVjdDogYm9vbGVhbjtcclxuICBmaWxlczogYW55O1xyXG4gIHNlbGVjdGVkS2V5cyA9IFsnMCddO1xyXG4gIGNsYXNzaWZpZXI6IGFueVtdID0gW1xyXG4gICAgeyBpZDogJ3Byb2plY3QnLCB0ZXh0OiAn5b2T5YmN5bel56iLJyB9XHJcbiAgXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXRhZGF0YVNlcnZpY2U6IE1ldGFkYXRhU2VydmljZSwgcHJpdmF0ZSBnc3BNZXRhZGF0YVNlcnZpY2U6IEdTUE1ldGFkYXRhU2VydmljZSkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuR2V0TWV0YWRhdGFQcm9qUGF0aCh0aGlzLm1ldGFkYXRhUGF0aCkuc3Vic2NyaWJlKHByb2ogPT4ge1xyXG4gICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5jdXJyZW50UHJvamVjdFBhdGggPSBwcm9qLnByb2plY3RQYXRoO1xyXG4gICAgICBpZiAodGhpcy5vbmx5RGlzcGxheUN1cnJlbnRQcm9qZWN0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5maWxlcyA9IHRoaXMuY2xhc3NpZmllcjtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5zZWxlY3RlZENoYW5nZS5lbWl0KHRoaXMuZmlsZXNbMF0pOyAvLyDpu5jorqTmnKzlt6XnqIvkuIvnmoRcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyDmoJHoioLngrltb2Nr5pWw5o2uXHJcbiAgICAgICAgdGhpcy5nc3BNZXRhZGF0YVNlcnZpY2UuZ2V0TWF2ZW5TZXR0aW5nKCkuc3Vic2NyaWJlKG1hdmVuID0+IHtcclxuICAgICAgICAgIGlmIChtYXZlbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmdzcE1ldGFkYXRhU2VydmljZS5nZXRDb2RlTGFuZ3VhZ2UocHJvai5wcm9qZWN0UGF0aCkuc3Vic2NyaWJlKGxhbmcgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChsYW5nID09PSAnamF2YScpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZXMgPSB0aGlzLm1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YUNsYXNzaWZpZXIoJ2JvJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5zZWxlY3RlZENoYW5nZS5lbWl0KHRoaXMuZmlsZXNbMF0pOyAvLyDpu5jorqTmnKzlt6XnqIvkuIvnmoRcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlcyA9IHRoaXMubWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhQ2xhc3NpZmllcigncHJvamVjdCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YVNlcnZpY2Uuc2VsZWN0ZWRDaGFuZ2UuZW1pdCh0aGlzLmZpbGVzWzBdKTsgLy8g6buY6K6k5pys5bel56iL5LiL55qEXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZXMgPSB0aGlzLm1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YUNsYXNzaWZpZXIoJ3Byb2plY3QnKTtcclxuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YVNlcnZpY2Uuc2VsZWN0ZWRDaGFuZ2UuZW1pdCh0aGlzLmZpbGVzWzBdKTsgLy8g6buY6K6k5pys5bel56iL5LiL55qEXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8g5qCR6IqC54K554K55Ye75ZCO5LqL5Lu2XHJcbiAgbm9kZVNlbGVjdChldmVudCkge1xyXG4gICAgdGhpcy5tZXRhZGF0YVNlcnZpY2Uuc2VsZWN0ZWRDaGFuZ2UuZW1pdChldmVudC5kYXRhSXRlbSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==