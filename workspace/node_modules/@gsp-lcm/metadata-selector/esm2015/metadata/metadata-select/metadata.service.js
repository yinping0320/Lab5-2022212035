/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/metadata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { GSPMetadataService } from '../metadata.service';
// mock数据
/** @type {?} */
const classifier = [
    { id: 'project', text: '工程内元数据' },
    { id: 'local', text: '离线的元数据' },
    { id: 'remote', text: '仓库中元数据' },
    { id: 'ref', text: '引用的元数据' } // 3
];
/** @type {?} */
const classifierForBo = [
    { id: 'bo', text: 'BO内元数据' },
    { id: 'local', text: '离线的元数据' },
    { id: 'remote', text: '仓库中元数据' },
    { id: 'ref', text: '引用的元数据' } // 3
];
export class MetadataService {
    /**
     * @param {?} gspMetadataService
     */
    constructor(gspMetadataService) {
        this.gspMetadataService = gspMetadataService;
        this.selectedChange = new EventEmitter();
        // tslint:disable-next-line:member-ordering
        this.metadatas = [];
        // tslint:disable-next-line:member-ordering
        this.packages = [];
        this.packRefPath = '/packages';
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getMetadataClassifier(type) {
        switch (type) {
            case 'bo':
                return classifierForBo;
            case 'project':
            default:
                return classifier;
        }
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    addMetadata(metadata) {
        this.metadatas.push(metadata);
    }
    /**
     * @return {?}
     */
    clearMetadata() {
        this.metadatas = [];
    }
    /**
     * @param {?} mp
     * @return {?}
     */
    addPackage(mp) {
        this.packages.push(mp);
    }
    /**
     * @return {?}
     */
    clearPackage() {
        this.packages = [];
    }
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    GetMetadataList(typeName) {
        return this.gspMetadataService.GetMetadataList(this.currentProjectPath, typeName);
    }
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    GetMetadataListInBo(typeName) {
        return this.gspMetadataService.GetMetadataListInBo(this.currentProjectPath, typeName);
    }
    /**
     * @param {?} typeCode
     * @param {?} postfix
     * @param {?} filter
     * @return {?}
     */
    GetMetadataByFilter(typeCode, postfix, filter) {
        return this.gspMetadataService.GetMetadataByFilter(this.currentProjectPath, typeCode, filter, postfix);
    }
    // 获取元数据工程信息（获取本工程依赖的元数据包基本信息）
    /**
     * @return {?}
     */
    GetMetadataProjectInfo() {
        return this.gspMetadataService.GetProjectInfo(this.currentProjectPath);
    }
    // 获取工程路径
    /**
     * @param {?} metadataPath
     * @return {?}
     */
    GetMetadataProjPath(metadataPath) {
        return this.gspMetadataService.GetProjectInfo(metadataPath);
    }
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} scope
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @return {?}
     */
    GetMetadataInfos(scope, codelanguage, isMavenEnable, metadataType = null, searchText = null, page = null, selectedPackageSource = null) {
        if (codelanguage === 'dotnet' || isMavenEnable === false) {
            return this.gspMetadataService.GetMetadataInfosByScope(scope, metadataType, searchText, page, selectedPackageSource, this.currentProjectPath);
        }
        else {
            return this.gspMetadataService.GetMetadataInfosByScope4Java(scope, metadataType, searchText, page, selectedPackageSource, this.currentProjectPath);
        }
    }
    // 获取元数据包中所包含的元数据信息
    /**
     * @param {?} packPath
     * @param {?} packageName
     * @return {?}
     */
    GetMetadataPackageInfo(packPath, packageName) {
        /** @type {?} */
        let fullName = '';
        if (packageName.endsWith('mdpkg')) {
            fullName = packageName;
        }
        else {
            fullName = packageName + '.mdpkg';
        }
        return this.gspMetadataService.GetMetadataPackageInfo(packPath, fullName);
    }
    /**
     * @param {?} scope
     * @param {?} metadataIndexDto
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @return {?}
     */
    pickMetadataIndex(scope, metadataIndexDto, codelanguage, isMavenEnable) {
        // if (codelanguage === 'dotnet' || isMavenEnable === false) {
        //   scope = scope === 3 ? 2 : scope;
        //   return this.gspMetadataService.pickMetadataIndex(scope, this.currentProjectPath, metadataIndexDto);
        // } else {
        return this.gspMetadataService.pickMetadataIndex(scope, this.currentProjectPath, metadataIndexDto);
        // }
    }
    // Load元数据
    /**
     * @param {?} metadata
     * @return {?}
     */
    LoadTheMetadata(metadata) {
        if (metadata) {
            /** @type {?} */
            const fileName = metadata.fileName;
            /** @type {?} */
            const relativePath = metadata.relativePath;
            return this.gspMetadataService.LoadMetadataInBo(fileName, relativePath, this.currentProjectPath);
        }
        return new Observable();
    }
    // Load元数据
    /**
     * @return {?}
     */
    LoadMetadata() {
        if (this.metadatas.length > 0) {
            /** @type {?} */
            const index1 = this.metadatas.length;
            if (index1 > 0) {
                /** @type {?} */
                const index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
                if (index2 > 0) {
                    /** @type {?} */
                    const fileName = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].FileName;
                    /** @type {?} */
                    const relativePath = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].RelativePath;
                    return this.gspMetadataService.LoadMetadata(fileName, relativePath);
                }
            }
            else {
                return new Observable();
            }
        }
    }
    // // 获取元数据以及包的信息
    // GetTheMetadataFromPackage(metadata): Observable<any> {
    //   if (metadata) {
    //     const packageName = metadata.mdPkgName;
    //     const metadataID = metadata.id;
    //     return this.gspMetadataService.GetMetadataFromPackage(packageName, null, metadataID);
    //   }
    //   return new Observable<any>();
    // }
    // // 获取元数据以及包的信息
    // GetMetadataFromPackage(): Observable<any> {
    //   const index1 = this.metadatas.length;
    //   if (index1 > 0) {
    //     const index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
    //     if (index2 > 0) {
    //       const packageName = this.metadatas[index1 - 1].treenode.PackageName;
    //       const packagePath = this.metadatas[index1 - 1].treenode.Location;
    //       const metadataID = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].ID;
    //       return this.gspMetadataService.GetMetadataFromPackage(packageName, packagePath, metadataID);
    //     }
    //   } else {
    //     return new Observable<any>();
    //   }
    // }
    // 获取某个路径下的所有元数据包
    /**
     * @return {?}
     */
    GetMetadataPackages() {
        return this.gspMetadataService.GetMetadataPackages('packages');
    }
    // 更新工程引用
    /**
     * @param {?} packageHeader
     * @return {?}
     */
    UpdateMetadataProject(packageHeader) {
        // this.gspMetadataService.UpdateMetadataProject(this.currentProjectPath, packageHeader).then(response => {
        //   if (response.status === 200) {
        //     this.treeData = [];
        //     this.Refresh();
        //   }
        // });
        return this.gspMetadataService.UpdateMetadataProject(this.currentProjectPath, packageHeader);
    }
    /**
     * @return {?}
     */
    getCodeLanguage() {
        return this.gspMetadataService.getCodeLanguage(this.currentProjectPath);
    }
    /**
     * @return {?}
     */
    getProcessMode() {
        return this.gspMetadataService.getProcessMode(this.currentProjectPath);
    }
    /**
     * @return {?}
     */
    Refresh() {
        this.treeData = this.getMetadataClassifier('');
        this.treeData[1].items = [];
        /** @type {?} */
        let packages = [];
        this.GetMetadataProjPath(this.currentProjectPath).subscribe((/**
         * @param {?} proj
         * @return {?}
         */
        proj => {
            this.currentProjectPath = proj.projectPath;
            this.GetMetadataProjectInfo().subscribe((/**
             * @param {?} meta
             * @return {?}
             */
            meta => {
                packages = meta.nugetPackageRefs;
                /** @type {?} */
                let index = 0;
                packages.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    const child = {
                        id: item.name,
                        text: item.name,
                        items: []
                    };
                    if (this.treeData) {
                        this.treeData[1].items.push(child);
                    }
                    this.gspMetadataService.GetDevRootPath().subscribe((/**
                     * @param {?} root
                     * @return {?}
                     */
                    root => {
                        /** @type {?} */
                        const rootPath = root + this.packRefPath;
                        this.gspMetadataService.GetMetadataPackagesUnderNugetDir(rootPath + '/' + item.name).subscribe((/**
                         * @param {?} pkgs
                         * @return {?}
                         */
                        pkgs => {
                            if (pkgs) {
                                /** @type {?} */
                                let mdpkg;
                                pkgs.forEach((/**
                                 * @param {?} pkg
                                 * @return {?}
                                 */
                                pkg => {
                                    mdpkg = {
                                        id: pkg.header.name,
                                        text: pkg.header.name,
                                        desc: pkg.header.location
                                    };
                                    child.items.push(mdpkg);
                                }));
                                // this.files[1].items[index].push(mdpkg);
                            }
                            index = index + 1;
                        }));
                    }));
                }));
            }));
        }));
    }
    /**
     * @return {?}
     */
    getBoPath() {
        return this.gspMetadataService.getBoPath(this.currentProjectPath);
    }
}
MetadataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MetadataService.ctorParameters = () => [
    { type: GSPMetadataService }
];
if (false) {
    /** @type {?} */
    MetadataService.prototype.currentProjectPath;
    /** @type {?} */
    MetadataService.prototype.rootPath;
    /** @type {?} */
    MetadataService.prototype.packRefPath;
    /** @type {?} */
    MetadataService.prototype.selectedChange;
    /** @type {?} */
    MetadataService.prototype.treeData;
    /** @type {?} */
    MetadataService.prototype.metadatas;
    /** @type {?} */
    MetadataService.prototype.packages;
    /**
     * @type {?}
     * @private
     */
    MetadataService.prototype.gspMetadataService;
}
//# sourceMappingURL=data:application/json;base64,