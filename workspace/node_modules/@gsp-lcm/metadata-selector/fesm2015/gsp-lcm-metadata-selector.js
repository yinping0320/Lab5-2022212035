import { CommonModule } from '@angular/common';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { FormsModule } from '@angular/forms';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { GridModule } from '@progress/kendo-angular-grid';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { process } from '@progress/kendo-data-query';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { distinctUntilChanged, debounceTime, throttleTime } from 'rxjs/operators';
import { Observable, Subject } from 'rxjs';
import { Injectable, Inject, EventEmitter, Component, Input, ViewChild, Output, Directive, HostListener, Renderer2, ElementRef, NgModule } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { GSP } from '@farris/ide-devkit';

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatapackagedto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataPackageDto {
    /**
     * @param {?} packageName
     * @param {?} packageVersion
     * @param {?} packageLocation
     * @param {?} projectPath
     */
    constructor(packageName, packageVersion, packageLocation, projectPath) {
        this.packageName = packageName;
        this.projectPath = projectPath;
        this.packageVersion = packageVersion;
        this.packageLocation = packageLocation;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GSPMetadataService {
    /**
     * @param {?} http
     * @param {?} url
     */
    constructor(http, url) {
        this.http = http;
        this.url = url;
        this.METADATA_BASE_PATH = '/api/dev/main/v1.0/metadatas';
        this.GSP_PROJECT_BASE_PATH = '/api/dev/main/v1.0/gsp-projects';
        this.Project_Base_Path = '/api/dev/main/v1.0/project';
        this.DBO_BASE_PATH = '/api/dev/main/v1.0/database-objects'; // dbo相关
        // dbo相关
        this.METADATA_PROJECT_BASE_PATH = '/api/dev/main/v1.0/metadata-projects';
        this.METADATA_PACKAGE_BASE_PATH = '/api/dev/main/v1.0/metadata-packages';
        this.METADATA_CONFIG_BASE_PATH = '/api/dev/main/v1.0/metadata-configs';
        // private Metadata4RefDto_Base_Path = '/api/dev/main/v1.0/metadata4refdtos'; pickMetadataIndex，dotnet不需要
        // tslint:disable-next-line:variable-name
        this.DevBasinBOInfo_Base_Path = '/api/dev/main/v1.0/dev-basic-boinfos'; // 业务对象
        // 业务对象
        this.NUGET_BASE_PATH = '/api/dev/main/v1.0/nuget-packages';
        this.SETTING_BASE_PATH = '/api/dev/main/v1.0/ide/settings';
        this.MAVEN_JAVA_BASE_PATH = '/api/dev/main/v1.0/repo-packages';
        this.FS_JAVA_BASE_PATH = '/api/dev/main/v1.0/file-system';
        this.JAVA_CODE_GENERATOR = '/api/dev/main/v1.0/generator';
        this.JAVA_BUILD = '/api/dev/main/v1.0/repo-packages';
        this.METADATA_JAVA_BASE_PATH = '/api/dev/main/v1.0/mdservice';
        this.SERVER_IP = (url === null || url === undefined) ? '' : url;
        this.sessionId = gsp.cache.get('sessionId');
    }
    /**
     * 元数据设计时服务
     * @return {?}
     */
    // 打包（功能触发）
    Pack() {
        if (this.selectType === 'folder' || this.selectType === 'project') {
            if (this.selectPath !== '' && this.selectPath !== undefined) {
                this.PackageBuild(this.selectPath.substring(1));
            }
        }
        else {
            alert('请选择合适的目录');
        }
    }
    // 打包（外部调用）
    /**
     * @param {?} path
     * @return {?}
     */
    PackageBuild(path) {
        /** @type {?} */
        const sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        const headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
        /** @type {?} */
        const packageDto = new MetadataPackageDto('', '', '', path);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH;
        return this.http.post(url, packageDto, {
            headers,
            observe: 'response'
        });
    }
    // 递归查找是否存在工程文件
    /**
     * @param {?} path
     * @return {?}
     */
    IsProjExistRecursively(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/validationrecursively?path=' + path;
        /** @type {?} */
        const metadata = new Subject();
        this.http.get(url).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            // if (result) {
            metadata.next(result);
            // }
        }));
        return metadata;
    }
    // 初始化元数据实体
    /**
     * @param {?} metadataDto
     * @return {?}
     */
    InitializeMetadataEntity(metadataDto) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/initialized?nameSpace=' + metadataDto.nameSpace + '&code=' + metadataDto.code + '&name=' + metadataDto.name + '&type=' + metadataDto.type + '&bizObjectID=' + metadataDto.bizobjectID + '&metadataPath=' + metadataDto.relativePath + '&extendProperty=' + metadataDto.extendProperty;
        return this.http.get(url, { headers });
    }
    // 新建元数据
    /**
     * @param {?} metadataDto
     * @return {?}
     */
    CreateMetadata(metadataDto) {
        /** @type {?} */
        const content = {
            'ID': metadataDto.id,
            'NameSpace': metadataDto.nameSpace,
            'Code': metadataDto.code,
            'Name': metadataDto.name,
            'FileName': metadataDto.fileName,
            'RelativePath': metadataDto.relativePath,
            'Content': metadataDto.content,
            'Type': metadataDto.type,
            'BizobjectID': metadataDto.bizobjectID,
            'ExtendProperty': metadataDto.extendProperty
        };
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH;
        return this.http.post(url, content, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    // 删除元数据文件
    /**
     * @return {?}
     */
    DeleteMetadata() {
        if (this.selectPath !== '' && this.selectPath !== undefined) {
            if (this.selectType === 'file') {
                this.DeleteMetadataOrDir(this.selectPath.substring(1)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    // 刷新节点
                    // this.treeModel.removeFileNode();
                    alert('删除成功！');
                    this.selectPath = '';
                    this.selectType = '';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    alert('删除失败！');
                }));
            }
            else {
                alert('请选择正确的文件进行删除！');
            }
        }
        else {
            alert('请选择正确的文件进行删除！');
        }
    }
    // 保存元数据
    /**
     * @param {?} metadataDto
     * @param {?} sessionId
     * @return {?}
     */
    SaveMetadata(metadataDto, sessionId) {
        /** @type {?} */
        const content = {
            'ID': metadataDto.id,
            'NameSpace': metadataDto.nameSpace,
            'Code': metadataDto.code,
            'Name': metadataDto.name,
            'FileName': metadataDto.fileName,
            'RelativePath': metadataDto.relativePath,
            'Content': metadataDto.content,
            'Type': metadataDto.type,
            'BizobjectID': metadataDto.bizobjectID,
            'ExtendProperty': metadataDto.extendProperty,
            'Extendable': metadataDto.extendable
        };
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH;
        return this.http.put(url, content, {
            headers,
            observe: 'response'
        });
    }
    // Load元数据（外部调用）
    /**
     * @param {?} fullName
     * @param {?} path
     * @return {?}
     */
    LoadMetadata(fullName, path) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const metadataFullPath = path.replace(/\\/g, '/') + '/' + fullName;
        /** @type {?} */
        const encMetadataFullPath = encodeURIComponent(metadataFullPath);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/load?metadataFullPath=' + encMetadataFullPath;
        return this.http.get(url, { headers });
    }
    // Load bo内元数据（外部调用）
    /**
     * @param {?} fullName
     * @param {?} path
     * @param {?} currentProjPath
     * @return {?}
     */
    LoadMetadataInBo(fullName, path, currentProjPath) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const metadataFullPath = path.replace(/\\/g, '/') + '/' + fullName;
        /** @type {?} */
        const encMetadataFullPath = encodeURIComponent(metadataFullPath);
        // tslint:disable-next-line: max-line-length
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/metadataInBo?metadataFullPath=' + encMetadataFullPath
            + '&currentProjPath=' + currentProjPath;
        return this.http.get(url, { headers });
    }
    // 删除文件夹
    /**
     * @return {?}
     */
    DeleteFolder() {
        if (this.selectPath !== '' && this.selectPath !== undefined) {
            if (this.selectType === 'folder') {
                this.DeleteMetadataOrDir(this.selectPath.substring(1)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    // 刷新节点
                    // this.treeModel.removeFolderNode();
                    alert('删除成功！');
                    this.selectPath = '';
                    this.selectType = '';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    alert('删除失败！');
                }));
            }
            else {
                alert('请选择正确的目录进行删除！');
            }
        }
        else {
            alert('请选择正确的目录进行删除！');
        }
    }
    // 删除工程
    /**
     * @return {?}
     */
    DeleteProj() {
        if (this.selectPath !== '' && this.selectPath !== undefined) {
            if (this.selectType === 'project') {
                this.DeleteProject(this.selectPath.substring(1)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    // 刷新节点
                    // this.treeModel.removeProjectNode();
                    alert('删除成功！');
                    this.selectPath = '';
                    this.selectType = '';
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    alert('删除失败！');
                }));
            }
            else {
                alert('请选择正确的工程节点进行删除！');
            }
        }
        else {
            alert('请选择正确的工程节点进行删除！');
        }
    }
    // 元数据或者文件夹的删除（外部调用）
    /**
     * @param {?} fullPath
     * @return {?}
     */
    DeleteMetadataOrDir(fullPath) {
        /** @type {?} */
        const sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        const encFullPath = encodeURIComponent(fullPath.replace(/\\/g, '/'));
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/delete?fullPath=' + encFullPath;
        return this.http.delete(url, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    // 判断元数据是否被依赖
    /**
     * @param {?} fullPath
     * @return {?}
     */
    isMetadataRefed(fullPath) {
        /** @type {?} */
        const sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        const encFullPath = encodeURIComponent(fullPath.replace(/\\/g, '/'));
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/isMetadataRefed?path=' + encFullPath;
        return this.http.get(url, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    // 删除工程
    /**
     * @param {?} path
     * @return {?}
     */
    DeleteProject(path) {
        /** @type {?} */
        const sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.Project_Base_Path + '/' + path.replace(/\\/g, '/');
        return this.http.delete(url, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    /**
     * @return {?}
     */
    GetDevRootPath() {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.Project_Base_Path + '/rootpath';
        /** @type {?} */
        const metadata = new Subject();
        this.http.get(url, { responseType: 'text' }).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            if (result) {
                metadata.next(result);
            }
        }));
        return metadata;
    }
    /**
     * @param {?} fullName
     * @param {?} path
     * @param {?} sessionId
     * @return {?}
     */
    LoadDBO(fullName, path, sessionId) {
        /** @type {?} */
        const dboFullPath = path.replace(/\\/g, '/') + '/' + fullName;
        /** @type {?} */
        const url = this.SERVER_IP + this.DBO_BASE_PATH + '/' + dboFullPath;
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        return this.http.get(url, { headers });
    }
    // 新建文件夹
    /**
     * @param {?} path
     * @param {?} name
     * @return {?}
     */
    CreateDir(path, name) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.Project_Base_Path + '/folder' + path + '/' + name + '?quiet=true';
        return this.http.post(url, null, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    // 获取元数据工程信息
    /**
     * @param {?} path
     * @return {?}
     */
    GetProjectInfo(path) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '?path=' + path;
        return this.http.get(url, { headers });
    }
    // 获取工程信息
    /**
     * @param {?} path
     * @return {?}
     */
    GetGspProjInfo(path) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.GSP_PROJECT_BASE_PATH + '?path=' + path;
        return this.http.get(url, { headers });
    }
    // 获取工程路径
    /**
     * @param {?} path
     * @return {?}
     */
    GetProjPath(path) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/path?path=' + path;
        return this.http.get(url, { responseType: 'text' });
    }
    // 获取当前工程下或者其他元数据包中依赖的元数据
    /**
     * @param {?} path
     * @param {?} metadataid
     * @param {?} sessionId
     * @return {?}
     */
    GetRefMetadata(path, metadataid, sessionId) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/relied?metadataPath=' + path + '&metadataID=' + metadataid;
        return this.http.get(url, { headers });
    }
    // 获取当前工程下所有的元数据包
    /**
     * @param {?} spacePath
     * @param {?} typeName
     * @return {?}
     */
    GetMetadataList(spacePath, typeName) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '?path=' + spacePath + '&metadataTypeList=' + typeName;
        return this.http.get(url, { headers });
    }
    // 获取bo工程下所有的元数据列表
    /**
     * @param {?} projPath
     * @param {?} typeName
     * @return {?}
     */
    GetMetadataListInBo(projPath, typeName) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/metadataListInBo?path=' + projPath + '&metadataTypeList=' + typeName;
        return this.http.get(url, { headers });
    }
    /**
     * @param {?} path
     * @param {?} typeCode
     * @param {?} filter
     * @param {?} postfix
     * @return {?}
     */
    GetMetadataByFilter(path, typeCode, filter, postfix) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/filter?path=' + path +
            '&typeCode=' + typeCode + '&filter=' + filter + '&postfix=' + postfix;
        return this.http.get(url, { headers });
    }
    // pickMetadataIndex(scope: number, currentProjPath: string, metadataIndexDto: any): Observable<any> {
    //   const sessionId = gsp.cache.get('sessionId');
    //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '/scope/' + scope + '?currentPath=' + currentProjPath;
    //   return this.http.post(url, metadataIndexDto, {
    //     headers
    //   });
    // }
    /**
     * @param {?} scope
     * @param {?} currentProjPath
     * @param {?} metadataIndexDto
     * @return {?}
     */
    pickMetadataIndex(scope, currentProjPath, metadataIndexDto) {
        /** @type {?} */
        const sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        const headers = new HttpHeaders({ 'Content-Type': 'application/json' }).append('SessionId', sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/pickmd?scopeType=' + scope + '&currentPath=' + currentProjPath;
        return this.http.post(url, metadataIndexDto, {
            headers
        });
    }
    // 获取元数据包中所包含的元数据信息
    /**
     * @param {?} packagePath
     * @param {?} packageName
     * @return {?}
     */
    GetMetadataPackageInfo(packagePath, packageName) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        let packageFullName = '';
        if (packagePath) {
            packageFullName = packagePath.replace(/\\/g, '/') + '/' + packageName;
        }
        else {
            packageFullName = packageName;
        }
        /** @type {?} */
        const encPackageFullName = encodeURIComponent(packageFullName);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH + '/packagePath?packagePath=' + encPackageFullName;
        return this.http.get(url, { headers });
    }
    // 获取本地包
    /**
     * @param {?} path
     * @return {?}
     */
    GetLocalPackages(path) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH + '/local?path=' + path;
        return this.http.get(url, { headers });
    }
    /**
     * @param {?} scope
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @param {?=} currentProjPath
     * @return {?}
     */
    GetMetadataInfosByScope(scope, metadataType = null, searchText = null, page = null, selectedPackageSource = null, currentProjPath = '') {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        let url = this.SERVER_IP + this.METADATA_BASE_PATH + '/scope/' + scope + '?path=' + currentProjPath;
        if (page) {
            url = url + '&page=true&pageIndex=' + page.pageIndex + '&pageSize=' + page.pageSize;
        }
        else {
            url = url + '&page=false';
        }
        if (metadataType) {
            url = url + '&metadataTypeList=' + metadataType;
        }
        if (searchText) {
            url = url + '&text=' + searchText;
        }
        if ((scope === 2 || scope === 3) && selectedPackageSource) {
            url = url + '&selectedPackageSource=' + selectedPackageSource;
        }
        return this.http.get(url, { headers });
    }
    /**
     * @param {?} scope
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @param {?=} currentProjPath
     * @return {?}
     */
    GetMetadataInfosByScope4Java(scope, metadataType = null, searchText = null, page = null, selectedPackageSource = null, currentProjPath = '') {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        let url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/mdlist?scopeType=' + scope + '&path=' + currentProjPath;
        if (page) {
            url = url + '&page=true&pageIndex=' + page.pageIndex + '&pageSize=' + page.pageSize;
        }
        else {
            url = url + '&page=false';
        }
        if (metadataType) {
            url = url + '&metadataTypeList=' + metadataType;
        }
        if (searchText) {
            url = url + '&text=' + searchText;
        }
        if ((scope === 2 || scope === 3) && selectedPackageSource) {
            url = url + '&selectedPackageSource=' + selectedPackageSource;
        }
        return this.http.get(url, { headers });
    }
    // 获取元数据以及包的信息
    // GetMetadataFromPackage(packageName: string, packagePath: string, metadataID: string): Observable<any> {
    //   const headers = new HttpHeaders().set('SessionId', this.sessionId);
    //   let fullName = '';
    //   if (packageName.endsWith('mdpkg')) {
    //     fullName = packageName;
    //   } else {
    //     fullName = packageName + '.mdpkg';
    //   }
    //   let path = '';
    //   if (packagePath) {
    //     path = packagePath;
    //   }
    //   const url = this.SERVER_IP + this.Metadata4RefDto_Base_Path + '?packageName=' + fullName +
    //     '&packagePath=' + path + '&metadataID=' + metadataID;
    //   return this.http.get(url, { headers });
    // }
    // 获取某个路径下的所有元数据包
    /**
     * @param {?} path
     * @return {?}
     */
    GetMetadataPackages(path) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.Project_Base_Path + '/children/' + path;
        return this.http.get(url, { headers });
    }
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    GetMetadataTypeList() {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_CONFIG_BASE_PATH;
        return this.http.get(url, { headers });
    }
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    GetPostfix(metadataType) {
        this.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        typeList => {
            typeList.forEach((/**
             * @param {?} type
             * @return {?}
             */
            type => {
                if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                    return type.postfix;
                }
            }));
        }));
        return new Observable();
    }
    // 更新工程引用
    /**
     * @param {?} projectPath
     * @param {?} packageHeader
     * @return {?}
     */
    UpdateMetadataProject(projectPath, packageHeader) {
        /** @type {?} */
        const content = {
            ProjectPath: projectPath,
            DepPackageName: packageHeader.name,
            DepPackageVersion: packageHeader.version.versionString,
            DepPackageLocation: packageHeader.location
        };
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH;
        return this.http.put(url, content, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    // 根据业务对象ID获取app、su等信息
    /**
     * @param {?} businessObjectID
     * @param {?} sessionId
     * @return {?}
     */
    GetDevBasicBOInfo(businessObjectID, sessionId) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.DevBasinBOInfo_Base_Path + '/' + businessObjectID;
        return this.http.get(url, { headers });
    }
    /**
     * @param {?} path
     * @param {?} fileName
     * @return {?}
     */
    ValidateRepeatName(path, fileName) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/validation?path=' + path + '&fileName=' + fileName;
        /** @type {?} */
        const metadata = new Subject();
        this.http.get(url).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            // if (result) {
            metadata.next(result);
            // }
        }));
        return metadata;
    }
    /**
     * @param {?} path
     * @param {?} sessionId
     * @return {?}
     */
    SetMetadataUri(path, sessionId) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_CONFIG_BASE_PATH + '?path=' + path;
        return this.http.put(url, null, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    /**
     * @return {?}
     */
    getGspProjectType() {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.GSP_PROJECT_BASE_PATH + '/type';
        return this.http.get(url, { headers });
    }
    /**
     * @param {?} path
     * @param {?} codeLanguage
     * @return {?}
     */
    updateGspProject(path, codeLanguage) {
        /** @type {?} */
        const sessionId = gsp.cache.get('sessionId');
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.GSP_PROJECT_BASE_PATH + '?path=' + path + '&codeLanguage=' + codeLanguage;
        return this.http.put(url, null, {
            params: {},
            headers,
            observe: 'response'
        });
    }
    /**
     * @return {?}
     */
    getNugetSourceList() {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.NUGET_BASE_PATH + '/sources';
        return this.http.get(url, { headers });
    }
    /**
     * @return {?}
     */
    getMavenSourceList() {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.MAVEN_JAVA_BASE_PATH + '/repolist';
        return this.http.get(url, { headers });
    }
    // 获取技术栈
    // tslint:disable-next-line:adjacent-overload-signatures
    /**
     * @param {?} projPath
     * @return {?}
     */
    getCodeLanguage(projPath) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/codelanguage?projPath=' + projPath;
        return this.http.get(url, { responseType: 'text' });
    }
    // 获取setting信息
    /**
     * @return {?}
     */
    getSettingInfo() {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.SETTING_BASE_PATH;
        return this.http.get(url, { headers });
    }
    // 是否开启maven
    /**
     * @return {?}
     */
    getMavenSetting() {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_BASE_PATH + '/mavensetting';
        return this.http.get(url);
    }
    // 获取bo路径
    /**
     * @param {?} path
     * @return {?}
     */
    getBoPath(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/bopath?path=' + path;
        return this.http.get(url, { responseType: 'text' });
    }
    // 获取是否是maven引用
    /**
     * @param {?} path
     * @return {?}
     */
    getMavenStatus(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/isMaven?path=' + path;
        return this.http.get(url);
    }
    // 获取是否是解析型工具
    /**
     * @param {?} path
     * @return {?}
     */
    isInterpretation(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/isInterpretation?path=' + path;
        return this.http.get(url);
    }
    // 生成代码
    /**
     * @param {?} path
     * @return {?}
     */
    generate(path) {
        /** @type {?} */
        const url = this.JAVA_CODE_GENERATOR + '?path=' + path;
        return this.http.post(url, null);
    }
    // 获取ProcessMode
    /**
     * @param {?} path
     * @return {?}
     */
    getProcessMode(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/processMode?path=' + path;
        return this.http.get(url, { responseType: 'text' });
    }
    // 添加依赖并更新版本
    /**
     * @param {?} path
     * @param {?} metadataPackages
     * @param {?} isMaven
     * @return {?}
     */
    addDependencyAndRestore(path, metadataPackages, isMaven) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        let url;
        if (isMaven) {
            url = this.SERVER_IP + this.MAVEN_JAVA_BASE_PATH + '/adddepedency?path=' + path
                + '&metadataPackages=' + metadataPackages;
            return this.http.put(url, null, {
                params: {},
                headers,
                observe: 'response'
            });
        }
        else {
            url = this.SERVER_IP + this.NUGET_BASE_PATH + '/adddepedency?projPath=' + path
                + '&metadataPackages=' + metadataPackages;
            return this.http.post(url, null, {
                params: {},
                headers,
                observe: 'response'
            });
        }
    }
    // 在资源管理器中打开
    /**
     * @param {?} path
     * @return {?}
     */
    showInExplorer(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.FS_JAVA_BASE_PATH + '?path=' + path;
        return this.http.get(url);
    }
    /**
     * @param {?} path
     * @param {?} metadataPackages
     * @return {?}
     */
    restoreMavenPackage(path, metadataPackages) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.MAVEN_JAVA_BASE_PATH + '/adddepedency?path=' + path + '&metadataPackages=' + metadataPackages;
        return this.http.put(url, null, {
            headers,
            observe: 'response'
        });
    }
    // 获取菜单
    /**
     * @param {?} path
     * @return {?}
     */
    getMenu(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.SETTING_BASE_PATH + '/menu?path=' + path;
        return this.http.get(url);
    }
    /**
     * @param {?} projPath
     * @param {?=} fakeFlag
     * @return {?}
     */
    mavenBuildAll(projPath, fakeFlag = false) {
        if (fakeFlag) {
            return this.getMenu(projPath);
        }
        /** @type {?} */
        const url = this.JAVA_BUILD + '/compileAll?path=' + projPath;
        return this.http.post(url, null);
    }
    // 获取路径下的工程路径
    /**
     * @param {?} path
     * @return {?}
     */
    getProjPathsInPath(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/projinpath?path=' + path;
        return this.http.get(url);
    }
    /**
     * @param {?} path
     * @param {?} mdpkgName
     * @return {?}
     */
    getMdpkgNameExistInBo(path, mdpkgName) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_JAVA_BASE_PATH + '/mdpkgNameExist?path=' + path + '&mdpkgName=' + mdpkgName;
        return this.http.get(url, { responseType: 'text' });
    }
    // 是否存在工程文件，废弃，使用getProjPath代替
    /**
     * @param {?} path
     * @return {?}
     */
    IsProjExist(path) {
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PROJECT_BASE_PATH + '/validation?path=' + path;
        /** @type {?} */
        const metadata = new Subject();
        this.http.get(url).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            metadata.next(result);
        }));
        return metadata;
    }
    // 获取Nuget包下所有的元数据包，nuget已废弃
    /**
     * @param {?} path
     * @return {?}
     */
    GetMetadataPackagesUnderNugetDir(path) {
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', this.sessionId);
        /** @type {?} */
        const url = this.SERVER_IP + this.METADATA_PACKAGE_BASE_PATH + '?path=' + path;
        return this.http.get(url, { headers });
    }
}
GSPMetadataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GSPMetadataService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Inject, args: ['url',] }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/metadata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// mock数据
/** @type {?} */
const classifier = [
    { id: 'project', text: '工程内元数据' },
    { id: 'local', text: '离线的元数据' },
    { id: 'remote', text: '仓库中元数据' },
    { id: 'ref', text: '引用的元数据' } // 3
];
/** @type {?} */
const classifierForBo = [
    { id: 'bo', text: 'BO内元数据' },
    { id: 'local', text: '离线的元数据' },
    { id: 'remote', text: '仓库中元数据' },
    { id: 'ref', text: '引用的元数据' } // 3
];
class MetadataService {
    /**
     * @param {?} gspMetadataService
     */
    constructor(gspMetadataService) {
        this.gspMetadataService = gspMetadataService;
        this.selectedChange = new EventEmitter();
        // tslint:disable-next-line:member-ordering
        this.metadatas = [];
        // tslint:disable-next-line:member-ordering
        this.packages = [];
        this.packRefPath = '/packages';
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getMetadataClassifier(type) {
        switch (type) {
            case 'bo':
                return classifierForBo;
            case 'project':
            default:
                return classifier;
        }
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    addMetadata(metadata) {
        this.metadatas.push(metadata);
    }
    /**
     * @return {?}
     */
    clearMetadata() {
        this.metadatas = [];
    }
    /**
     * @param {?} mp
     * @return {?}
     */
    addPackage(mp) {
        this.packages.push(mp);
    }
    /**
     * @return {?}
     */
    clearPackage() {
        this.packages = [];
    }
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    GetMetadataList(typeName) {
        return this.gspMetadataService.GetMetadataList(this.currentProjectPath, typeName);
    }
    // 获取当前工程下所有的元数据
    /**
     * @param {?} typeName
     * @return {?}
     */
    GetMetadataListInBo(typeName) {
        return this.gspMetadataService.GetMetadataListInBo(this.currentProjectPath, typeName);
    }
    /**
     * @param {?} typeCode
     * @param {?} postfix
     * @param {?} filter
     * @return {?}
     */
    GetMetadataByFilter(typeCode, postfix, filter) {
        return this.gspMetadataService.GetMetadataByFilter(this.currentProjectPath, typeCode, filter, postfix);
    }
    // 获取元数据工程信息（获取本工程依赖的元数据包基本信息）
    /**
     * @return {?}
     */
    GetMetadataProjectInfo() {
        return this.gspMetadataService.GetProjectInfo(this.currentProjectPath);
    }
    // 获取工程路径
    /**
     * @param {?} metadataPath
     * @return {?}
     */
    GetMetadataProjPath(metadataPath) {
        return this.gspMetadataService.GetProjectInfo(metadataPath);
    }
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} scope
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @param {?=} metadataType
     * @param {?=} searchText
     * @param {?=} page
     * @param {?=} selectedPackageSource
     * @return {?}
     */
    GetMetadataInfos(scope, codelanguage, isMavenEnable, metadataType = null, searchText = null, page = null, selectedPackageSource = null) {
        if (codelanguage === 'dotnet' || isMavenEnable === false) {
            return this.gspMetadataService.GetMetadataInfosByScope(scope, metadataType, searchText, page, selectedPackageSource, this.currentProjectPath);
        }
        else {
            return this.gspMetadataService.GetMetadataInfosByScope4Java(scope, metadataType, searchText, page, selectedPackageSource, this.currentProjectPath);
        }
    }
    // 获取元数据包中所包含的元数据信息
    /**
     * @param {?} packPath
     * @param {?} packageName
     * @return {?}
     */
    GetMetadataPackageInfo(packPath, packageName) {
        /** @type {?} */
        let fullName = '';
        if (packageName.endsWith('mdpkg')) {
            fullName = packageName;
        }
        else {
            fullName = packageName + '.mdpkg';
        }
        return this.gspMetadataService.GetMetadataPackageInfo(packPath, fullName);
    }
    /**
     * @param {?} scope
     * @param {?} metadataIndexDto
     * @param {?} codelanguage
     * @param {?} isMavenEnable
     * @return {?}
     */
    pickMetadataIndex(scope, metadataIndexDto, codelanguage, isMavenEnable) {
        // if (codelanguage === 'dotnet' || isMavenEnable === false) {
        //   scope = scope === 3 ? 2 : scope;
        //   return this.gspMetadataService.pickMetadataIndex(scope, this.currentProjectPath, metadataIndexDto);
        // } else {
        return this.gspMetadataService.pickMetadataIndex(scope, this.currentProjectPath, metadataIndexDto);
        // }
    }
    // Load元数据
    /**
     * @param {?} metadata
     * @return {?}
     */
    LoadTheMetadata(metadata) {
        if (metadata) {
            /** @type {?} */
            const fileName = metadata.fileName;
            /** @type {?} */
            const relativePath = metadata.relativePath;
            return this.gspMetadataService.LoadMetadataInBo(fileName, relativePath, this.currentProjectPath);
        }
        return new Observable$1();
    }
    // Load元数据
    /**
     * @return {?}
     */
    LoadMetadata() {
        if (this.metadatas.length > 0) {
            /** @type {?} */
            const index1 = this.metadatas.length;
            if (index1 > 0) {
                /** @type {?} */
                const index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
                if (index2 > 0) {
                    /** @type {?} */
                    const fileName = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].FileName;
                    /** @type {?} */
                    const relativePath = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].RelativePath;
                    return this.gspMetadataService.LoadMetadata(fileName, relativePath);
                }
            }
            else {
                return new Observable$1();
            }
        }
    }
    // // 获取元数据以及包的信息
    // GetTheMetadataFromPackage(metadata): Observable<any> {
    //   if (metadata) {
    //     const packageName = metadata.mdPkgName;
    //     const metadataID = metadata.id;
    //     return this.gspMetadataService.GetMetadataFromPackage(packageName, null, metadataID);
    //   }
    //   return new Observable<any>();
    // }
    // // 获取元数据以及包的信息
    // GetMetadataFromPackage(): Observable<any> {
    //   const index1 = this.metadatas.length;
    //   if (index1 > 0) {
    //     const index2 = this.metadatas[index1 - 1].treenode.MetadataInfo.length;
    //     if (index2 > 0) {
    //       const packageName = this.metadatas[index1 - 1].treenode.PackageName;
    //       const packagePath = this.metadatas[index1 - 1].treenode.Location;
    //       const metadataID = this.metadatas[index1 - 1].treenode.MetadataInfo[index2 - 1].ID;
    //       return this.gspMetadataService.GetMetadataFromPackage(packageName, packagePath, metadataID);
    //     }
    //   } else {
    //     return new Observable<any>();
    //   }
    // }
    // 获取某个路径下的所有元数据包
    /**
     * @return {?}
     */
    GetMetadataPackages() {
        return this.gspMetadataService.GetMetadataPackages('packages');
    }
    // 更新工程引用
    /**
     * @param {?} packageHeader
     * @return {?}
     */
    UpdateMetadataProject(packageHeader) {
        // this.gspMetadataService.UpdateMetadataProject(this.currentProjectPath, packageHeader).then(response => {
        //   if (response.status === 200) {
        //     this.treeData = [];
        //     this.Refresh();
        //   }
        // });
        return this.gspMetadataService.UpdateMetadataProject(this.currentProjectPath, packageHeader);
    }
    /**
     * @return {?}
     */
    getCodeLanguage() {
        return this.gspMetadataService.getCodeLanguage(this.currentProjectPath);
    }
    /**
     * @return {?}
     */
    getProcessMode() {
        return this.gspMetadataService.getProcessMode(this.currentProjectPath);
    }
    /**
     * @return {?}
     */
    Refresh() {
        this.treeData = this.getMetadataClassifier('');
        this.treeData[1].items = [];
        /** @type {?} */
        let packages = [];
        this.GetMetadataProjPath(this.currentProjectPath).subscribe((/**
         * @param {?} proj
         * @return {?}
         */
        proj => {
            this.currentProjectPath = proj.projectPath;
            this.GetMetadataProjectInfo().subscribe((/**
             * @param {?} meta
             * @return {?}
             */
            meta => {
                packages = meta.nugetPackageRefs;
                packages.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    const child = {
                        id: item.name,
                        text: item.name,
                        items: []
                    };
                    if (this.treeData) {
                        this.treeData[1].items.push(child);
                    }
                    this.gspMetadataService.GetDevRootPath().subscribe((/**
                     * @param {?} root
                     * @return {?}
                     */
                    root => {
                        /** @type {?} */
                        const rootPath = root + this.packRefPath;
                        this.gspMetadataService.GetMetadataPackagesUnderNugetDir(rootPath + '/' + item.name).subscribe((/**
                         * @param {?} pkgs
                         * @return {?}
                         */
                        pkgs => {
                            if (pkgs) {
                                /** @type {?} */
                                let mdpkg;
                                pkgs.forEach((/**
                                 * @param {?} pkg
                                 * @return {?}
                                 */
                                pkg => {
                                    mdpkg = {
                                        id: pkg.header.name,
                                        text: pkg.header.name,
                                        desc: pkg.header.location
                                    };
                                    child.items.push(mdpkg);
                                }));
                                // this.files[1].items[index].push(mdpkg);
                            }
                        }));
                    }));
                }));
            }));
        }));
    }
    /**
     * @return {?}
     */
    getBoPath() {
        return this.gspMetadataService.getBoPath(this.currentProjectPath);
    }
}
MetadataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MetadataService.ctorParameters = () => [
    { type: GSPMetadataService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/treeclassifier/treeclassifier.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TreeclassifierComponent {
    /**
     * @param {?} metadataService
     * @param {?} gspMetadataService
     */
    constructor(metadataService, gspMetadataService) {
        this.metadataService = metadataService;
        this.gspMetadataService = gspMetadataService;
        this.selectedKeys = ['0'];
        this.classifier = [
            { id: 'project', text: '当前工程' }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.metadataService.GetMetadataProjPath(this.metadataPath).subscribe((/**
         * @param {?} proj
         * @return {?}
         */
        proj => {
            this.metadataService.currentProjectPath = proj.projectPath;
            if (this.onlyDisplayCurrentProject === true) {
                this.files = this.classifier;
                this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
            }
            else {
                // 树节点mock数据
                this.gspMetadataService.getMavenSetting().subscribe((/**
                 * @param {?} maven
                 * @return {?}
                 */
                maven => {
                    if (maven === true) {
                        this.gspMetadataService.getCodeLanguage(proj.projectPath).subscribe((/**
                         * @param {?} lang
                         * @return {?}
                         */
                        lang => {
                            if (lang === 'java') {
                                this.files = this.metadataService.getMetadataClassifier('bo');
                                this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
                            }
                            else {
                                this.files = this.metadataService.getMetadataClassifier('project');
                                this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
                            }
                        }));
                    }
                    else {
                        this.files = this.metadataService.getMetadataClassifier('project');
                        this.metadataService.selectedChange.emit(this.files[0]); // 默认本工程下的
                    }
                }));
            }
        }));
    }
    // 树节点点击后事件
    /**
     * @param {?} event
     * @return {?}
     */
    nodeSelect(event) {
        this.metadataService.selectedChange.emit(event.dataItem);
    }
}
TreeclassifierComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-treeclassifier',
                template: "<div class=\"templateTree befTree\">\r\n    <div class=\"treeClassifier\">\r\n        <kendo-treeview\r\n            [nodes]=\"files\"\r\n            textField=\"text\"\r\n            kendoTreeViewExpandable\r\n            kendoTreeViewSelectable\r\n            kendoTreeViewHierarchyBinding\r\n            childrenField=\"items\"\r\n            (selectionChange)=\"this.nodeSelect($event)\"\r\n            [(selectedKeys)]=\"this.selectedKeys\"\r\n        >\r\n        </kendo-treeview>\r\n    </div>\r\n</div>",
                styles: [".treeClassifier .k-treeview{overflow:visible}.templateTree{padding:5px;margin-left:5px}"]
            }] }
];
/** @nocollapse */
TreeclassifierComponent.ctorParameters = () => [
    { type: MetadataService },
    { type: GSPMetadataService }
];
TreeclassifierComponent.propDecorators = {
    metadataPath: [{ type: Input }],
    onlyDisplayCurrentProject: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/metadatapackageselect/metadatapackageselect.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadatapackageselectComponent {
    /**
     * @param {?} metadataService
     * @param {?} gspMetaService
     */
    constructor(metadataService, gspMetaService) {
        this.metadataService = metadataService;
        this.gspMetaService = gspMetaService;
        this.closeModalEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    showModal() {
        // this.isModalShown = true;
    }
    /**
     * @return {?}
     */
    hideModal() {
        // this.isModalShown = false;
        this.closeModalEmitter.emit();
    }
    /**
     * @return {?}
     */
    onHidden() {
        // this.isModalShown = false;
        this.closeModalEmitter.emit();
    }
    /**
     * @param {?} classifier
     * @return {?}
     */
    onSelectedChange(classifier) {
        // this.classifier = classifier;
    }
    /**
     * @return {?}
     */
    ResolvePackage() {
        this.closeModalEmitter.emit();
        if (this.metadataService.packages.length > 0) {
            /** @type {?} */
            let flag = false;
            /** @type {?} */
            const packageName = this.metadataService.packages[0];
            this.gspMetaService.GetDevRootPath().subscribe((/**
             * @param {?} root
             * @return {?}
             */
            root => {
                this.metadataService.rootPath = root;
                this.metadataService.GetMetadataPackageInfo(root + this.metadataService.packRefPath, packageName).subscribe((/**
                 * @param {?} packageInfo
                 * @return {?}
                 */
                packageInfo => {
                    /** @type {?} */
                    const header = packageInfo.header;
                    // 检测依赖项
                    this.metadataService.GetMetadataProjectInfo().subscribe((/**
                     * @param {?} projInfo
                     * @return {?}
                     */
                    projInfo => {
                        // 已有依赖关系
                        /** @type {?} */
                        const refs = projInfo.metadataPackageRefs;
                        refs.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            if (item.name === header.name) {
                                alert('已添加对该元数据包的依赖');
                                flag = true;
                            }
                        }));
                        if (flag === true) {
                            return;
                        }
                        // 更新工程引用
                        this.metadataService.UpdateMetadataProject(header).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        data => {
                            this.metadataService.treeData = [];
                            this.metadataService.Refresh();
                        }));
                        // 刷新树节点
                        if (this.treeclassifierComponent) {
                            this.treeclassifierComponent.files = this.metadataService.treeData;
                        }
                    }));
                }));
            }));
        }
    }
}
MetadatapackageselectComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatapackageselect',
                template: "<!--\u7B2C\u4E8C\u79CD\u5F39\u51FA\u65B9\u6CD5\u7684\u7EC4\u4EF6-->\r\n<!-- <div *ngIf=\"isModalShown\" [config]=\"{ show: true }\" (onHidden)=\"onHidden()\" bsModal #autoShownModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" style='min-height: 800px; min-width: 900px; max-width: none'>\r\n    <div class=\"modal-dialog\" style='max-width:none; width: 615px;margin-top:0'>\r\n        <div class=\"modal-content\"> -->\r\n            <!-- <div class=\"modal-header\">\r\n                <h4 class=\"modal-title pull-left\">\u9009\u62E9\u5143\u6570\u636E\u5305</h4>\r\n                <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"hideModal()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n            </div> -->\r\n            <div class=\"modal-body\">\r\n                <div class=\"templateBlock\">\r\n                    <app-metadatapackagelist></app-metadatapackagelist>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"ResolvePackage()\">\u786E\u5B9A</button>\r\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"hideModal()\">\u53D6\u6D88</button>\r\n            </div>\r\n        <!-- </div>\r\n    </div>\r\n</div> -->",
                styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
            }] }
];
/** @nocollapse */
MetadatapackageselectComponent.ctorParameters = () => [
    { type: MetadataService },
    { type: GSPMetadataService }
];
MetadatapackageselectComponent.propDecorators = {
    closeModalEmitter: [{ type: Output }],
    treeclassifierComponent: [{ type: ViewChild, args: [TreeclassifierComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata4refdto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Metadata4RefDto {
}
class MetadataPackageHeader {
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/selectmetadate/selectmetadata.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectMetadataComponent {
    /**
     * @param {?} metadataService
     * @param {?} loading
     * @param {?} gspMetaService
     */
    constructor(metadataService, loading, gspMetaService) {
        this.metadataService = metadataService;
        this.loading = loading;
        this.gspMetaService = gspMetaService;
        this.selectedMetadata = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
        this.metadataService.selectedChange.subscribe((/**
         * @param {?} leftItem
         * @return {?}
         */
        leftItem => {
            this.classifier = leftItem;
        }));
        this.isMavenEnable = false;
        this.gspMetaService.getMavenSetting().subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        flag => {
            // if (flag) {
            this.isMavenEnable = flag;
            // }
        }));
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    onSelectedMetadataChanged(metadata) {
        this.metadata = metadata;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    setCodeLanguage(code) {
        this.codelanguage = code;
    }
    /**
     * @return {?}
     */
    LoadMetadata() {
        if (this.metadata && this.classifier) {
            // 选中的是当前工程下的元数据，调用Load
            if (this.classifier.id === 'project' || this.classifier.id === 'bo') {
                if (this.loading) {
                    this.loading.show({ message: '正在添加引用，请稍候...' });
                }
                this.metadataService.LoadTheMetadata(this.metadata).subscribe((/**
                 * @param {?} templates
                 * @return {?}
                 */
                templates => {
                    if (this.loading) {
                        this.loading.close();
                    }
                    /** @type {?} */
                    const metadata4Ref = new Metadata4RefDto();
                    metadata4Ref.metadata = templates;
                    metadata4Ref.metadata.processMode = this.metadata.processMode === 'interpretation' ? 'interpretation' : 'generation';
                    metadata4Ref.packageHeader = new MetadataPackageHeader();
                    this.selectedMetadata.emit(metadata4Ref);
                    this.hideModal();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.errorMsg(error);
                    if (this.loading) {
                        this.loading.close();
                    }
                }), (/**
                 * @return {?}
                 */
                () => {
                    if (this.loading) {
                        this.loading.close();
                    }
                }));
            }
            else if (this.classifier.id === 'local') {
                if (!this.metadata.mdPkgName) {
                    /** @type {?} */
                    const msg = '未找到元数据包信息。';
                    gsp.ide.messager.error(msg);
                    return;
                }
                if (this.loading) {
                    this.loading.show({ message: '正在添加引用，请稍候...' });
                }
                this.metadataService.pickMetadataIndex(1, this.metadata, this.codelanguage, this.isMavenEnable).subscribe((/**
                 * @param {?} templates
                 * @return {?}
                 */
                templates => {
                    if (this.loading) {
                        this.loading.close();
                    }
                    templates.metadata.processMode = this.metadata.processMode === 'interpretation' ? 'interpretation' : 'generation';
                    this.selectedMetadata.emit(templates);
                    this.hideModal();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.errorMsg(error);
                    if (this.loading) {
                        this.loading.close();
                    }
                }), (/**
                 * @return {?}
                 */
                () => {
                    if (this.loading) {
                        this.loading.close();
                    }
                }));
            }
            else if (this.classifier.id === 'remote') {
                if (!this.metadata.mdPkgName) {
                    /** @type {?} */
                    const msg = '未找到元数据包信息。';
                    gsp.ide.messager.error(msg);
                    return;
                }
                if (!this.metadata.repoPkg || this.metadata.repoPkg.length < 1) {
                    /** @type {?} */
                    const msg = '未找到仓库信息。';
                    gsp.ide.messager.error(msg);
                    return;
                }
                if (this.loading) {
                    this.loading.show({ message: '正在添加引用，请稍候...' });
                }
                this.metadataService.pickMetadataIndex(2, this.metadata, this.codelanguage, this.isMavenEnable).subscribe((/**
                 * @param {?} templates
                 * @return {?}
                 */
                templates => {
                    if (this.loading) {
                        this.loading.close();
                    }
                    templates.metadata.processMode = this.metadata.processMode === 'interpretation' ? 'interpretation' : 'generation';
                    this.selectedMetadata.emit(templates);
                    this.hideModal();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.errorMsg(error);
                    if (this.loading) {
                        this.loading.close();
                    }
                }), (/**
                 * @return {?}
                 */
                () => {
                    if (this.loading) {
                        this.loading.close();
                    }
                }));
            }
            else if (this.classifier.id === 'ref') {
                if (!this.metadata.mdPkgName) {
                    /** @type {?} */
                    const msg = '未找到元数据包信息。';
                    gsp.ide.messager.error(msg);
                    return;
                }
                if (!this.metadata.repoPkg || this.metadata.repoPkg.length < 1) {
                    /** @type {?} */
                    const msg = '未找到仓库信息。';
                    gsp.ide.messager.error(msg);
                    return;
                }
                if (this.loading) {
                    this.loading.show({ message: '请稍候...' });
                }
                this.metadataService.pickMetadataIndex(3, this.metadata, this.codelanguage, this.isMavenEnable).subscribe((/**
                 * @param {?} templates
                 * @return {?}
                 */
                templates => {
                    if (this.loading) {
                        this.loading.close();
                    }
                    templates.metadata.processMode = this.metadata.processMode === 'interpretation' ? 'interpretation' : 'generation';
                    this.selectedMetadata.emit(templates);
                    this.hideModal();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    this.errorMsg(error);
                    if (this.loading) {
                        this.loading.close();
                    }
                }), (/**
                 * @return {?}
                 */
                () => {
                    if (this.loading) {
                        this.loading.close();
                    }
                }));
            }
        }
        else {
            /** @type {?} */
            const msg = '请先选中一个元数据。';
            gsp.ide.messager.warning(msg);
        }
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    errorMsg(error) {
        /** @type {?} */
        let msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
        if (msg == null) {
            msg = '引用元数据失败。';
        }
        gsp.ide.messager.error(msg);
    }
    // 弹出元数据包选择界面
    /**
     * @return {?}
     */
    PackageSelect() {
        this.metadatapackageselectComponent.showModal();
    }
    /**
     * @return {?}
     */
    hideModal() {
        this.closeModalEmitter.emit();
    }
}
SelectMetadataComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-select-metadata',
                template: "<div class=\"farris-main-area d-flex flex-column\">\r\n  <div class=\"modal-body d-flex flex-fill flex-column\">\r\n    <div class=\"templateBlock flex-column flex-fill d-flex\">\r\n      <kendo-splitter class=\"d-flex \" style=\"flex: 1 1 auto;\" orientation=\"horizontal\">\r\n        <kendo-splitter-pane class=\"d-flex \" [collapsible]=\"true\" size=\"170px\" style=\"height: auto\">\r\n          <app-treeclassifier [metadataPath]=\"metadataPath\" [onlyDisplayCurrentProject]=\"onlyDisplayCurrentProject\"></app-treeclassifier>\r\n        </kendo-splitter-pane>\r\n        <kendo-splitter-pane class=\"d-flex\" style=\"height: auto\">\r\n          <app-metadatalist [typeName]=\"typeName\" [filter]=\"filter\" [isMavenEnable]=\"isMavenEnable\" (technologyStack)=\"setCodeLanguage($event)\"\r\n            (selectedMetadataChanged)=\"this.onSelectedMetadataChanged($event)\"></app-metadatalist>\r\n        </kendo-splitter-pane>\r\n      </kendo-splitter>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button type=\"button\" click.once class=\"btn btn-outline-primary btn-sm px-3 mx-2\"\r\n      (click.once)=\"LoadMetadata()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3 mx-2\" (click)=\"hideModal()\">\u53D6\u6D88</button>\r\n  </div>\r\n</div>\r\n",
                styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
            }] }
];
/** @nocollapse */
SelectMetadataComponent.ctorParameters = () => [
    { type: MetadataService },
    { type: LoadingService },
    { type: GSPMetadataService }
];
SelectMetadataComponent.propDecorators = {
    metadatapackageselectComponent: [{ type: ViewChild, args: [MetadatapackageselectComponent,] }],
    metadataPath: [{ type: Input }],
    typeName: [{ type: Input }],
    filter: [{ type: Input }],
    onlyDisplayCurrentProject: [{ type: Input }],
    closeModalEmitter: [{ type: Output }],
    selectedMetadata: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/metadatalist/metadatalist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TemplatemetadataComponent {
    /**
     * @param {?} metadataService
     * @param {?} gspMetaService
     */
    constructor(metadataService, gspMetaService) {
        this.metadataService = metadataService;
        this.gspMetaService = gspMetaService;
        this.subscriptions = [];
        this.dotnet = 'dotnet';
        this.java = 'java';
        this.technologyStack = new EventEmitter();
        this.loading = false;
        this.selectedMetadataChanged = new EventEmitter();
        this.allSource = { text: '全选', value: 'All' };
        this.selectedSource = this.allSource;
        this.sourceList = [this.allSource];
        this.popupSettings = { width: 'auto' };
        this.allowCustom = true;
        this.allType = { text: '全选', value: 'All' };
        this.selectedType = this.allType;
        this.typeList = [
            this.allType
        ];
        this.postfixSelected = '';
        this.initPageIndex = 0;
        this.initPageSize = 10;
        this.page = {
            pageIndex: this.initPageIndex,
            pageSize: this.initPageSize
        };
        this.typeListReadonly = false;
        this.hasNext = true;
        this.searchText = '';
        this.searchTextForDup = '';
        this.searchTextSub = new Subject();
        this.postfix = '';
        this.postfixFlag = true;
        this.scope = 0;
        this.conflictAvoidFlag = false;
        this.reload = true;
        this.mySelection = [];
        // tslint:disable-next-line:member-ordering
        this.state = {
            skip: 0,
            take: 9999,
            // Initial filter descriptor
            filter: {
                logic: 'and',
                filters: []
            }
        };
        // tslint:disable-next-line:member-ordering
        this.selectableSetting = { mode: 'single', checkboxOnly: false };
        this.rowSelected = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => this.mySelection.indexOf(e.index) >= 0);
        this.classifier = { id: '' };
        this.searchTextSub.pipe(debounceTime(2048), distinctUntilChanged()).subscribe((/**
         * @param {?} text
         * @return {?}
         */
        text => {
            this.searchText = text.trim();
            // 搜索
            console.log('search for ' + this.searchText);
            this.getData();
        }));
        // this.unsubscribeAll();
        /** @type {?} */
        const subscription = this.metadataService.selectedChange.subscribe((/**
         * @param {?} classifier
         * @return {?}
         */
        classifier => {
            if (this.classifier && classifier && this.classifier.id === classifier.id) {
                return;
            }
            // 元数据类型
            if (this.postfixFlag) {
                this.gspMetaService.GetMetadataTypeList().subscribe((/**
                 * @param {?} typeList
                 * @return {?}
                 */
                typeList => {
                    /** @type {?} */
                    let count = 0;
                    typeList.forEach((/**
                     * @param {?} type
                     * @return {?}
                     */
                    type => {
                        this.postfixFlag = false;
                        /** @type {?} */
                        const typeNameArray = this.typeName.split(',');
                        typeNameArray.forEach((/**
                         * @param {?} typeName
                         * @return {?}
                         */
                        typeName => {
                            if (typeName.toLowerCase() === type.typeCode.toLowerCase()) {
                                this.postfix = this.postfix + type.postfix + ',';
                                this.typeList.push({ text: type.typeName, value: type.postfix });
                                count++;
                            }
                        }));
                    }));
                    if (count === 1) {
                        this.typeList.shift();
                        this.selectedType = this.typeList[0];
                        this.typeListReadonly = true;
                    }
                    this.postfixSelected = this.postfix;
                    this.scopeChanged(classifier);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    /** @type {?} */
                    const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
                    gsp.ide.messager.error('Fetch Metadata Type error:' + msg);
                }));
            }
            else {
                this.scopeChanged(classifier);
            }
            // 技术栈赋值
            this.metadataService.getCodeLanguage().subscribe((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item) {
                    // 如果目前工程非单栈，则获取环境默认技术栈
                    if (item.indexOf(';') > -1) {
                        this.gspMetaService.getSettingInfo().subscribe((/**
                         * @param {?} setting
                         * @return {?}
                         */
                        setting => {
                            if (setting && setting.technologyStack) {
                                this.codelanguage = setting.technologyStack;
                                this.technologyStack.emit(this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                                        this.initNugetSourceList();
                                    }
                                    else {
                                        this.initMavenSourceList();
                                    }
                                }
                            }
                            else if (this.isMavenEnable === true) {
                                // 环境默认配置为空，则按照java技术栈处理
                                this.codelanguage = 'java';
                                this.technologyStack.emit(this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    this.initMavenSourceList();
                                }
                            }
                            else {
                                this.codelanguage = 'dotnet';
                                this.technologyStack.emit(this.codelanguage);
                                if (classifier.id === 'ref' || classifier.id === 'remote') {
                                    this.initNugetSourceList();
                                }
                            }
                        }));
                    }
                    else {
                        this.codelanguage = item;
                        this.technologyStack.emit(this.codelanguage);
                        if (classifier.id === 'ref' || classifier.id === 'remote') {
                            if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                                this.initNugetSourceList();
                            }
                            else {
                                this.initMavenSourceList();
                            }
                        }
                    }
                }
                else {
                    // 工程的技术栈为空，则也是从环境默认技术栈读取
                    this.gspMetaService.getSettingInfo().subscribe((/**
                     * @param {?} setting
                     * @return {?}
                     */
                    setting => {
                        if (setting && setting.technologyStack) {
                            this.codelanguage = setting.technologyStack;
                            this.technologyStack.emit(this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                                    this.initNugetSourceList();
                                }
                                else {
                                    this.initMavenSourceList();
                                }
                            }
                        }
                        else if (this.isMavenEnable === true) {
                            // 环境默认配置为空，则按照java技术栈处理
                            this.codelanguage = 'java';
                            this.technologyStack.emit(this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                this.initMavenSourceList();
                            }
                        }
                        else {
                            this.codelanguage = 'dotnet';
                            this.technologyStack.emit(this.codelanguage);
                            if (classifier.id === 'ref' || classifier.id === 'remote') {
                                this.initNugetSourceList();
                            }
                        }
                    }));
                }
            }));
            // 处理模式
            this.metadataService.getProcessMode().subscribe((/**
             * @param {?} processMode
             * @return {?}
             */
            processMode => {
                this.processMode = processMode;
            }));
        }));
        this.subscriptions.push(subscription);
    }
    /**
     * @return {?}
     */
    clear() {
        this.data = [];
        this.selectionChanged(null, []);
        this.page = {
            pageIndex: this.initPageIndex,
            pageSize: this.initPageSize
        };
    }
    /**
     * @param {?} state
     * @return {?}
     */
    dataStateChange(state) {
        this.state = state;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions && this.subscriptions.length > 0) {
            for (const item of this.subscriptions) {
                item.unsubscribe();
            }
        }
    }
    /**
     * @return {?}
     */
    initNugetSourceList() {
        if (this.sourceList.length === 1) {
            this.gspMetaService.getNugetSourceList().subscribe((/**
             * @param {?} sources
             * @return {?}
             */
            sources => {
                sources.forEach((/**
                 * @param {?} source
                 * @return {?}
                 */
                source => {
                    this.sourceList.push({ text: source.name, value: source.name });
                }));
            }));
        }
    }
    /**
     * @return {?}
     */
    initMavenSourceList() {
        if (this.sourceList.length === 1) {
            this.gspMetaService.getMavenSourceList().subscribe((/**
             * @param {?} sources
             * @return {?}
             */
            sources => {
                if (sources.repoList) {
                    sources.repoList.forEach((/**
                     * @param {?} source
                     * @return {?}
                     */
                    source => {
                        this.sourceList.push({ text: source.id, value: source.id });
                    }));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    onSearchTextChanged() {
        if (!this.searchText) {
            this.searchText = '';
        }
        /** @type {?} */
        const searchTextTrim = this.searchText.trim();
        if (this.searchTextForDup === searchTextTrim) {
            return;
        }
        this.searchTextForDup = searchTextTrim;
        console.log(this.searchText);
        this.searchTextSub.next(searchTextTrim);
    }
    /**
     * @private
     * @return {?}
     */
    GetMetadataList() {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        this.metadataService.GetMetadataList(this.postfixSelected).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        templates => {
            this.loading = false;
            if (!templates) {
                this.gridData = this.data;
                gsp.ide.messager.error('error to get response');
                return;
            }
            // tslint:disable-next-line: prefer-for-of
            for (let index = 0; index < templates.length; index++) {
                /** @type {?} */
                const template = templates[index];
                if (this.searchText) {
                    // tslint:disable-next-line: max-line-length
                    if (template.code.indexOf(this.searchText) > -1 || template.name.indexOf(this.searchText) > -1) {
                        metadatadto.push(template);
                    }
                }
                else {
                    metadatadto.push(template);
                }
            }
            if (metadatadto.length > 0) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
            }
            this.hasNext = false;
            this.data = metadatadto;
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Get Metadatas Error:' + msg);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    GetMetadataListInBo() {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        this.metadataService.GetMetadataListInBo(this.postfixSelected).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        templates => {
            this.loading = false;
            if (!templates) {
                this.gridData = this.data;
                gsp.ide.messager.error('error to get response');
                return;
            }
            // tslint:disable-next-line: prefer-for-of
            for (let index = 0; index < templates.length; index++) {
                /** @type {?} */
                const template = templates[index];
                if (this.searchText) {
                    // tslint:disable-next-line: max-line-length
                    if (template.projectName.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1
                        || template.code.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1
                        || template.name.toLowerCase().indexOf(this.searchText.toLowerCase()) > -1) {
                        metadatadto.push(template);
                    }
                }
                else {
                    metadatadto.push(template);
                }
            }
            if (metadatadto.length > 0) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
            }
            this.hasNext = false;
            this.data = metadatadto;
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Get Metadatas Error:' + msg);
        }));
    }
    /**
     * @private
     * @param {?=} reloadT
     * @return {?}
     */
    GetLocalMetadataList(reloadT = true) {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        // this.gspMetaService.GetDevRootPath().subscribe(root => {
        // this.metadataService.rootPath = root;
        // tslint:disable-next-line:max-line-length
        this.metadataService.GetMetadataInfos(this.scope, this.codelanguage, this.isMavenEnable, this.postfixSelected, this.searchText, this.page).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        (templates) => {
            this.loading = false;
            if (!templates) {
                gsp.ide.messager.error('error to get metadata infos');
                return;
            }
            // 页码处理
            if (templates.page) {
                if (templates.page.pageSize < this.initPageSize) {
                    this.hasNext = false;
                }
                else {
                    this.hasNext = true;
                }
                this.page.pageSize = templates.page.pageSize;
                this.page.pageIndex = templates.page.pageIndex;
            }
            else {
                this.hasNext = false;
            }
            /** @type {?} */
            const metadataList = templates.metadataIndexItems;
            if (!metadataList || metadataList.length < 1) {
                this.mySelection = [];
                this.gridData = this.data;
                return;
            }
            metadataList.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element.repoPkg && element.repoPkg.length > 0) {
                    element.nugetPkgName = element.repoPkg[0].name;
                    element.nugetPkgVersion = element.repoPkg[0].version;
                }
                metadatadto.push(element);
            }));
            if (reloadT) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
                this.data = metadatadto;
            }
            else {
                metadatadto.forEach((/**
                 * @param {?} dto
                 * @return {?}
                 */
                dto => {
                    this.data.push(dto);
                }));
            }
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Metadata req failed: ' + msg);
        }));
    }
    /**
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    showOnlyBeveragesDetails(dataItem, index) {
        return dataItem.repoPkg && dataItem.repoPkg.length > 1;
    }
    /**
     * @param {?} reload
     * @return {?}
     */
    getRemoteMetadataList(reload) {
        /** @type {?} */
        const metadatadto = [];
        this.loading = true;
        // tslint:disable-next-line:max-line-length
        this.metadataService.GetMetadataInfos(this.scope, this.codelanguage, this.isMavenEnable, this.postfixSelected, this.searchText, this.page, this.selectedSource.value).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        (templates) => {
            this.loading = false;
            if (!templates) {
                gsp.ide.messager.error('error to get metadata infos');
                return;
            }
            // 页码处理
            if (templates.page) {
                if (templates.page.pageSize < this.initPageSize) {
                    this.hasNext = false;
                }
                else {
                    this.hasNext = true;
                }
                this.page.pageSize = templates.page.pageSize;
                this.page.pageIndex = templates.page.pageIndex;
            }
            else {
                this.hasNext = false;
            }
            /** @type {?} */
            const metadataList = templates.metadataIndexItems;
            if (!metadataList || metadataList.length < 1) {
                this.mySelection = [];
                this.gridData = this.data;
                return;
            }
            metadataList.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (!element.repoPkg || element.repoPkg.length < 1) {
                    return;
                }
                if (this.codelanguage === 'dotnet' || this.isMavenEnable === false) {
                    element.repoPkg.sort(this.compareNuget('version'));
                    element.nugetPkgName = element.repoPkg[0].name;
                    element.nugetPkgVersion = element.repoPkg[0].version;
                }
                else {
                    element.repoPkg.sort(this.compare('version'));
                    element.groupId = element.repoPkg[0].groupId;
                    element.artifactId = element.repoPkg[0].artifactId;
                    element.mavenPkgVersion = element.repoPkg[0].version;
                }
                metadatadto.push(element);
            }));
            if (!metadatadto || metadatadto.length < 1) {
                this.mySelection = [];
                this.gridData = this.data;
                return;
            }
            if (reload) {
                this.onSelectionChangedInternal(metadatadto[0], [0]);
                this.data = metadatadto;
            }
            else {
                metadatadto.forEach((/**
                 * @param {?} dto
                 * @return {?}
                 */
                dto => {
                    this.data.push(dto);
                }));
            }
            this.gridData = this.data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.data = metadatadto;
            this.gridData = this.data;
            this.loading = false;
            /** @type {?} */
            const msg = error.error.Message !== undefined ? error.error.Message : error.error.error.message;
            gsp.ide.messager.error('Metadata req failed: ' + msg);
        }));
    }
    /**
     * @param {?} pro
     * @return {?}
     */
    compare(pro) {
        return (/**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        (obj1, obj2) => {
            /** @type {?} */
            const val1 = obj1[pro];
            /** @type {?} */
            const val2 = obj2[pro];
            /** @type {?} */
            const vala1 = val1.split('.');
            /** @type {?} */
            const vala2 = val2.split('.');
            /** @type {?} */
            const v10 = vala1[0].substr(1);
            /** @type {?} */
            const v20 = vala2[0].substr(1);
            if (Number(v10) < Number(v20)) {
                return 1;
            }
            if (Number(v10) > Number(v20)) {
                return -1;
            }
            if (Number(vala1[1]) < Number(vala2[1])) {
                return 1;
            }
            if (Number(vala1[1]) > Number(vala2[1])) {
                return -1;
            }
            /** @type {?} */
            const v12 = vala1[2].replace('-SNAPSHOT', '');
            /** @type {?} */
            const v22 = vala2[2].replace('-SNAPSHOT', '');
            if (Number(v12) < Number(v22)) {
                return 1;
            }
            if (Number(v12) > Number(v22)) {
                return -1;
            }
            if (vala1[2].indexOf('-SNAPSHOT') > 0) {
                return 1;
            }
            else {
                return -1;
            }
        });
    }
    /**
     * @param {?} pro
     * @return {?}
     */
    compareNuget(pro) {
        return (/**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        (obj1, obj2) => {
            /** @type {?} */
            const val1 = obj1[pro];
            /** @type {?} */
            const val2 = obj2[pro];
            /** @type {?} */
            const vala1 = val1.split('.');
            /** @type {?} */
            const vala2 = val2.split('.');
            /** @type {?} */
            const v10 = vala1[0];
            /** @type {?} */
            const v20 = vala2[0];
            if (Number(v10) < Number(v20)) {
                return -1;
            }
            if (Number(v10) > Number(v20)) {
                return 1;
            }
            if (Number(vala1[1]) < Number(vala2[1])) {
                return 1;
            }
            if (Number(vala1[1]) > Number(vala2[1])) {
                return -1;
            }
            /** @type {?} */
            const v12 = vala1[2];
            /** @type {?} */
            const v22 = vala2[2];
            if (v12.indexOf('alpha') > 0) {
                if (v12 < v22) {
                    return 1;
                }
                if (v12 > v22) {
                    return -1;
                }
            }
            else {
                if (Number(v12) < Number(v22)) {
                    return 1;
                }
                if (Number(v12) > Number(v22)) {
                    return -1;
                }
            }
        });
    }
    /**
     * @param {?} classifier
     * @return {?}
     */
    scopeChanged(classifier) {
        this.classifier = classifier;
        this.getData();
    }
    /**
     * @return {?}
     */
    getData() {
        if (this.classifier) {
            if (this.reload) {
                this.clear();
            }
            /** @type {?} */
            const reloadT = this.reload;
            if (this.classifier.id === 'project') {
                this.scope = 0;
                this.GetMetadataList();
            }
            else if (this.classifier.id === 'bo') {
                this.scope = 0;
                this.GetMetadataListInBo();
            }
            else if (this.classifier.id === 'ref') {
                this.scope = 3;
                this.getRemoteMetadataList(reloadT);
            }
            else if (this.classifier.id === 'remote') {
                this.scope = 2;
                this.getRemoteMetadataList(reloadT);
            }
            else if (this.classifier.id === 'local') {
                this.scope = 1;
                this.GetLocalMetadataList(reloadT);
            }
            // 重置一次请求中的状态
            this.reload = true;
        }
    }
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChange(event) {
        if (event && event.selectedRows && event.selectedRows.length > 0) {
            /** @type {?} */
            const dataItem = event.selectedRows[0].dataItem;
            this.onSelectionChangedInternal(dataItem, [event.selectedRows[0].index]);
        }
    }
    /**
     * @private
     * @param {?} dataItem
     * @param {?} index
     * @return {?}
     */
    onSelectionChangedInternal(dataItem, index) {
        /** @type {?} */
        const newData = this.makeNewData(dataItem);
        if (this.scope === 2 || this.scope === 3) {
            newData.repoPkg.push(dataItem.repoPkg[0]);
        }
        this.selectionChanged(newData, index);
    }
    /**
     * @private
     * @param {?} dataItem
     * @param {?=} index
     * @return {?}
     */
    selectionChanged(dataItem, index = []) {
        this.selectedMetadataChanged.emit(dataItem);
        this.mySelection = index;
    }
    /**
     * @private
     * @param {?} dataItem
     * @return {?}
     */
    makeNewData(dataItem) {
        return {
            mdPkgName: dataItem.mdPkgName,
            repoPkg: [],
            id: dataItem.id,
            nameSpace: dataItem.nameSpace,
            code: dataItem.code,
            name: dataItem.name,
            fileName: dataItem.fileName,
            type: dataItem.type,
            bizobjectID: dataItem.bizobjectID,
            language: dataItem.language,
            isTranslating: dataItem.isTranslating,
            relativePath: dataItem.relativePath,
            extendProperty: dataItem.extendProperty,
            processMode: dataItem.processMode
        };
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    onSelectedPkgChanged(dataItem) {
        if (dataItem && dataItem.repoPkg && dataItem.repoPkg.length > 0) {
            /** @type {?} */
            const newData = this.makeNewData(dataItem);
            if (dataItem.selectedPkg) {
                newData.repoPkg.push(dataItem.selectedPkg);
            }
            else {
                newData.repoPkg.push(dataItem.repoPkg[0]);
            }
            this.selectionChanged(newData, []);
        }
    }
    /**
     * @return {?}
     */
    goSearch() {
        if (!this.searchText) {
            this.searchText = '';
        }
        console.log('搜索');
        /** @type {?} */
        const searchTextTrim = this.searchText.trim();
        if (this.searchText && this.searchTextForDup === searchTextTrim) {
            return;
        }
        this.searchTextForDup = searchTextTrim;
        console.log(this.searchText);
        this.searchText = searchTextTrim;
        // 搜索
        console.log('search for ' + this.searchText);
        this.getData();
    }
    /**
     * @return {?}
     */
    goNext() {
        console.log('下一页');
        this.page.pageIndex = this.page.pageIndex + 1;
        this.reload = false;
        this.getData();
    }
    /**
     * @return {?}
     */
    onConflictAvoidFlagChanged() {
        console.log('ConflictAvoidFlag ' + this.conflictAvoidFlag);
        this.getData();
    }
    /**
     * @param {?} mdSeleted
     * @return {?}
     */
    typeSelectedChanged(mdSeleted) {
        if (!mdSeleted) {
            mdSeleted = this.selectedType;
        }
        if (mdSeleted) {
            if (mdSeleted.value === this.allType.value) {
                this.postfixSelected = this.postfix;
            }
            else {
                this.postfixSelected = mdSeleted.value;
            }
            this.getData();
        }
    }
    /**
     * @param {?} source
     * @return {?}
     */
    sourceSelectedChanged(source) {
        if (!source) {
            source = this.selectedSource;
        }
        this.selectedSource = source;
        this.getData();
    }
}
TemplatemetadataComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatalist',
                template: "<div class=\"templateInfo farris-main-area flex-column\">\r\n  <div class=\"templateSelectorHeader m-2\">\r\n    <div class=\"searchArea d-flex flex-row\">\r\n\r\n      <input id=\"url\" class=\"textInput flex-fill\" type=\"text\" size=\"30\" kendoTextBox [(ngModel)]=\"this.searchText\"\r\n        #url=\"ngModel\" required (ngModelChange)=\"onSearchTextChanged()\">\r\n      <button type=\"button\" class=\"btn btn-light btn-sm px-3 mx-2\"\r\n          (click)=\"goSearch()\">\u641C\u7D22</button>\r\n\r\n      <!-- <div class=\"conflictAvoidFlag\" *ngIf=\"this.scope === 2\">\r\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"check1\"\r\n          [(ngModel)]=\"this.conflictAvoidFlag\" (ngModelChange)=\"this.onConflictAvoidFlagChanged()\">\r\n        <label class=\"form-check-label text-label\" for=\"check1\">\u907F\u514D\u51B2\u7A81</label>\r\n      </div> -->\r\n\r\n      <kendo-combobox class=\"mx-2\" [allowCustom]=\"allowCustom\" *ngIf=\"this.scope === 2 || this.scope === 3\" [data]=\"sourceList\" \r\n        [textField]=\"'text'\" [valueField]=\"'value'\" [(ngModel)]=\"this.selectedSource\" \r\n        (selectionChange)=\"sourceSelectedChanged($event)\" [popupSettings]=\"popupSettings\">\r\n      </kendo-combobox>\r\n\r\n      <kendo-combobox [readonly]=\"this.typeListReadonly\" [data]=\"typeList\" [(ngModel)]=\"selectedType\"\r\n        [textField]=\"'text'\" [valueField]=\"'value'\"  (selectionChange)=\"typeSelectedChanged($event)\">\r\n      </kendo-combobox>\r\n    </div>\r\n  </div>\r\n  <div class=\"templateSelector flex-fill d-flex flex-column\">\r\n    <kendo-grid class=\"flex-fill\"\r\n                [data]=\"gridData\"\r\n                [selectable]=\"selectableSetting\" \r\n                (selectionChange)=onSelectionChange($event)\r\n                [sortable]=\"true\"\r\n                [pageable]=\"false\"\r\n                [filterable]=\"false\"\r\n                [resizable]=\"true\"\r\n                [loading]=\"this.loading\"\r\n                [rowSelected]=\"rowSelected\">\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 0 && this.classifier.id === 'bo') && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"projectName\" title=\"\u5DE5\u7A0B\u540D\u79F0\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"150\" field=\"code\" title=\"\u7F16\u53F7\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"150\" field=\"name\" title=\"\u540D\u79F0\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column field=\"type\" [width]=\"130\" title=\"\u7C7B\u578B\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"this.scope === 1 || this.scope === 2 || this.scope === 3\" field=\"mdPkgName\"\r\n        title=\"\u5143\u6570\u636E\u5305\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === false || this.codelanguage === dotnet)\" field=\"nugetPkgName\" title=\"\u6240\u5C5ENuget\u5305\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === false || this.codelanguage === dotnet)\" field=\"nugetPkgVersion\" title=\"\u6240\u5C5ENuget\u5305\u7248\u672C\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"groupId\" title=\"\u6240\u5C5EMaven\u5305GroupId\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"artifactId\" title=\"\u6240\u5C5EMaven\u5305ArtifactId\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column [width]=\"190\" *ngIf=\"(this.scope === 2 || this.scope === 3) && (this.isMavenEnable === true && this.codelanguage === java)\" field=\"mavenPkgVersion\" title=\"\u6240\u5C5EMaven\u5305\u7248\u672C\">\r\n      </kendo-grid-column>\r\n\r\n      <ng-template kendoGridDetailTemplate let-dataItem [kendoGridDetailTemplateShowIf]=\"showOnlyBeveragesDetails\">\r\n        <lib-metadatalistdetails (selectedPkgChanged)=\"this.onSelectedPkgChanged($event)\" [isMavenEnable]=\"isMavenEnable\" [mdItem]=\"dataItem\" [codelanguage]=\"codelanguage\">\r\n        </lib-metadatalistdetails>\r\n      </ng-template>\r\n\r\n    </kendo-grid>\r\n  </div>\r\n  <div *ngIf=\"this.hasNext && !this.loading\" class=\"model-footer\">\r\n    <button type=\"button\" class=\"btn btn-link btn-sm\" (click)=\"goNext()\">\u52A0\u8F7D\u66F4\u591A</button>\r\n  </div>\r\n  <div *ngIf=\"this.loading\" class=\"model-footer\">\r\n    <label class=\"text-label\">\u52A0\u8F7D\u4E2D...</label>\r\n  </div>\r\n  <div *ngIf=\"!this.hasNext && !this.loading\" class=\"model-footer\">\r\n    <label class=\"text-label\">\u5DF2\u7ECF\u5230\u5E95\u4E86</label>\r\n  </div>\r\n</div>",
                styles: [".templateSelector{overflow-y:hidden;overflow-x:auto}.templateInfo{display:flex;overflow:hidden}.conflictAvoidFlag{margin-left:25px;align-content:baseline;margin-top:1px;margin-right:3px;min-width:65px}.scope1{min-width:800px}.scope2{min-width:1000px}.text-label{margin-top:1.3px}"]
            }] }
];
/** @nocollapse */
TemplatemetadataComponent.ctorParameters = () => [
    { type: MetadataService },
    { type: GSPMetadataService }
];
TemplatemetadataComponent.propDecorators = {
    isMavenEnable: [{ type: Input }],
    technologyStack: [{ type: Output }],
    typeName: [{ type: Input }],
    filter: [{ type: Input }],
    selectedMetadataChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/metadatapackagelist/metadatapackagelist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadatapackagelistComponent {
    /**
     * @param {?} metadataService
     */
    constructor(metadataService) {
        this.metadataService = metadataService;
        // tslint:disable-next-line:member-ordering
        this.state = {
            skip: 0,
            take: 9999,
            // Initial filter descriptor
            filter: {
                logic: 'and',
                filters: []
            }
        };
        // tslint:disable-next-line:member-ordering
        this.selectableSetting = { mode: 'single', checkboxOnly: false };
    }
    /**
     * @param {?} state
     * @return {?}
     */
    dataStateChange(state) {
        this.state = state;
        this.gridData = process(this.data, this.state);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.metadataService.GetMetadataPackages().subscribe((/**
         * @param {?} packages
         * @return {?}
         */
        packages => {
            /** @type {?} */
            const tempdata = [];
            this.packagesInfo = packages;
            if (this.packagesInfo) {
                this.packagesInfo.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (item.type === 'folder' || (item.type === 'file' && item.name.endsWith('mdpkg'))) {
                        tempdata.push({ 'name': item.name });
                    }
                }));
                this.data = tempdata;
                this.gridData = process(this.data, this.state);
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChange(event) {
        /** @type {?} */
        const packageName = event.selectedRows[0].dataItem.name;
        this.metadataService.clearPackage();
        this.metadataService.addPackage(packageName);
    }
}
MetadatapackagelistComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatapackagelist',
                template: "<div class=\"templateInfo\">\r\n  <div class=\"templateSelector\">\r\n    <kendo-grid [data]=\"gridData\" \r\n                [selectable]=\"selectableSetting\" \r\n                (selectionChange)=onSelectionChange($event)\r\n                [pageSize]=\"state.take\"\r\n                [skip]=\"state.skip\"\r\n                [sort]=\"state.sort\"\r\n                [filter]=\"state.filter\"\r\n                [sortable]=\"true\"\r\n                [pageable]=\"false\"\r\n                [filterable]=\"true\"\r\n                (dataStateChange)=dataStateChange($event)>\r\n      <kendo-grid-column field=\"name\" title=\"\u5305\u540D\u79F0\" width=\"200\">\r\n      </kendo-grid-column>\r\n    </kendo-grid>\r\n  </div>\r\n</div>",
                styles: [".templateSelector{width:580px;height:450px;border:.5px solid #ddd}.templateDescription{width:200px;height:450px;border:.5px solid #ddd}.templateInfo{display:flex}"]
            }] }
];
/** @nocollapse */
MetadatapackagelistComponent.ctorParameters = () => [
    { type: MetadataService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/metadatalist/metadatalistdetails/metadatalistdetails.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadatalistdetailsComponent {
    constructor() {
        this.selectableSetting = { mode: 'single', checkboxOnly: false };
        this.dotnet = 'dotnet';
        this.java = 'java';
        this.detailSkip = 0;
        this.pageSize = 5;
        this.selectedPkgChanged = new EventEmitter();
        this.dataItem = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.mdItem && this.mdItem.repoPkg) {
            this.dataItem = this.mdItem.repoPkg;
            this.detailView = {
                data: this.dataItem.slice(this.detailSkip, this.detailSkip + this.pageSize),
                total: this.dataItem.length
            };
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    detailPageChange({ skip, take }) {
        this.detailSkip = skip;
        this.detailView = {
            data: this.dataItem.slice(this.detailSkip, this.detailSkip + take),
            total: this.dataItem.length
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectedPkgChanged(event) {
        console.log(event);
        this.mdItem.selectedPkg = event.selectedRows[0].dataItem;
        this.selectedPkgChanged.emit(this.mdItem);
    }
}
MetadatalistdetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-metadatalistdetails',
                template: "<div class=\"gridDetails\">\r\n  <kendo-grid\r\n    [data]=\"detailView\"\r\n    [pageSize]=\"5\"\r\n    [skip]=\"detailSkip\"\r\n    [pageable]=\"true\"\r\n    [scrollable]=\"'none'\"\r\n    [selectable]=\"this.selectableSetting\"\r\n    (selectionChange)=onSelectedPkgChanged($event)\r\n    (pageChange)=\"detailPageChange($event)\"\r\n    [navigable]=\"true\"\r\n    kendoGridFocusable>\r\n    <kendo-grid-column field=\"name\" *ngIf=\"this.isMavenEnable === false || this.codelanguage === dotnet\" title=\"Nuget\u540D\u79F0\" width=\"120\">\r\n    </kendo-grid-column>\r\n    <kendo-grid-column field=\"version\" *ngIf=\"this.isMavenEnable === false || this.codelanguage === dotnet\" title=\"Nuget\u7248\u672C\" width=\"120\">\r\n    </kendo-grid-column>\r\n    <kendo-grid-column field=\"groupId\" *ngIf=\"this.isMavenEnable === true && this.codelanguage === java\" title=\"GroupId\" width=\"120\">\r\n    </kendo-grid-column>\r\n    <kendo-grid-column field=\"artifactId\" *ngIf=\"this.isMavenEnable === true && this.codelanguage === java\" title=\"ArtifactId\" width=\"120\">\r\n    </kendo-grid-column>\r\n    <kendo-grid-column field=\"version\" *ngIf=\"this.isMavenEnable === true && this.codelanguage === java\" title=\"Maven\u7248\u672C\" width=\"120\">\r\n    </kendo-grid-column>\r\n  </kendo-grid>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
MetadatalistdetailsComponent.ctorParameters = () => [];
MetadatalistdetailsComponent.propDecorators = {
    isMavenEnable: [{ type: Input }],
    mdItem: [{ type: Input }],
    selectedPkgChanged: [{ type: Output }],
    codelanguage: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/components/selectmetadate/onclick.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OnceClickDirective {
    /**
     * @param {?} renderer
     * @param {?} element
     */
    constructor(renderer, // Angular 2.x导入Renderer
    element) {
        this.renderer = renderer;
        this.element = element;
        // tslint:disable-next-line:no-output-rename
        this.clickCall = new EventEmitter();
        this.duration = 1000; // 必须是数字，传入时要用绑定语法
        // 必须是数字，传入时要用绑定语法
        this.$sub = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 如此绑定事件亦可
        // this.renderer.listen(
        //   this.element.nativeElement, 'click', event => {
        //     event.preventDefault();
        //     event.stopPropagation();
        //     this.$sub.next(event);
        //   }
        // );
        this.subscription = this.$sub.pipe(throttleTime(this.duration)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.clickCall.emit(e);
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickEvent(event) {
        event.preventDefault(); // 通常是不需要冒泡的
        event.stopPropagation();
        this.$sub.next(event);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
OnceClickDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[click.once]'
            },] }
];
/** @nocollapse */
OnceClickDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
OnceClickDirective.propDecorators = {
    clickCall: [{ type: Output, args: ['click.once',] }],
    duration: [{ type: Input }],
    clickEvent: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-select/metadata-select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataSelectModule {
    constructor() {
    }
}
MetadataSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    TreeViewModule,
                    GridModule,
                    LayoutModule,
                    FarrisDialogModule,
                    DropDownsModule,
                    LoadingModule.forRoot()
                ],
                exports: [
                    SelectMetadataComponent
                ],
                providers: [MetadataService],
                // 服务提供者
                // tslint:disable-next-line:max-line-length
                declarations: [
                    SelectMetadataComponent,
                    TreeclassifierComponent,
                    TemplatemetadataComponent,
                    MetadatapackageselectComponent,
                    MetadatapackagelistComponent,
                    MetadatalistdetailsComponent,
                    OnceClickDirective
                ],
                entryComponents: [SelectMetadataComponent, MetadatapackageselectComponent]
            },] }
];
/** @nocollapse */
MetadataSelectModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-service.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} http
 * @param {?} url
 * @return {?}
 */
function factory(http, url) {
    return new GSPMetadataService(http, url);
}
class GSPMetadataServiceModule {
    /**
     * @param {?} url
     * @return {?}
     */
    static forRoot(url) {
        return {
            ngModule: GSPMetadataServiceModule,
            providers: [
                { provide: 'url', useValue: url },
                { provide: GSPMetadataService, useFactory: factory, deps: [HttpClient, 'url'] }
            ]
        };
    }
}
GSPMetadataServiceModule.decorators = [
    { type: NgModule, args: [{
                exports: [],
                providers: []
            },] }
];
/** @type {?} */
const globalGsp = ((/** @type {?} */ (window.top))).gsp;
if (!((/** @type {?} */ (window))).gsp) {
    ((/** @type {?} */ (window))).gsp = /*(globalGsp && globalGsp.createChild()) ||*/ new GSP(globalGsp);
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatadto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataDto$1 {
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} id
     * @param {?} nameSpace
     * @param {?} code
     * @param {?} name
     * @param {?} fileName
     * @param {?} type
     * @param {?} bizobjectID
     * @param {?} relativePath
     * @param {?} extendProperty
     * @param {?} content
     * @param {?} extendable
     */
    constructor(id, nameSpace, code, name, fileName, type, bizobjectID, relativePath, extendProperty, content, extendable) {
        this.id = id;
        this.nameSpace = nameSpace;
        this.code = code;
        this.name = name;
        this.fileName = fileName;
        this.type = type;
        this.bizobjectID = bizobjectID;
        this.relativePath = relativePath;
        this.extendProperty = extendProperty;
        this.content = content;
        this.extendable = extendable;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadataprojectdto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataProjectDto {
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} packageName
     * @param {?} projectPath
     * @param {?} projectName
     * @param {?} projectNameSpace
     * @param {?} depPackageName
     * @param {?} depPackageVersion
     * @param {?} depPackageLocation
     */
    constructor(packageName, projectPath, projectName, projectNameSpace, depPackageName, depPackageVersion, depPackageLocation) {
        this.packageName = packageName;
        this.projectName = projectName;
        this.projectPath = projectPath;
        this.projectNameSpace = projectNameSpace;
        this.depPackageName = depPackageName;
        this.depPackageVersion = depPackageVersion;
        this.depPackageLocation = depPackageLocation;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-lcm-metadata-selector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MetadataSelectModule, SelectMetadataComponent, GSPMetadataService, GSPMetadataServiceModule, MetadataDto$1 as MetadataDto, Metadata4RefDto, MetadataPackageDto, MetadataProjectDto, TemplatemetadataComponent as ɵe, MetadatalistdetailsComponent as ɵg, MetadatapackagelistComponent as ɵf, MetadatapackageselectComponent as ɵb, OnceClickDirective as ɵh, TreeclassifierComponent as ɵc, MetadataService as ɵd, factory as ɵa };

//# sourceMappingURL=gsp-lcm-metadata-selector.js.map