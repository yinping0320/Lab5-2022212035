import { Observable } from 'rxjs/Observable';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { CommonModule } from '@angular/common';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { FormsModule } from '@angular/forms';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { BOTreePanelPackageModule } from '@gsp-lcm/bo-tree';
import { BORtServiceModule, BusinessObjectRtService } from '@gsp-lcm/bo-rt-service';
import { SplitterModule } from '@farris/ui-splitter';
import { FarrisSectionModule } from '@farris/ui-section';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { Injectable, Component, Output, EventEmitter, Input, NgModule, LOCALE_ID } from '@angular/core';
import { TranslateService, TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridModule } from '@farris/ui-datagrid';
import { FarrisFormsModule } from '@farris/ui-forms';

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata.rtservice4biztype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GSPMetadataRTService4BizType {
    // tslint:disable-next-line:variable-name
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        // 环境变量
        // tslint:disable-next-line:variable-name
        // tslint:disable-next-line:variable-name
        this.MetadataRT_Base_Path = '/api/runtime/lcm/v1.0/rt-metadatas';
        // tslint:disable-next-line:variable-name
        this.MetadataBizType_Base_Path = '/api/runtime/lcm/v1.0/metadata-biztypes';
        this.MetadataBizType_Mapping_Path = '/api/runtime/lcm/v1.0/metadata-biztypes/mappings';
    }
    /**
     * 元数据运行时服务
     * @param {?} metadataID
     * @return {?}
     */
    GetMetadataRT(metadataID) {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/' + metadataID;
        return this.http.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTList(typeList) {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '?metadataTypes=' + typeList;
        return this.http.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetPackagedMetadataRTListWithType(typeList) {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/packaged?metadataTypes=' + typeList;
        return this.http.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetAllOriginMdRTListWithType(typeList) {
        /** @type {?} */
        var t = this.MetadataRT_Base_Path + "/origin?metadataTypes=" + typeList;
        return this.http.get(t);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    getMetadataListByBizTypeId(bizTypeId, metadataTypes) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '?bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
        return this.http.get(url);
    }
    /**
     * @param {?} metadataId
     * @param {?} certId
     * @return {?}
     */
    getMappingListByMetadataId(metadataId, certId) {
        /** @type {?} */
        const url = this.MetadataBizType_Mapping_Path + '?metadataId=' + metadataId + '&certId=' + certId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataId
     * @return {?}
     */
    isMappingExist(bizTypeId, metadataId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/validation/md?bizTypeId=' + bizTypeId + '&mdId=' + metadataId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} boId
     * @return {?}
     */
    isBoBizTypeMappingExist(bizTypeId, boId) {
        /** @type {?} */
        var a = this.MetadataBizType_Base_Path + "/validation/bo?bizTypeId=" + bizTypeId + "&boId=" + boId;
        return this.http.get(a);
    }
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    GetMetadataTypeList() {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/typeList';
        return this.http.get(url);
    }
    /**
     * @return {?}
     */
    GetPackagedMetadataRTList() {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/packaged';
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataId
     * @return {?}
     */
    deleteMappingData(bizTypeId, metadataId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/md?bizTypeId=' + bizTypeId + '&mdId=' + metadataId;
        return this.http.delete(url, null);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataIds
     * @return {?}
     */
    deleteMdMappingDataList(bizTypeId, metadataIds) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/mds?bizTypeId=' + bizTypeId + '&mdIds=' + metadataIds;
        return this.http.delete(url, null);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} boIds
     * @return {?}
     */
    deleteBoMappingDataList(bizTypeId, boIds) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bos?bizTypeId=' + bizTypeId + '&boIds=' + boIds;
        return this.http.delete(url, null);
    }
    /**
     * @param {?} mdBizTypeMapping
     * @return {?}
     */
    saveMappingData(mdBizTypeMapping) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/md';
        return this.http.post(url, mdBizTypeMapping);
    }
    /**
     * @param {?} mdBizTypeMappingings
     * @return {?}
     */
    saveMdMappingList(mdBizTypeMappingings) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/mds';
        return this.http.post(url, mdBizTypeMappingings);
    }
    /**
     * @param {?} boBizTypeMaaing
     * @return {?}
     */
    saveBoBizTypeMapping(boBizTypeMaaing) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bo';
        return this.http.post(url, boBizTypeMaaing);
    }
    /**
     * @param {?} boBizTypeMappings
     * @return {?}
     */
    saveBoBizTypeMappingList(boBizTypeMappings) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bos';
        return this.http.post(url, boBizTypeMappings);
    }
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    GetPostfix(metadataType) {
        this.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        typeList => {
            typeList.forEach((/**
             * @param {?} type
             * @return {?}
             */
            type => {
                if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                    return type.postfix;
                }
            }));
        }));
        return new Observable();
    }
    /**
     * @param {?} bizTypeId
     * @return {?}
     */
    getMdBizTypeMappingType(bizTypeId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappingtype?bizTypeId=' + bizTypeId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @return {?}
     */
    getMdBizMappingListBizTypeId(bizTypeId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/md?bizTypeId=' + bizTypeId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @return {?}
     */
    getBoBizMappingListBizTypeId(bizTypeId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bo?bizTypeId=' + bizTypeId;
        return this.http.get(url);
    }
    /**
     * @param {?} mdBizTypeMappingDto
     * @return {?}
     */
    save(mdBizTypeMappingDto) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path;
        return this.http.post(url, mdBizTypeMappingDto);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} mdBizMapType
     * @return {?}
     */
    saveMappingType(bizTypeId, mdBizMapType) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappingtype?bizTypeId=' + bizTypeId + '&mdBizMapType=' + mdBizMapType;
        return this.http.post(url, null);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} boId
     * @return {?}
     */
    deleteBoMdMappingData(bizTypeId, boId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bo?bizTypeId=' + bizTypeId + '&boId=' + boId;
        return this.http.delete(url, null);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select4biztype/metadatainfo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataInfoService {
    /**
     * @param {?} http
     * @param {?} gspMetadataService
     */
    constructor(http, gspMetadataService) {
        this.http = http;
        this.gspMetadataService = gspMetadataService;
        // tslint:disable-next-line:variable-name
        this.BusinessObject_Base_Path = '/api/dev/main/v1.0/business-objects';
        this.metadatas = [];
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    addMetadataRT(metadata) {
        this.metadatas.push(metadata);
    }
    /**
     * @return {?}
     */
    clearMetadataRT() {
        this.metadatas = [];
    }
    // 获取包源
    /**
     * @param {?} obId
     * @return {?}
     */
    getBusinessObject(obId) {
        /** @type {?} */
        const url = this.BusinessObject_Base_Path + '/' + obId;
        return this.http.get(url);
    }
    /**
     * @return {?}
     */
    GetMetadataTypeList() {
        return this.gspMetadataService.GetMetadataTypeList();
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTList(typeList) {
        return this.gspMetadataService.GetAllOriginMdRTListWithType(typeList);
    }
    // 获根据Id取指定元数据
    /**
     * @param {?} metadataID
     * @return {?}
     */
    GetMetadataRT(metadataID) {
        return this.gspMetadataService.GetMetadataRT(metadataID);
    }
}
MetadataInfoService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MetadataInfoService.ctorParameters = () => [
    { type: HttpClient },
    { type: GSPMetadataRTService4BizType }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select4biztype/components/metadatainfo/metadatainfo.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataInfoComponent {
    /**
     * @param {?} metadataInfoService
     * @param {?} notifyService
     * @param {?} translate
     */
    constructor(metadataInfoService, notifyService, translate) {
        this.metadataInfoService = metadataInfoService;
        this.notifyService = notifyService;
        this.translate = translate;
        this.OK = this.transform('OK');
        this.cancel = this.transform('Cancel');
        this.selectedMetadata = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} key
     * @return {?}
     */
    transform(key) {
        return this.translate.instant(key);
    }
    /**
     * @return {?}
     */
    LoadMetadata() {
        if (this.metadataInfoService.metadatas == null || this.metadataInfoService.metadatas.length <= 0) {
            this.notifyService.warning(this.transform('PleaseChooseData'));
            return;
        }
        /** @type {?} */
        const Id = this.metadataInfoService.metadatas;
        this.selectedMetadata.emit(this.metadataInfoService.metadatas);
        this.hideModal();
        // 清空缓存
        this.metadataInfoService.clearMetadataRT();
    }
    /**
     * @return {?}
     */
    hideModal() {
        this.closeModalEmitter.emit();
    }
    /**
     * @param {?} bo
     * @return {?}
     */
    onSelectedChange(bo) {
        if (bo.id === 'gscloud') {
            this.boId = '';
        }
        else {
            this.boId = bo.id;
        }
    }
}
MetadataInfoComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatainfo',
                template: "<!-- <div class=\"modal-body\">\r\n    <div class=\"templateBlock\">\r\n        <app-treeclassifier></app-treeclassifier>\r\n        <app-metadatainfolist></app-metadatainfolist>\r\n    </div>\r\n</div> -->\r\n<div class=\"farris-main-area flex-column farris-overflow-hidden\">\r\n  <div class=\"f-utils-fill bg-c-white position-relative f-utils-overflow-xhya d-flex\">\r\n      <div class=\"templateBlock flex-column flex-fill d-flex w-100\">\r\n        <kendo-splitter class=\"d-flex h-100 \" style=\"flex: 1 1 auto;\" orientation=\"horizontal\">\r\n          <kendo-splitter-pane class=\"d-flex \" [collapsible]=\"true\" size=\"250px\" style=\"height: auto\">\r\n            <app-bo-tree-panel (selectionChanged)=onSelectedChange($event)></app-bo-tree-panel>\r\n          </kendo-splitter-pane>\r\n          <kendo-splitter-pane class=\"d-flex\" style=\"height: auto\">\r\n            <app-metadatainfolist class=\"flex-fill\" [boId]=\"boId\"></app-metadatainfolist>\r\n          </kendo-splitter-pane>\r\n        </kendo-splitter>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"LoadMetadata()\">{{ 'OK' | translate }}</button>\r\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"hideModal()\">{{ 'Cancel' | translate }}</button>\r\n  </div>\r\n</div>",
                styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
            }] }
];
/** @nocollapse */
MetadataInfoComponent.ctorParameters = () => [
    { type: MetadataInfoService },
    { type: NotifyService },
    { type: TranslateService }
];
MetadataInfoComponent.propDecorators = {
    selectedMetadata: [{ type: Output }],
    closeModalEmitter: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/guid.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Guid {
    /**
     * @return {?}
     */
    static newGuid() {
        /** @type {?} */
        var replaceFunction = (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            // tslint:disable-next-line:no-bitwise
            /** @type {?} */
            const r = Math.random() * 16 | 0;
            /** @type {?} */
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, replaceFunction);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/gspbobiztypemapping.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspBoBizTypeMapping {
    // tslint:disable-next-line:max-line-length
    constructor() {
        this.id = Guid.newGuid();
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/gspmdbiztypemapping.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspMdBizTypeMapping {
    // tslint:disable-next-line:max-line-length
    constructor() {
        this.id = Guid.newGuid();
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/mdbiztypemappingdto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MdBizTypeMappingDto {
    // tslint:disable-next-line:max-line-length
    constructor() {
        this.boBizTypeMappings = [];
        this.mdBizTypeMappings = [];
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/gspmdbiztypemappingtype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspMdBizTypeMappingType {
    // tslint:disable-next-line:max-line-length
    constructor() {
        this.id = Guid.newGuid();
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select4biztype/components/metadatainfolist/metadatainfolist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:component-class-suffix
class MetadataInfoList {
    /**
     * @param {?} metadataService
     * @param {?} translate
     */
    constructor(metadataService /**/, translate) {
        this.metadataService = metadataService;
        this.translate = translate;
        this.allType = { text: this.transform('SelectAll'), value: 'All' };
        this.selectedType = this.allType;
        this.typeList = [
            this.allType
        ];
        this.typeListReadonly = false;
        this.searchText = '';
        this.searchTextForDup = '';
        this.Code = this.transform('Code');
        this.dataCache = [];
        this.columns = [];
        this.boId = 'all';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'nameSpace', width: 250, title: this.transform('NameSpace') },
            { field: 'code', width: 200, title: this.transform('Code') },
            { field: 'name', width: 200, title: this.transform('Name') },
            { field: 'type', width: 150, title: this.transform('Type') }
        ];
        // 获取所有的元数据类型列表
        this.metadataService.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        typeList => {
            if (typeList) {
                typeList.forEach((/**
                 * @param {?} type
                 * @return {?}
                 */
                type => {
                    this.typeList.push({ text: type.typeName, value: type.typeCode });
                }));
            }
        }));
        // 初始化数据
        this.getData();
    }
    /**
     * @return {?}
     */
    clear() {
        this.data = [];
    }
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.searchText) {
            this.onSearchTextChanged();
            return;
        }
        for (const key in changes) {
            if (changes.hasOwnProperty(key)) {
                /** @type {?} */
                const changedProp = changes[key];
                /** @type {?} */
                const currentValue = changedProp.currentValue;
                this.boId = currentValue;
                if (this.dataCache) {
                    /** @type {?} */
                    let dtos = [];
                    dtos = this.filterByBoId(this.dataCache);
                    dtos = this.filterByType(dtos);
                    dtos = this.filterBySearchText(dtos, this.searchText.trim());
                    this.data = dtos;
                }
            }
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    transform(key) {
        return this.translate.instant(key);
    }
    /**
     * @return {?}
     */
    onSearchTextChanged() {
        if (!this.searchText) {
            this.searchText = '';
        }
        /** @type {?} */
        const searchTextTrim = this.searchText.trim();
        console.log(this.searchText);
        this.filterData(searchTextTrim);
    }
    /**
     * @param {?} mdSeleted
     * @return {?}
     */
    typeSelectedChanged(mdSeleted) {
        if (!mdSeleted) {
            mdSeleted = this.selectedType;
        }
        else {
            this.selectedType = mdSeleted;
        }
        if (this.searchText) {
            this.onSearchTextChanged();
            return;
        }
        if (mdSeleted) {
            /** @type {?} */
            let dtos = [];
            dtos = this.filterByBoId(this.dataCache);
            dtos = this.filterByType(dtos);
            this.data = dtos;
        }
    }
    /**
     * @return {?}
     */
    goSearch() {
    }
    /**
     * @private
     * @return {?}
     */
    getData() {
        /** @type {?} */
        const metadatadto = [];
        this.metadataService.GetMetadataRTList('').subscribe((/**
         * @param {?} metadataList
         * @return {?}
         */
        metadataList => {
            if (metadataList) {
                this.metadataService.GetMetadataTypeList().subscribe((/**
                 * @param {?} typeList
                 * @return {?}
                 */
                typeList => {
                    if (typeList) {
                        metadataList.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            /** @type {?} */
                            const dto = typeList.find((/**
                             * @param {?} type
                             * @return {?}
                             */
                            type => type.typeCode === item.metadata.type));
                            if (dto) {
                                item.metadata.type = dto.typeName;
                            }
                            metadatadto.push(item.metadata);
                        }));
                    }
                    else {
                        metadataList.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            metadatadto.push(item.metadata);
                        }));
                    }
                    this.data = metadatadto;
                    this.dataCache = metadatadto;
                }));
            }
        }));
    }
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    filterData(filter) {
        /** @type {?} */
        let dtos = [];
        dtos = this.filterByBoId(this.dataCache);
        dtos = this.filterByType(dtos);
        dtos = this.filterBySearchText(dtos, filter);
        this.data = dtos;
    }
    /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    filterByType(datas) {
        /** @type {?} */
        let dtos = [];
        if (this.selectedType.value === 'All') {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.data;
                // tslint:disable-next-line:max-line-length
                if (data.type === this.selectedType.text) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    }
    /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    filterByBoId(datas) {
        /** @type {?} */
        let dtos = [];
        if (!this.boId) {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                // tslint:disable-next-line:max-line-length
                if (data.bizobjectID === this.boId) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    }
    /**
     * @private
     * @param {?} datas
     * @param {?} text
     * @return {?}
     */
    filterBySearchText(datas, text) {
        /** @type {?} */
        let dtos = [];
        if (!text) {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data.code.toLowerCase().indexOf(text.toLowerCase()) > -1 || data.name.toLowerCase().indexOf(text.toLowerCase()) > -1) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    }
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChange(event) {
        if (event.selectedRows.length > 0) {
            this.metadataService.clearMetadataRT();
            /** @type {?} */
            const metadata = {
                ID: event.selectedRows[0].dataItem.id,
                RelativePath: event.selectedRows[0].dataItem.relativePath,
                FileName: event.selectedRows[0].dataItem.fileName
            };
            this.metadataService.addMetadataRT(metadata);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageSizeChanged($event) {
        console.log('PageSize Changed:', $event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageChanged($event) {
        console.log('PageNumber Changed:', $event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    checkedChange(event) {
        if (event != null && event.length > 0) {
            this.metadataService.clearMetadataRT();
            event.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                const metadata = {
                    ID: element.data.id,
                    Name: element.data.name,
                    Code: element.data.code,
                    Type: element.data.type,
                    NameSpace: element.data.nameSpace
                };
                this.metadataService.addMetadataRT(metadata);
            }));
        }
    }
}
MetadataInfoList.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatainfolist',
                template: "<div class=\"templateInfo d-flex flex-column h-100\">\r\n  <div class=\"templateSelectorHeader m-2 flex-shrink-0\">\r\n    <div class=\"searchArea d-flex flex-row\">\r\n\r\n      <input id=\"url\" class=\"textInput flex-fill\" type=\"text\" size=\"30\" kendoTextBox [(ngModel)]=\"this.searchText\"\r\n        #url=\"ngModel\" (ngModelChange)=\"onSearchTextChanged()\">\r\n      <button type=\"button\" class=\"btn btn-light btn-sm px-3 mx-2\"\r\n          (click)=\"goSearch()\">{{ 'Search' | translate }}</button>\r\n\r\n      <kendo-combobox [readonly]=\"this.typeListReadonly\" [data]=\"typeList\" [(ngModel)]=\"selectedType\"\r\n        [textField]=\"'text'\" [valueField]=\"'value'\"  (selectionChange)=\"typeSelectedChanged($event)\">\r\n      </kendo-combobox>\r\n    </div>\r\n   </div>\r\n\r\n    <div class=\"templateSelector farris-overflow-y-auto flex-fill f-utils-fill-flex-column\">\r\n      <farris-datagrid class=\"f-utils-fill\"\r\n      [columns]=\"columns\" [data]=\"data\" [showBorder]=\"true\"\r\n      [showLineNumber]=\"true\" [fit]=\"true\"\r\n      [striped]=\"true\"\r\n      [pagerOnServer]=\"false\"\r\n      [pagination]=\"true\" [pageSize]=\"10\" [showPageList]=\"true\"\r\n      (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\r\n      [fitColumns]=\"true\"\r\n      [autoFitColumns]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [showAllCheckbox]=\"true\"\r\n      [selectOnCheck]=\"true\"\r\n      [checkOnSelect]=\"true\"\r\n      [onlySelectSelf]=\"true\"\r\n      [showCheckbox]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [keepSelect]=\"true\"\r\n      (checkedChange) = \"checkedChange($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
MetadataInfoList.ctorParameters = () => [
    { type: MetadataInfoService },
    { type: TranslateService }
];
MetadataInfoList.propDecorators = {
    boId: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/models/TranslateResolveService.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const lang = {
    "zh-CHS": {
        "key": "中文文本"
    }
};
class TranslateResolveService {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        this.translate = translate;
        translate.defaultLang = 'zh-CHS';
        translate.setTranslation('zh-CHS', lang['zh-CHS']);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    resolve(route, state) {
        /** @type {?} */
        const lang = localStorage.getItem('languageCode');
        if (this.translate.defaultLang === lang) {
            return this.translate.getTranslation(lang);
        }
        else {
            this.translate.defaultLang = lang;
            return this.translate.getTranslation(lang);
        }
    }
}
TranslateResolveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TranslateResolveService.ctorParameters = () => [
    { type: TranslateService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-rtservice4biztype.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} http
 * @return {?}
 */
function createTranslateLoader(http) {
    return new TranslateHttpLoader(http, "/platform/runtime/common/web/@gsp-lcm/metadatart-selector4biztype/i18n/", ".json");
}
const ɵ0 = (createTranslateLoader), ɵ1 = localStorage.getItem('languageCode') || 'zh-CHS';
class GSPMetadataRTServiceModule4BizType {
}
GSPMetadataRTServiceModule4BizType.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FarrisFormsModule,
                    HttpClientModule,
                    NotifyModule.forRoot(),
                    CommonModule,
                    FormsModule,
                    LayoutModule,
                    DropDownsModule,
                    BOTreePanelPackageModule,
                    SplitterModule,
                    FarrisSectionModule,
                    BORtServiceModule,
                    DatagridModule,
                    TranslateModule.forRoot({
                        loader: {
                            provide: TranslateLoader,
                            useFactory: ɵ0,
                            deps: [HttpClient]
                        }
                    }),
                ],
                declarations: [MetadataInfoComponent, MetadataInfoList],
                exports: [MetadataInfoComponent],
                providers: [
                    HttpService,
                    GSPMetadataRTService4BizType,
                    MetadataInfoService,
                    BusinessObjectRtService,
                    TranslateResolveService,
                    GspBoBizTypeMapping,
                    GspMdBizTypeMapping,
                    MdBizTypeMappingDto,
                    GspMdBizTypeMappingType,
                    { provide: LOCALE_ID, useValue: ɵ1 }
                ],
                entryComponents: [MetadataInfoComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatadto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataDto {
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} id
     * @param {?} nameSpace
     * @param {?} code
     * @param {?} name
     * @param {?} fileName
     * @param {?} type
     * @param {?} bizobjectID
     * @param {?} relativePath
     * @param {?} extendProperty
     * @param {?} content
     */
    constructor(id, nameSpace, code, name, fileName, type, bizobjectID, relativePath, extendProperty, content) {
        this.id = id;
        this.nameSpace = nameSpace;
        this.code = code;
        this.name = name;
        this.fileName = fileName;
        this.type = type;
        this.bizobjectID = bizobjectID;
        this.relativePath = relativePath;
        this.extendProperty = extendProperty;
        this.content = content;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata4refdto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Metadata4RefDto {
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatapackagedto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataPackageDto {
    /**
     * @param {?} packageName
     * @param {?} packageVersion
     * @param {?} packageLocation
     * @param {?} projectPath
     */
    constructor(packageName, packageVersion, packageLocation, projectPath) {
        this.packageName = packageName;
        this.projectPath = projectPath;
        this.packageVersion = packageVersion;
        this.packageLocation = packageLocation;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadataprojectdto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataProjectDto {
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} packageName
     * @param {?} projectPath
     * @param {?} projectName
     * @param {?} projectNameSpace
     * @param {?} depPackageName
     * @param {?} depPackageVersion
     * @param {?} depPackageLocation
     */
    constructor(packageName, projectPath, projectName, projectNameSpace, depPackageName, depPackageVersion, depPackageLocation) {
        this.packageName = packageName;
        this.projectName = projectName;
        this.projectPath = projectPath;
        this.projectNameSpace = projectNameSpace;
        this.depPackageName = depPackageName;
        this.depPackageVersion = depPackageVersion;
        this.depPackageLocation = depPackageLocation;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-lcm-metadatart-selector4biztype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MetadataInfoComponent, GSPMetadataRTServiceModule4BizType, GSPMetadataRTService4BizType, MetadataDto, Metadata4RefDto, MetadataPackageDto, MetadataProjectDto, GspBoBizTypeMapping, GspMdBizTypeMapping, MdBizTypeMappingDto, MetadataInfoService, GspMdBizTypeMappingType, Guid, createTranslateLoader as ɵa, MetadataInfoList as ɵb, TranslateResolveService as ɵc };

//# sourceMappingURL=gsp-lcm-metadatart-selector4biztype.js.map