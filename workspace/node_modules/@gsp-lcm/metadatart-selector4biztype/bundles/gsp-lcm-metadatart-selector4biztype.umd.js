(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/Observable'), require('@angular/common/http'), require('@farris/ui-notify'), require('@angular/common'), require('@progress/kendo-angular-dropdowns'), require('@angular/forms'), require('@progress/kendo-angular-layout'), require('@gsp-lcm/bo-tree'), require('@gsp-lcm/bo-rt-service'), require('@farris/ui-splitter'), require('@farris/ui-section'), require('@ngx-translate/http-loader'), require('@angular/core'), require('@ngx-translate/core'), require('@ecp-caf/caf-common'), require('@farris/ui-datagrid'), require('@farris/ui-forms')) :
    typeof define === 'function' && define.amd ? define('@gsp-lcm/metadatart-selector4biztype', ['exports', 'rxjs/Observable', '@angular/common/http', '@farris/ui-notify', '@angular/common', '@progress/kendo-angular-dropdowns', '@angular/forms', '@progress/kendo-angular-layout', '@gsp-lcm/bo-tree', '@gsp-lcm/bo-rt-service', '@farris/ui-splitter', '@farris/ui-section', '@ngx-translate/http-loader', '@angular/core', '@ngx-translate/core', '@ecp-caf/caf-common', '@farris/ui-datagrid', '@farris/ui-forms'], factory) :
    (factory((global['gsp-lcm'] = global['gsp-lcm'] || {}, global['gsp-lcm']['metadatart-selector4biztype'] = {}),global.rxjs.Observable,global.ng.common.http,global.uiNotify,global.ng.common,global.kendoAngularDropdowns,global.ng.forms,global.kendoAngularLayout,global.boTree,global.boRtService,global.uiSplitter,global.uiSection,global.httpLoader,global.ng.core,global.core$1,global.cafCommon,global.uiDatagrid,global.uiForms));
}(this, (function (exports,Observable,http,uiNotify,common,kendoAngularDropdowns,forms,kendoAngularLayout,boTree,boRtService,uiSplitter,uiSection,httpLoader,core,core$1,cafCommon,uiDatagrid,uiForms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadata.rtservice4biztype.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GSPMetadataRTService4BizType = /** @class */ (function () {
        // tslint:disable-next-line:variable-name
        function GSPMetadataRTService4BizType(http$$1) {
            this.http = http$$1;
            // 环境变量
            // tslint:disable-next-line:variable-name
            // tslint:disable-next-line:variable-name
            this.MetadataRT_Base_Path = '/api/runtime/lcm/v1.0/rt-metadatas';
            // tslint:disable-next-line:variable-name
            this.MetadataBizType_Base_Path = '/api/runtime/lcm/v1.0/metadata-biztypes';
            this.MetadataBizType_Mapping_Path = '/api/runtime/lcm/v1.0/metadata-biztypes/mappings';
        }
        /**
         * 元数据运行时服务
         */
        /**
         * 元数据运行时服务
         * @param {?} metadataID
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.GetMetadataRT = /**
         * 元数据运行时服务
         * @param {?} metadataID
         * @return {?}
         */
            function (metadataID) {
                /** @type {?} */
                var url = this.MetadataRT_Base_Path + '/' + metadataID;
                return this.http.get(url);
            };
        /**
         * @param {?} typeList
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.GetMetadataRTList = /**
         * @param {?} typeList
         * @return {?}
         */
            function (typeList) {
                /** @type {?} */
                var url = this.MetadataRT_Base_Path + '?metadataTypes=' + typeList;
                return this.http.get(url);
            };
        /**
         * @param {?} typeList
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.GetPackagedMetadataRTListWithType = /**
         * @param {?} typeList
         * @return {?}
         */
            function (typeList) {
                /** @type {?} */
                var url = this.MetadataRT_Base_Path + '/packaged?metadataTypes=' + typeList;
                return this.http.get(url);
            };
        /**
         * @param {?} typeList
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.GetAllOriginMdRTListWithType = /**
         * @param {?} typeList
         * @return {?}
         */
            function (typeList) {
                /** @type {?} */
                var t = this.MetadataRT_Base_Path + "/origin?metadataTypes=" + typeList;
                return this.http.get(t);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.getMetadataListByBizTypeId = /**
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
            function (bizTypeId, metadataTypes) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '?bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
                return this.http.get(url);
            };
        /**
         * @param {?} metadataId
         * @param {?} certId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.getMappingListByMetadataId = /**
         * @param {?} metadataId
         * @param {?} certId
         * @return {?}
         */
            function (metadataId, certId) {
                /** @type {?} */
                var url = this.MetadataBizType_Mapping_Path + '?metadataId=' + metadataId + '&certId=' + certId;
                return this.http.get(url);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} metadataId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.isMappingExist = /**
         * @param {?} bizTypeId
         * @param {?} metadataId
         * @return {?}
         */
            function (bizTypeId, metadataId) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/validation/md?bizTypeId=' + bizTypeId + '&mdId=' + metadataId;
                return this.http.get(url);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} boId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.isBoBizTypeMappingExist = /**
         * @param {?} bizTypeId
         * @param {?} boId
         * @return {?}
         */
            function (bizTypeId, boId) {
                /** @type {?} */
                var a = this.MetadataBizType_Base_Path + "/validation/bo?bizTypeId=" + bizTypeId + "&boId=" + boId;
                return this.http.get(a);
            };
        // 获取元数据类型及后缀信息
        // 获取元数据类型及后缀信息
        /**
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.GetMetadataTypeList =
            // 获取元数据类型及后缀信息
            /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var url = this.MetadataRT_Base_Path + '/typeList';
                return this.http.get(url);
            };
        /**
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.GetPackagedMetadataRTList = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = this.MetadataRT_Base_Path + '/packaged';
                return this.http.get(url);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} metadataId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.deleteMappingData = /**
         * @param {?} bizTypeId
         * @param {?} metadataId
         * @return {?}
         */
            function (bizTypeId, metadataId) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/md?bizTypeId=' + bizTypeId + '&mdId=' + metadataId;
                return this.http.delete(url, null);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} metadataIds
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.deleteMdMappingDataList = /**
         * @param {?} bizTypeId
         * @param {?} metadataIds
         * @return {?}
         */
            function (bizTypeId, metadataIds) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/mds?bizTypeId=' + bizTypeId + '&mdIds=' + metadataIds;
                return this.http.delete(url, null);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} boIds
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.deleteBoMappingDataList = /**
         * @param {?} bizTypeId
         * @param {?} boIds
         * @return {?}
         */
            function (bizTypeId, boIds) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/bos?bizTypeId=' + bizTypeId + '&boIds=' + boIds;
                return this.http.delete(url, null);
            };
        /**
         * @param {?} mdBizTypeMapping
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.saveMappingData = /**
         * @param {?} mdBizTypeMapping
         * @return {?}
         */
            function (mdBizTypeMapping) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/md';
                return this.http.post(url, mdBizTypeMapping);
            };
        /**
         * @param {?} mdBizTypeMappingings
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.saveMdMappingList = /**
         * @param {?} mdBizTypeMappingings
         * @return {?}
         */
            function (mdBizTypeMappingings) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/mds';
                return this.http.post(url, mdBizTypeMappingings);
            };
        /**
         * @param {?} boBizTypeMaaing
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.saveBoBizTypeMapping = /**
         * @param {?} boBizTypeMaaing
         * @return {?}
         */
            function (boBizTypeMaaing) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/bo';
                return this.http.post(url, boBizTypeMaaing);
            };
        /**
         * @param {?} boBizTypeMappings
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.saveBoBizTypeMappingList = /**
         * @param {?} boBizTypeMappings
         * @return {?}
         */
            function (boBizTypeMappings) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/bos';
                return this.http.post(url, boBizTypeMappings);
            };
        // 获取后缀
        // 获取后缀
        /**
         * @param {?} metadataType
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.GetPostfix =
            // 获取后缀
            /**
             * @param {?} metadataType
             * @return {?}
             */
            function (metadataType) {
                this.GetMetadataTypeList().subscribe(( /**
                 * @param {?} typeList
                 * @return {?}
                 */function (typeList) {
                    typeList.forEach(( /**
                     * @param {?} type
                     * @return {?}
                     */function (type) {
                        if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                            return type.postfix;
                        }
                    }));
                }));
                return new Observable.Observable();
            };
        /**
         * @param {?} bizTypeId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.getMdBizTypeMappingType = /**
         * @param {?} bizTypeId
         * @return {?}
         */
            function (bizTypeId) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappingtype?bizTypeId=' + bizTypeId;
                return this.http.get(url);
            };
        /**
         * @param {?} bizTypeId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.getMdBizMappingListBizTypeId = /**
         * @param {?} bizTypeId
         * @return {?}
         */
            function (bizTypeId) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/md?bizTypeId=' + bizTypeId;
                return this.http.get(url);
            };
        /**
         * @param {?} bizTypeId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.getBoBizMappingListBizTypeId = /**
         * @param {?} bizTypeId
         * @return {?}
         */
            function (bizTypeId) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/bo?bizTypeId=' + bizTypeId;
                return this.http.get(url);
            };
        /**
         * @param {?} mdBizTypeMappingDto
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.save = /**
         * @param {?} mdBizTypeMappingDto
         * @return {?}
         */
            function (mdBizTypeMappingDto) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path;
                return this.http.post(url, mdBizTypeMappingDto);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} mdBizMapType
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.saveMappingType = /**
         * @param {?} bizTypeId
         * @param {?} mdBizMapType
         * @return {?}
         */
            function (bizTypeId, mdBizMapType) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappingtype?bizTypeId=' + bizTypeId + '&mdBizMapType=' + mdBizMapType;
                return this.http.post(url, null);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} boId
         * @return {?}
         */
        GSPMetadataRTService4BizType.prototype.deleteBoMdMappingData = /**
         * @param {?} bizTypeId
         * @param {?} boId
         * @return {?}
         */
            function (bizTypeId, boId) {
                /** @type {?} */
                var url = this.MetadataBizType_Base_Path + '/mappings/bo?bizTypeId=' + bizTypeId + '&boId=' + boId;
                return this.http.delete(url, null);
            };
        return GSPMetadataRTService4BizType;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatart-select4biztype/metadatainfo.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataInfoService = /** @class */ (function () {
        function MetadataInfoService(http$$1, gspMetadataService) {
            this.http = http$$1;
            this.gspMetadataService = gspMetadataService;
            // tslint:disable-next-line:variable-name
            this.BusinessObject_Base_Path = '/api/dev/main/v1.0/business-objects';
            this.metadatas = [];
        }
        /**
         * @param {?} metadata
         * @return {?}
         */
        MetadataInfoService.prototype.addMetadataRT = /**
         * @param {?} metadata
         * @return {?}
         */
            function (metadata) {
                this.metadatas.push(metadata);
            };
        /**
         * @return {?}
         */
        MetadataInfoService.prototype.clearMetadataRT = /**
         * @return {?}
         */
            function () {
                this.metadatas = [];
            };
        // 获取包源
        // 获取包源
        /**
         * @param {?} obId
         * @return {?}
         */
        MetadataInfoService.prototype.getBusinessObject =
            // 获取包源
            /**
             * @param {?} obId
             * @return {?}
             */
            function (obId) {
                /** @type {?} */
                var url = this.BusinessObject_Base_Path + '/' + obId;
                return this.http.get(url);
            };
        /**
         * @return {?}
         */
        MetadataInfoService.prototype.GetMetadataTypeList = /**
         * @return {?}
         */
            function () {
                return this.gspMetadataService.GetMetadataTypeList();
            };
        /**
         * @param {?} typeList
         * @return {?}
         */
        MetadataInfoService.prototype.GetMetadataRTList = /**
         * @param {?} typeList
         * @return {?}
         */
            function (typeList) {
                return this.gspMetadataService.GetAllOriginMdRTListWithType(typeList);
            };
        // 获根据Id取指定元数据
        // 获根据Id取指定元数据
        /**
         * @param {?} metadataID
         * @return {?}
         */
        MetadataInfoService.prototype.GetMetadataRT =
            // 获根据Id取指定元数据
            /**
             * @param {?} metadataID
             * @return {?}
             */
            function (metadataID) {
                return this.gspMetadataService.GetMetadataRT(metadataID);
            };
        MetadataInfoService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        MetadataInfoService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: GSPMetadataRTService4BizType }
            ];
        };
        return MetadataInfoService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatart-select4biztype/components/metadatainfo/metadatainfo.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataInfoComponent = /** @class */ (function () {
        function MetadataInfoComponent(metadataInfoService, notifyService, translate) {
            this.metadataInfoService = metadataInfoService;
            this.notifyService = notifyService;
            this.translate = translate;
            this.OK = this.transform('OK');
            this.cancel = this.transform('Cancel');
            this.selectedMetadata = new core.EventEmitter();
            this.closeModalEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        MetadataInfoComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} key
         * @return {?}
         */
        MetadataInfoComponent.prototype.transform = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.translate.instant(key);
            };
        /**
         * @return {?}
         */
        MetadataInfoComponent.prototype.LoadMetadata = /**
         * @return {?}
         */
            function () {
                if (this.metadataInfoService.metadatas == null || this.metadataInfoService.metadatas.length <= 0) {
                    this.notifyService.warning(this.transform('PleaseChooseData'));
                    return;
                }
                /** @type {?} */
                var Id = this.metadataInfoService.metadatas;
                this.selectedMetadata.emit(this.metadataInfoService.metadatas);
                this.hideModal();
                // 清空缓存
                this.metadataInfoService.clearMetadataRT();
            };
        /**
         * @return {?}
         */
        MetadataInfoComponent.prototype.hideModal = /**
         * @return {?}
         */
            function () {
                this.closeModalEmitter.emit();
            };
        /**
         * @param {?} bo
         * @return {?}
         */
        MetadataInfoComponent.prototype.onSelectedChange = /**
         * @param {?} bo
         * @return {?}
         */
            function (bo) {
                if (bo.id === 'gscloud') {
                    this.boId = '';
                }
                else {
                    this.boId = bo.id;
                }
            };
        MetadataInfoComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'app-metadatainfo',
                        template: "<!-- <div class=\"modal-body\">\r\n    <div class=\"templateBlock\">\r\n        <app-treeclassifier></app-treeclassifier>\r\n        <app-metadatainfolist></app-metadatainfolist>\r\n    </div>\r\n</div> -->\r\n<div class=\"farris-main-area flex-column farris-overflow-hidden\">\r\n  <div class=\"f-utils-fill bg-c-white position-relative f-utils-overflow-xhya d-flex\">\r\n      <div class=\"templateBlock flex-column flex-fill d-flex w-100\">\r\n        <kendo-splitter class=\"d-flex h-100 \" style=\"flex: 1 1 auto;\" orientation=\"horizontal\">\r\n          <kendo-splitter-pane class=\"d-flex \" [collapsible]=\"true\" size=\"250px\" style=\"height: auto\">\r\n            <app-bo-tree-panel (selectionChanged)=onSelectedChange($event)></app-bo-tree-panel>\r\n          </kendo-splitter-pane>\r\n          <kendo-splitter-pane class=\"d-flex\" style=\"height: auto\">\r\n            <app-metadatainfolist class=\"flex-fill\" [boId]=\"boId\"></app-metadatainfolist>\r\n          </kendo-splitter-pane>\r\n        </kendo-splitter>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"LoadMetadata()\">{{ 'OK' | translate }}</button>\r\n      <button type=\"button\" class=\"btn btn-default\" (click)=\"hideModal()\">{{ 'Cancel' | translate }}</button>\r\n  </div>\r\n</div>",
                        styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
                    }] }
        ];
        /** @nocollapse */
        MetadataInfoComponent.ctorParameters = function () {
            return [
                { type: MetadataInfoService },
                { type: uiNotify.NotifyService },
                { type: core$1.TranslateService }
            ];
        };
        MetadataInfoComponent.propDecorators = {
            selectedMetadata: [{ type: core.Output }],
            closeModalEmitter: [{ type: core.Output }]
        };
        return MetadataInfoComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/guid.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Guid = /** @class */ (function () {
        function Guid() {
        }
        /**
         * @return {?}
         */
        Guid.newGuid = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var replaceFunction = ( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) {
                    // tslint:disable-next-line:no-bitwise
                    /** @type {?} */
                    var r = Math.random() * 16 | 0;
                    /** @type {?} */
                    var v = c === 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, replaceFunction);
            };
        return Guid;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/gspbobiztypemapping.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspBoBizTypeMapping = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function GspBoBizTypeMapping() {
            this.id = Guid.newGuid();
        }
        return GspBoBizTypeMapping;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/gspmdbiztypemapping.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspMdBizTypeMapping = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function GspMdBizTypeMapping() {
            this.id = Guid.newGuid();
        }
        return GspMdBizTypeMapping;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/mdbiztypemappingdto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MdBizTypeMappingDto = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function MdBizTypeMappingDto() {
            this.boBizTypeMappings = [];
            this.mdBizTypeMappings = [];
        }
        return MdBizTypeMappingDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/gspmdbiztypemappingtype.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GspMdBizTypeMappingType = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function GspMdBizTypeMappingType() {
            this.id = Guid.newGuid();
        }
        return GspMdBizTypeMappingType;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatart-select4biztype/components/metadatainfolist/metadatainfolist.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataInfoList = /** @class */ (function () {
        function MetadataInfoList(metadataService /**/, translate) {
            this.metadataService = metadataService;
            this.translate = translate;
            this.allType = { text: this.transform('SelectAll'), value: 'All' };
            this.selectedType = this.allType;
            this.typeList = [
                this.allType
            ];
            this.typeListReadonly = false;
            this.searchText = '';
            this.searchTextForDup = '';
            this.Code = this.transform('Code');
            this.dataCache = [];
            this.columns = [];
            this.boId = 'all';
        }
        /**
         * @return {?}
         */
        MetadataInfoList.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.columns = [
                    { field: 'nameSpace', width: 250, title: this.transform('NameSpace') },
                    { field: 'code', width: 200, title: this.transform('Code') },
                    { field: 'name', width: 200, title: this.transform('Name') },
                    { field: 'type', width: 150, title: this.transform('Type') }
                ];
                // 获取所有的元数据类型列表
                this.metadataService.GetMetadataTypeList().subscribe(( /**
                 * @param {?} typeList
                 * @return {?}
                 */function (typeList) {
                    if (typeList) {
                        typeList.forEach(( /**
                         * @param {?} type
                         * @return {?}
                         */function (type) {
                            _this.typeList.push({ text: type.typeName, value: type.typeCode });
                        }));
                    }
                }));
                // 初始化数据
                this.getData();
            };
        /**
         * @return {?}
         */
        MetadataInfoList.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.data = [];
            };
        // tslint:disable-next-line:use-life-cycle-interface
        // tslint:disable-next-line:use-life-cycle-interface
        /**
         * @param {?} changes
         * @return {?}
         */
        MetadataInfoList.prototype.ngOnChanges =
            // tslint:disable-next-line:use-life-cycle-interface
            /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                if (this.searchText) {
                    this.onSearchTextChanged();
                    return;
                }
                for (var key in changes) {
                    if (changes.hasOwnProperty(key)) {
                        /** @type {?} */
                        var changedProp = changes[key];
                        /** @type {?} */
                        var currentValue = changedProp.currentValue;
                        this.boId = currentValue;
                        if (this.dataCache) {
                            /** @type {?} */
                            var dtos = [];
                            dtos = this.filterByBoId(this.dataCache);
                            dtos = this.filterByType(dtos);
                            dtos = this.filterBySearchText(dtos, this.searchText.trim());
                            this.data = dtos;
                        }
                    }
                }
            };
        /**
         * @param {?} key
         * @return {?}
         */
        MetadataInfoList.prototype.transform = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.translate.instant(key);
            };
        /**
         * @return {?}
         */
        MetadataInfoList.prototype.onSearchTextChanged = /**
         * @return {?}
         */
            function () {
                if (!this.searchText) {
                    this.searchText = '';
                }
                /** @type {?} */
                var searchTextTrim = this.searchText.trim();
                console.log(this.searchText);
                this.filterData(searchTextTrim);
            };
        /**
         * @param {?} mdSeleted
         * @return {?}
         */
        MetadataInfoList.prototype.typeSelectedChanged = /**
         * @param {?} mdSeleted
         * @return {?}
         */
            function (mdSeleted) {
                if (!mdSeleted) {
                    mdSeleted = this.selectedType;
                }
                else {
                    this.selectedType = mdSeleted;
                }
                if (this.searchText) {
                    this.onSearchTextChanged();
                    return;
                }
                if (mdSeleted) {
                    /** @type {?} */
                    var dtos = [];
                    dtos = this.filterByBoId(this.dataCache);
                    dtos = this.filterByType(dtos);
                    this.data = dtos;
                }
            };
        /**
         * @return {?}
         */
        MetadataInfoList.prototype.goSearch = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @private
         * @return {?}
         */
        MetadataInfoList.prototype.getData = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var metadatadto = [];
                this.metadataService.GetMetadataRTList('').subscribe(( /**
                 * @param {?} metadataList
                 * @return {?}
                 */function (metadataList) {
                    if (metadataList) {
                        _this.metadataService.GetMetadataTypeList().subscribe(( /**
                         * @param {?} typeList
                         * @return {?}
                         */function (typeList) {
                            if (typeList) {
                                metadataList.forEach(( /**
                                 * @param {?} item
                                 * @return {?}
                                 */function (item) {
                                    /** @type {?} */
                                    var dto = typeList.find(( /**
                                     * @param {?} type
                                     * @return {?}
                                     */function (type) { return type.typeCode === item.metadata.type; }));
                                    if (dto) {
                                        item.metadata.type = dto.typeName;
                                    }
                                    metadatadto.push(item.metadata);
                                }));
                            }
                            else {
                                metadataList.forEach(( /**
                                 * @param {?} item
                                 * @return {?}
                                 */function (item) {
                                    metadatadto.push(item.metadata);
                                }));
                            }
                            _this.data = metadatadto;
                            _this.dataCache = metadatadto;
                        }));
                    }
                }));
            };
        /**
         * @private
         * @param {?} filter
         * @return {?}
         */
        MetadataInfoList.prototype.filterData = /**
         * @private
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                /** @type {?} */
                var dtos = [];
                dtos = this.filterByBoId(this.dataCache);
                dtos = this.filterByType(dtos);
                dtos = this.filterBySearchText(dtos, filter);
                this.data = dtos;
            };
        /**
         * @private
         * @param {?} datas
         * @return {?}
         */
        MetadataInfoList.prototype.filterByType = /**
         * @private
         * @param {?} datas
         * @return {?}
         */
            function (datas) {
                var _this = this;
                /** @type {?} */
                var dtos = [];
                if (this.selectedType.value === 'All') {
                    dtos = datas;
                }
                else {
                    datas.forEach(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.data;
                        // tslint:disable-next-line:max-line-length
                        if (data.type === _this.selectedType.text) {
                            dtos.push(data);
                        }
                    }));
                }
                return dtos;
            };
        /**
         * @private
         * @param {?} datas
         * @return {?}
         */
        MetadataInfoList.prototype.filterByBoId = /**
         * @private
         * @param {?} datas
         * @return {?}
         */
            function (datas) {
                var _this = this;
                /** @type {?} */
                var dtos = [];
                if (!this.boId) {
                    dtos = datas;
                }
                else {
                    datas.forEach(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        // tslint:disable-next-line:max-line-length
                        if (data.bizobjectID === _this.boId) {
                            dtos.push(data);
                        }
                    }));
                }
                return dtos;
            };
        /**
         * @private
         * @param {?} datas
         * @param {?} text
         * @return {?}
         */
        MetadataInfoList.prototype.filterBySearchText = /**
         * @private
         * @param {?} datas
         * @param {?} text
         * @return {?}
         */
            function (datas, text) {
                /** @type {?} */
                var dtos = [];
                if (!text) {
                    dtos = datas;
                }
                else {
                    datas.forEach(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        if (data.code.toLowerCase().indexOf(text.toLowerCase()) > -1 || data.name.toLowerCase().indexOf(text.toLowerCase()) > -1) {
                            dtos.push(data);
                        }
                    }));
                }
                return dtos;
            };
        // 选中元数据后的事件处理
        // 选中元数据后的事件处理
        /**
         * @param {?} event
         * @return {?}
         */
        MetadataInfoList.prototype.onSelectionChange =
            // 选中元数据后的事件处理
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.selectedRows.length > 0) {
                    this.metadataService.clearMetadataRT();
                    /** @type {?} */
                    var metadata = {
                        ID: event.selectedRows[0].dataItem.id,
                        RelativePath: event.selectedRows[0].dataItem.relativePath,
                        FileName: event.selectedRows[0].dataItem.fileName
                    };
                    this.metadataService.addMetadataRT(metadata);
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        MetadataInfoList.prototype.onPageSizeChanged = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                console.log('PageSize Changed:', $event);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        MetadataInfoList.prototype.onPageChanged = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                console.log('PageNumber Changed:', $event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        MetadataInfoList.prototype.checkedChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (event != null && event.length > 0) {
                    this.metadataService.clearMetadataRT();
                    event.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        /** @type {?} */
                        var metadata = {
                            ID: element.data.id,
                            Name: element.data.name,
                            Code: element.data.code,
                            Type: element.data.type,
                            NameSpace: element.data.nameSpace
                        };
                        _this.metadataService.addMetadataRT(metadata);
                    }));
                }
            };
        MetadataInfoList.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'app-metadatainfolist',
                        template: "<div class=\"templateInfo d-flex flex-column h-100\">\r\n  <div class=\"templateSelectorHeader m-2 flex-shrink-0\">\r\n    <div class=\"searchArea d-flex flex-row\">\r\n\r\n      <input id=\"url\" class=\"textInput flex-fill\" type=\"text\" size=\"30\" kendoTextBox [(ngModel)]=\"this.searchText\"\r\n        #url=\"ngModel\" (ngModelChange)=\"onSearchTextChanged()\">\r\n      <button type=\"button\" class=\"btn btn-light btn-sm px-3 mx-2\"\r\n          (click)=\"goSearch()\">{{ 'Search' | translate }}</button>\r\n\r\n      <kendo-combobox [readonly]=\"this.typeListReadonly\" [data]=\"typeList\" [(ngModel)]=\"selectedType\"\r\n        [textField]=\"'text'\" [valueField]=\"'value'\"  (selectionChange)=\"typeSelectedChanged($event)\">\r\n      </kendo-combobox>\r\n    </div>\r\n   </div>\r\n\r\n    <div class=\"templateSelector farris-overflow-y-auto flex-fill f-utils-fill-flex-column\">\r\n      <farris-datagrid class=\"f-utils-fill\"\r\n      [columns]=\"columns\" [data]=\"data\" [showBorder]=\"true\"\r\n      [showLineNumber]=\"true\" [fit]=\"true\"\r\n      [striped]=\"true\"\r\n      [pagerOnServer]=\"false\"\r\n      [pagination]=\"true\" [pageSize]=\"10\" [showPageList]=\"true\"\r\n      (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\r\n      [fitColumns]=\"true\"\r\n      [autoFitColumns]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [showAllCheckbox]=\"true\"\r\n      [selectOnCheck]=\"true\"\r\n      [checkOnSelect]=\"true\"\r\n      [onlySelectSelf]=\"true\"\r\n      [showCheckbox]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [keepSelect]=\"true\"\r\n      (checkedChange) = \"checkedChange($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        MetadataInfoList.ctorParameters = function () {
            return [
                { type: MetadataInfoService },
                { type: core$1.TranslateService }
            ];
        };
        MetadataInfoList.propDecorators = {
            boId: [{ type: core.Input }]
        };
        return MetadataInfoList;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/models/TranslateResolveService.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var lang = {
        "zh-CHS": {
            "key": "中文文本"
        }
    };
    var TranslateResolveService = /** @class */ (function () {
        function TranslateResolveService(translate) {
            this.translate = translate;
            translate.defaultLang = 'zh-CHS';
            translate.setTranslation('zh-CHS', lang['zh-CHS']);
        }
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        TranslateResolveService.prototype.resolve = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                /** @type {?} */
                var lang = localStorage.getItem('languageCode');
                if (this.translate.defaultLang === lang) {
                    return this.translate.getTranslation(lang);
                }
                else {
                    this.translate.defaultLang = lang;
                    return this.translate.getTranslation(lang);
                }
            };
        TranslateResolveService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TranslateResolveService.ctorParameters = function () {
            return [
                { type: core$1.TranslateService }
            ];
        };
        return TranslateResolveService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadata-rtservice4biztype.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} http
     * @return {?}
     */
    function createTranslateLoader(http$$1) {
        return new httpLoader.TranslateHttpLoader(http$$1, "/platform/runtime/common/web/@gsp-lcm/metadatart-selector4biztype/i18n/", ".json");
    }
    var ɵ0 = (createTranslateLoader), ɵ1 = localStorage.getItem('languageCode') || 'zh-CHS';
    var GSPMetadataRTServiceModule4BizType = /** @class */ (function () {
        function GSPMetadataRTServiceModule4BizType() {
        }
        GSPMetadataRTServiceModule4BizType.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            uiForms.FarrisFormsModule,
                            http.HttpClientModule,
                            uiNotify.NotifyModule.forRoot(),
                            common.CommonModule,
                            forms.FormsModule,
                            kendoAngularLayout.LayoutModule,
                            kendoAngularDropdowns.DropDownsModule,
                            boTree.BOTreePanelPackageModule,
                            uiSplitter.SplitterModule,
                            uiSection.FarrisSectionModule,
                            boRtService.BORtServiceModule,
                            uiDatagrid.DatagridModule,
                            core$1.TranslateModule.forRoot({
                                loader: {
                                    provide: core$1.TranslateLoader,
                                    useFactory: ɵ0,
                                    deps: [http.HttpClient]
                                }
                            }),
                        ],
                        declarations: [MetadataInfoComponent, MetadataInfoList],
                        exports: [MetadataInfoComponent],
                        providers: [
                            cafCommon.HttpService,
                            GSPMetadataRTService4BizType,
                            MetadataInfoService,
                            boRtService.BusinessObjectRtService,
                            TranslateResolveService,
                            GspBoBizTypeMapping,
                            GspMdBizTypeMapping,
                            MdBizTypeMappingDto,
                            GspMdBizTypeMappingType,
                            { provide: core.LOCALE_ID, useValue: ɵ1 }
                        ],
                        entryComponents: [MetadataInfoComponent]
                    },] }
        ];
        return GSPMetadataRTServiceModule4BizType;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatadto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataDto = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function MetadataDto(id, nameSpace, code, name, fileName, type, bizobjectID, relativePath, extendProperty, content) {
            this.id = id;
            this.nameSpace = nameSpace;
            this.code = code;
            this.name = name;
            this.fileName = fileName;
            this.type = type;
            this.bizobjectID = bizobjectID;
            this.relativePath = relativePath;
            this.extendProperty = extendProperty;
            this.content = content;
        }
        return MetadataDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadata4refdto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Metadata4RefDto = /** @class */ (function () {
        function Metadata4RefDto() {
        }
        return Metadata4RefDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatapackagedto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataPackageDto = /** @class */ (function () {
        function MetadataPackageDto(packageName, packageVersion, packageLocation, projectPath) {
            this.packageName = packageName;
            this.projectPath = projectPath;
            this.packageVersion = packageVersion;
            this.packageLocation = packageLocation;
        }
        return MetadataPackageDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadataprojectdto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataProjectDto = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function MetadataProjectDto(packageName, projectPath, projectName, projectNameSpace, depPackageName, depPackageVersion, depPackageLocation) {
            this.packageName = packageName;
            this.projectName = projectName;
            this.projectPath = projectPath;
            this.projectNameSpace = projectNameSpace;
            this.depPackageName = depPackageName;
            this.depPackageVersion = depPackageVersion;
            this.depPackageLocation = depPackageLocation;
        }
        return MetadataProjectDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: gsp-lcm-metadatart-selector4biztype.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.MetadataInfoComponent = MetadataInfoComponent;
    exports.GSPMetadataRTServiceModule4BizType = GSPMetadataRTServiceModule4BizType;
    exports.GSPMetadataRTService4BizType = GSPMetadataRTService4BizType;
    exports.MetadataDto = MetadataDto;
    exports.Metadata4RefDto = Metadata4RefDto;
    exports.MetadataPackageDto = MetadataPackageDto;
    exports.MetadataProjectDto = MetadataProjectDto;
    exports.GspBoBizTypeMapping = GspBoBizTypeMapping;
    exports.GspMdBizTypeMapping = GspMdBizTypeMapping;
    exports.MdBizTypeMappingDto = MdBizTypeMappingDto;
    exports.MetadataInfoService = MetadataInfoService;
    exports.GspMdBizTypeMappingType = GspMdBizTypeMappingType;
    exports.Guid = Guid;
    exports.ɵa = createTranslateLoader;
    exports.ɵb = MetadataInfoList;
    exports.ɵc = TranslateResolveService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-lcm-metadatart-selector4biztype.umd.js.map