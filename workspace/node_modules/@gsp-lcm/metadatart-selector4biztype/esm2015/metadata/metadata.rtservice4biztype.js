/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata.rtservice4biztype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs/Observable';
export class GSPMetadataRTService4BizType {
    // tslint:disable-next-line:variable-name
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        // 环境变量
        // tslint:disable-next-line:variable-name
        // tslint:disable-next-line:variable-name
        this.MetadataRT_Base_Path = '/api/runtime/lcm/v1.0/rt-metadatas';
        // tslint:disable-next-line:variable-name
        this.MetadataBizType_Base_Path = '/api/runtime/lcm/v1.0/metadata-biztypes';
        this.MetadataBizType_Mapping_Path = '/api/runtime/lcm/v1.0/metadata-biztypes/mappings';
    }
    /**
     * 元数据运行时服务
     * @param {?} metadataID
     * @return {?}
     */
    GetMetadataRT(metadataID) {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/' + metadataID;
        return this.http.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTList(typeList) {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '?metadataTypes=' + typeList;
        return this.http.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetPackagedMetadataRTListWithType(typeList) {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/packaged?metadataTypes=' + typeList;
        return this.http.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetAllOriginMdRTListWithType(typeList) {
        /** @type {?} */
        var t = this.MetadataRT_Base_Path + "/origin?metadataTypes=" + typeList;
        return this.http.get(t);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    getMetadataListByBizTypeId(bizTypeId, metadataTypes) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '?bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
        return this.http.get(url);
    }
    /**
     * @param {?} metadataId
     * @param {?} certId
     * @return {?}
     */
    getMappingListByMetadataId(metadataId, certId) {
        /** @type {?} */
        const url = this.MetadataBizType_Mapping_Path + '?metadataId=' + metadataId + '&certId=' + certId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataId
     * @return {?}
     */
    isMappingExist(bizTypeId, metadataId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/validation/md?bizTypeId=' + bizTypeId + '&mdId=' + metadataId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} boId
     * @return {?}
     */
    isBoBizTypeMappingExist(bizTypeId, boId) {
        /** @type {?} */
        var a = this.MetadataBizType_Base_Path + "/validation/bo?bizTypeId=" + bizTypeId + "&boId=" + boId;
        return this.http.get(a);
    }
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    GetMetadataTypeList() {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/typeList';
        return this.http.get(url);
    }
    /**
     * @return {?}
     */
    GetPackagedMetadataRTList() {
        /** @type {?} */
        const url = this.MetadataRT_Base_Path + '/packaged';
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataId
     * @return {?}
     */
    deleteMappingData(bizTypeId, metadataId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/md?bizTypeId=' + bizTypeId + '&mdId=' + metadataId;
        return this.http.delete(url, null);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataIds
     * @return {?}
     */
    deleteMdMappingDataList(bizTypeId, metadataIds) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/mds?bizTypeId=' + bizTypeId + '&mdIds=' + metadataIds;
        return this.http.delete(url, null);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} boIds
     * @return {?}
     */
    deleteBoMappingDataList(bizTypeId, boIds) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bos?bizTypeId=' + bizTypeId + '&boIds=' + boIds;
        return this.http.delete(url, null);
    }
    /**
     * @param {?} mdBizTypeMapping
     * @return {?}
     */
    saveMappingData(mdBizTypeMapping) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/md';
        return this.http.post(url, mdBizTypeMapping);
    }
    /**
     * @param {?} mdBizTypeMappingings
     * @return {?}
     */
    saveMdMappingList(mdBizTypeMappingings) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/mds';
        return this.http.post(url, mdBizTypeMappingings);
    }
    /**
     * @param {?} boBizTypeMaaing
     * @return {?}
     */
    saveBoBizTypeMapping(boBizTypeMaaing) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bo';
        return this.http.post(url, boBizTypeMaaing);
    }
    /**
     * @param {?} boBizTypeMappings
     * @return {?}
     */
    saveBoBizTypeMappingList(boBizTypeMappings) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bos';
        return this.http.post(url, boBizTypeMappings);
    }
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    GetPostfix(metadataType) {
        this.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        typeList => {
            typeList.forEach((/**
             * @param {?} type
             * @return {?}
             */
            type => {
                if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                    return type.postfix;
                }
            }));
        }));
        return new Observable();
    }
    /**
     * @param {?} bizTypeId
     * @return {?}
     */
    getMdBizTypeMappingType(bizTypeId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappingtype?bizTypeId=' + bizTypeId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @return {?}
     */
    getMdBizMappingListBizTypeId(bizTypeId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/md?bizTypeId=' + bizTypeId;
        return this.http.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @return {?}
     */
    getBoBizMappingListBizTypeId(bizTypeId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bo?bizTypeId=' + bizTypeId;
        return this.http.get(url);
    }
    /**
     * @param {?} mdBizTypeMappingDto
     * @return {?}
     */
    save(mdBizTypeMappingDto) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path;
        return this.http.post(url, mdBizTypeMappingDto);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} mdBizMapType
     * @return {?}
     */
    saveMappingType(bizTypeId, mdBizMapType) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappingtype?bizTypeId=' + bizTypeId + '&mdBizMapType=' + mdBizMapType;
        return this.http.post(url, null);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} boId
     * @return {?}
     */
    deleteBoMdMappingData(bizTypeId, boId) {
        /** @type {?} */
        const url = this.MetadataBizType_Base_Path + '/mappings/bo?bizTypeId=' + bizTypeId + '&boId=' + boId;
        return this.http.delete(url, null);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService4BizType.prototype.MetadataRT_Base_Path;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService4BizType.prototype.MetadataBizType_Base_Path;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService4BizType.prototype.MetadataBizType_Mapping_Path;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService4BizType.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,