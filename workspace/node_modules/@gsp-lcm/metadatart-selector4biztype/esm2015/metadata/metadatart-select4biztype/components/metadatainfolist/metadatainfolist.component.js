/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select4biztype/components/metadatainfolist/metadatainfolist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { MetadataInfoService } from '../../metadatainfo.service';
import { TranslateService } from '@ngx-translate/core';
// tslint:disable-next-line:component-class-suffix
export class MetadataInfoList {
    /**
     * @param {?} metadataService
     * @param {?} translate
     */
    constructor(metadataService /**/, translate) {
        this.metadataService = metadataService;
        this.translate = translate;
        this.allType = { text: this.transform('SelectAll'), value: 'All' };
        this.selectedType = this.allType;
        this.typeList = [
            this.allType
        ];
        this.typeListReadonly = false;
        this.searchText = '';
        this.searchTextForDup = '';
        this.Code = this.transform('Code');
        this.dataCache = [];
        this.columns = [];
        this.boId = 'all';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'nameSpace', width: 250, title: this.transform('NameSpace') },
            { field: 'code', width: 200, title: this.transform('Code') },
            { field: 'name', width: 200, title: this.transform('Name') },
            { field: 'type', width: 150, title: this.transform('Type') }
        ];
        // 获取所有的元数据类型列表
        this.metadataService.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        typeList => {
            if (typeList) {
                typeList.forEach((/**
                 * @param {?} type
                 * @return {?}
                 */
                type => {
                    this.typeList.push({ text: type.typeName, value: type.typeCode });
                }));
            }
        }));
        // 初始化数据
        this.getData();
    }
    /**
     * @return {?}
     */
    clear() {
        this.data = [];
    }
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.searchText) {
            this.onSearchTextChanged();
            return;
        }
        for (const key in changes) {
            if (changes.hasOwnProperty(key)) {
                /** @type {?} */
                const changedProp = changes[key];
                /** @type {?} */
                const currentValue = changedProp.currentValue;
                this.boId = currentValue;
                if (this.dataCache) {
                    /** @type {?} */
                    let dtos = [];
                    dtos = this.filterByBoId(this.dataCache);
                    dtos = this.filterByType(dtos);
                    dtos = this.filterBySearchText(dtos, this.searchText.trim());
                    this.data = dtos;
                }
            }
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    transform(key) {
        return this.translate.instant(key);
    }
    /**
     * @return {?}
     */
    onSearchTextChanged() {
        if (!this.searchText) {
            this.searchText = '';
        }
        /** @type {?} */
        const searchTextTrim = this.searchText.trim();
        console.log(this.searchText);
        this.filterData(searchTextTrim);
    }
    /**
     * @param {?} mdSeleted
     * @return {?}
     */
    typeSelectedChanged(mdSeleted) {
        if (!mdSeleted) {
            mdSeleted = this.selectedType;
        }
        else {
            this.selectedType = mdSeleted;
        }
        if (this.searchText) {
            this.onSearchTextChanged();
            return;
        }
        if (mdSeleted) {
            /** @type {?} */
            let dtos = [];
            dtos = this.filterByBoId(this.dataCache);
            dtos = this.filterByType(dtos);
            this.data = dtos;
        }
    }
    /**
     * @return {?}
     */
    goSearch() {
    }
    /**
     * @private
     * @return {?}
     */
    getData() {
        /** @type {?} */
        const metadatadto = [];
        this.metadataService.GetMetadataRTList('').subscribe((/**
         * @param {?} metadataList
         * @return {?}
         */
        metadataList => {
            if (metadataList) {
                this.metadataService.GetMetadataTypeList().subscribe((/**
                 * @param {?} typeList
                 * @return {?}
                 */
                typeList => {
                    if (typeList) {
                        metadataList.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            /** @type {?} */
                            const dto = typeList.find((/**
                             * @param {?} type
                             * @return {?}
                             */
                            type => type.typeCode === item.metadata.type));
                            if (dto) {
                                item.metadata.type = dto.typeName;
                            }
                            metadatadto.push(item.metadata);
                        }));
                    }
                    else {
                        metadataList.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            metadatadto.push(item.metadata);
                        }));
                    }
                    this.data = metadatadto;
                    this.dataCache = metadatadto;
                }));
            }
        }));
    }
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    filterData(filter) {
        /** @type {?} */
        let dtos = [];
        dtos = this.filterByBoId(this.dataCache);
        dtos = this.filterByType(dtos);
        dtos = this.filterBySearchText(dtos, filter);
        this.data = dtos;
    }
    /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    filterByType(datas) {
        /** @type {?} */
        let dtos = [];
        if (this.selectedType.value === 'All') {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.data;
                // tslint:disable-next-line:max-line-length
                if (data.type === this.selectedType.text) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    }
    /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    filterByBoId(datas) {
        /** @type {?} */
        let dtos = [];
        if (!this.boId) {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                // tslint:disable-next-line:max-line-length
                if (data.bizobjectID === this.boId) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    }
    /**
     * @private
     * @param {?} datas
     * @param {?} text
     * @return {?}
     */
    filterBySearchText(datas, text) {
        /** @type {?} */
        let dtos = [];
        if (!text) {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data.code.toLowerCase().indexOf(text.toLowerCase()) > -1 || data.name.toLowerCase().indexOf(text.toLowerCase()) > -1) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    }
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChange(event) {
        if (event.selectedRows.length > 0) {
            this.metadataService.clearMetadataRT();
            /** @type {?} */
            const metadata = {
                ID: event.selectedRows[0].dataItem.id,
                RelativePath: event.selectedRows[0].dataItem.relativePath,
                FileName: event.selectedRows[0].dataItem.fileName
            };
            this.metadataService.addMetadataRT(metadata);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageSizeChanged($event) {
        console.log('PageSize Changed:', $event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageChanged($event) {
        console.log('PageNumber Changed:', $event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    checkedChange(event) {
        if (event != null && event.length > 0) {
            this.metadataService.clearMetadataRT();
            event.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                const metadata = {
                    ID: element.data.id,
                    Name: element.data.name,
                    Code: element.data.code,
                    Type: element.data.type,
                    NameSpace: element.data.nameSpace
                };
                this.metadataService.addMetadataRT(metadata);
            }));
        }
    }
}
MetadataInfoList.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatainfolist',
                template: "<div class=\"templateInfo d-flex flex-column h-100\">\r\n  <div class=\"templateSelectorHeader m-2 flex-shrink-0\">\r\n    <div class=\"searchArea d-flex flex-row\">\r\n\r\n      <input id=\"url\" class=\"textInput flex-fill\" type=\"text\" size=\"30\" kendoTextBox [(ngModel)]=\"this.searchText\"\r\n        #url=\"ngModel\" (ngModelChange)=\"onSearchTextChanged()\">\r\n      <button type=\"button\" class=\"btn btn-light btn-sm px-3 mx-2\"\r\n          (click)=\"goSearch()\">{{ 'Search' | translate }}</button>\r\n\r\n      <kendo-combobox [readonly]=\"this.typeListReadonly\" [data]=\"typeList\" [(ngModel)]=\"selectedType\"\r\n        [textField]=\"'text'\" [valueField]=\"'value'\"  (selectionChange)=\"typeSelectedChanged($event)\">\r\n      </kendo-combobox>\r\n    </div>\r\n   </div>\r\n\r\n    <div class=\"templateSelector farris-overflow-y-auto flex-fill f-utils-fill-flex-column\">\r\n      <farris-datagrid class=\"f-utils-fill\"\r\n      [columns]=\"columns\" [data]=\"data\" [showBorder]=\"true\"\r\n      [showLineNumber]=\"true\" [fit]=\"true\"\r\n      [striped]=\"true\"\r\n      [pagerOnServer]=\"false\"\r\n      [pagination]=\"true\" [pageSize]=\"10\" [showPageList]=\"true\"\r\n      (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\r\n      [fitColumns]=\"true\"\r\n      [autoFitColumns]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [showAllCheckbox]=\"true\"\r\n      [selectOnCheck]=\"true\"\r\n      [checkOnSelect]=\"true\"\r\n      [onlySelectSelf]=\"true\"\r\n      [showCheckbox]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [keepSelect]=\"true\"\r\n      (checkedChange) = \"checkedChange($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
MetadataInfoList.ctorParameters = () => [
    { type: MetadataInfoService },
    { type: TranslateService }
];
MetadataInfoList.propDecorators = {
    boId: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MetadataInfoList.prototype.boId;
    /** @type {?} */
    MetadataInfoList.prototype.allType;
    /** @type {?} */
    MetadataInfoList.prototype.selectedType;
    /** @type {?} */
    MetadataInfoList.prototype.typeList;
    /** @type {?} */
    MetadataInfoList.prototype.typeListReadonly;
    /** @type {?} */
    MetadataInfoList.prototype.searchText;
    /** @type {?} */
    MetadataInfoList.prototype.searchTextForDup;
    /** @type {?} */
    MetadataInfoList.prototype.Code;
    /** @type {?} */
    MetadataInfoList.prototype.data;
    /** @type {?} */
    MetadataInfoList.prototype.dataCache;
    /** @type {?} */
    MetadataInfoList.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    MetadataInfoList.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    MetadataInfoList.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,