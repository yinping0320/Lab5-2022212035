/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select4biztype/metadatainfo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { GSPMetadataRTService4BizType } from '../metadata.rtservice4biztype';
export class MetadataInfoService {
    /**
     * @param {?} http
     * @param {?} gspMetadataService
     */
    constructor(http, gspMetadataService) {
        this.http = http;
        this.gspMetadataService = gspMetadataService;
        // tslint:disable-next-line:variable-name
        this.BusinessObject_Base_Path = '/api/dev/main/v1.0/business-objects';
        this.metadatas = [];
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    addMetadataRT(metadata) {
        this.metadatas.push(metadata);
    }
    /**
     * @return {?}
     */
    clearMetadataRT() {
        this.metadatas = [];
    }
    // 获取包源
    /**
     * @param {?} obId
     * @return {?}
     */
    getBusinessObject(obId) {
        /** @type {?} */
        const url = this.BusinessObject_Base_Path + '/' + obId;
        return this.http.get(url);
    }
    /**
     * @return {?}
     */
    GetMetadataTypeList() {
        return this.gspMetadataService.GetMetadataTypeList();
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTList(typeList) {
        return this.gspMetadataService.GetAllOriginMdRTListWithType(typeList);
    }
    // 获根据Id取指定元数据
    /**
     * @param {?} metadataID
     * @return {?}
     */
    GetMetadataRT(metadataID) {
        return this.gspMetadataService.GetMetadataRT(metadataID);
    }
}
MetadataInfoService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MetadataInfoService.ctorParameters = () => [
    { type: HttpClient },
    { type: GSPMetadataRTService4BizType }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    MetadataInfoService.prototype.BusinessObject_Base_Path;
    /** @type {?} */
    MetadataInfoService.prototype.metadatas;
    /**
     * @type {?}
     * @private
     */
    MetadataInfoService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    MetadataInfoService.prototype.gspMetadataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGFpbmZvLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWxjbS9tZXRhZGF0YXJ0LXNlbGVjdG9yNGJpenR5cGUvIiwic291cmNlcyI6WyJtZXRhZGF0YS9tZXRhZGF0YXJ0LXNlbGVjdDRiaXp0eXBlL21ldGFkYXRhaW5mby5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHN0UsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7SUFHOUIsWUFBb0IsSUFBZ0IsRUFBVSxrQkFBZ0Q7UUFBMUUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBOEI7O1FBRHRGLDZCQUF3QixHQUFHLHFDQUFxQyxDQUFDO1FBR3pFLGNBQVMsR0FBRyxFQUFFLENBQUM7SUFGbUYsQ0FBQzs7Ozs7SUFHbkcsYUFBYSxDQUFDLFFBQVE7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7OztJQUNELGVBQWU7UUFDYixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7Ozs7SUFHRCxpQkFBaUIsQ0FBQyxJQUFZOztjQUN0QixHQUFHLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEdBQUcsR0FBRyxJQUFJO1FBQ3RELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVELG1CQUFtQjtRQUNqQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ3ZELENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsUUFBZ0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsNEJBQTRCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEUsQ0FBQzs7Ozs7O0lBR0QsYUFBYSxDQUFDLFVBQWtCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7WUEvQkYsVUFBVTs7OztZQUpGLFVBQVU7WUFFViw0QkFBNEI7Ozs7Ozs7SUFLbkMsdURBQXlFOztJQUd6RSx3Q0FBZTs7Ozs7SUFGSCxtQ0FBd0I7Ozs7O0lBQUUsaURBQXdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEdTUE1ldGFkYXRhUlRTZXJ2aWNlNEJpelR5cGUgfSBmcm9tICcuLi9tZXRhZGF0YS5ydHNlcnZpY2U0Yml6dHlwZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNZXRhZGF0YUluZm9TZXJ2aWNlIHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gIHByaXZhdGUgQnVzaW5lc3NPYmplY3RfQmFzZV9QYXRoID0gJy9hcGkvZGV2L21haW4vdjEuMC9idXNpbmVzcy1vYmplY3RzJztcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgZ3NwTWV0YWRhdGFTZXJ2aWNlOiBHU1BNZXRhZGF0YVJUU2VydmljZTRCaXpUeXBlKSB7IH1cclxuXHJcbiAgbWV0YWRhdGFzID0gW107XHJcbiAgYWRkTWV0YWRhdGFSVChtZXRhZGF0YSkge1xyXG4gICAgdGhpcy5tZXRhZGF0YXMucHVzaChtZXRhZGF0YSk7XHJcbiAgfVxyXG4gIGNsZWFyTWV0YWRhdGFSVCgpIHtcclxuICAgIHRoaXMubWV0YWRhdGFzID0gW107XHJcbiAgfVxyXG5cclxuICAvLyDojrflj5bljIXmupBcclxuICBnZXRCdXNpbmVzc09iamVjdChvYklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgdXJsID0gdGhpcy5CdXNpbmVzc09iamVjdF9CYXNlX1BhdGggKyAnLycgKyBvYklkO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICB9XHJcblxyXG4gIEdldE1ldGFkYXRhVHlwZUxpc3QoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmdzcE1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YVR5cGVMaXN0KCk7XHJcbiAgfVxyXG5cclxuICBHZXRNZXRhZGF0YVJUTGlzdCh0eXBlTGlzdDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmdzcE1ldGFkYXRhU2VydmljZS5HZXRBbGxPcmlnaW5NZFJUTGlzdFdpdGhUeXBlKHR5cGVMaXN0KTtcclxuICB9XHJcblxyXG4gIC8vIOiOt+agueaNrklk5Y+W5oyH5a6a5YWD5pWw5o2uXHJcbiAgR2V0TWV0YWRhdGFSVChtZXRhZGF0YUlEOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ3NwTWV0YWRhdGFTZXJ2aWNlLkdldE1ldGFkYXRhUlQobWV0YWRhdGFJRCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==