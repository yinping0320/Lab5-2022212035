/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-rtservice4biztype.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, LOCALE_ID } from '@angular/core';
import { GSPMetadataRTService4BizType } from './metadata.rtservice4biztype';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NotifyModule } from '@farris/ui-notify';
import { GspBoBizTypeMapping } from './gspbobiztypemapping';
import { GspMdBizTypeMapping } from './gspmdbiztypemapping';
import { MdBizTypeMappingDto } from './mdbiztypemappingdto';
import { GspMdBizTypeMappingType } from './gspmdbiztypemappingtype';
import { MetadataInfoComponent } from './metadatart-select4biztype/components/metadatainfo/metadatainfo.component';
import { CommonModule } from '@angular/common';
import { MetadataInfoList } from './metadatart-select4biztype/components/metadatainfolist/metadatainfolist.component';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { FormsModule } from '@angular/forms';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { BOTreePanelPackageModule } from '@gsp-lcm/bo-tree';
import { BORtServiceModule, BusinessObjectRtService } from '@gsp-lcm/bo-rt-service';
import { SplitterModule } from '@farris/ui-splitter';
import { FarrisSectionModule } from '@farris/ui-section';
import { TranslateModule, TranslateLoader } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { TranslateResolveService } from './models/TranslateResolveService';
import { MetadataInfoService } from './metadatart-select4biztype/metadatainfo.service';
import { HttpService } from '@ecp-caf/caf-common';
import { DatagridModule } from '@farris/ui-datagrid';
import { FarrisFormsModule } from '@farris/ui-forms';
/**
 * @param {?} http
 * @return {?}
 */
export function createTranslateLoader(http) {
    return new TranslateHttpLoader(http, "/platform/runtime/common/web/@gsp-lcm/metadatart-selector4biztype/i18n/", ".json");
}
var ɵ0 = (createTranslateLoader), ɵ1 = localStorage.getItem('languageCode') || 'zh-CHS';
var GSPMetadataRTServiceModule4BizType = /** @class */ (function () {
    function GSPMetadataRTServiceModule4BizType() {
    }
    GSPMetadataRTServiceModule4BizType.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FarrisFormsModule,
                        HttpClientModule,
                        NotifyModule.forRoot(),
                        CommonModule,
                        FormsModule,
                        LayoutModule,
                        DropDownsModule,
                        BOTreePanelPackageModule,
                        SplitterModule,
                        FarrisSectionModule,
                        BORtServiceModule,
                        DatagridModule,
                        TranslateModule.forRoot({
                            loader: {
                                provide: TranslateLoader,
                                useFactory: ɵ0,
                                deps: [HttpClient]
                            }
                        }),
                    ],
                    declarations: [MetadataInfoComponent, MetadataInfoList],
                    exports: [MetadataInfoComponent],
                    providers: [
                        HttpService,
                        GSPMetadataRTService4BizType,
                        MetadataInfoService,
                        BusinessObjectRtService,
                        TranslateResolveService,
                        GspBoBizTypeMapping,
                        GspMdBizTypeMapping,
                        MdBizTypeMappingDto,
                        GspMdBizTypeMappingType,
                        { provide: LOCALE_ID, useValue: ɵ1 }
                    ],
                    entryComponents: [MetadataInfoComponent]
                },] }
    ];
    return GSPMetadataRTServiceModule4BizType;
}());
export { GSPMetadataRTServiceModule4BizType };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEtcnRzZXJ2aWNlNGJpenR5cGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1sY20vbWV0YWRhdGFydC1zZWxlY3RvcjRiaXp0eXBlLyIsInNvdXJjZXMiOlsibWV0YWRhdGEvbWV0YWRhdGEtcnRzZXJ2aWNlNGJpenR5cGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzVFLE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEVBQTRFLENBQUM7QUFDbkgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9GQUFvRixDQUFDO0FBQ3RILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSx3QkFBd0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxjQUFjLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSx1QkFBdUIsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQzFFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLGtEQUFrRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7O0FBRXJELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxJQUFnQjtJQUNwRCxPQUFPLElBQUksbUJBQW1CLENBQUMsSUFBSSxFQUFFLHlFQUF5RSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNILENBQUM7U0FtQm1CLENBQUMscUJBQXFCLENBQUMsT0FpQlAsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxRQUFRO0FBbENwRjtJQUFBO0lBd0NBLENBQUM7O2dCQXhDQSxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLGlCQUFpQjt3QkFDakIsZ0JBQWdCO3dCQUNoQixZQUFZLENBQUMsT0FBTyxFQUFFO3dCQUN0QixZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsWUFBWTt3QkFDWixlQUFlO3dCQUNmLHdCQUF3Qjt3QkFDeEIsY0FBYzt3QkFDZCxtQkFBbUI7d0JBQ25CLGlCQUFpQjt3QkFDakIsY0FBYzt3QkFDZCxlQUFlLENBQUMsT0FBTyxDQUFDOzRCQUN0QixNQUFNLEVBQUU7Z0NBQ04sT0FBTyxFQUFFLGVBQWU7Z0NBQ3hCLFVBQVUsSUFBeUI7Z0NBQ25DLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQzs2QkFDbkI7eUJBQ0YsQ0FBQztxQkFDSDtvQkFDRCxZQUFZLEVBQUMsQ0FBQyxxQkFBcUIsRUFBRSxnQkFBZ0IsQ0FBQztvQkFDdEQsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7b0JBQ2hDLFNBQVMsRUFBRTt3QkFDVCxXQUFXO3dCQUNYLDRCQUE0Qjt3QkFDNUIsbUJBQW1CO3dCQUNuQix1QkFBdUI7d0JBQ3ZCLHVCQUF1Qjt3QkFDdkIsbUJBQW1CO3dCQUNuQixtQkFBbUI7d0JBQ25CLG1CQUFtQjt3QkFDbkIsdUJBQXVCO3dCQUN2QixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxJQUFrRCxFQUFFO3FCQUNuRjtvQkFDRCxlQUFlLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztpQkFDekM7O0lBR0QseUNBQUM7Q0FBQSxBQXhDRCxJQXdDQztTQUZZLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBMT0NBTEVfSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR1NQTWV0YWRhdGFSVFNlcnZpY2U0Qml6VHlwZSB9IGZyb20gJy4vbWV0YWRhdGEucnRzZXJ2aWNlNGJpenR5cGUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBOb3RpZnlNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7R3NwQm9CaXpUeXBlTWFwcGluZ30gZnJvbSAnLi9nc3Bib2JpenR5cGVtYXBwaW5nJztcclxuaW1wb3J0IHtHc3BNZEJpelR5cGVNYXBwaW5nfSBmcm9tICcuL2dzcG1kYml6dHlwZW1hcHBpbmcnO1xyXG5pbXBvcnQgeyBNZEJpelR5cGVNYXBwaW5nRHRvfSBmcm9tICcuL21kYml6dHlwZW1hcHBpbmdkdG8nO1xyXG5pbXBvcnQge0dzcE1kQml6VHlwZU1hcHBpbmdUeXBlfSBmcm9tICcuL2dzcG1kYml6dHlwZW1hcHBpbmd0eXBlJztcclxuaW1wb3J0IHsgTWV0YWRhdGFJbmZvQ29tcG9uZW50IH0gZnJvbSAnLi9tZXRhZGF0YXJ0LXNlbGVjdDRiaXp0eXBlL2NvbXBvbmVudHMvbWV0YWRhdGFpbmZvL21ldGFkYXRhaW5mby5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBNZXRhZGF0YUluZm9MaXN0IH0gZnJvbSAnLi9tZXRhZGF0YXJ0LXNlbGVjdDRiaXp0eXBlL2NvbXBvbmVudHMvbWV0YWRhdGFpbmZvbGlzdC9tZXRhZGF0YWluZm9saXN0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERyb3BEb3duc01vZHVsZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWRyb3Bkb3ducyc7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBMYXlvdXRNb2R1bGUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sYXlvdXQnO1xyXG5pbXBvcnQgeyBCT1RyZWVQYW5lbFBhY2thZ2VNb2R1bGV9IGZyb20gJ0Bnc3AtbGNtL2JvLXRyZWUnO1xyXG5pbXBvcnQgeyBCT1J0U2VydmljZU1vZHVsZSxCdXNpbmVzc09iamVjdFJ0U2VydmljZX0gZnJvbSAnQGdzcC1sY20vYm8tcnQtc2VydmljZSc7XHJcbmltcG9ydCB7IFNwbGl0dGVyTW9kdWxlfSBmcm9tICdAZmFycmlzL3VpLXNwbGl0dGVyJztcclxuaW1wb3J0IHsgRmFycmlzU2VjdGlvbk1vZHVsZX0gZnJvbSAnQGZhcnJpcy91aS1zZWN0aW9uJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlTW9kdWxlLCBUcmFuc2xhdGVMb2FkZXIgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlSHR0cExvYWRlciB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2h0dHAtbG9hZGVyJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlUmVzb2x2ZVNlcnZpY2V9IGZyb20gJy4vbW9kZWxzL1RyYW5zbGF0ZVJlc29sdmVTZXJ2aWNlJztcclxuaW1wb3J0IHtNZXRhZGF0YUluZm9TZXJ2aWNlfSBmcm9tICcuL21ldGFkYXRhcnQtc2VsZWN0NGJpenR5cGUvbWV0YWRhdGFpbmZvLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZE1vZHVsZX0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IEZhcnJpc0Zvcm1zTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1mb3Jtcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhbnNsYXRlTG9hZGVyKGh0dHA6IEh0dHBDbGllbnQpIHtcclxuICByZXR1cm4gbmV3IFRyYW5zbGF0ZUh0dHBMb2FkZXIoaHR0cCwgXCIvcGxhdGZvcm0vcnVudGltZS9jb21tb24vd2ViL0Bnc3AtbGNtL21ldGFkYXRhcnQtc2VsZWN0b3I0Yml6dHlwZS9pMThuL1wiLCBcIi5qc29uXCIpO1xyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIEZhcnJpc0Zvcm1zTW9kdWxlLFxyXG4gICAgSHR0cENsaWVudE1vZHVsZSxcclxuICAgIE5vdGlmeU1vZHVsZS5mb3JSb290KCksXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZSxcclxuICAgIExheW91dE1vZHVsZSxcclxuICAgIERyb3BEb3duc01vZHVsZSxcclxuICAgIEJPVHJlZVBhbmVsUGFja2FnZU1vZHVsZSxcclxuICAgIFNwbGl0dGVyTW9kdWxlLFxyXG4gICAgRmFycmlzU2VjdGlvbk1vZHVsZSxcclxuICAgIEJPUnRTZXJ2aWNlTW9kdWxlLFxyXG4gICAgRGF0YWdyaWRNb2R1bGUsXHJcbiAgICBUcmFuc2xhdGVNb2R1bGUuZm9yUm9vdCh7XHJcbiAgICAgIGxvYWRlcjoge1xyXG4gICAgICAgIHByb3ZpZGU6IFRyYW5zbGF0ZUxvYWRlcixcclxuICAgICAgICB1c2VGYWN0b3J5OiAoY3JlYXRlVHJhbnNsYXRlTG9hZGVyKSxcclxuICAgICAgICBkZXBzOiBbSHR0cENsaWVudF1cclxuICAgICAgfVxyXG4gICAgfSksXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6W01ldGFkYXRhSW5mb0NvbXBvbmVudCwgTWV0YWRhdGFJbmZvTGlzdF0sXHJcbiAgZXhwb3J0czogW01ldGFkYXRhSW5mb0NvbXBvbmVudF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBIdHRwU2VydmljZSxcclxuICAgIEdTUE1ldGFkYXRhUlRTZXJ2aWNlNEJpelR5cGUsXHJcbiAgICBNZXRhZGF0YUluZm9TZXJ2aWNlLFxyXG4gICAgQnVzaW5lc3NPYmplY3RSdFNlcnZpY2UsXHJcbiAgICBUcmFuc2xhdGVSZXNvbHZlU2VydmljZSxcclxuICAgIEdzcEJvQml6VHlwZU1hcHBpbmcsXHJcbiAgICBHc3BNZEJpelR5cGVNYXBwaW5nLFxyXG4gICAgTWRCaXpUeXBlTWFwcGluZ0R0byxcclxuICAgIEdzcE1kQml6VHlwZU1hcHBpbmdUeXBlLCAgICAgIFxyXG4gICAgeyBwcm92aWRlOiBMT0NBTEVfSUQsIHVzZVZhbHVlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2VDb2RlJykgfHwgJ3poLUNIUycgfVxyXG4gIF0sXHJcbiAgZW50cnlDb21wb25lbnRzOiBbTWV0YWRhdGFJbmZvQ29tcG9uZW50XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR1NQTWV0YWRhdGFSVFNlcnZpY2VNb2R1bGU0Qml6VHlwZSB7XHJcbiAgXHJcbn1cclxuIl19