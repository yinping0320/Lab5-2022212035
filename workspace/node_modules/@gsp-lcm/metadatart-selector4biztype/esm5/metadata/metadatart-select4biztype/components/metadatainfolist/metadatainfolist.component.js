/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select4biztype/components/metadatainfolist/metadatainfolist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { MetadataInfoService } from '../../metadatainfo.service';
import { TranslateService } from '@ngx-translate/core';
var MetadataInfoList = /** @class */ (function () {
    function MetadataInfoList(metadataService /**/, translate) {
        this.metadataService = metadataService;
        this.translate = translate;
        this.allType = { text: this.transform('SelectAll'), value: 'All' };
        this.selectedType = this.allType;
        this.typeList = [
            this.allType
        ];
        this.typeListReadonly = false;
        this.searchText = '';
        this.searchTextForDup = '';
        this.Code = this.transform('Code');
        this.dataCache = [];
        this.columns = [];
        this.boId = 'all';
    }
    /**
     * @return {?}
     */
    MetadataInfoList.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.columns = [
            { field: 'nameSpace', width: 250, title: this.transform('NameSpace') },
            { field: 'code', width: 200, title: this.transform('Code') },
            { field: 'name', width: 200, title: this.transform('Name') },
            { field: 'type', width: 150, title: this.transform('Type') }
        ];
        // 获取所有的元数据类型列表
        this.metadataService.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        function (typeList) {
            if (typeList) {
                typeList.forEach((/**
                 * @param {?} type
                 * @return {?}
                 */
                function (type) {
                    _this.typeList.push({ text: type.typeName, value: type.typeCode });
                }));
            }
        }));
        // 初始化数据
        this.getData();
    };
    /**
     * @return {?}
     */
    MetadataInfoList.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.data = [];
    };
    // tslint:disable-next-line:use-life-cycle-interface
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @param {?} changes
     * @return {?}
     */
    MetadataInfoList.prototype.ngOnChanges = 
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.searchText) {
            this.onSearchTextChanged();
            return;
        }
        for (var key in changes) {
            if (changes.hasOwnProperty(key)) {
                /** @type {?} */
                var changedProp = changes[key];
                /** @type {?} */
                var currentValue = changedProp.currentValue;
                this.boId = currentValue;
                if (this.dataCache) {
                    /** @type {?} */
                    var dtos = [];
                    dtos = this.filterByBoId(this.dataCache);
                    dtos = this.filterByType(dtos);
                    dtos = this.filterBySearchText(dtos, this.searchText.trim());
                    this.data = dtos;
                }
            }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    MetadataInfoList.prototype.transform = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.translate.instant(key);
    };
    /**
     * @return {?}
     */
    MetadataInfoList.prototype.onSearchTextChanged = /**
     * @return {?}
     */
    function () {
        if (!this.searchText) {
            this.searchText = '';
        }
        /** @type {?} */
        var searchTextTrim = this.searchText.trim();
        console.log(this.searchText);
        this.filterData(searchTextTrim);
    };
    /**
     * @param {?} mdSeleted
     * @return {?}
     */
    MetadataInfoList.prototype.typeSelectedChanged = /**
     * @param {?} mdSeleted
     * @return {?}
     */
    function (mdSeleted) {
        if (!mdSeleted) {
            mdSeleted = this.selectedType;
        }
        else {
            this.selectedType = mdSeleted;
        }
        if (this.searchText) {
            this.onSearchTextChanged();
            return;
        }
        if (mdSeleted) {
            /** @type {?} */
            var dtos = [];
            dtos = this.filterByBoId(this.dataCache);
            dtos = this.filterByType(dtos);
            this.data = dtos;
        }
    };
    /**
     * @return {?}
     */
    MetadataInfoList.prototype.goSearch = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    MetadataInfoList.prototype.getData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var metadatadto = [];
        this.metadataService.GetMetadataRTList('').subscribe((/**
         * @param {?} metadataList
         * @return {?}
         */
        function (metadataList) {
            if (metadataList) {
                _this.metadataService.GetMetadataTypeList().subscribe((/**
                 * @param {?} typeList
                 * @return {?}
                 */
                function (typeList) {
                    if (typeList) {
                        metadataList.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            /** @type {?} */
                            var dto = typeList.find((/**
                             * @param {?} type
                             * @return {?}
                             */
                            function (type) { return type.typeCode === item.metadata.type; }));
                            if (dto) {
                                item.metadata.type = dto.typeName;
                            }
                            metadatadto.push(item.metadata);
                        }));
                    }
                    else {
                        metadataList.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            metadatadto.push(item.metadata);
                        }));
                    }
                    _this.data = metadatadto;
                    _this.dataCache = metadatadto;
                }));
            }
        }));
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    MetadataInfoList.prototype.filterData = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        /** @type {?} */
        var dtos = [];
        dtos = this.filterByBoId(this.dataCache);
        dtos = this.filterByType(dtos);
        dtos = this.filterBySearchText(dtos, filter);
        this.data = dtos;
    };
    /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    MetadataInfoList.prototype.filterByType = /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    function (datas) {
        var _this = this;
        /** @type {?} */
        var dtos = [];
        if (this.selectedType.value === 'All') {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.data;
                // tslint:disable-next-line:max-line-length
                if (data.type === _this.selectedType.text) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    };
    /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    MetadataInfoList.prototype.filterByBoId = /**
     * @private
     * @param {?} datas
     * @return {?}
     */
    function (datas) {
        var _this = this;
        /** @type {?} */
        var dtos = [];
        if (!this.boId) {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // tslint:disable-next-line:max-line-length
                if (data.bizobjectID === _this.boId) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    };
    /**
     * @private
     * @param {?} datas
     * @param {?} text
     * @return {?}
     */
    MetadataInfoList.prototype.filterBySearchText = /**
     * @private
     * @param {?} datas
     * @param {?} text
     * @return {?}
     */
    function (datas, text) {
        /** @type {?} */
        var dtos = [];
        if (!text) {
            dtos = datas;
        }
        else {
            datas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data.code.toLowerCase().indexOf(text.toLowerCase()) > -1 || data.name.toLowerCase().indexOf(text.toLowerCase()) > -1) {
                    dtos.push(data);
                }
            }));
        }
        return dtos;
    };
    // 选中元数据后的事件处理
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    MetadataInfoList.prototype.onSelectionChange = 
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.selectedRows.length > 0) {
            this.metadataService.clearMetadataRT();
            /** @type {?} */
            var metadata = {
                ID: event.selectedRows[0].dataItem.id,
                RelativePath: event.selectedRows[0].dataItem.relativePath,
                FileName: event.selectedRows[0].dataItem.fileName
            };
            this.metadataService.addMetadataRT(metadata);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    MetadataInfoList.prototype.onPageSizeChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        console.log('PageSize Changed:', $event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    MetadataInfoList.prototype.onPageChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        console.log('PageNumber Changed:', $event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MetadataInfoList.prototype.checkedChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (event != null && event.length > 0) {
            this.metadataService.clearMetadataRT();
            event.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var metadata = {
                    ID: element.data.id,
                    Name: element.data.name,
                    Code: element.data.code,
                    Type: element.data.type,
                    NameSpace: element.data.nameSpace
                };
                _this.metadataService.addMetadataRT(metadata);
            }));
        }
    };
    MetadataInfoList.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-metadatainfolist',
                    template: "<div class=\"templateInfo d-flex flex-column h-100\">\r\n  <div class=\"templateSelectorHeader m-2 flex-shrink-0\">\r\n    <div class=\"searchArea d-flex flex-row\">\r\n\r\n      <input id=\"url\" class=\"textInput flex-fill\" type=\"text\" size=\"30\" kendoTextBox [(ngModel)]=\"this.searchText\"\r\n        #url=\"ngModel\" (ngModelChange)=\"onSearchTextChanged()\">\r\n      <button type=\"button\" class=\"btn btn-light btn-sm px-3 mx-2\"\r\n          (click)=\"goSearch()\">{{ 'Search' | translate }}</button>\r\n\r\n      <kendo-combobox [readonly]=\"this.typeListReadonly\" [data]=\"typeList\" [(ngModel)]=\"selectedType\"\r\n        [textField]=\"'text'\" [valueField]=\"'value'\"  (selectionChange)=\"typeSelectedChanged($event)\">\r\n      </kendo-combobox>\r\n    </div>\r\n   </div>\r\n\r\n    <div class=\"templateSelector farris-overflow-y-auto flex-fill f-utils-fill-flex-column\">\r\n      <farris-datagrid class=\"f-utils-fill\"\r\n      [columns]=\"columns\" [data]=\"data\" [showBorder]=\"true\"\r\n      [showLineNumber]=\"true\" [fit]=\"true\"\r\n      [striped]=\"true\"\r\n      [pagerOnServer]=\"false\"\r\n      [pagination]=\"true\" [pageSize]=\"10\" [showPageList]=\"true\"\r\n      (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\r\n      [fitColumns]=\"true\"\r\n      [autoFitColumns]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [showAllCheckbox]=\"true\"\r\n      [selectOnCheck]=\"true\"\r\n      [checkOnSelect]=\"true\"\r\n      [onlySelectSelf]=\"true\"\r\n      [showCheckbox]=\"true\"\r\n      [multiSelect]=\"true\"\r\n      [keepSelect]=\"true\"\r\n      (checkedChange) = \"checkedChange($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MetadataInfoList.ctorParameters = function () { return [
        { type: MetadataInfoService },
        { type: TranslateService }
    ]; };
    MetadataInfoList.propDecorators = {
        boId: [{ type: Input }]
    };
    return MetadataInfoList;
}());
export { MetadataInfoList };
if (false) {
    /** @type {?} */
    MetadataInfoList.prototype.boId;
    /** @type {?} */
    MetadataInfoList.prototype.allType;
    /** @type {?} */
    MetadataInfoList.prototype.selectedType;
    /** @type {?} */
    MetadataInfoList.prototype.typeList;
    /** @type {?} */
    MetadataInfoList.prototype.typeListReadonly;
    /** @type {?} */
    MetadataInfoList.prototype.searchText;
    /** @type {?} */
    MetadataInfoList.prototype.searchTextForDup;
    /** @type {?} */
    MetadataInfoList.prototype.Code;
    /** @type {?} */
    MetadataInfoList.prototype.data;
    /** @type {?} */
    MetadataInfoList.prototype.dataCache;
    /** @type {?} */
    MetadataInfoList.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    MetadataInfoList.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    MetadataInfoList.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,