{"version":3,"sources":["ng://@gsp-lcm/metadatart-selector/metadata/metadata.rtservice.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadatart-select/metadatart.service.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadata4refdto.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadatart-select/components/selectmetadatart/selectmetadatart.component.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadatart-select/components/metadatartlist/metadatartlist.component.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadatart-select/metadatart-select.module.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadata-rtservice.module.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadatadto.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadatapackagedto.ts","ng://@gsp-lcm/metadatart-selector/metadata/metadataprojectdto.ts"],"names":["GSPMetadataRTService","prototype","GetMetadataRT","metadataID","url","this","Server_IP","MetadataRT_Base_Path","httpClient","get","GetMetadataRTList","typeList","GetMetadataRTListForHelp","getMetadataListByBizTypeId","bizTypeId","metadataTypes","MetadataBizType_Base_Path","getMetadataListByBizTypeIdForHelp","boList","GetMetadataTypeList","GetPostfix","metadataType","subscribe","forEach","type","toLowerCase","typeCode","postfix","Observable","Injectable","HttpClient","Inject","args","undefined","MetadataRTService","addMetadataRT","metadata","metadatas","push","clearMetadataRT","gspMetadataService","Metadata4RefDto","MetadataPackageHeader","SelectMetadataRTComponent","ngOnChanges","changes","LoadMetadata","_this","metadataService","length","notifyService","warning","console","log","Id","ID","templates","metadata4Ref","packageHeader","selectedMetadata","emit","hideModal","closeModalEmitter","onSelectedChange","classifier","Component","selector","template","BsModalService","ComponentFactoryResolver","Injector","Input","Output","modalService","resolver","injector","EventEmitter","confirm","cancel","NotifyService","localStorage","getItem","TemplatemetadataRTComponent","clear","data","dataStateChange","state","gridData","process","ngOnInit","nameSpace","name","fileName","businessObject","metadatadto","boId","item","onSelectionChange","event","selectedRows","dataItem","id","RelativePath","relativePath","FileName","skip","take","filter","logic","filters","selectableSetting","mode","checkboxOnly","MetadataRTSelectModule","NgModule","imports","CommonModule","FormsModule","TreeViewModule","GridModule","NotifyModule","forRoot","exports","providers","declarations","entryComponents","factory","http","GSPMetadataRTServiceModule","ngModule","provide","useValue","useFactory","deps","HttpClientModule","MetadataDto$1","MetadataDto","code","bizobjectID","extendProperty","content","MetadataPackageDto","packageName","packageVersion","packageLocation","projectPath","MetadataProjectDto","projectName","projectNameSpace","depPackageName","depPackageVersion","depPackageLocation"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class GSPMetadataRTService {\r\n  // ç¯å¢åé\r\n  // tslint:disable-next-line:variable-name\r\n  private Server_IP: string;\r\n  // tslint:disable-next-line:variable-name\r\n  private MetadataRT_Base_Path = '/api/runtime/lcm/v1.0/rt-metadatas';\r\n  // tslint:disable-next-line:variable-name\r\n  private MetadataBizType_Base_Path = '/api/runtime/lcm/v1.0/metadata-biztypes';\r\n  constructor(private httpClient: HttpClient, @Inject('url') private url: string) {\r\n    this.Server_IP = (url === null || url === undefined) ? 'http://10.24.19.140:5000' : url;\r\n  }\r\n\r\n  /**\r\n   * åæ°æ®è¿è¡æ¶æå¡\r\n   */\r\n\r\n  public GetMetadataRT(metadataID: string): Observable<any> {\r\n    const url = this.Server_IP + this.MetadataRT_Base_Path + '/' + metadataID;\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n  public GetMetadataRTList(typeList: string): Observable<any> {\r\n    const url = this.Server_IP + this.MetadataRT_Base_Path + '?metadataTypes=' + typeList;\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n  GetMetadataRTListForHelp(typeList: string): Observable<any> {\r\n    const url = this.Server_IP + this.MetadataRT_Base_Path + '/helper?metadataTypes=' + typeList;\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n\r\n  public getMetadataListByBizTypeId( bizTypeId: string, metadataTypes: string): Observable<any> {\r\n    const url = this.Server_IP + this.MetadataBizType_Base_Path + '?bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n  public getMetadataListByBizTypeIdForHelp(boList:string,bizTypeId: string, metadataTypes: string): Observable<any> {\r\n    const url = this.Server_IP + this.MetadataBizType_Base_Path + '/helper?boList='+boList+'&bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n  // è·ååæ°æ®ç±»åååç¼ä¿¡æ¯\r\n  GetMetadataTypeList(): Observable<any> {\r\n    const url = this.Server_IP + this.MetadataRT_Base_Path + '/typeList';\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n  // è·ååç¼\r\n  GetPostfix(metadataType): Observable<any> {\r\n    this.GetMetadataTypeList().subscribe(typeList => {\r\n      typeList.forEach(type => {\r\n        if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {\r\n          return type.postfix;\r\n        }\r\n      });\r\n    });\r\n    return new Observable<any>();\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { GSPMetadataRTService } from '../metadata.rtservice';\r\n\r\n@Injectable()\r\nexport class MetadataRTService {\r\n\r\n  constructor(private gspMetadataService: GSPMetadataRTService) {\r\n  }\r\n\r\n  metadatas = [];\r\n  addMetadataRT(metadata) {\r\n    this.metadatas.push(metadata);\r\n  }\r\n  clearMetadataRT() {\r\n    this.metadatas = [];\r\n  }\r\n\r\n  // æ ¹æ®ç±»åè·åCloud Serverä¸ææçåæ°æ®\r\n  GetMetadataRTList(typeList: string): Observable<any> {\r\n    return this.gspMetadataService.GetMetadataRTList(typeList);\r\n  }\r\n\r\n  GetMetadataRTListForHelp(typeList: string): Observable<any> {\r\n    return this.gspMetadataService.GetMetadataRTListForHelp(typeList);\r\n  }\r\n\r\n  public getMetadataListByBizTypeId(bizTypeId: string, metadataTypes: string): Observable<any> {\r\n    return this.gspMetadataService.getMetadataListByBizTypeId(bizTypeId, metadataTypes);\r\n  }\r\n  public getMetadataListByBizTypeIdForHelp(boList:string,bizTypeId: string, metadataTypes: string): Observable<any> {\r\n    if(boList===undefined){\r\n      boList='';\r\n    }\r\n    if(bizTypeId===undefined){\r\n      bizTypeId='';\r\n    }\r\n    return this.gspMetadataService.getMetadataListByBizTypeIdForHelp(boList,bizTypeId, metadataTypes);\r\n  }\r\n  \r\n  // è·æ ¹æ®Idåæå®åæ°æ®\r\n  GetMetadataRT(metadataID: string): Observable<any> {\r\n    return this.gspMetadataService.GetMetadataRT(metadataID);\r\n  }\r\n}\r\n","export class Metadata4RefDto {\r\n    packageHeader: MetadataPackageHeader;\r\n    metadata: MetadataDto;\r\n}\r\n\r\nexport class MetadataDto {\r\n    id: string;\r\n    nameSpace: string;\r\n    code: string;\r\n    name: string;\r\n    fileName: string;\r\n    type: string;\r\n    bizobjectID: string;\r\n    relativePath: string;\r\n    extendProperty: string;\r\n    content: string;\r\n}\r\n\r\nexport class MetadataPackageHeader {\r\n    name: string;\r\n    version: MetadataPackageVersion;\r\n    location: string;\r\n}\r\n\r\nexport class MetadataPackageVersion {\r\n    versionString: string;\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { Component, ViewChild, Input, OnChanges, Output, EventEmitter, SimpleChanges, ComponentFactoryResolver, Injector } from '@angular/core';\r\nimport { MetadataRTService } from '../../metadatart.service';\r\nimport { Metadata4RefDto, MetadataPackageHeader } from '../../../metadata4refdto';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport {NotifyService} from '@farris/ui-notify';\r\nimport {TranslateService} from '@ngx-translate/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'app-select-metadatart',\r\n  templateUrl: './selectmetadatart.component.html',\r\n  styleUrls: ['./selectmetadatart.component.css']\r\n})\r\nexport class SelectMetadataRTComponent implements OnChanges {\r\n  @Input() typeList: string;\r\n  @Input() boId: string;\r\n  @Input() bizTypeId: string;\r\n  classifier: string;\r\n  @Output() closeModalEmitter: EventEmitter<any>;\r\n  @Output() selectedMetadata = new EventEmitter<any>();\r\n  public confirm='ç¡®å®';\r\n  public cancel='åæ¶';\r\n\r\n  private notifyService:NotifyService;\r\n\r\n  constructor(private metadataService: MetadataRTService, \r\n              private modalService: BsModalService,\r\n              private resolver: ComponentFactoryResolver, private injector: Injector) {\r\n    this.closeModalEmitter = new EventEmitter<any>();\r\n    this.notifyService = this.injector.get(NotifyService, null);\r\n    if(localStorage.getItem('languageCode')==='en'){\r\n      this.confirm='OK';\r\n      this.cancel='Cancel';\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n\r\n  }\r\n\r\n  LoadMetadata() {\r\n    if(this.metadataService.metadatas==null || this.metadataService.metadatas.length<=0){\r\n      if (this.notifyService) {\r\n        this.notifyService.warning(\"è¯·åéä¸­åæ°æ®ã\");\r\n        return;\r\n      } else {\r\n        console.log(\"è¯·åéä¸­åæ°æ®ã\");\r\n        return;\r\n      }\r\n    }\r\n      const Id = this.metadataService.metadatas[0].ID;\r\n      this.metadataService.GetMetadataRT(Id).subscribe(templates => {\r\n        const metadata4Ref = new Metadata4RefDto();\r\n        metadata4Ref.metadata = templates;\r\n        metadata4Ref.packageHeader = new MetadataPackageHeader();\r\n        this.selectedMetadata.emit(metadata4Ref);\r\n        this.hideModal();\r\n      });\r\n      // æ¸ç©ºç¼å­\r\n      this.metadataService.clearMetadataRT();   \r\n  }\r\n\r\n  hideModal(): void {\r\n    this.closeModalEmitter.emit();\r\n  }\r\n  onSelectedChange(classifier: string) {\r\n    this.classifier = classifier;\r\n  }\r\n}\r\n","import { Component, Input,  OnInit } from '@angular/core';\r\nimport { MetadataRTService } from '../../metadatart.service';\r\nimport { MetadataBaseInfo } from '../../metadatabaseinfo';\r\nimport { SelectableSettings } from '@progress/kendo-angular-grid';\r\nimport { process, State } from '@progress/kendo-data-query';\r\nimport { GridDataResult, DataStateChangeEvent } from '@progress/kendo-angular-grid';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'app-metadatalist',\r\n  templateUrl: './metadatartlist.component.html',\r\n  styleUrls: ['./metadatartlist.component.css']\r\n})\r\nexport class TemplatemetadataRTComponent implements OnInit {\r\n  // åç±»\r\n  @Input() typeList: string;\r\n  @Input() boId: string;\r\n  @Input() bizTypeId: string;\r\n  data: MetadataBaseInfo[];\r\n  clear() {\r\n    this.data = [];\r\n  }\r\n  public nameSpace='å½åç©ºé´';\r\n  public name='åç§°';\r\n  public fileName='æä»¶å';\r\n  public type='ç±»å';\r\n  public businessObject='ä¸å¡å¯¹è±¡';\r\n  // tslint:disable-next-line:member-ordering\r\n  public state: State = {\r\n    skip: 0,\r\n    take: 50,\r\n    // Initial filter descriptor\r\n    filter: {\r\n      logic: 'and',\r\n      filters: []\r\n    }\r\n  };\r\n\r\n  // tslint:disable-next-line:member-ordering\r\n  public gridData: GridDataResult;\r\n  public dataStateChange(state: DataStateChangeEvent): void {\r\n    this.state = state;\r\n    this.gridData = process(this.data, this.state);\r\n  }\r\n\r\n  // tslint:disable-next-line:member-ordering\r\n  selectableSetting: SelectableSettings = { mode: 'single', checkboxOnly: false };\r\n  constructor(private metadataService: MetadataRTService) { }\r\n\r\n  ngOnInit() {\r\n    if(localStorage.getItem('languageCode')==='en'){\r\n      this.nameSpace='NameSpace';\r\n      this.name='Name';\r\n      this.fileName='FileName';\r\n      this.type='Type';\r\n      this.businessObject='BusinessObject';\r\n    }\r\n    const metadatadto = [];\r\n    if(this.boId||this.bizTypeId){\r\n      this.metadataService.getMetadataListByBizTypeIdForHelp(this.boId,this.bizTypeId, this.typeList).subscribe(templates => {\r\n        if (templates) { \r\n            templates.forEach(item => {\r\n                metadatadto.push(item.metadata);\r\n            });\r\n        }\r\n        this.data = metadatadto;\r\n        this.gridData = process(this.data, this.state);\r\n      });\r\n    }else{\r\n        this.metadataService.GetMetadataRTListForHelp(this.typeList).subscribe(templates => {\r\n          if (templates) { \r\n              templates.forEach(item => {\r\n                  metadatadto.push(item.metadata);\r\n              });\r\n          }\r\n          this.data = metadatadto;\r\n          this.gridData = process(this.data, this.state);\r\n        });\r\n      }\r\n  }\r\n  // éä¸­åæ°æ®åçäºä»¶å¤ç\r\n  onSelectionChange(event) {\r\n    if (event.selectedRows.length > 0) {\r\n      this.metadataService.clearMetadataRT();\r\n      const metadata = {\r\n        ID: event.selectedRows[0].dataItem.id,\r\n        RelativePath: event.selectedRows[0].dataItem.relativePath,\r\n        FileName: event.selectedRows[0].dataItem.fileName\r\n      };\r\n      this.metadataService.addMetadataRT(metadata);\r\n    }\r\n  }\r\n}\r\n","import { LOCALE_ID,NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SelectMetadataRTComponent } from './components/selectmetadatart/selectmetadatart.component';\r\nimport { TemplatemetadataRTComponent } from './components/metadatartlist/metadatartlist.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TreeViewModule } from '@progress/kendo-angular-treeview';\r\nimport { GridModule } from '@progress/kendo-angular-grid';\r\nimport { MetadataRTService } from './metadatart.service';\r\nimport {NotifyModule} from '@farris/ui-notify';\r\n\r\n// import { FarrisDialogModule } from '@farris/ui-dialog';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TreeViewModule,\r\n    GridModule,\r\n    NotifyModule.forRoot()\r\n    // FarrisDialogModule\r\n  ],\r\n  exports: [\r\n    SelectMetadataRTComponent,\r\n    NotifyModule\r\n  ],\r\n  providers: [\r\n    MetadataRTService\r\n  ], // æå¡æä¾è\r\n  declarations: [SelectMetadataRTComponent, TemplatemetadataRTComponent],\r\n  entryComponents: [SelectMetadataRTComponent]\r\n})\r\nexport class MetadataRTSelectModule {\r\n  constructor() {\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders, InjectionToken, Inject } from '@angular/core';\r\nimport { GSPMetadataRTService } from './metadata.rtservice';\r\nimport { HttpClient, HttpHandler, HttpHeaders, HttpClientModule } from '@angular/common/http';\r\n\r\nexport function factory(http: HttpClient, url: string) {\r\n  return new GSPMetadataRTService(http, url);\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule\r\n  ],\r\n  exports: [],\r\n  providers: []\r\n})\r\nexport class GSPMetadataRTServiceModule {\r\n  static forRoot(url: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: GSPMetadataRTServiceModule,\r\n      providers: [\r\n        {provide: 'url', useValue: url},\r\n        {provide: GSPMetadataRTService, useFactory: factory, deps: [HttpClient, 'url']}\r\n      ]\r\n    };\r\n  }\r\n}\r\n","export class MetadataDto {\r\n    id: string;\r\n    nameSpace: string;\r\n    code: string;\r\n    name: string;\r\n    fileName: string;\r\n    type: string;\r\n    bizobjectID: string;\r\n    relativePath: string;\r\n    extendProperty: string;\r\n    content: string;\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    constructor(id: string, nameSpace: string, code: string, name: string, fileName: string, type: string, bizobjectID: string, relativePath: string, extendProperty: string, content: string) {\r\n        this.id = id;\r\n        this.nameSpace = nameSpace;\r\n        this.code = code;\r\n        this.name = name;\r\n        this.fileName = fileName;\r\n        this.type = type;\r\n        this.bizobjectID = bizobjectID;\r\n        this.relativePath = relativePath;\r\n        this.extendProperty = extendProperty;\r\n        this.content = content;\r\n    }\r\n}\r\n","export class MetadataPackageDto {\r\n    packageName: string;\r\n    packageVersion: string;\r\n    packageLocation: string;\r\n    projectPath: string;\r\n\r\n    constructor(packageName: string, packageVersion: string, packageLocation: string, projectPath: string) {\r\n        this.packageName = packageName;\r\n        this.projectPath = projectPath;\r\n        this.packageVersion = packageVersion;\r\n        this.packageLocation = packageLocation;\r\n    }\r\n}\r\n","export class MetadataProjectDto {\r\n    packageName: string;\r\n    projectPath: string;\r\n    projectName: string;\r\n    projectNameSpace: string;\r\n    depPackageName: string;\r\n    depPackageVersion: string;\r\n    depPackageLocation: string;\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    constructor(packageName: string, projectPath: string, projectName: string, projectNameSpace: string, depPackageName: string, depPackageVersion: string, depPackageLocation: string) {\r\n        this.packageName = packageName;\r\n        this.projectName = projectName;\r\n        this.projectPath = projectPath;\r\n        this.projectNameSpace = projectNameSpace;\r\n        this.depPackageName = depPackageName;\r\n        this.depPackageVersion = depPackageVersion;\r\n        this.depPackageLocation = depPackageLocation;\r\n    }\r\n}\r\n"]}