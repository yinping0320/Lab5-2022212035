(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('rxjs/Observable'), require('@farris/ui-modal'), require('@progress/kendo-data-query'), require('@angular/forms'), require('@progress/kendo-angular-treeview'), require('@progress/kendo-angular-grid'), require('@farris/ui-notify'), require('@angular/core'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@gsp-lcm/metadatart-selector', ['exports', '@angular/common', 'rxjs/Observable', '@farris/ui-modal', '@progress/kendo-data-query', '@angular/forms', '@progress/kendo-angular-treeview', '@progress/kendo-angular-grid', '@farris/ui-notify', '@angular/core', '@angular/common/http'], factory) :
    (factory((global['gsp-lcm'] = global['gsp-lcm'] || {}, global['gsp-lcm']['metadatart-selector'] = {}),global.ng.common,global.rxjs.Observable,global.uiModal,global.kendoDataQuery,global.ng.forms,global.kendoAngularTreeview,global.kendoAngularGrid,global.uiNotify,global.ng.core,global.ng.common.http));
}(this, (function (exports,common,Observable,uiModal,kendoDataQuery,forms,kendoAngularTreeview,kendoAngularGrid,uiNotify,core,http) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadata.rtservice.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GSPMetadataRTService = /** @class */ (function () {
        function GSPMetadataRTService(httpClient, url) {
            this.httpClient = httpClient;
            this.url = url;
            // tslint:disable-next-line:variable-name
            this.MetadataRT_Base_Path = '/api/runtime/lcm/v1.0/rt-metadatas';
            // tslint:disable-next-line:variable-name
            this.MetadataBizType_Base_Path = '/api/runtime/lcm/v1.0/metadata-biztypes';
            this.Server_IP = (url === null || url === undefined) ? 'http://10.24.19.140:5000' : url;
        }
        /**
         * 元数据运行时服务
         */
        /**
         * 元数据运行时服务
         * @param {?} metadataID
         * @return {?}
         */
        GSPMetadataRTService.prototype.GetMetadataRT = /**
         * 元数据运行时服务
         * @param {?} metadataID
         * @return {?}
         */
            function (metadataID) {
                /** @type {?} */
                var url = this.Server_IP + this.MetadataRT_Base_Path + '/' + metadataID;
                return this.httpClient.get(url);
            };
        /**
         * @param {?} typeList
         * @return {?}
         */
        GSPMetadataRTService.prototype.GetMetadataRTList = /**
         * @param {?} typeList
         * @return {?}
         */
            function (typeList) {
                /** @type {?} */
                var url = this.Server_IP + this.MetadataRT_Base_Path + '?metadataTypes=' + typeList;
                return this.httpClient.get(url);
            };
        /**
         * @param {?} typeList
         * @return {?}
         */
        GSPMetadataRTService.prototype.GetMetadataRTListForHelp = /**
         * @param {?} typeList
         * @return {?}
         */
            function (typeList) {
                /** @type {?} */
                var url = this.Server_IP + this.MetadataRT_Base_Path + '/helper?metadataTypes=' + typeList;
                return this.httpClient.get(url);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
        GSPMetadataRTService.prototype.getMetadataListByBizTypeId = /**
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
            function (bizTypeId, metadataTypes) {
                /** @type {?} */
                var url = this.Server_IP + this.MetadataBizType_Base_Path + '?bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
                return this.httpClient.get(url);
            };
        /**
         * @param {?} boList
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
        GSPMetadataRTService.prototype.getMetadataListByBizTypeIdForHelp = /**
         * @param {?} boList
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
            function (boList, bizTypeId, metadataTypes) {
                /** @type {?} */
                var url = this.Server_IP + this.MetadataBizType_Base_Path + '/helper?boList=' + boList + '&bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
                return this.httpClient.get(url);
            };
        // 获取元数据类型及后缀信息
        // 获取元数据类型及后缀信息
        /**
         * @return {?}
         */
        GSPMetadataRTService.prototype.GetMetadataTypeList =
            // 获取元数据类型及后缀信息
            /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var url = this.Server_IP + this.MetadataRT_Base_Path + '/typeList';
                return this.httpClient.get(url);
            };
        // 获取后缀
        // 获取后缀
        /**
         * @param {?} metadataType
         * @return {?}
         */
        GSPMetadataRTService.prototype.GetPostfix =
            // 获取后缀
            /**
             * @param {?} metadataType
             * @return {?}
             */
            function (metadataType) {
                this.GetMetadataTypeList().subscribe(( /**
                 * @param {?} typeList
                 * @return {?}
                 */function (typeList) {
                    typeList.forEach(( /**
                     * @param {?} type
                     * @return {?}
                     */function (type) {
                        if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                            return type.postfix;
                        }
                    }));
                }));
                return new Observable.Observable();
            };
        GSPMetadataRTService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GSPMetadataRTService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Inject, args: ['url',] }] }
            ];
        };
        return GSPMetadataRTService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatart-select/metadatart.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataRTService = /** @class */ (function () {
        function MetadataRTService(gspMetadataService) {
            this.gspMetadataService = gspMetadataService;
            this.metadatas = [];
        }
        /**
         * @param {?} metadata
         * @return {?}
         */
        MetadataRTService.prototype.addMetadataRT = /**
         * @param {?} metadata
         * @return {?}
         */
            function (metadata) {
                this.metadatas.push(metadata);
            };
        /**
         * @return {?}
         */
        MetadataRTService.prototype.clearMetadataRT = /**
         * @return {?}
         */
            function () {
                this.metadatas = [];
            };
        // 根据类型获取Cloud Server下所有的元数据
        // 根据类型获取Cloud Server下所有的元数据
        /**
         * @param {?} typeList
         * @return {?}
         */
        MetadataRTService.prototype.GetMetadataRTList =
            // 根据类型获取Cloud Server下所有的元数据
            /**
             * @param {?} typeList
             * @return {?}
             */
            function (typeList) {
                return this.gspMetadataService.GetMetadataRTList(typeList);
            };
        /**
         * @param {?} typeList
         * @return {?}
         */
        MetadataRTService.prototype.GetMetadataRTListForHelp = /**
         * @param {?} typeList
         * @return {?}
         */
            function (typeList) {
                return this.gspMetadataService.GetMetadataRTListForHelp(typeList);
            };
        /**
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
        MetadataRTService.prototype.getMetadataListByBizTypeId = /**
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
            function (bizTypeId, metadataTypes) {
                return this.gspMetadataService.getMetadataListByBizTypeId(bizTypeId, metadataTypes);
            };
        /**
         * @param {?} boList
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
        MetadataRTService.prototype.getMetadataListByBizTypeIdForHelp = /**
         * @param {?} boList
         * @param {?} bizTypeId
         * @param {?} metadataTypes
         * @return {?}
         */
            function (boList, bizTypeId, metadataTypes) {
                if (boList === undefined) {
                    boList = '';
                }
                if (bizTypeId === undefined) {
                    bizTypeId = '';
                }
                return this.gspMetadataService.getMetadataListByBizTypeIdForHelp(boList, bizTypeId, metadataTypes);
            };
        // 获根据Id取指定元数据
        // 获根据Id取指定元数据
        /**
         * @param {?} metadataID
         * @return {?}
         */
        MetadataRTService.prototype.GetMetadataRT =
            // 获根据Id取指定元数据
            /**
             * @param {?} metadataID
             * @return {?}
             */
            function (metadataID) {
                return this.gspMetadataService.GetMetadataRT(metadataID);
            };
        MetadataRTService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        MetadataRTService.ctorParameters = function () {
            return [
                { type: GSPMetadataRTService }
            ];
        };
        return MetadataRTService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadata4refdto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Metadata4RefDto = /** @class */ (function () {
        function Metadata4RefDto() {
        }
        return Metadata4RefDto;
    }());
    var MetadataPackageHeader = /** @class */ (function () {
        function MetadataPackageHeader() {
        }
        return MetadataPackageHeader;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatart-select/components/selectmetadatart/selectmetadatart.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectMetadataRTComponent = /** @class */ (function () {
        function SelectMetadataRTComponent(metadataService, modalService, resolver, injector) {
            this.metadataService = metadataService;
            this.modalService = modalService;
            this.resolver = resolver;
            this.injector = injector;
            this.selectedMetadata = new core.EventEmitter();
            this.confirm = '确定';
            this.cancel = '取消';
            this.closeModalEmitter = new core.EventEmitter();
            this.notifyService = this.injector.get(uiNotify.NotifyService, null);
            if (localStorage.getItem('languageCode') === 'en') {
                this.confirm = 'OK';
                this.cancel = 'Cancel';
            }
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        SelectMetadataRTComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        SelectMetadataRTComponent.prototype.LoadMetadata = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.metadataService.metadatas == null || this.metadataService.metadatas.length <= 0) {
                    if (this.notifyService) {
                        this.notifyService.warning("请先选中元数据。");
                        return;
                    }
                    else {
                        console.log("请先选中元数据。");
                        return;
                    }
                }
                /** @type {?} */
                var Id = this.metadataService.metadatas[0].ID;
                this.metadataService.GetMetadataRT(Id).subscribe(( /**
                 * @param {?} templates
                 * @return {?}
                 */function (templates) {
                    /** @type {?} */
                    var metadata4Ref = new Metadata4RefDto();
                    metadata4Ref.metadata = templates;
                    metadata4Ref.packageHeader = new MetadataPackageHeader();
                    _this.selectedMetadata.emit(metadata4Ref);
                    _this.hideModal();
                }));
                // 清空缓存
                this.metadataService.clearMetadataRT();
            };
        /**
         * @return {?}
         */
        SelectMetadataRTComponent.prototype.hideModal = /**
         * @return {?}
         */
            function () {
                this.closeModalEmitter.emit();
            };
        /**
         * @param {?} classifier
         * @return {?}
         */
        SelectMetadataRTComponent.prototype.onSelectedChange = /**
         * @param {?} classifier
         * @return {?}
         */
            function (classifier) {
                this.classifier = classifier;
            };
        SelectMetadataRTComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'app-select-metadatart',
                        template: "<div class=\"farris-main-area flex-column farris-overflow-hidden\">\r\n    <div class=\"d-flex flex-fill flex-row farris-overflow-hidden\">\r\n        <app-metadatalist class=\"d-flex flex-fill\" style=\"width: 100%;\" [typeList]=\"typeList\" [boId]=\"boId\" [bizTypeId]=\"bizTypeId\"></app-metadatalist>\r\n    </div>\r\n\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"LoadMetadata()\">{{confirm}}</button>\r\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"hideModal()\">{{cancel}}</button>\r\n    </div>\r\n</div>",
                        styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
                    }] }
        ];
        /** @nocollapse */
        SelectMetadataRTComponent.ctorParameters = function () {
            return [
                { type: MetadataRTService },
                { type: uiModal.BsModalService },
                { type: core.ComponentFactoryResolver },
                { type: core.Injector }
            ];
        };
        SelectMetadataRTComponent.propDecorators = {
            typeList: [{ type: core.Input }],
            boId: [{ type: core.Input }],
            bizTypeId: [{ type: core.Input }],
            closeModalEmitter: [{ type: core.Output }],
            selectedMetadata: [{ type: core.Output }]
        };
        return SelectMetadataRTComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatart-select/components/metadatartlist/metadatartlist.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplatemetadataRTComponent = /** @class */ (function () {
        function TemplatemetadataRTComponent(metadataService) {
            this.metadataService = metadataService;
            this.nameSpace = '命名空间';
            this.name = '名称';
            this.fileName = '文件名';
            this.type = '类型';
            this.businessObject = '业务对象';
            // tslint:disable-next-line:member-ordering
            this.state = {
                skip: 0,
                take: 50,
                // Initial filter descriptor
                filter: {
                    logic: 'and',
                    filters: []
                }
            };
            // tslint:disable-next-line:member-ordering
            this.selectableSetting = { mode: 'single', checkboxOnly: false };
        }
        /**
         * @return {?}
         */
        TemplatemetadataRTComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.data = [];
            };
        /**
         * @param {?} state
         * @return {?}
         */
        TemplatemetadataRTComponent.prototype.dataStateChange = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                this.state = state;
                this.gridData = kendoDataQuery.process(this.data, this.state);
            };
        /**
         * @return {?}
         */
        TemplatemetadataRTComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (localStorage.getItem('languageCode') === 'en') {
                    this.nameSpace = 'NameSpace';
                    this.name = 'Name';
                    this.fileName = 'FileName';
                    this.type = 'Type';
                    this.businessObject = 'BusinessObject';
                }
                /** @type {?} */
                var metadatadto = [];
                if (this.boId || this.bizTypeId) {
                    this.metadataService.getMetadataListByBizTypeIdForHelp(this.boId, this.bizTypeId, this.typeList).subscribe(( /**
                     * @param {?} templates
                     * @return {?}
                     */function (templates) {
                        if (templates) {
                            templates.forEach(( /**
                             * @param {?} item
                             * @return {?}
                             */function (item) {
                                metadatadto.push(item.metadata);
                            }));
                        }
                        _this.data = metadatadto;
                        _this.gridData = kendoDataQuery.process(_this.data, _this.state);
                    }));
                }
                else {
                    this.metadataService.GetMetadataRTListForHelp(this.typeList).subscribe(( /**
                     * @param {?} templates
                     * @return {?}
                     */function (templates) {
                        if (templates) {
                            templates.forEach(( /**
                             * @param {?} item
                             * @return {?}
                             */function (item) {
                                metadatadto.push(item.metadata);
                            }));
                        }
                        _this.data = metadatadto;
                        _this.gridData = kendoDataQuery.process(_this.data, _this.state);
                    }));
                }
            };
        // 选中元数据后的事件处理
        // 选中元数据后的事件处理
        /**
         * @param {?} event
         * @return {?}
         */
        TemplatemetadataRTComponent.prototype.onSelectionChange =
            // 选中元数据后的事件处理
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.selectedRows.length > 0) {
                    this.metadataService.clearMetadataRT();
                    /** @type {?} */
                    var metadata = {
                        ID: event.selectedRows[0].dataItem.id,
                        RelativePath: event.selectedRows[0].dataItem.relativePath,
                        FileName: event.selectedRows[0].dataItem.fileName
                    };
                    this.metadataService.addMetadataRT(metadata);
                }
            };
        TemplatemetadataRTComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'app-metadatalist',
                        template: "<kendo-grid [data]=\"gridData\" \r\n[selectable]=\"selectableSetting\" \r\n(selectionChange)=onSelectionChange($event)    \r\n[pageSize]=\"state.take\"\r\n[skip]=\"state.skip\"\r\n[sort]=\"state.sort\"\r\n[filter]=\"state.filter\"\r\n[sortable]=\"false\"\r\n[pageable]=\"true\"\r\n[filterable]=\"true\"\r\n[resizable]=\"true\"\r\n(dataStateChange)=dataStateChange($event)>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"nameSpace\" title={{nameSpace}} width=\"210\">\r\n</kendo-grid-column>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"name\" title={{name}} width=\"200\">\r\n</kendo-grid-column>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"fileName\" title={{fileName}} width=\"200\">\r\n</kendo-grid-column>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"type\" title={{type}} width=\"150\">\r\n</kendo-grid-column>\r\n<kendo-grid-column field=\"bizobjectID\" title={{businessObject}} width=\"150\">\r\n</kendo-grid-column>\r\n</kendo-grid>",
                        styles: [".templateSelector{width:100%;height:475px;border:.5px solid #ddd}.templateDescription{width:200px;height:475px;border:.5px solid #ddd}.templateInfo{display:flex}"]
                    }] }
        ];
        /** @nocollapse */
        TemplatemetadataRTComponent.ctorParameters = function () {
            return [
                { type: MetadataRTService }
            ];
        };
        TemplatemetadataRTComponent.propDecorators = {
            typeList: [{ type: core.Input }],
            boId: [{ type: core.Input }],
            bizTypeId: [{ type: core.Input }]
        };
        return TemplatemetadataRTComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatart-select/metadatart-select.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { FarrisDialogModule } from '@farris/ui-dialog';
    var MetadataRTSelectModule = /** @class */ (function () {
        function MetadataRTSelectModule() {
        }
        MetadataRTSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            kendoAngularTreeview.TreeViewModule,
                            kendoAngularGrid.GridModule,
                            uiNotify.NotifyModule.forRoot()
                            // FarrisDialogModule
                        ],
                        exports: [
                            SelectMetadataRTComponent,
                            uiNotify.NotifyModule
                        ],
                        providers: [
                            MetadataRTService
                        ],
                        // 服务提供者
                        declarations: [SelectMetadataRTComponent, TemplatemetadataRTComponent],
                        entryComponents: [SelectMetadataRTComponent]
                    },] }
        ];
        /** @nocollapse */
        MetadataRTSelectModule.ctorParameters = function () { return []; };
        return MetadataRTSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadata-rtservice.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} http
     * @param {?} url
     * @return {?}
     */
    function factory(http$$1, url) {
        return new GSPMetadataRTService(http$$1, url);
    }
    var GSPMetadataRTServiceModule = /** @class */ (function () {
        function GSPMetadataRTServiceModule() {
        }
        /**
         * @param {?} url
         * @return {?}
         */
        GSPMetadataRTServiceModule.forRoot = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                return {
                    ngModule: GSPMetadataRTServiceModule,
                    providers: [
                        { provide: 'url', useValue: url },
                        { provide: GSPMetadataRTService, useFactory: factory, deps: [http.HttpClient, 'url'] }
                    ]
                };
            };
        GSPMetadataRTServiceModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            http.HttpClientModule
                        ],
                        exports: [],
                        providers: []
                    },] }
        ];
        return GSPMetadataRTServiceModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatadto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataDto$1 = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function MetadataDto(id, nameSpace, code, name, fileName, type, bizobjectID, relativePath, extendProperty, content) {
            this.id = id;
            this.nameSpace = nameSpace;
            this.code = code;
            this.name = name;
            this.fileName = fileName;
            this.type = type;
            this.bizobjectID = bizobjectID;
            this.relativePath = relativePath;
            this.extendProperty = extendProperty;
            this.content = content;
        }
        return MetadataDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadatapackagedto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataPackageDto = /** @class */ (function () {
        function MetadataPackageDto(packageName, packageVersion, packageLocation, projectPath) {
            this.packageName = packageName;
            this.projectPath = projectPath;
            this.packageVersion = packageVersion;
            this.packageLocation = packageLocation;
        }
        return MetadataPackageDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: metadata/metadataprojectdto.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetadataProjectDto = /** @class */ (function () {
        // tslint:disable-next-line:max-line-length
        function MetadataProjectDto(packageName, projectPath, projectName, projectNameSpace, depPackageName, depPackageVersion, depPackageLocation) {
            this.packageName = packageName;
            this.projectName = projectName;
            this.projectPath = projectPath;
            this.projectNameSpace = projectNameSpace;
            this.depPackageName = depPackageName;
            this.depPackageVersion = depPackageVersion;
            this.depPackageLocation = depPackageLocation;
        }
        return MetadataProjectDto;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: gsp-lcm-metadatart-selector.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.MetadataRTSelectModule = MetadataRTSelectModule;
    exports.SelectMetadataRTComponent = SelectMetadataRTComponent;
    exports.GSPMetadataRTServiceModule = GSPMetadataRTServiceModule;
    exports.GSPMetadataRTService = GSPMetadataRTService;
    exports.MetadataDto = MetadataDto$1;
    exports.Metadata4RefDto = Metadata4RefDto;
    exports.MetadataPackageDto = MetadataPackageDto;
    exports.MetadataProjectDto = MetadataProjectDto;
    exports.ɵa = factory;
    exports.ɵc = TemplatemetadataRTComponent;
    exports.ɵb = MetadataRTService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-lcm-metadatart-selector.umd.js.map