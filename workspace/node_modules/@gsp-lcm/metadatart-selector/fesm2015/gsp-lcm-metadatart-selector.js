import { CommonModule } from '@angular/common';
import { Observable } from 'rxjs/Observable';
import { BsModalService } from '@farris/ui-modal';
import { process } from '@progress/kendo-data-query';
import { FormsModule } from '@angular/forms';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { GridModule } from '@progress/kendo-angular-grid';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { Injectable, Inject, Component, Input, Output, EventEmitter, ComponentFactoryResolver, Injector, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata.rtservice.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GSPMetadataRTService {
    /**
     * @param {?} httpClient
     * @param {?} url
     */
    constructor(httpClient, url) {
        this.httpClient = httpClient;
        this.url = url;
        // tslint:disable-next-line:variable-name
        this.MetadataRT_Base_Path = '/api/runtime/lcm/v1.0/rt-metadatas';
        // tslint:disable-next-line:variable-name
        this.MetadataBizType_Base_Path = '/api/runtime/lcm/v1.0/metadata-biztypes';
        this.Server_IP = (url === null || url === undefined) ? 'http://10.24.19.140:5000' : url;
    }
    /**
     * 元数据运行时服务
     * @param {?} metadataID
     * @return {?}
     */
    GetMetadataRT(metadataID) {
        /** @type {?} */
        const url = this.Server_IP + this.MetadataRT_Base_Path + '/' + metadataID;
        return this.httpClient.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTList(typeList) {
        /** @type {?} */
        const url = this.Server_IP + this.MetadataRT_Base_Path + '?metadataTypes=' + typeList;
        return this.httpClient.get(url);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTListForHelp(typeList) {
        /** @type {?} */
        const url = this.Server_IP + this.MetadataRT_Base_Path + '/helper?metadataTypes=' + typeList;
        return this.httpClient.get(url);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    getMetadataListByBizTypeId(bizTypeId, metadataTypes) {
        /** @type {?} */
        const url = this.Server_IP + this.MetadataBizType_Base_Path + '?bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
        return this.httpClient.get(url);
    }
    /**
     * @param {?} boList
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    getMetadataListByBizTypeIdForHelp(boList, bizTypeId, metadataTypes) {
        /** @type {?} */
        const url = this.Server_IP + this.MetadataBizType_Base_Path + '/helper?boList=' + boList + '&bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
        return this.httpClient.get(url);
    }
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    GetMetadataTypeList() {
        /** @type {?} */
        const url = this.Server_IP + this.MetadataRT_Base_Path + '/typeList';
        return this.httpClient.get(url);
    }
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    GetPostfix(metadataType) {
        this.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        typeList => {
            typeList.forEach((/**
             * @param {?} type
             * @return {?}
             */
            type => {
                if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                    return type.postfix;
                }
            }));
        }));
        return new Observable();
    }
}
GSPMetadataRTService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GSPMetadataRTService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Inject, args: ['url',] }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select/metadatart.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataRTService {
    /**
     * @param {?} gspMetadataService
     */
    constructor(gspMetadataService) {
        this.gspMetadataService = gspMetadataService;
        this.metadatas = [];
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    addMetadataRT(metadata) {
        this.metadatas.push(metadata);
    }
    /**
     * @return {?}
     */
    clearMetadataRT() {
        this.metadatas = [];
    }
    // 根据类型获取Cloud Server下所有的元数据
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTList(typeList) {
        return this.gspMetadataService.GetMetadataRTList(typeList);
    }
    /**
     * @param {?} typeList
     * @return {?}
     */
    GetMetadataRTListForHelp(typeList) {
        return this.gspMetadataService.GetMetadataRTListForHelp(typeList);
    }
    /**
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    getMetadataListByBizTypeId(bizTypeId, metadataTypes) {
        return this.gspMetadataService.getMetadataListByBizTypeId(bizTypeId, metadataTypes);
    }
    /**
     * @param {?} boList
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    getMetadataListByBizTypeIdForHelp(boList, bizTypeId, metadataTypes) {
        if (boList === undefined) {
            boList = '';
        }
        if (bizTypeId === undefined) {
            bizTypeId = '';
        }
        return this.gspMetadataService.getMetadataListByBizTypeIdForHelp(boList, bizTypeId, metadataTypes);
    }
    // 获根据Id取指定元数据
    /**
     * @param {?} metadataID
     * @return {?}
     */
    GetMetadataRT(metadataID) {
        return this.gspMetadataService.GetMetadataRT(metadataID);
    }
}
MetadataRTService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MetadataRTService.ctorParameters = () => [
    { type: GSPMetadataRTService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata4refdto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Metadata4RefDto {
}
class MetadataPackageHeader {
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select/components/selectmetadatart/selectmetadatart.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectMetadataRTComponent {
    /**
     * @param {?} metadataService
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} injector
     */
    constructor(metadataService, modalService, resolver, injector) {
        this.metadataService = metadataService;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.selectedMetadata = new EventEmitter();
        this.confirm = '确定';
        this.cancel = '取消';
        this.closeModalEmitter = new EventEmitter();
        this.notifyService = this.injector.get(NotifyService, null);
        if (localStorage.getItem('languageCode') === 'en') {
            this.confirm = 'OK';
            this.cancel = 'Cancel';
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    LoadMetadata() {
        if (this.metadataService.metadatas == null || this.metadataService.metadatas.length <= 0) {
            if (this.notifyService) {
                this.notifyService.warning("请先选中元数据。");
                return;
            }
            else {
                console.log("请先选中元数据。");
                return;
            }
        }
        /** @type {?} */
        const Id = this.metadataService.metadatas[0].ID;
        this.metadataService.GetMetadataRT(Id).subscribe((/**
         * @param {?} templates
         * @return {?}
         */
        templates => {
            /** @type {?} */
            const metadata4Ref = new Metadata4RefDto();
            metadata4Ref.metadata = templates;
            metadata4Ref.packageHeader = new MetadataPackageHeader();
            this.selectedMetadata.emit(metadata4Ref);
            this.hideModal();
        }));
        // 清空缓存
        this.metadataService.clearMetadataRT();
    }
    /**
     * @return {?}
     */
    hideModal() {
        this.closeModalEmitter.emit();
    }
    /**
     * @param {?} classifier
     * @return {?}
     */
    onSelectedChange(classifier) {
        this.classifier = classifier;
    }
}
SelectMetadataRTComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-select-metadatart',
                template: "<div class=\"farris-main-area flex-column farris-overflow-hidden\">\r\n    <div class=\"d-flex flex-fill flex-row farris-overflow-hidden\">\r\n        <app-metadatalist class=\"d-flex flex-fill\" style=\"width: 100%;\" [typeList]=\"typeList\" [boId]=\"boId\" [bizTypeId]=\"bizTypeId\"></app-metadatalist>\r\n    </div>\r\n\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"LoadMetadata()\">{{confirm}}</button>\r\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"hideModal()\">{{cancel}}</button>\r\n    </div>\r\n</div>",
                styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
            }] }
];
/** @nocollapse */
SelectMetadataRTComponent.ctorParameters = () => [
    { type: MetadataRTService },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
SelectMetadataRTComponent.propDecorators = {
    typeList: [{ type: Input }],
    boId: [{ type: Input }],
    bizTypeId: [{ type: Input }],
    closeModalEmitter: [{ type: Output }],
    selectedMetadata: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select/components/metadatartlist/metadatartlist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TemplatemetadataRTComponent {
    /**
     * @param {?} metadataService
     */
    constructor(metadataService) {
        this.metadataService = metadataService;
        this.nameSpace = '命名空间';
        this.name = '名称';
        this.fileName = '文件名';
        this.type = '类型';
        this.businessObject = '业务对象';
        // tslint:disable-next-line:member-ordering
        this.state = {
            skip: 0,
            take: 50,
            // Initial filter descriptor
            filter: {
                logic: 'and',
                filters: []
            }
        };
        // tslint:disable-next-line:member-ordering
        this.selectableSetting = { mode: 'single', checkboxOnly: false };
    }
    /**
     * @return {?}
     */
    clear() {
        this.data = [];
    }
    /**
     * @param {?} state
     * @return {?}
     */
    dataStateChange(state) {
        this.state = state;
        this.gridData = process(this.data, this.state);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (localStorage.getItem('languageCode') === 'en') {
            this.nameSpace = 'NameSpace';
            this.name = 'Name';
            this.fileName = 'FileName';
            this.type = 'Type';
            this.businessObject = 'BusinessObject';
        }
        /** @type {?} */
        const metadatadto = [];
        if (this.boId || this.bizTypeId) {
            this.metadataService.getMetadataListByBizTypeIdForHelp(this.boId, this.bizTypeId, this.typeList).subscribe((/**
             * @param {?} templates
             * @return {?}
             */
            templates => {
                if (templates) {
                    templates.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        metadatadto.push(item.metadata);
                    }));
                }
                this.data = metadatadto;
                this.gridData = process(this.data, this.state);
            }));
        }
        else {
            this.metadataService.GetMetadataRTListForHelp(this.typeList).subscribe((/**
             * @param {?} templates
             * @return {?}
             */
            templates => {
                if (templates) {
                    templates.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        metadatadto.push(item.metadata);
                    }));
                }
                this.data = metadatadto;
                this.gridData = process(this.data, this.state);
            }));
        }
    }
    // 选中元数据后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    onSelectionChange(event) {
        if (event.selectedRows.length > 0) {
            this.metadataService.clearMetadataRT();
            /** @type {?} */
            const metadata = {
                ID: event.selectedRows[0].dataItem.id,
                RelativePath: event.selectedRows[0].dataItem.relativePath,
                FileName: event.selectedRows[0].dataItem.fileName
            };
            this.metadataService.addMetadataRT(metadata);
        }
    }
}
TemplatemetadataRTComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-metadatalist',
                template: "<kendo-grid [data]=\"gridData\" \r\n[selectable]=\"selectableSetting\" \r\n(selectionChange)=onSelectionChange($event)    \r\n[pageSize]=\"state.take\"\r\n[skip]=\"state.skip\"\r\n[sort]=\"state.sort\"\r\n[filter]=\"state.filter\"\r\n[sortable]=\"false\"\r\n[pageable]=\"true\"\r\n[filterable]=\"true\"\r\n[resizable]=\"true\"\r\n(dataStateChange)=dataStateChange($event)>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"nameSpace\" title={{nameSpace}} width=\"210\">\r\n</kendo-grid-column>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"name\" title={{name}} width=\"200\">\r\n</kendo-grid-column>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"fileName\" title={{fileName}} width=\"200\">\r\n</kendo-grid-column>\r\n<kendo-grid-column [headerStyle]=\"{'border-right': '1px solid #d9d9d9'}\" field=\"type\" title={{type}} width=\"150\">\r\n</kendo-grid-column>\r\n<kendo-grid-column field=\"bizobjectID\" title={{businessObject}} width=\"150\">\r\n</kendo-grid-column>\r\n</kendo-grid>",
                styles: [".templateSelector{width:100%;height:475px;border:.5px solid #ddd}.templateDescription{width:200px;height:475px;border:.5px solid #ddd}.templateInfo{display:flex}"]
            }] }
];
/** @nocollapse */
TemplatemetadataRTComponent.ctorParameters = () => [
    { type: MetadataRTService }
];
TemplatemetadataRTComponent.propDecorators = {
    typeList: [{ type: Input }],
    boId: [{ type: Input }],
    bizTypeId: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatart-select/metadatart-select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { FarrisDialogModule } from '@farris/ui-dialog';
class MetadataRTSelectModule {
    constructor() {
    }
}
MetadataRTSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    TreeViewModule,
                    GridModule,
                    NotifyModule.forRoot()
                    // FarrisDialogModule
                ],
                exports: [
                    SelectMetadataRTComponent,
                    NotifyModule
                ],
                providers: [
                    MetadataRTService
                ],
                // 服务提供者
                declarations: [SelectMetadataRTComponent, TemplatemetadataRTComponent],
                entryComponents: [SelectMetadataRTComponent]
            },] }
];
/** @nocollapse */
MetadataRTSelectModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata-rtservice.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} http
 * @param {?} url
 * @return {?}
 */
function factory(http, url) {
    return new GSPMetadataRTService(http, url);
}
class GSPMetadataRTServiceModule {
    /**
     * @param {?} url
     * @return {?}
     */
    static forRoot(url) {
        return {
            ngModule: GSPMetadataRTServiceModule,
            providers: [
                { provide: 'url', useValue: url },
                { provide: GSPMetadataRTService, useFactory: factory, deps: [HttpClient, 'url'] }
            ]
        };
    }
}
GSPMetadataRTServiceModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpClientModule
                ],
                exports: [],
                providers: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatadto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataDto$1 {
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} id
     * @param {?} nameSpace
     * @param {?} code
     * @param {?} name
     * @param {?} fileName
     * @param {?} type
     * @param {?} bizobjectID
     * @param {?} relativePath
     * @param {?} extendProperty
     * @param {?} content
     */
    constructor(id, nameSpace, code, name, fileName, type, bizobjectID, relativePath, extendProperty, content) {
        this.id = id;
        this.nameSpace = nameSpace;
        this.code = code;
        this.name = name;
        this.fileName = fileName;
        this.type = type;
        this.bizobjectID = bizobjectID;
        this.relativePath = relativePath;
        this.extendProperty = extendProperty;
        this.content = content;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadatapackagedto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataPackageDto {
    /**
     * @param {?} packageName
     * @param {?} packageVersion
     * @param {?} packageLocation
     * @param {?} projectPath
     */
    constructor(packageName, packageVersion, packageLocation, projectPath) {
        this.packageName = packageName;
        this.projectPath = projectPath;
        this.packageVersion = packageVersion;
        this.packageLocation = packageLocation;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadataprojectdto.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetadataProjectDto {
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} packageName
     * @param {?} projectPath
     * @param {?} projectName
     * @param {?} projectNameSpace
     * @param {?} depPackageName
     * @param {?} depPackageVersion
     * @param {?} depPackageLocation
     */
    constructor(packageName, projectPath, projectName, projectNameSpace, depPackageName, depPackageVersion, depPackageLocation) {
        this.packageName = packageName;
        this.projectName = projectName;
        this.projectPath = projectPath;
        this.projectNameSpace = projectNameSpace;
        this.depPackageName = depPackageName;
        this.depPackageVersion = depPackageVersion;
        this.depPackageLocation = depPackageLocation;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-lcm-metadatart-selector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MetadataRTSelectModule, SelectMetadataRTComponent, GSPMetadataRTServiceModule, GSPMetadataRTService, MetadataDto$1 as MetadataDto, Metadata4RefDto, MetadataPackageDto, MetadataProjectDto, factory as ɵa, TemplatemetadataRTComponent as ɵc, MetadataRTService as ɵb };

//# sourceMappingURL=gsp-lcm-metadatart-selector.js.map