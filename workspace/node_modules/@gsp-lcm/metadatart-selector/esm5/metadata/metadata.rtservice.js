/**
 * @fileoverview added by tsickle
 * Generated from: metadata/metadata.rtservice.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
var GSPMetadataRTService = /** @class */ (function () {
    function GSPMetadataRTService(httpClient, url) {
        this.httpClient = httpClient;
        this.url = url;
        // tslint:disable-next-line:variable-name
        this.MetadataRT_Base_Path = '/api/runtime/lcm/v1.0/rt-metadatas';
        // tslint:disable-next-line:variable-name
        this.MetadataBizType_Base_Path = '/api/runtime/lcm/v1.0/metadata-biztypes';
        this.Server_IP = (url === null || url === undefined) ? 'http://10.24.19.140:5000' : url;
    }
    /**
     * 元数据运行时服务
     */
    /**
     * 元数据运行时服务
     * @param {?} metadataID
     * @return {?}
     */
    GSPMetadataRTService.prototype.GetMetadataRT = /**
     * 元数据运行时服务
     * @param {?} metadataID
     * @return {?}
     */
    function (metadataID) {
        /** @type {?} */
        var url = this.Server_IP + this.MetadataRT_Base_Path + '/' + metadataID;
        return this.httpClient.get(url);
    };
    /**
     * @param {?} typeList
     * @return {?}
     */
    GSPMetadataRTService.prototype.GetMetadataRTList = /**
     * @param {?} typeList
     * @return {?}
     */
    function (typeList) {
        /** @type {?} */
        var url = this.Server_IP + this.MetadataRT_Base_Path + '?metadataTypes=' + typeList;
        return this.httpClient.get(url);
    };
    /**
     * @param {?} typeList
     * @return {?}
     */
    GSPMetadataRTService.prototype.GetMetadataRTListForHelp = /**
     * @param {?} typeList
     * @return {?}
     */
    function (typeList) {
        /** @type {?} */
        var url = this.Server_IP + this.MetadataRT_Base_Path + '/helper?metadataTypes=' + typeList;
        return this.httpClient.get(url);
    };
    /**
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    GSPMetadataRTService.prototype.getMetadataListByBizTypeId = /**
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    function (bizTypeId, metadataTypes) {
        /** @type {?} */
        var url = this.Server_IP + this.MetadataBizType_Base_Path + '?bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
        return this.httpClient.get(url);
    };
    /**
     * @param {?} boList
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    GSPMetadataRTService.prototype.getMetadataListByBizTypeIdForHelp = /**
     * @param {?} boList
     * @param {?} bizTypeId
     * @param {?} metadataTypes
     * @return {?}
     */
    function (boList, bizTypeId, metadataTypes) {
        /** @type {?} */
        var url = this.Server_IP + this.MetadataBizType_Base_Path + '/helper?boList=' + boList + '&bizTypeId=' + bizTypeId + '&metadataTypes=' + metadataTypes;
        return this.httpClient.get(url);
    };
    // 获取元数据类型及后缀信息
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    GSPMetadataRTService.prototype.GetMetadataTypeList = 
    // 获取元数据类型及后缀信息
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = this.Server_IP + this.MetadataRT_Base_Path + '/typeList';
        return this.httpClient.get(url);
    };
    // 获取后缀
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    GSPMetadataRTService.prototype.GetPostfix = 
    // 获取后缀
    /**
     * @param {?} metadataType
     * @return {?}
     */
    function (metadataType) {
        this.GetMetadataTypeList().subscribe((/**
         * @param {?} typeList
         * @return {?}
         */
        function (typeList) {
            typeList.forEach((/**
             * @param {?} type
             * @return {?}
             */
            function (type) {
                if (metadataType.toLowerCase() === type.typeCode.toLowerCase()) {
                    return type.postfix;
                }
            }));
        }));
        return new Observable();
    };
    GSPMetadataRTService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GSPMetadataRTService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String, decorators: [{ type: Inject, args: ['url',] }] }
    ]; };
    return GSPMetadataRTService;
}());
export { GSPMetadataRTService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService.prototype.Server_IP;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService.prototype.MetadataRT_Base_Path;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService.prototype.MetadataBizType_Base_Path;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    GSPMetadataRTService.prototype.url;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEucnRzZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1sY20vbWV0YWRhdGFydC1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbIm1ldGFkYXRhL21ldGFkYXRhLnJ0c2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxEO0lBU0UsOEJBQW9CLFVBQXNCLEVBQXlCLEdBQVc7UUFBMUQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUF5QixRQUFHLEdBQUgsR0FBRyxDQUFROztRQUh0RSx5QkFBb0IsR0FBRyxvQ0FBb0MsQ0FBQzs7UUFFNUQsOEJBQXlCLEdBQUcseUNBQXlDLENBQUM7UUFFNUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzFGLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBRUksNENBQWE7Ozs7O0lBQXBCLFVBQXFCLFVBQWtCOztZQUMvQixHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLFVBQVU7UUFDekUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVNLGdEQUFpQjs7OztJQUF4QixVQUF5QixRQUFnQjs7WUFDakMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGlCQUFpQixHQUFHLFFBQVE7UUFDckYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVELHVEQUF3Qjs7OztJQUF4QixVQUF5QixRQUFnQjs7WUFDakMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLHdCQUF3QixHQUFHLFFBQVE7UUFDNUYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7Ozs7SUFHTSx5REFBMEI7Ozs7O0lBQWpDLFVBQW1DLFNBQWlCLEVBQUUsYUFBcUI7O1lBQ25FLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxhQUFhLEdBQUcsU0FBUyxHQUFHLGlCQUFpQixHQUFHLGFBQWE7UUFDM0gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7Ozs7O0lBRU0sZ0VBQWlDOzs7Ozs7SUFBeEMsVUFBeUMsTUFBYSxFQUFDLFNBQWlCLEVBQUUsYUFBcUI7O1lBQ3ZGLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxpQkFBaUIsR0FBQyxNQUFNLEdBQUMsYUFBYSxHQUFHLFNBQVMsR0FBRyxpQkFBaUIsR0FBRyxhQUFhO1FBQ3BKLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELGVBQWU7Ozs7O0lBQ2Ysa0RBQW1COzs7OztJQUFuQjs7WUFDUSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsV0FBVztRQUNwRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxPQUFPOzs7Ozs7SUFDUCx5Q0FBVTs7Ozs7O0lBQVYsVUFBVyxZQUFZO1FBQ3JCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLFFBQVE7WUFDM0MsUUFBUSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLElBQUk7Z0JBQ25CLElBQUksWUFBWSxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUU7b0JBQzlELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztpQkFDckI7WUFDSCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLFVBQVUsRUFBTyxDQUFDO0lBQy9CLENBQUM7O2dCQTNERixVQUFVOzs7O2dCQUZGLFVBQVU7NkNBVzRCLE1BQU0sU0FBQyxLQUFLOztJQW9EM0QsMkJBQUM7Q0FBQSxBQTdERCxJQTZEQztTQTVEWSxvQkFBb0I7Ozs7OztJQUcvQix5Q0FBMEI7Ozs7O0lBRTFCLG9EQUFvRTs7Ozs7SUFFcEUseURBQThFOzs7OztJQUNsRSwwQ0FBOEI7Ozs7O0lBQUUsbUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBHU1BNZXRhZGF0YVJUU2VydmljZSB7XHJcbiAgLy8g546v5aKD5Y+Y6YePXHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICBwcml2YXRlIFNlcnZlcl9JUDogc3RyaW5nO1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXHJcbiAgcHJpdmF0ZSBNZXRhZGF0YVJUX0Jhc2VfUGF0aCA9ICcvYXBpL3J1bnRpbWUvbGNtL3YxLjAvcnQtbWV0YWRhdGFzJztcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gIHByaXZhdGUgTWV0YWRhdGFCaXpUeXBlX0Jhc2VfUGF0aCA9ICcvYXBpL3J1bnRpbWUvbGNtL3YxLjAvbWV0YWRhdGEtYml6dHlwZXMnO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCwgQEluamVjdCgndXJsJykgcHJpdmF0ZSB1cmw6IHN0cmluZykge1xyXG4gICAgdGhpcy5TZXJ2ZXJfSVAgPSAodXJsID09PSBudWxsIHx8IHVybCA9PT0gdW5kZWZpbmVkKSA/ICdodHRwOi8vMTAuMjQuMTkuMTQwOjUwMDAnIDogdXJsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YWD5pWw5o2u6L+Q6KGM5pe25pyN5YqhXHJcbiAgICovXHJcblxyXG4gIHB1YmxpYyBHZXRNZXRhZGF0YVJUKG1ldGFkYXRhSUQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCB1cmwgPSB0aGlzLlNlcnZlcl9JUCArIHRoaXMuTWV0YWRhdGFSVF9CYXNlX1BhdGggKyAnLycgKyBtZXRhZGF0YUlEO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQodXJsKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBHZXRNZXRhZGF0YVJUTGlzdCh0eXBlTGlzdDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHVybCA9IHRoaXMuU2VydmVyX0lQICsgdGhpcy5NZXRhZGF0YVJUX0Jhc2VfUGF0aCArICc/bWV0YWRhdGFUeXBlcz0nICsgdHlwZUxpc3Q7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCh1cmwpO1xyXG4gIH1cclxuXHJcbiAgR2V0TWV0YWRhdGFSVExpc3RGb3JIZWxwKHR5cGVMaXN0OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgdXJsID0gdGhpcy5TZXJ2ZXJfSVAgKyB0aGlzLk1ldGFkYXRhUlRfQmFzZV9QYXRoICsgJy9oZWxwZXI/bWV0YWRhdGFUeXBlcz0nICsgdHlwZUxpc3Q7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCh1cmwpO1xyXG4gIH1cclxuXHJcblxyXG4gIHB1YmxpYyBnZXRNZXRhZGF0YUxpc3RCeUJpelR5cGVJZCggYml6VHlwZUlkOiBzdHJpbmcsIG1ldGFkYXRhVHlwZXM6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCB1cmwgPSB0aGlzLlNlcnZlcl9JUCArIHRoaXMuTWV0YWRhdGFCaXpUeXBlX0Jhc2VfUGF0aCArICc/Yml6VHlwZUlkPScgKyBiaXpUeXBlSWQgKyAnJm1ldGFkYXRhVHlwZXM9JyArIG1ldGFkYXRhVHlwZXM7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCh1cmwpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE1ldGFkYXRhTGlzdEJ5Qml6VHlwZUlkRm9ySGVscChib0xpc3Q6c3RyaW5nLGJpelR5cGVJZDogc3RyaW5nLCBtZXRhZGF0YVR5cGVzOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgdXJsID0gdGhpcy5TZXJ2ZXJfSVAgKyB0aGlzLk1ldGFkYXRhQml6VHlwZV9CYXNlX1BhdGggKyAnL2hlbHBlcj9ib0xpc3Q9Jytib0xpc3QrJyZiaXpUeXBlSWQ9JyArIGJpelR5cGVJZCArICcmbWV0YWRhdGFUeXBlcz0nICsgbWV0YWRhdGFUeXBlcztcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KHVybCk7XHJcbiAgfVxyXG5cclxuICAvLyDojrflj5blhYPmlbDmja7nsbvlnovlj4rlkI7nvIDkv6Hmga9cclxuICBHZXRNZXRhZGF0YVR5cGVMaXN0KCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCB1cmwgPSB0aGlzLlNlcnZlcl9JUCArIHRoaXMuTWV0YWRhdGFSVF9CYXNlX1BhdGggKyAnL3R5cGVMaXN0JztcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KHVybCk7XHJcbiAgfVxyXG5cclxuICAvLyDojrflj5blkI7nvIBcclxuICBHZXRQb3N0Zml4KG1ldGFkYXRhVHlwZSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICB0aGlzLkdldE1ldGFkYXRhVHlwZUxpc3QoKS5zdWJzY3JpYmUodHlwZUxpc3QgPT4ge1xyXG4gICAgICB0eXBlTGlzdC5mb3JFYWNoKHR5cGUgPT4ge1xyXG4gICAgICAgIGlmIChtZXRhZGF0YVR5cGUudG9Mb3dlckNhc2UoKSA9PT0gdHlwZS50eXBlQ29kZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHlwZS5wb3N0Zml4O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxhbnk+KCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuXHJcbiJdfQ==