import { CommonModule } from '@angular/common';
import { GridModule } from '@progress/kendo-angular-grid';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { from, of } from 'rxjs';
import { Component, Output, EventEmitter, Input, Injectable, NgModule, Injector, ComponentFactoryResolver, ViewChild, Optional, defineInjectable, inject } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { MessagerService, MessagerModule } from '@farris/ui-messager';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable
class AppModuleTreeComponent {
    constructor() {
        /**
         * 菜单明细类
         */
        this.appTreeData = [];
        this.selectKeys = [];
        /**
         * 功能菜单模块变化后后
         */
        this.appTreeChanged = new EventEmitter();
        /**
         * 树控件展开的节点值
         */
        this.expandedKeys = [];
    }
    /**
     * 变化情况
     * @param {?} changes 变化
     * @return {?}
     */
    ngOnChanges(changes) {
        // 初始化变化取消
        // 未包含appTreeData的变化
        if (!changes['appTreeData']) {
            return;
        }
        // 无效的值不予处理
        if (!changes['appTreeData'].currentValue ||
            changes['appTreeData'].currentValue.length === 0) {
            return;
        }
        // 获取到菜单数据
        from(this.appTreeData).subscribe((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (!item.parentId || item.parentId === '0') {
                item.parentId = undefined;
                if (item.layer === 1) {
                    this.expandedKeys.push(item.id);
                }
            }
        }));
        /*
         // 默认业务对象的处理
         if (!isNullOrUndefined(this.bizObjectId) && this.bizObjectId !== '') {
            // 树焦点行
            let curBizObjectId = this.bizObjectId;
            while (!isNullOrUndefined(curBizObjectId)) {
                this.expandedKeys.push(curBizObjectId);
                // 找到当前节点的付家店
                curBizObjectId = this.data.find(item => item['id'] === curBizObjectId)['parentID'];
            }
            // 右侧操作变化
            this.selectKeys = [this.bizObjectId];
            setTimeout(() => {
                this.bizObjectChanged.emit(this.bizObjectId);
            }, 80);
        }
        */
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    selectChange(args) {
        /** @type {?} */
        const curApp = args.dataItem;
        // 首次触发
        if (this.selectKeys == null || this.selectKeys.length === 0) {
            this.appTreeChanged.emit(curApp);
        }
        else {
            // 这个事件里还不会对selectedkeys数组赋值，是上一个状态的
            /** @type {?} */
            const lastAppId = this.selectKeys[0];
            /** @type {?} */
            const curAppId = curApp.id;
            // 变化的情况下触发
            if (lastAppId !== curAppId) {
                this.appTreeChanged.emit(curApp);
            }
        }
    }
}
AppModuleTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-module-tree',
                template: "<div class=\"d-flex flex-column flex-fill pt-2 pb-2\" style=\"height: 100%\">\r\n    <kendo-treeview [nodes]=\"appTreeData\" textField=\"name\" kendoTreeViewExpandable kendoTreeViewFlatDataBinding\r\n        idField=\"id\" parentIdField=\"parentId\" kendoTreeViewSelectable [selectBy]=\"'id'\"\r\n        [(selectedKeys)]=\"this.selectKeys\" [(expandedKeys)]=\"expandedKeys\" [expandBy]=\"'id'\"\r\n        (selectionChange)=\"selectChange($event)\">\r\n    </kendo-treeview>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
AppModuleTreeComponent.ctorParameters = () => [];
AppModuleTreeComponent.propDecorators = {
    appTreeData: [{ type: Input }],
    bizObjectId: [{ type: Input }],
    appTreeChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RtfUIWebapiService {
    constructor() { }
    /**
     * 菜单api地址
     * @return {?}
     */
    get functionsApi() {
        return '/api/runtime/sys/v1.0/gspapp/all';
    }
    /**
     * 带有BO数据的应用 访问地址
     * @return {?}
     */
    get appsWithBOApi() {
        return '/api/runtime/sys/v1.0/gspapp/allAppsBO';
    }
    /**
     * 业务对象api地址
     * @return {?}
     */
    get bizObjectApi() {
        return '/api/dev/main/v1.0/business-objects';
    }
    /**
     * Http头信息
     * @return {?}
     */
    get httpHeader() {
        /** @type {?} */
        const options = {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                SessionId: this.sessionId
            },
            responseType: 'json'
        };
        return options;
    }
}
RtfUIWebapiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RtfUIWebapiService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RtfAppService {
    /**
     * @param {?} rtfCommon
     * @param {?} httpClient
     */
    constructor(rtfCommon, httpClient) {
        this.rtfCommon = rtfCommon;
        this.httpClient = httpClient;
    }
    /**
     * 获取功能菜单操作
     * @return {?}
     */
    getAppList() {
        /** @type {?} */
        const url = this.rtfCommon.functionsApi;
        /** @type {?} */
        const header = this.rtfCommon.httpHeader;
        return this.httpClient.get(url, header);
    }
    /**
     * 获取包含BO数据的应用数据
     * @return {?}
     */
    getAppListWithBizObjectData() {
        /** @type {?} */
        const url = this.rtfCommon.appsWithBOApi;
        /** @type {?} */
        const header = this.rtfCommon.httpHeader;
        return this.httpClient.get(url, header);
    }
    /**
     * 获取多语资源文件
     * @param {?} url
     * @return {?}
     */
    getI18nJson(url) {
        /** @type {?} */
        const header = this.rtfCommon.httpHeader;
        return this.httpClient.get(url, header);
    }
}
RtfAppService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RtfAppService.ctorParameters = () => [
    { type: RtfUIWebapiService },
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// WARNING: interface has both a type and a value, skipping emit
class I18NresourceService {
    /**
     * @param {?} rtfAppService
     */
    constructor(rtfAppService) {
        this.rtfAppService = rtfAppService;
    }
    /**
     * @return {?}
     */
    getI18nJson() {
        if (this.i18nObj) {
            return of(this.i18nObj);
        }
        /** @type {?} */
        const url = this.getI18nJsonApi(null);
        return this.rtfAppService.getI18nJson(url);
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getI18nJsonApi(lang) {
        // const curLang = lang || 'zh-CHS';
        /** @type {?} */
        const curLang = 'zh-CHS';
        return `/platform/runtime/sys/web/assets/i18n/apphelp/${curLang}.json`;
    }
}
I18NresourceService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
I18NresourceService.ctorParameters = () => [
    { type: RtfAppService }
];
/** @nocollapse */ I18NresourceService.ngInjectableDef = defineInjectable({ factory: function I18NresourceService_Factory() { return new I18NresourceService(inject(RtfAppService)); }, token: I18NresourceService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const i18nAppHelpInfo = {
    'zh-CHS': {
        TitleName: '应用帮助',
        EntranceList: '入口列表',
        Code: '编号',
        Name: '名称',
        Entrance: '入口',
        Confirm: '确认',
        Cancel: '取消'
    },
    'zh-CHT': {
        TitleName: '應用幫助',
        EntranceList: '入口列表',
        Code: '編號',
        Name: '名稱',
        Entrance: '入口',
        Confirm: '確認',
        Cancel: '取消'
    },
    en: {
        TitleName: 'Application Help',
        EntranceList: 'EntranceList',
        Code: 'Code',
        Name: 'Name',
        Entrance: 'Entrance',
        Confirm: 'Confirm',
        Cancel: 'Cancel'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 系统管理：功能操作左树有、右列表展示
 */
// tslint:disable
class RtfAppComponent {
    /**
     * @param {?} rtfAppService
     * @param {?} i18nService
     * @param {?} farrisMsg
     */
    constructor(rtfAppService, i18nService, farrisMsg) {
        this.rtfAppService = rtfAppService;
        this.i18nService = i18nService;
        this.farrisMsg = farrisMsg;
        /**
         * 确认事件
         */
        this.afterConfirm = new EventEmitter();
        /**
         * 关闭事件
         */
        this.afterCancle = new EventEmitter();
        this.dataarray = [];
        /**
         * 当前选中数据
         */
        this.curSelectedKeys = [];
        this.title = '';
        this.i18nEntity = {};
        if (!i18nService) {
            this.i18nService = new I18NresourceService(rtfAppService);
        }
        // this.i18nEntityInit();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.selectableSettings = {
            checkboxOnly: true,
            // 默认单选
            mode: !this.gridSelectMode ? 'single' : this.gridSelectMode,
            enabled: true
        };
        /*this.rtfAppService.getAppList().subscribe(
            res => {
                // 左侧树
                this.treeData = res;
                // 菜单明细数据
                const info = res.filter(item => item.layer === '4');
                info.forEach(element => {
                    this.dataarray = this.dataarray.concat(element.appInvoks);
                });
                // this.gridData = this.dataarray;
            },
            error => {
                console.log('获取失败');
            }
        );*/
        // 获取所有应用数据
        this.rtfAppService.getAppListWithBizObjectData().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.treeData = res;
            /** @type {?} */
            const appDetails = res.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => item.layer === '4' || (item.layer === '5')));
            appDetails.forEach((/**
             * @param {?} ele
             * @return {?}
             */
            ele => {
                this.dataarray = this.dataarray.concat(ele.appInvoks);
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.farrisMsg.error("获取应用数据失败");
        }));
    }
    /**
     * 搜索
     * @param {?} filterValue 查询条件
     * @return {?}
     */
    searchData(filterValue) {
        // 空的搜索是全部数据
        if (filterValue === null || filterValue === '') {
            this.gridData = this.data.concat();
            return;
        }
        /** @type {?} */
        const filter = filterValue.toLowerCase();
        // 搜索到上级时
        this.gridData = this.data.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.code.toLowerCase().includes(filter) ||
            item.name.toLowerCase().includes(filter)));
    }
    /**
     * 左侧树切换
     * @param {?} arg 对象参数
     * @return {?}
     */
    leftAppTreeChanged(arg) {
        this.selectedTreeNode = arg;
        if (!('4' === arg.layer || '5' === arg.layer)) {
            this.gridData = [];
            return;
        }
        /** @type {?} */
        const selectedId = arg && arg.id;
        // 根据父子关系过滤当前界面数据，包含上下级
        this.gridData = this.dataarray.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => selectedId && item.appId === selectedId));
    }
    /**
     * 获取选中数据
     * @return {?}
     */
    getSelectedObject() {
        /** @type {?} */
        const result = this.dataarray.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => this.curSelectedKeys && this.curSelectedKeys.findIndex((/**
         * @param {?} select
         * @return {?}
         */
        select => select === item.id)) >= 0));
        return result;
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        const result = this.getSelectedObject();
        if (this.selectedTreeNode && result && result.length > 0) {
            this.selectedTreeNode.selectedInvok = result.filter((/**
             * @param {?} inv
             * @return {?}
             */
            inv => inv && inv.appId === this.selectedTreeNode.id));
        }
        this.afterConfirm.next(this.selectedTreeNode);
        // 取消-目的是在这里让模态框消失
        this.cancle();
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.afterCancle.next();
    }
    /**
     * @return {?}
     */
    i18nEntityInitBak() {
        this.i18nService.getI18nJson().subscribe((/**
         * @param {?} entity
         * @return {?}
         */
        entity => {
            if (entity) {
                this.title = entity.TitleName;
                this.i18nEntity = entity;
                this.i18nService.i18nObj = entity;
            }
        }));
    }
    /**
     * @param {?} langCode
     * @return {?}
     */
    setCurrentLangCode(langCode) {
        this.currentLangCode = langCode;
        this.title = this.getResOnCurrentLangeContext('TitleName');
    }
    /**
     * @param {?} resKey
     * @return {?}
     */
    getResOnCurrentLangeContext(resKey) {
        /** @type {?} */
        const resValue = i18nAppHelpInfo[this.currentLangCode][resKey];
        return resValue;
    }
}
RtfAppComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-rtf-app',
                template: "<div class=\"d-flex flex-row\" style=\"\r\nwidth: 800px; \r\nborder:2px;\r\nposition:absolute;\r\ntop:0px;\r\nbottom: 0px;\r\nright:0px;\r\nleft:0px;\r\noverflow: hidden;\r\nheight: 100%;\">\r\n    <div class=\"flex-fill\">\r\n        <kendo-splitter style=\"height:100%\" orientation=\"horizontal\">\r\n            <kendo-splitter-pane size=\"40%\" min=\"20%\" max=\"50%\">\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>{{this.getResOnCurrentLangeContext('TitleName')}}</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div>\r\n                    <div class=\"flex-fill\" style=\"overflow: auto;\">\r\n                        <app-module-tree [appTreeData]=\"this.treeData\" [bizObjectId]=\"bizObjectId\"\r\n                            (appTreeChanged)=\"leftAppTreeChanged($event)\"></app-module-tree>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n            <kendo-splitter-pane style=\"flex:1 1 0px; order: 2;\">\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>{{this.getResOnCurrentLangeContext('EntranceList')}}</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div>\r\n                    \r\n                    <!-- <div class=\"clearfix mt-1 mb-1 ml-1\">\r\n            <input #filter placeholder=\"\u8F93\u5165\u7F16\u53F7\u6216\u540D\u79F0\u67E5\u627E\" type=\"text\" />\r\n            <button class=\"btn btn-sm btn-default\" (click)=\"searchData(filter.value)\">\u67E5\u627E</button>\r\n          </div> -->\r\n                    <div class=\"d-flex flex-fill\" style=\"position:relative;\">\r\n                        <kendo-grid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\"\r\n                            [kendoGridBinding]=\"gridData\" [kendoGridSelectBy]=\"'id'\" [selectedKeys]=\"curSelectedKeys\">\r\n                            <kendo-grid-checkbox-column width=\"50px\"></kendo-grid-checkbox-column>\r\n                            <kendo-grid-column field=\"code\" title=\"{{this.getResOnCurrentLangeContext( 'Code')}}\">\r\n                            </kendo-grid-column>\r\n                            <kendo-grid-column field=\"name\" title=\"{{this.getResOnCurrentLangeContext( 'Name')}}\">\r\n                            </kendo-grid-column>\r\n                            <kendo-grid-column field=\"appEntrance\"\r\n                                title=\"{{this.getResOnCurrentLangeContext( 'Entrance')}}\"></kendo-grid-column>\r\n                        </kendo-grid>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n        </kendo-splitter>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #btnOkAndCancle>\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">{{this.getResOnCurrentLangeContext('Confirm')}}</button>\r\n    <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">{{this.getResOnCurrentLangeContext('Cancel')}}</button>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
RtfAppComponent.ctorParameters = () => [
    { type: RtfAppService },
    { type: I18NresourceService, decorators: [{ type: Optional }] },
    { type: MessagerService }
];
RtfAppComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    gridSelectMode: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    afterCancle: [{ type: Output }],
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable
class RtfAppHelpComponent {
    /**
     * @param {?} rtfCommon
     * @param {?} modalService
     * @param {?} farrisMsg
     * @param {?} injector
     * @param {?} cfr
     */
    constructor(rtfCommon, modalService, farrisMsg, injector, cfr) {
        this.rtfCommon = rtfCommon;
        this.modalService = modalService;
        this.farrisMsg = farrisMsg;
        this.injector = injector;
        this.cfr = cfr;
        /**
         * 初始选中的权限对象内码
         */
        this.initSelectKeys = [];
        this.languageCode = 'zh-CHS';
        /**
         * 输出事件
         */
        this.afterHelpConfirm = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 弹出Farris模态框帮助
     * @param {?=} sessionId
     * @return {?}
     */
    showHelp(sessionId) {
        this.rtfCommon.sessionId = ' ';
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(RtfAppComponent);
        this.funcOpComp = compFactory.create(this.injector);
        // 向组件绑定语言代码
        this.funcOpComp.instance.setCurrentLangCode(this.languageCode);
        // 获取功能菜单的实例组件
        if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {
            /*this.initSelectKeys
                .forEach(key => this.funcOpComp.instance.curSelectedKeys.push(key));*/
            this.funcOpComp.instance.curSelectedKeys.push(this.initSelectKeys[0]);
        }
        // 初始化选择的业务对象
        if (this.bizObjectId && this.bizObjectId !== '') {
            this.funcOpComp.instance.bizObjectId = this.bizObjectId;
        }
        /** @type {?} */
        const modalConfig = {
            title: this.funcOpComp.instance.title,
            width: 800,
            height: 550,
            buttons: this.funcOpComp.instance.btnOkAndCancleRef,
            showButtons: true,
            showMaxButton: false,
            resizable: false
        };
        // 弹出帮助框
        this.funcOpDialog = this.modalService.show(this.funcOpComp, modalConfig);
        // 取消后
        this.funcOpComp.instance.afterCancle.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // 消失模态框
            this.funcOpDialog.close();
        }));
        // 确认后
        this.funcOpComp.instance.afterConfirm.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.afterHelpConfirm.next(res);
        }));
    }
}
RtfAppHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-rtf-application-help',
                template: "",
                styles: [""]
            }] }
];
/** @nocollapse */
RtfAppHelpComponent.ctorParameters = () => [
    { type: RtfUIWebapiService },
    { type: BsModalService },
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver }
];
RtfAppHelpComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    initSelectKeys: [{ type: Input }],
    languageCode: [{ type: Input }],
    afterHelpConfirm: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RtfAppHelpModule {
}
RtfAppHelpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    // kendo
                    GridModule,
                    LayoutModule,
                    TreeViewModule,
                    // farris
                    ModalModule.forRoot(),
                    MessagerModule.forRoot(),
                ],
                declarations: [
                    AppModuleTreeComponent,
                    RtfAppComponent,
                    RtfAppHelpComponent,
                ],
                entryComponents: [
                    RtfAppComponent
                ],
                providers: [
                    RtfUIWebapiService,
                    RtfAppService,
                    I18NresourceService
                ],
                exports: [
                    RtfAppComponent,
                    RtfAppHelpComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { RtfAppHelpModule, RtfAppHelpComponent, RtfAppComponent, RtfUIWebapiService as ɵc, AppModuleTreeComponent as ɵa, I18NresourceService as ɵd, RtfAppService as ɵb };

//# sourceMappingURL=gsp-sys-rtf-apphelp.js.map