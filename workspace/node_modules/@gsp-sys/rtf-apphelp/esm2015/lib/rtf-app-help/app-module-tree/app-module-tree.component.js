/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { from } from 'rxjs';
// tslint:disable
export class AppModuleTreeComponent {
    constructor() {
        /**
         * 菜单明细类
         */
        this.appTreeData = [];
        this.selectKeys = [];
        /**
         * 功能菜单模块变化后后
         */
        this.appTreeChanged = new EventEmitter();
        /**
         * 树控件展开的节点值
         */
        this.expandedKeys = [];
    }
    /**
     * 变化情况
     * @param {?} changes 变化
     * @return {?}
     */
    ngOnChanges(changes) {
        // 初始化变化取消
        // 未包含appTreeData的变化
        if (!changes['appTreeData']) {
            return;
        }
        // 无效的值不予处理
        if (!changes['appTreeData'].currentValue ||
            changes['appTreeData'].currentValue.length === 0) {
            return;
        }
        // 获取到菜单数据
        from(this.appTreeData).subscribe((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (!item.parentId || item.parentId === '0') {
                item.parentId = undefined;
                if (item.layer === 1) {
                    this.expandedKeys.push(item.id);
                }
            }
        }));
        /*
         // 默认业务对象的处理
         if (!isNullOrUndefined(this.bizObjectId) && this.bizObjectId !== '') {
            // 树焦点行
            let curBizObjectId = this.bizObjectId;
            while (!isNullOrUndefined(curBizObjectId)) {
                this.expandedKeys.push(curBizObjectId);
                // 找到当前节点的付家店
                curBizObjectId = this.data.find(item => item['id'] === curBizObjectId)['parentID'];
            }
            // 右侧操作变化
            this.selectKeys = [this.bizObjectId];
            setTimeout(() => {
                this.bizObjectChanged.emit(this.bizObjectId);
            }, 80);
        }
        */
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    selectChange(args) {
        /** @type {?} */
        const curApp = args.dataItem;
        // 首次触发
        if (this.selectKeys == null || this.selectKeys.length === 0) {
            this.appTreeChanged.emit(curApp);
        }
        else {
            // 这个事件里还不会对selectedkeys数组赋值，是上一个状态的
            /** @type {?} */
            const lastAppId = this.selectKeys[0];
            /** @type {?} */
            const curAppId = curApp.id;
            // 变化的情况下触发
            if (lastAppId !== curAppId) {
                this.appTreeChanged.emit(curApp);
            }
        }
    }
}
AppModuleTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-module-tree',
                template: "<div class=\"d-flex flex-column flex-fill pt-2 pb-2\" style=\"height: 100%\">\r\n    <kendo-treeview [nodes]=\"appTreeData\" textField=\"name\" kendoTreeViewExpandable kendoTreeViewFlatDataBinding\r\n        idField=\"id\" parentIdField=\"parentId\" kendoTreeViewSelectable [selectBy]=\"'id'\"\r\n        [(selectedKeys)]=\"this.selectKeys\" [(expandedKeys)]=\"expandedKeys\" [expandBy]=\"'id'\"\r\n        (selectionChange)=\"selectChange($event)\">\r\n    </kendo-treeview>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
AppModuleTreeComponent.ctorParameters = () => [];
AppModuleTreeComponent.propDecorators = {
    appTreeData: [{ type: Input }],
    bizObjectId: [{ type: Input }],
    appTreeChanged: [{ type: Output }]
};
if (false) {
    /**
     * 菜单明细类
     * @type {?}
     */
    AppModuleTreeComponent.prototype.appTreeData;
    /**
     * 业务对象
     * @type {?}
     */
    AppModuleTreeComponent.prototype.bizObjectId;
    /** @type {?} */
    AppModuleTreeComponent.prototype.selectKeys;
    /** @type {?} */
    AppModuleTreeComponent.prototype.currentid;
    /**
     * 功能菜单模块变化后后
     * @type {?}
     */
    AppModuleTreeComponent.prototype.appTreeChanged;
    /**
     * 树控件展开的节点值
     * @type {?}
     */
    AppModuleTreeComponent.prototype.expandedKeys;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLW1vZHVsZS10cmVlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3lzL3J0Zi1hcHBoZWxwLyIsInNvdXJjZXMiOlsibGliL3J0Zi1hcHAtaGVscC9hcHAtbW9kdWxlLXRyZWUvYXBwLW1vZHVsZS10cmVlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFFekcsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFRNUIsTUFBTSxPQUFPLHNCQUFzQjtJQWlCL0I7Ozs7UUFYQSxnQkFBVyxHQUFhLEVBQUUsQ0FBQztRQUdwQixlQUFVLEdBQWEsRUFBRSxDQUFDOzs7O1FBSWpDLG1CQUFjLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7Ozs7UUFFbEUsaUJBQVksR0FBRyxFQUFFLENBQUM7SUFHbEIsQ0FBQzs7Ozs7O0lBTUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLFVBQVU7UUFDVixvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN6QixPQUFPO1NBQ1Y7UUFDRCxXQUFXO1FBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxZQUFZO1lBQ3BDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDbEQ7WUFDRSxPQUFPO1NBQ1Y7UUFFRCxVQUFVO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxHQUFHLEVBQUU7Z0JBQ3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO2dCQUMxQixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO29CQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ25DO2FBQ0o7UUFDTCxDQUFDLEVBQ0EsQ0FBQztRQUVGOzs7Ozs7Ozs7Ozs7Ozs7O1VBZ0JFO0lBQ04sQ0FBQzs7OztJQUVELFFBQVE7SUFDUixDQUFDOzs7Ozs7SUFJRCxZQUFZLENBQUMsSUFBUzs7Y0FDWixNQUFNLEdBQVcsSUFBSSxDQUFDLFFBQVE7UUFDcEMsT0FBTztRQUNQLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BDO2FBQU07OztrQkFFRyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7O2tCQUM5QixRQUFRLEdBQUcsTUFBTSxDQUFDLEVBQUU7WUFDMUIsV0FBVztZQUNYLElBQUksU0FBUyxLQUFLLFFBQVEsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDcEM7U0FDSjtJQUNMLENBQUM7OztZQTNGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsaWZBQStDOzthQUVsRDs7Ozs7MEJBTUksS0FBSzswQkFHTCxLQUFLOzZCQUlMLE1BQU07Ozs7Ozs7SUFQUCw2Q0FDMkI7Ozs7O0lBRTNCLDZDQUE2Qjs7SUFDN0IsNENBQWlDOztJQUNqQywyQ0FBa0I7Ozs7O0lBRWxCLGdEQUNrRTs7Ozs7SUFFbEUsOENBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJ0ZkFwcCB9IGZyb20gJy4uL2VudGl0aWVzL3J0Zi1hcHAnO1xyXG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAncnhqcyc7XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZVxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLW1vZHVsZS10cmVlJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAtbW9kdWxlLXRyZWUuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vYXBwLW1vZHVsZS10cmVlLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXBwTW9kdWxlVHJlZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiPnOWNleaYjue7huexu1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgYXBwVHJlZURhdGE6IFJ0ZkFwcFtdID0gW107XHJcbiAgICAvKirkuJrliqHlr7nosaEgKi9cclxuICAgIEBJbnB1dCgpIGJpek9iamVjdElkOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgc2VsZWN0S2V5czogc3RyaW5nW10gPSBbXTtcclxuICAgIGN1cnJlbnRpZDogc3RyaW5nO1xyXG4gICAgLyoq5Yqf6IO96I+c5Y2V5qih5Z2X5Y+Y5YyW5ZCO5ZCOICovXHJcbiAgICBAT3V0cHV0KClcclxuICAgIGFwcFRyZWVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8UnRmQXBwPiA9IG5ldyBFdmVudEVtaXR0ZXI8UnRmQXBwPigpO1xyXG4gICAgLyoq5qCR5o6n5Lu25bGV5byA55qE6IqC54K55YC8ICovXHJcbiAgICBleHBhbmRlZEtleXMgPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPmOWMluaDheWGtVxyXG4gICAgICogQHBhcmFtIGNoYW5nZXMg5Y+Y5YyWXHJcbiAgICAgKi9cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICAvLyDliJ3lp4vljJblj5jljJblj5bmtohcclxuICAgICAgICAvLyDmnKrljIXlkKthcHBUcmVlRGF0YeeahOWPmOWMllxyXG4gICAgICAgIGlmICghY2hhbmdlc1snYXBwVHJlZURhdGEnXSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOaXoOaViOeahOWAvOS4jeS6iOWkhOeQhlxyXG4gICAgICAgIGlmICghY2hhbmdlc1snYXBwVHJlZURhdGEnXS5jdXJyZW50VmFsdWUgfHxcclxuICAgICAgICAgICAgY2hhbmdlc1snYXBwVHJlZURhdGEnXS5jdXJyZW50VmFsdWUubGVuZ3RoID09PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOiOt+WPluWIsOiPnOWNleaVsOaNrlxyXG4gICAgICAgIGZyb20odGhpcy5hcHBUcmVlRGF0YSkuc3Vic2NyaWJlKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWl0ZW0ucGFyZW50SWQgfHwgaXRlbS5wYXJlbnRJZCA9PT0gJzAnKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnBhcmVudElkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0ubGF5ZXIgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZGVkS2V5cy5wdXNoKGl0ZW0uaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgIC8vIOm7mOiupOS4muWKoeWvueixoeeahOWkhOeQhlxyXG4gICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHRoaXMuYml6T2JqZWN0SWQpICYmIHRoaXMuYml6T2JqZWN0SWQgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIC8vIOagkeeEpueCueihjFxyXG4gICAgICAgICAgICBsZXQgY3VyQml6T2JqZWN0SWQgPSB0aGlzLmJpek9iamVjdElkO1xyXG4gICAgICAgICAgICB3aGlsZSAoIWlzTnVsbE9yVW5kZWZpbmVkKGN1ckJpek9iamVjdElkKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHBhbmRlZEtleXMucHVzaChjdXJCaXpPYmplY3RJZCk7XHJcbiAgICAgICAgICAgICAgICAvLyDmib7liLDlvZPliY3oioLngrnnmoTku5jlrrblupdcclxuICAgICAgICAgICAgICAgIGN1ckJpek9iamVjdElkID0gdGhpcy5kYXRhLmZpbmQoaXRlbSA9PiBpdGVtWydpZCddID09PSBjdXJCaXpPYmplY3RJZClbJ3BhcmVudElEJ107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5Y+z5L6n5pON5L2c5Y+Y5YyWXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0S2V5cyA9IFt0aGlzLmJpek9iamVjdElkXTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpek9iamVjdENoYW5nZWQuZW1pdCh0aGlzLmJpek9iamVjdElkKTtcclxuICAgICAgICAgICAgfSwgODApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKirpgInkuK3ooYzmlLnlj5jlkI7op6blj5Hkuovku7YgKi9cclxuICAgIHNlbGVjdENoYW5nZShhcmdzOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBjdXJBcHA6IFJ0ZkFwcCA9IGFyZ3MuZGF0YUl0ZW07XHJcbiAgICAgICAgLy8g6aaW5qyh6Kem5Y+RXHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0S2V5cyA9PSBudWxsIHx8IHRoaXMuc2VsZWN0S2V5cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBUcmVlQ2hhbmdlZC5lbWl0KGN1ckFwcCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g6L+Z5Liq5LqL5Lu26YeM6L+Y5LiN5Lya5a+5c2VsZWN0ZWRrZXlz5pWw57uE6LWL5YC877yM5piv5LiK5LiA5Liq54q25oCB55qEXHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RBcHBJZCA9IHRoaXMuc2VsZWN0S2V5c1swXTtcclxuICAgICAgICAgICAgY29uc3QgY3VyQXBwSWQgPSBjdXJBcHAuaWQ7XHJcbiAgICAgICAgICAgIC8vIOWPmOWMlueahOaDheWGteS4i+inpuWPkVxyXG4gICAgICAgICAgICBpZiAobGFzdEFwcElkICE9PSBjdXJBcHBJZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBUcmVlQ2hhbmdlZC5lbWl0KGN1ckFwcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==