/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { RtfAppService } from '../rtf-app.service';
import * as i0 from "@angular/core";
import * as i1 from "../rtf-app.service";
// WARNING: interface has both a type and a value, skipping emit
export class I18NresourceService {
    /**
     * @param {?} rtfAppService
     */
    constructor(rtfAppService) {
        this.rtfAppService = rtfAppService;
    }
    /**
     * @return {?}
     */
    getI18nJson() {
        if (this.i18nObj) {
            return of(this.i18nObj);
        }
        /** @type {?} */
        const url = this.getI18nJsonApi(null);
        return this.rtfAppService.getI18nJson(url);
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getI18nJsonApi(lang) {
        // const curLang = lang || 'zh-CHS';
        /** @type {?} */
        const curLang = 'zh-CHS';
        return `/platform/runtime/sys/web/assets/i18n/apphelp/${curLang}.json`;
    }
}
I18NresourceService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
I18NresourceService.ctorParameters = () => [
    { type: RtfAppService }
];
/** @nocollapse */ I18NresourceService.ngInjectableDef = i0.defineInjectable({ factory: function I18NresourceService_Factory() { return new I18NresourceService(i0.inject(i1.RtfAppService)); }, token: I18NresourceService, providedIn: "root" });
if (false) {
    /** @type {?} */
    I18NresourceService.prototype.i18nObj;
    /**
     * @type {?}
     * @private
     */
    I18NresourceService.prototype.rtfAppService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4LW5yZXNvdXJjZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1zeXMvcnRmLWFwcGhlbHAvIiwic291cmNlcyI6WyJsaWIvcnRmLWFwcC1oZWxwL3NlcnZpY2UvaTE4Ti9pMTgtbnJlc291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBYyxFQUFFLEVBQVEsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBV25ELE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFJNUIsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBSSxDQUFDOzs7O0lBR3JELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0I7O2NBQ0ssR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7Ozs7SUFFRCxjQUFjLENBQUMsSUFBWTs7O2NBRWpCLE9BQU8sR0FBRyxRQUFRO1FBQ3hCLE9BQU8saURBQWlELE9BQU8sT0FBTyxDQUFDO0lBQzNFLENBQUM7OztZQXRCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFWUSxhQUFhOzs7OztJQWFsQixzQ0FBb0I7Ozs7O0lBRVIsNENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBMT0NBTEVfSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGZyb20gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUnRmQXBwU2VydmljZSB9IGZyb20gJy4uL3J0Zi1hcHAuc2VydmljZSc7XHJcblxyXG5cclxuZGVjbGFyZSB2YXIgU3lzdGVtOiBTeXN0ZW07XHJcbmludGVyZmFjZSBTeXN0ZW0ge1xyXG4gICAgaW1wb3J0KHJlcXVlc3Q6IHN0cmluZyk6IFByb21pc2U8YW55PjtcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJMThOcmVzb3VyY2VTZXJ2aWNlIHtcclxuXHJcbiAgICBwdWJsaWMgaTE4bk9iajogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcnRmQXBwU2VydmljZTogUnRmQXBwU2VydmljZSkgeyB9XHJcblxyXG5cclxuICAgIGdldEkxOG5Kc29uKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaTE4bk9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YodGhpcy5pMThuT2JqKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5nZXRJMThuSnNvbkFwaShudWxsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5ydGZBcHBTZXJ2aWNlLmdldEkxOG5Kc29uKHVybCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0STE4bkpzb25BcGkobGFuZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAvLyBjb25zdCBjdXJMYW5nID0gbGFuZyB8fCAnemgtQ0hTJztcclxuICAgICAgICBjb25zdCBjdXJMYW5nID0gJ3poLUNIUyc7XHJcbiAgICAgICAgcmV0dXJuIGAvcGxhdGZvcm0vcnVudGltZS9zeXMvd2ViL2Fzc2V0cy9pMThuL2FwcGhlbHAvJHtjdXJMYW5nfS5qc29uYDtcclxuICAgIH1cclxufVxyXG4iXX0=