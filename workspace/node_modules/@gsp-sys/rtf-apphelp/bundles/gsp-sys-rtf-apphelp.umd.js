(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@progress/kendo-angular-grid'), require('@progress/kendo-angular-layout'), require('@progress/kendo-angular-treeview'), require('rxjs'), require('@angular/core'), require('@angular/common/http'), require('@farris/ui-modal'), require('@farris/ui-messager')) :
    typeof define === 'function' && define.amd ? define('@gsp-sys/rtf-apphelp', ['exports', '@angular/common', '@progress/kendo-angular-grid', '@progress/kendo-angular-layout', '@progress/kendo-angular-treeview', 'rxjs', '@angular/core', '@angular/common/http', '@farris/ui-modal', '@farris/ui-messager'], factory) :
    (factory((global['gsp-sys'] = global['gsp-sys'] || {}, global['gsp-sys']['rtf-apphelp'] = {}),global.ng.common,global.kendoAngularGrid,global.kendoAngularLayout,global.kendoAngularTreeview,global.rxjs,global.ng.core,global.ng.common.http,global.uiModal,global.uiMessager));
}(this, (function (exports,common,kendoAngularGrid,kendoAngularLayout,kendoAngularTreeview,rxjs,i0,http,uiModal,uiMessager) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable
    var AppModuleTreeComponent = /** @class */ (function () {
        function AppModuleTreeComponent() {
            /**
             * 菜单明细类
             */
            this.appTreeData = [];
            this.selectKeys = [];
            /**
             * 功能菜单模块变化后后
             */
            this.appTreeChanged = new i0.EventEmitter();
            /**
             * 树控件展开的节点值
             */
            this.expandedKeys = [];
        }
        /**
         * 变化情况
         * @param changes 变化
         */
        /**
         * 变化情况
         * @param {?} changes 变化
         * @return {?}
         */
        AppModuleTreeComponent.prototype.ngOnChanges = /**
         * 变化情况
         * @param {?} changes 变化
         * @return {?}
         */
            function (changes) {
                var _this = this;
                // 初始化变化取消
                // 未包含appTreeData的变化
                if (!changes['appTreeData']) {
                    return;
                }
                // 无效的值不予处理
                if (!changes['appTreeData'].currentValue ||
                    changes['appTreeData'].currentValue.length === 0) {
                    return;
                }
                // 获取到菜单数据
                rxjs.from(this.appTreeData).subscribe(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (!item.parentId || item.parentId === '0') {
                        item.parentId = undefined;
                        if (item.layer === 1) {
                            _this.expandedKeys.push(item.id);
                        }
                    }
                }));
                /*
                 // 默认业务对象的处理
                 if (!isNullOrUndefined(this.bizObjectId) && this.bizObjectId !== '') {
                    // 树焦点行
                    let curBizObjectId = this.bizObjectId;
                    while (!isNullOrUndefined(curBizObjectId)) {
                        this.expandedKeys.push(curBizObjectId);
                        // 找到当前节点的付家店
                        curBizObjectId = this.data.find(item => item['id'] === curBizObjectId)['parentID'];
                    }
                    // 右侧操作变化
                    this.selectKeys = [this.bizObjectId];
                    setTimeout(() => {
                        this.bizObjectChanged.emit(this.bizObjectId);
                    }, 80);
                }
                */
            };
        /**
         * @return {?}
         */
        AppModuleTreeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**选中行改变后触发事件 */
        /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
        AppModuleTreeComponent.prototype.selectChange = /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
            function (args) {
                /** @type {?} */
                var curApp = args.dataItem;
                // 首次触发
                if (this.selectKeys == null || this.selectKeys.length === 0) {
                    this.appTreeChanged.emit(curApp);
                }
                else {
                    // 这个事件里还不会对selectedkeys数组赋值，是上一个状态的
                    /** @type {?} */
                    var lastAppId = this.selectKeys[0];
                    /** @type {?} */
                    var curAppId = curApp.id;
                    // 变化的情况下触发
                    if (lastAppId !== curAppId) {
                        this.appTreeChanged.emit(curApp);
                    }
                }
            };
        AppModuleTreeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-module-tree',
                        template: "<div class=\"d-flex flex-column flex-fill pt-2 pb-2\" style=\"height: 100%\">\r\n    <kendo-treeview [nodes]=\"appTreeData\" textField=\"name\" kendoTreeViewExpandable kendoTreeViewFlatDataBinding\r\n        idField=\"id\" parentIdField=\"parentId\" kendoTreeViewSelectable [selectBy]=\"'id'\"\r\n        [(selectedKeys)]=\"this.selectKeys\" [(expandedKeys)]=\"expandedKeys\" [expandBy]=\"'id'\"\r\n        (selectionChange)=\"selectChange($event)\">\r\n    </kendo-treeview>\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AppModuleTreeComponent.ctorParameters = function () { return []; };
        AppModuleTreeComponent.propDecorators = {
            appTreeData: [{ type: i0.Input }],
            bizObjectId: [{ type: i0.Input }],
            appTreeChanged: [{ type: i0.Output }]
        };
        return AppModuleTreeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RtfUIWebapiService = /** @class */ (function () {
        function RtfUIWebapiService() {
        }
        Object.defineProperty(RtfUIWebapiService.prototype, "functionsApi", {
            /**
             * 菜单api地址
             */
            get: /**
             * 菜单api地址
             * @return {?}
             */ function () {
                return '/api/runtime/sys/v1.0/gspapp/all';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RtfUIWebapiService.prototype, "appsWithBOApi", {
            /**
             * 带有BO数据的应用 访问地址
             */
            get: /**
             * 带有BO数据的应用 访问地址
             * @return {?}
             */ function () {
                return '/api/runtime/sys/v1.0/gspapp/allAppsBO';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RtfUIWebapiService.prototype, "bizObjectApi", {
            /**
             * 业务对象api地址
             */
            get: /**
             * 业务对象api地址
             * @return {?}
             */ function () {
                return '/api/dev/main/v1.0/business-objects';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RtfUIWebapiService.prototype, "httpHeader", {
            /**
             * Http头信息
             */
            get: /**
             * Http头信息
             * @return {?}
             */ function () {
                /** @type {?} */
                var options = {
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*',
                        SessionId: this.sessionId
                    },
                    responseType: 'json'
                };
                return options;
            },
            enumerable: true,
            configurable: true
        });
        RtfUIWebapiService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        RtfUIWebapiService.ctorParameters = function () { return []; };
        return RtfUIWebapiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RtfAppService = /** @class */ (function () {
        function RtfAppService(rtfCommon, httpClient) {
            this.rtfCommon = rtfCommon;
            this.httpClient = httpClient;
        }
        /**
         * 获取功能菜单操作
         */
        /**
         * 获取功能菜单操作
         * @return {?}
         */
        RtfAppService.prototype.getAppList = /**
         * 获取功能菜单操作
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = this.rtfCommon.functionsApi;
                /** @type {?} */
                var header = this.rtfCommon.httpHeader;
                return this.httpClient.get(url, header);
            };
        /**
         * 获取包含BO数据的应用数据
         */
        /**
         * 获取包含BO数据的应用数据
         * @return {?}
         */
        RtfAppService.prototype.getAppListWithBizObjectData = /**
         * 获取包含BO数据的应用数据
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = this.rtfCommon.appsWithBOApi;
                /** @type {?} */
                var header = this.rtfCommon.httpHeader;
                return this.httpClient.get(url, header);
            };
        /**
         * 获取多语资源文件
         */
        /**
         * 获取多语资源文件
         * @param {?} url
         * @return {?}
         */
        RtfAppService.prototype.getI18nJson = /**
         * 获取多语资源文件
         * @param {?} url
         * @return {?}
         */
            function (url) {
                /** @type {?} */
                var header = this.rtfCommon.httpHeader;
                return this.httpClient.get(url, header);
            };
        RtfAppService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        RtfAppService.ctorParameters = function () {
            return [
                { type: RtfUIWebapiService },
                { type: http.HttpClient }
            ];
        };
        return RtfAppService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // WARNING: interface has both a type and a value, skipping emit
    var I18NresourceService = /** @class */ (function () {
        function I18NresourceService(rtfAppService) {
            this.rtfAppService = rtfAppService;
        }
        /**
         * @return {?}
         */
        I18NresourceService.prototype.getI18nJson = /**
         * @return {?}
         */
            function () {
                if (this.i18nObj) {
                    return rxjs.of(this.i18nObj);
                }
                /** @type {?} */
                var url = this.getI18nJsonApi(null);
                return this.rtfAppService.getI18nJson(url);
            };
        /**
         * @param {?} lang
         * @return {?}
         */
        I18NresourceService.prototype.getI18nJsonApi = /**
         * @param {?} lang
         * @return {?}
         */
            function (lang) {
                // const curLang = lang || 'zh-CHS';
                /** @type {?} */
                var curLang = 'zh-CHS';
                return "/platform/runtime/sys/web/assets/i18n/apphelp/" + curLang + ".json";
            };
        I18NresourceService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        I18NresourceService.ctorParameters = function () {
            return [
                { type: RtfAppService }
            ];
        };
        /** @nocollapse */ I18NresourceService.ngInjectableDef = i0.defineInjectable({ factory: function I18NresourceService_Factory() { return new I18NresourceService(i0.inject(RtfAppService)); }, token: I18NresourceService, providedIn: "root" });
        return I18NresourceService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var i18nAppHelpInfo = {
        'zh-CHS': {
            TitleName: '应用帮助',
            EntranceList: '入口列表',
            Code: '编号',
            Name: '名称',
            Entrance: '入口',
            Confirm: '确认',
            Cancel: '取消'
        },
        'zh-CHT': {
            TitleName: '應用幫助',
            EntranceList: '入口列表',
            Code: '編號',
            Name: '名稱',
            Entrance: '入口',
            Confirm: '確認',
            Cancel: '取消'
        },
        en: {
            TitleName: 'Application Help',
            EntranceList: 'EntranceList',
            Code: 'Code',
            Name: 'Name',
            Entrance: 'Entrance',
            Confirm: 'Confirm',
            Cancel: 'Cancel'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 系统管理：功能操作左树有、右列表展示
     */
    // tslint:disable
    var RtfAppComponent = /** @class */ (function () {
        function RtfAppComponent(rtfAppService, i18nService, farrisMsg) {
            this.rtfAppService = rtfAppService;
            this.i18nService = i18nService;
            this.farrisMsg = farrisMsg;
            /**
             * 确认事件
             */
            this.afterConfirm = new i0.EventEmitter();
            /**
             * 关闭事件
             */
            this.afterCancle = new i0.EventEmitter();
            this.dataarray = [];
            /**
             * 当前选中数据
             */
            this.curSelectedKeys = [];
            this.title = '';
            this.i18nEntity = {};
            if (!i18nService) {
                this.i18nService = new I18NresourceService(rtfAppService);
            }
            // this.i18nEntityInit();
        }
        /**
         * @return {?}
         */
        RtfAppComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectableSettings = {
                    checkboxOnly: true,
                    // 默认单选
                    mode: !this.gridSelectMode ? 'single' : this.gridSelectMode,
                    enabled: true
                };
                /*this.rtfAppService.getAppList().subscribe(
                    res => {
                        // 左侧树
                        this.treeData = res;
                        // 菜单明细数据
                        const info = res.filter(item => item.layer === '4');
                        info.forEach(element => {
                            this.dataarray = this.dataarray.concat(element.appInvoks);
                        });
                        // this.gridData = this.dataarray;
                    },
                    error => {
                        console.log('获取失败');
                    }
                );*/
                // 获取所有应用数据
                this.rtfAppService.getAppListWithBizObjectData().subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.treeData = res;
                    /** @type {?} */
                    var appDetails = res.filter(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item.layer === '4' || (item.layer === '5'); }));
                    appDetails.forEach(( /**
                     * @param {?} ele
                     * @return {?}
                     */function (ele) {
                        _this.dataarray = _this.dataarray.concat(ele.appInvoks);
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.farrisMsg.error("获取应用数据失败");
                }));
            };
        /**
         * 搜索
         * @param filterValue 查询条件
         */
        /**
         * 搜索
         * @param {?} filterValue 查询条件
         * @return {?}
         */
        RtfAppComponent.prototype.searchData = /**
         * 搜索
         * @param {?} filterValue 查询条件
         * @return {?}
         */
            function (filterValue) {
                // 空的搜索是全部数据
                if (filterValue === null || filterValue === '') {
                    this.gridData = this.data.concat();
                    return;
                }
                /** @type {?} */
                var filter = filterValue.toLowerCase();
                // 搜索到上级时
                this.gridData = this.data.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    return item.code.toLowerCase().includes(filter) ||
                        item.name.toLowerCase().includes(filter);
                }));
            };
        /**
         * 左侧树切换
         * @param arg 对象参数
         */
        /**
         * 左侧树切换
         * @param {?} arg 对象参数
         * @return {?}
         */
        RtfAppComponent.prototype.leftAppTreeChanged = /**
         * 左侧树切换
         * @param {?} arg 对象参数
         * @return {?}
         */
            function (arg) {
                this.selectedTreeNode = arg;
                if (!('4' === arg.layer || '5' === arg.layer)) {
                    this.gridData = [];
                    return;
                }
                /** @type {?} */
                var selectedId = arg && arg.id;
                // 根据父子关系过滤当前界面数据，包含上下级
                this.gridData = this.dataarray.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return selectedId && item.appId === selectedId; }));
            };
        /**
         * 获取选中数据
         */
        /**
         * 获取选中数据
         * @return {?}
         */
        RtfAppComponent.prototype.getSelectedObject = /**
         * 获取选中数据
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var result = this.dataarray.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    return _this.curSelectedKeys && _this.curSelectedKeys.findIndex(( /**
                     * @param {?} select
                     * @return {?}
                     */function (select) { return select === item.id; })) >= 0;
                }));
                return result;
            };
        /**
         * 确认
         */
        /**
         * 确认
         * @return {?}
         */
        RtfAppComponent.prototype.confirm = /**
         * 确认
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var result = this.getSelectedObject();
                if (this.selectedTreeNode && result && result.length > 0) {
                    this.selectedTreeNode.selectedInvok = result.filter(( /**
                     * @param {?} inv
                     * @return {?}
                     */function (inv) { return inv && inv.appId === _this.selectedTreeNode.id; }));
                }
                this.afterConfirm.next(this.selectedTreeNode);
                // 取消-目的是在这里让模态框消失
                this.cancle();
            };
        /**
         * 取消
         */
        /**
         * 取消
         * @return {?}
         */
        RtfAppComponent.prototype.cancle = /**
         * 取消
         * @return {?}
         */
            function () {
                this.afterCancle.next();
            };
        /**
         * @return {?}
         */
        RtfAppComponent.prototype.i18nEntityInitBak = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.i18nService.getI18nJson().subscribe(( /**
                 * @param {?} entity
                 * @return {?}
                 */function (entity) {
                    if (entity) {
                        _this.title = entity.TitleName;
                        _this.i18nEntity = entity;
                        _this.i18nService.i18nObj = entity;
                    }
                }));
            };
        /**
         * @param {?} langCode
         * @return {?}
         */
        RtfAppComponent.prototype.setCurrentLangCode = /**
         * @param {?} langCode
         * @return {?}
         */
            function (langCode) {
                this.currentLangCode = langCode;
                this.title = this.getResOnCurrentLangeContext('TitleName');
            };
        /**
         * @param {?} resKey
         * @return {?}
         */
        RtfAppComponent.prototype.getResOnCurrentLangeContext = /**
         * @param {?} resKey
         * @return {?}
         */
            function (resKey) {
                /** @type {?} */
                var resValue = i18nAppHelpInfo[this.currentLangCode][resKey];
                return resValue;
            };
        RtfAppComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-rtf-app',
                        template: "<div class=\"d-flex flex-row\" style=\"\r\nwidth: 800px; \r\nborder:2px;\r\nposition:absolute;\r\ntop:0px;\r\nbottom: 0px;\r\nright:0px;\r\nleft:0px;\r\noverflow: hidden;\r\nheight: 100%;\">\r\n    <div class=\"flex-fill\">\r\n        <kendo-splitter style=\"height:100%\" orientation=\"horizontal\">\r\n            <kendo-splitter-pane size=\"40%\" min=\"20%\" max=\"50%\">\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>{{this.getResOnCurrentLangeContext('TitleName')}}</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div>\r\n                    <div class=\"flex-fill\" style=\"overflow: auto;\">\r\n                        <app-module-tree [appTreeData]=\"this.treeData\" [bizObjectId]=\"bizObjectId\"\r\n                            (appTreeChanged)=\"leftAppTreeChanged($event)\"></app-module-tree>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n            <kendo-splitter-pane style=\"flex:1 1 0px; order: 2;\">\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>{{this.getResOnCurrentLangeContext('EntranceList')}}</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div>\r\n                    \r\n                    <!-- <div class=\"clearfix mt-1 mb-1 ml-1\">\r\n            <input #filter placeholder=\"\u8F93\u5165\u7F16\u53F7\u6216\u540D\u79F0\u67E5\u627E\" type=\"text\" />\r\n            <button class=\"btn btn-sm btn-default\" (click)=\"searchData(filter.value)\">\u67E5\u627E</button>\r\n          </div> -->\r\n                    <div class=\"d-flex flex-fill\" style=\"position:relative;\">\r\n                        <kendo-grid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\"\r\n                            [kendoGridBinding]=\"gridData\" [kendoGridSelectBy]=\"'id'\" [selectedKeys]=\"curSelectedKeys\">\r\n                            <kendo-grid-checkbox-column width=\"50px\"></kendo-grid-checkbox-column>\r\n                            <kendo-grid-column field=\"code\" title=\"{{this.getResOnCurrentLangeContext( 'Code')}}\">\r\n                            </kendo-grid-column>\r\n                            <kendo-grid-column field=\"name\" title=\"{{this.getResOnCurrentLangeContext( 'Name')}}\">\r\n                            </kendo-grid-column>\r\n                            <kendo-grid-column field=\"appEntrance\"\r\n                                title=\"{{this.getResOnCurrentLangeContext( 'Entrance')}}\"></kendo-grid-column>\r\n                        </kendo-grid>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n        </kendo-splitter>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #btnOkAndCancle>\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">{{this.getResOnCurrentLangeContext('Confirm')}}</button>\r\n    <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">{{this.getResOnCurrentLangeContext('Cancel')}}</button>\r\n</ng-template>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RtfAppComponent.ctorParameters = function () {
            return [
                { type: RtfAppService },
                { type: I18NresourceService, decorators: [{ type: i0.Optional }] },
                { type: uiMessager.MessagerService }
            ];
        };
        RtfAppComponent.propDecorators = {
            bizObjectId: [{ type: i0.Input }],
            gridSelectMode: [{ type: i0.Input }],
            afterConfirm: [{ type: i0.Output }],
            afterCancle: [{ type: i0.Output }],
            btnOkAndCancleRef: [{ type: i0.ViewChild, args: ['btnOkAndCancle',] }]
        };
        return RtfAppComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable
    var RtfAppHelpComponent = /** @class */ (function () {
        function RtfAppHelpComponent(rtfCommon, modalService, farrisMsg, injector, cfr) {
            this.rtfCommon = rtfCommon;
            this.modalService = modalService;
            this.farrisMsg = farrisMsg;
            this.injector = injector;
            this.cfr = cfr;
            /**
             * 初始选中的权限对象内码
             */
            this.initSelectKeys = [];
            this.languageCode = 'zh-CHS';
            /**
             * 输出事件
             */
            this.afterHelpConfirm = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        RtfAppHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 弹出Farris模态框帮助
         */
        /**
         * 弹出Farris模态框帮助
         * @param {?=} sessionId
         * @return {?}
         */
        RtfAppHelpComponent.prototype.showHelp = /**
         * 弹出Farris模态框帮助
         * @param {?=} sessionId
         * @return {?}
         */
            function (sessionId) {
                var _this = this;
                this.rtfCommon.sessionId = ' ';
                /** @type {?} */
                var compFactory = this.cfr.resolveComponentFactory(RtfAppComponent);
                this.funcOpComp = compFactory.create(this.injector);
                // 向组件绑定语言代码
                this.funcOpComp.instance.setCurrentLangCode(this.languageCode);
                // 获取功能菜单的实例组件
                if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {
                    /*this.initSelectKeys
                        .forEach(key => this.funcOpComp.instance.curSelectedKeys.push(key));*/
                    this.funcOpComp.instance.curSelectedKeys.push(this.initSelectKeys[0]);
                }
                // 初始化选择的业务对象
                if (this.bizObjectId && this.bizObjectId !== '') {
                    this.funcOpComp.instance.bizObjectId = this.bizObjectId;
                }
                /** @type {?} */
                var modalConfig = {
                    title: this.funcOpComp.instance.title,
                    width: 800,
                    height: 550,
                    buttons: this.funcOpComp.instance.btnOkAndCancleRef,
                    showButtons: true,
                    showMaxButton: false,
                    resizable: false
                };
                // 弹出帮助框
                this.funcOpDialog = this.modalService.show(this.funcOpComp, modalConfig);
                // 取消后
                this.funcOpComp.instance.afterCancle.subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    // 消失模态框
                    _this.funcOpDialog.close();
                }));
                // 确认后
                this.funcOpComp.instance.afterConfirm.subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.afterHelpConfirm.next(res);
                }));
            };
        RtfAppHelpComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-rtf-application-help',
                        template: "",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RtfAppHelpComponent.ctorParameters = function () {
            return [
                { type: RtfUIWebapiService },
                { type: uiModal.BsModalService },
                { type: uiMessager.MessagerService },
                { type: i0.Injector },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        RtfAppHelpComponent.propDecorators = {
            bizObjectId: [{ type: i0.Input }],
            initSelectKeys: [{ type: i0.Input }],
            languageCode: [{ type: i0.Input }],
            afterHelpConfirm: [{ type: i0.Output }]
        };
        return RtfAppHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RtfAppHelpModule = /** @class */ (function () {
        function RtfAppHelpModule() {
        }
        RtfAppHelpModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            // kendo
                            kendoAngularGrid.GridModule,
                            kendoAngularLayout.LayoutModule,
                            kendoAngularTreeview.TreeViewModule,
                            // farris
                            uiModal.ModalModule.forRoot(),
                            uiMessager.MessagerModule.forRoot(),
                        ],
                        declarations: [
                            AppModuleTreeComponent,
                            RtfAppComponent,
                            RtfAppHelpComponent,
                        ],
                        entryComponents: [
                            RtfAppComponent
                        ],
                        providers: [
                            RtfUIWebapiService,
                            RtfAppService,
                            I18NresourceService
                        ],
                        exports: [
                            RtfAppComponent,
                            RtfAppHelpComponent
                        ]
                    },] }
        ];
        return RtfAppHelpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.RtfAppHelpModule = RtfAppHelpModule;
    exports.RtfAppHelpComponent = RtfAppHelpComponent;
    exports.RtfAppComponent = RtfAppComponent;
    exports.ɵc = RtfUIWebapiService;
    exports.ɵa = AppModuleTreeComponent;
    exports.ɵd = I18NresourceService;
    exports.ɵb = RtfAppService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-sys-rtf-apphelp.umd.js.map