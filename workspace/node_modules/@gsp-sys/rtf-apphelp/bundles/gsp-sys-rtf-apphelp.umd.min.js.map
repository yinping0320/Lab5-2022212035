{"version":3,"sources":["ng://@gsp-sys/rtf-apphelp/lib/rtf-app-help/app-module-tree/app-module-tree.component.ts","ng://@gsp-sys/rtf-apphelp/lib/common/rtf-ui-webapi.service.ts","ng://@gsp-sys/rtf-apphelp/lib/rtf-app-help/service/rtf-app.service.ts","ng://@gsp-sys/rtf-apphelp/lib/rtf-app-help/service/i18N/i18-nresource.service.ts","ng://@gsp-sys/rtf-apphelp/lib/models/i18n-model/i18n-model.ts","ng://@gsp-sys/rtf-apphelp/lib/rtf-app-help/rtf-app/rtf-app.component.ts","ng://@gsp-sys/rtf-apphelp/lib/rtf-app-help/rtf-app-help/rtf-app-help.component.ts","ng://@gsp-sys/rtf-apphelp/lib/rtf-app-help/rtf-app-help.module.ts"],"names":["AppModuleTreeComponent","this","appTreeData","selectKeys","appTreeChanged","EventEmitter","expandedKeys","prototype","ngOnChanges","changes","_this","currentValue","length","from","subscribe","item","parentId","undefined","layer","push","id","ngOnInit","selectChange","args","curApp","dataItem","emit","Component","selector","template","Input","Output","RtfUIWebapiService","Object","defineProperty","headers","Content-Type","Access-Control-Allow-Origin","SessionId","sessionId","responseType","Injectable","RtfAppService","rtfCommon","httpClient","getAppList","url","functionsApi","header","httpHeader","get","getAppListWithBizObjectData","appsWithBOApi","getI18nJson","HttpClient","I18NresourceService","rtfAppService","i18nObj","of","getI18nJsonApi","lang","providedIn","i18nAppHelpInfo","zh-CHS","TitleName","EntranceList","Code","Name","Entrance","Confirm","Cancel","zh-CHT","en","RtfAppComponent","i18nService","farrisMsg","afterConfirm","afterCancle","dataarray","curSelectedKeys","title","i18nEntity","selectableSettings","checkboxOnly","mode","gridSelectMode","enabled","res","treeData","filter","forEach","ele","concat","appInvoks","error","searchData","filterValue","toLowerCase","gridData","data","code","includes","name","leftAppTreeChanged","arg","selectedTreeNode","selectedId","appId","getSelectedObject","findIndex","select","confirm","result","selectedInvok","inv","next","cancle","i18nEntityInitBak","entity","setCurrentLangCode","langCode","currentLangCode","getResOnCurrentLangeContext","resKey","decorators","type","Optional","MessagerService","ViewChild","RtfAppHelpComponent","modalService","injector","cfr","initSelectKeys","languageCode","afterHelpConfirm","showHelp","compFactory","resolveComponentFactory","funcOpComp","create","instance","bizObjectId","modalConfig","width","height","buttons","btnOkAndCancleRef","showButtons","showMaxButton","resizable","funcOpDialog","show","close","BsModalService","Injector","ComponentFactoryResolver","RtfAppHelpModule","NgModule","imports","CommonModule","HttpClientModule","GridModule","LayoutModule","TreeViewModule","ModalModule","forRoot","MessagerModule","declarations","entryComponents","providers","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, Output, EventEmitter, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { RtfApp } from '../entities/rtf-app';\r\nimport { from } from 'rxjs';\r\n\r\n// tslint:disable\r\n@Component({\r\n    selector: 'app-module-tree',\r\n    templateUrl: './app-module-tree.component.html',\r\n    styleUrls: ['./app-module-tree.component.css']\r\n})\r\nexport class AppModuleTreeComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * èåæç»ç±»\r\n     */\r\n    @Input()\r\n    appTreeData: RtfApp[] = [];\r\n    /**ä¸å¡å¯¹è±¡ */\r\n    @Input() bizObjectId: string;\r\n    public selectKeys: string[] = [];\r\n    currentid: string;\r\n    /**åè½èåæ¨¡ååååå */\r\n    @Output()\r\n    appTreeChanged: EventEmitter<RtfApp> = new EventEmitter<RtfApp>();\r\n    /**æ æ§ä»¶å±å¼çèç¹å¼ */\r\n    expandedKeys = [];\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * ååæåµ\r\n     * @param changes åå\r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // åå§ååååæ¶\r\n        // æªåå«appTreeDataçåå\r\n        if (!changes['appTreeData']) {\r\n            return;\r\n        }\r\n        // æ æçå¼ä¸äºå¤ç\r\n        if (!changes['appTreeData'].currentValue ||\r\n            changes['appTreeData'].currentValue.length === 0\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // è·åå°èåæ°æ®\r\n        from(this.appTreeData).subscribe(item => {\r\n            if (!item.parentId || item.parentId === '0') {\r\n                item.parentId = undefined;\r\n                if (item.layer === 1) {\r\n                    this.expandedKeys.push(item.id);\r\n                }\r\n            }\r\n        }\r\n        );\r\n\r\n        /*\r\n         // é»è®¤ä¸å¡å¯¹è±¡çå¤ç\r\n         if (!isNullOrUndefined(this.bizObjectId) && this.bizObjectId !== '') {\r\n            // æ ç¦ç¹è¡\r\n            let curBizObjectId = this.bizObjectId;\r\n            while (!isNullOrUndefined(curBizObjectId)) {\r\n                this.expandedKeys.push(curBizObjectId);\r\n                // æ¾å°å½åèç¹çä»å®¶åº\r\n                curBizObjectId = this.data.find(item => item['id'] === curBizObjectId)['parentID'];\r\n            }\r\n            // å³ä¾§æä½åå\r\n            this.selectKeys = [this.bizObjectId];\r\n            setTimeout(() => {\r\n                this.bizObjectChanged.emit(this.bizObjectId);\r\n            }, 80);\r\n        }\r\n        */\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n\r\n    /**éä¸­è¡æ¹ååè§¦åäºä»¶ */\r\n    selectChange(args: any) {\r\n        const curApp: RtfApp = args.dataItem;\r\n        // é¦æ¬¡è§¦å\r\n        if (this.selectKeys == null || this.selectKeys.length === 0) {\r\n            this.appTreeChanged.emit(curApp);\r\n        } else {\r\n            // è¿ä¸ªäºä»¶éè¿ä¸ä¼å¯¹selectedkeysæ°ç»èµå¼ï¼æ¯ä¸ä¸ä¸ªç¶æç\r\n            const lastAppId = this.selectKeys[0];\r\n            const curAppId = curApp.id;\r\n            // ååçæåµä¸è§¦å\r\n            if (lastAppId !== curAppId) {\r\n                this.appTreeChanged.emit(curApp);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class RtfUIWebapiService {\r\n\r\n    /**\r\n     * èåapiå°å\r\n     */\r\n    get functionsApi(): string {\r\n        return '/api/runtime/sys/v1.0/gspapp/all';\r\n    }\r\n    /**\r\n     * å¸¦æBOæ°æ®çåºç¨ è®¿é®å°å\r\n     */\r\n    get appsWithBOApi(): string {\r\n        return '/api/runtime/sys/v1.0/gspapp/allAppsBO';\r\n    }\r\n    /**\r\n     * ä¸å¡å¯¹è±¡apiå°å\r\n     */\r\n    get bizObjectApi(): string {\r\n        return '/api/dev/main/v1.0/business-objects';\r\n    }\r\n\r\n    sessionId: string;\r\n\r\n    /**\r\n     * Httpå¤´ä¿¡æ¯\r\n     */\r\n    get httpHeader(): any {\r\n        const options: any = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': '*',\r\n                SessionId: this.sessionId\r\n            },\r\n            responseType: 'json'\r\n        };\r\n        return options;\r\n    }\r\n    constructor() { }\r\n\r\n}\r\n","import { Injectable, Inject, LOCALE_ID } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, from, of } from 'rxjs';\r\nimport { RtfUIWebapiService } from '../../common/rtf-ui-webapi.service';\r\n\r\n@Injectable()\r\nexport class RtfAppService {\r\n\r\n    constructor(\r\n        private rtfCommon: RtfUIWebapiService,\r\n        private httpClient: HttpClient\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * è·ååè½èåæä½\r\n     */\r\n    getAppList(): Observable<any> {\r\n        const url = this.rtfCommon.functionsApi;\r\n        const header = this.rtfCommon.httpHeader;\r\n        return this.httpClient.get(url, header);\r\n    }\r\n    /**\r\n     * è·ååå«BOæ°æ®çåºç¨æ°æ®\r\n     */\r\n    getAppListWithBizObjectData(): Observable<any> {\r\n        const url = this.rtfCommon.appsWithBOApi;\r\n        const header = this.rtfCommon.httpHeader;\r\n        return this.httpClient.get(url, header);\r\n    }\r\n\r\n    /**\r\n     * è·åå¤è¯­èµæºæä»¶\r\n     */\r\n    getI18nJson(url: string): Observable<any> {\r\n        const header = this.rtfCommon.httpHeader;\r\n        return this.httpClient.get(url, header);\r\n    }\r\n}\r\n","import { Injectable, Inject, LOCALE_ID } from '@angular/core';\r\nimport { Observable, of, from } from 'rxjs';\r\nimport { RtfAppService } from '../rtf-app.service';\r\n\r\n\r\ndeclare var System: System;\r\ninterface System {\r\n    import(request: string): Promise<any>;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class I18NresourceService {\r\n\r\n    public i18nObj: any;\r\n\r\n    constructor(private rtfAppService: RtfAppService) { }\r\n\r\n\r\n    getI18nJson(): Observable<any> {\r\n        if (this.i18nObj) {\r\n            return of(this.i18nObj);\r\n        }\r\n        const url = this.getI18nJsonApi(null);\r\n        return this.rtfAppService.getI18nJson(url);\r\n    }\r\n\r\n    getI18nJsonApi(lang: string): string {\r\n        // const curLang = lang || 'zh-CHS';\r\n        const curLang = 'zh-CHS';\r\n        return `/platform/runtime/sys/web/assets/i18n/apphelp/${curLang}.json`;\r\n    }\r\n}\r\n","export const i18nAppHelpInfo = {\r\n    'zh-CHS': {\r\n        TitleName: 'åºç¨å¸®å©',\r\n        EntranceList: 'å¥å£åè¡¨',\r\n        Code: 'ç¼å·',\r\n        Name: 'åç§°',\r\n        Entrance: 'å¥å£',\r\n        Confirm: 'ç¡®è®¤',\r\n        Cancel: 'åæ¶'\r\n    },\r\n    'zh-CHT': {\r\n        TitleName: 'æç¨å¹«å©',\r\n        EntranceList: 'å¥å£åè¡¨',\r\n        Code: 'ç·¨è',\r\n        Name: 'åç¨±',\r\n        Entrance: 'å¥å£',\r\n        Confirm: 'ç¢ºèª',\r\n        Cancel: 'åæ¶'\r\n    },\r\n    en: {\r\n        TitleName: 'Application Help',\r\n        EntranceList: 'EntranceList',\r\n        Code: 'Code',\r\n        Name: 'Name',\r\n        Entrance: 'Entrance',\r\n        Confirm: 'Confirm',\r\n        Cancel: 'Cancel'\r\n    }\r\n};","import { Component, OnInit, Output, EventEmitter, ViewChild, TemplateRef, Input, Optional } from '@angular/core';\r\nimport { SelectableSettings } from '@progress/kendo-angular-grid';\r\nimport { RtfAppService } from '../service/rtf-app.service';\r\nimport { RtfApp } from '../entities/rtf-app';\r\nimport { I18NresourceService } from '../service/i18N/i18-nresource.service';\r\nimport { i18nAppHelpInfo } from '../../models/i18n-model/i18n-model';\r\nimport { MessagerService } from '@farris/ui-messager';\r\n\r\n/**\r\n * ç³»ç»ç®¡çï¼åè½æä½å·¦æ æãå³åè¡¨å±ç¤º\r\n */\r\n// tslint:disable\r\n@Component({\r\n    selector: 'app-rtf-app',\r\n    templateUrl: './rtf-app.component.html',\r\n    styleUrls: ['./rtf-app.component.css']\r\n})\r\nexport class RtfAppComponent implements OnInit {\r\n\r\n    @Input() bizObjectId: string;\r\n\r\n    @Input()\r\n    gridSelectMode: 'single' | 'multiple';\r\n    /**\r\n     * ç¡®è®¤äºä»¶\r\n     */\r\n    @Output()\r\n    afterConfirm = new EventEmitter<RtfApp[]>();\r\n    /**\r\n     * å³é­äºä»¶\r\n     */\r\n    @Output()\r\n    afterCancle = new EventEmitter<any>();\r\n    // æ³¨å¥å°å¸®å©çç¡®è®¤ååæ¶æé®\r\n    @ViewChild('btnOkAndCancle')\r\n    btnOkAndCancleRef: TemplateRef<any>;\r\n\r\n    data: RtfApp[];\r\n    dataarray = [];\r\n    gridData: any;\r\n\r\n    /**\r\n     * å·¦ä¾§æ åè¡¨æ°æ®\r\n     */\r\n    treeData: RtfApp[];\r\n    /**\r\n     * å½åéä¸­æ°æ®\r\n     */\r\n    curSelectedKeys: string[] = [];\r\n    selectableSettings: SelectableSettings;\r\n    selectedTreeNode: any;\r\n    private currentLangCode: string;\r\n    public title = '';\r\n\r\n    i18nEntity: any = {};\r\n\r\n    constructor(\r\n        private rtfAppService: RtfAppService,\r\n        @Optional() private i18nService: I18NresourceService,\r\n        private farrisMsg: MessagerService,\r\n    ) {\r\n        if (!i18nService) {\r\n            this.i18nService = new I18NresourceService(rtfAppService);\r\n        }\r\n        // this.i18nEntityInit();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectableSettings = {\r\n            checkboxOnly: true,\r\n            // é»è®¤åé\r\n            mode: !this.gridSelectMode ? 'single' : this.gridSelectMode,\r\n            enabled: true\r\n        };\r\n        /*this.rtfAppService.getAppList().subscribe(\r\n            res => {\r\n                // å·¦ä¾§æ \r\n                this.treeData = res;\r\n                // èåæç»æ°æ®\r\n                const info = res.filter(item => item.layer === '4');\r\n                info.forEach(element => {\r\n                    this.dataarray = this.dataarray.concat(element.appInvoks);\r\n                });\r\n                // this.gridData = this.dataarray;\r\n            },\r\n            error => {\r\n                console.log('è·åå¤±è´¥');\r\n            }\r\n        );*/\r\n        // è·åææåºç¨æ°æ®\r\n        this.rtfAppService.getAppListWithBizObjectData().subscribe(\r\n            res => {\r\n                this.treeData = res;\r\n                const appDetails = res.filter((item: any) => item.layer === '4' || (item.layer === '5'));\r\n                appDetails.forEach(ele => {\r\n                    this.dataarray = this.dataarray.concat(ele.appInvoks);\r\n                });\r\n            },\r\n            error => {\r\n                this.farrisMsg.error(\"è·ååºç¨æ°æ®å¤±è´¥\");\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * æç´¢\r\n     * @param filterValue æ¥è¯¢æ¡ä»¶\r\n     */\r\n    searchData(filterValue: string) {\r\n        // ç©ºçæç´¢æ¯å¨é¨æ°æ®\r\n        if (filterValue === null || filterValue === '') {\r\n            this.gridData = this.data.concat();\r\n            return;\r\n        }\r\n        const filter = filterValue.toLowerCase();\r\n        // æç´¢å°ä¸çº§æ¶\r\n        this.gridData = this.data.filter(item =>\r\n            item.code.toLowerCase().includes(filter) ||\r\n            item.name.toLowerCase().includes(filter));\r\n    }\r\n\r\n    /**\r\n     * å·¦ä¾§æ åæ¢\r\n     * @param arg å¯¹è±¡åæ°\r\n     */\r\n    leftAppTreeChanged(arg) {\r\n        this.selectedTreeNode = arg;\r\n        if (!('4' === arg.layer || '5' === arg.layer)) {\r\n            this.gridData = [];\r\n            return;\r\n        }\r\n\r\n        const selectedId = arg && arg.id;\r\n        // æ ¹æ®ç¶å­å³ç³»è¿æ»¤å½åçé¢æ°æ®ï¼åå«ä¸ä¸çº§\r\n        this.gridData = this.dataarray.filter(\r\n            item => selectedId && item.appId === selectedId\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * è·åéä¸­æ°æ®\r\n     */\r\n    getSelectedObject() {\r\n        const result = this.dataarray.filter(\r\n            item => this.curSelectedKeys && this.curSelectedKeys.findIndex(select => select === item.id) >= 0\r\n        );\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * ç¡®è®¤\r\n     */\r\n    confirm() {\r\n        const result = this.getSelectedObject();\r\n        if (this.selectedTreeNode && result && result.length > 0) {\r\n            this.selectedTreeNode.selectedInvok = result.filter(inv => inv && inv.appId === this.selectedTreeNode.id);\r\n        }\r\n        this.afterConfirm.next(this.selectedTreeNode);\r\n        // åæ¶-ç®çæ¯å¨è¿éè®©æ¨¡ææ¡æ¶å¤±\r\n        this.cancle();\r\n    }\r\n    /**\r\n     * åæ¶\r\n     */\r\n    cancle() {\r\n        this.afterCancle.next();\r\n    }\r\n\r\n    i18nEntityInitBak() {\r\n        this.i18nService.getI18nJson().subscribe(\r\n            entity => {\r\n                if (entity) {\r\n                    this.title = entity.TitleName;\r\n                    this.i18nEntity = entity;\r\n                    this.i18nService.i18nObj = entity;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    public setCurrentLangCode(langCode: string) {\r\n        this.currentLangCode = langCode;\r\n        this.title = this.getResOnCurrentLangeContext('TitleName');\r\n    }\r\n\r\n    public getResOnCurrentLangeContext(resKey: string): string {\r\n        const resValue = i18nAppHelpInfo[this.currentLangCode][resKey];\r\n        return resValue;\r\n    }\r\n}\r\n\r\n","import { RtfApp } from './../entities/rtf-app';\r\nimport { Component, OnInit, EventEmitter, Input, ComponentRef, Output, Injector, ComponentFactoryResolver } from '@angular/core';\r\nimport { RtfAppComponent } from '../rtf-app/rtf-app.component';\r\nimport { BsModalRef, BsModalService } from '@farris/ui-modal';\r\nimport { RtfUIWebapiService } from '../../common/rtf-ui-webapi.service';\r\nimport { MessagerService } from '@farris/ui-messager';\r\n\r\n// tslint:disable\r\n@Component({\r\n    selector: 'app-rtf-application-help',\r\n    templateUrl: './rtf-app-help.component.html',\r\n    styleUrls: ['./rtf-app-help.component.css']\r\n})\r\nexport class RtfAppHelpComponent implements OnInit {\r\n\r\n    /**\r\n     * æå±çä¸å¡å¯¹è±¡åç \r\n     */\r\n    @Input() bizObjectId: string;\r\n    /**\r\n     * åå§éä¸­çæéå¯¹è±¡åç \r\n     */\r\n    @Input()\r\n    initSelectKeys: string[] = [];\r\n\r\n    @Input()\r\n    languageCode = 'zh-CHS';\r\n    /**\r\n     * è¾åºäºä»¶\r\n     */\r\n    @Output()\r\n    afterHelpConfirm = new EventEmitter<RtfApp[]>();\r\n\r\n    // å¸®å©ä¸å¨æåå»ºçæ¾ç¤ºæ¨¡æ¿\r\n    private funcOpComp: ComponentRef<RtfAppComponent>;\r\n    // æ¨¡ææ¡æå¡\r\n    private funcOpDialog: BsModalRef;\r\n    constructor(\r\n        private rtfCommon: RtfUIWebapiService,\r\n        private modalService: BsModalService,\r\n        private farrisMsg: MessagerService,\r\n        private injector: Injector,\r\n        private cfr: ComponentFactoryResolver) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    /**\r\n     * å¼¹åºFarrisæ¨¡ææ¡å¸®å©\r\n     */\r\n    showHelp(sessionId?: string) {\r\n        this.rtfCommon.sessionId = ' ';\r\n        const compFactory = this.cfr.resolveComponentFactory(RtfAppComponent);\r\n        this.funcOpComp = compFactory.create(this.injector);\r\n        // åç»ä»¶ç»å®è¯­è¨ä»£ç \r\n        this.funcOpComp.instance.setCurrentLangCode(this.languageCode);\r\n        // è·ååè½èåçå®ä¾ç»ä»¶\r\n        if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {\r\n            /*this.initSelectKeys\r\n                .forEach(key => this.funcOpComp.instance.curSelectedKeys.push(key));*/\r\n            this.funcOpComp.instance.curSelectedKeys.push(this.initSelectKeys[0]);\r\n        }\r\n        // åå§åéæ©çä¸å¡å¯¹è±¡\r\n        if (this.bizObjectId && this.bizObjectId !== '') {\r\n            this.funcOpComp.instance.bizObjectId = this.bizObjectId;\r\n        }\r\n        const modalConfig = {\r\n            title: this.funcOpComp.instance.title,\r\n            width: 800,\r\n            height: 550,\r\n            buttons: this.funcOpComp.instance.btnOkAndCancleRef,\r\n            showButtons: true,\r\n            showMaxButton: false,\r\n            resizable: false\r\n        };\r\n        // å¼¹åºå¸®å©æ¡\r\n        this.funcOpDialog = this.modalService.show(this.funcOpComp, modalConfig);\r\n\r\n        // åæ¶å\r\n        this.funcOpComp.instance.afterCancle.subscribe(\r\n            res => {\r\n                // æ¶å¤±æ¨¡ææ¡\r\n                this.funcOpDialog.close();\r\n            }\r\n        );\r\n        // ç¡®è®¤å\r\n        this.funcOpComp.instance.afterConfirm.subscribe((res: RtfApp[]) => {\r\n            this.afterHelpConfirm.next(res);\r\n        });\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GridModule } from '@progress/kendo-angular-grid';\r\nimport { LayoutModule } from '@progress/kendo-angular-layout';\r\nimport { TreeViewModule } from '@progress/kendo-angular-treeview';\r\nimport { AppModuleTreeComponent } from './app-module-tree/app-module-tree.component';\r\nimport { RtfAppComponent } from './rtf-app/rtf-app.component';\r\nimport { RtfAppHelpComponent } from './rtf-app-help/rtf-app-help.component';\r\nimport { RtfAppService } from './service/rtf-app.service';\r\nimport { RtfUIWebapiService } from '../common/rtf-ui-webapi.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { I18NresourceService } from './service/i18N/i18-nresource.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        HttpClientModule,\r\n        // kendo\r\n        GridModule,\r\n        LayoutModule,\r\n        TreeViewModule,\r\n        // farris\r\n        ModalModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n    ],\r\n\r\n    declarations: [\r\n        AppModuleTreeComponent,\r\n        RtfAppComponent,\r\n        RtfAppHelpComponent,\r\n    ],\r\n\r\n    entryComponents: [\r\n        RtfAppComponent\r\n    ],\r\n\r\n    providers: [\r\n        RtfUIWebapiService,\r\n        RtfAppService,\r\n        I18NresourceService\r\n    ],\r\n\r\n    exports: [\r\n        RtfAppComponent,\r\n        RtfAppHelpComponent\r\n    ]\r\n})\r\nexport class RtfAppHelpModule { }\r\n"]}