/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, ViewChild, TemplateRef, Input } from '@angular/core';
import { RtfAppService } from '../service/rtf-app.service';
import { i18nFuncHelpInfo } from '../../models/i18n-model/i18n-model';
/**
 * 系统管理：功能操作左树有、右列表展示
 */
export class RtfAppComponent {
    /**
     * @param {?} rtfAppService
     */
    constructor(rtfAppService) {
        this.rtfAppService = rtfAppService;
        /**
         * 是否分层加载左侧树，默认为false
         */
        this.isLayeredLoad = false;
        /**
         * 确认事件
         */
        this.afterConfirm = new EventEmitter();
        /**
         * 关闭事件
         */
        this.afterCancle = new EventEmitter();
        /**
         * 功能操作全量数据
         */
        this.data = [];
        /**
         * 缓存的菜单及结构数据
         */
        this.allAppList = [];
        /**
         * 当前选中数据
         */
        this.curSelectedKeys = [];
        this.title = '功能菜单帮助';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.selectableSettings = {
            checkboxOnly: true,
            // 默认单选
            mode: !this.gridSelectMode ? 'single' : this.gridSelectMode,
            enabled: true
        };
        if (this.isLayeredLoad === false) {
            /** @type {?} */
            const allFuncsStream = this.rtfAppService.getAppList();
            this.loadTreeData(allFuncsStream);
        }
        else {
            this.loadTreeDataByGrandParentId('0');
        }
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    onKeyUp(arg) {
        if (arg && arg.keyCode === 13) {
            this.searchData(this.filter.nativeElement.value);
        }
    }
    /**
     * 搜索
     * @param {?} filterValue 查询条件
     * @return {?}
     */
    searchData(filterValue) {
        // 空的搜索是全部数据
        if (filterValue === null || filterValue === '') {
            this.gridData = this.data.concat();
            return;
        }
        /** @type {?} */
        const filter = filterValue.toLowerCase();
        // 搜索到上级时
        this.gridData = this.data.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.Code.toLowerCase().includes(filter) ||
            item.Name.toLowerCase().includes(filter)));
    }
    /**
     * 业务对象变化后
     * @param {?} arg 业务对象参数
     * @return {?}
     */
    leftAppTreeChanged(arg) {
        if (!this.data || this.data.length === 0) {
            return;
        }
        /** @type {?} */
        const selectedId = arg.Id;
        /** @type {?} */
        const selectedPath = arg.Path;
        // 根据父子关系过滤当前界面数据，包含上下级
        this.gridData = this.data.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.ParentId === selectedId ||
            item.Path.startsWith(selectedPath)));
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    onAppTreeExpanded(arg) {
        if (this.isLayeredLoad === false) {
            return;
        }
        if (this.isContainGrandChildNode(arg) === false) {
            this.loadTreeDataByGrandParentId(arg.Id);
        }
    }
    /**
     * 获取选中数据
     * @return {?}
     */
    getSelectedObject() {
        /** @type {?} */
        const result = this.data
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        item => this.curSelectedKeys.findIndex((/**
         * @param {?} select
         * @return {?}
         */
        select => select === item.Id)) >= 0));
        return result;
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        const result = this.getSelectedObject();
        // this.selectedTreeNode.selectedInvok = result;
        this.afterConfirm.next(result);
        // 取消-目的是在这里让模态框消失
        this.cancle();
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.afterCancle.next();
    }
    /**
     * @param {?} langCode
     * @return {?}
     */
    setCurrentLangCode(langCode) {
        this.currentLangCode = langCode;
        this.title = this.getResOnCurrentLangeContext('TitleName');
    }
    /**
     * @param {?} resKey
     * @return {?}
     */
    getResOnCurrentLangeContext(resKey) {
        /** @type {?} */
        const resValue = i18nFuncHelpInfo[this.currentLangCode][resKey];
        return resValue;
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    isContainGrandChildNode(node) {
        if (!('1' === node.Layer || '2' === node.Layer)) {
            return true;
        }
        /** @type {?} */
        const parentId = node.Id;
        /** @type {?} */
        const sonList = this.allAppList.filter((/**
         * @param {?} f
         * @return {?}
         */
        f => f.FParentid === parentId));
        /** @type {?} */
        let res = false;
        for (let i = 0; i < sonList.length; i++) {
            /** @type {?} */
            const grandList = this.allAppList.filter((/**
             * @param {?} o
             * @return {?}
             */
            o => o.FParentid === sonList[i].FID));
            if (grandList && grandList.length > 0) {
                res = true;
                break;
            }
        }
        return res;
    }
    /**
     * @private
     * @param {?} grandParentId
     * @return {?}
     */
    loadTreeDataByGrandParentId(grandParentId) {
        // 分层加载
        /** @type {?} */
        const stream = this.rtfAppService.getDataByGrandParentId(grandParentId);
        this.loadTreeData(stream);
    }
    /**
     * @private
     * @param {?} stream
     * @return {?}
     */
    loadTreeData(stream) {
        stream.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res) {
                res.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    /** @type {?} */
                    const temp = {
                        Id: element.id,
                        Code: element.code,
                        Name: element.name,
                        ParentId: element.parentId,
                        Layer: element.layer,
                        Path: element.path,
                        SortOrder: element.sortOrder,
                        Child: element.child,
                        InvokingConfig: element.invokingConfig
                    };
                    this.allAppList.push(temp);
                }));
            }
            // 左侧树
            this.treeData = this.allAppList.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.Layer <= 3));
            // 菜单明细数据
            this.data = this.allAppList.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.Layer >= 4));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.log('获取菜单数据失败');
        }));
    }
}
RtfAppComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-rtf-app',
                template: "<div class=\"d-flex flex-row\" style=\"width: 800px; border:2px;position:absolute;top:0px;bottom: 0px;\r\nright:0px;left:0px;overflow: hidden;height: 100%;\">\r\n    <div class=\"flex-fill\">\r\n        <kendo-splitter style=\"height:100%\" orientation=\"horizontal\">\r\n            <kendo-splitter-pane size=\"40%\" min=\"20%\" max=\"50%\">\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>{{this.getResOnCurrentLangeContext('TitleName')}}</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div>\r\n                    <div class=\"flex-fill\" style=\"overflow: auto;\">\r\n                        <app-module-tree [appTreeData]=\"this.treeData\" [bizObjectId]=\"bizObjectId\"\r\n                            (appTreeChanged)=\"leftAppTreeChanged($event)\" (appTreeExpanded)=\"onAppTreeExpanded($event)\">\r\n                        </app-module-tree>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n            <kendo-splitter-pane>\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <!-- <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>\u83DC\u5355\u5217\u8868</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div> -->\r\n                    <div class=\"clearfix mt-1 mb-1 ml-1\">\r\n                        <div class=\"f-cmp-inputgroup input-group\" style=\"width: 70%;\">\r\n                            <input #filter class=\"form-control\" (keyup)=\"onKeyUp($event)\"\r\n                                placeholder=\"{{this.getResOnCurrentLangeContext('EnterNameOrCode')}}\">\r\n                            <div class=\"input-group-append\"><span class=\"input-group-text\"\r\n                                    (click)=\"searchData(filter.value)\">\r\n                                    <i class=\"k-icon k-i-search\"></i></span></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"d-flex flex-fill\" style=\"position:relative;\">\r\n                        <kendo-grid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\"\r\n                            [kendoGridBinding]=\"gridData\" [kendoGridSelectBy]=\"'Id'\" [selectedKeys]=\"curSelectedKeys\">\r\n                            <kendo-grid-checkbox-column width=\"50px\"></kendo-grid-checkbox-column>\r\n                            <kendo-grid-column field=\"Code\" title=\"{{this.getResOnCurrentLangeContext('Code')}}\">\r\n                            </kendo-grid-column>\r\n                            <kendo-grid-column field=\"Name\" title=\"{{this.getResOnCurrentLangeContext('Name')}}\">\r\n                            </kendo-grid-column>\r\n                        </kendo-grid>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n        </kendo-splitter>\r\n    </div>\r\n</div>\r\n<ng-template #btnOkAndCancle>\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">{{this.getResOnCurrentLangeContext('Confirm')}}</button>\r\n    <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">{{this.getResOnCurrentLangeContext('Cancel')}}</button>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
RtfAppComponent.ctorParameters = () => [
    { type: RtfAppService }
];
RtfAppComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    gridSelectMode: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    afterCancle: [{ type: Output }],
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }],
    filter: [{ type: ViewChild, args: ['filter',] }]
};
if (false) {
    /**
     * 业务对象,负责传递
     * @type {?}
     */
    RtfAppComponent.prototype.bizObjectId;
    /**
     * 选择模式
     * @type {?}
     */
    RtfAppComponent.prototype.gridSelectMode;
    /**
     * 是否分层加载左侧树，默认为false
     * @type {?}
     */
    RtfAppComponent.prototype.isLayeredLoad;
    /**
     * 确认事件
     * @type {?}
     */
    RtfAppComponent.prototype.afterConfirm;
    /**
     * 关闭事件
     * @type {?}
     */
    RtfAppComponent.prototype.afterCancle;
    /** @type {?} */
    RtfAppComponent.prototype.btnOkAndCancleRef;
    /** @type {?} */
    RtfAppComponent.prototype.filter;
    /**
     * 功能操作全量数据
     * @type {?}
     */
    RtfAppComponent.prototype.data;
    /**
     * 当前UI显示动能操作列表数据
     * @type {?}
     */
    RtfAppComponent.prototype.gridData;
    /**
     * 左侧树列表数据
     * @type {?}
     */
    RtfAppComponent.prototype.treeData;
    /**
     * 缓存的菜单及结构数据
     * @type {?}
     */
    RtfAppComponent.prototype.allAppList;
    /**
     * 当前选中数据
     * @type {?}
     */
    RtfAppComponent.prototype.curSelectedKeys;
    /** @type {?} */
    RtfAppComponent.prototype.selectableSettings;
    /** @type {?} */
    RtfAppComponent.prototype.selectedTreeNode;
    /** @type {?} */
    RtfAppComponent.prototype.title;
    /**
     * @type {?}
     * @private
     */
    RtfAppComponent.prototype.currentLangCode;
    /**
     * @type {?}
     * @private
     */
    RtfAppComponent.prototype.rtfAppService;
}
//# sourceMappingURL=data:application/json;base64,