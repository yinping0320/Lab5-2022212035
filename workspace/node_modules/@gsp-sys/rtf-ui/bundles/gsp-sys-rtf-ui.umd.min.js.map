{"version":3,"sources":["ng://@gsp-sys/rtf-ui/lib/rtf-app-help/app-module-tree/app-module-tree.component.ts","ng://@gsp-sys/rtf-ui/lib/common/rtf-ui-webapi.service.ts","ng://@gsp-sys/rtf-ui/lib/rtf-app-help/service/rtf-app.service.ts","ng://@gsp-sys/rtf-ui/lib/models/i18n-model/i18n-model.ts","ng://@gsp-sys/rtf-ui/lib/rtf-app-help/rtf-app/rtf-app.component.ts","ng://@gsp-sys/rtf-ui/lib/rtf-app-help/rtf-app-help/rtf-app-help.component.ts","ng://@gsp-sys/rtf-ui/lib/rtf-app-help/rtf-app-help.module.ts"],"names":["AppModuleTreeComponent","this","appTreeData","selectKeys","appTreeChanged","EventEmitter","appTreeExpanded","expandedKeys","prototype","ngOnChanges","changes","_this","currentValue","length","from","subscribe","item","ParentId","undefined","Layer","push","Id","ngOnInit","selectChange","args","curApp","dataItem","emit","onExpand","arg","console","log","Component","selector","template","Input","Output","RtfUIWebapiService","Object","defineProperty","headers","Content-Type","responseType","Injectable","RtfAppService","rtfCommon","httpClient","getAppList","url","functionsApi","header","httpHeader","get","getDataByGrandParentId","grandParentId","layerFunctionsApi","HttpClient","i18nFuncHelpInfo","zh-CHS","TitleName","EnterNameOrCode","Code","Name","Confirm","Cancel","zh-CHT","en","RtfAppComponent","rtfAppService","isLayeredLoad","afterConfirm","afterCancle","data","allAppList","curSelectedKeys","title","selectableSettings","checkboxOnly","mode","gridSelectMode","enabled","allFuncsStream","loadTreeData","loadTreeDataByGrandParentId","onKeyUp","keyCode","searchData","filter","nativeElement","value","filterValue","toLowerCase","gridData","includes","concat","leftAppTreeChanged","selectedId","selectedPath","Path","startsWith","onAppTreeExpanded","isContainGrandChildNode","getSelectedObject","findIndex","select","confirm","result","next","cancle","setCurrentLangCode","langCode","currentLangCode","getResOnCurrentLangeContext","resKey","node","parentId","sonList","f","FParentid","res","i","grandList","this_1","o","FID","stream","forEach","element","temp","id","code","name","layer","path","SortOrder","sortOrder","Child","child","InvokingConfig","invokingConfig","treeData","err","ViewChild","RtfAppHelpComponent","modalService","farrisMsg","injector","cfr","initSelectKeys","languageCode","afterHelpConfirm","showHelp","sessionId","compFactory","resolveComponentFactory","funcOpComp","create","instance","key","bizObjectId","modalConfig","width","height","buttons","btnOkAndCancleRef","showButtons","showMaxButton","resizable","funcOpDialog","show","close","BsModalService","MessagerService","Injector","ComponentFactoryResolver","RtfAppHelpModule","NgModule","imports","CommonModule","HttpClientModule","GridModule","LayoutModule","TreeViewModule","ModalModule","forRoot","MessagerModule","declarations","entryComponents","providers","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, Output, EventEmitter, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { RtfApp } from '../entities/rtf-app';\r\nimport { from } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-module-tree',\r\n    templateUrl: './app-module-tree.component.html',\r\n    styleUrls: ['./app-module-tree.component.css']\r\n})\r\nexport class AppModuleTreeComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * èåæç»ç±»\r\n     */\r\n    @Input()\r\n    appTreeData: RtfApp[] = [];\r\n    /**\r\n     * ä¸å¡å¯¹è±¡\r\n     *\r\n     */\r\n    @Input() bizObjectId: string;\r\n    public selectKeys: string[] = [];\r\n    currentid: string;\r\n    /**\r\n     * åè½èåæ¨¡ååååå\r\n     */\r\n    @Output()\r\n    appTreeChanged: EventEmitter<RtfApp> = new EventEmitter<RtfApp>();\r\n    /**\r\n     * æ èç¹å±å¼åçè¾åº\r\n     */\r\n    @Output()\r\n    appTreeExpanded: EventEmitter<any> = new EventEmitter<any>();\r\n    /**\r\n     * æ æ§ä»¶å±å¼çèç¹å¼\r\n     */\r\n    expandedKeys = [];\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * ååæåµ\r\n     * @param changes åå\r\n     */\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // åå§ååååæ¶\r\n        // æªåå«appTreeDataçåå\r\n        if (!changes['appTreeData']) {\r\n            return;\r\n        }\r\n        // æ æçå¼ä¸äºå¤ç\r\n        if (!changes['appTreeData'].currentValue ||\r\n            changes['appTreeData'].currentValue.length === 0\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // è·åå°èåæ°æ®\r\n        from(this.appTreeData).subscribe(item => {\r\n            if (!item.ParentId || item.ParentId === '0') {\r\n                item.ParentId = undefined;\r\n                if (item.Layer === 1) {\r\n                    this.expandedKeys.push(item.Id);\r\n                }\r\n            }\r\n        }\r\n        );\r\n\r\n        /*\r\n         // é»è®¤ä¸å¡å¯¹è±¡çå¤ç\r\n         if (!isNullOrUndefined(this.bizObjectId) && this.bizObjectId !== '') {\r\n            // æ ç¦ç¹è¡\r\n            let curBizObjectId = this.bizObjectId;\r\n            while (!isNullOrUndefined(curBizObjectId)) {\r\n                this.expandedKeys.push(curBizObjectId);\r\n                // æ¾å°å½åèç¹çä»å®¶åº\r\n                curBizObjectId = this.data.find(item => item['id'] === curBizObjectId)['parentID'];\r\n            }\r\n            // å³ä¾§æä½åå\r\n            this.selectKeys = [this.bizObjectId];\r\n            setTimeout(() => {\r\n                this.bizObjectChanged.emit(this.bizObjectId);\r\n            }, 80);\r\n        }\r\n        */\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * éä¸­è¡æ¹ååè§¦åäºä»¶\r\n     */\r\n    selectChange(args: any) {\r\n        const curApp: RtfApp = args.dataItem;\r\n        // é¦æ¬¡è§¦å\r\n        if (this.selectKeys == null || this.selectKeys.length === 0) {\r\n            this.appTreeChanged.emit(curApp);\r\n        } else {\r\n            // è¿ä¸ªäºä»¶éè¿ä¸ä¼å¯¹selectedkeysæ°ç»èµå¼ï¼æ¯ä¸ä¸ä¸ªç¶æç\r\n            const lastAppId = this.selectKeys[0];\r\n            const curAppId = curApp.Id;\r\n            // ååçæåµä¸è§¦å\r\n            if (lastAppId !== curAppId) {\r\n                this.appTreeChanged.emit(curApp);\r\n            }\r\n        }\r\n    }\r\n\r\n    onExpand(arg: any) {\r\n        console.log('èåå¸®å©å·¦ä¾§æ å±å¼');\r\n        if (!arg || !arg.dataItem) {\r\n            return;\r\n        }\r\n        this.appTreeExpanded.emit(arg.dataItem);\r\n    }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class RtfUIWebapiService {\r\n\r\n    /**\r\n     * èåapiå°å\r\n     */\r\n    get functionsApi(): string {\r\n        return '/api/runtime/sys/v1.0/functions/allfuncs';\r\n    }\r\n\r\n    /**\r\n     * ä¸å¡å¯¹è±¡apiå°å\r\n     */\r\n    get bizObjectApi(): string {\r\n        return '/api/dev/main/v1.0/business-objects';\r\n    }\r\n    /**\r\n     * åå±è·åèåæ°æ®  api\r\n     */\r\n    get layerFunctionsApi(): string {\r\n        return '/api/runtime/sys/v1.0/functions/layerFuncs';\r\n    }\r\n    sessionId: string;\r\n\r\n    /**\r\n     * Httpå¤´ä¿¡æ¯\r\n     */\r\n    get httpHeader(): any {\r\n        const options: any = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            responseType: 'json'\r\n        };\r\n        return options;\r\n    }\r\nconstructor() { }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RtfUIWebapiService } from '../../common/rtf-ui-webapi.service';\r\n\r\n@Injectable()\r\nexport class RtfAppService {\r\n\r\n    constructor(\r\n        private rtfCommon: RtfUIWebapiService,\r\n        private httpClient: HttpClient\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * è·ååè½èåæä½\r\n     */\r\n    getAppList(): Observable<any> {\r\n        const url = this.rtfCommon.functionsApi;\r\n        const header = this.rtfCommon.httpHeader;\r\n        return this.httpClient.get(url, header);\r\n    }\r\n    /**\r\n     * æ ¹æ®ç¥ç¶èç¹åå±å è½½èåæ°æ®\r\n     */\r\n    getDataByGrandParentId(grandParentId: string): Observable<any> {\r\n        const url = `${this.rtfCommon.layerFunctionsApi}/${grandParentId}`;\r\n        const header = this.rtfCommon.httpHeader;\r\n        return this.httpClient.get(url, header);\r\n    }\r\n}\r\n","export const i18nFuncHelpInfo = {\r\n    'zh-CHS': {\r\n        TitleName: 'åè½èåå¸®å©',\r\n        EnterNameOrCode: 'è¾å¥ç¼å·æåç§°æ¥æ¾',\r\n        Code: 'ç¼å·',\r\n        Name: 'åç§°',\r\n        Confirm: 'ç¡®è®¤',\r\n        Cancel: 'åæ¶'\r\n    },\r\n    'zh-CHT': {\r\n        TitleName: 'åè½èå®å¹«å©',\r\n        EnterNameOrCode: 'è¼¸å¥ç·¨èæåç¨±æ¥æ¾',\r\n        Code: 'ç·¨è',\r\n        Name: ' åç¨±',\r\n        Confirm: 'ç¢ºèª',\r\n        Cancel: 'åæ¶'\r\n    },\r\n    en: {\r\n        TitleName: 'Function Help',\r\n        EnterNameOrCode: 'Please Enter Name Or Code',\r\n        Code: 'Code',\r\n        Name: 'Name',\r\n        Confirm: 'Confirm',\r\n        Cancel: 'Cancel'\r\n    }\r\n}","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit, Output, EventEmitter, ViewChild, TemplateRef, Input } from '@angular/core';\r\nimport { SelectableSettings } from '@progress/kendo-angular-grid';\r\nimport { RtfAppService } from '../service/rtf-app.service';\r\nimport { RtfApp } from '../entities/rtf-app';\r\nimport { i18nFuncHelpInfo } from '../../models/i18n-model/i18n-model';\r\n\r\n/**\r\n * ç³»ç»ç®¡çï¼åè½æä½å·¦æ æãå³åè¡¨å±ç¤º\r\n */\r\n@Component({\r\n    selector: 'app-rtf-app',\r\n    templateUrl: './rtf-app.component.html',\r\n    styleUrls: ['./rtf-app.component.css']\r\n})\r\nexport class RtfAppComponent implements OnInit {\r\n\r\n    /**\r\n     * ä¸å¡å¯¹è±¡,è´è´£ä¼ é\r\n     */\r\n    @Input() bizObjectId: string;\r\n    /**\r\n     * éæ©æ¨¡å¼\r\n     */\r\n    @Input()\r\n    gridSelectMode: 'single' | 'multiple';\r\n    /**\r\n     * æ¯å¦åå±å è½½å·¦ä¾§æ ï¼é»è®¤ä¸ºfalse\r\n     */\r\n    isLayeredLoad = false;\r\n    /**\r\n     * ç¡®è®¤äºä»¶\r\n     */\r\n    @Output()\r\n    afterConfirm = new EventEmitter<RtfApp[]>();\r\n    /**\r\n     * å³é­äºä»¶\r\n     */\r\n    @Output()\r\n    afterCancle = new EventEmitter<any>();\r\n    // æ³¨å¥å°å¸®å©çç¡®è®¤ååæ¶æé®\r\n    @ViewChild('btnOkAndCancle')\r\n    btnOkAndCancleRef: TemplateRef<any>;\r\n    @ViewChild('filter')\r\n    filter: any;\r\n\r\n    /**\r\n     * åè½æä½å¨éæ°æ®\r\n     */\r\n    data: RtfApp[] = [];\r\n    /**\r\n     * å½åUIæ¾ç¤ºå¨è½æä½åè¡¨æ°æ®\r\n     */\r\n    gridData: RtfApp[];\r\n\r\n    /**\r\n     * å·¦ä¾§æ åè¡¨æ°æ®\r\n     */\r\n    treeData: RtfApp[];\r\n    /**\r\n     * ç¼å­çèååç»ææ°æ®\r\n     */\r\n    allAppList: any[] = [];\r\n    /**\r\n     * å½åéä¸­æ°æ®\r\n     */\r\n    curSelectedKeys: string[] = [];\r\n    selectableSettings: SelectableSettings;\r\n    selectedTreeNode: any;\r\n    title = 'åè½èåå¸®å©';\r\n    private currentLangCode: string;\r\n    constructor(\r\n        private rtfAppService: RtfAppService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectableSettings = {\r\n            checkboxOnly: true,\r\n            // é»è®¤åé\r\n            mode: !this.gridSelectMode ? 'single' : this.gridSelectMode,\r\n            enabled: true\r\n        };\r\n        if (this.isLayeredLoad === false) {\r\n            const allFuncsStream = this.rtfAppService.getAppList();\r\n            this.loadTreeData(allFuncsStream);\r\n        } else {\r\n            this.loadTreeDataByGrandParentId('0');\r\n        }\r\n    }\r\n    onKeyUp(arg: any) {\r\n        if (arg && arg.keyCode === 13) {\r\n            this.searchData(this.filter.nativeElement.value);\r\n        }\r\n    }\r\n    /**\r\n     * æç´¢\r\n     * @param filterValue æ¥è¯¢æ¡ä»¶\r\n     */\r\n    searchData(filterValue: string) {\r\n        // ç©ºçæç´¢æ¯å¨é¨æ°æ®\r\n        if (filterValue === null || filterValue === '') {\r\n            this.gridData = this.data.concat();\r\n            return;\r\n        }\r\n        const filter = filterValue.toLowerCase();\r\n        // æç´¢å°ä¸çº§æ¶\r\n        this.gridData = this.data.filter(item =>\r\n            item.Code.toLowerCase().includes(filter) ||\r\n            item.Name.toLowerCase().includes(filter));\r\n    }\r\n\r\n    /**\r\n     * ä¸å¡å¯¹è±¡ååå\r\n     * @param arg ä¸å¡å¯¹è±¡åæ°\r\n     */\r\n    leftAppTreeChanged(arg: RtfApp) {\r\n        if (!this.data || this.data.length === 0) {\r\n            return;\r\n        }\r\n        const selectedId = arg.Id;\r\n        const selectedPath = arg.Path;\r\n        // æ ¹æ®ç¶å­å³ç³»è¿æ»¤å½åçé¢æ°æ®ï¼åå«ä¸ä¸çº§\r\n        this.gridData = this.data.filter(item =>\r\n            item.ParentId === selectedId ||\r\n            item.Path.startsWith(selectedPath)\r\n        );\r\n    }\r\n    onAppTreeExpanded(arg: any) {\r\n        if (this.isLayeredLoad === false) {\r\n            return;\r\n        }\r\n        if (this.isContainGrandChildNode(arg) === false) {\r\n            this.loadTreeDataByGrandParentId(arg.Id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è·åéä¸­æ°æ®\r\n     */\r\n    getSelectedObject(): RtfApp[] {\r\n        const result = this.data\r\n            .filter(item =>\r\n                this.curSelectedKeys.findIndex(select => select === item.Id) >= 0\r\n            );\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * ç¡®è®¤\r\n     */\r\n    confirm() {\r\n        const result = this.getSelectedObject();\r\n        // this.selectedTreeNode.selectedInvok = result;\r\n        this.afterConfirm.next(result);\r\n        // åæ¶-ç®çæ¯å¨è¿éè®©æ¨¡ææ¡æ¶å¤±\r\n        this.cancle();\r\n    }\r\n    /**\r\n     * åæ¶\r\n     */\r\n    cancle() {\r\n        this.afterCancle.next();\r\n    }\r\n\r\n    public setCurrentLangCode(langCode: string) {\r\n        this.currentLangCode = langCode;\r\n        this.title = this.getResOnCurrentLangeContext('TitleName');\r\n    }\r\n    public getResOnCurrentLangeContext(resKey: string): string {\r\n        const resValue = i18nFuncHelpInfo[this.currentLangCode][resKey];\r\n        return resValue;\r\n    }\r\n    private isContainGrandChildNode(node: any): boolean {\r\n        if (!('1' === node.Layer || '2' === node.Layer)) {\r\n            return true;\r\n        }\r\n        const parentId = node.Id;\r\n        const sonList = this.allAppList.filter(\r\n            f => f.FParentid === parentId\r\n        );\r\n        let res = false;\r\n        for (let i = 0; i < sonList.length; i++) {\r\n            const grandList = this.allAppList.filter(o => o.FParentid === sonList[i].FID);\r\n            if (grandList && grandList.length > 0) {\r\n                res = true;\r\n                break;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private loadTreeDataByGrandParentId(grandParentId: string) {\r\n        // åå±å è½½\r\n        const stream = this.rtfAppService.getDataByGrandParentId(grandParentId);\r\n        this.loadTreeData(stream);\r\n    }\r\n\r\n    private loadTreeData(stream: any) {\r\n        stream.subscribe(\r\n            (res) => {\r\n                if (res) {\r\n                    res.forEach(element => {\r\n                        const temp = {\r\n                            Id: element.id,\r\n                            Code: element.code,\r\n                            Name: element.name,\r\n                            ParentId: element.parentId,\r\n                            Layer: element.layer,\r\n                            Path: element.path,\r\n                            SortOrder: element.sortOrder,\r\n                            Child: element.child,\r\n                            InvokingConfig: element.invokingConfig\r\n                        };\r\n                        this.allAppList.push(temp);\r\n                    });\r\n                }\r\n                // å·¦ä¾§æ \r\n                this.treeData = this.allAppList.filter(item => item.Layer <= 3);\r\n                // èåæç»æ°æ®\r\n                this.data = this.allAppList.filter(item => item.Layer >= 4);\r\n            },\r\n            (err: HttpErrorResponse) => {\r\n                console.log('è·åèåæ°æ®å¤±è´¥');\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n","import { RtfApp } from './../entities/rtf-app';\r\nimport { Component, OnInit, EventEmitter, Input, ComponentRef, Output, Injector, ComponentFactoryResolver } from '@angular/core';\r\nimport { RtfAppComponent } from '../rtf-app/rtf-app.component';\r\nimport { BsModalRef, BsModalService } from '@farris/ui-modal';\r\nimport { RtfUIWebapiService } from '../../common/rtf-ui-webapi.service';\r\nimport { MessagerService } from '@farris/ui-messager';\r\n\r\n// tslint:disable\r\n@Component({\r\n    selector: 'app-rtf-app-help',\r\n    templateUrl: './rtf-app-help.component.html',\r\n    styleUrls: ['./rtf-app-help.component.css']\r\n})\r\nexport class RtfAppHelpComponent implements OnInit {\r\n\r\n    /** æå±çä¸å¡å¯¹è±¡åç  */\r\n    @Input() bizObjectId: string;\r\n    /**\r\n     * åå§éä¸­çæéå¯¹è±¡åç \r\n     */\r\n    @Input()\r\n    initSelectKeys: string[] = [];\r\n    @Input()\r\n    languageCode = 'zh-CHS';\r\n    @Input()\r\n    isLayeredLoad = false;\r\n    /**\r\n     * è¾åºäºä»¶\r\n     */\r\n    @Output()\r\n    afterHelpConfirm = new EventEmitter<RtfApp[]>();\r\n\r\n    // å¸®å©ä¸å¨æåå»ºçæ¾ç¤ºæ¨¡æ¿\r\n    private funcOpComp: ComponentRef<RtfAppComponent>;\r\n    // æ¨¡ææ¡æå¡\r\n    private funcOpDialog: BsModalRef;\r\n    constructor(\r\n        private rtfCommon: RtfUIWebapiService,\r\n        private modalService: BsModalService,\r\n        private farrisMsg: MessagerService,\r\n        private injector: Injector,\r\n        private cfr: ComponentFactoryResolver) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    /**\r\n     * å¼¹åºFarrisæ¨¡ææ¡å¸®å©\r\n     */\r\n    showHelp(sessionId?: string) {\r\n        // if (!sessionId || sessionId === '') {\r\n        //     this.farrisMsg.error('è°ç¨å¸®å©æ¶è¯·ä¼ éä¸ä¸æåé!');\r\n        //     return;\r\n        // }\r\n        this.rtfCommon.sessionId = ' ';\r\n        const compFactory = this.cfr.resolveComponentFactory(RtfAppComponent);\r\n        this.funcOpComp = compFactory.create(this.injector);\r\n        // åç»ä»¶ç»å®è¯­è¨ä»£ç \r\n        this.funcOpComp.instance.setCurrentLangCode(this.languageCode);\r\n        this.funcOpComp.instance.isLayeredLoad = this.isLayeredLoad;\r\n        // è·ååè½èåçå®ä¾ç»ä»¶\r\n        if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {\r\n            this.initSelectKeys\r\n                .forEach(key => this.funcOpComp.instance.curSelectedKeys.push(key));\r\n        }\r\n        // åå§åéæ©çä¸å¡å¯¹è±¡\r\n        if (this.bizObjectId && this.bizObjectId !== '') {\r\n            this.funcOpComp.instance.bizObjectId = this.bizObjectId;\r\n        }\r\n        const modalConfig = {\r\n            title: this.funcOpComp.instance.title,\r\n            width: 800,\r\n            height: 550,\r\n            buttons: this.funcOpComp.instance.btnOkAndCancleRef,\r\n            showButtons: true,\r\n            showMaxButton: false,\r\n            resizable: false\r\n        };\r\n        // å¼¹åºå¸®å©æ¡\r\n        this.funcOpDialog = this.modalService.show(this.funcOpComp, modalConfig);\r\n\r\n        // åæ¶å\r\n        this.funcOpComp.instance.afterCancle.subscribe(\r\n            res => {\r\n                // æ¶å¤±æ¨¡ææ¡\r\n                this.funcOpDialog.close();\r\n            }\r\n        );\r\n        // ç¡®è®¤å\r\n        this.funcOpComp.instance.afterConfirm.subscribe((res: RtfApp[]) => {\r\n            this.afterHelpConfirm.next(res);\r\n        });\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GridModule } from '@progress/kendo-angular-grid';\r\nimport { LayoutModule } from '@progress/kendo-angular-layout';\r\nimport { TreeViewModule } from '@progress/kendo-angular-treeview';\r\nimport { AppModuleTreeComponent } from './app-module-tree/app-module-tree.component';\r\nimport { RtfAppComponent } from './rtf-app/rtf-app.component';\r\nimport { RtfAppHelpComponent } from './rtf-app-help/rtf-app-help.component';\r\nimport { RtfAppService } from './service/rtf-app.service';\r\nimport { RtfUIWebapiService } from '../common/rtf-ui-webapi.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        HttpClientModule,\r\n        // kendo\r\n        GridModule,\r\n        LayoutModule,\r\n        TreeViewModule,\r\n        // farris\r\n        ModalModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n    ],\r\n\r\n    declarations: [\r\n        AppModuleTreeComponent,\r\n        RtfAppComponent,\r\n        RtfAppHelpComponent,\r\n    ],\r\n\r\n    entryComponents: [\r\n        RtfAppComponent\r\n    ],\r\n\r\n    providers: [\r\n        RtfUIWebapiService,\r\n        RtfAppService,\r\n    ],\r\n\r\n    exports: [\r\n        RtfAppComponent,\r\n        RtfAppHelpComponent\r\n    ]\r\n})\r\nexport class RtfAppHelpModule { }\r\n"]}