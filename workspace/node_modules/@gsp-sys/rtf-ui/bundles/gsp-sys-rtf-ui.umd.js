(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@progress/kendo-angular-grid'), require('@progress/kendo-angular-layout'), require('@progress/kendo-angular-treeview'), require('rxjs'), require('@angular/core'), require('@angular/common/http'), require('@farris/ui-modal'), require('@farris/ui-messager')) :
    typeof define === 'function' && define.amd ? define('@gsp-sys/rtf-ui', ['exports', '@angular/common', '@progress/kendo-angular-grid', '@progress/kendo-angular-layout', '@progress/kendo-angular-treeview', 'rxjs', '@angular/core', '@angular/common/http', '@farris/ui-modal', '@farris/ui-messager'], factory) :
    (factory((global['gsp-sys'] = global['gsp-sys'] || {}, global['gsp-sys']['rtf-ui'] = {}),global.ng.common,global.kendoAngularGrid,global.kendoAngularLayout,global.kendoAngularTreeview,global.rxjs,global.ng.core,global.ng.common.http,global.uiModal,global.uiMessager));
}(this, (function (exports,common,kendoAngularGrid,kendoAngularLayout,kendoAngularTreeview,rxjs,core,http,uiModal,uiMessager) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppModuleTreeComponent = /** @class */ (function () {
        function AppModuleTreeComponent() {
            /**
             * 菜单明细类
             */
            this.appTreeData = [];
            this.selectKeys = [];
            /**
             * 功能菜单模块变化后后
             */
            this.appTreeChanged = new core.EventEmitter();
            /**
             * 树节点展开后的输出
             */
            this.appTreeExpanded = new core.EventEmitter();
            /**
             * 树控件展开的节点值
             */
            this.expandedKeys = [];
        }
        /**
         * 变化情况
         * @param changes 变化
         */
        /**
         * 变化情况
         * @param {?} changes 变化
         * @return {?}
         */
        AppModuleTreeComponent.prototype.ngOnChanges = /**
         * 变化情况
         * @param {?} changes 变化
         * @return {?}
         */
            function (changes) {
                var _this = this;
                // 初始化变化取消
                // 未包含appTreeData的变化
                if (!changes['appTreeData']) {
                    return;
                }
                // 无效的值不予处理
                if (!changes['appTreeData'].currentValue ||
                    changes['appTreeData'].currentValue.length === 0) {
                    return;
                }
                // 获取到菜单数据
                rxjs.from(this.appTreeData).subscribe(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (!item.ParentId || item.ParentId === '0') {
                        item.ParentId = undefined;
                        if (item.Layer === 1) {
                            _this.expandedKeys.push(item.Id);
                        }
                    }
                }));
                /*
                 // 默认业务对象的处理
                 if (!isNullOrUndefined(this.bizObjectId) && this.bizObjectId !== '') {
                    // 树焦点行
                    let curBizObjectId = this.bizObjectId;
                    while (!isNullOrUndefined(curBizObjectId)) {
                        this.expandedKeys.push(curBizObjectId);
                        // 找到当前节点的付家店
                        curBizObjectId = this.data.find(item => item['id'] === curBizObjectId)['parentID'];
                    }
                    // 右侧操作变化
                    this.selectKeys = [this.bizObjectId];
                    setTimeout(() => {
                        this.bizObjectChanged.emit(this.bizObjectId);
                    }, 80);
                }
                */
            };
        /**
         * @return {?}
         */
        AppModuleTreeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 选中行改变后触发事件
         */
        /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
        AppModuleTreeComponent.prototype.selectChange = /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
            function (args) {
                /** @type {?} */
                var curApp = args.dataItem;
                // 首次触发
                if (this.selectKeys == null || this.selectKeys.length === 0) {
                    this.appTreeChanged.emit(curApp);
                }
                else {
                    // 这个事件里还不会对selectedkeys数组赋值，是上一个状态的
                    /** @type {?} */
                    var lastAppId = this.selectKeys[0];
                    /** @type {?} */
                    var curAppId = curApp.Id;
                    // 变化的情况下触发
                    if (lastAppId !== curAppId) {
                        this.appTreeChanged.emit(curApp);
                    }
                }
            };
        /**
         * @param {?} arg
         * @return {?}
         */
        AppModuleTreeComponent.prototype.onExpand = /**
         * @param {?} arg
         * @return {?}
         */
            function (arg) {
                console.log('菜单帮助左侧树展开');
                if (!arg || !arg.dataItem) {
                    return;
                }
                this.appTreeExpanded.emit(arg.dataItem);
            };
        AppModuleTreeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-module-tree',
                        template: "<div class=\"d-flex flex-column flex-fill pt-2 pb-2\" style=\"height: 100%\">\r\n    <kendo-treeview [nodes]=\"appTreeData\" textField=\"Name\" kendoTreeViewExpandable kendoTreeViewFlatDataBinding\r\n        idField=\"Id\" parentIdField=\"ParentId\" kendoTreeViewSelectable [selectBy]=\"'Id'\"\r\n        [(selectedKeys)]=\"this.selectKeys\" [(expandedKeys)]=\"expandedKeys\" [expandBy]=\"'Id'\"\r\n        (expand)=\"this.onExpand($event)\" (selectionChange)=\"selectChange($event)\">\r\n    </kendo-treeview>\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AppModuleTreeComponent.ctorParameters = function () { return []; };
        AppModuleTreeComponent.propDecorators = {
            appTreeData: [{ type: core.Input }],
            bizObjectId: [{ type: core.Input }],
            appTreeChanged: [{ type: core.Output }],
            appTreeExpanded: [{ type: core.Output }]
        };
        return AppModuleTreeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RtfUIWebapiService = /** @class */ (function () {
        function RtfUIWebapiService() {
        }
        Object.defineProperty(RtfUIWebapiService.prototype, "functionsApi", {
            /**
             * 菜单api地址
             */
            get: /**
             * 菜单api地址
             * @return {?}
             */ function () {
                return '/api/runtime/sys/v1.0/functions/allfuncs';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RtfUIWebapiService.prototype, "bizObjectApi", {
            /**
             * 业务对象api地址
             */
            get: /**
             * 业务对象api地址
             * @return {?}
             */ function () {
                return '/api/dev/main/v1.0/business-objects';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RtfUIWebapiService.prototype, "layerFunctionsApi", {
            /**
             * 分层获取菜单数据  api
             */
            get: /**
             * 分层获取菜单数据  api
             * @return {?}
             */ function () {
                return '/api/runtime/sys/v1.0/functions/layerFuncs';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RtfUIWebapiService.prototype, "httpHeader", {
            /**
             * Http头信息
             */
            get: /**
             * Http头信息
             * @return {?}
             */ function () {
                /** @type {?} */
                var options = {
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    responseType: 'json'
                };
                return options;
            },
            enumerable: true,
            configurable: true
        });
        RtfUIWebapiService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RtfUIWebapiService.ctorParameters = function () { return []; };
        return RtfUIWebapiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RtfAppService = /** @class */ (function () {
        function RtfAppService(rtfCommon, httpClient) {
            this.rtfCommon = rtfCommon;
            this.httpClient = httpClient;
        }
        /**
         * 获取功能菜单操作
         */
        /**
         * 获取功能菜单操作
         * @return {?}
         */
        RtfAppService.prototype.getAppList = /**
         * 获取功能菜单操作
         * @return {?}
         */
            function () {
                /** @type {?} */
                var url = this.rtfCommon.functionsApi;
                /** @type {?} */
                var header = this.rtfCommon.httpHeader;
                return this.httpClient.get(url, header);
            };
        /**
         * 根据祖父节点分层加载菜单数据
         */
        /**
         * 根据祖父节点分层加载菜单数据
         * @param {?} grandParentId
         * @return {?}
         */
        RtfAppService.prototype.getDataByGrandParentId = /**
         * 根据祖父节点分层加载菜单数据
         * @param {?} grandParentId
         * @return {?}
         */
            function (grandParentId) {
                /** @type {?} */
                var url = this.rtfCommon.layerFunctionsApi + "/" + grandParentId;
                /** @type {?} */
                var header = this.rtfCommon.httpHeader;
                return this.httpClient.get(url, header);
            };
        RtfAppService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RtfAppService.ctorParameters = function () {
            return [
                { type: RtfUIWebapiService },
                { type: http.HttpClient }
            ];
        };
        return RtfAppService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var i18nFuncHelpInfo = {
        'zh-CHS': {
            TitleName: '功能菜单帮助',
            EnterNameOrCode: '输入编号或名称查找',
            Code: '编号',
            Name: '名称',
            Confirm: '确认',
            Cancel: '取消'
        },
        'zh-CHT': {
            TitleName: '功能菜單幫助',
            EnterNameOrCode: '輸入編號或名稱查找',
            Code: '編號',
            Name: ' 名稱',
            Confirm: '確認',
            Cancel: '取消'
        },
        en: {
            TitleName: 'Function Help',
            EnterNameOrCode: 'Please Enter Name Or Code',
            Code: 'Code',
            Name: 'Name',
            Confirm: 'Confirm',
            Cancel: 'Cancel'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 系统管理：功能操作左树有、右列表展示
     */
    var RtfAppComponent = /** @class */ (function () {
        function RtfAppComponent(rtfAppService) {
            this.rtfAppService = rtfAppService;
            /**
             * 是否分层加载左侧树，默认为false
             */
            this.isLayeredLoad = false;
            /**
             * 确认事件
             */
            this.afterConfirm = new core.EventEmitter();
            /**
             * 关闭事件
             */
            this.afterCancle = new core.EventEmitter();
            /**
             * 功能操作全量数据
             */
            this.data = [];
            /**
             * 缓存的菜单及结构数据
             */
            this.allAppList = [];
            /**
             * 当前选中数据
             */
            this.curSelectedKeys = [];
            this.title = '功能菜单帮助';
        }
        /**
         * @return {?}
         */
        RtfAppComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.selectableSettings = {
                    checkboxOnly: true,
                    // 默认单选
                    mode: !this.gridSelectMode ? 'single' : this.gridSelectMode,
                    enabled: true
                };
                if (this.isLayeredLoad === false) {
                    /** @type {?} */
                    var allFuncsStream = this.rtfAppService.getAppList();
                    this.loadTreeData(allFuncsStream);
                }
                else {
                    this.loadTreeDataByGrandParentId('0');
                }
            };
        /**
         * @param {?} arg
         * @return {?}
         */
        RtfAppComponent.prototype.onKeyUp = /**
         * @param {?} arg
         * @return {?}
         */
            function (arg) {
                if (arg && arg.keyCode === 13) {
                    this.searchData(this.filter.nativeElement.value);
                }
            };
        /**
         * 搜索
         * @param filterValue 查询条件
         */
        /**
         * 搜索
         * @param {?} filterValue 查询条件
         * @return {?}
         */
        RtfAppComponent.prototype.searchData = /**
         * 搜索
         * @param {?} filterValue 查询条件
         * @return {?}
         */
            function (filterValue) {
                // 空的搜索是全部数据
                if (filterValue === null || filterValue === '') {
                    this.gridData = this.data.concat();
                    return;
                }
                /** @type {?} */
                var filter = filterValue.toLowerCase();
                // 搜索到上级时
                this.gridData = this.data.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    return item.Code.toLowerCase().includes(filter) ||
                        item.Name.toLowerCase().includes(filter);
                }));
            };
        /**
         * 业务对象变化后
         * @param arg 业务对象参数
         */
        /**
         * 业务对象变化后
         * @param {?} arg 业务对象参数
         * @return {?}
         */
        RtfAppComponent.prototype.leftAppTreeChanged = /**
         * 业务对象变化后
         * @param {?} arg 业务对象参数
         * @return {?}
         */
            function (arg) {
                if (!this.data || this.data.length === 0) {
                    return;
                }
                /** @type {?} */
                var selectedId = arg.Id;
                /** @type {?} */
                var selectedPath = arg.Path;
                // 根据父子关系过滤当前界面数据，包含上下级
                this.gridData = this.data.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    return item.ParentId === selectedId ||
                        item.Path.startsWith(selectedPath);
                }));
            };
        /**
         * @param {?} arg
         * @return {?}
         */
        RtfAppComponent.prototype.onAppTreeExpanded = /**
         * @param {?} arg
         * @return {?}
         */
            function (arg) {
                if (this.isLayeredLoad === false) {
                    return;
                }
                if (this.isContainGrandChildNode(arg) === false) {
                    this.loadTreeDataByGrandParentId(arg.Id);
                }
            };
        /**
         * 获取选中数据
         */
        /**
         * 获取选中数据
         * @return {?}
         */
        RtfAppComponent.prototype.getSelectedObject = /**
         * 获取选中数据
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var result = this.data
                    .filter(( /**
             * @param {?} item
             * @return {?}
             */function (item) {
                    return _this.curSelectedKeys.findIndex(( /**
                     * @param {?} select
                     * @return {?}
                     */function (select) { return select === item.Id; })) >= 0;
                }));
                return result;
            };
        /**
         * 确认
         */
        /**
         * 确认
         * @return {?}
         */
        RtfAppComponent.prototype.confirm = /**
         * 确认
         * @return {?}
         */
            function () {
                /** @type {?} */
                var result = this.getSelectedObject();
                // this.selectedTreeNode.selectedInvok = result;
                this.afterConfirm.next(result);
                // 取消-目的是在这里让模态框消失
                this.cancle();
            };
        /**
         * 取消
         */
        /**
         * 取消
         * @return {?}
         */
        RtfAppComponent.prototype.cancle = /**
         * 取消
         * @return {?}
         */
            function () {
                this.afterCancle.next();
            };
        /**
         * @param {?} langCode
         * @return {?}
         */
        RtfAppComponent.prototype.setCurrentLangCode = /**
         * @param {?} langCode
         * @return {?}
         */
            function (langCode) {
                this.currentLangCode = langCode;
                this.title = this.getResOnCurrentLangeContext('TitleName');
            };
        /**
         * @param {?} resKey
         * @return {?}
         */
        RtfAppComponent.prototype.getResOnCurrentLangeContext = /**
         * @param {?} resKey
         * @return {?}
         */
            function (resKey) {
                /** @type {?} */
                var resValue = i18nFuncHelpInfo[this.currentLangCode][resKey];
                return resValue;
            };
        /**
         * @private
         * @param {?} node
         * @return {?}
         */
        RtfAppComponent.prototype.isContainGrandChildNode = /**
         * @private
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (!('1' === node.Layer || '2' === node.Layer)) {
                    return true;
                }
                /** @type {?} */
                var parentId = node.Id;
                /** @type {?} */
                var sonList = this.allAppList.filter(( /**
                 * @param {?} f
                 * @return {?}
                 */function (f) { return f.FParentid === parentId; }));
                /** @type {?} */
                var res = false;
                var _loop_1 = function (i) {
                    /** @type {?} */
                    var grandList = this_1.allAppList.filter(( /**
                     * @param {?} o
                     * @return {?}
                     */function (o) { return o.FParentid === sonList[i].FID; }));
                    if (grandList && grandList.length > 0) {
                        res = true;
                        return "break";
                    }
                };
                var this_1 = this;
                for (var i = 0; i < sonList.length; i++) {
                    var state_1 = _loop_1(i);
                    if (state_1 === "break")
                        break;
                }
                return res;
            };
        /**
         * @private
         * @param {?} grandParentId
         * @return {?}
         */
        RtfAppComponent.prototype.loadTreeDataByGrandParentId = /**
         * @private
         * @param {?} grandParentId
         * @return {?}
         */
            function (grandParentId) {
                // 分层加载
                /** @type {?} */
                var stream = this.rtfAppService.getDataByGrandParentId(grandParentId);
                this.loadTreeData(stream);
            };
        /**
         * @private
         * @param {?} stream
         * @return {?}
         */
        RtfAppComponent.prototype.loadTreeData = /**
         * @private
         * @param {?} stream
         * @return {?}
         */
            function (stream) {
                var _this = this;
                stream.subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    if (res) {
                        res.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            /** @type {?} */
                            var temp = {
                                Id: element.id,
                                Code: element.code,
                                Name: element.name,
                                ParentId: element.parentId,
                                Layer: element.layer,
                                Path: element.path,
                                SortOrder: element.sortOrder,
                                Child: element.child,
                                InvokingConfig: element.invokingConfig
                            };
                            _this.allAppList.push(temp);
                        }));
                    }
                    // 左侧树
                    _this.treeData = _this.allAppList.filter(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item.Layer <= 3; }));
                    // 菜单明细数据
                    _this.data = _this.allAppList.filter(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item.Layer >= 4; }));
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    console.log('获取菜单数据失败');
                }));
            };
        RtfAppComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-rtf-app',
                        template: "<div class=\"d-flex flex-row\" style=\"width: 800px; border:2px;position:absolute;top:0px;bottom: 0px;\r\nright:0px;left:0px;overflow: hidden;height: 100%;\">\r\n    <div class=\"flex-fill\">\r\n        <kendo-splitter style=\"height:100%\" orientation=\"horizontal\">\r\n            <kendo-splitter-pane size=\"40%\" min=\"20%\" max=\"50%\">\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>{{this.getResOnCurrentLangeContext('TitleName')}}</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div>\r\n                    <div class=\"flex-fill\" style=\"overflow: auto;\">\r\n                        <app-module-tree [appTreeData]=\"this.treeData\" [bizObjectId]=\"bizObjectId\"\r\n                            (appTreeChanged)=\"leftAppTreeChanged($event)\" (appTreeExpanded)=\"onAppTreeExpanded($event)\">\r\n                        </app-module-tree>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n            <kendo-splitter-pane>\r\n                <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n                    <!-- <div class=\"p-2\" style=\"height: 35px;\">\r\n                        <h5>\u83DC\u5355\u5217\u8868</h5>\r\n                        <hr class=\"m-0 p-0\" />\r\n                    </div> -->\r\n                    <div class=\"clearfix mt-1 mb-1 ml-1\">\r\n                        <div class=\"f-cmp-inputgroup input-group\" style=\"width: 70%;\">\r\n                            <input #filter class=\"form-control\" (keyup)=\"onKeyUp($event)\"\r\n                                placeholder=\"{{this.getResOnCurrentLangeContext('EnterNameOrCode')}}\">\r\n                            <div class=\"input-group-append\"><span class=\"input-group-text\"\r\n                                    (click)=\"searchData(filter.value)\">\r\n                                    <i class=\"k-icon k-i-search\"></i></span></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"d-flex flex-fill\" style=\"position:relative;\">\r\n                        <kendo-grid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\"\r\n                            [kendoGridBinding]=\"gridData\" [kendoGridSelectBy]=\"'Id'\" [selectedKeys]=\"curSelectedKeys\">\r\n                            <kendo-grid-checkbox-column width=\"50px\"></kendo-grid-checkbox-column>\r\n                            <kendo-grid-column field=\"Code\" title=\"{{this.getResOnCurrentLangeContext('Code')}}\">\r\n                            </kendo-grid-column>\r\n                            <kendo-grid-column field=\"Name\" title=\"{{this.getResOnCurrentLangeContext('Name')}}\">\r\n                            </kendo-grid-column>\r\n                        </kendo-grid>\r\n                    </div>\r\n                </div>\r\n            </kendo-splitter-pane>\r\n        </kendo-splitter>\r\n    </div>\r\n</div>\r\n<ng-template #btnOkAndCancle>\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">{{this.getResOnCurrentLangeContext('Confirm')}}</button>\r\n    <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">{{this.getResOnCurrentLangeContext('Cancel')}}</button>\r\n</ng-template>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RtfAppComponent.ctorParameters = function () {
            return [
                { type: RtfAppService }
            ];
        };
        RtfAppComponent.propDecorators = {
            bizObjectId: [{ type: core.Input }],
            gridSelectMode: [{ type: core.Input }],
            afterConfirm: [{ type: core.Output }],
            afterCancle: [{ type: core.Output }],
            btnOkAndCancleRef: [{ type: core.ViewChild, args: ['btnOkAndCancle',] }],
            filter: [{ type: core.ViewChild, args: ['filter',] }]
        };
        return RtfAppComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable
    var RtfAppHelpComponent = /** @class */ (function () {
        function RtfAppHelpComponent(rtfCommon, modalService, farrisMsg, injector, cfr) {
            this.rtfCommon = rtfCommon;
            this.modalService = modalService;
            this.farrisMsg = farrisMsg;
            this.injector = injector;
            this.cfr = cfr;
            /**
             * 初始选中的权限对象内码
             */
            this.initSelectKeys = [];
            this.languageCode = 'zh-CHS';
            this.isLayeredLoad = false;
            /**
             * 输出事件
             */
            this.afterHelpConfirm = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        RtfAppHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * 弹出Farris模态框帮助
         */
        /**
         * 弹出Farris模态框帮助
         * @param {?=} sessionId
         * @return {?}
         */
        RtfAppHelpComponent.prototype.showHelp = /**
         * 弹出Farris模态框帮助
         * @param {?=} sessionId
         * @return {?}
         */
            function (sessionId) {
                var _this = this;
                // if (!sessionId || sessionId === '') {
                //     this.farrisMsg.error('调用帮助时请传递上下文变量!');
                //     return;
                // }
                this.rtfCommon.sessionId = ' ';
                /** @type {?} */
                var compFactory = this.cfr.resolveComponentFactory(RtfAppComponent);
                this.funcOpComp = compFactory.create(this.injector);
                // 向组件绑定语言代码
                this.funcOpComp.instance.setCurrentLangCode(this.languageCode);
                this.funcOpComp.instance.isLayeredLoad = this.isLayeredLoad;
                // 获取功能菜单的实例组件
                if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {
                    this.initSelectKeys
                        .forEach(( /**
                 * @param {?} key
                 * @return {?}
                 */function (key) { return _this.funcOpComp.instance.curSelectedKeys.push(key); }));
                }
                // 初始化选择的业务对象
                if (this.bizObjectId && this.bizObjectId !== '') {
                    this.funcOpComp.instance.bizObjectId = this.bizObjectId;
                }
                /** @type {?} */
                var modalConfig = {
                    title: this.funcOpComp.instance.title,
                    width: 800,
                    height: 550,
                    buttons: this.funcOpComp.instance.btnOkAndCancleRef,
                    showButtons: true,
                    showMaxButton: false,
                    resizable: false
                };
                // 弹出帮助框
                this.funcOpDialog = this.modalService.show(this.funcOpComp, modalConfig);
                // 取消后
                this.funcOpComp.instance.afterCancle.subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    // 消失模态框
                    _this.funcOpDialog.close();
                }));
                // 确认后
                this.funcOpComp.instance.afterConfirm.subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.afterHelpConfirm.next(res);
                }));
            };
        RtfAppHelpComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-rtf-app-help',
                        template: "",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        RtfAppHelpComponent.ctorParameters = function () {
            return [
                { type: RtfUIWebapiService },
                { type: uiModal.BsModalService },
                { type: uiMessager.MessagerService },
                { type: core.Injector },
                { type: core.ComponentFactoryResolver }
            ];
        };
        RtfAppHelpComponent.propDecorators = {
            bizObjectId: [{ type: core.Input }],
            initSelectKeys: [{ type: core.Input }],
            languageCode: [{ type: core.Input }],
            isLayeredLoad: [{ type: core.Input }],
            afterHelpConfirm: [{ type: core.Output }]
        };
        return RtfAppHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RtfAppHelpModule = /** @class */ (function () {
        function RtfAppHelpModule() {
        }
        RtfAppHelpModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            // kendo
                            kendoAngularGrid.GridModule,
                            kendoAngularLayout.LayoutModule,
                            kendoAngularTreeview.TreeViewModule,
                            // farris
                            uiModal.ModalModule.forRoot(),
                            uiMessager.MessagerModule.forRoot(),
                        ],
                        declarations: [
                            AppModuleTreeComponent,
                            RtfAppComponent,
                            RtfAppHelpComponent,
                        ],
                        entryComponents: [
                            RtfAppComponent
                        ],
                        providers: [
                            RtfUIWebapiService,
                            RtfAppService,
                        ],
                        exports: [
                            RtfAppComponent,
                            RtfAppHelpComponent
                        ]
                    },] }
        ];
        return RtfAppHelpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.RtfAppHelpModule = RtfAppHelpModule;
    exports.RtfAppHelpComponent = RtfAppHelpComponent;
    exports.RtfAppComponent = RtfAppComponent;
    exports.ɵc = RtfUIWebapiService;
    exports.ɵa = AppModuleTreeComponent;
    exports.ɵb = RtfAppService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-sys-rtf-ui.umd.js.map