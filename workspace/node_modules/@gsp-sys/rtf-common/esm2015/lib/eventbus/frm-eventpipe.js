/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:import-blacklist
import { BehaviorSubject, Subscription, Subject } from 'rxjs';
import { Injectable } from '@angular/core';
export class EventBusPipe {
    /**
     * @param {?} tokenValue
     * @param {?} parentEventPipeList
     * @param {?} sub
     */
    constructor(tokenValue, parentEventPipeList, sub) {
        this.tokenValue = tokenValue;
        this.parentEventPipeList = parentEventPipeList;
        this.eventSubject = sub || new BehaviorSubject(null);
        this.subscription = new Subscription();
        this.onceSubscription = new Subscription();
        this.observers = new Map();
        if (this.parentEventPipeList) {
            this.parentEventPipeList.push(this);
        }
    }
    /**
     * @param {?} bizPara
     * @return {?}
     */
    post(bizPara) {
        this.eventSubject.next(bizPara);
    }
    /**
     * @param {?} eventHandler
     * @return {?}
     */
    subscribe(eventHandler) {
        this.subscription = this.eventSubject.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            eventHandler(value);
        }));
        return this;
    }
    /**
     * @param {?} observerKey
     * @param {?} eventHandler
     * @return {?}
     */
    subscribeWithObkey(observerKey, eventHandler) {
        /** @type {?} */
        const observer = this.observers.get(observerKey);
        if (observer) {
            observer.unsubscribe();
        }
        /** @type {?} */
        const sub = this.eventSubject.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            eventHandler(value);
        }));
        this.observers.set(observerKey, sub);
        return this;
    }
    /**
     * @param {?} eventHandler
     * @return {?}
     */
    subscribeOnce(eventHandler) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const scription = this.eventSubject.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            eventHandler(value);
            if (scription) {
                scription.unsubscribe();
            }
            self.parentEventPipeList = new Array();
        }));
        return this;
    }
    /**
     * @return {?}
     */
    unSubscribe() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    // 注销使用once方法注册的订阅。
    /**
     * @return {?}
     */
    unSubscribeForOnce() {
        this.onceSubscription.unsubscribe();
    }
    /**
     * 取消某观察者的订阅
     * @param {?} observerKey 观察者唯一标识
     * @return {?}
     */
    unSubscribeWithObkey(observerKey) {
        /** @type {?} */
        const scription = this.observers.get(observerKey);
        if (scription) {
            scription.unsubscribe();
        }
    }
    /**
     * @param {?} tokenValue
     * @return {?}
     */
    matchEmitterToken(tokenValue) {
        if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    }
    /**
     * @param {?} tokenValue
     * @return {?}
     */
    examByTargetToken(tokenValue) {
        if (this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    }
    /**
     * @param {?} subscriber
     * @return {?}
     */
    dispose(subscriber) {
    }
}
EventBusPipe.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EventBusPipe.ctorParameters = () => [
    { type: String },
    { type: Array },
    { type: Subject }
];
if (false) {
    /** @type {?} */
    EventBusPipe.prototype.eventSubject;
    /** @type {?} */
    EventBusPipe.prototype.observers;
    /** @type {?} */
    EventBusPipe.prototype.pipeCode;
    /**
     * @type {?}
     * @private
     */
    EventBusPipe.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    EventBusPipe.prototype.onceSubscription;
    /**
     * @type {?}
     * @private
     */
    EventBusPipe.prototype.tokenValue;
    /**
     * @type {?}
     * @private
     */
    EventBusPipe.prototype.parentEventPipeList;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJtLWV2ZW50cGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3lzL3J0Zi1jb21tb24vIiwic291cmNlcyI6WyJsaWIvZXZlbnRidXMvZnJtLWV2ZW50cGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBSWpELE1BQU0sT0FBTyxZQUFZOzs7Ozs7SUFRckIsWUFBb0IsVUFBa0IsRUFBVSxtQkFBd0MsRUFBRSxHQUFpQjtRQUF2RixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQVUsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUNwRixJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsSUFBSSxJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztRQUVqRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUMxQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxJQUFJLENBQUMsT0FBWTtRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7O0lBRUQsU0FBUyxDQUFDLFlBQWtDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN0RCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxXQUFtQixFQUFFLFlBQWtDOztjQUNoRSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQ2hELElBQUksUUFBUSxFQUFFO1lBQ1YsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzFCOztjQUNLLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzlDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixDQUFDLEVBQUM7UUFDRixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsWUFBa0M7O2NBQ3RDLElBQUksR0FBRyxJQUFJOztjQUNYLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3BELFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQixJQUFJLFNBQVMsRUFBRTtnQkFDWCxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDM0I7WUFDRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxLQUFLLEVBQWdCLENBQUM7UUFDekQsQ0FBQyxFQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNMLENBQUM7Ozs7O0lBRUQsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3hDLENBQUM7Ozs7OztJQU1ELG9CQUFvQixDQUFDLFdBQW1COztjQUM5QixTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQ2pELElBQUksU0FBUyxFQUFFO1lBQ1gsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQzs7Ozs7SUFHRCxpQkFBaUIsQ0FBQyxVQUFrQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO1lBQ2pFLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxVQUFrQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO1lBQ2hDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsVUFBd0I7SUFDaEMsQ0FBQzs7O1lBN0ZKLFVBQVU7Ozs7O1lBUzhELEtBQUs7WUFidEMsT0FBTzs7OztJQU8zQyxvQ0FBa0M7O0lBQ2xDLGlDQUE0Qzs7SUFDNUMsZ0NBQXdCOzs7OztJQUN4QixvQ0FBbUM7Ozs7O0lBQ25DLHdDQUF1Qzs7Ozs7SUFFM0Isa0NBQTBCOzs7OztJQUFFLDJDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTppbXBvcnQtYmxhY2tsaXN0XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3Vic2NyaXB0aW9uLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEluamVjdGFibGUsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV2ZW50QnVzUGlwZSBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcclxuXHJcbiAgICBwdWJsaWMgZXZlbnRTdWJqZWN0OiBTdWJqZWN0PGFueT47XHJcbiAgICBwdWJsaWMgb2JzZXJ2ZXJzOiBNYXA8c3RyaW5nLCBTdWJzY3JpcHRpb24+O1xyXG4gICAgcHVibGljIHBpcGVDb2RlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBvbmNlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0b2tlblZhbHVlOiBzdHJpbmcsIHByaXZhdGUgcGFyZW50RXZlbnRQaXBlTGlzdDogQXJyYXk8RXZlbnRCdXNQaXBlPiwgc3ViOiBTdWJqZWN0PGFueT4pIHtcclxuICAgICAgICB0aGlzLmV2ZW50U3ViamVjdCA9IHN1YiB8fCBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4obnVsbCk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5vbmNlU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gbmV3IE1hcDxzdHJpbmcsIFN1YnNjcmlwdGlvbj4oKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50RXZlbnRQaXBlTGlzdCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudEV2ZW50UGlwZUxpc3QucHVzaCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdChiaXpQYXJhOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmV2ZW50U3ViamVjdC5uZXh0KGJpelBhcmEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnNjcmliZShldmVudEhhbmRsZXI6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogSURpc3Bvc2FibGUge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5ldmVudFN1YmplY3Quc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBldmVudEhhbmRsZXIodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnNjcmliZVdpdGhPYmtleShvYnNlcnZlcktleTogc3RyaW5nLCBldmVudEhhbmRsZXI6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogSURpc3Bvc2FibGUge1xyXG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnMuZ2V0KG9ic2VydmVyS2V5KTtcclxuICAgICAgICBpZiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3ViID0gdGhpcy5ldmVudFN1YmplY3Quc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBldmVudEhhbmRsZXIodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnNldChvYnNlcnZlcktleSwgc3ViKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzdWJzY3JpYmVPbmNlKGV2ZW50SGFuZGxlcjogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiBJRGlzcG9zYWJsZSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0aW9uID0gdGhpcy5ldmVudFN1YmplY3Quc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBldmVudEhhbmRsZXIodmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLnBhcmVudEV2ZW50UGlwZUxpc3QgPSBuZXcgQXJyYXk8RXZlbnRCdXNQaXBlPigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHVuU3Vic2NyaWJlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5rOo6ZSA5L2/55Sob25jZeaWueazleazqOWGjOeahOiuoumYheOAglxyXG4gICAgdW5TdWJzY3JpYmVGb3JPbmNlKCkge1xyXG4gICAgICAgIHRoaXMub25jZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+W5raI5p+Q6KeC5a+f6ICF55qE6K6i6ZiFXHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZXJLZXkg6KeC5a+f6ICF5ZSv5LiA5qCH6K+GXHJcbiAgICAgKi9cclxuICAgIHVuU3Vic2NyaWJlV2l0aE9ia2V5KG9ic2VydmVyS2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBzY3JpcHRpb24gPSB0aGlzLm9ic2VydmVycy5nZXQob2JzZXJ2ZXJLZXkpO1xyXG4gICAgICAgIGlmIChzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgc2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBtYXRjaEVtaXR0ZXJUb2tlbih0b2tlblZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy50b2tlblZhbHVlICYmIHRva2VuVmFsdWUgJiYgdGhpcy50b2tlblZhbHVlICE9PSB0b2tlblZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZXhhbUJ5VGFyZ2V0VG9rZW4odG9rZW5WYWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMudG9rZW5WYWx1ZSAhPT0gdG9rZW5WYWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2Uoc3Vic2NyaWJlcjogU3Vic2NyaXB0aW9uKTogdm9pZCB7XHJcbiAgICB9XHJcbn1cclxuIl19