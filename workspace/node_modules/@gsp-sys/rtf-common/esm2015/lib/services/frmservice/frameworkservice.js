/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { FrmEventBus } from '../../eventbus/frm-evenbus';
import { LoadingService } from '../loading/loading.service';
import { FuncsService } from '../funcsservice/funcs.service';
import { IframeLink } from '../../models/iframe.model';
import { map, switchMap } from 'rxjs/operators';
import { CacheService, HttpService, LanguageService, SessionService } from '@ecp-caf/caf-common';
import { EventUtil, FrmUtil, AppType } from '../../shared/frm-util';
import { AppService } from '../appservice/app.service';
import { FrmI18nSettingService } from '../i18nService/i18n-setting.service';
import { FrameworkVariableService } from '../frmVariableService/framework-variable.service';
export class FrameworkService {
    /**
     * @param {?} http
     * @param {?} router
     * @param {?} cache
     * @param {?} sessionSvc
     * @param {?} feb
     * @param {?} funcService
     * @param {?} loadService
     * @param {?} appService
     * @param {?} i18nSetting
     */
    constructor(http, router, cache, sessionSvc, feb, funcService, loadService, appService, i18nSetting) {
        this.http = http;
        this.router = router;
        this.cache = cache;
        this.sessionSvc = sessionSvc;
        this.feb = feb;
        this.funcService = funcService;
        this.loadService = loadService;
        this.appService = appService;
        this.i18nSetting = i18nSetting;
        this.FUNCSTATUS_PATH = '/api/runtime/sys/v1.0/function-states';
        this.BeforeFuncClose = EventUtil.BEFORE_FUNC_CLOSE;
        this.FuncClosed = EventUtil.FUNC_CLOSED;
        this.FuncSwitch = EventUtil.FUNC_SWITCH;
        if (!this.i18nSetting) {
            /** @type {?} */
            const variables = new FrameworkVariableService();
            /** @type {?} */
            const language = new LanguageService(null);
            this.i18nSetting = new FrmI18nSettingService(variables, language, http);
        }
        if (!this.appService) {
            this.appService = new AppService(this.http, this.sessionSvc, this.i18nSetting);
        }
    }
    /**
     * 根据funcid打开功能菜单
     * (适用于单页签路由，不支持NG7升级后菜单之间跳转)
     * @param {?} funcid
     * @param {?} routepath
     * @param {?} parentsessionid
     * @param {?=} newsession
     * @param {?=} simpleparam
     * @return {?}
     */
    openFunc(funcid, routepath, parentsessionid, newsession = true, simpleparam = '') {
        /** @type {?} */
        const appOps = {
            appType: AppType.Menu,
            funcId: funcid,
            appId: '',
            appEntrance: ''
        };
        this.internalOpen(appOps);
        return of(true);
        // return this.internalOpen$(appOps);
    }
    /**
     * 直接打开功能
     * @param {?} options
     * @return {?}
     */
    openMenu(options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                if (!options.appId) {
                    window.alert('参数appId不能为空！');
                    return;
                }
                this.appService.openAppByOptions(options);
                break;
            case AppType.Menu:
                this.internalOpen(options);
                break;
            case AppType.Other: break;
        }
    }
    /**
     * 通过流方式打开功能
     * @param {?} options
     * @return {?}
     */
    openMenu$(options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                if (!options.appId) {
                    window.alert('参数appId不能为空！');
                    return;
                }
                return this.appService.openAppByOptions$(options);
            case AppType.Menu:
                if (options.onlyGetIframeLink === true) {
                    return this.internalOpenByIframeLink$(options);
                }
                return this.internalOpen$(options);
            case AppType.Other: break;
        }
    }
    /**
     * 打开联查菜单
     * @param {?} funcId
     * @param {?} options
     * @return {?}
     */
    openConnectedFunc(funcId, options) {
        /** @type {?} */
        const appOps = {
            appType: AppType.Menu,
            funcId,
            appId: '',
            appEntrance: '',
            entityParams: options.EntityParam,
        };
        this.internalOpen(appOps);
    }
    /**
     * 打开联查菜单，并传参
     * @param {?} funcId
     * @param {?} params
     * @param {?=} reload
     * @return {?}
     */
    openFuncWithParam(funcId, params, reload) {
        /** @type {?} */
        const options = {
            appType: AppType.Menu,
            funcId,
            appId: '',
            appEntrance: '',
            entityParams: params,
            queryStringParams: params,
            isReload: reload
        };
        this.internalOpen(options);
    }
    /**
     * 打开功能，不返回流
     * @private
     * @param {?} options
     * @return {?}
     */
    internalOpen(options) {
        this.checkingBeforeOpen$(options)
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (!res || !res.func || res.linkobj) {
                return;
            }
            /** @type {?} */
            const func = res.func;
            this.getInvokeAndEnterFunc$(options, func).subscribe((/**
             * @param {?} lobj
             * @return {?}
             */
            (lobj) => this.getFeb().post(EventUtil.FARRIS_APP_CLICK, lobj)), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                /** @type {?} */
                const info = {
                    isErr: true,
                    errInfo: err
                };
                this.getFeb().post(EventUtil.FARRIS_APP_CLICK, info);
            }));
        }));
    }
    /**
     * 通过串流控制，打开菜单
     * @private
     * @param {?} options
     * @return {?}
     */
    internalOpen$(options) {
        return this.checkingBeforeOpen$(options)
            .pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (!res || !res.func || res.linkobj) {
                return of(null);
            }
            /** @type {?} */
            const func = res.func;
            return this.getInvokeAndEnterFunc$(options, func).pipe(map((/**
             * @param {?} lobj
             * @return {?}
             */
            (lobj) => {
                this.getFeb().post(EventUtil.FARRIS_APP_CLICK, lobj);
                return true;
            })));
        })));
    }
    /**
     * 通过串流获取被打开菜单的iframeLink对象信息
     * @private
     * @param {?} options
     * @return {?}
     */
    internalOpenByIframeLink$(options) {
        if (!options.funcId) {
            window.alert('参数funcId不能为空！');
            return of(null);
        }
        return this.getFuncEntity(options.funcId).pipe(switchMap((/**
         * @param {?} func
         * @return {?}
         */
        func => {
            if (!func) {
                window.alert(`请确认您是否具备打开菜单(ID:${options.funcId})的权限`);
                return null;
            }
            return this.getInvokeAndEnterFunc$(options, func);
        })));
    }
    /**
     * @private
     * @param {?} options
     * @param {?} func
     * @return {?}
     */
    getInvokeAndEnterFunc$(options, func) {
        /** @type {?} */
        const newPageId = this.newPageId(options.funcId, options.tabId);
        options.tabId = newPageId;
        /** @type {?} */
        let linkobj;
        return this.getFuncInvok(options.funcId).pipe(switchMap((/**
         * @param {?} funcInvok
         * @return {?}
         */
        funcInvok => {
            /** @type {?} */
            const routurl = funcInvok.invokingConfig.url;
            /** @type {?} */
            const paramInfo = funcInvok.invokingConfig.staticParams;
            /** @type {?} */
            const entityParamInfo = funcInvok.invokingConfig.entityParams;
            /** @type {?} */
            const staticParam = paramInfo ? JSON.parse(paramInfo) : '';
            /** @type {?} */
            const entityParam = entityParamInfo ? JSON.parse(entityParamInfo) : '';
            /** @type {?} */
            const su = this.getSu(routurl);
            return this.enterFunc({
                tabId: newPageId,
                funcId: options.funcId,
                menuName: options.tabName || func.name,
                action: 'enter'
            }, su).pipe(map((/**
             * @param {?} formToken
             * @return {?}
             */
            formToken => {
                linkobj = new IframeLink(func.code, null, this.buildQueryStringByMap(routurl, options.funcId, options.tabId, formToken, options.queryStringParams));
                linkobj.id = newPageId; // 页面唯一标识 允许页面重复打开
                linkobj.appType = AppType.Menu;
                linkobj.funcId = options.funcId;
                linkobj.FuncName = options.tabName || func.name;
                linkobj.url = funcInvok.invokingConfig.url;
                linkobj.reload = options.isReload;
                linkobj.su = su;
                linkobj.isNewTab = options.isNewTab;
                linkobj.formToken = formToken;
                if (staticParam) {
                    // dky特殊场景，打开jquery原生功能
                    staticParam.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        if (item.name === 'jquery') {
                            linkobj.isjquery = true;
                        }
                        if (item.name === 'mode') {
                            linkobj.mode = item.value;
                            linkobj.src += (item.value ? `&appMode=${item.value}&` : '');
                        }
                    }));
                }
                // 大对象实体传参，针对被打开页面建立唯一管道
                this.getFeb().post(newPageId, options.entityParams);
                // this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
                return linkobj;
            })), switchMap((/**
             * @param {?} formLink
             * @return {?}
             */
            formLink => {
                return this.i18nSetting.getSetting$().pipe(map((/**
                 * @return {?}
                 */
                () => formLink)));
            })));
        })));
    }
    /**
     * 流方式检查菜单打开状态
     * @private
     * @param {?} options
     * @return {?}
     */
    checkingBeforeOpen$(options) {
        if (!options.funcId) {
            window.alert('参数funcId不能为空！');
            return of(null);
        }
        return this.getFuncEntity(options.funcId).pipe(map((/**
         * @param {?} func
         * @return {?}
         */
        func => {
            if (!func) {
                window.alert(`请确认您是否具备打开菜单(ID:${options.funcId})的权限`);
                return null;
            }
            /** @type {?} */
            const funcId = options.funcId;
            /** @type {?} */
            const tabId = options.tabId;
            /** @type {?} */
            const pageId = this.getPageId(funcId, tabId);
            /** @type {?} */
            const linkobj = FrmUtil.getTabArray().find((/**
             * @param {?} i
             * @return {?}
             */
            i => i.id === pageId && i.appType === AppType.Menu));
            if (linkobj) {
                linkobj.FuncName = options.tabName || linkobj.FuncName;
                linkobj.src = this.buildQueryStringByMap(linkobj.url, funcId, options.tabId, '', options.queryStringParams);
                linkobj.reload = options.isReload; // 界面刷新不改session
                this.getFeb().post(pageId, options.entityParams);
                this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
            }
            return { func, linkobj };
        })));
    }
    /**
     * 关闭前
     * @param {?} options
     * @return {?}
     */
    beforeCloseMenu(options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                this.appService.beforeCloseAppByOptions(options);
                break;
            case AppType.Menu:
                this.beforeCloseFuncByOptions(options);
                break;
            default: break;
        }
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    beforeCloseFuncByOptions(options) {
        /** @type {?} */
        const func = this.funcService.getCachedFunc(options.funcId);
        /** @type {?} */
        const funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
        /** @type {?} */
        const pageId = this.getPageId(options.funcId, options.tabId);
        /** @type {?} */
        const obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(funcObkey);
        if (!obs) {
            this.closeFuncByOptions(options);
            return;
        }
        /** @type {?} */
        const eventArgs = {
            tabId: pageId,
            appType: AppType.Menu,
            funcId: options.funcId,
            tabName: func && func.Name,
            beforeCloseHandle: options.beforeCloseHandle
        };
        this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
    }
    /**
     * 菜单关闭前事件触发(无 token)
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    beforeCloseFunc(funcId, tabId) {
        /** @type {?} */
        const func = this.funcService.getCachedFunc(funcId);
        /** @type {?} */
        const funcObkey = EventUtil.funcObsToken(funcId, tabId);
        /** @type {?} */
        const obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(funcObkey);
        if (!obs) {
            this.closeFunc(funcId, tabId);
            return;
        }
        /** @type {?} */
        const eventArgs = {
            tabId: this.getPageId(funcId, tabId),
            appType: AppType.Menu,
            funcId,
            tabName: func && func.Name
        };
        this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
    }
    /**
     * 直接关闭
     *
     * @param {?} options
     * @return {?}
     */
    closeMenu(options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                this.appService.closeAppByOptions(options).subscribe();
                break;
            case AppType.Menu:
                this.closeFuncByOptions(options);
                break;
            default: break;
        }
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    closeFuncByOptions(options) {
        /** @type {?} */
        const pageId = this.getPageId(options.funcId, options.tabId);
        EventUtil.clearObserver(EventUtil.funcObsToken(options.funcId, options.tabId));
        EventUtil.clearEventPipe(pageId); // 当前页面大对象传参会有唯一的管道
        // 当前页面大对象传参会有唯一的管道
        /** @type {?} */
        const func = this.funcService.getCachedFunc(options.funcId);
        /** @type {?} */
        const objIndex = FrmUtil.getTabArray().findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i.id === pageId && i.appType === AppType.Menu));
        /** @type {?} */
        const obj = FrmUtil.getTabArray()[objIndex];
        options.token = options.token || obj.formToken;
        /** @type {?} */
        let su = options.su;
        if (obj) {
            su = obj.su;
            FrmUtil.removeTab(objIndex);
            /** @type {?} */
            const eventArgs = {
                tabId: pageId,
                appType: AppType.Menu,
                funcId: options.funcId,
                tabName: func && func.name
            };
            this.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
        }
        this.quitFunc(options, su)
            .subscribe((/**
         * @return {?}
         */
        () => { }));
    }
    /**
     * 关闭菜单tab页签，tabId可以指定，默认为funcId
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    closeFunc(funcId, tabId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const pageId = this.getPageId(funcId, tabId);
        EventUtil.clearObserver(EventUtil.funcObsToken(funcId, tabId));
        EventUtil.clearEventPipe(pageId); // 当前页面大对象传参会有唯一的管道
        // 当前页面大对象传参会有唯一的管道
        /** @type {?} */
        const func = this.funcService.getCachedFunc(funcId);
        /** @type {?} */
        const objIndex = FrmUtil.getTabArray().findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i.id === pageId && i.appType === AppType.Menu));
        /** @type {?} */
        const obj = FrmUtil.getTabArray()[objIndex];
        /** @type {?} */
        const formToken = obj.formToken;
        if (obj) {
            FrmUtil.removeTab(objIndex);
            /** @type {?} */
            const eventArgs = {
                tabId: pageId,
                appType: AppType.Menu,
                funcId,
                tabName: func && func.name
            };
            self.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
        }
        /** @type {?} */
        const options = {
            tabId,
            funcId,
            appId: '',
            appEntrance: '',
            appType: AppType.Menu,
            token: formToken,
        };
        this.quitFunc(options, obj.su)
            .subscribe((/**
         * @return {?}
         */
        () => { }));
        return of(true);
    }
    /**
     * 获取菜单的调用信息
     * @param {?} funcId
     * @return {?}
     */
    getFuncInvok(funcId) {
        /** @type {?} */
        const invoks = this.getInvokCache();
        /** @type {?} */
        const funcInvok = invoks.find((/**
         * @param {?} f
         * @return {?}
         */
        f => f.id === funcId));
        if (!funcInvok) {
            return this.getInvokConfig(funcId).pipe(map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!v) {
                    return null;
                }
                invoks.push(v);
                this.funcService.cacheAllFuncInvoks(invoks);
                return v;
            })));
        }
        return of(funcInvok);
    }
    /**
     * 获取菜单实体
     * @param {?} funcId
     * @return {?}
     */
    getFuncEntity(funcId) {
        /** @type {?} */
        const func = this.funcService.getCachedFunc(funcId);
        if (!func) {
            /** @type {?} */
            const url = `/api/runtime/sys/v1.0/functions/${funcId}`;
            return this.http.request('Get', url, FrmUtil.setHeader(null, {}))
                .pipe(map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!v || !v[0]) {
                    return null;
                }
                /** @type {?} */
                const allFuncs = (/** @type {?} */ (this.funcService.getAllCachedFuncs()));
                allFuncs.push(v[0]);
                this.funcService.cacheAllFuncs(allFuncs);
                return v[0];
            })));
        }
        return of(func);
    }
    /**
     * 获取菜单预置参数
     * @param {?} funcId
     * @return {?}
     */
    getPresetParams(funcId) {
        return this.getFuncInvok(funcId).pipe(map((/**
         * @param {?} funcInvok
         * @return {?}
         */
        funcInvok => {
            /** @type {?} */
            const paramInfo = funcInvok.invokingConfig.staticParams;
            /** @type {?} */
            const entityParamInfo = funcInvok.invokingConfig.entityParams;
            /** @type {?} */
            const staticParam = paramInfo ? JSON.parse(paramInfo) : [];
            /** @type {?} */
            const entityParam = entityParamInfo ? JSON.parse(entityParamInfo) : [];
            return this.mergeParams(staticParam, entityParam);
        })));
    }
    /**
     * 获取菜单的静态参数
     * @param {?} funcId
     * @return {?}
     */
    getStaticParam(funcId) {
        return this.getFuncInvok(funcId).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (v.invokingConfig.staticParams) {
                return JSON.parse(v.invokingConfig.staticParams);
            }
        })));
    }
    /**
     * 获取表单的实体参数
     * @param {?} tabId
     * @param {?} handler
     * @param {?=} isSubonce
     * @return {?}
     */
    getEntityParam(tabId, handler, isSubonce = true) {
        if (isSubonce) {
            this.getFeb().once(tabId, handler);
        }
        this.getFeb().on(tabId, handler);
    }
    /**
     * @param {?} funcId
     * @return {?}
     */
    entityParamUnsub(funcId) {
        this.getFeb().unSubscribe(funcId);
    }
    /**
     * 获取某菜单的实体参数结构
     * @param {?} funcId
     * @return {?}
     */
    getEntityParamStructure(funcId) {
        return this.getFuncInvok(funcId).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (v.invokingConfig.entityParams) {
                return JSON.parse(v.invokingConfig.entityParams);
            }
        })));
    }
    /**
     * @private
     * @param {?} staticParam
     * @param {?} entityParam
     * @return {?}
     */
    mergeParams(staticParam, entityParam) {
        /** @type {?} */
        const paraMap = new Map();
        if (entityParam) {
            entityParam.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                paraMap.set(item.name, item.value);
            }));
        }
        if (staticParam) {
            // func上对app参数复用
            staticParam.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                paraMap.set(item.name, item.value);
            }));
        }
        return paraMap;
    }
    /**
     * @private
     * @param {?} funcId
     * @return {?}
     */
    getInvokConfig(funcId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/functions/funcInvok/${funcId}`;
        return this.http.request('Get', url, FrmUtil.setHeader(null, {}));
    }
    /**
     * @private
     * @return {?}
     */
    getInvokCache() {
        return this.funcService.getAllCachedFuncInvoks();
    }
    /**
     * 获取框架eventbus
     * @private
     * @return {?}
     */
    getFeb() {
        return EventUtil.getFrmEvent();
    }
    /**
     * 构造功能及session
     * (1912 funcSession移除后，接口不再提供)
     * @param {?} funcId
     * @param {?=} su
     * @return {?}
     */
    buildFuncSession(funcId, su) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const userSession = this.sessionSvc.getUserSessionId();
        /** @type {?} */
        const body = {
            token: userSession,
            funcId,
            action: 'enter'
        };
        /** @type {?} */
        const bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : `?su=${su}`);
        return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(userSession, { body })).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            /** @type {?} */
            const ss = v.sessionId;
            if (ss !== undefined && ss !== null && ss.length > 0) {
                self.sessionSvc.setFuncSessionId(funcId, ss);
            }
            return ss;
        })));
    }
    /**
     * 进入功能，触发服务端逻辑
     * 移除funcSession
     * 返回公共变量token
     * @private
     * @param {?} enterParam
     * @param {?} su
     * @return {?}
     */
    enterFunc(enterParam, su) {
        /** @type {?} */
        const bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : `?su=${su}`);
        return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: enterParam }))
            .pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            return v.token || v.sessionId;
        })));
    }
    /**
     * 退出功能，如果存在bizContext，则移除
     * @private
     * @param {?} options
     * @param {?} su
     * @return {?}
     */
    quitFunc(options, su) {
        /** @type {?} */
        const body = {
            token: options.token,
            tabId: options.tabId,
            funcId: options.funcId,
            action: 'quit'
        };
        /** @type {?} */
        const bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : `?su=${su}`);
        return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body }));
    }
    /**
     * 获取当前应用所属su
     * @private
     * @param {?} url
     * @return {?}
     */
    getSu(url) {
        /** @type {?} */
        const uriArr = url.split('/');
        return uriArr.length > 3 ? uriArr[3] : '';
    }
    /**
     * iframe url拼接 querystring 参数
     * @private
     * @param {?} routurl
     * @param {?} funcId
     * @param {?} params
     * @return {?}
     */
    buildQueryString(routurl, funcId, params) {
        if (routurl.indexOf('?') < 0) {
            routurl += `?funcId=${funcId}`;
        }
        else {
            routurl += `&funcId=${funcId}`;
        }
        if (params) {
            Object.keys(params).forEach((/**
             * @param {?} propName
             * @param {?} index
             * @return {?}
             */
            (propName, index) => {
                routurl += `${index === 0 ? '' : '&'}${propName}=${params[propName]}`;
            }));
        }
        return routurl;
    }
    /**
     * url 拼接map格式的参数
     * @private
     * @param {?} routurl
     * @param {?} funcId
     * @param {?} tabId
     * @param {?} token
     * @param {?} params
     * @return {?}
     */
    buildQueryStringByMap(routurl, funcId, tabId, token, params) {
        if (routurl.indexOf('?') < 0) {
            routurl += `?funcId=${funcId}`;
        }
        else {
            routurl += `&funcId=${funcId}`;
        }
        routurl += `&appType=${AppType.Menu}`;
        routurl += `&tabId=${this.getPageId(funcId, tabId)}`;
        routurl += !token ? '' : `&cvft=${token}`;
        if (params) {
            params.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                routurl += !key ? '' : `&${key}=${value}`;
            }));
        }
        return routurl;
    }
    /**
     * 获取当前菜单页面的唯一标识
     * @private
     * @param {?} funcId
     * @param {?} tabId
     * @return {?}
     */
    getPageId(funcId, tabId) {
        return tabId || funcId;
    }
    /**
     * 页面第一次被打开时，生成唯一标识
     * @private
     * @param {?} funcId
     * @param {?} tabId
     * @return {?}
     */
    newPageId(funcId, tabId) {
        return tabId ? `${funcId}_${tabId}` : funcId;
    }
    /**
     * @param {?} token
     * @param {?} args
     * @return {?}
     */
    eventFire(token, args) {
        /** @type {?} */
        const feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.post !== 'function') {
            return;
        }
        feb.post(token, args);
    }
    /**
     * @param {?} token
     * @param {?} handler
     * @param {?=} options
     * @return {?}
     */
    eventListner(token, handler, options) {
        /** @type {?} */
        const feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        // 菜单监听者必须要声明自己的身份，方便框架管理
        if (options && options.appType) {
            switch (options.appType.toLowerCase()) {
                case AppType.App:
                    /** @type {?} */
                    const appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                    feb.onWithObkey(token, appObkey, handler);
                    return;
                case AppType.Menu:
                    /** @type {?} */
                    const funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
                    feb.onWithObkey(token, funcObkey, handler);
                    return;
                default: break;
            }
        }
        feb.on(token, handler);
    }
    /**
     * 创建监听订阅, 维护一个监听者列表，针对菜单触发事件
     * @param {?} token
     * @param {?} funcId
     * @param {?} handler
     * @return {?}
     */
    eventListner4Func(token, funcId, handler) {
        /** @type {?} */
        const feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        feb.onWithObkey(token, funcId, handler);
    }
    /**
     * 创建监听订阅, 维护一个监听者列表，针对应用触发事件
     * @param {?} token
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} handler
     * @return {?}
     */
    eventListner4App(token, appId, appEntrance, handler) {
        /** @type {?} */
        const feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        /** @type {?} */
        const appObkey = EventUtil.appObsToken(appId, appEntrance);
        feb.onWithObkey(token, appObkey, handler);
    }
}
FrameworkService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameworkService.ctorParameters = () => [
    { type: HttpService },
    { type: Router },
    { type: CacheService },
    { type: SessionService },
    { type: FrmEventBus },
    { type: FuncsService },
    { type: LoadingService },
    { type: AppService, decorators: [{ type: Optional }] },
    { type: FrmI18nSettingService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.FUNCSTATUS_PATH;
    /** @type {?} */
    FrameworkService.prototype.BeforeFuncClose;
    /** @type {?} */
    FrameworkService.prototype.FuncClosed;
    /** @type {?} */
    FrameworkService.prototype.FuncSwitch;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.sessionSvc;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.feb;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.funcService;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.loadService;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.i18nSetting;
}
//# sourceMappingURL=data:application/json;base64,