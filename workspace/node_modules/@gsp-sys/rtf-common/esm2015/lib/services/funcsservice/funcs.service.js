/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { FrameworkVariableService } from '../frmVariableService/framework-variable.service';
export class FuncsService {
    /**
     * @param {?} frmVariableService
     */
    constructor(frmVariableService) {
        this.frmVariableService = frmVariableService;
        this.allgspfuncs = 'allgspfuncs';
        this.allfuncinvoks = 'allfuncinvoks';
        if (!this.frmVariableService) {
            this.frmVariableService = new FrameworkVariableService();
        }
    }
    /**
     * 缓存所有功能
     * @param {?} funcs
     * @return {?}
     */
    cacheAllFuncs(funcs) {
        this.frmVariableService.frameworkVariableReg(this.allgspfuncs, funcs);
    }
    /**
     * 获取所有缓存的功能
     * @return {?}
     */
    getAllCachedFuncs() {
        /** @type {?} */
        const funcsCache = this.frmVariableService.getFrmVariableByKey(this.allgspfuncs);
        return (/** @type {?} */ (funcsCache)) || [];
    }
    /**
     * 获取某功能
     * @param {?} funcId
     * @return {?}
     */
    getCachedFunc(funcId) {
        /** @type {?} */
        const allfuncs = this.getAllCachedFuncs();
        if (allfuncs) {
            return allfuncs.find((/**
             * @param {?} f
             * @return {?}
             */
            f => f.id === funcId));
        }
    }
    /**
     * @param {?} invoks
     * @return {?}
     */
    cacheAllFuncInvoks(invoks) {
        this.frmVariableService.frameworkVariableReg(this.allfuncinvoks, invoks);
    }
    /**
     * @return {?}
     */
    getAllCachedFuncInvoks() {
        /** @type {?} */
        const invokCache = this.frmVariableService.getFrmVariableByKey(this.allfuncinvoks);
        return (/** @type {?} */ (invokCache)) || [];
    }
}
FuncsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FuncsService.ctorParameters = () => [
    { type: FrameworkVariableService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FuncsService.prototype.allgspfuncs;
    /**
     * @type {?}
     * @private
     */
    FuncsService.prototype.allfuncinvoks;
    /**
     * @type {?}
     * @private
     */
    FuncsService.prototype.frmVariableService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3lzL3J0Zi1jb21tb24vIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZnVuY3NzZXJ2aWNlL2Z1bmNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRzVGLE1BQU0sT0FBTyxZQUFZOzs7O0lBS3JCLFlBQWdDLGtCQUE0QztRQUE1Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQTBCO1FBSHBFLGdCQUFXLEdBQUcsYUFBYSxDQUFDO1FBQzVCLGtCQUFhLEdBQUcsZUFBZSxDQUFDO1FBR3BDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksd0JBQXdCLEVBQUUsQ0FBQztTQUM1RDtJQUNMLENBQUM7Ozs7OztJQUtNLGFBQWEsQ0FBQyxLQUFZO1FBQzdCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFFLENBQUM7Ozs7O0lBS00saUJBQWlCOztjQUNkLFVBQVUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNoRixPQUFPLG1CQUFBLFVBQVUsRUFBUyxJQUFJLEVBQUUsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFLTSxhQUFhLENBQUMsTUFBYzs7Y0FDekIsUUFBUSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtRQUN6QyxJQUFJLFFBQVEsRUFBRTtZQUNWLE9BQU8sUUFBUSxDQUFDLElBQUk7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTSxFQUFDLENBQUM7U0FDOUM7SUFDTCxDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLE1BQWE7UUFDbkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0UsQ0FBQzs7OztJQUVNLHNCQUFzQjs7Y0FDbkIsVUFBVSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ2xGLE9BQU8sbUJBQUEsVUFBVSxFQUFTLElBQUksRUFBRSxDQUFDO0lBQ3JDLENBQUM7OztZQTVDSixVQUFVOzs7O1lBRkYsd0JBQXdCLHVCQVFoQixRQUFROzs7Ozs7O0lBSHJCLG1DQUFvQzs7Ozs7SUFDcEMscUNBQXdDOzs7OztJQUU1QiwwQ0FBZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGcmFtZXdvcmtWYXJpYWJsZVNlcnZpY2UgfSBmcm9tICcuLi9mcm1WYXJpYWJsZVNlcnZpY2UvZnJhbWV3b3JrLXZhcmlhYmxlLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRnVuY3NTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIGFsbGdzcGZ1bmNzID0gJ2FsbGdzcGZ1bmNzJztcclxuICAgIHByaXZhdGUgYWxsZnVuY2ludm9rcyA9ICdhbGxmdW5jaW52b2tzJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGZybVZhcmlhYmxlU2VydmljZTogRnJhbWV3b3JrVmFyaWFibGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZybVZhcmlhYmxlU2VydmljZSkge1xyXG4gICAgICAgICAgICB0aGlzLmZybVZhcmlhYmxlU2VydmljZSA9IG5ldyBGcmFtZXdvcmtWYXJpYWJsZVNlcnZpY2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnvJPlrZjmiYDmnInlip/og71cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhY2hlQWxsRnVuY3MoZnVuY3M6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy5mcm1WYXJpYWJsZVNlcnZpY2UuZnJhbWV3b3JrVmFyaWFibGVSZWcodGhpcy5hbGxnc3BmdW5jcywgZnVuY3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5omA5pyJ57yT5a2Y55qE5Yqf6IO9XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRBbGxDYWNoZWRGdW5jcygpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGZ1bmNzQ2FjaGUgPSB0aGlzLmZybVZhcmlhYmxlU2VydmljZS5nZXRGcm1WYXJpYWJsZUJ5S2V5KHRoaXMuYWxsZ3NwZnVuY3MpO1xyXG4gICAgICAgIHJldHVybiBmdW5jc0NhY2hlIGFzIGFueVtdIHx8IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5p+Q5Yqf6IO9XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDYWNoZWRGdW5jKGZ1bmNJZDogc3RyaW5nKTogYW55IHtcclxuICAgICAgICBjb25zdCBhbGxmdW5jcyA9IHRoaXMuZ2V0QWxsQ2FjaGVkRnVuY3MoKTtcclxuICAgICAgICBpZiAoYWxsZnVuY3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFsbGZ1bmNzLmZpbmQoZiA9PiBmLmlkID09PSBmdW5jSWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2FjaGVBbGxGdW5jSW52b2tzKGludm9rczogYW55W10pIHtcclxuICAgICAgICB0aGlzLmZybVZhcmlhYmxlU2VydmljZS5mcmFtZXdvcmtWYXJpYWJsZVJlZyh0aGlzLmFsbGZ1bmNpbnZva3MsIGludm9rcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEFsbENhY2hlZEZ1bmNJbnZva3MoKTogYW55IHtcclxuICAgICAgICBjb25zdCBpbnZva0NhY2hlID0gdGhpcy5mcm1WYXJpYWJsZVNlcnZpY2UuZ2V0RnJtVmFyaWFibGVCeUtleSh0aGlzLmFsbGZ1bmNpbnZva3MpO1xyXG4gICAgICAgIHJldHVybiBpbnZva0NhY2hlIGFzIGFueVtdIHx8IFtdO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=