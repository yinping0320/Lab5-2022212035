/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoadingComponent } from './loading.component';
import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef } from '@angular/core';
import { LOADING_DEFAULT_CONFIG, loaddingDefaultConfig } from './loading.config';
export class LoadingService {
    /**
     * @param {?} appRef
     * @param {?} cfr
     * @param {?} injecotr
     */
    constructor(appRef, cfr, injecotr) {
        this.appRef = appRef;
        this.cfr = cfr;
        this.injecotr = injecotr;
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    show(config) {
        this.removeDomCheck();
        this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG) || {};
        this.config = Object.assign(loaddingDefaultConfig, this.config);
        /** @type {?} */
        const loadingFactory = this.cfr.resolveComponentFactory(LoadingComponent);
        this.loadingCmpRef = loadingFactory.create(this.injecotr);
        if (config) {
            this.config = Object.assign({}, this.config, config);
        }
        /** @type {?} */
        const languageCode = localStorage.getItem('languageCode');
        if (languageCode === 'en') {
            this.config.message = 'Loading...';
        }
        /** @type {?} */
        const container = this.config.container;
        if (container === 'body') {
            document.querySelector((/** @type {?} */ (container))).appendChild(this.loadingCmpRef.location.nativeElement);
        }
        else {
            if (container instanceof ElementRef) {
                container.nativeElement.appendChild(this.loadingCmpRef.location.nativeElement);
            }
        }
        this.loadingCmpRef.instance.isActive = true;
        Object.assign(this.loadingCmpRef.instance, this.config);
        this.loadingCmpRef.instance.closed.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            if (!state) {
                this.clearDom(this.loadingCmpRef);
            }
        }));
        this.loadingCmpRef.changeDetectorRef.markForCheck();
        this.loadingCmpRef.changeDetectorRef.detectChanges();
        return this.loadingCmpRef.instance;
    }
    /**
     * @return {?}
     */
    close() {
        if (!!this.loadingCmpRef) {
            this.clearDom(this.loadingCmpRef);
        }
    }
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    clearDom(cmpRef) {
        try {
            /** @type {?} */
            const loadingEl = cmpRef.location.nativeElement;
            if (!!loadingEl && loadingEl.parentNode) {
                loadingEl.parentNode.removeChild(loadingEl);
            }
            this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG);
            cmpRef.destroy();
            cmpRef = null;
            setTimeout((/**
             * @return {?}
             */
            () => {
                // 1.5s 后检查是否移除成功
                this.removeDomCheck();
            }), 1500);
        }
        catch (e) {
            console.log(e);
            this.removeDomCheck();
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeDomCheck() {
        try {
            /** @type {?} */
            const el = document.getElementsByTagName('farris-loading')[0];
            if (!!el && !!el.parentNode) {
                el.parentNode.removeChild(el);
            }
        }
        catch (ex) {
            console.log(ex);
        }
    }
}
LoadingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LoadingService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    LoadingService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.loadingCmpRef;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.injecotr;
}
//# sourceMappingURL=data:application/json;base64,