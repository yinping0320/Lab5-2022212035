/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { EventUtil, AppType } from '../../shared/frm-util';
import { FrmEventBus } from '../../eventbus/frm-evenbus';
import { Subject } from 'rxjs';
export class FrameworkEventService {
    /**
     * @param {?} feb
     */
    constructor(feb) {
        this.feb = feb;
        this.FarrisApps = EventUtil.FARRIS_APPS;
        this.FarrisAppClick = EventUtil.FARRIS_APP_CLICK;
        this.AllGspFuncs = EventUtil.ALL_GSP_FUNCS;
        this.BeforeFuncClose = EventUtil.BEFORE_FUNC_CLOSE;
        this.FuncClosed = EventUtil.FUNC_CLOSED;
        this.FuncSwitch = EventUtil.FUNC_SWITCH;
        this.AfterFrameLoad = EventUtil.AFTER_FRAME_LOAD;
        /** @type {?} */
        const eventBusEntity = EventUtil.getFrmEvent();
        if (!eventBusEntity) {
            EventUtil.setFrmEvent(this.feb || new FrmEventBus());
            this.eventInitial();
        }
    }
    /**
     * @param {?} token
     * @param {?} args
     * @return {?}
     */
    eventFire(token, args) {
        /** @type {?} */
        const feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.post !== 'function') {
            return;
        }
        feb.post(token, args);
    }
    /**
     * @param {?} token
     * @param {?} handler
     * @param {?=} options
     * @return {?}
     */
    eventListner(token, handler, options) {
        /** @type {?} */
        const feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        // 菜单监听者必须要声明自己的身份，方便框架管理
        if (options && options.appType) {
            switch (options.appType.toLowerCase()) {
                case AppType.App:
                    /** @type {?} */
                    const appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                    feb.onWithObkey(token, appObkey, handler);
                    return;
                case AppType.Menu:
                    /** @type {?} */
                    const funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
                    feb.onWithObkey(token, funcObkey, handler);
                    return;
                default: break;
            }
        }
        feb.on(token, handler);
    }
    /**
     * @private
     * @return {?}
     */
    eventInitial() {
        /** @type {?} */
        const feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.post !== 'function') {
            return;
        }
        feb.post(this.FarrisApps, null);
        feb.post(this.FarrisAppClick, null);
        feb.post(this.AllGspFuncs, null);
        feb.initialPipe(this.FuncClosed, new Subject());
        feb.initialPipe(this.FuncSwitch, new Subject());
        feb.initialPipe(this.BeforeFuncClose, new Subject());
        feb.initialPipe(this.AfterFrameLoad, new Subject());
    }
}
FrameworkEventService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameworkEventService.ctorParameters = () => [
    { type: FrmEventBus }
];
if (false) {
    /** @type {?} */
    FrameworkEventService.prototype.FarrisApps;
    /** @type {?} */
    FrameworkEventService.prototype.FarrisAppClick;
    /** @type {?} */
    FrameworkEventService.prototype.AllGspFuncs;
    /** @type {?} */
    FrameworkEventService.prototype.BeforeFuncClose;
    /** @type {?} */
    FrameworkEventService.prototype.FuncClosed;
    /** @type {?} */
    FrameworkEventService.prototype.FuncSwitch;
    /** @type {?} */
    FrameworkEventService.prototype.AfterFrameLoad;
    /**
     * @type {?}
     * @private
     */
    FrameworkEventService.prototype.feb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWV3b3JrLWV2ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9ydGYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2ZybUV2ZW50U2VydmljZS9mcmFtZXdvcmstZXZlbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBYyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSS9CLE1BQU0sT0FBTyxxQkFBcUI7Ozs7SUFVOUIsWUFBb0IsR0FBZ0I7UUFBaEIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQVI3QixlQUFVLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUNuQyxtQkFBYyxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM1QyxnQkFBVyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7UUFDdEMsb0JBQWUsR0FBRyxTQUFTLENBQUMsaUJBQWlCLENBQUM7UUFDOUMsZUFBVSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDbkMsZUFBVSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDbkMsbUJBQWMsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7O2NBR3pDLGNBQWMsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFO1FBQzlDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDakIsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQztZQUNyRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDOzs7Ozs7SUFHTSxTQUFTLENBQUMsS0FBYSxFQUFFLElBQVM7O2NBQy9CLEdBQUcsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFO1FBQ25DLElBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtZQUN4QyxPQUFPO1NBQ1Y7UUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7O0lBRU0sWUFBWSxDQUFDLEtBQWEsRUFBRSxPQUE2QixFQUFFLE9BQW9COztjQUM1RSxHQUFHLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRTtRQUNuQyxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsS0FBSyxVQUFVLEVBQUU7WUFDdEMsT0FBTztTQUNWO1FBQ0QseUJBQXlCO1FBQ3pCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDNUIsUUFBUSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUNuQyxLQUFLLE9BQU8sQ0FBQyxHQUFHOzswQkFDTixRQUFRLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQztvQkFDekYsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUMxQyxPQUFPO2dCQUNYLEtBQUssT0FBTyxDQUFDLElBQUk7OzBCQUNQLFNBQVMsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQztvQkFDdkUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUMzQyxPQUFPO2dCQUNYLE9BQU8sQ0FBQyxDQUFDLE1BQU07YUFDbEI7U0FDSjtRQUNELEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRU8sWUFBWTs7Y0FDVixHQUFHLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRTtRQUNuQyxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDeEMsT0FBTztTQUNWO1FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksT0FBTyxFQUFPLENBQUMsQ0FBQztRQUNyRCxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxPQUFPLEVBQU8sQ0FBQyxDQUFDO1FBQ3JELEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLE9BQU8sRUFBTyxDQUFDLENBQUM7UUFDMUQsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksT0FBTyxFQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7WUE5REosVUFBVTs7OztZQUpGLFdBQVc7Ozs7SUFPaEIsMkNBQTBDOztJQUMxQywrQ0FBbUQ7O0lBQ25ELDRDQUE2Qzs7SUFDN0MsZ0RBQXFEOztJQUNyRCwyQ0FBMEM7O0lBQzFDLDJDQUEwQzs7SUFDMUMsK0NBQW1EOzs7OztJQUV2QyxvQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEV2ZW50VXRpbCwgQXBwVHlwZSwgQXBwT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NoYXJlZC9mcm0tdXRpbCc7XHJcbmltcG9ydCB7IEZybUV2ZW50QnVzIH0gZnJvbSAnLi4vLi4vZXZlbnRidXMvZnJtLWV2ZW5idXMnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRnJhbWV3b3JrRXZlbnRTZXJ2aWNlIHtcclxuXHJcbiAgICBwdWJsaWMgRmFycmlzQXBwcyA9IEV2ZW50VXRpbC5GQVJSSVNfQVBQUztcclxuICAgIHB1YmxpYyBGYXJyaXNBcHBDbGljayA9IEV2ZW50VXRpbC5GQVJSSVNfQVBQX0NMSUNLO1xyXG4gICAgcHVibGljIEFsbEdzcEZ1bmNzID0gRXZlbnRVdGlsLkFMTF9HU1BfRlVOQ1M7XHJcbiAgICBwdWJsaWMgQmVmb3JlRnVuY0Nsb3NlID0gRXZlbnRVdGlsLkJFRk9SRV9GVU5DX0NMT1NFO1xyXG4gICAgcHVibGljIEZ1bmNDbG9zZWQgPSBFdmVudFV0aWwuRlVOQ19DTE9TRUQ7XHJcbiAgICBwdWJsaWMgRnVuY1N3aXRjaCA9IEV2ZW50VXRpbC5GVU5DX1NXSVRDSDtcclxuICAgIHB1YmxpYyBBZnRlckZyYW1lTG9hZCA9IEV2ZW50VXRpbC5BRlRFUl9GUkFNRV9MT0FEO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZmViOiBGcm1FdmVudEJ1cykge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50QnVzRW50aXR5ID0gRXZlbnRVdGlsLmdldEZybUV2ZW50KCk7XHJcbiAgICAgICAgaWYgKCFldmVudEJ1c0VudGl0eSkge1xyXG4gICAgICAgICAgICBFdmVudFV0aWwuc2V0RnJtRXZlbnQodGhpcy5mZWIgfHwgbmV3IEZybUV2ZW50QnVzKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50SW5pdGlhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGV2ZW50RmlyZSh0b2tlbjogc3RyaW5nLCBhcmdzOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBmZWIgPSBFdmVudFV0aWwuZ2V0RnJtRXZlbnQoKTtcclxuICAgICAgICBpZiAoIWZlYiB8fCB0eXBlb2YgZmViLnBvc3QgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmZWIucG9zdCh0b2tlbiwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV2ZW50TGlzdG5lcih0b2tlbjogc3RyaW5nLCBoYW5kbGVyOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgb3B0aW9ucz86IEFwcE9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBmZWIgPSBFdmVudFV0aWwuZ2V0RnJtRXZlbnQoKTtcclxuICAgICAgICBpZiAoIWZlYiB8fCB0eXBlb2YgZmViLm9uICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6I+c5Y2V55uR5ZCs6ICF5b+F6aG76KaB5aOw5piO6Ieq5bex55qE6Lqr5Lu977yM5pa55L6/5qGG5p62566h55CGXHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hcHBUeXBlKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5hcHBUeXBlLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQXBwVHlwZS5BcHA6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXBwT2JrZXkgPSBFdmVudFV0aWwuYXBwT2JzVG9rZW4ob3B0aW9ucy5hcHBJZCwgb3B0aW9ucy5hcHBFbnRyYW5jZSwgb3B0aW9ucy50YWJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmViLm9uV2l0aE9ia2V5KHRva2VuLCBhcHBPYmtleSwgaGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBcHBUeXBlLk1lbnU6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVuY09ia2V5ID0gRXZlbnRVdGlsLmZ1bmNPYnNUb2tlbihvcHRpb25zLmZ1bmNJZCwgb3B0aW9ucy50YWJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmViLm9uV2l0aE9ia2V5KHRva2VuLCBmdW5jT2JrZXksIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZlYi5vbih0b2tlbiwgaGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBldmVudEluaXRpYWwoKSB7XHJcbiAgICAgICAgY29uc3QgZmViID0gRXZlbnRVdGlsLmdldEZybUV2ZW50KCk7XHJcbiAgICAgICAgaWYgKCFmZWIgfHwgdHlwZW9mIGZlYi5wb3N0ICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmViLnBvc3QodGhpcy5GYXJyaXNBcHBzLCBudWxsKTtcclxuICAgICAgICBmZWIucG9zdCh0aGlzLkZhcnJpc0FwcENsaWNrLCBudWxsKTtcclxuICAgICAgICBmZWIucG9zdCh0aGlzLkFsbEdzcEZ1bmNzLCBudWxsKTtcclxuICAgICAgICBmZWIuaW5pdGlhbFBpcGUodGhpcy5GdW5jQ2xvc2VkLCBuZXcgU3ViamVjdDxhbnk+KCkpO1xyXG4gICAgICAgIGZlYi5pbml0aWFsUGlwZSh0aGlzLkZ1bmNTd2l0Y2gsIG5ldyBTdWJqZWN0PGFueT4oKSk7XHJcbiAgICAgICAgZmViLmluaXRpYWxQaXBlKHRoaXMuQmVmb3JlRnVuY0Nsb3NlLCBuZXcgU3ViamVjdDxhbnk+KCkpO1xyXG4gICAgICAgIGZlYi5pbml0aWFsUGlwZSh0aGlzLkFmdGVyRnJhbWVMb2FkLCBuZXcgU3ViamVjdDxhbnk+KCkpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=