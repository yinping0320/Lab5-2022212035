/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService, LanguageService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { FrameworkVariableService } from '../frmVariableService/framework-variable.service';
/**
 * @record
 */
export function I18nSettingEntity() { }
if (false) {
    /** @type {?|undefined} */
    I18nSettingEntity.prototype.i18nSetting;
    /** @type {?|undefined} */
    I18nSettingEntity.prototype.languages;
    /** @type {?|undefined} */
    I18nSettingEntity.prototype.currentLanCode;
}
export class FrmI18nSettingService {
    /**
     * @param {?} frmVariable
     * @param {?} lanService
     * @param {?} http
     */
    constructor(frmVariable, lanService, http) {
        this.frmVariable = frmVariable;
        this.lanService = lanService;
        this.http = http;
        this.variableKey = 'frm-i18nSetting';
    }
    /**
     * @return {?}
     */
    getSetting() {
        /** @type {?} */
        const temp = this.frmVariable.getFrmVariableByKey(this.variableKey);
        return this.deepClone(temp);
    }
    /**
     * @return {?}
     */
    getSetting$() {
        /** @type {?} */
        const temp = this.frmVariable.getFrmVariableByKey(this.variableKey);
        return !temp ? this.loadSetting$() : of(this.deepClone(temp));
    }
    /**
     * @return {?}
     */
    loadSetting$() {
        /** @type {?} */
        const rtfService = ((/** @type {?} */ (window))).gspframeworkService && ((/** @type {?} */ (window))).gspframeworkService.rtf;
        /** @type {?} */
        const entity = {};
        if (!!rtfService && !!rtfService.language) {
            try {
                /** @type {?} */
                const lanService = rtfService.language;
                lanService.i18nSetting((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    entity.i18nSetting = res;
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    console.log(err);
                }));
                lanService.allLanguages((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    entity.languages = res;
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    console.log(err);
                }));
                entity.currentLanCode = lanService.getLanguageCode();
                this.frmVariable.frameworkVariableReg(this.variableKey, entity);
                return of(entity);
            }
            catch (e) {
                console.log(e);
                return of(null);
            }
        }
        else {
            /** @type {?} */
            const languagesUrl = '/api/runtime/sys/v1.0/i18n/languageservice/getalllanguages';
            /** @type {?} */
            const settingUrl = '/api/runtime/sys/v1.0/i18n/i18nusersetting/setting';
            entity.currentLanCode = this.lanService.getLanguageCode();
            return this.http.get(languagesUrl).pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => entity.languages = res)), switchMap((/**
             * @return {?}
             */
            () => this.http.get(settingUrl))), map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                entity.i18nSetting = res;
                this.frmVariable.frameworkVariableReg(this.variableKey, entity);
                return entity;
            })), catchError((/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.log(err);
                return of(null);
            })));
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    deepClone(target) {
        /** @type {?} */
        let result;
        if (typeof target === 'object') {
            if (Array.isArray(target)) {
                result = [];
                for (let i in target) {
                    result.push(this.deepClone(target[i]));
                }
            }
            else if (target === null) {
                result = null;
            }
            else if (target.constructor === RegExp) {
                result = target;
            }
            else {
                result = {};
                for (let i in target) {
                    result[i] = this.deepClone(target[i]);
                }
            }
        }
        else {
            result = target;
        }
        return result;
    }
}
FrmI18nSettingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrmI18nSettingService.ctorParameters = () => [
    { type: FrameworkVariableService },
    { type: LanguageService },
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.variableKey;
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.frmVariable;
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.lanService;
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,