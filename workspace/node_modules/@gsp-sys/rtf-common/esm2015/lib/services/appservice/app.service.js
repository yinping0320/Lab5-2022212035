/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { of, zip } from 'rxjs';
import { HttpService, LanguageService, SessionService } from '@ecp-caf/caf-common';
import { IframeLink } from '../../models/iframe.model';
import { map, switchMap } from 'rxjs/operators';
import { EventUtil, FrmUtil, AppType } from '../../shared/frm-util';
import { FrameworkVariableService } from '../frmVariableService/framework-variable.service';
import { FrmI18nSettingService } from '../i18nService/i18n-setting.service';
export class AppService {
    /**
     * @param {?} http
     * @param {?} sessionSvc
     * @param {?} i18nSetting
     */
    constructor(http, sessionSvc, i18nSetting) {
        this.http = http;
        this.sessionSvc = sessionSvc;
        this.i18nSetting = i18nSetting;
        this.FUNCSTATUS_PATH = '/api/runtime/sys/v1.0/function-states';
        this.APPINVOKE_CAHCE_KEY = 'allappinvoks';
        this.frmVariableService = new FrameworkVariableService();
        if (!this.i18nSetting) {
            /** @type {?} */
            const variables = new FrameworkVariableService();
            /** @type {?} */
            const language = new LanguageService(null);
            this.i18nSetting = new FrmI18nSettingService(variables, language, http);
        }
    }
    /**
     * App跳转打开
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} params
     * @param {?=} reload
     * @return {?}
     */
    openApp(appId, appEntrance, params, reload) {
        /** @type {?} */
        const appOpts = {
            funcId: '',
            appId,
            appEntrance,
            appType: AppType.App,
            entityParams: params,
            queryStringParams: params,
            isReload: reload
        };
        this.openAppByOptions(appOpts);
    }
    /**
     * App跳转打开服务
     * @param {?} options
     * @return {?}
     */
    openAppByOptions(options) {
        /** @type {?} */
        const linkobj = this.checkingRepeatOpen(options);
        if (linkobj) {
            return;
        }
        this.getInvokeAndEnterApp$(options).subscribe((/**
         * @param {?} link
         * @return {?}
         */
        link => {
            this.getFeb().post(EventUtil.FARRIS_APP_CLICK, link);
        }));
    }
    /**
     * 流方式，App跳转打开服务
     * @param {?} options
     * @return {?}
     */
    openAppByOptions$(options) {
        /** @type {?} */
        const linkobj = this.checkingRepeatOpen(options);
        if (linkobj) {
            return of(true);
        }
        return this.getInvokeAndEnterApp$(options).pipe(map((/**
         * @param {?} link
         * @return {?}
         */
        link => {
            this.getFeb().post(EventUtil.FARRIS_APP_CLICK, link);
            return true;
        })));
    }
    /**
     * 获取app调用信息
     * @param {?} appId
     * @return {?}
     */
    getAppInvok(appId) {
        /** @type {?} */
        const invoks = this.getInvokCache();
        /** @type {?} */
        const funcInvok = invoks.find((/**
         * @param {?} f
         * @return {?}
         */
        f => f.id === appId));
        if (!funcInvok) {
            return this.getInvokConfig(appId).pipe(map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!v) {
                    return null;
                }
                this.refreshInvokCache(invoks, v);
                return v;
            })));
        }
        return of(funcInvok);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    beforeCloseAppByOptions(options) {
        /** @type {?} */
        const appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
        /** @type {?} */
        const obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(appObkey);
        if (!obs) {
            this.closeAppByOptions(options).subscribe();
            return;
        }
        /** @type {?} */
        const eventArgs = {
            tabId: this.getPageId(options.appId, options.appEntrance, options.tabId),
            appType: AppType.App,
            appId: options.appId,
            appEntrance: options.appEntrance
        };
        this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
    }
    /**
     * App关闭前接口
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?=} tabId
     * @return {?}
     */
    beforeCloseApp(appId, appEntrance, tabId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const appObkey = EventUtil.appObsToken(appId, appEntrance, tabId);
        /** @type {?} */
        const obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(appObkey);
        if (!obs) {
            this.closeApp(appId, appEntrance, tabId).subscribe();
            return;
        }
        /** @type {?} */
        const eventArgs = {
            tabId: self.getPageId(appId, appEntrance, tabId),
            appType: AppType.App,
            appId,
            appEntrance
        };
        this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    closeAppByOptions(options) {
        /** @type {?} */
        const appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
        /** @type {?} */
        const pageToken = this.getPageId(options.appId, options.appEntrance, options.tabId);
        EventUtil.clearObserver(appObkey);
        EventUtil.clearEventPipe(pageToken);
        /** @type {?} */
        const objIndex = FrmUtil.getTabArray().findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i.id === pageToken && i.appType === AppType.App));
        /** @type {?} */
        const obj = FrmUtil.getTabArray()[objIndex];
        options.token = options.token || obj.formToken;
        FrmUtil.removeTab(objIndex);
        /** @type {?} */
        const eventArgs = {
            tabId: pageToken,
            appType: AppType.App,
            appId: options.tabId,
            appEntrance: options.appEntrance
        };
        this.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
        return this.quitApp(options, obj.su);
    }
    /**
     * 关闭app
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?=} tabId
     * @return {?}
     */
    closeApp(appId, appEntrance, tabId) {
        /** @type {?} */
        const self = this;
        /** @type {?} */
        const appObkey = EventUtil.appObsToken(appId, appEntrance, tabId);
        /** @type {?} */
        const pageId = this.getPageId(appId, appEntrance, tabId);
        EventUtil.clearObserver(appObkey);
        EventUtil.clearEventPipe(pageId);
        /** @type {?} */
        const objIndex = FrmUtil.getTabArray().findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i.id === pageId && i.appType === AppType.App));
        /** @type {?} */
        const obj = FrmUtil.getTabArray()[objIndex];
        /** @type {?} */
        const formToken = obj.formToken;
        FrmUtil.removeTab(objIndex);
        /** @type {?} */
        const eventArgs = {
            tabId: pageId,
            appType: AppType.App,
            appId,
            appEntrance,
        };
        self.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
        /** @type {?} */
        const options = {
            tabId,
            funcId: '',
            appId,
            appEntrance,
            appType: AppType.App,
            token: formToken
        };
        return this.quitApp(options, obj.su).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        v => { })));
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    getInvokeAndEnterApp$(options) {
        /** @type {?} */
        const newPageId = this.newPageId(options.appId, options.appEntrance, options.tabId);
        options.tabId = newPageId;
        return this.getAppInvok(options.appId).pipe(switchMap((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            let invokEntry = value.appInvoks.find((/**
             * @param {?} invok
             * @return {?}
             */
            invok => invok.appEntrance === options.appEntrance));
            if (!options.appEntrance && !invokEntry) {
                invokEntry = value.appInvoks.find((/**
                 * @param {?} invok
                 * @return {?}
                 */
                invok => !invok.appEntrance));
            }
            if (!invokEntry) {
                window.alert(`请检查当前应用(ID:${options.appId})配置的应用入口(appEntrance:${options.appEntrance})是否存在`);
                return;
            }
            /** @type {?} */
            let entityParam;
            try {
                entityParam = invokEntry.entityParams ? JSON.parse(invokEntry.entityParams) : null;
            }
            catch (e) {
                entityParam = null;
                console.log(e);
            }
            /** @type {?} */
            const su = this.getSu(value.url);
            return this.enterApp({
                tabId: newPageId,
                appId: options.appId,
                appEntrance: options.appEntrance,
                menuName: options.tabName || invokEntry.name,
                action: 'enterapp'
            }, su).pipe(map((/**
             * @param {?} token
             * @return {?}
             */
            token => {
                /** @type {?} */
                const routurl = value.url + (options.appEntrance ? `#/${options.appEntrance}` : '');
                /** @type {?} */
                const linkobj = new IframeLink(value.code, null, this.buildQueryString(routurl, options.appId, options.appEntrance, options.tabId, token, options.queryStringParams));
                // id加入口区分,tabId页签唯一标识
                linkobj.id = newPageId;
                linkobj.appType = AppType.App;
                linkobj.appId = options.appId;
                linkobj.appEntrance = options.appEntrance;
                // 显示app名字及入口名字
                linkobj.FuncName = options.tabName || invokEntry.name;
                linkobj.url = value.url;
                linkobj.reload = options.isReload;
                linkobj.su = su;
                linkobj.formToken = token;
                if (entityParam) {
                    entityParam.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        if (item.name === 'mode') {
                            linkobj.mode = item.value;
                            linkobj.src += (item.value ? `&appMode=${item.value}&` : '');
                        }
                    }));
                }
                this.getFeb().post(newPageId, options.entityParams);
                return linkobj;
            })), switchMap((/**
             * @param {?} formLink
             * @return {?}
             */
            formLink => {
                return this.i18nSetting.getSetting$().pipe(map((/**
                 * @return {?}
                 */
                () => formLink)));
            })));
        })));
    }
    /**
     * @private
     * @param {?} appId
     * @return {?}
     */
    getInvokConfig(appId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/gspapp/${appId}`;
        return this.http.request('Get', url, FrmUtil.setHeader(null, {}));
    }
    /**
     * 进入应用，触发相关服务
     * @private
     * @param {?} enterParam
     * @param {?} su
     * @return {?}
     */
    enterApp(enterParam, su) {
        /** @type {?} */
        const bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : `?su=${su}`);
        return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: enterParam })).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            return v.token || v.sessionId;
        })));
    }
    /**
     * 退出应用，触发相关服务
     * @private
     * @param {?} options
     * @param {?=} su
     * @return {?}
     */
    quitApp(options, su) {
        /** @type {?} */
        const body = {
            tabId: options.tabId,
            token: options.token,
            appId: options.appId,
            appEntrance: options.appEntrance,
            action: 'quitapp'
        };
        /** @type {?} */
        const invokObs = this.getAppInvok(options.appId);
        /** @type {?} */
        const bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : `?su=${su}`);
        /** @type {?} */
        const funcState$ = this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body }));
        // tslint:disable-next-line: deprecation
        /** @type {?} */
        const $r = zip(invokObs, funcState$, (/**
         * @param {?} res1
         * @param {?} res2
         * @return {?}
         */
        (res1, res2) => ({ res1, res2 })));
        return $r;
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    getSu(url) {
        /** @type {?} */
        const uriArr = url.split('/');
        return uriArr.length > 3 ? uriArr[3] : '';
    }
    /**
     * @private
     * @return {?}
     */
    getInvokCache() {
        /** @type {?} */
        const appInvokesCache = this.frmVariableService.getFrmVariableByKey(this.APPINVOKE_CAHCE_KEY);
        return (/** @type {?} */ (appInvokesCache)) || [];
    }
    /**
     * @private
     * @param {?} invoks
     * @param {?} funcInvok
     * @return {?}
     */
    refreshInvokCache(invoks, funcInvok) {
        if (!funcInvok) {
            return;
        }
        invoks.push(funcInvok);
        this.frmVariableService.frameworkVariableReg(this.APPINVOKE_CAHCE_KEY, invoks);
    }
    // tslint:disable-next-line: max-line-length
    /**
     * @private
     * @param {?} routurl
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} tabId
     * @param {?} token
     * @param {?} params
     * @return {?}
     */
    buildQueryString(routurl, appId, appEntrance, tabId, token, params) {
        if (routurl.indexOf('?') < 0) {
            routurl += `?appId=${appId}&appEntrance=${appEntrance}`;
        }
        else {
            routurl += `&appId=${appId}&appEntrance=${appEntrance}`;
        }
        routurl += `&appType=${AppType.App}`;
        routurl += `&tabId=${this.getPageId(appId, appEntrance, tabId)}`;
        routurl += !token ? '' : `&cvft=${token}`;
        if (params) {
            params.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                routurl += !key ? '' : `&${key}=${value}`;
            }));
        }
        return routurl;
    }
    /**
     * @private
     * @return {?}
     */
    getFeb() {
        return EventUtil.getFrmEvent();
    }
    /**
     * @private
     * @param {?} appId
     * @param {?} appEntrance
     * @return {?}
     */
    mergeAppId(appId, appEntrance) {
        return `${appId}_${appEntrance}`;
    }
    /**
     * 获取当前菜单页面的唯一标识
     * @private
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} tabId
     * @return {?}
     */
    getPageId(appId, appEntrance, tabId) {
        return tabId || this.mergeAppId(appId, appEntrance);
    }
    /**
     * 生成页面唯一标识
     * @private
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} tabId
     * @return {?}
     */
    newPageId(appId, appEntrance, tabId) {
        return tabId ? `${this.mergeAppId(appId, appEntrance)}_${tabId}` : this.mergeAppId(appId, appEntrance);
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    checkingRepeatOpen(options) {
        /** @type {?} */
        const appId = options.appId;
        /** @type {?} */
        const appEntrance = options.appEntrance;
        /** @type {?} */
        const tabId = options.tabId;
        /** @type {?} */
        const entityParams = options.entityParams;
        /** @type {?} */
        let linkobj;
        /** @type {?} */
        const pageId = this.getPageId(appId, appEntrance, tabId);
        linkobj = FrmUtil.getTabArray().find((/**
         * @param {?} i
         * @return {?}
         */
        i => i.id === pageId && i.appType === AppType.App));
        if (linkobj) {
            linkobj.FuncName = options.tabName || linkobj.FuncName;
            linkobj.src = this.buildQueryString(linkobj.url, appId, appEntrance, options.tabId, linkobj.sessionid, options.queryStringParams);
            linkobj.reload = options.isReload;
            this.getFeb().post(pageId, entityParams);
            this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
        }
        return linkobj;
    }
}
AppService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AppService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: FrmI18nSettingService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AppService.prototype.FUNCSTATUS_PATH;
    /**
     * @type {?}
     * @private
     */
    AppService.prototype.APPINVOKE_CAHCE_KEY;
    /**
     * @type {?}
     * @private
     */
    AppService.prototype.frmVariableService;
    /**
     * @type {?}
     * @private
     */
    AppService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AppService.prototype.sessionSvc;
    /**
     * @type {?}
     * @private
     */
    AppService.prototype.i18nSetting;
}
//# sourceMappingURL=data:application/json;base64,