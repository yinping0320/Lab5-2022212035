/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WindowVariableService } from '@ecp-caf/caf-common';
export class FrameworkVariableService {
    constructor() {
        this.frameworkVariable = 'frameworkVariable';
        this.nameSpace = 'variables';
        this.frmVariableName = 'rtfFrmVariable';
        this.windowService = new WindowVariableService();
        this.frmVariableInitial();
    }
    /**
     * @return {?}
     */
    getFrameworkVariable() {
        return this.windowService.getTopWindow()[this.frameworkVariable];
    }
    /**
     * 在框架顶级window注册变量
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    frameworkVariableReg(key, value) {
        /** @type {?} */
        const frmVariable = this.getFrameworkVariable();
        if (frmVariable && frmVariable.name && frmVariable.name === this.frmVariableName) {
            frmVariable[this.nameSpace] = frmVariable[this.nameSpace] || {};
            frmVariable[this.nameSpace][key] = value;
            return;
        }
        this.frmVariableInitial();
        this.getFrameworkVariable()[this.nameSpace][key] = value;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getFrmVariableByKey(key) {
        /** @type {?} */
        const frmVariable = this.getFrameworkVariable();
        if (frmVariable && frmVariable[this.nameSpace] && frmVariable[this.nameSpace][key]) {
            return frmVariable[this.nameSpace][key];
        }
        return null;
    }
    /**
     * 在框架的顶级window上
     * 定义一个公共变量。
     * 用于存放菜单、应用缓存数据，eventbus都公共对象
     * 对适配层提供服务
     * @private
     * @return {?}
     */
    frmVariableInitial() {
        /** @type {?} */
        const topWin = this.windowService.getTopWindow();
        /** @type {?} */
        const name = 'name';
        topWin[this.frameworkVariable] = topWin[this.frameworkVariable] || {};
        topWin[this.frameworkVariable][name] = this.frmVariableName;
        topWin[this.frameworkVariable][this.nameSpace] = topWin[this.frameworkVariable][this.nameSpace] || {};
    }
}
FrameworkVariableService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameworkVariableService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FrameworkVariableService.prototype.frameworkVariable;
    /**
     * @type {?}
     * @private
     */
    FrameworkVariableService.prototype.nameSpace;
    /**
     * @type {?}
     * @private
     */
    FrameworkVariableService.prototype.frmVariableName;
    /**
     * @type {?}
     * @private
     */
    FrameworkVariableService.prototype.windowService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWV3b3JrLXZhcmlhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9ydGYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2ZybVZhcmlhYmxlU2VydmljZS9mcmFtZXdvcmstdmFyaWFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUc1RCxNQUFNLE9BQU8sd0JBQXdCO0lBT2pDO1FBTFEsc0JBQWlCLEdBQUcsbUJBQW1CLENBQUM7UUFDeEMsY0FBUyxHQUFHLFdBQVcsQ0FBQztRQUN4QixvQkFBZSxHQUFHLGdCQUFnQixDQUFDO1FBSXZDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1FBQ2pELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFTSxvQkFBb0I7UUFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7Ozs7SUFLTSxvQkFBb0IsQ0FBQyxHQUFXLEVBQUUsS0FBVTs7Y0FDekMsV0FBVyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtRQUMvQyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUM5RSxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hFLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3pDLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFTSxtQkFBbUIsQ0FBQyxHQUFXOztjQUM1QixXQUFXLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1FBQy9DLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNoRixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7Ozs7SUFRTyxrQkFBa0I7O2NBQ2hCLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRTs7Y0FDMUMsSUFBSSxHQUFHLE1BQU07UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEUsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxRyxDQUFDOzs7WUFuREosVUFBVTs7Ozs7Ozs7O0lBR1AscURBQWdEOzs7OztJQUNoRCw2Q0FBZ0M7Ozs7O0lBQ2hDLG1EQUEyQzs7Ozs7SUFDM0MsaURBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBXaW5kb3dWYXJpYWJsZVNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZyYW1ld29ya1ZhcmlhYmxlU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBmcmFtZXdvcmtWYXJpYWJsZSA9ICdmcmFtZXdvcmtWYXJpYWJsZSc7XHJcbiAgICBwcml2YXRlIG5hbWVTcGFjZSA9ICd2YXJpYWJsZXMnO1xyXG4gICAgcHJpdmF0ZSBmcm1WYXJpYWJsZU5hbWUgPSAncnRmRnJtVmFyaWFibGUnO1xyXG4gICAgcHJpdmF0ZSB3aW5kb3dTZXJ2aWNlOiBXaW5kb3dWYXJpYWJsZVNlcnZpY2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dTZXJ2aWNlID0gbmV3IFdpbmRvd1ZhcmlhYmxlU2VydmljZSgpO1xyXG4gICAgICAgIHRoaXMuZnJtVmFyaWFibGVJbml0aWFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZyYW1ld29ya1ZhcmlhYmxlKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93U2VydmljZS5nZXRUb3BXaW5kb3coKVt0aGlzLmZyYW1ld29ya1ZhcmlhYmxlXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWcqOahhuaetumhtue6p3dpbmRvd+azqOWGjOWPmOmHj1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZnJhbWV3b3JrVmFyaWFibGVSZWcoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBmcm1WYXJpYWJsZSA9IHRoaXMuZ2V0RnJhbWV3b3JrVmFyaWFibGUoKTtcclxuICAgICAgICBpZiAoZnJtVmFyaWFibGUgJiYgZnJtVmFyaWFibGUubmFtZSAmJiBmcm1WYXJpYWJsZS5uYW1lID09PSB0aGlzLmZybVZhcmlhYmxlTmFtZSkge1xyXG4gICAgICAgICAgICBmcm1WYXJpYWJsZVt0aGlzLm5hbWVTcGFjZV0gPSBmcm1WYXJpYWJsZVt0aGlzLm5hbWVTcGFjZV0gfHwge307XHJcbiAgICAgICAgICAgIGZybVZhcmlhYmxlW3RoaXMubmFtZVNwYWNlXVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mcm1WYXJpYWJsZUluaXRpYWwoKTtcclxuICAgICAgICB0aGlzLmdldEZyYW1ld29ya1ZhcmlhYmxlKClbdGhpcy5uYW1lU3BhY2VdW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RnJtVmFyaWFibGVCeUtleShrZXk6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgZnJtVmFyaWFibGUgPSB0aGlzLmdldEZyYW1ld29ya1ZhcmlhYmxlKCk7XHJcbiAgICAgICAgaWYgKGZybVZhcmlhYmxlICYmIGZybVZhcmlhYmxlW3RoaXMubmFtZVNwYWNlXSAmJiBmcm1WYXJpYWJsZVt0aGlzLm5hbWVTcGFjZV1ba2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJtVmFyaWFibGVbdGhpcy5uYW1lU3BhY2VdW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyo5qGG5p6255qE6aG257qnd2luZG935LiKXHJcbiAgICAgKiDlrprkuYnkuIDkuKrlhazlhbHlj5jph4/jgIJcclxuICAgICAqIOeUqOS6juWtmOaUvuiPnOWNleOAgeW6lOeUqOe8k+WtmOaVsOaNru+8jGV2ZW50YnVz6YO95YWs5YWx5a+56LGhXHJcbiAgICAgKiDlr7npgILphY3lsYLmj5DkvpvmnI3liqFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBmcm1WYXJpYWJsZUluaXRpYWwoKSB7XHJcbiAgICAgICAgY29uc3QgdG9wV2luID0gdGhpcy53aW5kb3dTZXJ2aWNlLmdldFRvcFdpbmRvdygpO1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSAnbmFtZSc7XHJcbiAgICAgICAgdG9wV2luW3RoaXMuZnJhbWV3b3JrVmFyaWFibGVdID0gdG9wV2luW3RoaXMuZnJhbWV3b3JrVmFyaWFibGVdIHx8IHt9O1xyXG4gICAgICAgIHRvcFdpblt0aGlzLmZyYW1ld29ya1ZhcmlhYmxlXVtuYW1lXSA9IHRoaXMuZnJtVmFyaWFibGVOYW1lO1xyXG4gICAgICAgIHRvcFdpblt0aGlzLmZyYW1ld29ya1ZhcmlhYmxlXVt0aGlzLm5hbWVTcGFjZV0gPSB0b3BXaW5bdGhpcy5mcmFtZXdvcmtWYXJpYWJsZV1bdGhpcy5uYW1lU3BhY2VdIHx8IHt9O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==