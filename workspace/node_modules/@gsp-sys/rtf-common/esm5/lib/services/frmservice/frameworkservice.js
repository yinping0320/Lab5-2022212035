/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { FrmEventBus } from '../../eventbus/frm-evenbus';
import { LoadingService } from '../loading/loading.service';
import { FuncsService } from '../funcsservice/funcs.service';
import { IframeLink } from '../../models/iframe.model';
import { map, switchMap } from 'rxjs/operators';
import { CacheService, HttpService, LanguageService, SessionService } from '@ecp-caf/caf-common';
import { EventUtil, FrmUtil, AppType } from '../../shared/frm-util';
import { AppService } from '../appservice/app.service';
import { FrmI18nSettingService } from '../i18nService/i18n-setting.service';
import { FrameworkVariableService } from '../frmVariableService/framework-variable.service';
var FrameworkService = /** @class */ (function () {
    function FrameworkService(http, router, cache, sessionSvc, feb, funcService, loadService, appService, i18nSetting) {
        this.http = http;
        this.router = router;
        this.cache = cache;
        this.sessionSvc = sessionSvc;
        this.feb = feb;
        this.funcService = funcService;
        this.loadService = loadService;
        this.appService = appService;
        this.i18nSetting = i18nSetting;
        this.FUNCSTATUS_PATH = '/api/runtime/sys/v1.0/function-states';
        this.BeforeFuncClose = EventUtil.BEFORE_FUNC_CLOSE;
        this.FuncClosed = EventUtil.FUNC_CLOSED;
        this.FuncSwitch = EventUtil.FUNC_SWITCH;
        if (!this.i18nSetting) {
            /** @type {?} */
            var variables = new FrameworkVariableService();
            /** @type {?} */
            var language = new LanguageService(null);
            this.i18nSetting = new FrmI18nSettingService(variables, language, http);
        }
        if (!this.appService) {
            this.appService = new AppService(this.http, this.sessionSvc, this.i18nSetting);
        }
    }
    /**
     * 根据funcid打开功能菜单
     * (适用于单页签路由，不支持NG7升级后菜单之间跳转)
     */
    /**
     * 根据funcid打开功能菜单
     * (适用于单页签路由，不支持NG7升级后菜单之间跳转)
     * @param {?} funcid
     * @param {?} routepath
     * @param {?} parentsessionid
     * @param {?=} newsession
     * @param {?=} simpleparam
     * @return {?}
     */
    FrameworkService.prototype.openFunc = /**
     * 根据funcid打开功能菜单
     * (适用于单页签路由，不支持NG7升级后菜单之间跳转)
     * @param {?} funcid
     * @param {?} routepath
     * @param {?} parentsessionid
     * @param {?=} newsession
     * @param {?=} simpleparam
     * @return {?}
     */
    function (funcid, routepath, parentsessionid, newsession, simpleparam) {
        if (newsession === void 0) { newsession = true; }
        if (simpleparam === void 0) { simpleparam = ''; }
        /** @type {?} */
        var appOps = {
            appType: AppType.Menu,
            funcId: funcid,
            appId: '',
            appEntrance: ''
        };
        this.internalOpen(appOps);
        return of(true);
        // return this.internalOpen$(appOps);
    };
    /**
     * 直接打开功能
     */
    /**
     * 直接打开功能
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.openMenu = /**
     * 直接打开功能
     * @param {?} options
     * @return {?}
     */
    function (options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                if (!options.appId) {
                    window.alert('参数appId不能为空！');
                    return;
                }
                this.appService.openAppByOptions(options);
                break;
            case AppType.Menu:
                this.internalOpen(options);
                break;
            case AppType.Other: break;
        }
    };
    /**
     * 通过流方式打开功能
     */
    /**
     * 通过流方式打开功能
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.openMenu$ = /**
     * 通过流方式打开功能
     * @param {?} options
     * @return {?}
     */
    function (options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                if (!options.appId) {
                    window.alert('参数appId不能为空！');
                    return;
                }
                return this.appService.openAppByOptions$(options);
            case AppType.Menu:
                if (options.onlyGetIframeLink === true) {
                    return this.internalOpenByIframeLink$(options);
                }
                return this.internalOpen$(options);
            case AppType.Other: break;
        }
    };
    /**
     * 打开联查菜单
     */
    /**
     * 打开联查菜单
     * @param {?} funcId
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.openConnectedFunc = /**
     * 打开联查菜单
     * @param {?} funcId
     * @param {?} options
     * @return {?}
     */
    function (funcId, options) {
        /** @type {?} */
        var appOps = {
            appType: AppType.Menu,
            funcId: funcId,
            appId: '',
            appEntrance: '',
            entityParams: options.EntityParam,
        };
        this.internalOpen(appOps);
    };
    /**
     * 打开联查菜单，并传参
     */
    /**
     * 打开联查菜单，并传参
     * @param {?} funcId
     * @param {?} params
     * @param {?=} reload
     * @return {?}
     */
    FrameworkService.prototype.openFuncWithParam = /**
     * 打开联查菜单，并传参
     * @param {?} funcId
     * @param {?} params
     * @param {?=} reload
     * @return {?}
     */
    function (funcId, params, reload) {
        /** @type {?} */
        var options = {
            appType: AppType.Menu,
            funcId: funcId,
            appId: '',
            appEntrance: '',
            entityParams: params,
            queryStringParams: params,
            isReload: reload
        };
        this.internalOpen(options);
    };
    /**
     * 打开功能，不返回流
     */
    /**
     * 打开功能，不返回流
     * @private
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.internalOpen = /**
     * 打开功能，不返回流
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        this.checkingBeforeOpen$(options)
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res || !res.func || res.linkobj) {
                return;
            }
            /** @type {?} */
            var func = res.func;
            _this.getInvokeAndEnterFunc$(options, func).subscribe((/**
             * @param {?} lobj
             * @return {?}
             */
            function (lobj) { return _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, lobj); }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                /** @type {?} */
                var info = {
                    isErr: true,
                    errInfo: err
                };
                _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, info);
            }));
        }));
    };
    /**
     * 通过串流控制，打开菜单
     */
    /**
     * 通过串流控制，打开菜单
     * @private
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.internalOpen$ = /**
     * 通过串流控制，打开菜单
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        return this.checkingBeforeOpen$(options)
            .pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res || !res.func || res.linkobj) {
                return of(null);
            }
            /** @type {?} */
            var func = res.func;
            return _this.getInvokeAndEnterFunc$(options, func).pipe(map((/**
             * @param {?} lobj
             * @return {?}
             */
            function (lobj) {
                _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, lobj);
                return true;
            })));
        })));
    };
    /**
     * 通过串流获取被打开菜单的iframeLink对象信息
     */
    /**
     * 通过串流获取被打开菜单的iframeLink对象信息
     * @private
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.internalOpenByIframeLink$ = /**
     * 通过串流获取被打开菜单的iframeLink对象信息
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (!options.funcId) {
            window.alert('参数funcId不能为空！');
            return of(null);
        }
        return this.getFuncEntity(options.funcId).pipe(switchMap((/**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            if (!func) {
                window.alert("\u8BF7\u786E\u8BA4\u60A8\u662F\u5426\u5177\u5907\u6253\u5F00\u83DC\u5355(ID:" + options.funcId + ")\u7684\u6743\u9650");
                return null;
            }
            return _this.getInvokeAndEnterFunc$(options, func);
        })));
    };
    /**
     * @private
     * @param {?} options
     * @param {?} func
     * @return {?}
     */
    FrameworkService.prototype.getInvokeAndEnterFunc$ = /**
     * @private
     * @param {?} options
     * @param {?} func
     * @return {?}
     */
    function (options, func) {
        var _this = this;
        /** @type {?} */
        var newPageId = this.newPageId(options.funcId, options.tabId);
        options.tabId = newPageId;
        /** @type {?} */
        var linkobj;
        return this.getFuncInvok(options.funcId).pipe(switchMap((/**
         * @param {?} funcInvok
         * @return {?}
         */
        function (funcInvok) {
            /** @type {?} */
            var routurl = funcInvok.invokingConfig.url;
            /** @type {?} */
            var paramInfo = funcInvok.invokingConfig.staticParams;
            /** @type {?} */
            var entityParamInfo = funcInvok.invokingConfig.entityParams;
            /** @type {?} */
            var staticParam = paramInfo ? JSON.parse(paramInfo) : '';
            /** @type {?} */
            var entityParam = entityParamInfo ? JSON.parse(entityParamInfo) : '';
            /** @type {?} */
            var su = _this.getSu(routurl);
            return _this.enterFunc({
                tabId: newPageId,
                funcId: options.funcId,
                menuName: options.tabName || func.name,
                action: 'enter'
            }, su).pipe(map((/**
             * @param {?} formToken
             * @return {?}
             */
            function (formToken) {
                linkobj = new IframeLink(func.code, null, _this.buildQueryStringByMap(routurl, options.funcId, options.tabId, formToken, options.queryStringParams));
                linkobj.id = newPageId; // 页面唯一标识 允许页面重复打开
                linkobj.appType = AppType.Menu;
                linkobj.funcId = options.funcId;
                linkobj.FuncName = options.tabName || func.name;
                linkobj.url = funcInvok.invokingConfig.url;
                linkobj.reload = options.isReload;
                linkobj.su = su;
                linkobj.isNewTab = options.isNewTab;
                linkobj.formToken = formToken;
                if (staticParam) {
                    // dky特殊场景，打开jquery原生功能
                    staticParam.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        if (item.name === 'jquery') {
                            linkobj.isjquery = true;
                        }
                        if (item.name === 'mode') {
                            linkobj.mode = item.value;
                            linkobj.src += (item.value ? "&appMode=" + item.value + "&" : '');
                        }
                    }));
                }
                // 大对象实体传参，针对被打开页面建立唯一管道
                _this.getFeb().post(newPageId, options.entityParams);
                // this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
                return linkobj;
            })), switchMap((/**
             * @param {?} formLink
             * @return {?}
             */
            function (formLink) {
                return _this.i18nSetting.getSetting$().pipe(map((/**
                 * @return {?}
                 */
                function () { return formLink; })));
            })));
        })));
    };
    /**
     * 流方式检查菜单打开状态
     */
    /**
     * 流方式检查菜单打开状态
     * @private
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.checkingBeforeOpen$ = /**
     * 流方式检查菜单打开状态
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (!options.funcId) {
            window.alert('参数funcId不能为空！');
            return of(null);
        }
        return this.getFuncEntity(options.funcId).pipe(map((/**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            if (!func) {
                window.alert("\u8BF7\u786E\u8BA4\u60A8\u662F\u5426\u5177\u5907\u6253\u5F00\u83DC\u5355(ID:" + options.funcId + ")\u7684\u6743\u9650");
                return null;
            }
            /** @type {?} */
            var funcId = options.funcId;
            /** @type {?} */
            var tabId = options.tabId;
            /** @type {?} */
            var pageId = _this.getPageId(funcId, tabId);
            /** @type {?} */
            var linkobj = FrmUtil.getTabArray().find((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i.id === pageId && i.appType === AppType.Menu; }));
            if (linkobj) {
                linkobj.FuncName = options.tabName || linkobj.FuncName;
                linkobj.src = _this.buildQueryStringByMap(linkobj.url, funcId, options.tabId, '', options.queryStringParams);
                linkobj.reload = options.isReload; // 界面刷新不改session
                _this.getFeb().post(pageId, options.entityParams);
                _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
            }
            return { func: func, linkobj: linkobj };
        })));
    };
    /**
     * 关闭前
     */
    /**
     * 关闭前
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.beforeCloseMenu = /**
     * 关闭前
     * @param {?} options
     * @return {?}
     */
    function (options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                this.appService.beforeCloseAppByOptions(options);
                break;
            case AppType.Menu:
                this.beforeCloseFuncByOptions(options);
                break;
            default: break;
        }
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.beforeCloseFuncByOptions = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var func = this.funcService.getCachedFunc(options.funcId);
        /** @type {?} */
        var funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
        /** @type {?} */
        var pageId = this.getPageId(options.funcId, options.tabId);
        /** @type {?} */
        var obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(funcObkey);
        if (!obs) {
            this.closeFuncByOptions(options);
            return;
        }
        /** @type {?} */
        var eventArgs = {
            tabId: pageId,
            appType: AppType.Menu,
            funcId: options.funcId,
            tabName: func && func.Name,
            beforeCloseHandle: options.beforeCloseHandle
        };
        this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
    };
    /**
     * 菜单关闭前事件触发(无 token)
     */
    /**
     * 菜单关闭前事件触发(无 token)
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    FrameworkService.prototype.beforeCloseFunc = /**
     * 菜单关闭前事件触发(无 token)
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    function (funcId, tabId) {
        /** @type {?} */
        var func = this.funcService.getCachedFunc(funcId);
        /** @type {?} */
        var funcObkey = EventUtil.funcObsToken(funcId, tabId);
        /** @type {?} */
        var obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(funcObkey);
        if (!obs) {
            this.closeFunc(funcId, tabId);
            return;
        }
        /** @type {?} */
        var eventArgs = {
            tabId: this.getPageId(funcId, tabId),
            appType: AppType.Menu,
            funcId: funcId,
            tabName: func && func.Name
        };
        this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
    };
    /**
     * 直接关闭
     *
     */
    /**
     * 直接关闭
     *
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.closeMenu = /**
     * 直接关闭
     *
     * @param {?} options
     * @return {?}
     */
    function (options) {
        switch (options.appType && options.appType.toLowerCase()) {
            case AppType.App:
                this.appService.closeAppByOptions(options).subscribe();
                break;
            case AppType.Menu:
                this.closeFuncByOptions(options);
                break;
            default: break;
        }
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    FrameworkService.prototype.closeFuncByOptions = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var pageId = this.getPageId(options.funcId, options.tabId);
        EventUtil.clearObserver(EventUtil.funcObsToken(options.funcId, options.tabId));
        EventUtil.clearEventPipe(pageId); // 当前页面大对象传参会有唯一的管道
        // 当前页面大对象传参会有唯一的管道
        /** @type {?} */
        var func = this.funcService.getCachedFunc(options.funcId);
        /** @type {?} */
        var objIndex = FrmUtil.getTabArray().findIndex((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i.id === pageId && i.appType === AppType.Menu; }));
        /** @type {?} */
        var obj = FrmUtil.getTabArray()[objIndex];
        options.token = options.token || obj.formToken;
        /** @type {?} */
        var su = options.su;
        if (obj) {
            su = obj.su;
            FrmUtil.removeTab(objIndex);
            /** @type {?} */
            var eventArgs = {
                tabId: pageId,
                appType: AppType.Menu,
                funcId: options.funcId,
                tabName: func && func.name
            };
            this.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
        }
        this.quitFunc(options, su)
            .subscribe((/**
         * @return {?}
         */
        function () { }));
    };
    /**
     * 关闭菜单tab页签，tabId可以指定，默认为funcId
     */
    /**
     * 关闭菜单tab页签，tabId可以指定，默认为funcId
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    FrameworkService.prototype.closeFunc = /**
     * 关闭菜单tab页签，tabId可以指定，默认为funcId
     * @param {?} funcId
     * @param {?=} tabId
     * @return {?}
     */
    function (funcId, tabId) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var pageId = this.getPageId(funcId, tabId);
        EventUtil.clearObserver(EventUtil.funcObsToken(funcId, tabId));
        EventUtil.clearEventPipe(pageId); // 当前页面大对象传参会有唯一的管道
        // 当前页面大对象传参会有唯一的管道
        /** @type {?} */
        var func = this.funcService.getCachedFunc(funcId);
        /** @type {?} */
        var objIndex = FrmUtil.getTabArray().findIndex((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i.id === pageId && i.appType === AppType.Menu; }));
        /** @type {?} */
        var obj = FrmUtil.getTabArray()[objIndex];
        /** @type {?} */
        var formToken = obj.formToken;
        if (obj) {
            FrmUtil.removeTab(objIndex);
            /** @type {?} */
            var eventArgs = {
                tabId: pageId,
                appType: AppType.Menu,
                funcId: funcId,
                tabName: func && func.name
            };
            self.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
        }
        /** @type {?} */
        var options = {
            tabId: tabId,
            funcId: funcId,
            appId: '',
            appEntrance: '',
            appType: AppType.Menu,
            token: formToken,
        };
        this.quitFunc(options, obj.su)
            .subscribe((/**
         * @return {?}
         */
        function () { }));
        return of(true);
    };
    /**
     * 获取菜单的调用信息
     */
    /**
     * 获取菜单的调用信息
     * @param {?} funcId
     * @return {?}
     */
    FrameworkService.prototype.getFuncInvok = /**
     * 获取菜单的调用信息
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        var _this = this;
        /** @type {?} */
        var invoks = this.getInvokCache();
        /** @type {?} */
        var funcInvok = invoks.find((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return f.id === funcId; }));
        if (!funcInvok) {
            return this.getInvokConfig(funcId).pipe(map((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (!v) {
                    return null;
                }
                invoks.push(v);
                _this.funcService.cacheAllFuncInvoks(invoks);
                return v;
            })));
        }
        return of(funcInvok);
    };
    /**
     * 获取菜单实体
     */
    /**
     * 获取菜单实体
     * @param {?} funcId
     * @return {?}
     */
    FrameworkService.prototype.getFuncEntity = /**
     * 获取菜单实体
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        var _this = this;
        /** @type {?} */
        var func = this.funcService.getCachedFunc(funcId);
        if (!func) {
            /** @type {?} */
            var url = "/api/runtime/sys/v1.0/functions/" + funcId;
            return this.http.request('Get', url, FrmUtil.setHeader(null, {}))
                .pipe(map((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (!v || !v[0]) {
                    return null;
                }
                /** @type {?} */
                var allFuncs = (/** @type {?} */ (_this.funcService.getAllCachedFuncs()));
                allFuncs.push(v[0]);
                _this.funcService.cacheAllFuncs(allFuncs);
                return v[0];
            })));
        }
        return of(func);
    };
    /**
     * 获取菜单预置参数
     */
    /**
     * 获取菜单预置参数
     * @param {?} funcId
     * @return {?}
     */
    FrameworkService.prototype.getPresetParams = /**
     * 获取菜单预置参数
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        var _this = this;
        return this.getFuncInvok(funcId).pipe(map((/**
         * @param {?} funcInvok
         * @return {?}
         */
        function (funcInvok) {
            /** @type {?} */
            var paramInfo = funcInvok.invokingConfig.staticParams;
            /** @type {?} */
            var entityParamInfo = funcInvok.invokingConfig.entityParams;
            /** @type {?} */
            var staticParam = paramInfo ? JSON.parse(paramInfo) : [];
            /** @type {?} */
            var entityParam = entityParamInfo ? JSON.parse(entityParamInfo) : [];
            return _this.mergeParams(staticParam, entityParam);
        })));
    };
    /**
     * 获取菜单的静态参数
     */
    /**
     * 获取菜单的静态参数
     * @param {?} funcId
     * @return {?}
     */
    FrameworkService.prototype.getStaticParam = /**
     * 获取菜单的静态参数
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        return this.getFuncInvok(funcId).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v.invokingConfig.staticParams) {
                return JSON.parse(v.invokingConfig.staticParams);
            }
        })));
    };
    /**
     * 获取表单的实体参数
     */
    /**
     * 获取表单的实体参数
     * @param {?} tabId
     * @param {?} handler
     * @param {?=} isSubonce
     * @return {?}
     */
    FrameworkService.prototype.getEntityParam = /**
     * 获取表单的实体参数
     * @param {?} tabId
     * @param {?} handler
     * @param {?=} isSubonce
     * @return {?}
     */
    function (tabId, handler, isSubonce) {
        if (isSubonce === void 0) { isSubonce = true; }
        if (isSubonce) {
            this.getFeb().once(tabId, handler);
        }
        this.getFeb().on(tabId, handler);
    };
    /**
     * @param {?} funcId
     * @return {?}
     */
    FrameworkService.prototype.entityParamUnsub = /**
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        this.getFeb().unSubscribe(funcId);
    };
    /**
     * 获取某菜单的实体参数结构
     */
    /**
     * 获取某菜单的实体参数结构
     * @param {?} funcId
     * @return {?}
     */
    FrameworkService.prototype.getEntityParamStructure = /**
     * 获取某菜单的实体参数结构
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        return this.getFuncInvok(funcId).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v.invokingConfig.entityParams) {
                return JSON.parse(v.invokingConfig.entityParams);
            }
        })));
    };
    /**
     * @private
     * @param {?} staticParam
     * @param {?} entityParam
     * @return {?}
     */
    FrameworkService.prototype.mergeParams = /**
     * @private
     * @param {?} staticParam
     * @param {?} entityParam
     * @return {?}
     */
    function (staticParam, entityParam) {
        /** @type {?} */
        var paraMap = new Map();
        if (entityParam) {
            entityParam.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                paraMap.set(item.name, item.value);
            }));
        }
        if (staticParam) {
            // func上对app参数复用
            staticParam.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                paraMap.set(item.name, item.value);
            }));
        }
        return paraMap;
    };
    /**
     * @private
     * @param {?} funcId
     * @return {?}
     */
    FrameworkService.prototype.getInvokConfig = /**
     * @private
     * @param {?} funcId
     * @return {?}
     */
    function (funcId) {
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/functions/funcInvok/" + funcId;
        return this.http.request('Get', url, FrmUtil.setHeader(null, {}));
    };
    /**
     * @private
     * @return {?}
     */
    FrameworkService.prototype.getInvokCache = /**
     * @private
     * @return {?}
     */
    function () {
        return this.funcService.getAllCachedFuncInvoks();
    };
    /**
     * 获取框架eventbus
     */
    /**
     * 获取框架eventbus
     * @private
     * @return {?}
     */
    FrameworkService.prototype.getFeb = /**
     * 获取框架eventbus
     * @private
     * @return {?}
     */
    function () {
        return EventUtil.getFrmEvent();
    };
    /**
     * 构造功能及session
     * (1912 funcSession移除后，接口不再提供)
     */
    /**
     * 构造功能及session
     * (1912 funcSession移除后，接口不再提供)
     * @param {?} funcId
     * @param {?=} su
     * @return {?}
     */
    FrameworkService.prototype.buildFuncSession = /**
     * 构造功能及session
     * (1912 funcSession移除后，接口不再提供)
     * @param {?} funcId
     * @param {?=} su
     * @return {?}
     */
    function (funcId, su) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var userSession = this.sessionSvc.getUserSessionId();
        /** @type {?} */
        var body = {
            token: userSession,
            funcId: funcId,
            action: 'enter'
        };
        /** @type {?} */
        var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
        return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(userSession, { body: body })).pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            /** @type {?} */
            var ss = v.sessionId;
            if (ss !== undefined && ss !== null && ss.length > 0) {
                self.sessionSvc.setFuncSessionId(funcId, ss);
            }
            return ss;
        })));
    };
    /**
     * 进入功能，触发服务端逻辑
     * 移除funcSession
     * 返回公共变量token
     */
    /**
     * 进入功能，触发服务端逻辑
     * 移除funcSession
     * 返回公共变量token
     * @private
     * @param {?} enterParam
     * @param {?} su
     * @return {?}
     */
    FrameworkService.prototype.enterFunc = /**
     * 进入功能，触发服务端逻辑
     * 移除funcSession
     * 返回公共变量token
     * @private
     * @param {?} enterParam
     * @param {?} su
     * @return {?}
     */
    function (enterParam, su) {
        /** @type {?} */
        var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
        return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: enterParam }))
            .pipe(map((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            return v.token || v.sessionId;
        })));
    };
    /**
     * 退出功能，如果存在bizContext，则移除
     */
    /**
     * 退出功能，如果存在bizContext，则移除
     * @private
     * @param {?} options
     * @param {?} su
     * @return {?}
     */
    FrameworkService.prototype.quitFunc = /**
     * 退出功能，如果存在bizContext，则移除
     * @private
     * @param {?} options
     * @param {?} su
     * @return {?}
     */
    function (options, su) {
        /** @type {?} */
        var body = {
            token: options.token,
            tabId: options.tabId,
            funcId: options.funcId,
            action: 'quit'
        };
        /** @type {?} */
        var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
        return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: body }));
    };
    /**
     * 获取当前应用所属su
     */
    /**
     * 获取当前应用所属su
     * @private
     * @param {?} url
     * @return {?}
     */
    FrameworkService.prototype.getSu = /**
     * 获取当前应用所属su
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var uriArr = url.split('/');
        return uriArr.length > 3 ? uriArr[3] : '';
    };
    /**
     * iframe url拼接 querystring 参数
     */
    /**
     * iframe url拼接 querystring 参数
     * @private
     * @param {?} routurl
     * @param {?} funcId
     * @param {?} params
     * @return {?}
     */
    FrameworkService.prototype.buildQueryString = /**
     * iframe url拼接 querystring 参数
     * @private
     * @param {?} routurl
     * @param {?} funcId
     * @param {?} params
     * @return {?}
     */
    function (routurl, funcId, params) {
        if (routurl.indexOf('?') < 0) {
            routurl += "?funcId=" + funcId;
        }
        else {
            routurl += "&funcId=" + funcId;
        }
        if (params) {
            Object.keys(params).forEach((/**
             * @param {?} propName
             * @param {?} index
             * @return {?}
             */
            function (propName, index) {
                routurl += "" + (index === 0 ? '' : '&') + propName + "=" + params[propName];
            }));
        }
        return routurl;
    };
    /**
     * url 拼接map格式的参数
     */
    /**
     * url 拼接map格式的参数
     * @private
     * @param {?} routurl
     * @param {?} funcId
     * @param {?} tabId
     * @param {?} token
     * @param {?} params
     * @return {?}
     */
    FrameworkService.prototype.buildQueryStringByMap = /**
     * url 拼接map格式的参数
     * @private
     * @param {?} routurl
     * @param {?} funcId
     * @param {?} tabId
     * @param {?} token
     * @param {?} params
     * @return {?}
     */
    function (routurl, funcId, tabId, token, params) {
        if (routurl.indexOf('?') < 0) {
            routurl += "?funcId=" + funcId;
        }
        else {
            routurl += "&funcId=" + funcId;
        }
        routurl += "&appType=" + AppType.Menu;
        routurl += "&tabId=" + this.getPageId(funcId, tabId);
        routurl += !token ? '' : "&cvft=" + token;
        if (params) {
            params.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                routurl += !key ? '' : "&" + key + "=" + value;
            }));
        }
        return routurl;
    };
    /**
     * 获取当前菜单页面的唯一标识
     */
    /**
     * 获取当前菜单页面的唯一标识
     * @private
     * @param {?} funcId
     * @param {?} tabId
     * @return {?}
     */
    FrameworkService.prototype.getPageId = /**
     * 获取当前菜单页面的唯一标识
     * @private
     * @param {?} funcId
     * @param {?} tabId
     * @return {?}
     */
    function (funcId, tabId) {
        return tabId || funcId;
    };
    /**
     * 页面第一次被打开时，生成唯一标识
     */
    /**
     * 页面第一次被打开时，生成唯一标识
     * @private
     * @param {?} funcId
     * @param {?} tabId
     * @return {?}
     */
    FrameworkService.prototype.newPageId = /**
     * 页面第一次被打开时，生成唯一标识
     * @private
     * @param {?} funcId
     * @param {?} tabId
     * @return {?}
     */
    function (funcId, tabId) {
        return tabId ? funcId + "_" + tabId : funcId;
    };
    /**
     * @param {?} token
     * @param {?} args
     * @return {?}
     */
    FrameworkService.prototype.eventFire = /**
     * @param {?} token
     * @param {?} args
     * @return {?}
     */
    function (token, args) {
        /** @type {?} */
        var feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.post !== 'function') {
            return;
        }
        feb.post(token, args);
    };
    /**
     * @param {?} token
     * @param {?} handler
     * @param {?=} options
     * @return {?}
     */
    FrameworkService.prototype.eventListner = /**
     * @param {?} token
     * @param {?} handler
     * @param {?=} options
     * @return {?}
     */
    function (token, handler, options) {
        /** @type {?} */
        var feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        // 菜单监听者必须要声明自己的身份，方便框架管理
        if (options && options.appType) {
            switch (options.appType.toLowerCase()) {
                case AppType.App:
                    /** @type {?} */
                    var appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                    feb.onWithObkey(token, appObkey, handler);
                    return;
                case AppType.Menu:
                    /** @type {?} */
                    var funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
                    feb.onWithObkey(token, funcObkey, handler);
                    return;
                default: break;
            }
        }
        feb.on(token, handler);
    };
    /** 创建监听订阅, 维护一个监听者列表，针对菜单触发事件 */
    /**
     * 创建监听订阅, 维护一个监听者列表，针对菜单触发事件
     * @param {?} token
     * @param {?} funcId
     * @param {?} handler
     * @return {?}
     */
    FrameworkService.prototype.eventListner4Func = /**
     * 创建监听订阅, 维护一个监听者列表，针对菜单触发事件
     * @param {?} token
     * @param {?} funcId
     * @param {?} handler
     * @return {?}
     */
    function (token, funcId, handler) {
        /** @type {?} */
        var feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        feb.onWithObkey(token, funcId, handler);
    };
    /** 创建监听订阅, 维护一个监听者列表，针对应用触发事件 */
    /**
     * 创建监听订阅, 维护一个监听者列表，针对应用触发事件
     * @param {?} token
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} handler
     * @return {?}
     */
    FrameworkService.prototype.eventListner4App = /**
     * 创建监听订阅, 维护一个监听者列表，针对应用触发事件
     * @param {?} token
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} handler
     * @return {?}
     */
    function (token, appId, appEntrance, handler) {
        /** @type {?} */
        var feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        /** @type {?} */
        var appObkey = EventUtil.appObsToken(appId, appEntrance);
        feb.onWithObkey(token, appObkey, handler);
    };
    FrameworkService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrameworkService.ctorParameters = function () { return [
        { type: HttpService },
        { type: Router },
        { type: CacheService },
        { type: SessionService },
        { type: FrmEventBus },
        { type: FuncsService },
        { type: LoadingService },
        { type: AppService, decorators: [{ type: Optional }] },
        { type: FrmI18nSettingService, decorators: [{ type: Optional }] }
    ]; };
    return FrameworkService;
}());
export { FrameworkService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.FUNCSTATUS_PATH;
    /** @type {?} */
    FrameworkService.prototype.BeforeFuncClose;
    /** @type {?} */
    FrameworkService.prototype.FuncClosed;
    /** @type {?} */
    FrameworkService.prototype.FuncSwitch;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.sessionSvc;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.feb;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.funcService;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.loadService;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    FrameworkService.prototype.i18nSetting;
}
//# sourceMappingURL=data:application/json;base64,