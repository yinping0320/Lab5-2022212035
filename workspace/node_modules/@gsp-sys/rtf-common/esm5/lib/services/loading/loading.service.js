/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoadingComponent } from './loading.component';
import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef } from '@angular/core';
import { LOADING_DEFAULT_CONFIG, loaddingDefaultConfig } from './loading.config';
var LoadingService = /** @class */ (function () {
    function LoadingService(appRef, cfr, injecotr) {
        this.appRef = appRef;
        this.cfr = cfr;
        this.injecotr = injecotr;
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    LoadingService.prototype.show = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        this.removeDomCheck();
        this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG) || {};
        this.config = Object.assign(loaddingDefaultConfig, this.config);
        /** @type {?} */
        var loadingFactory = this.cfr.resolveComponentFactory(LoadingComponent);
        this.loadingCmpRef = loadingFactory.create(this.injecotr);
        if (config) {
            this.config = Object.assign({}, this.config, config);
        }
        /** @type {?} */
        var languageCode = localStorage.getItem('languageCode');
        if (languageCode === 'en') {
            this.config.message = 'Loading...';
        }
        /** @type {?} */
        var container = this.config.container;
        if (container === 'body') {
            document.querySelector((/** @type {?} */ (container))).appendChild(this.loadingCmpRef.location.nativeElement);
        }
        else {
            if (container instanceof ElementRef) {
                container.nativeElement.appendChild(this.loadingCmpRef.location.nativeElement);
            }
        }
        this.loadingCmpRef.instance.isActive = true;
        Object.assign(this.loadingCmpRef.instance, this.config);
        this.loadingCmpRef.instance.closed.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (!state) {
                _this.clearDom(_this.loadingCmpRef);
            }
        }));
        this.loadingCmpRef.changeDetectorRef.markForCheck();
        this.loadingCmpRef.changeDetectorRef.detectChanges();
        return this.loadingCmpRef.instance;
    };
    /**
     * @return {?}
     */
    LoadingService.prototype.close = /**
     * @return {?}
     */
    function () {
        if (!!this.loadingCmpRef) {
            this.clearDom(this.loadingCmpRef);
        }
    };
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    LoadingService.prototype.clearDom = /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    function (cmpRef) {
        var _this = this;
        try {
            /** @type {?} */
            var loadingEl = cmpRef.location.nativeElement;
            if (!!loadingEl && loadingEl.parentNode) {
                loadingEl.parentNode.removeChild(loadingEl);
            }
            this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG);
            cmpRef.destroy();
            cmpRef = null;
            setTimeout((/**
             * @return {?}
             */
            function () {
                // 1.5s 后检查是否移除成功
                _this.removeDomCheck();
            }), 1500);
        }
        catch (e) {
            console.log(e);
            this.removeDomCheck();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LoadingService.prototype.removeDomCheck = /**
     * @private
     * @return {?}
     */
    function () {
        try {
            /** @type {?} */
            var el = document.getElementsByTagName('farris-loading')[0];
            if (!!el && !!el.parentNode) {
                el.parentNode.removeChild(el);
            }
        }
        catch (ex) {
            console.log(ex);
        }
    };
    LoadingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoadingService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return LoadingService;
}());
export { LoadingService };
if (false) {
    /** @type {?} */
    LoadingService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.loadingCmpRef;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.injecotr;
}
//# sourceMappingURL=data:application/json;base64,