/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LoadingComponent } from './loading.component';
import { LoadingService } from './loading.service';
import { LOADING_DEFAULT_CONFIG, loaddingDefaultConfig } from './loading.config';
// export function loadingFactory(app: ApplicationRef, cfr: ComponentFactoryResolver, injector: Injector) {
//     return new LoadingService(app, cfr, injector);
// }
var LoadingModule = /** @class */ (function () {
    function LoadingModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    LoadingModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        // const _config = config ? Object.assign({}, loaddingDefaultConfig, config) : loaddingDefaultConfig;
        return {
            ngModule: LoadingModule,
            providers: [
                { provide: LOADING_DEFAULT_CONFIG, useValue: config || loaddingDefaultConfig },
                LoadingService
                // { provide: LoadingService, useFactory: loadingFactory, deps: [ApplicationRef, ComponentFactoryResolver, Injector] }
            ]
        };
    };
    LoadingModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        LoadingComponent
                    ],
                    entryComponents: [
                        LoadingComponent
                    ]
                },] }
    ];
    return LoadingModule;
}());
export { LoadingModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9ydGYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2xvYWRpbmcvbG9hZGluZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFpQixzQkFBc0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBTWhHO0lBQUE7SUF3QkEsQ0FBQzs7Ozs7SUFaVSxxQkFBTzs7OztJQUFkLFVBQWUsTUFBc0I7UUFDakMscUdBQXFHO1FBRXJHLE9BQU87WUFDSCxRQUFRLEVBQUUsYUFBYTtZQUN2QixTQUFTLEVBQUU7Z0JBQ1AsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLE1BQU0sSUFBSSxxQkFBcUIsRUFBQztnQkFDN0UsY0FBYztnQkFDZCxzSEFBc0g7YUFDekg7U0FDSixDQUFDO0lBQ04sQ0FBQzs7Z0JBdkJKLFFBQVEsU0FBQztvQkFDTixPQUFPLEVBQUU7d0JBQ0wsWUFBWTtxQkFDZjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1YsZ0JBQWdCO3FCQUNuQjtvQkFDRCxlQUFlLEVBQUU7d0JBQ2IsZ0JBQWdCO3FCQUNuQjtpQkFDSjs7SUFjRCxvQkFBQztDQUFBLEFBeEJELElBd0JDO1NBYlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBMb2FkaW5nQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkaW5nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnLi9sb2FkaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2FkaW5nQ29uZmlnLCBMT0FESU5HX0RFRkFVTFRfQ09ORklHLCBsb2FkZGluZ0RlZmF1bHRDb25maWcgfSBmcm9tICcuL2xvYWRpbmcuY29uZmlnJztcclxuXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBsb2FkaW5nRmFjdG9yeShhcHA6IEFwcGxpY2F0aW9uUmVmLCBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbi8vICAgICByZXR1cm4gbmV3IExvYWRpbmdTZXJ2aWNlKGFwcCwgY2ZyLCBpbmplY3Rvcik7XHJcbi8vIH1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlXHJcbiAgICBdLFxyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgTG9hZGluZ0NvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgICAgIExvYWRpbmdDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIExvYWRpbmdNb2R1bGUge1xyXG4gICAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogTG9hZGluZ0NvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIC8vIGNvbnN0IF9jb25maWcgPSBjb25maWcgPyBPYmplY3QuYXNzaWduKHt9LCBsb2FkZGluZ0RlZmF1bHRDb25maWcsIGNvbmZpZykgOiBsb2FkZGluZ0RlZmF1bHRDb25maWc7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBMb2FkaW5nTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogTE9BRElOR19ERUZBVUxUX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZyB8fCBsb2FkZGluZ0RlZmF1bHRDb25maWd9LFxyXG4gICAgICAgICAgICAgICAgTG9hZGluZ1NlcnZpY2VcclxuICAgICAgICAgICAgICAgIC8vIHsgcHJvdmlkZTogTG9hZGluZ1NlcnZpY2UsIHVzZUZhY3Rvcnk6IGxvYWRpbmdGYWN0b3J5LCBkZXBzOiBbQXBwbGljYXRpb25SZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3JdIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19