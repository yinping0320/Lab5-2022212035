/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { EventUtil, AppType } from '../../shared/frm-util';
import { FrmEventBus } from '../../eventbus/frm-evenbus';
import { Subject } from 'rxjs';
var FrameworkEventService = /** @class */ (function () {
    function FrameworkEventService(feb) {
        this.feb = feb;
        this.FarrisApps = EventUtil.FARRIS_APPS;
        this.FarrisAppClick = EventUtil.FARRIS_APP_CLICK;
        this.AllGspFuncs = EventUtil.ALL_GSP_FUNCS;
        this.BeforeFuncClose = EventUtil.BEFORE_FUNC_CLOSE;
        this.FuncClosed = EventUtil.FUNC_CLOSED;
        this.FuncSwitch = EventUtil.FUNC_SWITCH;
        this.AfterFrameLoad = EventUtil.AFTER_FRAME_LOAD;
        /** @type {?} */
        var eventBusEntity = EventUtil.getFrmEvent();
        if (!eventBusEntity) {
            EventUtil.setFrmEvent(this.feb || new FrmEventBus());
            this.eventInitial();
        }
    }
    /**
     * @param {?} token
     * @param {?} args
     * @return {?}
     */
    FrameworkEventService.prototype.eventFire = /**
     * @param {?} token
     * @param {?} args
     * @return {?}
     */
    function (token, args) {
        /** @type {?} */
        var feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.post !== 'function') {
            return;
        }
        feb.post(token, args);
    };
    /**
     * @param {?} token
     * @param {?} handler
     * @param {?=} options
     * @return {?}
     */
    FrameworkEventService.prototype.eventListner = /**
     * @param {?} token
     * @param {?} handler
     * @param {?=} options
     * @return {?}
     */
    function (token, handler, options) {
        /** @type {?} */
        var feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.on !== 'function') {
            return;
        }
        // 菜单监听者必须要声明自己的身份，方便框架管理
        if (options && options.appType) {
            switch (options.appType.toLowerCase()) {
                case AppType.App:
                    /** @type {?} */
                    var appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                    feb.onWithObkey(token, appObkey, handler);
                    return;
                case AppType.Menu:
                    /** @type {?} */
                    var funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
                    feb.onWithObkey(token, funcObkey, handler);
                    return;
                default: break;
            }
        }
        feb.on(token, handler);
    };
    /**
     * @private
     * @return {?}
     */
    FrameworkEventService.prototype.eventInitial = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var feb = EventUtil.getFrmEvent();
        if (!feb || typeof feb.post !== 'function') {
            return;
        }
        feb.post(this.FarrisApps, null);
        feb.post(this.FarrisAppClick, null);
        feb.post(this.AllGspFuncs, null);
        feb.initialPipe(this.FuncClosed, new Subject());
        feb.initialPipe(this.FuncSwitch, new Subject());
        feb.initialPipe(this.BeforeFuncClose, new Subject());
        feb.initialPipe(this.AfterFrameLoad, new Subject());
    };
    FrameworkEventService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrameworkEventService.ctorParameters = function () { return [
        { type: FrmEventBus }
    ]; };
    return FrameworkEventService;
}());
export { FrameworkEventService };
if (false) {
    /** @type {?} */
    FrameworkEventService.prototype.FarrisApps;
    /** @type {?} */
    FrameworkEventService.prototype.FarrisAppClick;
    /** @type {?} */
    FrameworkEventService.prototype.AllGspFuncs;
    /** @type {?} */
    FrameworkEventService.prototype.BeforeFuncClose;
    /** @type {?} */
    FrameworkEventService.prototype.FuncClosed;
    /** @type {?} */
    FrameworkEventService.prototype.FuncSwitch;
    /** @type {?} */
    FrameworkEventService.prototype.AfterFrameLoad;
    /**
     * @type {?}
     * @private
     */
    FrameworkEventService.prototype.feb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWV3b3JrLWV2ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9ydGYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2ZybUV2ZW50U2VydmljZS9mcmFtZXdvcmstZXZlbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBYyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRy9CO0lBV0ksK0JBQW9CLEdBQWdCO1FBQWhCLFFBQUcsR0FBSCxHQUFHLENBQWE7UUFSN0IsZUFBVSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDbkMsbUJBQWMsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7UUFDNUMsZ0JBQVcsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQ3RDLG9CQUFlLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1FBQzlDLGVBQVUsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO1FBQ25DLGVBQVUsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO1FBQ25DLG1CQUFjLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDOztZQUd6QyxjQUFjLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRTtRQUM5QyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ2pCLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQzs7Ozs7O0lBR00seUNBQVM7Ozs7O0lBQWhCLFVBQWlCLEtBQWEsRUFBRSxJQUFTOztZQUMvQixHQUFHLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRTtRQUNuQyxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDeEMsT0FBTztTQUNWO1FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Ozs7OztJQUVNLDRDQUFZOzs7Ozs7SUFBbkIsVUFBb0IsS0FBYSxFQUFFLE9BQTZCLEVBQUUsT0FBb0I7O1lBQzVFLEdBQUcsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFO1FBQ25DLElBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRSxLQUFLLFVBQVUsRUFBRTtZQUN0QyxPQUFPO1NBQ1Y7UUFDRCx5QkFBeUI7UUFDekIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUM1QixRQUFRLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQ25DLEtBQUssT0FBTyxDQUFDLEdBQUc7O3dCQUNOLFFBQVEsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO29CQUN6RixHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQzFDLE9BQU87Z0JBQ1gsS0FBSyxPQUFPLENBQUMsSUFBSTs7d0JBQ1AsU0FBUyxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO29CQUN2RSxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQzNDLE9BQU87Z0JBQ1gsT0FBTyxDQUFDLENBQUMsTUFBTTthQUNsQjtTQUNKO1FBQ0QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFTyw0Q0FBWTs7OztJQUFwQjs7WUFDVSxHQUFHLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRTtRQUNuQyxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDeEMsT0FBTztTQUNWO1FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksT0FBTyxFQUFPLENBQUMsQ0FBQztRQUNyRCxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxPQUFPLEVBQU8sQ0FBQyxDQUFDO1FBQ3JELEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLE9BQU8sRUFBTyxDQUFDLENBQUM7UUFDMUQsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksT0FBTyxFQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDOztnQkE5REosVUFBVTs7OztnQkFKRixXQUFXOztJQW9FcEIsNEJBQUM7Q0FBQSxBQWhFRCxJQWdFQztTQS9EWSxxQkFBcUI7OztJQUU5QiwyQ0FBMEM7O0lBQzFDLCtDQUFtRDs7SUFDbkQsNENBQTZDOztJQUM3QyxnREFBcUQ7O0lBQ3JELDJDQUEwQzs7SUFDMUMsMkNBQTBDOztJQUMxQywrQ0FBbUQ7Ozs7O0lBRXZDLG9DQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRXZlbnRVdGlsLCBBcHBUeXBlLCBBcHBPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2ZybS11dGlsJztcclxuaW1wb3J0IHsgRnJtRXZlbnRCdXMgfSBmcm9tICcuLi8uLi9ldmVudGJ1cy9mcm0tZXZlbmJ1cyc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGcmFtZXdvcmtFdmVudFNlcnZpY2Uge1xyXG5cclxuICAgIHB1YmxpYyBGYXJyaXNBcHBzID0gRXZlbnRVdGlsLkZBUlJJU19BUFBTO1xyXG4gICAgcHVibGljIEZhcnJpc0FwcENsaWNrID0gRXZlbnRVdGlsLkZBUlJJU19BUFBfQ0xJQ0s7XHJcbiAgICBwdWJsaWMgQWxsR3NwRnVuY3MgPSBFdmVudFV0aWwuQUxMX0dTUF9GVU5DUztcclxuICAgIHB1YmxpYyBCZWZvcmVGdW5jQ2xvc2UgPSBFdmVudFV0aWwuQkVGT1JFX0ZVTkNfQ0xPU0U7XHJcbiAgICBwdWJsaWMgRnVuY0Nsb3NlZCA9IEV2ZW50VXRpbC5GVU5DX0NMT1NFRDtcclxuICAgIHB1YmxpYyBGdW5jU3dpdGNoID0gRXZlbnRVdGlsLkZVTkNfU1dJVENIO1xyXG4gICAgcHVibGljIEFmdGVyRnJhbWVMb2FkID0gRXZlbnRVdGlsLkFGVEVSX0ZSQU1FX0xPQUQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBmZWI6IEZybUV2ZW50QnVzKSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnRCdXNFbnRpdHkgPSBFdmVudFV0aWwuZ2V0RnJtRXZlbnQoKTtcclxuICAgICAgICBpZiAoIWV2ZW50QnVzRW50aXR5KSB7XHJcbiAgICAgICAgICAgIEV2ZW50VXRpbC5zZXRGcm1FdmVudCh0aGlzLmZlYiB8fCBuZXcgRnJtRXZlbnRCdXMoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRJbml0aWFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgZXZlbnRGaXJlKHRva2VuOiBzdHJpbmcsIGFyZ3M6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGZlYiA9IEV2ZW50VXRpbC5nZXRGcm1FdmVudCgpO1xyXG4gICAgICAgIGlmICghZmViIHx8IHR5cGVvZiBmZWIucG9zdCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZlYi5wb3N0KHRva2VuLCBhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXZlbnRMaXN0bmVyKHRva2VuOiBzdHJpbmcsIGhhbmRsZXI6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBvcHRpb25zPzogQXBwT3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IGZlYiA9IEV2ZW50VXRpbC5nZXRGcm1FdmVudCgpO1xyXG4gICAgICAgIGlmICghZmViIHx8IHR5cGVvZiBmZWIub24gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDoj5zljZXnm5HlkKzogIXlv4XpobvopoHlo7DmmI7oh6rlt7HnmoTouqvku73vvIzmlrnkvr/moYbmnrbnrqHnkIZcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFwcFR5cGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLmFwcFR5cGUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBcHBUeXBlLkFwcDpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcHBPYmtleSA9IEV2ZW50VXRpbC5hcHBPYnNUb2tlbihvcHRpb25zLmFwcElkLCBvcHRpb25zLmFwcEVudHJhbmNlLCBvcHRpb25zLnRhYklkKTtcclxuICAgICAgICAgICAgICAgICAgICBmZWIub25XaXRoT2JrZXkodG9rZW4sIGFwcE9ia2V5LCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFwcFR5cGUuTWVudTpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmdW5jT2JrZXkgPSBFdmVudFV0aWwuZnVuY09ic1Rva2VuKG9wdGlvbnMuZnVuY0lkLCBvcHRpb25zLnRhYklkKTtcclxuICAgICAgICAgICAgICAgICAgICBmZWIub25XaXRoT2JrZXkodG9rZW4sIGZ1bmNPYmtleSwgaGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZmViLm9uKHRva2VuLCBoYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV2ZW50SW5pdGlhbCgpIHtcclxuICAgICAgICBjb25zdCBmZWIgPSBFdmVudFV0aWwuZ2V0RnJtRXZlbnQoKTtcclxuICAgICAgICBpZiAoIWZlYiB8fCB0eXBlb2YgZmViLnBvc3QgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmZWIucG9zdCh0aGlzLkZhcnJpc0FwcHMsIG51bGwpO1xyXG4gICAgICAgIGZlYi5wb3N0KHRoaXMuRmFycmlzQXBwQ2xpY2ssIG51bGwpO1xyXG4gICAgICAgIGZlYi5wb3N0KHRoaXMuQWxsR3NwRnVuY3MsIG51bGwpO1xyXG4gICAgICAgIGZlYi5pbml0aWFsUGlwZSh0aGlzLkZ1bmNDbG9zZWQsIG5ldyBTdWJqZWN0PGFueT4oKSk7XHJcbiAgICAgICAgZmViLmluaXRpYWxQaXBlKHRoaXMuRnVuY1N3aXRjaCwgbmV3IFN1YmplY3Q8YW55PigpKTtcclxuICAgICAgICBmZWIuaW5pdGlhbFBpcGUodGhpcy5CZWZvcmVGdW5jQ2xvc2UsIG5ldyBTdWJqZWN0PGFueT4oKSk7XHJcbiAgICAgICAgZmViLmluaXRpYWxQaXBlKHRoaXMuQWZ0ZXJGcmFtZUxvYWQsIG5ldyBTdWJqZWN0PGFueT4oKSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==