/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FrameworkVariableService } from '../frmVariableService/framework-variable.service';
import { EventBusPipe } from '../../eventbus/frm-eventpipe';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var BroadcastingStationService = /** @class */ (function () {
    function BroadcastingStationService() {
        this.frmSubject = 'frmBroadcast-subjects';
        this.frmVariableService = new FrameworkVariableService();
        this.subjectMaps = this.frmVariableService.getFrmVariableByKey(this.frmSubject) || new Map();
    }
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param subjectCode 主题编码，建议有明确含义，方便确认当前主题的职责
     * code不是唯一标识，即使相同code每次注册都会生成一个新的主题，返回值token是唯一标识
     * @param options 主题注册操作，可以直接对于菜单 或 应用注册主题
     * @param customSub 自定义主题，如果为null或者不传，默认为Subject
     */
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，建议有明确含义，方便确认当前主题的职责
     * code不是唯一标识，即使相同code每次注册都会生成一个新的主题，返回值token是唯一标识
     * @param {?} options 主题注册操作，可以直接对于菜单 或 应用注册主题
     * @param {?=} customSub 自定义主题，如果为null或者不传，默认为Subject
     * @return {?}
     */
    BroadcastingStationService.prototype.subjectRegister = /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，建议有明确含义，方便确认当前主题的职责
     * code不是唯一标识，即使相同code每次注册都会生成一个新的主题，返回值token是唯一标识
     * @param {?} options 主题注册操作，可以直接对于菜单 或 应用注册主题
     * @param {?=} customSub 自定义主题，如果为null或者不传，默认为Subject
     * @return {?}
     */
    function (subjectCode, options, customSub) {
        if (!customSub) {
            customSub = new Subject();
        }
        /** @type {?} */
        var token;
        if (options && options.funcId) {
            token = options.funcId;
        }
        else if (options && options.appId && options.appEntrance) {
            token = options.appId + "-" + options.appEntrance;
        }
        else {
            token = this.createToken();
        }
        /** @type {?} */
        var pipe = new EventBusPipe(token, null, customSub);
        pipe.pipeCode = subjectCode;
        this.subjectMaps.set(token, pipe);
        this.frmVariableService.frameworkVariableReg(this.frmSubject, this.subjectMaps);
        return token;
    };
    /**
     * 注册主题，可直接获取主题实体，
     * 框架不托管维护，常用于适配层上事件扩展机制
     * @param options 注册参数
     * @param customSub 是否自定义主题
     */
    /**
     * 注册主题，可直接获取主题实体，
     * 框架不托管维护，常用于适配层上事件扩展机制
     * @param {?} options 注册参数
     * @param {?=} customSub 是否自定义主题
     * @return {?}
     */
    BroadcastingStationService.prototype.customSubjectRegister = /**
     * 注册主题，可直接获取主题实体，
     * 框架不托管维护，常用于适配层上事件扩展机制
     * @param {?} options 注册参数
     * @param {?=} customSub 是否自定义主题
     * @return {?}
     */
    function (options, customSub) {
        /** @type {?} */
        var subMap = new Map();
        if (!customSub) {
            customSub = new Subject();
        }
        /** @type {?} */
        var token;
        if (options && options.customToken) {
            token = options.customToken;
        }
        else if (options && options.funcId) {
            token = options.funcId;
        }
        else if (options && options.appId && options.appEntrance) {
            token = options.appId + "-" + options.appEntrance;
        }
        else {
            token = this.createToken();
        }
        /** @type {?} */
        var pipe = new EventBusPipe(token, null, customSub);
        subMap.set(token, pipe);
        return subMap;
    };
    /**
     * 删除主题
     * @param subjectToken 主题唯一标识
     */
    /**
     * 删除主题
     * @param {?} subjectToken 主题唯一标识
     * @return {?}
     */
    BroadcastingStationService.prototype.subjectRemove = /**
     * 删除主题
     * @param {?} subjectToken 主题唯一标识
     * @return {?}
     */
    function (subjectToken) {
        this.subjectMaps.delete(subjectToken);
        this.frmVariableService.frameworkVariableReg(this.frmSubject, this.subjectMaps);
    };
    /**
     * 通过某个主题发送消息
     * @param subjectToken 主题唯一的token标识
     * @param info 要发送的消息
     */
    /**
     * 通过某个主题发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} info 要发送的消息
     * @return {?}
     */
    BroadcastingStationService.prototype.notify = /**
     * 通过某个主题发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} info 要发送的消息
     * @return {?}
     */
    function (subjectToken, info) {
        /** @type {?} */
        var sub = this.getSubject(subjectToken);
        if (!sub) {
            return;
        }
        sub.post(info);
    };
    /**
     * 为主题添加观察者，并监听主题消息
     * @param subjectToken 主题token
     * @param observerToken 当前监听主题的观察者唯一标识token
     * @param handler 观察者监听到主题消息时要执行的动作
     */
    /**
     * 为主题添加观察者，并监听主题消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token
     * @param {?} handler 观察者监听到主题消息时要执行的动作
     * @return {?}
     */
    BroadcastingStationService.prototype.response = /**
     * 为主题添加观察者，并监听主题消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token
     * @param {?} handler 观察者监听到主题消息时要执行的动作
     * @return {?}
     */
    function (subjectToken, observerToken, handler) {
        /** @type {?} */
        var sub = this.getSubject(subjectToken);
        if (!sub) {
            return;
        }
        sub.subscribeWithObkey(observerToken, handler);
    };
    /**
     * 观察者取消对主题的订阅
     * @param subjectToken 主题唯一标识
     * @param observerToken 观察者唯一标识
     */
    /**
     * 观察者取消对主题的订阅
     * @param {?} subjectToken 主题唯一标识
     * @param {?} observerToken 观察者唯一标识
     * @return {?}
     */
    BroadcastingStationService.prototype.responseUnSubscribe = /**
     * 观察者取消对主题的订阅
     * @param {?} subjectToken 主题唯一标识
     * @param {?} observerToken 观察者唯一标识
     * @return {?}
     */
    function (subjectToken, observerToken) {
        /** @type {?} */
        var sub = this.getSubject(subjectToken);
        if (!sub) {
            return;
        }
        sub.unSubscribeWithObkey(observerToken);
    };
    /**
     * @private
     * @param {?} subjectToken
     * @return {?}
     */
    BroadcastingStationService.prototype.getSubject = /**
     * @private
     * @param {?} subjectToken
     * @return {?}
     */
    function (subjectToken) {
        return this.subjectMaps.get(subjectToken);
    };
    /**
     * 创建唯一token
     */
    /**
     * 创建唯一token
     * @private
     * @return {?}
     */
    BroadcastingStationService.prototype.createToken = /**
     * 创建唯一token
     * @private
     * @return {?}
     */
    function () {
        // tslint:disable-next-line: only-arrow-functions
        /** @type {?} */
        var S4 = (/**
         * @return {?}
         */
        function () {
            // tslint:disable-next-line:no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        });
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    };
    BroadcastingStationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BroadcastingStationService.ctorParameters = function () { return []; };
    /** @nocollapse */ BroadcastingStationService.ngInjectableDef = i0.defineInjectable({ factory: function BroadcastingStationService_Factory() { return new BroadcastingStationService(); }, token: BroadcastingStationService, providedIn: "root" });
    return BroadcastingStationService;
}());
export { BroadcastingStationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BroadcastingStationService.prototype.subjectMaps;
    /**
     * @type {?}
     * @private
     */
    BroadcastingStationService.prototype.frmVariableService;
    /**
     * @type {?}
     * @private
     */
    BroadcastingStationService.prototype.frmSubject;
}
//# sourceMappingURL=data:application/json;base64,