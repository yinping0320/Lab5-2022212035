/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService, LanguageService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { FrameworkVariableService } from '../frmVariableService/framework-variable.service';
/**
 * @record
 */
export function I18nSettingEntity() { }
if (false) {
    /** @type {?|undefined} */
    I18nSettingEntity.prototype.i18nSetting;
    /** @type {?|undefined} */
    I18nSettingEntity.prototype.languages;
    /** @type {?|undefined} */
    I18nSettingEntity.prototype.currentLanCode;
}
var FrmI18nSettingService = /** @class */ (function () {
    function FrmI18nSettingService(frmVariable, lanService, http) {
        this.frmVariable = frmVariable;
        this.lanService = lanService;
        this.http = http;
        this.variableKey = 'frm-i18nSetting';
    }
    /**
     * @return {?}
     */
    FrmI18nSettingService.prototype.getSetting = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var temp = this.frmVariable.getFrmVariableByKey(this.variableKey);
        return this.deepClone(temp);
    };
    /**
     * @return {?}
     */
    FrmI18nSettingService.prototype.getSetting$ = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var temp = this.frmVariable.getFrmVariableByKey(this.variableKey);
        return !temp ? this.loadSetting$() : of(this.deepClone(temp));
    };
    /**
     * @return {?}
     */
    FrmI18nSettingService.prototype.loadSetting$ = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var rtfService = ((/** @type {?} */ (window))).gspframeworkService && ((/** @type {?} */ (window))).gspframeworkService.rtf;
        /** @type {?} */
        var entity = {};
        if (!!rtfService && !!rtfService.language) {
            try {
                /** @type {?} */
                var lanService = rtfService.language;
                lanService.i18nSetting((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    entity.i18nSetting = res;
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    console.log(err);
                }));
                lanService.allLanguages((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    entity.languages = res;
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    console.log(err);
                }));
                entity.currentLanCode = lanService.getLanguageCode();
                this.frmVariable.frameworkVariableReg(this.variableKey, entity);
                return of(entity);
            }
            catch (e) {
                console.log(e);
                return of(null);
            }
        }
        else {
            /** @type {?} */
            var languagesUrl = '/api/runtime/sys/v1.0/i18n/languageservice/getalllanguages';
            /** @type {?} */
            var settingUrl_1 = '/api/runtime/sys/v1.0/i18n/i18nusersetting/setting';
            entity.currentLanCode = this.lanService.getLanguageCode();
            return this.http.get(languagesUrl).pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return entity.languages = res; })), switchMap((/**
             * @return {?}
             */
            function () { return _this.http.get(settingUrl_1); })), map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                entity.i18nSetting = res;
                _this.frmVariable.frameworkVariableReg(_this.variableKey, entity);
                return entity;
            })), catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.log(err);
                return of(null);
            })));
        }
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    FrmI18nSettingService.prototype.deepClone = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        /** @type {?} */
        var result;
        if (typeof target === 'object') {
            if (Array.isArray(target)) {
                result = [];
                for (var i in target) {
                    result.push(this.deepClone(target[i]));
                }
            }
            else if (target === null) {
                result = null;
            }
            else if (target.constructor === RegExp) {
                result = target;
            }
            else {
                result = {};
                for (var i in target) {
                    result[i] = this.deepClone(target[i]);
                }
            }
        }
        else {
            result = target;
        }
        return result;
    };
    FrmI18nSettingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrmI18nSettingService.ctorParameters = function () { return [
        { type: FrameworkVariableService },
        { type: LanguageService },
        { type: HttpService }
    ]; };
    return FrmI18nSettingService;
}());
export { FrmI18nSettingService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.variableKey;
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.frmVariable;
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.lanService;
    /**
     * @type {?}
     * @private
     */
    FrmI18nSettingService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi1zZXR0aW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9ydGYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2kxOG5TZXJ2aWNlL2kxOG4tc2V0dGluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQzs7OztBQUU1Rix1Q0FJQzs7O0lBSEcsd0NBQWtCOztJQUNsQixzQ0FBZ0I7O0lBQ2hCLDJDQUF3Qjs7QUFHNUI7SUFJSSwrQkFDWSxXQUFxQyxFQUNyQyxVQUEyQixFQUMzQixJQUFpQjtRQUZqQixnQkFBVyxHQUFYLFdBQVcsQ0FBMEI7UUFDckMsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDM0IsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUpyQixnQkFBVyxHQUFHLGlCQUFpQixDQUFDO0lBTXhDLENBQUM7Ozs7SUFFTSwwQ0FBVTs7O0lBQWpCOztZQUNVLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDbkUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFTSwyQ0FBVzs7O0lBQWxCOztZQUNVLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDbkUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Ozs7SUFFTSw0Q0FBWTs7O0lBQW5CO1FBQUEsaUJBdURDOztZQXREUyxVQUFVLEdBQUcsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLG1CQUFtQixJQUFJLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHOztZQUMzRixNQUFNLEdBQXNCLEVBQUU7UUFDcEMsSUFBSSxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQ3ZDLElBQUk7O29CQUNNLFVBQVUsR0FBRyxVQUFVLENBQUMsUUFBUTtnQkFDdEMsVUFBVSxDQUFDLFdBQVc7Ozs7Z0JBQ2xCLFVBQUEsR0FBRztvQkFDQyxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztnQkFDN0IsQ0FBQzs7OztnQkFDRCxVQUFBLEdBQUc7b0JBQ0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckIsQ0FBQyxFQUNKLENBQUM7Z0JBQ0YsVUFBVSxDQUFDLFlBQVk7Ozs7Z0JBQ25CLFVBQUEsR0FBRztvQkFDQyxNQUFNLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztnQkFDM0IsQ0FBQzs7OztnQkFDRCxVQUFBLEdBQUc7b0JBQ0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckIsQ0FBQyxFQUNKLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDaEUsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckI7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDUixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNmLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25CO1NBQ0o7YUFBTTs7Z0JBQ0csWUFBWSxHQUFHLDREQUE0RDs7Z0JBQzNFLFlBQVUsR0FBRyxvREFBb0Q7WUFDdkUsTUFBTSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNuQyxHQUFHOzs7O1lBQ0MsVUFBQyxHQUFHLElBQUssT0FBQSxNQUFNLENBQUMsU0FBUyxHQUFHLEdBQUcsRUFBdEIsQ0FBc0IsRUFDbEMsRUFDRCxTQUFTOzs7WUFDTCxjQUFNLE9BQUEsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBVSxDQUFDLEVBQXpCLENBQXlCLEVBQ2xDLEVBQ0QsR0FBRzs7OztZQUNDLFVBQUMsR0FBRztnQkFDQSxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztnQkFDekIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNoRSxPQUFPLE1BQU0sQ0FBQztZQUNsQixDQUFDLEVBQ0osRUFDRCxVQUFVOzs7O1lBQ04sVUFBQyxHQUFzQjtnQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxFQUNKLENBQ0osQ0FBQztTQUNMO0lBQ0wsQ0FBQzs7Ozs7O0lBR08seUNBQVM7Ozs7O0lBQWpCLFVBQWtCLE1BQVc7O1lBQ3JCLE1BQU07UUFDVixJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM1QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3ZCLE1BQU0sR0FBRyxFQUFFLENBQUM7Z0JBQ1osS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUU7b0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUN6QzthQUNKO2lCQUFNLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDeEIsTUFBTSxHQUFHLElBQUksQ0FBQzthQUNqQjtpQkFBTSxJQUFJLE1BQU0sQ0FBQyxXQUFXLEtBQUssTUFBTSxFQUFFO2dCQUN0QyxNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQ25CO2lCQUFNO2dCQUNILE1BQU0sR0FBRyxFQUFFLENBQUM7Z0JBQ1osS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUU7b0JBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN6QzthQUNKO1NBQ0o7YUFBTTtZQUNILE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDbkI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOztnQkFyR0osVUFBVTs7OztnQkFSRix3QkFBd0I7Z0JBSFgsZUFBZTtnQkFBNUIsV0FBVzs7SUFrSHBCLDRCQUFDO0NBQUEsQUF2R0QsSUF1R0M7U0F0R1kscUJBQXFCOzs7Ozs7SUFFOUIsNENBQXdDOzs7OztJQUVwQyw0Q0FBNkM7Ozs7O0lBQzdDLDJDQUFtQzs7Ozs7SUFDbkMscUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UsIExhbmd1YWdlU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRnJhbWV3b3JrVmFyaWFibGVTZXJ2aWNlIH0gZnJvbSAnLi4vZnJtVmFyaWFibGVTZXJ2aWNlL2ZyYW1ld29yay12YXJpYWJsZS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSTE4blNldHRpbmdFbnRpdHkge1xyXG4gICAgaTE4blNldHRpbmc/OiBhbnk7XHJcbiAgICBsYW5ndWFnZXM/OiBhbnk7XHJcbiAgICBjdXJyZW50TGFuQ29kZT86IHN0cmluZztcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRnJtSTE4blNldHRpbmdTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIHZhcmlhYmxlS2V5ID0gJ2ZybS1pMThuU2V0dGluZyc7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGZybVZhcmlhYmxlOiBGcmFtZXdvcmtWYXJpYWJsZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBsYW5TZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFNldHRpbmcoKTogYW55IHtcclxuICAgICAgICBjb25zdCB0ZW1wID0gdGhpcy5mcm1WYXJpYWJsZS5nZXRGcm1WYXJpYWJsZUJ5S2V5KHRoaXMudmFyaWFibGVLZXkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZXBDbG9uZSh0ZW1wKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2V0dGluZyQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB0ZW1wID0gdGhpcy5mcm1WYXJpYWJsZS5nZXRGcm1WYXJpYWJsZUJ5S2V5KHRoaXMudmFyaWFibGVLZXkpO1xyXG4gICAgICAgIHJldHVybiAhdGVtcCA/IHRoaXMubG9hZFNldHRpbmckKCkgOiBvZih0aGlzLmRlZXBDbG9uZSh0ZW1wKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvYWRTZXR0aW5nJCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHJ0ZlNlcnZpY2UgPSAod2luZG93IGFzIGFueSkuZ3NwZnJhbWV3b3JrU2VydmljZSAmJiAod2luZG93IGFzIGFueSkuZ3NwZnJhbWV3b3JrU2VydmljZS5ydGY7XHJcbiAgICAgICAgY29uc3QgZW50aXR5OiBJMThuU2V0dGluZ0VudGl0eSA9IHt9O1xyXG4gICAgICAgIGlmICghIXJ0ZlNlcnZpY2UgJiYgISFydGZTZXJ2aWNlLmxhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYW5TZXJ2aWNlID0gcnRmU2VydmljZS5sYW5ndWFnZTtcclxuICAgICAgICAgICAgICAgIGxhblNlcnZpY2UuaTE4blNldHRpbmcoXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5LmkxOG5TZXR0aW5nID0gcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgbGFuU2VydmljZS5hbGxMYW5ndWFnZXMoXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5Lmxhbmd1YWdlcyA9IHJlcztcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGVudGl0eS5jdXJyZW50TGFuQ29kZSA9IGxhblNlcnZpY2UuZ2V0TGFuZ3VhZ2VDb2RlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZybVZhcmlhYmxlLmZyYW1ld29ya1ZhcmlhYmxlUmVnKHRoaXMudmFyaWFibGVLZXksIGVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YoZW50aXR5KTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBsYW5ndWFnZXNVcmwgPSAnL2FwaS9ydW50aW1lL3N5cy92MS4wL2kxOG4vbGFuZ3VhZ2VzZXJ2aWNlL2dldGFsbGxhbmd1YWdlcyc7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdVcmwgPSAnL2FwaS9ydW50aW1lL3N5cy92MS4wL2kxOG4vaTE4bnVzZXJzZXR0aW5nL3NldHRpbmcnO1xyXG4gICAgICAgICAgICBlbnRpdHkuY3VycmVudExhbkNvZGUgPSB0aGlzLmxhblNlcnZpY2UuZ2V0TGFuZ3VhZ2VDb2RlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGxhbmd1YWdlc1VybCkucGlwZShcclxuICAgICAgICAgICAgICAgIG1hcChcclxuICAgICAgICAgICAgICAgICAgICAocmVzKSA9PiBlbnRpdHkubGFuZ3VhZ2VzID0gcmVzXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHRoaXMuaHR0cC5nZXQoc2V0dGluZ1VybClcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICBtYXAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkuaTE4blNldHRpbmcgPSByZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZnJtVmFyaWFibGUuZnJhbWV3b3JrVmFyaWFibGVSZWcodGhpcy52YXJpYWJsZUtleSwgZW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAoZXJyOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBkZWVwQ2xvbmUodGFyZ2V0OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmRlZXBDbG9uZSh0YXJnZXRbaV0pKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuY29uc3RydWN0b3IgPT09IFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpIGluIHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHRoaXMuZGVlcENsb25lKHRhcmdldFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==