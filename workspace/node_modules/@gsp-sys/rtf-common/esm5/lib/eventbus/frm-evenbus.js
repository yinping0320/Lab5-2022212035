/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { EventBusPipe } from './frm-eventpipe';
var FrmEventBus = /** @class */ (function () {
    function FrmEventBus() {
        this.eventMap = new Map();
    }
    // 发送事件，通知订阅者接收消息。
    // 发送事件，通知订阅者接收消息。
    /**
     * @param {?} tokenValue
     * @param {?} eventArgs
     * @return {?}
     */
    FrmEventBus.prototype.post = 
    // 发送事件，通知订阅者接收消息。
    /**
     * @param {?} tokenValue
     * @param {?} eventArgs
     * @return {?}
     */
    function (tokenValue, eventArgs) {
        var e_1, _a;
        /** @type {?} */
        var eventPipeList = this.eventMap.get(tokenValue);
        if (!eventPipeList) {
            eventPipeList = new Array();
            this.eventMap.set(tokenValue, eventPipeList);
        }
        /** @type {?} */
        var eventPipe = eventPipeList.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.examByTargetToken(tokenValue); }));
        if (!eventPipe) {
            eventPipe = new EventBusPipe(tokenValue, eventPipeList, null);
        }
        try {
            for (var eventPipeList_1 = tslib_1.__values(eventPipeList), eventPipeList_1_1 = eventPipeList_1.next(); !eventPipeList_1_1.done; eventPipeList_1_1 = eventPipeList_1.next()) {
                var eventPipeDetail = eventPipeList_1_1.value;
                if (eventPipeDetail.matchEmitterToken(tokenValue)) {
                    eventPipeDetail.post(eventArgs);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (eventPipeList_1_1 && !eventPipeList_1_1.done && (_a = eventPipeList_1.return)) _a.call(eventPipeList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} token
     * @param {?} sub
     * @return {?}
     */
    FrmEventBus.prototype.initialPipe = /**
     * @param {?} token
     * @param {?} sub
     * @return {?}
     */
    function (token, sub) {
        /** @type {?} */
        var pipes = this.eventMap.get(token);
        if (!pipes) {
            pipes = new Array();
            this.eventMap.set(token, pipes);
        }
        /** @type {?} */
        var eventPipe = pipes.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.examByTargetToken(token); }));
        if (!eventPipe) {
            eventPipe = new EventBusPipe(token, pipes, sub);
        }
    };
    // 订阅事件
    // 订阅事件
    /**
     * @param {?} tokenValue
     * @param {?} handler
     * @return {?}
     */
    FrmEventBus.prototype.on = 
    // 订阅事件
    /**
     * @param {?} tokenValue
     * @param {?} handler
     * @return {?}
     */
    function (tokenValue, handler) {
        /** @type {?} */
        var pipe = this.getEventPipe(tokenValue);
        if (pipe) {
            return pipe.subscribe(handler);
        }
    };
    /** 订阅事件，并记录订阅者唯一标识 */
    /**
     * 订阅事件，并记录订阅者唯一标识
     * @param {?} tokenValue
     * @param {?} observerKey
     * @param {?} handler
     * @return {?}
     */
    FrmEventBus.prototype.onWithObkey = /**
     * 订阅事件，并记录订阅者唯一标识
     * @param {?} tokenValue
     * @param {?} observerKey
     * @param {?} handler
     * @return {?}
     */
    function (tokenValue, observerKey, handler) {
        /** @type {?} */
        var pipe = this.getEventPipe(tokenValue);
        if (pipe) {
            return pipe.subscribeWithObkey(observerKey, handler);
        }
    };
    // 订阅一次。接收到一次消息之后自动取消订阅
    // 订阅一次。接收到一次消息之后自动取消订阅
    /**
     * @param {?} tokenValue
     * @param {?} handler
     * @return {?}
     */
    FrmEventBus.prototype.once = 
    // 订阅一次。接收到一次消息之后自动取消订阅
    /**
     * @param {?} tokenValue
     * @param {?} handler
     * @return {?}
     */
    function (tokenValue, handler) {
        /** @type {?} */
        var pipe = this.getEventPipe(tokenValue);
        if (pipe) {
            /** @type {?} */
            var res = pipe.subscribeOnce(handler);
            this.eventMap.delete(tokenValue);
            return res;
        }
    };
    /**
     * @param {?} tokenValue
     * @return {?}
     */
    FrmEventBus.prototype.unSubscribe = /**
     * @param {?} tokenValue
     * @return {?}
     */
    function (tokenValue) {
        /** @type {?} */
        var pipe = this.getEventPipe(tokenValue);
        if (pipe) {
            pipe.unSubscribe();
        }
    };
    /**
     * @private
     * @param {?} tokenValue
     * @return {?}
     */
    FrmEventBus.prototype.getEventPipe = /**
     * @private
     * @param {?} tokenValue
     * @return {?}
     */
    function (tokenValue) {
        /** @type {?} */
        var eventPipeList = this.eventMap.get(tokenValue);
        if (!eventPipeList) {
            return null;
        }
        /** @type {?} */
        var eventPipe = eventPipeList.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.examByTargetToken(tokenValue); }));
        return eventPipe;
    };
    FrmEventBus.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrmEventBus.ctorParameters = function () { return []; };
    return FrmEventBus;
}());
export { FrmEventBus };
if (false) {
    /** @type {?} */
    FrmEventBus.prototype.eventMap;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJtLWV2ZW5idXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9ydGYtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2V2ZW50YnVzL2ZybS1ldmVuYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHL0M7SUFLSTtRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQStCLENBQUM7SUFDM0QsQ0FBQztJQUdELGtCQUFrQjs7Ozs7OztJQUNsQiwwQkFBSTs7Ozs7OztJQUFKLFVBQUssVUFBa0IsRUFBRSxTQUFjOzs7WUFDL0IsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNqRCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2hCLGFBQWEsR0FBRyxJQUFJLEtBQUssRUFBZ0IsQ0FBQztZQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDaEQ7O1lBQ0csU0FBUyxHQUFHLGFBQWEsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQWxDLENBQWtDLEVBQUM7UUFDOUUsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxVQUFVLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2pFOztZQUNELEtBQThCLElBQUEsa0JBQUEsaUJBQUEsYUFBYSxDQUFBLDRDQUFBLHVFQUFFO2dCQUF4QyxJQUFNLGVBQWUsMEJBQUE7Z0JBQ3RCLElBQUksZUFBZSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUMvQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUNuQzthQUNKOzs7Ozs7Ozs7SUFDTCxDQUFDOzs7Ozs7SUFFRCxpQ0FBVzs7Ozs7SUFBWCxVQUFZLEtBQWEsRUFBRSxHQUFpQjs7WUFDcEMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFnQixDQUFDO1lBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNuQzs7WUFDRyxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBN0IsQ0FBNkIsRUFBQztRQUNqRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osU0FBUyxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0lBRUQsT0FBTzs7Ozs7OztJQUNQLHdCQUFFOzs7Ozs7O0lBQUYsVUFBRyxVQUFrQixFQUFFLE9BQTZCOztZQUMxQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDMUMsSUFBSSxJQUFJLEVBQUU7WUFDTixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDbEM7SUFDTCxDQUFDO0lBRUQsc0JBQXNCOzs7Ozs7OztJQUN0QixpQ0FBVzs7Ozs7OztJQUFYLFVBQVksVUFBa0IsRUFBRSxXQUFtQixFQUFFLE9BQTZCOztZQUN4RSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDMUMsSUFBSSxJQUFJLEVBQUU7WUFDTixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDeEQ7SUFDTCxDQUFDO0lBRUQsdUJBQXVCOzs7Ozs7O0lBQ3ZCLDBCQUFJOzs7Ozs7O0lBQUosVUFBSyxVQUFrQixFQUFFLE9BQTZCOztZQUM1QyxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDMUMsSUFBSSxJQUFJLEVBQUU7O2dCQUNBLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNqQyxPQUFPLEdBQUcsQ0FBQztTQUNkO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxpQ0FBVzs7OztJQUFYLFVBQVksVUFBa0I7O1lBQ3BCLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUMxQyxJQUFJLElBQUksRUFBRTtZQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtJQUNMLENBQUM7Ozs7OztJQUVPLGtDQUFZOzs7OztJQUFwQixVQUFxQixVQUFrQjs7WUFDN0IsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0ssU0FBUyxHQUFHLGFBQWEsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQWxDLENBQWtDLEVBQUM7UUFDaEYsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7Z0JBaEZKLFVBQVU7Ozs7SUFpRlgsa0JBQUM7Q0FBQSxBQWpGRCxJQWlGQztTQWhGWSxXQUFXOzs7SUFFcEIsK0JBQWtEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSwgSUVtaXRhYmxlIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IEV2ZW50QnVzUGlwZSB9IGZyb20gJy4vZnJtLWV2ZW50cGlwZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZybUV2ZW50QnVzIGltcGxlbWVudHMgSUVtaXRhYmxlIHtcclxuXHJcbiAgICBwdWJsaWMgZXZlbnRNYXA6IE1hcDxzdHJpbmcsIEFycmF5PEV2ZW50QnVzUGlwZT4+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRNYXAgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8RXZlbnRCdXNQaXBlPj4oKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g5Y+R6YCB5LqL5Lu277yM6YCa55+l6K6i6ZiF6ICF5o6l5pS25raI5oGv44CCXHJcbiAgICBwb3N0KHRva2VuVmFsdWU6IHN0cmluZywgZXZlbnRBcmdzOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBsZXQgZXZlbnRQaXBlTGlzdCA9IHRoaXMuZXZlbnRNYXAuZ2V0KHRva2VuVmFsdWUpO1xyXG4gICAgICAgIGlmICghZXZlbnRQaXBlTGlzdCkge1xyXG4gICAgICAgICAgICBldmVudFBpcGVMaXN0ID0gbmV3IEFycmF5PEV2ZW50QnVzUGlwZT4oKTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudE1hcC5zZXQodG9rZW5WYWx1ZSwgZXZlbnRQaXBlTGlzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBldmVudFBpcGUgPSBldmVudFBpcGVMaXN0LmZpbmQoaXRlbSA9PiBpdGVtLmV4YW1CeVRhcmdldFRva2VuKHRva2VuVmFsdWUpKTtcclxuICAgICAgICBpZiAoIWV2ZW50UGlwZSkge1xyXG4gICAgICAgICAgICBldmVudFBpcGUgPSBuZXcgRXZlbnRCdXNQaXBlKHRva2VuVmFsdWUsIGV2ZW50UGlwZUxpc3QsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50UGlwZURldGFpbCBvZiBldmVudFBpcGVMaXN0KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudFBpcGVEZXRhaWwubWF0Y2hFbWl0dGVyVG9rZW4odG9rZW5WYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50UGlwZURldGFpbC5wb3N0KGV2ZW50QXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbFBpcGUodG9rZW46IHN0cmluZywgc3ViOiBTdWJqZWN0PGFueT4pIHtcclxuICAgICAgICBsZXQgcGlwZXMgPSB0aGlzLmV2ZW50TWFwLmdldCh0b2tlbik7XHJcbiAgICAgICAgaWYgKCFwaXBlcykge1xyXG4gICAgICAgICAgICBwaXBlcyA9IG5ldyBBcnJheTxFdmVudEJ1c1BpcGU+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRNYXAuc2V0KHRva2VuLCBwaXBlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBldmVudFBpcGUgPSBwaXBlcy5maW5kKGl0ZW0gPT4gaXRlbS5leGFtQnlUYXJnZXRUb2tlbih0b2tlbikpO1xyXG4gICAgICAgIGlmICghZXZlbnRQaXBlKSB7XHJcbiAgICAgICAgICAgIGV2ZW50UGlwZSA9IG5ldyBFdmVudEJ1c1BpcGUodG9rZW4sIHBpcGVzLCBzdWIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDorqLpmIXkuovku7ZcclxuICAgIG9uKHRva2VuVmFsdWU6IHN0cmluZywgaGFuZGxlcjogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiBJRGlzcG9zYWJsZSB7XHJcbiAgICAgICAgY29uc3QgcGlwZSA9IHRoaXMuZ2V0RXZlbnRQaXBlKHRva2VuVmFsdWUpO1xyXG4gICAgICAgIGlmIChwaXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwaXBlLnN1YnNjcmliZShoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiuoumYheS6i+S7tu+8jOW5tuiusOW9leiuoumYheiAheWUr+S4gOagh+ivhiAqL1xyXG4gICAgb25XaXRoT2JrZXkodG9rZW5WYWx1ZTogc3RyaW5nLCBvYnNlcnZlcktleTogc3RyaW5nLCBoYW5kbGVyOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IElEaXNwb3NhYmxlIHtcclxuICAgICAgICBjb25zdCBwaXBlID0gdGhpcy5nZXRFdmVudFBpcGUodG9rZW5WYWx1ZSk7XHJcbiAgICAgICAgaWYgKHBpcGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBpcGUuc3Vic2NyaWJlV2l0aE9ia2V5KG9ic2VydmVyS2V5LCBoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6K6i6ZiF5LiA5qyh44CC5o6l5pS25Yiw5LiA5qyh5raI5oGv5LmL5ZCO6Ieq5Yqo5Y+W5raI6K6i6ZiFXHJcbiAgICBvbmNlKHRva2VuVmFsdWU6IHN0cmluZywgaGFuZGxlcjogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiBJRGlzcG9zYWJsZSB7XHJcbiAgICAgICAgY29uc3QgcGlwZSA9IHRoaXMuZ2V0RXZlbnRQaXBlKHRva2VuVmFsdWUpO1xyXG4gICAgICAgIGlmIChwaXBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHBpcGUuc3Vic2NyaWJlT25jZShoYW5kbGVyKTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudE1hcC5kZWxldGUodG9rZW5WYWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVuU3Vic2NyaWJlKHRva2VuVmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHBpcGUgPSB0aGlzLmdldEV2ZW50UGlwZSh0b2tlblZhbHVlKTtcclxuICAgICAgICBpZiAocGlwZSkge1xyXG4gICAgICAgICAgICBwaXBlLnVuU3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0RXZlbnRQaXBlKHRva2VuVmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50UGlwZUxpc3QgPSB0aGlzLmV2ZW50TWFwLmdldCh0b2tlblZhbHVlKTtcclxuICAgICAgICBpZiAoIWV2ZW50UGlwZUxpc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGV2ZW50UGlwZSA9IGV2ZW50UGlwZUxpc3QuZmluZChpdGVtID0+IGl0ZW0uZXhhbUJ5VGFyZ2V0VG9rZW4odG9rZW5WYWx1ZSkpO1xyXG4gICAgICAgIHJldHVybiBldmVudFBpcGU7XHJcbiAgICB9XHJcbn1cclxuIl19