import { Subscription, Subject } from 'rxjs';
import { IDisposable } from './types';
export declare class EventBusPipe implements IDisposable {
    private tokenValue;
    private parentEventPipeList;
    eventSubject: Subject<any>;
    observers: Map<string, Subscription>;
    pipeCode: string;
    private subscription;
    private onceSubscription;
    constructor(tokenValue: string, parentEventPipeList: Array<EventBusPipe>, sub: Subject<any>);
    post(bizPara: any): void;
    subscribe(eventHandler: (value: any) => void): IDisposable;
    subscribeWithObkey(observerKey: string, eventHandler: (value: any) => void): IDisposable;
    subscribeOnce(eventHandler: (value: any) => void): IDisposable;
    unSubscribe(): void;
    unSubscribeForOnce(): void;
    /**
     * 取消某观察者的订阅
     * @param observerKey 观察者唯一标识
     */
    unSubscribeWithObkey(observerKey: string): void;
    matchEmitterToken(tokenValue: string): boolean;
    examByTargetToken(tokenValue: string): boolean;
    dispose(subscriber: Subscription): void;
}
