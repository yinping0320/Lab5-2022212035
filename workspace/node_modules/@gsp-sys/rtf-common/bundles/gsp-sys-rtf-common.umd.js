(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ecp-caf/caf-common'), require('rxjs/operators'), require('@angular/router'), require('rxjs'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@gsp-sys/rtf-common', ['exports', '@ecp-caf/caf-common', 'rxjs/operators', '@angular/router', 'rxjs', '@angular/core', '@angular/common'], factory) :
    (factory((global['gsp-sys'] = global['gsp-sys'] || {}, global['gsp-sys']['rtf-common'] = {}),global.cafCommon,global.rxjs.operators,global.ng.router,global.rxjs,global.ng.core,global.ng.common));
}(this, (function (exports,cafCommon,operators,router,rxjs,i0,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommonSharedModule = /** @class */ (function () {
        function CommonSharedModule() {
        }
        CommonSharedModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                        ],
                        declarations: [],
                        exports: [],
                        providers: [],
                        entryComponents: []
                    },] }
        ];
        return CommonSharedModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FrameworkVariableService = /** @class */ (function () {
        function FrameworkVariableService() {
            this.frameworkVariable = 'frameworkVariable';
            this.nameSpace = 'variables';
            this.frmVariableName = 'rtfFrmVariable';
            this.windowService = new cafCommon.WindowVariableService();
            this.frmVariableInitial();
        }
        /**
         * @return {?}
         */
        FrameworkVariableService.prototype.getFrameworkVariable = /**
         * @return {?}
         */
            function () {
                return this.windowService.getTopWindow()[this.frameworkVariable];
            };
        /**
         * 在框架顶级window注册变量
         */
        /**
         * 在框架顶级window注册变量
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        FrameworkVariableService.prototype.frameworkVariableReg = /**
         * 在框架顶级window注册变量
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var frmVariable = this.getFrameworkVariable();
                if (frmVariable && frmVariable.name && frmVariable.name === this.frmVariableName) {
                    frmVariable[this.nameSpace] = frmVariable[this.nameSpace] || {};
                    frmVariable[this.nameSpace][key] = value;
                    return;
                }
                this.frmVariableInitial();
                this.getFrameworkVariable()[this.nameSpace][key] = value;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        FrameworkVariableService.prototype.getFrmVariableByKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var frmVariable = this.getFrameworkVariable();
                if (frmVariable && frmVariable[this.nameSpace] && frmVariable[this.nameSpace][key]) {
                    return frmVariable[this.nameSpace][key];
                }
                return null;
            };
        /**
         * 在框架的顶级window上
         * 定义一个公共变量。
         * 用于存放菜单、应用缓存数据，eventbus都公共对象
         * 对适配层提供服务
         */
        /**
         * 在框架的顶级window上
         * 定义一个公共变量。
         * 用于存放菜单、应用缓存数据，eventbus都公共对象
         * 对适配层提供服务
         * @private
         * @return {?}
         */
        FrameworkVariableService.prototype.frmVariableInitial = /**
         * 在框架的顶级window上
         * 定义一个公共变量。
         * 用于存放菜单、应用缓存数据，eventbus都公共对象
         * 对适配层提供服务
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var topWin = this.windowService.getTopWindow();
                /** @type {?} */
                var name = 'name';
                topWin[this.frameworkVariable] = topWin[this.frameworkVariable] || {};
                topWin[this.frameworkVariable][name] = this.frmVariableName;
                topWin[this.frameworkVariable][this.nameSpace] = topWin[this.frameworkVariable][this.nameSpace] || {};
            };
        FrameworkVariableService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FrameworkVariableService.ctorParameters = function () { return []; };
        return FrameworkVariableService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FuncsService = /** @class */ (function () {
        function FuncsService(frmVariableService) {
            this.frmVariableService = frmVariableService;
            this.allgspfuncs = 'allgspfuncs';
            this.allfuncinvoks = 'allfuncinvoks';
            if (!this.frmVariableService) {
                this.frmVariableService = new FrameworkVariableService();
            }
        }
        /**
         * 缓存所有功能
         */
        /**
         * 缓存所有功能
         * @param {?} funcs
         * @return {?}
         */
        FuncsService.prototype.cacheAllFuncs = /**
         * 缓存所有功能
         * @param {?} funcs
         * @return {?}
         */
            function (funcs) {
                this.frmVariableService.frameworkVariableReg(this.allgspfuncs, funcs);
            };
        /**
         * 获取所有缓存的功能
         */
        /**
         * 获取所有缓存的功能
         * @return {?}
         */
        FuncsService.prototype.getAllCachedFuncs = /**
         * 获取所有缓存的功能
         * @return {?}
         */
            function () {
                /** @type {?} */
                var funcsCache = this.frmVariableService.getFrmVariableByKey(this.allgspfuncs);
                return ( /** @type {?} */(funcsCache)) || [];
            };
        /**
         * 获取某功能
         */
        /**
         * 获取某功能
         * @param {?} funcId
         * @return {?}
         */
        FuncsService.prototype.getCachedFunc = /**
         * 获取某功能
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                /** @type {?} */
                var allfuncs = this.getAllCachedFuncs();
                if (allfuncs) {
                    return allfuncs.find(( /**
                     * @param {?} f
                     * @return {?}
                     */function (f) { return f.id === funcId; }));
                }
            };
        /**
         * @param {?} invoks
         * @return {?}
         */
        FuncsService.prototype.cacheAllFuncInvoks = /**
         * @param {?} invoks
         * @return {?}
         */
            function (invoks) {
                this.frmVariableService.frameworkVariableReg(this.allfuncinvoks, invoks);
            };
        /**
         * @return {?}
         */
        FuncsService.prototype.getAllCachedFuncInvoks = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var invokCache = this.frmVariableService.getFrmVariableByKey(this.allfuncinvoks);
                return ( /** @type {?} */(invokCache)) || [];
            };
        FuncsService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FuncsService.ctorParameters = function () {
            return [
                { type: FrameworkVariableService, decorators: [{ type: i0.Optional }] }
            ];
        };
        return FuncsService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EventBusPipe = /** @class */ (function () {
        function EventBusPipe(tokenValue, parentEventPipeList, sub) {
            this.tokenValue = tokenValue;
            this.parentEventPipeList = parentEventPipeList;
            this.eventSubject = sub || new rxjs.BehaviorSubject(null);
            this.subscription = new rxjs.Subscription();
            this.onceSubscription = new rxjs.Subscription();
            this.observers = new Map();
            if (this.parentEventPipeList) {
                this.parentEventPipeList.push(this);
            }
        }
        /**
         * @param {?} bizPara
         * @return {?}
         */
        EventBusPipe.prototype.post = /**
         * @param {?} bizPara
         * @return {?}
         */
            function (bizPara) {
                this.eventSubject.next(bizPara);
            };
        /**
         * @param {?} eventHandler
         * @return {?}
         */
        EventBusPipe.prototype.subscribe = /**
         * @param {?} eventHandler
         * @return {?}
         */
            function (eventHandler) {
                this.subscription = this.eventSubject.subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    eventHandler(value);
                }));
                return this;
            };
        /**
         * @param {?} observerKey
         * @param {?} eventHandler
         * @return {?}
         */
        EventBusPipe.prototype.subscribeWithObkey = /**
         * @param {?} observerKey
         * @param {?} eventHandler
         * @return {?}
         */
            function (observerKey, eventHandler) {
                /** @type {?} */
                var observer = this.observers.get(observerKey);
                if (observer) {
                    observer.unsubscribe();
                }
                /** @type {?} */
                var sub = this.eventSubject.subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    eventHandler(value);
                }));
                this.observers.set(observerKey, sub);
                return this;
            };
        /**
         * @param {?} eventHandler
         * @return {?}
         */
        EventBusPipe.prototype.subscribeOnce = /**
         * @param {?} eventHandler
         * @return {?}
         */
            function (eventHandler) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var scription = this.eventSubject.subscribe(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    eventHandler(value);
                    if (scription) {
                        scription.unsubscribe();
                    }
                    self.parentEventPipeList = new Array();
                }));
                return this;
            };
        /**
         * @return {?}
         */
        EventBusPipe.prototype.unSubscribe = /**
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                    this.subscription = null;
                }
            };
        // 注销使用once方法注册的订阅。
        // 注销使用once方法注册的订阅。
        /**
         * @return {?}
         */
        EventBusPipe.prototype.unSubscribeForOnce =
            // 注销使用once方法注册的订阅。
            /**
             * @return {?}
             */
            function () {
                this.onceSubscription.unsubscribe();
            };
        /**
         * 取消某观察者的订阅
         * @param observerKey 观察者唯一标识
         */
        /**
         * 取消某观察者的订阅
         * @param {?} observerKey 观察者唯一标识
         * @return {?}
         */
        EventBusPipe.prototype.unSubscribeWithObkey = /**
         * 取消某观察者的订阅
         * @param {?} observerKey 观察者唯一标识
         * @return {?}
         */
            function (observerKey) {
                /** @type {?} */
                var scription = this.observers.get(observerKey);
                if (scription) {
                    scription.unsubscribe();
                }
            };
        /**
         * @param {?} tokenValue
         * @return {?}
         */
        EventBusPipe.prototype.matchEmitterToken = /**
         * @param {?} tokenValue
         * @return {?}
         */
            function (tokenValue) {
                if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {
                    return false;
                }
                return true;
            };
        /**
         * @param {?} tokenValue
         * @return {?}
         */
        EventBusPipe.prototype.examByTargetToken = /**
         * @param {?} tokenValue
         * @return {?}
         */
            function (tokenValue) {
                if (this.tokenValue !== tokenValue) {
                    return false;
                }
                return true;
            };
        /**
         * @param {?} subscriber
         * @return {?}
         */
        EventBusPipe.prototype.dispose = /**
         * @param {?} subscriber
         * @return {?}
         */
            function (subscriber) {
            };
        EventBusPipe.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        EventBusPipe.ctorParameters = function () {
            return [
                { type: String },
                { type: Array },
                { type: rxjs.Subject }
            ];
        };
        return EventBusPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FrmEventBus = /** @class */ (function () {
        function FrmEventBus() {
            this.eventMap = new Map();
        }
        // 发送事件，通知订阅者接收消息。
        // 发送事件，通知订阅者接收消息。
        /**
         * @param {?} tokenValue
         * @param {?} eventArgs
         * @return {?}
         */
        FrmEventBus.prototype.post =
            // 发送事件，通知订阅者接收消息。
            /**
             * @param {?} tokenValue
             * @param {?} eventArgs
             * @return {?}
             */
            function (tokenValue, eventArgs) {
                var e_1, _a;
                /** @type {?} */
                var eventPipeList = this.eventMap.get(tokenValue);
                if (!eventPipeList) {
                    eventPipeList = new Array();
                    this.eventMap.set(tokenValue, eventPipeList);
                }
                /** @type {?} */
                var eventPipe = eventPipeList.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.examByTargetToken(tokenValue); }));
                if (!eventPipe) {
                    eventPipe = new EventBusPipe(tokenValue, eventPipeList, null);
                }
                try {
                    for (var eventPipeList_1 = __values(eventPipeList), eventPipeList_1_1 = eventPipeList_1.next(); !eventPipeList_1_1.done; eventPipeList_1_1 = eventPipeList_1.next()) {
                        var eventPipeDetail = eventPipeList_1_1.value;
                        if (eventPipeDetail.matchEmitterToken(tokenValue)) {
                            eventPipeDetail.post(eventArgs);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (eventPipeList_1_1 && !eventPipeList_1_1.done && (_a = eventPipeList_1.return))
                            _a.call(eventPipeList_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @param {?} token
         * @param {?} sub
         * @return {?}
         */
        FrmEventBus.prototype.initialPipe = /**
         * @param {?} token
         * @param {?} sub
         * @return {?}
         */
            function (token, sub) {
                /** @type {?} */
                var pipes = this.eventMap.get(token);
                if (!pipes) {
                    pipes = new Array();
                    this.eventMap.set(token, pipes);
                }
                /** @type {?} */
                var eventPipe = pipes.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.examByTargetToken(token); }));
                if (!eventPipe) {
                    eventPipe = new EventBusPipe(token, pipes, sub);
                }
            };
        // 订阅事件
        // 订阅事件
        /**
         * @param {?} tokenValue
         * @param {?} handler
         * @return {?}
         */
        FrmEventBus.prototype.on =
            // 订阅事件
            /**
             * @param {?} tokenValue
             * @param {?} handler
             * @return {?}
             */
            function (tokenValue, handler) {
                /** @type {?} */
                var pipe = this.getEventPipe(tokenValue);
                if (pipe) {
                    return pipe.subscribe(handler);
                }
            };
        /** 订阅事件，并记录订阅者唯一标识 */
        /**
         * 订阅事件，并记录订阅者唯一标识
         * @param {?} tokenValue
         * @param {?} observerKey
         * @param {?} handler
         * @return {?}
         */
        FrmEventBus.prototype.onWithObkey = /**
         * 订阅事件，并记录订阅者唯一标识
         * @param {?} tokenValue
         * @param {?} observerKey
         * @param {?} handler
         * @return {?}
         */
            function (tokenValue, observerKey, handler) {
                /** @type {?} */
                var pipe = this.getEventPipe(tokenValue);
                if (pipe) {
                    return pipe.subscribeWithObkey(observerKey, handler);
                }
            };
        // 订阅一次。接收到一次消息之后自动取消订阅
        // 订阅一次。接收到一次消息之后自动取消订阅
        /**
         * @param {?} tokenValue
         * @param {?} handler
         * @return {?}
         */
        FrmEventBus.prototype.once =
            // 订阅一次。接收到一次消息之后自动取消订阅
            /**
             * @param {?} tokenValue
             * @param {?} handler
             * @return {?}
             */
            function (tokenValue, handler) {
                /** @type {?} */
                var pipe = this.getEventPipe(tokenValue);
                if (pipe) {
                    /** @type {?} */
                    var res = pipe.subscribeOnce(handler);
                    this.eventMap.delete(tokenValue);
                    return res;
                }
            };
        /**
         * @param {?} tokenValue
         * @return {?}
         */
        FrmEventBus.prototype.unSubscribe = /**
         * @param {?} tokenValue
         * @return {?}
         */
            function (tokenValue) {
                /** @type {?} */
                var pipe = this.getEventPipe(tokenValue);
                if (pipe) {
                    pipe.unSubscribe();
                }
            };
        /**
         * @private
         * @param {?} tokenValue
         * @return {?}
         */
        FrmEventBus.prototype.getEventPipe = /**
         * @private
         * @param {?} tokenValue
         * @return {?}
         */
            function (tokenValue) {
                /** @type {?} */
                var eventPipeList = this.eventMap.get(tokenValue);
                if (!eventPipeList) {
                    return null;
                }
                /** @type {?} */
                var eventPipe = eventPipeList.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.examByTargetToken(tokenValue); }));
                return eventPipe;
            };
        FrmEventBus.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FrmEventBus.ctorParameters = function () { return []; };
        return FrmEventBus;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable
    var LoadingComponent = /** @class */ (function () {
        function LoadingComponent(render, el) {
            this.render = render;
            this.el = el;
            this._isActive = false;
            this.message = '正在加载，请稍候...';
            this.closed = new i0.EventEmitter();
        }
        Object.defineProperty(LoadingComponent.prototype, "isActive", {
            get: /**
             * @return {?}
             */ function () {
                return this._isActive;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._isActive = val;
                if (val) {
                    this.animate('fadeIn');
                }
                else {
                    this.el.nativeElement && this.el.nativeElement.remove();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        LoadingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        LoadingComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        LoadingComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // setTimeout(() => this.setPosition(), 0 );
                this.setPosition();
            };
        /**
         * @return {?}
         */
        LoadingComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.isActive = false;
            };
        /**
         * @private
         * @return {?}
         */
        LoadingComponent.prototype.setPosition = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var containerWidth = this.loadingContainerEl.nativeElement.clientWidth;
                /** @type {?} */
                var containerHeight = this.loadingContainerEl.nativeElement.clientHeight;
                this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginTop', -containerHeight / 2 + 'px');
                this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginLeft', -containerWidth / 2 + 'px');
            };
        /**
         * @private
         * @param {?} animateCls
         * @return {?}
         */
        LoadingComponent.prototype.animate = /**
         * @private
         * @param {?} animateCls
         * @return {?}
         */
            function (animateCls) {
                this.render.setAttribute(this.el.nativeElement, 'class', animateCls);
                this.addAnimationEndEvent('webkitAnimationEnd', 'mozAnimationEnd', 'MSAnimationEnd', 'oanimationend', 'animationend');
            };
        /**
         * @private
         * @param {...?} events
         * @return {?}
         */
        LoadingComponent.prototype.addAnimationEndEvent = /**
         * @private
         * @param {...?} events
         * @return {?}
         */
            function () {
                var events = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    events[_i] = arguments[_i];
                }
                /** @type {?} */
                var _this = this;
                events.forEach(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    _this.el.nativeElement.addEventListener(e, ( /**
                     * @return {?}
                     */function handler() {
                        _this.render.removeAttribute(_this.el.nativeElement, 'class');
                        _this.el.nativeElement.removeEventListener(e, handler);
                        _this.closed.emit(_this.isActive);
                    }));
                }));
            };
        LoadingComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-loading',
                        template: "\n        <div #loadingBackdrop class=\"farris-loading-backdrop\" *ngIf=\"isActive\"></div>\n        <div #loadingContainerEl class=\"farris-loading\" *ngIf=\"isActive\">\n            <div class=\"ng-busy-default-wrapper\">\n                <div class=\"ng-busy-default-sign\">\n                    <div class=\"ng-busy-default-spinner\">\n                        <svg class=\"circular\" viewBox=\"25 25 50 50\">\n                            <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"></circle>\n                        </svg>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
                        styles: ["\n        .circular {\n            -webkit-animation: rotate 2s linear infinite;\n            animation: rotate 2s linear infinite;\n            height: 100%;\n            -webkit-transform-origin: center center;\n            transform-origin: center center;\n            width: 100%;\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            margin: auto;\n        }\n        .circular .path {\n            stroke-dasharray: 1, 200;\n            stroke-dashoffset: 0;\n            -webkit-animation: dash 1.5s ease-in-out infinite, color 6s ease-in-out infinite;\n            animation: dash 1.5s ease-in-out infinite, color 6s ease-in-out infinite;\n            stroke-linecap: round;\n        }\n\n        @-webkit-keyframes rotate {\n            100% {\n            -webkit-transform: rotate(360deg);\n                    transform: rotate(360deg);\n            }\n        }\n        @keyframes rotate {\n            100% {\n            -webkit-transform: rotate(360deg);\n                    transform: rotate(360deg);\n            }\n        }\n        @-webkit-keyframes dash {\n            0% {\n            stroke-dasharray: 1, 200;\n            stroke-dashoffset: 0;\n            }\n            50% {\n            stroke-dasharray: 89, 200;\n            stroke-dashoffset: -35px;\n            }\n            100% {\n            stroke-dasharray: 89, 200;\n            stroke-dashoffset: -124px;\n            }\n        }\n        @keyframes dash {\n            0% {\n            stroke-dasharray: 1, 200;\n            stroke-dashoffset: 0;\n            }\n            50% {\n            stroke-dasharray: 89, 200;\n            stroke-dashoffset: -35px;\n            }\n            100% {\n            stroke-dasharray: 89, 200;\n            stroke-dashoffset: -124px;\n            }\n        }\n        @-webkit-keyframes color {\n            100%,\n            0% {\n            stroke: #48a7ff;\n            }\n            40% {\n            stroke: #48a7ff;\n            }\n            66% {\n            stroke: #48a7ff;\n            }\n            80%,\n            90% {\n            stroke: #48a7ff;\n            }\n        }\n        @keyframes color {\n            100%,\n            0% {\n            stroke: #48a7ff;\n            }\n            40% {\n            stroke: #48a7ff;\n            }\n            66% {\n            stroke: #48a7ff;\n            }\n            80%,\n            90% {\n            stroke: #48a7ff;\n            }\n        }\n        .ng-busy-default-spinner {\n            width: 126px;height: 126px;\n        }\n        .ng-busy-default-sign{\n            background: transparent;\n            box-shadow: none;\n        }\n        .farris-loading-backdrop {\n            background-color: #ffffff;\n            opacity: .0;\n        }\n        "]
                    }] }
        ];
        /** @nocollapse */
        LoadingComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        LoadingComponent.propDecorators = {
            loadingContainerEl: [{ type: i0.ViewChild, args: ['loadingContainerEl',] }],
            loadingBackdrop: [{ type: i0.ViewChild, args: ['loadingBackdrop',] }],
            closed: [{ type: i0.Output }]
        };
        return LoadingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var loaddingDefaultConfig = {
        container: 'body',
        message: '正在加载中，请稍候...',
        posion: 'center'
    };
    /** @type {?} */
    var LOADING_DEFAULT_CONFIG = new i0.InjectionToken('loading default options.');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoadingService = /** @class */ (function () {
        function LoadingService(appRef, cfr, injecotr) {
            this.appRef = appRef;
            this.cfr = cfr;
            this.injecotr = injecotr;
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        LoadingService.prototype.show = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                this.removeDomCheck();
                this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG) || {};
                this.config = Object.assign(loaddingDefaultConfig, this.config);
                /** @type {?} */
                var loadingFactory = this.cfr.resolveComponentFactory(LoadingComponent);
                this.loadingCmpRef = loadingFactory.create(this.injecotr);
                if (config) {
                    this.config = Object.assign({}, this.config, config);
                }
                /** @type {?} */
                var languageCode = localStorage.getItem('languageCode');
                if (languageCode === 'en') {
                    this.config.message = 'Loading...';
                }
                /** @type {?} */
                var container = this.config.container;
                if (container === 'body') {
                    document.querySelector(( /** @type {?} */(container))).appendChild(this.loadingCmpRef.location.nativeElement);
                }
                else {
                    if (container instanceof i0.ElementRef) {
                        container.nativeElement.appendChild(this.loadingCmpRef.location.nativeElement);
                    }
                }
                this.loadingCmpRef.instance.isActive = true;
                Object.assign(this.loadingCmpRef.instance, this.config);
                this.loadingCmpRef.instance.closed.subscribe(( /**
                 * @param {?} state
                 * @return {?}
                 */function (state) {
                    if (!state) {
                        _this.clearDom(_this.loadingCmpRef);
                    }
                }));
                this.loadingCmpRef.changeDetectorRef.markForCheck();
                this.loadingCmpRef.changeDetectorRef.detectChanges();
                return this.loadingCmpRef.instance;
            };
        /**
         * @return {?}
         */
        LoadingService.prototype.close = /**
         * @return {?}
         */
            function () {
                if (!!this.loadingCmpRef) {
                    this.clearDom(this.loadingCmpRef);
                }
            };
        /**
         * @private
         * @param {?} cmpRef
         * @return {?}
         */
        LoadingService.prototype.clearDom = /**
         * @private
         * @param {?} cmpRef
         * @return {?}
         */
            function (cmpRef) {
                var _this = this;
                try {
                    /** @type {?} */
                    var loadingEl = cmpRef.location.nativeElement;
                    if (!!loadingEl && loadingEl.parentNode) {
                        loadingEl.parentNode.removeChild(loadingEl);
                    }
                    this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG);
                    cmpRef.destroy();
                    cmpRef = null;
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        // 1.5s 后检查是否移除成功
                        _this.removeDomCheck();
                    }), 1500);
                }
                catch (e) {
                    console.log(e);
                    this.removeDomCheck();
                }
            };
        /**
         * @private
         * @return {?}
         */
        LoadingService.prototype.removeDomCheck = /**
         * @private
         * @return {?}
         */
            function () {
                try {
                    /** @type {?} */
                    var el = document.getElementsByTagName('farris-loading')[0];
                    if (!!el && !!el.parentNode) {
                        el.parentNode.removeChild(el);
                    }
                }
                catch (ex) {
                    console.log(ex);
                }
            };
        LoadingService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        LoadingService.ctorParameters = function () {
            return [
                { type: i0.ApplicationRef },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector }
            ];
        };
        return LoadingService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IframeLink = /** @class */ (function () {
        function IframeLink(code, sessionid, src, active) {
            if (src === void 0) {
                src = '';
            }
            if (active === void 0) {
                active = false;
            }
            this.active = false;
            this.code = code;
            this.src = src;
            this.active = active;
            this.sessionid = sessionid;
        }
        return IframeLink;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FrmUtil = /** @class */ (function () {
        function FrmUtil() {
        }
        /**
         * @param {?} bizContextId
         * @param {?} options
         * @return {?}
         */
        FrmUtil.setHeader = /**
         * @param {?} bizContextId
         * @param {?} options
         * @return {?}
         */
            function (bizContextId, options) {
                options.headers = {
                    'Content-Type': 'application/json',
                };
                if (bizContextId) {
                    /** @type {?} */
                    var contextKey = 'X-CAF-Runtime-Context';
                    options.headers[contextKey] = bizContextId;
                }
                return options;
            };
        /**
         * @return {?}
         */
        FrmUtil.getTabArray = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var iframeTabArr = 'iframeTabarray';
                /** @type {?} */
                var topWin = this.getTopWindow();
                /** @type {?} */
                var frmWin = window;
                while ((!frmWin[iframeTabArr] || frmWin[iframeTabArr].length === 0) && frmWin !== topWin) {
                    frmWin = frmWin.parent;
                }
                return ( /** @type {?} */(frmWin[iframeTabArr])) || [];
            };
        /**
         * @return {?}
         */
        FrmUtil.getTopWindow = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var curWin = window.self;
                try {
                    while (curWin.location.origin === curWin.parent.location.origin) {
                        if (curWin !== curWin.parent) {
                            curWin = curWin.parent;
                        }
                        else {
                            break;
                        }
                    }
                }
                catch (e) { }
                return curWin;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        FrmUtil.removeTab = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                /** @type {?} */
                var iframeArr = this.getTabArray();
                iframeArr.splice(index, 1);
            };
        return FrmUtil;
    }());
    var EventUtil = /** @class */ (function () {
        function EventUtil() {
        }
        /** 获取框架event */
        /**
         * 获取框架event
         * @return {?}
         */
        EventUtil.getFrmEvent = /**
         * 获取框架event
         * @return {?}
         */
            function () {
                /** @type {?} */
                var eventBus = this.frmVariable.getFrmVariableByKey(this.eventBusKey);
                return ( /** @type {?} */(eventBus));
            };
        /**
         * @param {?} feb
         * @return {?}
         */
        EventUtil.setFrmEvent = /**
         * @param {?} feb
         * @return {?}
         */
            function (feb) {
                this.frmVariable.frameworkVariableReg(this.eventBusKey, feb);
            };
        /**
         * 获取app唯一的观察者标识
         */
        /**
         * 获取app唯一的观察者标识
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?=} tabId
         * @return {?}
         */
        EventUtil.appObsToken = /**
         * 获取app唯一的观察者标识
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?=} tabId
         * @return {?}
         */
            function (appId, appEntrance, tabId) {
                return tabId || appId + "#" + appEntrance;
            };
        /**
         * 获取func唯一的观察者标识
         */
        /**
         * 获取func唯一的观察者标识
         * @param {?} funcId
         * @param {?=} tabId
         * @return {?}
         */
        EventUtil.funcObsToken = /**
         * 获取func唯一的观察者标识
         * @param {?} funcId
         * @param {?=} tabId
         * @return {?}
         */
            function (funcId, tabId) {
                return tabId || funcId;
            };
        /**
         * 获取某事件的监听者
         */
        /**
         * 获取某事件的监听者
         * @param {?} eventToken
         * @return {?}
         */
        EventUtil.getObserver = /**
         * 获取某事件的监听者
         * @param {?} eventToken
         * @return {?}
         */
            function (eventToken) {
                var e_1, _a;
                /** @type {?} */
                var feb = this.getFrmEvent();
                /** @type {?} */
                var eventMap = feb.eventMap.get(eventToken);
                if (!eventMap) {
                    return null;
                }
                /** @type {?} */
                var eventPipe;
                try {
                    for (var eventMap_1 = __values(eventMap), eventMap_1_1 = eventMap_1.next(); !eventMap_1_1.done; eventMap_1_1 = eventMap_1.next()) {
                        var eventPipeDetail = eventMap_1_1.value;
                        if (eventPipeDetail.matchEmitterToken(eventToken)) {
                            eventPipe = eventPipeDetail;
                            break;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (eventMap_1_1 && !eventMap_1_1.done && (_a = eventMap_1.return))
                            _a.call(eventMap_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                if (!eventPipe) {
                    return null;
                }
                /** @type {?} */
                var obs = eventPipe.observers;
                return obs;
            };
        /**
         * 清空监听者
         */
        /**
         * 清空监听者
         * @param {?} obKey
         * @return {?}
         */
        EventUtil.clearObserver = /**
         * 清空监听者
         * @param {?} obKey
         * @return {?}
         */
            function (obKey) {
                /** @type {?} */
                var switchObsMap = this.getObserver(this.FUNC_SWITCH);
                /** @type {?} */
                var switchObs = switchObsMap.get(obKey);
                if (switchObs) {
                    switchObs.unsubscribe();
                    switchObsMap.delete(obKey);
                }
                /** @type {?} */
                var closeObsMap = this.getObserver(this.FUNC_CLOSED);
                /** @type {?} */
                var closeObs = closeObsMap.get(obKey);
                if (closeObs) {
                    closeObs.unsubscribe();
                    closeObsMap.delete(obKey);
                }
                /** @type {?} */
                var beforeCloseMap = this.getObserver(this.BEFORE_FUNC_CLOSE);
                /** @type {?} */
                var beforeClose = beforeCloseMap.get(obKey);
                if (beforeClose) {
                    beforeClose.unsubscribe();
                    beforeCloseMap.delete(obKey);
                }
            };
        /**
         * 清空某个管道
         */
        /**
         * 清空某个管道
         * @param {?} pipeToken
         * @return {?}
         */
        EventUtil.clearEventPipe = /**
         * 清空某个管道
         * @param {?} pipeToken
         * @return {?}
         */
            function (pipeToken) {
                /** @type {?} */
                var feb = this.getFrmEvent();
                /** @type {?} */
                var eventPipes = feb.eventMap.get(pipeToken);
                if (!eventPipes) {
                    return;
                }
                /** @type {?} */
                var eventPipe = eventPipes.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.examByTargetToken(pipeToken); }));
                if (eventPipe) {
                    eventPipe.unSubscribe();
                    feb.eventMap.delete(pipeToken);
                }
            };
        /**
         * eventToken str
         */
        EventUtil.FARRIS_APPS = 'all-gsp-farrisapps';
        EventUtil.FARRIS_APP_CLICK = 'farrisapp-click';
        EventUtil.ALL_GSP_FUNCS = 'all-gsp-functions';
        EventUtil.BEFORE_FUNC_CLOSE = 'beforeFuncCloseEvent';
        EventUtil.FUNC_CLOSED = 'FuncClosed';
        EventUtil.FUNC_SWITCH = 'funcSwitchEvent';
        EventUtil.AFTER_FRAME_LOAD = "after-iframe-load-event";
        EventUtil.eventBusKey = 'frmEventBus';
        EventUtil.frmVariable = new FrameworkVariableService();
        return EventUtil;
    }());
    /** @type {?} */
    var AppType = {
        App: 'app',
        Menu: 'menu',
        Other: 'other'
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FrmI18nSettingService = /** @class */ (function () {
        function FrmI18nSettingService(frmVariable, lanService, http) {
            this.frmVariable = frmVariable;
            this.lanService = lanService;
            this.http = http;
            this.variableKey = 'frm-i18nSetting';
        }
        /**
         * @return {?}
         */
        FrmI18nSettingService.prototype.getSetting = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var temp = this.frmVariable.getFrmVariableByKey(this.variableKey);
                return this.deepClone(temp);
            };
        /**
         * @return {?}
         */
        FrmI18nSettingService.prototype.getSetting$ = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var temp = this.frmVariable.getFrmVariableByKey(this.variableKey);
                return !temp ? this.loadSetting$() : rxjs.of(this.deepClone(temp));
            };
        /**
         * @return {?}
         */
        FrmI18nSettingService.prototype.loadSetting$ = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var rtfService = (( /** @type {?} */(window))).gspframeworkService && (( /** @type {?} */(window))).gspframeworkService.rtf;
                /** @type {?} */
                var entity = {};
                if (!!rtfService && !!rtfService.language) {
                    try {
                        /** @type {?} */
                        var lanService = rtfService.language;
                        lanService.i18nSetting(( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            entity.i18nSetting = res;
                        }), ( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) {
                            console.log(err);
                        }));
                        lanService.allLanguages(( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            entity.languages = res;
                        }), ( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) {
                            console.log(err);
                        }));
                        entity.currentLanCode = lanService.getLanguageCode();
                        this.frmVariable.frameworkVariableReg(this.variableKey, entity);
                        return rxjs.of(entity);
                    }
                    catch (e) {
                        console.log(e);
                        return rxjs.of(null);
                    }
                }
                else {
                    /** @type {?} */
                    var languagesUrl = '/api/runtime/sys/v1.0/i18n/languageservice/getalllanguages';
                    /** @type {?} */
                    var settingUrl_1 = '/api/runtime/sys/v1.0/i18n/i18nusersetting/setting';
                    entity.currentLanCode = this.lanService.getLanguageCode();
                    return this.http.get(languagesUrl).pipe(operators.map(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) { return entity.languages = res; })), operators.switchMap(( /**
                     * @return {?}
                     */function () { return _this.http.get(settingUrl_1); })), operators.map(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        entity.i18nSetting = res;
                        _this.frmVariable.frameworkVariableReg(_this.variableKey, entity);
                        return entity;
                    })), operators.catchError(( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        console.log(err);
                        return rxjs.of(null);
                    })));
                }
            };
        /**
         * @private
         * @param {?} target
         * @return {?}
         */
        FrmI18nSettingService.prototype.deepClone = /**
         * @private
         * @param {?} target
         * @return {?}
         */
            function (target) {
                /** @type {?} */
                var result;
                if (typeof target === 'object') {
                    if (Array.isArray(target)) {
                        result = [];
                        for (var i in target) {
                            result.push(this.deepClone(target[i]));
                        }
                    }
                    else if (target === null) {
                        result = null;
                    }
                    else if (target.constructor === RegExp) {
                        result = target;
                    }
                    else {
                        result = {};
                        for (var i in target) {
                            result[i] = this.deepClone(target[i]);
                        }
                    }
                }
                else {
                    result = target;
                }
                return result;
            };
        FrmI18nSettingService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FrmI18nSettingService.ctorParameters = function () {
            return [
                { type: FrameworkVariableService },
                { type: cafCommon.LanguageService },
                { type: cafCommon.HttpService }
            ];
        };
        return FrmI18nSettingService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppService = /** @class */ (function () {
        function AppService(http, sessionSvc, i18nSetting) {
            this.http = http;
            this.sessionSvc = sessionSvc;
            this.i18nSetting = i18nSetting;
            this.FUNCSTATUS_PATH = '/api/runtime/sys/v1.0/function-states';
            this.APPINVOKE_CAHCE_KEY = 'allappinvoks';
            this.frmVariableService = new FrameworkVariableService();
            if (!this.i18nSetting) {
                /** @type {?} */
                var variables = new FrameworkVariableService();
                /** @type {?} */
                var language = new cafCommon.LanguageService(null);
                this.i18nSetting = new FrmI18nSettingService(variables, language, http);
            }
        }
        /**
         * App跳转打开
         */
        /**
         * App跳转打开
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} params
         * @param {?=} reload
         * @return {?}
         */
        AppService.prototype.openApp = /**
         * App跳转打开
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} params
         * @param {?=} reload
         * @return {?}
         */
            function (appId, appEntrance, params, reload) {
                /** @type {?} */
                var appOpts = {
                    funcId: '',
                    appId: appId,
                    appEntrance: appEntrance,
                    appType: AppType.App,
                    entityParams: params,
                    queryStringParams: params,
                    isReload: reload
                };
                this.openAppByOptions(appOpts);
            };
        /**
         * App跳转打开服务
         */
        /**
         * App跳转打开服务
         * @param {?} options
         * @return {?}
         */
        AppService.prototype.openAppByOptions = /**
         * App跳转打开服务
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                /** @type {?} */
                var linkobj = this.checkingRepeatOpen(options);
                if (linkobj) {
                    return;
                }
                this.getInvokeAndEnterApp$(options).subscribe(( /**
                 * @param {?} link
                 * @return {?}
                 */function (link) {
                    _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, link);
                }));
            };
        /**
         * 流方式，App跳转打开服务
         */
        /**
         * 流方式，App跳转打开服务
         * @param {?} options
         * @return {?}
         */
        AppService.prototype.openAppByOptions$ = /**
         * 流方式，App跳转打开服务
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                /** @type {?} */
                var linkobj = this.checkingRepeatOpen(options);
                if (linkobj) {
                    return rxjs.of(true);
                }
                return this.getInvokeAndEnterApp$(options).pipe(operators.map(( /**
                 * @param {?} link
                 * @return {?}
                 */function (link) {
                    _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, link);
                    return true;
                })));
            };
        /**
         * 获取app调用信息
         */
        /**
         * 获取app调用信息
         * @param {?} appId
         * @return {?}
         */
        AppService.prototype.getAppInvok = /**
         * 获取app调用信息
         * @param {?} appId
         * @return {?}
         */
            function (appId) {
                var _this = this;
                /** @type {?} */
                var invoks = this.getInvokCache();
                /** @type {?} */
                var funcInvok = invoks.find(( /**
                 * @param {?} f
                 * @return {?}
                 */function (f) { return f.id === appId; }));
                if (!funcInvok) {
                    return this.getInvokConfig(appId).pipe(operators.map(( /**
                     * @param {?} v
                     * @return {?}
                     */function (v) {
                        if (!v) {
                            return null;
                        }
                        _this.refreshInvokCache(invoks, v);
                        return v;
                    })));
                }
                return rxjs.of(funcInvok);
            };
        /**
         * @param {?} options
         * @return {?}
         */
        AppService.prototype.beforeCloseAppByOptions = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                /** @type {?} */
                var obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(appObkey);
                if (!obs) {
                    this.closeAppByOptions(options).subscribe();
                    return;
                }
                /** @type {?} */
                var eventArgs = {
                    tabId: this.getPageId(options.appId, options.appEntrance, options.tabId),
                    appType: AppType.App,
                    appId: options.appId,
                    appEntrance: options.appEntrance
                };
                this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
            };
        /**
         * App关闭前接口
         */
        /**
         * App关闭前接口
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?=} tabId
         * @return {?}
         */
        AppService.prototype.beforeCloseApp = /**
         * App关闭前接口
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?=} tabId
         * @return {?}
         */
            function (appId, appEntrance, tabId) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var appObkey = EventUtil.appObsToken(appId, appEntrance, tabId);
                /** @type {?} */
                var obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(appObkey);
                if (!obs) {
                    this.closeApp(appId, appEntrance, tabId).subscribe();
                    return;
                }
                /** @type {?} */
                var eventArgs = {
                    tabId: self.getPageId(appId, appEntrance, tabId),
                    appType: AppType.App,
                    appId: appId,
                    appEntrance: appEntrance
                };
                this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
            };
        /**
         * @param {?} options
         * @return {?}
         */
        AppService.prototype.closeAppByOptions = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                /** @type {?} */
                var pageToken = this.getPageId(options.appId, options.appEntrance, options.tabId);
                EventUtil.clearObserver(appObkey);
                EventUtil.clearEventPipe(pageToken);
                /** @type {?} */
                var objIndex = FrmUtil.getTabArray().findIndex(( /**
                 * @param {?} i
                 * @return {?}
                 */function (i) { return i.id === pageToken && i.appType === AppType.App; }));
                /** @type {?} */
                var obj = FrmUtil.getTabArray()[objIndex];
                options.token = options.token || obj.formToken;
                FrmUtil.removeTab(objIndex);
                /** @type {?} */
                var eventArgs = {
                    tabId: pageToken,
                    appType: AppType.App,
                    appId: options.tabId,
                    appEntrance: options.appEntrance
                };
                this.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
                return this.quitApp(options, obj.su);
            };
        /**
         * 关闭app
         */
        /**
         * 关闭app
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?=} tabId
         * @return {?}
         */
        AppService.prototype.closeApp = /**
         * 关闭app
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?=} tabId
         * @return {?}
         */
            function (appId, appEntrance, tabId) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var appObkey = EventUtil.appObsToken(appId, appEntrance, tabId);
                /** @type {?} */
                var pageId = this.getPageId(appId, appEntrance, tabId);
                EventUtil.clearObserver(appObkey);
                EventUtil.clearEventPipe(pageId);
                /** @type {?} */
                var objIndex = FrmUtil.getTabArray().findIndex(( /**
                 * @param {?} i
                 * @return {?}
                 */function (i) { return i.id === pageId && i.appType === AppType.App; }));
                /** @type {?} */
                var obj = FrmUtil.getTabArray()[objIndex];
                /** @type {?} */
                var formToken = obj.formToken;
                FrmUtil.removeTab(objIndex);
                /** @type {?} */
                var eventArgs = {
                    tabId: pageId,
                    appType: AppType.App,
                    appId: appId,
                    appEntrance: appEntrance,
                };
                self.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
                /** @type {?} */
                var options = {
                    tabId: tabId,
                    funcId: '',
                    appId: appId,
                    appEntrance: appEntrance,
                    appType: AppType.App,
                    token: formToken
                };
                return this.quitApp(options, obj.su).pipe(operators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) { })));
            };
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        AppService.prototype.getInvokeAndEnterApp$ = /**
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                /** @type {?} */
                var newPageId = this.newPageId(options.appId, options.appEntrance, options.tabId);
                options.tabId = newPageId;
                return this.getAppInvok(options.appId).pipe(operators.switchMap(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    /** @type {?} */
                    var invokEntry = value.appInvoks.find(( /**
                     * @param {?} invok
                     * @return {?}
                     */function (invok) { return invok.appEntrance === options.appEntrance; }));
                    if (!options.appEntrance && !invokEntry) {
                        invokEntry = value.appInvoks.find(( /**
                         * @param {?} invok
                         * @return {?}
                         */function (invok) { return !invok.appEntrance; }));
                    }
                    if (!invokEntry) {
                        window.alert("\u8BF7\u68C0\u67E5\u5F53\u524D\u5E94\u7528(ID:" + options.appId + ")\u914D\u7F6E\u7684\u5E94\u7528\u5165\u53E3(appEntrance:" + options.appEntrance + ")\u662F\u5426\u5B58\u5728");
                        return;
                    }
                    /** @type {?} */
                    var entityParam;
                    try {
                        entityParam = invokEntry.entityParams ? JSON.parse(invokEntry.entityParams) : null;
                    }
                    catch (e) {
                        entityParam = null;
                        console.log(e);
                    }
                    /** @type {?} */
                    var su = _this.getSu(value.url);
                    return _this.enterApp({
                        tabId: newPageId,
                        appId: options.appId,
                        appEntrance: options.appEntrance,
                        menuName: options.tabName || invokEntry.name,
                        action: 'enterapp'
                    }, su).pipe(operators.map(( /**
                     * @param {?} token
                     * @return {?}
                     */function (token) {
                        /** @type {?} */
                        var routurl = value.url + (options.appEntrance ? "#/" + options.appEntrance : '');
                        /** @type {?} */
                        var linkobj = new IframeLink(value.code, null, _this.buildQueryString(routurl, options.appId, options.appEntrance, options.tabId, token, options.queryStringParams));
                        // id加入口区分,tabId页签唯一标识
                        linkobj.id = newPageId;
                        linkobj.appType = AppType.App;
                        linkobj.appId = options.appId;
                        linkobj.appEntrance = options.appEntrance;
                        // 显示app名字及入口名字
                        linkobj.FuncName = options.tabName || invokEntry.name;
                        linkobj.url = value.url;
                        linkobj.reload = options.isReload;
                        linkobj.su = su;
                        linkobj.formToken = token;
                        if (entityParam) {
                            entityParam.forEach(( /**
                             * @param {?} item
                             * @return {?}
                             */function (item) {
                                if (item.name === 'mode') {
                                    linkobj.mode = item.value;
                                    linkobj.src += (item.value ? "&appMode=" + item.value + "&" : '');
                                }
                            }));
                        }
                        _this.getFeb().post(newPageId, options.entityParams);
                        return linkobj;
                    })), operators.switchMap(( /**
                     * @param {?} formLink
                     * @return {?}
                     */function (formLink) {
                        return _this.i18nSetting.getSetting$().pipe(operators.map(( /**
                         * @return {?}
                         */function () { return formLink; })));
                    })));
                })));
            };
        /**
         * @private
         * @param {?} appId
         * @return {?}
         */
        AppService.prototype.getInvokConfig = /**
         * @private
         * @param {?} appId
         * @return {?}
         */
            function (appId) {
                /** @type {?} */
                var url = "/api/runtime/sys/v1.0/gspapp/" + appId;
                return this.http.request('Get', url, FrmUtil.setHeader(null, {}));
            };
        /**
         * 进入应用，触发相关服务
         */
        /**
         * 进入应用，触发相关服务
         * @private
         * @param {?} enterParam
         * @param {?} su
         * @return {?}
         */
        AppService.prototype.enterApp = /**
         * 进入应用，触发相关服务
         * @private
         * @param {?} enterParam
         * @param {?} su
         * @return {?}
         */
            function (enterParam, su) {
                /** @type {?} */
                var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
                return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: enterParam })).pipe(operators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) {
                    return v.token || v.sessionId;
                })));
            };
        /**
         * 退出应用，触发相关服务
         */
        /**
         * 退出应用，触发相关服务
         * @private
         * @param {?} options
         * @param {?=} su
         * @return {?}
         */
        AppService.prototype.quitApp = /**
         * 退出应用，触发相关服务
         * @private
         * @param {?} options
         * @param {?=} su
         * @return {?}
         */
            function (options, su) {
                /** @type {?} */
                var body = {
                    tabId: options.tabId,
                    token: options.token,
                    appId: options.appId,
                    appEntrance: options.appEntrance,
                    action: 'quitapp'
                };
                /** @type {?} */
                var invokObs = this.getAppInvok(options.appId);
                /** @type {?} */
                var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
                /** @type {?} */
                var funcState$ = this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: body }));
                // tslint:disable-next-line: deprecation
                /** @type {?} */
                var $r = rxjs.zip(invokObs, funcState$, ( /**
                 * @param {?} res1
                 * @param {?} res2
                 * @return {?}
                 */function (res1, res2) { return ({ res1: res1, res2: res2 }); }));
                return $r;
            };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        AppService.prototype.getSu = /**
         * @private
         * @param {?} url
         * @return {?}
         */
            function (url) {
                /** @type {?} */
                var uriArr = url.split('/');
                return uriArr.length > 3 ? uriArr[3] : '';
            };
        /**
         * @private
         * @return {?}
         */
        AppService.prototype.getInvokCache = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var appInvokesCache = this.frmVariableService.getFrmVariableByKey(this.APPINVOKE_CAHCE_KEY);
                return ( /** @type {?} */(appInvokesCache)) || [];
            };
        /**
         * @private
         * @param {?} invoks
         * @param {?} funcInvok
         * @return {?}
         */
        AppService.prototype.refreshInvokCache = /**
         * @private
         * @param {?} invoks
         * @param {?} funcInvok
         * @return {?}
         */
            function (invoks, funcInvok) {
                if (!funcInvok) {
                    return;
                }
                invoks.push(funcInvok);
                this.frmVariableService.frameworkVariableReg(this.APPINVOKE_CAHCE_KEY, invoks);
            };
        // tslint:disable-next-line: max-line-length
        // tslint:disable-next-line: max-line-length
        /**
         * @private
         * @param {?} routurl
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} tabId
         * @param {?} token
         * @param {?} params
         * @return {?}
         */
        AppService.prototype.buildQueryString =
            // tslint:disable-next-line: max-line-length
            /**
             * @private
             * @param {?} routurl
             * @param {?} appId
             * @param {?} appEntrance
             * @param {?} tabId
             * @param {?} token
             * @param {?} params
             * @return {?}
             */
            function (routurl, appId, appEntrance, tabId, token, params) {
                if (routurl.indexOf('?') < 0) {
                    routurl += "?appId=" + appId + "&appEntrance=" + appEntrance;
                }
                else {
                    routurl += "&appId=" + appId + "&appEntrance=" + appEntrance;
                }
                routurl += "&appType=" + AppType.App;
                routurl += "&tabId=" + this.getPageId(appId, appEntrance, tabId);
                routurl += !token ? '' : "&cvft=" + token;
                if (params) {
                    params.forEach(( /**
                     * @param {?} value
                     * @param {?} key
                     * @return {?}
                     */function (value, key) {
                        routurl += !key ? '' : "&" + key + "=" + value;
                    }));
                }
                return routurl;
            };
        /**
         * @private
         * @return {?}
         */
        AppService.prototype.getFeb = /**
         * @private
         * @return {?}
         */
            function () {
                return EventUtil.getFrmEvent();
            };
        /**
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @return {?}
         */
        AppService.prototype.mergeAppId = /**
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @return {?}
         */
            function (appId, appEntrance) {
                return appId + "_" + appEntrance;
            };
        /**
         * 获取当前菜单页面的唯一标识
         */
        /**
         * 获取当前菜单页面的唯一标识
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} tabId
         * @return {?}
         */
        AppService.prototype.getPageId = /**
         * 获取当前菜单页面的唯一标识
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} tabId
         * @return {?}
         */
            function (appId, appEntrance, tabId) {
                return tabId || this.mergeAppId(appId, appEntrance);
            };
        /**
         * 生成页面唯一标识
         */
        /**
         * 生成页面唯一标识
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} tabId
         * @return {?}
         */
        AppService.prototype.newPageId = /**
         * 生成页面唯一标识
         * @private
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} tabId
         * @return {?}
         */
            function (appId, appEntrance, tabId) {
                return tabId ? this.mergeAppId(appId, appEntrance) + "_" + tabId : this.mergeAppId(appId, appEntrance);
            };
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        AppService.prototype.checkingRepeatOpen = /**
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var appId = options.appId;
                /** @type {?} */
                var appEntrance = options.appEntrance;
                /** @type {?} */
                var tabId = options.tabId;
                /** @type {?} */
                var entityParams = options.entityParams;
                /** @type {?} */
                var linkobj;
                /** @type {?} */
                var pageId = this.getPageId(appId, appEntrance, tabId);
                linkobj = FrmUtil.getTabArray().find(( /**
                 * @param {?} i
                 * @return {?}
                 */function (i) { return i.id === pageId && i.appType === AppType.App; }));
                if (linkobj) {
                    linkobj.FuncName = options.tabName || linkobj.FuncName;
                    linkobj.src = this.buildQueryString(linkobj.url, appId, appEntrance, options.tabId, linkobj.sessionid, options.queryStringParams);
                    linkobj.reload = options.isReload;
                    this.getFeb().post(pageId, entityParams);
                    this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
                }
                return linkobj;
            };
        AppService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        AppService.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService },
                { type: cafCommon.SessionService },
                { type: FrmI18nSettingService, decorators: [{ type: i0.Optional }] }
            ];
        };
        return AppService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FrameworkService = /** @class */ (function () {
        function FrameworkService(http, router$$1, cache, sessionSvc, feb, funcService, loadService, appService, i18nSetting) {
            this.http = http;
            this.router = router$$1;
            this.cache = cache;
            this.sessionSvc = sessionSvc;
            this.feb = feb;
            this.funcService = funcService;
            this.loadService = loadService;
            this.appService = appService;
            this.i18nSetting = i18nSetting;
            this.FUNCSTATUS_PATH = '/api/runtime/sys/v1.0/function-states';
            this.BeforeFuncClose = EventUtil.BEFORE_FUNC_CLOSE;
            this.FuncClosed = EventUtil.FUNC_CLOSED;
            this.FuncSwitch = EventUtil.FUNC_SWITCH;
            if (!this.i18nSetting) {
                /** @type {?} */
                var variables = new FrameworkVariableService();
                /** @type {?} */
                var language = new cafCommon.LanguageService(null);
                this.i18nSetting = new FrmI18nSettingService(variables, language, http);
            }
            if (!this.appService) {
                this.appService = new AppService(this.http, this.sessionSvc, this.i18nSetting);
            }
        }
        /**
         * 根据funcid打开功能菜单
         * (适用于单页签路由，不支持NG7升级后菜单之间跳转)
         */
        /**
         * 根据funcid打开功能菜单
         * (适用于单页签路由，不支持NG7升级后菜单之间跳转)
         * @param {?} funcid
         * @param {?} routepath
         * @param {?} parentsessionid
         * @param {?=} newsession
         * @param {?=} simpleparam
         * @return {?}
         */
        FrameworkService.prototype.openFunc = /**
         * 根据funcid打开功能菜单
         * (适用于单页签路由，不支持NG7升级后菜单之间跳转)
         * @param {?} funcid
         * @param {?} routepath
         * @param {?} parentsessionid
         * @param {?=} newsession
         * @param {?=} simpleparam
         * @return {?}
         */
            function (funcid, routepath, parentsessionid, newsession, simpleparam) {
                if (newsession === void 0) {
                    newsession = true;
                }
                if (simpleparam === void 0) {
                    simpleparam = '';
                }
                /** @type {?} */
                var appOps = {
                    appType: AppType.Menu,
                    funcId: funcid,
                    appId: '',
                    appEntrance: ''
                };
                this.internalOpen(appOps);
                return rxjs.of(true);
                // return this.internalOpen$(appOps);
            };
        /**
         * 直接打开功能
         */
        /**
         * 直接打开功能
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.openMenu = /**
         * 直接打开功能
         * @param {?} options
         * @return {?}
         */
            function (options) {
                switch (options.appType && options.appType.toLowerCase()) {
                    case AppType.App:
                        if (!options.appId) {
                            window.alert('参数appId不能为空！');
                            return;
                        }
                        this.appService.openAppByOptions(options);
                        break;
                    case AppType.Menu:
                        this.internalOpen(options);
                        break;
                    case AppType.Other: break;
                }
            };
        /**
         * 通过流方式打开功能
         */
        /**
         * 通过流方式打开功能
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.openMenu$ = /**
         * 通过流方式打开功能
         * @param {?} options
         * @return {?}
         */
            function (options) {
                switch (options.appType && options.appType.toLowerCase()) {
                    case AppType.App:
                        if (!options.appId) {
                            window.alert('参数appId不能为空！');
                            return;
                        }
                        return this.appService.openAppByOptions$(options);
                    case AppType.Menu:
                        if (options.onlyGetIframeLink === true) {
                            return this.internalOpenByIframeLink$(options);
                        }
                        return this.internalOpen$(options);
                    case AppType.Other: break;
                }
            };
        /**
         * 打开联查菜单
         */
        /**
         * 打开联查菜单
         * @param {?} funcId
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.openConnectedFunc = /**
         * 打开联查菜单
         * @param {?} funcId
         * @param {?} options
         * @return {?}
         */
            function (funcId, options) {
                /** @type {?} */
                var appOps = {
                    appType: AppType.Menu,
                    funcId: funcId,
                    appId: '',
                    appEntrance: '',
                    entityParams: options.EntityParam,
                };
                this.internalOpen(appOps);
            };
        /**
         * 打开联查菜单，并传参
         */
        /**
         * 打开联查菜单，并传参
         * @param {?} funcId
         * @param {?} params
         * @param {?=} reload
         * @return {?}
         */
        FrameworkService.prototype.openFuncWithParam = /**
         * 打开联查菜单，并传参
         * @param {?} funcId
         * @param {?} params
         * @param {?=} reload
         * @return {?}
         */
            function (funcId, params, reload) {
                /** @type {?} */
                var options = {
                    appType: AppType.Menu,
                    funcId: funcId,
                    appId: '',
                    appEntrance: '',
                    entityParams: params,
                    queryStringParams: params,
                    isReload: reload
                };
                this.internalOpen(options);
            };
        /**
         * 打开功能，不返回流
         */
        /**
         * 打开功能，不返回流
         * @private
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.internalOpen = /**
         * 打开功能，不返回流
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                this.checkingBeforeOpen$(options)
                    .subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    if (!res || !res.func || res.linkobj) {
                        return;
                    }
                    /** @type {?} */
                    var func = res.func;
                    _this.getInvokeAndEnterFunc$(options, func).subscribe(( /**
                     * @param {?} lobj
                     * @return {?}
                     */function (lobj) { return _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, lobj); }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        /** @type {?} */
                        var info = {
                            isErr: true,
                            errInfo: err
                        };
                        _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, info);
                    }));
                }));
            };
        /**
         * 通过串流控制，打开菜单
         */
        /**
         * 通过串流控制，打开菜单
         * @private
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.internalOpen$ = /**
         * 通过串流控制，打开菜单
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                return this.checkingBeforeOpen$(options)
                    .pipe(operators.switchMap(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    if (!res || !res.func || res.linkobj) {
                        return rxjs.of(null);
                    }
                    /** @type {?} */
                    var func = res.func;
                    return _this.getInvokeAndEnterFunc$(options, func).pipe(operators.map(( /**
                     * @param {?} lobj
                     * @return {?}
                     */function (lobj) {
                        _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, lobj);
                        return true;
                    })));
                })));
            };
        /**
         * 通过串流获取被打开菜单的iframeLink对象信息
         */
        /**
         * 通过串流获取被打开菜单的iframeLink对象信息
         * @private
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.internalOpenByIframeLink$ = /**
         * 通过串流获取被打开菜单的iframeLink对象信息
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (!options.funcId) {
                    window.alert('参数funcId不能为空！');
                    return rxjs.of(null);
                }
                return this.getFuncEntity(options.funcId).pipe(operators.switchMap(( /**
                 * @param {?} func
                 * @return {?}
                 */function (func) {
                    if (!func) {
                        window.alert("\u8BF7\u786E\u8BA4\u60A8\u662F\u5426\u5177\u5907\u6253\u5F00\u83DC\u5355(ID:" + options.funcId + ")\u7684\u6743\u9650");
                        return null;
                    }
                    return _this.getInvokeAndEnterFunc$(options, func);
                })));
            };
        /**
         * @private
         * @param {?} options
         * @param {?} func
         * @return {?}
         */
        FrameworkService.prototype.getInvokeAndEnterFunc$ = /**
         * @private
         * @param {?} options
         * @param {?} func
         * @return {?}
         */
            function (options, func) {
                var _this = this;
                /** @type {?} */
                var newPageId = this.newPageId(options.funcId, options.tabId);
                options.tabId = newPageId;
                /** @type {?} */
                var linkobj;
                return this.getFuncInvok(options.funcId).pipe(operators.switchMap(( /**
                 * @param {?} funcInvok
                 * @return {?}
                 */function (funcInvok) {
                    /** @type {?} */
                    var routurl = funcInvok.invokingConfig.url;
                    /** @type {?} */
                    var paramInfo = funcInvok.invokingConfig.staticParams;
                    /** @type {?} */
                    var entityParamInfo = funcInvok.invokingConfig.entityParams;
                    /** @type {?} */
                    var staticParam = paramInfo ? JSON.parse(paramInfo) : '';
                    /** @type {?} */
                    var entityParam = entityParamInfo ? JSON.parse(entityParamInfo) : '';
                    /** @type {?} */
                    var su = _this.getSu(routurl);
                    return _this.enterFunc({
                        tabId: newPageId,
                        funcId: options.funcId,
                        menuName: options.tabName || func.name,
                        action: 'enter'
                    }, su).pipe(operators.map(( /**
                     * @param {?} formToken
                     * @return {?}
                     */function (formToken) {
                        linkobj = new IframeLink(func.code, null, _this.buildQueryStringByMap(routurl, options.funcId, options.tabId, formToken, options.queryStringParams));
                        linkobj.id = newPageId; // 页面唯一标识 允许页面重复打开
                        linkobj.appType = AppType.Menu;
                        linkobj.funcId = options.funcId;
                        linkobj.FuncName = options.tabName || func.name;
                        linkobj.url = funcInvok.invokingConfig.url;
                        linkobj.reload = options.isReload;
                        linkobj.su = su;
                        linkobj.isNewTab = options.isNewTab;
                        linkobj.formToken = formToken;
                        if (staticParam) {
                            // dky特殊场景，打开jquery原生功能
                            staticParam.forEach(( /**
                             * @param {?} item
                             * @return {?}
                             */function (item) {
                                if (item.name === 'jquery') {
                                    linkobj.isjquery = true;
                                }
                                if (item.name === 'mode') {
                                    linkobj.mode = item.value;
                                    linkobj.src += (item.value ? "&appMode=" + item.value + "&" : '');
                                }
                            }));
                        }
                        // 大对象实体传参，针对被打开页面建立唯一管道
                        _this.getFeb().post(newPageId, options.entityParams);
                        // this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
                        return linkobj;
                    })), operators.switchMap(( /**
                     * @param {?} formLink
                     * @return {?}
                     */function (formLink) {
                        return _this.i18nSetting.getSetting$().pipe(operators.map(( /**
                         * @return {?}
                         */function () { return formLink; })));
                    })));
                })));
            };
        /**
         * 流方式检查菜单打开状态
         */
        /**
         * 流方式检查菜单打开状态
         * @private
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.checkingBeforeOpen$ = /**
         * 流方式检查菜单打开状态
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (!options.funcId) {
                    window.alert('参数funcId不能为空！');
                    return rxjs.of(null);
                }
                return this.getFuncEntity(options.funcId).pipe(operators.map(( /**
                 * @param {?} func
                 * @return {?}
                 */function (func) {
                    if (!func) {
                        window.alert("\u8BF7\u786E\u8BA4\u60A8\u662F\u5426\u5177\u5907\u6253\u5F00\u83DC\u5355(ID:" + options.funcId + ")\u7684\u6743\u9650");
                        return null;
                    }
                    /** @type {?} */
                    var funcId = options.funcId;
                    /** @type {?} */
                    var tabId = options.tabId;
                    /** @type {?} */
                    var pageId = _this.getPageId(funcId, tabId);
                    /** @type {?} */
                    var linkobj = FrmUtil.getTabArray().find(( /**
                     * @param {?} i
                     * @return {?}
                     */function (i) { return i.id === pageId && i.appType === AppType.Menu; }));
                    if (linkobj) {
                        linkobj.FuncName = options.tabName || linkobj.FuncName;
                        linkobj.src = _this.buildQueryStringByMap(linkobj.url, funcId, options.tabId, '', options.queryStringParams);
                        linkobj.reload = options.isReload; // 界面刷新不改session
                        _this.getFeb().post(pageId, options.entityParams);
                        _this.getFeb().post(EventUtil.FARRIS_APP_CLICK, linkobj);
                    }
                    return { func: func, linkobj: linkobj };
                })));
            };
        /**
         * 关闭前
         */
        /**
         * 关闭前
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.beforeCloseMenu = /**
         * 关闭前
         * @param {?} options
         * @return {?}
         */
            function (options) {
                switch (options.appType && options.appType.toLowerCase()) {
                    case AppType.App:
                        this.appService.beforeCloseAppByOptions(options);
                        break;
                    case AppType.Menu:
                        this.beforeCloseFuncByOptions(options);
                        break;
                    default: break;
                }
            };
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.beforeCloseFuncByOptions = /**
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var func = this.funcService.getCachedFunc(options.funcId);
                /** @type {?} */
                var funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
                /** @type {?} */
                var pageId = this.getPageId(options.funcId, options.tabId);
                /** @type {?} */
                var obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(funcObkey);
                if (!obs) {
                    this.closeFuncByOptions(options);
                    return;
                }
                /** @type {?} */
                var eventArgs = {
                    tabId: pageId,
                    appType: AppType.Menu,
                    funcId: options.funcId,
                    tabName: func && func.Name,
                    beforeCloseHandle: options.beforeCloseHandle
                };
                this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
            };
        /**
         * 菜单关闭前事件触发(无 token)
         */
        /**
         * 菜单关闭前事件触发(无 token)
         * @param {?} funcId
         * @param {?=} tabId
         * @return {?}
         */
        FrameworkService.prototype.beforeCloseFunc = /**
         * 菜单关闭前事件触发(无 token)
         * @param {?} funcId
         * @param {?=} tabId
         * @return {?}
         */
            function (funcId, tabId) {
                /** @type {?} */
                var func = this.funcService.getCachedFunc(funcId);
                /** @type {?} */
                var funcObkey = EventUtil.funcObsToken(funcId, tabId);
                /** @type {?} */
                var obs = EventUtil.getObserver(EventUtil.BEFORE_FUNC_CLOSE).get(funcObkey);
                if (!obs) {
                    this.closeFunc(funcId, tabId);
                    return;
                }
                /** @type {?} */
                var eventArgs = {
                    tabId: this.getPageId(funcId, tabId),
                    appType: AppType.Menu,
                    funcId: funcId,
                    tabName: func && func.Name
                };
                this.getFeb().post(EventUtil.BEFORE_FUNC_CLOSE, eventArgs);
            };
        /**
         * 直接关闭
         *
         */
        /**
         * 直接关闭
         *
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.closeMenu = /**
         * 直接关闭
         *
         * @param {?} options
         * @return {?}
         */
            function (options) {
                switch (options.appType && options.appType.toLowerCase()) {
                    case AppType.App:
                        this.appService.closeAppByOptions(options).subscribe();
                        break;
                    case AppType.Menu:
                        this.closeFuncByOptions(options);
                        break;
                    default: break;
                }
            };
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        FrameworkService.prototype.closeFuncByOptions = /**
         * @private
         * @param {?} options
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var pageId = this.getPageId(options.funcId, options.tabId);
                EventUtil.clearObserver(EventUtil.funcObsToken(options.funcId, options.tabId));
                EventUtil.clearEventPipe(pageId); // 当前页面大对象传参会有唯一的管道
                // 当前页面大对象传参会有唯一的管道
                /** @type {?} */
                var func = this.funcService.getCachedFunc(options.funcId);
                /** @type {?} */
                var objIndex = FrmUtil.getTabArray().findIndex(( /**
                 * @param {?} i
                 * @return {?}
                 */function (i) { return i.id === pageId && i.appType === AppType.Menu; }));
                /** @type {?} */
                var obj = FrmUtil.getTabArray()[objIndex];
                options.token = options.token || obj.formToken;
                /** @type {?} */
                var su = options.su;
                if (obj) {
                    su = obj.su;
                    FrmUtil.removeTab(objIndex);
                    /** @type {?} */
                    var eventArgs = {
                        tabId: pageId,
                        appType: AppType.Menu,
                        funcId: options.funcId,
                        tabName: func && func.name
                    };
                    this.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
                }
                this.quitFunc(options, su)
                    .subscribe(( /**
             * @return {?}
             */function () { }));
            };
        /**
         * 关闭菜单tab页签，tabId可以指定，默认为funcId
         */
        /**
         * 关闭菜单tab页签，tabId可以指定，默认为funcId
         * @param {?} funcId
         * @param {?=} tabId
         * @return {?}
         */
        FrameworkService.prototype.closeFunc = /**
         * 关闭菜单tab页签，tabId可以指定，默认为funcId
         * @param {?} funcId
         * @param {?=} tabId
         * @return {?}
         */
            function (funcId, tabId) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var pageId = this.getPageId(funcId, tabId);
                EventUtil.clearObserver(EventUtil.funcObsToken(funcId, tabId));
                EventUtil.clearEventPipe(pageId); // 当前页面大对象传参会有唯一的管道
                // 当前页面大对象传参会有唯一的管道
                /** @type {?} */
                var func = this.funcService.getCachedFunc(funcId);
                /** @type {?} */
                var objIndex = FrmUtil.getTabArray().findIndex(( /**
                 * @param {?} i
                 * @return {?}
                 */function (i) { return i.id === pageId && i.appType === AppType.Menu; }));
                /** @type {?} */
                var obj = FrmUtil.getTabArray()[objIndex];
                /** @type {?} */
                var formToken = obj.formToken;
                if (obj) {
                    FrmUtil.removeTab(objIndex);
                    /** @type {?} */
                    var eventArgs = {
                        tabId: pageId,
                        appType: AppType.Menu,
                        funcId: funcId,
                        tabName: func && func.name
                    };
                    self.getFeb().post(EventUtil.FUNC_CLOSED, eventArgs);
                }
                /** @type {?} */
                var options = {
                    tabId: tabId,
                    funcId: funcId,
                    appId: '',
                    appEntrance: '',
                    appType: AppType.Menu,
                    token: formToken,
                };
                this.quitFunc(options, obj.su)
                    .subscribe(( /**
             * @return {?}
             */function () { }));
                return rxjs.of(true);
            };
        /**
         * 获取菜单的调用信息
         */
        /**
         * 获取菜单的调用信息
         * @param {?} funcId
         * @return {?}
         */
        FrameworkService.prototype.getFuncInvok = /**
         * 获取菜单的调用信息
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                var _this = this;
                /** @type {?} */
                var invoks = this.getInvokCache();
                /** @type {?} */
                var funcInvok = invoks.find(( /**
                 * @param {?} f
                 * @return {?}
                 */function (f) { return f.id === funcId; }));
                if (!funcInvok) {
                    return this.getInvokConfig(funcId).pipe(operators.map(( /**
                     * @param {?} v
                     * @return {?}
                     */function (v) {
                        if (!v) {
                            return null;
                        }
                        invoks.push(v);
                        _this.funcService.cacheAllFuncInvoks(invoks);
                        return v;
                    })));
                }
                return rxjs.of(funcInvok);
            };
        /**
         * 获取菜单实体
         */
        /**
         * 获取菜单实体
         * @param {?} funcId
         * @return {?}
         */
        FrameworkService.prototype.getFuncEntity = /**
         * 获取菜单实体
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                var _this = this;
                /** @type {?} */
                var func = this.funcService.getCachedFunc(funcId);
                if (!func) {
                    /** @type {?} */
                    var url = "/api/runtime/sys/v1.0/functions/" + funcId;
                    return this.http.request('Get', url, FrmUtil.setHeader(null, {}))
                        .pipe(operators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) {
                        if (!v || !v[0]) {
                            return null;
                        }
                        /** @type {?} */
                        var allFuncs = ( /** @type {?} */(_this.funcService.getAllCachedFuncs()));
                        allFuncs.push(v[0]);
                        _this.funcService.cacheAllFuncs(allFuncs);
                        return v[0];
                    })));
                }
                return rxjs.of(func);
            };
        /**
         * 获取菜单预置参数
         */
        /**
         * 获取菜单预置参数
         * @param {?} funcId
         * @return {?}
         */
        FrameworkService.prototype.getPresetParams = /**
         * 获取菜单预置参数
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                var _this = this;
                return this.getFuncInvok(funcId).pipe(operators.map(( /**
                 * @param {?} funcInvok
                 * @return {?}
                 */function (funcInvok) {
                    /** @type {?} */
                    var paramInfo = funcInvok.invokingConfig.staticParams;
                    /** @type {?} */
                    var entityParamInfo = funcInvok.invokingConfig.entityParams;
                    /** @type {?} */
                    var staticParam = paramInfo ? JSON.parse(paramInfo) : [];
                    /** @type {?} */
                    var entityParam = entityParamInfo ? JSON.parse(entityParamInfo) : [];
                    return _this.mergeParams(staticParam, entityParam);
                })));
            };
        /**
         * 获取菜单的静态参数
         */
        /**
         * 获取菜单的静态参数
         * @param {?} funcId
         * @return {?}
         */
        FrameworkService.prototype.getStaticParam = /**
         * 获取菜单的静态参数
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                return this.getFuncInvok(funcId).pipe(operators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) {
                    if (v.invokingConfig.staticParams) {
                        return JSON.parse(v.invokingConfig.staticParams);
                    }
                })));
            };
        /**
         * 获取表单的实体参数
         */
        /**
         * 获取表单的实体参数
         * @param {?} tabId
         * @param {?} handler
         * @param {?=} isSubonce
         * @return {?}
         */
        FrameworkService.prototype.getEntityParam = /**
         * 获取表单的实体参数
         * @param {?} tabId
         * @param {?} handler
         * @param {?=} isSubonce
         * @return {?}
         */
            function (tabId, handler, isSubonce) {
                if (isSubonce === void 0) {
                    isSubonce = true;
                }
                if (isSubonce) {
                    this.getFeb().once(tabId, handler);
                }
                this.getFeb().on(tabId, handler);
            };
        /**
         * @param {?} funcId
         * @return {?}
         */
        FrameworkService.prototype.entityParamUnsub = /**
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                this.getFeb().unSubscribe(funcId);
            };
        /**
         * 获取某菜单的实体参数结构
         */
        /**
         * 获取某菜单的实体参数结构
         * @param {?} funcId
         * @return {?}
         */
        FrameworkService.prototype.getEntityParamStructure = /**
         * 获取某菜单的实体参数结构
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                return this.getFuncInvok(funcId).pipe(operators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) {
                    if (v.invokingConfig.entityParams) {
                        return JSON.parse(v.invokingConfig.entityParams);
                    }
                })));
            };
        /**
         * @private
         * @param {?} staticParam
         * @param {?} entityParam
         * @return {?}
         */
        FrameworkService.prototype.mergeParams = /**
         * @private
         * @param {?} staticParam
         * @param {?} entityParam
         * @return {?}
         */
            function (staticParam, entityParam) {
                /** @type {?} */
                var paraMap = new Map();
                if (entityParam) {
                    entityParam.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        paraMap.set(item.name, item.value);
                    }));
                }
                if (staticParam) {
                    // func上对app参数复用
                    staticParam.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        paraMap.set(item.name, item.value);
                    }));
                }
                return paraMap;
            };
        /**
         * @private
         * @param {?} funcId
         * @return {?}
         */
        FrameworkService.prototype.getInvokConfig = /**
         * @private
         * @param {?} funcId
         * @return {?}
         */
            function (funcId) {
                /** @type {?} */
                var url = "/api/runtime/sys/v1.0/functions/funcInvok/" + funcId;
                return this.http.request('Get', url, FrmUtil.setHeader(null, {}));
            };
        /**
         * @private
         * @return {?}
         */
        FrameworkService.prototype.getInvokCache = /**
         * @private
         * @return {?}
         */
            function () {
                return this.funcService.getAllCachedFuncInvoks();
            };
        /**
         * 获取框架eventbus
         */
        /**
         * 获取框架eventbus
         * @private
         * @return {?}
         */
        FrameworkService.prototype.getFeb = /**
         * 获取框架eventbus
         * @private
         * @return {?}
         */
            function () {
                return EventUtil.getFrmEvent();
            };
        /**
         * 构造功能及session
         * (1912 funcSession移除后，接口不再提供)
         */
        /**
         * 构造功能及session
         * (1912 funcSession移除后，接口不再提供)
         * @param {?} funcId
         * @param {?=} su
         * @return {?}
         */
        FrameworkService.prototype.buildFuncSession = /**
         * 构造功能及session
         * (1912 funcSession移除后，接口不再提供)
         * @param {?} funcId
         * @param {?=} su
         * @return {?}
         */
            function (funcId, su) {
                /** @type {?} */
                var self = this;
                /** @type {?} */
                var userSession = this.sessionSvc.getUserSessionId();
                /** @type {?} */
                var body = {
                    token: userSession,
                    funcId: funcId,
                    action: 'enter'
                };
                /** @type {?} */
                var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
                return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(userSession, { body: body })).pipe(operators.map(( /**
                 * @param {?} v
                 * @return {?}
                 */function (v) {
                    /** @type {?} */
                    var ss = v.sessionId;
                    if (ss !== undefined && ss !== null && ss.length > 0) {
                        self.sessionSvc.setFuncSessionId(funcId, ss);
                    }
                    return ss;
                })));
            };
        /**
         * 进入功能，触发服务端逻辑
         * 移除funcSession
         * 返回公共变量token
         */
        /**
         * 进入功能，触发服务端逻辑
         * 移除funcSession
         * 返回公共变量token
         * @private
         * @param {?} enterParam
         * @param {?} su
         * @return {?}
         */
        FrameworkService.prototype.enterFunc = /**
         * 进入功能，触发服务端逻辑
         * 移除funcSession
         * 返回公共变量token
         * @private
         * @param {?} enterParam
         * @param {?} su
         * @return {?}
         */
            function (enterParam, su) {
                /** @type {?} */
                var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
                return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: enterParam }))
                    .pipe(operators.map(( /**
             * @param {?} v
             * @return {?}
             */function (v) {
                    return v.token || v.sessionId;
                })));
            };
        /**
         * 退出功能，如果存在bizContext，则移除
         */
        /**
         * 退出功能，如果存在bizContext，则移除
         * @private
         * @param {?} options
         * @param {?} su
         * @return {?}
         */
        FrameworkService.prototype.quitFunc = /**
         * 退出功能，如果存在bizContext，则移除
         * @private
         * @param {?} options
         * @param {?} su
         * @return {?}
         */
            function (options, su) {
                /** @type {?} */
                var body = {
                    token: options.token,
                    tabId: options.tabId,
                    funcId: options.funcId,
                    action: 'quit'
                };
                /** @type {?} */
                var bizContextUrl = this.FUNCSTATUS_PATH + (!su ? '' : "?su=" + su);
                return this.http.request('Post', bizContextUrl, FrmUtil.setHeader(null, { body: body }));
            };
        /**
         * 获取当前应用所属su
         */
        /**
         * 获取当前应用所属su
         * @private
         * @param {?} url
         * @return {?}
         */
        FrameworkService.prototype.getSu = /**
         * 获取当前应用所属su
         * @private
         * @param {?} url
         * @return {?}
         */
            function (url) {
                /** @type {?} */
                var uriArr = url.split('/');
                return uriArr.length > 3 ? uriArr[3] : '';
            };
        /**
         * iframe url拼接 querystring 参数
         */
        /**
         * iframe url拼接 querystring 参数
         * @private
         * @param {?} routurl
         * @param {?} funcId
         * @param {?} params
         * @return {?}
         */
        FrameworkService.prototype.buildQueryString = /**
         * iframe url拼接 querystring 参数
         * @private
         * @param {?} routurl
         * @param {?} funcId
         * @param {?} params
         * @return {?}
         */
            function (routurl, funcId, params) {
                if (routurl.indexOf('?') < 0) {
                    routurl += "?funcId=" + funcId;
                }
                else {
                    routurl += "&funcId=" + funcId;
                }
                if (params) {
                    Object.keys(params).forEach(( /**
                     * @param {?} propName
                     * @param {?} index
                     * @return {?}
                     */function (propName, index) {
                        routurl += "" + (index === 0 ? '' : '&') + propName + "=" + params[propName];
                    }));
                }
                return routurl;
            };
        /**
         * url 拼接map格式的参数
         */
        /**
         * url 拼接map格式的参数
         * @private
         * @param {?} routurl
         * @param {?} funcId
         * @param {?} tabId
         * @param {?} token
         * @param {?} params
         * @return {?}
         */
        FrameworkService.prototype.buildQueryStringByMap = /**
         * url 拼接map格式的参数
         * @private
         * @param {?} routurl
         * @param {?} funcId
         * @param {?} tabId
         * @param {?} token
         * @param {?} params
         * @return {?}
         */
            function (routurl, funcId, tabId, token, params) {
                if (routurl.indexOf('?') < 0) {
                    routurl += "?funcId=" + funcId;
                }
                else {
                    routurl += "&funcId=" + funcId;
                }
                routurl += "&appType=" + AppType.Menu;
                routurl += "&tabId=" + this.getPageId(funcId, tabId);
                routurl += !token ? '' : "&cvft=" + token;
                if (params) {
                    params.forEach(( /**
                     * @param {?} value
                     * @param {?} key
                     * @return {?}
                     */function (value, key) {
                        routurl += !key ? '' : "&" + key + "=" + value;
                    }));
                }
                return routurl;
            };
        /**
         * 获取当前菜单页面的唯一标识
         */
        /**
         * 获取当前菜单页面的唯一标识
         * @private
         * @param {?} funcId
         * @param {?} tabId
         * @return {?}
         */
        FrameworkService.prototype.getPageId = /**
         * 获取当前菜单页面的唯一标识
         * @private
         * @param {?} funcId
         * @param {?} tabId
         * @return {?}
         */
            function (funcId, tabId) {
                return tabId || funcId;
            };
        /**
         * 页面第一次被打开时，生成唯一标识
         */
        /**
         * 页面第一次被打开时，生成唯一标识
         * @private
         * @param {?} funcId
         * @param {?} tabId
         * @return {?}
         */
        FrameworkService.prototype.newPageId = /**
         * 页面第一次被打开时，生成唯一标识
         * @private
         * @param {?} funcId
         * @param {?} tabId
         * @return {?}
         */
            function (funcId, tabId) {
                return tabId ? funcId + "_" + tabId : funcId;
            };
        /**
         * @param {?} token
         * @param {?} args
         * @return {?}
         */
        FrameworkService.prototype.eventFire = /**
         * @param {?} token
         * @param {?} args
         * @return {?}
         */
            function (token, args) {
                /** @type {?} */
                var feb = EventUtil.getFrmEvent();
                if (!feb || typeof feb.post !== 'function') {
                    return;
                }
                feb.post(token, args);
            };
        /**
         * @param {?} token
         * @param {?} handler
         * @param {?=} options
         * @return {?}
         */
        FrameworkService.prototype.eventListner = /**
         * @param {?} token
         * @param {?} handler
         * @param {?=} options
         * @return {?}
         */
            function (token, handler, options) {
                /** @type {?} */
                var feb = EventUtil.getFrmEvent();
                if (!feb || typeof feb.on !== 'function') {
                    return;
                }
                // 菜单监听者必须要声明自己的身份，方便框架管理
                if (options && options.appType) {
                    switch (options.appType.toLowerCase()) {
                        case AppType.App:
                            /** @type {?} */
                            var appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                            feb.onWithObkey(token, appObkey, handler);
                            return;
                        case AppType.Menu:
                            /** @type {?} */
                            var funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
                            feb.onWithObkey(token, funcObkey, handler);
                            return;
                        default: break;
                    }
                }
                feb.on(token, handler);
            };
        /** 创建监听订阅, 维护一个监听者列表，针对菜单触发事件 */
        /**
         * 创建监听订阅, 维护一个监听者列表，针对菜单触发事件
         * @param {?} token
         * @param {?} funcId
         * @param {?} handler
         * @return {?}
         */
        FrameworkService.prototype.eventListner4Func = /**
         * 创建监听订阅, 维护一个监听者列表，针对菜单触发事件
         * @param {?} token
         * @param {?} funcId
         * @param {?} handler
         * @return {?}
         */
            function (token, funcId, handler) {
                /** @type {?} */
                var feb = EventUtil.getFrmEvent();
                if (!feb || typeof feb.on !== 'function') {
                    return;
                }
                feb.onWithObkey(token, funcId, handler);
            };
        /** 创建监听订阅, 维护一个监听者列表，针对应用触发事件 */
        /**
         * 创建监听订阅, 维护一个监听者列表，针对应用触发事件
         * @param {?} token
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} handler
         * @return {?}
         */
        FrameworkService.prototype.eventListner4App = /**
         * 创建监听订阅, 维护一个监听者列表，针对应用触发事件
         * @param {?} token
         * @param {?} appId
         * @param {?} appEntrance
         * @param {?} handler
         * @return {?}
         */
            function (token, appId, appEntrance, handler) {
                /** @type {?} */
                var feb = EventUtil.getFrmEvent();
                if (!feb || typeof feb.on !== 'function') {
                    return;
                }
                /** @type {?} */
                var appObkey = EventUtil.appObsToken(appId, appEntrance);
                feb.onWithObkey(token, appObkey, handler);
            };
        FrameworkService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FrameworkService.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService },
                { type: router.Router },
                { type: cafCommon.CacheService },
                { type: cafCommon.SessionService },
                { type: FrmEventBus },
                { type: FuncsService },
                { type: LoadingService },
                { type: AppService, decorators: [{ type: i0.Optional }] },
                { type: FrmI18nSettingService, decorators: [{ type: i0.Optional }] }
            ];
        };
        return FrameworkService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FrameworkEventService = /** @class */ (function () {
        function FrameworkEventService(feb) {
            this.feb = feb;
            this.FarrisApps = EventUtil.FARRIS_APPS;
            this.FarrisAppClick = EventUtil.FARRIS_APP_CLICK;
            this.AllGspFuncs = EventUtil.ALL_GSP_FUNCS;
            this.BeforeFuncClose = EventUtil.BEFORE_FUNC_CLOSE;
            this.FuncClosed = EventUtil.FUNC_CLOSED;
            this.FuncSwitch = EventUtil.FUNC_SWITCH;
            this.AfterFrameLoad = EventUtil.AFTER_FRAME_LOAD;
            /** @type {?} */
            var eventBusEntity = EventUtil.getFrmEvent();
            if (!eventBusEntity) {
                EventUtil.setFrmEvent(this.feb || new FrmEventBus());
                this.eventInitial();
            }
        }
        /**
         * @param {?} token
         * @param {?} args
         * @return {?}
         */
        FrameworkEventService.prototype.eventFire = /**
         * @param {?} token
         * @param {?} args
         * @return {?}
         */
            function (token, args) {
                /** @type {?} */
                var feb = EventUtil.getFrmEvent();
                if (!feb || typeof feb.post !== 'function') {
                    return;
                }
                feb.post(token, args);
            };
        /**
         * @param {?} token
         * @param {?} handler
         * @param {?=} options
         * @return {?}
         */
        FrameworkEventService.prototype.eventListner = /**
         * @param {?} token
         * @param {?} handler
         * @param {?=} options
         * @return {?}
         */
            function (token, handler, options) {
                /** @type {?} */
                var feb = EventUtil.getFrmEvent();
                if (!feb || typeof feb.on !== 'function') {
                    return;
                }
                // 菜单监听者必须要声明自己的身份，方便框架管理
                if (options && options.appType) {
                    switch (options.appType.toLowerCase()) {
                        case AppType.App:
                            /** @type {?} */
                            var appObkey = EventUtil.appObsToken(options.appId, options.appEntrance, options.tabId);
                            feb.onWithObkey(token, appObkey, handler);
                            return;
                        case AppType.Menu:
                            /** @type {?} */
                            var funcObkey = EventUtil.funcObsToken(options.funcId, options.tabId);
                            feb.onWithObkey(token, funcObkey, handler);
                            return;
                        default: break;
                    }
                }
                feb.on(token, handler);
            };
        /**
         * @private
         * @return {?}
         */
        FrameworkEventService.prototype.eventInitial = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var feb = EventUtil.getFrmEvent();
                if (!feb || typeof feb.post !== 'function') {
                    return;
                }
                feb.post(this.FarrisApps, null);
                feb.post(this.FarrisAppClick, null);
                feb.post(this.AllGspFuncs, null);
                feb.initialPipe(this.FuncClosed, new rxjs.Subject());
                feb.initialPipe(this.FuncSwitch, new rxjs.Subject());
                feb.initialPipe(this.BeforeFuncClose, new rxjs.Subject());
                feb.initialPipe(this.AfterFrameLoad, new rxjs.Subject());
            };
        FrameworkEventService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FrameworkEventService.ctorParameters = function () {
            return [
                { type: FrmEventBus }
            ];
        };
        return FrameworkEventService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BroadcastingStationService = /** @class */ (function () {
        function BroadcastingStationService() {
            this.frmSubject = 'frmBroadcast-subjects';
            this.frmVariableService = new FrameworkVariableService();
            this.subjectMaps = this.frmVariableService.getFrmVariableByKey(this.frmSubject) || new Map();
        }
        /**
         * 注册主题，并获取当前主题唯一标识token
         * @param subjectCode 主题编码，建议有明确含义，方便确认当前主题的职责
         * code不是唯一标识，即使相同code每次注册都会生成一个新的主题，返回值token是唯一标识
         * @param options 主题注册操作，可以直接对于菜单 或 应用注册主题
         * @param customSub 自定义主题，如果为null或者不传，默认为Subject
         */
        /**
         * 注册主题，并获取当前主题唯一标识token
         * @param {?} subjectCode 主题编码，建议有明确含义，方便确认当前主题的职责
         * code不是唯一标识，即使相同code每次注册都会生成一个新的主题，返回值token是唯一标识
         * @param {?} options 主题注册操作，可以直接对于菜单 或 应用注册主题
         * @param {?=} customSub 自定义主题，如果为null或者不传，默认为Subject
         * @return {?}
         */
        BroadcastingStationService.prototype.subjectRegister = /**
         * 注册主题，并获取当前主题唯一标识token
         * @param {?} subjectCode 主题编码，建议有明确含义，方便确认当前主题的职责
         * code不是唯一标识，即使相同code每次注册都会生成一个新的主题，返回值token是唯一标识
         * @param {?} options 主题注册操作，可以直接对于菜单 或 应用注册主题
         * @param {?=} customSub 自定义主题，如果为null或者不传，默认为Subject
         * @return {?}
         */
            function (subjectCode, options, customSub) {
                if (!customSub) {
                    customSub = new rxjs.Subject();
                }
                /** @type {?} */
                var token;
                if (options && options.funcId) {
                    token = options.funcId;
                }
                else if (options && options.appId && options.appEntrance) {
                    token = options.appId + "-" + options.appEntrance;
                }
                else {
                    token = this.createToken();
                }
                /** @type {?} */
                var pipe = new EventBusPipe(token, null, customSub);
                pipe.pipeCode = subjectCode;
                this.subjectMaps.set(token, pipe);
                this.frmVariableService.frameworkVariableReg(this.frmSubject, this.subjectMaps);
                return token;
            };
        /**
         * 注册主题，可直接获取主题实体，
         * 框架不托管维护，常用于适配层上事件扩展机制
         * @param options 注册参数
         * @param customSub 是否自定义主题
         */
        /**
         * 注册主题，可直接获取主题实体，
         * 框架不托管维护，常用于适配层上事件扩展机制
         * @param {?} options 注册参数
         * @param {?=} customSub 是否自定义主题
         * @return {?}
         */
        BroadcastingStationService.prototype.customSubjectRegister = /**
         * 注册主题，可直接获取主题实体，
         * 框架不托管维护，常用于适配层上事件扩展机制
         * @param {?} options 注册参数
         * @param {?=} customSub 是否自定义主题
         * @return {?}
         */
            function (options, customSub) {
                /** @type {?} */
                var subMap = new Map();
                if (!customSub) {
                    customSub = new rxjs.Subject();
                }
                /** @type {?} */
                var token;
                if (options && options.customToken) {
                    token = options.customToken;
                }
                else if (options && options.funcId) {
                    token = options.funcId;
                }
                else if (options && options.appId && options.appEntrance) {
                    token = options.appId + "-" + options.appEntrance;
                }
                else {
                    token = this.createToken();
                }
                /** @type {?} */
                var pipe = new EventBusPipe(token, null, customSub);
                subMap.set(token, pipe);
                return subMap;
            };
        /**
         * 删除主题
         * @param subjectToken 主题唯一标识
         */
        /**
         * 删除主题
         * @param {?} subjectToken 主题唯一标识
         * @return {?}
         */
        BroadcastingStationService.prototype.subjectRemove = /**
         * 删除主题
         * @param {?} subjectToken 主题唯一标识
         * @return {?}
         */
            function (subjectToken) {
                this.subjectMaps.delete(subjectToken);
                this.frmVariableService.frameworkVariableReg(this.frmSubject, this.subjectMaps);
            };
        /**
         * 通过某个主题发送消息
         * @param subjectToken 主题唯一的token标识
         * @param info 要发送的消息
         */
        /**
         * 通过某个主题发送消息
         * @param {?} subjectToken 主题唯一的token标识
         * @param {?} info 要发送的消息
         * @return {?}
         */
        BroadcastingStationService.prototype.notify = /**
         * 通过某个主题发送消息
         * @param {?} subjectToken 主题唯一的token标识
         * @param {?} info 要发送的消息
         * @return {?}
         */
            function (subjectToken, info) {
                /** @type {?} */
                var sub = this.getSubject(subjectToken);
                if (!sub) {
                    return;
                }
                sub.post(info);
            };
        /**
         * 为主题添加观察者，并监听主题消息
         * @param subjectToken 主题token
         * @param observerToken 当前监听主题的观察者唯一标识token
         * @param handler 观察者监听到主题消息时要执行的动作
         */
        /**
         * 为主题添加观察者，并监听主题消息
         * @param {?} subjectToken 主题token
         * @param {?} observerToken 当前监听主题的观察者唯一标识token
         * @param {?} handler 观察者监听到主题消息时要执行的动作
         * @return {?}
         */
        BroadcastingStationService.prototype.response = /**
         * 为主题添加观察者，并监听主题消息
         * @param {?} subjectToken 主题token
         * @param {?} observerToken 当前监听主题的观察者唯一标识token
         * @param {?} handler 观察者监听到主题消息时要执行的动作
         * @return {?}
         */
            function (subjectToken, observerToken, handler) {
                /** @type {?} */
                var sub = this.getSubject(subjectToken);
                if (!sub) {
                    return;
                }
                sub.subscribeWithObkey(observerToken, handler);
            };
        /**
         * 观察者取消对主题的订阅
         * @param subjectToken 主题唯一标识
         * @param observerToken 观察者唯一标识
         */
        /**
         * 观察者取消对主题的订阅
         * @param {?} subjectToken 主题唯一标识
         * @param {?} observerToken 观察者唯一标识
         * @return {?}
         */
        BroadcastingStationService.prototype.responseUnSubscribe = /**
         * 观察者取消对主题的订阅
         * @param {?} subjectToken 主题唯一标识
         * @param {?} observerToken 观察者唯一标识
         * @return {?}
         */
            function (subjectToken, observerToken) {
                /** @type {?} */
                var sub = this.getSubject(subjectToken);
                if (!sub) {
                    return;
                }
                sub.unSubscribeWithObkey(observerToken);
            };
        /**
         * @private
         * @param {?} subjectToken
         * @return {?}
         */
        BroadcastingStationService.prototype.getSubject = /**
         * @private
         * @param {?} subjectToken
         * @return {?}
         */
            function (subjectToken) {
                return this.subjectMaps.get(subjectToken);
            };
        /**
         * 创建唯一token
         */
        /**
         * 创建唯一token
         * @private
         * @return {?}
         */
        BroadcastingStationService.prototype.createToken = /**
         * 创建唯一token
         * @private
         * @return {?}
         */
            function () {
                // tslint:disable-next-line: only-arrow-functions
                /** @type {?} */
                var S4 = ( /**
                 * @return {?}
                 */function () {
                    // tslint:disable-next-line:no-bitwise
                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                });
                return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
            };
        BroadcastingStationService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        BroadcastingStationService.ctorParameters = function () { return []; };
        /** @nocollapse */ BroadcastingStationService.ngInjectableDef = i0.defineInjectable({ factory: function BroadcastingStationService_Factory() { return new BroadcastingStationService(); }, token: BroadcastingStationService, providedIn: "root" });
        return BroadcastingStationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FunctionResolver = /** @class */ (function () {
        function FunctionResolver(router$$1, feb) {
            this.router = router$$1;
            this.feb = feb;
        }
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        FunctionResolver.prototype.resolve = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                var _this = this;
                /** @type {?} */
                var id = route.paramMap.get('funcid');
                this.editvalue = null;
                this.feb.on('frmopenfunc', ( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    _this.editvalue = value;
                }));
                return rxjs.of(this.editvalue);
            };
        FunctionResolver.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        FunctionResolver.ctorParameters = function () {
            return [
                { type: router.Router },
                { type: FrmEventBus }
            ];
        };
        return FunctionResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // export function loadingFactory(app: ApplicationRef, cfr: ComponentFactoryResolver, injector: Injector) {
    //     return new LoadingService(app, cfr, injector);
    // }
    var LoadingModule = /** @class */ (function () {
        function LoadingModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        LoadingModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                // const _config = config ? Object.assign({}, loaddingDefaultConfig, config) : loaddingDefaultConfig;
                return {
                    ngModule: LoadingModule,
                    providers: [
                        { provide: LOADING_DEFAULT_CONFIG, useValue: config || loaddingDefaultConfig },
                        LoadingService
                        // { provide: LoadingService, useFactory: loadingFactory, deps: [ApplicationRef, ComponentFactoryResolver, Injector] }
                    ]
                };
            };
        LoadingModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            LoadingComponent
                        ],
                        entryComponents: [
                            LoadingComponent
                        ]
                    },] }
        ];
        return LoadingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.CommonSharedModule = CommonSharedModule;
    exports.FuncsService = FuncsService;
    exports.FrameworkService = FrameworkService;
    exports.AppService = AppService;
    exports.FrameworkEventService = FrameworkEventService;
    exports.FrameworkVariableService = FrameworkVariableService;
    exports.BroadcastingStationService = BroadcastingStationService;
    exports.FrmI18nSettingService = FrmI18nSettingService;
    exports.FunctionResolver = FunctionResolver;
    exports.EventBusPipe = EventBusPipe;
    exports.FrmEventBus = FrmEventBus;
    exports.LoadingModule = LoadingModule;
    exports.LoadingService = LoadingService;
    exports.AppType = AppType;
    exports.IframeLink = IframeLink;
    exports.ɵa = LoadingComponent;
    exports.ɵc = LOADING_DEFAULT_CONFIG;
    exports.ɵb = loaddingDefaultConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-sys-rtf-common.umd.js.map