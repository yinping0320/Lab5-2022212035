(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ecp-caf/caf-common'), require('@angular/common'), require('@angular/common/http'), require('@progress/kendo-angular-grid'), require('@angular/forms'), require('@progress/kendo-angular-layout'), require('@progress/kendo-angular-treeview'), require('@progress/kendo-angular-buttons'), require('@farris/ui-modal'), require('@farris/ui-layout'), require('@farris/ui-lookup'), require('@farris/ui-panel'), require('@farris/ui-treetable'), require('@farris/ui-datatable'), require('@farris/ui-datagrid'), require('@farris/devkit'), require('rxjs/observable/of'), require('@farris/ui-notify'), require('@farris/ui-messager'), require('rxjs'), require('@ngx-translate/core'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@gsp-sys/rac-common', ['exports', '@ecp-caf/caf-common', '@angular/common', '@angular/common/http', '@progress/kendo-angular-grid', '@angular/forms', '@progress/kendo-angular-layout', '@progress/kendo-angular-treeview', '@progress/kendo-angular-buttons', '@farris/ui-modal', '@farris/ui-layout', '@farris/ui-lookup', '@farris/ui-panel', '@farris/ui-treetable', '@farris/ui-datatable', '@farris/ui-datagrid', '@farris/devkit', 'rxjs/observable/of', '@farris/ui-notify', '@farris/ui-messager', 'rxjs', '@ngx-translate/core', '@angular/core'], factory) :
    (factory((global['gsp-sys'] = global['gsp-sys'] || {}, global['gsp-sys']['rac-common'] = {}),global.cafCommon,global.ng.common,global.ng.common.http,global.kendoAngularGrid,global.ng.forms,global.kendoAngularLayout,global.kendoAngularTreeview,global.kendoAngularButtons,global.uiModal,global.uiLayout,global.uiLookup,global.uiPanel,global.uiTreetable,global.uiDatatable,global.uiDatagrid,global.devkit,global.rxjs['observable/of'],global.uiNotify,global.uiMessager,global.rxjs,global.core,global.ng.core));
}(this, (function (exports,cafCommon,common,http,kendoAngularGrid,forms,kendoAngularLayout,kendoAngularTreeview,kendoAngularButtons,uiModal,uiLayout,uiLookup,uiPanel,uiTreetable,uiDatatable,uiDatagrid,devkit,of,uiNotify,uiMessager,rxjs,core,core$1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 操作实体
     */
    var /**
     * 操作实体
     */ AuthEntryEntity = /** @class */ (function () {
        function AuthEntryEntity() {
        }
        return AuthEntryEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 权限字段实体
     */
    var /**
     * 权限字段实体
     */ AuthFieldEntity = /** @class */ (function () {
        function AuthFieldEntity() {
        }
        return AuthFieldEntity;
    }());
    /**
     * 权限字段分组
     */
    var /**
     * 权限字段分组
     */ GSPAuthFieldGroup = /** @class */ (function () {
        function GSPAuthFieldGroup() {
        }
        return GSPAuthFieldGroup;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 权限对象实体
     */
    var /**
     * 权限对象实体
     */ AuthobjEntity = /** @class */ (function () {
        function AuthobjEntity() {
        }
        return AuthobjEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 操作实体
     */
    var /**
     * 操作实体
     */ ReAssignEntity = /** @class */ (function () {
        function ReAssignEntity() {
        }
        return ReAssignEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 数据操作实体
     */
    var /**
     * 数据操作实体
     */ OperationEntity = /** @class */ (function () {
        function OperationEntity() {
        }
        return OperationEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 数据源上下文
     */
    var /**
     * 数据源上下文
     */ DataSourceContextEntity = /** @class */ (function () {
        function DataSourceContextEntity() {
        }
        return DataSourceContextEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var FetcherType = {
        None: 0,
        DataRow: 1,
        Column: 2,
        Rule: 3,
    };
    FetcherType[FetcherType.None] = 'None';
    FetcherType[FetcherType.DataRow] = 'DataRow';
    FetcherType[FetcherType.Column] = 'Column';
    FetcherType[FetcherType.Rule] = 'Rule';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *   规则权限实体
     */
    var /**
     *   规则权限实体
     */ BizDataDTO = /** @class */ (function () {
        function BizDataDTO() {
        }
        return BizDataDTO;
    }());
    /**
     * 权限字段实体
     */
    var /**
     * 权限字段实体
     */ AuresultEntity = /** @class */ (function () {
        function AuresultEntity() {
        }
        return AuresultEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 权限字段对应的设置信息：取数列、帮助列、展示列；以及数据源
     */
    var /**
     * 权限字段对应的设置信息：取数列、帮助列、展示列；以及数据源
     */ AuthDataSource = /** @class */ (function () {
        function AuthDataSource() {
        }
        return AuthDataSource;
    }());
    var AuthDataField = /** @class */ (function () {
        function AuthDataField() {
        }
        return AuthDataField;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var HierarchicalType = {
        Undefined: 0,
        Parent: 1,
        Path: 2,
        ParentAndPath: 3,
    };
    HierarchicalType[HierarchicalType.Undefined] = 'Undefined';
    HierarchicalType[HierarchicalType.Parent] = 'Parent';
    HierarchicalType[HierarchicalType.Path] = 'Path';
    HierarchicalType[HierarchicalType.ParentAndPath] = 'ParentAndPath';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HierarchicalInfoEntity = /** @class */ (function () {
        function HierarchicalInfoEntity() {
        }
        return HierarchicalInfoEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var FieldAccessType = {
        /** 未定义，不是字段权限。 */
        Undefined: 0,
        /** 没有任何访问权限。 */
        None: 1,
        /** 只读权限。 */
        ReadOnly: 2,
        /** 没有限制。 */
        Full: 3,
    };
    FieldAccessType[FieldAccessType.Undefined] = 'Undefined';
    FieldAccessType[FieldAccessType.None] = 'None';
    FieldAccessType[FieldAccessType.ReadOnly] = 'ReadOnly';
    FieldAccessType[FieldAccessType.Full] = 'Full';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 权限分配结果变更集实体
     */
    var /**
     * 权限分配结果变更集实体
     */ AuresultChangesEntity = /** @class */ (function () {
        function AuresultChangesEntity() {
        }
        return AuresultChangesEntity;
    }());
    var AuresultSave = /** @class */ (function () {
        function AuresultSave() {
        }
        return AuresultSave;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataFetcherEntity = /** @class */ (function () {
        function DataFetcherEntity() {
        }
        return DataFetcherEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DBOColumnEntity = /** @class */ (function () {
        function DBOColumnEntity() {
        }
        return DBOColumnEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var RuleType = {
        True: 1,
        Common: 2,
    };
    RuleType[RuleType.True] = 'True';
    RuleType[RuleType.Common] = 'Common';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ResultContextEntity = /** @class */ (function () {
        function ResultContextEntity() {
            /**
             * 组织岗上的数据权限自动继承业务组织权限
             */
            this.inheritPermission = false;
            /**
             * 维度1的值
             */
            this.assid1 = '';
            /**
             * 维度2的值
             */
            this.assid2 = '';
            /**
             * 变量值
             */
            this.auVarValues = [];
        }
        return ResultContextEntity;
    }());
    /**
     * 权限字段用到的变量键值对
     */
    var /**
     * 权限字段用到的变量键值对
     */ AuthfieldVarEntity = /** @class */ (function () {
        function AuthfieldVarEntity() {
        }
        return AuthfieldVarEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RacCommonUtil = /** @class */ (function () {
        function RacCommonUtil(sessionSv) {
            this.sessionSv = sessionSv;
            /**
             * 维度1的值
             */
            this.assid1 = '';
            /**
             * 维度2的值
             */
            this.assid2 = '';
            this.AUDATACONTROL = 'AuDataControl';
            this.expandIcon = 'f-icon f-icon-file-folder-open text-warning';
            this.collapseIcon = 'f-icon f-icon-file-folder-close text-warning';
            this.leafIcon = 'f-icon f-icon-file-txt text-warning';
        }
        /**
         * 构造Header
         */
        /**
         * 构造Header
         * @return {?}
         */
        RacCommonUtil.prototype.getHeader = /**
         * 构造Header
         * @return {?}
         */
            function () {
                /** @type {?} */
                var sessionId = this.sessionSv.getCurrentSeesionId();
                /** @type {?} */
                var headers = new http.HttpHeaders().set('SessionId', sessionId);
                return { headers: headers };
            };
        /**
         * 获取上下文中的用户
         */
        /**
         * 获取上下文中的用户
         * @return {?}
         */
        RacCommonUtil.prototype.getCurrentUserId = /**
         * 获取上下文中的用户
         * @return {?}
         */
            function () {
                // 测试用写死
                return 'admin';
            };
        /** Guid生成 */
        /**
         * Guid生成
         * @return {?}
         */
        RacCommonUtil.prototype.getGuid36 = /**
         * Guid生成
         * @return {?}
         */
            function () {
                /**
                 * @return {?}
                 */
                function S4() {
                    // tslint:disable-next-line:no-bitwise
                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                }
                return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
            };
        /**
         * 权限分配结果路径
         */
        /**
         * 权限分配结果路径
         * @return {?}
         */
        RacCommonUtil.prototype.getResultPath = /**
         * 权限分配结果路径
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = "/api/runtime/sys/v1.0/assignresults";
                return path;
            };
        /**
         * 权限对象路径
         */
        /**
         * 权限对象路径
         * @return {?}
         */
        RacCommonUtil.prototype.getAuthorizationPath = /**
         * 权限对象路径
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = "/api/runtime/sys/v1.0/authorizations";
                return path;
            };
        /**
         * 权限字段路径
         */
        /**
         * 权限字段路径
         * @return {?}
         */
        RacCommonUtil.prototype.getAuthfieldPath = /**
         * 权限字段路径
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = "/api/runtime/sys/v1.0/authfields";
                return path;
            };
        /**
         * 重授权对象路径
         */
        /**
         * 重授权对象路径
         * @return {?}
         */
        RacCommonUtil.prototype.getReAssignPath = /**
         * 重授权对象路径
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = "/api/runtime/sys/v1.0/reassigns";
                return path;
            };
        /**
         * 获取新增的内容
         * @param newarr: 最新的内容
         * @param oldarr：历史内容
         */
        /**
         * 获取新增的内容
         * @param {?} newarr
         * @param {?} oldarr
         * @return {?}
         */
        RacCommonUtil.prototype.getAddIds = /**
         * 获取新增的内容
         * @param {?} newarr
         * @param {?} oldarr
         * @return {?}
         */
            function (newarr, oldarr) {
                /** @type {?} */
                var addIds = [];
                newarr.forEach(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    if (!oldarr.includes(x)) {
                        addIds.push(x);
                    }
                }));
                return addIds;
            };
        /**
         * 获取删除的内容
         * @param newarr: 最新的内容
         * @param oldarr：历史内容
         */
        /**
         * 获取删除的内容
         * @param {?} newarr
         * @param {?} oldarr
         * @return {?}
         */
        RacCommonUtil.prototype.getRemoveIds = /**
         * 获取删除的内容
         * @param {?} newarr
         * @param {?} oldarr
         * @return {?}
         */
            function (newarr, oldarr) {
                return this.getAddIds(oldarr, newarr);
            };
        /**
         * @param {?} arrs
         * @return {?}
         */
        RacCommonUtil.prototype.convertToBizDataDTO = /**
         * @param {?} arrs
         * @return {?}
         */
            function (arrs) {
                return arrs.map(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    /** @type {?} */
                    var dataDto = new BizDataDTO();
                    dataDto.data = x;
                    return dataDto;
                }));
            };
        /**
         * 有效的字符串
         */
        /**
         * 有效的字符串
         * @param {?} value
         * @return {?}
         */
        RacCommonUtil.prototype.isNullOrEmptyString = /**
         * 有效的字符串
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return this.isBlank(value) || value.toString().trim().length === 0;
            };
        /**
         * 不为空
         */
        /**
         * 不为空
         * @param {?} value
         * @return {?}
         */
        RacCommonUtil.prototype.isBlank = /**
         * 不为空
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value === null || value === undefined;
            };
        /**
         * 字符串不为空
         */
        /**
         * 字符串不为空
         * @param {?} value
         * @return {?}
         */
        RacCommonUtil.prototype.isNotNullOrEmptyString = /**
         * 字符串不为空
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return !(this.isNullOrEmptyString(value));
            };
        /** 找到树形Parent分级方式的加载的第一层 */
        /**
         * 找到树形Parent分级方式的加载的第一层
         * @param {?} datas
         * @param {?} key
         * @param {?} parentKey
         * @return {?}
         */
        RacCommonUtil.prototype.findLayer1ByParentId = /**
         * 找到树形Parent分级方式的加载的第一层
         * @param {?} datas
         * @param {?} key
         * @param {?} parentKey
         * @return {?}
         */
            function (datas, key, parentKey) {
                /** @type {?} */
                var rtn = [];
                datas.forEach(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var findParent = datas.find(( /**
                     * @param {?} parent
                     * @return {?}
                     */function (parent) { return parent[key] === data[parentKey]; }));
                    if (!findParent && data.type !== undefined && data.type !== null && data.type.toString() === '99') {
                        data.parentId = undefined;
                        rtn.push(data);
                    }
                }));
                return rtn;
            };
        /** 类型是否为导航 */
        /**
         * 类型是否为导航
         * @param {?} type
         * @return {?}
         */
        RacCommonUtil.prototype.isNav = /**
         * 类型是否为导航
         * @param {?} type
         * @return {?}
         */
            function (type) {
                return type === '99' || type === '0';
            };
        /**
         * @param {?} farrisTt
         * @return {?}
         */
        RacCommonUtil.prototype.setTreeIcon = /**
         * @param {?} farrisTt
         * @return {?}
         */
            function (farrisTt) {
                farrisTt.expandIcon = this.expandIcon;
                farrisTt.collapseIcon = this.collapseIcon;
                farrisTt.leafIcon = this.leafIcon;
                farrisTt.detectChanges();
            };
        RacCommonUtil.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        RacCommonUtil.ctorParameters = function () {
            return [
                { type: cafCommon.SessionService }
            ];
        };
        return RacCommonUtil;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 取数服务
     */
    var TreeService = /** @class */ (function () {
        function TreeService(util) {
            this.util = util;
        }
        /** 按照path码构造树 */
        /**
         * 按照path码构造树
         * @param {?} datas
         * @param {?} pathField
         * @return {?}
         */
        TreeService.prototype.makeTreeByPath = /**
         * 按照path码构造树
         * @param {?} datas
         * @param {?} pathField
         * @return {?}
         */
            function (datas, pathField) {
                var _this = this;
                // 上級爲空，或者沒有上級的
                /** @type {?} */
                var pathLayerOnes = datas.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    if (_this.util.isNullOrEmptyString(x[pathField])) {
                        return true;
                    }
                    /** @type {?} */
                    var findObj = datas.find(( /**
                     * @param {?} parent
                     * @return {?}
                     */function (parent) { return parent[pathField] === x[pathField].substring(0, x[pathField].length - 4); }));
                    if (findObj === undefined || findObj === null) {
                        return true;
                    }
                }));
                /** @type {?} */
                var treedata = [];
                pathLayerOnes.forEach(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    /** @type {?} */
                    var entity = {};
                    entity['data'] = x;
                    entity['children'] = [];
                    treedata.push(entity);
                    // this.root = x['id'];
                }));
                treedata.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    _this.findChildrenByPath(item, datas, pathField);
                }));
                return treedata;
            };
        /** 找到子节点 */
        /**
         * 找到子节点
         * @param {?} parent
         * @param {?} datas
         * @param {?} pathField
         * @return {?}
         */
        TreeService.prototype.findChildrenByPath = /**
         * 找到子节点
         * @param {?} parent
         * @param {?} datas
         * @param {?} pathField
         * @return {?}
         */
            function (parent, datas, pathField) {
                var _this = this;
                /** @type {?} */
                var childList = datas.filter(( /**
                 * @param {?} childitem
                 * @return {?}
                 */function (childitem) {
                    if (childitem[pathField].substring(0, childitem[pathField].length - 4) === parent['data'][pathField]) {
                        return true;
                    }
                }));
                if (childList && childList.length > 0) {
                    childList.forEach(( /**
                     * @param {?} child
                     * @return {?}
                     */function (child) {
                        /** @type {?} */
                        var childEntity = {};
                        childEntity['data'] = child;
                        // tslint:disable-next-line:no-string-literal
                        childEntity['children'] = [];
                        // tslint:disable-next-line:no-string-literal
                        parent['children'].push(childEntity);
                        _this.findChildrenByPath(childEntity, datas, pathField);
                    }));
                }
            };
        /** 按照parent码构造树 */
        /**
         * 按照parent码构造树
         * @param {?} datas
         * @param {?} parentField
         * @param {?} keyField
         * @return {?}
         */
        TreeService.prototype.makeTreeByParent = /**
         * 按照parent码构造树
         * @param {?} datas
         * @param {?} parentField
         * @param {?} keyField
         * @return {?}
         */
            function (datas, parentField, keyField) {
                var _this = this;
                // 上級爲空，或者沒有上級的
                /** @type {?} */
                var pathLayerOnes = datas.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    if (_this.util.isNullOrEmptyString(x[parentField])) {
                        return true;
                    }
                    // 断层的这种，应该也属于一级
                    /** @type {?} */
                    var p = datas.find(( /**
                     * @param {?} parent
                     * @return {?}
                     */function (parent) { return parent[keyField] === x[parentField]; }));
                    if (!p) {
                        return true;
                    }
                }));
                /** @type {?} */
                var treedata = [];
                pathLayerOnes.forEach(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    /** @type {?} */
                    var entity = {};
                    entity['data'] = x;
                    entity['children'] = [];
                    treedata.push(entity);
                    // this.root = x['id'];
                }));
                treedata.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    _this.findChildrenByParent(item, datas, parentField, keyField);
                }));
                return treedata;
            };
        /** 找到子节点 */
        /**
         * 找到子节点
         * @param {?} parent
         * @param {?} datas
         * @param {?} parentField
         * @param {?} keyField
         * @return {?}
         */
        TreeService.prototype.findChildrenByParent = /**
         * 找到子节点
         * @param {?} parent
         * @param {?} datas
         * @param {?} parentField
         * @param {?} keyField
         * @return {?}
         */
            function (parent, datas, parentField, keyField) {
                var _this = this;
                /** @type {?} */
                var childList = datas.filter(( /**
                 * @param {?} childitem
                 * @return {?}
                 */function (childitem) {
                    if (childitem[parentField] === parent['data'][keyField]) {
                        return true;
                    }
                }));
                if (childList && childList.length > 0) {
                    childList.forEach(( /**
                     * @param {?} child
                     * @return {?}
                     */function (child) {
                        /** @type {?} */
                        var childEntity = {};
                        childEntity['data'] = child;
                        childEntity['children'] = [];
                        parent['children'].push(childEntity);
                        _this.findChildrenByParent(childEntity, datas, parentField, keyField);
                    }));
                }
            };
        TreeService.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        TreeService.ctorParameters = function () {
            return [
                { type: RacCommonUtil }
            ];
        };
        return TreeService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 重授权服务
     */
    var ReAssignService = /** @class */ (function () {
        function ReAssignService(rest, util, msgService) {
            this.rest = rest;
            this.util = util;
            this.msgService = msgService;
        }
        /** 重授权服务 */
        /**
         * 重授权服务
         * @return {?}
         */
        ReAssignService.prototype.getAll = /**
         * 重授权服务
         * @return {?}
         */
            function () {
                /** @type {?} */
                var headers = this.util.getHeader();
                /** @type {?} */
                var url = this.util.getReAssignPath() + '';
                return this.rest.get(url, null, headers);
            };
        ReAssignService.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        ReAssignService.ctorParameters = function () {
            return [
                { type: devkit.RestfulService },
                { type: RacCommonUtil },
                { type: uiMessager.MessagerService }
            ];
        };
        return ReAssignService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { isNullOrEmptyString } from '@progress/kendo-angular-grid/dist/es2015/utils';
    var AuresultService = /** @class */ (function () {
        function AuresultService(rest, session) {
            this.rest = rest;
            this.session = session;
        }
        /**
         * 获取权限需要分配的业务数据的数据源
         */
        /**
         * 获取权限需要分配的业务数据的数据源
         * @param {?} authField
         * @param {?} resultContext
         * @return {?}
         */
        AuresultService.prototype.getDataSourceByContext = /**
         * 获取权限需要分配的业务数据的数据源
         * @param {?} authField
         * @param {?} resultContext
         * @return {?}
         */
            function (authField, resultContext) {
                // mock数据
                // return of(dataSource);this.resultContext.dictDimensionValue
                /** @type {?} */
                var headers = this.session.getHeader();
                /** @type {?} */
                var url = this.session.getResultPath();
                /** @type {?} */
                var urlNew = url + '/datasource';
                /** @type {?} */
                var year = '';
                if (resultContext.yearObj && resultContext.yearObj.value) {
                    year = resultContext.yearObj.value;
                }
                resultContext.year = year;
                if (resultContext.auVarValues && resultContext.auVarValues.length > 0) {
                    return this.rest.post(urlNew + '/var', resultContext, null, headers);
                }
                /** @type {?} */
                var ownerId = resultContext.ownerId;
                /** @type {?} */
                var ownerType = resultContext.ownerType;
                /** @type {?} */
                var param = {
                    ownerId: ownerId,
                    ownerType: ownerType,
                    authfield: authField,
                    year: year,
                };
                return this.rest.get(urlNew, param, headers);
            };
        /**
         * 获取权限可以分配的业务数据的数据源
         */
        /**
         * 获取权限可以分配的业务数据的数据源
         * @param {?} authField
         * @return {?}
         */
        AuresultService.prototype.getDataSource = /**
         * 获取权限可以分配的业务数据的数据源
         * @param {?} authField
         * @return {?}
         */
            function (authField) {
                /** @type {?} */
                var ownerId = this.session.ownerId;
                /** @type {?} */
                var ownerType = this.session.ownerType;
                /** @type {?} */
                var headers = this.session.getHeader();
                /** @type {?} */
                var url = this.session.getResultPath();
                /**
                 * ownerId  权限所有者Id,此处用户受全局业务组织过滤的，查找已分配的业务组织使用，这里不需要
                 * ownerType 权限所有者类型 岗位1，用户2
                 * @type {?}
                 */
                var param = {
                    ownerId: '',
                    ownerType: 2,
                    authfield: authField,
                    year: ''
                };
                /** @type {?} */
                var urlNew = url + '/datasource';
                return this.rest.get(urlNew, param, headers);
            };
        /**
         * 获取权限可以分配的业务数据的数据源
         */
        /**
         * 获取权限可以分配的业务数据的数据源
         * @param {?} authField
         * @param {?} year
         * @return {?}
         */
        AuresultService.prototype.getNoUsersDataSource = /**
         * 获取权限可以分配的业务数据的数据源
         * @param {?} authField
         * @param {?} year
         * @return {?}
         */
            function (authField, year) {
                /** @type {?} */
                var ownerId = 'nouser';
                /** @type {?} */
                var ownerType = this.session.ownerType;
                /** @type {?} */
                var headers = this.session.getHeader();
                /** @type {?} */
                var url = this.session.getResultPath();
                /**
                 * ownerId  权限所有者Id,此处用户受全局业务组织过滤的，查找已分配的业务组织使用，这里不需要
                 * ownerType 权限所有者类型 岗位1，用户2
                 * @type {?}
                 */
                var param = {
                    ownerId: ownerId,
                    ownerType: 2,
                    authfield: authField,
                    year: year
                };
                /** @type {?} */
                var urlNew = url + '/datasource';
                return this.rest.get(urlNew, param, headers);
            };
        /**
         * 获取权限需要分配的业务数据的数据源
         */
        /**
         * 获取权限需要分配的业务数据的数据源
         * @param {?} authField
         * @param {?} year
         * @param {?} assid1
         * @param {?} assid2
         * @return {?}
         */
        AuresultService.prototype.getNoUsersDataSourceByGroup = /**
         * 获取权限需要分配的业务数据的数据源
         * @param {?} authField
         * @param {?} year
         * @param {?} assid1
         * @param {?} assid2
         * @return {?}
         */
            function (authField, year, assid1, assid2) {
                /** @type {?} */
                var headers = this.session.getHeader();
                /** @type {?} */
                var url = this.session.getResultPath();
                /** @type {?} */
                var param = {
                    ownerId: 'nouser',
                    ownerType: 2,
                    authfield: authField,
                    year: year,
                    assid1: assid1,
                    assid2: assid2,
                };
                /** @type {?} */
                var urlNew = url + '/datasource/group';
                return this.rest.get(urlNew, param, headers);
            };
        /**
         * 获取年度
         */
        /**
         * 获取年度
         * @param {?} su
         * @return {?}
         */
        AuresultService.prototype.getYears = /**
         * 获取年度
         * @param {?} su
         * @return {?}
         */
            function (su) {
                /** @type {?} */
                var headers = this.session.getHeader();
                /** @type {?} */
                var url = this.session.getResultPath();
                if (!su) {
                    su = '*';
                }
                /** @type {?} */
                var urlNew = url + '/years/' + su;
                return this.rest.get(urlNew, null, headers);
            };
        AuresultService.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        AuresultService.ctorParameters = function () {
            return [
                { type: devkit.RestfulService },
                { type: RacCommonUtil }
            ];
        };
        return AuresultService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 取数服务
     */
    var AuthfieldService = /** @class */ (function () {
        function AuthfieldService(rest, util, msgService) {
            this.rest = rest;
            this.util = util;
            this.msgService = msgService;
        }
        /**根据权限字段的标识获取权限字段
         * @param authfield 权限字段标识
         */
        /**
         * 根据权限字段的标识获取权限字段
         * @param {?} authfield 权限字段标识
         * @return {?}
         */
        AuthfieldService.prototype.getbyId = /**
         * 根据权限字段的标识获取权限字段
         * @param {?} authfield 权限字段标识
         * @return {?}
         */
            function (authfield) {
                /** @type {?} */
                var headers = this.util.getHeader();
                /** @type {?} */
                var url = this.util.getAuthfieldPath() + "/" + authfield;
                return this.rest.get(url, null, headers);
            };
        /**
         * 异常处理
         * @param auobj 权限对象实体
         */
        /**
         * 异常处理
         * @param {?} error
         * @return {?}
         */
        AuthfieldService.prototype.handlerError = /**
         * 异常处理
         * @param {?} error
         * @return {?}
         */
            function (error) {
                console.log(error);
                this.msgService.error(error.error.Message);
            };
        /**
         * @private
         * @template T
         * @param {?=} operation
         * @param {?=} result
         * @return {?}
         */
        AuthfieldService.prototype.handleError = /**
         * @private
         * @template T
         * @param {?=} operation
         * @param {?=} result
         * @return {?}
         */
            function (operation, result) {
                if (operation === void 0) {
                    operation = 'operation';
                }
                return ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.error(error); // log to console instead
                    return of.of(( /** @type {?} */(result)));
                });
            };
        AuthfieldService.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        AuthfieldService.ctorParameters = function () {
            return [
                { type: devkit.RestfulService },
                { type: RacCommonUtil },
                { type: uiMessager.MessagerService }
            ];
        };
        return AuthfieldService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 分页初始值
     * @type {?}
     */
    var INIT_PAGEINDEX = 1;
    /** @type {?} */
    var INIT_SKIP = 0;
    /** @type {?} */
    var INIT_PAGESIZE = 20;
    /**
     * 分页信息
     * @type {?}
     */
    var BUTTONCOUNT = 0;
    /** @type {?} */
    var PAGESIZES = [20, 50, 100, 200];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 取数服务
     */
    var AuthObjService = /** @class */ (function () {
        function AuthObjService(rest, util, msgService) {
            this.rest = rest;
            this.util = util;
            this.msgService = msgService;
        }
        /**
         * 获取指定权限对象、数据操作下关联的权限字段
         */
        /**
         * 获取指定权限对象、数据操作下关联的权限字段
         * @param {?} authObjId
         * @param {?} authOpId
         * @return {?}
         */
        AuthObjService.prototype.getAuthEntryByOp = /**
         * 获取指定权限对象、数据操作下关联的权限字段
         * @param {?} authObjId
         * @param {?} authOpId
         * @return {?}
         */
            function (authObjId, authOpId) {
                /** @type {?} */
                var url = this.util.getAuthorizationPath() + "/" + authObjId + "/" + authOpId;
                /** @type {?} */
                var headers = this.util.getHeader();
                return this.rest.get(url, null, headers);
            };
        /**
         * @return {?}
         */
        AuthObjService.prototype.getAll = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var headers = this.util.getHeader();
                /** @type {?} */
                var url = this.util.getAuthorizationPath() + '/designtime';
                return this.rest.get(url, null, headers);
            };
        /**
         * @return {?}
         */
        AuthObjService.prototype.getAllReAssign = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var headers = this.util.getHeader();
                /** @type {?} */
                var url = this.util.getAuthorizationPath() + '/reassign';
                return this.rest.get(url, null, headers);
            };
        /**
         * 异常处理
         * @param auobj 权限对象实体
         */
        /**
         * 异常处理
         * @param {?} error
         * @return {?}
         */
        AuthObjService.prototype.handlerError = /**
         * 异常处理
         * @param {?} error
         * @return {?}
         */
            function (error) {
                console.log(error);
                this.msgService.error(error.error.Message);
            };
        /**
         * @private
         * @template T
         * @param {?=} operation
         * @param {?=} result
         * @return {?}
         */
        AuthObjService.prototype.handleError = /**
         * @private
         * @template T
         * @param {?=} operation
         * @param {?=} result
         * @return {?}
         */
            function (operation, result) {
                if (operation === void 0) {
                    operation = 'operation';
                }
                return ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.error(error); // log to console instead
                    return of.of(( /** @type {?} */(result)));
                });
            };
        AuthObjService.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        AuthObjService.ctorParameters = function () {
            return [
                { type: devkit.RestfulService },
                { type: RacCommonUtil },
                { type: uiMessager.MessagerService }
            ];
        };
        return AuthObjService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LocalRepository = /** @class */ (function () {
        function LocalRepository() {
            /**
             * 权限结果数据 key:authfieldId+authobjId+authopId
             */
            this.mapAuresults = new Map();
            /**
             * 权限取数源 key:authfieldId
             */
            this.mapDataSource = new Map();
        }
        LocalRepository.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        LocalRepository.ctorParameters = function () { return []; };
        return LocalRepository;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 用户授权业务组织组件
     */
    var DataHelpComponent = /** @class */ (function () {
        function DataHelpComponent(session, msgService, notifyService, treeService) {
            this.session = session;
            this.msgService = msgService;
            this.notifyService = notifyService;
            this.treeService = treeService;
            this.closeModalEmitter = new core$1.EventEmitter();
            /**
             * 弹出框中用到的最终选中的数据
             */
            this.selectEmitter = new core$1.EventEmitter();
            this.selectedModels = [];
            this.hasSelectKeys = []; // 输入 修改前，已经选中
            // 输入 修改前，已经选中
            this.isHasSelectAll = false; // 输入 之前是否全选
            // 输入 之前是否全选
            this.authField = ''; // 全局业务组织内码
            // 全局业务组织内码
            this.ownerId = ''; // 用户内码
            // 用户内码
            this.canAssignDatas = []; // 可分配的数据源
            // 数据是否完整；完整表示可以分*
            this.isDisplayTree = false; // 输入
            // 输入
            this.isShowSearch = false; // 是否展示搜索
            // 是否展示搜索
            this.isSelectAll = false;
            this.selectKeys = [];
            /**
             * 是否单选
             */
            this.singleSelect = false;
            this.treeHeight = '342px';
            /**
             * 是否受维度分组
             */
            this.isAuGroup = true;
            /**
             * 弹出框中用到的最终选中的数据
             */
            this.selectByGroupEmitter = new core$1.EventEmitter();
            // 业务数据源相关信息
            this.dataKey = ''; // 取数主键列
            // 取数主键列
            this.helpFields = []; // 字段显示名
            // 字段显示名
            this.showFields = []; // 显示的字段
            // 显示的字段
            this.codeOrNameFields = []; // 搜索的字段；
            // 搜索的字段；
            this.authDataSource = new AuthDataSource();
            /**
             * 是否可用
             */
            this.isEnable = true;
            /**
             * 是否全部权限
             */
            this.isAllAuth = false;
            // 组件上用skip
            this.skip = INIT_SKIP;
            this.pageSize = INIT_PAGESIZE;
            this.pageIndex = INIT_PAGEINDEX;
            // 树控件
            // 树控件绑定的数据
            this.treedata = [];
            // 绑定树的平铺数据
            this.flatData = [];
            /**
             * root根节点，用于默认展开
             */
            this.root = '';
            this.saveSelections = [];
            // TreeTable上要显示的列
            this.treeCols = [];
            // [
            //   { field: 'name', title: '名称', width: 100 },
            //   { field: 'code', title: '编号', width: 100 },
            // ];
            // 树节点加载方式，async异步，all 同步
            this.loadDataType = 'all'; // 'all' | 'async'
            // 'all' | 'async'
            // 树节点选中动作
            this.cascadeCheck = false;
            this.cascadeUp = false;
            this.cascadeDown = true;
            // 是否已经加载过
            this.isTreeLoaded = false;
            /**
             * 要搜索的信息
             */
            this.searchInfo = '';
            /**
             * 要搜索的信息
             */
            this.searchDatas = [];
            // searchTitle = this.translate.instant('auresult_search_label');
            this.searchTitle = '查找';
            // 上次搜索文本
            this.oldTreeSearch = '';
            this.treeSearchIndex = 0;
            // 分页模式
            this.pageSetting = {
                buttonCount: BUTTONCOUNT,
                info: true,
                pageSizes: PAGESIZES,
                previousNext: true
            };
        }
        /**
         * @return {?}
         */
        DataHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /** 获取可分配的业务数据 */
        /**
         * 获取可分配的业务数据
         * @return {?}
         */
        DataHelpComponent.prototype.getAuthDataSource = /**
         * 获取可分配的业务数据
         * @return {?}
         */
            function () {
                this.isSelectAll = false;
                this.session.ownerId = this.ownerId;
                this.session.ownerType = 2;
                this.selectKeys = [];
                this.treeCols = [];
                this.treedata = [];
                this.cascadeCheck = false; // load数据时，级联先关闭，否则会导致下级选中，自动选中上级
                if (this.session.isNullOrEmptyString(this.authField)) {
                    this.canAssignDatas = [];
                    this.isSelectAll = false;
                    return;
                }
            };
        /** 根据获取到的权限结果数据，加载界面 */
        /**
         * 根据获取到的权限结果数据，加载界面
         * @return {?}
         */
        DataHelpComponent.prototype.displayData = /**
         * 根据获取到的权限结果数据，加载界面
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectKeys = [];
                this.treeCols = [];
                this.treedata = [];
                this.cascadeCheck = false; // load数据时，级联先关闭，否则会导致下级选中，自动选中上级
                if (this.session.isNullOrEmptyString(this.authField)) {
                    this.canAssignDatas = [];
                    this.isSelectAll = false;
                    return;
                }
                this.showElement('checkall');
                this.isSelectAll = false;
                this.authDataSource.data = this.data.data;
                this.authDataSource.showFields = this.data.showFields;
                this.authDataSource.keyField = this.data.keyField;
                this.authDataSource.helpFields = this.data.helpFields;
                this.authDataSource.hierarchicalType = this.data.hierarchicalType;
                this.authDataSource.hierarchicalInfo = this.data.hierarchicalInfo;
                this.canAssignDatas = this.authDataSource.data;
                this.searchDatas = this.canAssignDatas;
                this.dataKey = this.authDataSource.keyField;
                this.helpFields = this.authDataSource.helpFields;
                this.showFields = this.authDataSource.showFields;
                this.codeOrNameFields = this.getCodeOrNameFields();
                if (this.hasSelectKeys.find(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x === '*'; }))) {
                    this.isSelectAll = this.isHasSelectAll = true;
                }
                if (this.isAllAuth) {
                    this.isSelectAll = this.isHasSelectAll = true;
                }
                if (this.isSelectAll) {
                    // TODO  如何搞成 直接选中全部
                    this.canAssignDatas.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        _this.selectKeys.push(item[_this.dataKey]);
                    }));
                }
                else if (this.hasSelectKeys) {
                    this.hasSelectKeys.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        _this.selectKeys.push(item);
                    }));
                }
                // 显示列表
                if (this.isDisplayTree === false) {
                    this.queryByPage();
                    return;
                }
                // 显示树信息
                this.showTreeInfo();
            };
        /** 展示树形相关数据 */
        /**
         * 展示树形相关数据
         * @return {?}
         */
        DataHelpComponent.prototype.showTreeInfo = /**
         * 展示树形相关数据
         * @return {?}
         */
            function () {
                var _this = this;
                this.hideElement('checkall');
                // if (this.farrisTree === undefined) {
                //     return;
                // }
                // 处理树形相关逻辑
                this.authDataSource.showFields.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    _this.treeCols.push({ field: item.field, title: item.title, width: 100 });
                }));
                /** @type {?} */
                var hierarchicalType = this.authDataSource.hierarchicalType;
                /** @type {?} */
                var hierarchicalInfo = this.authDataSource.hierarchicalInfo;
                if (hierarchicalType === HierarchicalType.Parent) {
                    /** @type {?} */
                    var parentKey = this.dataKey;
                    if (hierarchicalInfo.parentKeyField && hierarchicalInfo.parentKeyField.length > 0) {
                        parentKey = hierarchicalInfo.parentKeyField;
                    }
                    this.treedata = this.treeService.makeTreeByParent(this.canAssignDatas, hierarchicalInfo.parentField, parentKey);
                }
                else {
                    this.treedata = this.treeService.makeTreeByPath(this.canAssignDatas, hierarchicalInfo.pathField);
                }
                // 找到第一层   直接展开
                // 初始加载不级联，否则会导致下级选中，自动选中上级
                this.farrisTree.cascadeCheck = false;
                this.isTreeLoaded = false;
                this.farrisTree.loadedData.subscribe(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) {
                    // 加载过，之后不需要再次加载
                    if (_this.isTreeLoaded === true) {
                        return;
                    }
                    // 初始加载不级联，否则会导致下级选中，自动选中上级
                    _this.farrisTree.cascadeCheck = false;
                    // 根节点默认展开
                    if ((_this.root) && _this.root !== '') {
                        _this.farrisTree.expandNode(_this.root);
                    }
                    if (_this.isSelectAll) {
                        _this.farrisTree.checkAllNodes();
                    }
                    else if (_this.hasSelectKeys.length > 0) {
                        _this.farrisTree.checkedNodes(_this.hasSelectKeys);
                    }
                    // load完数据时，级联打开，可以选中上级自动选中下级
                    _this.farrisTree.cascadeCheck = true;
                    // 加载过，之后不需要再次加载
                    _this.isTreeLoaded = true;
                }));
            };
        /** 报错处理 */
        /**
         * 报错处理
         * @param {?} error
         * @return {?}
         */
        DataHelpComponent.prototype.handleError = /**
         * 报错处理
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this.authDataSource.data = [];
                console.log(error);
                console.log(error.error.Message);
                this.msgService.error(error.error.Message);
            };
        Object.defineProperty(DataHelpComponent.prototype, "selectableSettings", {
            // 选择属性：单选、多选
            get: 
            // 选择属性：单选、多选
            /**
             * @return {?}
             */
            function () {
                return {
                    checkboxOnly: true,
                    mode: this.singleSelect ? 'single' : 'multiple',
                    enabled: true
                };
            },
            enumerable: true,
            configurable: true
        });
        // 图标
        // 图标
        /**
         * @param {?} __0
         * @return {?}
         */
        DataHelpComponent.prototype.iconClass =
            // 图标
            /**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var type = _a.type;
                return {
                    'k-i-folder': true,
                    'k-icon': true
                };
            };
        /**
         * 获取选择信息
         */
        /**
         * 获取选择信息
         * @return {?}
         */
        DataHelpComponent.prototype.getSelectInfo = /**
         * 获取选择信息
         * @return {?}
         */
            function () {
                var _this = this;
                this.selectedModels = [];
                /** @type {?} */
                var result = {
                    data: [],
                    selectedKey: []
                };
                // 全选
                if (this.isSelectAll && this.isIntegrityData && this.data.length === this.selectKeys) {
                    /** @type {?} */
                    var obj = {
                        data: '*'
                    };
                    this.selectedModels.push(obj);
                    result.data = ['*'];
                    result.selectedKey = ['*'];
                    return result;
                }
                // 树显示，需要先根据选中的数据构造selectKeys
                if (this.isDisplayTree) {
                    // 选中的行，过滤掉业务对象，只保留功能操作
                    if (this.farrisTree.checkeds) {
                        /** @type {?} */
                        var checkedRows = this.farrisTree.checkeds.map(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) { return n.data; }));
                        // 过滤功能操作分组的行
                        // let checkedOpRows = this.checkedRows.filter(x => x.type === '1');
                        this.selectKeys = checkedRows.map(( /**
                         * @param {?} m
                         * @return {?}
                         */function (m) { return m[_this.dataKey]; }));
                    }
                    else {
                        this.selectKeys = [];
                    }
                }
                if (this.selectKeys.length > 0) {
                    this.selectKeys.map(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) {
                        /** @type {?} */
                        var findObj = _this.canAssignDatas.find(( /**
                         * @param {?} y
                         * @return {?}
                         */function (y) { return y[_this.dataKey] === x; }));
                        _this.selectedModels.push(findObj);
                    }));
                }
                result.data = this.selectedModels;
                result.selectedKey = this.selectKeys;
                return result;
            };
        /** 判断是否分了全部权限*，首先必须全选，其次必须是数据完整的，然后选中的数据必须与数据源长度一致（如果仅搜索后的全选，不是*） */
        /**
         * 判断是否分了全部权限*，首先必须全选，其次必须是数据完整的，然后选中的数据必须与数据源长度一致（如果仅搜索后的全选，不是*）
         * @return {?}
         */
        DataHelpComponent.prototype.getIsAllAuth = /**
         * 判断是否分了全部权限*，首先必须全选，其次必须是数据完整的，然后选中的数据必须与数据源长度一致（如果仅搜索后的全选，不是*）
         * @return {?}
         */
            function () {
                return this.isSelectAll && this.isIntegrityData && this.data.length === this.selectKeys;
            };
        /** 确定发射选中数据以及选中内码 */
        /**
         * 确定发射选中数据以及选中内码
         * @return {?}
         */
        DataHelpComponent.prototype.confirm = /**
         * 确定发射选中数据以及选中内码
         * @return {?}
         */
            function () {
                var _this = this;
                this.closeModalEmitter.next();
                this.selectedModels = [];
                if (this.getIsAllAuth()) {
                    /** @type {?} */
                    var obj = {
                        data: '*'
                    };
                    this.selectedModels.push(obj);
                    this.selectEmitter.next({
                        data: ['*'],
                        selectedKey: ['*']
                    });
                    return;
                }
                // 树显示，需要先根据选中的数据构造selectKeys
                if (this.isDisplayTree) {
                    // 选中的行，过滤掉业务对象，只保留功能操作
                    if (this.farrisTree.checkeds) {
                        /** @type {?} */
                        var checkedRows = this.farrisTree.checkeds.map(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) { return n.data; }));
                        // 过滤功能操作分组的行
                        // let checkedOpRows = this.checkedRows.filter(x => x.type === '1');
                        this.selectKeys = checkedRows.map(( /**
                         * @param {?} m
                         * @return {?}
                         */function (m) { return m[_this.dataKey]; }));
                    }
                    else {
                        this.selectKeys = [];
                    }
                }
                if (this.selectKeys.length > 0) {
                    this.selectKeys.map(( /**
                     * @param {?} x
                     * @return {?}
                     */function (x) {
                        /** @type {?} */
                        var findObj = _this.canAssignDatas.find(( /**
                         * @param {?} y
                         * @return {?}
                         */function (y) { return y[_this.dataKey] === x; }));
                        _this.selectedModels.push(findObj);
                    }));
                }
                this.selectEmitter.next({
                    data: this.selectedModels,
                    selectedKey: this.selectKeys
                });
            };
        /**
         * @return {?}
         */
        DataHelpComponent.prototype.cancle = /**
         * @return {?}
         */
            function () {
                this.closeModalEmitter.next();
            };
        /** 全选，这里全选可能是过滤后数据的全选 */
        /**
         * 全选，这里全选可能是过滤后数据的全选
         * @return {?}
         */
        DataHelpComponent.prototype.checkAllClick = /**
         * 全选，这里全选可能是过滤后数据的全选
         * @return {?}
         */
            function () {
                var _this = this;
                this.isSelectAll = !this.isSelectAll;
                /** @type {?} */
                var key = '';
                if (this.isSelectAll) {
                    // 如果已经选中，则不处理，没有选中，则选中
                    this.searchDatas.forEach(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        key = data[_this.dataKey];
                        /** @type {?} */
                        var index = _this.selectKeys.findIndex(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x === key; }));
                        if (index < 0) {
                            _this.selectKeys.push(key);
                        }
                    }));
                    if (this.isDisplayTree) {
                        if (this.farrisTree) {
                            this.farrisTree.checkAllNodes();
                        }
                    }
                }
                else {
                    if (this.isDisplayTree) {
                        if (this.farrisTree) {
                            this.farrisTree.unCheckAllNodes();
                        }
                    }
                    else {
                        this.searchDatas.forEach(( /**
                         * @param {?} data
                         * @return {?}
                         */function (data) {
                            key = data[_this.dataKey];
                            /** @type {?} */
                            var index = _this.selectKeys.findIndex(( /**
                             * @param {?} x
                             * @return {?}
                             */function (x) { return x === key; }));
                            if (index > -1) {
                                // 如果已经选中，就删除
                                _this.selectKeys.splice(index, 1);
                            }
                        }));
                    }
                }
            };
        /**
         * @return {?}
         */
        DataHelpComponent.prototype.checkClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.isSelectAll = !this.isSelectAll;
                if (this.isSelectAll) {
                    // TODO  如何搞成 直接选中全部
                    this.canAssignDatas.forEach(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.selectKeys.push(data[_this.dataKey]);
                    }));
                    this.farrisTree.checkAllNodes();
                    this.selectByGroupEmitter.next(['*']);
                }
                else {
                    //  this.farrisTree.unCheckAllNodes();
                    this.selectKeys = [];
                    this.selectByGroupEmitter.next([]);
                }
            };
        /** 选择事件 */
        /**
         * 选择事件
         * @param {?} e
         * @return {?}
         */
        DataHelpComponent.prototype.onSelectedKeysChange = /**
         * 选择事件
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var len = this.selectKeys.length;
                if (len !== this.canAssignDatas.length) {
                    // 如果全部选中了，isSelectAll 也不需要设置为true；isSelectAll的含义是*的意思，新增数据也被选中
                    this.isSelectAll = false;
                }
                if (this.isSelectAll) {
                    this.selectByGroupEmitter.next(['*']);
                }
                else {
                    this.selectByGroupEmitter.next(this.selectKeys);
                }
            };
        /**
         * 点击分页查询或者分页参数变化后查询
         * @param event 分页参数
         */
        /**
         * 点击分页查询或者分页参数变化后查询
         * @param {?} event 分页参数
         * @return {?}
         */
        DataHelpComponent.prototype.pageChange = /**
         * 点击分页查询或者分页参数变化后查询
         * @param {?} event 分页参数
         * @return {?}
         */
            function (event) {
                // skip和pageSize必须得重新赋值，因为可能用户重新选择了分页大小或者分页索引
                // 刷新界面按钮数量和焦点
                this.skip = event.skip;
                this.pageSize = event.take;
                this.pageIndex = this.skip / this.pageSize + 1;
                // 查询
                this.queryByPage();
            };
        /**
         * 列表的查询
         */
        /**
         * 列表的查询
         * @return {?}
         */
        DataHelpComponent.prototype.queryByPage = /**
         * 列表的查询
         * @return {?}
         */
            function () {
                this.gridView = {
                    data: this.searchDatas.slice(this.skip, this.skip + this.pageSize),
                    total: this.searchDatas.length
                };
            };
        /**
         * @return {?}
         */
        DataHelpComponent.prototype.searchClick = /**
         * @return {?}
         */
            function () {
                this.search(this.searchInfo);
            };
        /**
         * 搜索树状
         */
        /**
         * 搜索树状
         * @param {?} txt
         * @return {?}
         */
        DataHelpComponent.prototype.search = /**
         * 搜索树状
         * @param {?} txt
         * @return {?}
         */
            function (txt) {
                var _this = this;
                if (this.isDisplayTree) {
                    this.searchTree(txt);
                    return;
                }
                this.searchInfo = txt;
                if (this.session.isNullOrEmptyString(this.searchInfo)) {
                    this.searchDatas = this.canAssignDatas;
                    this.queryByPage();
                    return;
                }
                this.searchDatas = [];
                this.canAssignDatas.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    // tslint:disable-next-line:prefer-for-of
                    for (var i = 0; i < _this.showFields.length; i++) {
                        if (item[_this.showFields[i].field].toString().indexOf(_this.searchInfo) > -1) {
                            _this.searchDatas.push(item);
                            break;
                        }
                    }
                }));
                this.queryByPage();
            };
        /**
         * 获取编号或者名称字段
         */
        /**
         * 获取编号或者名称字段
         * @return {?}
         */
        DataHelpComponent.prototype.getCodeOrNameFields = /**
         * 获取编号或者名称字段
         * @return {?}
         */
            function () {
                /** @type {?} */
                var result = [];
                this.showFields.forEach(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    if (item.field.toLocaleLowerCase().indexOf('code') > -1 ||
                        item.field.toLocaleLowerCase().indexOf('name') > -1) {
                        result.push(item);
                    }
                }));
                if (result.length === 0) {
                    result.push(this.showFields[0]);
                }
                return result;
            };
        /**
         * @param {?} arg
         * @return {?}
         */
        DataHelpComponent.prototype.searchTreeSelf = /**
         * @param {?} arg
         * @return {?}
         */
            function (arg) {
                this.searchTree(arg.value);
            };
        /** 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
         *   @param args  格式 searchData = { field: '*', value: '' };
         */
        /**
         * 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
         * @param {?} txt
         * @return {?}
         */
        DataHelpComponent.prototype.searchTree = /**
         * 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
         * @param {?} txt
         * @return {?}
         */
            function (txt) {
                var _this = this;
                // 搜索内容为空，不处理
                if (!txt) {
                    this.treeSearchIndex = 0;
                    return;
                }
                this.farrisTree.clearSelections();
                // 搜索内容与上次不同，重新搜索
                if (this.oldTreeSearch !== txt) {
                    // 置空重新搜索
                    this.searchDatas = [];
                    this.canAssignDatas.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        // 遍历搜索字段
                        // tslint:disable-next-line:prefer-for-of
                        for (var i = 0; i < _this.codeOrNameFields.length; i++) {
                            /** @type {?} */
                            var field = _this.codeOrNameFields[i].field;
                            if (item[field].indexOf(txt) > -1) {
                                _this.searchDatas.push(item);
                                break;
                            }
                        }
                    }));
                    // 首次搜索，从第一个开始搜索
                    this.treeSearchIndex = 0;
                }
                if (this.searchDatas.length === 0) {
                    this.msgService.warning('没有满足条件的数据!');
                    return;
                }
                // 搜到指定对象，需要设置父节点全部展开,其他节点全部收起
                /** @type {?} */
                var key = this.searchDatas[this.treeSearchIndex][this.dataKey];
                this.farrisTree.selectNode(key);
                this.farrisTree.collapseAll();
                // 展开父级
                this.expandParent(key);
                this.oldTreeSearch = txt;
                this.treeSearchIndex = this.treeSearchIndex + 1;
                // 已经搜索到最后，需要重头搜索
                if (this.treeSearchIndex === this.searchDatas.length) {
                    this.oldTreeSearch = '';
                    this.treeSearchIndex = 0;
                }
            };
        /** 逐一找到需要展开的父节点，全部展开 */
        /**
         * 逐一找到需要展开的父节点，全部展开
         * @param {?} key
         * @return {?}
         */
        DataHelpComponent.prototype.expandParent = /**
         * 逐一找到需要展开的父节点，全部展开
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var parent = this.farrisTree.findRowNode(key);
                /** @type {?} */
                var parentNode = parent.parent;
                if (parentNode) {
                    while (parentNode) {
                        this.farrisTree.expandNode(parentNode.id);
                        parentNode = parentNode.parent;
                    }
                }
                else {
                    this.farrisTree.expandNode(key);
                }
            };
        /** 树形选中全部 */
        /**
         * 树形选中全部
         * @return {?}
         */
        DataHelpComponent.prototype.treeCheckAll = /**
         * 树形选中全部
         * @return {?}
         */
            function () {
                this.isSelectAll = true;
            };
        /** 树形取消全部 */
        /**
         * 树形取消全部
         * @return {?}
         */
        DataHelpComponent.prototype.treeUnCheckAll = /**
         * 树形取消全部
         * @return {?}
         */
            function () {
                this.isSelectAll = false;
            };
        /** 取消勾选 */
        /**
         * 取消勾选
         * @return {?}
         */
        DataHelpComponent.prototype.nodeUnChecked = /**
         * 取消勾选
         * @return {?}
         */
            function () {
                if (this.isSelectAll) {
                    this.isSelectAll = false;
                }
            };
        /**
         * @param {?} elementName
         * @return {?}
         */
        DataHelpComponent.prototype.showElement = /**
         * @param {?} elementName
         * @return {?}
         */
            function (elementName) {
                if (document.getElementById(elementName)) {
                    document.getElementById(elementName).style.display = '';
                }
            };
        /**
         * @param {?} elementName
         * @return {?}
         */
        DataHelpComponent.prototype.hideElement = /**
         * @param {?} elementName
         * @return {?}
         */
            function (elementName) {
                if (document.getElementById(elementName)) {
                    document.getElementById(elementName).style.display = 'none';
                }
            };
        DataHelpComponent.decorators = [
            { type: core$1.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'rac-data-help',
                        template: "\r\n\r\n<div *ngIf=\"!isDisplayTree\" class=\"f-page flex-column\" style=\"background-color:#ffffff;\">\r\n    <!-- \u6761\u4EF6\u641C\u7D22(click)=\"\" -->\r\n    <div *ngIf=\"isShowSearch\" class=\"mt-1 form-group row ml-1\">\r\n            <div pr-2 text-left class=\"col-xs-3\">\r\n                        <input id=\"checkAllData\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n                            [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkAllClick()\" />\r\n                        <label class=\"ml-2 k-checkbox-label\" for=\"checkAllData\">\u5168\u9009</label>\r\n             </div>\r\n            <label class=\"ml-2\">\u67E5\u627E\uFF1A</label>\r\n            <input type=\"text\" name=\"searchInfo\" [(ngModel)]=\"searchInfo\" style=\"width: 200px;\" />\r\n            <button kendoButton [icon]=\"'search'\" (click)=\"searchClick()\"></button>\r\n    </div>\r\n    <div class=\"f-utils-fill-auto\">\r\n        <kendo-grid #dataGrid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\"\r\n            [kendoGridSelectBy]=\"authDataSource.keyField\" [selectedKeys]=\"selectKeys\" [data]=\"gridView\" [height]=\"360\"\r\n            (selectedKeysChange)=\"onSelectedKeysChange($event)\" [skip]=\"skip\" [pageable]=\"pageSetting\"\r\n            [pageSize]=\"pageSize\" (pageChange)=\"pageChange($event)\">\r\n            <kendo-grid-checkbox-column title=\"\u9009\u62E9\" width=\"60px\"\r\n          ></kendo-grid-checkbox-column>\r\n            <ng-template ngFor [ngForOf]=\"showFields\" let-column>\r\n                <kendo-grid-column field=\"{{column.field}}\" title=\"{{column.title}}\">\r\n                </kendo-grid-column>\r\n            </ng-template>\r\n        </kendo-grid>\r\n    </div>\r\n</div>\r\n\r\n<div *ngIf=\"isDisplayTree\" class=\"f-page flex-column\" style=\"background-color:#ffffff;\">\r\n    <div *ngIf=\"isShowSearch\" class=\"mt-1 form-group row ml-1\">\r\n        <div *ngIf=\"!singleSelect\" id=\"treehead\" class=\"k-form-field\">\r\n            <input id=\"cascadeDown\" class=\"k-checkbox\" type=\"checkbox\" name=\"cascadeDown\" [checked]=\"cascadeDown\"\r\n                [(ngModel)]=\"cascadeDown\" />\r\n            <label class=\"k-checkbox-label\" for=\"cascadeDown\">\u540C\u6B65\u4E0B\u7EA7</label>\r\n        </div>\r\n        <div pr-2 text-left class=\"col-xs-3\">\r\n                <input id=\"checkAllDataTree\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n                    [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkAllClick()\" />\r\n                <label class=\"ml-2 k-checkbox-label\" for=\"checkAllDataTree\">\u5168\u9009</label>\r\n        </div>\r\n    </div>\r\n    <div id=\"treebody\" class=\"f-struct-wrapper f-utils-fill-flex-column\"  [style.height]=\"treeHeight\">\r\n    <farris-treetable #farrisTree class=\"f-utils-fill-flex-column\" [data]=\"this.treedata\" [columns]=\"treeCols\" [idField]=\"dataKey\"\r\n    [showCheckAll]=\"true\"\r\n    [fit]=\"true\"\r\n    [fixedHeader]=\"true\"\r\n    [enableFindText]=\"true\"\r\n    [singleSelect]=\"singleSelect\" \r\n    [resizableColumns]=\"true\" \r\n    [showIcon]=\"true\"\r\n    [selectOnCheck]=\"false\"\r\n    (onlySelectSelf)=\"true\" \r\n    [(cascadeDown)]=\"this.cascadeDown\"\r\n    [(cascadeUp)]=\"this.cascadeUp\"\r\n    [keepSelect]=\"false\" \r\n    [showCheckbox]=\"true\" \r\n    [(loadDataType)]=\"this.loadDataType\" \r\n    (checkAll)=\"treeCheckAll()\" \r\n    (unCheckAll)=\"treeUnCheckAll()\"\r\n    (nodeUnChecked)=\"nodeUnChecked()\"\r\n    [(showFilterBar)] = \"isShowSearch\"\r\n    (search) = \"searchTreeSelf($event)\"\r\n    [allColumnsTitle] = \"searchTitle\">\r\n     </farris-treetable>\r\n    </div>\r\n</div>\r\n<!--\u5168\u9009\u4E0D\u5728\u8FD9\u91CC\r\n  <div id=\"checkall\" >\r\n    <div pr-2 text-left class=\"col-xs-3\">\r\n      <input id=\"checkAllData\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n        [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkClick()\" />\r\n      <label class=\"k-checkbox-label\" for=\"checkAllData\">{{ 'chkCheckAll' | translate }}</label>\r\n    </div>\r\n  </div>\r\n-->",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        DataHelpComponent.ctorParameters = function () {
            return [
                { type: RacCommonUtil },
                { type: uiMessager.MessagerService },
                { type: uiNotify.NotifyService },
                { type: TreeService }
            ];
        };
        DataHelpComponent.propDecorators = {
            btnOkAndCancleRef: [{ type: core$1.ViewChild, args: ['btnOkAndCancle',] }],
            farrisTree: [{ type: core$1.ViewChild, args: ['farrisTree',] }],
            selectEmitter: [{ type: core$1.Output }],
            hasSelectKeys: [{ type: core$1.Input }],
            isHasSelectAll: [{ type: core$1.Input }],
            authField: [{ type: core$1.Input }],
            ownerId: [{ type: core$1.Input }],
            canAssignDatas: [{ type: core$1.Input }],
            data: [{ type: core$1.Input }],
            isIntegrityData: [{ type: core$1.Input }],
            isDisplayTree: [{ type: core$1.Input }],
            isShowSearch: [{ type: core$1.Input }],
            singleSelect: [{ type: core$1.Input }],
            treeHeight: [{ type: core$1.Input }]
        };
        return DataHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuobjHelpComponent = /** @class */ (function () {
        function AuobjHelpComponent() {
            this.displayText = '';
            this.selectedKeyOld = '';
            /**
             * 导航事件
             */
            this.selectedChanged = new core$1.EventEmitter();
        }
        /**
         * @return {?}
         */
        AuobjHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.curKeyIdList = [];
                this.curKeyIdList.push(this.curKeyId);
            };
        // 取数列
        // 取数列
        /**
         * @param {?} args
         * @return {?}
         */
        AuobjHelpComponent.prototype.afterKeySelected =
            // 取数列
            /**
             * @param {?} args
             * @return {?}
             */
            function (args) {
                var _this = this;
                this.curAuthObj = new AuthobjEntity();
                this.curKeyIdList = [];
                // 更新值
                rxjs.from(args).subscribe(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    _this.curAuthObj.id = item['id'];
                    _this.curAuthObj.name = item['name'];
                    _this.curKeyId = item['id'];
                    _this.curKeyIdList.push(item['id']);
                    _this.displayText = item['name'];
                    _this.selectedChanged.emit(_this.curAuthObj);
                }));
                this.auobjLookup.closeDialog();
            };
        /**
         * 选中行改变后触发事件
         */
        /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
        AuobjHelpComponent.prototype.handleSelection = /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
            function (args) {
                this.curKeyId = args.node.data.id;
                this.curAuthObj = args.node.data;
                // 首次触发
                if (this.curKeyId === '') {
                    this.selectedKeyOld = this.curKeyId;
                    this.selectedChanged.emit(this.curAuthObj);
                }
                else {
                    // 变化的情况下触发
                    if (this.selectedKeyOld !== this.curKeyId) {
                        this.selectedKeyOld = this.curKeyId;
                        this.selectedChanged.emit(this.curAuthObj);
                    }
                }
            };
        AuobjHelpComponent.decorators = [
            { type: core$1.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'rac-auobj-help',
                        template: "<farris-lookup #auobjLookup [displayText]=\"displayText\"  name=\"auobjLookup\"\r\n[showButtons]=\"true\" [title]=\"'\u8BF7\u9009\u62E9\u6743\u9650\u5BF9\u8C61'\" [buttonsRef]=\"this.auobjHelp.btnOkAndCancleRef\">\r\n  <div style=\"padding: 10px\">\r\n    <rac-auobj-tree #auobjHelp [initSelectedKeys]=\"this.curKeyIdList\" [dataMode] = 'dataMode'\r\n      (selectedAfterOk)=\"afterKeySelected($event)\" (closeModalEmitter)=\"this.auobjLookup.closeDialog()\">\r\n    </rac-auobj-tree>\r\n  </div>\r\n</farris-lookup>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AuobjHelpComponent.ctorParameters = function () { return []; };
        AuobjHelpComponent.propDecorators = {
            dataMode: [{ type: core$1.Input }],
            displayText: [{ type: core$1.Input }],
            curKeyId: [{ type: core$1.Input }],
            auobjLookup: [{ type: core$1.ViewChild, args: ['auobjLookup',] }],
            selectedChanged: [{ type: core$1.Output }]
        };
        return AuobjHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuobjTreeComponent = /** @class */ (function () {
        function AuobjTreeComponent(service, racUtil, translate) {
            this.service = service;
            this.racUtil = racUtil;
            this.translate = translate;
            this.data = [];
            this.selectedKey = '';
            this.selectedKeyOld = '';
            // 树所需参数
            this.cols = [];
            this.selectedchanged = new core$1.EventEmitter();
            /**
             * 帮助输出事件
             */
            this.selectedAfterOk = new core$1.EventEmitter();
            this.closeModalEmitter = new core$1.EventEmitter();
        }
        /**
         * @return {?}
         */
        AuobjTreeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.cols = [
                    // { field: 'name', title: this.translate.instant('lblAuthObj') }
                    { field: 'name', title: '名称' }
                ];
            };
        /** 根据分配的功能操作初始对应的权限对象 */
        /**
         * 根据分配的功能操作初始对应的权限对象
         * @return {?}
         */
        AuobjTreeComponent.prototype.initData = /**
         * 根据分配的功能操作初始对应的权限对象
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var obs = this.service.getAll();
                if (this.dataMode === 'reassign') {
                    obs = this.service.getAllReAssign();
                }
                else {
                    obs = this.service.getAll();
                }
                obs.subscribe(( /**
                 * @param {?} result
                 * @return {?}
                 */function (result) {
                    _this.data = result;
                    if (_this.data) {
                        /** @type {?} */
                        var initNodeList_1 = [];
                        /** @type {?} */
                        var layer1 = _this.racUtil.findLayer1ByParentId(_this.data, 'id', 'parentId');
                        layer1.forEach(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) {
                            /** @type {?} */
                            var node = _this.convertToTreeNode(item);
                            initNodeList_1.push(node);
                            _this.initTreeNodeList(node);
                        }));
                        _this.treeNodeData = initNodeList_1;
                        _this.racUtil.setTreeIcon(_this.farrisTt);
                    }
                }));
            };
        /**
         * 构造Farris-Tree所需结构
         * @param authfieldList 权限字段列表
         */
        /**
         * 构造Farris-Tree所需结构
         * @private
         * @param {?} parentNode
         * @return {?}
         */
        AuobjTreeComponent.prototype.initTreeNodeList = /**
         * 构造Farris-Tree所需结构
         * @private
         * @param {?} parentNode
         * @return {?}
         */
            function (parentNode) {
                var _this = this;
                // 根据父节点过滤子节点
                /** @type {?} */
                var children = this.data.filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x.parentId === parentNode.data.id; }));
                // 将过滤的数据加到TreeNodes中
                if (children && children.length > 0) {
                    children.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        /** @type {?} */
                        var child = _this.convertToTreeNode(item);
                        parentNode.leaf = false;
                        parentNode.children.push(child);
                        _this.initTreeNodeList(child);
                    }));
                }
            };
        /**
         * 将权限字段实体转换为Farris-TreeNode
         */
        /**
         * 将权限字段实体转换为Farris-TreeNode
         * @private
         * @param {?} obj
         * @return {?}
         */
        AuobjTreeComponent.prototype.convertToTreeNode = /**
         * 将权限字段实体转换为Farris-TreeNode
         * @private
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var node = { data: obj, leaf: true, children: [], icon: this.racUtil.leafIcon };
                // 是否明细节点，type为0 说明是导航
                if (this.racUtil.isNav(obj.type.toString())) {
                    // tslint:disable-next-line:no-string-literal
                    node['leaf'] = false;
                    // tslint:disable-next-line:no-string-literal
                    node['children'] = [];
                    node['expandedIcon'] = this.racUtil.expandIcon; // 'folder-open';
                    node['collapseIcon'] = this.racUtil.collapseIcon; // 'folder';
                }
                return node;
            };
        /**
         * @param {?} newObj
         * @return {?}
         */
        AuobjTreeComponent.prototype.appendNode = /**
         * @param {?} newObj
         * @return {?}
         */
            function (newObj) {
                /** @type {?} */
                var parentRowNode = this.farrisTt.findRowNode(newObj.parentId);
                // const newTreeNode = this.convertToTreeNode(newObj);
                /** @type {?} */
                var selectedRow = this.farrisTt.selectedRow;
                if (this.racUtil.isNav(selectedRow.data.type)) {
                    this.farrisTt.append(newObj, this.farrisTt.selectedRow);
                }
                else {
                    this.farrisTt.append(newObj, this.farrisTt.selectedRow.parent);
                }
                this.farrisTt.selectNode(newObj.id);
            };
        /**
         * @param {?} newObj
         * @return {?}
         */
        AuobjTreeComponent.prototype.removeNode = /**
         * @param {?} newObj
         * @return {?}
         */
            function (newObj) {
                this.farrisTt.remove(newObj.id);
            };
        /**
         * @param {?} newObj
         * @return {?}
         */
        AuobjTreeComponent.prototype.updateNode = /**
         * @param {?} newObj
         * @return {?}
         */
            function (newObj) {
                // TODO update时data 参数有问题
                // this.farrisTt.update(newObj.id, newObj);
            };
        /**
         * 选中行改变后触发事件
         */
        /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
        AuobjTreeComponent.prototype.handleSelection = /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
            function (args) {
                this.selectedKey = args.node.data.id;
                this.selectedModel = args.node.data;
                // 首次触发
                if (this.selectedKeyOld === '') {
                    this.selectedKeyOld = this.selectedKey;
                    this.selectedchanged.emit(this.selectedModel);
                }
                else {
                    // 变化的情况下触发
                    if (this.selectedKeyOld !== this.selectedKey) {
                        this.selectedKeyOld = this.selectedKey;
                        this.selectedchanged.emit(this.selectedModel);
                    }
                }
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        AuobjTreeComponent.prototype.iconClass = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var id = _a.id;
                return {
                    'k-i-folder': true,
                    'k-icon': true
                };
            };
        /** 帮助确定按钮 */
        /**
         * 帮助确定按钮
         * @return {?}
         */
        AuobjTreeComponent.prototype.confirm = /**
         * 帮助确定按钮
         * @return {?}
         */
            function () {
                this.selectedKeyOld = this.selectedKey;
                this.selectedAfterOk.emit(this.selectedModel);
            };
        /**
         * @return {?}
         */
        AuobjTreeComponent.prototype.cancle = /**
         * @return {?}
         */
            function () {
                this.closeModalEmitter.next();
            };
        AuobjTreeComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'rac-auobj-tree',
                        template: "<farris-treetable class =\"f-utils-fill-flex-column\"  #farrisTt  \r\n[data]=\"treeNodeData\"\r\n[columns]=\"cols\"\r\n[idField]=\"'id'\" \r\n[fixedHeader]=\"true\"\r\n[fit]=\"true\"\r\n[showIcon]=\"true\"\r\n(nodeSelected)=\"handleSelection($event)\">\r\n</farris-treetable>\r\n\r\n<ng-template #btnOkAndCancle >\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">\u786E\u8BA4</button>\r\n    <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n  </ng-template>\r\n\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AuobjTreeComponent.ctorParameters = function () {
            return [
                { type: AuthObjService },
                { type: RacCommonUtil },
                { type: core.TranslateService }
            ];
        };
        AuobjTreeComponent.propDecorators = {
            dataMode: [{ type: core$1.Input }],
            initSelectedKeys: [{ type: core$1.Input }],
            farrisTt: [{ type: core$1.ViewChild, args: ['farrisTt',] }],
            selectedchanged: [{ type: core$1.Output }],
            selectedAfterOk: [{ type: core$1.Output }],
            closeModalEmitter: [{ type: core$1.Output }],
            btnOkAndCancleRef: [{ type: core$1.ViewChild, args: ['btnOkAndCancle',] }]
        };
        return AuobjTreeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthfieldHelpComponent = /** @class */ (function () {
        function AuthfieldHelpComponent() {
        }
        /**
         * @return {?}
         */
        AuthfieldHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        AuthfieldHelpComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'rac-authfield-help',
                        template: "<p>\r\n  authfield-help works!\r\n</p>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AuthfieldHelpComponent.ctorParameters = function () { return []; };
        return AuthfieldHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthfieldTreeComponent = /** @class */ (function () {
        function AuthfieldTreeComponent() {
        }
        /**
         * @return {?}
         */
        AuthfieldTreeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        AuthfieldTreeComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'rac-authfield-tree',
                        template: "<p>\r\n  authfield-tree works!\r\n</p>\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AuthfieldTreeComponent.ctorParameters = function () { return []; };
        return AuthfieldTreeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ReassignGridComponent = /** @class */ (function () {
        function ReassignGridComponent(reAssignService) {
            this.reAssignService = reAssignService;
            this.selectedKey = '';
            this.selectedKeyOld = '';
            this.selectedChanged = new core$1.EventEmitter();
            /**
             * 帮助输出事件
             */
            this.selectedAfterOk = new core$1.EventEmitter();
            this.closeModalEmitter = new core$1.EventEmitter();
        }
        /**
         * @return {?}
         */
        ReassignGridComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.columns = [
                    // { field: 'name', title: this.translate.instant('lblAuthObj') }
                    { field: 'authorizationCode', title: '权限对象编号', width: '0' },
                    { field: 'authorizationName', title: '权限对象名称', width: '200' },
                    { field: 'authfieldCode', title: '权限字段编号', width: '0' },
                    { field: 'authfieldName', title: '权限字段名称' }
                ];
            };
        /** 获取允许重授权的权限 */
        /**
         * 获取允许重授权的权限
         * @return {?}
         */
        ReassignGridComponent.prototype.initData = /**
         * 获取允许重授权的权限
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var obs = this.reAssignService.getAll();
                obs.subscribe(( /**
                 * @param {?} result
                 * @return {?}
                 */function (result) {
                    _this.datas = result;
                }));
            };
        /** 输入属性变化后 */
        /**
         * 输入属性变化后
         * @param {?} changes
         * @return {?}
         */
        ReassignGridComponent.prototype.ngOnChanges = /**
         * 输入属性变化后
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.datas || this.datas.length <= 0) {
                    // 服务端获取数据
                    this.initData();
                }
            };
        /**
         * 选中行改变后触发事件
         */
        /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
        ReassignGridComponent.prototype.handleSelection = /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
            function (args) {
                this.selectedModel = args.data;
                if (!this.selectedModel) {
                    this.selectedKey = '';
                    return;
                }
                this.selectedKey = this.selectedModel.id;
                // 首次触发
                if (this.selectedKeyOld === '') {
                    this.selectedKeyOld = this.selectedKey;
                    this.selectedChanged.emit(this.selectedModel);
                }
                else {
                    // 变化的情况下触发
                    if (this.selectedKeyOld !== this.selectedKey) {
                        this.selectedKeyOld = this.selectedKey;
                        this.selectedChanged.emit(this.selectedModel);
                    }
                }
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        ReassignGridComponent.prototype.iconClass = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var id = _a.id;
                return {
                    'k-i-folder': true,
                    'k-icon': true
                };
            };
        /** 帮助确定按钮 */
        /**
         * 帮助确定按钮
         * @return {?}
         */
        ReassignGridComponent.prototype.confirm = /**
         * 帮助确定按钮
         * @return {?}
         */
            function () {
                this.selectedKeyOld = this.selectedKey;
                this.selectedAfterOk.emit(this.selectedModel);
            };
        /**
         * @return {?}
         */
        ReassignGridComponent.prototype.cancle = /**
         * @return {?}
         */
            function () {
                this.closeModalEmitter.next();
            };
        ReassignGridComponent.decorators = [
            { type: core$1.Component, args: [{
                        selector: 'rac-reassign-grid',
                        template: "\r\n<div class=\"f-utils-flex-column\" style=\"height:450px;\">\r\n    <farris-datagrid   #farrisGrid  class=\"f-utils-flex-column f-utils-fill\" [columns]=\"columns\" [data]=\"datas\" [showBorder]=\"false\"\r\n        [idField]=\"'id'\"\r\n        [showLineNumber]=\"true\" [fitColumns]=\"true\" [fit]=\"true\" [striped]=\"true\" \r\n        (selectChanged)=\"handleSelection($event)\">\r\n    </farris-datagrid>\r\n</div>\r\n\r\n<ng-template #btnOkAndCancle >\r\n      <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">\u786E\u8BA4</button>\r\n      <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</ng-template>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ReassignGridComponent.ctorParameters = function () {
            return [
                { type: ReAssignService }
            ];
        };
        ReassignGridComponent.propDecorators = {
            datas: [{ type: core$1.Input }],
            selectedChanged: [{ type: core$1.Output }],
            selectedAfterOk: [{ type: core$1.Output }],
            closeModalEmitter: [{ type: core$1.Output }],
            btnOkAndCancleRef: [{ type: core$1.ViewChild, args: ['btnOkAndCancle',] }]
        };
        return ReassignGridComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ReassignHelpComponent = /** @class */ (function () {
        function ReassignHelpComponent() {
            this.displayText = '';
            this.selectedKeyOld = '';
            /**
             * 导航事件
             */
            this.selectedChanged = new core$1.EventEmitter();
        }
        /**
         * @return {?}
         */
        ReassignHelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        // 取数列
        // 取数列
        /**
         * @param {?} args
         * @return {?}
         */
        ReassignHelpComponent.prototype.afterKeySelected =
            // 取数列
            /**
             * @param {?} args
             * @return {?}
             */
            function (args) {
                this.curObj = new ReAssignEntity();
                this.curKeyIdList = [];
                // 更新值
                this.curObj.id = args['id'];
                this.curObj.authorizationCode = args['authorizationCode'];
                this.curObj.authorizationName = args['authorizationName'];
                this.curObj.authfieldCode = args['authfieldCode'];
                this.curObj.authfieldName = args['authfieldName'];
                this.displayText = args['authorizationName'] + ' ' + args['authfieldName'];
                this.selectedChanged.emit(this.curObj);
                this.reassignLookup.closeDialog();
            };
        /**
         * 选中行改变后触发事件
         */
        /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
        ReassignHelpComponent.prototype.handleSelection = /**
         * 选中行改变后触发事件
         * @param {?} args
         * @return {?}
         */
            function (args) {
                this.curKeyId = args.node.data.id;
                this.curObj = args.node.data;
                // 首次触发
                if (this.curKeyId === '') {
                    this.selectedKeyOld = this.curKeyId;
                    this.selectedChanged.emit(this.curObj);
                }
                else {
                    // 变化的情况下触发
                    if (this.selectedKeyOld !== this.curKeyId) {
                        this.selectedKeyOld = this.curKeyId;
                        this.selectedChanged.emit(this.curObj);
                    }
                }
            };
        ReassignHelpComponent.decorators = [
            { type: core$1.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'rac-reassign-help',
                        template: "<farris-lookup #reassignLookup [displayText]=\"displayText\" style=\"width:350px\"  name=\"reassignLookup\" \r\n[showButtons]=\"true\" [title]=\"'\u8BF7\u9009\u62E9\u6743\u9650'\" [buttonsRef]=\"this.reassignHelp.btnOkAndCancleRef\">\r\n  <div style=\"padding: 10px\">\r\n    <rac-reassign-grid #reassignHelp style=\"height:450px;width:540px\" [datas]=\"datas\" calss=\"f-utils-fill\"\r\n      (selectedAfterOk)=\"afterKeySelected($event)\" (closeModalEmitter)=\"this.reassignLookup.closeDialog()\">\r\n    </rac-reassign-grid>\r\n  </div>\r\n</farris-lookup>\r\n\r\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ReassignHelpComponent.ctorParameters = function () { return []; };
        ReassignHelpComponent.propDecorators = {
            displayText: [{ type: core$1.Input }],
            curKeyId: [{ type: core$1.Input }],
            datas: [{ type: core$1.Input }],
            reassignLookup: [{ type: core$1.ViewChild, args: ['reassignLookup',] }],
            selectedChanged: [{ type: core$1.Output }]
        };
        return ReassignHelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RacCommonModule = /** @class */ (function () {
        function RacCommonModule() {
        }
        RacCommonModule.decorators = [
            { type: core$1.NgModule, args: [{
                        declarations: [
                            DataHelpComponent,
                            AuobjHelpComponent,
                            AuobjTreeComponent,
                            AuthfieldHelpComponent,
                            AuthfieldTreeComponent,
                            ReassignGridComponent,
                            ReassignHelpComponent,
                        ],
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            kendoAngularButtons.ButtonsModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            kendoAngularGrid.GridModule,
                            uiDatagrid.DatagridModule,
                            kendoAngularLayout.LayoutModule,
                            uiLayout.LayoutModule,
                            uiPanel.FarrisPanelModule,
                            uiTreetable.TreeTableModule,
                            uiDatatable.DataTableModule,
                            kendoAngularTreeview.TreeViewModule,
                            uiLookup.LookupModule,
                            uiModal.ModalModule.forRoot(),
                            uiMessager.MessagerModule.forRoot()
                        ],
                        entryComponents: [
                            DataHelpComponent,
                            AuobjHelpComponent,
                            AuobjTreeComponent,
                            AuthfieldHelpComponent,
                            AuthfieldTreeComponent,
                            ReassignHelpComponent,
                            ReassignGridComponent
                        ],
                        providers: [
                            RacCommonUtil,
                            LocalRepository,
                            AuresultService,
                            AuthObjService,
                            ReAssignService,
                            AuthfieldService
                        ],
                        exports: [
                            DataHelpComponent,
                            AuobjHelpComponent,
                            AuobjTreeComponent,
                            AuthfieldHelpComponent,
                            AuthfieldTreeComponent,
                            ReassignHelpComponent,
                            ReassignGridComponent
                        ]
                    },] }
        ];
        return RacCommonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AuthEntryEntity = AuthEntryEntity;
    exports.AuthFieldEntity = AuthFieldEntity;
    exports.AuthobjEntity = AuthobjEntity;
    exports.DataSourceContextEntity = DataSourceContextEntity;
    exports.FetcherType = FetcherType;
    exports.ReAssignEntity = ReAssignEntity;
    exports.GSPAuthFieldGroup = GSPAuthFieldGroup;
    exports.BizDataDTO = BizDataDTO;
    exports.AuresultEntity = AuresultEntity;
    exports.AuthDataField = AuthDataField;
    exports.AuthDataSource = AuthDataSource;
    exports.HierarchicalType = HierarchicalType;
    exports.HierarchicalInfoEntity = HierarchicalInfoEntity;
    exports.FieldAccessType = FieldAccessType;
    exports.OperationEntity = OperationEntity;
    exports.AuresultChangesEntity = AuresultChangesEntity;
    exports.AuresultSave = AuresultSave;
    exports.DataFetcherEntity = DataFetcherEntity;
    exports.DBOColumnEntity = DBOColumnEntity;
    exports.RuleType = RuleType;
    exports.ResultContextEntity = ResultContextEntity;
    exports.AuthfieldVarEntity = AuthfieldVarEntity;
    exports.TreeService = TreeService;
    exports.ReAssignService = ReAssignService;
    exports.AuresultService = AuresultService;
    exports.AuthfieldService = AuthfieldService;
    exports.RacCommonUtil = RacCommonUtil;
    exports.INIT_SKIP = INIT_SKIP;
    exports.BUTTONCOUNT = BUTTONCOUNT;
    exports.PAGESIZES = PAGESIZES;
    exports.INIT_PAGEINDEX = INIT_PAGEINDEX;
    exports.INIT_PAGESIZE = INIT_PAGESIZE;
    exports.RacCommonModule = RacCommonModule;
    exports.ɵd = AuthObjService;
    exports.ɵi = LocalRepository;
    exports.ɵb = AuobjHelpComponent;
    exports.ɵc = AuobjTreeComponent;
    exports.ɵe = AuthfieldHelpComponent;
    exports.ɵf = AuthfieldTreeComponent;
    exports.ɵa = DataHelpComponent;
    exports.ɵg = ReassignGridComponent;
    exports.ɵh = ReassignHelpComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-sys-rac-common.umd.js.map