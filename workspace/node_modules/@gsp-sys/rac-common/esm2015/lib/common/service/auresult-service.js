/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { RestfulService } from '@farris/devkit';
import { RacCommonUtil } from '../../common/util/rac-util';
import { AuthDataSource } from '../entity/auth-data-source.entity';
// import { isNullOrEmptyString } from '@progress/kendo-angular-grid/dist/es2015/utils';
export class AuresultService {
    /**
     * @param {?} rest
     * @param {?} session
     */
    constructor(rest, session) {
        this.rest = rest;
        this.session = session;
    }
    /**
     * 获取权限需要分配的业务数据的数据源
     * @param {?} authField
     * @param {?} resultContext
     * @return {?}
     */
    getDataSourceByContext(authField, resultContext) {
        // mock数据
        // return of(dataSource);this.resultContext.dictDimensionValue
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /** @type {?} */
        const urlNew = url + '/datasource';
        /** @type {?} */
        let year = '';
        if (resultContext.yearObj && resultContext.yearObj.value) {
            year = resultContext.yearObj.value;
        }
        resultContext.year = year;
        if (resultContext.auVarValues && resultContext.auVarValues.length > 0) {
            return this.rest.post(urlNew + '/var', resultContext, null, headers);
        }
        /** @type {?} */
        const ownerId = resultContext.ownerId;
        /** @type {?} */
        const ownerType = resultContext.ownerType;
        /** @type {?} */
        const param = {
            ownerId: ownerId,
            ownerType: ownerType,
            authfield: authField,
            year: year,
        };
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取权限可以分配的业务数据的数据源
     * @param {?} authField
     * @return {?}
     */
    getDataSource(authField) {
        /** @type {?} */
        const ownerId = this.session.ownerId;
        /** @type {?} */
        const ownerType = this.session.ownerType;
        /** @type {?} */
        const authDataSource = new AuthDataSource();
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /**
         * ownerId  权限所有者Id,此处用户受全局业务组织过滤的，查找已分配的业务组织使用，这里不需要
         * ownerType 权限所有者类型 岗位1，用户2
         * @type {?}
         */
        const param = {
            ownerId: '',
            ownerType: 2,
            authfield: authField,
            year: ''
        };
        /** @type {?} */
        const urlNew = url + '/datasource';
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取权限可以分配的业务数据的数据源
     * @param {?} authField
     * @param {?} year
     * @return {?}
     */
    getNoUsersDataSource(authField, year) {
        /** @type {?} */
        const ownerId = 'nouser';
        /** @type {?} */
        const ownerType = this.session.ownerType;
        /** @type {?} */
        const authDataSource = new AuthDataSource();
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /**
         * ownerId  权限所有者Id,此处用户受全局业务组织过滤的，查找已分配的业务组织使用，这里不需要
         * ownerType 权限所有者类型 岗位1，用户2
         * @type {?}
         */
        const param = {
            ownerId: ownerId,
            ownerType: 2,
            authfield: authField,
            year: year
        };
        /** @type {?} */
        const urlNew = url + '/datasource';
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取权限需要分配的业务数据的数据源
     * @param {?} authField
     * @param {?} year
     * @param {?} assid1
     * @param {?} assid2
     * @return {?}
     */
    getNoUsersDataSourceByGroup(authField, year, assid1, assid2) {
        // mock数据
        // return of(dataSource);
        /** @type {?} */
        const authDataSource = new AuthDataSource();
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /** @type {?} */
        const param = {
            ownerId: 'nouser',
            ownerType: 2,
            authfield: authField,
            year: year,
            assid1: assid1,
            assid2: assid2,
        };
        /** @type {?} */
        const urlNew = url + '/datasource/group';
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取年度
     * @param {?} su
     * @return {?}
     */
    getYears(su) {
        /** @type {?} */
        const authDataSource = new AuthDataSource();
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        if (!su) {
            su = '*';
        }
        /** @type {?} */
        const urlNew = url + '/years/' + su;
        return this.rest.get(urlNew, null, headers);
    }
}
AuresultService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuresultService.ctorParameters = () => [
    { type: RestfulService },
    { type: RacCommonUtil }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuresultService.prototype.rest;
    /**
     * @type {?}
     * @private
     */
    AuresultService.prototype.session;
}
//# sourceMappingURL=data:application/json;base64,