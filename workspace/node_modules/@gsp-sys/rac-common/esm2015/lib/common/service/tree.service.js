/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { RacCommonUtil } from '../util/rac-util';
/**
 * 取数服务
 */
export class TreeService {
    /**
     * @param {?} util
     */
    constructor(util) {
        this.util = util;
    }
    /**
     * 按照path码构造树
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    makeTreeByPath(datas, pathField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (this.util.isNullOrEmptyString(x[pathField])) {
                return true;
            }
            /** @type {?} */
            const findObj = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[pathField] === x[pathField].substring(0, x[pathField].length - 4)));
            if (findObj === undefined || findObj === null) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const entity = {};
            entity['data'] = x;
            entity['children'] = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByPath(item, datas, pathField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    findChildrenByPath(parent, datas, pathField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[pathField].substring(0, childitem[pathField].length - 4) === parent['data'][pathField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity['data'] = child;
                // tslint:disable-next-line:no-string-literal
                childEntity['children'] = [];
                // tslint:disable-next-line:no-string-literal
                parent['children'].push(childEntity);
                this.findChildrenByPath(childEntity, datas, pathField);
            }));
        }
    }
    /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    makeTreeByParent(datas, parentField, keyField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (this.util.isNullOrEmptyString(x[parentField])) {
                return true;
            }
            // 断层的这种，应该也属于一级
            /** @type {?} */
            const p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[keyField] === x[parentField]));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const entity = {};
            entity['data'] = x;
            entity['children'] = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    findChildrenByParent(parent, datas, parentField, keyField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[parentField] === parent['data'][keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity['data'] = child;
                childEntity['children'] = [];
                parent['children'].push(childEntity);
                this.findChildrenByParent(childEntity, datas, parentField, keyField);
            }));
        }
    }
}
TreeService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TreeService.ctorParameters = () => [
    { type: RacCommonUtil }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeService.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,