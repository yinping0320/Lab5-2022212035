/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Input, Output, EventEmitter } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { TreeTableComponent } from '@farris/ui-treetable';
import { MessagerService } from '@farris/ui-messager';
import { AuthDataSource } from '../../common/entity/auth-data-source.entity';
import { RacCommonUtil } from '../../common/util/rac-util';
import { INIT_SKIP, BUTTONCOUNT, PAGESIZES, INIT_PAGEINDEX, INIT_PAGESIZE } from '../../common/util/page';
import { HierarchicalType } from '../../common/entity/hierarchical-type.enum';
import { TreeService } from '../../common/service/tree.service';
/**
 * 用户授权业务组织组件
 */
export class DataHelpComponent {
    /**
     * @param {?} session
     * @param {?} msgService
     * @param {?} notifyService
     * @param {?} treeService
     */
    constructor(session, msgService, notifyService, treeService) {
        this.session = session;
        this.msgService = msgService;
        this.notifyService = notifyService;
        this.treeService = treeService;
        this.closeModalEmitter = new EventEmitter();
        /**
         * 弹出框中用到的最终选中的数据
         */
        this.selectEmitter = new EventEmitter();
        this.selectedModels = [];
        this.hasSelectKeys = []; // 输入 修改前，已经选中
        // 输入 修改前，已经选中
        this.isHasSelectAll = false; // 输入 之前是否全选
        // 输入 之前是否全选
        this.authField = ''; // 全局业务组织内码
        // 全局业务组织内码
        this.ownerId = ''; // 用户内码
        // 用户内码
        this.canAssignDatas = []; // 可分配的数据源
        // 数据是否完整；完整表示可以分*
        this.isDisplayTree = false; // 输入
        // 输入
        this.isShowSearch = false; // 是否展示搜索
        // 是否展示搜索
        this.isSelectAll = false;
        this.selectKeys = [];
        /**
         * 是否单选
         */
        this.singleSelect = false;
        this.treeHeight = '342px';
        /**
         * 是否受维度分组
         */
        this.isAuGroup = true;
        /**
         * 弹出框中用到的最终选中的数据
         */
        this.selectByGroupEmitter = new EventEmitter();
        // 业务数据源相关信息
        this.dataKey = ''; // 取数主键列
        // 取数主键列
        this.helpFields = []; // 字段显示名
        // 字段显示名
        this.showFields = []; // 显示的字段
        // 显示的字段
        this.codeOrNameFields = []; // 搜索的字段；
        // 搜索的字段；
        this.authDataSource = new AuthDataSource();
        /**
         * 是否可用
         */
        this.isEnable = true;
        /**
         * 是否全部权限
         */
        this.isAllAuth = false;
        // 组件上用skip
        this.skip = INIT_SKIP;
        this.pageSize = INIT_PAGESIZE;
        this.pageIndex = INIT_PAGEINDEX;
        // 树控件
        // 树控件绑定的数据
        this.treedata = [];
        // 绑定树的平铺数据
        this.flatData = [];
        /**
         * root根节点，用于默认展开
         */
        this.root = '';
        this.saveSelections = [];
        // TreeTable上要显示的列
        this.treeCols = [];
        // [
        //   { field: 'name', title: '名称', width: 100 },
        //   { field: 'code', title: '编号', width: 100 },
        // ];
        // 树节点加载方式，async异步，all 同步
        this.loadDataType = 'all'; // 'all' | 'async'
        // 'all' | 'async'
        // 树节点选中动作
        this.cascadeCheck = false;
        this.cascadeUp = false;
        this.cascadeDown = true;
        // 是否已经加载过
        this.isTreeLoaded = false;
        /**
         * 要搜索的信息
         */
        this.searchInfo = '';
        /**
         * 要搜索的信息
         */
        this.searchDatas = [];
        // searchTitle = this.translate.instant('auresult_search_label');
        this.searchTitle = '查找';
        // 上次搜索文本
        this.oldTreeSearch = '';
        this.treeSearchIndex = 0;
        // 分页模式
        this.pageSetting = {
            buttonCount: BUTTONCOUNT,
            info: true,
            pageSizes: PAGESIZES,
            previousNext: true
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 获取可分配的业务数据
     * @return {?}
     */
    getAuthDataSource() {
        this.isSelectAll = false;
        this.session.ownerId = this.ownerId;
        this.session.ownerType = 2;
        this.selectKeys = [];
        this.treeCols = [];
        this.treedata = [];
        this.cascadeCheck = false; // load数据时，级联先关闭，否则会导致下级选中，自动选中上级
        if (this.session.isNullOrEmptyString(this.authField)) {
            this.canAssignDatas = [];
            this.isSelectAll = false;
            return;
        }
    }
    /**
     * 根据获取到的权限结果数据，加载界面
     * @return {?}
     */
    displayData() {
        this.selectKeys = [];
        this.treeCols = [];
        this.treedata = [];
        this.cascadeCheck = false; // load数据时，级联先关闭，否则会导致下级选中，自动选中上级
        if (this.session.isNullOrEmptyString(this.authField)) {
            this.canAssignDatas = [];
            this.isSelectAll = false;
            return;
        }
        this.showElement('checkall');
        this.isSelectAll = false;
        this.authDataSource.data = this.data.data;
        this.authDataSource.showFields = this.data.showFields;
        this.authDataSource.keyField = this.data.keyField;
        this.authDataSource.helpFields = this.data.helpFields;
        this.authDataSource.hierarchicalType = this.data.hierarchicalType;
        this.authDataSource.hierarchicalInfo = this.data.hierarchicalInfo;
        this.canAssignDatas = this.authDataSource.data;
        this.searchDatas = this.canAssignDatas;
        this.dataKey = this.authDataSource.keyField;
        this.helpFields = this.authDataSource.helpFields;
        this.showFields = this.authDataSource.showFields;
        this.codeOrNameFields = this.getCodeOrNameFields();
        if (this.hasSelectKeys.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x === '*'))) {
            this.isSelectAll = this.isHasSelectAll = true;
        }
        if (this.isAllAuth) {
            this.isSelectAll = this.isHasSelectAll = true;
        }
        if (this.isSelectAll) {
            // TODO  如何搞成 直接选中全部
            this.canAssignDatas.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                this.selectKeys.push(item[this.dataKey]);
            }));
        }
        else if (this.hasSelectKeys) {
            this.hasSelectKeys.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                this.selectKeys.push(item);
            }));
        }
        // 显示列表
        if (this.isDisplayTree === false) {
            this.queryByPage();
            return;
        }
        // 显示树信息
        this.showTreeInfo();
    }
    /**
     * 展示树形相关数据
     * @return {?}
     */
    showTreeInfo() {
        this.hideElement('checkall');
        // if (this.farrisTree === undefined) {
        //     return;
        // }
        // 处理树形相关逻辑
        this.authDataSource.showFields.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            this.treeCols.push({ field: item.field, title: item.title, width: 100 });
        }));
        /** @type {?} */
        const hierarchicalType = this.authDataSource.hierarchicalType;
        /** @type {?} */
        const hierarchicalInfo = this.authDataSource.hierarchicalInfo;
        if (hierarchicalType === HierarchicalType.Parent) {
            /** @type {?} */
            let parentKey = this.dataKey;
            if (hierarchicalInfo.parentKeyField && hierarchicalInfo.parentKeyField.length > 0) {
                parentKey = hierarchicalInfo.parentKeyField;
            }
            this.treedata = this.treeService.makeTreeByParent(this.canAssignDatas, hierarchicalInfo.parentField, parentKey);
        }
        else {
            this.treedata = this.treeService.makeTreeByPath(this.canAssignDatas, hierarchicalInfo.pathField);
        }
        // 找到第一层   直接展开
        // 初始加载不级联，否则会导致下级选中，自动选中上级
        this.farrisTree.cascadeCheck = false;
        this.isTreeLoaded = false;
        this.farrisTree.loadedData.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            // 加载过，之后不需要再次加载
            if (this.isTreeLoaded === true) {
                return;
            }
            // 初始加载不级联，否则会导致下级选中，自动选中上级
            this.farrisTree.cascadeCheck = false;
            // 根节点默认展开
            if ((this.root) && this.root !== '') {
                this.farrisTree.expandNode(this.root);
            }
            if (this.isSelectAll) {
                this.farrisTree.checkAllNodes();
            }
            else if (this.hasSelectKeys.length > 0) {
                this.farrisTree.checkedNodes(this.hasSelectKeys);
            }
            // load完数据时，级联打开，可以选中上级自动选中下级
            this.farrisTree.cascadeCheck = true;
            // 加载过，之后不需要再次加载
            this.isTreeLoaded = true;
        }));
    }
    /**
     * 报错处理
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.authDataSource.data = [];
        console.log(error);
        console.log(error.error.Message);
        this.msgService.error(error.error.Message);
    }
    // 选择属性：单选、多选
    /**
     * @return {?}
     */
    get selectableSettings() {
        return {
            checkboxOnly: true,
            mode: this.singleSelect ? 'single' : 'multiple',
            enabled: true
        };
    }
    // 图标
    /**
     * @param {?} __0
     * @return {?}
     */
    iconClass({ type }) {
        return {
            'k-i-folder': true,
            'k-icon': true
        };
    }
    /**
     * 获取选择信息
     * @return {?}
     */
    getSelectInfo() {
        this.selectedModels = [];
        /** @type {?} */
        const result = {
            data: [],
            selectedKey: []
        };
        // 全选
        if (this.isSelectAll && this.isIntegrityData && this.data.length === this.selectKeys) {
            /** @type {?} */
            const obj = {
                data: '*'
            };
            this.selectedModels.push(obj);
            result.data = ['*'];
            result.selectedKey = ['*'];
            return result;
        }
        // 树显示，需要先根据选中的数据构造selectKeys
        if (this.isDisplayTree) {
            // 选中的行，过滤掉业务对象，只保留功能操作
            if (this.farrisTree.checkeds) {
                /** @type {?} */
                const checkedRows = this.farrisTree.checkeds.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data));
                // 过滤功能操作分组的行
                // let checkedOpRows = this.checkedRows.filter(x => x.type === '1');
                this.selectKeys = checkedRows.map((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => m[this.dataKey]));
            }
            else {
                this.selectKeys = [];
            }
        }
        if (this.selectKeys.length > 0) {
            this.selectKeys.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                /** @type {?} */
                const findObj = this.canAssignDatas.find((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y[this.dataKey] === x));
                this.selectedModels.push(findObj);
            }));
        }
        result.data = this.selectedModels;
        result.selectedKey = this.selectKeys;
        return result;
    }
    /**
     * 判断是否分了全部权限*，首先必须全选，其次必须是数据完整的，然后选中的数据必须与数据源长度一致（如果仅搜索后的全选，不是*）
     * @return {?}
     */
    getIsAllAuth() {
        return this.isSelectAll && this.isIntegrityData && this.data.length === this.selectKeys;
    }
    /**
     * 确定发射选中数据以及选中内码
     * @return {?}
     */
    confirm() {
        this.closeModalEmitter.next();
        this.selectedModels = [];
        if (this.getIsAllAuth()) {
            /** @type {?} */
            const obj = {
                data: '*'
            };
            this.selectedModels.push(obj);
            this.selectEmitter.next({
                data: ['*'],
                selectedKey: ['*']
            });
            return;
        }
        // 树显示，需要先根据选中的数据构造selectKeys
        if (this.isDisplayTree) {
            // 选中的行，过滤掉业务对象，只保留功能操作
            if (this.farrisTree.checkeds) {
                /** @type {?} */
                const checkedRows = this.farrisTree.checkeds.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data));
                // 过滤功能操作分组的行
                // let checkedOpRows = this.checkedRows.filter(x => x.type === '1');
                this.selectKeys = checkedRows.map((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => m[this.dataKey]));
            }
            else {
                this.selectKeys = [];
            }
        }
        if (this.selectKeys.length > 0) {
            this.selectKeys.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                /** @type {?} */
                const findObj = this.canAssignDatas.find((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y[this.dataKey] === x));
                this.selectedModels.push(findObj);
            }));
        }
        this.selectEmitter.next({
            data: this.selectedModels,
            selectedKey: this.selectKeys
        });
    }
    /**
     * @return {?}
     */
    cancle() {
        this.closeModalEmitter.next();
    }
    /**
     * 全选，这里全选可能是过滤后数据的全选
     * @return {?}
     */
    checkAllClick() {
        this.isSelectAll = !this.isSelectAll;
        /** @type {?} */
        let key = '';
        if (this.isSelectAll) {
            // 如果已经选中，则不处理，没有选中，则选中
            this.searchDatas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                key = data[this.dataKey];
                /** @type {?} */
                const index = this.selectKeys.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x === key));
                if (index < 0) {
                    this.selectKeys.push(key);
                }
            }));
            if (this.isDisplayTree) {
                if (this.farrisTree) {
                    this.farrisTree.checkAllNodes();
                }
            }
        }
        else {
            if (this.isDisplayTree) {
                if (this.farrisTree) {
                    this.farrisTree.unCheckAllNodes();
                }
            }
            else {
                this.searchDatas.forEach((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    key = data[this.dataKey];
                    /** @type {?} */
                    const index = this.selectKeys.findIndex((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x === key));
                    if (index > -1) {
                        // 如果已经选中，就删除
                        this.selectKeys.splice(index, 1);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    checkClick() {
        this.isSelectAll = !this.isSelectAll;
        if (this.isSelectAll) {
            // TODO  如何搞成 直接选中全部
            this.canAssignDatas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this.selectKeys.push(data[this.dataKey]);
            }));
            this.farrisTree.checkAllNodes();
            this.selectByGroupEmitter.next(['*']);
        }
        else {
            //  this.farrisTree.unCheckAllNodes();
            this.selectKeys = [];
            this.selectByGroupEmitter.next([]);
        }
    }
    /**
     * 选择事件
     * @param {?} e
     * @return {?}
     */
    onSelectedKeysChange(e) {
        /** @type {?} */
        const len = this.selectKeys.length;
        if (len !== this.canAssignDatas.length) {
            // 如果全部选中了，isSelectAll 也不需要设置为true；isSelectAll的含义是*的意思，新增数据也被选中
            this.isSelectAll = false;
        }
        if (this.isSelectAll) {
            this.selectByGroupEmitter.next(['*']);
        }
        else {
            this.selectByGroupEmitter.next(this.selectKeys);
        }
    }
    /**
     * 点击分页查询或者分页参数变化后查询
     * @param {?} event 分页参数
     * @return {?}
     */
    pageChange(event) {
        // skip和pageSize必须得重新赋值，因为可能用户重新选择了分页大小或者分页索引
        // 刷新界面按钮数量和焦点
        this.skip = event.skip;
        this.pageSize = event.take;
        this.pageIndex = this.skip / this.pageSize + 1;
        // 查询
        this.queryByPage();
    }
    /**
     * 列表的查询
     * @return {?}
     */
    queryByPage() {
        this.gridView = {
            data: this.searchDatas.slice(this.skip, this.skip + this.pageSize),
            total: this.searchDatas.length
        };
    }
    /**
     * @return {?}
     */
    searchClick() {
        this.search(this.searchInfo);
    }
    /**
     * 搜索树状
     * @param {?} txt
     * @return {?}
     */
    search(txt) {
        if (this.isDisplayTree) {
            this.searchTree(txt);
            return;
        }
        this.searchInfo = txt;
        if (this.session.isNullOrEmptyString(this.searchInfo)) {
            this.searchDatas = this.canAssignDatas;
            this.queryByPage();
            return;
        }
        this.searchDatas = [];
        this.canAssignDatas.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < this.showFields.length; i++) {
                if (item[this.showFields[i].field].toString().indexOf(this.searchInfo) > -1) {
                    this.searchDatas.push(item);
                    break;
                }
            }
        }));
        this.queryByPage();
    }
    /**
     * 获取编号或者名称字段
     * @return {?}
     */
    getCodeOrNameFields() {
        /** @type {?} */
        const result = [];
        this.showFields.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item.field.toLocaleLowerCase().indexOf('code') > -1 ||
                item.field.toLocaleLowerCase().indexOf('name') > -1) {
                result.push(item);
            }
        }));
        if (result.length === 0) {
            result.push(this.showFields[0]);
        }
        return result;
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    searchTreeSelf(arg) {
        this.searchTree(arg.value);
    }
    /**
     * 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     * @param {?} txt
     * @return {?}
     */
    searchTree(txt) {
        // 搜索内容为空，不处理
        if (!txt) {
            this.treeSearchIndex = 0;
            return;
        }
        this.farrisTree.clearSelections();
        // 搜索内容与上次不同，重新搜索
        if (this.oldTreeSearch !== txt) {
            // 置空重新搜索
            this.searchDatas = [];
            this.canAssignDatas.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                // 遍历搜索字段
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < this.codeOrNameFields.length; i++) {
                    /** @type {?} */
                    const field = this.codeOrNameFields[i].field;
                    if (item[field].indexOf(txt) > -1) {
                        this.searchDatas.push(item);
                        break;
                    }
                }
            }));
            // 首次搜索，从第一个开始搜索
            this.treeSearchIndex = 0;
        }
        if (this.searchDatas.length === 0) {
            this.msgService.warning('没有满足条件的数据!');
            return;
        }
        // 搜到指定对象，需要设置父节点全部展开,其他节点全部收起
        /** @type {?} */
        const key = this.searchDatas[this.treeSearchIndex][this.dataKey];
        this.farrisTree.selectNode(key);
        this.farrisTree.collapseAll();
        // 展开父级
        this.expandParent(key);
        this.oldTreeSearch = txt;
        this.treeSearchIndex = this.treeSearchIndex + 1;
        // 已经搜索到最后，需要重头搜索
        if (this.treeSearchIndex === this.searchDatas.length) {
            this.oldTreeSearch = '';
            this.treeSearchIndex = 0;
        }
    }
    /**
     * 逐一找到需要展开的父节点，全部展开
     * @param {?} key
     * @return {?}
     */
    expandParent(key) {
        /** @type {?} */
        const parent = this.farrisTree.findRowNode(key);
        /** @type {?} */
        let parentNode = parent.parent;
        if (parentNode) {
            while (parentNode) {
                this.farrisTree.expandNode(parentNode.id);
                parentNode = parentNode.parent;
            }
        }
        else {
            this.farrisTree.expandNode(key);
        }
    }
    /**
     * 树形选中全部
     * @return {?}
     */
    treeCheckAll() {
        this.isSelectAll = true;
    }
    /**
     * 树形取消全部
     * @return {?}
     */
    treeUnCheckAll() {
        this.isSelectAll = false;
    }
    /**
     * 取消勾选
     * @return {?}
     */
    nodeUnChecked() {
        if (this.isSelectAll) {
            this.isSelectAll = false;
        }
    }
    /**
     * @param {?} elementName
     * @return {?}
     */
    showElement(elementName) {
        if (document.getElementById(elementName)) {
            document.getElementById(elementName).style.display = '';
        }
    }
    /**
     * @param {?} elementName
     * @return {?}
     */
    hideElement(elementName) {
        if (document.getElementById(elementName)) {
            document.getElementById(elementName).style.display = 'none';
        }
    }
}
DataHelpComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'rac-data-help',
                template: "\r\n\r\n<div *ngIf=\"!isDisplayTree\" class=\"f-page flex-column\" style=\"background-color:#ffffff;\">\r\n    <!-- \u6761\u4EF6\u641C\u7D22(click)=\"\" -->\r\n    <div *ngIf=\"isShowSearch\" class=\"mt-1 form-group row ml-1\">\r\n            <div pr-2 text-left class=\"col-xs-3\">\r\n                        <input id=\"checkAllData\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n                            [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkAllClick()\" />\r\n                        <label class=\"ml-2 k-checkbox-label\" for=\"checkAllData\">\u5168\u9009</label>\r\n             </div>\r\n            <label class=\"ml-2\">\u67E5\u627E\uFF1A</label>\r\n            <input type=\"text\" name=\"searchInfo\" [(ngModel)]=\"searchInfo\" style=\"width: 200px;\" />\r\n            <button kendoButton [icon]=\"'search'\" (click)=\"searchClick()\"></button>\r\n    </div>\r\n    <div class=\"f-utils-fill-auto\">\r\n        <kendo-grid #dataGrid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\"\r\n            [kendoGridSelectBy]=\"authDataSource.keyField\" [selectedKeys]=\"selectKeys\" [data]=\"gridView\" [height]=\"360\"\r\n            (selectedKeysChange)=\"onSelectedKeysChange($event)\" [skip]=\"skip\" [pageable]=\"pageSetting\"\r\n            [pageSize]=\"pageSize\" (pageChange)=\"pageChange($event)\">\r\n            <kendo-grid-checkbox-column title=\"\u9009\u62E9\" width=\"60px\"\r\n          ></kendo-grid-checkbox-column>\r\n            <ng-template ngFor [ngForOf]=\"showFields\" let-column>\r\n                <kendo-grid-column field=\"{{column.field}}\" title=\"{{column.title}}\">\r\n                </kendo-grid-column>\r\n            </ng-template>\r\n        </kendo-grid>\r\n    </div>\r\n</div>\r\n\r\n<div *ngIf=\"isDisplayTree\" class=\"f-page flex-column\" style=\"background-color:#ffffff;\">\r\n    <div *ngIf=\"isShowSearch\" class=\"mt-1 form-group row ml-1\">\r\n        <div *ngIf=\"!singleSelect\" id=\"treehead\" class=\"k-form-field\">\r\n            <input id=\"cascadeDown\" class=\"k-checkbox\" type=\"checkbox\" name=\"cascadeDown\" [checked]=\"cascadeDown\"\r\n                [(ngModel)]=\"cascadeDown\" />\r\n            <label class=\"k-checkbox-label\" for=\"cascadeDown\">\u540C\u6B65\u4E0B\u7EA7</label>\r\n        </div>\r\n        <div pr-2 text-left class=\"col-xs-3\">\r\n                <input id=\"checkAllDataTree\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n                    [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkAllClick()\" />\r\n                <label class=\"ml-2 k-checkbox-label\" for=\"checkAllDataTree\">\u5168\u9009</label>\r\n        </div>\r\n    </div>\r\n    <div id=\"treebody\" class=\"f-struct-wrapper f-utils-fill-flex-column\"  [style.height]=\"treeHeight\">\r\n    <farris-treetable #farrisTree class=\"f-utils-fill-flex-column\" [data]=\"this.treedata\" [columns]=\"treeCols\" [idField]=\"dataKey\"\r\n    [showCheckAll]=\"true\"\r\n    [fit]=\"true\"\r\n    [fixedHeader]=\"true\"\r\n    [enableFindText]=\"true\"\r\n    [singleSelect]=\"singleSelect\" \r\n    [resizableColumns]=\"true\" \r\n    [showIcon]=\"true\"\r\n    [selectOnCheck]=\"false\"\r\n    (onlySelectSelf)=\"true\" \r\n    [(cascadeDown)]=\"this.cascadeDown\"\r\n    [(cascadeUp)]=\"this.cascadeUp\"\r\n    [keepSelect]=\"false\" \r\n    [showCheckbox]=\"true\" \r\n    [(loadDataType)]=\"this.loadDataType\" \r\n    (checkAll)=\"treeCheckAll()\" \r\n    (unCheckAll)=\"treeUnCheckAll()\"\r\n    (nodeUnChecked)=\"nodeUnChecked()\"\r\n    [(showFilterBar)] = \"isShowSearch\"\r\n    (search) = \"searchTreeSelf($event)\"\r\n    [allColumnsTitle] = \"searchTitle\">\r\n     </farris-treetable>\r\n    </div>\r\n</div>\r\n<!--\u5168\u9009\u4E0D\u5728\u8FD9\u91CC\r\n  <div id=\"checkall\" >\r\n    <div pr-2 text-left class=\"col-xs-3\">\r\n      <input id=\"checkAllData\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n        [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkClick()\" />\r\n      <label class=\"k-checkbox-label\" for=\"checkAllData\">{{ 'chkCheckAll' | translate }}</label>\r\n    </div>\r\n  </div>\r\n-->",
                styles: [""]
            }] }
];
/** @nocollapse */
DataHelpComponent.ctorParameters = () => [
    { type: RacCommonUtil },
    { type: MessagerService },
    { type: NotifyService },
    { type: TreeService }
];
DataHelpComponent.propDecorators = {
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }],
    farrisTree: [{ type: ViewChild, args: ['farrisTree',] }],
    selectEmitter: [{ type: Output }],
    hasSelectKeys: [{ type: Input }],
    isHasSelectAll: [{ type: Input }],
    authField: [{ type: Input }],
    ownerId: [{ type: Input }],
    canAssignDatas: [{ type: Input }],
    data: [{ type: Input }],
    isIntegrityData: [{ type: Input }],
    isDisplayTree: [{ type: Input }],
    isShowSearch: [{ type: Input }],
    singleSelect: [{ type: Input }],
    treeHeight: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DataHelpComponent.prototype.btnOkAndCancleRef;
    /** @type {?} */
    DataHelpComponent.prototype.farrisTree;
    /** @type {?} */
    DataHelpComponent.prototype.closeModalEmitter;
    /**
     * 弹出框中用到的最终选中的数据
     * @type {?}
     */
    DataHelpComponent.prototype.selectEmitter;
    /** @type {?} */
    DataHelpComponent.prototype.selectedModels;
    /** @type {?} */
    DataHelpComponent.prototype.hasSelectKeys;
    /** @type {?} */
    DataHelpComponent.prototype.isHasSelectAll;
    /** @type {?} */
    DataHelpComponent.prototype.authField;
    /** @type {?} */
    DataHelpComponent.prototype.ownerId;
    /** @type {?} */
    DataHelpComponent.prototype.canAssignDatas;
    /** @type {?} */
    DataHelpComponent.prototype.data;
    /** @type {?} */
    DataHelpComponent.prototype.isIntegrityData;
    /** @type {?} */
    DataHelpComponent.prototype.isDisplayTree;
    /** @type {?} */
    DataHelpComponent.prototype.isShowSearch;
    /** @type {?} */
    DataHelpComponent.prototype.isSelectAll;
    /** @type {?} */
    DataHelpComponent.prototype.selectKeys;
    /**
     * 是否单选
     * @type {?}
     */
    DataHelpComponent.prototype.singleSelect;
    /** @type {?} */
    DataHelpComponent.prototype.treeHeight;
    /**
     * 是否受维度分组
     * @type {?}
     */
    DataHelpComponent.prototype.isAuGroup;
    /**
     * 弹出框中用到的最终选中的数据
     * @type {?}
     */
    DataHelpComponent.prototype.selectByGroupEmitter;
    /** @type {?} */
    DataHelpComponent.prototype.dataKey;
    /** @type {?} */
    DataHelpComponent.prototype.helpFields;
    /** @type {?} */
    DataHelpComponent.prototype.showFields;
    /** @type {?} */
    DataHelpComponent.prototype.codeOrNameFields;
    /** @type {?} */
    DataHelpComponent.prototype.authDataSource;
    /**
     * 是否可用
     * @type {?}
     */
    DataHelpComponent.prototype.isEnable;
    /**
     * 是否全部权限
     * @type {?}
     */
    DataHelpComponent.prototype.isAllAuth;
    /**
     * 分页参数：默认展示200条,可修改
     * @type {?}
     */
    DataHelpComponent.prototype.gridView;
    /** @type {?} */
    DataHelpComponent.prototype.pageSetting;
    /** @type {?} */
    DataHelpComponent.prototype.skip;
    /** @type {?} */
    DataHelpComponent.prototype.pageSize;
    /** @type {?} */
    DataHelpComponent.prototype.pageIndex;
    /** @type {?} */
    DataHelpComponent.prototype.treedata;
    /** @type {?} */
    DataHelpComponent.prototype.flatData;
    /**
     * root根节点，用于默认展开
     * @type {?}
     */
    DataHelpComponent.prototype.root;
    /** @type {?} */
    DataHelpComponent.prototype.saveSelections;
    /** @type {?} */
    DataHelpComponent.prototype.treeCols;
    /** @type {?} */
    DataHelpComponent.prototype.loadDataType;
    /** @type {?} */
    DataHelpComponent.prototype.cascadeCheck;
    /** @type {?} */
    DataHelpComponent.prototype.cascadeUp;
    /** @type {?} */
    DataHelpComponent.prototype.cascadeDown;
    /** @type {?} */
    DataHelpComponent.prototype.isTreeLoaded;
    /**
     * 要搜索的信息
     * @type {?}
     */
    DataHelpComponent.prototype.searchInfo;
    /**
     * 要搜索的信息
     * @type {?}
     */
    DataHelpComponent.prototype.searchDatas;
    /** @type {?} */
    DataHelpComponent.prototype.searchTitle;
    /** @type {?} */
    DataHelpComponent.prototype.oldTreeSearch;
    /** @type {?} */
    DataHelpComponent.prototype.treeSearchIndex;
    /**
     * @type {?}
     * @private
     */
    DataHelpComponent.prototype.session;
    /**
     * @type {?}
     * @private
     */
    DataHelpComponent.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    DataHelpComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    DataHelpComponent.prototype.treeService;
}
//# sourceMappingURL=data:application/json;base64,