import { SessionService } from '@ecp-caf/caf-common';
import { CommonModule } from '@angular/common';
import { HttpHeaders, HttpClientModule } from '@angular/common/http';
import { GridModule } from '@progress/kendo-angular-grid';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { LayoutModule } from '@progress/kendo-angular-layout';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { ModalModule } from '@farris/ui-modal';
import { LayoutModule as LayoutModule$1 } from '@farris/ui-layout';
import { FarrisPanelModule } from '@farris/ui-panel';
import { DataTableModule } from '@farris/ui-datatable';
import { DatagridModule } from '@farris/ui-datagrid';
import { RestfulService } from '@farris/devkit';
import { of } from 'rxjs/observable/of';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { from } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { TreeTableModule } from '@farris/ui-treetable';
import { Injectable, Component, ViewChild, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { LookupModule } from '@farris/ui-lookup';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 操作实体
 */
class AuthEntryEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 权限字段实体
 */
class AuthFieldEntity {
}
/**
 * 权限字段分组
 */
class GSPAuthFieldGroup {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 权限对象实体
 */
class AuthobjEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 操作实体
 */
class ReAssignEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据操作实体
 */
class OperationEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据源上下文
 */
class DataSourceContextEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const FetcherType = {
    None: 0,
    DataRow: 1,
    Column: 2,
    Rule: 3,
};
FetcherType[FetcherType.None] = 'None';
FetcherType[FetcherType.DataRow] = 'DataRow';
FetcherType[FetcherType.Column] = 'Column';
FetcherType[FetcherType.Rule] = 'Rule';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *   规则权限实体
 */
class BizDataDTO {
}
/**
 * 权限字段实体
 */
class AuresultEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 权限字段对应的设置信息：取数列、帮助列、展示列；以及数据源
 */
class AuthDataSource {
}
class AuthDataField {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const HierarchicalType = {
    Undefined: 0,
    Parent: 1,
    Path: 2,
    ParentAndPath: 3,
};
HierarchicalType[HierarchicalType.Undefined] = 'Undefined';
HierarchicalType[HierarchicalType.Parent] = 'Parent';
HierarchicalType[HierarchicalType.Path] = 'Path';
HierarchicalType[HierarchicalType.ParentAndPath] = 'ParentAndPath';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HierarchicalInfoEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const FieldAccessType = {
    /** 未定义，不是字段权限。 */
    Undefined: 0,
    /** 没有任何访问权限。 */
    None: 1,
    /** 只读权限。 */
    ReadOnly: 2,
    /** 没有限制。 */
    Full: 3,
};
FieldAccessType[FieldAccessType.Undefined] = 'Undefined';
FieldAccessType[FieldAccessType.None] = 'None';
FieldAccessType[FieldAccessType.ReadOnly] = 'ReadOnly';
FieldAccessType[FieldAccessType.Full] = 'Full';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 权限分配结果变更集实体
 */
class AuresultChangesEntity {
}
class AuresultSave {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataFetcherEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DBOColumnEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const RuleType = {
    True: 1,
    Common: 2,
};
RuleType[RuleType.True] = 'True';
RuleType[RuleType.Common] = 'Common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResultContextEntity {
    constructor() {
        /**
         * 组织岗上的数据权限自动继承业务组织权限
         */
        this.inheritPermission = false;
        /**
         * 维度1的值
         */
        this.assid1 = '';
        /**
         * 维度2的值
         */
        this.assid2 = '';
        /**
         * 变量值
         */
        this.auVarValues = [];
    }
}
/**
 * 权限字段用到的变量键值对
 */
class AuthfieldVarEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RacCommonUtil {
    /**
     * @param {?} sessionSv
     */
    constructor(sessionSv) {
        this.sessionSv = sessionSv;
        /**
         * 维度1的值
         */
        this.assid1 = '';
        /**
         * 维度2的值
         */
        this.assid2 = '';
        this.AUDATACONTROL = 'AuDataControl';
        this.expandIcon = 'f-icon f-icon-file-folder-open text-warning';
        this.collapseIcon = 'f-icon f-icon-file-folder-close text-warning';
        this.leafIcon = 'f-icon f-icon-file-txt text-warning';
    }
    /**
     * 构造Header
     * @return {?}
     */
    getHeader() {
        /** @type {?} */
        const sessionId = this.sessionSv.getCurrentSeesionId();
        /** @type {?} */
        const headers = new HttpHeaders().set('SessionId', sessionId);
        return { headers };
    }
    /**
     * 获取上下文中的用户
     * @return {?}
     */
    getCurrentUserId() {
        // 测试用写死
        return 'admin';
    }
    /**
     * Guid生成
     * @return {?}
     */
    getGuid36() {
        /**
         * @return {?}
         */
        function S4() {
            // tslint:disable-next-line:no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * 权限分配结果路径
     * @return {?}
     */
    getResultPath() {
        /** @type {?} */
        const path = `/api/runtime/sys/v1.0/assignresults`;
        return path;
    }
    /**
     * 权限对象路径
     * @return {?}
     */
    getAuthorizationPath() {
        /** @type {?} */
        const path = `/api/runtime/sys/v1.0/authorizations`;
        return path;
    }
    /**
     * 权限字段路径
     * @return {?}
     */
    getAuthfieldPath() {
        /** @type {?} */
        const path = `/api/runtime/sys/v1.0/authfields`;
        return path;
    }
    /**
     * 重授权对象路径
     * @return {?}
     */
    getReAssignPath() {
        /** @type {?} */
        const path = `/api/runtime/sys/v1.0/reassigns`;
        return path;
    }
    /**
     * 获取新增的内容
     * @param {?} newarr
     * @param {?} oldarr
     * @return {?}
     */
    getAddIds(newarr, oldarr) {
        /** @type {?} */
        const addIds = [];
        newarr.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (!oldarr.includes(x)) {
                addIds.push(x);
            }
        }));
        return addIds;
    }
    /**
     * 获取删除的内容
     * @param {?} newarr
     * @param {?} oldarr
     * @return {?}
     */
    getRemoveIds(newarr, oldarr) {
        return this.getAddIds(oldarr, newarr);
    }
    /**
     * @param {?} arrs
     * @return {?}
     */
    convertToBizDataDTO(arrs) {
        return arrs.map((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const dataDto = new BizDataDTO();
            dataDto.data = x;
            return dataDto;
        }));
    }
    /**
     * 有效的字符串
     * @param {?} value
     * @return {?}
     */
    isNullOrEmptyString(value) {
        return this.isBlank(value) || value.toString().trim().length === 0;
    }
    /**
     * 不为空
     * @param {?} value
     * @return {?}
     */
    isBlank(value) {
        return value === null || value === undefined;
    }
    /**
     * 字符串不为空
     * @param {?} value
     * @return {?}
     */
    isNotNullOrEmptyString(value) {
        return !(this.isNullOrEmptyString(value));
    }
    /**
     * 找到树形Parent分级方式的加载的第一层
     * @param {?} datas
     * @param {?} key
     * @param {?} parentKey
     * @return {?}
     */
    findLayer1ByParentId(datas, key, parentKey) {
        /** @type {?} */
        const rtn = [];
        datas.forEach((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            const findParent = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[key] === data[parentKey]));
            if (!findParent && data.type !== undefined && data.type !== null && data.type.toString() === '99') {
                data.parentId = undefined;
                rtn.push(data);
            }
        }));
        return rtn;
    }
    /**
     * 类型是否为导航
     * @param {?} type
     * @return {?}
     */
    isNav(type) {
        return type === '99' || type === '0';
    }
    /**
     * @param {?} farrisTt
     * @return {?}
     */
    setTreeIcon(farrisTt) {
        farrisTt.expandIcon = this.expandIcon;
        farrisTt.collapseIcon = this.collapseIcon;
        farrisTt.leafIcon = this.leafIcon;
        farrisTt.detectChanges();
    }
}
RacCommonUtil.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RacCommonUtil.ctorParameters = () => [
    { type: SessionService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 取数服务
 */
class TreeService {
    /**
     * @param {?} util
     */
    constructor(util) {
        this.util = util;
    }
    /**
     * 按照path码构造树
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    makeTreeByPath(datas, pathField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (this.util.isNullOrEmptyString(x[pathField])) {
                return true;
            }
            /** @type {?} */
            const findObj = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[pathField] === x[pathField].substring(0, x[pathField].length - 4)));
            if (findObj === undefined || findObj === null) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const entity = {};
            entity['data'] = x;
            entity['children'] = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByPath(item, datas, pathField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    findChildrenByPath(parent, datas, pathField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[pathField].substring(0, childitem[pathField].length - 4) === parent['data'][pathField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity['data'] = child;
                // tslint:disable-next-line:no-string-literal
                childEntity['children'] = [];
                // tslint:disable-next-line:no-string-literal
                parent['children'].push(childEntity);
                this.findChildrenByPath(childEntity, datas, pathField);
            }));
        }
    }
    /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    makeTreeByParent(datas, parentField, keyField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (this.util.isNullOrEmptyString(x[parentField])) {
                return true;
            }
            // 断层的这种，应该也属于一级
            /** @type {?} */
            const p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[keyField] === x[parentField]));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const entity = {};
            entity['data'] = x;
            entity['children'] = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    findChildrenByParent(parent, datas, parentField, keyField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[parentField] === parent['data'][keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const childEntity = {};
                childEntity['data'] = child;
                childEntity['children'] = [];
                parent['children'].push(childEntity);
                this.findChildrenByParent(childEntity, datas, parentField, keyField);
            }));
        }
    }
}
TreeService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TreeService.ctorParameters = () => [
    { type: RacCommonUtil }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 重授权服务
 */
class ReAssignService {
    /**
     * @param {?} rest
     * @param {?} util
     * @param {?} msgService
     */
    constructor(rest, util, msgService) {
        this.rest = rest;
        this.util = util;
        this.msgService = msgService;
    }
    /**
     * 重授权服务
     * @return {?}
     */
    getAll() {
        /** @type {?} */
        const headers = this.util.getHeader();
        /** @type {?} */
        const url = this.util.getReAssignPath() + '';
        return this.rest.get(url, null, headers);
    }
}
ReAssignService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ReAssignService.ctorParameters = () => [
    { type: RestfulService },
    { type: RacCommonUtil },
    { type: MessagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { isNullOrEmptyString } from '@progress/kendo-angular-grid/dist/es2015/utils';
class AuresultService {
    /**
     * @param {?} rest
     * @param {?} session
     */
    constructor(rest, session) {
        this.rest = rest;
        this.session = session;
    }
    /**
     * 获取权限需要分配的业务数据的数据源
     * @param {?} authField
     * @param {?} resultContext
     * @return {?}
     */
    getDataSourceByContext(authField, resultContext) {
        // mock数据
        // return of(dataSource);this.resultContext.dictDimensionValue
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /** @type {?} */
        const urlNew = url + '/datasource';
        /** @type {?} */
        let year = '';
        if (resultContext.yearObj && resultContext.yearObj.value) {
            year = resultContext.yearObj.value;
        }
        resultContext.year = year;
        if (resultContext.auVarValues && resultContext.auVarValues.length > 0) {
            return this.rest.post(urlNew + '/var', resultContext, null, headers);
        }
        /** @type {?} */
        const ownerId = resultContext.ownerId;
        /** @type {?} */
        const ownerType = resultContext.ownerType;
        /** @type {?} */
        const param = {
            ownerId: ownerId,
            ownerType: ownerType,
            authfield: authField,
            year: year,
        };
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取权限可以分配的业务数据的数据源
     * @param {?} authField
     * @return {?}
     */
    getDataSource(authField) {
        /** @type {?} */
        const ownerId = this.session.ownerId;
        /** @type {?} */
        const ownerType = this.session.ownerType;
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /**
         * ownerId  权限所有者Id,此处用户受全局业务组织过滤的，查找已分配的业务组织使用，这里不需要
         * ownerType 权限所有者类型 岗位1，用户2
         * @type {?}
         */
        const param = {
            ownerId: '',
            ownerType: 2,
            authfield: authField,
            year: ''
        };
        /** @type {?} */
        const urlNew = url + '/datasource';
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取权限可以分配的业务数据的数据源
     * @param {?} authField
     * @param {?} year
     * @return {?}
     */
    getNoUsersDataSource(authField, year) {
        /** @type {?} */
        const ownerId = 'nouser';
        /** @type {?} */
        const ownerType = this.session.ownerType;
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /**
         * ownerId  权限所有者Id,此处用户受全局业务组织过滤的，查找已分配的业务组织使用，这里不需要
         * ownerType 权限所有者类型 岗位1，用户2
         * @type {?}
         */
        const param = {
            ownerId: ownerId,
            ownerType: 2,
            authfield: authField,
            year: year
        };
        /** @type {?} */
        const urlNew = url + '/datasource';
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取权限需要分配的业务数据的数据源
     * @param {?} authField
     * @param {?} year
     * @param {?} assid1
     * @param {?} assid2
     * @return {?}
     */
    getNoUsersDataSourceByGroup(authField, year, assid1, assid2) {
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        /** @type {?} */
        const param = {
            ownerId: 'nouser',
            ownerType: 2,
            authfield: authField,
            year: year,
            assid1: assid1,
            assid2: assid2,
        };
        /** @type {?} */
        const urlNew = url + '/datasource/group';
        return this.rest.get(urlNew, param, headers);
    }
    /**
     * 获取年度
     * @param {?} su
     * @return {?}
     */
    getYears(su) {
        /** @type {?} */
        const headers = this.session.getHeader();
        /** @type {?} */
        const url = this.session.getResultPath();
        if (!su) {
            su = '*';
        }
        /** @type {?} */
        const urlNew = url + '/years/' + su;
        return this.rest.get(urlNew, null, headers);
    }
}
AuresultService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuresultService.ctorParameters = () => [
    { type: RestfulService },
    { type: RacCommonUtil }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 取数服务
 */
class AuthfieldService {
    /**
     * @param {?} rest
     * @param {?} util
     * @param {?} msgService
     */
    constructor(rest, util, msgService) {
        this.rest = rest;
        this.util = util;
        this.msgService = msgService;
    }
    /**
     * 根据权限字段的标识获取权限字段
     * @param {?} authfield 权限字段标识
     * @return {?}
     */
    getbyId(authfield) {
        /** @type {?} */
        const headers = this.util.getHeader();
        /** @type {?} */
        const url = this.util.getAuthfieldPath() + `/` + authfield;
        return this.rest.get(url, null, headers);
    }
    /**
     * 异常处理
     * @param {?} error
     * @return {?}
     */
    handlerError(error) {
        console.log(error);
        this.msgService.error(error.error.Message);
    }
    /**
     * @private
     * @template T
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    handleError(operation = 'operation', result) {
        return (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            console.error(error); // log to console instead
            return of((/** @type {?} */ (result)));
        });
    }
}
AuthfieldService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthfieldService.ctorParameters = () => [
    { type: RestfulService },
    { type: RacCommonUtil },
    { type: MessagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 分页初始值
 * @type {?}
 */
const INIT_PAGEINDEX = 1;
/** @type {?} */
const INIT_SKIP = 0;
/** @type {?} */
const INIT_PAGESIZE = 20;
/**
 * 分页信息
 * @type {?}
 */
const BUTTONCOUNT = 0;
/** @type {?} */
const PAGESIZES = [20, 50, 100, 200];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 取数服务
 */
class AuthObjService {
    /**
     * @param {?} rest
     * @param {?} util
     * @param {?} msgService
     */
    constructor(rest, util, msgService) {
        this.rest = rest;
        this.util = util;
        this.msgService = msgService;
    }
    /**
     * 获取指定权限对象、数据操作下关联的权限字段
     * @param {?} authObjId
     * @param {?} authOpId
     * @return {?}
     */
    getAuthEntryByOp(authObjId, authOpId) {
        /** @type {?} */
        const url = this.util.getAuthorizationPath() + `/` + authObjId + `/` + authOpId;
        /** @type {?} */
        const headers = this.util.getHeader();
        return this.rest.get(url, null, headers);
    }
    /**
     * @return {?}
     */
    getAll() {
        /** @type {?} */
        const headers = this.util.getHeader();
        /** @type {?} */
        const url = this.util.getAuthorizationPath() + '/designtime';
        return this.rest.get(url, null, headers);
    }
    /**
     * @return {?}
     */
    getAllReAssign() {
        /** @type {?} */
        const headers = this.util.getHeader();
        /** @type {?} */
        const url = this.util.getAuthorizationPath() + '/reassign';
        return this.rest.get(url, null, headers);
    }
    /**
     * 异常处理
     * @param {?} error
     * @return {?}
     */
    handlerError(error) {
        console.log(error);
        this.msgService.error(error.error.Message);
    }
    /**
     * @private
     * @template T
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    handleError(operation = 'operation', result) {
        return (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            console.error(error); // log to console instead
            return of((/** @type {?} */ (result)));
        });
    }
}
AuthObjService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthObjService.ctorParameters = () => [
    { type: RestfulService },
    { type: RacCommonUtil },
    { type: MessagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** 本地仓库，缓存本地数据，比如有些数据已经获取就不需要再次去服务器端获取 */
class LocalRepository {
    constructor() {
        /**
         * 权限结果数据 key:authfieldId+authobjId+authopId
         */
        this.mapAuresults = new Map();
        /**
         * 权限取数源 key:authfieldId
         */
        this.mapDataSource = new Map();
    }
}
LocalRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LocalRepository.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 用户授权业务组织组件
 */
class DataHelpComponent {
    /**
     * @param {?} session
     * @param {?} msgService
     * @param {?} notifyService
     * @param {?} treeService
     */
    constructor(session, msgService, notifyService, treeService) {
        this.session = session;
        this.msgService = msgService;
        this.notifyService = notifyService;
        this.treeService = treeService;
        this.closeModalEmitter = new EventEmitter();
        /**
         * 弹出框中用到的最终选中的数据
         */
        this.selectEmitter = new EventEmitter();
        this.selectedModels = [];
        this.hasSelectKeys = []; // 输入 修改前，已经选中
        // 输入 修改前，已经选中
        this.isHasSelectAll = false; // 输入 之前是否全选
        // 输入 之前是否全选
        this.authField = ''; // 全局业务组织内码
        // 全局业务组织内码
        this.ownerId = ''; // 用户内码
        // 用户内码
        this.canAssignDatas = []; // 可分配的数据源
        // 数据是否完整；完整表示可以分*
        this.isDisplayTree = false; // 输入
        // 输入
        this.isShowSearch = false; // 是否展示搜索
        // 是否展示搜索
        this.isSelectAll = false;
        this.selectKeys = [];
        /**
         * 是否单选
         */
        this.singleSelect = false;
        this.treeHeight = '342px';
        /**
         * 是否受维度分组
         */
        this.isAuGroup = true;
        /**
         * 弹出框中用到的最终选中的数据
         */
        this.selectByGroupEmitter = new EventEmitter();
        // 业务数据源相关信息
        this.dataKey = ''; // 取数主键列
        // 取数主键列
        this.helpFields = []; // 字段显示名
        // 字段显示名
        this.showFields = []; // 显示的字段
        // 显示的字段
        this.codeOrNameFields = []; // 搜索的字段；
        // 搜索的字段；
        this.authDataSource = new AuthDataSource();
        /**
         * 是否可用
         */
        this.isEnable = true;
        /**
         * 是否全部权限
         */
        this.isAllAuth = false;
        // 组件上用skip
        this.skip = INIT_SKIP;
        this.pageSize = INIT_PAGESIZE;
        this.pageIndex = INIT_PAGEINDEX;
        // 树控件
        // 树控件绑定的数据
        this.treedata = [];
        // 绑定树的平铺数据
        this.flatData = [];
        /**
         * root根节点，用于默认展开
         */
        this.root = '';
        this.saveSelections = [];
        // TreeTable上要显示的列
        this.treeCols = [];
        // [
        //   { field: 'name', title: '名称', width: 100 },
        //   { field: 'code', title: '编号', width: 100 },
        // ];
        // 树节点加载方式，async异步，all 同步
        this.loadDataType = 'all'; // 'all' | 'async'
        // 'all' | 'async'
        // 树节点选中动作
        this.cascadeCheck = false;
        this.cascadeUp = false;
        this.cascadeDown = true;
        // 是否已经加载过
        this.isTreeLoaded = false;
        /**
         * 要搜索的信息
         */
        this.searchInfo = '';
        /**
         * 要搜索的信息
         */
        this.searchDatas = [];
        // searchTitle = this.translate.instant('auresult_search_label');
        this.searchTitle = '查找';
        // 上次搜索文本
        this.oldTreeSearch = '';
        this.treeSearchIndex = 0;
        // 分页模式
        this.pageSetting = {
            buttonCount: BUTTONCOUNT,
            info: true,
            pageSizes: PAGESIZES,
            previousNext: true
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 获取可分配的业务数据
     * @return {?}
     */
    getAuthDataSource() {
        this.isSelectAll = false;
        this.session.ownerId = this.ownerId;
        this.session.ownerType = 2;
        this.selectKeys = [];
        this.treeCols = [];
        this.treedata = [];
        this.cascadeCheck = false; // load数据时，级联先关闭，否则会导致下级选中，自动选中上级
        if (this.session.isNullOrEmptyString(this.authField)) {
            this.canAssignDatas = [];
            this.isSelectAll = false;
            return;
        }
    }
    /**
     * 根据获取到的权限结果数据，加载界面
     * @return {?}
     */
    displayData() {
        this.selectKeys = [];
        this.treeCols = [];
        this.treedata = [];
        this.cascadeCheck = false; // load数据时，级联先关闭，否则会导致下级选中，自动选中上级
        if (this.session.isNullOrEmptyString(this.authField)) {
            this.canAssignDatas = [];
            this.isSelectAll = false;
            return;
        }
        this.showElement('checkall');
        this.isSelectAll = false;
        this.authDataSource.data = this.data.data;
        this.authDataSource.showFields = this.data.showFields;
        this.authDataSource.keyField = this.data.keyField;
        this.authDataSource.helpFields = this.data.helpFields;
        this.authDataSource.hierarchicalType = this.data.hierarchicalType;
        this.authDataSource.hierarchicalInfo = this.data.hierarchicalInfo;
        this.canAssignDatas = this.authDataSource.data;
        this.searchDatas = this.canAssignDatas;
        this.dataKey = this.authDataSource.keyField;
        this.helpFields = this.authDataSource.helpFields;
        this.showFields = this.authDataSource.showFields;
        this.codeOrNameFields = this.getCodeOrNameFields();
        if (this.hasSelectKeys.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x === '*'))) {
            this.isSelectAll = this.isHasSelectAll = true;
        }
        if (this.isAllAuth) {
            this.isSelectAll = this.isHasSelectAll = true;
        }
        if (this.isSelectAll) {
            // TODO  如何搞成 直接选中全部
            this.canAssignDatas.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                this.selectKeys.push(item[this.dataKey]);
            }));
        }
        else if (this.hasSelectKeys) {
            this.hasSelectKeys.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                this.selectKeys.push(item);
            }));
        }
        // 显示列表
        if (this.isDisplayTree === false) {
            this.queryByPage();
            return;
        }
        // 显示树信息
        this.showTreeInfo();
    }
    /**
     * 展示树形相关数据
     * @return {?}
     */
    showTreeInfo() {
        this.hideElement('checkall');
        // if (this.farrisTree === undefined) {
        //     return;
        // }
        // 处理树形相关逻辑
        this.authDataSource.showFields.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            this.treeCols.push({ field: item.field, title: item.title, width: 100 });
        }));
        /** @type {?} */
        const hierarchicalType = this.authDataSource.hierarchicalType;
        /** @type {?} */
        const hierarchicalInfo = this.authDataSource.hierarchicalInfo;
        if (hierarchicalType === HierarchicalType.Parent) {
            /** @type {?} */
            let parentKey = this.dataKey;
            if (hierarchicalInfo.parentKeyField && hierarchicalInfo.parentKeyField.length > 0) {
                parentKey = hierarchicalInfo.parentKeyField;
            }
            this.treedata = this.treeService.makeTreeByParent(this.canAssignDatas, hierarchicalInfo.parentField, parentKey);
        }
        else {
            this.treedata = this.treeService.makeTreeByPath(this.canAssignDatas, hierarchicalInfo.pathField);
        }
        // 找到第一层   直接展开
        // 初始加载不级联，否则会导致下级选中，自动选中上级
        this.farrisTree.cascadeCheck = false;
        this.isTreeLoaded = false;
        this.farrisTree.loadedData.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            // 加载过，之后不需要再次加载
            if (this.isTreeLoaded === true) {
                return;
            }
            // 初始加载不级联，否则会导致下级选中，自动选中上级
            this.farrisTree.cascadeCheck = false;
            // 根节点默认展开
            if ((this.root) && this.root !== '') {
                this.farrisTree.expandNode(this.root);
            }
            if (this.isSelectAll) {
                this.farrisTree.checkAllNodes();
            }
            else if (this.hasSelectKeys.length > 0) {
                this.farrisTree.checkedNodes(this.hasSelectKeys);
            }
            // load完数据时，级联打开，可以选中上级自动选中下级
            this.farrisTree.cascadeCheck = true;
            // 加载过，之后不需要再次加载
            this.isTreeLoaded = true;
        }));
    }
    /**
     * 报错处理
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.authDataSource.data = [];
        console.log(error);
        console.log(error.error.Message);
        this.msgService.error(error.error.Message);
    }
    // 选择属性：单选、多选
    /**
     * @return {?}
     */
    get selectableSettings() {
        return {
            checkboxOnly: true,
            mode: this.singleSelect ? 'single' : 'multiple',
            enabled: true
        };
    }
    // 图标
    /**
     * @param {?} __0
     * @return {?}
     */
    iconClass({ type }) {
        return {
            'k-i-folder': true,
            'k-icon': true
        };
    }
    /**
     * 获取选择信息
     * @return {?}
     */
    getSelectInfo() {
        this.selectedModels = [];
        /** @type {?} */
        const result = {
            data: [],
            selectedKey: []
        };
        // 全选
        if (this.isSelectAll && this.isIntegrityData && this.data.length === this.selectKeys) {
            /** @type {?} */
            const obj = {
                data: '*'
            };
            this.selectedModels.push(obj);
            result.data = ['*'];
            result.selectedKey = ['*'];
            return result;
        }
        // 树显示，需要先根据选中的数据构造selectKeys
        if (this.isDisplayTree) {
            // 选中的行，过滤掉业务对象，只保留功能操作
            if (this.farrisTree.checkeds) {
                /** @type {?} */
                const checkedRows = this.farrisTree.checkeds.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data));
                // 过滤功能操作分组的行
                // let checkedOpRows = this.checkedRows.filter(x => x.type === '1');
                this.selectKeys = checkedRows.map((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => m[this.dataKey]));
            }
            else {
                this.selectKeys = [];
            }
        }
        if (this.selectKeys.length > 0) {
            this.selectKeys.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                /** @type {?} */
                const findObj = this.canAssignDatas.find((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y[this.dataKey] === x));
                this.selectedModels.push(findObj);
            }));
        }
        result.data = this.selectedModels;
        result.selectedKey = this.selectKeys;
        return result;
    }
    /**
     * 判断是否分了全部权限*，首先必须全选，其次必须是数据完整的，然后选中的数据必须与数据源长度一致（如果仅搜索后的全选，不是*）
     * @return {?}
     */
    getIsAllAuth() {
        return this.isSelectAll && this.isIntegrityData && this.data.length === this.selectKeys;
    }
    /**
     * 确定发射选中数据以及选中内码
     * @return {?}
     */
    confirm() {
        this.closeModalEmitter.next();
        this.selectedModels = [];
        if (this.getIsAllAuth()) {
            /** @type {?} */
            const obj = {
                data: '*'
            };
            this.selectedModels.push(obj);
            this.selectEmitter.next({
                data: ['*'],
                selectedKey: ['*']
            });
            return;
        }
        // 树显示，需要先根据选中的数据构造selectKeys
        if (this.isDisplayTree) {
            // 选中的行，过滤掉业务对象，只保留功能操作
            if (this.farrisTree.checkeds) {
                /** @type {?} */
                const checkedRows = this.farrisTree.checkeds.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data));
                // 过滤功能操作分组的行
                // let checkedOpRows = this.checkedRows.filter(x => x.type === '1');
                this.selectKeys = checkedRows.map((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => m[this.dataKey]));
            }
            else {
                this.selectKeys = [];
            }
        }
        if (this.selectKeys.length > 0) {
            this.selectKeys.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                /** @type {?} */
                const findObj = this.canAssignDatas.find((/**
                 * @param {?} y
                 * @return {?}
                 */
                y => y[this.dataKey] === x));
                this.selectedModels.push(findObj);
            }));
        }
        this.selectEmitter.next({
            data: this.selectedModels,
            selectedKey: this.selectKeys
        });
    }
    /**
     * @return {?}
     */
    cancle() {
        this.closeModalEmitter.next();
    }
    /**
     * 全选，这里全选可能是过滤后数据的全选
     * @return {?}
     */
    checkAllClick() {
        this.isSelectAll = !this.isSelectAll;
        /** @type {?} */
        let key = '';
        if (this.isSelectAll) {
            // 如果已经选中，则不处理，没有选中，则选中
            this.searchDatas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                key = data[this.dataKey];
                /** @type {?} */
                const index = this.selectKeys.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x === key));
                if (index < 0) {
                    this.selectKeys.push(key);
                }
            }));
            if (this.isDisplayTree) {
                if (this.farrisTree) {
                    this.farrisTree.checkAllNodes();
                }
            }
        }
        else {
            if (this.isDisplayTree) {
                if (this.farrisTree) {
                    this.farrisTree.unCheckAllNodes();
                }
            }
            else {
                this.searchDatas.forEach((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    key = data[this.dataKey];
                    /** @type {?} */
                    const index = this.selectKeys.findIndex((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x === key));
                    if (index > -1) {
                        // 如果已经选中，就删除
                        this.selectKeys.splice(index, 1);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    checkClick() {
        this.isSelectAll = !this.isSelectAll;
        if (this.isSelectAll) {
            // TODO  如何搞成 直接选中全部
            this.canAssignDatas.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this.selectKeys.push(data[this.dataKey]);
            }));
            this.farrisTree.checkAllNodes();
            this.selectByGroupEmitter.next(['*']);
        }
        else {
            //  this.farrisTree.unCheckAllNodes();
            this.selectKeys = [];
            this.selectByGroupEmitter.next([]);
        }
    }
    /**
     * 选择事件
     * @param {?} e
     * @return {?}
     */
    onSelectedKeysChange(e) {
        /** @type {?} */
        const len = this.selectKeys.length;
        if (len !== this.canAssignDatas.length) {
            // 如果全部选中了，isSelectAll 也不需要设置为true；isSelectAll的含义是*的意思，新增数据也被选中
            this.isSelectAll = false;
        }
        if (this.isSelectAll) {
            this.selectByGroupEmitter.next(['*']);
        }
        else {
            this.selectByGroupEmitter.next(this.selectKeys);
        }
    }
    /**
     * 点击分页查询或者分页参数变化后查询
     * @param {?} event 分页参数
     * @return {?}
     */
    pageChange(event) {
        // skip和pageSize必须得重新赋值，因为可能用户重新选择了分页大小或者分页索引
        // 刷新界面按钮数量和焦点
        this.skip = event.skip;
        this.pageSize = event.take;
        this.pageIndex = this.skip / this.pageSize + 1;
        // 查询
        this.queryByPage();
    }
    /**
     * 列表的查询
     * @return {?}
     */
    queryByPage() {
        this.gridView = {
            data: this.searchDatas.slice(this.skip, this.skip + this.pageSize),
            total: this.searchDatas.length
        };
    }
    /**
     * @return {?}
     */
    searchClick() {
        this.search(this.searchInfo);
    }
    /**
     * 搜索树状
     * @param {?} txt
     * @return {?}
     */
    search(txt) {
        if (this.isDisplayTree) {
            this.searchTree(txt);
            return;
        }
        this.searchInfo = txt;
        if (this.session.isNullOrEmptyString(this.searchInfo)) {
            this.searchDatas = this.canAssignDatas;
            this.queryByPage();
            return;
        }
        this.searchDatas = [];
        this.canAssignDatas.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < this.showFields.length; i++) {
                if (item[this.showFields[i].field].toString().indexOf(this.searchInfo) > -1) {
                    this.searchDatas.push(item);
                    break;
                }
            }
        }));
        this.queryByPage();
    }
    /**
     * 获取编号或者名称字段
     * @return {?}
     */
    getCodeOrNameFields() {
        /** @type {?} */
        const result = [];
        this.showFields.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item.field.toLocaleLowerCase().indexOf('code') > -1 ||
                item.field.toLocaleLowerCase().indexOf('name') > -1) {
                result.push(item);
            }
        }));
        if (result.length === 0) {
            result.push(this.showFields[0]);
        }
        return result;
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    searchTreeSelf(arg) {
        this.searchTree(arg.value);
    }
    /**
     * 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     * @param {?} txt
     * @return {?}
     */
    searchTree(txt) {
        // 搜索内容为空，不处理
        if (!txt) {
            this.treeSearchIndex = 0;
            return;
        }
        this.farrisTree.clearSelections();
        // 搜索内容与上次不同，重新搜索
        if (this.oldTreeSearch !== txt) {
            // 置空重新搜索
            this.searchDatas = [];
            this.canAssignDatas.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                // 遍历搜索字段
                // tslint:disable-next-line:prefer-for-of
                for (let i = 0; i < this.codeOrNameFields.length; i++) {
                    /** @type {?} */
                    const field = this.codeOrNameFields[i].field;
                    if (item[field].indexOf(txt) > -1) {
                        this.searchDatas.push(item);
                        break;
                    }
                }
            }));
            // 首次搜索，从第一个开始搜索
            this.treeSearchIndex = 0;
        }
        if (this.searchDatas.length === 0) {
            this.msgService.warning('没有满足条件的数据!');
            return;
        }
        // 搜到指定对象，需要设置父节点全部展开,其他节点全部收起
        /** @type {?} */
        const key = this.searchDatas[this.treeSearchIndex][this.dataKey];
        this.farrisTree.selectNode(key);
        this.farrisTree.collapseAll();
        // 展开父级
        this.expandParent(key);
        this.oldTreeSearch = txt;
        this.treeSearchIndex = this.treeSearchIndex + 1;
        // 已经搜索到最后，需要重头搜索
        if (this.treeSearchIndex === this.searchDatas.length) {
            this.oldTreeSearch = '';
            this.treeSearchIndex = 0;
        }
    }
    /**
     * 逐一找到需要展开的父节点，全部展开
     * @param {?} key
     * @return {?}
     */
    expandParent(key) {
        /** @type {?} */
        const parent = this.farrisTree.findRowNode(key);
        /** @type {?} */
        let parentNode = parent.parent;
        if (parentNode) {
            while (parentNode) {
                this.farrisTree.expandNode(parentNode.id);
                parentNode = parentNode.parent;
            }
        }
        else {
            this.farrisTree.expandNode(key);
        }
    }
    /**
     * 树形选中全部
     * @return {?}
     */
    treeCheckAll() {
        this.isSelectAll = true;
    }
    /**
     * 树形取消全部
     * @return {?}
     */
    treeUnCheckAll() {
        this.isSelectAll = false;
    }
    /**
     * 取消勾选
     * @return {?}
     */
    nodeUnChecked() {
        if (this.isSelectAll) {
            this.isSelectAll = false;
        }
    }
    /**
     * @param {?} elementName
     * @return {?}
     */
    showElement(elementName) {
        if (document.getElementById(elementName)) {
            document.getElementById(elementName).style.display = '';
        }
    }
    /**
     * @param {?} elementName
     * @return {?}
     */
    hideElement(elementName) {
        if (document.getElementById(elementName)) {
            document.getElementById(elementName).style.display = 'none';
        }
    }
}
DataHelpComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'rac-data-help',
                template: "\r\n\r\n<div *ngIf=\"!isDisplayTree\" class=\"f-page flex-column\" style=\"background-color:#ffffff;\">\r\n    <!-- \u6761\u4EF6\u641C\u7D22(click)=\"\" -->\r\n    <div *ngIf=\"isShowSearch\" class=\"mt-1 form-group row ml-1\">\r\n            <div pr-2 text-left class=\"col-xs-3\">\r\n                        <input id=\"checkAllData\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n                            [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkAllClick()\" />\r\n                        <label class=\"ml-2 k-checkbox-label\" for=\"checkAllData\">\u5168\u9009</label>\r\n             </div>\r\n            <label class=\"ml-2\">\u67E5\u627E\uFF1A</label>\r\n            <input type=\"text\" name=\"searchInfo\" [(ngModel)]=\"searchInfo\" style=\"width: 200px;\" />\r\n            <button kendoButton [icon]=\"'search'\" (click)=\"searchClick()\"></button>\r\n    </div>\r\n    <div class=\"f-utils-fill-auto\">\r\n        <kendo-grid #dataGrid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\"\r\n            [kendoGridSelectBy]=\"authDataSource.keyField\" [selectedKeys]=\"selectKeys\" [data]=\"gridView\" [height]=\"360\"\r\n            (selectedKeysChange)=\"onSelectedKeysChange($event)\" [skip]=\"skip\" [pageable]=\"pageSetting\"\r\n            [pageSize]=\"pageSize\" (pageChange)=\"pageChange($event)\">\r\n            <kendo-grid-checkbox-column title=\"\u9009\u62E9\" width=\"60px\"\r\n          ></kendo-grid-checkbox-column>\r\n            <ng-template ngFor [ngForOf]=\"showFields\" let-column>\r\n                <kendo-grid-column field=\"{{column.field}}\" title=\"{{column.title}}\">\r\n                </kendo-grid-column>\r\n            </ng-template>\r\n        </kendo-grid>\r\n    </div>\r\n</div>\r\n\r\n<div *ngIf=\"isDisplayTree\" class=\"f-page flex-column\" style=\"background-color:#ffffff;\">\r\n    <div *ngIf=\"isShowSearch\" class=\"mt-1 form-group row ml-1\">\r\n        <div *ngIf=\"!singleSelect\" id=\"treehead\" class=\"k-form-field\">\r\n            <input id=\"cascadeDown\" class=\"k-checkbox\" type=\"checkbox\" name=\"cascadeDown\" [checked]=\"cascadeDown\"\r\n                [(ngModel)]=\"cascadeDown\" />\r\n            <label class=\"k-checkbox-label\" for=\"cascadeDown\">\u540C\u6B65\u4E0B\u7EA7</label>\r\n        </div>\r\n        <div pr-2 text-left class=\"col-xs-3\">\r\n                <input id=\"checkAllDataTree\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n                    [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkAllClick()\" />\r\n                <label class=\"ml-2 k-checkbox-label\" for=\"checkAllDataTree\">\u5168\u9009</label>\r\n        </div>\r\n    </div>\r\n    <div id=\"treebody\" class=\"f-struct-wrapper f-utils-fill-flex-column\"  [style.height]=\"treeHeight\">\r\n    <farris-treetable #farrisTree class=\"f-utils-fill-flex-column\" [data]=\"this.treedata\" [columns]=\"treeCols\" [idField]=\"dataKey\"\r\n    [showCheckAll]=\"true\"\r\n    [fit]=\"true\"\r\n    [fixedHeader]=\"true\"\r\n    [enableFindText]=\"true\"\r\n    [singleSelect]=\"singleSelect\" \r\n    [resizableColumns]=\"true\" \r\n    [showIcon]=\"true\"\r\n    [selectOnCheck]=\"false\"\r\n    (onlySelectSelf)=\"true\" \r\n    [(cascadeDown)]=\"this.cascadeDown\"\r\n    [(cascadeUp)]=\"this.cascadeUp\"\r\n    [keepSelect]=\"false\" \r\n    [showCheckbox]=\"true\" \r\n    [(loadDataType)]=\"this.loadDataType\" \r\n    (checkAll)=\"treeCheckAll()\" \r\n    (unCheckAll)=\"treeUnCheckAll()\"\r\n    (nodeUnChecked)=\"nodeUnChecked()\"\r\n    [(showFilterBar)] = \"isShowSearch\"\r\n    (search) = \"searchTreeSelf($event)\"\r\n    [allColumnsTitle] = \"searchTitle\">\r\n     </farris-treetable>\r\n    </div>\r\n</div>\r\n<!--\u5168\u9009\u4E0D\u5728\u8FD9\u91CC\r\n  <div id=\"checkall\" >\r\n    <div pr-2 text-left class=\"col-xs-3\">\r\n      <input id=\"checkAllData\" class=\"k-checkbox\" type=\"checkbox\" name=\"sysinit\" [checked]=\"isSelectAll\"\r\n        [readOnly]=\"!isEnable\" [disabled]=\"!isEnable\" (click)=\"checkClick()\" />\r\n      <label class=\"k-checkbox-label\" for=\"checkAllData\">{{ 'chkCheckAll' | translate }}</label>\r\n    </div>\r\n  </div>\r\n-->",
                styles: [""]
            }] }
];
/** @nocollapse */
DataHelpComponent.ctorParameters = () => [
    { type: RacCommonUtil },
    { type: MessagerService },
    { type: NotifyService },
    { type: TreeService }
];
DataHelpComponent.propDecorators = {
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }],
    farrisTree: [{ type: ViewChild, args: ['farrisTree',] }],
    selectEmitter: [{ type: Output }],
    hasSelectKeys: [{ type: Input }],
    isHasSelectAll: [{ type: Input }],
    authField: [{ type: Input }],
    ownerId: [{ type: Input }],
    canAssignDatas: [{ type: Input }],
    data: [{ type: Input }],
    isIntegrityData: [{ type: Input }],
    isDisplayTree: [{ type: Input }],
    isShowSearch: [{ type: Input }],
    singleSelect: [{ type: Input }],
    treeHeight: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AuobjHelpComponent {
    constructor() {
        this.displayText = '';
        this.selectedKeyOld = '';
        /**
         * 导航事件
         */
        this.selectedChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.curKeyIdList = [];
        this.curKeyIdList.push(this.curKeyId);
    }
    // 取数列
    /**
     * @param {?} args
     * @return {?}
     */
    afterKeySelected(args) {
        this.curAuthObj = new AuthobjEntity();
        this.curKeyIdList = [];
        // 更新值
        from(args).subscribe((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.curAuthObj.id = item['id'];
            this.curAuthObj.name = item['name'];
            this.curKeyId = item['id'];
            this.curKeyIdList.push(item['id']);
            this.displayText = item['name'];
            this.selectedChanged.emit(this.curAuthObj);
        }));
        this.auobjLookup.closeDialog();
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    handleSelection(args) {
        this.curKeyId = args.node.data.id;
        this.curAuthObj = args.node.data;
        // 首次触发
        if (this.curKeyId === '') {
            this.selectedKeyOld = this.curKeyId;
            this.selectedChanged.emit(this.curAuthObj);
        }
        else {
            // 变化的情况下触发
            if (this.selectedKeyOld !== this.curKeyId) {
                this.selectedKeyOld = this.curKeyId;
                this.selectedChanged.emit(this.curAuthObj);
            }
        }
    }
}
AuobjHelpComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'rac-auobj-help',
                template: "<farris-lookup #auobjLookup [displayText]=\"displayText\"  name=\"auobjLookup\"\r\n[showButtons]=\"true\" [title]=\"'\u8BF7\u9009\u62E9\u6743\u9650\u5BF9\u8C61'\" [buttonsRef]=\"this.auobjHelp.btnOkAndCancleRef\">\r\n  <div style=\"padding: 10px\">\r\n    <rac-auobj-tree #auobjHelp [initSelectedKeys]=\"this.curKeyIdList\" [dataMode] = 'dataMode'\r\n      (selectedAfterOk)=\"afterKeySelected($event)\" (closeModalEmitter)=\"this.auobjLookup.closeDialog()\">\r\n    </rac-auobj-tree>\r\n  </div>\r\n</farris-lookup>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AuobjHelpComponent.ctorParameters = () => [];
AuobjHelpComponent.propDecorators = {
    dataMode: [{ type: Input }],
    displayText: [{ type: Input }],
    curKeyId: [{ type: Input }],
    auobjLookup: [{ type: ViewChild, args: ['auobjLookup',] }],
    selectedChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AuobjTreeComponent {
    /**
     * @param {?} service
     * @param {?} racUtil
     * @param {?} translate
     */
    constructor(service, racUtil, translate) {
        this.service = service;
        this.racUtil = racUtil;
        this.translate = translate;
        this.data = [];
        this.selectedKey = '';
        this.selectedKeyOld = '';
        // 树所需参数
        this.cols = [];
        this.selectedchanged = new EventEmitter();
        /**
         * 帮助输出事件
         */
        this.selectedAfterOk = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cols = [
            // { field: 'name', title: this.translate.instant('lblAuthObj') }
            { field: 'name', title: '名称' }
        ];
    }
    /**
     * 根据分配的功能操作初始对应的权限对象
     * @return {?}
     */
    initData() {
        /** @type {?} */
        let obs = this.service.getAll();
        if (this.dataMode === 'reassign') {
            obs = this.service.getAllReAssign();
        }
        else {
            obs = this.service.getAll();
        }
        obs.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.data = result;
            if (this.data) {
                /** @type {?} */
                const initNodeList = [];
                /** @type {?} */
                const layer1 = this.racUtil.findLayer1ByParentId(this.data, 'id', 'parentId');
                layer1.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    const node = this.convertToTreeNode(item);
                    initNodeList.push(node);
                    this.initTreeNodeList(node);
                }));
                this.treeNodeData = initNodeList;
                this.racUtil.setTreeIcon(this.farrisTt);
            }
        }));
    }
    /**
     * 构造Farris-Tree所需结构
     * @private
     * @param {?} parentNode
     * @return {?}
     */
    initTreeNodeList(parentNode) {
        // 根据父节点过滤子节点
        /** @type {?} */
        const children = this.data.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.parentId === parentNode.data.id));
        // 将过滤的数据加到TreeNodes中
        if (children && children.length > 0) {
            children.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const child = this.convertToTreeNode(item);
                parentNode.leaf = false;
                parentNode.children.push(child);
                this.initTreeNodeList(child);
            }));
        }
    }
    /**
     * 将权限字段实体转换为Farris-TreeNode
     * @private
     * @param {?} obj
     * @return {?}
     */
    convertToTreeNode(obj) {
        /** @type {?} */
        const node = { data: obj, leaf: true, children: [], icon: this.racUtil.leafIcon };
        // 是否明细节点，type为0 说明是导航
        if (this.racUtil.isNav(obj.type.toString())) {
            // tslint:disable-next-line:no-string-literal
            node['leaf'] = false;
            // tslint:disable-next-line:no-string-literal
            node['children'] = [];
            node['expandedIcon'] = this.racUtil.expandIcon; // 'folder-open';
            node['collapseIcon'] = this.racUtil.collapseIcon; // 'folder';
        }
        return node;
    }
    /**
     * @param {?} newObj
     * @return {?}
     */
    appendNode(newObj) {
        /** @type {?} */
        const parentRowNode = this.farrisTt.findRowNode(newObj.parentId);
        // const newTreeNode = this.convertToTreeNode(newObj);
        /** @type {?} */
        const selectedRow = this.farrisTt.selectedRow;
        if (this.racUtil.isNav(selectedRow.data.type)) {
            this.farrisTt.append(newObj, this.farrisTt.selectedRow);
        }
        else {
            this.farrisTt.append(newObj, this.farrisTt.selectedRow.parent);
        }
        this.farrisTt.selectNode(newObj.id);
    }
    /**
     * @param {?} newObj
     * @return {?}
     */
    removeNode(newObj) {
        this.farrisTt.remove(newObj.id);
    }
    /**
     * @param {?} newObj
     * @return {?}
     */
    updateNode(newObj) {
        // TODO update时data 参数有问题
        // this.farrisTt.update(newObj.id, newObj);
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    handleSelection(args) {
        this.selectedKey = args.node.data.id;
        this.selectedModel = args.node.data;
        // 首次触发
        if (this.selectedKeyOld === '') {
            this.selectedKeyOld = this.selectedKey;
            this.selectedchanged.emit(this.selectedModel);
        }
        else {
            // 变化的情况下触发
            if (this.selectedKeyOld !== this.selectedKey) {
                this.selectedKeyOld = this.selectedKey;
                this.selectedchanged.emit(this.selectedModel);
            }
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    iconClass({ id }) {
        return {
            'k-i-folder': true,
            'k-icon': true
        };
    }
    /**
     * 帮助确定按钮
     * @return {?}
     */
    confirm() {
        this.selectedKeyOld = this.selectedKey;
        this.selectedAfterOk.emit(this.selectedModel);
    }
    /**
     * @return {?}
     */
    cancle() {
        this.closeModalEmitter.next();
    }
}
AuobjTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'rac-auobj-tree',
                template: "<farris-treetable class =\"f-utils-fill-flex-column\"  #farrisTt  \r\n[data]=\"treeNodeData\"\r\n[columns]=\"cols\"\r\n[idField]=\"'id'\" \r\n[fixedHeader]=\"true\"\r\n[fit]=\"true\"\r\n[showIcon]=\"true\"\r\n(nodeSelected)=\"handleSelection($event)\">\r\n</farris-treetable>\r\n\r\n<ng-template #btnOkAndCancle >\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">\u786E\u8BA4</button>\r\n    <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n  </ng-template>\r\n\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AuobjTreeComponent.ctorParameters = () => [
    { type: AuthObjService },
    { type: RacCommonUtil },
    { type: TranslateService }
];
AuobjTreeComponent.propDecorators = {
    dataMode: [{ type: Input }],
    initSelectedKeys: [{ type: Input }],
    farrisTt: [{ type: ViewChild, args: ['farrisTt',] }],
    selectedchanged: [{ type: Output }],
    selectedAfterOk: [{ type: Output }],
    closeModalEmitter: [{ type: Output }],
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AuthfieldHelpComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AuthfieldHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'rac-authfield-help',
                template: "<p>\r\n  authfield-help works!\r\n</p>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AuthfieldHelpComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AuthfieldTreeComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AuthfieldTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'rac-authfield-tree',
                template: "<p>\r\n  authfield-tree works!\r\n</p>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AuthfieldTreeComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReassignGridComponent {
    /**
     * @param {?} reAssignService
     */
    constructor(reAssignService) {
        this.reAssignService = reAssignService;
        this.selectedKey = '';
        this.selectedKeyOld = '';
        this.selectedChanged = new EventEmitter();
        /**
         * 帮助输出事件
         */
        this.selectedAfterOk = new EventEmitter();
        this.closeModalEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            // { field: 'name', title: this.translate.instant('lblAuthObj') }
            { field: 'authorizationCode', title: '权限对象编号', width: '0' },
            { field: 'authorizationName', title: '权限对象名称', width: '200' },
            { field: 'authfieldCode', title: '权限字段编号', width: '0' },
            { field: 'authfieldName', title: '权限字段名称' }
        ];
    }
    /**
     * 获取允许重授权的权限
     * @return {?}
     */
    initData() {
        /** @type {?} */
        const obs = this.reAssignService.getAll();
        obs.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.datas = result;
        }));
    }
    /**
     * 输入属性变化后
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.datas || this.datas.length <= 0) {
            // 服务端获取数据
            this.initData();
        }
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    handleSelection(args) {
        this.selectedModel = args.data;
        if (!this.selectedModel) {
            this.selectedKey = '';
            return;
        }
        this.selectedKey = this.selectedModel.id;
        // 首次触发
        if (this.selectedKeyOld === '') {
            this.selectedKeyOld = this.selectedKey;
            this.selectedChanged.emit(this.selectedModel);
        }
        else {
            // 变化的情况下触发
            if (this.selectedKeyOld !== this.selectedKey) {
                this.selectedKeyOld = this.selectedKey;
                this.selectedChanged.emit(this.selectedModel);
            }
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    iconClass({ id }) {
        return {
            'k-i-folder': true,
            'k-icon': true
        };
    }
    /**
     * 帮助确定按钮
     * @return {?}
     */
    confirm() {
        this.selectedKeyOld = this.selectedKey;
        this.selectedAfterOk.emit(this.selectedModel);
    }
    /**
     * @return {?}
     */
    cancle() {
        this.closeModalEmitter.next();
    }
}
ReassignGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'rac-reassign-grid',
                template: "\r\n<div class=\"f-utils-flex-column\" style=\"height:450px;\">\r\n    <farris-datagrid   #farrisGrid  class=\"f-utils-flex-column f-utils-fill\" [columns]=\"columns\" [data]=\"datas\" [showBorder]=\"false\"\r\n        [idField]=\"'id'\"\r\n        [showLineNumber]=\"true\" [fitColumns]=\"true\" [fit]=\"true\" [striped]=\"true\" \r\n        (selectChanged)=\"handleSelection($event)\">\r\n    </farris-datagrid>\r\n</div>\r\n\r\n<ng-template #btnOkAndCancle >\r\n      <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">\u786E\u8BA4</button>\r\n      <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
ReassignGridComponent.ctorParameters = () => [
    { type: ReAssignService }
];
ReassignGridComponent.propDecorators = {
    datas: [{ type: Input }],
    selectedChanged: [{ type: Output }],
    selectedAfterOk: [{ type: Output }],
    closeModalEmitter: [{ type: Output }],
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReassignHelpComponent {
    constructor() {
        this.displayText = '';
        this.selectedKeyOld = '';
        /**
         * 导航事件
         */
        this.selectedChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // 取数列
    /**
     * @param {?} args
     * @return {?}
     */
    afterKeySelected(args) {
        this.curObj = new ReAssignEntity();
        this.curKeyIdList = [];
        // 更新值
        this.curObj.id = args['id'];
        this.curObj.authorizationCode = args['authorizationCode'];
        this.curObj.authorizationName = args['authorizationName'];
        this.curObj.authfieldCode = args['authfieldCode'];
        this.curObj.authfieldName = args['authfieldName'];
        this.displayText = args['authorizationName'] + ' ' + args['authfieldName'];
        this.selectedChanged.emit(this.curObj);
        this.reassignLookup.closeDialog();
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    handleSelection(args) {
        this.curKeyId = args.node.data.id;
        this.curObj = args.node.data;
        // 首次触发
        if (this.curKeyId === '') {
            this.selectedKeyOld = this.curKeyId;
            this.selectedChanged.emit(this.curObj);
        }
        else {
            // 变化的情况下触发
            if (this.selectedKeyOld !== this.curKeyId) {
                this.selectedKeyOld = this.curKeyId;
                this.selectedChanged.emit(this.curObj);
            }
        }
    }
}
ReassignHelpComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'rac-reassign-help',
                template: "<farris-lookup #reassignLookup [displayText]=\"displayText\" style=\"width:350px\"  name=\"reassignLookup\" \r\n[showButtons]=\"true\" [title]=\"'\u8BF7\u9009\u62E9\u6743\u9650'\" [buttonsRef]=\"this.reassignHelp.btnOkAndCancleRef\">\r\n  <div style=\"padding: 10px\">\r\n    <rac-reassign-grid #reassignHelp style=\"height:450px;width:540px\" [datas]=\"datas\" calss=\"f-utils-fill\"\r\n      (selectedAfterOk)=\"afterKeySelected($event)\" (closeModalEmitter)=\"this.reassignLookup.closeDialog()\">\r\n    </rac-reassign-grid>\r\n  </div>\r\n</farris-lookup>\r\n\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ReassignHelpComponent.ctorParameters = () => [];
ReassignHelpComponent.propDecorators = {
    displayText: [{ type: Input }],
    curKeyId: [{ type: Input }],
    datas: [{ type: Input }],
    reassignLookup: [{ type: ViewChild, args: ['reassignLookup',] }],
    selectedChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RacCommonModule {
}
RacCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DataHelpComponent,
                    AuobjHelpComponent,
                    AuobjTreeComponent,
                    AuthfieldHelpComponent,
                    AuthfieldTreeComponent,
                    ReassignGridComponent,
                    ReassignHelpComponent,
                ],
                imports: [
                    CommonModule,
                    HttpClientModule,
                    ButtonsModule,
                    FormsModule,
                    ReactiveFormsModule,
                    GridModule,
                    DatagridModule,
                    LayoutModule,
                    LayoutModule$1,
                    FarrisPanelModule,
                    TreeTableModule,
                    DataTableModule,
                    TreeViewModule,
                    LookupModule,
                    ModalModule.forRoot(),
                    MessagerModule.forRoot()
                ],
                entryComponents: [
                    DataHelpComponent,
                    AuobjHelpComponent,
                    AuobjTreeComponent,
                    AuthfieldHelpComponent,
                    AuthfieldTreeComponent,
                    ReassignHelpComponent,
                    ReassignGridComponent
                ],
                providers: [
                    RacCommonUtil,
                    LocalRepository,
                    AuresultService,
                    AuthObjService,
                    ReAssignService,
                    AuthfieldService
                ],
                exports: [
                    DataHelpComponent,
                    AuobjHelpComponent,
                    AuobjTreeComponent,
                    AuthfieldHelpComponent,
                    AuthfieldTreeComponent,
                    ReassignHelpComponent,
                    ReassignGridComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AuthEntryEntity, AuthFieldEntity, AuthobjEntity, DataSourceContextEntity, FetcherType, ReAssignEntity, GSPAuthFieldGroup, BizDataDTO, AuresultEntity, AuthDataField, AuthDataSource, HierarchicalType, HierarchicalInfoEntity, FieldAccessType, OperationEntity, AuresultChangesEntity, AuresultSave, DataFetcherEntity, DBOColumnEntity, RuleType, ResultContextEntity, AuthfieldVarEntity, TreeService, ReAssignService, AuresultService, AuthfieldService, RacCommonUtil, INIT_SKIP, BUTTONCOUNT, PAGESIZES, INIT_PAGEINDEX, INIT_PAGESIZE, RacCommonModule, AuthObjService as ɵd, LocalRepository as ɵi, AuobjHelpComponent as ɵb, AuobjTreeComponent as ɵc, AuthfieldHelpComponent as ɵe, AuthfieldTreeComponent as ɵf, DataHelpComponent as ɵa, ReassignGridComponent as ɵg, ReassignHelpComponent as ɵh };

//# sourceMappingURL=gsp-sys-rac-common.js.map