import { OnInit, TemplateRef, EventEmitter } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { SelectableSettings, PagerSettings, PageChangeEvent, GridDataResult } from '@progress/kendo-angular-grid';
import { NotifyService } from '@farris/ui-notify';
import { TreeTableComponent } from '@farris/ui-treetable';
import { MessagerService } from '@farris/ui-messager';
import { AuthDataField, AuthDataSource } from '../../common/entity/auth-data-source.entity';
import { RacCommonUtil } from '../../common/util/rac-util';
import { TreeService } from '../../common/service/tree.service';
/**
 * 用户授权业务组织组件
 */
export declare class DataHelpComponent implements OnInit {
    private session;
    private msgService;
    private notifyService;
    private treeService;
    btnOkAndCancleRef: TemplateRef<any>;
    farrisTree: TreeTableComponent;
    closeModalEmitter: EventEmitter<any>;
    /** 弹出框中用到的最终选中的数据 */
    selectEmitter: EventEmitter<{
        data: any[];
        selectedKey: string[];
    }>;
    selectedModels: any[];
    hasSelectKeys: string[];
    isHasSelectAll: boolean;
    authField: string;
    ownerId: string;
    canAssignDatas: any[];
    data: any;
    isIntegrityData: boolean;
    isDisplayTree: boolean;
    isShowSearch: boolean;
    isSelectAll: boolean;
    selectKeys: string[];
    /** 是否单选 */
    singleSelect: boolean;
    treeHeight: string;
    /** 是否受维度分组 */
    isAuGroup: boolean;
    /** 弹出框中用到的最终选中的数据 */
    selectByGroupEmitter: EventEmitter<string[]>;
    dataKey: string;
    helpFields: string[];
    showFields: AuthDataField[];
    codeOrNameFields: AuthDataField[];
    authDataSource: AuthDataSource;
    /** 是否可用 */
    isEnable: boolean;
    /** 是否全部权限 */
    isAllAuth: boolean;
    /**
     * 分页参数：默认展示200条,可修改
     */
    gridView: GridDataResult;
    pageSetting: PagerSettings | boolean;
    skip: number;
    pageSize: number;
    pageIndex: number;
    treedata: any[];
    flatData: any[];
    /** root根节点，用于默认展开 */
    root: string;
    saveSelections: any;
    treeCols: any;
    loadDataType: string;
    cascadeCheck: boolean;
    cascadeUp: boolean;
    cascadeDown: boolean;
    isTreeLoaded: boolean;
    constructor(session: RacCommonUtil, msgService: MessagerService, notifyService: NotifyService, treeService: TreeService);
    /** 要搜索的信息 */
    searchInfo: string;
    /** 要搜索的信息 */
    searchDatas: any[];
    searchTitle: string;
    ngOnInit(): void;
    /** 获取可分配的业务数据 */
    getAuthDataSource(): void;
    /** 根据获取到的权限结果数据，加载界面 */
    displayData(): void;
    /** 展示树形相关数据 */
    showTreeInfo(): void;
    /** 报错处理 */
    handleError(error: HttpErrorResponse): void;
    readonly selectableSettings: SelectableSettings;
    iconClass({ type }: any): any;
    /**
     * 获取选择信息
     */
    getSelectInfo(): {
        data: any[];
        selectedKey: string[];
    };
    /** 判断是否分了全部权限*，首先必须全选，其次必须是数据完整的，然后选中的数据必须与数据源长度一致（如果仅搜索后的全选，不是*） */
    getIsAllAuth(): boolean;
    /** 确定发射选中数据以及选中内码 */
    confirm(): void;
    cancle(): void;
    /** 全选，这里全选可能是过滤后数据的全选 */
    checkAllClick(): void;
    checkClick(): void;
    /** 选择事件 */
    onSelectedKeysChange(e: any): void;
    /**
     * 点击分页查询或者分页参数变化后查询
     * @param event 分页参数
     */
    pageChange(event: PageChangeEvent): void;
    /**
     * 列表的查询
     */
    queryByPage(): void;
    searchClick(): void;
    /**
     * 搜索树状
     */
    search(txt: string): void;
    /**
     * 获取编号或者名称字段
     */
    getCodeOrNameFields(): AuthDataField[];
    searchTreeSelf(arg: any): void;
    oldTreeSearch: string;
    treeSearchIndex: number;
    /** 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     *   @param args  格式 searchData = { field: '*', value: '' };
     */
    searchTree(txt: any): void;
    /** 逐一找到需要展开的父节点，全部展开 */
    expandParent(key: string): void;
    /** 树形选中全部 */
    treeCheckAll(): void;
    /** 树形取消全部 */
    treeUnCheckAll(): void;
    /** 取消勾选 */
    nodeUnChecked(): void;
    showElement(elementName: string): void;
    hideElement(elementName: string): void;
}
