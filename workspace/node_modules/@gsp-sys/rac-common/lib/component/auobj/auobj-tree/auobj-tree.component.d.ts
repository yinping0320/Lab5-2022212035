import { OnInit, EventEmitter, TemplateRef } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { TreeNode, TreeTableComponent } from '@farris/ui-treetable';
import { AuthobjEntity } from '../../../common/entity/authobj.entity';
import { AuthObjService } from '../../../common/service/authobj.service';
import { RacCommonUtil } from '../../../common/util/rac-util';
export declare class AuobjTreeComponent implements OnInit {
    private service;
    racUtil: RacCommonUtil;
    private translate;
    /** 要加载的数据类型
     * all代表全部权限对象
     * reassign代表允许在用户上重新授权的权限对象
     */
    dataMode: 'all' | 'reassign';
    initSelectedKeys: string[];
    data: any[];
    selectedKey: string;
    selectedKeyOld: string;
    selectedModel: AuthobjEntity;
    cols: any[];
    /** 树绑定数据源 */
    treeNodeData: TreeNode[];
    farrisTt: TreeTableComponent;
    selectedchanged: EventEmitter<AuthobjEntity>;
    /** 帮助输出事件 */
    selectedAfterOk: EventEmitter<AuthobjEntity>;
    closeModalEmitter: EventEmitter<any>;
    btnOkAndCancleRef: TemplateRef<any>;
    constructor(service: AuthObjService, racUtil: RacCommonUtil, translate: TranslateService);
    ngOnInit(): void;
    /** 根据分配的功能操作初始对应的权限对象 */
    initData(): void;
    /**
     * 构造Farris-Tree所需结构
     * @param authfieldList 权限字段列表
     */
    private initTreeNodeList;
    /**
     * 将权限字段实体转换为Farris-TreeNode
     */
    private convertToTreeNode;
    appendNode(newObj: AuthobjEntity): void;
    removeNode(newObj: AuthobjEntity): void;
    updateNode(newObj: AuthobjEntity): void;
    /**
     * 选中行改变后触发事件
     */
    handleSelection(args: any): void;
    iconClass({ id }: any): any;
    /** 帮助确定按钮 */
    confirm(): void;
    cancle(): void;
}
