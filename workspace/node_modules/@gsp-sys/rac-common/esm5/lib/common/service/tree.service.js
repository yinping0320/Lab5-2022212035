/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { RacCommonUtil } from '../util/rac-util';
/**
 * 取数服务
 */
var TreeService = /** @class */ (function () {
    function TreeService(util) {
        this.util = util;
    }
    /** 按照path码构造树 */
    /**
     * 按照path码构造树
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    TreeService.prototype.makeTreeByPath = /**
     * 按照path码构造树
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    function (datas, pathField) {
        var _this = this;
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        var pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (_this.util.isNullOrEmptyString(x[pathField])) {
                return true;
            }
            /** @type {?} */
            var findObj = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            function (parent) { return parent[pathField] === x[pathField].substring(0, x[pathField].length - 4); }));
            if (findObj === undefined || findObj === null) {
                return true;
            }
        }));
        /** @type {?} */
        var treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var entity = {};
            entity['data'] = x;
            entity['children'] = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.findChildrenByPath(item, datas, pathField);
        }));
        return treedata;
    };
    /** 找到子节点 */
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    TreeService.prototype.findChildrenByPath = /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} pathField
     * @return {?}
     */
    function (parent, datas, pathField) {
        var _this = this;
        /** @type {?} */
        var childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        function (childitem) {
            if (childitem[pathField].substring(0, childitem[pathField].length - 4) === parent['data'][pathField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                /** @type {?} */
                var childEntity = {};
                childEntity['data'] = child;
                // tslint:disable-next-line:no-string-literal
                childEntity['children'] = [];
                // tslint:disable-next-line:no-string-literal
                parent['children'].push(childEntity);
                _this.findChildrenByPath(childEntity, datas, pathField);
            }));
        }
    };
    /** 按照parent码构造树 */
    /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    TreeService.prototype.makeTreeByParent = /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    function (datas, parentField, keyField) {
        var _this = this;
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        var pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (_this.util.isNullOrEmptyString(x[parentField])) {
                return true;
            }
            // 断层的这种，应该也属于一级
            /** @type {?} */
            var p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            function (parent) { return parent[keyField] === x[parentField]; }));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        var treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var entity = {};
            entity['data'] = x;
            entity['children'] = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    };
    /** 找到子节点 */
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    TreeService.prototype.findChildrenByParent = /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    function (parent, datas, parentField, keyField) {
        var _this = this;
        /** @type {?} */
        var childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        function (childitem) {
            if (childitem[parentField] === parent['data'][keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                /** @type {?} */
                var childEntity = {};
                childEntity['data'] = child;
                childEntity['children'] = [];
                parent['children'].push(childEntity);
                _this.findChildrenByParent(childEntity, datas, parentField, keyField);
            }));
        }
    };
    TreeService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TreeService.ctorParameters = function () { return [
        { type: RacCommonUtil }
    ]; };
    return TreeService;
}());
export { TreeService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeService.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1zeXMvcmFjLWNvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9jb21tb24vc2VydmljZS90cmVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBT2pEO0lBRUkscUJBRVksSUFBbUI7UUFBbkIsU0FBSSxHQUFKLElBQUksQ0FBZTtJQUcvQixDQUFDO0lBRUQsaUJBQWlCOzs7Ozs7O0lBQ2pCLG9DQUFjOzs7Ozs7SUFBZCxVQUFlLEtBQVksRUFBRSxTQUFpQjtRQUE5QyxpQkF5QkM7OztZQXZCUyxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUM7WUFDaEMsSUFBSyxLQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFHO2dCQUNoRCxPQUFPLElBQUksQ0FBQzthQUNkOztnQkFDSyxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUk7Ozs7WUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxFQUF6RSxDQUF5RSxFQUFDO1lBQy9HLElBQUssT0FBTyxLQUFLLFNBQVMsSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFHO2dCQUM5QyxPQUFPLElBQUksQ0FBQzthQUNkO1FBRUwsQ0FBQyxFQUFDOztZQUNJLFFBQVEsR0FBRyxFQUFFO1FBQ25CLGFBQWEsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxDQUFDOztnQkFDVCxNQUFNLEdBQUcsRUFBRTtZQUNqQixN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SixDQUFDO1FBQ0YsT0FBTyxRQUFRLENBQUM7SUFDaEIsQ0FBQztJQUVELFlBQVk7Ozs7Ozs7OztJQUNaLDBDQUFvQjs7Ozs7Ozs7SUFBcEIsVUFBcUIsTUFBVyxFQUFFLEtBQVksRUFBRSxXQUFtQixFQUFFLFFBQWdCO1FBQXJGLGlCQWVDOztZQWRTLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsU0FBUztZQUNwQyxJQUFJLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3JELE9BQU8sSUFBSSxDQUFDO2FBQ2Y7UUFDTCxDQUFDLEVBQUM7UUFDRixJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQyxTQUFTLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsS0FBSzs7b0JBQ2YsV0FBVyxHQUFHLEVBQUU7Z0JBQ3RCLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQzVCLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzdCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3JDLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN2RSxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0wsQ0FBQzs7Z0JBckdKLFVBQVU7Ozs7Z0JBUEYsYUFBYTs7SUE2R3RCLGtCQUFDO0NBQUEsQUF0R0QsSUFzR0M7U0FyR1ksV0FBVzs7Ozs7O0lBR2hCLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSZXN0ZnVsU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgUmFjQ29tbW9uVXRpbCB9IGZyb20gJy4uL3V0aWwvcmFjLXV0aWwnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9vZic7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBIaWVyYXJjaGljYWxUeXBlIH0gZnJvbSAnLi4vZW50aXR5L2hpZXJhcmNoaWNhbC10eXBlLmVudW0nO1xyXG5cclxuXHJcbi8qKiDlj5bmlbDmnI3liqEgKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVHJlZVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLy8gcHJpdmF0ZSByZXN0OiBSZXN0ZnVsU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHV0aWw6IFJhY0NvbW1vblV0aWwsXHJcbiAgICAgICAgLy8gcHJpdmF0ZSBtc2dTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5oyJ54WncGF0aOeggeaehOmAoOagkSAqL1xyXG4gICAgbWFrZVRyZWVCeVBhdGgoZGF0YXM6IGFueVtdLCBwYXRoRmllbGQ6IHN0cmluZyApOiBhbnkgW10ge1xyXG4gICAgICAgIC8vIOS4iue0mueIsuepuu+8jOaIluiAheaykuacieS4iue0mueahFxyXG4gICAgICAgIGNvbnN0IHBhdGhMYXllck9uZXMgPSBkYXRhcy5maWx0ZXIoeCA9PiB7XHJcbiAgICAgICAgICAgIGlmICggdGhpcy51dGlsLmlzTnVsbE9yRW1wdHlTdHJpbmcoeFtwYXRoRmllbGRdKSApIHtcclxuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZmluZE9iaiA9IGRhdGFzLmZpbmQocGFyZW50ID0+IHBhcmVudFtwYXRoRmllbGRdID09PSB4W3BhdGhGaWVsZF0uc3Vic3RyaW5nKDAsIHhbcGF0aEZpZWxkXS5sZW5ndGggLSA0ICkpO1xyXG4gICAgICAgICAgICBpZiAoIGZpbmRPYmogPT09IHVuZGVmaW5lZCB8fCBmaW5kT2JqID09PSBudWxsICkge1xyXG4gICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCB0cmVlZGF0YSA9IFtdO1xyXG4gICAgICAgIHBhdGhMYXllck9uZXMuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZW50aXR5WydkYXRhJ10gPSB4O1xyXG4gICAgICAgICAgICAgICAgZW50aXR5WydjaGlsZHJlbiddID0gW107XHJcbiAgICAgICAgICAgICAgICB0cmVlZGF0YS5wdXNoKGVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnJvb3QgPSB4WydpZCddO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRyZWVkYXRhLmZvckVhY2goIGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kQ2hpbGRyZW5CeVBhdGgoaXRlbSwgZGF0YXMsIHBhdGhGaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiB0cmVlZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5om+5Yiw5a2Q6IqC54K5ICovXHJcbiAgICBmaW5kQ2hpbGRyZW5CeVBhdGgocGFyZW50OiBhbnksIGRhdGFzOiBhbnlbXSwgcGF0aEZpZWxkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGNoaWxkTGlzdCA9IGRhdGFzLmZpbHRlcihjaGlsZGl0ZW0gPT4ge1xyXG4gICAgICAgICAgaWYgKGNoaWxkaXRlbVtwYXRoRmllbGRdLnN1YnN0cmluZygwLCBjaGlsZGl0ZW1bcGF0aEZpZWxkXS5sZW5ndGggLSA0KSA9PT0gcGFyZW50WydkYXRhJ11bcGF0aEZpZWxkXSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgaWYgKGNoaWxkTGlzdCAmJiBjaGlsZExpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICBjaGlsZExpc3QuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRFbnRpdHkgPSB7fTtcclxuICAgICAgICBjaGlsZEVudGl0eVsnZGF0YSddID0gY2hpbGQ7XHJcbiAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgIGNoaWxkRW50aXR5WydjaGlsZHJlbiddID0gW107XHJcbiAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxyXG4gICAgICAgIHBhcmVudFsnY2hpbGRyZW4nXS5wdXNoKGNoaWxkRW50aXR5KTtcclxuICAgICAgICB0aGlzLmZpbmRDaGlsZHJlbkJ5UGF0aChjaGlsZEVudGl0eSwgZGF0YXMsIHBhdGhGaWVsZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgIC8qKiDmjInnhadwYXJlbnTnoIHmnoTpgKDmoJEgKi9cclxuICAgbWFrZVRyZWVCeVBhcmVudChkYXRhczogYW55W10sIHBhcmVudEZpZWxkOiBzdHJpbmcsIGtleUZpZWxkOiBzdHJpbmcpOiBhbnkgW10ge1xyXG4gICAgLy8g5LiK57Sa54iy56m677yM5oiW6ICF5rKS5pyJ5LiK57Sa55qEXHJcbiAgICBjb25zdCBwYXRoTGF5ZXJPbmVzID0gZGF0YXMuZmlsdGVyKHggPT4ge1xyXG4gICAgICAgaWYgKCB0aGlzLnV0aWwuaXNOdWxsT3JFbXB0eVN0cmluZyh4W3BhcmVudEZpZWxkXSkpIHtcclxuICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgIH1cclxuICAgICAgIC8vIOaWreWxgueahOi/meenje+8jOW6lOivpeS5n+WxnuS6juS4gOe6p1xyXG4gICAgICAgY29uc3QgcCA9IGRhdGFzLmZpbmQocGFyZW50ID0+IHBhcmVudFtrZXlGaWVsZF0gPT09IHhbcGFyZW50RmllbGRdKTtcclxuICAgICAgIGlmICghcCkge1xyXG4gICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgdHJlZWRhdGEgPSBbXTtcclxuICAgIHBhdGhMYXllck9uZXMuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZW50aXR5ID0ge307XHJcbiAgICAgICAgICAgIGVudGl0eVsnZGF0YSddID0geDtcclxuICAgICAgICAgICAgZW50aXR5WydjaGlsZHJlbiddID0gW107XHJcbiAgICAgICAgICAgIHRyZWVkYXRhLnB1c2goZW50aXR5KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5yb290ID0geFsnaWQnXTtcclxuICAgIH0pO1xyXG4gICAgdHJlZWRhdGEuZm9yRWFjaCggaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZENoaWxkcmVuQnlQYXJlbnQoaXRlbSwgZGF0YXMsIHBhcmVudEZpZWxkLCBrZXlGaWVsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuICAgIHJldHVybiB0cmVlZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5om+5Yiw5a2Q6IqC54K5ICovXHJcbiAgICBmaW5kQ2hpbGRyZW5CeVBhcmVudChwYXJlbnQ6IGFueSwgZGF0YXM6IGFueVtdLCBwYXJlbnRGaWVsZDogc3RyaW5nLCBrZXlGaWVsZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRMaXN0ID0gZGF0YXMuZmlsdGVyKGNoaWxkaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZGl0ZW1bcGFyZW50RmllbGRdID09PSBwYXJlbnRbJ2RhdGEnXVtrZXlGaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGNoaWxkTGlzdCAmJiBjaGlsZExpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgY2hpbGRMaXN0LmZvckVhY2goY2hpbGQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZEVudGl0eSA9IHt9O1xyXG4gICAgICAgICAgICBjaGlsZEVudGl0eVsnZGF0YSddID0gY2hpbGQ7XHJcbiAgICAgICAgICAgIGNoaWxkRW50aXR5WydjaGlsZHJlbiddID0gW107XHJcbiAgICAgICAgICAgIHBhcmVudFsnY2hpbGRyZW4nXS5wdXNoKGNoaWxkRW50aXR5KTtcclxuICAgICAgICAgICAgdGhpcy5maW5kQ2hpbGRyZW5CeVBhcmVudChjaGlsZEVudGl0eSwgZGF0YXMsIHBhcmVudEZpZWxkLCBrZXlGaWVsZCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19