import { OnInit, EventEmitter, ElementRef, AfterContentInit } from '@angular/core';
import { TreeTableComponent, TreeNode } from '@farris/ui-treetable';
import { GroupService } from './group.service';
import { TreeFilter } from '../filter/tree-filter';
import { SysLocaleService } from '../../locale/sys-locale.service';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
export declare class GroupNavComponent implements OnInit, AfterContentInit {
    groupService: GroupService;
    localService: SysLocaleService;
    private notifyService;
    msg: MessagerService;
    farrisTreeParent: ElementRef;
    farrisTt: TreeTableComponent;
    title: string;
    showHeader: boolean;
    fixedHeader: boolean;
    withCodeColumn: boolean;
    allRoot: boolean;
    groupType: 'user' | 'position' | 'role' | 'org';
    filter: TreeFilter;
    selectKeys: string[];
    needRemote: boolean;
    /** 显示组织类型列 */
    showNodeTypeColumn: boolean;
    treeData: TreeNode[];
    showFilterBar: boolean;
    searchFields: any;
    allColumnsTitle: string;
    search: EventEmitter<any>;
    selectRowChanged: EventEmitter<any>;
    cols: any[];
    i18nRes: any;
    /** 查询内容 */
    searchInfo: string;
    /** 上次查询内容 */
    oldSearchInfo: string;
    field: string;
    /** 上次查询内容 */
    oldField: string;
    searchResult: any[];
    searchIndex: number;
    /**
     * 监控拖拽事件，重绘组织TreeTable
     * @param event 事件参数
     */
    temp: boolean;
    winResize(): void;
    constructor(groupService: GroupService, localService: SysLocaleService, notifyService: NotifyService, msg: MessagerService);
    /** 重绘Farris-TreeTable的大小 */
    reSizeTreeTable(height?: number, width?: number): void;
    ngOnInit(): void;
    /**
     * 刷新当前页面信息
     */
    refreshThisNav(): void;
    /** 页面渲染完成后 */
    ngAfterContentInit(): void;
    /** 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     *   @param args  格式 searchData = { field: '*', value: '' };
     */
    searchData(args: any): void;
    clearSearchValue(): void;
    /**
     * 构造树
    */
    private makeTree;
    /**
     * 父节点构造树
     */
    private makeChildrenByParentId;
    /**
     * 将组织实体转换为Farris-TreeNode
     */
    private convertToTreeNode;
    /**
     * 初始顶级分组，默认layer=1的情况
     * @param sysOrgList 系统组织列表
     */
    private initTreeNodeList;
    /**
     * 选择的组织行
     * @param arg 参数
     */
    onNodeSelect(event: any): void;
    /**
     * 获取当前TreeTable的绑定数据
     */
    getTreeData(): TreeNode[];
    /**
     * 获取当前TreeTable的组件实例
     */
    getTreeTableComp(): TreeTableComponent;
    /**
     * 选中某个节点
     */
    selectNode(id: string, isCheck?: boolean): void;
    /**
     * 清除所有选中值
     */
    unCheckAllNodes(): void;
    /**
     * 清除所有选中值
     */
    scrollToCurrentNode(key: any): void;
    /** 逐一找到需要展开的父节点，全部展开 */
    expandParent(key: string): void;
}
