/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Injector, ComponentFactoryResolver } from '@angular/core';
import { SysFuncOperationComponent } from '../sys-func-operation/sys-func-operation.component';
import { SysFrontUtil } from '../../sys-common/sys-front.util';
import { BsModalService } from '@farris/ui-modal';
import { SysFarrisFuncOperationComponent } from '../sys-farris-func-operation/sys-farris-func-operation.component';
import { SysLocaleService } from '../../locale/sys-locale.service';
import { HELP_LOCALE_ZHCHS } from '../../locale/locales/zh-cn/help';
export class SysFuncOpHelpComponent {
    /**
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} sysUtil
     * @param {?} localService
     */
    constructor(modalService, injector, cfr, sysUtil, localService) {
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.sysUtil = sysUtil;
        this.localService = localService;
        /**
         * 是否启用新UI,启用后性能提升
         */
        this.useNewUI = false;
        /**
         * 初始选中的权限对象内码
         */
        this.initSelectKeys = [];
        /**
         * 是否只显示分组
         */
        this.onlyShowGroup = false;
        /**
         * 输出事件
         */
        this.afterHelpConfirm = new EventEmitter();
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('help');
        }
        else {
            this.i18nRes = HELP_LOCALE_ZHCHS;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 新UI
     * @param {?} sessionId
     * @return {?}
     */
    showNewHelp(sessionId) {
        // 调用帮助时必须传递sessionId
        this.sysUtil.sessionId = sessionId;
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(SysFarrisFuncOperationComponent);
        /** @type {?} */
        const funcOpCompNew = compFactory.create(this.injector);
        // 获取功能操作的实例组件
        if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {
            this.initSelectKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => funcOpCompNew.instance.curSelectedKeys.push(key)));
        }
        // 初始化选择的业务操作
        if (this.bizObjectId && this.bizObjectId !== '') {
            funcOpCompNew.instance.bizObjectId = this.bizObjectId;
        }
        if (this.gridSelectMode) {
            funcOpCompNew.instance.gridSelectMode = this.gridSelectMode;
        }
        funcOpCompNew.instance.onlyShowGroup = this.onlyShowGroup;
        funcOpCompNew.instance.isGroupCanSelected = this.isGroupCanSelected;
        /** @type {?} */
        const modalConfig = {
            title: this.i18nRes.operationTitle,
            width: 850,
            height: 550,
            buttons: funcOpCompNew.instance.btnOkAndCancleRef,
            showButtons: true,
            showMaxButton: true,
            resizable: true
        };
        // 弹出帮助框
        this.funcOpDialog = this.modalService.show(funcOpCompNew, modalConfig);
        // 取消后
        funcOpCompNew.instance.afterCancle.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // 消失模态框
            this.funcOpDialog.close();
        }));
        // 确认后
        funcOpCompNew.instance.afterConfirm.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.afterHelpConfirm.next(res);
        }));
    }
    /**
     * 弹出Farris模态框帮助
     * @param {?} sessionId
     * @return {?}
     */
    showHelp(sessionId) {
        if (this.useNewUI) {
            this.showNewHelp(sessionId);
            return;
        }
        // 调用帮助时必须传递sessionId
        this.sysUtil.sessionId = sessionId;
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(SysFuncOperationComponent);
        this.funcOpComp = compFactory.create(this.injector);
        // 获取功能操作的实例组件
        if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {
            this.initSelectKeys
                .forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => this.funcOpComp.instance.curSelectedKeys.push(key)));
        }
        // 初始化选择的业务操作
        if (this.bizObjectId && this.bizObjectId !== '') {
            this.funcOpComp.instance.bizObjectId = this.bizObjectId;
        }
        if (this.gridSelectMode) {
            this.funcOpComp.instance.gridSelectMode = this.gridSelectMode;
        }
        this.funcOpComp.instance.onlyShowGroup = this.onlyShowGroup;
        this.funcOpComp.instance.isGroupCanSelected = this.isGroupCanSelected;
        // 旧版本的需要在这里loaddata
        this.funcOpComp.instance.loadData();
        /** @type {?} */
        const modalConfig = {
            title: '功能操作帮助',
            width: 800,
            height: 550,
            buttons: this.funcOpComp.instance.btnOkAndCancleRef,
            showButtons: true,
            showMaxButton: false,
            resizable: false
        };
        // 弹出帮助框
        this.funcOpDialog = this.modalService.show(this.funcOpComp, modalConfig);
        // 取消后
        this.funcOpComp.instance.afterCancle.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // 消失模态框
            this.funcOpDialog.close();
        }));
        // 确认后
        this.funcOpComp.instance.afterConfirm.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.afterHelpConfirm.next(res);
        }));
    }
}
SysFuncOpHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-sys-func-op-help',
                template: "",
                styles: [""]
            }] }
];
/** @nocollapse */
SysFuncOpHelpComponent.ctorParameters = () => [
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: SysFrontUtil },
    { type: SysLocaleService }
];
SysFuncOpHelpComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    useNewUI: [{ type: Input }],
    initSelectKeys: [{ type: Input }],
    onlyShowGroup: [{ type: Input }],
    gridSelectMode: [{ type: Input }],
    isGroupCanSelected: [{ type: Input }],
    afterHelpConfirm: [{ type: Output }]
};
if (false) {
    /**
     * 所属的业务对象内码
     * @type {?}
     */
    SysFuncOpHelpComponent.prototype.bizObjectId;
    /**
     * 是否启用新UI,启用后性能提升
     * @type {?}
     */
    SysFuncOpHelpComponent.prototype.useNewUI;
    /**
     * 初始选中的权限对象内码
     * @type {?}
     */
    SysFuncOpHelpComponent.prototype.initSelectKeys;
    /**
     * 是否只显示分组
     * @type {?}
     */
    SysFuncOpHelpComponent.prototype.onlyShowGroup;
    /** @type {?} */
    SysFuncOpHelpComponent.prototype.gridSelectMode;
    /**
     * 分组能否被选择
     * @type {?}
     */
    SysFuncOpHelpComponent.prototype.isGroupCanSelected;
    /**
     * 输出事件
     * @type {?}
     */
    SysFuncOpHelpComponent.prototype.afterHelpConfirm;
    /**
     * @type {?}
     * @private
     */
    SysFuncOpHelpComponent.prototype.funcOpComp;
    /**
     * @type {?}
     * @private
     */
    SysFuncOpHelpComponent.prototype.funcOpDialog;
    /** @type {?} */
    SysFuncOpHelpComponent.prototype.i18nRes;
    /**
     * @type {?}
     * @private
     */
    SysFuncOpHelpComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    SysFuncOpHelpComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SysFuncOpHelpComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    SysFuncOpHelpComponent.prototype.sysUtil;
    /**
     * @type {?}
     * @private
     */
    SysFuncOpHelpComponent.prototype.localService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzLWZ1bmMtb3AtaGVscC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9zeXNtZ3ItdWkvIiwic291cmNlcyI6WyJsaWIvZnVuYy1vcC1oZWxwL3N5cy1mdW5jLW9wLWhlbHAvc3lzLWZ1bmMtb3AtaGVscC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBRVQsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBQ04sUUFBUSxFQUNSLHdCQUF3QixFQUMzQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTlELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBT3BFLE1BQU0sT0FBTyxzQkFBc0I7Ozs7Ozs7O0lBZ0MvQixZQUNZLFlBQTRCLEVBQzVCLFFBQWtCLEVBQ2xCLEdBQTZCLEVBQzdCLE9BQXFCLEVBQ3JCLFlBQThCO1FBSjlCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUM1QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBQzdCLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFDckIsaUJBQVksR0FBWixZQUFZLENBQWtCOzs7O1FBL0JqQyxhQUFRLEdBQUcsS0FBSyxDQUFDOzs7O1FBSzFCLG1CQUFjLEdBQWEsRUFBRSxDQUFDOzs7O1FBRzlCLGtCQUFhLEdBQUcsS0FBSyxDQUFDOzs7O1FBWXRCLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFZLENBQUM7UUFhNUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUQ7YUFBTTtZQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsaUJBQWlCLENBQUM7U0FDcEM7SUFDTCxDQUFDOzs7O0lBRUQsUUFBUTtJQUNSLENBQUM7Ozs7OztJQUtELFdBQVcsQ0FBRSxTQUFTO1FBQ2xCLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7O2NBQzdCLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLCtCQUErQixDQUFDOztjQUMvRSxhQUFhLEdBQWtELFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN0RyxjQUFjO1FBQ2QsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPOzs7O1lBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQztTQUN4RjtRQUNELGFBQWE7UUFDYixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxFQUFFLEVBQUU7WUFDN0MsYUFBYSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUN6RDtRQUNELElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyQixhQUFhLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1NBQy9EO1FBQ0QsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUMxRCxhQUFhLENBQUMsUUFBUSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQzs7Y0FDOUQsV0FBVyxHQUFHO1lBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWM7WUFDbEMsS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsR0FBRztZQUNYLE9BQU8sRUFBRSxhQUFhLENBQUMsUUFBUSxDQUFDLGlCQUFpQjtZQUNqRCxXQUFXLEVBQUUsSUFBSTtZQUNqQixhQUFhLEVBQUUsSUFBSTtZQUNuQixTQUFTLEVBQUUsSUFBSTtTQUNsQjtRQUNELFFBQVE7UUFDUixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN2RSxNQUFNO1FBQ04sYUFBYSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUzs7OztRQUN4QyxHQUFHLENBQUMsRUFBRTtZQUNGLFFBQVE7WUFDUixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLENBQUMsRUFDSixDQUFDO1FBQ0YsTUFBTTtRQUNOLGFBQWEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVM7Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUNoRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7O0lBS0QsUUFBUSxDQUFFLFNBQWlCO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUIsT0FBTztTQUNWO1FBQ0QscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQzs7Y0FDN0IsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMseUJBQXlCLENBQUM7UUFDL0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxjQUFjO1FBQ2QsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0QsSUFBSSxDQUFDLGNBQWM7aUJBQ2QsT0FBTzs7OztZQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO1NBQzNFO1FBQ0QsYUFBYTtRQUNiLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEVBQUUsRUFBRTtZQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUMzRDtRQUNELElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUNqRTtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzVELElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUN0RSxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7O2NBQzlCLFdBQVcsR0FBRztZQUNoQixLQUFLLEVBQUUsUUFBUTtZQUNmLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUc7WUFDWCxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsaUJBQWlCO1lBQ25ELFdBQVcsRUFBRSxJQUFJO1lBQ2pCLGFBQWEsRUFBRSxLQUFLO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ25CO1FBQ0QsUUFBUTtRQUNSLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN6RSxNQUFNO1FBQ04sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVM7Ozs7UUFDMUMsR0FBRyxDQUFDLEVBQUU7WUFDRixRQUFRO1lBQ1IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixDQUFDLEVBQ0osQ0FBQztRQUNGLE1BQU07UUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsU0FBUzs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7WUFySkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFlBQWdEOzthQUVuRDs7OztZQVZvQixjQUFjO1lBTC9CLFFBQVE7WUFDUix3QkFBd0I7WUFHbkIsWUFBWTtZQUlaLGdCQUFnQjs7OzBCQVdwQixLQUFLO3VCQUdMLEtBQUs7NkJBSUwsS0FBSzs0QkFHTCxLQUFLOzZCQUdMLEtBQUs7aUNBSUwsS0FBSzsrQkFLTCxNQUFNOzs7Ozs7O0lBdEJQLDZDQUE2Qjs7Ozs7SUFHN0IsMENBQTBCOzs7OztJQUkxQixnREFDOEI7Ozs7O0lBRTlCLCtDQUNzQjs7SUFFdEIsZ0RBQ3NDOzs7OztJQUd0QyxvREFDNEI7Ozs7O0lBSTVCLGtEQUNnRDs7Ozs7SUFFaEQsNENBQTREOzs7OztJQUU1RCw4Q0FBaUM7O0lBQ2pDLHlDQUFhOzs7OztJQUVULDhDQUFvQzs7Ozs7SUFDcEMsMENBQTBCOzs7OztJQUMxQixxQ0FBcUM7Ozs7O0lBQ3JDLHlDQUE2Qjs7Ozs7SUFDN0IsOENBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE9uSW5pdCxcclxuICAgIEV2ZW50RW1pdHRlcixcclxuICAgIElucHV0LFxyXG4gICAgQ29tcG9uZW50UmVmLFxyXG4gICAgT3V0cHV0LFxyXG4gICAgSW5qZWN0b3IsXHJcbiAgICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3lzRnVuY09wZXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL3N5cy1mdW5jLW9wZXJhdGlvbi9zeXMtZnVuYy1vcGVyYXRpb24uY29tcG9uZW50JztcclxuaW1wb3J0IHsgU3lzRnJvbnRVdGlsIH0gZnJvbSAnLi4vLi4vc3lzLWNvbW1vbi9zeXMtZnJvbnQudXRpbCc7XHJcbmltcG9ydCB7IEJzTW9kYWxSZWYsIEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBTeXNGYXJyaXNGdW5jT3BlcmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vc3lzLWZhcnJpcy1mdW5jLW9wZXJhdGlvbi9zeXMtZmFycmlzLWZ1bmMtb3BlcmF0aW9uLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFN5c0xvY2FsZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9sb2NhbGUvc3lzLWxvY2FsZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSEVMUF9MT0NBTEVfWkhDSFMgfSBmcm9tICcuLi8uLi9sb2NhbGUvbG9jYWxlcy96aC1jbi9oZWxwJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHAtc3lzLWZ1bmMtb3AtaGVscCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc3lzLWZ1bmMtb3AtaGVscC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9zeXMtZnVuYy1vcC1oZWxwLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU3lzRnVuY09wSGVscENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgLyoqIOaJgOWxnueahOS4muWKoeWvueixoeWGheeggSAqL1xyXG4gICAgQElucHV0KCkgYml6T2JqZWN0SWQ6IHN0cmluZztcclxuXHJcbiAgICAvKiog5piv5ZCm5ZCv55So5pawVUks5ZCv55So5ZCO5oCn6IO95o+Q5Y2HICovXHJcbiAgICBASW5wdXQoKSB1c2VOZXdVSSA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vpgInkuK3nmoTmnYPpmZDlr7nosaHlhoXnoIFcclxuICAgICAqL1xyXG4gICAgQElucHV0KClcclxuICAgIGluaXRTZWxlY3RLZXlzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgLyoqIOaYr+WQpuWPquaYvuekuuWIhue7hCAqL1xyXG4gICAgQElucHV0KClcclxuICAgIG9ubHlTaG93R3JvdXAgPSBmYWxzZTtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ3JpZFNlbGVjdE1vZGU6ICdzaW5nbGUnIHwgJ211bHRpcGxlJztcclxuXHJcbiAgICAvKiog5YiG57uE6IO95ZCm6KKr6YCJ5oupICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgaXNHcm91cENhblNlbGVjdGVkOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiDovpPlh7rkuovku7ZcclxuICAgICAqL1xyXG4gICAgQE91dHB1dCgpXHJcbiAgICBhZnRlckhlbHBDb25maXJtID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3RbXT4oKTtcclxuICAgIC8vIOW4ruWKqeS4iuWKqOaAgeWIm+W7uueahOaYvuekuuaooeadv1xyXG4gICAgcHJpdmF0ZSBmdW5jT3BDb21wOiBDb21wb25lbnRSZWY8U3lzRnVuY09wZXJhdGlvbkNvbXBvbmVudD47XHJcbiAgICAvLyDmqKHmgIHmoYbmnI3liqFcclxuICAgIHByaXZhdGUgZnVuY09wRGlhbG9nOiBCc01vZGFsUmVmO1xyXG4gICAgaTE4blJlczogYW55O1xyXG4gICAgY29uc3RydWN0b3IgKFxyXG4gICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgc3lzVXRpbDogU3lzRnJvbnRVdGlsLFxyXG4gICAgICAgIHByaXZhdGUgbG9jYWxTZXJ2aWNlOiBTeXNMb2NhbGVTZXJ2aWNlXHJcbiAgICApIHtcclxuICAgICAgICBpZiAodGhpcy5sb2NhbFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5pMThuUmVzID0gdGhpcy5sb2NhbFNlcnZpY2UuZ2V0Q29tcG9uZW50T3B0KCdoZWxwJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pMThuUmVzID0gSEVMUF9MT0NBTEVfWkhDSFM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0ICgpIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWsFVJXHJcbiAgICAgKi9cclxuICAgIHNob3dOZXdIZWxwIChzZXNzaW9uSWQpIHtcclxuICAgICAgICAvLyDosIPnlKjluK7liqnml7blv4XpobvkvKDpgJJzZXNzaW9uSWRcclxuICAgICAgICB0aGlzLnN5c1V0aWwuc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xyXG4gICAgICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoU3lzRmFycmlzRnVuY09wZXJhdGlvbkNvbXBvbmVudCk7XHJcbiAgICAgICAgY29uc3QgZnVuY09wQ29tcE5ldzogQ29tcG9uZW50UmVmPFN5c0ZhcnJpc0Z1bmNPcGVyYXRpb25Db21wb25lbnQ+ID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgIC8vIOiOt+WPluWKn+iDveaTjeS9nOeahOWunuS+i+e7hOS7tlxyXG4gICAgICAgIGlmICh0aGlzLmluaXRTZWxlY3RLZXlzICE9IG51bGwgJiYgdGhpcy5pbml0U2VsZWN0S2V5cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdEtleXMuZm9yRWFjaChrZXkgPT4gZnVuY09wQ29tcE5ldy5pbnN0YW5jZS5jdXJTZWxlY3RlZEtleXMucHVzaChrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5Yid5aeL5YyW6YCJ5oup55qE5Lia5Yqh5pON5L2cXHJcbiAgICAgICAgaWYgKHRoaXMuYml6T2JqZWN0SWQgJiYgdGhpcy5iaXpPYmplY3RJZCAhPT0gJycpIHtcclxuICAgICAgICAgICAgZnVuY09wQ29tcE5ldy5pbnN0YW5jZS5iaXpPYmplY3RJZCA9IHRoaXMuYml6T2JqZWN0SWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdyaWRTZWxlY3RNb2RlKSB7XHJcbiAgICAgICAgICAgIGZ1bmNPcENvbXBOZXcuaW5zdGFuY2UuZ3JpZFNlbGVjdE1vZGUgPSB0aGlzLmdyaWRTZWxlY3RNb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jT3BDb21wTmV3Lmluc3RhbmNlLm9ubHlTaG93R3JvdXAgPSB0aGlzLm9ubHlTaG93R3JvdXA7XHJcbiAgICAgICAgZnVuY09wQ29tcE5ldy5pbnN0YW5jZS5pc0dyb3VwQ2FuU2VsZWN0ZWQgPSB0aGlzLmlzR3JvdXBDYW5TZWxlY3RlZDtcclxuICAgICAgICBjb25zdCBtb2RhbENvbmZpZyA9IHtcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blJlcy5vcGVyYXRpb25UaXRsZSxcclxuICAgICAgICAgICAgd2lkdGg6IDg1MCxcclxuICAgICAgICAgICAgaGVpZ2h0OiA1NTAsXHJcbiAgICAgICAgICAgIGJ1dHRvbnM6IGZ1bmNPcENvbXBOZXcuaW5zdGFuY2UuYnRuT2tBbmRDYW5jbGVSZWYsXHJcbiAgICAgICAgICAgIHNob3dCdXR0b25zOiB0cnVlLFxyXG4gICAgICAgICAgICBzaG93TWF4QnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNpemFibGU6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIOW8ueWHuuW4ruWKqeahhlxyXG4gICAgICAgIHRoaXMuZnVuY09wRGlhbG9nID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhmdW5jT3BDb21wTmV3LCBtb2RhbENvbmZpZyk7XHJcbiAgICAgICAgLy8g5Y+W5raI5ZCOXHJcbiAgICAgICAgZnVuY09wQ29tcE5ldy5pbnN0YW5jZS5hZnRlckNhbmNsZS5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyDmtojlpLHmqKHmgIHmoYZcclxuICAgICAgICAgICAgICAgIHRoaXMuZnVuY09wRGlhbG9nLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIOehruiupOWQjlxyXG4gICAgICAgIGZ1bmNPcENvbXBOZXcuaW5zdGFuY2UuYWZ0ZXJDb25maXJtLnN1YnNjcmliZShyZXMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFmdGVySGVscENvbmZpcm0ubmV4dChyZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5by55Ye6RmFycmlz5qih5oCB5qGG5biu5YqpXHJcbiAgICAgKi9cclxuICAgIHNob3dIZWxwIChzZXNzaW9uSWQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLnVzZU5ld1VJKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd05ld0hlbHAoc2Vzc2lvbklkKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDosIPnlKjluK7liqnml7blv4XpobvkvKDpgJJzZXNzaW9uSWRcclxuICAgICAgICB0aGlzLnN5c1V0aWwuc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xyXG4gICAgICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoU3lzRnVuY09wZXJhdGlvbkNvbXBvbmVudCk7XHJcbiAgICAgICAgdGhpcy5mdW5jT3BDb21wID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgIC8vIOiOt+WPluWKn+iDveaTjeS9nOeahOWunuS+i+e7hOS7tlxyXG4gICAgICAgIGlmICh0aGlzLmluaXRTZWxlY3RLZXlzICE9IG51bGwgJiYgdGhpcy5pbml0U2VsZWN0S2V5cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdEtleXNcclxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGtleSA9PiB0aGlzLmZ1bmNPcENvbXAuaW5zdGFuY2UuY3VyU2VsZWN0ZWRLZXlzLnB1c2goa2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWIneWni+WMlumAieaLqeeahOS4muWKoeaTjeS9nFxyXG4gICAgICAgIGlmICh0aGlzLmJpek9iamVjdElkICYmIHRoaXMuYml6T2JqZWN0SWQgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnVuY09wQ29tcC5pbnN0YW5jZS5iaXpPYmplY3RJZCA9IHRoaXMuYml6T2JqZWN0SWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdyaWRTZWxlY3RNb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnVuY09wQ29tcC5pbnN0YW5jZS5ncmlkU2VsZWN0TW9kZSA9IHRoaXMuZ3JpZFNlbGVjdE1vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZnVuY09wQ29tcC5pbnN0YW5jZS5vbmx5U2hvd0dyb3VwID0gdGhpcy5vbmx5U2hvd0dyb3VwO1xyXG4gICAgICAgIHRoaXMuZnVuY09wQ29tcC5pbnN0YW5jZS5pc0dyb3VwQ2FuU2VsZWN0ZWQgPSB0aGlzLmlzR3JvdXBDYW5TZWxlY3RlZDtcclxuICAgICAgICAvLyDml6fniYjmnKznmoTpnIDopoHlnKjov5nph4xsb2FkZGF0YVxyXG4gICAgICAgIHRoaXMuZnVuY09wQ29tcC5pbnN0YW5jZS5sb2FkRGF0YSgpO1xyXG4gICAgICAgIGNvbnN0IG1vZGFsQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogJ+WKn+iDveaTjeS9nOW4ruWKqScsXHJcbiAgICAgICAgICAgIHdpZHRoOiA4MDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogNTUwLFxyXG4gICAgICAgICAgICBidXR0b25zOiB0aGlzLmZ1bmNPcENvbXAuaW5zdGFuY2UuYnRuT2tBbmRDYW5jbGVSZWYsXHJcbiAgICAgICAgICAgIHNob3dCdXR0b25zOiB0cnVlLFxyXG4gICAgICAgICAgICBzaG93TWF4QnV0dG9uOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzaXphYmxlOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8g5by55Ye65biu5Yqp5qGGXHJcbiAgICAgICAgdGhpcy5mdW5jT3BEaWFsb2cgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KHRoaXMuZnVuY09wQ29tcCwgbW9kYWxDb25maWcpO1xyXG4gICAgICAgIC8vIOWPlua2iOWQjlxyXG4gICAgICAgIHRoaXMuZnVuY09wQ29tcC5pbnN0YW5jZS5hZnRlckNhbmNsZS5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyDmtojlpLHmqKHmgIHmoYZcclxuICAgICAgICAgICAgICAgIHRoaXMuZnVuY09wRGlhbG9nLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIC8vIOehruiupOWQjlxyXG4gICAgICAgIHRoaXMuZnVuY09wQ29tcC5pbnN0YW5jZS5hZnRlckNvbmZpcm0uc3Vic2NyaWJlKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJIZWxwQ29uZmlybS5uZXh0KHJlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19