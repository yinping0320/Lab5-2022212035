/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { BizObjectService } from '../service/biz-object.service';
export class BizObjectComponent {
    /**
     * @param {?} bizObjectService
     */
    constructor(bizObjectService) {
        this.bizObjectService = bizObjectService;
        this.selectKeys = [];
        /**
         * 业务对象变化后
         */
        this.bizObjectChanged = new EventEmitter();
        /**
         * 树控件展开的节点值
         */
        this.expandedKeys = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.bizObjectService.getBizObjects().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            result.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (!element.parentID) {
                    element.parentID = undefined;
                    // 展开第一级
                    if (element.layer === 1) {
                        this.expandedKeys.push(element.id);
                    }
                }
            }));
            this.data = result;
            // 默认业务对象的处理
            if (this.bizObjectId && this.bizObjectId !== '') {
                // 树焦点行
                /** @type {?} */
                let curBizObjectId = this.bizObjectId;
                while (curBizObjectId) {
                    this.expandedKeys.push(curBizObjectId);
                    // 找到当前节点的父节点
                    curBizObjectId = this.data.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.id === curBizObjectId)).parentID;
                }
                // 右侧操作变化
                this.selectKeys = [this.bizObjectId];
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.bizObjectChanged.emit(this.bizObjectId);
                }), 80);
            }
        }));
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    selectChange(args) {
        /** @type {?} */
        const curBusId = args.dataItem.id;
        // 首次触发
        if (this.selectKeys == null || this.selectKeys.length === 0) {
            this.bizObjectChanged.emit(curBusId);
        }
        else {
            // 这个事件里还不会对selectedkeys数组赋值，是上一个状态的
            /** @type {?} */
            const lastBusId = this.selectKeys[0];
            // 变化的情况下触发
            if (lastBusId !== curBusId) {
                this.bizObjectChanged.emit(curBusId);
            }
        }
    }
}
BizObjectComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-biz-object',
                template: "<div class=\"d-flex flex-column flex-fill pt-2 pb-2\" style=\"height: 100%\">\r\n    <kendo-treeview [nodes]=\"data\" textField=\"name\" kendoTreeViewExpandable kendoTreeViewFlatDataBinding idField=\"id\"\r\n      parentIdField=\"parentID\" kendoTreeViewSelectable [selectBy]=\"'id'\" [(selectedKeys)]=\"this.selectKeys\"\r\n      [(expandedKeys)]=\"expandedKeys\"\r\n      [expandBy]=\"'id'\"\r\n      (selectionChange)=\"selectChange($event)\">\r\n    </kendo-treeview>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
BizObjectComponent.ctorParameters = () => [
    { type: BizObjectService }
];
BizObjectComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    bizObjectChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    BizObjectComponent.prototype.bizObjectId;
    /** @type {?} */
    BizObjectComponent.prototype.data;
    /** @type {?} */
    BizObjectComponent.prototype.selectKeys;
    /** @type {?} */
    BizObjectComponent.prototype.currentid;
    /**
     * 业务对象变化后
     * @type {?}
     */
    BizObjectComponent.prototype.bizObjectChanged;
    /**
     * 树控件展开的节点值
     * @type {?}
     */
    BizObjectComponent.prototype.expandedKeys;
    /**
     * @type {?}
     * @private
     */
    BizObjectComponent.prototype.bizObjectService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml6LW9iamVjdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXN5cy9zeXNtZ3ItdWkvIiwic291cmNlcyI6WyJsaWIvZnVuYy1vcC1oZWxwL2Jpei1vYmplY3QvYml6LW9iamVjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFPakUsTUFBTSxPQUFPLGtCQUFrQjs7OztJQVkzQixZQUFxQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVJoRCxlQUFVLEdBQWEsRUFBRSxDQUFDOzs7O1FBSWpDLHFCQUFnQixHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDOzs7O1FBRXBFLGlCQUFZLEdBQUcsRUFBRSxDQUFDO0lBR2xCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQzVELE1BQU0sQ0FBQyxPQUFPOzs7O1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO29CQUNuQixPQUFPLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztvQkFDN0IsUUFBUTtvQkFDUixJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO3dCQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ3RDO2lCQUNKO1lBQ0wsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztZQUNuQixZQUFZO1lBQ1osSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssRUFBRSxFQUFFOzs7b0JBRXpDLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVztnQkFDckMsT0FBTyxjQUFjLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUN2QyxhQUFhO29CQUNiLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7Ozs7b0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLGNBQWMsRUFBQyxDQUFDLFFBQVEsQ0FBQztpQkFDaEY7Z0JBQ0QsU0FBUztnQkFDVCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNyQyxVQUFVOzs7Z0JBQUMsR0FBRyxFQUFFO29CQUNaLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNqRCxDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7YUFDVjtRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7O0lBSUQsWUFBWSxDQUFFLElBQVM7O2NBQ2IsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqQyxPQUFPO1FBQ1AsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN4QzthQUFNOzs7a0JBRUcsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLFdBQVc7WUFDWCxJQUFJLFNBQVMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDeEM7U0FDSjtJQUNMLENBQUM7OztZQWpFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsNmVBQTBDOzthQUU3Qzs7OztZQU5RLGdCQUFnQjs7OzBCQVNwQixLQUFLOytCQUtMLE1BQU07Ozs7SUFMUCx5Q0FBNkI7O0lBQzdCLGtDQUFtQjs7SUFDbkIsd0NBQWlDOztJQUNqQyx1Q0FBa0I7Ozs7O0lBRWxCLDhDQUNvRTs7Ozs7SUFFcEUsMENBQWtCOzs7OztJQUVMLDhDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQml6T2JqZWN0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvYml6LW9iamVjdC5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHAtYml6LW9iamVjdCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vYml6LW9iamVjdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9iaXotb2JqZWN0LmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQml6T2JqZWN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBASW5wdXQoKSBiaXpPYmplY3RJZDogc3RyaW5nO1xyXG4gICAgcHVibGljIGRhdGE6IGFueVtdO1xyXG4gICAgcHVibGljIHNlbGVjdEtleXM6IHN0cmluZ1tdID0gW107XHJcbiAgICBjdXJyZW50aWQ6IHN0cmluZztcclxuICAgIC8qKiDkuJrliqHlr7nosaHlj5jljJblkI4gKi9cclxuICAgIEBPdXRwdXQoKVxyXG4gICAgYml6T2JqZWN0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuICAgIC8qKiDmoJHmjqfku7blsZXlvIDnmoToioLngrnlgLwgKi9cclxuICAgIGV4cGFuZGVkS2V5cyA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChwcml2YXRlIGJpek9iamVjdFNlcnZpY2U6IEJpek9iamVjdFNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCAoKSB7XHJcbiAgICAgICAgdGhpcy5iaXpPYmplY3RTZXJ2aWNlLmdldEJpek9iamVjdHMoKS5zdWJzY3JpYmUoKHJlc3VsdDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LnBhcmVudElEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRJRCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlsZXlvIDnrKzkuIDnuqdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5sYXllciA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZGVkS2V5cy5wdXNoKGVsZW1lbnQuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgLy8g6buY6K6k5Lia5Yqh5a+56LGh55qE5aSE55CGXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJpek9iamVjdElkICYmIHRoaXMuYml6T2JqZWN0SWQgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmoJHnhKbngrnooYxcclxuICAgICAgICAgICAgICAgIGxldCBjdXJCaXpPYmplY3RJZCA9IHRoaXMuYml6T2JqZWN0SWQ7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VyQml6T2JqZWN0SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZGVkS2V5cy5wdXNoKGN1ckJpek9iamVjdElkKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDmib7liLDlvZPliY3oioLngrnnmoTniLboioLngrlcclxuICAgICAgICAgICAgICAgICAgICBjdXJCaXpPYmplY3RJZCA9IHRoaXMuZGF0YS5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PT0gY3VyQml6T2JqZWN0SWQpLnBhcmVudElEO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g5Y+z5L6n5pON5L2c5Y+Y5YyWXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEtleXMgPSBbdGhpcy5iaXpPYmplY3RJZF07XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJpek9iamVjdENoYW5nZWQuZW1pdCh0aGlzLmJpek9iamVjdElkKTtcclxuICAgICAgICAgICAgICAgIH0sIDgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKiog6YCJ5Lit6KGM5pS55Y+Y5ZCO6Kem5Y+R5LqL5Lu2ICovXHJcbiAgICBzZWxlY3RDaGFuZ2UgKGFyZ3M6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGN1ckJ1c0lkID0gYXJncy5kYXRhSXRlbS5pZDtcclxuICAgICAgICAvLyDpppbmrKHop6blj5FcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RLZXlzID09IG51bGwgfHwgdGhpcy5zZWxlY3RLZXlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJpek9iamVjdENoYW5nZWQuZW1pdChjdXJCdXNJZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g6L+Z5Liq5LqL5Lu26YeM6L+Y5LiN5Lya5a+5c2VsZWN0ZWRrZXlz5pWw57uE6LWL5YC877yM5piv5LiK5LiA5Liq54q25oCB55qEXHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RCdXNJZCA9IHRoaXMuc2VsZWN0S2V5c1swXTtcclxuICAgICAgICAgICAgLy8g5Y+Y5YyW55qE5oOF5Ya15LiL6Kem5Y+RXHJcbiAgICAgICAgICAgIGlmIChsYXN0QnVzSWQgIT09IGN1ckJ1c0lkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpek9iamVjdENoYW5nZWQuZW1pdChjdXJCdXNJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==