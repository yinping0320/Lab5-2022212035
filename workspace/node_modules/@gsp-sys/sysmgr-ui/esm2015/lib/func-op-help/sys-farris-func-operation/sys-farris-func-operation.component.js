/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, ViewChild, TemplateRef, Input, ElementRef, HostListener } from '@angular/core';
import { SysFuncOperationService } from '../service/sys-func-operation.service';
import { DatagridComponent } from '@farris/ui-datagrid';
import { TreeTableComponent } from '@farris/ui-treetable';
import { BizObjectService } from '../service/biz-object.service';
import { SysLocaleService } from '../../locale/sys-locale.service';
import { HELP_LOCALE_ZHCHS } from '../../locale/locales/zh-cn/help';
/**
 * 系统管理：功能操作左树有、右列表展示
 */
export class SysFarrisFuncOperationComponent {
    /**
     * @param {?} funcOpService
     * @param {?} bizObjectService
     * @param {?} localService
     */
    constructor(funcOpService, bizObjectService, localService) {
        this.funcOpService = funcOpService;
        this.bizObjectService = bizObjectService;
        this.localService = localService;
        this.multiSelect = false;
        /**
         * 是否只显示分组
         */
        this.onlyShowGroup = false;
        /**
         * 确认事件
         */
        this.afterConfirm = new EventEmitter();
        /**
         * 关闭事件
         */
        this.afterCancle = new EventEmitter();
        /**
         * 当前选中数据
         */
        this.curSelected = [];
        this.curSelectedKeys = [];
        this.gridColumns = [];
        this.opSearchTxt = null;
        /**
         * 格式化
         */
        this.funcGroupFormatter = (/**
         * @param {?} val
         * @param {?} data
         * @return {?}
         */
        (val, data) => {
            return this.getFuncGroup(data);
        });
    }
    /**
     * 监控拖拽事件，重绘组织TreeTable
     * @return {?}
     */
    winResize() {
        this.reSizeTreeTable();
    }
    /**
     * 重绘Farris-TreeTable的大小
     * @param {?=} height
     * @param {?=} width
     * @return {?}
     */
    reSizeTreeTable(height = 0, width = 0) {
        if (height === 0) {
            height = this.farrisTreeParent.nativeElement.clientHeight;
        }
        if (width === 0) {
            width = this.farrisTreeParent.nativeElement.clientWidth;
        }
        this.farrisTt.resize({ height, width });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.operationGrid.restService = null;
        this.operationGrid.virtualized = true;
        this.operationGrid.fitColumns = true;
        this.operationGrid.fit = true;
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('help');
        }
        else {
            this.i18nRes = HELP_LOCALE_ZHCHS;
        }
        // 只显示分组，功能菜单使用
        if (this.onlyShowGroup) {
            this.gridColumns = [
                { field: 'code', title: this.i18nRes.codeField, width: 120 },
                { field: 'name', title: this.i18nRes.nameField, width: 150 }
            ];
            // 私有方法，更新列
            // this.operationGrid['columnsChanged']();
        }
        else {
            this.gridColumns = [
                { field: 'code', title: this.i18nRes.codeField, width: 120 },
                { field: 'name', title: this.i18nRes.nameField, width: 150 },
                { field: 'parentId', title: this.i18nRes.opGroupField, formatter: this.funcGroupFormatter }
            ];
        }
        this.treeColumns = [
            { field: 'name', title: this.i18nRes.busTitle, width: 100 }
        ];
        // 多选
        if (this.gridSelectMode === 'multiple') {
            this.multiSelect = true;
        }
        this.loadData();
    }
    /**
     * 页面渲染完成后
     * @return {?}
     */
    ngAfterContentInit() {
        this.reSizeTreeTable();
    }
    /**
     * 加载数据,TODO 加载数据
     * @return {?}
     */
    loadData() {
        // 加载业务对象数据
        this.bizObjectService.getBizObjects().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.treeDataSrc = result;
            this.treeData = this.makeTree(result);
        }));
        // 加载功能操作数据
        this.funcOpService.getFuncOperations().subscribe((/**
         * @param {?} lists
         * @return {?}
         */
        lists => {
            // 只显示分组
            if (this.onlyShowGroup) {
                this.gridDataSrc = lists.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.type == 0));
            }
            else {
                this.gridDataSrc = lists;
            }
            // 一定要延迟一段时间
            this.freshGridAndSelect(this.gridDataSrc.concat());
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.log('获取功能操作对象列表失败');
        }));
    }
    /**
     * 刷新列表显示
     * @private
     * @param {?} list
     * @return {?}
     */
    freshGridAndSelect(list) {
        this.operationGrid.clearAll();
        this.operationGrid.loadData(list);
        list.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (this.curSelectedKeys.indexOf(item.id) > -1) {
                this.operationGrid.checkRow(item.id, false);
                if (this.curSelected.indexOf(item) === -1) {
                    this.curSelected.push(item);
                }
            }
        }));
    }
    /**
     * 构造树
     * @private
     * @param {?} data
     * @return {?}
     */
    makeTree(data) {
        /** @type {?} */
        const root = data.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.layer === 1)).map((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            return {
                data: t,
                children: [],
                expanded: false,
                selectable: true
            };
        }));
        root.forEach((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            // 构造下级：children，父级的id信息
            e.children = this.makeChildrenByParentId(data, e.data.id);
        }));
        // 默认展开第一个节点
        root[0].expanded = true;
        return root;
    }
    /**
     * 父节点构造树
     * @private
     * @param {?} datas
     * @param {?} parentId
     * @return {?}
     */
    makeChildrenByParentId(datas, parentId) {
        /** @type {?} */
        const x = datas.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.parentID === parentId)).map((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            return {
                data: d,
                children: this.makeChildrenByParentId(datas, d.id),
                expanded: false,
                selectable: true
            };
        }));
        return x;
    }
    /**
     * 搜索时监测回车
     * @param {?} arg
     * @return {?}
     */
    onKeyUp(arg) {
        if (arg && arg.which === 13) {
            this.searchData();
        }
    }
    /**
     * 搜索
     * @return {?}
     */
    searchData() {
        // 测试
        if (!this.opSearchTxt) {
            // 全量的数据
            this.gridData = this.gridDataSrc;
            this.freshGridAndSelect(this.gridData);
            return;
        }
        /** @type {?} */
        const content = this.opSearchTxt.trim();
        if (!content) {
            // 全量的数据
            this.gridData = this.gridDataSrc;
            this.freshGridAndSelect(this.gridData);
            return;
        }
        /** @type {?} */
        const filter = content.toLowerCase();
        // 如果只显示分组
        if (this.onlyShowGroup) {
            this.gridData = this.gridDataSrc.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.code.toLowerCase().includes(filter) ||
                item.name.toLowerCase().includes(filter)));
        }
        else {
            // 需要显示操作的时候，搜索到上级时
            this.gridData = this.gridDataSrc.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.code.toLowerCase().includes(filter) ||
                item.name.toLowerCase().includes(filter) ||
                this.getFuncGroup(item).toLowerCase().includes(filter)));
        }
        this.freshGridAndSelect(this.gridData);
    }
    /**
     * 获取功能分组
     * @param {?} funcOpObj
     * @return {?}
     */
    getFuncGroup(funcOpObj) {
        // 获取父节点
        /** @type {?} */
        const parentId = funcOpObj.parentId;
        if (parentId) {
            /** @type {?} */
            const parentObj = this.gridDataSrc.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === parentId));
            if (parentObj !== null && parentObj.length > 0) {
                return parentObj[0].name;
            }
        }
        else {
            return '';
        }
    }
    /**
     * 业务对象变化后
     * @param {?} arg 业务对象参数
     * @return {?}
     */
    bizObjectChanged(arg) {
        if (!this.gridDataSrc || this.gridDataSrc.length === 0) {
            return;
        }
        /** @type {?} */
        const busId = arg.node.data.id;
        // 根据业务对象过滤
        /** @type {?} */
        const lists = this.gridDataSrc.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.businessId === busId));
        this.freshGridAndSelect(lists);
    }
    /**
     * 获取选中数据
     * @return {?}
     */
    getSelectedObject() {
        /** @type {?} */
        const rows = this.operationGrid.checkeds.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item.data));
        return rows;
    }
    /**
     * 选中后
     * @param {?} row
     * @return {?}
     */
    checked(row) {
        console.log(row);
        if (row && row.id) {
            // 是否多选
            if (this.multiSelect) {
                if (this.curSelectedKeys.indexOf(row.id) < 0) {
                    this.curSelected.push(row.data);
                    this.curSelectedKeys.push(row.id);
                }
            }
            else {
                this.curSelected = [row.data];
                this.curSelectedKeys = [row.id];
            }
        }
    }
    /**
     * 取消选中列表
     * @param {?} row
     * @return {?}
     */
    unchecked(row) {
        console.log(row);
        if (row && row.id) {
            if (this.multiSelect) {
                /** @type {?} */
                const x = this.curSelectedKeys.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item === row.id));
                if (x >= 0) {
                    this.curSelectedKeys.splice(x, 1);
                    this.curSelected.splice(x, 1);
                }
            }
            else {
                this.curSelectedKeys = [];
                this.curSelected = [];
            }
        }
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        // const result = this.getSelectedObject();
        /** @type {?} */
        const result = this.curSelected;
        console.log(result);
        this.afterConfirm.next(result);
        // 取消-目的是在这里让模态框消失
        this.cancle();
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.afterCancle.next();
    }
}
SysFarrisFuncOperationComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-sys-farris-func-operation',
                template: "<div class=\"f-utils-absolute-all farris-split-section m-0\">\r\n    <layout [direction]=\"'h'\" [fill]=\"true\" [showBorder]=\"false\">\r\n        <layout-panel class=\"col-5 d-flex flex-column\" region=\"west\" [showBorder]=\"false\" [minWidth]=\"300\">\r\n            <div class=\"f-utils-absolute-all f-utils-flex-column farris-lsection\" style=\"background-color: white\">\r\n                <div #farrisTreeParent class=\"f-utils-fill-flex-column\" style=\"background-color: white\">   \r\n                    <farris-treetable #tt [data]=\"treeData\" [virtualized]=\"true\" [fit]=\"true\" [findField]=\"'name'\"\r\n                        [enableFindText]=\"true\" [showBorder]=\"true\" [columns]=\"treeColumns\" [idField]=\"'id'\"\r\n                        [fixedHeader]=\"true\" [showHeader]=\"true\" [remoteSort]=\"false\"\r\n                        (nodeSelected)=\"bizObjectChanged($event)\">\r\n                    </farris-treetable>\r\n                </div>\r\n            </div>\r\n        </layout-panel>\r\n        <layout-panel class=\"d-flex flex-column\" region=\"center\" [showBorder]=\"false\" [minWidth]=\"300\">\r\n            <div class=\"f-utils-absolute-all f-utils-flex-column farris-rsection\">\r\n                <form class=\"farris\u00AD-form mb-2\" style=\"width:300px;\">\r\n                    <div class=\"f-cmp-inputgroup\">\r\n                        <div class=\"input-group\"><input [(ngModel)]=\"opSearchTxt\"\r\n                                [ngModelOptions]=\"{standalone: true}\" class=\"form-control\" (keyup)=\"onKeyUp($event)\"\r\n                                placeholder=\"'\u7F16\u53F7\u6216\u8005\u540D\u79F0'\">\r\n                            <div class=\"input-group-append\"><span class=\"input-group-text\"\r\n                                    (click)=\"searchData()\">\r\n                                    <i class=\"k-icon k-i-search\"></i></span></div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <!--\u5217\u8868\u4FE1\u606F-->\r\n                <div class=\"f-utils-fill-flex-column\">\r\n                    <farris-datagrid #operationGrid \r\n                    [columns]=\"gridColumns\" \r\n                    [showBorder]=\"true\"\r\n                    [virtualized]=\"true\"\r\n                    [fitColumns]=\"true\"\r\n                    [fit]=\"true\"\r\n                    [striped]=\"true\"\r\n                    [pagination]=\"false\"\r\n                    [showCheckbox]=\"true\"\r\n                    [selectOnCheck]=\"true\"\r\n                    [checkOnSelect]=\"true\"\r\n                    [multiSelect]=\"multiSelect\"\r\n                    (checked)=\"checked($event)\"\r\n                    (unChecked)=\"unchecked($event)\">\r\n                </farris-datagrid>\r\n                </div>\r\n            </div>\r\n        </layout-panel>\r\n    </layout>\r\n</div>\r\n<ng-template #btnOkAndCancle>\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">\u786E\u5B9A</button>\r\n    <button class=\"btn btn-sm btn-secondary\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
SysFarrisFuncOperationComponent.ctorParameters = () => [
    { type: SysFuncOperationService },
    { type: BizObjectService },
    { type: SysLocaleService }
];
SysFarrisFuncOperationComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    gridSelectMode: [{ type: Input }],
    sessionId: [{ type: Input }],
    onlyShowGroup: [{ type: Input }],
    isGroupCanSelected: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    afterCancle: [{ type: Output }],
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }],
    operationGrid: [{ type: ViewChild, args: ['operationGrid',] }],
    farrisTreeParent: [{ type: ViewChild, args: ['farrisTreeParent',] }],
    farrisTt: [{ type: ViewChild, args: ['tt',] }],
    winResize: [{ type: HostListener, args: ['window:resize', [],] }]
};
if (false) {
    /**
     * 业务对象,负责传递
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.bizObjectId;
    /**
     * 选择模式
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.gridSelectMode;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.multiSelect;
    /**
     * 已经废弃
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.sessionId;
    /**
     * 是否只显示分组
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.onlyShowGroup;
    /**
     * 分组能否被选择
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.isGroupCanSelected;
    /**
     * 确认事件
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.afterConfirm;
    /**
     * 关闭事件
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.afterCancle;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.btnOkAndCancleRef;
    /**
     * 功能操作全量数据
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.gridDataSrc;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.treeDataSrc;
    /**
     * 当前UI显示动能操作列表数据
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.gridData;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.treeData;
    /**
     * 当前选中数据
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.curSelected;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.curSelectedKeys;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.gridColumns;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.treeColumns;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.opSearchTxt;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.i18nRes;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.operationGrid;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.farrisTreeParent;
    /** @type {?} */
    SysFarrisFuncOperationComponent.prototype.farrisTt;
    /**
     * 格式化
     * @type {?}
     */
    SysFarrisFuncOperationComponent.prototype.funcGroupFormatter;
    /**
     * @type {?}
     * @private
     */
    SysFarrisFuncOperationComponent.prototype.funcOpService;
    /**
     * @type {?}
     * @private
     */
    SysFarrisFuncOperationComponent.prototype.bizObjectService;
    /**
     * @type {?}
     * @private
     */
    SysFarrisFuncOperationComponent.prototype.localService;
}
//# sourceMappingURL=data:application/json;base64,