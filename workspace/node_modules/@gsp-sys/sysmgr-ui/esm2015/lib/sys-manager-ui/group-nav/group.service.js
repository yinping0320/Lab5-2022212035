/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { SysCommonUtilService, SysDataUtil } from '@gsp-sys/sysmgr-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@gsp-sys/sysmgr-common";
export class GroupService {
    /**
     * @param {?} http
     * @param {?} sysUtil
     */
    constructor(http, sysUtil) {
        this.http = http;
        this.sysUtil = sysUtil;
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    getUrlByGroupType(type) {
        /** @type {?} */
        let url = '';
        switch (type) {
            case 'user':
                url = this.sysUtil.userGroupWebApi;
                break;
            case 'position':
                url = this.sysUtil.posGroupWebApi;
                break;
            case 'role':
                url = this.sysUtil.roleGroupWebApi;
                break;
            case 'org':
                url = this.sysUtil.sysOrgWebApi;
                break;
            // 默认用户分组
            default:
                url = this.sysUtil.userGroupWebApi;
                break;
        }
        return url;
    }
    /**
     * 根据级数获取组织
     * @param {?} layer 级数
     * @param {?} type
     * @param {?} filter
     * @return {?}
     */
    getByLayer(layer, type, filter) {
        /** @type {?} */
        const url = this.getUrlByGroupType(type);
        if (!filter) {
            filter = {};
        }
        filter.layer = layer;
        filter.parentId = null;
        SysDataUtil.deleteEmpty(filter);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader().headers,
            params: { param: JSON.stringify(filter) }
        };
        return this.http.get(url, opt);
    }
    /**
     * 根据级数获取组织
     * @param {?} parentId 父节点
     * @param {?} type
     * @param {?} filter
     * @return {?}
     */
    getByParentId(parentId, type, filter) {
        /** @type {?} */
        const url = this.getUrlByGroupType(type);
        if (!filter) {
            filter = {};
        }
        filter.layer = null;
        filter.parentId = parentId;
        SysDataUtil.deleteEmpty(filter);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader().headers,
            params: { param: JSON.stringify(filter) }
        };
        return this.http.get(url, opt);
    }
    /**
     * 根据级数获取组织
     * @param {?} type
     * @param {?} filter
     * @return {?}
     */
    searchData(type, filter) {
        /** @type {?} */
        const url = this.getUrlByGroupType(type);
        if (!filter) {
            filter = {};
        }
        filter.layer = null;
        filter.parentId = null;
        SysDataUtil.deleteEmpty(filter);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader().headers,
            params: { param: JSON.stringify(filter) }
        };
        return this.http.get(url, opt);
    }
}
GroupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GroupService.ctorParameters = () => [
    { type: HttpClient },
    { type: SysCommonUtilService }
];
/** @nocollapse */ GroupService.ngInjectableDef = i0.defineInjectable({ factory: function GroupService_Factory() { return new GroupService(i0.inject(i1.HttpClient), i0.inject(i2.SysCommonUtilService)); }, token: GroupService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    GroupService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GroupService.prototype.sysUtil;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3lzL3N5c21nci11aS8iLCJzb3VyY2VzIjpbImxpYi9zeXMtbWFuYWdlci11aS9ncm91cC1uYXYvZ3JvdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7O0FBTzNFLE1BQU0sT0FBTyxZQUFZOzs7OztJQUV6QixZQUNZLElBQWdCLEVBQ2hCLE9BQTZCO1FBRDdCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsWUFBTyxHQUFQLE9BQU8sQ0FBc0I7SUFFekMsQ0FBQzs7Ozs7O0lBQ1csaUJBQWlCLENBQUMsSUFBWTs7WUFDOUIsR0FBRyxHQUFHLEVBQUU7UUFDWixRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssTUFBTTtnQkFDUCxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7Z0JBQ25DLE1BQU07WUFDVixLQUFLLFVBQVU7Z0JBQ1gsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDO2dCQUNsQyxNQUFNO1lBQ1YsS0FBSyxNQUFNO2dCQUNQLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQztnQkFDbkMsTUFBTTtZQUNWLEtBQUssS0FBSztnQkFDTixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7Z0JBQ2hDLE1BQU07WUFDVixTQUFTO1lBQ1Q7Z0JBQ0ksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO2dCQUNuQyxNQUFNO1NBQ2I7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNkLENBQUM7Ozs7Ozs7O0lBS0YsVUFBVSxDQUFDLEtBQWEsRUFBRSxJQUFZLEVBQUUsTUFBa0I7O2NBQ2hELEdBQUcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2Y7UUFDRCxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNyQixNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUN2QixXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztjQUMxQixHQUFHLEdBQUc7WUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPO1lBQ3pDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7Ozs7SUFNRCxhQUFhLENBQUMsUUFBZ0IsRUFBRSxJQUFZLEVBQUUsTUFBa0I7O2NBQ3RELEdBQUcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2Y7UUFDRCxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMzQixXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztjQUMxQixHQUFHLEdBQUc7WUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPO1lBQ3pDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7OztJQU1ELFVBQVUsQ0FBRSxJQUFZLEVBQUUsTUFBa0I7O2NBQ2xDLEdBQUcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2Y7UUFDRCxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUN2QixXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztjQUMxQixHQUFHLEdBQUc7WUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPO1lBQ3pDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7O1lBdkZKLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVBRLFVBQVU7WUFDVixvQkFBb0I7Ozs7Ozs7O0lBVXpCLDRCQUF3Qjs7Ozs7SUFDeEIsK0JBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBTeXNDb21tb25VdGlsU2VydmljZSwgU3lzRGF0YVV0aWwgfSBmcm9tICdAZ3NwLXN5cy9zeXNtZ3ItY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBUcmVlRmlsdGVyIH0gZnJvbSAnLi4vZmlsdGVyL3RyZWUtZmlsdGVyJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEdyb3VwU2VydmljZSB7XHJcblxyXG5jb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgc3lzVXRpbDogU3lzQ29tbW9uVXRpbFNlcnZpY2VcclxuKSB7XHJcbn1cclxuICAgIHByaXZhdGUgZ2V0VXJsQnlHcm91cFR5cGUodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgdXJsID0gJyc7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3VzZXInOlxyXG4gICAgICAgICAgICAgICAgdXJsID0gdGhpcy5zeXNVdGlsLnVzZXJHcm91cFdlYkFwaTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdwb3NpdGlvbic6XHJcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLnN5c1V0aWwucG9zR3JvdXBXZWJBcGk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncm9sZSc6XHJcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLnN5c1V0aWwucm9sZUdyb3VwV2ViQXBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ29yZyc6XHJcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLnN5c1V0aWwuc3lzT3JnV2ViQXBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIC8vIOm7mOiupOeUqOaIt+WIhue7hFxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdXJsID0gdGhpcy5zeXNVdGlsLnVzZXJHcm91cFdlYkFwaTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u57qn5pWw6I635Y+W57uE57uHXHJcbiAgICAgKiBAcGFyYW0gbGF5ZXIg57qn5pWwXHJcbiAgICAgKi9cclxuICAgIGdldEJ5TGF5ZXIobGF5ZXI6IG51bWJlciwgdHlwZTogc3RyaW5nLCBmaWx0ZXI6IFRyZWVGaWx0ZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsQnlHcm91cFR5cGUodHlwZSk7XHJcbiAgICAgICAgaWYgKCFmaWx0ZXIpIHtcclxuICAgICAgICAgICAgZmlsdGVyID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbHRlci5sYXllciA9IGxheWVyO1xyXG4gICAgICAgIGZpbHRlci5wYXJlbnRJZCA9IG51bGw7XHJcbiAgICAgICAgU3lzRGF0YVV0aWwuZGVsZXRlRW1wdHkoZmlsdGVyKTtcclxuICAgICAgICBjb25zdCBvcHQgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuc3lzVXRpbC5nZXRIZWFkZXIoKS5oZWFkZXJzLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgcGFyYW06IEpTT04uc3RyaW5naWZ5KGZpbHRlcikgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCBvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u57qn5pWw6I635Y+W57uE57uHXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50SWQg54i26IqC54K5XHJcbiAgICAgKi9cclxuICAgIGdldEJ5UGFyZW50SWQocGFyZW50SWQ6IHN0cmluZywgdHlwZTogc3RyaW5nLCBmaWx0ZXI6IFRyZWVGaWx0ZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsQnlHcm91cFR5cGUodHlwZSk7XHJcbiAgICAgICAgaWYgKCFmaWx0ZXIpIHtcclxuICAgICAgICAgICAgZmlsdGVyID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbHRlci5sYXllciA9IG51bGw7XHJcbiAgICAgICAgZmlsdGVyLnBhcmVudElkID0gcGFyZW50SWQ7XHJcbiAgICAgICAgU3lzRGF0YVV0aWwuZGVsZXRlRW1wdHkoZmlsdGVyKTtcclxuICAgICAgICBjb25zdCBvcHQgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuc3lzVXRpbC5nZXRIZWFkZXIoKS5oZWFkZXJzLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgcGFyYW06IEpTT04uc3RyaW5naWZ5KGZpbHRlcikgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCBvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u57qn5pWw6I635Y+W57uE57uHXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50SWQg54i26IqC54K5XHJcbiAgICAgKi9cclxuICAgIHNlYXJjaERhdGEoIHR5cGU6IHN0cmluZywgZmlsdGVyOiBUcmVlRmlsdGVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmdldFVybEJ5R3JvdXBUeXBlKHR5cGUpO1xyXG4gICAgICAgIGlmICghZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGZpbHRlciA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaWx0ZXIubGF5ZXIgPSBudWxsO1xyXG4gICAgICAgIGZpbHRlci5wYXJlbnRJZCA9IG51bGw7XHJcbiAgICAgICAgU3lzRGF0YVV0aWwuZGVsZXRlRW1wdHkoZmlsdGVyKTtcclxuICAgICAgICBjb25zdCBvcHQgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuc3lzVXRpbC5nZXRIZWFkZXIoKS5oZWFkZXJzLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgcGFyYW06IEpTT04uc3RyaW5naWZ5KGZpbHRlcikgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCBvcHQpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=