/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { SysCommonUtilService, SysDataUtil } from '@gsp-sys/sysmgr-common';
import { map } from 'rxjs/operators';
import { userHelp, posHelp, roleHelp, userGroupHelp, posGroupHelp, roleGroupHelp, sysOrgHelp } from '../help-meta/sys-help-meta';
import { SysLocaleService } from '../../locale/sys-locale.service';
/**
 * 帮助服务
 */
export class SysFarrisLookupService {
    /**
     * @param {?} http
     * @param {?} sysUtil
     * @param {?} localService
     */
    constructor(http, sysUtil, localService) {
        this.http = http;
        this.sysUtil = sysUtil;
        this.localService = localService;
    }
    /**
     * 初始过滤条件
     * @private
     * @param {?} filter
     * @return {?}
     */
    setFilterData(filter) {
        // 有过滤条件
        if (filter) {
            /** @type {?} */
            const str = JSON.stringify(filter);
            if (str !== '{}') {
                // 一定要复制
                this.filterData = JSON.parse(str);
            }
            else {
                this.filterData = null;
            }
        }
        else {
            this.filterData = null;
        }
    }
    /**
     * 添加数据
     * @private
     * @param {?} src
     * @param {?} data
     * @return {?}
     */
    setListData(src, data) {
        if (src) {
            src.push.apply(src, data);
        }
    }
    /**
     * 获取过滤数据
     * @private
     * @return {?}
     */
    getFilterData() {
        return this.filterData;
    }
    /**
     * 异步获取版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getTreeDataAsync(url, params) {
        this.i18nRes = this.localService.getComponentOpt('help');
        // 解析查询json对象
        /** @type {?} */
        const treeParam = JSON.parse(params.searchValue);
        /** @type {?} */
        let farrisSelectedData = params['customData'].farrisSelectedData;
        /** @type {?} */
        let filter = {};
        // filter.withPermission = true;
        /** @type {?} */
        const category = treeParam.category;
        // 1.首次加载
        if (category === 'all') {
            filter.layer = 1;
        }
        // 2.异步展开下级
        if (category === 'children') {
            if (treeParam.hasOwnProperty('parentPath')) {
                filter.path = treeParam.parentPath;
            }
            if (treeParam.hasOwnProperty('parentLayer')) {
                // 后端搜索以下级节点为级数的节点
                filter.layer = treeParam.parentLayer + 1;
            }
            if (treeParam.hasOwnProperty('parentId')) {
                filter.parentId = treeParam.parentId;
            }
        }
        // 3.搜索
        if (category === 'search') {
            /** @type {?} */
            const searchField = treeParam.searchField;
            /** @type {?} */
            const searchValue = treeParam.searchValue.trim();
            if (searchValue) {
                filter.isSearchTree = true;
                switch (searchField) {
                    case 'code':
                        filter.code = searchValue;
                        break;
                    case 'name':
                        filter.name = searchValue;
                        break;
                    // 全部列搜索，之前是'*'
                    case '*':
                    default:
                        filter.codeOrName = searchValue;
                        break;
                }
            }
            else {
                // 搜索为空，重新加载，默认从1级开始
                filter.layer = 1;
            }
        }
        //如果是组织，请求选中数据时
        if (url === '/api/runtime/sys/v1.0/sysOrgs' && category === 'fav') {
            /** @type {?} */
            let newUrl = url + '/nullorg';
            /** @type {?} */
            const newOpt = {
                headers: this.sysUtil.getHeader()['headers'],
                params: { useView: 'true' }
            };
            return this.http.get(newUrl, newOpt).pipe(map((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                /** @type {?} */
                const gridResult = {};
                return gridResult;
            })));
        }
        // 说明有过滤条件
        if (this.getFilterData()) {
            filter = Object.assign(this.getFilterData(), filter);
            SysDataUtil.deleteEmpty(filter);
        }
        /** @type {?} */
        const paramStr = JSON.stringify(filter);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            /** @type {?} */
            const gridResult = {};
            gridResult.selectedData = farrisSelectedData;
            gridResult.items = [];
            gridResult.treeInfo = {
                loadDataType: 'async',
                layerType: 'parentId',
                dataField: 'treeInfo',
                pathField: 'path',
                layerField: 'layer',
                parentField: 'parentId',
                isDetailField: 'isDetail'
            };
            gridResult.treeInfo['treeDataIsInit'] = true;
            gridResult.columns = [
                { field: 'code', title: this.i18nRes.codeField },
                { field: 'name', title: this.i18nRes.nameField }
            ];
            gridResult.searchFields = [
                { label: this.i18nRes.codeField, value: 'code' },
                { label: this.i18nRes.nameField, value: 'name' }
            ];
            // 必须要赋值
            from(val).subscribe((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.layer === 1 || !item.parentId) {
                    item.parentId = null;
                }
                item.treeInfo = {
                    parentId: item.parentId,
                    path: item.path,
                    layer: item.layer,
                    isDetail: item.isDetail
                };
            }));
            // 如果是搜索的话，需要自己构造树
            if (filter.isSearchTree) {
                gridResult.items = this.makeTreeByParent(val, 'parentId', 'id');
                console.log(gridResult.items);
            }
            else {
                // 有结果，普通分层加载
                if (val && val.length > 0) {
                    from(val).subscribe((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        gridResult.items.push(this.convertToTreeNode(item));
                    }));
                }
            }
            return gridResult;
        })));
    }
    /**
     * 将树节点转换为Farris TreeNode
     * @private
     * @param {?} src
     * @return {?}
     */
    convertToTreeNode(src) {
        /** @type {?} */
        const node = {};
        node.data = src;
        node.children = [];
        node.selectable = src.farris_selectable;
        node.leaf = src.isDetail;
        node.parent = src.parentId;
        // 这一条必须得加，否则不行
        node.id = node.data.id;
        // 搜索的时候最末级添加了这个属性，不需要展开
        if (src.hasOwnProperty('expanded')) {
            node.expanded = src.expanded;
        }
        return node;
    }
    /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    makeTreeByParent(datas, parentField, keyField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (!x[parentField]) {
                return true;
            }
            // 断层的这种，应该也属于一级
            /** @type {?} */
            const p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[keyField] === x[parentField]));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const node = this.convertToTreeNode(x);
            treedata.push(node);
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    findChildrenByParent(parent, datas, parentField, keyField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[parentField] === parent.data[keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const node = this.convertToTreeNode(child);
                parent.children.push(node);
                this.findChildrenByParent(node, datas, parentField, keyField);
            }));
        }
    }
    /**
     * 全部获取版本版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getTreeData(url, params) {
        /** @type {?} */
        let filter = {};
        // 说明有过滤条件
        if (this.getFilterData()) {
            filter = Object.assign(this.getFilterData(), filter);
            SysDataUtil.deleteEmpty(filter);
        }
        /** @type {?} */
        const paramStr = JSON.stringify(filter);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            if (val && val.length > 0) {
                val.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (item.layer == 1 || item.parentId == null) {
                        item.parentId = '';
                    }
                    // 满足前端结构
                    item.treeInfo = {
                        parentId: item.parentId,
                        path: item.path,
                        layer: item.layer,
                        isDetail: item.isDetail
                    };
                    item.selectable = false;
                }));
            }
            else {
                val = [];
            }
            return { items: val };
        })));
    }
    /**
     * 获取列表数据
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getGridData(url, params) {
        /** @type {?} */
        let index = params.pageIndex;
        /** @type {?} */
        let size = params.pageSize;
        /** @type {?} */
        let farrisSelectedData = params['customData'].farrisSelectedData;
        // 目前这个地方有问题，第一次的时候传递不过来
        if (!index) {
            /** @type {?} */
            const customData = params['customData'];
            index = customData.filter.pageIndex;
            size = customData.filter.pageSize;
        }
        /** @type {?} */
        let param = {
            pageIndex: index,
            pageSize: size,
        };
        // 是否有搜索
        /** @type {?} */
        const filterStr = params.searchValue;
        /** @type {?} */
        const filterObj = JSON.parse(filterStr);
        /** @type {?} */
        const searchField = filterObj.searchField;
        /** @type {?} */
        const searchValue = filterObj.searchValue;
        // 有过滤查询,有可能搜索值为空，这时候是不需要搜索的
        if (searchField && searchValue) {
            switch (searchField) {
                case 'code':
                    param.code = searchValue;
                    break;
                case 'name':
                    param.name = searchValue;
                    break;
                // 全部列搜索，之前是'*'
                case '*':
                default:
                    param.codeOrName = searchValue;
                    break;
            }
        }
        // 说明有过滤条件
        if (this.getFilterData()) {
            param = Object.assign(this.getFilterData(), param);
            SysDataUtil.deleteEmpty(param);
        }
        console.log(param);
        /** @type {?} */
        const paramStr = JSON.stringify(param);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            if (val && val.data) {
                // 将本次分页的数据附加到当前帮助的列表中
                this.setListData(params['customData'].allData, val.data);
            }
            return {
                items: val.data,
                total: val.totalCount,
                pageInfo: {
                    pageIndex: index,
                    pageSize: size,
                    pageList: [20, 40, 60, 80, 100],
                    enablePager: true
                },
                selectedData: farrisSelectedData
            };
        })));
    }
    /**
     * 取数
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        console.log(params);
        console.log(url);
        /** @type {?} */
        const filter = params['customData'].filter;
        this.setFilterData(filter);
        /** @type {?} */
        const typeIndex = url.indexOf('\/');
        /** @type {?} */
        const httpUrl = url.substring(typeIndex, url.length);
        /** @type {?} */
        const helpType = url.substring(0, typeIndex);
        switch (helpType) {
            case userHelp:
            case posHelp:
            case roleHelp:
                return this.getGridData(httpUrl, params);
            case userGroupHelp:
            case posGroupHelp:
            case roleGroupHelp:
            case sysOrgHelp:
                return this.getTreeDataAsync(httpUrl, params);
            default:
                break;
        }
    }
}
SysFarrisLookupService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SysFarrisLookupService.ctorParameters = () => [
    { type: HttpClient },
    { type: SysCommonUtilService },
    { type: SysLocaleService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.filterData;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.i18nRes;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.sysUtil;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.localService;
}
//# sourceMappingURL=data:application/json;base64,