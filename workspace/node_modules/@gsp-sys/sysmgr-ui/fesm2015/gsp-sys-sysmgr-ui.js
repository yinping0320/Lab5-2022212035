import { LayoutModule } from '@farris/ui-layout';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { GridModule } from '@progress/kendo-angular-grid';
import { LayoutModule as LayoutModule$1 } from '@progress/kendo-angular-layout';
import { CommonModule } from '@angular/common';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { MessagerModule, MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { TreeTableModule } from '@farris/ui-treetable';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Injectable, Component, Output, EventEmitter, ViewChild, Input, HostListener, Injector, ComponentFactoryResolver, NgModule, defineInjectable, inject } from '@angular/core';
import { ServerSideToken, LookupModule } from '@farris/ui-lookup';
import { SysCommonUtilService, SysDataUtil, SysCommonModule } from '@gsp-sys/sysmgr-common';
import { from, of } from 'rxjs';
import { map, filter } from 'rxjs/operators';
import { DatagridModule } from '@farris/ui-datagrid';
import { LanguageService } from '@ecp-caf/caf-common';
import { CookieService } from 'ngx-cookie-service';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysFrontUtil {
    /**
     * 功能操作
     * @return {?}
     */
    get operationApi() {
        return '/api/runtime/sys/v1.0/funcOperations';
    }
    /**
     * 业务对象
     * @return {?}
     */
    get bizObjectApi() {
        return '/api/runtime/sys/v1.0/business-objects';
    }
    /**
     * Http头信息
     * @return {?}
     */
    get httpHeader() {
        /** @type {?} */
        const options = {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
                //                SessionId: this.sessionId
            },
            responseType: 'json'
        };
        return options;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysFuncOperationService {
    /**
     * @param {?} sysUtil
     * @param {?} rest
     */
    constructor(sysUtil, rest) {
        this.sysUtil = sysUtil;
        this.rest = rest;
    }
    /**
     * 获取功能操作列表
     * @return {?}
     */
    getFuncOperations() {
        /** @type {?} */
        const url = this.sysUtil.operationApi + '/all';
        return this.rest.get(url, this.sysUtil.httpHeader);
    }
}
SysFuncOperationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SysFuncOperationService.ctorParameters = () => [
    { type: SysFrontUtil },
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 系统管理：功能操作左树有、右列表展示
 */
class SysFuncOperationComponent {
    /**
     * @param {?} funcOpService
     */
    constructor(funcOpService) {
        this.funcOpService = funcOpService;
        /**
         * 是否只显示分组
         */
        this.onlyShowGroup = false;
        /**
         * 确认事件
         */
        this.afterConfirm = new EventEmitter();
        /**
         * 关闭事件
         */
        this.afterCancle = new EventEmitter();
        /**
         * 当前选中数据
         */
        this.curSelectedKeys = [];
        this.title = '功能操作帮助';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    loadData() {
        this.selectableSettings = {
            checkboxOnly: true,
            // 默认单选
            mode: !this.gridSelectMode ? 'single' : this.gridSelectMode,
            enabled: true
        };
        this.funcOpService.getFuncOperations().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.data = [];
            /** @type {?} */
            const funcList = res;
            if (this.onlyShowGroup) {
                this.data = funcList.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.type == 0));
            }
            else {
                this.data = funcList;
            }
            // funcList.forEach(item => {
            //     this.data.push(item);
            //     // 如果有明细节点
            //     if (this.onlyShowGroup === false && item['children'] !== null && item['children'].length > 0) {
            //         item['children'].forEach(child => this.data.push(child));
            //     }
            // });
            this.gridData = [];
            // 复制一份
            this.gridData = this.data.concat();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.log('获取功能操作对象列表失败');
        }));
    }
    /**
     * 搜索
     * @param {?} filterValue 查询条件
     * @return {?}
     */
    searchData(filterValue) {
        // 测试
        if (filterValue === null || filterValue === '') {
            // 全量的数据
            this.gridData = this.data.concat();
            return;
        }
        /** @type {?} */
        const filter$$1 = filterValue.toLowerCase();
        // 搜索到上级时
        this.gridData = this.data.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item['code'].toLowerCase().includes(filter$$1) ||
            item['name'].toLowerCase().includes(filter$$1) ||
            this.getFuncGroup(item).toLowerCase().includes(filter$$1)));
    }
    /**
     * 业务对象变化后
     * @param {?} arg 业务对象参数
     * @return {?}
     */
    bizObjectChanged(arg) {
        if (!this.data || this.data.length === 0) {
            return;
        }
        /** @type {?} */
        const busId = arg;
        // 根据业务对象过滤
        this.gridData = this.data.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item['businessId'] === busId));
    }
    /**
     * 获取功能分组
     * @param {?} funcOpObj
     * @return {?}
     */
    getFuncGroup(funcOpObj) {
        // 获取父节点
        /** @type {?} */
        const parentId = funcOpObj['parentId'];
        if (parentId !== null && parentId !== undefined && parentId !== '') {
            /** @type {?} */
            const parentObj = this.data.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item['id'] === parentId));
            if (parentObj !== null && parentObj.length > 0) {
                return parentObj[0]['name'];
            }
        }
        else {
            return '无';
        }
    }
    /**
     * 获取选中数据
     * @return {?}
     */
    getSelectedObject() {
        /** @type {?} */
        const result = this.data.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => this.curSelectedKeys.findIndex((/**
         * @param {?} select
         * @return {?}
         */
        select => select === item['id'])) >= 0));
        return result;
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        const result = this.getSelectedObject();
        this.afterConfirm.next(result);
        // 取消-目的是在这里让模态框消失
        this.cancle();
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.afterCancle.next();
    }
}
SysFuncOperationComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-sys-func-operation',
                template: "<div class=\"d-flex flex-row\" style=\"\r\nwidth: 800px; \r\nborder:2px;\r\nposition:absolute;\r\ntop:0px;\r\nbottom: 0px;\r\nright:0px;\r\nleft:0px;\r\noverflow: hidden;\r\nheight: 100%;\">\r\n  <div class=\"flex-fill\">\r\n    <kendo-splitter style=\"height:100%\" orientation=\"horizontal\">\r\n      <kendo-splitter-pane size=\"40%\" min=\"20%\" max=\"50%\">\r\n        <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n          <div class=\"p-2\" style=\"height: 35px;\">\r\n            <h5>\u4E1A\u52A1\u5BF9\u8C61</h5>\r\n            <hr class=\"m-0 p-0\" />\r\n          </div>\r\n          <div class=\"flex-fill\" style=\"overflow: auto;\">\r\n            <app-biz-object [bizObjectId]=\"bizObjectId\" (bizObjectChanged)=\"bizObjectChanged($event)\"></app-biz-object>\r\n          </div>\r\n        </div>\r\n      </kendo-splitter-pane>\r\n      <kendo-splitter-pane>\r\n        <div class=\"d-flex flex-column flex-fill\" style=\"height:100%\">\r\n          <div class=\"p-2\" style=\"height: 35px;\">\r\n            <h5>\u529F\u80FD\u64CD\u4F5C</h5>\r\n            <hr class=\"m-0 p-0\" />\r\n          </div>\r\n          <div class=\"clearfix mt-1 mb-1 ml-1\">\r\n            <input #filter placeholder=\"\u8F93\u5165\u7F16\u53F7\u6216\u540D\u79F0\u67E5\u627E\" type=\"text\" />\r\n            <button class=\"btn btn-sm btn-default\" (click)=\"searchData(filter.value)\">\u67E5\u627E</button>\r\n          </div>\r\n          <div class=\"d-flex flex-fill\" style=\"position:relative;\">\r\n            <kendo-grid [class]=\"'flex-fill'\" [selectable]=\"selectableSettings\" [kendoGridBinding]=\"gridData\"\r\n              [kendoGridSelectBy]=\"'id'\" [selectedKeys]=\"curSelectedKeys\">\r\n              <kendo-grid-checkbox-column width=\"40\"></kendo-grid-checkbox-column>\r\n              <kendo-grid-column field=\"code\" title=\"\u7F16\u53F7\"></kendo-grid-column>\r\n              <kendo-grid-column field=\"name\" title=\"\u540D\u79F0\"></kendo-grid-column>\r\n              <kendo-grid-column *ngIf=\"!onlyShowGroup\" title=\"\u529F\u80FD\u5206\u7EC4\">\r\n                <ng-template kendoGridCellTemplate let-dataItem>\r\n                  {{getFuncGroup(dataItem)}}\r\n                </ng-template>\r\n              </kendo-grid-column>\r\n            </kendo-grid>\r\n          </div>\r\n        </div>\r\n      </kendo-splitter-pane>\r\n    </kendo-splitter>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #btnOkAndCancle>\r\n  <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">\u786E\u8BA4</button>\r\n  <button class=\"btn btn-sm btn-default\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
SysFuncOperationComponent.ctorParameters = () => [
    { type: SysFuncOperationService }
];
SysFuncOperationComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    gridSelectMode: [{ type: Input }],
    sessionId: [{ type: Input }],
    onlyShowGroup: [{ type: Input }],
    isGroupCanSelected: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    afterCancle: [{ type: Output }],
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizObjectService {
    /**
     * @param {?} rest
     * @param {?} sysUtil
     */
    constructor(rest, sysUtil) {
        this.rest = rest;
        this.sysUtil = sysUtil;
    }
    /**
     * 获取业务对象列表
     * @return {?}
     */
    getBizObjects() {
        /** @type {?} */
        const url = this.sysUtil.bizObjectApi;
        return this.rest.get(url, this.sysUtil.httpHeader);
    }
}
BizObjectService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BizObjectService.ctorParameters = () => [
    { type: HttpClient },
    { type: SysFrontUtil }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NAVI_LOCALE_EN_US = {
    rootNodeCode: 'ALL',
    rootNodeTitle: 'all data',
    codeField: 'Code',
    nameField: 'Name',
    allColumnsTitle: 'All columns',
    searchNullData: 'No data to find!'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HELP_LOCALE_EN_US = {
    userTitle: 'Users',
    positionTitle: 'Positions',
    roleTitle: 'Roles',
    userOrgTitle: 'Organizations',
    userGroupTitle: 'User Groups',
    positionGroupTitle: 'Position Groups',
    roleGroupTitle: 'Role Groups',
    codeField: 'Code',
    nameField: 'Name',
    orderField: 'Order',
    orgName: 'Org Info',
    orgNamePathField: 'Company Info',
    operationTitle: 'Function Operation',
    busTitle: 'Business Object',
    opGroupField: 'Operation Group'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EN_US = {
    navi: NAVI_LOCALE_EN_US,
    help: HELP_LOCALE_EN_US
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NAVI_LOCALE_ZHCHS = {
    rootNodeCode: 'ALL',
    rootNodeTitle: '所有',
    codeField: '编号',
    nameField: '名称',
    allColumnsTitle: '所有列',
    searchNullData: '没有要查找的数据！'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HELP_LOCALE_ZHCHS = {
    userTitle: '用户',
    positionTitle: '岗位',
    roleTitle: '功能组',
    userOrgTitle: '组织',
    userGroupTitle: '用户分组',
    positionGroupTitle: '岗位分组',
    roleGroupTitle: '功能组分组',
    codeField: '编号',
    nameField: '名称',
    orderField: '排序号',
    orgName: '隶属组织',
    orgNamePathField: '隶属单位',
    operationTitle: '功能操作',
    busTitle: '业务对象',
    opGroupField: '功能分组'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ZH_CHS = {
    navi: NAVI_LOCALE_ZHCHS,
    help: HELP_LOCALE_ZHCHS
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NAVI_LOCALE_ZHCHT = {
    rootNodeCode: 'ALL',
    rootNodeTitle: '所有',
    codeField: '編號',
    nameField: '名稱',
    allColumnsTitle: '所有列',
    searchNullData: '沒有要查找的數據！'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HELP_LOCALE_ZHCHT = {
    userTitle: '用戶',
    positionTitle: '崗位',
    roleTitle: '功能組',
    userOrgTitle: '組織',
    userGroupTitle: '用戶分組',
    positionGroupTitle: '崗位分組',
    roleGroupTitle: '功能組分組',
    codeField: '編號',
    nameField: '名稱',
    orderField: '排序號',
    orgName: '隸屬組織',
    orgNamePathField: '隸屬單位',
    operationTitle: '功能操作',
    busTitle: '業務對象',
    opGroupField: '功能分組'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ZH_CHT = {
    navi: NAVI_LOCALE_ZHCHT,
    help: HELP_LOCALE_ZHCHT
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SYS_LOCALES = {
    'zh-CHS': ZH_CHS,
    'zh-cn': ZH_CHS,
    en: EN_US,
    'zh-CHT': ZH_CHT
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysLocaleService {
    /**
     * @param {?} lang
     */
    constructor(lang) {
        this.lang = lang;
        /** @type {?} */
        let localeId = 'zh-CHS';
        if (lang) {
            localeId = lang.getLanguageCode();
        }
        this.langData = SYS_LOCALES[localeId];
        if (!this.langData) {
            this.langData = SYS_LOCALES['zh-CHS'];
        }
        console.log(localeId);
        console.log(this.langData);
    }
    /**
     * @param {?} comp
     * @return {?}
     */
    getComponentOpt(comp) {
        return this.langData[comp];
    }
}
SysLocaleService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SysLocaleService.ctorParameters = () => [
    { type: LanguageService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 系统管理：功能操作左树有、右列表展示
 */
class SysFarrisFuncOperationComponent {
    /**
     * @param {?} funcOpService
     * @param {?} bizObjectService
     * @param {?} localService
     */
    constructor(funcOpService, bizObjectService, localService) {
        this.funcOpService = funcOpService;
        this.bizObjectService = bizObjectService;
        this.localService = localService;
        this.multiSelect = false;
        /**
         * 是否只显示分组
         */
        this.onlyShowGroup = false;
        /**
         * 确认事件
         */
        this.afterConfirm = new EventEmitter();
        /**
         * 关闭事件
         */
        this.afterCancle = new EventEmitter();
        /**
         * 当前选中数据
         */
        this.curSelected = [];
        this.curSelectedKeys = [];
        this.gridColumns = [];
        this.opSearchTxt = null;
        /**
         * 格式化
         */
        this.funcGroupFormatter = (/**
         * @param {?} val
         * @param {?} data
         * @return {?}
         */
        (val, data) => {
            return this.getFuncGroup(data);
        });
    }
    /**
     * 监控拖拽事件，重绘组织TreeTable
     * @return {?}
     */
    winResize() {
        this.reSizeTreeTable();
    }
    /**
     * 重绘Farris-TreeTable的大小
     * @param {?=} height
     * @param {?=} width
     * @return {?}
     */
    reSizeTreeTable(height = 0, width = 0) {
        if (height === 0) {
            height = this.farrisTreeParent.nativeElement.clientHeight;
        }
        if (width === 0) {
            width = this.farrisTreeParent.nativeElement.clientWidth;
        }
        this.farrisTt.resize({ height, width });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.operationGrid.restService = null;
        this.operationGrid.virtualized = true;
        this.operationGrid.fitColumns = true;
        this.operationGrid.fit = true;
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('help');
        }
        else {
            this.i18nRes = HELP_LOCALE_ZHCHS;
        }
        // 只显示分组，功能菜单使用
        if (this.onlyShowGroup) {
            this.gridColumns = [
                { field: 'code', title: this.i18nRes.codeField, width: 120 },
                { field: 'name', title: this.i18nRes.nameField, width: 150 }
            ];
            // 私有方法，更新列
            // this.operationGrid['columnsChanged']();
        }
        else {
            this.gridColumns = [
                { field: 'code', title: this.i18nRes.codeField, width: 120 },
                { field: 'name', title: this.i18nRes.nameField, width: 150 },
                { field: 'parentId', title: this.i18nRes.opGroupField, formatter: this.funcGroupFormatter }
            ];
        }
        this.treeColumns = [
            { field: 'name', title: this.i18nRes.busTitle, width: 100 }
        ];
        // 多选
        if (this.gridSelectMode === 'multiple') {
            this.multiSelect = true;
        }
        this.loadData();
    }
    /**
     * 页面渲染完成后
     * @return {?}
     */
    ngAfterContentInit() {
        this.reSizeTreeTable();
    }
    /**
     * 加载数据,TODO 加载数据
     * @return {?}
     */
    loadData() {
        // 加载业务对象数据
        this.bizObjectService.getBizObjects().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.treeDataSrc = result;
            this.treeData = this.makeTree(result);
        }));
        // 加载功能操作数据
        this.funcOpService.getFuncOperations().subscribe((/**
         * @param {?} lists
         * @return {?}
         */
        lists => {
            // 只显示分组
            if (this.onlyShowGroup) {
                this.gridDataSrc = lists.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.type == 0));
            }
            else {
                this.gridDataSrc = lists;
            }
            // 一定要延迟一段时间
            this.freshGridAndSelect(this.gridDataSrc.concat());
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.log('获取功能操作对象列表失败');
        }));
    }
    /**
     * 刷新列表显示
     * @private
     * @param {?} list
     * @return {?}
     */
    freshGridAndSelect(list) {
        this.operationGrid.clearAll();
        this.operationGrid.loadData(list);
        list.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (this.curSelectedKeys.indexOf(item.id) > -1) {
                this.operationGrid.checkRow(item.id, false);
                if (this.curSelected.indexOf(item) === -1) {
                    this.curSelected.push(item);
                }
            }
        }));
    }
    /**
     * 构造树
     * @private
     * @param {?} data
     * @return {?}
     */
    makeTree(data) {
        /** @type {?} */
        const root = data.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.layer === 1)).map((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            return {
                data: t,
                children: [],
                expanded: false,
                selectable: true
            };
        }));
        root.forEach((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            // 构造下级：children，父级的id信息
            e.children = this.makeChildrenByParentId(data, e.data.id);
        }));
        // 默认展开第一个节点
        root[0].expanded = true;
        return root;
    }
    /**
     * 父节点构造树
     * @private
     * @param {?} datas
     * @param {?} parentId
     * @return {?}
     */
    makeChildrenByParentId(datas, parentId) {
        /** @type {?} */
        const x = datas.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.parentID === parentId)).map((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            return {
                data: d,
                children: this.makeChildrenByParentId(datas, d.id),
                expanded: false,
                selectable: true
            };
        }));
        return x;
    }
    /**
     * 搜索时监测回车
     * @param {?} arg
     * @return {?}
     */
    onKeyUp(arg) {
        if (arg && arg.which === 13) {
            this.searchData();
        }
    }
    /**
     * 搜索
     * @return {?}
     */
    searchData() {
        // 测试
        if (!this.opSearchTxt) {
            // 全量的数据
            this.gridData = this.gridDataSrc;
            this.freshGridAndSelect(this.gridData);
            return;
        }
        /** @type {?} */
        const content = this.opSearchTxt.trim();
        if (!content) {
            // 全量的数据
            this.gridData = this.gridDataSrc;
            this.freshGridAndSelect(this.gridData);
            return;
        }
        /** @type {?} */
        const filter$$1 = content.toLowerCase();
        // 如果只显示分组
        if (this.onlyShowGroup) {
            this.gridData = this.gridDataSrc.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.code.toLowerCase().includes(filter$$1) ||
                item.name.toLowerCase().includes(filter$$1)));
        }
        else {
            // 需要显示操作的时候，搜索到上级时
            this.gridData = this.gridDataSrc.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.code.toLowerCase().includes(filter$$1) ||
                item.name.toLowerCase().includes(filter$$1) ||
                this.getFuncGroup(item).toLowerCase().includes(filter$$1)));
        }
        this.freshGridAndSelect(this.gridData);
    }
    /**
     * 获取功能分组
     * @param {?} funcOpObj
     * @return {?}
     */
    getFuncGroup(funcOpObj) {
        // 获取父节点
        /** @type {?} */
        const parentId = funcOpObj.parentId;
        if (parentId) {
            /** @type {?} */
            const parentObj = this.gridDataSrc.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.id === parentId));
            if (parentObj !== null && parentObj.length > 0) {
                return parentObj[0].name;
            }
        }
        else {
            return '';
        }
    }
    /**
     * 业务对象变化后
     * @param {?} arg 业务对象参数
     * @return {?}
     */
    bizObjectChanged(arg) {
        if (!this.gridDataSrc || this.gridDataSrc.length === 0) {
            return;
        }
        /** @type {?} */
        const busId = arg.node.data.id;
        // 根据业务对象过滤
        /** @type {?} */
        const lists = this.gridDataSrc.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.businessId === busId));
        this.freshGridAndSelect(lists);
    }
    /**
     * 获取选中数据
     * @return {?}
     */
    getSelectedObject() {
        /** @type {?} */
        const rows = this.operationGrid.checkeds.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item.data));
        return rows;
    }
    /**
     * 选中后
     * @param {?} row
     * @return {?}
     */
    checked(row) {
        console.log(row);
        if (row && row.id) {
            // 是否多选
            if (this.multiSelect) {
                if (this.curSelectedKeys.indexOf(row.id) < 0) {
                    this.curSelected.push(row.data);
                    this.curSelectedKeys.push(row.id);
                }
            }
            else {
                this.curSelected = [row.data];
                this.curSelectedKeys = [row.id];
            }
        }
    }
    /**
     * 取消选中列表
     * @param {?} row
     * @return {?}
     */
    unchecked(row) {
        console.log(row);
        if (row && row.id) {
            if (this.multiSelect) {
                /** @type {?} */
                const x = this.curSelectedKeys.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item === row.id));
                if (x >= 0) {
                    this.curSelectedKeys.splice(x, 1);
                    this.curSelected.splice(x, 1);
                }
            }
            else {
                this.curSelectedKeys = [];
                this.curSelected = [];
            }
        }
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        // const result = this.getSelectedObject();
        /** @type {?} */
        const result = this.curSelected;
        console.log(result);
        this.afterConfirm.next(result);
        // 取消-目的是在这里让模态框消失
        this.cancle();
    }
    /**
     * 取消
     * @return {?}
     */
    cancle() {
        this.afterCancle.next();
    }
}
SysFarrisFuncOperationComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-sys-farris-func-operation',
                template: "<div class=\"f-utils-absolute-all farris-split-section m-0\">\r\n    <layout [direction]=\"'h'\" [fill]=\"true\" [showBorder]=\"false\">\r\n        <layout-panel class=\"col-5 d-flex flex-column\" region=\"west\" [showBorder]=\"false\" [minWidth]=\"300\">\r\n            <div class=\"f-utils-absolute-all f-utils-flex-column farris-lsection\" style=\"background-color: white\">\r\n                <div #farrisTreeParent class=\"f-utils-fill-flex-column\" style=\"background-color: white\">   \r\n                    <farris-treetable #tt [data]=\"treeData\" [virtualized]=\"true\" [fit]=\"true\" [findField]=\"'name'\"\r\n                        [enableFindText]=\"true\" [showBorder]=\"true\" [columns]=\"treeColumns\" [idField]=\"'id'\"\r\n                        [fixedHeader]=\"true\" [showHeader]=\"true\" [remoteSort]=\"false\"\r\n                        (nodeSelected)=\"bizObjectChanged($event)\">\r\n                    </farris-treetable>\r\n                </div>\r\n            </div>\r\n        </layout-panel>\r\n        <layout-panel class=\"d-flex flex-column\" region=\"center\" [showBorder]=\"false\" [minWidth]=\"300\">\r\n            <div class=\"f-utils-absolute-all f-utils-flex-column farris-rsection\">\r\n                <form class=\"farris\u00AD-form mb-2\" style=\"width:300px;\">\r\n                    <div class=\"f-cmp-inputgroup\">\r\n                        <div class=\"input-group\"><input [(ngModel)]=\"opSearchTxt\"\r\n                                [ngModelOptions]=\"{standalone: true}\" class=\"form-control\" (keyup)=\"onKeyUp($event)\"\r\n                                placeholder=\"'\u7F16\u53F7\u6216\u8005\u540D\u79F0'\">\r\n                            <div class=\"input-group-append\"><span class=\"input-group-text\"\r\n                                    (click)=\"searchData()\">\r\n                                    <i class=\"k-icon k-i-search\"></i></span></div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <!--\u5217\u8868\u4FE1\u606F-->\r\n                <div class=\"f-utils-fill-flex-column\">\r\n                    <farris-datagrid #operationGrid \r\n                    [columns]=\"gridColumns\" \r\n                    [showBorder]=\"true\"\r\n                    [virtualized]=\"true\"\r\n                    [fitColumns]=\"true\"\r\n                    [fit]=\"true\"\r\n                    [striped]=\"true\"\r\n                    [pagination]=\"false\"\r\n                    [showCheckbox]=\"true\"\r\n                    [selectOnCheck]=\"true\"\r\n                    [checkOnSelect]=\"true\"\r\n                    [multiSelect]=\"multiSelect\"\r\n                    (checked)=\"checked($event)\"\r\n                    (unChecked)=\"unchecked($event)\">\r\n                </farris-datagrid>\r\n                </div>\r\n            </div>\r\n        </layout-panel>\r\n    </layout>\r\n</div>\r\n<ng-template #btnOkAndCancle>\r\n    <button class=\"btn btn-sm btn-primary\" (click)=\"confirm()\">\u786E\u5B9A</button>\r\n    <button class=\"btn btn-sm btn-secondary\" (click)=\"cancle()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
SysFarrisFuncOperationComponent.ctorParameters = () => [
    { type: SysFuncOperationService },
    { type: BizObjectService },
    { type: SysLocaleService }
];
SysFarrisFuncOperationComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    gridSelectMode: [{ type: Input }],
    sessionId: [{ type: Input }],
    onlyShowGroup: [{ type: Input }],
    isGroupCanSelected: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    afterCancle: [{ type: Output }],
    btnOkAndCancleRef: [{ type: ViewChild, args: ['btnOkAndCancle',] }],
    operationGrid: [{ type: ViewChild, args: ['operationGrid',] }],
    farrisTreeParent: [{ type: ViewChild, args: ['farrisTreeParent',] }],
    farrisTt: [{ type: ViewChild, args: ['tt',] }],
    winResize: [{ type: HostListener, args: ['window:resize', [],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysFuncOpHelpComponent {
    /**
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} sysUtil
     * @param {?} localService
     */
    constructor(modalService, injector, cfr, sysUtil, localService) {
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.sysUtil = sysUtil;
        this.localService = localService;
        /**
         * 是否启用新UI,启用后性能提升
         */
        this.useNewUI = false;
        /**
         * 初始选中的权限对象内码
         */
        this.initSelectKeys = [];
        /**
         * 是否只显示分组
         */
        this.onlyShowGroup = false;
        /**
         * 输出事件
         */
        this.afterHelpConfirm = new EventEmitter();
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('help');
        }
        else {
            this.i18nRes = HELP_LOCALE_ZHCHS;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * 新UI
     * @param {?} sessionId
     * @return {?}
     */
    showNewHelp(sessionId) {
        // 调用帮助时必须传递sessionId
        this.sysUtil.sessionId = sessionId;
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(SysFarrisFuncOperationComponent);
        /** @type {?} */
        const funcOpCompNew = compFactory.create(this.injector);
        // 获取功能操作的实例组件
        if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {
            this.initSelectKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => funcOpCompNew.instance.curSelectedKeys.push(key)));
        }
        // 初始化选择的业务操作
        if (this.bizObjectId && this.bizObjectId !== '') {
            funcOpCompNew.instance.bizObjectId = this.bizObjectId;
        }
        if (this.gridSelectMode) {
            funcOpCompNew.instance.gridSelectMode = this.gridSelectMode;
        }
        funcOpCompNew.instance.onlyShowGroup = this.onlyShowGroup;
        funcOpCompNew.instance.isGroupCanSelected = this.isGroupCanSelected;
        /** @type {?} */
        const modalConfig = {
            title: this.i18nRes.operationTitle,
            width: 850,
            height: 550,
            buttons: funcOpCompNew.instance.btnOkAndCancleRef,
            showButtons: true,
            showMaxButton: true,
            resizable: true
        };
        // 弹出帮助框
        this.funcOpDialog = this.modalService.show(funcOpCompNew, modalConfig);
        // 取消后
        funcOpCompNew.instance.afterCancle.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // 消失模态框
            this.funcOpDialog.close();
        }));
        // 确认后
        funcOpCompNew.instance.afterConfirm.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.afterHelpConfirm.next(res);
        }));
    }
    /**
     * 弹出Farris模态框帮助
     * @param {?} sessionId
     * @return {?}
     */
    showHelp(sessionId) {
        if (this.useNewUI) {
            this.showNewHelp(sessionId);
            return;
        }
        // 调用帮助时必须传递sessionId
        this.sysUtil.sessionId = sessionId;
        /** @type {?} */
        const compFactory = this.cfr.resolveComponentFactory(SysFuncOperationComponent);
        this.funcOpComp = compFactory.create(this.injector);
        // 获取功能操作的实例组件
        if (this.initSelectKeys != null && this.initSelectKeys.length > 0) {
            this.initSelectKeys
                .forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => this.funcOpComp.instance.curSelectedKeys.push(key)));
        }
        // 初始化选择的业务操作
        if (this.bizObjectId && this.bizObjectId !== '') {
            this.funcOpComp.instance.bizObjectId = this.bizObjectId;
        }
        if (this.gridSelectMode) {
            this.funcOpComp.instance.gridSelectMode = this.gridSelectMode;
        }
        this.funcOpComp.instance.onlyShowGroup = this.onlyShowGroup;
        this.funcOpComp.instance.isGroupCanSelected = this.isGroupCanSelected;
        // 旧版本的需要在这里loaddata
        this.funcOpComp.instance.loadData();
        /** @type {?} */
        const modalConfig = {
            title: '功能操作帮助',
            width: 800,
            height: 550,
            buttons: this.funcOpComp.instance.btnOkAndCancleRef,
            showButtons: true,
            showMaxButton: false,
            resizable: false
        };
        // 弹出帮助框
        this.funcOpDialog = this.modalService.show(this.funcOpComp, modalConfig);
        // 取消后
        this.funcOpComp.instance.afterCancle.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // 消失模态框
            this.funcOpDialog.close();
        }));
        // 确认后
        this.funcOpComp.instance.afterConfirm.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.afterHelpConfirm.next(res);
        }));
    }
}
SysFuncOpHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-sys-func-op-help',
                template: "",
                styles: [""]
            }] }
];
/** @nocollapse */
SysFuncOpHelpComponent.ctorParameters = () => [
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: SysFrontUtil },
    { type: SysLocaleService }
];
SysFuncOpHelpComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    useNewUI: [{ type: Input }],
    initSelectKeys: [{ type: Input }],
    onlyShowGroup: [{ type: Input }],
    gridSelectMode: [{ type: Input }],
    isGroupCanSelected: [{ type: Input }],
    afterHelpConfirm: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BizObjectComponent {
    /**
     * @param {?} bizObjectService
     */
    constructor(bizObjectService) {
        this.bizObjectService = bizObjectService;
        this.selectKeys = [];
        /**
         * 业务对象变化后
         */
        this.bizObjectChanged = new EventEmitter();
        /**
         * 树控件展开的节点值
         */
        this.expandedKeys = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.bizObjectService.getBizObjects().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            result.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (!element.parentID) {
                    element.parentID = undefined;
                    // 展开第一级
                    if (element.layer === 1) {
                        this.expandedKeys.push(element.id);
                    }
                }
            }));
            this.data = result;
            // 默认业务对象的处理
            if (this.bizObjectId && this.bizObjectId !== '') {
                // 树焦点行
                /** @type {?} */
                let curBizObjectId = this.bizObjectId;
                while (curBizObjectId) {
                    this.expandedKeys.push(curBizObjectId);
                    // 找到当前节点的父节点
                    curBizObjectId = this.data.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.id === curBizObjectId)).parentID;
                }
                // 右侧操作变化
                this.selectKeys = [this.bizObjectId];
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.bizObjectChanged.emit(this.bizObjectId);
                }), 80);
            }
        }));
    }
    /**
     * 选中行改变后触发事件
     * @param {?} args
     * @return {?}
     */
    selectChange(args) {
        /** @type {?} */
        const curBusId = args.dataItem.id;
        // 首次触发
        if (this.selectKeys == null || this.selectKeys.length === 0) {
            this.bizObjectChanged.emit(curBusId);
        }
        else {
            // 这个事件里还不会对selectedkeys数组赋值，是上一个状态的
            /** @type {?} */
            const lastBusId = this.selectKeys[0];
            // 变化的情况下触发
            if (lastBusId !== curBusId) {
                this.bizObjectChanged.emit(curBusId);
            }
        }
    }
}
BizObjectComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-biz-object',
                template: "<div class=\"d-flex flex-column flex-fill pt-2 pb-2\" style=\"height: 100%\">\r\n    <kendo-treeview [nodes]=\"data\" textField=\"name\" kendoTreeViewExpandable kendoTreeViewFlatDataBinding idField=\"id\"\r\n      parentIdField=\"parentID\" kendoTreeViewSelectable [selectBy]=\"'id'\" [(selectedKeys)]=\"this.selectKeys\"\r\n      [(expandedKeys)]=\"expandedKeys\"\r\n      [expandBy]=\"'id'\"\r\n      (selectionChange)=\"selectChange($event)\">\r\n    </kendo-treeview>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
BizObjectComponent.ctorParameters = () => [
    { type: BizObjectService }
];
BizObjectComponent.propDecorators = {
    bizObjectId: [{ type: Input }],
    bizObjectChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysFuncOpHelpModule {
}
SysFuncOpHelpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    FormsModule,
                    ReactiveFormsModule,
                    DatagridModule,
                    TreeTableModule,
                    LayoutModule,
                    TreeViewModule,
                    LayoutModule$1,
                    LayoutModule,
                    GridModule,
                    ModalModule.forRoot(),
                    MessagerModule.forRoot()
                ],
                declarations: [
                    SysFuncOperationComponent,
                    SysFuncOpHelpComponent,
                    BizObjectComponent,
                    SysFarrisFuncOperationComponent
                ],
                providers: [
                    SysFrontUtil,
                    SysLocaleService,
                    SysFuncOperationService,
                    BizObjectService
                ],
                entryComponents: [
                    SysFuncOperationComponent,
                    SysFarrisFuncOperationComponent
                ],
                exports: [
                    SysFuncOperationComponent,
                    SysFuncOpHelpComponent,
                    BizObjectComponent,
                    SysFarrisFuncOperationComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysHelpService {
    /**
     * @param {?} http
     * @param {?} sysUtil
     */
    constructor(http, sysUtil) {
        this.http = http;
        this.sysUtil = sysUtil;
    }
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    getHttpOption(filter$$1) {
        SysDataUtil.deleteEmpty(filter$$1);
        /** @type {?} */
        const paramStr = JSON.stringify(filter$$1);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return opt;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getUsers(filter$$1) {
        /** @type {?} */
        const opt = this.getHttpOption(filter$$1);
        // 用户目前的有分页信息
        return this.http.get(this.sysUtil.userWebApi, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            return val.data;
        })));
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getPositions(filter$$1) {
        /** @type {?} */
        const opt = this.getHttpOption(filter$$1);
        return this.http.get(this.sysUtil.positionWebApi, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            return val.data;
        })));
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getRoles(filter$$1) {
        /** @type {?} */
        const opt = this.getHttpOption(filter$$1);
        return this.http.get(this.sysUtil.roleWebApi, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            return val.data;
        })));
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getOrgs(filter$$1) {
        /** @type {?} */
        const opt = this.getHttpOption(filter$$1);
        // 视图
        opt.params.useView = true;
        return this.handerTreeData(this.http.get(this.sysUtil.sysOrgWebApi + '/all', opt));
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getUserGroups(filter$$1) {
        /** @type {?} */
        const opt = this.getHttpOption(filter$$1);
        return this.handerTreeData(this.http.get(this.sysUtil.userGroupWebApi + '/all', opt));
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getPositionGroups(filter$$1) {
        /** @type {?} */
        const opt = this.getHttpOption(filter$$1);
        return this.handerTreeData(this.http.get(this.sysUtil.posGroupWebApi + '/all', opt));
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getRoleGroups(filter$$1) {
        /** @type {?} */
        const opt = this.getHttpOption(filter$$1);
        return this.handerTreeData(this.http.get(this.sysUtil.roleGroupWebApi + '/all', opt));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    convert2Json(item) {
        /** @type {?} */
        const result = {
            id: item.id,
            code: item.code,
            name: item.name,
            parentId: item.parentId || '',
            path: item.path,
            layer: item.layer,
            isDetail: item.isDetail,
        };
        if (item.nodeType != null && item.nodeType !== undefined) {
            result.nodeType = item.nodeType;
        }
        return result;
    }
    /**
     * @param {?} org
     * @return {?}
     */
    getParentOrg(org) {
        /** @type {?} */
        const paramStr = JSON.stringify(this.convert2Json(org));
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(this.sysUtil.sysOrgWebApi + '/getparentorg/0002', opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            return val;
        })));
    }
    /**
     * 适配Kendo-treeView结构
     * @private
     * @param {?} src
     * @return {?}
     */
    handerTreeData(src) {
        return src.pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            from(val).subscribe((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.layer == 1 || item.parentId == null || item.parentId === '') {
                    item.parentId = undefined;
                }
            }));
            return val;
        })));
    }
}
SysHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SysHelpService.ctorParameters = () => [
    { type: HttpClient },
    { type: SysCommonUtilService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysExceptionService {
    /**
     * @param {?} error
     * @return {?}
     */
    getErrorInfo(error) {
        return error.Message;
    }
}
SysExceptionService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GroupService {
    /**
     * @param {?} http
     * @param {?} sysUtil
     */
    constructor(http, sysUtil) {
        this.http = http;
        this.sysUtil = sysUtil;
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    getUrlByGroupType(type) {
        /** @type {?} */
        let url = '';
        switch (type) {
            case 'user':
                url = this.sysUtil.userGroupWebApi;
                break;
            case 'position':
                url = this.sysUtil.posGroupWebApi;
                break;
            case 'role':
                url = this.sysUtil.roleGroupWebApi;
                break;
            case 'org':
                url = this.sysUtil.sysOrgWebApi;
                break;
            // 默认用户分组
            default:
                url = this.sysUtil.userGroupWebApi;
                break;
        }
        return url;
    }
    /**
     * 根据级数获取组织
     * @param {?} layer 级数
     * @param {?} type
     * @param {?} filter
     * @return {?}
     */
    getByLayer(layer, type, filter$$1) {
        /** @type {?} */
        const url = this.getUrlByGroupType(type);
        if (!filter$$1) {
            filter$$1 = {};
        }
        filter$$1.layer = layer;
        filter$$1.parentId = null;
        SysDataUtil.deleteEmpty(filter$$1);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader().headers,
            params: { param: JSON.stringify(filter$$1) }
        };
        return this.http.get(url, opt);
    }
    /**
     * 根据级数获取组织
     * @param {?} parentId 父节点
     * @param {?} type
     * @param {?} filter
     * @return {?}
     */
    getByParentId(parentId, type, filter$$1) {
        /** @type {?} */
        const url = this.getUrlByGroupType(type);
        if (!filter$$1) {
            filter$$1 = {};
        }
        filter$$1.layer = null;
        filter$$1.parentId = parentId;
        SysDataUtil.deleteEmpty(filter$$1);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader().headers,
            params: { param: JSON.stringify(filter$$1) }
        };
        return this.http.get(url, opt);
    }
    /**
     * 根据级数获取组织
     * @param {?} type
     * @param {?} filter
     * @return {?}
     */
    searchData(type, filter$$1) {
        /** @type {?} */
        const url = this.getUrlByGroupType(type);
        if (!filter$$1) {
            filter$$1 = {};
        }
        filter$$1.layer = null;
        filter$$1.parentId = null;
        SysDataUtil.deleteEmpty(filter$$1);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader().headers,
            params: { param: JSON.stringify(filter$$1) }
        };
        return this.http.get(url, opt);
    }
}
GroupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GroupService.ctorParameters = () => [
    { type: HttpClient },
    { type: SysCommonUtilService }
];
/** @nocollapse */ GroupService.ngInjectableDef = defineInjectable({ factory: function GroupService_Factory() { return new GroupService(inject(HttpClient), inject(SysCommonUtilService)); }, token: GroupService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GroupNavComponent {
    /**
     * @param {?} groupService
     * @param {?} localService
     * @param {?} notifyService
     * @param {?} msg
     */
    constructor(groupService, localService, notifyService, msg) {
        this.groupService = groupService;
        this.localService = localService;
        this.notifyService = notifyService;
        this.msg = msg;
        this.showHeader = true;
        this.fixedHeader = true;
        this.withCodeColumn = true;
        // 是否添加所有根节点
        this.allRoot = false;
        this.selectKeys = [];
        this.needRemote = true;
        /**
         * 显示组织类型列
         */
        this.showNodeTypeColumn = false;
        this.showFilterBar = false;
        this.searchFields = [{ label: "编号", value: "code" }, { label: "名称", value: "name" }];
        this.allColumnsTitle = '所有列';
        this.search = new EventEmitter();
        this.selectRowChanged = new EventEmitter();
        /**
         * 查询内容
         */
        this.searchInfo = '';
        /**
         * 上次查询内容
         */
        this.oldSearchInfo = '';
        this.field = '';
        /**
         * 上次查询内容
         */
        this.oldField = '';
        //上次搜索结果
        this.searchResult = [];
        //上次搜索的位置
        this.searchIndex = 0;
        /**
         * 监控拖拽事件，重绘组织TreeTable
         * @param event 事件参数
         */
        this.temp = true;
    }
    /**
     * @return {?}
     */
    winResize() {
        this.reSizeTreeTable();
    }
    /**
     * 重绘Farris-TreeTable的大小
     * @param {?=} height
     * @param {?=} width
     * @return {?}
     */
    reSizeTreeTable(height = 0, width = 0) {
        if (height === 0) {
            height = this.farrisTreeParent.nativeElement.clientHeight;
        }
        if (width === 0) {
            width = this.farrisTreeParent.nativeElement.clientWidth;
        }
        this.farrisTt.resize({ height, width });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('navi');
        }
        else {
            this.i18nRes = NAVI_LOCALE_ZHCHS;
        }
        this.searchFields = [{ label: this.i18nRes.codeField, value: "code" }, { label: this.i18nRes.nameField, value: "name" }];
        this.allColumnsTitle = this.i18nRes.allColumnsTitle;
        // 启用编号列
        if (this.withCodeColumn) {
            this.fixedHeader = true;
            this.showHeader = true;
            this.cols = [
                { field: 'code', title: this.i18nRes.codeField, width: 100 },
                { field: 'name', title: this.i18nRes.nameField, width: 100 }
            ];
        }
        else {
            this.fixedHeader = false;
            this.showHeader = false;
            this.cols = [
                { field: 'name', title: this.i18nRes.nameField, width: 100 }
            ];
        }
        // 需要获取数据，否则直接根据treeData初始数据
        if (this.needRemote) {
            // 所有标识
            if (this.allRoot) {
                this.treeData = [];
                /** @type {?} */
                const rootNode = {};
                rootNode.children = [];
                rootNode.data = {
                    id: 'all',
                    code: this.i18nRes.rootNodeCode,
                    name: this.i18nRes.rootNodeTitle
                };
                rootNode.expanded = true;
                rootNode.leaf = false;
                rootNode.selectable = true;
                this.treeData.push(rootNode);
            }
            else {
                this.treeData = [];
            }
            this.groupService.getByLayer(1, this.groupType, this.filter).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                this.initTreeNodeList(val);
            }));
        }
        else { // 不需要从服务器端获取
            this.farrisTt.updateSerializedValue();
        }
        // 异步加载，通过children为0来判断从未展开过节点
        this.farrisTt.expand.pipe(filter((/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.children.length === 0))).subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            node['showLoading'] = true;
            /** @type {?} */
            const id = node.data.id;
            // 获取系统组织
            this.groupService.getByParentId(id, this.groupType, this.filter).subscribe((/**
             * @param {?} list
             * @return {?}
             */
            (list) => {
                node['showLoading'] = false;
                /** @type {?} */
                const childNode = [];
                // 转换下级组织
                from(list).subscribe((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    childNode.push(this.convertToTreeNode(item));
                }));
                // 防止出现下级节点没有数据
                if (childNode.length > 0) {
                    this.farrisTt.appendChildren(childNode, node);
                }
                else { // 应该是无下级权限才走这里
                    node.leaf = true;
                    this.farrisTt.updateSerializedValue();
                }
            }));
        }));
    }
    /**
     * 刷新当前页面信息
     * @return {?}
     */
    refreshThisNav() {
        this.treeData = [];
        /** @type {?} */
        const rootNode = {};
        rootNode.children = [];
        rootNode.data = {
            id: 'all',
            code: this.i18nRes.rootNodeCode,
            name: this.i18nRes.rootNodeTitle
        };
        rootNode.expanded = true;
        rootNode.leaf = false;
        rootNode.selectable = true;
        this.treeData.push(rootNode);
        this.groupService.getByLayer(1, this.groupType, this.filter).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            this.initTreeNodeList(val);
        }));
    }
    /**
     * 页面渲染完成后
     * @return {?}
     */
    ngAfterContentInit() {
        this.reSizeTreeTable();
    }
    /**
     * 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     * @param {?} args  格式 searchData = { field: '*', value: '' };
     * @return {?}
     */
    searchData(args) {
        this.search.next(args);
        if (!this.filter) {
            this.filter = {};
        }
        if (!args) {
            return;
        }
        this.searchInfo = args.value;
        this.field = args.field;
        // 搜索内容为空
        if (!this.searchInfo || this.searchInfo.length <= 0) {
            this.clearSearchValue();
            return;
        }
        // 搜索内容与上次不同，重新搜索
        if (this.oldSearchInfo !== this.searchInfo || this.oldField !== this.field) {
            this.filter.isSearchTree = true;
            if (this.field === '*') {
                this.filter.codeOrName = this.searchInfo;
                this.filter.code = '';
                this.filter.name = '';
            }
            else if (this.field === 'code') {
                this.filter.code = this.searchInfo;
                this.filter.name = '';
                this.filter.codeOrName = '';
            }
            else if (this.field === 'name') {
                this.filter.name = this.searchInfo;
                this.filter.code = '';
                this.filter.codeOrName = '';
            }
            this.groupService.searchData(this.groupType, this.filter).subscribe((/**
             * @param {?} list
             * @return {?}
             */
            list => {
                this.treeData = [];
                this.searchResult = [];
                this.searchIndex = 0;
                if (list && list.length > 0) {
                    this.treeData = this.makeTree(list);
                    list.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        if (item.search_data) {
                            this.searchResult.push(item.id);
                        }
                    }));
                    // 手动更新TreeTable的值
                    this.farrisTt.updateSerializedValue();
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.farrisTt.selectNode(this.searchResult[0]);
                        this.farrisTt.collapseAll();
                        this.expandParent(this.searchResult[0]);
                        this.farrisTt.scrollToCurrentNode();
                    }));
                }
                else {
                    // 手动更新TreeTable的值
                    this.farrisTt.updateSerializedValue();
                    this.notifyService.info(this.i18nRes.searchNullData);
                }
            }));
        }
        else {
            if (this.searchResult && this.searchResult.length > 0) {
                this.searchIndex = this.searchIndex + 1;
                // 已经搜索到最后，需要重头搜索
                if (this.searchIndex === this.searchResult.length) {
                    this.searchIndex = 0;
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.farrisTt.selectNode(this.searchResult[this.searchIndex]);
                    this.farrisTt.collapseAll();
                    this.expandParent(this.searchResult[this.searchIndex]);
                    this.farrisTt.scrollToCurrentNode();
                }));
            }
            else {
                this.notifyService.info(this.i18nRes.searchNullData);
            }
        }
        this.oldSearchInfo = this.searchInfo;
        this.oldField = this.field;
    }
    /**
     * @return {?}
     */
    clearSearchValue() {
        //点击清除时，防止事件执行两次
        if (!this.temp) {
            return;
        }
        this.temp = false;
        // 所有标识
        if (this.allRoot) {
            this.treeData = [];
            /** @type {?} */
            const rootNode = {};
            rootNode.children = [];
            rootNode.data = {
                id: 'all',
                code: this.i18nRes.rootNodeCode,
                name: this.i18nRes.rootNodeTitle
            };
            rootNode.expanded = true;
            rootNode.leaf = false;
            rootNode.selectable = true;
            this.treeData.push(rootNode);
        }
        else {
            this.treeData = [];
        }
        this.filter.isSearchTree = false;
        this.filter.codeOrName = null;
        this.filter.code = null;
        this.filter.name = null;
        this.groupService.getByLayer(1, this.groupType, this.filter).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            this.initTreeNodeList(val);
            if (this.treeData.length > 0) {
                this.farrisTt.selectNode(this.treeData[0].data.id);
            }
            this.temp = true;
        }));
        this.oldSearchInfo = '';
        this.oldField = '';
    }
    /**
     * 构造树
     * @private
     * @param {?} data
     * @return {?}
     */
    makeTree(data) {
        /** @type {?} */
        const root = data.filter((/**
         * @param {?} t
         * @return {?}
         */
        t => t.layer === 1)).map((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            const node = {
                data: t,
                children: [],
                expanded: false,
                selectable: t.farris_selectable
            };
            if (!t.isDetail) {
                node.leaf = false;
                node.children = [];
            }
            return node;
        }));
        root.forEach((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            // 构造下级：children，父级的id信息
            e.children = this.makeChildrenByParentId(data, e.data.id);
        }));
        return root;
    }
    /**
     * 父节点构造树
     * @private
     * @param {?} datas
     * @param {?} parentId
     * @return {?}
     */
    makeChildrenByParentId(datas, parentId) {
        /** @type {?} */
        const x = datas.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.parentId === parentId)).map((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            return {
                data: d,
                children: this.makeChildrenByParentId(datas, d.id),
                expanded: false,
                selectable: d.farris_selectable
            };
        }));
        return x;
    }
    /**
     * 将组织实体转换为Farris-TreeNode
     * @private
     * @param {?} src
     * @return {?}
     */
    convertToTreeNode(src) {
        /** @type {?} */
        const node = { data: src };
        // 非明细节点
        if (!src.isDetail) {
            node.leaf = false;
            node.children = [];
        }
        // TODO: 只有有权限的组织才能被选中,还是这里不做处理，发送事件时去处理
        node.selectable = src.farris_selectable;
        return node;
    }
    /**
     * 初始顶级分组，默认layer=1的情况
     * @private
     * @param {?} list
     * @return {?}
     */
    initTreeNodeList(list) {
        if (!list || list.length === 0) {
            return;
        }
        from(list).subscribe((/**
         * @param {?} firstLayer
         * @return {?}
         */
        firstLayer => {
            /** @type {?} */
            const node = this.convertToTreeNode(firstLayer);
            // 非明细，带往下多构造一级，假设有数据
            if (node.leaf) {
                /** @type {?} */
                const curId = firstLayer.id;
                /** @type {?} */
                const childern = list.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.parentId === curId));
                from(childern).subscribe((/**
                 * @param {?} secondLayer
                 * @return {?}
                 */
                secondLayer => {
                    node.children.push(this.convertToTreeNode(secondLayer));
                }));
            }
            // 如果添加所有根节点
            if (this.allRoot) {
                this.treeData[0].children.push(node);
            }
            else {
                this.treeData.push(node);
            }
        }));
        // 手动更新TreeTable的值
        this.farrisTt.updateSerializedValue();
    }
    /**
     * 选择的组织行
     * @param {?} event
     * @return {?}
     */
    onNodeSelect(event) {
        console.log(event.node.data);
        this.selectRowChanged.next(event.node.data);
    }
    /**
     * 获取当前TreeTable的绑定数据
     * @return {?}
     */
    getTreeData() {
        return this.treeData;
    }
    /**
     * 获取当前TreeTable的组件实例
     * @return {?}
     */
    getTreeTableComp() {
        return this.farrisTt;
    }
    /**
     * 选中某个节点
     * @param {?} id
     * @param {?=} isCheck
     * @return {?}
     */
    selectNode(id, isCheck) {
        this.farrisTt.selectNode(id, isCheck);
    }
    /**
     * 清除所有选中值
     * @return {?}
     */
    unCheckAllNodes() {
        this.farrisTt.unCheckAllNodes();
    }
    /**
     * 清除所有选中值
     * @param {?} key
     * @return {?}
     */
    scrollToCurrentNode(key) {
        if (key) {
            this.farrisTt.selectNode(key);
            this.expandParent(key);
            this.farrisTt.scrollToCurrentNode();
        }
    }
    /**
     * 逐一找到需要展开的父节点，全部展开
     * @param {?} key
     * @return {?}
     */
    expandParent(key) {
        /** @type {?} */
        const parent = this.farrisTt.findRowNode(key);
        /** @type {?} */
        let parentNode = parent.parent;
        if (parentNode) {
            while (parentNode) {
                this.farrisTt.expandNode(parentNode.id);
                parentNode = parentNode.parent;
            }
        }
    }
}
GroupNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-group-nav',
                template: "<div #farrisTreeParent class=\"f-utils-fill-flex-column\" style=\"background-color: white\">\r\n    <farris-treetable #farrisTt \r\n    [data]=\"this.treeData\" \r\n    [columns]=\"cols\" \r\n    [idField]=\"'id'\" \r\n    [fixedHeader]=\"fixedHeader\" \r\n    [showHeader]=\"showHeader\" \r\n    [fit]=\"true\" \r\n    [resizableColumns]=\"true\"\r\n    [fitColumns]=\"true\"\r\n    [(showFilterBar)]=\"showFilterBar\"\r\n    (search)=\"searchData($event)\"\r\n    [searchFields]=\"searchFields\"\r\n    [allColumnsTitle]=\"allColumnsTitle\"\r\n    (clearSearchValue)=\"clearSearchValue()\"\r\n    (nodeSelected)=\"onNodeSelect($event)\">\r\n    </farris-treetable>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
GroupNavComponent.ctorParameters = () => [
    { type: GroupService },
    { type: SysLocaleService },
    { type: NotifyService },
    { type: MessagerService }
];
GroupNavComponent.propDecorators = {
    farrisTreeParent: [{ type: ViewChild, args: ['farrisTreeParent',] }],
    farrisTt: [{ type: ViewChild, args: ['farrisTt',] }],
    title: [{ type: Input }],
    showHeader: [{ type: Input }],
    fixedHeader: [{ type: Input }],
    withCodeColumn: [{ type: Input }],
    allRoot: [{ type: Input }],
    groupType: [{ type: Input }],
    filter: [{ type: Input }],
    selectKeys: [{ type: Input }],
    needRemote: [{ type: Input }],
    showNodeTypeColumn: [{ type: Input }],
    treeData: [{ type: Input }],
    showFilterBar: [{ type: Input }],
    search: [{ type: Output }],
    selectRowChanged: [{ type: Output }],
    winResize: [{ type: HostListener, args: ['window:resize', [],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const userHelp = 'user';
/** @type {?} */
const posHelp = 'position';
/** @type {?} */
const roleHelp = 'role';
/** @type {?} */
const userGroupHelp = 'userGroup';
/** @type {?} */
const posGroupHelp = 'posGroup';
/** @type {?} */
const roleGroupHelp = 'roleGroupHelp';
/** @type {?} */
const sysOrgHelp = 'sysOrg';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助服务
 */
class SysFarrisLookupService {
    /**
     * @param {?} http
     * @param {?} sysUtil
     * @param {?} localService
     */
    constructor(http, sysUtil, localService) {
        this.http = http;
        this.sysUtil = sysUtil;
        this.localService = localService;
    }
    /**
     * 初始过滤条件
     * @private
     * @param {?} filter
     * @return {?}
     */
    setFilterData(filter$$1) {
        // 有过滤条件
        if (filter$$1) {
            /** @type {?} */
            const str = JSON.stringify(filter$$1);
            if (str !== '{}') {
                // 一定要复制
                this.filterData = JSON.parse(str);
            }
            else {
                this.filterData = null;
            }
        }
        else {
            this.filterData = null;
        }
    }
    /**
     * 添加数据
     * @private
     * @param {?} src
     * @param {?} data
     * @return {?}
     */
    setListData(src, data) {
        if (src) {
            src.push.apply(src, data);
        }
    }
    /**
     * 获取过滤数据
     * @private
     * @return {?}
     */
    getFilterData() {
        return this.filterData;
    }
    /**
     * 异步获取版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getTreeDataAsync(url, params) {
        this.i18nRes = this.localService.getComponentOpt('help');
        // 解析查询json对象
        /** @type {?} */
        const treeParam = JSON.parse(params.searchValue);
        /** @type {?} */
        let farrisSelectedData = params['customData'].farrisSelectedData;
        /** @type {?} */
        let filter$$1 = {};
        // filter.withPermission = true;
        /** @type {?} */
        const category = treeParam.category;
        // 1.首次加载
        if (category === 'all') {
            filter$$1.layer = 1;
        }
        // 2.异步展开下级
        if (category === 'children') {
            if (treeParam.hasOwnProperty('parentPath')) {
                filter$$1.path = treeParam.parentPath;
            }
            if (treeParam.hasOwnProperty('parentLayer')) {
                // 后端搜索以下级节点为级数的节点
                filter$$1.layer = treeParam.parentLayer + 1;
            }
            if (treeParam.hasOwnProperty('parentId')) {
                filter$$1.parentId = treeParam.parentId;
            }
        }
        // 3.搜索
        if (category === 'search') {
            /** @type {?} */
            const searchField = treeParam.searchField;
            /** @type {?} */
            const searchValue = treeParam.searchValue.trim();
            if (searchValue) {
                filter$$1.isSearchTree = true;
                switch (searchField) {
                    case 'code':
                        filter$$1.code = searchValue;
                        break;
                    case 'name':
                        filter$$1.name = searchValue;
                        break;
                    // 全部列搜索，之前是'*'
                    case '*':
                    default:
                        filter$$1.codeOrName = searchValue;
                        break;
                }
            }
            else {
                // 搜索为空，重新加载，默认从1级开始
                filter$$1.layer = 1;
            }
        }
        //如果是组织，请求选中数据时
        if (url === '/api/runtime/sys/v1.0/sysOrgs' && category === 'fav') {
            /** @type {?} */
            let newUrl = url + '/nullorg';
            /** @type {?} */
            const newOpt = {
                headers: this.sysUtil.getHeader()['headers'],
                params: { useView: 'true' }
            };
            return this.http.get(newUrl, newOpt).pipe(map((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                /** @type {?} */
                const gridResult = {};
                return gridResult;
            })));
        }
        // 说明有过滤条件
        if (this.getFilterData()) {
            filter$$1 = Object.assign(this.getFilterData(), filter$$1);
            SysDataUtil.deleteEmpty(filter$$1);
        }
        /** @type {?} */
        const paramStr = JSON.stringify(filter$$1);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            /** @type {?} */
            const gridResult = {};
            gridResult.selectedData = farrisSelectedData;
            gridResult.items = [];
            gridResult.treeInfo = {
                loadDataType: 'async',
                layerType: 'parentId',
                dataField: 'treeInfo',
                pathField: 'path',
                layerField: 'layer',
                parentField: 'parentId',
                isDetailField: 'isDetail'
            };
            gridResult.treeInfo['treeDataIsInit'] = true;
            gridResult.columns = [
                { field: 'code', title: this.i18nRes.codeField },
                { field: 'name', title: this.i18nRes.nameField }
            ];
            gridResult.searchFields = [
                { label: this.i18nRes.codeField, value: 'code' },
                { label: this.i18nRes.nameField, value: 'name' }
            ];
            // 必须要赋值
            from(val).subscribe((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.layer === 1 || !item.parentId) {
                    item.parentId = null;
                }
                item.treeInfo = {
                    parentId: item.parentId,
                    path: item.path,
                    layer: item.layer,
                    isDetail: item.isDetail
                };
            }));
            // 如果是搜索的话，需要自己构造树
            if (filter$$1.isSearchTree) {
                gridResult.items = this.makeTreeByParent(val, 'parentId', 'id');
                console.log(gridResult.items);
            }
            else {
                // 有结果，普通分层加载
                if (val && val.length > 0) {
                    from(val).subscribe((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        gridResult.items.push(this.convertToTreeNode(item));
                    }));
                }
            }
            return gridResult;
        })));
    }
    /**
     * 将树节点转换为Farris TreeNode
     * @private
     * @param {?} src
     * @return {?}
     */
    convertToTreeNode(src) {
        /** @type {?} */
        const node = {};
        node.data = src;
        node.children = [];
        node.selectable = src.farris_selectable;
        node.leaf = src.isDetail;
        node.parent = src.parentId;
        // 这一条必须得加，否则不行
        node.id = node.data.id;
        // 搜索的时候最末级添加了这个属性，不需要展开
        if (src.hasOwnProperty('expanded')) {
            node.expanded = src.expanded;
        }
        return node;
    }
    /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    makeTreeByParent(datas, parentField, keyField) {
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        const pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (!x[parentField]) {
                return true;
            }
            // 断层的这种，应该也属于一级
            /** @type {?} */
            const p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            parent => parent[keyField] === x[parentField]));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        const treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            const node = this.convertToTreeNode(x);
            treedata.push(node);
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    }
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    findChildrenByParent(parent, datas, parentField, keyField) {
        /** @type {?} */
        const childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        childitem => {
            if (childitem[parentField] === parent.data[keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                /** @type {?} */
                const node = this.convertToTreeNode(child);
                parent.children.push(node);
                this.findChildrenByParent(node, datas, parentField, keyField);
            }));
        }
    }
    /**
     * 全部获取版本版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getTreeData(url, params) {
        /** @type {?} */
        let filter$$1 = {};
        // 说明有过滤条件
        if (this.getFilterData()) {
            filter$$1 = Object.assign(this.getFilterData(), filter$$1);
            SysDataUtil.deleteEmpty(filter$$1);
        }
        /** @type {?} */
        const paramStr = JSON.stringify(filter$$1);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            if (val && val.length > 0) {
                val.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (item.layer == 1 || item.parentId == null) {
                        item.parentId = '';
                    }
                    // 满足前端结构
                    item.treeInfo = {
                        parentId: item.parentId,
                        path: item.path,
                        layer: item.layer,
                        isDetail: item.isDetail
                    };
                    item.selectable = false;
                }));
            }
            else {
                val = [];
            }
            return { items: val };
        })));
    }
    /**
     * 获取列表数据
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getGridData(url, params) {
        /** @type {?} */
        let index = params.pageIndex;
        /** @type {?} */
        let size = params.pageSize;
        /** @type {?} */
        let farrisSelectedData = params['customData'].farrisSelectedData;
        // 目前这个地方有问题，第一次的时候传递不过来
        if (!index) {
            /** @type {?} */
            const customData = params['customData'];
            index = customData.filter.pageIndex;
            size = customData.filter.pageSize;
        }
        /** @type {?} */
        let param = {
            pageIndex: index,
            pageSize: size,
        };
        // 是否有搜索
        /** @type {?} */
        const filterStr = params.searchValue;
        /** @type {?} */
        const filterObj = JSON.parse(filterStr);
        /** @type {?} */
        const searchField = filterObj.searchField;
        /** @type {?} */
        const searchValue = filterObj.searchValue;
        // 有过滤查询,有可能搜索值为空，这时候是不需要搜索的
        if (searchField && searchValue) {
            switch (searchField) {
                case 'code':
                    param.code = searchValue;
                    break;
                case 'name':
                    param.name = searchValue;
                    break;
                // 全部列搜索，之前是'*'
                case '*':
                default:
                    param.codeOrName = searchValue;
                    break;
            }
        }
        // 说明有过滤条件
        if (this.getFilterData()) {
            param = Object.assign(this.getFilterData(), param);
            SysDataUtil.deleteEmpty(param);
        }
        console.log(param);
        /** @type {?} */
        const paramStr = JSON.stringify(param);
        /** @type {?} */
        const opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            if (val && val.data) {
                // 将本次分页的数据附加到当前帮助的列表中
                this.setListData(params['customData'].allData, val.data);
            }
            return {
                items: val.data,
                total: val.totalCount,
                pageInfo: {
                    pageIndex: index,
                    pageSize: size,
                    pageList: [20, 40, 60, 80, 100],
                    enablePager: true
                },
                selectedData: farrisSelectedData
            };
        })));
    }
    /**
     * 取数
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        console.log(params);
        console.log(url);
        /** @type {?} */
        const filter$$1 = params['customData'].filter;
        this.setFilterData(filter$$1);
        /** @type {?} */
        const typeIndex = url.indexOf('\/');
        /** @type {?} */
        const httpUrl = url.substring(typeIndex, url.length);
        /** @type {?} */
        const helpType = url.substring(0, typeIndex);
        switch (helpType) {
            case userHelp:
            case posHelp:
            case roleHelp:
                return this.getGridData(httpUrl, params);
            case userGroupHelp:
            case posGroupHelp:
            case roleGroupHelp:
            case sysOrgHelp:
                return this.getTreeDataAsync(httpUrl, params);
            default:
                break;
        }
    }
}
SysFarrisLookupService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SysFarrisLookupService.ctorParameters = () => [
    { type: HttpClient },
    { type: SysCommonUtilService },
    { type: SysLocaleService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysFarrisLookupComponent {
    /**
     * @param {?} sysUtil
     * @param {?} localService
     */
    constructor(sysUtil, localService) {
        this.sysUtil = sysUtil;
        this.localService = localService;
        /**
         * 宽度
         */
        this.width = 550;
        /**
         * 是否显示用户排序字段，WF使用
         */
        this.showUserOrderField = false;
        /**
         * 显示用户的单位信息，WF使用
         */
        this.showUserUnitInfo = false;
        /**
         * 只读
         */
        this.disabled = false;
        /**
         * 必填
         */
        this.required = true;
        /**
         * 打开帮助后是否有选中数据
         */
        this.enableToSelect = true;
        /**
         * 是否分页，默认true
         */
        this.pagination = true;
        /**
         * 首次加载第几页，默认1
         */
        this.pageIndex = 1;
        /**
         * 每页加载数，默认20
         */
        this.pageSize = 20;
        /**
         * 是否开始数据权限过滤
         */
        this.withPermission = false;
        /**
         * 启用关闭前事件
         */
        this.useBeforeCloseEvent = false;
        this.typeMode = 0;
        /**
         * 帮助选择后事件
         */
        this.afterConfirm = new EventEmitter();
        /**
         * 帮助选择后事件，会返回选中和删除的id
         */
        this.afterConfirmData = new EventEmitter();
        /**
         * 清空后事件-暂时不用
         */
        this.clear = new EventEmitter();
        /**
         * 关闭前-暂时不用
         */
        this.loadSuccessEvent = new EventEmitter();
        this.valueChangedEvent = new EventEmitter();
        this.selectDataEvent = new EventEmitter();
        this.dialogClosed = new EventEmitter();
        this.selectedData = [];
        this.farrisSelectedData = [];
        this.mapFields = { id: 'id', name: 'name' };
        /**
         * 帮助前事件,强行传递过滤条件
         */
        this.beforeOpen = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            if (!this.filter) {
                // 可能调用方不传递，识别为非空
                this.filter = {};
            }
            /**
             * WF使用，如果显示用户的单位信息，需要查询条件中增加如下标识，
             * 服务器端解析
             */
            if (this.showUserUnitInfo) {
                this.filter.queryMode = '0002';
            }
            this.filter.pageIndex = this.pageIndex;
            this.filter.pageSize = this.pageSize;
            this.allData.length = 0;
            this.farrisSelectedData = [];
            this.selectedData = [];
            if (this.bindingData != null && this.bindingData.id != null && this.bindingData.id != "") {
                this.selectedData = this.bindingData.id.split(',');
                this.selectedData.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    this.farrisSelectedData.push({ "id": item });
                }));
            }
            // 把过滤数据和当前的数据传递到service层
            return of({
                showDialog: true, data: {
                    filter: this.filter,
                    allData: this.allData,
                    farrisSelectedData: this.farrisSelectedData
                }
            });
        });
        /**
         * 帮助关闭前事件,目前无论是否都会继续走afterOk映射事件
         */
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            if (this.useBeforeCloseEvent && this.beforeClose) {
                return this.beforeClose(arg).pipe(map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    // 如果能关闭，调用后事件
                    if (val.closeDialog) {
                        this.afterConfirm.next(arg);
                    }
                    return val;
                })));
            }
            else {
                return of({ closeDialog: true });
            }
        });
        /**
         * 帮助映射后事件
         */
        this.afterOk = (/**
         * @param {?} helpdata
         * @param {?} mapfields
         * @return {?}
         */
        (helpdata, mapfields) => {
            if (this.useBeforeCloseEvent) {
                return;
            }
            if (this.typeMode && this.typeMode === 1) {
                if (!this.singleSelect) {
                    this.selectedData = this.selectedData.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        if (this.allData.findIndex((/**
                         * @param {?} element
                         * @return {?}
                         */
                        element => {
                            if (item.hasOwnProperty("id")) {
                                return element.id === item.id;
                            }
                            else {
                                return element.id === item;
                            }
                        })) > -1) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }));
                    this.selectedData.forEach((/**
                     * @param {?} item
                     * @param {?} index
                     * @return {?}
                     */
                    (item, index) => {
                        if (!item.hasOwnProperty("id")) {
                            this.allData.forEach((/**
                             * @param {?} element
                             * @return {?}
                             */
                            element => {
                                if (element.id === item) {
                                    this.selectedData[index] = element;
                                }
                            }));
                        }
                    }));
                    helpdata = this.selectedData;
                }
            }
            if (helpdata) {
                // 多选的话需要处理,帮助已逗号为间隔
                if (!this.singleSelect) {
                    /** @type {?} */
                    const idList = helpdata.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.id));
                    /** @type {?} */
                    const nameList = helpdata.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.name));
                    /** @type {?} */
                    const nameStr = nameList.join();
                    /** @type {?} */
                    const idStr = idList.join();
                    this.displayTxt = nameStr;
                    this.bindingData.id = idStr;
                    this.bindingData.name = nameStr;
                }
                else {
                    this.displayTxt = helpdata.name;
                }
            }
            // 触发事件
            this.afterConfirm.next(helpdata);
            // this.afterConfirmData.next(this.selctedData);
        });
        this.onOkClick = (/**
         * @return {?}
         */
        () => {
            if (this.useBeforeCloseEvent) {
                return;
            }
            /** @type {?} */
            let helpdata;
            if (!this.selectedData || this.selectedData.length === 0) {
                if (this.singleSelect) {
                    this.afterConfirm.next(helpdata);
                }
                else {
                    this.afterConfirm.next([]);
                }
                this.farrisLookUp.closeDialog();
                return;
            }
            this.selectedData = this.selectedData.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (this.allData.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    if (item.hasOwnProperty("id")) {
                        return element.id === item.id;
                    }
                    else {
                        return element.id === item;
                    }
                })) > -1) {
                    return true;
                }
                else {
                    return false;
                }
            }));
            this.selectedData.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            (item, index) => {
                if (!item.hasOwnProperty("id")) {
                    this.allData.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        if (element.id === item) {
                            this.selectedData[index] = element;
                        }
                    }));
                }
            }));
            helpdata = this.selectedData;
            if (helpdata && helpdata.length > 0) {
                // 多选的话需要处理,帮助已逗号为间隔
                if (!this.singleSelect) {
                    /** @type {?} */
                    const idList = helpdata.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.id));
                    /** @type {?} */
                    const nameList = helpdata.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.name));
                    /** @type {?} */
                    const nameStr = nameList.join();
                    /** @type {?} */
                    const idStr = idList.join();
                    this.displayTxt = nameStr;
                    this.bindingData.id = idStr;
                    this.bindingData.name = nameStr;
                    this.afterConfirm.next(helpdata);
                }
                else {
                    /** @type {?} */
                    let nameStr = helpdata[0].name;
                    this.displayTxt = nameStr;
                    this.afterConfirm.next(helpdata[0]);
                }
            }
            else { // 目前清空会走这里，而且两次
                this.afterConfirm.next(helpdata);
            }
            // 触发事件
            this.farrisLookUp.closeDialog();
        });
        this.selectedData = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('help');
        }
        else {
            this.i18nRes = HELP_LOCALE_ZHCHS;
        }
        this.columns = [
            { title: this.i18nRes.codeField, field: 'code', searchField: 'code', width: '160' },
            { title: this.i18nRes.nameField, field: 'name', searchField: 'name', width: '200' },
        ];
        // 显示用户的单位路径信息，WF使用
        if (this.showUserUnitInfo) {
            this.width = 850;
            this.columns.push({ title: this.i18nRes.orgNamePathField, field: 'orgNamePath' });
            this.width = 850;
            this.columns.push({ title: this.i18nRes.orgName, field: 'sysOrgName' });
        }
        // 显示排序字段，WF使用
        if (this.showUserOrderField) {
            this.columns.push({ title: this.i18nRes.orderField, field: 'orderNum' });
        }
        // 初始化
        this.allData = [];
        // webapi初始
        switch (this.sourceType) {
            case 'position':
                this.dataUri = posHelp + this.sysUtil.positionWebApi;
                if (!this.title) {
                    this.title = this.i18nRes.positionTitle;
                }
                break;
            case 'role':
                this.dataUri = roleHelp + this.sysUtil.roleWebApi;
                if (!this.title) {
                    this.title = this.i18nRes.roleTitle;
                }
                break;
            case 'user':
            default:
                this.dataUri = userHelp + this.sysUtil.userWebApi;
                if (!this.title) {
                    this.title = this.i18nRes.userTitle;
                }
                break;
        }
        // 必须要有，否则初始选中不起作用
        this.farrisLookUp.mapFields = { id: 'id', name: 'name' };
        // 帮助关闭后事件
        this.farrisLookUp.dialogClosed.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            console.log(val);
            this.dialogClosed.next(val);
        }));
    }
    /**
     * 清空后
     * @param {?} arg
     * @return {?}
     */
    afterClear(arg) {
        this.clear.next(arg);
    }
    /**
     * 手动显示帮助
     * @return {?}
     */
    showHelp() {
        this.farrisLookUp.showDialog();
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    oncheckedChange(arg) {
        if (this.singleSelect) {
            this.selectedData = [];
        }
        if (arg.isCheck) {
            arg.data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (this.selectedData.indexOf(item.id) === -1) {
                    this.selectedData.push(item);
                }
            }));
        }
        else {
            this.selectedData = this.selectedData.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (arg.data.findIndex((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => { return item.hasOwnProperty("id") ? item.id === element.id : item === element.id; })) > -1) {
                    return false;
                }
                else {
                    return true;
                }
            }));
        }
    }
}
SysFarrisLookupComponent.decorators = [
    { type: Component, args: [{
                selector: 'sys-farris-grid-lookup',
                template: "<farris-lookup-grid #farrislookup\r\n    [disabled]=\"disabled\"\r\n    [editable]=\"false\"\r\n    [bindingData]=\"bindingData\"\r\n    [(ngModel)]=\"displayTxt\"\r\n    [columns]=\"columns\"\r\n    [singleSelect]=\"singleSelect\"\r\n    [title]=\"title\"\r\n    [displayType]=\"'List'\"\r\n    [uri]=\"dataUri\"\r\n    [idField]=\"'id'\"\r\n    [pageIndex]=\"pageIndex\"\r\n    [pageSize]=\"pageSize\"\r\n    [enableToSelect]=\"enableToSelect\"\r\n    [pagination]=\"pagination\"\r\n    [valueField]=\"'id'\" \r\n    [textField]=\"'name'\"\r\n    (clear)=\"afterClear($event)\"\r\n    [mapFields]=\"mapFields\"\r\n    [dictPicking]=\"beforeOpen\"\r\n    [dictPicked]=\"beforeClose\"\r\n    [mappingFn]= \"afterOk\"\r\n    [dialogWidth]=\"width\"\r\n    (checkedChange)=\"oncheckedChange($event)\"\r\n\r\n    [required]=\"required\"></farris-lookup-grid>\r\n\r\n    <!--\r\n        \u786E\u5B9A\u7684\u81EA\u5B9A\u4E49\u4E8B\u4EF6\uFF0C\u9700\u8981\u5220\u9664\r\n        [okHandler]=\"onOkClick\" -->\r\n\r\n",
                providers: [
                    { provide: ServerSideToken, useClass: SysFarrisLookupService }
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SysFarrisLookupComponent.ctorParameters = () => [
    { type: SysCommonUtilService },
    { type: SysLocaleService }
];
SysFarrisLookupComponent.propDecorators = {
    title: [{ type: Input }],
    width: [{ type: Input }],
    showUserOrderField: [{ type: Input }],
    showUserUnitInfo: [{ type: Input }],
    sourceType: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    enableToSelect: [{ type: Input }],
    singleSelect: [{ type: Input }],
    pagination: [{ type: Input }],
    pageIndex: [{ type: Input }],
    pageSize: [{ type: Input }],
    displayTxt: [{ type: Input }],
    bindingData: [{ type: Input }],
    filter: [{ type: Input }],
    withPermission: [{ type: Input }],
    useBeforeCloseEvent: [{ type: Input }],
    beforeClose: [{ type: Input }],
    typeMode: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    afterConfirmData: [{ type: Output }],
    clear: [{ type: Output }],
    loadSuccessEvent: [{ type: Output }],
    valueChangedEvent: [{ type: Output }],
    selectDataEvent: [{ type: Output }],
    dialogClosed: [{ type: Output }],
    farrisLookUp: [{ type: ViewChild, args: ['farrislookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HelpFilterMap {
    constructor() {
        /**
         * 帮助元数据的过滤条件
         */
        this.helpMeta = new Map();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysFarrisTreeHelpComponent {
    /**
     * @param {?} sysUtil
     * @param {?} localService
     * @param {?} sysHelpService
     */
    constructor(sysUtil, localService, sysHelpService) {
        this.sysUtil = sysUtil;
        this.localService = localService;
        this.sysHelpService = sysHelpService;
        /**
         * 是否只读
         */
        this.disabled = false;
        /**
         * 是否分层加载组织
         */
        this.async = false;
        /**
         * 是否单选
         */
        this.singleSelect = true;
        /**
         * 打开帮助后是否有选中数据
         */
        this.enableToSelect = true;
        /**
         * 启用关闭前事件
         */
        this.useBeforeCloseEvent = false;
        /**
         * 是否开始数据权限过滤
         */
        this.withPermission = false;
        /**
         * 帮助选择后事件
         */
        this.afterConfirm = new EventEmitter();
        /**
         * 清空后事件-暂时不用
         */
        this.clear = new EventEmitter();
        this.showAllPathOrg = false;
        this.mapFields = { id: 'id', name: 'name' };
        this.allData = [];
        /**
         * 帮助前事件,强行传递过滤条件
         */
        this.beforeOpen = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            //如果有过滤条件，附加到url路径
            /** @type {?} */
            let farrisSelectedData = [];
            /** @type {?} */
            let selectedData = [];
            /** @type {?} */
            let temp = 0;
            if (this.bindingData != null && this.bindingData.id != null && this.bindingData.id != "") {
                selectedData = this.bindingData.id.split(',');
                /** @type {?} */
                let selectedDataName = this.bindingData.name.split(',');
                selectedData.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    farrisSelectedData.push({ "id": item, "name": selectedDataName[temp] });
                    temp = temp + 1;
                }));
            }
            return of({
                showDialog: true,
                data: {
                    filter: this.filter,
                    allData: this.allData,
                    farrisSelectedData: farrisSelectedData
                }
            });
        });
        /**
         * 帮助关闭前事件,目前无论是否都会继续走afterOk映射事件
         */
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        (arg) => {
            if (this.useBeforeCloseEvent && this.beforeClose) {
                return this.beforeClose(arg).pipe(map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    // 如果能关闭，调用后事件
                    if (val.closeDialog) {
                        this.afterConfirm.next(arg);
                    }
                    return val;
                })));
            }
            else {
                return of({ closeDialog: true });
            }
        });
        /**
         * 帮助映射后事件
         */
        this.afterOk = (/**
         * @param {?} helpdata
         * @param {?} mapfields
         * @return {?}
         */
        (helpdata, mapfields) => {
            // 如果启用了关闭前校验事件，不走这里
            if (this.useBeforeCloseEvent) {
                return;
            }
            if (helpdata) {
                // 多选的话需要处理,帮助已逗号为间隔
                if (!this.singleSelect) {
                    /** @type {?} */
                    const idList = helpdata.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.id));
                    /** @type {?} */
                    const nameList = helpdata.map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.name));
                    this.bindingData.id = idList.join();
                    this.bindingData.name = nameList.join();
                    this.displayTxt = this.bindingData.name;
                    this.afterConfirm.next(helpdata);
                }
                else {
                    // 帮助显示
                    this.displayTxt = helpdata.name;
                    if (this.showAllPathOrg) {
                        this.sysHelpService.getParentOrg(helpdata).subscribe((/**
                         * @param {?} items
                         * @return {?}
                         */
                        items => {
                            if (items && items.length > 0) {
                                helpdata.allPathOrg = items;
                            }
                            this.afterConfirm.next(helpdata);
                            console.log(helpdata);
                        }));
                    }
                    else {
                        this.afterConfirm.next(helpdata);
                    }
                }
            }
            else { // 目前清空会走这里，而且两次
                // 触发事件
                this.afterConfirm.next(helpdata);
                console.log(helpdata);
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('help');
        }
        else {
            this.i18nRes = HELP_LOCALE_ZHCHS;
        }
        // 默认不分层加载
        this.treeInfo = {
            loadDataType: 'all',
            layerType: 'parentId',
            dataField: 'treeInfo',
            pathField: 'path',
            layerField: 'layer',
            parentField: 'parentId',
            isDetailField: 'isDetail',
            treeDataIsInit: false
        };
        this.columns = [
            { title: this.i18nRes.codeField, field: 'code', searchField: 'code' },
            { title: this.i18nRes.nameField, field: 'name', searchField: 'name' },
        ];
        // 异步加载的话需要开启这两个开关
        if (this.async) {
            this.treeInfo.loadDataType = 'async';
            this.treeInfo.treeDataIsInit = true;
        }
        // webapi初始
        switch (this.sourceType) {
            case 'org':
                this.dataUri = sysOrgHelp + this.sysUtil.sysOrgWebApi;
                if (!this.title) {
                    this.title = this.i18nRes.userOrgTitle;
                }
                break;
            case 'usergroup':
                this.dataUri = userGroupHelp + this.sysUtil.userGroupWebApi;
                if (!this.title) {
                    this.title = this.i18nRes.userGroupTitle;
                }
                break;
            case 'positiongroup':
                this.dataUri = posGroupHelp + this.sysUtil.posGroupWebApi;
                if (!this.title) {
                    this.title = this.i18nRes.positionGroupTitle;
                }
                break;
            case 'rolegroup':
            default:
                this.dataUri = roleGroupHelp + this.sysUtil.roleGroupWebApi;
                if (!this.title) {
                    this.title = this.i18nRes.roleGroupTitle;
                }
                break;
        }
        // 必须要有，否则初始选中不起作用
        this.farrisLookUp.mapFields = { id: 'id', name: 'name' };
    }
    /**
     * 清空后
     * @param {?} arg
     * @return {?}
     */
    afterClear(arg) {
        this.clear.next(arg);
    }
    /**
     * 手动显示帮助
     * @return {?}
     */
    showHelp() {
        this.farrisLookUp.showDialog();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    search($event) {
        console.log($event);
    }
}
SysFarrisTreeHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'sys-farris-tree-help',
                template: "<farris-lookup-grid #farristreelookup\r\n    [(ngModel)]=\"displayTxt\"\r\n    [bindingData]=\"bindingData\"\r\n    [title]=\"title\"\r\n    [remoteSearch]=\"true\"\r\n    [editable]=\"false\"\r\n    [disabled]=\"disabled\"\r\n    [displayType]=\"'TREELIST'\"\r\n    [singleSelect]=\"singleSelect\"\r\n    [enableToSelect]=\"enableToSelect\"\r\n    [uri]=\"dataUri\"\r\n    [columns] = \"columns\"\r\n    [idField]=\"'id'\"\r\n    [treeInfo]=\"treeInfo\"\r\n    [textField]= \"'name'\"\r\n    [valueField]=\"'id'\"\r\n    [mappingFn]= \"afterOk\"\r\n    [mapFields]=\"mapFields\"\r\n    [dictPicking]=\"beforeOpen\"\r\n    [dictPicked]=\"dictPicked\"\r\n    (clear)=\"afterClear($event)\"\r\n    (search)=\"search($event)\"\r\n></farris-lookup-grid>",
                providers: [
                    { provide: ServerSideToken, useClass: SysFarrisLookupService }
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
SysFarrisTreeHelpComponent.ctorParameters = () => [
    { type: SysCommonUtilService },
    { type: SysLocaleService },
    { type: SysHelpService }
];
SysFarrisTreeHelpComponent.propDecorators = {
    disabled: [{ type: Input }],
    title: [{ type: Input }],
    async: [{ type: Input }],
    sourceType: [{ type: Input }],
    singleSelect: [{ type: Input }],
    displayTxt: [{ type: Input }],
    bindingData: [{ type: Input }],
    filter: [{ type: Input }],
    enableToSelect: [{ type: Input }],
    useBeforeCloseEvent: [{ type: Input }],
    beforeClose: [{ type: Input }],
    withPermission: [{ type: Input }],
    afterConfirm: [{ type: Output }],
    clear: [{ type: Output }],
    showAllPathOrg: [{ type: Input }],
    farrisLookUp: [{ type: ViewChild, args: ['farristreelookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SysManagerUIModule {
}
SysManagerUIModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    LookupModule,
                    ModalModule.forRoot(),
                    MessagerModule.forRoot(),
                    DatagridModule,
                    TreeTableModule,
                    SysCommonModule
                ],
                declarations: [
                    GroupNavComponent,
                    SysFarrisLookupComponent,
                    SysFarrisTreeHelpComponent
                ],
                exports: [
                    GroupNavComponent,
                    SysFarrisLookupComponent,
                    SysFarrisTreeHelpComponent
                ],
                providers: [
                    HelpFilterMap,
                    SysHelpService,
                    SysExceptionService,
                    SysCommonUtilService,
                    GroupService,
                    LanguageService,
                    CookieService,
                    SysLocaleService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据权限操作
 */
class AuthOp {
}
AuthOp.userManage = 'UserManage';
AuthOp.userView = 'UserView';
AuthOp.userAssPosition = 'UserAssPosition';
AuthOp.positionManage = 'PositionManage';
AuthOp.positionView = 'PositionView';
AuthOp.positionAssRole = 'PositionAssRole';
/**
 * 已经废弃
 */
AuthOp.positionAssUser = 'PositionAssUser';
AuthOp.roleManage = 'RoleManage';
/**
 * 已经废弃
 */
AuthOp.roleAssPosition = 'RoleAssPosition';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SysFuncOpHelpModule, SysFuncOpHelpComponent, SysFuncOperationComponent, SysManagerUIModule, AuthOp, SysFarrisLookupService, SysHelpService, userHelp, posHelp, roleHelp, userGroupHelp, posGroupHelp, roleGroupHelp, sysOrgHelp, SysExceptionService, GroupNavComponent, SysFarrisLookupComponent, SysFarrisTreeHelpComponent, SysLocaleService, HelpFilterMap, BizObjectComponent as ɵc, BizObjectService as ɵd, SysFuncOperationService as ɵa, SysFarrisFuncOperationComponent as ɵe, SysFrontUtil as ɵb, GroupService as ɵf };

//# sourceMappingURL=gsp-sys-sysmgr-ui.js.map