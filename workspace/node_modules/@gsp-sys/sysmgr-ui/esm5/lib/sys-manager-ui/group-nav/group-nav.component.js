/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, EventEmitter, Output, HostListener, ElementRef } from '@angular/core';
import { TreeTableComponent } from '@farris/ui-treetable';
import { from } from 'rxjs';
import { GroupService } from './group.service';
import { filter } from 'rxjs/operators';
import { SysLocaleService } from '../../locale/sys-locale.service';
import { NAVI_LOCALE_ZHCHS } from '../../locale/locales/zh-cn/navigiation';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
var GroupNavComponent = /** @class */ (function () {
    function GroupNavComponent(groupService, localService, notifyService, msg) {
        this.groupService = groupService;
        this.localService = localService;
        this.notifyService = notifyService;
        this.msg = msg;
        this.showHeader = true;
        this.fixedHeader = true;
        this.withCodeColumn = true;
        // 是否添加所有根节点
        this.allRoot = false;
        this.selectKeys = [];
        this.needRemote = true;
        /**
         * 显示组织类型列
         */
        this.showNodeTypeColumn = false;
        this.showFilterBar = false;
        this.searchFields = [{ label: "编号", value: "code" }, { label: "名称", value: "name" }];
        this.allColumnsTitle = '所有列';
        this.search = new EventEmitter();
        this.selectRowChanged = new EventEmitter();
        /**
         * 查询内容
         */
        this.searchInfo = '';
        /**
         * 上次查询内容
         */
        this.oldSearchInfo = '';
        this.field = '';
        /**
         * 上次查询内容
         */
        this.oldField = '';
        //上次搜索结果
        this.searchResult = [];
        //上次搜索的位置
        this.searchIndex = 0;
        /**
         * 监控拖拽事件，重绘组织TreeTable
         * @param event 事件参数
         */
        this.temp = true;
    }
    /**
     * @return {?}
     */
    GroupNavComponent.prototype.winResize = /**
     * @return {?}
     */
    function () {
        this.reSizeTreeTable();
    };
    /** 重绘Farris-TreeTable的大小 */
    /**
     * 重绘Farris-TreeTable的大小
     * @param {?=} height
     * @param {?=} width
     * @return {?}
     */
    GroupNavComponent.prototype.reSizeTreeTable = /**
     * 重绘Farris-TreeTable的大小
     * @param {?=} height
     * @param {?=} width
     * @return {?}
     */
    function (height, width) {
        if (height === void 0) { height = 0; }
        if (width === void 0) { width = 0; }
        if (height === 0) {
            height = this.farrisTreeParent.nativeElement.clientHeight;
        }
        if (width === 0) {
            width = this.farrisTreeParent.nativeElement.clientWidth;
        }
        this.farrisTt.resize({ height: height, width: width });
    };
    /**
     * @return {?}
     */
    GroupNavComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.localService) {
            this.i18nRes = this.localService.getComponentOpt('navi');
        }
        else {
            this.i18nRes = NAVI_LOCALE_ZHCHS;
        }
        this.searchFields = [{ label: this.i18nRes.codeField, value: "code" }, { label: this.i18nRes.nameField, value: "name" }];
        this.allColumnsTitle = this.i18nRes.allColumnsTitle;
        // 启用编号列
        if (this.withCodeColumn) {
            this.fixedHeader = true;
            this.showHeader = true;
            this.cols = [
                { field: 'code', title: this.i18nRes.codeField, width: 100 },
                { field: 'name', title: this.i18nRes.nameField, width: 100 }
            ];
        }
        else {
            this.fixedHeader = false;
            this.showHeader = false;
            this.cols = [
                { field: 'name', title: this.i18nRes.nameField, width: 100 }
            ];
        }
        // 需要获取数据，否则直接根据treeData初始数据
        if (this.needRemote) {
            // 所有标识
            if (this.allRoot) {
                this.treeData = [];
                /** @type {?} */
                var rootNode = {};
                rootNode.children = [];
                rootNode.data = {
                    id: 'all',
                    code: this.i18nRes.rootNodeCode,
                    name: this.i18nRes.rootNodeTitle
                };
                rootNode.expanded = true;
                rootNode.leaf = false;
                rootNode.selectable = true;
                this.treeData.push(rootNode);
            }
            else {
                this.treeData = [];
            }
            this.groupService.getByLayer(1, this.groupType, this.filter).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                _this.initTreeNodeList(val);
            }));
        }
        else { // 不需要从服务器端获取
            this.farrisTt.updateSerializedValue();
        }
        // 异步加载，通过children为0来判断从未展开过节点
        this.farrisTt.expand.pipe(filter((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.children.length === 0; }))).subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            node['showLoading'] = true;
            /** @type {?} */
            var id = node.data.id;
            // 获取系统组织
            _this.groupService.getByParentId(id, _this.groupType, _this.filter).subscribe((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                node['showLoading'] = false;
                /** @type {?} */
                var childNode = [];
                // 转换下级组织
                from(list).subscribe((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    childNode.push(_this.convertToTreeNode(item));
                }));
                // 防止出现下级节点没有数据
                if (childNode.length > 0) {
                    _this.farrisTt.appendChildren(childNode, node);
                }
                else { // 应该是无下级权限才走这里
                    node.leaf = true;
                    _this.farrisTt.updateSerializedValue();
                }
            }));
        }));
    };
    /**
     * 刷新当前页面信息
     */
    /**
     * 刷新当前页面信息
     * @return {?}
     */
    GroupNavComponent.prototype.refreshThisNav = /**
     * 刷新当前页面信息
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeData = [];
        /** @type {?} */
        var rootNode = {};
        rootNode.children = [];
        rootNode.data = {
            id: 'all',
            code: this.i18nRes.rootNodeCode,
            name: this.i18nRes.rootNodeTitle
        };
        rootNode.expanded = true;
        rootNode.leaf = false;
        rootNode.selectable = true;
        this.treeData.push(rootNode);
        this.groupService.getByLayer(1, this.groupType, this.filter).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            _this.initTreeNodeList(val);
        }));
    };
    /** 页面渲染完成后 */
    /**
     * 页面渲染完成后
     * @return {?}
     */
    GroupNavComponent.prototype.ngAfterContentInit = /**
     * 页面渲染完成后
     * @return {?}
     */
    function () {
        this.reSizeTreeTable();
    };
    /** 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     *   @param args  格式 searchData = { field: '*', value: '' };
     */
    /**
     * 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     * @param {?} args  格式 searchData = { field: '*', value: '' };
     * @return {?}
     */
    GroupNavComponent.prototype.searchData = /**
     * 搜索， 此处是分层加载，搜索时需要根据原数据进行搜索，搜索后，需要将对应父节点展示
     * @param {?} args  格式 searchData = { field: '*', value: '' };
     * @return {?}
     */
    function (args) {
        var _this = this;
        this.search.next(args);
        if (!this.filter) {
            this.filter = {};
        }
        if (!args) {
            return;
        }
        this.searchInfo = args.value;
        this.field = args.field;
        // 搜索内容为空
        if (!this.searchInfo || this.searchInfo.length <= 0) {
            this.clearSearchValue();
            return;
        }
        // 搜索内容与上次不同，重新搜索
        if (this.oldSearchInfo !== this.searchInfo || this.oldField !== this.field) {
            this.filter.isSearchTree = true;
            if (this.field === '*') {
                this.filter.codeOrName = this.searchInfo;
                this.filter.code = '';
                this.filter.name = '';
            }
            else if (this.field === 'code') {
                this.filter.code = this.searchInfo;
                this.filter.name = '';
                this.filter.codeOrName = '';
            }
            else if (this.field === 'name') {
                this.filter.name = this.searchInfo;
                this.filter.code = '';
                this.filter.codeOrName = '';
            }
            this.groupService.searchData(this.groupType, this.filter).subscribe((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                _this.treeData = [];
                _this.searchResult = [];
                _this.searchIndex = 0;
                if (list && list.length > 0) {
                    _this.treeData = _this.makeTree(list);
                    list.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        if (item.search_data) {
                            _this.searchResult.push(item.id);
                        }
                    }));
                    // 手动更新TreeTable的值
                    _this.farrisTt.updateSerializedValue();
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.farrisTt.selectNode(_this.searchResult[0]);
                        _this.farrisTt.collapseAll();
                        _this.expandParent(_this.searchResult[0]);
                        _this.farrisTt.scrollToCurrentNode();
                    }));
                }
                else {
                    // 手动更新TreeTable的值
                    _this.farrisTt.updateSerializedValue();
                    _this.notifyService.info(_this.i18nRes.searchNullData);
                }
            }));
        }
        else {
            if (this.searchResult && this.searchResult.length > 0) {
                this.searchIndex = this.searchIndex + 1;
                // 已经搜索到最后，需要重头搜索
                if (this.searchIndex === this.searchResult.length) {
                    this.searchIndex = 0;
                }
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.farrisTt.selectNode(_this.searchResult[_this.searchIndex]);
                    _this.farrisTt.collapseAll();
                    _this.expandParent(_this.searchResult[_this.searchIndex]);
                    _this.farrisTt.scrollToCurrentNode();
                }));
            }
            else {
                this.notifyService.info(this.i18nRes.searchNullData);
            }
        }
        this.oldSearchInfo = this.searchInfo;
        this.oldField = this.field;
    };
    /**
     * @return {?}
     */
    GroupNavComponent.prototype.clearSearchValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        //点击清除时，防止事件执行两次
        if (!this.temp) {
            return;
        }
        this.temp = false;
        // 所有标识
        if (this.allRoot) {
            this.treeData = [];
            /** @type {?} */
            var rootNode = {};
            rootNode.children = [];
            rootNode.data = {
                id: 'all',
                code: this.i18nRes.rootNodeCode,
                name: this.i18nRes.rootNodeTitle
            };
            rootNode.expanded = true;
            rootNode.leaf = false;
            rootNode.selectable = true;
            this.treeData.push(rootNode);
        }
        else {
            this.treeData = [];
        }
        this.filter.isSearchTree = false;
        this.filter.codeOrName = null;
        this.filter.code = null;
        this.filter.name = null;
        this.groupService.getByLayer(1, this.groupType, this.filter).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            _this.initTreeNodeList(val);
            if (_this.treeData.length > 0) {
                _this.farrisTt.selectNode(_this.treeData[0].data.id);
            }
            _this.temp = true;
        }));
        this.oldSearchInfo = '';
        this.oldField = '';
    };
    /**
     * 构造树
    */
    /**
     * 构造树
     * @private
     * @param {?} data
     * @return {?}
     */
    GroupNavComponent.prototype.makeTree = /**
     * 构造树
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var root = data.filter((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.layer === 1; })).map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var node = {
                data: t,
                children: [],
                expanded: false,
                selectable: t.farris_selectable
            };
            if (!t.isDetail) {
                node.leaf = false;
                node.children = [];
            }
            return node;
        }));
        root.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // 构造下级：children，父级的id信息
            e.children = _this.makeChildrenByParentId(data, e.data.id);
        }));
        return root;
    };
    /**
     * 父节点构造树
     */
    /**
     * 父节点构造树
     * @private
     * @param {?} datas
     * @param {?} parentId
     * @return {?}
     */
    GroupNavComponent.prototype.makeChildrenByParentId = /**
     * 父节点构造树
     * @private
     * @param {?} datas
     * @param {?} parentId
     * @return {?}
     */
    function (datas, parentId) {
        var _this = this;
        /** @type {?} */
        var x = datas.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.parentId === parentId; })).map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return {
                data: d,
                children: _this.makeChildrenByParentId(datas, d.id),
                expanded: false,
                selectable: d.farris_selectable
            };
        }));
        return x;
    };
    /**
     * 将组织实体转换为Farris-TreeNode
     */
    /**
     * 将组织实体转换为Farris-TreeNode
     * @private
     * @param {?} src
     * @return {?}
     */
    GroupNavComponent.prototype.convertToTreeNode = /**
     * 将组织实体转换为Farris-TreeNode
     * @private
     * @param {?} src
     * @return {?}
     */
    function (src) {
        /** @type {?} */
        var node = { data: src };
        // 非明细节点
        if (!src.isDetail) {
            node.leaf = false;
            node.children = [];
        }
        // TODO: 只有有权限的组织才能被选中,还是这里不做处理，发送事件时去处理
        node.selectable = src.farris_selectable;
        return node;
    };
    /**
     * 初始顶级分组，默认layer=1的情况
     * @param sysOrgList 系统组织列表
     */
    /**
     * 初始顶级分组，默认layer=1的情况
     * @private
     * @param {?} list
     * @return {?}
     */
    GroupNavComponent.prototype.initTreeNodeList = /**
     * 初始顶级分组，默认layer=1的情况
     * @private
     * @param {?} list
     * @return {?}
     */
    function (list) {
        var _this = this;
        if (!list || list.length === 0) {
            return;
        }
        from(list).subscribe((/**
         * @param {?} firstLayer
         * @return {?}
         */
        function (firstLayer) {
            /** @type {?} */
            var node = _this.convertToTreeNode(firstLayer);
            // 非明细，带往下多构造一级，假设有数据
            if (node.leaf) {
                /** @type {?} */
                var curId_1 = firstLayer.id;
                /** @type {?} */
                var childern = list.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.parentId === curId_1; }));
                from(childern).subscribe((/**
                 * @param {?} secondLayer
                 * @return {?}
                 */
                function (secondLayer) {
                    node.children.push(_this.convertToTreeNode(secondLayer));
                }));
            }
            // 如果添加所有根节点
            if (_this.allRoot) {
                _this.treeData[0].children.push(node);
            }
            else {
                _this.treeData.push(node);
            }
        }));
        // 手动更新TreeTable的值
        this.farrisTt.updateSerializedValue();
    };
    /**
     * 选择的组织行
     * @param arg 参数
     */
    /**
     * 选择的组织行
     * @param {?} event
     * @return {?}
     */
    GroupNavComponent.prototype.onNodeSelect = /**
     * 选择的组织行
     * @param {?} event
     * @return {?}
     */
    function (event) {
        console.log(event.node.data);
        this.selectRowChanged.next(event.node.data);
    };
    /**
     * 获取当前TreeTable的绑定数据
     */
    /**
     * 获取当前TreeTable的绑定数据
     * @return {?}
     */
    GroupNavComponent.prototype.getTreeData = /**
     * 获取当前TreeTable的绑定数据
     * @return {?}
     */
    function () {
        return this.treeData;
    };
    /**
     * 获取当前TreeTable的组件实例
     */
    /**
     * 获取当前TreeTable的组件实例
     * @return {?}
     */
    GroupNavComponent.prototype.getTreeTableComp = /**
     * 获取当前TreeTable的组件实例
     * @return {?}
     */
    function () {
        return this.farrisTt;
    };
    /**
     * 选中某个节点
     */
    /**
     * 选中某个节点
     * @param {?} id
     * @param {?=} isCheck
     * @return {?}
     */
    GroupNavComponent.prototype.selectNode = /**
     * 选中某个节点
     * @param {?} id
     * @param {?=} isCheck
     * @return {?}
     */
    function (id, isCheck) {
        this.farrisTt.selectNode(id, isCheck);
    };
    /**
     * 清除所有选中值
     */
    /**
     * 清除所有选中值
     * @return {?}
     */
    GroupNavComponent.prototype.unCheckAllNodes = /**
     * 清除所有选中值
     * @return {?}
     */
    function () {
        this.farrisTt.unCheckAllNodes();
    };
    /**
     * 清除所有选中值
     */
    /**
     * 清除所有选中值
     * @param {?} key
     * @return {?}
     */
    GroupNavComponent.prototype.scrollToCurrentNode = /**
     * 清除所有选中值
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (key) {
            this.farrisTt.selectNode(key);
            this.expandParent(key);
            this.farrisTt.scrollToCurrentNode();
        }
    };
    /** 逐一找到需要展开的父节点，全部展开 */
    /**
     * 逐一找到需要展开的父节点，全部展开
     * @param {?} key
     * @return {?}
     */
    GroupNavComponent.prototype.expandParent = /**
     * 逐一找到需要展开的父节点，全部展开
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var parent = this.farrisTt.findRowNode(key);
        /** @type {?} */
        var parentNode = parent.parent;
        if (parentNode) {
            while (parentNode) {
                this.farrisTt.expandNode(parentNode.id);
                parentNode = parentNode.parent;
            }
        }
        else {
            // this.farrisTt.expandNode(key);
        }
    };
    GroupNavComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-group-nav',
                    template: "<div #farrisTreeParent class=\"f-utils-fill-flex-column\" style=\"background-color: white\">\r\n    <farris-treetable #farrisTt \r\n    [data]=\"this.treeData\" \r\n    [columns]=\"cols\" \r\n    [idField]=\"'id'\" \r\n    [fixedHeader]=\"fixedHeader\" \r\n    [showHeader]=\"showHeader\" \r\n    [fit]=\"true\" \r\n    [resizableColumns]=\"true\"\r\n    [fitColumns]=\"true\"\r\n    [(showFilterBar)]=\"showFilterBar\"\r\n    (search)=\"searchData($event)\"\r\n    [searchFields]=\"searchFields\"\r\n    [allColumnsTitle]=\"allColumnsTitle\"\r\n    (clearSearchValue)=\"clearSearchValue()\"\r\n    (nodeSelected)=\"onNodeSelect($event)\">\r\n    </farris-treetable>\r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    GroupNavComponent.ctorParameters = function () { return [
        { type: GroupService },
        { type: SysLocaleService },
        { type: NotifyService },
        { type: MessagerService }
    ]; };
    GroupNavComponent.propDecorators = {
        farrisTreeParent: [{ type: ViewChild, args: ['farrisTreeParent',] }],
        farrisTt: [{ type: ViewChild, args: ['farrisTt',] }],
        title: [{ type: Input }],
        showHeader: [{ type: Input }],
        fixedHeader: [{ type: Input }],
        withCodeColumn: [{ type: Input }],
        allRoot: [{ type: Input }],
        groupType: [{ type: Input }],
        filter: [{ type: Input }],
        selectKeys: [{ type: Input }],
        needRemote: [{ type: Input }],
        showNodeTypeColumn: [{ type: Input }],
        treeData: [{ type: Input }],
        showFilterBar: [{ type: Input }],
        search: [{ type: Output }],
        selectRowChanged: [{ type: Output }],
        winResize: [{ type: HostListener, args: ['window:resize', [],] }]
    };
    return GroupNavComponent;
}());
export { GroupNavComponent };
if (false) {
    /** @type {?} */
    GroupNavComponent.prototype.farrisTreeParent;
    /** @type {?} */
    GroupNavComponent.prototype.farrisTt;
    /** @type {?} */
    GroupNavComponent.prototype.title;
    /** @type {?} */
    GroupNavComponent.prototype.showHeader;
    /** @type {?} */
    GroupNavComponent.prototype.fixedHeader;
    /** @type {?} */
    GroupNavComponent.prototype.withCodeColumn;
    /** @type {?} */
    GroupNavComponent.prototype.allRoot;
    /** @type {?} */
    GroupNavComponent.prototype.groupType;
    /** @type {?} */
    GroupNavComponent.prototype.filter;
    /** @type {?} */
    GroupNavComponent.prototype.selectKeys;
    /** @type {?} */
    GroupNavComponent.prototype.needRemote;
    /**
     * 显示组织类型列
     * @type {?}
     */
    GroupNavComponent.prototype.showNodeTypeColumn;
    /** @type {?} */
    GroupNavComponent.prototype.treeData;
    /** @type {?} */
    GroupNavComponent.prototype.showFilterBar;
    /** @type {?} */
    GroupNavComponent.prototype.searchFields;
    /** @type {?} */
    GroupNavComponent.prototype.allColumnsTitle;
    /** @type {?} */
    GroupNavComponent.prototype.search;
    /** @type {?} */
    GroupNavComponent.prototype.selectRowChanged;
    /** @type {?} */
    GroupNavComponent.prototype.cols;
    /** @type {?} */
    GroupNavComponent.prototype.i18nRes;
    /**
     * 查询内容
     * @type {?}
     */
    GroupNavComponent.prototype.searchInfo;
    /**
     * 上次查询内容
     * @type {?}
     */
    GroupNavComponent.prototype.oldSearchInfo;
    /** @type {?} */
    GroupNavComponent.prototype.field;
    /**
     * 上次查询内容
     * @type {?}
     */
    GroupNavComponent.prototype.oldField;
    /** @type {?} */
    GroupNavComponent.prototype.searchResult;
    /** @type {?} */
    GroupNavComponent.prototype.searchIndex;
    /**
     * 监控拖拽事件，重绘组织TreeTable
     * \@param event 事件参数
     * @type {?}
     */
    GroupNavComponent.prototype.temp;
    /** @type {?} */
    GroupNavComponent.prototype.groupService;
    /** @type {?} */
    GroupNavComponent.prototype.localService;
    /**
     * @type {?}
     * @private
     */
    GroupNavComponent.prototype.notifyService;
    /** @type {?} */
    GroupNavComponent.prototype.msg;
}
//# sourceMappingURL=data:application/json;base64,