/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { SysCommonUtilService, SysDataUtil } from '@gsp-sys/sysmgr-common';
import { map } from 'rxjs/operators';
import { userHelp, posHelp, roleHelp, userGroupHelp, posGroupHelp, roleGroupHelp, sysOrgHelp } from '../help-meta/sys-help-meta';
import { SysLocaleService } from '../../locale/sys-locale.service';
/**
 * 帮助服务
 */
var SysFarrisLookupService = /** @class */ (function () {
    function SysFarrisLookupService(http, sysUtil, localService) {
        this.http = http;
        this.sysUtil = sysUtil;
        this.localService = localService;
    }
    /** 初始过滤条件 */
    /**
     * 初始过滤条件
     * @private
     * @param {?} filter
     * @return {?}
     */
    SysFarrisLookupService.prototype.setFilterData = /**
     * 初始过滤条件
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        // 有过滤条件
        if (filter) {
            /** @type {?} */
            var str = JSON.stringify(filter);
            if (str !== '{}') {
                // 一定要复制
                this.filterData = JSON.parse(str);
            }
            else {
                this.filterData = null;
            }
        }
        else {
            this.filterData = null;
        }
    };
    /**
     * 添加数据
     */
    /**
     * 添加数据
     * @private
     * @param {?} src
     * @param {?} data
     * @return {?}
     */
    SysFarrisLookupService.prototype.setListData = /**
     * 添加数据
     * @private
     * @param {?} src
     * @param {?} data
     * @return {?}
     */
    function (src, data) {
        if (src) {
            src.push.apply(src, data);
        }
    };
    /** 获取过滤数据 */
    /**
     * 获取过滤数据
     * @private
     * @return {?}
     */
    SysFarrisLookupService.prototype.getFilterData = /**
     * 获取过滤数据
     * @private
     * @return {?}
     */
    function () {
        return this.filterData;
    };
    /**
     * 异步获取版本
     */
    /**
     * 异步获取版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    SysFarrisLookupService.prototype.getTreeDataAsync = /**
     * 异步获取版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        var _this = this;
        this.i18nRes = this.localService.getComponentOpt('help');
        // 解析查询json对象
        /** @type {?} */
        var treeParam = JSON.parse(params.searchValue);
        /** @type {?} */
        var farrisSelectedData = params['customData'].farrisSelectedData;
        /** @type {?} */
        var filter = {};
        // filter.withPermission = true;
        /** @type {?} */
        var category = treeParam.category;
        // 1.首次加载
        if (category === 'all') {
            filter.layer = 1;
        }
        // 2.异步展开下级
        if (category === 'children') {
            if (treeParam.hasOwnProperty('parentPath')) {
                filter.path = treeParam.parentPath;
            }
            if (treeParam.hasOwnProperty('parentLayer')) {
                // 后端搜索以下级节点为级数的节点
                filter.layer = treeParam.parentLayer + 1;
            }
            if (treeParam.hasOwnProperty('parentId')) {
                filter.parentId = treeParam.parentId;
            }
        }
        // 3.搜索
        if (category === 'search') {
            /** @type {?} */
            var searchField = treeParam.searchField;
            /** @type {?} */
            var searchValue = treeParam.searchValue.trim();
            if (searchValue) {
                filter.isSearchTree = true;
                switch (searchField) {
                    case 'code':
                        filter.code = searchValue;
                        break;
                    case 'name':
                        filter.name = searchValue;
                        break;
                    // 全部列搜索，之前是'*'
                    case '*':
                    default:
                        filter.codeOrName = searchValue;
                        break;
                }
            }
            else {
                // 搜索为空，重新加载，默认从1级开始
                filter.layer = 1;
            }
        }
        //如果是组织，请求选中数据时
        if (url === '/api/runtime/sys/v1.0/sysOrgs' && category === 'fav') {
            /** @type {?} */
            var newUrl = url + '/nullorg';
            /** @type {?} */
            var newOpt = {
                headers: this.sysUtil.getHeader()['headers'],
                params: { useView: 'true' }
            };
            return this.http.get(newUrl, newOpt).pipe(map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var gridResult = {};
                return gridResult;
            })));
        }
        // 说明有过滤条件
        if (this.getFilterData()) {
            filter = Object.assign(this.getFilterData(), filter);
            SysDataUtil.deleteEmpty(filter);
        }
        /** @type {?} */
        var paramStr = JSON.stringify(filter);
        /** @type {?} */
        var opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var gridResult = {};
            gridResult.selectedData = farrisSelectedData;
            gridResult.items = [];
            gridResult.treeInfo = {
                loadDataType: 'async',
                layerType: 'parentId',
                dataField: 'treeInfo',
                pathField: 'path',
                layerField: 'layer',
                parentField: 'parentId',
                isDetailField: 'isDetail'
            };
            gridResult.treeInfo['treeDataIsInit'] = true;
            gridResult.columns = [
                { field: 'code', title: _this.i18nRes.codeField },
                { field: 'name', title: _this.i18nRes.nameField }
            ];
            gridResult.searchFields = [
                { label: _this.i18nRes.codeField, value: 'code' },
                { label: _this.i18nRes.nameField, value: 'name' }
            ];
            // 必须要赋值
            from(val).subscribe((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.layer === 1 || !item.parentId) {
                    item.parentId = null;
                }
                item.treeInfo = {
                    parentId: item.parentId,
                    path: item.path,
                    layer: item.layer,
                    isDetail: item.isDetail
                };
            }));
            // 如果是搜索的话，需要自己构造树
            if (filter.isSearchTree) {
                gridResult.items = _this.makeTreeByParent(val, 'parentId', 'id');
                console.log(gridResult.items);
            }
            else {
                // 有结果，普通分层加载
                if (val && val.length > 0) {
                    from(val).subscribe((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        gridResult.items.push(_this.convertToTreeNode(item));
                    }));
                }
            }
            return gridResult;
        })));
    };
    /**
     * 将树节点转换为Farris TreeNode
     */
    /**
     * 将树节点转换为Farris TreeNode
     * @private
     * @param {?} src
     * @return {?}
     */
    SysFarrisLookupService.prototype.convertToTreeNode = /**
     * 将树节点转换为Farris TreeNode
     * @private
     * @param {?} src
     * @return {?}
     */
    function (src) {
        /** @type {?} */
        var node = {};
        node.data = src;
        node.children = [];
        node.selectable = src.farris_selectable;
        node.leaf = src.isDetail;
        node.parent = src.parentId;
        // 这一条必须得加，否则不行
        node.id = node.data.id;
        // 搜索的时候最末级添加了这个属性，不需要展开
        if (src.hasOwnProperty('expanded')) {
            node.expanded = src.expanded;
        }
        return node;
    };
    /** 按照parent码构造树 */
    /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    SysFarrisLookupService.prototype.makeTreeByParent = /**
     * 按照parent码构造树
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    function (datas, parentField, keyField) {
        var _this = this;
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        var pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (!x[parentField]) {
                return true;
            }
            // 断层的这种，应该也属于一级
            /** @type {?} */
            var p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            function (parent) { return parent[keyField] === x[parentField]; }));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        var treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var node = _this.convertToTreeNode(x);
            treedata.push(node);
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    };
    /** 找到子节点 */
    /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    SysFarrisLookupService.prototype.findChildrenByParent = /**
     * 找到子节点
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    function (parent, datas, parentField, keyField) {
        var _this = this;
        /** @type {?} */
        var childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        function (childitem) {
            if (childitem[parentField] === parent.data[keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                /** @type {?} */
                var node = _this.convertToTreeNode(child);
                parent.children.push(node);
                _this.findChildrenByParent(node, datas, parentField, keyField);
            }));
        }
    };
    /**
     * 全部获取版本版本
     */
    /**
     * 全部获取版本版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    SysFarrisLookupService.prototype.getTreeData = /**
     * 全部获取版本版本
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        /** @type {?} */
        var filter = {};
        // 说明有过滤条件
        if (this.getFilterData()) {
            filter = Object.assign(this.getFilterData(), filter);
            SysDataUtil.deleteEmpty(filter);
        }
        /** @type {?} */
        var paramStr = JSON.stringify(filter);
        /** @type {?} */
        var opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val.length > 0) {
                val.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (item.layer == 1 || item.parentId == null) {
                        item.parentId = '';
                    }
                    // 满足前端结构
                    item.treeInfo = {
                        parentId: item.parentId,
                        path: item.path,
                        layer: item.layer,
                        isDetail: item.isDetail
                    };
                    item.selectable = false;
                }));
            }
            else {
                val = [];
            }
            return { items: val };
        })));
    };
    /** 获取列表数据 */
    /**
     * 获取列表数据
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    SysFarrisLookupService.prototype.getGridData = /**
     * 获取列表数据
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        var _this = this;
        /** @type {?} */
        var index = params.pageIndex;
        /** @type {?} */
        var size = params.pageSize;
        /** @type {?} */
        var farrisSelectedData = params['customData'].farrisSelectedData;
        // 目前这个地方有问题，第一次的时候传递不过来
        if (!index) {
            /** @type {?} */
            var customData = params['customData'];
            index = customData.filter.pageIndex;
            size = customData.filter.pageSize;
        }
        /** @type {?} */
        var param = {
            pageIndex: index,
            pageSize: size,
        };
        // 是否有搜索
        /** @type {?} */
        var filterStr = params.searchValue;
        /** @type {?} */
        var filterObj = JSON.parse(filterStr);
        /** @type {?} */
        var searchField = filterObj.searchField;
        /** @type {?} */
        var searchValue = filterObj.searchValue;
        // 有过滤查询,有可能搜索值为空，这时候是不需要搜索的
        if (searchField && searchValue) {
            switch (searchField) {
                case 'code':
                    param.code = searchValue;
                    break;
                case 'name':
                    param.name = searchValue;
                    break;
                // 全部列搜索，之前是'*'
                case '*':
                default:
                    param.codeOrName = searchValue;
                    break;
            }
        }
        // 说明有过滤条件
        if (this.getFilterData()) {
            param = Object.assign(this.getFilterData(), param);
            SysDataUtil.deleteEmpty(param);
        }
        console.log(param);
        /** @type {?} */
        var paramStr = JSON.stringify(param);
        /** @type {?} */
        var opt = {
            headers: this.sysUtil.getHeader()['headers'],
            params: { param: paramStr }
        };
        return this.http.get(url, opt).pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val.data) {
                // 将本次分页的数据附加到当前帮助的列表中
                _this.setListData(params['customData'].allData, val.data);
            }
            return {
                items: val.data,
                total: val.totalCount,
                pageInfo: {
                    pageIndex: index,
                    pageSize: size,
                    pageList: [20, 40, 60, 80, 100],
                    enablePager: true
                },
                selectedData: farrisSelectedData
            };
        })));
    };
    /** 取数 */
    /**
     * 取数
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    SysFarrisLookupService.prototype.getData = /**
     * 取数
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        console.log(params);
        console.log(url);
        /** @type {?} */
        var filter = params['customData'].filter;
        this.setFilterData(filter);
        /** @type {?} */
        var typeIndex = url.indexOf('\/');
        /** @type {?} */
        var httpUrl = url.substring(typeIndex, url.length);
        /** @type {?} */
        var helpType = url.substring(0, typeIndex);
        switch (helpType) {
            case userHelp:
            case posHelp:
            case roleHelp:
                return this.getGridData(httpUrl, params);
            case userGroupHelp:
            case posGroupHelp:
            case roleGroupHelp:
            case sysOrgHelp:
                return this.getTreeDataAsync(httpUrl, params);
            default:
                break;
        }
    };
    SysFarrisLookupService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SysFarrisLookupService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SysCommonUtilService },
        { type: SysLocaleService }
    ]; };
    return SysFarrisLookupService;
}());
export { SysFarrisLookupService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.filterData;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.i18nRes;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.sysUtil;
    /**
     * @type {?}
     * @private
     */
    SysFarrisLookupService.prototype.localService;
}
//# sourceMappingURL=data:application/json;base64,