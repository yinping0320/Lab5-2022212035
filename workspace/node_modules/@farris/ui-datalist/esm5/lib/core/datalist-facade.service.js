/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { defaultDataState } from './types/index';
import { BaseDataFacadeService } from '@farris/ui-common';
var DataListFacadeService = /** @class */ (function (_super) {
    tslib_1.__extends(DataListFacadeService, _super);
    function DataListFacadeService() {
        var _this = _super.call(this, defaultDataState) || this;
        _this.containerHeight$ = _this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return state.containerHeight;
        })));
        _this.options$ = _this.state$;
        return _this;
    }
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    DataListFacadeService.prototype.updateContainerSize = /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (width, height) {
        // tslint:disable-next-line:variable-name
        /** @type {?} */
        var _height = height;
        if (this._state.showHeader) {
            _height = height - this._state.headerHeight;
        }
        this.updateState({ containerHeight: _height, width: width, height: height });
    };
    DataListFacadeService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataListFacadeService.ctorParameters = function () { return []; };
    return DataListFacadeService;
}(BaseDataFacadeService));
export { DataListFacadeService };
if (false) {
    /** @type {?} */
    DataListFacadeService.prototype.containerHeight$;
    /** @type {?} */
    DataListFacadeService.prototype.options$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWxpc3QtZmFjYWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFsaXN0LyIsInNvdXJjZXMiOlsibGliL2NvcmUvZGF0YWxpc3QtZmFjYWRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTFEO0lBQzJDLGlEQUFvQztJQVMzRTtRQUFBLFlBQ0ksa0JBQU0sZ0JBQWdCLENBQUMsU0FDMUI7UUFWRCxzQkFBZ0IsR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDL0IsR0FBRzs7OztRQUFDLFVBQUMsS0FBb0I7WUFDckIsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDO1FBQ2pDLENBQUMsRUFBQyxDQUNMLENBQUM7UUFFRixjQUFRLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQzs7SUFJdkIsQ0FBQzs7Ozs7O0lBRUQsbURBQW1COzs7OztJQUFuQixVQUFvQixLQUFhLEVBQUUsTUFBYzs7O1lBRXpDLE9BQU8sR0FBRyxNQUFNO1FBQ3BCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDeEIsT0FBTyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLEtBQUssT0FBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDOztnQkF0QkosVUFBVTs7OztJQXVCWCw0QkFBQztDQUFBLEFBdkJELENBQzJDLHFCQUFxQixHQXNCL0Q7U0F0QlkscUJBQXFCOzs7SUFDOUIsaURBSUU7O0lBRUYseUNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGRlZmF1bHREYXRhU3RhdGUsIERhdGFMaXN0U3RhdGUgfSBmcm9tICcuL3R5cGVzL2luZGV4JztcclxuaW1wb3J0IHsgQmFzZURhdGFGYWNhZGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGF0YUxpc3RGYWNhZGVTZXJ2aWNlIGV4dGVuZHMgQmFzZURhdGFGYWNhZGVTZXJ2aWNlPERhdGFMaXN0U3RhdGU+IHtcclxuICAgIGNvbnRhaW5lckhlaWdodCQgPSB0aGlzLnN0YXRlJC5waXBlKFxyXG4gICAgICAgIG1hcCgoc3RhdGU6IERhdGFMaXN0U3RhdGUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmNvbnRhaW5lckhlaWdodDtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICBvcHRpb25zJCA9IHRoaXMuc3RhdGUkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKGRlZmF1bHREYXRhU3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUNvbnRhaW5lclNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gICAgICAgIGxldCBfaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZS5zaG93SGVhZGVyKSB7XHJcbiAgICAgICAgICAgIF9oZWlnaHQgPSBoZWlnaHQgLSB0aGlzLl9zdGF0ZS5oZWFkZXJIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHsgY29udGFpbmVySGVpZ2h0OiBfaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0IH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==