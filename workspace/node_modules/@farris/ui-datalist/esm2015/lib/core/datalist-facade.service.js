/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { defaultDataState } from './types/index';
import { BaseDataFacadeService } from '@farris/ui-common';
export class DataListFacadeService extends BaseDataFacadeService {
    constructor() {
        super(defaultDataState);
        this.containerHeight$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            return state.containerHeight;
        })));
        this.options$ = this.state$;
    }
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    updateContainerSize(width, height) {
        // tslint:disable-next-line:variable-name
        /** @type {?} */
        let _height = height;
        if (this._state.showHeader) {
            _height = height - this._state.headerHeight;
        }
        this.updateState({ containerHeight: _height, width, height });
    }
}
DataListFacadeService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataListFacadeService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    DataListFacadeService.prototype.containerHeight$;
    /** @type {?} */
    DataListFacadeService.prototype.options$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWxpc3QtZmFjYWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFsaXN0LyIsInNvdXJjZXMiOlsibGliL2NvcmUvZGF0YWxpc3QtZmFjYWRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHMUQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHFCQUFvQztJQVMzRTtRQUNJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBVDVCLHFCQUFnQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUMvQixHQUFHOzs7O1FBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUU7WUFDekIsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDO1FBQ2pDLENBQUMsRUFBQyxDQUNMLENBQUM7UUFFRixhQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUl2QixDQUFDOzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxLQUFhLEVBQUUsTUFBYzs7O1lBRXpDLE9BQU8sR0FBRyxNQUFNO1FBQ3BCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDeEIsT0FBTyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7OztZQXRCSixVQUFVOzs7Ozs7SUFFUCxpREFJRTs7SUFFRix5Q0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgZGVmYXVsdERhdGFTdGF0ZSwgRGF0YUxpc3RTdGF0ZSB9IGZyb20gJy4vdHlwZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBCYXNlRGF0YUZhY2FkZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEYXRhTGlzdEZhY2FkZVNlcnZpY2UgZXh0ZW5kcyBCYXNlRGF0YUZhY2FkZVNlcnZpY2U8RGF0YUxpc3RTdGF0ZT4ge1xyXG4gICAgY29udGFpbmVySGVpZ2h0JCA9IHRoaXMuc3RhdGUkLnBpcGUoXHJcbiAgICAgICAgbWFwKChzdGF0ZTogRGF0YUxpc3RTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuY29udGFpbmVySGVpZ2h0O1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIG9wdGlvbnMkID0gdGhpcy5zdGF0ZSQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoZGVmYXVsdERhdGFTdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQ29udGFpbmVyU2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXHJcbiAgICAgICAgbGV0IF9oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlLnNob3dIZWFkZXIpIHtcclxuICAgICAgICAgICAgX2hlaWdodCA9IGhlaWdodCAtIHRoaXMuX3N0YXRlLmhlYWRlckhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUoeyBjb250YWluZXJIZWlnaHQ6IF9oZWlnaHQsIHdpZHRoLCBoZWlnaHQgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19