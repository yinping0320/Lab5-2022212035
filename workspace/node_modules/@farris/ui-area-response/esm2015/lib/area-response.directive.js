/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, NgZone } from '@angular/core';
import ResizeObserver from 'resize-observer-polyfill';
export class FAreaResponseDirective {
    /**
     * @param {?} el
     * @param {?} ngzone
     * @param {?} render
     */
    constructor(el, ngzone, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.render = render;
        this.ro = null;
        // 顺序不一致，不用object，用数组
        this.breakPoints = [
            { size: 'sm', width: 576 },
            { size: 'md', width: 768 },
            { size: 'lg', width: 888 },
            { size: 'xl', width: 1200 },
            { size: 'el', width: 1690 }
        ];
        this.clsNames = [];
        /**
         * 是否处理宽度不固定
         */
        this.autoResponse = true;
        /**
         * 只处理固定宽度；
         */
        this.enableResponse = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.supportResponse();
        this.bindEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('enableResponse')) {
            this.supportResponse();
        }
        if (changes.hasOwnProperty('autoResponse')) {
            this.bindEvent();
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindEvent() {
        if (this.enableResponse && this.autoResponse) {
            // 已绑定过
            if (this.ro) {
                return;
            }
            else {
                this.ngzone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    this.ro = new ResizeObserver((/**
                     * @param {?} entries
                     * @param {?} observer
                     * @return {?}
                     */
                    (entries, observer) => {
                        this.widthInterval(entries[0].contentRect.width);
                    }));
                    this.ro.observe(this.el.nativeElement);
                }));
            }
        }
        else {
            if (this.ro) {
                this.ro.unobserve(this.el.nativeElement);
                this.ro = null;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    supportResponse() {
        // 启用响应
        if (this.enableResponse) {
            this.render.addClass(this.el.nativeElement, 'f-area-response');
            this.widthInterval();
        }
        else {
            // 移除对应的样式
            this.render.removeClass(this.el.nativeElement, 'f-area-response');
            for (let m = this.clsNames.length; m > 0; m--) {
                this.render.addClass(this.el.nativeElement, 'f-area-response--' + this.clsNames[m]);
                this.clsNames = [];
            }
        }
        this.bindEvent();
    }
    /**
     * @private
     * @param {?=} tWidth
     * @return {?}
     */
    widthInterval(tWidth = 0) {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let result = [];
                if (!this.el) {
                    return;
                }
                /** @type {?} */
                const areaWidth = tWidth ? tWidth : this.el.nativeElement.getBoundingClientRect().width;
                /** @type {?} */
                let width = parseFloat(areaWidth);
                for (let k = 0; k < this.breakPoints.length; k++) {
                    if (this.breakPoints[k]['width'] <= width) {
                        result.push(this.breakPoints[k]['size']);
                    }
                }
                if (this.clsNames.join(',') != result.join(',')) {
                    // 旧的比新的多，应该移除class
                    /** @type {?} */
                    let distance = this.clsNames.length - result.length;
                    if (distance > 0) {
                        for (let m = result.length; m < this.clsNames.length; m++) {
                            this.render.removeClass(this.el.nativeElement, 'f-area-response--' + this.clsNames[m]);
                        }
                    }
                    else {
                        for (let m = this.clsNames.length; m < result.length; m++) {
                            this.render.addClass(this.el.nativeElement, 'f-area-response--' + result[m]);
                        }
                    }
                    this.clsNames = [...result];
                }
            }), 0);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            this.ro.unobserve(this.el.nativeElement);
            this.ro = null;
        }
    }
}
FAreaResponseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[f-area-response]'
            },] }
];
/** @nocollapse */
FAreaResponseDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
FAreaResponseDirective.propDecorators = {
    autoResponse: [{ type: Input }],
    enableResponse: [{ type: Input, args: ['f-area-response',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FAreaResponseDirective.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FAreaResponseDirective.prototype.breakPoints;
    /**
     * @type {?}
     * @private
     */
    FAreaResponseDirective.prototype.clsNames;
    /**
     * 是否处理宽度不固定
     * @type {?}
     */
    FAreaResponseDirective.prototype.autoResponse;
    /**
     * 只处理固定宽度；
     * @type {?}
     */
    FAreaResponseDirective.prototype.enableResponse;
    /**
     * @type {?}
     * @private
     */
    FAreaResponseDirective.prototype.el;
    /** @type {?} */
    FAreaResponseDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FAreaResponseDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,