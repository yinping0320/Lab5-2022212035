{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-multi-select/lib/multi-select.component.ts","ng://@farris/ui-multi-select/lib/multi-select.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","defineProperty","MultiSelectComponent","_ds","val","_this_1","searchValue","toJSON","copyDataSource","map","cloneDeep","setTimeout","initRightData","selectedId","_rightData","filter","undefined","cd","detectChanges","_searchValue","leftCheckitems_1","_leftCheckeds","displayType","tt","selections","forEach","id","data","dataSource","ids","keys","checkedNodes","searchHandle","search","textField","valueField","getListDataBySearch","updateTimer1","clearTimeout","canCheckLength","getCanCheckLength","ngOnInit","emptyData","localeService","getValue","moveItem","showCheckbox","enableMoveMore","ngAfterViewInit","elt","el","nativeElement","render","addClass","fit","setStyle","height","noDataMoveMessage","ngAfterContentInit","templates","item","getType","displayTemplate","template","ngOnChanges","changes","isFirstChange","cv","currentValue","pv","previousValue","clearSelections","JSON","stringify","total","isTree","serializedValue","rn","node","selectable","canChecked","d","leftCount","result","Array","txt","getText","textCompare","toLowerCase","indexOf","valueCompare","searchValueField","clearRight","idField","convertTreeDataToPlainData","getTreeSelectionsById","getListSelectionsById","moveAllToLeft","checkLeftData","checkeds","k","reduce","find","updateAllTreeNodes","updateTimer2","allTreeNodes","state","rowNodes","_this","reusltObj","isArray","isChecked","direction","keyVal","_rightCheckeds","findIndex","c","onCheckValueChange","leftDataChecked","hasCheckeds","dir","rightDataChecked","emit","isCheck","rightSelectedItem","unSelected","selected","selectItem","_chkids_1","clearAll","selectedIdChange","nodes","children","beforeMove","subscribe","obj","items","target","toString","ids_1","v","findRowNodes","unCheckedNodes","_ids","selectionsChange","changeSelectIds","afterMove","values","moveToRight","moveData","_a","mesagerSer","warning","moveAllToRight","_dataSource","visible","moveToLeft","_getSelectInfo","key_1","index","key","moveTop","moveMore","unshift","splice","moveUp","moveMore2","tempArr","moveDown","len","moveBottom","number","join","rightActiveDom","querySelector","scrollIntoViewIfNeeded","scrollIntoView","dataChange","commonUtils","getCheckedItemsFromDataSource","getCheckedFirstIndexAndLastIndex","_chkItems","first_1","last_1","first","last","type","_chkItems_1","updateActiveIndex","tarIndex","downIdx","idx","rightActiveIndex","rightDataClicked","$event","isCtrlKey","ctrlKey","isShiftKey","shiftKey","ul","closest","style","userSelect","setCheckItems","isAdd","focusIndex","start","end","selectItems","tslib_1.__spread","className","clearRightCheckeds","onRightItemClick","Component","args","selector","MessagerService","Injector","ChangeDetectorRef","Input","Output","ContentChildren","FarrisTemplateDirective","ViewChild","injector","enableTargetSort","showCascadeControl","leftTitle","rightTitle","enableSearch","enableReset","wordWrap","EventEmitter","sortMove","enableCascase","trackByItems","get","ElementRef","Renderer2","LocaleService","CommonUtils","DisplayTextComponent","_getText","ms","side","MultiSelectModule","NgModule","imports","CommonModule","PerfectScrollbarModule","FarrisCommonModule","TreeTableModule","LocaleModule","FormsModule","MessagerModule","forRoot","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { cloneDeep } from 'lodash-es';\r\n/*\r\n* @Author: ç¯çç§æ(lucas huang)\r\n* @Date: 2018-10-27 10:55:02\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-10-16 14:14:14\r\n* @Company: Inspur\r\n* @Version: v0.0.1\r\n*/\r\n\r\nimport {\r\n    Component, OnInit, Input, ViewChild, Output, EventEmitter,\r\n    TemplateRef, ContentChildren, QueryList, AfterContentInit, AfterViewInit,\r\n    OnChanges, SimpleChanges, Injector, ChangeDetectorRef, ElementRef, Renderer2\r\n} from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { CommonUtils, FarrisTemplateDirective } from '@farris/ui-common';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n\r\n@Component({\r\n    selector: 'multi-select',\r\n    templateUrl: './multi-select.component.html',\r\n    styleUrls: [\r\n        './multi-select.css'\r\n    ]\r\n})\r\n\r\nexport class MultiSelectComponent implements OnInit, OnChanges, AfterViewInit, AfterContentInit {\r\n\r\n    private allTreeNodes = [];\r\n    private _ds: any = [];\r\n    get dataSource() {\r\n        return this._ds;\r\n    }\r\n    @Input() set dataSource(val: any) {\r\n        val = val  || [];\r\n        this._ds = val;\r\n        if (!this.searchValue) {\r\n            if (val.length) {\r\n                if (val[0].toJSON) {\r\n                    this.copyDataSource = val.map(n => n.toJSON());\r\n                } else {\r\n                    this.copyDataSource = cloneDeep(val);\r\n                }\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.initRightData(this.selectedId, false);\r\n            });\r\n        }\r\n    }\r\n\r\n    @Input() displayType: 'List' | 'Tree' = 'List';\r\n    /** æ¾ç¤ºå³ä¾§ä¸ç§»ä¸ç§»æé® */\r\n    @Input() enableTargetSort = true;\r\n\r\n    @Input() idField: string;\r\n\r\n    @Input() textField: string;\r\n    @Input() valueField: string;\r\n\r\n    @Input() height = 445;\r\n    @Input() fit = true;\r\n    @Input() noDataMoveMessage = 'è¯·éæ©è¦ç§»å¨çæ°æ®ã';\r\n    /** æ ç»ææ¶ï¼æ¯å¦æ¾ç¤ºçº§èéæ©æ§å¶éé¡¹ */\r\n    @Input() showCascadeControl = false;\r\n\r\n    @Input() leftTitle = 'æªéæ©';\r\n    @Input() rightTitle = 'å·²éæ©';\r\n    @Input() selectedId: any;\r\n    @Input() enableSearch = true;\r\n    /** ç®æ æ°æ®æºæ¾ç¤ºcheckbox åè®¸å¤é */\r\n    @Input() showCheckbox = false;\r\n    /** å³ä¾§å·²éå¯ç¨éç½®ï¼å¨å¯ç¨å¤éæ¡æ¶ï¼æ¯å¦æ¾ç¤ºéç½®æé®ï¼å³åæ¶å³ä¾§ææå¾éé¡¹ï¼é»è®¤ä¸º false */\r\n    @Input() enableReset = false;\r\n\r\n    /** å¯ç¨æè¡ */\r\n    @Input() wordWrap = false;\r\n    /** å¯ç¨å¤æ¡è®°å½ä¸èµ·ç§»å¨ï¼é»è®¤ false */\r\n    @Input() enableMoveMore = false;\r\n\r\n    /** æ¥è¯¢æ¶å¯¹valueå­æ®µè¿è¡æ¥è¯¢ï¼é»è®¤ä¸º true; falseæ¶ä»æ¥è¯¢ææ¬å­æ®µ */\r\n    @Input() searchValueField = true;\r\n   \r\n\r\n    @Output() dataChange = new EventEmitter();\r\n    @Output() selected = new EventEmitter();\r\n    @Output() unSelected = new EventEmitter();\r\n    @Output() selectedIdChange = new EventEmitter();\r\n\r\n    @Output() beforeMove = new EventEmitter();\r\n    @Output() afterMove = new EventEmitter();\r\n\r\n    @Output() sortMove = new EventEmitter();\r\n\r\n    @ContentChildren(FarrisTemplateDirective) templates: QueryList<FarrisTemplateDirective>;\r\n    @ViewChild('tt') tt: TreeTableComponent;\r\n\r\n\r\n    // å³ä¾§éä¸­çæ°æ® { [keyVal]: obj, [keyVal]: obj ... }\r\n    _rightCheckeds: any;\r\n    // å·¦ä¾§éä¸­çæ°æ® { [keyVal]: obj, [keyVal]: obj ... }\r\n    _leftCheckeds: any = {};\r\n\r\n    // å³ä¾§æ°æ®\r\n    _rightData = [];\r\n    get selections() {\r\n        return this._rightData;\r\n    }\r\n    set selections(val: any) {\r\n        this._rightData = val.filter(n => n !== undefined && n !== null);\r\n        this.cd.detectChanges();\r\n    }\r\n    get searchValue() {\r\n        return this._searchValue;\r\n    }\r\n    set searchValue(value: string) {\r\n        this._searchValue = value;\r\n\r\n        // this.copyDataSource = [...this.dataSource];\r\n\r\n        if (value === undefined || value === null || value === '') {\r\n            let leftCheckitems = {...this._leftCheckeds};\r\n\r\n            if (this.displayType === 'Tree') {\r\n                this.tt.selections.forEach(n => {\r\n                    leftCheckitems[n.id] = n.data;\r\n                });\r\n            }\r\n            this.dataSource = this.copyDataSource;\r\n\r\n\r\n            if (this.displayType === 'Tree') {\r\n                setTimeout(() => {\r\n                    const ids = Object.keys(leftCheckitems);\r\n                    if (ids && ids.length) {\r\n                        this.tt.checkedNodes(ids);\r\n                    }\r\n                });\r\n            } else  {\r\n                this._leftCheckeds = {...leftCheckitems};\r\n            }\r\n            \r\n            return;\r\n        }\r\n        if (this.displayType === 'Tree') {\r\n            // const newDataSource = this.getTreeDataBySearch(this._searchValue, this.allTreeNodes);\r\n            this.tt.searchHandle.search(`${this.textField},${this.valueField}`, this._searchValue)\r\n            \r\n        } else {\r\n            this.dataSource = this.getListDataBySearch(this._searchValue, this.copyDataSource);\r\n        }\r\n\r\n        if (this.updateTimer1) {\r\n            clearTimeout(this.updateTimer1);\r\n        }\r\n        this.updateTimer1 = setTimeout(() => {\r\n            this.canCheckLength = this.getCanCheckLength();\r\n        });\r\n    }\r\n\r\n    canCheckLength = 0;\r\n    leftCount = 0;\r\n    _searchValue = '';\r\n    // å¤å¶ä¸ä»½æ°æ®æº\r\n    private copyDataSource: any;\r\n    // æ å½¢ç»æçæ°æ®length\r\n    treeDataLength: number;\r\n    displayTemplate: TemplateRef<any>;\r\n\r\n\r\n    emptyData;\r\n    el: ElementRef;\r\n    render: Renderer2;\r\n    localeService: LocaleService;\r\n    commonUtils: CommonUtils;\r\n    // çº§èéæ©æ§å¶éé¡¹\r\n    enableCascase = true;\r\n\r\n    private updateTimer1 = null;\r\n    private updateTimer2 = null;\r\n\r\n    rightSelectedItem = null;\r\n    rightActiveIndex = -1;\r\n\r\n    constructor(private mesagerSer: MessagerService, private injector: Injector, private cd: ChangeDetectorRef) {\r\n        if (!Object.values) {\r\n            Object.values = function (obj) {\r\n                return Object.keys(obj).map(function (e) {\r\n                    return obj[e];\r\n                });\r\n            };\r\n        }\r\n        this.el = this.injector.get<ElementRef>(ElementRef);\r\n        this.render = this.injector.get(Renderer2);\r\n        this.localeService = this.injector.get(LocaleService);\r\n\r\n        this.commonUtils = this.injector.get(CommonUtils, null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.copyDataSource = this.dataSource ? [...this.dataSource] : [];\r\n        this.emptyData = this.localeService.getValue('multiSelect.emptyData') || 'ææ æ°æ®';\r\n        this.initRightData(this.selectedId);\r\n        this.moveItem();\r\n\r\n        if (!this.showCheckbox && this.enableMoveMore){\r\n            this.showCheckbox = true;\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        const elt = this.el.nativeElement;\r\n        this.render.addClass(elt, 'row');\r\n        this.render.addClass(elt, 'f-multi-select');\r\n        if (this.fit === true) {\r\n            this.render.addClass(elt, 'f-utils-fill');\r\n            this.render.setStyle(elt, 'height', '100%');\r\n        } else {\r\n            if (!!this.height) {\r\n                this.render.setStyle(elt, 'height', this.height + 'px');\r\n            }\r\n        }\r\n\r\n        this.noDataMoveMessage =\r\n            this.noDataMoveMessage === 'è¯·éæ©è¦ç§»å¨çæ°æ®ã' ? this.localeService.getValue('multiSelect.noDataMoveMessage') : this.noDataMoveMessage;\r\n\r\n        if (this.tt && this.selectedId) {\r\n            this.tt.checkedNodes(this.selectedId);\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'text':\r\n                    this.displayTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.dataSource && !changes.dataSource.isFirstChange()) {\r\n            this._leftCheckeds = {};\r\n            this._rightData = [];\r\n        }\r\n\r\n        if (changes.selectedId && !changes.selectedId.isFirstChange()) {\r\n            const cv = changes.selectedId.currentValue || [];\r\n            const pv = changes.selectedId.previousValue || [];\r\n\r\n\r\n            // å½è®¾ç½®éä¸­çID ä¸ºç©ºæ¶ï¼æ§è¡æ¸ç©ºå³ä¾§æ°æ®\r\n            if (!cv.length) {\r\n                this.clearSelections();\r\n                // TFS 611928\r\n                this.canCheckLength = this.getCanCheckLength();\r\n                return;\r\n            }\r\n\r\n            if (cv.length != pv.length || JSON.stringify(cv) !== JSON.stringify(pv)) {\r\n                this.initRightData(changes.selectedId.currentValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    getCanCheckLength() {\r\n        let n = 0;\r\n        let total = 0;\r\n        if (this.isTree()) {\r\n            this.tt.serializedValue.forEach(rn => {\r\n                if (rn.node.selectable) {\r\n                    if (this.canChecked(rn.node)) {\r\n                        n++;\r\n                    }\r\n                }\r\n            });\r\n            total = this.tt.serializedValue.length;\r\n        } else {\r\n            this.dataSource.forEach(d => {\r\n                if (this.canChecked(d)) {\r\n                    n++;\r\n                }\r\n            });\r\n            total = this.dataSource.length;\r\n        }\r\n        this.leftCount = total;\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * è·åæç´¢çæ°æ®ï¼Listç»æ\r\n     * @param value æç´¢çå­ç¬¦\r\n     * @param data æ°æ®\r\n     */\r\n    private getListDataBySearch(value: string, data: any[]): any[] {\r\n        const result = [];\r\n        value = '' + value;\r\n        if (data instanceof Array) {\r\n            data.forEach(item => {\r\n\r\n                let txt = '';\r\n                let val = '';\r\n\r\n                if (this.textField) {\r\n                    txt = '' + this.getText(item);\r\n                }\r\n\r\n                if (this.valueField) {\r\n                    val = '' + this.getValue(item);\r\n                }\r\n\r\n                const textCompare = () => {\r\n                    return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;\r\n                }\r\n\r\n                const valueCompare = () => {\r\n                    return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;\r\n                }\r\n\r\n\r\n                if (this.searchValueField) {\r\n                    if (this.textField && this.valueField) {\r\n                        if (textCompare() || valueCompare()) {\r\n                            result.push(item);\r\n                        }\r\n                    } else if (this.textField && !this.valueField) {\r\n                        if (textCompare()) {\r\n                            result.push(item);\r\n                        }\r\n                    } else if (!this.textField && this.valueField) {\r\n                        if (valueCompare()) {\r\n                            result.push(item);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (textCompare()) {\r\n                        result.push(item);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * è·ååå«valueå¼å¾èç¹\r\n     */\r\n    // private getTreeDataByRecursive(value: string, data: any[], newData: any[]) {\r\n    //     value = '' + value;\r\n\r\n    //     data.forEach(item => {\r\n\r\n    //         let txt = '';\r\n    //         let val = '';\r\n\r\n    //         if (this.textField) {\r\n    //             txt = '' + this.getText(item.data);\r\n    //         }\r\n\r\n    //         if (this.valueField) {\r\n    //             val = '' + this.getValue(item.data);\r\n    //         }\r\n\r\n    //         const textCompare = () => {\r\n    //             return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;\r\n    //         }\r\n\r\n    //         const valueCompare = () => {\r\n    //             return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;\r\n    //         }\r\n\r\n\r\n    //         if (this.textField && this.valueField) {\r\n    //             if (textCompare() || valueCompare()) {\r\n    //                 newData.push(item);\r\n    //             }\r\n    //         } else if (this.textField && !this.valueField) {\r\n    //             if (textCompare()) {\r\n    //                 newData.push(item);\r\n    //             }\r\n    //         } else if (!this.textField && this.valueField) {\r\n    //             if (valueCompare()) {\r\n    //                 newData.push(item);\r\n    //             }\r\n    //         }\r\n    //         if (item.children && item.children.length) {\r\n    //             this.getTreeDataByRecursive(value, item.children, newData);\r\n    //         }\r\n    //     });\r\n    // }\r\n    /**\r\n     * è·åæ ¹èç¹\r\n     */\r\n    // private getTreeRootNode(data: any[], rootData: any[]) {\r\n    //     data.forEach(item => {\r\n    //         if (item.parent === null) {\r\n    //             rootData.push(item);\r\n    //         } else {\r\n    //             this.getTreeRootNode(new Array(item.parent), rootData);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * è·åæç´¢çæ°æ®ï¼Treeç»æ\r\n     * @param value æç´¢çå­ç¬¦\r\n     * @param data æ°æ®\r\n     */\r\n    // private getTreeDataBySearch(value: string, data: any[]): any[] {\r\n    //     const rootNodes = [];\r\n    //     const nodes = [];\r\n    //     const finalRes = [];\r\n    //     const uniqueId = [];\r\n    //     // è·ååå«valueå¼å¾èç¹\r\n    //     this.getTreeDataByRecursive(value, data, nodes);\r\n    //     // è·åæ ¹èç¹\r\n    //     this.getTreeRootNode(nodes, rootNodes);\r\n    //     // å»é\r\n    //     rootNodes.forEach(node => {\r\n    //         if (!uniqueId.some(item => item == node.id)) {\r\n    //             finalRes.push(node);\r\n    //             uniqueId.push(node.id);\r\n    //         }\r\n    //     });\r\n    //     return finalRes;\r\n    // }\r\n\r\n    private initRightData(ids, clearRight = true) {\r\n        let dataSource: any = [];\r\n\r\n        if (!ids || !ids.length ) {\r\n            ids = this.selections.map(i => {\r\n                return i[this.idField];\r\n            });\r\n        }\r\n    \r\n\r\n        if (ids && ids.length) {\r\n            if (this.isTree()) {\r\n                this.convertTreeDataToPlainData(this.copyDataSource, dataSource);\r\n                this._rightData = this.getTreeSelectionsById(ids, dataSource);\r\n            } else {\r\n                this._rightData = this.getListSelectionsById(ids, this.copyDataSource);\r\n            }\r\n          \r\n        } else {\r\n            if (clearRight) {\r\n                this.moveAllToLeft();\r\n            }\r\n        }\r\n\r\n        this.checkLeftData(ids);\r\n    }\r\n\r\n    checkLeftData(ids: any) {\r\n        if (ids && ids.length) {\r\n            const checkeds = {...this._leftCheckeds};\r\n            this._leftCheckeds = ids.reduce((r, id) => {\r\n                r[id] = this._rightData.find(n => n[this.idField] == id);\r\n                return r;\r\n            }, {});\r\n\r\n            for (let k in this._leftCheckeds) {\r\n                if (!this._leftCheckeds[k]) {\r\n                    delete this._leftCheckeds[k];\r\n                }\r\n            }\r\n\r\n            this._leftCheckeds = Object.assign({}, checkeds, this._leftCheckeds);\r\n        }\r\n\r\n        this.updateAllTreeNodes(ids);\r\n    }\r\n\r\n    private updateAllTreeNodes(ids) {\r\n        if (this.updateTimer2) {\r\n            clearTimeout(this.updateTimer2);\r\n        }\r\n\r\n        this.updateTimer2 = setTimeout(() => {\r\n            this.canCheckLength = this.getCanCheckLength();\r\n            if (this.tt) {\r\n                if (ids && ids.length) {\r\n                    this.tt.checkedNodes(ids, true, false, true);\r\n                }\r\n                this.allTreeNodes = cloneDeep(this.tt.state.rowNodes.map(n => n.node));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param ids éä¸­æ°æ®çid\r\n     * @param dataSource åå§æ°æ®\r\n     */\r\n    private getListSelectionsById(ids: any, dataSource: any) {\r\n        let result = [];\r\n        const _this = this;\r\n        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n            const reusltObj = dataSource.find(item => {\r\n                return item[_this.idField] === ids;\r\n            });\r\n            if (reusltObj) {\r\n                result.push(reusltObj);\r\n            }\r\n        } else if (Array.isArray(ids)) {\r\n            if (Array.isArray(dataSource)) {\r\n                result = ids.map(id => dataSource.find(item => item[this.idField] === id)).filter(n => n);\r\n            } else {\r\n                result = [];\r\n            }\r\n        } else {\r\n            result = [];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param ids éä¸­æ°æ®çid\r\n     * @param dataSource åå§æ°æ®\r\n     */\r\n    private getTreeSelectionsById(ids: any, dataSource: any) {\r\n        let result = [];\r\n        const _this = this;\r\n        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n            const reusltObj = dataSource.find(item => {\r\n                return item.data[_this.idField] === ids;\r\n            });\r\n            if (reusltObj && reusltObj.data) {\r\n                result.push(reusltObj.data);\r\n            }\r\n        } else if (Array.isArray(ids)) {\r\n            if (Array.isArray(dataSource)) {\r\n                result = ids.map(id => {\r\n                    return dataSource.find(item => item.data[this.idField] === id);\r\n                }).filter(n => n).map(n => n.data);\r\n            } else {\r\n                result = [];\r\n            }\r\n        } else {\r\n            result = [];\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * å¤æ­æ¯å¦éä¸­\r\n     * @param data è¦éªè¯çæ°æ®\r\n     * @param direction éªè¯çæ°æ®æå¨çä½ç½® L: å·¦ä¾§ï¼R: å³ä¾§\r\n     */\r\n    isChecked(data: any, direction: 'L' | 'R'): boolean {\r\n        const keyVal = data[this.idField];\r\n        if (direction === 'L') {\r\n            return (this._leftCheckeds && this._leftCheckeds[keyVal] !== undefined); // || !this.canChecked(data);\r\n        } else {\r\n            if (this._rightCheckeds) {\r\n                return this._rightCheckeds[keyVal] !== undefined;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    canChecked(item: any) {\r\n        let data = item;\r\n\r\n        if (this.isTree()) {\r\n            data = item.data;\r\n\r\n            if (item.selectable !== undefined && !item.selectable) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!this.selections || this.selections.length === 0) {\r\n            return true;\r\n        }\r\n        return this.selections.findIndex(c => c && c[this.idField] === data[this.idField]) === -1;\r\n    }\r\n\r\n    onCheckValueChange(ids: string[]) {\r\n        \r\n    }\r\n\r\n    isTree(): any {\r\n        return this.displayType === 'Tree';\r\n    }\r\n\r\n    leftDataChecked(data: any[]) {\r\n        if (data && data.length) {\r\n            data.forEach(node => {\r\n                let d = node;\r\n                if (this.isTree()) {\r\n                    d = node.data;\r\n                }\r\n                if (this.canChecked(node)) {\r\n                    if (this.isChecked(d, 'L')) {\r\n                        delete this._leftCheckeds[d[this.idField]];\r\n                    } else {\r\n                        if (!this._leftCheckeds) {\r\n                            this._leftCheckeds = {};\r\n                        }\r\n                        this._leftCheckeds[d[this.idField]] = d;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    hasCheckeds(dir: 'L' | 'R') {\r\n        if (dir === 'L') {\r\n            if (this.isTree()) {\r\n                return this.tt.checkeds && this.tt.checkeds.length || ( this.tt.selections && this.tt.selections.length);\r\n            }\r\n\r\n            if (this._leftCheckeds) {\r\n                return Object.keys(this._leftCheckeds).length > 0;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (this._rightCheckeds) {\r\n                return Object.keys(this._rightCheckeds).length > 0;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    rightDataChecked(item, emit = true) {\r\n        const isCheck = this.isChecked(item, 'R');\r\n        if (isCheck) {\r\n            if (this.showCheckbox) {\r\n                delete this._rightCheckeds[item[this.idField]];\r\n            } else {\r\n                this._rightCheckeds = {};\r\n            }\r\n            this.rightSelectedItem = null;\r\n            this.unSelected.emit({data:item});\r\n            return;\r\n        } else {\r\n            if (this.showCheckbox) {\r\n                this._rightCheckeds = this._rightCheckeds || {};\r\n            } else {\r\n                this._rightCheckeds = {};\r\n            }\r\n            this.rightSelectedItem = item;\r\n            this._rightCheckeds[item[this.idField]] = item;\r\n        }\r\n        this.cd.detectChanges();\r\n        this.selected.emit({ selected: !isCheck, data: item });\r\n    }\r\n\r\n    selectItem(id, emit = true) {\r\n        if (this.selections && this.selections.length) {\r\n            const item = this.selections.find(n => n[this.idField] === id);\r\n            if (item) {\r\n                this.rightDataChecked(item, emit);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearSelections(emit = false) {\r\n        this._rightCheckeds = {};\r\n        this._leftCheckeds = {};\r\n        this._rightData = [];\r\n        this.selectedId = [];\r\n        if (this.isTree() && this.tt) {\r\n            const _chkids = this.tt.checkeds.map(n => n.id);\r\n            this.tt.clearAll();\r\n            this.tt.state.rowNodes.forEach(n => {\r\n                if (_chkids.find(i => i == n.id)) {\r\n                    n.node.selectable =  true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (emit) {\r\n            this.selectedIdChange.emit([]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å°æ ç»ææ°æ®è½¬æ¢ä¸ºæå¹³æ°ç»\r\n     * @param nodes æ èç¹æ°ç»\r\n     * @param r æ°çç©ºæ°ç»\r\n     */\r\n    private convertTreeDataToPlainData(nodes: TreeNode[], r: any[] = []) {\r\n        if (nodes) {\r\n            nodes.forEach(n => {\r\n                r.push(n);\r\n                if (n.children) {\r\n                    this.convertTreeDataToPlainData(n.children, r);\r\n                }\r\n            });\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    //#region å·¦å³ç§»å¨\r\n\r\n    private moveItem() {\r\n        this.beforeMove.subscribe((obj: any) => {\r\n            const items = obj.items;\r\n            let direction = 1;\r\n            switch (obj.target) {\r\n                case 'right':\r\n                    Object.keys(items).forEach(id => {\r\n                        if (!this._rightData.find(n => n[this.idField].toString() === id)) {\r\n                            this._rightData.push(items[id]);\r\n                        }\r\n                    });\r\n                    this._rightData = [...this._rightData];\r\n                    if (this.isTree()) {\r\n                        this.tt.clearAll();\r\n                    }\r\n                    direction = 1;\r\n                    break;\r\n                case 'rightAll':\r\n                    items.forEach(data => {\r\n                        if (this._rightData.findIndex(n => n[this.idField] === data[this.idField]) === -1) {\r\n                            this._rightData.push(data);\r\n                        }\r\n                    });\r\n                    if (this.isTree()) {\r\n                        this.tt.clearAll();\r\n                    }\r\n\r\n                    direction = 1;\r\n                    break;\r\n                case 'left':\r\n                    let ids = Object.keys(items);\r\n                    this._rightData = this._rightData.filter(v => {\r\n                        return ids.indexOf('' + v[this.idField]) === -1;\r\n                    });\r\n                    this._rightCheckeds = {};\r\n                    ids.forEach(id => {\r\n                        delete this._leftCheckeds[id];\r\n                    });\r\n\r\n                    if (this.rightSelectedItem) {\r\n                        if (ids.indexOf('' + this.rightSelectedItem[this.idField]) > -1) {\r\n                            this.rightSelectedItem = null;\r\n                        }\r\n                    }\r\n\r\n                    direction = -1;\r\n\r\n                    if (this.isTree()) {\r\n                        this.tt.findRowNodes(ids).forEach(n => {\r\n                            n.node.selectable = true;\r\n                        });\r\n                        this.tt.unCheckedNodes(ids, true);\r\n                    }\r\n\r\n                    break;\r\n                case 'leftAll':\r\n                    this._rightCheckeds = {};\r\n                    this.rightSelectedItem = null;\r\n                    this._rightData = [];\r\n                    direction = -1;\r\n                    this._leftCheckeds = {};\r\n                    if (this.isTree() && this.tt) {\r\n                        this.tt.clearAll();\r\n                        const _ids = items.map(n => n[this.idField]);\r\n                        this.tt.findRowNodes(_ids).forEach(n => {\r\n                            n.node.selectable = true;\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            this.selectionsChange();\r\n            this.changeSelectIds(direction);\r\n\r\n            this.afterMove.emit(Object.values(items));\r\n        });\r\n    }\r\n\r\n\r\n    /** å³ç§» */\r\n    moveToRight(moveData?: any) {\r\n\r\n        if (moveData) {\r\n            this.beforeMove.emit({ items: { [moveData[this.idField]]: moveData }, target: 'right' });\r\n        } else {\r\n            if (this.hasCheckeds('L')) {\r\n                if (this.isTree()) {\r\n                    this._leftCheckeds = {};\r\n\r\n                    if (!this.tt.checkeds.filter(n => this._rightData.findIndex(r => r.id === n.id) === -1 ).length) {\r\n                        this.mesagerSer.warning(this.noDataMoveMessage);\r\n                        return;        \r\n                    }\r\n\r\n                    this.tt.checkeds.forEach(n => {\r\n                        this._leftCheckeds[n.data[this.idField]] = n.data;\r\n                    });\r\n\r\n                    this.tt.selections.forEach(n => {\r\n                        this._leftCheckeds[n.id] = n.data;\r\n                    });\r\n\r\n                } else {\r\n                    const newCheckeds = Object.keys(this._leftCheckeds).filter(id => {\r\n                        return this._rightData.findIndex(n => n.id === id) === -1\r\n                    });\r\n                    if (!newCheckeds.length) {\r\n                        this.mesagerSer.warning(this.noDataMoveMessage);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                this.beforeMove.emit({ items: this._leftCheckeds, target: 'right' });\r\n            } else {\r\n                this.mesagerSer.warning(this.noDataMoveMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å¨é¨å³ç§» */\r\n    moveAllToRight() {\r\n        if (this.searchValue === '') {\r\n            this._rightData = [];\r\n        }\r\n        if (this.displayType === 'List') {\r\n            const items = this.dataSource;\r\n            // if (this.searchValue && this._leftCheckeds) {\r\n            //     const checkids = Object.keys(this._leftCheckeds);\r\n            //     if (checkids.length) {\r\n            //         checkids.forEach(id => {\r\n            //             if (!items.find(n => n[this.idField] === id)) {\r\n            //                 items.push(this._leftCheckeds[id]);\r\n            //             }\r\n            //         });\r\n            //     }\r\n            // }\r\n            this.beforeMove.emit({ items , target: 'rightAll' });\r\n        } else {\r\n            if (!this.searchValue) {\r\n                let _dataSource = [];\r\n                this.convertTreeDataToPlainData(this.dataSource, _dataSource);\r\n                _dataSource = _dataSource.filter(n => n.selectable && (n.visible || n.visible === undefined)).map(n => n.data);\r\n\r\n                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });\r\n            } else {\r\n                const _dataSource = this.tt.serializedValue.map(n => n.node.data);\r\n                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /** å·¦ç§» */\r\n    moveToLeft(moveData?: any) {\r\n\r\n        if (moveData) {\r\n            this.beforeMove.emit({ items: { [moveData[this.idField]]: moveData }, target: 'left' });\r\n        } else {\r\n            if (this.hasCheckeds('R')) {\r\n                this.beforeMove.emit({ items: this._rightCheckeds, target: 'left' });\r\n            } else {\r\n                this.mesagerSer.warning(this.noDataMoveMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å¨é¨å·¦ç§» */\r\n    moveAllToLeft() {\r\n        this.beforeMove.emit({ items: this._rightData, target: 'leftAll' });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region ä¸ä¸ç§»å¨æ¾ç¤ºåé¡ºåº\r\n\r\n    _getSelectInfo() {\r\n        if (this.rightSelectedItem) {\r\n            // const key = Object.keys(this._rightCheckeds)[0];\r\n            const key = this.rightSelectedItem[this.idField];\r\n            const index = this._rightData.findIndex(c => '' + c[this.idField] ==  key);\r\n            return {\r\n                key, index\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n    /** ç½®é¡¶ */\r\n    moveTop() {\r\n        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {\r\n            this.moveMore('top');\r\n            return;\r\n        }\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            this._rightData.unshift(this._rightData[obj.index]);\r\n            this._rightData.splice(obj.index + 1, 1);\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        } else {\r\n            this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n\r\n    /** ä¸ç§» */\r\n    moveUp() {\r\n\r\n\r\n        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {\r\n            this.moveMore2('up');\r\n            return;\r\n        }\r\n\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            const index = obj.index;\r\n            if (index !== 0) {\r\n                const tempArr = this._rightData.splice(index, 1);\r\n                this._rightData.splice(index - 1, 0, ...tempArr);\r\n            }\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        } else {\r\n            this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n\r\n    /** ä¸ç§» */\r\n    moveDown() {\r\n        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {\r\n            this.moveMore2('down');\r\n            return;\r\n        }\r\n\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            const len = this._rightData.length;\r\n            const index = obj.index;\r\n            if (index === 0 || index !== len - 1) {\r\n                const tempArr = this._rightData.splice(index, 1);\r\n                this._rightData.splice(index + 1, 0, ...tempArr);\r\n            }\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n\r\n        } else {\r\n            this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n\r\n    /** ç½®åº */\r\n    moveBottom() {\r\n        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {\r\n            this.moveMore('bottom');\r\n            return;\r\n        }\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            this._rightData.push(this._rightData[obj.index]);\r\n            this._rightData.splice(obj.index, 1);\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        } else {\r\n            this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n    /**\r\n     * è§¦åéæ©ä¸­id\r\n     * @param number 1ä»£è¡¨å·¦ä¾§æ°æ®å³ç§»ï¼-1,ä»£è¡¨æ°æ®å·¦ç§»ï¼0ä»£è¡¨ä¸ç§»ä¸ç§»\r\n     */\r\n    private changeSelectIds(number: number) {\r\n        const ids = this._rightData.map(item => {\r\n            return item[this.idField];\r\n        });\r\n\r\n        if (number === 0) {\r\n            if (typeof this.selectedId === 'string') {\r\n                this.selectedId = ids.join(',');\r\n            } else if (Array.isArray(this.selectedId)) {\r\n                this.selectedId = ids;\r\n            }\r\n            this.selectedIdChange.emit(this.selectedId);\r\n\r\n            const rightActiveDom = this.el.nativeElement.querySelector('.f-multi-select-list-group--right li.active');\r\n            if (rightActiveDom) {\r\n                if (rightActiveDom.scrollIntoViewIfNeeded) {\r\n                    rightActiveDom.scrollIntoViewIfNeeded();\r\n                } else {\r\n                    rightActiveDom.scrollIntoView();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedId) {\r\n            this.selectedId = [];\r\n        }\r\n\r\n        if (number === 1 || number === -1) {\r\n            if (!ids.length) {\r\n                this.selectedId = [];\r\n            } else {\r\n                this.selectedId = ids;\r\n            }\r\n\r\n            if (this.isTree()) {\r\n                if (ids && ids.length) {\r\n                    this.tt.checkedNodes(ids, true, false, true);\r\n                }\r\n            }\r\n        }\r\n        this.canCheckLength = this.getCanCheckLength();\r\n        this.selectedIdChange.emit(this.selectedId);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private selectionsChange() {\r\n        this.dataChange.emit(this._rightData);\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    getText(item, textField = this.textField) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue && textField) {\r\n                return this.commonUtils.getValue(textField, item);\r\n            } else {\r\n                return item[textField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getValue(item, valueField = this.valueField) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue && valueField) {\r\n                return this.commonUtils.getValue(valueField, item);\r\n            } else {\r\n                return item[valueField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    trackByItems = (index, item) => {\r\n        return index;\r\n    }\r\n\r\n\r\n    //#region  å³ä¾§åæ¶ç§»å¨å¤æ¡è®°å½\r\n\r\n    /** ä»å³ä¾§æ°æ®æºä¸­è·åéä¸­çè®°å½ */\r\n    private getCheckedItemsFromDataSource() {\r\n        if (this._rightData && this._rightData.length) {\r\n            return this._rightData.filter(n => this._rightCheckeds[n[this.idField]]);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private getCheckedFirstIndexAndLastIndex() {\r\n        const _chkItems = this.getCheckedItemsFromDataSource();\r\n        if (_chkItems && _chkItems.length) {\r\n            const first = _chkItems[0];\r\n            const last = _chkItems[_chkItems.length - 1];\r\n\r\n\r\n            const firstIndex = this._rightData.findIndex(n => n[this.idField] == first[this.idField]);\r\n            const lastIndex = this._rightData.findIndex(n => n[this.idField] == first[last.idField]);\r\n\r\n            return {first: firstIndex, last: lastIndex};\r\n        }\r\n\r\n        return { first: -1, last: -1};\r\n    }\r\n\r\n    private moveMore(type: 'top'|'bottom') {\r\n        if (this._rightCheckeds && Object.keys(this._rightCheckeds).length) {\r\n            const _chkItems = this.getCheckedItemsFromDataSource();\r\n            const items = this._rightData.filter(n => !_chkItems.find(r => r[this.idField] == n[this.idField]) );\r\n            if (type === 'top') {\r\n                items.splice(0, 0, ..._chkItems);\r\n            } else if (type === 'bottom') {\r\n                items.push(..._chkItems);\r\n            }\r\n\r\n            this._rightData = [...items];\r\n            this.updateActiveIndex();\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        }\r\n    }\r\n\r\n    private moveMore2(type: 'up'| 'down') {\r\n        const { first, last } = this.getCheckedFirstIndexAndLastIndex();\r\n        const _chkItems = this.getCheckedItemsFromDataSource();\r\n        // è·åæé¤å·²éä¸­çè®°å½\r\n        const items = this._rightData.filter(n => !_chkItems.find(r => r[this.idField] == n[this.idField]) );\r\n\r\n        if (type === 'up') {\r\n            let tarIndex = first - 1;\r\n            if (tarIndex < 0) {\r\n                this.moveMore('top');\r\n                return;\r\n            } else {\r\n                items.splice(tarIndex, 0, ..._chkItems);\r\n            }\r\n        } else if (type === 'down') {\r\n            let downIdx = first + 1;\r\n            if (downIdx >= this._rightData.length) {\r\n                this.moveMore('bottom');\r\n                return;\r\n            } else {\r\n                items.splice(downIdx, 0, ..._chkItems);\r\n            }\r\n        }\r\n        this._rightData = [...items];\r\n        this.updateActiveIndex();\r\n        this.selectionsChange();\r\n        this.changeSelectIds(0);\r\n    }\r\n\r\n    private updateActiveIndex() {\r\n        let idx = -1;\r\n        if (this.rightSelectedItem) {\r\n            idx = this._rightData.findIndex(n => n[this.idField] === this.rightSelectedItem[this.idField])\r\n        }\r\n\r\n        this.rightActiveIndex = idx;\r\n    }\r\n\r\n    \r\n    rightDataClicked($event: MouseEvent, item: any, index: number) {\r\n        const isCtrlKey = $event.ctrlKey;\r\n        const isShiftKey = $event.shiftKey;\r\n        this.rightSelectedItem = item;\r\n        const target: any = $event.target;\r\n\r\n        const ul = target.closest('ul');\r\n        if (isShiftKey) {\r\n            if (ul) {\r\n                ul.style.userSelect = 'none';\r\n            }\r\n        }\r\n\r\n        if (!isCtrlKey && !isShiftKey) {\r\n            this.rightActiveIndex = index;\r\n            const isCheckboxClicked = target.className.indexOf('custom-checkbox') > -1 || target.closest('.custom-checkbox');\r\n\r\n\r\n\r\n            if (isCheckboxClicked) {\r\n                if (this._rightCheckeds && this._rightCheckeds[item[this.idField]]) {\r\n                    this.rightSelectedItem = null;\r\n                    delete this._rightCheckeds[item[this.idField]];\r\n                } else {\r\n                    this._rightCheckeds = this._rightCheckeds || {};\r\n                    this._rightCheckeds[item[this.idField]] = item;\r\n                }\r\n            } else {\r\n                this.clearRightCheckeds();\r\n                this._rightCheckeds = this._rightCheckeds || {};\r\n                this._rightCheckeds[item[this.idField]] = item;\r\n            }\r\n        } else {\r\n\r\n            const setCheckItems = (isAdd = true) => {\r\n                let focusIndex = this.rightActiveIndex;\r\n                if (focusIndex === -1) {\r\n                    focusIndex = 0;\r\n                }\r\n\r\n                const endIndex = index;\r\n                let start = focusIndex;\r\n                let end = endIndex;\r\n\r\n                if (focusIndex > endIndex) {\r\n                    start = endIndex;\r\n                    end = focusIndex;\r\n                }\r\n\r\n                const selectItems = [...this._rightData].splice(start, end - start + 1);\r\n\r\n                if (!isAdd) {\r\n                    this._rightCheckeds = [];\r\n                }\r\n\r\n                selectItems.forEach(n => {\r\n                    this._rightCheckeds[n[this.idField]] = n;\r\n                });\r\n            }\r\n\r\n\r\n            if (isCtrlKey) {\r\n                if (this._rightCheckeds[item[this.idField]]) {\r\n                    delete this._rightCheckeds[item[this.idField]];\r\n                    this.rightSelectedItem = null;\r\n                } else {\r\n                    this._rightCheckeds[item[this.idField]] = item;\r\n                }\r\n\r\n                if (isShiftKey) {\r\n                    setCheckItems();\r\n                }\r\n                this.rightActiveIndex = index;\r\n            } else if (isShiftKey) {\r\n                setCheckItems(isCtrlKey);\r\n            }\r\n        }\r\n\r\n        if (ul) {\r\n            ul.style.userSelect = 'none';\r\n        }\r\n    }\r\n\r\n    onRightItemClick($event, item, index) {\r\n        if (this.enableMoveMore) {\r\n            this.rightDataClicked($event, item, index);\r\n        } else {\r\n            this.rightDataChecked(item);\r\n        }\r\n    }\r\n\r\n\r\n    //#endregion\r\n\r\n    clearRightCheckeds() {\r\n        this._rightCheckeds = {};\r\n        this.cd.detectChanges();\r\n    }\r\n}\r\n\r\n\r\n@Component({\r\n    selector: 'display-text',\r\n    template: `\r\n        <ng-container *ngIf=\"template\" >\r\n            <ng-container\r\n                *ngTemplateOutlet=\"template; context: {$implicit: data,instance: ms, side: side, selected: ms.isChecked(data, 'R') }\">\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!template\">{{_getText(data)}}</ng-container>\r\n    `\r\n})\r\nexport class DisplayTextComponent implements OnInit {\r\n    @Input() template: TemplateRef<any>;\r\n    @Input() data: any;\r\n    @Input() side = 'L';\r\n\r\n    constructor(public ms: MultiSelectComponent) { }\r\n\r\n    ngOnInit() {\r\n        // console.log(this.data);\r\n    }\r\n\r\n    _getText(item) {\r\n        return this.ms.getText(item);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MultiSelectComponent, DisplayTextComponent } from './multi-select.component';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        PerfectScrollbarModule,\r\n        FarrisCommonModule,\r\n        TreeTableModule,\r\n        LocaleModule,\r\n        FormsModule,\r\n        MessagerModule.forRoot()\r\n    ],\r\n    declarations: [MultiSelectComponent, DisplayTextComponent],\r\n    exports: [\r\n        MultiSelectComponent,\r\n        DisplayTextComponent,\r\n        FarrisCommonModule\r\n    ],\r\n    providers: [],\r\n})\r\nexport class MultiSelectModule { }\r\n"]}