/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { cloneDeep } from 'lodash-es';
/*
* @Author: 疯狂秀才(lucas huang)
* @Date: 2018-10-27 10:55:02
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-16 14:14:14
* @Company: Inspur
* @Version: v0.0.1
*/
import { Component, Input, ViewChild, Output, EventEmitter, TemplateRef, ContentChildren, QueryList, Injector, ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { TreeTableComponent } from '@farris/ui-treetable';
import { CommonUtils, FarrisTemplateDirective } from '@farris/ui-common';
import { LocaleService } from '@farris/ui-locale';
var MultiSelectComponent = /** @class */ (function () {
    function MultiSelectComponent(mesagerSer, injector, cd) {
        this.mesagerSer = mesagerSer;
        this.injector = injector;
        this.cd = cd;
        this.allTreeNodes = [];
        this._ds = [];
        this.displayType = 'List';
        /**
         * 显示右侧上移下移按钮
         */
        this.enableTargetSort = true;
        this.height = 445;
        this.fit = true;
        this.noDataMoveMessage = '请选择要移动的数据。';
        /**
         * 树结构时，是否显示级联选择控制选项
         */
        this.showCascadeControl = false;
        this.leftTitle = '未选择';
        this.rightTitle = '已选择';
        this.enableSearch = true;
        /**
         * 目标数据源显示checkbox 允许多选
         */
        this.showCheckbox = false;
        /**
         * 右侧已选启用重置，在启用复选框时，是否显示重置按钮，即取消右侧所有勾选项，默认为 false
         */
        this.enableReset = false;
        /**
         * 启用折行
         */
        this.wordWrap = false;
        /**
         * 启用多条记录一起移动；默认 false
         */
        this.enableMoveMore = false;
        /**
         * 查询时对value字段进行查询，默认为 true; false时仅查询文本字段
         */
        this.searchValueField = true;
        this.dataChange = new EventEmitter();
        this.selected = new EventEmitter();
        this.unSelected = new EventEmitter();
        this.selectedIdChange = new EventEmitter();
        this.beforeMove = new EventEmitter();
        this.afterMove = new EventEmitter();
        this.sortMove = new EventEmitter();
        // 左侧选中的数据 { [keyVal]: obj, [keyVal]: obj ... }
        this._leftCheckeds = {};
        // 右侧数据
        this._rightData = [];
        this.canCheckLength = 0;
        this.leftCount = 0;
        this._searchValue = '';
        // 级联选择控制选项
        this.enableCascase = true;
        this.updateTimer1 = null;
        this.updateTimer2 = null;
        this.rightSelectedItem = null;
        this.rightActiveIndex = -1;
        this.trackByItems = (/**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        function (index, item) {
            return index;
        });
        if (!Object.values) {
            Object.values = (/**
             * @param {?} obj
             * @return {?}
             */
            function (obj) {
                return Object.keys(obj).map((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    return obj[e];
                }));
            });
        }
        this.el = this.injector.get(ElementRef);
        this.render = this.injector.get(Renderer2);
        this.localeService = this.injector.get(LocaleService);
        this.commonUtils = this.injector.get(CommonUtils, null);
    }
    Object.defineProperty(MultiSelectComponent.prototype, "dataSource", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ds;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this_1 = this;
            val = val || [];
            this._ds = val;
            if (!this.searchValue) {
                if (val.length) {
                    if (val[0].toJSON) {
                        this.copyDataSource = val.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.toJSON(); }));
                    }
                    else {
                        this.copyDataSource = cloneDeep(val);
                    }
                }
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this_1.initRightData(_this_1.selectedId, false);
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiSelectComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rightData;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rightData = val.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== undefined && n !== null; }));
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiSelectComponent.prototype, "searchValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._searchValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this_1 = this;
            this._searchValue = value;
            // this.copyDataSource = [...this.dataSource];
            if (value === undefined || value === null || value === '') {
                /** @type {?} */
                var leftCheckitems_1 = tslib_1.__assign({}, this._leftCheckeds);
                if (this.displayType === 'Tree') {
                    this.tt.selections.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        leftCheckitems_1[n.id] = n.data;
                    }));
                }
                this.dataSource = this.copyDataSource;
                if (this.displayType === 'Tree') {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var ids = Object.keys(leftCheckitems_1);
                        if (ids && ids.length) {
                            _this_1.tt.checkedNodes(ids);
                        }
                    }));
                }
                else {
                    this._leftCheckeds = tslib_1.__assign({}, leftCheckitems_1);
                }
                return;
            }
            if (this.displayType === 'Tree') {
                // const newDataSource = this.getTreeDataBySearch(this._searchValue, this.allTreeNodes);
                this.tt.searchHandle.search(this.textField + "," + this.valueField, this._searchValue);
            }
            else {
                this.dataSource = this.getListDataBySearch(this._searchValue, this.copyDataSource);
            }
            if (this.updateTimer1) {
                clearTimeout(this.updateTimer1);
            }
            this.updateTimer1 = setTimeout((/**
             * @return {?}
             */
            function () {
                _this_1.canCheckLength = _this_1.getCanCheckLength();
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.copyDataSource = this.dataSource ? [...this.dataSource] : [];
        this.emptyData = this.localeService.getValue('multiSelect.emptyData') || '暂无数据';
        this.initRightData(this.selectedId);
        this.moveItem();
        if (!this.showCheckbox && this.enableMoveMore) {
            this.showCheckbox = true;
        }
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elt = this.el.nativeElement;
        this.render.addClass(elt, 'row');
        this.render.addClass(elt, 'f-multi-select');
        if (this.fit === true) {
            this.render.addClass(elt, 'f-utils-fill');
            this.render.setStyle(elt, 'height', '100%');
        }
        else {
            if (!!this.height) {
                this.render.setStyle(elt, 'height', this.height + 'px');
            }
        }
        this.noDataMoveMessage =
            this.noDataMoveMessage === '请选择要移动的数据。' ? this.localeService.getValue('multiSelect.noDataMoveMessage') : this.noDataMoveMessage;
        if (this.tt && this.selectedId) {
            this.tt.checkedNodes(this.selectedId);
        }
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.templates.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            switch (item.getType()) {
                case 'text':
                    _this_1.displayTemplate = item.template;
                    break;
            }
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MultiSelectComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.dataSource && !changes.dataSource.isFirstChange()) {
            this._leftCheckeds = {};
            this._rightData = [];
        }
        if (changes.selectedId && !changes.selectedId.isFirstChange()) {
            /** @type {?} */
            var cv = changes.selectedId.currentValue || [];
            /** @type {?} */
            var pv = changes.selectedId.previousValue || [];
            // 当设置选中的ID 为空时，执行清空右侧数据
            if (!cv.length) {
                this.clearSelections();
                // TFS 611928
                this.canCheckLength = this.getCanCheckLength();
                return;
            }
            if (cv.length != pv.length || JSON.stringify(cv) !== JSON.stringify(pv)) {
                this.initRightData(changes.selectedId.currentValue);
            }
        }
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.getCanCheckLength = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        /** @type {?} */
        var n = 0;
        /** @type {?} */
        var total = 0;
        if (this.isTree()) {
            this.tt.serializedValue.forEach((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) {
                if (rn.node.selectable) {
                    if (_this_1.canChecked(rn.node)) {
                        n++;
                    }
                }
            }));
            total = this.tt.serializedValue.length;
        }
        else {
            this.dataSource.forEach((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this_1.canChecked(d)) {
                    n++;
                }
            }));
            total = this.dataSource.length;
        }
        this.leftCount = total;
        return n;
    };
    /**
     * 获取搜索的数据，List结构
     * @param value 搜索的字符
     * @param data 数据
     */
    /**
     * 获取搜索的数据，List结构
     * @private
     * @param {?} value 搜索的字符
     * @param {?} data 数据
     * @return {?}
     */
    MultiSelectComponent.prototype.getListDataBySearch = /**
     * 获取搜索的数据，List结构
     * @private
     * @param {?} value 搜索的字符
     * @param {?} data 数据
     * @return {?}
     */
    function (value, data) {
        var _this_1 = this;
        /** @type {?} */
        var result = [];
        value = '' + value;
        if (data instanceof Array) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var txt = '';
                /** @type {?} */
                var val = '';
                if (_this_1.textField) {
                    txt = '' + _this_1.getText(item);
                }
                if (_this_1.valueField) {
                    val = '' + _this_1.getValue(item);
                }
                /** @type {?} */
                var textCompare = (/**
                 * @return {?}
                 */
                function () {
                    return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;
                });
                /** @type {?} */
                var valueCompare = (/**
                 * @return {?}
                 */
                function () {
                    return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;
                });
                if (_this_1.searchValueField) {
                    if (_this_1.textField && _this_1.valueField) {
                        if (textCompare() || valueCompare()) {
                            result.push(item);
                        }
                    }
                    else if (_this_1.textField && !_this_1.valueField) {
                        if (textCompare()) {
                            result.push(item);
                        }
                    }
                    else if (!_this_1.textField && _this_1.valueField) {
                        if (valueCompare()) {
                            result.push(item);
                        }
                    }
                }
                else {
                    if (textCompare()) {
                        result.push(item);
                    }
                }
            }));
        }
        return result;
    };
    /**
     * 获取包含value值得节点
     */
    // private getTreeDataByRecursive(value: string, data: any[], newData: any[]) {
    //     value = '' + value;
    //     data.forEach(item => {
    //         let txt = '';
    //         let val = '';
    //         if (this.textField) {
    //             txt = '' + this.getText(item.data);
    //         }
    //         if (this.valueField) {
    //             val = '' + this.getValue(item.data);
    //         }
    //         const textCompare = () => {
    //             return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         const valueCompare = () => {
    //             return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         if (this.textField && this.valueField) {
    //             if (textCompare() || valueCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (this.textField && !this.valueField) {
    //             if (textCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (!this.textField && this.valueField) {
    //             if (valueCompare()) {
    //                 newData.push(item);
    //             }
    //         }
    //         if (item.children && item.children.length) {
    //             this.getTreeDataByRecursive(value, item.children, newData);
    //         }
    //     });
    // }
    /**
     * 获取根节点
     */
    // private getTreeRootNode(data: any[], rootData: any[]) {
    //     data.forEach(item => {
    //         if (item.parent === null) {
    //             rootData.push(item);
    //         } else {
    //             this.getTreeRootNode(new Array(item.parent), rootData);
    //         }
    //     });
    // }
    /**
     * 获取搜索的数据，Tree结构
     * @param value 搜索的字符
     * @param data 数据
     */
    // private getTreeDataBySearch(value: string, data: any[]): any[] {
    //     const rootNodes = [];
    //     const nodes = [];
    //     const finalRes = [];
    //     const uniqueId = [];
    //     // 获取包含value值得节点
    //     this.getTreeDataByRecursive(value, data, nodes);
    //     // 获取根节点
    //     this.getTreeRootNode(nodes, rootNodes);
    //     // 去重
    //     rootNodes.forEach(node => {
    //         if (!uniqueId.some(item => item == node.id)) {
    //             finalRes.push(node);
    //             uniqueId.push(node.id);
    //         }
    //     });
    //     return finalRes;
    // }
    /**
         * 获取包含value值得节点
         */
    // private getTreeDataByRecursive(value: string, data: any[], newData: any[]) {
    //     value = '' + value;
    //     data.forEach(item => {
    //         let txt = '';
    //         let val = '';
    //         if (this.textField) {
    //             txt = '' + this.getText(item.data);
    //         }
    //         if (this.valueField) {
    //             val = '' + this.getValue(item.data);
    //         }
    //         const textCompare = () => {
    //             return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         const valueCompare = () => {
    //             return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         if (this.textField && this.valueField) {
    //             if (textCompare() || valueCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (this.textField && !this.valueField) {
    //             if (textCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (!this.textField && this.valueField) {
    //             if (valueCompare()) {
    //                 newData.push(item);
    //             }
    //         }
    //         if (item.children && item.children.length) {
    //             this.getTreeDataByRecursive(value, item.children, newData);
    //         }
    //     });
    // }
    /**
         * 获取根节点
         */
    // private getTreeRootNode(data: any[], rootData: any[]) {
    //     data.forEach(item => {
    //         if (item.parent === null) {
    //             rootData.push(item);
    //         } else {
    //             this.getTreeRootNode(new Array(item.parent), rootData);
    //         }
    //     });
    // }
    /**
     * 获取搜索的数据，Tree结构
     * @private
     * @param {?} ids
     * @param {?=} clearRight
     * @return {?}
     */
    // private getTreeDataBySearch(value: string, data: any[]): any[] {
    //     const rootNodes = [];
    //     const nodes = [];
    //     const finalRes = [];
    //     const uniqueId = [];
    //     // 获取包含value值得节点
    //     this.getTreeDataByRecursive(value, data, nodes);
    //     // 获取根节点
    //     this.getTreeRootNode(nodes, rootNodes);
    //     // 去重
    //     rootNodes.forEach(node => {
    //         if (!uniqueId.some(item => item == node.id)) {
    //             finalRes.push(node);
    //             uniqueId.push(node.id);
    //         }
    //     });
    //     return finalRes;
    // }
    MultiSelectComponent.prototype.initRightData = /**
         * 获取包含value值得节点
         */
    // private getTreeDataByRecursive(value: string, data: any[], newData: any[]) {
    //     value = '' + value;
    //     data.forEach(item => {
    //         let txt = '';
    //         let val = '';
    //         if (this.textField) {
    //             txt = '' + this.getText(item.data);
    //         }
    //         if (this.valueField) {
    //             val = '' + this.getValue(item.data);
    //         }
    //         const textCompare = () => {
    //             return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         const valueCompare = () => {
    //             return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         if (this.textField && this.valueField) {
    //             if (textCompare() || valueCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (this.textField && !this.valueField) {
    //             if (textCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (!this.textField && this.valueField) {
    //             if (valueCompare()) {
    //                 newData.push(item);
    //             }
    //         }
    //         if (item.children && item.children.length) {
    //             this.getTreeDataByRecursive(value, item.children, newData);
    //         }
    //     });
    // }
    /**
         * 获取根节点
         */
    // private getTreeRootNode(data: any[], rootData: any[]) {
    //     data.forEach(item => {
    //         if (item.parent === null) {
    //             rootData.push(item);
    //         } else {
    //             this.getTreeRootNode(new Array(item.parent), rootData);
    //         }
    //     });
    // }
    /**
     * 获取搜索的数据，Tree结构
     * @private
     * @param {?} ids
     * @param {?=} clearRight
     * @return {?}
     */
    // private getTreeDataBySearch(value: string, data: any[]): any[] {
    //     const rootNodes = [];
    //     const nodes = [];
    //     const finalRes = [];
    //     const uniqueId = [];
    //     // 获取包含value值得节点
    //     this.getTreeDataByRecursive(value, data, nodes);
    //     // 获取根节点
    //     this.getTreeRootNode(nodes, rootNodes);
    //     // 去重
    //     rootNodes.forEach(node => {
    //         if (!uniqueId.some(item => item == node.id)) {
    //             finalRes.push(node);
    //             uniqueId.push(node.id);
    //         }
    //     });
    //     return finalRes;
    // }
    function (ids, clearRight) {
        var _this_1 = this;
        if (clearRight === void 0) { clearRight = true; }
        /** @type {?} */
        var dataSource = [];
        if (!ids || !ids.length) {
            ids = this.selections.map((/**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                return i[_this_1.idField];
            }));
        }
        if (ids && ids.length) {
            if (this.isTree()) {
                this.convertTreeDataToPlainData(this.copyDataSource, dataSource);
                this._rightData = this.getTreeSelectionsById(ids, dataSource);
            }
            else {
                this._rightData = this.getListSelectionsById(ids, this.copyDataSource);
            }
        }
        else {
            if (clearRight) {
                this.moveAllToLeft();
            }
        }
        this.checkLeftData(ids);
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    MultiSelectComponent.prototype.checkLeftData = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this_1 = this;
        if (ids && ids.length) {
            /** @type {?} */
            var checkeds = tslib_1.__assign({}, this._leftCheckeds);
            this._leftCheckeds = ids.reduce((/**
             * @param {?} r
             * @param {?} id
             * @return {?}
             */
            function (r, id) {
                r[id] = _this_1._rightData.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this_1.idField] == id; }));
                return r;
            }), {});
            for (var k in this._leftCheckeds) {
                if (!this._leftCheckeds[k]) {
                    delete this._leftCheckeds[k];
                }
            }
            this._leftCheckeds = Object.assign({}, checkeds, this._leftCheckeds);
        }
        this.updateAllTreeNodes(ids);
    };
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    MultiSelectComponent.prototype.updateAllTreeNodes = /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this_1 = this;
        if (this.updateTimer2) {
            clearTimeout(this.updateTimer2);
        }
        this.updateTimer2 = setTimeout((/**
         * @return {?}
         */
        function () {
            _this_1.canCheckLength = _this_1.getCanCheckLength();
            if (_this_1.tt) {
                if (ids && ids.length) {
                    _this_1.tt.checkedNodes(ids, true, false, true);
                }
                _this_1.allTreeNodes = cloneDeep(_this_1.tt.state.rowNodes.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.node; })));
            }
        }));
    };
    /**
     * @param ids 选中数据的id
     * @param dataSource 原始数据
     */
    /**
     * @private
     * @param {?} ids 选中数据的id
     * @param {?} dataSource 原始数据
     * @return {?}
     */
    MultiSelectComponent.prototype.getListSelectionsById = /**
     * @private
     * @param {?} ids 选中数据的id
     * @param {?} dataSource 原始数据
     * @return {?}
     */
    function (ids, dataSource) {
        var _this_1 = this;
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            /** @type {?} */
            var reusltObj = dataSource.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item[_this.idField] === ids;
            }));
            if (reusltObj) {
                result.push(reusltObj);
            }
        }
        else if (Array.isArray(ids)) {
            if (Array.isArray(dataSource)) {
                result = ids.map((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) { return dataSource.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item[_this_1.idField] === id; })); })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    };
    /**
     *
     * @param ids 选中数据的id
     * @param dataSource 原始数据
     */
    /**
     *
     * @private
     * @param {?} ids 选中数据的id
     * @param {?} dataSource 原始数据
     * @return {?}
     */
    MultiSelectComponent.prototype.getTreeSelectionsById = /**
     *
     * @private
     * @param {?} ids 选中数据的id
     * @param {?} dataSource 原始数据
     * @return {?}
     */
    function (ids, dataSource) {
        var _this_1 = this;
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            /** @type {?} */
            var reusltObj = dataSource.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item.data[_this.idField] === ids;
            }));
            if (reusltObj && reusltObj.data) {
                result.push(reusltObj.data);
            }
        }
        else if (Array.isArray(ids)) {
            if (Array.isArray(dataSource)) {
                result = ids.map((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    return dataSource.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.data[_this_1.idField] === id; }));
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data; }));
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    };
    /**
     * 判断是否选中
     * @param data 要验证的数据
     * @param direction 验证的数据所在的位置 L: 左侧，R: 右侧
     */
    /**
     * 判断是否选中
     * @param {?} data 要验证的数据
     * @param {?} direction 验证的数据所在的位置 L: 左侧，R: 右侧
     * @return {?}
     */
    MultiSelectComponent.prototype.isChecked = /**
     * 判断是否选中
     * @param {?} data 要验证的数据
     * @param {?} direction 验证的数据所在的位置 L: 左侧，R: 右侧
     * @return {?}
     */
    function (data, direction) {
        /** @type {?} */
        var keyVal = data[this.idField];
        if (direction === 'L') {
            return (this._leftCheckeds && this._leftCheckeds[keyVal] !== undefined); // || !this.canChecked(data);
        }
        else {
            if (this._rightCheckeds) {
                return this._rightCheckeds[keyVal] !== undefined;
            }
            else {
                return false;
            }
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    MultiSelectComponent.prototype.canChecked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this_1 = this;
        /** @type {?} */
        var data = item;
        if (this.isTree()) {
            data = item.data;
            if (item.selectable !== undefined && !item.selectable) {
                return false;
            }
        }
        if (!this.selections || this.selections.length === 0) {
            return true;
        }
        return this.selections.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c && c[_this_1.idField] === data[_this_1.idField]; })) === -1;
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    MultiSelectComponent.prototype.onCheckValueChange = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.isTree = /**
     * @return {?}
     */
    function () {
        return this.displayType === 'Tree';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiSelectComponent.prototype.leftDataChecked = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this_1 = this;
        if (data && data.length) {
            data.forEach((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                /** @type {?} */
                var d = node;
                if (_this_1.isTree()) {
                    d = node.data;
                }
                if (_this_1.canChecked(node)) {
                    if (_this_1.isChecked(d, 'L')) {
                        delete _this_1._leftCheckeds[d[_this_1.idField]];
                    }
                    else {
                        if (!_this_1._leftCheckeds) {
                            _this_1._leftCheckeds = {};
                        }
                        _this_1._leftCheckeds[d[_this_1.idField]] = d;
                    }
                }
            }));
        }
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    MultiSelectComponent.prototype.hasCheckeds = /**
     * @param {?} dir
     * @return {?}
     */
    function (dir) {
        if (dir === 'L') {
            if (this.isTree()) {
                return this.tt.checkeds && this.tt.checkeds.length || (this.tt.selections && this.tt.selections.length);
            }
            if (this._leftCheckeds) {
                return Object.keys(this._leftCheckeds).length > 0;
            }
            else {
                return false;
            }
        }
        else {
            if (this._rightCheckeds) {
                return Object.keys(this._rightCheckeds).length > 0;
            }
            else {
                return false;
            }
        }
    };
    /**
     * @param {?} item
     * @param {?=} emit
     * @return {?}
     */
    MultiSelectComponent.prototype.rightDataChecked = /**
     * @param {?} item
     * @param {?=} emit
     * @return {?}
     */
    function (item, emit) {
        if (emit === void 0) { emit = true; }
        /** @type {?} */
        var isCheck = this.isChecked(item, 'R');
        if (isCheck) {
            if (this.showCheckbox) {
                delete this._rightCheckeds[item[this.idField]];
            }
            else {
                this._rightCheckeds = {};
            }
            this.rightSelectedItem = null;
            this.unSelected.emit({ data: item });
            return;
        }
        else {
            if (this.showCheckbox) {
                this._rightCheckeds = this._rightCheckeds || {};
            }
            else {
                this._rightCheckeds = {};
            }
            this.rightSelectedItem = item;
            this._rightCheckeds[item[this.idField]] = item;
        }
        this.cd.detectChanges();
        this.selected.emit({ selected: !isCheck, data: item });
    };
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    MultiSelectComponent.prototype.selectItem = /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    function (id, emit) {
        var _this_1 = this;
        if (emit === void 0) { emit = true; }
        if (this.selections && this.selections.length) {
            /** @type {?} */
            var item = this.selections.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this_1.idField] === id; }));
            if (item) {
                this.rightDataChecked(item, emit);
            }
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    MultiSelectComponent.prototype.clearSelections = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = false; }
        this._rightCheckeds = {};
        this._leftCheckeds = {};
        this._rightData = [];
        this.selectedId = [];
        if (this.isTree() && this.tt) {
            /** @type {?} */
            var _chkids_1 = this.tt.checkeds.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id; }));
            this.tt.clearAll();
            this.tt.state.rowNodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (_chkids_1.find((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i == n.id; }))) {
                    n.node.selectable = true;
                }
            }));
        }
        if (emit) {
            this.selectedIdChange.emit([]);
        }
    };
    /**
     * 将树结构数据转换为扁平数组
     * @param nodes 树节点数组
     * @param r 新的空数组
     */
    /**
     * 将树结构数据转换为扁平数组
     * @private
     * @param {?} nodes 树节点数组
     * @param {?=} r 新的空数组
     * @return {?}
     */
    MultiSelectComponent.prototype.convertTreeDataToPlainData = /**
     * 将树结构数据转换为扁平数组
     * @private
     * @param {?} nodes 树节点数组
     * @param {?=} r 新的空数组
     * @return {?}
     */
    function (nodes, r) {
        var _this_1 = this;
        if (r === void 0) { r = []; }
        if (nodes) {
            nodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                r.push(n);
                if (n.children) {
                    _this_1.convertTreeDataToPlainData(n.children, r);
                }
            }));
        }
        return r;
    };
    //#region 左右移动
    //#region 左右移动
    /**
     * @private
     * @return {?}
     */
    MultiSelectComponent.prototype.moveItem = 
    //#region 左右移动
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.beforeMove.subscribe((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            /** @type {?} */
            var items = obj.items;
            /** @type {?} */
            var direction = 1;
            switch (obj.target) {
                case 'right':
                    Object.keys(items).forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    function (id) {
                        if (!_this_1._rightData.find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n[_this_1.idField].toString() === id; }))) {
                            _this_1._rightData.push(items[id]);
                        }
                    }));
                    _this_1._rightData = tslib_1.__spread(_this_1._rightData);
                    if (_this_1.isTree()) {
                        _this_1.tt.clearAll();
                    }
                    direction = 1;
                    break;
                case 'rightAll':
                    items.forEach((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (_this_1._rightData.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n[_this_1.idField] === data[_this_1.idField]; })) === -1) {
                            _this_1._rightData.push(data);
                        }
                    }));
                    if (_this_1.isTree()) {
                        _this_1.tt.clearAll();
                    }
                    direction = 1;
                    break;
                case 'left':
                    /** @type {?} */
                    var ids_1 = Object.keys(items);
                    _this_1._rightData = _this_1._rightData.filter((/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) {
                        return ids_1.indexOf('' + v[_this_1.idField]) === -1;
                    }));
                    _this_1._rightCheckeds = {};
                    ids_1.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    function (id) {
                        delete _this_1._leftCheckeds[id];
                    }));
                    if (_this_1.rightSelectedItem) {
                        if (ids_1.indexOf('' + _this_1.rightSelectedItem[_this_1.idField]) > -1) {
                            _this_1.rightSelectedItem = null;
                        }
                    }
                    direction = -1;
                    if (_this_1.isTree()) {
                        _this_1.tt.findRowNodes(ids_1).forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            n.node.selectable = true;
                        }));
                        _this_1.tt.unCheckedNodes(ids_1, true);
                    }
                    break;
                case 'leftAll':
                    _this_1._rightCheckeds = {};
                    _this_1.rightSelectedItem = null;
                    _this_1._rightData = [];
                    direction = -1;
                    _this_1._leftCheckeds = {};
                    if (_this_1.isTree() && _this_1.tt) {
                        _this_1.tt.clearAll();
                        /** @type {?} */
                        var _ids = items.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n[_this_1.idField]; }));
                        _this_1.tt.findRowNodes(_ids).forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            n.node.selectable = true;
                        }));
                    }
                    break;
            }
            _this_1.selectionsChange();
            _this_1.changeSelectIds(direction);
            _this_1.afterMove.emit(Object.values(items));
        }));
    };
    /** 右移 */
    /**
     * 右移
     * @param {?=} moveData
     * @return {?}
     */
    MultiSelectComponent.prototype.moveToRight = /**
     * 右移
     * @param {?=} moveData
     * @return {?}
     */
    function (moveData) {
        var _this_1 = this;
        var _a;
        if (moveData) {
            this.beforeMove.emit({ items: (_a = {}, _a[moveData[this.idField]] = moveData, _a), target: 'right' });
        }
        else {
            if (this.hasCheckeds('L')) {
                if (this.isTree()) {
                    this._leftCheckeds = {};
                    if (!this.tt.checkeds.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _this_1._rightData.findIndex((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r.id === n.id; })) === -1; })).length) {
                        this.mesagerSer.warning(this.noDataMoveMessage);
                        return;
                    }
                    this.tt.checkeds.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        _this_1._leftCheckeds[n.data[_this_1.idField]] = n.data;
                    }));
                    this.tt.selections.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        _this_1._leftCheckeds[n.id] = n.data;
                    }));
                }
                else {
                    /** @type {?} */
                    var newCheckeds = Object.keys(this._leftCheckeds).filter((/**
                     * @param {?} id
                     * @return {?}
                     */
                    function (id) {
                        return _this_1._rightData.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.id === id; })) === -1;
                    }));
                    if (!newCheckeds.length) {
                        this.mesagerSer.warning(this.noDataMoveMessage);
                        return;
                    }
                }
                this.beforeMove.emit({ items: this._leftCheckeds, target: 'right' });
            }
            else {
                this.mesagerSer.warning(this.noDataMoveMessage);
            }
        }
    };
    /** 全部右移 */
    /**
     * 全部右移
     * @return {?}
     */
    MultiSelectComponent.prototype.moveAllToRight = /**
     * 全部右移
     * @return {?}
     */
    function () {
        if (this.searchValue === '') {
            this._rightData = [];
        }
        if (this.displayType === 'List') {
            /** @type {?} */
            var items = this.dataSource;
            // if (this.searchValue && this._leftCheckeds) {
            //     const checkids = Object.keys(this._leftCheckeds);
            //     if (checkids.length) {
            //         checkids.forEach(id => {
            //             if (!items.find(n => n[this.idField] === id)) {
            //                 items.push(this._leftCheckeds[id]);
            //             }
            //         });
            //     }
            // }
            this.beforeMove.emit({ items: items, target: 'rightAll' });
        }
        else {
            if (!this.searchValue) {
                /** @type {?} */
                var _dataSource = [];
                this.convertTreeDataToPlainData(this.dataSource, _dataSource);
                _dataSource = _dataSource.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.selectable && (n.visible || n.visible === undefined); })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data; }));
                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });
            }
            else {
                /** @type {?} */
                var _dataSource = this.tt.serializedValue.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.node.data; }));
                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });
            }
        }
    };
    /** 左移 */
    /**
     * 左移
     * @param {?=} moveData
     * @return {?}
     */
    MultiSelectComponent.prototype.moveToLeft = /**
     * 左移
     * @param {?=} moveData
     * @return {?}
     */
    function (moveData) {
        var _a;
        if (moveData) {
            this.beforeMove.emit({ items: (_a = {}, _a[moveData[this.idField]] = moveData, _a), target: 'left' });
        }
        else {
            if (this.hasCheckeds('R')) {
                this.beforeMove.emit({ items: this._rightCheckeds, target: 'left' });
            }
            else {
                this.mesagerSer.warning(this.noDataMoveMessage);
            }
        }
    };
    /** 全部左移 */
    /**
     * 全部左移
     * @return {?}
     */
    MultiSelectComponent.prototype.moveAllToLeft = /**
     * 全部左移
     * @return {?}
     */
    function () {
        this.beforeMove.emit({ items: this._rightData, target: 'leftAll' });
    };
    //#endregion
    //#region 上下移动显示列顺序
    //#endregion
    //#region 上下移动显示列顺序
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype._getSelectInfo = 
    //#endregion
    //#region 上下移动显示列顺序
    /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        if (this.rightSelectedItem) {
            // const key = Object.keys(this._rightCheckeds)[0];
            /** @type {?} */
            var key_1 = this.rightSelectedItem[this.idField];
            /** @type {?} */
            var index = this._rightData.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return '' + c[_this_1.idField] == key_1; }));
            return {
                key: key_1, index: index
            };
        }
        return null;
    };
    /** 置顶 */
    /**
     * 置顶
     * @return {?}
     */
    MultiSelectComponent.prototype.moveTop = /**
     * 置顶
     * @return {?}
     */
    function () {
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore('top');
            return;
        }
        /** @type {?} */
        var obj = this._getSelectInfo();
        if (obj) {
            this._rightData.unshift(this._rightData[obj.index]);
            this._rightData.splice(obj.index + 1, 1);
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    };
    /** 上移 */
    /**
     * 上移
     * @return {?}
     */
    MultiSelectComponent.prototype.moveUp = /**
     * 上移
     * @return {?}
     */
    function () {
        var _a;
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore2('up');
            return;
        }
        /** @type {?} */
        var obj = this._getSelectInfo();
        if (obj) {
            /** @type {?} */
            var index = obj.index;
            if (index !== 0) {
                /** @type {?} */
                var tempArr = this._rightData.splice(index, 1);
                (_a = this._rightData).splice.apply(_a, tslib_1.__spread([index - 1, 0], tempArr));
            }
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    };
    /** 下移 */
    /**
     * 下移
     * @return {?}
     */
    MultiSelectComponent.prototype.moveDown = /**
     * 下移
     * @return {?}
     */
    function () {
        var _a;
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore2('down');
            return;
        }
        /** @type {?} */
        var obj = this._getSelectInfo();
        if (obj) {
            /** @type {?} */
            var len = this._rightData.length;
            /** @type {?} */
            var index = obj.index;
            if (index === 0 || index !== len - 1) {
                /** @type {?} */
                var tempArr = this._rightData.splice(index, 1);
                (_a = this._rightData).splice.apply(_a, tslib_1.__spread([index + 1, 0], tempArr));
            }
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    };
    /** 置底 */
    /**
     * 置底
     * @return {?}
     */
    MultiSelectComponent.prototype.moveBottom = /**
     * 置底
     * @return {?}
     */
    function () {
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore('bottom');
            return;
        }
        /** @type {?} */
        var obj = this._getSelectInfo();
        if (obj) {
            this._rightData.push(this._rightData[obj.index]);
            this._rightData.splice(obj.index, 1);
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    };
    /**
     * 触发选择中id
     * @param number 1代表左侧数据右移，-1,代表数据左移，0代表上移下移
     */
    /**
     * 触发选择中id
     * @private
     * @param {?} number 1代表左侧数据右移，-1,代表数据左移，0代表上移下移
     * @return {?}
     */
    MultiSelectComponent.prototype.changeSelectIds = /**
     * 触发选择中id
     * @private
     * @param {?} number 1代表左侧数据右移，-1,代表数据左移，0代表上移下移
     * @return {?}
     */
    function (number) {
        var _this_1 = this;
        /** @type {?} */
        var ids = this._rightData.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item[_this_1.idField];
        }));
        if (number === 0) {
            if (typeof this.selectedId === 'string') {
                this.selectedId = ids.join(',');
            }
            else if (Array.isArray(this.selectedId)) {
                this.selectedId = ids;
            }
            this.selectedIdChange.emit(this.selectedId);
            /** @type {?} */
            var rightActiveDom = this.el.nativeElement.querySelector('.f-multi-select-list-group--right li.active');
            if (rightActiveDom) {
                if (rightActiveDom.scrollIntoViewIfNeeded) {
                    rightActiveDom.scrollIntoViewIfNeeded();
                }
                else {
                    rightActiveDom.scrollIntoView();
                }
            }
            return;
        }
        if (!this.selectedId) {
            this.selectedId = [];
        }
        if (number === 1 || number === -1) {
            if (!ids.length) {
                this.selectedId = [];
            }
            else {
                this.selectedId = ids;
            }
            if (this.isTree()) {
                if (ids && ids.length) {
                    this.tt.checkedNodes(ids, true, false, true);
                }
            }
        }
        this.canCheckLength = this.getCanCheckLength();
        this.selectedIdChange.emit(this.selectedId);
    };
    //#endregion
    //#endregion
    /**
     * @private
     * @return {?}
     */
    MultiSelectComponent.prototype.selectionsChange = 
    //#endregion
    /**
     * @private
     * @return {?}
     */
    function () {
        this.dataChange.emit(this._rightData);
        this.cd.detectChanges();
    };
    /**
     * @param {?} item
     * @param {?=} textField
     * @return {?}
     */
    MultiSelectComponent.prototype.getText = /**
     * @param {?} item
     * @param {?=} textField
     * @return {?}
     */
    function (item, textField) {
        if (textField === void 0) { textField = this.textField; }
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue && textField) {
                return this.commonUtils.getValue(textField, item);
            }
            else {
                return item[textField];
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} item
     * @param {?=} valueField
     * @return {?}
     */
    MultiSelectComponent.prototype.getValue = /**
     * @param {?} item
     * @param {?=} valueField
     * @return {?}
     */
    function (item, valueField) {
        if (valueField === void 0) { valueField = this.valueField; }
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue && valueField) {
                return this.commonUtils.getValue(valueField, item);
            }
            else {
                return item[valueField];
            }
        }
        else {
            return '';
        }
    };
    //#region  右侧同时移动多条记录
    /** 从右侧数据源中获取选中的记录 */
    //#region  右侧同时移动多条记录
    /**
     * 从右侧数据源中获取选中的记录
     * @private
     * @return {?}
     */
    MultiSelectComponent.prototype.getCheckedItemsFromDataSource = 
    //#region  右侧同时移动多条记录
    /**
     * 从右侧数据源中获取选中的记录
     * @private
     * @return {?}
     */
    function () {
        var _this_1 = this;
        if (this._rightData && this._rightData.length) {
            return this._rightData.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this_1._rightCheckeds[n[_this_1.idField]]; }));
        }
        return [];
    };
    /**
     * @private
     * @return {?}
     */
    MultiSelectComponent.prototype.getCheckedFirstIndexAndLastIndex = /**
     * @private
     * @return {?}
     */
    function () {
        var _this_1 = this;
        /** @type {?} */
        var _chkItems = this.getCheckedItemsFromDataSource();
        if (_chkItems && _chkItems.length) {
            /** @type {?} */
            var first_1 = _chkItems[0];
            /** @type {?} */
            var last_1 = _chkItems[_chkItems.length - 1];
            /** @type {?} */
            var firstIndex = this._rightData.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this_1.idField] == first_1[_this_1.idField]; }));
            /** @type {?} */
            var lastIndex = this._rightData.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this_1.idField] == first_1[last_1.idField]; }));
            return { first: firstIndex, last: lastIndex };
        }
        return { first: -1, last: -1 };
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    MultiSelectComponent.prototype.moveMore = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this_1 = this;
        if (this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            /** @type {?} */
            var _chkItems_1 = this.getCheckedItemsFromDataSource();
            /** @type {?} */
            var items = this._rightData.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !_chkItems_1.find((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r[_this_1.idField] == n[_this_1.idField]; })); }));
            if (type === 'top') {
                items.splice.apply(items, tslib_1.__spread([0, 0], _chkItems_1));
            }
            else if (type === 'bottom') {
                items.push.apply(items, tslib_1.__spread(_chkItems_1));
            }
            this._rightData = tslib_1.__spread(items);
            this.updateActiveIndex();
            this.selectionsChange();
            this.changeSelectIds(0);
        }
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    MultiSelectComponent.prototype.moveMore2 = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this_1 = this;
        var _a = this.getCheckedFirstIndexAndLastIndex(), first = _a.first, last = _a.last;
        /** @type {?} */
        var _chkItems = this.getCheckedItemsFromDataSource();
        // 获取排除已选中的记录
        /** @type {?} */
        var items = this._rightData.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !_chkItems.find((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r[_this_1.idField] == n[_this_1.idField]; })); }));
        if (type === 'up') {
            /** @type {?} */
            var tarIndex = first - 1;
            if (tarIndex < 0) {
                this.moveMore('top');
                return;
            }
            else {
                items.splice.apply(items, tslib_1.__spread([tarIndex, 0], _chkItems));
            }
        }
        else if (type === 'down') {
            /** @type {?} */
            var downIdx = first + 1;
            if (downIdx >= this._rightData.length) {
                this.moveMore('bottom');
                return;
            }
            else {
                items.splice.apply(items, tslib_1.__spread([downIdx, 0], _chkItems));
            }
        }
        this._rightData = tslib_1.__spread(items);
        this.updateActiveIndex();
        this.selectionsChange();
        this.changeSelectIds(0);
    };
    /**
     * @private
     * @return {?}
     */
    MultiSelectComponent.prototype.updateActiveIndex = /**
     * @private
     * @return {?}
     */
    function () {
        var _this_1 = this;
        /** @type {?} */
        var idx = -1;
        if (this.rightSelectedItem) {
            idx = this._rightData.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this_1.idField] === _this_1.rightSelectedItem[_this_1.idField]; }));
        }
        this.rightActiveIndex = idx;
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    MultiSelectComponent.prototype.rightDataClicked = /**
     * @param {?} $event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function ($event, item, index) {
        var _this_1 = this;
        /** @type {?} */
        var isCtrlKey = $event.ctrlKey;
        /** @type {?} */
        var isShiftKey = $event.shiftKey;
        this.rightSelectedItem = item;
        /** @type {?} */
        var target = $event.target;
        /** @type {?} */
        var ul = target.closest('ul');
        if (isShiftKey) {
            if (ul) {
                ul.style.userSelect = 'none';
            }
        }
        if (!isCtrlKey && !isShiftKey) {
            this.rightActiveIndex = index;
            /** @type {?} */
            var isCheckboxClicked = target.className.indexOf('custom-checkbox') > -1 || target.closest('.custom-checkbox');
            if (isCheckboxClicked) {
                if (this._rightCheckeds && this._rightCheckeds[item[this.idField]]) {
                    this.rightSelectedItem = null;
                    delete this._rightCheckeds[item[this.idField]];
                }
                else {
                    this._rightCheckeds = this._rightCheckeds || {};
                    this._rightCheckeds[item[this.idField]] = item;
                }
            }
            else {
                this.clearRightCheckeds();
                this._rightCheckeds = this._rightCheckeds || {};
                this._rightCheckeds[item[this.idField]] = item;
            }
        }
        else {
            /** @type {?} */
            var setCheckItems = (/**
             * @param {?=} isAdd
             * @return {?}
             */
            function (isAdd) {
                if (isAdd === void 0) { isAdd = true; }
                /** @type {?} */
                var focusIndex = _this_1.rightActiveIndex;
                if (focusIndex === -1) {
                    focusIndex = 0;
                }
                /** @type {?} */
                var endIndex = index;
                /** @type {?} */
                var start = focusIndex;
                /** @type {?} */
                var end = endIndex;
                if (focusIndex > endIndex) {
                    start = endIndex;
                    end = focusIndex;
                }
                /** @type {?} */
                var selectItems = tslib_1.__spread(_this_1._rightData).splice(start, end - start + 1);
                if (!isAdd) {
                    _this_1._rightCheckeds = [];
                }
                selectItems.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    _this_1._rightCheckeds[n[_this_1.idField]] = n;
                }));
            });
            if (isCtrlKey) {
                if (this._rightCheckeds[item[this.idField]]) {
                    delete this._rightCheckeds[item[this.idField]];
                    this.rightSelectedItem = null;
                }
                else {
                    this._rightCheckeds[item[this.idField]] = item;
                }
                if (isShiftKey) {
                    setCheckItems();
                }
                this.rightActiveIndex = index;
            }
            else if (isShiftKey) {
                setCheckItems(isCtrlKey);
            }
        }
        if (ul) {
            ul.style.userSelect = 'none';
        }
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    MultiSelectComponent.prototype.onRightItemClick = /**
     * @param {?} $event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function ($event, item, index) {
        if (this.enableMoveMore) {
            this.rightDataClicked($event, item, index);
        }
        else {
            this.rightDataChecked(item);
        }
    };
    //#endregion
    //#endregion
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.clearRightCheckeds = 
    //#endregion
    /**
     * @return {?}
     */
    function () {
        this._rightCheckeds = {};
        this.cd.detectChanges();
    };
    MultiSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'multi-select',
                    template: "<div class=\"f-utils-fill f-multi-select-list d-flex flex-column\">\r\n    <div class=\"f-utils-flex-column f-multi-select-list-content f-utils-fill\">\r\n        <legend class=\"f-multi-select-list-title\">\r\n            {{leftTitle === '\u672A\u9009\u62E9' ? ('multiSelect.leftTitle'|locale) : leftTitle}} ( {{ canCheckLength }} / {{ leftCount }} )\r\n            <span *ngIf=\"displayType === 'Tree' && showCascadeControl\" style=\"display: flex; align-items: center;\">\r\n                <input type=\"checkbox\" style=\"margin-right:2px\" [(ngModel)]=\"enableCascase\" id=\"fms_chkenablecascade\"><label for=\"fms_chkenablecascade\" style=\"margin:0\">\u7EA7\u8054\u9009\u62E9</label>\r\n            </span>\r\n            <ng-content select=\".left-title\"></ng-content>\r\n        </legend>\r\n        <div class=\"input-group\" *ngIf=\"enableSearch\" style=\"margin: 5px; width: auto\">\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"searchValue\" placeholder=\"{{ 'multiSelect.filterPlaceholder' | locale }}\" />\r\n            <div class=\"input-group-append\" style=\"background: transparent;display: flex;align-items: center;padding: 0 5px;\">\r\n                <span class=\"f-icon f-icon-search\" *ngIf=\"!searchValue\" ></span>\r\n                <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" *ngIf=\"searchValue\" (click)=\"searchValue = '';\"></span>\r\n            </div>\r\n        </div>\r\n        <div class=\"container columns-box f-utils-fill\" [class.pl-2]=\"displayType !== 'List'\">\r\n            <perfect-scrollbar [config]=\"{}\">\r\n                <ng-container *ngIf=\"displayType === 'List'; else tree\">\r\n                    <ul class=\"f-multi-select-list-group multi-select-list-group-flush f-multi-select-list-group--left\" [class.f-multi-select-norecords]=\"!dataSource || !dataSource.length\">\r\n                        <ng-template [ngIf]=\"dataSource && dataSource.length\">\r\n                            <li class=\"f-multi-select-list-group-item\" (click)=\"leftDataChecked([data])\"\r\n                                *ngFor=\"let data of dataSource;trackBy: trackByItems\" [ngClass]=\"{'f-state-disabled':!canChecked(data),'active':isChecked(data, 'L')}\">\r\n                                <div class=\"custom-control custom-checkbox  custom-control-inline\">\r\n                                    <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"isChecked(data, 'L')\"\r\n                                        [disabled]=\"!canChecked(data)\">\r\n                                    <label class=\"custom-control-label\" [style.white-space]=\"wordWrap ? 'break-spaces': 'nowrap'\" [style.word-wrap]=\"wordWrap? 'break-word': 'normal'\">\r\n                                        <display-text [template]=\"displayTemplate\" [data]=\"data\"></display-text>\r\n                                    </label>\r\n                                </div>\r\n                            </li>\r\n                        </ng-template>\r\n                        <ng-template [ngIf]=\"!dataSource || !dataSource.length\">\r\n                            <li class=\"f-multi-select-norecords-content\"> {{emptyData}} </li>\r\n                        </ng-template>\r\n                    </ul>\r\n                </ng-container>\r\n\r\n                <ng-template #tree>\r\n                    <farris-treetable #tt [data]=\"dataSource\" [idField]=\"idField\" [striped]=\"false\" [cascadeCheck]=\"enableCascase\" [cascadeDown]=\"enableCascase\" [cascadeUp]=\"enableCascase\"\r\n                        [singleSelect]=\"false\" [showIcon]=\"false\" [showFilterBar]=\"false\" [showCheckbox]=\"true\"\r\n                        [selectOnCheck]=\"true\" [checkOnSelect]=\"true\" [showBorder]=\"false\" (checkValuesChange)=\"onCheckValueChange($event)\">\r\n                        <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\">\r\n                            <tr #row=\"row\" [selectRow]=\"rowNode\" [dblclick]=\"true\"\r\n                                [selectRowDisabled]=\"!canChecked(treeNode)\" [attr.id]=\"rowNode.id\">\r\n                                <td style=\"border: 0; line-height: 26px;padding: 0px\" [style.color]=\"row.selectRowDisabled? '#a6a6a6': '#333'\">\r\n                                    <farris-treeTableToggler [disabled]=\"!canChecked(treeNode)\" [rowNode]=\"rowNode\">\r\n                                    </farris-treeTableToggler>\r\n                                    <display-text [template]=\"displayTemplate\" [data]=\"rowData\"></display-text>\r\n                                </td>\r\n                            </tr>\r\n                        </ng-template>\r\n                    </farris-treetable>\r\n                </ng-template>\r\n            </perfect-scrollbar>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"f-multi-select-list-btns\" [class.col-2]=\"!enableTargetSort\">\r\n \r\n    <button [title]=\"'multiSelect.allShiftRight' | locale\" class=\"btn btn-secondary f-btn-icon \" type=\"button\"\r\n        (click)=\"moveAllToRight()\">\r\n        <span class=\"f-icon f-icon-arrow-seek-right\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.shiftRight' | locale\" class=\"btn btn-secondary f-btn-icon right-all\" type=\"button\"\r\n    (click)=\"moveToRight()\">\r\n    <span class=\"f-icon f-icon-arrow-chevron-right\"></span>\r\n</button>\r\n    <button [title]=\"'multiSelect.shiftLeft' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveToLeft()\">\r\n        <span class=\"f-icon f-icon-arrow-chevron-left\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.allShiftLeft' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveAllToLeft()\">\r\n        <span class=\"f-icon f-icon-arrow-seek-left\"></span>\r\n    </button>\r\n</div>\r\n<div class=\"f-utils-fill f-multi-select-list d-flex flex-column\">\r\n    <div class=\"f-utils-flex-column f-multi-select-list-content f-utils-fill\">\r\n        <legend class=\"f-multi-select-list-title\">\r\n            {{rightTitle === '\u5DF2\u9009\u62E9' ? ('multiSelect.rightTitle'|locale) : rightTitle}} ({{selections && selections.length}})\r\n\r\n            <div *ngIf=\"enableReset && showCheckbox\">\r\n                <button class=\"btn btn-link\" title=\"\u53D6\u6D88\u6240\u6709\u52FE\u9009\" (click)=\"clearRightCheckeds()\">\u91CD\u7F6E</button>\r\n            </div>\r\n            <ng-content select=\".right-title\"></ng-content>\r\n        </legend>\r\n        <div class=\"container columns-box f-utils-fill\">\r\n            <perfect-scrollbar [config]=\"{}\">\r\n                <ul class=\"f-multi-select-list-group multi-select-list-group-flush f-multi-select-list-group--right\">\r\n                    <li class=\"f-multi-select-list-group-item\" *ngFor=\"let data of selections;trackBy: trackByItems; index as i\"\r\n                        (click)=\"onRightItemClick($event, data, i)\"  [ngClass]=\"{'item--show-checkbox':showCheckbox && data['showCheckbox'] !== false}\"\r\n                        [class.active]=\"!enableMoveMore ?rightSelectedItem && rightSelectedItem[this.idField] === data[idField] : (_rightCheckeds? !!_rightCheckeds[data[idField]] : false)\"\r\n                        [ngStyle]=\"wordWrap ? { overflow: 'hidden',textOverflow: 'ellipsis'} : null\">\r\n                        <ng-container *ngIf=\"showCheckbox && data['showCheckbox'] !== false\">\r\n                            <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                               <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"isChecked(data, 'R')\">\r\n                               <label class=\"custom-control-label\"></label>\r\n                            </div>  \r\n                        </ng-container>\r\n                        <display-text [template]=\"displayTemplate\" [data]=\"data\" [side]=\"'R'\" \r\n                            [style.word-wrap]=\"wordWrap? 'break-word': 'normal'\"\r\n                            [style.white-space]=\"wordWrap ? 'break-spaces': 'nowrap'\" ></display-text>\r\n                    </li>\r\n                </ul>\r\n            </perfect-scrollbar>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"f-multi-select-list-btns\" *ngIf=\"enableTargetSort\">\r\n    <button [title]=\"'multiSelect.top' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\" (click)=\"moveTop()\">\r\n        <span class=\"f-icon f-icon-roofing\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.shiftUp' | locale\" class=\"btn btn-secondary f-btn-icon right-all\" type=\"button\"\r\n        (click)=\"moveUp()\">\r\n        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.shiftDown' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveDown()\">\r\n        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.bottom' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveBottom()\">\r\n        <span class=\"f-icon f-icon-bottomsetting\"></span>\r\n    </button>\r\n</div>",
                    styles: [".f-multi-select-list .search{position:relative}.f-multi-select-list .search .form-control{line-height:1.875;height:1.875;outline:0}.f-multi-select-list .f-table-norecords-content{margin:-10.0625rem 0 0 -.225rem}"]
                }] }
    ];
    /** @nocollapse */
    MultiSelectComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    MultiSelectComponent.propDecorators = {
        dataSource: [{ type: Input }],
        displayType: [{ type: Input }],
        enableTargetSort: [{ type: Input }],
        idField: [{ type: Input }],
        textField: [{ type: Input }],
        valueField: [{ type: Input }],
        height: [{ type: Input }],
        fit: [{ type: Input }],
        noDataMoveMessage: [{ type: Input }],
        showCascadeControl: [{ type: Input }],
        leftTitle: [{ type: Input }],
        rightTitle: [{ type: Input }],
        selectedId: [{ type: Input }],
        enableSearch: [{ type: Input }],
        showCheckbox: [{ type: Input }],
        enableReset: [{ type: Input }],
        wordWrap: [{ type: Input }],
        enableMoveMore: [{ type: Input }],
        searchValueField: [{ type: Input }],
        dataChange: [{ type: Output }],
        selected: [{ type: Output }],
        unSelected: [{ type: Output }],
        selectedIdChange: [{ type: Output }],
        beforeMove: [{ type: Output }],
        afterMove: [{ type: Output }],
        sortMove: [{ type: Output }],
        templates: [{ type: ContentChildren, args: [FarrisTemplateDirective,] }],
        tt: [{ type: ViewChild, args: ['tt',] }]
    };
    return MultiSelectComponent;
}());
export { MultiSelectComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype.allTreeNodes;
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype._ds;
    /** @type {?} */
    MultiSelectComponent.prototype.displayType;
    /**
     * 显示右侧上移下移按钮
     * @type {?}
     */
    MultiSelectComponent.prototype.enableTargetSort;
    /** @type {?} */
    MultiSelectComponent.prototype.idField;
    /** @type {?} */
    MultiSelectComponent.prototype.textField;
    /** @type {?} */
    MultiSelectComponent.prototype.valueField;
    /** @type {?} */
    MultiSelectComponent.prototype.height;
    /** @type {?} */
    MultiSelectComponent.prototype.fit;
    /** @type {?} */
    MultiSelectComponent.prototype.noDataMoveMessage;
    /**
     * 树结构时，是否显示级联选择控制选项
     * @type {?}
     */
    MultiSelectComponent.prototype.showCascadeControl;
    /** @type {?} */
    MultiSelectComponent.prototype.leftTitle;
    /** @type {?} */
    MultiSelectComponent.prototype.rightTitle;
    /** @type {?} */
    MultiSelectComponent.prototype.selectedId;
    /** @type {?} */
    MultiSelectComponent.prototype.enableSearch;
    /**
     * 目标数据源显示checkbox 允许多选
     * @type {?}
     */
    MultiSelectComponent.prototype.showCheckbox;
    /**
     * 右侧已选启用重置，在启用复选框时，是否显示重置按钮，即取消右侧所有勾选项，默认为 false
     * @type {?}
     */
    MultiSelectComponent.prototype.enableReset;
    /**
     * 启用折行
     * @type {?}
     */
    MultiSelectComponent.prototype.wordWrap;
    /**
     * 启用多条记录一起移动；默认 false
     * @type {?}
     */
    MultiSelectComponent.prototype.enableMoveMore;
    /**
     * 查询时对value字段进行查询，默认为 true; false时仅查询文本字段
     * @type {?}
     */
    MultiSelectComponent.prototype.searchValueField;
    /** @type {?} */
    MultiSelectComponent.prototype.dataChange;
    /** @type {?} */
    MultiSelectComponent.prototype.selected;
    /** @type {?} */
    MultiSelectComponent.prototype.unSelected;
    /** @type {?} */
    MultiSelectComponent.prototype.selectedIdChange;
    /** @type {?} */
    MultiSelectComponent.prototype.beforeMove;
    /** @type {?} */
    MultiSelectComponent.prototype.afterMove;
    /** @type {?} */
    MultiSelectComponent.prototype.sortMove;
    /** @type {?} */
    MultiSelectComponent.prototype.templates;
    /** @type {?} */
    MultiSelectComponent.prototype.tt;
    /** @type {?} */
    MultiSelectComponent.prototype._rightCheckeds;
    /** @type {?} */
    MultiSelectComponent.prototype._leftCheckeds;
    /** @type {?} */
    MultiSelectComponent.prototype._rightData;
    /** @type {?} */
    MultiSelectComponent.prototype.canCheckLength;
    /** @type {?} */
    MultiSelectComponent.prototype.leftCount;
    /** @type {?} */
    MultiSelectComponent.prototype._searchValue;
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype.copyDataSource;
    /** @type {?} */
    MultiSelectComponent.prototype.treeDataLength;
    /** @type {?} */
    MultiSelectComponent.prototype.displayTemplate;
    /** @type {?} */
    MultiSelectComponent.prototype.emptyData;
    /** @type {?} */
    MultiSelectComponent.prototype.el;
    /** @type {?} */
    MultiSelectComponent.prototype.render;
    /** @type {?} */
    MultiSelectComponent.prototype.localeService;
    /** @type {?} */
    MultiSelectComponent.prototype.commonUtils;
    /** @type {?} */
    MultiSelectComponent.prototype.enableCascase;
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype.updateTimer1;
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype.updateTimer2;
    /** @type {?} */
    MultiSelectComponent.prototype.rightSelectedItem;
    /** @type {?} */
    MultiSelectComponent.prototype.rightActiveIndex;
    /** @type {?} */
    MultiSelectComponent.prototype.trackByItems;
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype.mesagerSer;
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    MultiSelectComponent.prototype.cd;
}
var DisplayTextComponent = /** @class */ (function () {
    function DisplayTextComponent(ms) {
        this.ms = ms;
        this.side = 'L';
    }
    /**
     * @return {?}
     */
    DisplayTextComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // console.log(this.data);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DisplayTextComponent.prototype._getText = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.ms.getText(item);
    };
    DisplayTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'display-text',
                    template: "\n        <ng-container *ngIf=\"template\" >\n            <ng-container\n                *ngTemplateOutlet=\"template; context: {$implicit: data,instance: ms, side: side, selected: ms.isChecked(data, 'R') }\">\n            </ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!template\">{{_getText(data)}}</ng-container>\n    "
                }] }
    ];
    /** @nocollapse */
    DisplayTextComponent.ctorParameters = function () { return [
        { type: MultiSelectComponent }
    ]; };
    DisplayTextComponent.propDecorators = {
        template: [{ type: Input }],
        data: [{ type: Input }],
        side: [{ type: Input }]
    };
    return DisplayTextComponent;
}());
export { DisplayTextComponent };
if (false) {
    /** @type {?} */
    DisplayTextComponent.prototype.template;
    /** @type {?} */
    DisplayTextComponent.prototype.data;
    /** @type {?} */
    DisplayTextComponent.prototype.side;
    /** @type {?} */
    DisplayTextComponent.prototype.ms;
}
//# sourceMappingURL=data:application/json;base64,