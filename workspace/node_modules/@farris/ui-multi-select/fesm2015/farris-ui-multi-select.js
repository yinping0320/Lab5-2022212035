import { cloneDeep } from 'lodash-es';
import { Component, Input, ViewChild, Output, EventEmitter, ContentChildren, Injector, ChangeDetectorRef, ElementRef, Renderer2, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { TreeTableModule } from '@farris/ui-treetable';
import { CommonUtils, FarrisTemplateDirective, FarrisCommonModule } from '@farris/ui-common';
import { FormsModule } from '@angular/forms';
import { MessagerService, MessagerModule } from '@farris/ui-messager';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiSelectComponent {
    /**
     * @param {?} mesagerSer
     * @param {?} injector
     * @param {?} cd
     */
    constructor(mesagerSer, injector, cd) {
        this.mesagerSer = mesagerSer;
        this.injector = injector;
        this.cd = cd;
        this.allTreeNodes = [];
        this._ds = [];
        this.displayType = 'List';
        /**
         * 显示右侧上移下移按钮
         */
        this.enableTargetSort = true;
        this.height = 445;
        this.fit = true;
        this.noDataMoveMessage = '请选择要移动的数据。';
        /**
         * 树结构时，是否显示级联选择控制选项
         */
        this.showCascadeControl = false;
        this.leftTitle = '未选择';
        this.rightTitle = '已选择';
        this.enableSearch = true;
        /**
         * 目标数据源显示checkbox 允许多选
         */
        this.showCheckbox = false;
        /**
         * 右侧已选启用重置，在启用复选框时，是否显示重置按钮，即取消右侧所有勾选项，默认为 false
         */
        this.enableReset = false;
        /**
         * 启用折行
         */
        this.wordWrap = false;
        /**
         * 启用多条记录一起移动；默认 false
         */
        this.enableMoveMore = false;
        /**
         * 查询时对value字段进行查询，默认为 true; false时仅查询文本字段
         */
        this.searchValueField = true;
        this.dataChange = new EventEmitter();
        this.selected = new EventEmitter();
        this.unSelected = new EventEmitter();
        this.selectedIdChange = new EventEmitter();
        this.beforeMove = new EventEmitter();
        this.afterMove = new EventEmitter();
        this.sortMove = new EventEmitter();
        // 左侧选中的数据 { [keyVal]: obj, [keyVal]: obj ... }
        this._leftCheckeds = {};
        // 右侧数据
        this._rightData = [];
        this.canCheckLength = 0;
        this.leftCount = 0;
        this._searchValue = '';
        // 级联选择控制选项
        this.enableCascase = true;
        this.updateTimer1 = null;
        this.updateTimer2 = null;
        this.rightSelectedItem = null;
        this.rightActiveIndex = -1;
        this.trackByItems = (/**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        (index, item) => {
            return index;
        });
        if (!Object.values) {
            Object.values = (/**
             * @param {?} obj
             * @return {?}
             */
            function (obj) {
                return Object.keys(obj).map((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    return obj[e];
                }));
            });
        }
        this.el = this.injector.get(ElementRef);
        this.render = this.injector.get(Renderer2);
        this.localeService = this.injector.get(LocaleService);
        this.commonUtils = this.injector.get(CommonUtils, null);
    }
    /**
     * @return {?}
     */
    get dataSource() {
        return this._ds;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set dataSource(val) {
        val = val || [];
        this._ds = val;
        if (!this.searchValue) {
            if (val.length) {
                if (val[0].toJSON) {
                    this.copyDataSource = val.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.toJSON()));
                }
                else {
                    this.copyDataSource = cloneDeep(val);
                }
            }
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.initRightData(this.selectedId, false);
            }));
        }
    }
    /**
     * @return {?}
     */
    get selections() {
        return this._rightData;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set selections(val) {
        this._rightData = val.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== undefined && n !== null));
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    get searchValue() {
        return this._searchValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set searchValue(value) {
        this._searchValue = value;
        // this.copyDataSource = [...this.dataSource];
        if (value === undefined || value === null || value === '') {
            /** @type {?} */
            let leftCheckitems = Object.assign({}, this._leftCheckeds);
            if (this.displayType === 'Tree') {
                this.tt.selections.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    leftCheckitems[n.id] = n.data;
                }));
            }
            this.dataSource = this.copyDataSource;
            if (this.displayType === 'Tree') {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const ids = Object.keys(leftCheckitems);
                    if (ids && ids.length) {
                        this.tt.checkedNodes(ids);
                    }
                }));
            }
            else {
                this._leftCheckeds = Object.assign({}, leftCheckitems);
            }
            return;
        }
        if (this.displayType === 'Tree') {
            // const newDataSource = this.getTreeDataBySearch(this._searchValue, this.allTreeNodes);
            this.tt.searchHandle.search(`${this.textField},${this.valueField}`, this._searchValue);
        }
        else {
            this.dataSource = this.getListDataBySearch(this._searchValue, this.copyDataSource);
        }
        if (this.updateTimer1) {
            clearTimeout(this.updateTimer1);
        }
        this.updateTimer1 = setTimeout((/**
         * @return {?}
         */
        () => {
            this.canCheckLength = this.getCanCheckLength();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.copyDataSource = this.dataSource ? [...this.dataSource] : [];
        this.emptyData = this.localeService.getValue('multiSelect.emptyData') || '暂无数据';
        this.initRightData(this.selectedId);
        this.moveItem();
        if (!this.showCheckbox && this.enableMoveMore) {
            this.showCheckbox = true;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const elt = this.el.nativeElement;
        this.render.addClass(elt, 'row');
        this.render.addClass(elt, 'f-multi-select');
        if (this.fit === true) {
            this.render.addClass(elt, 'f-utils-fill');
            this.render.setStyle(elt, 'height', '100%');
        }
        else {
            if (!!this.height) {
                this.render.setStyle(elt, 'height', this.height + 'px');
            }
        }
        this.noDataMoveMessage =
            this.noDataMoveMessage === '请选择要移动的数据。' ? this.localeService.getValue('multiSelect.noDataMoveMessage') : this.noDataMoveMessage;
        if (this.tt && this.selectedId) {
            this.tt.checkedNodes(this.selectedId);
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.templates.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            switch (item.getType()) {
                case 'text':
                    this.displayTemplate = item.template;
                    break;
            }
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.dataSource && !changes.dataSource.isFirstChange()) {
            this._leftCheckeds = {};
            this._rightData = [];
        }
        if (changes.selectedId && !changes.selectedId.isFirstChange()) {
            /** @type {?} */
            const cv = changes.selectedId.currentValue || [];
            /** @type {?} */
            const pv = changes.selectedId.previousValue || [];
            // 当设置选中的ID 为空时，执行清空右侧数据
            if (!cv.length) {
                this.clearSelections();
                // TFS 611928
                this.canCheckLength = this.getCanCheckLength();
                return;
            }
            if (cv.length != pv.length || JSON.stringify(cv) !== JSON.stringify(pv)) {
                this.initRightData(changes.selectedId.currentValue);
            }
        }
    }
    /**
     * @return {?}
     */
    getCanCheckLength() {
        /** @type {?} */
        let n = 0;
        /** @type {?} */
        let total = 0;
        if (this.isTree()) {
            this.tt.serializedValue.forEach((/**
             * @param {?} rn
             * @return {?}
             */
            rn => {
                if (rn.node.selectable) {
                    if (this.canChecked(rn.node)) {
                        n++;
                    }
                }
            }));
            total = this.tt.serializedValue.length;
        }
        else {
            this.dataSource.forEach((/**
             * @param {?} d
             * @return {?}
             */
            d => {
                if (this.canChecked(d)) {
                    n++;
                }
            }));
            total = this.dataSource.length;
        }
        this.leftCount = total;
        return n;
    }
    /**
     * 获取搜索的数据，List结构
     * @private
     * @param {?} value 搜索的字符
     * @param {?} data 数据
     * @return {?}
     */
    getListDataBySearch(value, data) {
        /** @type {?} */
        const result = [];
        value = '' + value;
        if (data instanceof Array) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                let txt = '';
                /** @type {?} */
                let val = '';
                if (this.textField) {
                    txt = '' + this.getText(item);
                }
                if (this.valueField) {
                    val = '' + this.getValue(item);
                }
                /** @type {?} */
                const textCompare = (/**
                 * @return {?}
                 */
                () => {
                    return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;
                });
                /** @type {?} */
                const valueCompare = (/**
                 * @return {?}
                 */
                () => {
                    return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;
                });
                if (this.searchValueField) {
                    if (this.textField && this.valueField) {
                        if (textCompare() || valueCompare()) {
                            result.push(item);
                        }
                    }
                    else if (this.textField && !this.valueField) {
                        if (textCompare()) {
                            result.push(item);
                        }
                    }
                    else if (!this.textField && this.valueField) {
                        if (valueCompare()) {
                            result.push(item);
                        }
                    }
                }
                else {
                    if (textCompare()) {
                        result.push(item);
                    }
                }
            }));
        }
        return result;
    }
    /**
         * 获取包含value值得节点
         */
    // private getTreeDataByRecursive(value: string, data: any[], newData: any[]) {
    //     value = '' + value;
    //     data.forEach(item => {
    //         let txt = '';
    //         let val = '';
    //         if (this.textField) {
    //             txt = '' + this.getText(item.data);
    //         }
    //         if (this.valueField) {
    //             val = '' + this.getValue(item.data);
    //         }
    //         const textCompare = () => {
    //             return txt.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         const valueCompare = () => {
    //             return val.toLowerCase().indexOf(value.toLowerCase()) !== -1;
    //         }
    //         if (this.textField && this.valueField) {
    //             if (textCompare() || valueCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (this.textField && !this.valueField) {
    //             if (textCompare()) {
    //                 newData.push(item);
    //             }
    //         } else if (!this.textField && this.valueField) {
    //             if (valueCompare()) {
    //                 newData.push(item);
    //             }
    //         }
    //         if (item.children && item.children.length) {
    //             this.getTreeDataByRecursive(value, item.children, newData);
    //         }
    //     });
    // }
    /**
         * 获取根节点
         */
    // private getTreeRootNode(data: any[], rootData: any[]) {
    //     data.forEach(item => {
    //         if (item.parent === null) {
    //             rootData.push(item);
    //         } else {
    //             this.getTreeRootNode(new Array(item.parent), rootData);
    //         }
    //     });
    // }
    /**
     * 获取搜索的数据，Tree结构
     * @private
     * @param {?} ids
     * @param {?=} clearRight
     * @return {?}
     */
    // private getTreeDataBySearch(value: string, data: any[]): any[] {
    //     const rootNodes = [];
    //     const nodes = [];
    //     const finalRes = [];
    //     const uniqueId = [];
    //     // 获取包含value值得节点
    //     this.getTreeDataByRecursive(value, data, nodes);
    //     // 获取根节点
    //     this.getTreeRootNode(nodes, rootNodes);
    //     // 去重
    //     rootNodes.forEach(node => {
    //         if (!uniqueId.some(item => item == node.id)) {
    //             finalRes.push(node);
    //             uniqueId.push(node.id);
    //         }
    //     });
    //     return finalRes;
    // }
    initRightData(ids, clearRight = true) {
        /** @type {?} */
        let dataSource = [];
        if (!ids || !ids.length) {
            ids = this.selections.map((/**
             * @param {?} i
             * @return {?}
             */
            i => {
                return i[this.idField];
            }));
        }
        if (ids && ids.length) {
            if (this.isTree()) {
                this.convertTreeDataToPlainData(this.copyDataSource, dataSource);
                this._rightData = this.getTreeSelectionsById(ids, dataSource);
            }
            else {
                this._rightData = this.getListSelectionsById(ids, this.copyDataSource);
            }
        }
        else {
            if (clearRight) {
                this.moveAllToLeft();
            }
        }
        this.checkLeftData(ids);
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    checkLeftData(ids) {
        if (ids && ids.length) {
            /** @type {?} */
            const checkeds = Object.assign({}, this._leftCheckeds);
            this._leftCheckeds = ids.reduce((/**
             * @param {?} r
             * @param {?} id
             * @return {?}
             */
            (r, id) => {
                r[id] = this._rightData.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField] == id));
                return r;
            }), {});
            for (let k in this._leftCheckeds) {
                if (!this._leftCheckeds[k]) {
                    delete this._leftCheckeds[k];
                }
            }
            this._leftCheckeds = Object.assign({}, checkeds, this._leftCheckeds);
        }
        this.updateAllTreeNodes(ids);
    }
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    updateAllTreeNodes(ids) {
        if (this.updateTimer2) {
            clearTimeout(this.updateTimer2);
        }
        this.updateTimer2 = setTimeout((/**
         * @return {?}
         */
        () => {
            this.canCheckLength = this.getCanCheckLength();
            if (this.tt) {
                if (ids && ids.length) {
                    this.tt.checkedNodes(ids, true, false, true);
                }
                this.allTreeNodes = cloneDeep(this.tt.state.rowNodes.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.node)));
            }
        }));
    }
    /**
     * @private
     * @param {?} ids 选中数据的id
     * @param {?} dataSource 原始数据
     * @return {?}
     */
    getListSelectionsById(ids, dataSource) {
        /** @type {?} */
        let result = [];
        /** @type {?} */
        const _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            /** @type {?} */
            const reusltObj = dataSource.find((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return item[_this.idField] === ids;
            }));
            if (reusltObj) {
                result.push(reusltObj);
            }
        }
        else if (Array.isArray(ids)) {
            if (Array.isArray(dataSource)) {
                result = ids.map((/**
                 * @param {?} id
                 * @return {?}
                 */
                id => dataSource.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item[this.idField] === id)))).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    }
    /**
     *
     * @private
     * @param {?} ids 选中数据的id
     * @param {?} dataSource 原始数据
     * @return {?}
     */
    getTreeSelectionsById(ids, dataSource) {
        /** @type {?} */
        let result = [];
        /** @type {?} */
        const _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            /** @type {?} */
            const reusltObj = dataSource.find((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return item.data[_this.idField] === ids;
            }));
            if (reusltObj && reusltObj.data) {
                result.push(reusltObj.data);
            }
        }
        else if (Array.isArray(ids)) {
            if (Array.isArray(dataSource)) {
                result = ids.map((/**
                 * @param {?} id
                 * @return {?}
                 */
                id => {
                    return dataSource.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.data[this.idField] === id));
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n)).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data));
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    }
    /**
     * 判断是否选中
     * @param {?} data 要验证的数据
     * @param {?} direction 验证的数据所在的位置 L: 左侧，R: 右侧
     * @return {?}
     */
    isChecked(data, direction) {
        /** @type {?} */
        const keyVal = data[this.idField];
        if (direction === 'L') {
            return (this._leftCheckeds && this._leftCheckeds[keyVal] !== undefined); // || !this.canChecked(data);
        }
        else {
            if (this._rightCheckeds) {
                return this._rightCheckeds[keyVal] !== undefined;
            }
            else {
                return false;
            }
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    canChecked(item) {
        /** @type {?} */
        let data = item;
        if (this.isTree()) {
            data = item.data;
            if (item.selectable !== undefined && !item.selectable) {
                return false;
            }
        }
        if (!this.selections || this.selections.length === 0) {
            return true;
        }
        return this.selections.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c && c[this.idField] === data[this.idField])) === -1;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    onCheckValueChange(ids) {
    }
    /**
     * @return {?}
     */
    isTree() {
        return this.displayType === 'Tree';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    leftDataChecked(data) {
        if (data && data.length) {
            data.forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => {
                /** @type {?} */
                let d = node;
                if (this.isTree()) {
                    d = node.data;
                }
                if (this.canChecked(node)) {
                    if (this.isChecked(d, 'L')) {
                        delete this._leftCheckeds[d[this.idField]];
                    }
                    else {
                        if (!this._leftCheckeds) {
                            this._leftCheckeds = {};
                        }
                        this._leftCheckeds[d[this.idField]] = d;
                    }
                }
            }));
        }
    }
    /**
     * @param {?} dir
     * @return {?}
     */
    hasCheckeds(dir) {
        if (dir === 'L') {
            if (this.isTree()) {
                return this.tt.checkeds && this.tt.checkeds.length || (this.tt.selections && this.tt.selections.length);
            }
            if (this._leftCheckeds) {
                return Object.keys(this._leftCheckeds).length > 0;
            }
            else {
                return false;
            }
        }
        else {
            if (this._rightCheckeds) {
                return Object.keys(this._rightCheckeds).length > 0;
            }
            else {
                return false;
            }
        }
    }
    /**
     * @param {?} item
     * @param {?=} emit
     * @return {?}
     */
    rightDataChecked(item, emit = true) {
        /** @type {?} */
        const isCheck = this.isChecked(item, 'R');
        if (isCheck) {
            if (this.showCheckbox) {
                delete this._rightCheckeds[item[this.idField]];
            }
            else {
                this._rightCheckeds = {};
            }
            this.rightSelectedItem = null;
            this.unSelected.emit({ data: item });
            return;
        }
        else {
            if (this.showCheckbox) {
                this._rightCheckeds = this._rightCheckeds || {};
            }
            else {
                this._rightCheckeds = {};
            }
            this.rightSelectedItem = item;
            this._rightCheckeds[item[this.idField]] = item;
        }
        this.cd.detectChanges();
        this.selected.emit({ selected: !isCheck, data: item });
    }
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    selectItem(id, emit = true) {
        if (this.selections && this.selections.length) {
            /** @type {?} */
            const item = this.selections.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] === id));
            if (item) {
                this.rightDataChecked(item, emit);
            }
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    clearSelections(emit = false) {
        this._rightCheckeds = {};
        this._leftCheckeds = {};
        this._rightData = [];
        this.selectedId = [];
        if (this.isTree() && this.tt) {
            /** @type {?} */
            const _chkids = this.tt.checkeds.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id));
            this.tt.clearAll();
            this.tt.state.rowNodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (_chkids.find((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i == n.id))) {
                    n.node.selectable = true;
                }
            }));
        }
        if (emit) {
            this.selectedIdChange.emit([]);
        }
    }
    /**
     * 将树结构数据转换为扁平数组
     * @private
     * @param {?} nodes 树节点数组
     * @param {?=} r 新的空数组
     * @return {?}
     */
    convertTreeDataToPlainData(nodes, r = []) {
        if (nodes) {
            nodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                r.push(n);
                if (n.children) {
                    this.convertTreeDataToPlainData(n.children, r);
                }
            }));
        }
        return r;
    }
    //#region 左右移动
    /**
     * @private
     * @return {?}
     */
    moveItem() {
        this.beforeMove.subscribe((/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => {
            /** @type {?} */
            const items = obj.items;
            /** @type {?} */
            let direction = 1;
            switch (obj.target) {
                case 'right':
                    Object.keys(items).forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    id => {
                        if (!this._rightData.find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n[this.idField].toString() === id))) {
                            this._rightData.push(items[id]);
                        }
                    }));
                    this._rightData = [...this._rightData];
                    if (this.isTree()) {
                        this.tt.clearAll();
                    }
                    direction = 1;
                    break;
                case 'rightAll':
                    items.forEach((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        if (this._rightData.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n[this.idField] === data[this.idField])) === -1) {
                            this._rightData.push(data);
                        }
                    }));
                    if (this.isTree()) {
                        this.tt.clearAll();
                    }
                    direction = 1;
                    break;
                case 'left':
                    /** @type {?} */
                    let ids = Object.keys(items);
                    this._rightData = this._rightData.filter((/**
                     * @param {?} v
                     * @return {?}
                     */
                    v => {
                        return ids.indexOf('' + v[this.idField]) === -1;
                    }));
                    this._rightCheckeds = {};
                    ids.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    id => {
                        delete this._leftCheckeds[id];
                    }));
                    if (this.rightSelectedItem) {
                        if (ids.indexOf('' + this.rightSelectedItem[this.idField]) > -1) {
                            this.rightSelectedItem = null;
                        }
                    }
                    direction = -1;
                    if (this.isTree()) {
                        this.tt.findRowNodes(ids).forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            n.node.selectable = true;
                        }));
                        this.tt.unCheckedNodes(ids, true);
                    }
                    break;
                case 'leftAll':
                    this._rightCheckeds = {};
                    this.rightSelectedItem = null;
                    this._rightData = [];
                    direction = -1;
                    this._leftCheckeds = {};
                    if (this.isTree() && this.tt) {
                        this.tt.clearAll();
                        /** @type {?} */
                        const _ids = items.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n[this.idField]));
                        this.tt.findRowNodes(_ids).forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            n.node.selectable = true;
                        }));
                    }
                    break;
            }
            this.selectionsChange();
            this.changeSelectIds(direction);
            this.afterMove.emit(Object.values(items));
        }));
    }
    /**
     * 右移
     * @param {?=} moveData
     * @return {?}
     */
    moveToRight(moveData) {
        if (moveData) {
            this.beforeMove.emit({ items: { [moveData[this.idField]]: moveData }, target: 'right' });
        }
        else {
            if (this.hasCheckeds('L')) {
                if (this.isTree()) {
                    this._leftCheckeds = {};
                    if (!this.tt.checkeds.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => this._rightData.findIndex((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r.id === n.id)) === -1)).length) {
                        this.mesagerSer.warning(this.noDataMoveMessage);
                        return;
                    }
                    this.tt.checkeds.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        this._leftCheckeds[n.data[this.idField]] = n.data;
                    }));
                    this.tt.selections.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        this._leftCheckeds[n.id] = n.data;
                    }));
                }
                else {
                    /** @type {?} */
                    const newCheckeds = Object.keys(this._leftCheckeds).filter((/**
                     * @param {?} id
                     * @return {?}
                     */
                    id => {
                        return this._rightData.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.id === id)) === -1;
                    }));
                    if (!newCheckeds.length) {
                        this.mesagerSer.warning(this.noDataMoveMessage);
                        return;
                    }
                }
                this.beforeMove.emit({ items: this._leftCheckeds, target: 'right' });
            }
            else {
                this.mesagerSer.warning(this.noDataMoveMessage);
            }
        }
    }
    /**
     * 全部右移
     * @return {?}
     */
    moveAllToRight() {
        if (this.searchValue === '') {
            this._rightData = [];
        }
        if (this.displayType === 'List') {
            /** @type {?} */
            const items = this.dataSource;
            // if (this.searchValue && this._leftCheckeds) {
            //     const checkids = Object.keys(this._leftCheckeds);
            //     if (checkids.length) {
            //         checkids.forEach(id => {
            //             if (!items.find(n => n[this.idField] === id)) {
            //                 items.push(this._leftCheckeds[id]);
            //             }
            //         });
            //     }
            // }
            this.beforeMove.emit({ items, target: 'rightAll' });
        }
        else {
            if (!this.searchValue) {
                /** @type {?} */
                let _dataSource = [];
                this.convertTreeDataToPlainData(this.dataSource, _dataSource);
                _dataSource = _dataSource.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.selectable && (n.visible || n.visible === undefined))).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data));
                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });
            }
            else {
                /** @type {?} */
                const _dataSource = this.tt.serializedValue.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.node.data));
                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });
            }
        }
    }
    /**
     * 左移
     * @param {?=} moveData
     * @return {?}
     */
    moveToLeft(moveData) {
        if (moveData) {
            this.beforeMove.emit({ items: { [moveData[this.idField]]: moveData }, target: 'left' });
        }
        else {
            if (this.hasCheckeds('R')) {
                this.beforeMove.emit({ items: this._rightCheckeds, target: 'left' });
            }
            else {
                this.mesagerSer.warning(this.noDataMoveMessage);
            }
        }
    }
    /**
     * 全部左移
     * @return {?}
     */
    moveAllToLeft() {
        this.beforeMove.emit({ items: this._rightData, target: 'leftAll' });
    }
    //#endregion
    //#region 上下移动显示列顺序
    /**
     * @return {?}
     */
    _getSelectInfo() {
        if (this.rightSelectedItem) {
            // const key = Object.keys(this._rightCheckeds)[0];
            /** @type {?} */
            const key = this.rightSelectedItem[this.idField];
            /** @type {?} */
            const index = this._rightData.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => '' + c[this.idField] == key));
            return {
                key, index
            };
        }
        return null;
    }
    /**
     * 置顶
     * @return {?}
     */
    moveTop() {
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore('top');
            return;
        }
        /** @type {?} */
        const obj = this._getSelectInfo();
        if (obj) {
            this._rightData.unshift(this._rightData[obj.index]);
            this._rightData.splice(obj.index + 1, 1);
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    }
    /**
     * 上移
     * @return {?}
     */
    moveUp() {
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore2('up');
            return;
        }
        /** @type {?} */
        const obj = this._getSelectInfo();
        if (obj) {
            /** @type {?} */
            const index = obj.index;
            if (index !== 0) {
                /** @type {?} */
                const tempArr = this._rightData.splice(index, 1);
                this._rightData.splice(index - 1, 0, ...tempArr);
            }
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    }
    /**
     * 下移
     * @return {?}
     */
    moveDown() {
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore2('down');
            return;
        }
        /** @type {?} */
        const obj = this._getSelectInfo();
        if (obj) {
            /** @type {?} */
            const len = this._rightData.length;
            /** @type {?} */
            const index = obj.index;
            if (index === 0 || index !== len - 1) {
                /** @type {?} */
                const tempArr = this._rightData.splice(index, 1);
                this._rightData.splice(index + 1, 0, ...tempArr);
            }
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    }
    /**
     * 置底
     * @return {?}
     */
    moveBottom() {
        if (this.enableMoveMore && this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            this.moveMore('bottom');
            return;
        }
        /** @type {?} */
        const obj = this._getSelectInfo();
        if (obj) {
            this._rightData.push(this._rightData[obj.index]);
            this._rightData.splice(obj.index, 1);
            this.selectionsChange();
            this.changeSelectIds(0);
        }
        else {
            this.mesagerSer.warning(this.noDataMoveMessage);
        }
    }
    /**
     * 触发选择中id
     * @private
     * @param {?} number 1代表左侧数据右移，-1,代表数据左移，0代表上移下移
     * @return {?}
     */
    changeSelectIds(number) {
        /** @type {?} */
        const ids = this._rightData.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item[this.idField];
        }));
        if (number === 0) {
            if (typeof this.selectedId === 'string') {
                this.selectedId = ids.join(',');
            }
            else if (Array.isArray(this.selectedId)) {
                this.selectedId = ids;
            }
            this.selectedIdChange.emit(this.selectedId);
            /** @type {?} */
            const rightActiveDom = this.el.nativeElement.querySelector('.f-multi-select-list-group--right li.active');
            if (rightActiveDom) {
                if (rightActiveDom.scrollIntoViewIfNeeded) {
                    rightActiveDom.scrollIntoViewIfNeeded();
                }
                else {
                    rightActiveDom.scrollIntoView();
                }
            }
            return;
        }
        if (!this.selectedId) {
            this.selectedId = [];
        }
        if (number === 1 || number === -1) {
            if (!ids.length) {
                this.selectedId = [];
            }
            else {
                this.selectedId = ids;
            }
            if (this.isTree()) {
                if (ids && ids.length) {
                    this.tt.checkedNodes(ids, true, false, true);
                }
            }
        }
        this.canCheckLength = this.getCanCheckLength();
        this.selectedIdChange.emit(this.selectedId);
    }
    //#endregion
    /**
     * @private
     * @return {?}
     */
    selectionsChange() {
        this.dataChange.emit(this._rightData);
        this.cd.detectChanges();
    }
    /**
     * @param {?} item
     * @param {?=} textField
     * @return {?}
     */
    getText(item, textField = this.textField) {
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue && textField) {
                return this.commonUtils.getValue(textField, item);
            }
            else {
                return item[textField];
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} item
     * @param {?=} valueField
     * @return {?}
     */
    getValue(item, valueField = this.valueField) {
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue && valueField) {
                return this.commonUtils.getValue(valueField, item);
            }
            else {
                return item[valueField];
            }
        }
        else {
            return '';
        }
    }
    //#region  右侧同时移动多条记录
    /**
     * 从右侧数据源中获取选中的记录
     * @private
     * @return {?}
     */
    getCheckedItemsFromDataSource() {
        if (this._rightData && this._rightData.length) {
            return this._rightData.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this._rightCheckeds[n[this.idField]]));
        }
        return [];
    }
    /**
     * @private
     * @return {?}
     */
    getCheckedFirstIndexAndLastIndex() {
        /** @type {?} */
        const _chkItems = this.getCheckedItemsFromDataSource();
        if (_chkItems && _chkItems.length) {
            /** @type {?} */
            const first = _chkItems[0];
            /** @type {?} */
            const last = _chkItems[_chkItems.length - 1];
            /** @type {?} */
            const firstIndex = this._rightData.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] == first[this.idField]));
            /** @type {?} */
            const lastIndex = this._rightData.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] == first[last.idField]));
            return { first: firstIndex, last: lastIndex };
        }
        return { first: -1, last: -1 };
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    moveMore(type) {
        if (this._rightCheckeds && Object.keys(this._rightCheckeds).length) {
            /** @type {?} */
            const _chkItems = this.getCheckedItemsFromDataSource();
            /** @type {?} */
            const items = this._rightData.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !_chkItems.find((/**
             * @param {?} r
             * @return {?}
             */
            r => r[this.idField] == n[this.idField]))));
            if (type === 'top') {
                items.splice(0, 0, ..._chkItems);
            }
            else if (type === 'bottom') {
                items.push(..._chkItems);
            }
            this._rightData = [...items];
            this.updateActiveIndex();
            this.selectionsChange();
            this.changeSelectIds(0);
        }
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    moveMore2(type) {
        const { first, last } = this.getCheckedFirstIndexAndLastIndex();
        /** @type {?} */
        const _chkItems = this.getCheckedItemsFromDataSource();
        // 获取排除已选中的记录
        /** @type {?} */
        const items = this._rightData.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !_chkItems.find((/**
         * @param {?} r
         * @return {?}
         */
        r => r[this.idField] == n[this.idField]))));
        if (type === 'up') {
            /** @type {?} */
            let tarIndex = first - 1;
            if (tarIndex < 0) {
                this.moveMore('top');
                return;
            }
            else {
                items.splice(tarIndex, 0, ..._chkItems);
            }
        }
        else if (type === 'down') {
            /** @type {?} */
            let downIdx = first + 1;
            if (downIdx >= this._rightData.length) {
                this.moveMore('bottom');
                return;
            }
            else {
                items.splice(downIdx, 0, ..._chkItems);
            }
        }
        this._rightData = [...items];
        this.updateActiveIndex();
        this.selectionsChange();
        this.changeSelectIds(0);
    }
    /**
     * @private
     * @return {?}
     */
    updateActiveIndex() {
        /** @type {?} */
        let idx = -1;
        if (this.rightSelectedItem) {
            idx = this._rightData.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] === this.rightSelectedItem[this.idField]));
        }
        this.rightActiveIndex = idx;
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    rightDataClicked($event, item, index) {
        /** @type {?} */
        const isCtrlKey = $event.ctrlKey;
        /** @type {?} */
        const isShiftKey = $event.shiftKey;
        this.rightSelectedItem = item;
        /** @type {?} */
        const target = $event.target;
        /** @type {?} */
        const ul = target.closest('ul');
        if (isShiftKey) {
            if (ul) {
                ul.style.userSelect = 'none';
            }
        }
        if (!isCtrlKey && !isShiftKey) {
            this.rightActiveIndex = index;
            /** @type {?} */
            const isCheckboxClicked = target.className.indexOf('custom-checkbox') > -1 || target.closest('.custom-checkbox');
            if (isCheckboxClicked) {
                if (this._rightCheckeds && this._rightCheckeds[item[this.idField]]) {
                    this.rightSelectedItem = null;
                    delete this._rightCheckeds[item[this.idField]];
                }
                else {
                    this._rightCheckeds = this._rightCheckeds || {};
                    this._rightCheckeds[item[this.idField]] = item;
                }
            }
            else {
                this.clearRightCheckeds();
                this._rightCheckeds = this._rightCheckeds || {};
                this._rightCheckeds[item[this.idField]] = item;
            }
        }
        else {
            /** @type {?} */
            const setCheckItems = (/**
             * @param {?=} isAdd
             * @return {?}
             */
            (isAdd = true) => {
                /** @type {?} */
                let focusIndex = this.rightActiveIndex;
                if (focusIndex === -1) {
                    focusIndex = 0;
                }
                /** @type {?} */
                const endIndex = index;
                /** @type {?} */
                let start = focusIndex;
                /** @type {?} */
                let end = endIndex;
                if (focusIndex > endIndex) {
                    start = endIndex;
                    end = focusIndex;
                }
                /** @type {?} */
                const selectItems = [...this._rightData].splice(start, end - start + 1);
                if (!isAdd) {
                    this._rightCheckeds = [];
                }
                selectItems.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    this._rightCheckeds[n[this.idField]] = n;
                }));
            });
            if (isCtrlKey) {
                if (this._rightCheckeds[item[this.idField]]) {
                    delete this._rightCheckeds[item[this.idField]];
                    this.rightSelectedItem = null;
                }
                else {
                    this._rightCheckeds[item[this.idField]] = item;
                }
                if (isShiftKey) {
                    setCheckItems();
                }
                this.rightActiveIndex = index;
            }
            else if (isShiftKey) {
                setCheckItems(isCtrlKey);
            }
        }
        if (ul) {
            ul.style.userSelect = 'none';
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    onRightItemClick($event, item, index) {
        if (this.enableMoveMore) {
            this.rightDataClicked($event, item, index);
        }
        else {
            this.rightDataChecked(item);
        }
    }
    //#endregion
    /**
     * @return {?}
     */
    clearRightCheckeds() {
        this._rightCheckeds = {};
        this.cd.detectChanges();
    }
}
MultiSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'multi-select',
                template: "<div class=\"f-utils-fill f-multi-select-list d-flex flex-column\">\r\n    <div class=\"f-utils-flex-column f-multi-select-list-content f-utils-fill\">\r\n        <legend class=\"f-multi-select-list-title\">\r\n            {{leftTitle === '\u672A\u9009\u62E9' ? ('multiSelect.leftTitle'|locale) : leftTitle}} ( {{ canCheckLength }} / {{ leftCount }} )\r\n            <span *ngIf=\"displayType === 'Tree' && showCascadeControl\" style=\"display: flex; align-items: center;\">\r\n                <input type=\"checkbox\" style=\"margin-right:2px\" [(ngModel)]=\"enableCascase\" id=\"fms_chkenablecascade\"><label for=\"fms_chkenablecascade\" style=\"margin:0\">\u7EA7\u8054\u9009\u62E9</label>\r\n            </span>\r\n            <ng-content select=\".left-title\"></ng-content>\r\n        </legend>\r\n        <div class=\"input-group\" *ngIf=\"enableSearch\" style=\"margin: 5px; width: auto\">\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"searchValue\" placeholder=\"{{ 'multiSelect.filterPlaceholder' | locale }}\" />\r\n            <div class=\"input-group-append\" style=\"background: transparent;display: flex;align-items: center;padding: 0 5px;\">\r\n                <span class=\"f-icon f-icon-search\" *ngIf=\"!searchValue\" ></span>\r\n                <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" *ngIf=\"searchValue\" (click)=\"searchValue = '';\"></span>\r\n            </div>\r\n        </div>\r\n        <div class=\"container columns-box f-utils-fill\" [class.pl-2]=\"displayType !== 'List'\">\r\n            <perfect-scrollbar [config]=\"{}\">\r\n                <ng-container *ngIf=\"displayType === 'List'; else tree\">\r\n                    <ul class=\"f-multi-select-list-group multi-select-list-group-flush f-multi-select-list-group--left\" [class.f-multi-select-norecords]=\"!dataSource || !dataSource.length\">\r\n                        <ng-template [ngIf]=\"dataSource && dataSource.length\">\r\n                            <li class=\"f-multi-select-list-group-item\" (click)=\"leftDataChecked([data])\"\r\n                                *ngFor=\"let data of dataSource;trackBy: trackByItems\" [ngClass]=\"{'f-state-disabled':!canChecked(data),'active':isChecked(data, 'L')}\">\r\n                                <div class=\"custom-control custom-checkbox  custom-control-inline\">\r\n                                    <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"isChecked(data, 'L')\"\r\n                                        [disabled]=\"!canChecked(data)\">\r\n                                    <label class=\"custom-control-label\" [style.white-space]=\"wordWrap ? 'break-spaces': 'nowrap'\" [style.word-wrap]=\"wordWrap? 'break-word': 'normal'\">\r\n                                        <display-text [template]=\"displayTemplate\" [data]=\"data\"></display-text>\r\n                                    </label>\r\n                                </div>\r\n                            </li>\r\n                        </ng-template>\r\n                        <ng-template [ngIf]=\"!dataSource || !dataSource.length\">\r\n                            <li class=\"f-multi-select-norecords-content\"> {{emptyData}} </li>\r\n                        </ng-template>\r\n                    </ul>\r\n                </ng-container>\r\n\r\n                <ng-template #tree>\r\n                    <farris-treetable #tt [data]=\"dataSource\" [idField]=\"idField\" [striped]=\"false\" [cascadeCheck]=\"enableCascase\" [cascadeDown]=\"enableCascase\" [cascadeUp]=\"enableCascase\"\r\n                        [singleSelect]=\"false\" [showIcon]=\"false\" [showFilterBar]=\"false\" [showCheckbox]=\"true\"\r\n                        [selectOnCheck]=\"true\" [checkOnSelect]=\"true\" [showBorder]=\"false\" (checkValuesChange)=\"onCheckValueChange($event)\">\r\n                        <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\">\r\n                            <tr #row=\"row\" [selectRow]=\"rowNode\" [dblclick]=\"true\"\r\n                                [selectRowDisabled]=\"!canChecked(treeNode)\" [attr.id]=\"rowNode.id\">\r\n                                <td style=\"border: 0; line-height: 26px;padding: 0px\" [style.color]=\"row.selectRowDisabled? '#a6a6a6': '#333'\">\r\n                                    <farris-treeTableToggler [disabled]=\"!canChecked(treeNode)\" [rowNode]=\"rowNode\">\r\n                                    </farris-treeTableToggler>\r\n                                    <display-text [template]=\"displayTemplate\" [data]=\"rowData\"></display-text>\r\n                                </td>\r\n                            </tr>\r\n                        </ng-template>\r\n                    </farris-treetable>\r\n                </ng-template>\r\n            </perfect-scrollbar>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"f-multi-select-list-btns\" [class.col-2]=\"!enableTargetSort\">\r\n \r\n    <button [title]=\"'multiSelect.allShiftRight' | locale\" class=\"btn btn-secondary f-btn-icon \" type=\"button\"\r\n        (click)=\"moveAllToRight()\">\r\n        <span class=\"f-icon f-icon-arrow-seek-right\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.shiftRight' | locale\" class=\"btn btn-secondary f-btn-icon right-all\" type=\"button\"\r\n    (click)=\"moveToRight()\">\r\n    <span class=\"f-icon f-icon-arrow-chevron-right\"></span>\r\n</button>\r\n    <button [title]=\"'multiSelect.shiftLeft' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveToLeft()\">\r\n        <span class=\"f-icon f-icon-arrow-chevron-left\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.allShiftLeft' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveAllToLeft()\">\r\n        <span class=\"f-icon f-icon-arrow-seek-left\"></span>\r\n    </button>\r\n</div>\r\n<div class=\"f-utils-fill f-multi-select-list d-flex flex-column\">\r\n    <div class=\"f-utils-flex-column f-multi-select-list-content f-utils-fill\">\r\n        <legend class=\"f-multi-select-list-title\">\r\n            {{rightTitle === '\u5DF2\u9009\u62E9' ? ('multiSelect.rightTitle'|locale) : rightTitle}} ({{selections && selections.length}})\r\n\r\n            <div *ngIf=\"enableReset && showCheckbox\">\r\n                <button class=\"btn btn-link\" title=\"\u53D6\u6D88\u6240\u6709\u52FE\u9009\" (click)=\"clearRightCheckeds()\">\u91CD\u7F6E</button>\r\n            </div>\r\n            <ng-content select=\".right-title\"></ng-content>\r\n        </legend>\r\n        <div class=\"container columns-box f-utils-fill\">\r\n            <perfect-scrollbar [config]=\"{}\">\r\n                <ul class=\"f-multi-select-list-group multi-select-list-group-flush f-multi-select-list-group--right\">\r\n                    <li class=\"f-multi-select-list-group-item\" *ngFor=\"let data of selections;trackBy: trackByItems; index as i\"\r\n                        (click)=\"onRightItemClick($event, data, i)\"  [ngClass]=\"{'item--show-checkbox':showCheckbox && data['showCheckbox'] !== false}\"\r\n                        [class.active]=\"!enableMoveMore ?rightSelectedItem && rightSelectedItem[this.idField] === data[idField] : (_rightCheckeds? !!_rightCheckeds[data[idField]] : false)\"\r\n                        [ngStyle]=\"wordWrap ? { overflow: 'hidden',textOverflow: 'ellipsis'} : null\">\r\n                        <ng-container *ngIf=\"showCheckbox && data['showCheckbox'] !== false\">\r\n                            <div class=\"custom-control custom-checkbox f-checkradio-single\">\r\n                               <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"isChecked(data, 'R')\">\r\n                               <label class=\"custom-control-label\"></label>\r\n                            </div>  \r\n                        </ng-container>\r\n                        <display-text [template]=\"displayTemplate\" [data]=\"data\" [side]=\"'R'\" \r\n                            [style.word-wrap]=\"wordWrap? 'break-word': 'normal'\"\r\n                            [style.white-space]=\"wordWrap ? 'break-spaces': 'nowrap'\" ></display-text>\r\n                    </li>\r\n                </ul>\r\n            </perfect-scrollbar>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"f-multi-select-list-btns\" *ngIf=\"enableTargetSort\">\r\n    <button [title]=\"'multiSelect.top' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\" (click)=\"moveTop()\">\r\n        <span class=\"f-icon f-icon-roofing\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.shiftUp' | locale\" class=\"btn btn-secondary f-btn-icon right-all\" type=\"button\"\r\n        (click)=\"moveUp()\">\r\n        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.shiftDown' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveDown()\">\r\n        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n    </button>\r\n    <button [title]=\"'multiSelect.bottom' | locale\" class=\"btn btn-secondary f-btn-icon\" type=\"button\"\r\n        (click)=\"moveBottom()\">\r\n        <span class=\"f-icon f-icon-bottomsetting\"></span>\r\n    </button>\r\n</div>",
                styles: [".f-multi-select-list .search{position:relative}.f-multi-select-list .search .form-control{line-height:1.875;height:1.875;outline:0}.f-multi-select-list .f-table-norecords-content{margin:-10.0625rem 0 0 -.225rem}"]
            }] }
];
/** @nocollapse */
MultiSelectComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: Injector },
    { type: ChangeDetectorRef }
];
MultiSelectComponent.propDecorators = {
    dataSource: [{ type: Input }],
    displayType: [{ type: Input }],
    enableTargetSort: [{ type: Input }],
    idField: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    height: [{ type: Input }],
    fit: [{ type: Input }],
    noDataMoveMessage: [{ type: Input }],
    showCascadeControl: [{ type: Input }],
    leftTitle: [{ type: Input }],
    rightTitle: [{ type: Input }],
    selectedId: [{ type: Input }],
    enableSearch: [{ type: Input }],
    showCheckbox: [{ type: Input }],
    enableReset: [{ type: Input }],
    wordWrap: [{ type: Input }],
    enableMoveMore: [{ type: Input }],
    searchValueField: [{ type: Input }],
    dataChange: [{ type: Output }],
    selected: [{ type: Output }],
    unSelected: [{ type: Output }],
    selectedIdChange: [{ type: Output }],
    beforeMove: [{ type: Output }],
    afterMove: [{ type: Output }],
    sortMove: [{ type: Output }],
    templates: [{ type: ContentChildren, args: [FarrisTemplateDirective,] }],
    tt: [{ type: ViewChild, args: ['tt',] }]
};
class DisplayTextComponent {
    /**
     * @param {?} ms
     */
    constructor(ms) {
        this.ms = ms;
        this.side = 'L';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // console.log(this.data);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _getText(item) {
        return this.ms.getText(item);
    }
}
DisplayTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'display-text',
                template: `
        <ng-container *ngIf="template" >
            <ng-container
                *ngTemplateOutlet="template; context: {$implicit: data,instance: ms, side: side, selected: ms.isChecked(data, 'R') }">
            </ng-container>
        </ng-container>
        <ng-container *ngIf="!template">{{_getText(data)}}</ng-container>
    `
            }] }
];
/** @nocollapse */
DisplayTextComponent.ctorParameters = () => [
    { type: MultiSelectComponent }
];
DisplayTextComponent.propDecorators = {
    template: [{ type: Input }],
    data: [{ type: Input }],
    side: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiSelectModule {
}
MultiSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    PerfectScrollbarModule,
                    FarrisCommonModule,
                    TreeTableModule,
                    LocaleModule,
                    FormsModule,
                    MessagerModule.forRoot()
                ],
                declarations: [MultiSelectComponent, DisplayTextComponent],
                exports: [
                    MultiSelectComponent,
                    DisplayTextComponent,
                    FarrisCommonModule
                ],
                providers: [],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MultiSelectComponent, DisplayTextComponent, MultiSelectModule };

//# sourceMappingURL=farris-ui-multi-select.js.map