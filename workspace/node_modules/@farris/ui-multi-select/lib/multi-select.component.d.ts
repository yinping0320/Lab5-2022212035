import { OnInit, EventEmitter, TemplateRef, QueryList, AfterContentInit, AfterViewInit, OnChanges, SimpleChanges, Injector, ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { TreeTableComponent } from '@farris/ui-treetable';
import { CommonUtils, FarrisTemplateDirective } from '@farris/ui-common';
import { LocaleService } from '@farris/ui-locale';
export declare class MultiSelectComponent implements OnInit, OnChanges, AfterViewInit, AfterContentInit {
    private mesagerSer;
    private injector;
    private cd;
    private allTreeNodes;
    private _ds;
    dataSource: any;
    displayType: 'List' | 'Tree';
    /** 显示右侧上移下移按钮 */
    enableTargetSort: boolean;
    idField: string;
    textField: string;
    valueField: string;
    height: number;
    fit: boolean;
    noDataMoveMessage: string;
    /** 树结构时，是否显示级联选择控制选项 */
    showCascadeControl: boolean;
    leftTitle: string;
    rightTitle: string;
    selectedId: any;
    enableSearch: boolean;
    /** 目标数据源显示checkbox 允许多选 */
    showCheckbox: boolean;
    /** 右侧已选启用重置，在启用复选框时，是否显示重置按钮，即取消右侧所有勾选项，默认为 false */
    enableReset: boolean;
    /** 启用折行 */
    wordWrap: boolean;
    /** 启用多条记录一起移动；默认 false */
    enableMoveMore: boolean;
    /** 查询时对value字段进行查询，默认为 true; false时仅查询文本字段 */
    searchValueField: boolean;
    dataChange: EventEmitter<{}>;
    selected: EventEmitter<{}>;
    unSelected: EventEmitter<{}>;
    selectedIdChange: EventEmitter<{}>;
    beforeMove: EventEmitter<{}>;
    afterMove: EventEmitter<{}>;
    sortMove: EventEmitter<{}>;
    templates: QueryList<FarrisTemplateDirective>;
    tt: TreeTableComponent;
    _rightCheckeds: any;
    _leftCheckeds: any;
    _rightData: any[];
    selections: any;
    searchValue: string;
    canCheckLength: number;
    leftCount: number;
    _searchValue: string;
    private copyDataSource;
    treeDataLength: number;
    displayTemplate: TemplateRef<any>;
    emptyData: any;
    el: ElementRef;
    render: Renderer2;
    localeService: LocaleService;
    commonUtils: CommonUtils;
    enableCascase: boolean;
    private updateTimer1;
    private updateTimer2;
    rightSelectedItem: any;
    rightActiveIndex: number;
    constructor(mesagerSer: MessagerService, injector: Injector, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    getCanCheckLength(): number;
    /**
     * 获取搜索的数据，List结构
     * @param value 搜索的字符
     * @param data 数据
     */
    private getListDataBySearch;
    /**
     * 获取包含value值得节点
     */
    /**
     * 获取根节点
     */
    /**
     * 获取搜索的数据，Tree结构
     * @param value 搜索的字符
     * @param data 数据
     */
    private initRightData;
    checkLeftData(ids: any): void;
    private updateAllTreeNodes;
    /**
     * @param ids 选中数据的id
     * @param dataSource 原始数据
     */
    private getListSelectionsById;
    /**
     *
     * @param ids 选中数据的id
     * @param dataSource 原始数据
     */
    private getTreeSelectionsById;
    /**
     * 判断是否选中
     * @param data 要验证的数据
     * @param direction 验证的数据所在的位置 L: 左侧，R: 右侧
     */
    isChecked(data: any, direction: 'L' | 'R'): boolean;
    canChecked(item: any): boolean;
    onCheckValueChange(ids: string[]): void;
    isTree(): any;
    leftDataChecked(data: any[]): void;
    hasCheckeds(dir: 'L' | 'R'): number | boolean;
    rightDataChecked(item: any, emit?: boolean): void;
    selectItem(id: any, emit?: boolean): void;
    clearSelections(emit?: boolean): void;
    /**
     * 将树结构数据转换为扁平数组
     * @param nodes 树节点数组
     * @param r 新的空数组
     */
    private convertTreeDataToPlainData;
    private moveItem;
    /** 右移 */
    moveToRight(moveData?: any): void;
    /** 全部右移 */
    moveAllToRight(): void;
    /** 左移 */
    moveToLeft(moveData?: any): void;
    /** 全部左移 */
    moveAllToLeft(): void;
    _getSelectInfo(): {
        key: any;
        index: number;
    };
    /** 置顶 */
    moveTop(): void;
    /** 上移 */
    moveUp(): void;
    /** 下移 */
    moveDown(): void;
    /** 置底 */
    moveBottom(): void;
    /**
     * 触发选择中id
     * @param number 1代表左侧数据右移，-1,代表数据左移，0代表上移下移
     */
    private changeSelectIds;
    private selectionsChange;
    getText(item: any, textField?: string): any;
    getValue(item: any, valueField?: string): any;
    trackByItems: (index: any, item: any) => any;
    /** 从右侧数据源中获取选中的记录 */
    private getCheckedItemsFromDataSource;
    private getCheckedFirstIndexAndLastIndex;
    private moveMore;
    private moveMore2;
    private updateActiveIndex;
    rightDataClicked($event: MouseEvent, item: any, index: number): void;
    onRightItemClick($event: any, item: any, index: any): void;
    clearRightCheckeds(): void;
}
export declare class DisplayTextComponent implements OnInit {
    ms: MultiSelectComponent;
    template: TemplateRef<any>;
    data: any;
    side: string;
    constructor(ms: MultiSelectComponent);
    ngOnInit(): void;
    _getText(item: any): any;
}
