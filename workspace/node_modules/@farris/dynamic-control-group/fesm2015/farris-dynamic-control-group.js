import { CommonModule } from '@angular/common';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { InputGroupModule } from '@farris/ui-input-group';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { ComboListModule } from '@farris/ui-combo-list';
import { LookupModule } from '@farris/ui-lookup';
import { FieldGroupModule } from '@farris/ui-field-group';
import { InjectionToken, Injectable, Injector, InjectFlags, Component, Input, HostBinding, ChangeDetectorRef, ComponentFactoryResolver, Directive, ViewContainerRef, NgModule } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { trim } from 'lodash-es';
import { CommonUtils } from '@farris/ui-common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const DYNAMIC_CONTROL_TYPE = {
    HELP: 'help',
    TEXT: 'text',
    DATE_RANGE: 'date-range',
    SINGLE_DATE: 'single-date',
    SINGLE_NUMBER: 'single-number',
    NUMBER_RANGE: 'number-range',
    BASE_DROPDOWN: 'base-dropdown',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DynamiControlGroupHttpToken = new InjectionToken('Dynamic control group HTTP service');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicControlGroupService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.httpService = this.injector.get(DynamiControlGroupHttpToken, null, InjectFlags.Optional);
    }
    // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {
    //   if (!originalForm) {
    //     originalForm = new FormGroup({});
    //   }
    //   formControls.forEach(control => {
    //     originalForm.addControl(control.labelCode, new FormControl(''));
    //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
    //       const helpControl = control as IDyanmicHelpControl;
    //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
    //     }
    //   });
    //   return originalForm;
    // }
    /**
     * @param {?} uri
     * @return {?}
     */
    getFormControlsByUri(uri) {
        return this.httpService.getData(uri);
    }
    /**
     * @param {?} formControls
     * @param {?} initialData
     * @return {?}
     */
    toFormValue(formControls, initialData) {
        /** @type {?} */
        const initialDataKeys = Object.keys(initialData);
        formControls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        control => {
            if (!initialDataKeys.includes(control.labelCode)) {
                Object.defineProperty(initialData, control.labelCode, { value: '' });
            }
            if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
                /** @type {?} */
                let helpControl = (/** @type {?} */ (control));
                if (!initialDataKeys.includes(helpControl.control.hiddenInputName)) {
                    Object.defineProperty(initialData, helpControl.control.hiddenInputName, { value: '' });
                }
            }
        }));
        return initialData;
    }
}
DynamicControlGroupService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DynamicControlGroupService.ctorParameters = () => [
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicControlGroupComponent {
    /**
     * @param {?} controlGroupService
     * @param {?} cdRef
     */
    constructor(controlGroupService, cdRef) {
        this.controlGroupService = controlGroupService;
        this.cdRef = cdRef;
        this.form = null;
        this.isControlInline = true;
        this.isEmbedded = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.className = this.initStyles();
        if (this.isGrouped && this.contents) {
            this.controlEntries = Array.from(this.groupControls(this.contents).entries());
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //使用模态框动态加载本组件时，拿到了本组件的实例，同时初始赋值，会在此第一次拿到@input初始值
        this.className = this.initStyles();
        if (this.contents && this.contents.length) {
            this.initFormAndControlEntries();
        }
        else {
            this.uri && this.controlGroupService.getFormControlsByUri(this.uri).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.contents = data;
                this.initFormAndControlEntries();
            }));
        }
    }
    /**
     * @return {?}
     */
    initFormAndControlEntries() {
        // this.form = this.controlGroupService.toFormGroup(this.contents, this.form);
        if (this.isGrouped) {
            this.controlEntries = Array.from(this.groupControls(this.contents).entries());
        }
        this.form.setValue(this.controlGroupService.toFormValue(this.contents, this.formData));
    }
    /**
     * @param {?} contents
     * @return {?}
     */
    groupControls(contents) {
        /** @type {?} */
        const groupedControls = new Map();
        contents.forEach((/**
         * @param {?} control
         * @return {?}
         */
        control => {
            if (groupedControls.has(control.groupName)) {
                groupedControls.get(control.groupName).push(control);
            }
            else {
                groupedControls.set(control.groupName, [control]);
            }
        }));
        return groupedControls;
    }
    /**
     * @return {?}
     */
    initStyles() {
        /** @type {?} */
        let styleClass;
        styleClass = this.isGrouped ? "f-form-layout" : "f-utils-flex-row-wrap";
        styleClass = this.extraClassNames ? styleClass.concat(` ${this.extraClassNames}`) : styleClass;
        styleClass = this.isEmbedded ? styleClass : styleClass.concat(" farris-form");
        styleClass = this.isControlInline ? styleClass.concat(" farris-form-controls-inline") : styleClass;
        return styleClass;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        // this.cdRef.detectChanges();
    }
}
DynamicControlGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-dynamic-control-group',
                template: `
    <ng-container *ngIf="!isGrouped && form">
        <ng-container *ngFor="let control of contents" dynamicFormControl [data]="control" [formGroup]="form"></ng-container>
    </ng-container>

    <ng-container *ngIf="isGrouped && form">
        <ng-container *ngFor="let groupData of controlEntries">
            <fieldset class="f-section-formgroup">
                <legend class="f-section-formgroup-legend" farrisCollapse [title]="groupData[0]"></legend>
                <div class="f-section-formgroup-inputs">
                    <ng-container *ngFor="let entry of groupData[1]" dynamicFormControl [data]="entry" [formGroup]="form"></ng-container>
                </div>
            </fieldset>
        </ng-container>
    </ng-container>
  `,
                providers: [
                    DynamicControlGroupService
                ]
            }] }
];
/** @nocollapse */
DynamicControlGroupComponent.ctorParameters = () => [
    { type: DynamicControlGroupService },
    { type: ChangeDetectorRef }
];
DynamicControlGroupComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    contents: [{ type: Input }],
    form: [{ type: Input }],
    extraClassNames: [{ type: Input }],
    isControlInline: [{ type: Input }],
    isEmbedded: [{ type: Input }],
    formData: [{ type: Input }],
    uri: [{ type: Input }],
    isGrouped: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-input",
                template: `
      <div class="farris-group-wrap" [formGroup]="form">
        <div class="form-group farris-form-group">
          <label class="col-form-label">
            <span *ngIf="0" class="farris-label-info text-danger">*</span>
            <span class="farris-label-text">{{control.name}}</span>
          </label>
          <div class="farris-input-wrap">
            <input-group [formControlName]="control.labelCode" [readonly]="control.control.readonly"></input-group>
          </div>
        </div>
      </div>
  `
            }] }
];
/** @nocollapse */
InputComponent.ctorParameters = () => [];
InputComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleDateComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.control.control.format = this.control.control.format || 'yyyy-MM-dd';
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
SingleDateComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-single-date",
                template: `
    <div class="farris-group-wrap" [formGroup]="form">
      <div class="form-group farris-form-group">
        <label class="col-form-label">
          <span *ngIf="0" class="farris-label-info text-danger">*</span>
          <span class="farris-label-text">{{control.name}}</span>
        </label>
        <div class="farris-input-wrap">
          <farris-datepicker [returnFormat]="control.control.format" [formControlName]="control.labelCode" [readonly]="control.control.readonly"></farris-datepicker>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
SingleDateComponent.ctorParameters = () => [];
SingleDateComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.control.control.format = this.control.control.format || 'yyyy-MM-dd';
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
DateRangeComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-date-range",
                template: `
      <div class="farris-group-wrap" [formGroup]="form">
        <div class="form-group farris-form-group">
          <label class="col-form-label">
            <span *ngIf="0" class="farris-label-info text-danger">*</span>
            <span class="farris-label-text">{{control.name}}</span>
          </label>
          <div class="farris-input-wrap">
            <farris-datepicker [dateRange]="true" [returnFormat]="control.control.format" [formControlName]="control.labelCode" [readonly]="control.control.readonly"></farris-datepicker>
          </div>
        </div>
      </div>
  `
            }] }
];
/** @nocollapse */
DateRangeComponent.ctorParameters = () => [];
DateRangeComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleNumberComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
SingleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-single-number",
                template: `
    <div class="farris-group-wrap" [formGroup]="form">
      <div class="form-group farris-form-group">
        <label class="col-form-label">
          <span *ngIf="0" class="farris-label-info text-danger">*</span>
          <span class="farris-label-text">{{control.name}}</span>
        </label>
        <div class="farris-input-wrap">
            <farris-number-spinner 
                [formControlName]="control.labelCode"
                [max]="options.max"
                [min]="options.min"
                [precision]="options.precision"
                [readonly]="options.readonly"
            >
            </farris-number-spinner>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
SingleNumberComponent.ctorParameters = () => [];
SingleNumberComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
NumberRangeComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-number-range",
                template: `
    <div class="farris-group-wrap" [formGroup]="form">
      <div class="form-group farris-form-group">
        <label class="col-form-label">
          <span *ngIf="0" class="farris-label-info text-danger">*</span>
          <span class="farris-label-text">{{control.name}}</span>
        </label>
        <div class="farris-input-wrap">
            <farris-number-range
                [formControlName]="control.labelCode"
                [max]="options.max"
                [min]="options.min"
                [precision]="options.precision"
                [readonly]="options.readonly"
            >
            </farris-number-range>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
NumberRangeComponent.ctorParameters = () => [];
NumberRangeComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseDropdownComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
BaseDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-base-dropdown",
                template: `
    <div class="farris-group-wrap" [formGroup]="form">
      <div class="form-group farris-form-group">
        <label class="col-form-label">
          <span *ngIf="0" class="farris-label-info text-danger">*</span>
          <span class="farris-label-text">{{control.name}}</span>
        </label>
        <div class="farris-input-wrap">
            <farris-combo-list *ngIf="options.items"
                [readonly]="options.readonly"
                [formControlName]="control.labelCode"
                [idField]="options.idField"
                [textField]="options.textField"
                [multiSelect]="options.multiSelect"
                [data]="options.items"
            ></farris-combo-list>
            <farris-combo-list *ngIf="options.uri"
                [readonly]="options.readonly"
                [formControlName]="control.labelCode"
                [idField]="options.idField"
                [textField]="options.textField"
                [multiSelect]="options.multiSelect"
                [uri]="options.uri"
            ></farris-combo-list>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
BaseDropdownComponent.ctorParameters = () => [];
BaseDropdownComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HelpComponent {
    /**
     * @param {?} utils
     */
    constructor(utils) {
        this.utils = utils;
        /**
         * @param helpData 选中的数据，如果是多选，是数组；如果是单选，是普通对象
         * @param mapFields
         * @param bindingData 帮助所在form的value对象
         */
        this.mapping = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @return {?}
         */
        (helpData, mapFields) => {
            console.log('helpData ', helpData);
            if (mapFields) {
                /** @type {?} */
                const helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                (f) => {
                    /** @type {?} */
                    let val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} h
                             * @return {?}
                             */
                            (h) => {
                                return this.utils.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = this.utils.getValue(f, helpData);
                        }
                    }
                    mapFields[f].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    (ff) => {
                        /** @type {?} */
                        const field = trim(ff);
                        // this.utils.setValue(bindingData, field, val);
                        this.form.controls[field].setValue(val);
                    }));
                }));
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
HelpComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-help",
                template: `
    <div class="farris-group-wrap" [formGroup]="form">
      <div class="form-group farris-form-group">
        <label class="col-form-label">
          <span *ngIf="0" class="farris-label-info text-danger">*</span>
          <span class="farris-label-text">{{control.name}}</span>
        </label>
        <div class="farris-input-wrap">
            <farris-lookup-grid
              [formControlName]="control.labelCode"
              [uri]="options.uri"
              [singleSelect]="options.singleSelect"
              [displayType]="options.displayType"
              [idField]="options.idField"
              [textField]="options.textField"
              [valueField]="options.valueField"
              [title]="options.dialogTitle"
              [mappingFn]="mapping"
              [mapFields]="options.mapFields"
              [readonly]="options.readonly"
          ></farris-lookup-grid>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
HelpComponent.ctorParameters = () => [
    { type: CommonUtils }
];
HelpComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const componentMapper = new Map();
componentMapper.set(DYNAMIC_CONTROL_TYPE.HELP, HelpComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.BASE_DROPDOWN, BaseDropdownComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.DATE_RANGE, DateRangeComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.NUMBER_RANGE, NumberRangeComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_DATE, SingleDateComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_NUMBER, SingleNumberComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.TEXT, InputComponent);
class DynamicFormControlDirective {
    /**
     * @param {?} resolver
     * @param {?} container
     * @param {?} injector
     */
    constructor(resolver, container, injector) {
        this.resolver = resolver;
        this.container = container;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formGroup = this.addToForm(this.data, this.formGroup);
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(componentMapper.get(this.data.control.controlType));
        this.componentRef = this.container.createComponent(factory);
        this.componentRef.instance.form = this.formGroup;
        this.componentRef.instance.control = this.data;
        // const form = this.addToForm(this.data, this.formGroup);
    }
    /**
     * @param {?} control
     * @param {?} originalForm
     * @return {?}
     */
    addToForm(control, originalForm) {
        //originalForm 外部传入FormGroup的实例
        originalForm.addControl(control.labelCode, new FormControl(control.value));
        if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
            /** @type {?} */
            const helpControl = (/** @type {?} */ (control));
            originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
        }
        return originalForm;
    }
}
DynamicFormControlDirective.decorators = [
    { type: Directive, args: [{
                selector: "[dynamicFormControl]"
            },] }
];
/** @nocollapse */
DynamicFormControlDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: Injector }
];
DynamicFormControlDirective.propDecorators = {
    data: [{ type: Input }],
    formGroup: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicControlGroupModule {
}
DynamicControlGroupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DynamicFormControlDirective,
                    DynamicControlGroupComponent,
                    InputComponent,
                    DateRangeComponent,
                    SingleDateComponent,
                    NumberRangeComponent,
                    SingleNumberComponent,
                    BaseDropdownComponent,
                    HelpComponent
                ],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    InputGroupModule,
                    FarrisDatePickerModule,
                    NumberSpinnerModule,
                    ComboListModule,
                    LookupModule,
                    FieldGroupModule
                ],
                exports: [
                    DynamicFormControlDirective,
                    DynamicControlGroupComponent
                ],
                entryComponents: [
                    InputComponent,
                    DateRangeComponent,
                    SingleDateComponent,
                    NumberRangeComponent,
                    SingleNumberComponent,
                    BaseDropdownComponent,
                    HelpComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DynamicControlGroupService, DynamicControlGroupComponent, DynamicControlGroupModule, DYNAMIC_CONTROL_TYPE, DynamiControlGroupHttpToken, DateRangeComponent as ɵc, SingleDateComponent as ɵd, BaseDropdownComponent as ɵg, HelpComponent as ɵh, InputComponent as ɵb, NumberRangeComponent as ɵe, SingleNumberComponent as ɵf, DynamicFormControlDirective as ɵa };

//# sourceMappingURL=farris-dynamic-control-group.js.map