{"version":3,"file":"farris-dynamic-control-group.js.map","sources":["ng://@farris/dynamic-control-group/lib/interfaces/dynamic-control.interface.ts","ng://@farris/dynamic-control-group/lib/interfaces/dynamic-control-group-http.interface.ts","ng://@farris/dynamic-control-group/lib/services/dynamic-control-group.service.ts","ng://@farris/dynamic-control-group/lib/dynamic-control-group.component.ts","ng://@farris/dynamic-control-group/lib/components/input/input.component.ts","ng://@farris/dynamic-control-group/lib/components/date/single-date.component.ts","ng://@farris/dynamic-control-group/lib/components/date/date-range.component.ts","ng://@farris/dynamic-control-group/lib/components/number/single-number.component.ts","ng://@farris/dynamic-control-group/lib/components/number/number-range.component.ts","ng://@farris/dynamic-control-group/lib/components/dropdown/base-dropdown.component.ts","ng://@farris/dynamic-control-group/lib/components/help/help.component.ts","ng://@farris/dynamic-control-group/lib/directives/dynamic-control.directive.ts","ng://@farris/dynamic-control-group/lib/dynamic-control-group.module.ts"],"sourcesContent":["export interface Validator {\r\n  name: string;\r\n  validator: any;\r\n  message: string;\r\n}\r\n\r\nexport interface IDynamicBaseControl {\r\n  labelCode: string,\r\n  name: string,\r\n  control: {\r\n    controlType: string,\r\n    readonly: boolean\r\n  },\r\n  value?: any,\r\n  className?: string,\r\n  validations?: Validator[],\r\n  groupName: string\r\n}\r\n\r\nexport interface IDynamicDateControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    format?: string,\r\n    readonly: boolean\r\n  }\r\n}\r\n\r\nexport interface IDynamicDropdownControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    idField: string,\r\n    textField: string,\r\n    multiSelect?: boolean,\r\n    data?: Array<any>\r\n    uri?: string,\r\n    readonly: boolean\r\n  }\r\n}\r\n\r\nexport interface IDyanmicNumberControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    precision?: number,\r\n    max?: number,\r\n    min?: number,\r\n    readonly: boolean\r\n  }\r\n}\r\n/**\r\n * é»è®¤çæä¸ä¸ªhidden inputï¼ç¨äºå­æ¾éè¦è¿åä½ä¸æ¾ç¤ºåºçå¼ã\r\n * mapFieldsï¼\r\n*/\r\nexport interface IDyanmicHelpControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    uri: string,\r\n    textField?: string,\r\n    valueField?: string,\r\n    idField?: string,\r\n    displayType?: string,\r\n    mapFields?: any,\r\n    singleSelect?: boolean,\r\n    title?: string,\r\n    hiddenInputName: string,\r\n    readonly: boolean\r\n  }\r\n}\r\n\r\nexport enum DYNAMIC_CONTROL_TYPE {\r\n  HELP = 'help',\r\n  TEXT = 'text',\r\n  DATE_RANGE = 'date-range',\r\n  SINGLE_DATE = 'single-date',\r\n  SINGLE_NUMBER =  'single-number',\r\n  NUMBER_RANGE = 'number-range',\r\n  BASE_DROPDOWN = 'base-dropdown'\r\n}\r\n// export type DYNAMIC_CONTROL_TYPE = 'help' | 'text' | 'date_range' | 'single-date' | 'single-number' | 'number-range' | 'base-dropdown';\r\n","import { Observable } from 'rxjs';\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IDynamicBaseControl } from './dynamic-control.interface';\r\n\r\nexport interface DynamiControlGroupHttpInterface {\r\n    /**\r\n     * æ ¹æ®APIåç¸å³åæ°è·åæ°æ®\r\n     * @param uri Rest API\r\n     * @param params æå¡å¨ç«¯æ¥æ¶åæ° key/value\r\n     */\r\n    getData(uri: string, params?: any, method?: string, options?: any): Observable<IDynamicBaseControl[]>;\r\n}\r\nexport const DynamiControlGroupHttpToken = new InjectionToken<DynamiControlGroupHttpInterface>('Dynamic control group HTTP service');","import { Injectable, Injector, InjectFlags } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { IDynamicBaseControl, IDyanmicHelpControl, DYNAMIC_CONTROL_TYPE } from '../interfaces/dynamic-control.interface';\r\nimport { DynamiControlGroupHttpInterface, DynamiControlGroupHttpToken } from '../interfaces/dynamic-control-group-http.interface';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class DynamicControlGroupService {\r\n\r\n  httpService: DynamiControlGroupHttpInterface;\r\n\r\n  constructor(private injector: Injector) {\r\n    this.httpService = this.injector.get<DynamiControlGroupHttpInterface>(DynamiControlGroupHttpToken, null, InjectFlags.Optional);\r\n  }\r\n\r\n  // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {\r\n  //   if (!originalForm) {\r\n  //     originalForm = new FormGroup({});\r\n  //   }\r\n  //   formControls.forEach(control => {\r\n  //     originalForm.addControl(control.labelCode, new FormControl(''));\r\n  //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {\r\n  //       const helpControl = control as IDyanmicHelpControl;\r\n  //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));\r\n  //     }\r\n  //   });\r\n  //   return originalForm;\r\n  // }\r\n\r\n  getFormControlsByUri(uri: string): Observable<IDynamicBaseControl[]>{\r\n    return this.httpService.getData(uri);\r\n  }\r\n\r\n  toFormValue(formControls: Array<IDynamicBaseControl>, initialData: any) {\r\n    const initialDataKeys = Object.keys(initialData);\r\n    formControls.forEach(control => {\r\n      if (!initialDataKeys.includes(control.labelCode)) {\r\n        Object.defineProperty(initialData, control.labelCode, { value: '' });\r\n      }\r\n      if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {\r\n        let helpControl = control as IDyanmicHelpControl;\r\n        if (!initialDataKeys.includes(helpControl.control.hiddenInputName)) {\r\n          Object.defineProperty(initialData, helpControl.control.hiddenInputName, { value: '' });\r\n        }\r\n      }\r\n    });\r\n    return initialData;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, HostBinding, Output, EventEmitter, AfterViewChecked, ChangeDetectorRef, OnChanges, SimpleChanges, DoCheck } from '@angular/core';\r\nimport { IDynamicBaseControl } from './interfaces/dynamic-control.interface';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { DynamicControlGroupService } from './services/dynamic-control-group.service';\r\n\r\n@Component({\r\n    selector: 'farris-dynamic-control-group',\r\n    template: `\r\n    <ng-container *ngIf=\"!isGrouped && form\">\r\n        <ng-container *ngFor=\"let control of contents\" dynamicFormControl [data]=\"control\" [formGroup]=\"form\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"isGrouped && form\">\r\n        <ng-container *ngFor=\"let groupData of controlEntries\">\r\n            <fieldset class=\"f-section-formgroup\">\r\n                <legend class=\"f-section-formgroup-legend\" farrisCollapse [title]=\"groupData[0]\"></legend>\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                    <ng-container *ngFor=\"let entry of groupData[1]\" dynamicFormControl [data]=\"entry\" [formGroup]=\"form\"></ng-container>\r\n                </div>\r\n            </fieldset>\r\n        </ng-container>\r\n    </ng-container>\r\n  `,\r\n    providers: [\r\n        DynamicControlGroupService\r\n    ]\r\n})\r\nexport class DynamicControlGroupComponent implements OnInit, OnChanges, AfterViewChecked  {\r\n\r\n    @HostBinding('class') className: string;\r\n\r\n    @Input()\r\n    contents: Array<IDynamicBaseControl>;\r\n\r\n    @Input()\r\n    form: FormGroup = null;\r\n\r\n    @Input()\r\n    extraClassNames: string;\r\n\r\n    @Input()\r\n    isControlInline: boolean = true;\r\n\r\n    @Input()\r\n    isEmbedded: boolean = false;\r\n\r\n    @Input()\r\n    formData: any;\r\n\r\n    @Input()\r\n    uri: string;\r\n\r\n    @Input()\r\n    isGrouped: boolean;\r\n\r\n    controlEntries: Array<Array<any>>;\r\n\r\n\r\n    constructor(private controlGroupService: DynamicControlGroupService, private cdRef: ChangeDetectorRef) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.className = this.initStyles();\r\n        if(this.isGrouped && this.contents){\r\n            this.controlEntries = Array.from(this.groupControls(this.contents).entries());\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        //ä½¿ç¨æ¨¡ææ¡å¨æå è½½æ¬ç»ä»¶æ¶ï¼æ¿å°äºæ¬ç»ä»¶çå®ä¾ï¼åæ¶åå§èµå¼ï¼ä¼å¨æ­¤ç¬¬ä¸æ¬¡æ¿å°@inputåå§å¼\r\n        this.className = this.initStyles();\r\n        if(this.contents && this.contents.length){\r\n            this.initFormAndControlEntries();\r\n        }else{\r\n            this.uri && this.controlGroupService.getFormControlsByUri(this.uri).subscribe(data => {\r\n                this.contents = data;\r\n                this.initFormAndControlEntries();\r\n            });\r\n        }\r\n    }\r\n\r\n    initFormAndControlEntries(){\r\n        // this.form = this.controlGroupService.toFormGroup(this.contents, this.form);\r\n        if(this.isGrouped){\r\n            this.controlEntries = Array.from(this.groupControls(this.contents).entries());\r\n        }\r\n        this.form.setValue(this.controlGroupService.toFormValue(this.contents, this.formData));\r\n    }\r\n\r\n    groupControls(contents: Array<IDynamicBaseControl>): Map<string, Array<IDynamicBaseControl>> {\r\n        const groupedControls = new Map<string, Array<IDynamicBaseControl>>();\r\n        contents.forEach(control => {\r\n            if(groupedControls.has(control.groupName)){\r\n                groupedControls.get(control.groupName).push(control);\r\n            }else{\r\n                groupedControls.set(control.groupName, [control]);\r\n            }\r\n        });\r\n        return groupedControls;\r\n    }\r\n\r\n    initStyles(): string{\r\n        let styleClass: string;\r\n        styleClass = this.isGrouped ? \"f-form-layout\" : \"f-utils-flex-row-wrap\";\r\n        styleClass = this.extraClassNames ? styleClass.concat(` ${this.extraClassNames}`) : styleClass;\r\n        styleClass = this.isEmbedded ? styleClass : styleClass.concat(\" farris-form\");\r\n        styleClass = this.isControlInline ? styleClass.concat(\" farris-form-controls-inline\") : styleClass;\r\n        return styleClass;\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // this.cdRef.detectChanges();\r\n    }\r\n\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { IDynamicBaseControl } from \"../../interfaces/dynamic-control.interface\";\r\nimport { FormGroup } from '@angular/forms';\r\n@Component({\r\n  selector: \"dynamic-input\",\r\n  template: `\r\n      <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label class=\"col-form-label\">\r\n            <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n            <span class=\"farris-label-text\">{{control.name}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class InputComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicBaseControl;\r\n  @Input()\r\n  form: FormGroup;\r\n\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDynamicDateControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-single-date\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-datepicker [returnFormat]=\"control.control.format\" [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></farris-datepicker>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class SingleDateComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicDateControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.control.control.format = this.control.control.format || 'yyyy-MM-dd';\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDynamicDateControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-date-range\",\r\n  template: `\r\n      <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label class=\"col-form-label\">\r\n            <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n            <span class=\"farris-label-text\">{{control.name}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-datepicker [dateRange]=\"true\" [returnFormat]=\"control.control.format\" [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></farris-datepicker>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class DateRangeComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicDateControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.control.control.format = this.control.control.format || 'yyyy-MM-dd';\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDyanmicNumberControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-single-number\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-number-spinner \r\n                [formControlName]=\"control.labelCode\"\r\n                [max]=\"options.max\"\r\n                [min]=\"options.min\"\r\n                [precision]=\"options.precision\"\r\n                [readonly]=\"options.readonly\"\r\n            >\r\n            </farris-number-spinner>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class SingleNumberComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDyanmicNumberControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.options = this.control.control;\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDyanmicNumberControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-number-range\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-number-range\r\n                [formControlName]=\"control.labelCode\"\r\n                [max]=\"options.max\"\r\n                [min]=\"options.min\"\r\n                [precision]=\"options.precision\"\r\n                [readonly]=\"options.readonly\"\r\n            >\r\n            </farris-number-range>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class NumberRangeComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDyanmicNumberControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.options = this.control.control;\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDynamicDropdownControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-base-dropdown\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-combo-list *ngIf=\"options.items\"\r\n                [readonly]=\"options.readonly\"\r\n                [formControlName]=\"control.labelCode\"\r\n                [idField]=\"options.idField\"\r\n                [textField]=\"options.textField\"\r\n                [multiSelect]=\"options.multiSelect\"\r\n                [data]=\"options.items\"\r\n            ></farris-combo-list>\r\n            <farris-combo-list *ngIf=\"options.uri\"\r\n                [readonly]=\"options.readonly\"\r\n                [formControlName]=\"control.labelCode\"\r\n                [idField]=\"options.idField\"\r\n                [textField]=\"options.textField\"\r\n                [multiSelect]=\"options.multiSelect\"\r\n                [uri]=\"options.uri\"\r\n            ></farris-combo-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class BaseDropdownComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicDropdownControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor() {}\r\n  ngOnInit() {\r\n      this.options = this.control.control;\r\n      this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { trim } from 'lodash-es';\r\nimport { CommonUtils } from '@farris/ui-common';\r\nimport { IDynamicBaseControl, IDyanmicHelpControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-help\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-lookup-grid\r\n              [formControlName]=\"control.labelCode\"\r\n              [uri]=\"options.uri\"\r\n              [singleSelect]=\"options.singleSelect\"\r\n              [displayType]=\"options.displayType\"\r\n              [idField]=\"options.idField\"\r\n              [textField]=\"options.textField\"\r\n              [valueField]=\"options.valueField\"\r\n              [title]=\"options.dialogTitle\"\r\n              [mappingFn]=\"mapping\"\r\n              [mapFields]=\"options.mapFields\"\r\n              [readonly]=\"options.readonly\"\r\n          ></farris-lookup-grid>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class HelpComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDyanmicHelpControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor(private utils: CommonUtils) {}\r\n  ngOnInit() {\r\n    this.options = this.control.control;\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n\r\n  /**\r\n   * @param helpData éä¸­çæ°æ®ï¼å¦ææ¯å¤éï¼æ¯æ°ç»ï¼å¦ææ¯åéï¼æ¯æ®éå¯¹è±¡\r\n   * @param mapFields\r\n   * @param bindingData å¸®å©æå¨formçvalueå¯¹è±¡\r\n  */\r\n  mapping =(helpData: any, mapFields: any) => {\r\n    console.log('helpData ', helpData);\r\n    if (mapFields) {\r\n      const helpFields = Object.keys(mapFields);\r\n      helpFields.forEach( (f: any) => {\r\n          let val = '';\r\n          if (helpData) {\r\n              if (helpData instanceof Array) {\r\n                  val = helpData.map( (h: any) => {\r\n                      return this.utils.getValue(f, h);\r\n                  }).join(',');\r\n              } else {\r\n                  val = this.utils.getValue(f, helpData);\r\n              }\r\n\r\n          }\r\n          mapFields[f].split(',').forEach( (ff: any) => {\r\n              const field = trim(ff);\r\n              // this.utils.setValue(bindingData, field, val);\r\n              this.form.controls[field].setValue(val);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EventEmitter,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewContainerRef\r\n} from \"@angular/core\";\r\nimport { IDynamicBaseControl, DYNAMIC_CONTROL_TYPE, IDyanmicHelpControl } from \"../interfaces/dynamic-control.interface\";\r\nimport { InputComponent } from \"../components/input/input.component\";\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { SingleDateComponent } from '../components/date/single-date.component';\r\nimport { DateRangeComponent } from '../components/date/date-range.component';\r\nimport { SingleNumberComponent } from '../components/number/single-number.component';\r\nimport { NumberRangeComponent } from '../components/number/number-range.component';\r\nimport { BaseDropdownComponent } from '../components/dropdown/base-dropdown.component';\r\nimport { HelpComponent } from '../components/help/help.component';\r\n\r\nconst componentMapper = new Map();\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.HELP, HelpComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.BASE_DROPDOWN, BaseDropdownComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.DATE_RANGE, DateRangeComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.NUMBER_RANGE, NumberRangeComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_DATE, SingleDateComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_NUMBER, SingleNumberComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.TEXT, InputComponent);\r\n\r\n@Directive({\r\n  selector: \"[dynamicFormControl]\"\r\n})\r\nexport class DynamicFormControlDirective implements OnInit {\r\n  @Input()\r\n  data: IDynamicBaseControl;\r\n\r\n  @Input()\r\n  formGroup: FormGroup;\r\n\r\n  componentRef: ComponentRef<any>;\r\n  constructor(\r\n    private resolver: ComponentFactoryResolver,\r\n    private container: ViewContainerRef,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.formGroup = this.addToForm(this.data, this.formGroup);\r\n    const factory = this.resolver.resolveComponentFactory(\r\n      componentMapper.get(this.data.control.controlType)\r\n    );\r\n    this.componentRef = this.container.createComponent(factory);\r\n    this.componentRef.instance.form = this.formGroup;\r\n    this.componentRef.instance.control = this.data;\r\n    // const form = this.addToForm(this.data, this.formGroup);\r\n  }\r\n\r\n  addToForm(control: IDynamicBaseControl, originalForm: FormGroup) {\r\n    //originalForm å¤é¨ä¼ å¥FormGroupçå®ä¾\r\n    originalForm.addControl(control.labelCode, new FormControl(control.value));\r\n    if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {\r\n      const helpControl = control as IDyanmicHelpControl;\r\n      originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));\r\n    }\r\n    return originalForm;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { NumberSpinnerModule } from '@farris/ui-number-spinner';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { LookupModule } from '@farris/ui-lookup';\r\nimport { FieldGroupModule } from '@farris/ui-field-group';\r\n\r\nimport { DynamicControlGroupComponent } from './dynamic-control-group.component';\r\nimport { DynamicFormControlDirective } from './directives/dynamic-control.directive';\r\nimport { InputComponent } from './components/input/input.component';\r\nimport { DateRangeComponent } from './components/date/date-range.component';\r\nimport { SingleDateComponent } from './components/date/single-date.component';\r\nimport { NumberRangeComponent } from './components/number/number-range.component';\r\nimport { SingleNumberComponent } from './components/number/single-number.component'\r\nimport { BaseDropdownComponent } from './components/dropdown/base-dropdown.component';\r\nimport { HelpComponent } from './components/help/help.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DynamicFormControlDirective,\r\n    DynamicControlGroupComponent,\r\n    InputComponent,\r\n    DateRangeComponent,\r\n    SingleDateComponent,\r\n    NumberRangeComponent,\r\n    SingleNumberComponent,\r\n    BaseDropdownComponent,\r\n    HelpComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    InputGroupModule,\r\n    FarrisDatePickerModule,\r\n    NumberSpinnerModule,\r\n    ComboListModule,\r\n    LookupModule,\r\n    FieldGroupModule\r\n  ],\r\n  exports: [\r\n    DynamicFormControlDirective,\r\n    DynamicControlGroupComponent\r\n  ],\r\n  entryComponents: [\r\n    InputComponent,\r\n    DateRangeComponent,\r\n    SingleDateComponent,\r\n    NumberRangeComponent,\r\n    SingleNumberComponent,\r\n    BaseDropdownComponent,\r\n    HelpComponent\r\n  ]\r\n})\r\nexport class DynamicControlGroupModule { }\r\n"],"names":[],"mappings":"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"}
