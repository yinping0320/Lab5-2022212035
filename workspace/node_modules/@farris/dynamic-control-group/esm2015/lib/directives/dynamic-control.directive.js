/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, Injector, Input, ViewContainerRef } from "@angular/core";
import { DYNAMIC_CONTROL_TYPE } from "../interfaces/dynamic-control.interface";
import { InputComponent } from "../components/input/input.component";
import { FormGroup, FormControl } from '@angular/forms';
import { SingleDateComponent } from '../components/date/single-date.component';
import { DateRangeComponent } from '../components/date/date-range.component';
import { SingleNumberComponent } from '../components/number/single-number.component';
import { NumberRangeComponent } from '../components/number/number-range.component';
import { BaseDropdownComponent } from '../components/dropdown/base-dropdown.component';
import { HelpComponent } from '../components/help/help.component';
/** @type {?} */
const componentMapper = new Map();
componentMapper.set(DYNAMIC_CONTROL_TYPE.HELP, HelpComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.BASE_DROPDOWN, BaseDropdownComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.DATE_RANGE, DateRangeComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.NUMBER_RANGE, NumberRangeComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_DATE, SingleDateComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_NUMBER, SingleNumberComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.TEXT, InputComponent);
export class DynamicFormControlDirective {
    /**
     * @param {?} resolver
     * @param {?} container
     * @param {?} injector
     */
    constructor(resolver, container, injector) {
        this.resolver = resolver;
        this.container = container;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formGroup = this.addToForm(this.data, this.formGroup);
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(componentMapper.get(this.data.control.controlType));
        this.componentRef = this.container.createComponent(factory);
        this.componentRef.instance.form = this.formGroup;
        this.componentRef.instance.control = this.data;
        // const form = this.addToForm(this.data, this.formGroup);
    }
    /**
     * @param {?} control
     * @param {?} originalForm
     * @return {?}
     */
    addToForm(control, originalForm) {
        //originalForm 外部传入FormGroup的实例
        originalForm.addControl(control.labelCode, new FormControl(control.value));
        if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
            /** @type {?} */
            const helpControl = (/** @type {?} */ (control));
            originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
        }
        return originalForm;
    }
}
DynamicFormControlDirective.decorators = [
    { type: Directive, args: [{
                selector: "[dynamicFormControl]"
            },] }
];
/** @nocollapse */
DynamicFormControlDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: Injector }
];
DynamicFormControlDirective.propDecorators = {
    data: [{ type: Input }],
    formGroup: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicFormControlDirective.prototype.data;
    /** @type {?} */
    DynamicFormControlDirective.prototype.formGroup;
    /** @type {?} */
    DynamicFormControlDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynamicFormControlDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    DynamicFormControlDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DynamicFormControlDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZHluYW1pYy1jb250cm9sLWdyb3VwLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZHluYW1pYy1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUV4QixTQUFTLEVBRVQsUUFBUSxFQUNSLEtBQUssRUFHTCxnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF1QixvQkFBb0IsRUFBdUIsTUFBTSx5Q0FBeUMsQ0FBQztBQUN6SCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN2RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7O01BRTVELGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBRTtBQUNqQyxlQUFlLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztBQUM5RCxlQUFlLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQy9FLGVBQWUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDekUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUM3RSxlQUFlLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzNFLGVBQWUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDL0UsZUFBZSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFLL0QsTUFBTSxPQUFPLDJCQUEyQjs7Ozs7O0lBUXRDLFlBQ1UsUUFBa0MsRUFDbEMsU0FBMkIsRUFDM0IsUUFBa0I7UUFGbEIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUN6QixDQUFDOzs7O0lBRUosUUFBUTtRQUNOLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Y0FDckQsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQ25ELGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQ25EO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMvQywwREFBMEQ7SUFDNUQsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLE9BQTRCLEVBQUUsWUFBdUI7UUFDN0QsK0JBQStCO1FBQy9CLFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzRSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxLQUFLLG9CQUFvQixDQUFDLElBQUksRUFBRTs7a0JBQ3ZELFdBQVcsR0FBRyxtQkFBQSxPQUFPLEVBQXVCO1lBQ2xELFlBQVksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNuRjtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7OztZQXBDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjthQUNqQzs7OztZQS9CQyx3QkFBd0I7WUFReEIsZ0JBQWdCO1lBSmhCLFFBQVE7OzttQkE2QlAsS0FBSzt3QkFHTCxLQUFLOzs7O0lBSE4sMkNBQzBCOztJQUUxQixnREFDcUI7O0lBRXJCLG1EQUFnQzs7Ozs7SUFFOUIsK0NBQTBDOzs7OztJQUMxQyxnREFBbUM7Ozs7O0lBQ25DLCtDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gIENvbXBvbmVudFJlZixcclxuICBEaXJlY3RpdmUsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEluamVjdG9yLFxyXG4gIElucHV0LFxyXG4gIE9uSW5pdCxcclxuICBPdXRwdXQsXHJcbiAgVmlld0NvbnRhaW5lclJlZlxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IElEeW5hbWljQmFzZUNvbnRyb2wsIERZTkFNSUNfQ09OVFJPTF9UWVBFLCBJRHlhbm1pY0hlbHBDb250cm9sIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvZHluYW1pYy1jb250cm9sLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBJbnB1dENvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2lucHV0L2lucHV0LmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBTaW5nbGVEYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9kYXRlL3NpbmdsZS1kYXRlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERhdGVSYW5nZUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGF0ZS9kYXRlLXJhbmdlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNpbmdsZU51bWJlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbnVtYmVyL3NpbmdsZS1udW1iZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTnVtYmVyUmFuZ2VDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL251bWJlci9udW1iZXItcmFuZ2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQmFzZURyb3Bkb3duQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9kcm9wZG93bi9iYXNlLWRyb3Bkb3duLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEhlbHBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2hlbHAvaGVscC5jb21wb25lbnQnO1xyXG5cclxuY29uc3QgY29tcG9uZW50TWFwcGVyID0gbmV3IE1hcCgpO1xyXG5jb21wb25lbnRNYXBwZXIuc2V0KERZTkFNSUNfQ09OVFJPTF9UWVBFLkhFTFAsIEhlbHBDb21wb25lbnQpO1xyXG5jb21wb25lbnRNYXBwZXIuc2V0KERZTkFNSUNfQ09OVFJPTF9UWVBFLkJBU0VfRFJPUERPV04sIEJhc2VEcm9wZG93bkNvbXBvbmVudCk7XHJcbmNvbXBvbmVudE1hcHBlci5zZXQoRFlOQU1JQ19DT05UUk9MX1RZUEUuREFURV9SQU5HRSwgRGF0ZVJhbmdlQ29tcG9uZW50KTtcclxuY29tcG9uZW50TWFwcGVyLnNldChEWU5BTUlDX0NPTlRST0xfVFlQRS5OVU1CRVJfUkFOR0UsIE51bWJlclJhbmdlQ29tcG9uZW50KTtcclxuY29tcG9uZW50TWFwcGVyLnNldChEWU5BTUlDX0NPTlRST0xfVFlQRS5TSU5HTEVfREFURSwgU2luZ2xlRGF0ZUNvbXBvbmVudCk7XHJcbmNvbXBvbmVudE1hcHBlci5zZXQoRFlOQU1JQ19DT05UUk9MX1RZUEUuU0lOR0xFX05VTUJFUiwgU2luZ2xlTnVtYmVyQ29tcG9uZW50KTtcclxuY29tcG9uZW50TWFwcGVyLnNldChEWU5BTUlDX0NPTlRST0xfVFlQRS5URVhULCBJbnB1dENvbXBvbmVudCk7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogXCJbZHluYW1pY0Zvcm1Db250cm9sXVwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybUNvbnRyb2xEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgpXHJcbiAgZGF0YTogSUR5bmFtaWNCYXNlQ29udHJvbDtcclxuXHJcbiAgQElucHV0KClcclxuICBmb3JtR3JvdXA6IEZvcm1Hcm91cDtcclxuXHJcbiAgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHByaXZhdGUgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcclxuICApIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5mb3JtR3JvdXAgPSB0aGlzLmFkZFRvRm9ybSh0aGlzLmRhdGEsIHRoaXMuZm9ybUdyb3VwKTtcclxuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxyXG4gICAgICBjb21wb25lbnRNYXBwZXIuZ2V0KHRoaXMuZGF0YS5jb250cm9sLmNvbnRyb2xUeXBlKVxyXG4gICAgKTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZm9ybSA9IHRoaXMuZm9ybUdyb3VwO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuY29udHJvbCA9IHRoaXMuZGF0YTtcclxuICAgIC8vIGNvbnN0IGZvcm0gPSB0aGlzLmFkZFRvRm9ybSh0aGlzLmRhdGEsIHRoaXMuZm9ybUdyb3VwKTtcclxuICB9XHJcblxyXG4gIGFkZFRvRm9ybShjb250cm9sOiBJRHluYW1pY0Jhc2VDb250cm9sLCBvcmlnaW5hbEZvcm06IEZvcm1Hcm91cCkge1xyXG4gICAgLy9vcmlnaW5hbEZvcm0g5aSW6YOo5Lyg5YWlRm9ybUdyb3Vw55qE5a6e5L6LXHJcbiAgICBvcmlnaW5hbEZvcm0uYWRkQ29udHJvbChjb250cm9sLmxhYmVsQ29kZSwgbmV3IEZvcm1Db250cm9sKGNvbnRyb2wudmFsdWUpKTtcclxuICAgIGlmIChjb250cm9sLmNvbnRyb2wuY29udHJvbFR5cGUgPT09IERZTkFNSUNfQ09OVFJPTF9UWVBFLkhFTFApIHtcclxuICAgICAgY29uc3QgaGVscENvbnRyb2wgPSBjb250cm9sIGFzIElEeWFubWljSGVscENvbnRyb2w7XHJcbiAgICAgIG9yaWdpbmFsRm9ybS5hZGRDb250cm9sKGhlbHBDb250cm9sLmNvbnRyb2wuaGlkZGVuSW5wdXROYW1lLCBuZXcgRm9ybUNvbnRyb2woJycpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvcmlnaW5hbEZvcm07XHJcbiAgfVxyXG59XHJcbiJdfQ==