/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding } from "@angular/core";
import { FormGroup } from "@angular/forms";
export class NumberRangeComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
NumberRangeComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-number-range",
                template: `
    <div class="farris-group-wrap" [formGroup]="form">
      <div class="form-group farris-form-group">
        <label class="col-form-label">
          <span *ngIf="0" class="farris-label-info text-danger">*</span>
          <span class="farris-label-text">{{control.name}}</span>
        </label>
        <div class="farris-input-wrap">
            <farris-number-range
                [formControlName]="control.labelCode"
                [max]="options.max"
                [min]="options.min"
                [precision]="options.precision"
                [readonly]="options.readonly"
            >
            </farris-number-range>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
NumberRangeComponent.ctorParameters = () => [];
NumberRangeComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NumberRangeComponent.prototype.className;
    /** @type {?} */
    NumberRangeComponent.prototype.control;
    /** @type {?} */
    NumberRangeComponent.prototype.form;
    /** @type {?} */
    NumberRangeComponent.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLXJhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZHluYW1pYy1jb250cm9sLWdyb3VwLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbnVtYmVyL251bWJlci1yYW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUEwQjNDLE1BQU0sT0FBTyxvQkFBb0I7SUFPL0IsZ0JBQWUsQ0FBQzs7OztJQUNoQixRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUM7SUFDekcsQ0FBQzs7O1lBbkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQlQ7YUFFRjs7Ozs7d0JBRUUsV0FBVyxTQUFDLE9BQU87c0JBQ25CLEtBQUs7bUJBRUwsS0FBSzs7OztJQUhOLHlDQUF3Qzs7SUFDeEMsdUNBQytCOztJQUMvQixvQ0FDZ0I7O0lBQ2hCLHVDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBJRHluYW1pY0Jhc2VDb250cm9sLCBJRHlhbm1pY051bWJlckNvbnRyb2wgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9keW5hbWljLWNvbnRyb2wuaW50ZXJmYWNlXCI7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiBcImR5bmFtaWMtbnVtYmVyLXJhbmdlXCIsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtZ3JvdXAtd3JhcFwiIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBmYXJyaXMtZm9ybS1ncm91cFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+XHJcbiAgICAgICAgICA8c3BhbiAqbmdJZj1cIjBcIiBjbGFzcz1cImZhcnJpcy1sYWJlbC1pbmZvIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFycmlzLWxhYmVsLXRleHRcIj57e2NvbnRyb2wubmFtZX19PC9zcGFuPlxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZhcnJpcy1pbnB1dC13cmFwXCI+XHJcbiAgICAgICAgICAgIDxmYXJyaXMtbnVtYmVyLXJhbmdlXHJcbiAgICAgICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbnRyb2wubGFiZWxDb2RlXCJcclxuICAgICAgICAgICAgICAgIFttYXhdPVwib3B0aW9ucy5tYXhcIlxyXG4gICAgICAgICAgICAgICAgW21pbl09XCJvcHRpb25zLm1pblwiXHJcbiAgICAgICAgICAgICAgICBbcHJlY2lzaW9uXT1cIm9wdGlvbnMucHJlY2lzaW9uXCJcclxuICAgICAgICAgICAgICAgIFtyZWFkb25seV09XCJvcHRpb25zLnJlYWRvbmx5XCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8L2ZhcnJpcy1udW1iZXItcmFuZ2U+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJSYW5nZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNsYXNzTmFtZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpXHJcbiAgY29udHJvbDogSUR5YW5taWNOdW1iZXJDb250cm9sO1xyXG4gIEBJbnB1dCgpXHJcbiAgZm9ybTogRm9ybUdyb3VwO1xyXG4gIG9wdGlvbnM6IGFueTtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbnRyb2wuY29udHJvbDtcclxuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jb250cm9sLmNsYXNzTmFtZSA/IHRoaXMuY29udHJvbC5jbGFzc05hbWUgOiAnY29sLTEyIGNvbC1tZC02IGNvbC14bC0zIGNvbC1lbC0yJztcclxuICB9XHJcbn1cclxuIl19