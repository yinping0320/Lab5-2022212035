/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding } from "@angular/core";
import { FormGroup } from "@angular/forms";
export class BaseDropdownComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    }
}
BaseDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-base-dropdown",
                template: `
    <div class="farris-group-wrap" [formGroup]="form">
      <div class="form-group farris-form-group">
        <label class="col-form-label">
          <span *ngIf="0" class="farris-label-info text-danger">*</span>
          <span class="farris-label-text">{{control.name}}</span>
        </label>
        <div class="farris-input-wrap">
            <farris-combo-list *ngIf="options.items"
                [readonly]="options.readonly"
                [formControlName]="control.labelCode"
                [idField]="options.idField"
                [textField]="options.textField"
                [multiSelect]="options.multiSelect"
                [data]="options.items"
            ></farris-combo-list>
            <farris-combo-list *ngIf="options.uri"
                [readonly]="options.readonly"
                [formControlName]="control.labelCode"
                [idField]="options.idField"
                [textField]="options.textField"
                [multiSelect]="options.multiSelect"
                [uri]="options.uri"
            ></farris-combo-list>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
BaseDropdownComponent.ctorParameters = () => [];
BaseDropdownComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['class',] }],
    control: [{ type: Input }],
    form: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BaseDropdownComponent.prototype.className;
    /** @type {?} */
    BaseDropdownComponent.prototype.control;
    /** @type {?} */
    BaseDropdownComponent.prototype.form;
    /** @type {?} */
    BaseDropdownComponent.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1kcm9wZG93bi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2R5bmFtaWMtY29udHJvbC1ncm91cC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Ryb3Bkb3duL2Jhc2UtZHJvcGRvd24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBa0MzQyxNQUFNLE9BQU8scUJBQXFCO0lBT2hDLGdCQUFlLENBQUM7Ozs7SUFDaEIsUUFBUTtRQUNKLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO0lBQzNHLENBQUM7OztZQTNDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EyQlQ7YUFFRjs7Ozs7d0JBRUUsV0FBVyxTQUFDLE9BQU87c0JBQ25CLEtBQUs7bUJBRUwsS0FBSzs7OztJQUhOLDBDQUF3Qzs7SUFDeEMsd0NBQ2lDOztJQUNqQyxxQ0FDZ0I7O0lBQ2hCLHdDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBJRHluYW1pY0Jhc2VDb250cm9sLCBJRHluYW1pY0Ryb3Bkb3duQ29udHJvbCB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2R5bmFtaWMtY29udHJvbC5pbnRlcmZhY2VcIjtcclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6IFwiZHluYW1pYy1iYXNlLWRyb3Bkb3duXCIsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtZ3JvdXAtd3JhcFwiIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBmYXJyaXMtZm9ybS1ncm91cFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+XHJcbiAgICAgICAgICA8c3BhbiAqbmdJZj1cIjBcIiBjbGFzcz1cImZhcnJpcy1sYWJlbC1pbmZvIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFycmlzLWxhYmVsLXRleHRcIj57e2NvbnRyb2wubmFtZX19PC9zcGFuPlxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZhcnJpcy1pbnB1dC13cmFwXCI+XHJcbiAgICAgICAgICAgIDxmYXJyaXMtY29tYm8tbGlzdCAqbmdJZj1cIm9wdGlvbnMuaXRlbXNcIlxyXG4gICAgICAgICAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJjb250cm9sLmxhYmVsQ29kZVwiXHJcbiAgICAgICAgICAgICAgICBbaWRGaWVsZF09XCJvcHRpb25zLmlkRmllbGRcIlxyXG4gICAgICAgICAgICAgICAgW3RleHRGaWVsZF09XCJvcHRpb25zLnRleHRGaWVsZFwiXHJcbiAgICAgICAgICAgICAgICBbbXVsdGlTZWxlY3RdPVwib3B0aW9ucy5tdWx0aVNlbGVjdFwiXHJcbiAgICAgICAgICAgICAgICBbZGF0YV09XCJvcHRpb25zLml0ZW1zXCJcclxuICAgICAgICAgICAgPjwvZmFycmlzLWNvbWJvLWxpc3Q+XHJcbiAgICAgICAgICAgIDxmYXJyaXMtY29tYm8tbGlzdCAqbmdJZj1cIm9wdGlvbnMudXJpXCJcclxuICAgICAgICAgICAgICAgIFtyZWFkb25seV09XCJvcHRpb25zLnJlYWRvbmx5XCJcclxuICAgICAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29udHJvbC5sYWJlbENvZGVcIlxyXG4gICAgICAgICAgICAgICAgW2lkRmllbGRdPVwib3B0aW9ucy5pZEZpZWxkXCJcclxuICAgICAgICAgICAgICAgIFt0ZXh0RmllbGRdPVwib3B0aW9ucy50ZXh0RmllbGRcIlxyXG4gICAgICAgICAgICAgICAgW211bHRpU2VsZWN0XT1cIm9wdGlvbnMubXVsdGlTZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgW3VyaV09XCJvcHRpb25zLnVyaVwiXHJcbiAgICAgICAgICAgID48L2ZhcnJpcy1jb21iby1saXN0PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQmFzZURyb3Bkb3duQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgQElucHV0KClcclxuICBjb250cm9sOiBJRHluYW1pY0Ryb3Bkb3duQ29udHJvbDtcclxuICBASW5wdXQoKVxyXG4gIGZvcm06IEZvcm1Hcm91cDtcclxuICBvcHRpb25zOiBhbnk7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbnRyb2wuY29udHJvbDtcclxuICAgICAgdGhpcy5jbGFzc05hbWUgPSB0aGlzLmNvbnRyb2wuY2xhc3NOYW1lID8gdGhpcy5jb250cm9sLmNsYXNzTmFtZSA6ICdjb2wtMTIgY29sLW1kLTYgY29sLXhsLTMgY29sLWVsLTInO1xyXG4gIH1cclxufVxyXG4iXX0=