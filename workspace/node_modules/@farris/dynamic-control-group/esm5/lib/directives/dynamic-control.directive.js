/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, Injector, Input, ViewContainerRef } from "@angular/core";
import { DYNAMIC_CONTROL_TYPE } from "../interfaces/dynamic-control.interface";
import { InputComponent } from "../components/input/input.component";
import { FormGroup, FormControl } from '@angular/forms';
import { SingleDateComponent } from '../components/date/single-date.component';
import { DateRangeComponent } from '../components/date/date-range.component';
import { SingleNumberComponent } from '../components/number/single-number.component';
import { NumberRangeComponent } from '../components/number/number-range.component';
import { BaseDropdownComponent } from '../components/dropdown/base-dropdown.component';
import { HelpComponent } from '../components/help/help.component';
/** @type {?} */
var componentMapper = new Map();
componentMapper.set(DYNAMIC_CONTROL_TYPE.HELP, HelpComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.BASE_DROPDOWN, BaseDropdownComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.DATE_RANGE, DateRangeComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.NUMBER_RANGE, NumberRangeComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_DATE, SingleDateComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_NUMBER, SingleNumberComponent);
componentMapper.set(DYNAMIC_CONTROL_TYPE.TEXT, InputComponent);
var DynamicFormControlDirective = /** @class */ (function () {
    function DynamicFormControlDirective(resolver, container, injector) {
        this.resolver = resolver;
        this.container = container;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    DynamicFormControlDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.formGroup = this.addToForm(this.data, this.formGroup);
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(componentMapper.get(this.data.control.controlType));
        this.componentRef = this.container.createComponent(factory);
        this.componentRef.instance.form = this.formGroup;
        this.componentRef.instance.control = this.data;
        // const form = this.addToForm(this.data, this.formGroup);
    };
    /**
     * @param {?} control
     * @param {?} originalForm
     * @return {?}
     */
    DynamicFormControlDirective.prototype.addToForm = /**
     * @param {?} control
     * @param {?} originalForm
     * @return {?}
     */
    function (control, originalForm) {
        //originalForm 外部传入FormGroup的实例
        originalForm.addControl(control.labelCode, new FormControl(control.value));
        if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
            /** @type {?} */
            var helpControl = (/** @type {?} */ (control));
            originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
        }
        return originalForm;
    };
    DynamicFormControlDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[dynamicFormControl]"
                },] }
    ];
    /** @nocollapse */
    DynamicFormControlDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: Injector }
    ]; };
    DynamicFormControlDirective.propDecorators = {
        data: [{ type: Input }],
        formGroup: [{ type: Input }]
    };
    return DynamicFormControlDirective;
}());
export { DynamicFormControlDirective };
if (false) {
    /** @type {?} */
    DynamicFormControlDirective.prototype.data;
    /** @type {?} */
    DynamicFormControlDirective.prototype.formGroup;
    /** @type {?} */
    DynamicFormControlDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynamicFormControlDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    DynamicFormControlDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DynamicFormControlDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZHluYW1pYy1jb250cm9sLWdyb3VwLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZHluYW1pYy1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUV4QixTQUFTLEVBRVQsUUFBUSxFQUNSLEtBQUssRUFHTCxnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF1QixvQkFBb0IsRUFBdUIsTUFBTSx5Q0FBeUMsQ0FBQztBQUN6SCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN2RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7O0lBRTVELGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBRTtBQUNqQyxlQUFlLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztBQUM5RCxlQUFlLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQy9FLGVBQWUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDekUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUM3RSxlQUFlLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzNFLGVBQWUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFDL0UsZUFBZSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFFL0Q7SUFXRSxxQ0FDVSxRQUFrQyxFQUNsQyxTQUEyQixFQUMzQixRQUFrQjtRQUZsQixhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUNsQyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ3pCLENBQUM7Ozs7SUFFSiw4Q0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O1lBQ3JELE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUNuRCxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUNuRDtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDL0MsMERBQTBEO0lBQzVELENBQUM7Ozs7OztJQUVELCtDQUFTOzs7OztJQUFULFVBQVUsT0FBNEIsRUFBRSxZQUF1QjtRQUM3RCwrQkFBK0I7UUFDL0IsWUFBWSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzNFLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsSUFBSSxFQUFFOztnQkFDdkQsV0FBVyxHQUFHLG1CQUFBLE9BQU8sRUFBdUI7WUFDbEQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ25GO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs7Z0JBcENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2lCQUNqQzs7OztnQkEvQkMsd0JBQXdCO2dCQVF4QixnQkFBZ0I7Z0JBSmhCLFFBQVE7Ozt1QkE2QlAsS0FBSzs0QkFHTCxLQUFLOztJQThCUixrQ0FBQztDQUFBLEFBckNELElBcUNDO1NBbENZLDJCQUEyQjs7O0lBQ3RDLDJDQUMwQjs7SUFFMUIsZ0RBQ3FCOztJQUVyQixtREFBZ0M7Ozs7O0lBRTlCLCtDQUEwQzs7Ozs7SUFDMUMsZ0RBQW1DOzs7OztJQUNuQywrQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICBDb21wb25lbnRSZWYsXHJcbiAgRGlyZWN0aXZlLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbmplY3RvcixcclxuICBJbnB1dCxcclxuICBPbkluaXQsXHJcbiAgT3V0cHV0LFxyXG4gIFZpZXdDb250YWluZXJSZWZcclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBJRHluYW1pY0Jhc2VDb250cm9sLCBEWU5BTUlDX0NPTlRST0xfVFlQRSwgSUR5YW5taWNIZWxwQ29udHJvbCB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2R5bmFtaWMtY29udHJvbC5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgSW5wdXRDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9pbnB1dC9pbnB1dC5jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgU2luZ2xlRGF0ZUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGF0ZS9zaW5nbGUtZGF0ZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRlUmFuZ2VDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2RhdGUvZGF0ZS1yYW5nZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTaW5nbGVOdW1iZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL251bWJlci9zaW5nbGUtbnVtYmVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE51bWJlclJhbmdlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9udW1iZXIvbnVtYmVyLXJhbmdlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJhc2VEcm9wZG93bkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvZHJvcGRvd24vYmFzZS1kcm9wZG93bi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBIZWxwQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9oZWxwL2hlbHAuY29tcG9uZW50JztcclxuXHJcbmNvbnN0IGNvbXBvbmVudE1hcHBlciA9IG5ldyBNYXAoKTtcclxuY29tcG9uZW50TWFwcGVyLnNldChEWU5BTUlDX0NPTlRST0xfVFlQRS5IRUxQLCBIZWxwQ29tcG9uZW50KTtcclxuY29tcG9uZW50TWFwcGVyLnNldChEWU5BTUlDX0NPTlRST0xfVFlQRS5CQVNFX0RST1BET1dOLCBCYXNlRHJvcGRvd25Db21wb25lbnQpO1xyXG5jb21wb25lbnRNYXBwZXIuc2V0KERZTkFNSUNfQ09OVFJPTF9UWVBFLkRBVEVfUkFOR0UsIERhdGVSYW5nZUNvbXBvbmVudCk7XHJcbmNvbXBvbmVudE1hcHBlci5zZXQoRFlOQU1JQ19DT05UUk9MX1RZUEUuTlVNQkVSX1JBTkdFLCBOdW1iZXJSYW5nZUNvbXBvbmVudCk7XHJcbmNvbXBvbmVudE1hcHBlci5zZXQoRFlOQU1JQ19DT05UUk9MX1RZUEUuU0lOR0xFX0RBVEUsIFNpbmdsZURhdGVDb21wb25lbnQpO1xyXG5jb21wb25lbnRNYXBwZXIuc2V0KERZTkFNSUNfQ09OVFJPTF9UWVBFLlNJTkdMRV9OVU1CRVIsIFNpbmdsZU51bWJlckNvbXBvbmVudCk7XHJcbmNvbXBvbmVudE1hcHBlci5zZXQoRFlOQU1JQ19DT05UUk9MX1RZUEUuVEVYVCwgSW5wdXRDb21wb25lbnQpO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6IFwiW2R5bmFtaWNGb3JtQ29udHJvbF1cIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1Db250cm9sRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKVxyXG4gIGRhdGE6IElEeW5hbWljQmFzZUNvbnRyb2w7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XHJcblxyXG4gIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT47XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgKSB7fVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuZm9ybUdyb3VwID0gdGhpcy5hZGRUb0Zvcm0odGhpcy5kYXRhLCB0aGlzLmZvcm1Hcm91cCk7XHJcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShcclxuICAgICAgY29tcG9uZW50TWFwcGVyLmdldCh0aGlzLmRhdGEuY29udHJvbC5jb250cm9sVHlwZSlcclxuICAgICk7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmZvcm0gPSB0aGlzLmZvcm1Hcm91cDtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbnRyb2wgPSB0aGlzLmRhdGE7XHJcbiAgICAvLyBjb25zdCBmb3JtID0gdGhpcy5hZGRUb0Zvcm0odGhpcy5kYXRhLCB0aGlzLmZvcm1Hcm91cCk7XHJcbiAgfVxyXG5cclxuICBhZGRUb0Zvcm0oY29udHJvbDogSUR5bmFtaWNCYXNlQ29udHJvbCwgb3JpZ2luYWxGb3JtOiBGb3JtR3JvdXApIHtcclxuICAgIC8vb3JpZ2luYWxGb3JtIOWklumDqOS8oOWFpUZvcm1Hcm91cOeahOWunuS+i1xyXG4gICAgb3JpZ2luYWxGb3JtLmFkZENvbnRyb2woY29udHJvbC5sYWJlbENvZGUsIG5ldyBGb3JtQ29udHJvbChjb250cm9sLnZhbHVlKSk7XHJcbiAgICBpZiAoY29udHJvbC5jb250cm9sLmNvbnRyb2xUeXBlID09PSBEWU5BTUlDX0NPTlRST0xfVFlQRS5IRUxQKSB7XHJcbiAgICAgIGNvbnN0IGhlbHBDb250cm9sID0gY29udHJvbCBhcyBJRHlhbm1pY0hlbHBDb250cm9sO1xyXG4gICAgICBvcmlnaW5hbEZvcm0uYWRkQ29udHJvbChoZWxwQ29udHJvbC5jb250cm9sLmhpZGRlbklucHV0TmFtZSwgbmV3IEZvcm1Db250cm9sKCcnKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3JpZ2luYWxGb3JtO1xyXG4gIH1cclxufVxyXG4iXX0=