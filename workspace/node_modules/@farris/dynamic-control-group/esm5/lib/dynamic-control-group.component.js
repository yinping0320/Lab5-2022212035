/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ChangeDetectorRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { DynamicControlGroupService } from './services/dynamic-control-group.service';
var DynamicControlGroupComponent = /** @class */ (function () {
    function DynamicControlGroupComponent(controlGroupService, cdRef) {
        this.controlGroupService = controlGroupService;
        this.cdRef = cdRef;
        this.form = null;
        this.isControlInline = true;
        this.isEmbedded = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicControlGroupComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.className = this.initStyles();
        if (this.isGrouped && this.contents) {
            this.controlEntries = Array.from(this.groupControls(this.contents).entries());
        }
    };
    /**
     * @return {?}
     */
    DynamicControlGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        //使用模态框动态加载本组件时，拿到了本组件的实例，同时初始赋值，会在此第一次拿到@input初始值
        this.className = this.initStyles();
        if (this.contents && this.contents.length) {
            this.initFormAndControlEntries();
        }
        else {
            this.uri && this.controlGroupService.getFormControlsByUri(this.uri).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.contents = data;
                _this.initFormAndControlEntries();
            }));
        }
    };
    /**
     * @return {?}
     */
    DynamicControlGroupComponent.prototype.initFormAndControlEntries = /**
     * @return {?}
     */
    function () {
        // this.form = this.controlGroupService.toFormGroup(this.contents, this.form);
        if (this.isGrouped) {
            this.controlEntries = Array.from(this.groupControls(this.contents).entries());
        }
        this.form.setValue(this.controlGroupService.toFormValue(this.contents, this.formData));
    };
    /**
     * @param {?} contents
     * @return {?}
     */
    DynamicControlGroupComponent.prototype.groupControls = /**
     * @param {?} contents
     * @return {?}
     */
    function (contents) {
        /** @type {?} */
        var groupedControls = new Map();
        contents.forEach((/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            if (groupedControls.has(control.groupName)) {
                groupedControls.get(control.groupName).push(control);
            }
            else {
                groupedControls.set(control.groupName, [control]);
            }
        }));
        return groupedControls;
    };
    /**
     * @return {?}
     */
    DynamicControlGroupComponent.prototype.initStyles = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styleClass;
        styleClass = this.isGrouped ? "f-form-layout" : "f-utils-flex-row-wrap";
        styleClass = this.extraClassNames ? styleClass.concat(" " + this.extraClassNames) : styleClass;
        styleClass = this.isEmbedded ? styleClass : styleClass.concat(" farris-form");
        styleClass = this.isControlInline ? styleClass.concat(" farris-form-controls-inline") : styleClass;
        return styleClass;
    };
    /**
     * @return {?}
     */
    DynamicControlGroupComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        // this.cdRef.detectChanges();
    };
    DynamicControlGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-dynamic-control-group',
                    template: "\n    <ng-container *ngIf=\"!isGrouped && form\">\n        <ng-container *ngFor=\"let control of contents\" dynamicFormControl [data]=\"control\" [formGroup]=\"form\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"isGrouped && form\">\n        <ng-container *ngFor=\"let groupData of controlEntries\">\n            <fieldset class=\"f-section-formgroup\">\n                <legend class=\"f-section-formgroup-legend\" farrisCollapse [title]=\"groupData[0]\"></legend>\n                <div class=\"f-section-formgroup-inputs\">\n                    <ng-container *ngFor=\"let entry of groupData[1]\" dynamicFormControl [data]=\"entry\" [formGroup]=\"form\"></ng-container>\n                </div>\n            </fieldset>\n        </ng-container>\n    </ng-container>\n  ",
                    providers: [
                        DynamicControlGroupService
                    ]
                }] }
    ];
    /** @nocollapse */
    DynamicControlGroupComponent.ctorParameters = function () { return [
        { type: DynamicControlGroupService },
        { type: ChangeDetectorRef }
    ]; };
    DynamicControlGroupComponent.propDecorators = {
        className: [{ type: HostBinding, args: ['class',] }],
        contents: [{ type: Input }],
        form: [{ type: Input }],
        extraClassNames: [{ type: Input }],
        isControlInline: [{ type: Input }],
        isEmbedded: [{ type: Input }],
        formData: [{ type: Input }],
        uri: [{ type: Input }],
        isGrouped: [{ type: Input }]
    };
    return DynamicControlGroupComponent;
}());
export { DynamicControlGroupComponent };
if (false) {
    /** @type {?} */
    DynamicControlGroupComponent.prototype.className;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.contents;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.form;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.extraClassNames;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.isControlInline;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.isEmbedded;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.formData;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.uri;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.isGrouped;
    /** @type {?} */
    DynamicControlGroupComponent.prototype.controlEntries;
    /**
     * @type {?}
     * @private
     */
    DynamicControlGroupComponent.prototype.controlGroupService;
    /**
     * @type {?}
     * @private
     */
    DynamicControlGroupComponent.prototype.cdRef;
}
//# sourceMappingURL=data:application/json;base64,