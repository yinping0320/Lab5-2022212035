/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding } from "@angular/core";
import { FormGroup } from '@angular/forms';
var InputComponent = /** @class */ (function () {
    function InputComponent() {
    }
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    };
    InputComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-input",
                    template: "\n      <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n        <div class=\"form-group farris-form-group\">\n          <label class=\"col-form-label\">\n            <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n            <span class=\"farris-label-text\">{{control.name}}</span>\n          </label>\n          <div class=\"farris-input-wrap\">\n            <input-group [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></input-group>\n          </div>\n        </div>\n      </div>\n  "
                }] }
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return []; };
    InputComponent.propDecorators = {
        className: [{ type: HostBinding, args: ['class',] }],
        control: [{ type: Input }],
        form: [{ type: Input }]
    };
    return InputComponent;
}());
export { InputComponent };
if (false) {
    /** @type {?} */
    InputComponent.prototype.className;
    /** @type {?} */
    InputComponent.prototype.control;
    /** @type {?} */
    InputComponent.prototype.form;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9keW5hbWljLWNvbnRyb2wtZ3JvdXAvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9pbnB1dC9pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0M7SUF3QkU7SUFBZSxDQUFDOzs7O0lBQ2hCLGlDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQztJQUN6RyxDQUFDOztnQkEzQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsdWlCQVlUO2lCQUVGOzs7Ozs0QkFFRSxXQUFXLFNBQUMsT0FBTzswQkFDbkIsS0FBSzt1QkFFTCxLQUFLOztJQU9SLHFCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0FYWSxjQUFjOzs7SUFDekIsbUNBQXdDOztJQUN4QyxpQ0FDNkI7O0lBQzdCLDhCQUNnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBJRHluYW1pY0Jhc2VDb250cm9sIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvZHluYW1pYy1jb250cm9sLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiBcImR5bmFtaWMtaW5wdXRcIixcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZmFycmlzLWdyb3VwLXdyYXBcIiBbZm9ybUdyb3VwXT1cImZvcm1cIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBmYXJyaXMtZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj5cclxuICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCIwXCIgY2xhc3M9XCJmYXJyaXMtbGFiZWwtaW5mbyB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFycmlzLWxhYmVsLXRleHRcIj57e2NvbnRyb2wubmFtZX19PC9zcGFuPlxyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtaW5wdXQtd3JhcFwiPlxyXG4gICAgICAgICAgICA8aW5wdXQtZ3JvdXAgW2Zvcm1Db250cm9sTmFtZV09XCJjb250cm9sLmxhYmVsQ29kZVwiIFtyZWFkb25seV09XCJjb250cm9sLmNvbnRyb2wucmVhZG9ubHlcIj48L2lucHV0LWdyb3VwPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKSBjbGFzc05hbWU6IHN0cmluZztcclxuICBASW5wdXQoKVxyXG4gIGNvbnRyb2w6IElEeW5hbWljQmFzZUNvbnRyb2w7XHJcbiAgQElucHV0KClcclxuICBmb3JtOiBGb3JtR3JvdXA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jb250cm9sLmNsYXNzTmFtZSA/IHRoaXMuY29udHJvbC5jbGFzc05hbWUgOiAnY29sLTEyIGNvbC1tZC02IGNvbC14bC0zIGNvbC1lbC0yJztcclxuICB9XHJcbn1cclxuIl19