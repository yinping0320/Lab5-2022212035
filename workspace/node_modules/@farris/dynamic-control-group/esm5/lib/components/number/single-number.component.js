/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding } from "@angular/core";
import { FormGroup } from "@angular/forms";
var SingleNumberComponent = /** @class */ (function () {
    function SingleNumberComponent() {
    }
    /**
     * @return {?}
     */
    SingleNumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    };
    SingleNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-single-number",
                    template: "\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\"col-form-label\">\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n          <span class=\"farris-label-text\">{{control.name}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n            <farris-number-spinner \n                [formControlName]=\"control.labelCode\"\n                [max]=\"options.max\"\n                [min]=\"options.min\"\n                [precision]=\"options.precision\"\n                [readonly]=\"options.readonly\"\n            >\n            </farris-number-spinner>\n        </div>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    SingleNumberComponent.ctorParameters = function () { return []; };
    SingleNumberComponent.propDecorators = {
        className: [{ type: HostBinding, args: ['class',] }],
        control: [{ type: Input }],
        form: [{ type: Input }]
    };
    return SingleNumberComponent;
}());
export { SingleNumberComponent };
if (false) {
    /** @type {?} */
    SingleNumberComponent.prototype.className;
    /** @type {?} */
    SingleNumberComponent.prototype.control;
    /** @type {?} */
    SingleNumberComponent.prototype.form;
    /** @type {?} */
    SingleNumberComponent.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW51bWJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2R5bmFtaWMtY29udHJvbC1ncm91cC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL251bWJlci9zaW5nbGUtbnVtYmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQztJQStCRTtJQUFlLENBQUM7Ozs7SUFDaEIsd0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUM7SUFDekcsQ0FBQzs7Z0JBbkNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxRQUFRLEVBQUUsK3RCQW1CVDtpQkFFRjs7Ozs7NEJBRUUsV0FBVyxTQUFDLE9BQU87MEJBQ25CLEtBQUs7dUJBRUwsS0FBSzs7SUFRUiw0QkFBQztDQUFBLEFBcENELElBb0NDO1NBWlkscUJBQXFCOzs7SUFDaEMsMENBQXdDOztJQUN4Qyx3Q0FDK0I7O0lBQy9CLHFDQUNnQjs7SUFDaEIsd0NBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IElEeW5hbWljQmFzZUNvbnRyb2wsIElEeWFubWljTnVtYmVyQ29udHJvbCB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2R5bmFtaWMtY29udHJvbC5pbnRlcmZhY2VcIjtcclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6IFwiZHluYW1pYy1zaW5nbGUtbnVtYmVyXCIsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtZ3JvdXAtd3JhcFwiIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBmYXJyaXMtZm9ybS1ncm91cFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+XHJcbiAgICAgICAgICA8c3BhbiAqbmdJZj1cIjBcIiBjbGFzcz1cImZhcnJpcy1sYWJlbC1pbmZvIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFycmlzLWxhYmVsLXRleHRcIj57e2NvbnRyb2wubmFtZX19PC9zcGFuPlxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZhcnJpcy1pbnB1dC13cmFwXCI+XHJcbiAgICAgICAgICAgIDxmYXJyaXMtbnVtYmVyLXNwaW5uZXIgXHJcbiAgICAgICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbnRyb2wubGFiZWxDb2RlXCJcclxuICAgICAgICAgICAgICAgIFttYXhdPVwib3B0aW9ucy5tYXhcIlxyXG4gICAgICAgICAgICAgICAgW21pbl09XCJvcHRpb25zLm1pblwiXHJcbiAgICAgICAgICAgICAgICBbcHJlY2lzaW9uXT1cIm9wdGlvbnMucHJlY2lzaW9uXCJcclxuICAgICAgICAgICAgICAgIFtyZWFkb25seV09XCJvcHRpb25zLnJlYWRvbmx5XCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8L2ZhcnJpcy1udW1iZXItc3Bpbm5lcj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICBgLFxyXG4gIHN0eWxlczogW11cclxufSlcclxuZXhwb3J0IGNsYXNzIFNpbmdsZU51bWJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNsYXNzTmFtZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpXHJcbiAgY29udHJvbDogSUR5YW5taWNOdW1iZXJDb250cm9sO1xyXG4gIEBJbnB1dCgpXHJcbiAgZm9ybTogRm9ybUdyb3VwO1xyXG4gIG9wdGlvbnM6IGFueTtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbnRyb2wuY29udHJvbDtcclxuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jb250cm9sLmNsYXNzTmFtZSA/IHRoaXMuY29udHJvbC5jbGFzc05hbWUgOiAnY29sLTEyIGNvbC1tZC02IGNvbC14bC0zIGNvbC1lbC0yJztcclxuICB9XHJcbn1cclxuIl19