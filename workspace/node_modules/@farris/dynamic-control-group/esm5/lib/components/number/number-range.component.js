/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding } from "@angular/core";
import { FormGroup } from "@angular/forms";
var NumberRangeComponent = /** @class */ (function () {
    function NumberRangeComponent() {
    }
    /**
     * @return {?}
     */
    NumberRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = this.control.control;
        this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
    };
    NumberRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-number-range",
                    template: "\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\"col-form-label\">\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n          <span class=\"farris-label-text\">{{control.name}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n            <farris-number-range\n                [formControlName]=\"control.labelCode\"\n                [max]=\"options.max\"\n                [min]=\"options.min\"\n                [precision]=\"options.precision\"\n                [readonly]=\"options.readonly\"\n            >\n            </farris-number-range>\n        </div>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NumberRangeComponent.ctorParameters = function () { return []; };
    NumberRangeComponent.propDecorators = {
        className: [{ type: HostBinding, args: ['class',] }],
        control: [{ type: Input }],
        form: [{ type: Input }]
    };
    return NumberRangeComponent;
}());
export { NumberRangeComponent };
if (false) {
    /** @type {?} */
    NumberRangeComponent.prototype.className;
    /** @type {?} */
    NumberRangeComponent.prototype.control;
    /** @type {?} */
    NumberRangeComponent.prototype.form;
    /** @type {?} */
    NumberRangeComponent.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLXJhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZHluYW1pYy1jb250cm9sLWdyb3VwLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbnVtYmVyL251bWJlci1yYW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7SUErQkU7SUFBZSxDQUFDOzs7O0lBQ2hCLHVDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO0lBQ3pHLENBQUM7O2dCQW5DRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsUUFBUSxFQUFFLDB0QkFtQlQ7aUJBRUY7Ozs7OzRCQUVFLFdBQVcsU0FBQyxPQUFPOzBCQUNuQixLQUFLO3VCQUVMLEtBQUs7O0lBUVIsMkJBQUM7Q0FBQSxBQXBDRCxJQW9DQztTQVpZLG9CQUFvQjs7O0lBQy9CLHlDQUF3Qzs7SUFDeEMsdUNBQytCOztJQUMvQixvQ0FDZ0I7O0lBQ2hCLHVDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBJRHluYW1pY0Jhc2VDb250cm9sLCBJRHlhbm1pY051bWJlckNvbnRyb2wgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9keW5hbWljLWNvbnRyb2wuaW50ZXJmYWNlXCI7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiBcImR5bmFtaWMtbnVtYmVyLXJhbmdlXCIsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtZ3JvdXAtd3JhcFwiIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBmYXJyaXMtZm9ybS1ncm91cFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+XHJcbiAgICAgICAgICA8c3BhbiAqbmdJZj1cIjBcIiBjbGFzcz1cImZhcnJpcy1sYWJlbC1pbmZvIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmFycmlzLWxhYmVsLXRleHRcIj57e2NvbnRyb2wubmFtZX19PC9zcGFuPlxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZhcnJpcy1pbnB1dC13cmFwXCI+XHJcbiAgICAgICAgICAgIDxmYXJyaXMtbnVtYmVyLXJhbmdlXHJcbiAgICAgICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbnRyb2wubGFiZWxDb2RlXCJcclxuICAgICAgICAgICAgICAgIFttYXhdPVwib3B0aW9ucy5tYXhcIlxyXG4gICAgICAgICAgICAgICAgW21pbl09XCJvcHRpb25zLm1pblwiXHJcbiAgICAgICAgICAgICAgICBbcHJlY2lzaW9uXT1cIm9wdGlvbnMucHJlY2lzaW9uXCJcclxuICAgICAgICAgICAgICAgIFtyZWFkb25seV09XCJvcHRpb25zLnJlYWRvbmx5XCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8L2ZhcnJpcy1udW1iZXItcmFuZ2U+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJSYW5nZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNsYXNzTmFtZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpXHJcbiAgY29udHJvbDogSUR5YW5taWNOdW1iZXJDb250cm9sO1xyXG4gIEBJbnB1dCgpXHJcbiAgZm9ybTogRm9ybUdyb3VwO1xyXG4gIG9wdGlvbnM6IGFueTtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbnRyb2wuY29udHJvbDtcclxuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jb250cm9sLmNsYXNzTmFtZSA/IHRoaXMuY29udHJvbC5jbGFzc05hbWUgOiAnY29sLTEyIGNvbC1tZC02IGNvbC14bC0zIGNvbC1lbC0yJztcclxuICB9XHJcbn1cclxuIl19