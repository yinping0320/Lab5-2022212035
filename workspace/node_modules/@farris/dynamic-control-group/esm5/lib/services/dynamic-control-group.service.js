/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, InjectFlags } from '@angular/core';
import { DYNAMIC_CONTROL_TYPE } from '../interfaces/dynamic-control.interface';
import { DynamiControlGroupHttpToken } from '../interfaces/dynamic-control-group-http.interface';
var DynamicControlGroupService = /** @class */ (function () {
    function DynamicControlGroupService(injector) {
        this.injector = injector;
        this.httpService = this.injector.get(DynamiControlGroupHttpToken, null, InjectFlags.Optional);
    }
    // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {
    //   if (!originalForm) {
    //     originalForm = new FormGroup({});
    //   }
    //   formControls.forEach(control => {
    //     originalForm.addControl(control.labelCode, new FormControl(''));
    //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
    //       const helpControl = control as IDyanmicHelpControl;
    //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
    //     }
    //   });
    //   return originalForm;
    // }
    // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {
    //   if (!originalForm) {
    //     originalForm = new FormGroup({});
    //   }
    //   formControls.forEach(control => {
    //     originalForm.addControl(control.labelCode, new FormControl(''));
    //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
    //       const helpControl = control as IDyanmicHelpControl;
    //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
    //     }
    //   });
    //   return originalForm;
    // }
    /**
     * @param {?} uri
     * @return {?}
     */
    DynamicControlGroupService.prototype.getFormControlsByUri = 
    // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {
    //   if (!originalForm) {
    //     originalForm = new FormGroup({});
    //   }
    //   formControls.forEach(control => {
    //     originalForm.addControl(control.labelCode, new FormControl(''));
    //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
    //       const helpControl = control as IDyanmicHelpControl;
    //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
    //     }
    //   });
    //   return originalForm;
    // }
    /**
     * @param {?} uri
     * @return {?}
     */
    function (uri) {
        return this.httpService.getData(uri);
    };
    /**
     * @param {?} formControls
     * @param {?} initialData
     * @return {?}
     */
    DynamicControlGroupService.prototype.toFormValue = /**
     * @param {?} formControls
     * @param {?} initialData
     * @return {?}
     */
    function (formControls, initialData) {
        /** @type {?} */
        var initialDataKeys = Object.keys(initialData);
        formControls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            if (!initialDataKeys.includes(control.labelCode)) {
                Object.defineProperty(initialData, control.labelCode, { value: '' });
            }
            if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
                /** @type {?} */
                var helpControl = (/** @type {?} */ (control));
                if (!initialDataKeys.includes(helpControl.control.hiddenInputName)) {
                    Object.defineProperty(initialData, helpControl.control.hiddenInputName, { value: '' });
                }
            }
        }));
        return initialData;
    };
    DynamicControlGroupService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DynamicControlGroupService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return DynamicControlGroupService;
}());
export { DynamicControlGroupService };
if (false) {
    /** @type {?} */
    DynamicControlGroupService.prototype.httpService;
    /**
     * @type {?}
     * @private
     */
    DynamicControlGroupService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb250cm9sLWdyb3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2R5bmFtaWMtY29udHJvbC1ncm91cC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9keW5hbWljLWNvbnRyb2wtZ3JvdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxFLE9BQU8sRUFBNEMsb0JBQW9CLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN6SCxPQUFPLEVBQW1DLDJCQUEyQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFHbEk7SUFLRSxvQ0FBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNwQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFrQywyQkFBMkIsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pJLENBQUM7SUFFRCxtRkFBbUY7SUFDbkYseUJBQXlCO0lBQ3pCLHdDQUF3QztJQUN4QyxNQUFNO0lBQ04sc0NBQXNDO0lBQ3RDLHVFQUF1RTtJQUN2RSx1RUFBdUU7SUFDdkUsNERBQTREO0lBQzVELDJGQUEyRjtJQUMzRixRQUFRO0lBQ1IsUUFBUTtJQUNSLHlCQUF5QjtJQUN6QixJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSix5REFBb0I7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFwQixVQUFxQixHQUFXO1FBQzlCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7O0lBRUQsZ0RBQVc7Ozs7O0lBQVgsVUFBWSxZQUF3QyxFQUFFLFdBQWdCOztZQUM5RCxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDaEQsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLE9BQU87WUFDMUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNoRCxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDdEU7WUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxLQUFLLG9CQUFvQixDQUFDLElBQUksRUFBRTs7b0JBQ3pELFdBQVcsR0FBRyxtQkFBQSxPQUFPLEVBQXVCO2dCQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFO29CQUNsRSxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUN4RjthQUNGO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOztnQkF6Q0YsVUFBVTs7OztnQkFOVSxRQUFROztJQWlEN0IsaUNBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTFDWSwwQkFBMEI7OztJQUVyQyxpREFBNkM7Ozs7O0lBRWpDLDhDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBJbmplY3RGbGFncyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Db250cm9sLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBJRHluYW1pY0Jhc2VDb250cm9sLCBJRHlhbm1pY0hlbHBDb250cm9sLCBEWU5BTUlDX0NPTlRST0xfVFlQRSB9IGZyb20gJy4uL2ludGVyZmFjZXMvZHluYW1pYy1jb250cm9sLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IER5bmFtaUNvbnRyb2xHcm91cEh0dHBJbnRlcmZhY2UsIER5bmFtaUNvbnRyb2xHcm91cEh0dHBUb2tlbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvZHluYW1pYy1jb250cm9sLWdyb3VwLWh0dHAuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRHluYW1pY0NvbnRyb2xHcm91cFNlcnZpY2Uge1xyXG5cclxuICBodHRwU2VydmljZTogRHluYW1pQ29udHJvbEdyb3VwSHR0cEludGVyZmFjZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIHRoaXMuaHR0cFNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldDxEeW5hbWlDb250cm9sR3JvdXBIdHRwSW50ZXJmYWNlPihEeW5hbWlDb250cm9sR3JvdXBIdHRwVG9rZW4sIG51bGwsIEluamVjdEZsYWdzLk9wdGlvbmFsKTtcclxuICB9XHJcblxyXG4gIC8vIHRvRm9ybUdyb3VwKGZvcm1Db250cm9sczogQXJyYXk8SUR5bmFtaWNCYXNlQ29udHJvbD4sIG9yaWdpbmFsRm9ybTogRm9ybUdyb3VwKSB7XHJcbiAgLy8gICBpZiAoIW9yaWdpbmFsRm9ybSkge1xyXG4gIC8vICAgICBvcmlnaW5hbEZvcm0gPSBuZXcgRm9ybUdyb3VwKHt9KTtcclxuICAvLyAgIH1cclxuICAvLyAgIGZvcm1Db250cm9scy5mb3JFYWNoKGNvbnRyb2wgPT4ge1xyXG4gIC8vICAgICBvcmlnaW5hbEZvcm0uYWRkQ29udHJvbChjb250cm9sLmxhYmVsQ29kZSwgbmV3IEZvcm1Db250cm9sKCcnKSk7XHJcbiAgLy8gICAgIGlmIChjb250cm9sLmNvbnRyb2wuY29udHJvbFR5cGUgPT09IERZTkFNSUNfQ09OVFJPTF9UWVBFLkhFTFApIHtcclxuICAvLyAgICAgICBjb25zdCBoZWxwQ29udHJvbCA9IGNvbnRyb2wgYXMgSUR5YW5taWNIZWxwQ29udHJvbDtcclxuICAvLyAgICAgICBvcmlnaW5hbEZvcm0uYWRkQ29udHJvbChoZWxwQ29udHJvbC5jb250cm9sLmhpZGRlbklucHV0TmFtZSwgbmV3IEZvcm1Db250cm9sKCcnKSk7XHJcbiAgLy8gICAgIH1cclxuICAvLyAgIH0pO1xyXG4gIC8vICAgcmV0dXJuIG9yaWdpbmFsRm9ybTtcclxuICAvLyB9XHJcblxyXG4gIGdldEZvcm1Db250cm9sc0J5VXJpKHVyaTogc3RyaW5nKTogT2JzZXJ2YWJsZTxJRHluYW1pY0Jhc2VDb250cm9sW10+e1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cFNlcnZpY2UuZ2V0RGF0YSh1cmkpO1xyXG4gIH1cclxuXHJcbiAgdG9Gb3JtVmFsdWUoZm9ybUNvbnRyb2xzOiBBcnJheTxJRHluYW1pY0Jhc2VDb250cm9sPiwgaW5pdGlhbERhdGE6IGFueSkge1xyXG4gICAgY29uc3QgaW5pdGlhbERhdGFLZXlzID0gT2JqZWN0LmtleXMoaW5pdGlhbERhdGEpO1xyXG4gICAgZm9ybUNvbnRyb2xzLmZvckVhY2goY29udHJvbCA9PiB7XHJcbiAgICAgIGlmICghaW5pdGlhbERhdGFLZXlzLmluY2x1ZGVzKGNvbnRyb2wubGFiZWxDb2RlKSkge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbml0aWFsRGF0YSwgY29udHJvbC5sYWJlbENvZGUsIHsgdmFsdWU6ICcnIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb250cm9sLmNvbnRyb2wuY29udHJvbFR5cGUgPT09IERZTkFNSUNfQ09OVFJPTF9UWVBFLkhFTFApIHtcclxuICAgICAgICBsZXQgaGVscENvbnRyb2wgPSBjb250cm9sIGFzIElEeWFubWljSGVscENvbnRyb2w7XHJcbiAgICAgICAgaWYgKCFpbml0aWFsRGF0YUtleXMuaW5jbHVkZXMoaGVscENvbnRyb2wuY29udHJvbC5oaWRkZW5JbnB1dE5hbWUpKSB7XHJcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaW5pdGlhbERhdGEsIGhlbHBDb250cm9sLmNvbnRyb2wuaGlkZGVuSW5wdXROYW1lLCB7IHZhbHVlOiAnJyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGluaXRpYWxEYXRhO1xyXG4gIH1cclxuXHJcbn1cclxuIl19