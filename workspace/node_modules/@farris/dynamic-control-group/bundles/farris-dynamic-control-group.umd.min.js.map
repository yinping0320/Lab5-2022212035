{"version":3,"sources":["ng://@farris/dynamic-control-group/lib/interfaces/dynamic-control.interface.ts","ng://@farris/dynamic-control-group/lib/interfaces/dynamic-control-group-http.interface.ts","ng://@farris/dynamic-control-group/lib/services/dynamic-control-group.service.ts","ng://@farris/dynamic-control-group/lib/dynamic-control-group.component.ts","ng://@farris/dynamic-control-group/lib/components/input/input.component.ts","ng://@farris/dynamic-control-group/lib/components/date/single-date.component.ts","ng://@farris/dynamic-control-group/lib/components/date/date-range.component.ts","ng://@farris/dynamic-control-group/lib/components/number/single-number.component.ts","ng://@farris/dynamic-control-group/lib/components/number/number-range.component.ts","ng://@farris/dynamic-control-group/lib/components/dropdown/base-dropdown.component.ts","ng://@farris/dynamic-control-group/lib/components/help/help.component.ts","ng://@farris/dynamic-control-group/lib/directives/dynamic-control.directive.ts","ng://@farris/dynamic-control-group/lib/dynamic-control-group.module.ts"],"names":["HELP","TEXT","DATE_RANGE","SINGLE_DATE","SINGLE_NUMBER","NUMBER_RANGE","BASE_DROPDOWN","DynamiControlGroupHttpToken","InjectionToken","DynamicControlGroupService","prototype","getFormControlsByUri","uri","this","httpService","getData","toFormValue","formControls","initialData","initialDataKeys","Object","keys","forEach","control","includes","labelCode","defineProperty","value","controlType","DYNAMIC_CONTROL_TYPE","helpControl","hiddenInputName","Injectable","Injector","injector","get","InjectFlags","Optional","DynamicControlGroupComponent","ngOnChanges","changes","className","initStyles","isGrouped","contents","controlEntries","Array","from","groupControls","entries","ngOnInit","_this","length","initFormAndControlEntries","controlGroupService","subscribe","data","form","setValue","formData","groupedControls","Map","has","groupName","push","set","styleClass","extraClassNames","concat","isEmbedded","isControlInline","ngAfterViewChecked","Component","args","selector","template","providers","ChangeDetectorRef","HostBinding","Input","cdRef","InputComponent","SingleDateComponent","format","DateRangeComponent","SingleNumberComponent","options","NumberRangeComponent","BaseDropdownComponent","HelpComponent","CommonUtils","utils","mapping","helpData","mapFields","console","log","f","val","map","h","getValue","join","split","ff","field","trim","controls","componentMapper","DynamicFormControlDirective","formGroup","addToForm","factory","resolver","resolveComponentFactory","componentRef","container","createComponent","instance","originalForm","addControl","FormControl","Directive","ComponentFactoryResolver","ViewContainerRef","DynamicControlGroupModule","NgModule","declarations","imports","CommonModule","ReactiveFormsModule","InputGroupModule","FarrisDatePickerModule","NumberSpinnerModule","ComboListModule","LookupModule","FieldGroupModule","exports","entryComponents"],"mappings":"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","sourcesContent":["export interface Validator {\r\n  name: string;\r\n  validator: any;\r\n  message: string;\r\n}\r\n\r\nexport interface IDynamicBaseControl {\r\n  labelCode: string,\r\n  name: string,\r\n  control: {\r\n    controlType: string,\r\n    readonly: boolean\r\n  },\r\n  value?: any,\r\n  className?: string,\r\n  validations?: Validator[],\r\n  groupName: string\r\n}\r\n\r\nexport interface IDynamicDateControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    format?: string,\r\n    readonly: boolean\r\n  }\r\n}\r\n\r\nexport interface IDynamicDropdownControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    idField: string,\r\n    textField: string,\r\n    multiSelect?: boolean,\r\n    data?: Array<any>\r\n    uri?: string,\r\n    readonly: boolean\r\n  }\r\n}\r\n\r\nexport interface IDyanmicNumberControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    precision?: number,\r\n    max?: number,\r\n    min?: number,\r\n    readonly: boolean\r\n  }\r\n}\r\n/**\r\n * é»è®¤çæä¸ä¸ªhidden inputï¼ç¨äºå­æ¾éè¦è¿åä½ä¸æ¾ç¤ºåºçå¼ã\r\n * mapFieldsï¼\r\n*/\r\nexport interface IDyanmicHelpControl extends IDynamicBaseControl{\r\n  control: {\r\n    controlType: string,\r\n    uri: string,\r\n    textField?: string,\r\n    valueField?: string,\r\n    idField?: string,\r\n    displayType?: string,\r\n    mapFields?: any,\r\n    singleSelect?: boolean,\r\n    title?: string,\r\n    hiddenInputName: string,\r\n    readonly: boolean\r\n  }\r\n}\r\n\r\nexport enum DYNAMIC_CONTROL_TYPE {\r\n  HELP = 'help',\r\n  TEXT = 'text',\r\n  DATE_RANGE = 'date-range',\r\n  SINGLE_DATE = 'single-date',\r\n  SINGLE_NUMBER =  'single-number',\r\n  NUMBER_RANGE = 'number-range',\r\n  BASE_DROPDOWN = 'base-dropdown'\r\n}\r\n// export type DYNAMIC_CONTROL_TYPE = 'help' | 'text' | 'date_range' | 'single-date' | 'single-number' | 'number-range' | 'base-dropdown';\r\n","import { Observable } from 'rxjs';\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IDynamicBaseControl } from './dynamic-control.interface';\r\n\r\nexport interface DynamiControlGroupHttpInterface {\r\n    /**\r\n     * æ ¹æ®APIåç¸å³åæ°è·åæ°æ®\r\n     * @param uri Rest API\r\n     * @param params æå¡å¨ç«¯æ¥æ¶åæ° key/value\r\n     */\r\n    getData(uri: string, params?: any, method?: string, options?: any): Observable<IDynamicBaseControl[]>;\r\n}\r\nexport const DynamiControlGroupHttpToken = new InjectionToken<DynamiControlGroupHttpInterface>('Dynamic control group HTTP service');","import { Injectable, Injector, InjectFlags } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { IDynamicBaseControl, IDyanmicHelpControl, DYNAMIC_CONTROL_TYPE } from '../interfaces/dynamic-control.interface';\r\nimport { DynamiControlGroupHttpInterface, DynamiControlGroupHttpToken } from '../interfaces/dynamic-control-group-http.interface';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class DynamicControlGroupService {\r\n\r\n  httpService: DynamiControlGroupHttpInterface;\r\n\r\n  constructor(private injector: Injector) {\r\n    this.httpService = this.injector.get<DynamiControlGroupHttpInterface>(DynamiControlGroupHttpToken, null, InjectFlags.Optional);\r\n  }\r\n\r\n  // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {\r\n  //   if (!originalForm) {\r\n  //     originalForm = new FormGroup({});\r\n  //   }\r\n  //   formControls.forEach(control => {\r\n  //     originalForm.addControl(control.labelCode, new FormControl(''));\r\n  //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {\r\n  //       const helpControl = control as IDyanmicHelpControl;\r\n  //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));\r\n  //     }\r\n  //   });\r\n  //   return originalForm;\r\n  // }\r\n\r\n  getFormControlsByUri(uri: string): Observable<IDynamicBaseControl[]>{\r\n    return this.httpService.getData(uri);\r\n  }\r\n\r\n  toFormValue(formControls: Array<IDynamicBaseControl>, initialData: any) {\r\n    const initialDataKeys = Object.keys(initialData);\r\n    formControls.forEach(control => {\r\n      if (!initialDataKeys.includes(control.labelCode)) {\r\n        Object.defineProperty(initialData, control.labelCode, { value: '' });\r\n      }\r\n      if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {\r\n        let helpControl = control as IDyanmicHelpControl;\r\n        if (!initialDataKeys.includes(helpControl.control.hiddenInputName)) {\r\n          Object.defineProperty(initialData, helpControl.control.hiddenInputName, { value: '' });\r\n        }\r\n      }\r\n    });\r\n    return initialData;\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, HostBinding, Output, EventEmitter, AfterViewChecked, ChangeDetectorRef, OnChanges, SimpleChanges, DoCheck } from '@angular/core';\r\nimport { IDynamicBaseControl } from './interfaces/dynamic-control.interface';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { DynamicControlGroupService } from './services/dynamic-control-group.service';\r\n\r\n@Component({\r\n    selector: 'farris-dynamic-control-group',\r\n    template: `\r\n    <ng-container *ngIf=\"!isGrouped && form\">\r\n        <ng-container *ngFor=\"let control of contents\" dynamicFormControl [data]=\"control\" [formGroup]=\"form\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"isGrouped && form\">\r\n        <ng-container *ngFor=\"let groupData of controlEntries\">\r\n            <fieldset class=\"f-section-formgroup\">\r\n                <legend class=\"f-section-formgroup-legend\" farrisCollapse [title]=\"groupData[0]\"></legend>\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                    <ng-container *ngFor=\"let entry of groupData[1]\" dynamicFormControl [data]=\"entry\" [formGroup]=\"form\"></ng-container>\r\n                </div>\r\n            </fieldset>\r\n        </ng-container>\r\n    </ng-container>\r\n  `,\r\n    providers: [\r\n        DynamicControlGroupService\r\n    ]\r\n})\r\nexport class DynamicControlGroupComponent implements OnInit, OnChanges, AfterViewChecked  {\r\n\r\n    @HostBinding('class') className: string;\r\n\r\n    @Input()\r\n    contents: Array<IDynamicBaseControl>;\r\n\r\n    @Input()\r\n    form: FormGroup = null;\r\n\r\n    @Input()\r\n    extraClassNames: string;\r\n\r\n    @Input()\r\n    isControlInline: boolean = true;\r\n\r\n    @Input()\r\n    isEmbedded: boolean = false;\r\n\r\n    @Input()\r\n    formData: any;\r\n\r\n    @Input()\r\n    uri: string;\r\n\r\n    @Input()\r\n    isGrouped: boolean;\r\n\r\n    controlEntries: Array<Array<any>>;\r\n\r\n\r\n    constructor(private controlGroupService: DynamicControlGroupService, private cdRef: ChangeDetectorRef) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.className = this.initStyles();\r\n        if(this.isGrouped && this.contents){\r\n            this.controlEntries = Array.from(this.groupControls(this.contents).entries());\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        //ä½¿ç¨æ¨¡ææ¡å¨æå è½½æ¬ç»ä»¶æ¶ï¼æ¿å°äºæ¬ç»ä»¶çå®ä¾ï¼åæ¶åå§èµå¼ï¼ä¼å¨æ­¤ç¬¬ä¸æ¬¡æ¿å°@inputåå§å¼\r\n        this.className = this.initStyles();\r\n        if(this.contents && this.contents.length){\r\n            this.initFormAndControlEntries();\r\n        }else{\r\n            this.uri && this.controlGroupService.getFormControlsByUri(this.uri).subscribe(data => {\r\n                this.contents = data;\r\n                this.initFormAndControlEntries();\r\n            });\r\n        }\r\n    }\r\n\r\n    initFormAndControlEntries(){\r\n        // this.form = this.controlGroupService.toFormGroup(this.contents, this.form);\r\n        if(this.isGrouped){\r\n            this.controlEntries = Array.from(this.groupControls(this.contents).entries());\r\n        }\r\n        this.form.setValue(this.controlGroupService.toFormValue(this.contents, this.formData));\r\n    }\r\n\r\n    groupControls(contents: Array<IDynamicBaseControl>): Map<string, Array<IDynamicBaseControl>> {\r\n        const groupedControls = new Map<string, Array<IDynamicBaseControl>>();\r\n        contents.forEach(control => {\r\n            if(groupedControls.has(control.groupName)){\r\n                groupedControls.get(control.groupName).push(control);\r\n            }else{\r\n                groupedControls.set(control.groupName, [control]);\r\n            }\r\n        });\r\n        return groupedControls;\r\n    }\r\n\r\n    initStyles(): string{\r\n        let styleClass: string;\r\n        styleClass = this.isGrouped ? \"f-form-layout\" : \"f-utils-flex-row-wrap\";\r\n        styleClass = this.extraClassNames ? styleClass.concat(` ${this.extraClassNames}`) : styleClass;\r\n        styleClass = this.isEmbedded ? styleClass : styleClass.concat(\" farris-form\");\r\n        styleClass = this.isControlInline ? styleClass.concat(\" farris-form-controls-inline\") : styleClass;\r\n        return styleClass;\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // this.cdRef.detectChanges();\r\n    }\r\n\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { IDynamicBaseControl } from \"../../interfaces/dynamic-control.interface\";\r\nimport { FormGroup } from '@angular/forms';\r\n@Component({\r\n  selector: \"dynamic-input\",\r\n  template: `\r\n      <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label class=\"col-form-label\">\r\n            <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n            <span class=\"farris-label-text\">{{control.name}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class InputComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicBaseControl;\r\n  @Input()\r\n  form: FormGroup;\r\n\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDynamicDateControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-single-date\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <farris-datepicker [returnFormat]=\"control.control.format\" [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></farris-datepicker>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class SingleDateComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicDateControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.control.control.format = this.control.control.format || 'yyyy-MM-dd';\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDynamicDateControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-date-range\",\r\n  template: `\r\n      <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label class=\"col-form-label\">\r\n            <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n            <span class=\"farris-label-text\">{{control.name}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-datepicker [dateRange]=\"true\" [returnFormat]=\"control.control.format\" [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></farris-datepicker>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class DateRangeComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicDateControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.control.control.format = this.control.control.format || 'yyyy-MM-dd';\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDyanmicNumberControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-single-number\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-number-spinner \r\n                [formControlName]=\"control.labelCode\"\r\n                [max]=\"options.max\"\r\n                [min]=\"options.min\"\r\n                [precision]=\"options.precision\"\r\n                [readonly]=\"options.readonly\"\r\n            >\r\n            </farris-number-spinner>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class SingleNumberComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDyanmicNumberControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.options = this.control.control;\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDyanmicNumberControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-number-range\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-number-range\r\n                [formControlName]=\"control.labelCode\"\r\n                [max]=\"options.max\"\r\n                [min]=\"options.min\"\r\n                [precision]=\"options.precision\"\r\n                [readonly]=\"options.readonly\"\r\n            >\r\n            </farris-number-range>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class NumberRangeComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDyanmicNumberControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor() {}\r\n  ngOnInit() {\r\n    this.options = this.control.control;\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { IDynamicBaseControl, IDynamicDropdownControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-base-dropdown\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-combo-list *ngIf=\"options.items\"\r\n                [readonly]=\"options.readonly\"\r\n                [formControlName]=\"control.labelCode\"\r\n                [idField]=\"options.idField\"\r\n                [textField]=\"options.textField\"\r\n                [multiSelect]=\"options.multiSelect\"\r\n                [data]=\"options.items\"\r\n            ></farris-combo-list>\r\n            <farris-combo-list *ngIf=\"options.uri\"\r\n                [readonly]=\"options.readonly\"\r\n                [formControlName]=\"control.labelCode\"\r\n                [idField]=\"options.idField\"\r\n                [textField]=\"options.textField\"\r\n                [multiSelect]=\"options.multiSelect\"\r\n                [uri]=\"options.uri\"\r\n            ></farris-combo-list>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class BaseDropdownComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDynamicDropdownControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor() {}\r\n  ngOnInit() {\r\n      this.options = this.control.control;\r\n      this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { trim } from 'lodash-es';\r\nimport { CommonUtils } from '@farris/ui-common';\r\nimport { IDynamicBaseControl, IDyanmicHelpControl } from \"../../interfaces/dynamic-control.interface\";\r\n@Component({\r\n  selector: \"dynamic-help\",\r\n  template: `\r\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\r\n      <div class=\"form-group farris-form-group\">\r\n        <label class=\"col-form-label\">\r\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\r\n          <span class=\"farris-label-text\">{{control.name}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-lookup-grid\r\n              [formControlName]=\"control.labelCode\"\r\n              [uri]=\"options.uri\"\r\n              [singleSelect]=\"options.singleSelect\"\r\n              [displayType]=\"options.displayType\"\r\n              [idField]=\"options.idField\"\r\n              [textField]=\"options.textField\"\r\n              [valueField]=\"options.valueField\"\r\n              [title]=\"options.dialogTitle\"\r\n              [mappingFn]=\"mapping\"\r\n              [mapFields]=\"options.mapFields\"\r\n              [readonly]=\"options.readonly\"\r\n          ></farris-lookup-grid>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class HelpComponent implements OnInit {\r\n  @HostBinding('class') className: string;\r\n  @Input()\r\n  control: IDyanmicHelpControl;\r\n  @Input()\r\n  form: FormGroup;\r\n  options: any;\r\n  constructor(private utils: CommonUtils) {}\r\n  ngOnInit() {\r\n    this.options = this.control.control;\r\n    this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';\r\n  }\r\n\r\n  /**\r\n   * @param helpData éä¸­çæ°æ®ï¼å¦ææ¯å¤éï¼æ¯æ°ç»ï¼å¦ææ¯åéï¼æ¯æ®éå¯¹è±¡\r\n   * @param mapFields\r\n   * @param bindingData å¸®å©æå¨formçvalueå¯¹è±¡\r\n  */\r\n  mapping =(helpData: any, mapFields: any) => {\r\n    console.log('helpData ', helpData);\r\n    if (mapFields) {\r\n      const helpFields = Object.keys(mapFields);\r\n      helpFields.forEach( (f: any) => {\r\n          let val = '';\r\n          if (helpData) {\r\n              if (helpData instanceof Array) {\r\n                  val = helpData.map( (h: any) => {\r\n                      return this.utils.getValue(f, h);\r\n                  }).join(',');\r\n              } else {\r\n                  val = this.utils.getValue(f, helpData);\r\n              }\r\n\r\n          }\r\n          mapFields[f].split(',').forEach( (ff: any) => {\r\n              const field = trim(ff);\r\n              // this.utils.setValue(bindingData, field, val);\r\n              this.form.controls[field].setValue(val);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EventEmitter,\r\n  Injector,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewContainerRef\r\n} from \"@angular/core\";\r\nimport { IDynamicBaseControl, DYNAMIC_CONTROL_TYPE, IDyanmicHelpControl } from \"../interfaces/dynamic-control.interface\";\r\nimport { InputComponent } from \"../components/input/input.component\";\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { SingleDateComponent } from '../components/date/single-date.component';\r\nimport { DateRangeComponent } from '../components/date/date-range.component';\r\nimport { SingleNumberComponent } from '../components/number/single-number.component';\r\nimport { NumberRangeComponent } from '../components/number/number-range.component';\r\nimport { BaseDropdownComponent } from '../components/dropdown/base-dropdown.component';\r\nimport { HelpComponent } from '../components/help/help.component';\r\n\r\nconst componentMapper = new Map();\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.HELP, HelpComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.BASE_DROPDOWN, BaseDropdownComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.DATE_RANGE, DateRangeComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.NUMBER_RANGE, NumberRangeComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_DATE, SingleDateComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_NUMBER, SingleNumberComponent);\r\ncomponentMapper.set(DYNAMIC_CONTROL_TYPE.TEXT, InputComponent);\r\n\r\n@Directive({\r\n  selector: \"[dynamicFormControl]\"\r\n})\r\nexport class DynamicFormControlDirective implements OnInit {\r\n  @Input()\r\n  data: IDynamicBaseControl;\r\n\r\n  @Input()\r\n  formGroup: FormGroup;\r\n\r\n  componentRef: ComponentRef<any>;\r\n  constructor(\r\n    private resolver: ComponentFactoryResolver,\r\n    private container: ViewContainerRef,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.formGroup = this.addToForm(this.data, this.formGroup);\r\n    const factory = this.resolver.resolveComponentFactory(\r\n      componentMapper.get(this.data.control.controlType)\r\n    );\r\n    this.componentRef = this.container.createComponent(factory);\r\n    this.componentRef.instance.form = this.formGroup;\r\n    this.componentRef.instance.control = this.data;\r\n    // const form = this.addToForm(this.data, this.formGroup);\r\n  }\r\n\r\n  addToForm(control: IDynamicBaseControl, originalForm: FormGroup) {\r\n    //originalForm å¤é¨ä¼ å¥FormGroupçå®ä¾\r\n    originalForm.addControl(control.labelCode, new FormControl(control.value));\r\n    if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {\r\n      const helpControl = control as IDyanmicHelpControl;\r\n      originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));\r\n    }\r\n    return originalForm;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { NumberSpinnerModule } from '@farris/ui-number-spinner';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { LookupModule } from '@farris/ui-lookup';\r\nimport { FieldGroupModule } from '@farris/ui-field-group';\r\n\r\nimport { DynamicControlGroupComponent } from './dynamic-control-group.component';\r\nimport { DynamicFormControlDirective } from './directives/dynamic-control.directive';\r\nimport { InputComponent } from './components/input/input.component';\r\nimport { DateRangeComponent } from './components/date/date-range.component';\r\nimport { SingleDateComponent } from './components/date/single-date.component';\r\nimport { NumberRangeComponent } from './components/number/number-range.component';\r\nimport { SingleNumberComponent } from './components/number/single-number.component'\r\nimport { BaseDropdownComponent } from './components/dropdown/base-dropdown.component';\r\nimport { HelpComponent } from './components/help/help.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DynamicFormControlDirective,\r\n    DynamicControlGroupComponent,\r\n    InputComponent,\r\n    DateRangeComponent,\r\n    SingleDateComponent,\r\n    NumberRangeComponent,\r\n    SingleNumberComponent,\r\n    BaseDropdownComponent,\r\n    HelpComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    InputGroupModule,\r\n    FarrisDatePickerModule,\r\n    NumberSpinnerModule,\r\n    ComboListModule,\r\n    LookupModule,\r\n    FieldGroupModule\r\n  ],\r\n  exports: [\r\n    DynamicFormControlDirective,\r\n    DynamicControlGroupComponent\r\n  ],\r\n  entryComponents: [\r\n    InputComponent,\r\n    DateRangeComponent,\r\n    SingleDateComponent,\r\n    NumberRangeComponent,\r\n    SingleNumberComponent,\r\n    BaseDropdownComponent,\r\n    HelpComponent\r\n  ]\r\n})\r\nexport class DynamicControlGroupModule { }\r\n"]}