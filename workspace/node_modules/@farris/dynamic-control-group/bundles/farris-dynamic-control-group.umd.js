(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@farris/ui-datepicker'), require('@farris/ui-input-group'), require('@farris/ui-number-spinner'), require('@farris/ui-combo-list'), require('@farris/ui-lookup'), require('@farris/ui-field-group'), require('@angular/forms'), require('@angular/core'), require('lodash-es'), require('@farris/ui-common')) :
    typeof define === 'function' && define.amd ? define('@farris/dynamic-control-group', ['exports', '@angular/common', '@farris/ui-datepicker', '@farris/ui-input-group', '@farris/ui-number-spinner', '@farris/ui-combo-list', '@farris/ui-lookup', '@farris/ui-field-group', '@angular/forms', '@angular/core', 'lodash-es', '@farris/ui-common'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['dynamic-control-group'] = {}),global.ng.common,global.uiDatepicker,global.uiInputGroup,global.uiNumberSpinner,global.uiComboList,global.uiLookup,global.uiFieldGroup,global.ng.forms,global.ng.core,global.lodashEs,global.uiCommon));
}(this, (function (exports,common,uiDatepicker,uiInputGroup,uiNumberSpinner,uiComboList,uiLookup,uiFieldGroup,forms,core,lodashEs,uiCommon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var DYNAMIC_CONTROL_TYPE = {
        HELP: 'help',
        TEXT: 'text',
        DATE_RANGE: 'date-range',
        SINGLE_DATE: 'single-date',
        SINGLE_NUMBER: 'single-number',
        NUMBER_RANGE: 'number-range',
        BASE_DROPDOWN: 'base-dropdown',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DynamiControlGroupHttpToken = new core.InjectionToken('Dynamic control group HTTP service');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicControlGroupService = /** @class */ (function () {
        function DynamicControlGroupService(injector) {
            this.injector = injector;
            this.httpService = this.injector.get(DynamiControlGroupHttpToken, null, core.InjectFlags.Optional);
        }
        // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {
        //   if (!originalForm) {
        //     originalForm = new FormGroup({});
        //   }
        //   formControls.forEach(control => {
        //     originalForm.addControl(control.labelCode, new FormControl(''));
        //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
        //       const helpControl = control as IDyanmicHelpControl;
        //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
        //     }
        //   });
        //   return originalForm;
        // }
        // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {
        //   if (!originalForm) {
        //     originalForm = new FormGroup({});
        //   }
        //   formControls.forEach(control => {
        //     originalForm.addControl(control.labelCode, new FormControl(''));
        //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
        //       const helpControl = control as IDyanmicHelpControl;
        //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
        //     }
        //   });
        //   return originalForm;
        // }
        /**
         * @param {?} uri
         * @return {?}
         */
        DynamicControlGroupService.prototype.getFormControlsByUri =
            // toFormGroup(formControls: Array<IDynamicBaseControl>, originalForm: FormGroup) {
            //   if (!originalForm) {
            //     originalForm = new FormGroup({});
            //   }
            //   formControls.forEach(control => {
            //     originalForm.addControl(control.labelCode, new FormControl(''));
            //     if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
            //       const helpControl = control as IDyanmicHelpControl;
            //       originalForm.addControl(helpControl.control.hiddenInputName, new FormControl(''));
            //     }
            //   });
            //   return originalForm;
            // }
            /**
             * @param {?} uri
             * @return {?}
             */
            function (uri) {
                return this.httpService.getData(uri);
            };
        /**
         * @param {?} formControls
         * @param {?} initialData
         * @return {?}
         */
        DynamicControlGroupService.prototype.toFormValue = /**
         * @param {?} formControls
         * @param {?} initialData
         * @return {?}
         */
            function (formControls, initialData) {
                /** @type {?} */
                var initialDataKeys = Object.keys(initialData);
                formControls.forEach(( /**
                 * @param {?} control
                 * @return {?}
                 */function (control) {
                    if (!initialDataKeys.includes(control.labelCode)) {
                        Object.defineProperty(initialData, control.labelCode, { value: '' });
                    }
                    if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
                        /** @type {?} */
                        var helpControl = ( /** @type {?} */(control));
                        if (!initialDataKeys.includes(helpControl.control.hiddenInputName)) {
                            Object.defineProperty(initialData, helpControl.control.hiddenInputName, { value: '' });
                        }
                    }
                }));
                return initialData;
            };
        DynamicControlGroupService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DynamicControlGroupService.ctorParameters = function () {
            return [
                { type: core.Injector }
            ];
        };
        return DynamicControlGroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicControlGroupComponent = /** @class */ (function () {
        function DynamicControlGroupComponent(controlGroupService, cdRef) {
            this.controlGroupService = controlGroupService;
            this.cdRef = cdRef;
            this.form = null;
            this.isControlInline = true;
            this.isEmbedded = false;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        DynamicControlGroupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.className = this.initStyles();
                if (this.isGrouped && this.contents) {
                    this.controlEntries = Array.from(this.groupControls(this.contents).entries());
                }
            };
        /**
         * @return {?}
         */
        DynamicControlGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                //使用模态框动态加载本组件时，拿到了本组件的实例，同时初始赋值，会在此第一次拿到@input初始值
                this.className = this.initStyles();
                if (this.contents && this.contents.length) {
                    this.initFormAndControlEntries();
                }
                else {
                    this.uri && this.controlGroupService.getFormControlsByUri(this.uri).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        _this.contents = data;
                        _this.initFormAndControlEntries();
                    }));
                }
            };
        /**
         * @return {?}
         */
        DynamicControlGroupComponent.prototype.initFormAndControlEntries = /**
         * @return {?}
         */
            function () {
                // this.form = this.controlGroupService.toFormGroup(this.contents, this.form);
                if (this.isGrouped) {
                    this.controlEntries = Array.from(this.groupControls(this.contents).entries());
                }
                this.form.setValue(this.controlGroupService.toFormValue(this.contents, this.formData));
            };
        /**
         * @param {?} contents
         * @return {?}
         */
        DynamicControlGroupComponent.prototype.groupControls = /**
         * @param {?} contents
         * @return {?}
         */
            function (contents) {
                /** @type {?} */
                var groupedControls = new Map();
                contents.forEach(( /**
                 * @param {?} control
                 * @return {?}
                 */function (control) {
                    if (groupedControls.has(control.groupName)) {
                        groupedControls.get(control.groupName).push(control);
                    }
                    else {
                        groupedControls.set(control.groupName, [control]);
                    }
                }));
                return groupedControls;
            };
        /**
         * @return {?}
         */
        DynamicControlGroupComponent.prototype.initStyles = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var styleClass;
                styleClass = this.isGrouped ? "f-form-layout" : "f-utils-flex-row-wrap";
                styleClass = this.extraClassNames ? styleClass.concat(" " + this.extraClassNames) : styleClass;
                styleClass = this.isEmbedded ? styleClass : styleClass.concat(" farris-form");
                styleClass = this.isControlInline ? styleClass.concat(" farris-form-controls-inline") : styleClass;
                return styleClass;
            };
        /**
         * @return {?}
         */
        DynamicControlGroupComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                // this.cdRef.detectChanges();
            };
        DynamicControlGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-dynamic-control-group',
                        template: "\n    <ng-container *ngIf=\"!isGrouped && form\">\n        <ng-container *ngFor=\"let control of contents\" dynamicFormControl [data]=\"control\" [formGroup]=\"form\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"isGrouped && form\">\n        <ng-container *ngFor=\"let groupData of controlEntries\">\n            <fieldset class=\"f-section-formgroup\">\n                <legend class=\"f-section-formgroup-legend\" farrisCollapse [title]=\"groupData[0]\"></legend>\n                <div class=\"f-section-formgroup-inputs\">\n                    <ng-container *ngFor=\"let entry of groupData[1]\" dynamicFormControl [data]=\"entry\" [formGroup]=\"form\"></ng-container>\n                </div>\n            </fieldset>\n        </ng-container>\n    </ng-container>\n  ",
                        providers: [
                            DynamicControlGroupService
                        ]
                    }] }
        ];
        /** @nocollapse */
        DynamicControlGroupComponent.ctorParameters = function () {
            return [
                { type: DynamicControlGroupService },
                { type: core.ChangeDetectorRef }
            ];
        };
        DynamicControlGroupComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            contents: [{ type: core.Input }],
            form: [{ type: core.Input }],
            extraClassNames: [{ type: core.Input }],
            isControlInline: [{ type: core.Input }],
            isEmbedded: [{ type: core.Input }],
            formData: [{ type: core.Input }],
            uri: [{ type: core.Input }],
            isGrouped: [{ type: core.Input }]
        };
        return DynamicControlGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputComponent = /** @class */ (function () {
        function InputComponent() {
        }
        /**
         * @return {?}
         */
        InputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
            };
        InputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-input",
                        template: "\n      <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n        <div class=\"form-group farris-form-group\">\n          <label class=\"col-form-label\">\n            <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n            <span class=\"farris-label-text\">{{control.name}}</span>\n          </label>\n          <div class=\"farris-input-wrap\">\n            <input-group [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></input-group>\n          </div>\n        </div>\n      </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        InputComponent.ctorParameters = function () { return []; };
        InputComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            control: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return InputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SingleDateComponent = /** @class */ (function () {
        function SingleDateComponent() {
        }
        /**
         * @return {?}
         */
        SingleDateComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.control.control.format = this.control.control.format || 'yyyy-MM-dd';
                this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
            };
        SingleDateComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-single-date",
                        template: "\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\"col-form-label\">\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n          <span class=\"farris-label-text\">{{control.name}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n          <farris-datepicker [returnFormat]=\"control.control.format\" [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></farris-datepicker>\n        </div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        SingleDateComponent.ctorParameters = function () { return []; };
        SingleDateComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            control: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return SingleDateComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeComponent = /** @class */ (function () {
        function DateRangeComponent() {
        }
        /**
         * @return {?}
         */
        DateRangeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.control.control.format = this.control.control.format || 'yyyy-MM-dd';
                this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
            };
        DateRangeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-date-range",
                        template: "\n      <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n        <div class=\"form-group farris-form-group\">\n          <label class=\"col-form-label\">\n            <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n            <span class=\"farris-label-text\">{{control.name}}</span>\n          </label>\n          <div class=\"farris-input-wrap\">\n            <farris-datepicker [dateRange]=\"true\" [returnFormat]=\"control.control.format\" [formControlName]=\"control.labelCode\" [readonly]=\"control.control.readonly\"></farris-datepicker>\n          </div>\n        </div>\n      </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        DateRangeComponent.ctorParameters = function () { return []; };
        DateRangeComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            control: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return DateRangeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SingleNumberComponent = /** @class */ (function () {
        function SingleNumberComponent() {
        }
        /**
         * @return {?}
         */
        SingleNumberComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.options = this.control.control;
                this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
            };
        SingleNumberComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-single-number",
                        template: "\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\"col-form-label\">\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n          <span class=\"farris-label-text\">{{control.name}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n            <farris-number-spinner \n                [formControlName]=\"control.labelCode\"\n                [max]=\"options.max\"\n                [min]=\"options.min\"\n                [precision]=\"options.precision\"\n                [readonly]=\"options.readonly\"\n            >\n            </farris-number-spinner>\n        </div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        SingleNumberComponent.ctorParameters = function () { return []; };
        SingleNumberComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            control: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return SingleNumberComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NumberRangeComponent = /** @class */ (function () {
        function NumberRangeComponent() {
        }
        /**
         * @return {?}
         */
        NumberRangeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.options = this.control.control;
                this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
            };
        NumberRangeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-number-range",
                        template: "\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\"col-form-label\">\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n          <span class=\"farris-label-text\">{{control.name}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n            <farris-number-range\n                [formControlName]=\"control.labelCode\"\n                [max]=\"options.max\"\n                [min]=\"options.min\"\n                [precision]=\"options.precision\"\n                [readonly]=\"options.readonly\"\n            >\n            </farris-number-range>\n        </div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NumberRangeComponent.ctorParameters = function () { return []; };
        NumberRangeComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            control: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return NumberRangeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BaseDropdownComponent = /** @class */ (function () {
        function BaseDropdownComponent() {
        }
        /**
         * @return {?}
         */
        BaseDropdownComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.options = this.control.control;
                this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
            };
        BaseDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-base-dropdown",
                        template: "\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\"col-form-label\">\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n          <span class=\"farris-label-text\">{{control.name}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n            <farris-combo-list *ngIf=\"options.items\"\n                [readonly]=\"options.readonly\"\n                [formControlName]=\"control.labelCode\"\n                [idField]=\"options.idField\"\n                [textField]=\"options.textField\"\n                [multiSelect]=\"options.multiSelect\"\n                [data]=\"options.items\"\n            ></farris-combo-list>\n            <farris-combo-list *ngIf=\"options.uri\"\n                [readonly]=\"options.readonly\"\n                [formControlName]=\"control.labelCode\"\n                [idField]=\"options.idField\"\n                [textField]=\"options.textField\"\n                [multiSelect]=\"options.multiSelect\"\n                [uri]=\"options.uri\"\n            ></farris-combo-list>\n        </div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        BaseDropdownComponent.ctorParameters = function () { return []; };
        BaseDropdownComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            control: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return BaseDropdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HelpComponent = /** @class */ (function () {
        function HelpComponent(utils) {
            var _this = this;
            this.utils = utils;
            /**
             * @param helpData 选中的数据，如果是多选，是数组；如果是单选，是普通对象
             * @param mapFields
             * @param bindingData 帮助所在form的value对象
             */
            this.mapping = ( /**
             * @param {?} helpData
             * @param {?} mapFields
             * @return {?}
             */function (helpData, mapFields) {
                console.log('helpData ', helpData);
                if (mapFields) {
                    /** @type {?} */
                    var helpFields = Object.keys(mapFields);
                    helpFields.forEach(( /**
                     * @param {?} f
                     * @return {?}
                     */function (f) {
                        /** @type {?} */
                        var val = '';
                        if (helpData) {
                            if (helpData instanceof Array) {
                                val = helpData.map(( /**
                                 * @param {?} h
                                 * @return {?}
                                 */function (h) {
                                    return _this.utils.getValue(f, h);
                                })).join(',');
                            }
                            else {
                                val = _this.utils.getValue(f, helpData);
                            }
                        }
                        mapFields[f].split(',').forEach(( /**
                         * @param {?} ff
                         * @return {?}
                         */function (ff) {
                            /** @type {?} */
                            var field = lodashEs.trim(ff);
                            // this.utils.setValue(bindingData, field, val);
                            _this.form.controls[field].setValue(val);
                        }));
                    }));
                }
            });
        }
        /**
         * @return {?}
         */
        HelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.options = this.control.control;
                this.className = this.control.className ? this.control.className : 'col-12 col-md-6 col-xl-3 col-el-2';
            };
        HelpComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "dynamic-help",
                        template: "\n    <div class=\"farris-group-wrap\" [formGroup]=\"form\">\n      <div class=\"form-group farris-form-group\">\n        <label class=\"col-form-label\">\n          <span *ngIf=\"0\" class=\"farris-label-info text-danger\">*</span>\n          <span class=\"farris-label-text\">{{control.name}}</span>\n        </label>\n        <div class=\"farris-input-wrap\">\n            <farris-lookup-grid\n              [formControlName]=\"control.labelCode\"\n              [uri]=\"options.uri\"\n              [singleSelect]=\"options.singleSelect\"\n              [displayType]=\"options.displayType\"\n              [idField]=\"options.idField\"\n              [textField]=\"options.textField\"\n              [valueField]=\"options.valueField\"\n              [title]=\"options.dialogTitle\"\n              [mappingFn]=\"mapping\"\n              [mapFields]=\"options.mapFields\"\n              [readonly]=\"options.readonly\"\n          ></farris-lookup-grid>\n        </div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        HelpComponent.ctorParameters = function () {
            return [
                { type: uiCommon.CommonUtils }
            ];
        };
        HelpComponent.propDecorators = {
            className: [{ type: core.HostBinding, args: ['class',] }],
            control: [{ type: core.Input }],
            form: [{ type: core.Input }]
        };
        return HelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var componentMapper = new Map();
    componentMapper.set(DYNAMIC_CONTROL_TYPE.HELP, HelpComponent);
    componentMapper.set(DYNAMIC_CONTROL_TYPE.BASE_DROPDOWN, BaseDropdownComponent);
    componentMapper.set(DYNAMIC_CONTROL_TYPE.DATE_RANGE, DateRangeComponent);
    componentMapper.set(DYNAMIC_CONTROL_TYPE.NUMBER_RANGE, NumberRangeComponent);
    componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_DATE, SingleDateComponent);
    componentMapper.set(DYNAMIC_CONTROL_TYPE.SINGLE_NUMBER, SingleNumberComponent);
    componentMapper.set(DYNAMIC_CONTROL_TYPE.TEXT, InputComponent);
    var DynamicFormControlDirective = /** @class */ (function () {
        function DynamicFormControlDirective(resolver, container, injector) {
            this.resolver = resolver;
            this.container = container;
            this.injector = injector;
        }
        /**
         * @return {?}
         */
        DynamicFormControlDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.formGroup = this.addToForm(this.data, this.formGroup);
                /** @type {?} */
                var factory = this.resolver.resolveComponentFactory(componentMapper.get(this.data.control.controlType));
                this.componentRef = this.container.createComponent(factory);
                this.componentRef.instance.form = this.formGroup;
                this.componentRef.instance.control = this.data;
                // const form = this.addToForm(this.data, this.formGroup);
            };
        /**
         * @param {?} control
         * @param {?} originalForm
         * @return {?}
         */
        DynamicFormControlDirective.prototype.addToForm = /**
         * @param {?} control
         * @param {?} originalForm
         * @return {?}
         */
            function (control, originalForm) {
                //originalForm 外部传入FormGroup的实例
                originalForm.addControl(control.labelCode, new forms.FormControl(control.value));
                if (control.control.controlType === DYNAMIC_CONTROL_TYPE.HELP) {
                    /** @type {?} */
                    var helpControl = ( /** @type {?} */(control));
                    originalForm.addControl(helpControl.control.hiddenInputName, new forms.FormControl(''));
                }
                return originalForm;
            };
        DynamicFormControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[dynamicFormControl]"
                    },] }
        ];
        /** @nocollapse */
        DynamicFormControlDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: core.ViewContainerRef },
                { type: core.Injector }
            ];
        };
        DynamicFormControlDirective.propDecorators = {
            data: [{ type: core.Input }],
            formGroup: [{ type: core.Input }]
        };
        return DynamicFormControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicControlGroupModule = /** @class */ (function () {
        function DynamicControlGroupModule() {
        }
        DynamicControlGroupModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DynamicFormControlDirective,
                            DynamicControlGroupComponent,
                            InputComponent,
                            DateRangeComponent,
                            SingleDateComponent,
                            NumberRangeComponent,
                            SingleNumberComponent,
                            BaseDropdownComponent,
                            HelpComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            uiInputGroup.InputGroupModule,
                            uiDatepicker.FarrisDatePickerModule,
                            uiNumberSpinner.NumberSpinnerModule,
                            uiComboList.ComboListModule,
                            uiLookup.LookupModule,
                            uiFieldGroup.FieldGroupModule
                        ],
                        exports: [
                            DynamicFormControlDirective,
                            DynamicControlGroupComponent
                        ],
                        entryComponents: [
                            InputComponent,
                            DateRangeComponent,
                            SingleDateComponent,
                            NumberRangeComponent,
                            SingleNumberComponent,
                            BaseDropdownComponent,
                            HelpComponent
                        ]
                    },] }
        ];
        return DynamicControlGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.DynamicControlGroupService = DynamicControlGroupService;
    exports.DynamicControlGroupComponent = DynamicControlGroupComponent;
    exports.DynamicControlGroupModule = DynamicControlGroupModule;
    exports.DYNAMIC_CONTROL_TYPE = DYNAMIC_CONTROL_TYPE;
    exports.DynamiControlGroupHttpToken = DynamiControlGroupHttpToken;
    exports.ɵc = DateRangeComponent;
    exports.ɵd = SingleDateComponent;
    exports.ɵg = BaseDropdownComponent;
    exports.ɵh = HelpComponent;
    exports.ɵb = InputComponent;
    exports.ɵe = NumberRangeComponent;
    exports.ɵf = SingleNumberComponent;
    exports.ɵa = DynamicFormControlDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-dynamic-control-group.umd.js.map