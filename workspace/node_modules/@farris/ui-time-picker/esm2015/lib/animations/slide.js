/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { AnimationCurves, AnimationDuration } from './animation-consts';
/** @type {?} */
const ANIMATION_TRANSITION_IN = `${AnimationDuration.BASE} ${AnimationCurves.EASE_OUT_QUINT}`;
/** @type {?} */
const ANIMATION_TRANSITION_OUT = `${AnimationDuration.BASE} ${AnimationCurves.EASE_IN_QUINT}`;
/** @type {?} */
export const slideMotion = trigger('slideMotion', [
    state('bottom', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 0%'
    })),
    state('top', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 100%'
    })),
    transition('void => bottom', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('bottom => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }))
    ]),
    transition('void => top', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('top => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }))
    ])
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRpbWUtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvc2xpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUVWLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztNQUVsRSx1QkFBdUIsR0FBRyxHQUFHLGlCQUFpQixDQUFDLElBQUksSUFBSSxlQUFlLENBQUMsY0FBYyxFQUFFOztNQUN2Rix3QkFBd0IsR0FBRyxHQUFHLGlCQUFpQixDQUFDLElBQUksSUFBSSxlQUFlLENBQUMsYUFBYSxFQUFFOztBQUU3RixNQUFNLE9BQU8sV0FBVyxHQUE2QixPQUFPLENBQUMsYUFBYSxFQUFFO0lBQ3hFLEtBQUssQ0FDRCxRQUFRLEVBQ1IsS0FBSyxDQUFDO1FBQ0YsT0FBTyxFQUFFLENBQUM7UUFDVixTQUFTLEVBQUUsV0FBVztRQUN0QixlQUFlLEVBQUUsT0FBTztLQUMzQixDQUFDLENBQ0w7SUFDRCxLQUFLLENBQ0QsS0FBSyxFQUNMLEtBQUssQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDO1FBQ1YsU0FBUyxFQUFFLFdBQVc7UUFDdEIsZUFBZSxFQUFFLFNBQVM7S0FDN0IsQ0FBQyxDQUNMO0lBQ0QsVUFBVSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLEtBQUssQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLGFBQWE7WUFDeEIsZUFBZSxFQUFFLE9BQU87U0FDM0IsQ0FBQztRQUNGLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztLQUNuQyxDQUFDO0lBQ0YsVUFBVSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLE9BQU8sQ0FDSCx3QkFBd0IsRUFDeEIsS0FBSyxDQUFDO1lBQ0YsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsYUFBYTtZQUN4QixlQUFlLEVBQUUsT0FBTztTQUMzQixDQUFDLENBQ0w7S0FDSixDQUFDO0lBQ0YsVUFBVSxDQUFDLGFBQWEsRUFBRTtRQUN0QixLQUFLLENBQUM7WUFDRixPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxhQUFhO1lBQ3hCLGVBQWUsRUFBRSxTQUFTO1NBQzdCLENBQUM7UUFDRixPQUFPLENBQUMsdUJBQXVCLENBQUM7S0FDbkMsQ0FBQztJQUNGLFVBQVUsQ0FBQyxhQUFhLEVBQUU7UUFDdEIsT0FBTyxDQUNILHdCQUF3QixFQUN4QixLQUFLLENBQUM7WUFDRixPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxhQUFhO1lBQ3hCLGVBQWUsRUFBRSxTQUFTO1NBQzdCLENBQUMsQ0FDTDtLQUNKLENBQUM7Q0FDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIGFuaW1hdGUsXHJcbiAgICBzdGF0ZSxcclxuICAgIHN0eWxlLFxyXG4gICAgdHJhbnNpdGlvbixcclxuICAgIHRyaWdnZXIsXHJcbiAgICBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGFcclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgQW5pbWF0aW9uQ3VydmVzLCBBbmltYXRpb25EdXJhdGlvbiB9IGZyb20gJy4vYW5pbWF0aW9uLWNvbnN0cyc7XHJcblxyXG5jb25zdCBBTklNQVRJT05fVFJBTlNJVElPTl9JTiA9IGAke0FuaW1hdGlvbkR1cmF0aW9uLkJBU0V9ICR7QW5pbWF0aW9uQ3VydmVzLkVBU0VfT1VUX1FVSU5UfWA7XHJcbmNvbnN0IEFOSU1BVElPTl9UUkFOU0lUSU9OX09VVCA9IGAke0FuaW1hdGlvbkR1cmF0aW9uLkJBU0V9ICR7QW5pbWF0aW9uQ3VydmVzLkVBU0VfSU5fUVVJTlR9YDtcclxuXHJcbmV4cG9ydCBjb25zdCBzbGlkZU1vdGlvbjogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhID0gdHJpZ2dlcignc2xpZGVNb3Rpb24nLCBbXHJcbiAgICBzdGF0ZShcclxuICAgICAgICAnYm90dG9tJyxcclxuICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgxKScsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xyXG4gICAgICAgIH0pXHJcbiAgICApLFxyXG4gICAgc3RhdGUoXHJcbiAgICAgICAgJ3RvcCcsXHJcbiAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVkoMSknLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJ1xyXG4gICAgICAgIH0pXHJcbiAgICApLFxyXG4gICAgdHJhbnNpdGlvbigndm9pZCA9PiBib3R0b20nLCBbXHJcbiAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVkoMC44KScsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGFuaW1hdGUoQU5JTUFUSU9OX1RSQU5TSVRJT05fSU4pXHJcbiAgICBdKSxcclxuICAgIHRyYW5zaXRpb24oJ2JvdHRvbSA9PiB2b2lkJywgW1xyXG4gICAgICAgIGFuaW1hdGUoXHJcbiAgICAgICAgICAgIEFOSU1BVElPTl9UUkFOU0lUSU9OX09VVCxcclxuICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgwLjgpJyxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgIF0pLFxyXG4gICAgdHJhbnNpdGlvbigndm9pZCA9PiB0b3AnLCBbXHJcbiAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVkoMC44KScsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgYW5pbWF0ZShBTklNQVRJT05fVFJBTlNJVElPTl9JTilcclxuICAgIF0pLFxyXG4gICAgdHJhbnNpdGlvbigndG9wID0+IHZvaWQnLCBbXHJcbiAgICAgICAgYW5pbWF0ZShcclxuICAgICAgICAgICAgQU5JTUFUSU9OX1RSQU5TSVRJT05fT1VULFxyXG4gICAgICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVZKDAuOCknLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJSdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICBdKVxyXG5dKTtcclxuXHJcbi8vIGV4cG9ydCBjb25zdCBzbGlkZUFsZXJ0TW90aW9uOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEgPSB0cmlnZ2VyKFxyXG4vLyAgICAgJ3NsaWRlQWxlcnRNb3Rpb24nLFxyXG4vLyAgICAgW1xyXG4vLyAgICAgICAgIHRyYW5zaXRpb24oJzpsZWF2ZScsIFtcclxuLy8gICAgICAgICAgICAgc3R5bGUoe1xyXG4vLyAgICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuLy8gICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgxKScsXHJcbi8vICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJSdcclxuLy8gICAgICAgICAgICAgfSksXHJcbi8vICAgICAgICAgICAgIGFuaW1hdGUoXHJcbi8vICAgICAgICAgICAgICAgICBgJHtBbmltYXRpb25EdXJhdGlvbi5TTE9XfSAke0FuaW1hdGlvbkN1cnZlcy5FQVNFX0lOX09VVF9DSVJDfWAsXHJcbi8vICAgICAgICAgICAgICAgICBzdHlsZSh7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcclxuLy8gICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVkoMCknLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xyXG4vLyAgICAgICAgICAgICAgICAgfSlcclxuLy8gICAgICAgICAgICAgKVxyXG4vLyAgICAgICAgIF0pXHJcbi8vICAgICBdXHJcbi8vICk7XHJcbiJdfQ==