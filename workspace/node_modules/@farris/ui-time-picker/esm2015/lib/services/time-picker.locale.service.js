/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-locale";
export class TimePickerLocaleService {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.localeConfig = {
            'zh-CHS': {
                placeholder: '请选择时间',
                time: {
                    hour: '时', minute: '分', seconds: '秒'
                }
            },
            'en': {
                placeholder: 'Please select a time',
                time: {
                    hour: 'h', minute: 'min', seconds: 's'
                }
            },
            'zh-CHT': {
                placeholder: '請選擇時間',
                time: {
                    hour: '時', minute: '分', seconds: '秒'
                }
            }
        };
    }
    /**
     * @return {?}
     */
    getLocaleConfig() {
        /** @type {?} */
        const locale = this.localeService.localeId;
        if (locale && this.localeConfig[locale]) {
            return this.localeConfig[locale];
        }
        else {
            return this.localeConfig['zh-CHS'];
        }
    }
}
TimePickerLocaleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TimePickerLocaleService.ctorParameters = () => [
    { type: LocaleService }
];
/** @nocollapse */ TimePickerLocaleService.ngInjectableDef = i0.defineInjectable({ factory: function TimePickerLocaleService_Factory() { return new TimePickerLocaleService(i0.inject(i1.LocaleService)); }, token: TimePickerLocaleService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimePickerLocaleService.prototype.localeConfig;
    /**
     * @type {?}
     * @private
     */
    TimePickerLocaleService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXIubG9jYWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRpbWUtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RpbWUtcGlja2VyLmxvY2FsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBS2xELE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFxQmhDLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBcEJ4QyxpQkFBWSxHQUFHO1lBQ25CLFFBQVEsRUFBRztnQkFDUCxXQUFXLEVBQUUsT0FBTztnQkFDcEIsSUFBSSxFQUFFO29CQUNGLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRztpQkFDdkM7YUFDSjtZQUNELElBQUksRUFBRztnQkFDSCxXQUFXLEVBQUUsc0JBQXNCO2dCQUNuQyxJQUFJLEVBQUU7b0JBQ0YsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHO2lCQUN6QzthQUNKO1lBQ0QsUUFBUSxFQUFFO2dCQUNOLFdBQVcsRUFBRSxPQUFPO2dCQUNwQixJQUFJLEVBQUU7b0JBQ0YsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHO2lCQUN2QzthQUNKO1NBQ0osQ0FBQztJQUNpRCxDQUFDOzs7O0lBQzdDLGVBQWU7O2NBQ1osTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUTtRQUMxQyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQzthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQzs7O1lBaENKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQUpRLGFBQWE7Ozs7Ozs7O0lBTWxCLCtDQW1CRTs7Ozs7SUFDVSxnREFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRpbWVQaWNrZXJMb2NhbGVTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgbG9jYWxlQ29uZmlnID0ge1xyXG4gICAgICAgICd6aC1DSFMnIDoge1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+ivt+mAieaLqeaXtumXtCcsXHJcbiAgICAgICAgICAgIHRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhvdXI6ICfml7YnLCBtaW51dGU6ICfliIYnLCBzZWNvbmRzOiAn56eSJyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2VuJyA6IHtcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdQbGVhc2Ugc2VsZWN0IGEgdGltZScsXHJcbiAgICAgICAgICAgIHRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhvdXI6ICdoJywgbWludXRlOiAnbWluJywgc2Vjb25kczogJ3MnIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAnemgtQ0hUJzoge1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+iri+mBuOaTh+aZgumWkycsXHJcbiAgICAgICAgICAgIHRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhvdXI6ICfmmYInLCBtaW51dGU6ICfliIYnLCBzZWNvbmRzOiAn56eSJyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2UpIHt9XHJcbiAgICBwdWJsaWMgZ2V0TG9jYWxlQ29uZmlnKCkge1xyXG4gICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMubG9jYWxlU2VydmljZS5sb2NhbGVJZDtcclxuICAgICAgICBpZiAobG9jYWxlICYmIHRoaXMubG9jYWxlQ29uZmlnW2xvY2FsZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlQ29uZmlnW2xvY2FsZV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlQ29uZmlnWyd6aC1DSFMnXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19