/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { format as fnsFormat, parse as fnsParse } from 'date-fns';
/**
 * @param {?} value
 * @return {?}
 */
export function toBoolean(value) {
    return !!value;
}
/**
 * @param {?} value
 * @param {?=} format
 * @return {?}
 */
export function convertToDate(value, format = 'hh:mm:ss') {
    if (!value || !format) {
        return;
    }
    // let hours = '0';
    // let minutes = '0';
    // let seconds = '0';
    // const formatSArr = format.split(' ')[0];
    // const formatEArr = format.split(' ')[1];
    // const formatArr = formatSArr.split(':');
    // const textArr = value.split(' ')[0].split(':');
    // // tslint:disable-next-line:variable-name
    // const AMOrPM = value.split(' ')[1];
    // formatArr.forEach((item: string, index: number) => {
    //     item = item.toUpperCase();
    //     if (item === 'H' || item === 'HH') {
    //         hours = textArr[index];
    //     } else if (item === 'M' || item === 'MM') {
    //         minutes = textArr[index];
    //     } else if (item === 'S' || item === 'SS') {
    //         seconds = textArr[index];
    //     } else if (item === 'A') {
    //     }
    // });
    // if (formatEArr && formatEArr.toUpperCase() === 'A') {
    //     if (AMOrPM === 'PM') {
    //         hours = Number(hours) + 12 + '';
    //     }
    // }
    // return new Date(
    //     1970,
    //     0,
    //     1,
    //     Number(hours),
    //     Number(minutes),
    //     Number(seconds)
    // );
    if (format.indexOf('ss') === -1 && value.split(':').length === 3) {
        format = format + ':ss';
    }
    return fnsParse(value, format, new Date());
}
/**
 * @param {?} date
 * @param {?=} format
 * @param {?=} selected12Hours
 * @return {?}
 */
export function convertToStr(date, format = 'hh:mm:ss', selected12Hours = 'AM') {
    if (!date || isNaN(date.getTime())) {
        return '';
    }
    // let _hours = date.getHours();
    // selected12Hours = selected12Hours ? selected12Hours : 'AM';
    // if (selected12Hours === 'PM') {
    //     _hours = _hours > 12 ? _hours - 12 : _hours;
    // }
    // const hours = addZero(_hours);
    // const minutes = addZero(date.getMinutes());
    // const seconds = addZero(date.getSeconds());
    // if (format.indexOf('a') >= 0 || format.indexOf('A') >= 0) {
    //     format = format.replace(/a/i, selected12Hours);
    // }
    // if (format.indexOf('hh') >= 0 || format.indexOf('HH') >= 0) {
    //     format = format.replace(/hh/i, hours);
    // } else if (format.indexOf('h') >= 0 || format.indexOf('H') >= 0) {
    //     format = format.replace(/h/i, hours);
    // }
    // if (format.indexOf('mm') >= 0 || format.indexOf('MM') >= 0) {
    //     format = format.replace(/mm/i, minutes);
    // } else if (format.indexOf('m') >= 0 || format.indexOf('M') >= 0) {
    //     format = format.replace(/m/i, minutes);
    // }
    // if (format.indexOf('ss') >= 0 || format.indexOf('SS') >= 0) {
    //     format = format.replace(/ss/i, seconds);
    // } else if (format.indexOf('s') >= 0 || format.indexOf('S') >= 0) {
    //     format = format.replace(/s/i, seconds);
    // }
    // return format;
    return fnsFormat(date, format);
}
/**
 * @param {?} val
 * @return {?}
 */
export function addZero(val) {
    val = String(val);
    if (val.length === 1) {
        return '0' + val;
    }
    return val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdGltZS1waWNrZXIvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvY29udmVydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxTQUFTLEVBQUUsS0FBSyxJQUFJLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFFbEUsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUF1QjtJQUM3QyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDbkIsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsVUFBVTtJQUNwRSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ25CLE9BQU87S0FDVjtJQUNELG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLDJDQUEyQztJQUMzQywyQ0FBMkM7SUFDM0MsMkNBQTJDO0lBQzNDLGtEQUFrRDtJQUNsRCw0Q0FBNEM7SUFDNUMsc0NBQXNDO0lBQ3RDLHVEQUF1RDtJQUN2RCxpQ0FBaUM7SUFDakMsMkNBQTJDO0lBQzNDLGtDQUFrQztJQUNsQyxrREFBa0Q7SUFDbEQsb0NBQW9DO0lBQ3BDLGtEQUFrRDtJQUNsRCxvQ0FBb0M7SUFDcEMsaUNBQWlDO0lBQ2pDLFFBQVE7SUFDUixNQUFNO0lBQ04sd0RBQXdEO0lBQ3hELDZCQUE2QjtJQUM3QiwyQ0FBMkM7SUFDM0MsUUFBUTtJQUNSLElBQUk7SUFDSixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLFNBQVM7SUFDVCxTQUFTO0lBQ1QscUJBQXFCO0lBQ3JCLHVCQUF1QjtJQUN2QixzQkFBc0I7SUFDdEIsS0FBSztJQUVMLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDOUQsTUFBTSxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUM7S0FDM0I7SUFFRCxPQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FDeEIsSUFBVSxFQUNWLFNBQWlCLFVBQVUsRUFDM0IsZUFBZSxHQUFHLElBQUk7SUFFdEIsSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7UUFDaEMsT0FBTyxFQUFFLENBQUM7S0FDYjtJQUNELGdDQUFnQztJQUNoQyw4REFBOEQ7SUFDOUQsa0NBQWtDO0lBQ2xDLG1EQUFtRDtJQUNuRCxJQUFJO0lBQ0osaUNBQWlDO0lBQ2pDLDhDQUE4QztJQUM5Qyw4Q0FBOEM7SUFDOUMsOERBQThEO0lBQzlELHNEQUFzRDtJQUN0RCxJQUFJO0lBQ0osZ0VBQWdFO0lBQ2hFLDZDQUE2QztJQUM3QyxxRUFBcUU7SUFDckUsNENBQTRDO0lBQzVDLElBQUk7SUFDSixnRUFBZ0U7SUFDaEUsK0NBQStDO0lBQy9DLHFFQUFxRTtJQUNyRSw4Q0FBOEM7SUFDOUMsSUFBSTtJQUNKLGdFQUFnRTtJQUNoRSwrQ0FBK0M7SUFDL0MscUVBQXFFO0lBQ3JFLDhDQUE4QztJQUM5QyxJQUFJO0lBQ0osaUJBQWlCO0lBQ2pCLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNuQyxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsR0FBUTtJQUM1QixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDbEIsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQ3BCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9ybWF0IGFzIGZuc0Zvcm1hdCwgcGFyc2UgYXMgZm5zUGFyc2UgfSBmcm9tICdkYXRlLWZucyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9Cb29sZWFuKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISF2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb0RhdGUodmFsdWU6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcgPSAnaGg6bW06c3MnKTogRGF0ZSB7XHJcbiAgICBpZiAoIXZhbHVlIHx8ICFmb3JtYXQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBsZXQgaG91cnMgPSAnMCc7XHJcbiAgICAvLyBsZXQgbWludXRlcyA9ICcwJztcclxuICAgIC8vIGxldCBzZWNvbmRzID0gJzAnO1xyXG4gICAgLy8gY29uc3QgZm9ybWF0U0FyciA9IGZvcm1hdC5zcGxpdCgnICcpWzBdO1xyXG4gICAgLy8gY29uc3QgZm9ybWF0RUFyciA9IGZvcm1hdC5zcGxpdCgnICcpWzFdO1xyXG4gICAgLy8gY29uc3QgZm9ybWF0QXJyID0gZm9ybWF0U0Fyci5zcGxpdCgnOicpO1xyXG4gICAgLy8gY29uc3QgdGV4dEFyciA9IHZhbHVlLnNwbGl0KCcgJylbMF0uc3BsaXQoJzonKTtcclxuICAgIC8vIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXHJcbiAgICAvLyBjb25zdCBBTU9yUE0gPSB2YWx1ZS5zcGxpdCgnICcpWzFdO1xyXG4gICAgLy8gZm9ybWF0QXJyLmZvckVhY2goKGl0ZW06IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgLy8gICAgIGl0ZW0gPSBpdGVtLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAvLyAgICAgaWYgKGl0ZW0gPT09ICdIJyB8fCBpdGVtID09PSAnSEgnKSB7XHJcbiAgICAvLyAgICAgICAgIGhvdXJzID0gdGV4dEFycltpbmRleF07XHJcbiAgICAvLyAgICAgfSBlbHNlIGlmIChpdGVtID09PSAnTScgfHwgaXRlbSA9PT0gJ01NJykge1xyXG4gICAgLy8gICAgICAgICBtaW51dGVzID0gdGV4dEFycltpbmRleF07XHJcbiAgICAvLyAgICAgfSBlbHNlIGlmIChpdGVtID09PSAnUycgfHwgaXRlbSA9PT0gJ1NTJykge1xyXG4gICAgLy8gICAgICAgICBzZWNvbmRzID0gdGV4dEFycltpbmRleF07XHJcbiAgICAvLyAgICAgfSBlbHNlIGlmIChpdGVtID09PSAnQScpIHtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9KTtcclxuICAgIC8vIGlmIChmb3JtYXRFQXJyICYmIGZvcm1hdEVBcnIudG9VcHBlckNhc2UoKSA9PT0gJ0EnKSB7XHJcbiAgICAvLyAgICAgaWYgKEFNT3JQTSA9PT0gJ1BNJykge1xyXG4gICAgLy8gICAgICAgICBob3VycyA9IE51bWJlcihob3VycykgKyAxMiArICcnO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuICAgIC8vIHJldHVybiBuZXcgRGF0ZShcclxuICAgIC8vICAgICAxOTcwLFxyXG4gICAgLy8gICAgIDAsXHJcbiAgICAvLyAgICAgMSxcclxuICAgIC8vICAgICBOdW1iZXIoaG91cnMpLFxyXG4gICAgLy8gICAgIE51bWJlcihtaW51dGVzKSxcclxuICAgIC8vICAgICBOdW1iZXIoc2Vjb25kcylcclxuICAgIC8vICk7XHJcblxyXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdzcycpID09PSAtMSAmJiB2YWx1ZS5zcGxpdCgnOicpLmxlbmd0aCA9PT0gMykge1xyXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCArICc6c3MnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmbnNQYXJzZSh2YWx1ZSwgZm9ybWF0LCBuZXcgRGF0ZSgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1N0cihcclxuICAgIGRhdGU6IERhdGUsXHJcbiAgICBmb3JtYXQ6IHN0cmluZyA9ICdoaDptbTpzcycsXHJcbiAgICBzZWxlY3RlZDEySG91cnMgPSAnQU0nXHJcbikge1xyXG4gICAgaWYgKCFkYXRlIHx8IGlzTmFOKGRhdGUuZ2V0VGltZSgpKSkge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIC8vIGxldCBfaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XHJcbiAgICAvLyBzZWxlY3RlZDEySG91cnMgPSBzZWxlY3RlZDEySG91cnMgPyBzZWxlY3RlZDEySG91cnMgOiAnQU0nO1xyXG4gICAgLy8gaWYgKHNlbGVjdGVkMTJIb3VycyA9PT0gJ1BNJykge1xyXG4gICAgLy8gICAgIF9ob3VycyA9IF9ob3VycyA+IDEyID8gX2hvdXJzIC0gMTIgOiBfaG91cnM7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBjb25zdCBob3VycyA9IGFkZFplcm8oX2hvdXJzKTtcclxuICAgIC8vIGNvbnN0IG1pbnV0ZXMgPSBhZGRaZXJvKGRhdGUuZ2V0TWludXRlcygpKTtcclxuICAgIC8vIGNvbnN0IHNlY29uZHMgPSBhZGRaZXJvKGRhdGUuZ2V0U2Vjb25kcygpKTtcclxuICAgIC8vIGlmIChmb3JtYXQuaW5kZXhPZignYScpID49IDAgfHwgZm9ybWF0LmluZGV4T2YoJ0EnKSA+PSAwKSB7XHJcbiAgICAvLyAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL2EvaSwgc2VsZWN0ZWQxMkhvdXJzKTtcclxuICAgIC8vIH1cclxuICAgIC8vIGlmIChmb3JtYXQuaW5kZXhPZignaGgnKSA+PSAwIHx8IGZvcm1hdC5pbmRleE9mKCdISCcpID49IDApIHtcclxuICAgIC8vICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvaGgvaSwgaG91cnMpO1xyXG4gICAgLy8gfSBlbHNlIGlmIChmb3JtYXQuaW5kZXhPZignaCcpID49IDAgfHwgZm9ybWF0LmluZGV4T2YoJ0gnKSA+PSAwKSB7XHJcbiAgICAvLyAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL2gvaSwgaG91cnMpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gaWYgKGZvcm1hdC5pbmRleE9mKCdtbScpID49IDAgfHwgZm9ybWF0LmluZGV4T2YoJ01NJykgPj0gMCkge1xyXG4gICAgLy8gICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9tbS9pLCBtaW51dGVzKTtcclxuICAgIC8vIH0gZWxzZSBpZiAoZm9ybWF0LmluZGV4T2YoJ20nKSA+PSAwIHx8IGZvcm1hdC5pbmRleE9mKCdNJykgPj0gMCkge1xyXG4gICAgLy8gICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9tL2ksIG1pbnV0ZXMpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gaWYgKGZvcm1hdC5pbmRleE9mKCdzcycpID49IDAgfHwgZm9ybWF0LmluZGV4T2YoJ1NTJykgPj0gMCkge1xyXG4gICAgLy8gICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9zcy9pLCBzZWNvbmRzKTtcclxuICAgIC8vIH0gZWxzZSBpZiAoZm9ybWF0LmluZGV4T2YoJ3MnKSA+PSAwIHx8IGZvcm1hdC5pbmRleE9mKCdTJykgPj0gMCkge1xyXG4gICAgLy8gICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9zL2ksIHNlY29uZHMpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gcmV0dXJuIGZvcm1hdDtcclxuICAgIHJldHVybiBmbnNGb3JtYXQoZGF0ZSwgZm9ybWF0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFplcm8odmFsOiBhbnkpIHtcclxuICAgIHZhbCA9IFN0cmluZyh2YWwpO1xyXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICByZXR1cm4gJzAnICsgdmFsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbDtcclxufVxyXG4iXX0=