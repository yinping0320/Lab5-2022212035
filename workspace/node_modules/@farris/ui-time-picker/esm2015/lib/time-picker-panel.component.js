/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, TemplateRef, ViewChild, ViewEncapsulation, Output, EventEmitter, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { UpdateHostClassService as UpdateCls } from './services/update-host-class.service';
import { isNotNil } from './utils/check';
import { reqAnimFrame } from '@farris/ui-common';
import { TimeValueAccessorDirective } from './time-value-accessor.directive';
import { TimeHolder } from './time-holder';
import { convertToDate, convertToStr } from './utils/convert';
/**
 * @param {?} length
 * @param {?=} step
 * @param {?=} start
 * @return {?}
 */
function makeRange(length, step = 1, start = 0) {
    step = Math.ceil(step);
    return new Array(Math.ceil(length / step))
        .fill(0)
        .map((/**
     * @param {?} _
     * @param {?} i
     * @return {?}
     */
    (_, i) => (i + start) * step));
}
export class TimePickerPanelComponent {
    /**
     * @param {?} element
     * @param {?} updateCls
     * @param {?} cdr
     */
    constructor(element, updateCls, cdr) {
        this.element = element;
        this.updateCls = updateCls;
        this.cdr = cdr;
        this._hourStep = 1;
        this._minuteStep = 1;
        this._secondStep = 1;
        this.unsubscribe$ = new Subject();
        this._format = 'HH:mm:ss';
        this._defaultOpenValue = new Date();
        this._opened = false;
        this._allowEmpty = true;
        this._value = '';
        this.prefixCls = 'time-picker-panel';
        this.time = new TimeHolder();
        this.hourEnabled = true;
        this.minuteEnabled = true;
        this.secondEnabled = true;
        this.enabledColumns = 3;
        this.inDatePicker = false; // If inside a date-picker, more diff works need to be done
        this.hideDisabledOptions = false;
        /**
         * 当value 为空时选中当前时间，默认为 true
         */
        this.selectCurrentTimeWhenNull = true;
        this.showHeader = false;
        this.panelWidth = 0;
        this.valueChange = new EventEmitter();
        this._use12Hours = false;
        this.timePanelTitle = null;
        this.trackByItems = (/**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        (index, item) => {
            return index;
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set use12Hours(value) {
        this._use12Hours = !!value;
        if (!this._use12Hours) {
            this.format = this.format ? (this.format + '').replace(/h/g, 'H') : '';
        }
        else {
            this.format = this.format ? (this.format + '').replace(/H/g, 'h') : '';
        }
    }
    /**
     * @return {?}
     */
    get use12Hours() {
        return this._use12Hours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowEmpty(value) {
        if (isNotNil(value)) {
            this._allowEmpty = value;
        }
    }
    /**
     * @return {?}
     */
    get allowEmpty() {
        return this._allowEmpty;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set opened(value) {
        this._opened = value;
        if (this.opened) {
            this.initPosition();
            this.selectInputRange();
        }
    }
    /**
     * @return {?}
     */
    get opened() {
        return this._opened;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultOpenValue(value) {
        if (isNotNil(value)) {
            this._defaultOpenValue = value;
            this.time.setDefaultOpenValue(this.defaultOpenValue);
        }
    }
    /**
     * @return {?}
     */
    get defaultOpenValue() {
        return this._defaultOpenValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabledHours(value) {
        this._disabledHours = value;
        if (this._disabledHours) {
            this.buildHours();
        }
    }
    /**
     * @return {?}
     */
    get disabledHours() {
        return this._disabledHours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabledMinutes(value) {
        if (isNotNil(value)) {
            this._disabledMinutes = value;
            this.buildMinutes();
        }
    }
    /**
     * @return {?}
     */
    get disabledMinutes() {
        return this._disabledMinutes;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabledSeconds(value) {
        if (isNotNil(value)) {
            this._disabledSeconds = value;
            this.buildSeconds();
        }
    }
    /**
     * @return {?}
     */
    get disabledSeconds() {
        return this._disabledSeconds;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set format(value) {
        if (isNotNil(value)) {
            this._format = value;
            this.enabledColumns = 0;
            /** @type {?} */
            const charSet = new Set(value);
            this.hourEnabled = charSet.has('H') || charSet.has('h');
            this.minuteEnabled = charSet.has('m');
            this.secondEnabled = charSet.has('s');
            if (this.hourEnabled) {
                this.enabledColumns++;
            }
            if (this.minuteEnabled) {
                this.enabledColumns++;
            }
            if (this.secondEnabled) {
                this.enabledColumns++;
            }
            if (this.use12Hours) {
                this.enabledColumns++;
                this.build12Hours();
            }
            this.panelWidth = this.enabledColumns * 66;
            this.cdr.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get format() {
        return this._format;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hourStep(value) {
        if (isNotNil(value)) {
            this._hourStep = value;
            this.time.hourStep = value;
            this.buildHours();
        }
    }
    /**
     * @return {?}
     */
    get hourStep() {
        return this._hourStep;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minuteStep(value) {
        if (isNotNil(value)) {
            this._minuteStep = value;
            this.time.minuteStep = value;
            this.buildMinutes();
        }
    }
    /**
     * @return {?}
     */
    get minuteStep() {
        return this._minuteStep;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set secondStep(value) {
        if (isNotNil(value)) {
            this._secondStep = value;
            this.time.secondStep = value;
            this.buildSeconds();
        }
    }
    /**
     * @return {?}
     */
    get secondStep() {
        return this._secondStep;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (isNotNil(value)) {
            this.time.text = value;
            /** @type {?} */
            const _value = convertToDate(this.time.text, this.format);
            this.time.setValue(_value, this.use12Hours);
            this.buildTimes();
            this.cdr.markForCheck();
        }
        else {
            this.time.setUse12Hours(this.use12Hours);
        }
    }
    /**
     * @return {?}
     */
    get value() {
        this._value = this.time.text;
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.inDatePicker) {
            this.prefixCls = 'calendar-time-picker';
        }
        this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const dateObj = {
                hours: this.time.hours,
                minutes: this.time.minutes,
                seconds: this.time.seconds
            };
            this.time.text = convertToStr(this.time.value, this.format, this.time.selected12Hours);
            this.changed();
            this.touched();
            this.valueChange.emit(this.time.text);
        }));
        this.buildTimes();
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.opened) {
            this.initPosition();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { use12Hours } = changes;
        if (use12Hours &&
            !use12Hours.previousValue &&
            use12Hours.currentValue) {
            this.build12Hours();
            this.enabledColumns++;
        }
    }
    /**
     * @return {?}
     */
    selectInputRange() {
        if (this.timeValueAccessorDirective) {
            this.timeValueAccessorDirective.setRange();
        }
    }
    /**
     * @return {?}
     */
    buildHours() {
        /** @type {?} */
        let hourRanges = 24;
        /** @type {?} */
        let disabledHours = this.disabledHours && this.disabledHours();
        /** @type {?} */
        let startIndex = 0;
        if (this.use12Hours) {
            hourRanges = 12;
            if (disabledHours) {
                if (this.time.selected12Hours === 'PM') {
                    /**
                     * Filter and transform hours which greater or equal to 12
                     * [0, 1, 2, ..., 12, 13, 14, 15, ..., 23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => i >= 12))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => (i > 12 ? i - 12 : i)));
                }
                else {
                    /**
                     * Filter and transform hours which less than 12
                     * [0, 1, 2,..., 12, 13, 14, 15, ...23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => i < 12 || i === 24))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => (i === 24 || i === 0 ? 12 : i)));
                }
            }
            startIndex = 1;
        }
        this.hourRange = makeRange(hourRanges, this.hourStep, startIndex).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledHours && disabledHours.indexOf(r) !== -1
            };
        }));
        if (this.use12Hours &&
            this.hourRange[this.hourRange.length - 1].index === 12) {
            /** @type {?} */
            const temp = [...this.hourRange];
            temp.unshift(temp[temp.length - 1]);
            temp.splice(temp.length - 1, 1);
            this.hourRange = temp;
        }
        // 移除禁用的值
        this.hourRange = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(this.hideDisabledOptions && n.disabled);
        }));
    }
    /**
     * @return {?}
     */
    buildMinutes() {
        this.minuteRange = makeRange(60, this.minuteStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledMinutes &&
                    this.disabledMinutes((/** @type {?} */ (this.time.hours))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.minuteRange = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(this.hideDisabledOptions && n.disabled);
        }));
    }
    /**
     * @return {?}
     */
    buildSeconds() {
        this.secondRange = makeRange(60, this.secondStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledSeconds &&
                    this.disabledSeconds((/** @type {?} */ (this.time.hours)), (/** @type {?} */ (this.time.minutes))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.secondRange = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(this.hideDisabledOptions && n.disabled);
        }));
    }
    /**
     * @return {?}
     */
    build12Hours() {
        /** @type {?} */
        const isUpperForamt = this._format.includes('A');
        this.use12HoursRange = [
            {
                index: 0,
                value: isUpperForamt ? 'AM' : 'am'
            },
            {
                index: 1,
                value: isUpperForamt ? 'PM' : 'pm'
            }
        ];
        // 移除禁用的值
        this.use12HoursRange = this.use12HoursRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !this.hideDisabledOptions;
        }));
    }
    /**
     * @return {?}
     */
    buildTimes() {
        this.buildHours();
        this.buildMinutes();
        this.buildSeconds();
        this.build12Hours();
    }
    /**
     * @param {?} event
     * @param {?} hour
     * @return {?}
     */
    selectHour(event, hour) {
        event.stopPropagation();
        this.time.setHours(hour.index, hour.disabled);
        if (hour.disabled) {
            return;
        }
        this.scrollToSelected(this.hourListElement.nativeElement, hour.index, 120, 'hour');
        if (this._disabledMinutes) {
            this.buildMinutes();
            /** @type {?} */
            const minutes = this.minuteRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (!minutes.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === this.time.minutes))) {
                const { index, disabled } = minutes[0];
                this.time.setMinutes(index, disabled);
            }
        }
        if (this._disabledSeconds || this._disabledMinutes) {
            this.buildSeconds();
        }
    }
    /**
     * @param {?} event
     * @param {?} minute
     * @return {?}
     */
    selectMinute(event, minute) {
        event.stopPropagation();
        this.time.setMinutes(minute.index, minute.disabled);
        if (minute.disabled) {
            return;
        }
        this.scrollToSelected(this.minuteListElement.nativeElement, minute.index, 120, 'minute');
        if (this._disabledSeconds) {
            this.buildSeconds();
            /** @type {?} */
            const seconds = this.secondRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (!seconds.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === this.time.seconds))) {
                const { index, disabled } = seconds[0];
                this.time.setSeconds(index, disabled);
            }
        }
    }
    /**
     * @param {?} event
     * @param {?} second
     * @return {?}
     */
    selectSecond(event, second) {
        event.stopPropagation();
        this.time.setSeconds(second.index, second.disabled);
        if (second.disabled) {
            return;
        }
        this.scrollToSelected(this.secondListElement.nativeElement, second.index, 120, 'second');
    }
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    select12Hours(event, value) {
        event.stopPropagation();
        this.time.selected12Hours = value.value;
        if (this._disabledHours) {
            this.buildHours();
        }
        if (this._disabledMinutes) {
            this.buildMinutes();
        }
        if (this._disabledSeconds) {
            this.buildSeconds();
        }
        this.scrollToSelected(this.use12HoursListElement.nativeElement, value.index, 120, '12-hour');
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    scrollToSelected(instance, index, duration = 0, unit) {
        /** @type {?} */
        const transIndex = this.translateIndex(index, unit);
        /** @type {?} */
        const currentOption = (/** @type {?} */ ((instance.children[0].children[transIndex] ||
            instance.children[0].children[0])));
        this.scrollTo(instance, currentOption.offsetTop, duration);
    }
    /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    translateIndex(index, unit) {
        if (unit === 'hour') {
            /** @type {?} */
            const disabledHours = this.disabledHours && this.disabledHours();
            return this.calcIndex(disabledHours, this.hourRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
        else if (unit === 'minute') {
            /** @type {?} */
            const disabledMinutes = this.disabledMinutes && this.disabledMinutes((/** @type {?} */ (this.time.hours)));
            return this.calcIndex(disabledMinutes, this.minuteRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
        else if (unit === 'second') {
            // second
            /** @type {?} */
            const disabledSeconds = this.disabledSeconds &&
                this.disabledSeconds((/** @type {?} */ (this.time.hours)), (/** @type {?} */ (this.time.minutes)));
            return this.calcIndex(disabledSeconds, this.secondRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
        else {
            // 12-hour
            return this.calcIndex([], this.use12HoursRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
    }
    /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    scrollTo(element, to, duration) {
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        /** @type {?} */
        const difference = to - element.scrollTop;
        /** @type {?} */
        const perTick = (difference / duration) * 10;
        reqAnimFrame((/**
         * @return {?}
         */
        () => {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            this.scrollTo(element, to, duration - 10);
        }));
    }
    /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    calcIndex(array, index) {
        if (array && array.length && this.hideDisabledOptions) {
            return (index -
                array.reduce((/**
                 * @param {?} pre
                 * @param {?} value
                 * @return {?}
                 */
                (pre, value) => {
                    return pre + (value < index ? 1 : 0);
                }), 0));
        }
        else {
            return index;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    changed() {
        if (this.onChange) {
            this.onChange(this.time.text);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    touched() {
        if (this.onTouch) {
            this.onTouch();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setClassMap() {
        this.updateCls.updateHostClass(this.element.nativeElement, {
            [`${this.prefixCls}`]: true,
            [`${this.prefixCls}-column-${this.enabledColumns}`]: this
                .inDatePicker
                ? false
                : true,
            [`${this.prefixCls}-narrow`]: this.enabledColumns < 3,
            [`${this.prefixCls}-placement-bottomLeft`]: this.inDatePicker
                ? false
                : true
        });
    }
    /**
     * @param {?} hour
     * @return {?}
     */
    isSelectedHour(hour) {
        return (hour.index === this.time.viewHours ||
            (!isNotNil(this.time.viewHours) &&
                hour.index === this.time.defaultViewHours && this.selectCurrentTimeWhenNull));
    }
    /**
     * @param {?} minute
     * @return {?}
     */
    isSelectedMinute(minute) {
        return (minute.index === this.time.minutes ||
            (!isNotNil(this.time.minutes) &&
                minute.index === this.time.defaultMinutes && this.selectCurrentTimeWhenNull));
    }
    /**
     * @param {?} second
     * @return {?}
     */
    isSelectedSecond(second) {
        return (second.index === this.time.seconds ||
            (!isNotNil(this.time.seconds) &&
                second.index === this.time.defaultSeconds && this.selectCurrentTimeWhenNull));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isSelected12Hours(value) {
        return (value.value.toUpperCase() === this.time.selected12Hours ||
            (!isNotNil(this.time.selected12Hours) &&
                value.value.toUpperCase() === this.time.default12Hours && this.selectCurrentTimeWhenNull));
    }
    /**
     * @return {?}
     */
    initPosition() {
        // setTimeout(() => {
        if (this.hourEnabled && this.hourListElement) {
            if (isNotNil(this.time.viewHours)) {
                this.scrollToSelected(this.hourListElement.nativeElement, (/** @type {?} */ (this.time.viewHours)), 0, 'hour');
            }
            else {
                this.scrollToSelected(this.hourListElement.nativeElement, this.time.defaultViewHours, 0, 'hour');
            }
        }
        if (this.minuteEnabled && this.minuteListElement) {
            if (isNotNil(this.time.minutes)) {
                this.scrollToSelected(this.minuteListElement.nativeElement, (/** @type {?} */ (this.time.minutes)), 0, 'minute');
            }
            else {
                this.scrollToSelected(this.minuteListElement.nativeElement, this.time.defaultMinutes, 0, 'minute');
            }
        }
        if (this.secondEnabled && this.secondListElement) {
            if (isNotNil(this.time.seconds)) {
                this.scrollToSelected(this.secondListElement.nativeElement, (/** @type {?} */ (this.time.seconds)), 0, 'second');
            }
            else {
                this.scrollToSelected(this.secondListElement.nativeElement, this.time.defaultSeconds, 0, 'second');
            }
        }
        if (this.use12Hours && this.use12HoursListElement) {
            /** @type {?} */
            const selectedHours = isNotNil(this.time.selected12Hours)
                ? this.time.selected12Hours
                : this.time.default12Hours;
            /** @type {?} */
            const index = selectedHours === 'AM' ? 0 : 1;
            this.scrollToSelected(this.use12HoursListElement.nativeElement, index, 0, '12-hour');
        }
        // });
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    checkMinutes(date) {
        this.buildMinutes();
        /** @type {?} */
        const _date = new Date(date);
        /** @type {?} */
        const canuseMinute = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.disabled));
        if (canuseMinute && canuseMinute.length) {
            /** @type {?} */
            const minutes = canuseMinute.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (minutes.length !== 60) {
                /** @type {?} */
                const m = minutes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === _date.getMinutes()));
                if (!m) {
                    _date.setMinutes(minutes[0].index);
                }
                this.time.setValue(_date, this.use12Hours);
            }
        }
        return _date;
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    checkSeconds(date) {
        this.buildSeconds();
        /** @type {?} */
        const _sdate = new Date(date);
        /** @type {?} */
        const canuseSecond = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.disabled));
        if (canuseSecond && canuseSecond.length && canuseSecond.length !== 60) {
            /** @type {?} */
            const seconds = canuseSecond.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (seconds.length !== 60) {
                /** @type {?} */
                const s = seconds.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === _sdate.getSeconds()));
                if (!s) {
                    _sdate.setMinutes(seconds[0].index);
                }
                this.time.setValue(_sdate, this.use12Hours);
            }
        }
        return _sdate;
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    checkDate(date) {
        /** @type {?} */
        const canuseHour = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.disabled));
        if (canuseHour && canuseHour.length) {
            /** @type {?} */
            const hour = canuseHour.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (hour.length !== 24) {
                /** @type {?} */
                const _h = hour.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => n.index === date.getHours()));
                if (!_h) {
                    date.setHours(hour[0].index);
                }
                this.time.setValue(date, this.use12Hours);
            }
        }
        /** @type {?} */
        const mdate = this.checkMinutes(date);
        return this.checkSeconds(mdate);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.time.text = value;
        /** @type {?} */
        let _value = convertToDate(this.time.text, this.format);
        if (_value) {
            _value = this.checkDate(_value);
            this.time.setValue(_value, this.use12Hours);
        }
        if (value && this.opened) {
            this.initPosition();
        }
        this.buildTimes();
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} v
     * @param {?} type
     * @return {?}
     */
    hmsCls(v, type) {
        /** @type {?} */
        let cls = '';
        /** @type {?} */
        const selected = ` ${this.prefixCls}-select-option-selected `;
        /** @type {?} */
        const disabledC = ` ${this.prefixCls}-select-option-disabled `;
        /** @type {?} */
        let f = false;
        if (type === 'h') {
            f = this.isSelectedHour(v);
        }
        else if (type === 'm') {
            f = this.isSelectedMinute(v);
        }
        else if (type === 'r') {
            f = this.isSelected12Hours(v);
        }
        else {
            f = this.isSelectedSecond(v);
        }
        if (f) {
            cls += selected;
        }
        if (type === 'r') {
            return cls;
        }
        if (v.disabled) {
            cls += disabledC;
        }
        return cls;
    }
}
TimePickerPanelComponent.decorators = [
    { type: Component, args: [{
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'time-picker-panel',
                exportAs: 'timePickerPanel',
                template: "<div class=\"farris-timer-picker {{ inDatePicker ? prefixCls + '-panel' : '' }}\">\r\n    <div class=\"{{ prefixCls }}-inner {{ inDatePicker ? prefixCls + '-column-' + enabledColumns : ''}}\">\r\n        <div class=\"{{ prefixCls }}-combobox time-picker-panel-header\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'\" *ngIf=\"showHeader\">\r\n            <div *ngIf=\"hourEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"minuteEnabled\">{{ timePanelTitle?.hour || '\u65F6' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"secondEnabled\">{{ timePanelTitle?.minute || '\u5206'}}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\">{{ timePanelTitle?.seconds || '\u79D2' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\"></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-combobox\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'  \">\r\n            <div *ngIf=\"hourEnabled\" #hourListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li  *ngFor=\"let hour of hourRange;trackBy: trackByItems;\" (click)=\"selectHour($event,hour)\" [class]=\"hmsCls(hour, 'h')\">\r\n                        {{ hour.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" #minuteListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let minute of minuteRange;trackBy: trackByItems\" (click)=\"selectMinute($event,minute)\" [class]=\"hmsCls(minute, 'm')\">\r\n                        {{ minute.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" #secondListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let second of secondRange;trackBy: trackByItems\" (click)=\"selectSecond($event,second)\" [class]=\"hmsCls(second, 's')\">\r\n                        {{ second.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" #use12HoursListElement class=\"{{ prefixCls }}-select\" >\r\n                <ul>\r\n                    <li *ngFor=\"let range of use12HoursRange; trackBy: trackByItems\" (click)=\"select12Hours($event, range)\" [class]=\"hmsCls(range, 'r')\">\r\n                        {{ range.value }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-addon\" *ngIf=\"addOn\">\r\n            <ng-template [ngTemplateOutlet]=\"addOn\"></ng-template>\r\n        </div>\r\n    </div>\r\n</div>",
                // styleUrls: ['./style/index.scss'],
                providers: [
                    UpdateCls,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimePickerPanelComponent,
                        multi: true
                    }
                ],
                styles: [`
        .calendar-time-picker-select,
        .time-picker-panel-select {
            overflow: overlay!important;
            overflow-x: hidden!important;
        }

        .calendar-time-picker-select::-webkit-scrollbar,
        .time-picker-panel-select::-webkit-scrollbar {
            background-color: transparent!important;
        }
        .calendar-time-picker-select::-webkit-scrollbar-track,
        .time-picker-panel-select::-webkit-scrollbar-track {
            background: none;
            background-color: transparent!important;
        }

        .calendar-time-picker-select::-webkit-scrollbar-thumb,
        .time-picker-panel-select::-webkit-scrollbar-thumb {
            display: none;
        }
        .calendar-time-picker-select:hover::-webkit-scrollbar-thumb,
        .time-picker-panel-select:hover::-webkit-scrollbar-thumb {
            display: block;
        }
      
        .time-picker-panel-select::-webkit-scrollbar-corner {
            background: rgba(0, 0, 0, 0);
        }

        .time-header-split:after {
            content: ':';
            position: absolute;
            right: 0;
        }

        .time-picker-panel-header .calendar-time-picker-select,
        .time-picker-panel-header .time-picker-panel-select{
            border-left: 0!important;
            background: white;
            border-bottom: 1px solid #e3e3e3;
            overflow:hidden!important
        }
        `]
            }] }
];
/** @nocollapse */
TimePickerPanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateCls },
    { type: ChangeDetectorRef }
];
TimePickerPanelComponent.propDecorators = {
    timeValueAccessorDirective: [{ type: ViewChild, args: [TimeValueAccessorDirective,] }],
    hourListElement: [{ type: ViewChild, args: ['hourListElement',] }],
    minuteListElement: [{ type: ViewChild, args: ['minuteListElement',] }],
    secondListElement: [{ type: ViewChild, args: ['secondListElement',] }],
    use12HoursListElement: [{ type: ViewChild, args: ['use12HoursListElement',] }],
    inDatePicker: [{ type: Input }],
    addOn: [{ type: Input }],
    hideDisabledOptions: [{ type: Input }],
    clearText: [{ type: Input }],
    placeholder: [{ type: Input }],
    selectCurrentTimeWhenNull: [{ type: Input }],
    showHeader: [{ type: Input }],
    use12Hours: [{ type: Input }],
    allowEmpty: [{ type: Input }],
    opened: [{ type: Input }],
    defaultOpenValue: [{ type: Input }],
    disabledHours: [{ type: Input }],
    disabledMinutes: [{ type: Input }],
    disabledSeconds: [{ type: Input }],
    format: [{ type: Input }],
    hourStep: [{ type: Input }],
    minuteStep: [{ type: Input }],
    secondStep: [{ type: Input }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    timePanelTitle: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._hourStep;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._minuteStep;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._secondStep;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.unsubscribe$;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.onTouch;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._disabledHours;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._disabledMinutes;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._disabledSeconds;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._defaultOpenValue;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._opened;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._allowEmpty;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._value;
    /** @type {?} */
    TimePickerPanelComponent.prototype.prefixCls;
    /** @type {?} */
    TimePickerPanelComponent.prototype.time;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hourEnabled;
    /** @type {?} */
    TimePickerPanelComponent.prototype.minuteEnabled;
    /** @type {?} */
    TimePickerPanelComponent.prototype.secondEnabled;
    /** @type {?} */
    TimePickerPanelComponent.prototype.enabledColumns;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hourRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.minuteRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.secondRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.use12HoursRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.timeValueAccessorDirective;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hourListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.minuteListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.secondListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.use12HoursListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.inDatePicker;
    /** @type {?} */
    TimePickerPanelComponent.prototype.addOn;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hideDisabledOptions;
    /** @type {?} */
    TimePickerPanelComponent.prototype.clearText;
    /** @type {?} */
    TimePickerPanelComponent.prototype.placeholder;
    /**
     * 当value 为空时选中当前时间，默认为 true
     * @type {?}
     */
    TimePickerPanelComponent.prototype.selectCurrentTimeWhenNull;
    /** @type {?} */
    TimePickerPanelComponent.prototype.showHeader;
    /** @type {?} */
    TimePickerPanelComponent.prototype.panelWidth;
    /** @type {?} */
    TimePickerPanelComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._use12Hours;
    /** @type {?} */
    TimePickerPanelComponent.prototype.timePanelTitle;
    /** @type {?} */
    TimePickerPanelComponent.prototype.trackByItems;
    /** @type {?} */
    TimePickerPanelComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.updateCls;
    /** @type {?} */
    TimePickerPanelComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,