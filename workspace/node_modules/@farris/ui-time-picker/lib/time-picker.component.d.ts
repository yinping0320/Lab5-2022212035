import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TimePickerLocaleService } from './services/time-picker.locale.service';
export declare class TimePickerComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {
    private element;
    private renderer;
    private vcRef;
    private cfr;
    cdr: ChangeDetectorRef;
    private localeService;
    timeInput: ElementRef;
    hostCls: boolean;
    private _disabled;
    private _readonly;
    private _editable;
    private _value;
    private _allowEmpty;
    private _autoFocus;
    private _onChange;
    private _onTouched;
    private _hideDisabledOptions;
    private cRef;
    isInit: boolean;
    groupIcon: string;
    display: string;
    hourStep: number;
    minuteStep: number;
    secondStep: number;
    clearText: string;
    popupClassName: string;
    placeholder: any;
    addOn: TemplateRef<void>;
    defaultOpenValue: Date;
    disabledHours: () => number[];
    disabledMinutes: (hour: number) => number[];
    disabledSeconds: (hour: number, minute: number) => number[];
    format: string;
    isOpen: boolean;
    showHeader: boolean;
    use12Hours: boolean;
    readonly openChange: EventEmitter<boolean>;
    valueChange: EventEmitter<string>;
    clear: EventEmitter<{}>;
    hideDisabledOptions: boolean;
    allowEmpty: boolean;
    autoFocus: boolean;
    disabled: boolean | string;
    readonly: boolean | string;
    editable: boolean | string;
    value: string;
    private _use12Hours;
    private overlayRef;
    private overlayPanelRef;
    private documentClickEvent;
    private changeFlag;
    private overLayService;
    localConfig: any;
    constructor(element: ElementRef, renderer: Renderer2, vcRef: ViewContainerRef, cfr: ComponentFactoryResolver, cdr: ChangeDetectorRef, localeService: TimePickerLocaleService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onMouseEnter(event: any): void;
    onMouseLeave(event: any): void;
    open(event: MouseEvent): void;
    close(): void;
    creatPanel(): void;
    setPosition(): void;
    updateAutoFocus(): void;
    onClickClearBtn(): void;
    focus(): void;
    blur(): void;
    onBlur(): void;
    onValueChange(val: string): void;
    onClear(): void;
    writeValue(time: string): void;
    registerOnChange(fn: (time: string) => void): void;
    registerOnTouched(fn: (time: string) => void): void;
    setDisabledState(isDisabled: boolean): void;
}
