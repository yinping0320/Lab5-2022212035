import { animate, state, style, transition, trigger } from '@angular/animations';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { format, parse, isValid } from 'date-fns';
import { LocaleService } from '@farris/ui-locale';
import { reqAnimFrame, OverLayHiddenService } from '@farris/ui-common';
import { CommonModule } from '@angular/common';
import { Injectable, RendererFactory2, Directive, ElementRef, HostListener, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewChild, ViewEncapsulation, Output, EventEmitter, Renderer2, HostBinding, ViewContainerRef, ComponentFactoryResolver, NgModule, defineInjectable, inject } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UpdateHostClassService {
    /**
     * @param {?} rendererFactory2
     */
    constructor(rendererFactory2) {
        this.classMap = {};
        this.renderer = rendererFactory2.createRenderer(null, null);
    }
    /**
     * @param {?} el
     * @param {?} classMap
     * @return {?}
     */
    updateHostClass(el, classMap) {
        this.removeClass(el, this.classMap, this.renderer);
        this.classMap = Object.assign({}, classMap);
        this.addClass(el, this.classMap, this.renderer);
    }
    /**
     * @private
     * @param {?} el
     * @param {?} classMap
     * @param {?} renderer
     * @return {?}
     */
    removeClass(el, classMap, renderer) {
        for (const i in classMap) {
            if (classMap.hasOwnProperty(i)) {
                renderer.removeClass(el, i);
            }
        }
    }
    /**
     * @private
     * @param {?} el
     * @param {?} classMap
     * @param {?} renderer
     * @return {?}
     */
    addClass(el, classMap, renderer) {
        for (const i in classMap) {
            if (classMap.hasOwnProperty(i) && classMap[i]) {
                renderer.addClass(el, i);
            }
        }
    }
}
UpdateHostClassService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UpdateHostClassService.ctorParameters = () => [
    { type: RendererFactory2 }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AnimationDuration {
}
AnimationDuration.SLOW = '0.3s'; // Modal
// Modal
AnimationDuration.BASE = '0.2s';
AnimationDuration.FAST = '0.1s'; // Tooltip
class AnimationCurves {
}
AnimationCurves.EASE_BASE_OUT = 'cubic-bezier(0.7, 0.3, 0.1, 1)';
AnimationCurves.EASE_BASE_IN = 'cubic-bezier(0.9, 0, 0.3, 0.7)';
AnimationCurves.EASE_OUT = 'cubic-bezier(0.215, 0.61, 0.355, 1)';
AnimationCurves.EASE_IN = 'cubic-bezier(0.55, 0.055, 0.675, 0.19)';
AnimationCurves.EASE_IN_OUT = 'cubic-bezier(0.645, 0.045, 0.355, 1)';
AnimationCurves.EASE_OUT_BACK = 'cubic-bezier(0.12, 0.4, 0.29, 1.46)';
AnimationCurves.EASE_IN_BACK = 'cubic-bezier(0.71, -0.46, 0.88, 0.6)';
AnimationCurves.EASE_IN_OUT_BACK = 'cubic-bezier(0.71, -0.46, 0.29, 1.46)';
AnimationCurves.EASE_OUT_CIRC = 'cubic-bezier(0.08, 0.82, 0.17, 1)';
AnimationCurves.EASE_IN_CIRC = 'cubic-bezier(0.6, 0.04, 0.98, 0.34)';
AnimationCurves.EASE_IN_OUT_CIRC = 'cubic-bezier(0.78, 0.14, 0.15, 0.86)';
AnimationCurves.EASE_OUT_QUINT = 'cubic-bezier(0.23, 1, 0.32, 1)';
AnimationCurves.EASE_IN_QUINT = 'cubic-bezier(0.755, 0.05, 0.855, 0.06)';
AnimationCurves.EASE_IN_OUT_QUINT = 'cubic-bezier(0.86, 0, 0.07, 1)';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ANIMATION_TRANSITION_IN = `${AnimationDuration.BASE} ${AnimationCurves.EASE_OUT_QUINT}`;
/** @type {?} */
const ANIMATION_TRANSITION_OUT = `${AnimationDuration.BASE} ${AnimationCurves.EASE_IN_QUINT}`;
/** @type {?} */
const slideMotion = trigger('slideMotion', [
    state('bottom', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 0%'
    })),
    state('top', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 100%'
    })),
    transition('void => bottom', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('bottom => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }))
    ]),
    transition('void => top', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('top => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }))
    ])
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return !!value;
}
/**
 * @param {?} value
 * @param {?=} format
 * @return {?}
 */
function convertToDate(value, format$$1 = 'hh:mm:ss') {
    if (!value || !format$$1) {
        return;
    }
    // let hours = '0';
    // let minutes = '0';
    // let seconds = '0';
    // const formatSArr = format.split(' ')[0];
    // const formatEArr = format.split(' ')[1];
    // const formatArr = formatSArr.split(':');
    // const textArr = value.split(' ')[0].split(':');
    // // tslint:disable-next-line:variable-name
    // const AMOrPM = value.split(' ')[1];
    // formatArr.forEach((item: string, index: number) => {
    //     item = item.toUpperCase();
    //     if (item === 'H' || item === 'HH') {
    //         hours = textArr[index];
    //     } else if (item === 'M' || item === 'MM') {
    //         minutes = textArr[index];
    //     } else if (item === 'S' || item === 'SS') {
    //         seconds = textArr[index];
    //     } else if (item === 'A') {
    //     }
    // });
    // if (formatEArr && formatEArr.toUpperCase() === 'A') {
    //     if (AMOrPM === 'PM') {
    //         hours = Number(hours) + 12 + '';
    //     }
    // }
    // return new Date(
    //     1970,
    //     0,
    //     1,
    //     Number(hours),
    //     Number(minutes),
    //     Number(seconds)
    // );
    if (format$$1.indexOf('ss') === -1 && value.split(':').length === 3) {
        format$$1 = format$$1 + ':ss';
    }
    return parse(value, format$$1, new Date());
}
/**
 * @param {?} date
 * @param {?=} format
 * @param {?=} selected12Hours
 * @return {?}
 */
function convertToStr(date, format$$1 = 'hh:mm:ss', selected12Hours = 'AM') {
    if (!date || isNaN(date.getTime())) {
        return '';
    }
    // let _hours = date.getHours();
    // selected12Hours = selected12Hours ? selected12Hours : 'AM';
    // if (selected12Hours === 'PM') {
    //     _hours = _hours > 12 ? _hours - 12 : _hours;
    // }
    // const hours = addZero(_hours);
    // const minutes = addZero(date.getMinutes());
    // const seconds = addZero(date.getSeconds());
    // if (format.indexOf('a') >= 0 || format.indexOf('A') >= 0) {
    //     format = format.replace(/a/i, selected12Hours);
    // }
    // if (format.indexOf('hh') >= 0 || format.indexOf('HH') >= 0) {
    //     format = format.replace(/hh/i, hours);
    // } else if (format.indexOf('h') >= 0 || format.indexOf('H') >= 0) {
    //     format = format.replace(/h/i, hours);
    // }
    // if (format.indexOf('mm') >= 0 || format.indexOf('MM') >= 0) {
    //     format = format.replace(/mm/i, minutes);
    // } else if (format.indexOf('m') >= 0 || format.indexOf('M') >= 0) {
    //     format = format.replace(/m/i, minutes);
    // }
    // if (format.indexOf('ss') >= 0 || format.indexOf('SS') >= 0) {
    //     format = format.replace(/ss/i, seconds);
    // } else if (format.indexOf('s') >= 0 || format.indexOf('S') >= 0) {
    //     format = format.replace(/s/i, seconds);
    // }
    // return format;
    return format(date, format$$1);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:no-any
/**
 * @param {?} value
 * @return {?}
 */
function isNotNil(value) {
    return typeof value !== 'undefined' && value !== null;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} text
 * @return {?}
 */
function parseTime(text) {
    if (!text) {
        return;
    }
    return new Date(`1970-01-01 ${text}`);
}
/**
 * @param {?} date
 * @param {?} formatStr
 * @return {?}
 */
function format$1(date, formatStr) {
    return format(date, formatStr);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeValueAccessorDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    /**
     * @return {?}
     */
    keyup() {
        this.changed();
    }
    /**
     * @return {?}
     */
    blur() {
        this.touched();
    }
    /**
     * @return {?}
     */
    changed() {
        if (this._onChange) {
            /** @type {?} */
            const value = parseTime(this.elementRef.nativeElement.value);
            this._onChange((/** @type {?} */ (value)));
        }
    }
    /**
     * @return {?}
     */
    touched() {
        if (this._onTouch) {
            this._onTouch();
        }
    }
    /**
     * @return {?}
     */
    setRange() {
        this.elementRef.nativeElement.focus();
        this.elementRef.nativeElement.setSelectionRange(0, this.elementRef.nativeElement.value.length);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.elementRef.nativeElement.value = format$1(value, this.nzTime);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouch = fn;
    }
}
TimeValueAccessorDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[format]',
                exportAs: 'format',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimeValueAccessorDirective,
                        multi: true
                    }
                ]
            },] }
];
/** @nocollapse */
TimeValueAccessorDirective.ctorParameters = () => [
    { type: ElementRef }
];
TimeValueAccessorDirective.propDecorators = {
    nzTime: [{ type: Input }],
    keyup: [{ type: HostListener, args: ['keyup',] }],
    blur: [{ type: HostListener, args: ['blur',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeHolder {
    constructor() {
        this._seconds = undefined;
        this._hours = undefined;
        this._minutes = undefined;
        this._selected12Hours = undefined;
        this._use12Hours = false;
        this._defaultOpenValue = new Date();
        this._changes = new Subject();
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
    }
    /**
     * @param {?} value
     * @param {?} step
     * @return {?}
     */
    setValueByStep(value, step) {
        /** @type {?} */
        let times = Math.floor(value / step);
        /** @type {?} */
        const remainder = value % step;
        /** @type {?} */
        const halfStep = step / 2;
        times = remainder > halfStep ? times + 1 : times;
        return step * times;
    }
    /**
     * @return {?}
     */
    setDefaultValueIfNil() {
        if (!isNotNil(this._value)) {
            this._value = new Date(this.defaultOpenValue);
        }
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    setMinutes(value, disabled) {
        if (disabled) {
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).setDefaultValueIfNil();
        (/** @type {?} */ (this)).minutes = value;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    setHours(value, disabled) {
        if (disabled) {
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).setDefaultValueIfNil();
        (/** @type {?} */ (this)).hours = value;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    setSeconds(value, disabled) {
        if (disabled) {
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).setDefaultValueIfNil();
        (/** @type {?} */ (this)).seconds = value;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    setUse12Hours(value) {
        (/** @type {?} */ (this))._use12Hours = value;
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    get changes() {
        return this._changes.asObservable();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (value !== this._value) {
            this._value = value;
            if (isNotNil(this._value) && isValid(this._value)) {
                // tslint:disable-next-line:no-non-null-assertion
                this._hours = (/** @type {?} */ (this._value)).getHours();
                this._minutes = (/** @type {?} */ (this._value)).getMinutes();
                this._seconds = (/** @type {?} */ (this._value)).getSeconds();
                if (this._use12Hours && isNotNil(this._hours)) {
                    this._selected12Hours = this._hours >= 12 ? 'PM' : 'AM';
                }
            }
            else {
                this._clear();
            }
        }
    }
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set text(value) {
        if (value !== this._text) {
            this._text = value;
        }
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?=} use12Hours
     * @return {THIS}
     */
    setValue(value, use12Hours) {
        if (isNotNil(use12Hours)) {
            (/** @type {?} */ (this))._use12Hours = (/** @type {?} */ (use12Hours));
        }
        (/** @type {?} */ (this)).value = value;
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    clear() {
        this._clear();
        this.update();
    }
    /**
     * @return {?}
     */
    get isEmpty() {
        return !(isNotNil(this._hours) || isNotNil(this._minutes) || isNotNil(this._seconds));
    }
    /**
     * @private
     * @return {?}
     */
    _clear() {
        this._hours = undefined;
        this._minutes = undefined;
        this._seconds = undefined;
        this._selected12Hours = undefined;
        this._value = undefined;
    }
    /**
     * @private
     * @return {?}
     */
    update() {
        if (this.isEmpty) {
            this._value = undefined;
        }
        else {
            if (!isNotNil(this._hours)) {
                this._hours = this.defaultHours;
            }
            else {
                (/** @type {?} */ (this._value)).setHours((/** @type {?} */ (this.hours)));
            }
            if (!isNotNil(this._minutes)) {
                this._minutes = this.defaultMinutes;
            }
            else {
                (/** @type {?} */ (this._value)).setMinutes((/** @type {?} */ (this.minutes)));
            }
            if (!isNotNil(this._seconds)) {
                this._seconds = this.defaultSeconds;
            }
            else {
                (/** @type {?} */ (this._value)).setSeconds((/** @type {?} */ (this.seconds)));
            }
            if (this._use12Hours) {
                if (!isNotNil(this._selected12Hours)) {
                    this._selected12Hours = this.default12Hours;
                }
                if (this.selected12Hours === 'PM' && (/** @type {?} */ (this._hours)) < 12) {
                    (/** @type {?} */ (this._hours)) += 12;
                    (/** @type {?} */ (this._value)).setHours((/** @type {?} */ (this._hours)));
                }
                if (this.selected12Hours === 'AM' && (/** @type {?} */ (this._hours)) >= 12) {
                    (/** @type {?} */ (this._hours)) -= 12;
                    (/** @type {?} */ (this._value)).setHours((/** @type {?} */ (this._hours)));
                }
            }
            this._value = new Date((/** @type {?} */ (this._value)));
        }
        this.changed();
    }
    /**
     * @return {?}
     */
    changed() {
        this._changes.next(this._value);
    }
    /**
     * \@description
     * UI view hours
     * Get viewHours which is selected in `time-picker-panel` and its range is [12, 1, 2, ..., 11]
     * @return {?}
     */
    get viewHours() {
        return this._use12Hours && isNotNil(this._hours) ? this.calculateViewHour((/** @type {?} */ (this._hours))) : this._hours;
    }
    /**
     * \@description
     * Value hours
     * Get realHours and its range is [0, 1, 2, ..., 22, 23]
     * @return {?}
     */
    get realHours() {
        return this._hours;
    }
    /**
     * \@description
     * Same as realHours
     * @see realHours
     * @return {?}
     */
    get hours() {
        return this._hours;
    }
    /**
     * \@description
     * Set viewHours to realHours
     * @param {?} value
     * @return {?}
     */
    set hours(value) {
        if (value !== this._hours) {
            if (this._use12Hours) {
                if (this.selected12Hours === 'PM' && value !== 12) {
                    (/** @type {?} */ (this._hours)) = ((/** @type {?} */ (value))) + 12;
                }
                else if (this.selected12Hours === 'AM' && value === 12) {
                    this._hours = 0;
                }
                else {
                    this._hours = value;
                }
            }
            else {
                this._hours = value;
            }
            this.update();
        }
    }
    /**
     * @return {?}
     */
    get minutes() {
        return this._minutes;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minutes(value) {
        if (value !== this._minutes) {
            this._minutes = value;
            this.update();
        }
    }
    /**
     * @return {?}
     */
    get seconds() {
        return this._seconds;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set seconds(value) {
        if (value !== this._seconds) {
            this._seconds = value;
            this.update();
        }
    }
    /**
     * @return {?}
     */
    get selected12Hours() {
        return this._selected12Hours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected12Hours(value) {
        if ((/** @type {?} */ (value)).toUpperCase() !== this._selected12Hours) {
            this._selected12Hours = (/** @type {?} */ (value)).toUpperCase();
            this.update();
        }
    }
    /**
     * @return {?}
     */
    get defaultOpenValue() {
        this._defaultOpenValue.setHours(this.setValueByStep(this._defaultOpenValue.getHours(), this.hourStep));
        this._defaultOpenValue.setMinutes(this.setValueByStep(this._defaultOpenValue.getMinutes(), this.minuteStep));
        this._defaultOpenValue.setSeconds(this.setValueByStep(this._defaultOpenValue.getSeconds(), this.secondStep));
        return this._defaultOpenValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultOpenValue(value) {
        if (this._defaultOpenValue !== value) {
            this._defaultOpenValue = value;
            this.update();
        }
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    setDefaultOpenValue(value) {
        (/** @type {?} */ (this)).defaultOpenValue = value;
        return (/** @type {?} */ (this));
    }
    /**
     * \@description
     * Get deafultViewHours when defaultOpenValue is setted
     * @see viewHours
     * @return {?}
     */
    get defaultViewHours() {
        /** @type {?} */
        const hours = this.defaultOpenValue.getHours();
        return this._use12Hours && isNotNil(hours) ? this.calculateViewHour(hours) : hours;
    }
    /**
     * \@description
     * Get defaultRealHours when defaultOpenValue is setted
     * @see realHours
     * @return {?}
     */
    get defaultRealHours() {
        return this.defaultOpenValue.getHours();
    }
    /**
     * \@description
     * Same as defaultRealHours
     * @return {?}
     */
    get defaultHours() {
        return this.defaultOpenValue.getHours();
    }
    /**
     * @return {?}
     */
    get defaultMinutes() {
        return this.defaultOpenValue.getMinutes();
    }
    /**
     * @return {?}
     */
    get defaultSeconds() {
        return this.defaultOpenValue.getSeconds();
    }
    /**
     * @return {?}
     */
    get default12Hours() {
        return this.defaultOpenValue.getHours() >= 12 ? 'PM' : 'AM';
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    calculateViewHour(value) {
        /** @type {?} */
        const selected12Hours = this._selected12Hours || this.default12Hours;
        if (selected12Hours === 'PM' && value > 12) {
            return value - 12;
        }
        if (selected12Hours === 'AM' && value === 0) {
            return 12;
        }
        return value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} length
 * @param {?=} step
 * @param {?=} start
 * @return {?}
 */
function makeRange(length, step = 1, start = 0) {
    step = Math.ceil(step);
    return new Array(Math.ceil(length / step))
        .fill(0)
        .map((/**
     * @param {?} _
     * @param {?} i
     * @return {?}
     */
    (_, i) => (i + start) * step));
}
class TimePickerPanelComponent {
    /**
     * @param {?} element
     * @param {?} updateCls
     * @param {?} cdr
     */
    constructor(element, updateCls, cdr) {
        this.element = element;
        this.updateCls = updateCls;
        this.cdr = cdr;
        this._hourStep = 1;
        this._minuteStep = 1;
        this._secondStep = 1;
        this.unsubscribe$ = new Subject();
        this._format = 'HH:mm:ss';
        this._defaultOpenValue = new Date();
        this._opened = false;
        this._allowEmpty = true;
        this._value = '';
        this.prefixCls = 'time-picker-panel';
        this.time = new TimeHolder();
        this.hourEnabled = true;
        this.minuteEnabled = true;
        this.secondEnabled = true;
        this.enabledColumns = 3;
        this.inDatePicker = false; // If inside a date-picker, more diff works need to be done
        this.hideDisabledOptions = false;
        /**
         * 当value 为空时选中当前时间，默认为 true
         */
        this.selectCurrentTimeWhenNull = true;
        this.showHeader = false;
        this.panelWidth = 0;
        this.valueChange = new EventEmitter();
        this._use12Hours = false;
        this.timePanelTitle = null;
        this.trackByItems = (/**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        (index, item) => {
            return index;
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set use12Hours(value) {
        this._use12Hours = !!value;
        if (!this._use12Hours) {
            this.format = this.format ? (this.format + '').replace(/h/g, 'H') : '';
        }
        else {
            this.format = this.format ? (this.format + '').replace(/H/g, 'h') : '';
        }
    }
    /**
     * @return {?}
     */
    get use12Hours() {
        return this._use12Hours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowEmpty(value) {
        if (isNotNil(value)) {
            this._allowEmpty = value;
        }
    }
    /**
     * @return {?}
     */
    get allowEmpty() {
        return this._allowEmpty;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set opened(value) {
        this._opened = value;
        if (this.opened) {
            this.initPosition();
            this.selectInputRange();
        }
    }
    /**
     * @return {?}
     */
    get opened() {
        return this._opened;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultOpenValue(value) {
        if (isNotNil(value)) {
            this._defaultOpenValue = value;
            this.time.setDefaultOpenValue(this.defaultOpenValue);
        }
    }
    /**
     * @return {?}
     */
    get defaultOpenValue() {
        return this._defaultOpenValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabledHours(value) {
        this._disabledHours = value;
        if (this._disabledHours) {
            this.buildHours();
        }
    }
    /**
     * @return {?}
     */
    get disabledHours() {
        return this._disabledHours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabledMinutes(value) {
        if (isNotNil(value)) {
            this._disabledMinutes = value;
            this.buildMinutes();
        }
    }
    /**
     * @return {?}
     */
    get disabledMinutes() {
        return this._disabledMinutes;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabledSeconds(value) {
        if (isNotNil(value)) {
            this._disabledSeconds = value;
            this.buildSeconds();
        }
    }
    /**
     * @return {?}
     */
    get disabledSeconds() {
        return this._disabledSeconds;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set format(value) {
        if (isNotNil(value)) {
            this._format = value;
            this.enabledColumns = 0;
            /** @type {?} */
            const charSet = new Set(value);
            this.hourEnabled = charSet.has('H') || charSet.has('h');
            this.minuteEnabled = charSet.has('m');
            this.secondEnabled = charSet.has('s');
            if (this.hourEnabled) {
                this.enabledColumns++;
            }
            if (this.minuteEnabled) {
                this.enabledColumns++;
            }
            if (this.secondEnabled) {
                this.enabledColumns++;
            }
            if (this.use12Hours) {
                this.enabledColumns++;
                this.build12Hours();
            }
            this.panelWidth = this.enabledColumns * 66;
            this.cdr.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get format() {
        return this._format;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hourStep(value) {
        if (isNotNil(value)) {
            this._hourStep = value;
            this.time.hourStep = value;
            this.buildHours();
        }
    }
    /**
     * @return {?}
     */
    get hourStep() {
        return this._hourStep;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minuteStep(value) {
        if (isNotNil(value)) {
            this._minuteStep = value;
            this.time.minuteStep = value;
            this.buildMinutes();
        }
    }
    /**
     * @return {?}
     */
    get minuteStep() {
        return this._minuteStep;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set secondStep(value) {
        if (isNotNil(value)) {
            this._secondStep = value;
            this.time.secondStep = value;
            this.buildSeconds();
        }
    }
    /**
     * @return {?}
     */
    get secondStep() {
        return this._secondStep;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (isNotNil(value)) {
            this.time.text = value;
            /** @type {?} */
            const _value = convertToDate(this.time.text, this.format);
            this.time.setValue(_value, this.use12Hours);
            this.buildTimes();
            this.cdr.markForCheck();
        }
        else {
            this.time.setUse12Hours(this.use12Hours);
        }
    }
    /**
     * @return {?}
     */
    get value() {
        this._value = this.time.text;
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.inDatePicker) {
            this.prefixCls = 'calendar-time-picker';
        }
        this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const dateObj = {
                hours: this.time.hours,
                minutes: this.time.minutes,
                seconds: this.time.seconds
            };
            this.time.text = convertToStr(this.time.value, this.format, this.time.selected12Hours);
            this.changed();
            this.touched();
            this.valueChange.emit(this.time.text);
        }));
        this.buildTimes();
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.opened) {
            this.initPosition();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { use12Hours } = changes;
        if (use12Hours &&
            !use12Hours.previousValue &&
            use12Hours.currentValue) {
            this.build12Hours();
            this.enabledColumns++;
        }
    }
    /**
     * @return {?}
     */
    selectInputRange() {
        if (this.timeValueAccessorDirective) {
            this.timeValueAccessorDirective.setRange();
        }
    }
    /**
     * @return {?}
     */
    buildHours() {
        /** @type {?} */
        let hourRanges = 24;
        /** @type {?} */
        let disabledHours = this.disabledHours && this.disabledHours();
        /** @type {?} */
        let startIndex = 0;
        if (this.use12Hours) {
            hourRanges = 12;
            if (disabledHours) {
                if (this.time.selected12Hours === 'PM') {
                    /**
                     * Filter and transform hours which greater or equal to 12
                     * [0, 1, 2, ..., 12, 13, 14, 15, ..., 23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => i >= 12))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => (i > 12 ? i - 12 : i)));
                }
                else {
                    /**
                     * Filter and transform hours which less than 12
                     * [0, 1, 2,..., 12, 13, 14, 15, ...23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => i < 12 || i === 24))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => (i === 24 || i === 0 ? 12 : i)));
                }
            }
            startIndex = 1;
        }
        this.hourRange = makeRange(hourRanges, this.hourStep, startIndex).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledHours && disabledHours.indexOf(r) !== -1
            };
        }));
        if (this.use12Hours &&
            this.hourRange[this.hourRange.length - 1].index === 12) {
            /** @type {?} */
            const temp = [...this.hourRange];
            temp.unshift(temp[temp.length - 1]);
            temp.splice(temp.length - 1, 1);
            this.hourRange = temp;
        }
        // 移除禁用的值
        this.hourRange = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(this.hideDisabledOptions && n.disabled);
        }));
    }
    /**
     * @return {?}
     */
    buildMinutes() {
        this.minuteRange = makeRange(60, this.minuteStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledMinutes &&
                    this.disabledMinutes((/** @type {?} */ (this.time.hours))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.minuteRange = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(this.hideDisabledOptions && n.disabled);
        }));
    }
    /**
     * @return {?}
     */
    buildSeconds() {
        this.secondRange = makeRange(60, this.secondStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledSeconds &&
                    this.disabledSeconds((/** @type {?} */ (this.time.hours)), (/** @type {?} */ (this.time.minutes))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.secondRange = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(this.hideDisabledOptions && n.disabled);
        }));
    }
    /**
     * @return {?}
     */
    build12Hours() {
        /** @type {?} */
        const isUpperForamt = this._format.includes('A');
        this.use12HoursRange = [
            {
                index: 0,
                value: isUpperForamt ? 'AM' : 'am'
            },
            {
                index: 1,
                value: isUpperForamt ? 'PM' : 'pm'
            }
        ];
        // 移除禁用的值
        this.use12HoursRange = this.use12HoursRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !this.hideDisabledOptions;
        }));
    }
    /**
     * @return {?}
     */
    buildTimes() {
        this.buildHours();
        this.buildMinutes();
        this.buildSeconds();
        this.build12Hours();
    }
    /**
     * @param {?} event
     * @param {?} hour
     * @return {?}
     */
    selectHour(event, hour) {
        event.stopPropagation();
        this.time.setHours(hour.index, hour.disabled);
        if (hour.disabled) {
            return;
        }
        this.scrollToSelected(this.hourListElement.nativeElement, hour.index, 120, 'hour');
        if (this._disabledMinutes) {
            this.buildMinutes();
            /** @type {?} */
            const minutes = this.minuteRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (!minutes.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === this.time.minutes))) {
                const { index, disabled } = minutes[0];
                this.time.setMinutes(index, disabled);
            }
        }
        if (this._disabledSeconds || this._disabledMinutes) {
            this.buildSeconds();
        }
    }
    /**
     * @param {?} event
     * @param {?} minute
     * @return {?}
     */
    selectMinute(event, minute) {
        event.stopPropagation();
        this.time.setMinutes(minute.index, minute.disabled);
        if (minute.disabled) {
            return;
        }
        this.scrollToSelected(this.minuteListElement.nativeElement, minute.index, 120, 'minute');
        if (this._disabledSeconds) {
            this.buildSeconds();
            /** @type {?} */
            const seconds = this.secondRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (!seconds.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === this.time.seconds))) {
                const { index, disabled } = seconds[0];
                this.time.setSeconds(index, disabled);
            }
        }
    }
    /**
     * @param {?} event
     * @param {?} second
     * @return {?}
     */
    selectSecond(event, second) {
        event.stopPropagation();
        this.time.setSeconds(second.index, second.disabled);
        if (second.disabled) {
            return;
        }
        this.scrollToSelected(this.secondListElement.nativeElement, second.index, 120, 'second');
    }
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    select12Hours(event, value) {
        event.stopPropagation();
        this.time.selected12Hours = value.value;
        if (this._disabledHours) {
            this.buildHours();
        }
        if (this._disabledMinutes) {
            this.buildMinutes();
        }
        if (this._disabledSeconds) {
            this.buildSeconds();
        }
        this.scrollToSelected(this.use12HoursListElement.nativeElement, value.index, 120, '12-hour');
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    scrollToSelected(instance, index, duration = 0, unit) {
        /** @type {?} */
        const transIndex = this.translateIndex(index, unit);
        /** @type {?} */
        const currentOption = (/** @type {?} */ ((instance.children[0].children[transIndex] ||
            instance.children[0].children[0])));
        this.scrollTo(instance, currentOption.offsetTop, duration);
    }
    /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    translateIndex(index, unit) {
        if (unit === 'hour') {
            /** @type {?} */
            const disabledHours = this.disabledHours && this.disabledHours();
            return this.calcIndex(disabledHours, this.hourRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
        else if (unit === 'minute') {
            /** @type {?} */
            const disabledMinutes = this.disabledMinutes && this.disabledMinutes((/** @type {?} */ (this.time.hours)));
            return this.calcIndex(disabledMinutes, this.minuteRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
        else if (unit === 'second') {
            // second
            /** @type {?} */
            const disabledSeconds = this.disabledSeconds &&
                this.disabledSeconds((/** @type {?} */ (this.time.hours)), (/** @type {?} */ (this.time.minutes)));
            return this.calcIndex(disabledSeconds, this.secondRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
        else {
            // 12-hour
            return this.calcIndex([], this.use12HoursRange.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.index)).indexOf(index));
        }
    }
    /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    scrollTo(element, to, duration) {
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        /** @type {?} */
        const difference = to - element.scrollTop;
        /** @type {?} */
        const perTick = (difference / duration) * 10;
        reqAnimFrame((/**
         * @return {?}
         */
        () => {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            this.scrollTo(element, to, duration - 10);
        }));
    }
    /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    calcIndex(array, index) {
        if (array && array.length && this.hideDisabledOptions) {
            return (index -
                array.reduce((/**
                 * @param {?} pre
                 * @param {?} value
                 * @return {?}
                 */
                (pre, value) => {
                    return pre + (value < index ? 1 : 0);
                }), 0));
        }
        else {
            return index;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    changed() {
        if (this.onChange) {
            this.onChange(this.time.text);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    touched() {
        if (this.onTouch) {
            this.onTouch();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setClassMap() {
        this.updateCls.updateHostClass(this.element.nativeElement, {
            [`${this.prefixCls}`]: true,
            [`${this.prefixCls}-column-${this.enabledColumns}`]: this
                .inDatePicker
                ? false
                : true,
            [`${this.prefixCls}-narrow`]: this.enabledColumns < 3,
            [`${this.prefixCls}-placement-bottomLeft`]: this.inDatePicker
                ? false
                : true
        });
    }
    /**
     * @param {?} hour
     * @return {?}
     */
    isSelectedHour(hour) {
        return (hour.index === this.time.viewHours ||
            (!isNotNil(this.time.viewHours) &&
                hour.index === this.time.defaultViewHours && this.selectCurrentTimeWhenNull));
    }
    /**
     * @param {?} minute
     * @return {?}
     */
    isSelectedMinute(minute) {
        return (minute.index === this.time.minutes ||
            (!isNotNil(this.time.minutes) &&
                minute.index === this.time.defaultMinutes && this.selectCurrentTimeWhenNull));
    }
    /**
     * @param {?} second
     * @return {?}
     */
    isSelectedSecond(second) {
        return (second.index === this.time.seconds ||
            (!isNotNil(this.time.seconds) &&
                second.index === this.time.defaultSeconds && this.selectCurrentTimeWhenNull));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isSelected12Hours(value) {
        return (value.value.toUpperCase() === this.time.selected12Hours ||
            (!isNotNil(this.time.selected12Hours) &&
                value.value.toUpperCase() === this.time.default12Hours && this.selectCurrentTimeWhenNull));
    }
    /**
     * @return {?}
     */
    initPosition() {
        // setTimeout(() => {
        if (this.hourEnabled && this.hourListElement) {
            if (isNotNil(this.time.viewHours)) {
                this.scrollToSelected(this.hourListElement.nativeElement, (/** @type {?} */ (this.time.viewHours)), 0, 'hour');
            }
            else {
                this.scrollToSelected(this.hourListElement.nativeElement, this.time.defaultViewHours, 0, 'hour');
            }
        }
        if (this.minuteEnabled && this.minuteListElement) {
            if (isNotNil(this.time.minutes)) {
                this.scrollToSelected(this.minuteListElement.nativeElement, (/** @type {?} */ (this.time.minutes)), 0, 'minute');
            }
            else {
                this.scrollToSelected(this.minuteListElement.nativeElement, this.time.defaultMinutes, 0, 'minute');
            }
        }
        if (this.secondEnabled && this.secondListElement) {
            if (isNotNil(this.time.seconds)) {
                this.scrollToSelected(this.secondListElement.nativeElement, (/** @type {?} */ (this.time.seconds)), 0, 'second');
            }
            else {
                this.scrollToSelected(this.secondListElement.nativeElement, this.time.defaultSeconds, 0, 'second');
            }
        }
        if (this.use12Hours && this.use12HoursListElement) {
            /** @type {?} */
            const selectedHours = isNotNil(this.time.selected12Hours)
                ? this.time.selected12Hours
                : this.time.default12Hours;
            /** @type {?} */
            const index = selectedHours === 'AM' ? 0 : 1;
            this.scrollToSelected(this.use12HoursListElement.nativeElement, index, 0, '12-hour');
        }
        // });
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    checkMinutes(date) {
        this.buildMinutes();
        /** @type {?} */
        const _date = new Date(date);
        /** @type {?} */
        const canuseMinute = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.disabled));
        if (canuseMinute && canuseMinute.length) {
            /** @type {?} */
            const minutes = canuseMinute.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (minutes.length !== 60) {
                /** @type {?} */
                const m = minutes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === _date.getMinutes()));
                if (!m) {
                    _date.setMinutes(minutes[0].index);
                }
                this.time.setValue(_date, this.use12Hours);
            }
        }
        return _date;
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    checkSeconds(date) {
        this.buildSeconds();
        /** @type {?} */
        const _sdate = new Date(date);
        /** @type {?} */
        const canuseSecond = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.disabled));
        if (canuseSecond && canuseSecond.length && canuseSecond.length !== 60) {
            /** @type {?} */
            const seconds = canuseSecond.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (seconds.length !== 60) {
                /** @type {?} */
                const s = seconds.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === _sdate.getSeconds()));
                if (!s) {
                    _sdate.setMinutes(seconds[0].index);
                }
                this.time.setValue(_sdate, this.use12Hours);
            }
        }
        return _sdate;
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    checkDate(date) {
        /** @type {?} */
        const canuseHour = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.disabled));
        if (canuseHour && canuseHour.length) {
            /** @type {?} */
            const hour = canuseHour.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n.disabled));
            if (hour.length !== 24) {
                /** @type {?} */
                const _h = hour.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => n.index === date.getHours()));
                if (!_h) {
                    date.setHours(hour[0].index);
                }
                this.time.setValue(date, this.use12Hours);
            }
        }
        /** @type {?} */
        const mdate = this.checkMinutes(date);
        return this.checkSeconds(mdate);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.time.text = value;
        /** @type {?} */
        let _value = convertToDate(this.time.text, this.format);
        if (_value) {
            _value = this.checkDate(_value);
            this.time.setValue(_value, this.use12Hours);
        }
        if (value && this.opened) {
            this.initPosition();
        }
        this.buildTimes();
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} v
     * @param {?} type
     * @return {?}
     */
    hmsCls(v, type) {
        /** @type {?} */
        let cls = '';
        /** @type {?} */
        const selected = ` ${this.prefixCls}-select-option-selected `;
        /** @type {?} */
        const disabledC = ` ${this.prefixCls}-select-option-disabled `;
        /** @type {?} */
        let f = false;
        if (type === 'h') {
            f = this.isSelectedHour(v);
        }
        else if (type === 'm') {
            f = this.isSelectedMinute(v);
        }
        else if (type === 'r') {
            f = this.isSelected12Hours(v);
        }
        else {
            f = this.isSelectedSecond(v);
        }
        if (f) {
            cls += selected;
        }
        if (type === 'r') {
            return cls;
        }
        if (v.disabled) {
            cls += disabledC;
        }
        return cls;
    }
}
TimePickerPanelComponent.decorators = [
    { type: Component, args: [{
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'time-picker-panel',
                exportAs: 'timePickerPanel',
                template: "<div class=\"farris-timer-picker {{ inDatePicker ? prefixCls + '-panel' : '' }}\">\r\n    <div class=\"{{ prefixCls }}-inner {{ inDatePicker ? prefixCls + '-column-' + enabledColumns : ''}}\">\r\n        <div class=\"{{ prefixCls }}-combobox time-picker-panel-header\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'\" *ngIf=\"showHeader\">\r\n            <div *ngIf=\"hourEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"minuteEnabled\">{{ timePanelTitle?.hour || '\u65F6' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"secondEnabled\">{{ timePanelTitle?.minute || '\u5206'}}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\">{{ timePanelTitle?.seconds || '\u79D2' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\"></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-combobox\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'  \">\r\n            <div *ngIf=\"hourEnabled\" #hourListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li  *ngFor=\"let hour of hourRange;trackBy: trackByItems;\" (click)=\"selectHour($event,hour)\" [class]=\"hmsCls(hour, 'h')\">\r\n                        {{ hour.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" #minuteListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let minute of minuteRange;trackBy: trackByItems\" (click)=\"selectMinute($event,minute)\" [class]=\"hmsCls(minute, 'm')\">\r\n                        {{ minute.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" #secondListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let second of secondRange;trackBy: trackByItems\" (click)=\"selectSecond($event,second)\" [class]=\"hmsCls(second, 's')\">\r\n                        {{ second.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" #use12HoursListElement class=\"{{ prefixCls }}-select\" >\r\n                <ul>\r\n                    <li *ngFor=\"let range of use12HoursRange; trackBy: trackByItems\" (click)=\"select12Hours($event, range)\" [class]=\"hmsCls(range, 'r')\">\r\n                        {{ range.value }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-addon\" *ngIf=\"addOn\">\r\n            <ng-template [ngTemplateOutlet]=\"addOn\"></ng-template>\r\n        </div>\r\n    </div>\r\n</div>",
                // styleUrls: ['./style/index.scss'],
                providers: [
                    UpdateHostClassService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimePickerPanelComponent,
                        multi: true
                    }
                ],
                styles: [`
        .calendar-time-picker-select,
        .time-picker-panel-select {
            overflow: overlay!important;
            overflow-x: hidden!important;
        }

        .calendar-time-picker-select::-webkit-scrollbar,
        .time-picker-panel-select::-webkit-scrollbar {
            background-color: transparent!important;
        }
        .calendar-time-picker-select::-webkit-scrollbar-track,
        .time-picker-panel-select::-webkit-scrollbar-track {
            background: none;
            background-color: transparent!important;
        }

        .calendar-time-picker-select::-webkit-scrollbar-thumb,
        .time-picker-panel-select::-webkit-scrollbar-thumb {
            display: none;
        }
        .calendar-time-picker-select:hover::-webkit-scrollbar-thumb,
        .time-picker-panel-select:hover::-webkit-scrollbar-thumb {
            display: block;
        }
      
        .time-picker-panel-select::-webkit-scrollbar-corner {
            background: rgba(0, 0, 0, 0);
        }

        .time-header-split:after {
            content: ':';
            position: absolute;
            right: 0;
        }

        .time-picker-panel-header .calendar-time-picker-select,
        .time-picker-panel-header .time-picker-panel-select{
            border-left: 0!important;
            background: white;
            border-bottom: 1px solid #e3e3e3;
            overflow:hidden!important
        }
        `]
            }] }
];
/** @nocollapse */
TimePickerPanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UpdateHostClassService },
    { type: ChangeDetectorRef }
];
TimePickerPanelComponent.propDecorators = {
    timeValueAccessorDirective: [{ type: ViewChild, args: [TimeValueAccessorDirective,] }],
    hourListElement: [{ type: ViewChild, args: ['hourListElement',] }],
    minuteListElement: [{ type: ViewChild, args: ['minuteListElement',] }],
    secondListElement: [{ type: ViewChild, args: ['secondListElement',] }],
    use12HoursListElement: [{ type: ViewChild, args: ['use12HoursListElement',] }],
    inDatePicker: [{ type: Input }],
    addOn: [{ type: Input }],
    hideDisabledOptions: [{ type: Input }],
    clearText: [{ type: Input }],
    placeholder: [{ type: Input }],
    selectCurrentTimeWhenNull: [{ type: Input }],
    showHeader: [{ type: Input }],
    use12Hours: [{ type: Input }],
    allowEmpty: [{ type: Input }],
    opened: [{ type: Input }],
    defaultOpenValue: [{ type: Input }],
    disabledHours: [{ type: Input }],
    disabledMinutes: [{ type: Input }],
    disabledSeconds: [{ type: Input }],
    format: [{ type: Input }],
    hourStep: [{ type: Input }],
    minuteStep: [{ type: Input }],
    secondStep: [{ type: Input }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    timePanelTitle: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimePickerLocaleService {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.localeConfig = {
            'zh-CHS': {
                placeholder: '请选择时间',
                time: {
                    hour: '时', minute: '分', seconds: '秒'
                }
            },
            'en': {
                placeholder: 'Please select a time',
                time: {
                    hour: 'h', minute: 'min', seconds: 's'
                }
            },
            'zh-CHT': {
                placeholder: '請選擇時間',
                time: {
                    hour: '時', minute: '分', seconds: '秒'
                }
            }
        };
    }
    /**
     * @return {?}
     */
    getLocaleConfig() {
        /** @type {?} */
        const locale = this.localeService.localeId;
        if (locale && this.localeConfig[locale]) {
            return this.localeConfig[locale];
        }
        else {
            return this.localeConfig['zh-CHS'];
        }
    }
}
TimePickerLocaleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TimePickerLocaleService.ctorParameters = () => [
    { type: LocaleService }
];
/** @nocollapse */ TimePickerLocaleService.ngInjectableDef = defineInjectable({ factory: function TimePickerLocaleService_Factory() { return new TimePickerLocaleService(inject(LocaleService)); }, token: TimePickerLocaleService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let num = 0;
class TimePickerComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} vcRef
     * @param {?} cfr
     * @param {?} cdr
     * @param {?} localeService
     */
    constructor(element, renderer, vcRef, cfr, cdr, localeService) {
        this.element = element;
        this.renderer = renderer;
        this.vcRef = vcRef;
        this.cfr = cfr;
        this.cdr = cdr;
        this.localeService = localeService;
        this.hostCls = true;
        this._disabled = false;
        this._readonly = false;
        this._editable = true;
        this._allowEmpty = true;
        this._autoFocus = false;
        this._hideDisabledOptions = false;
        this.cRef = null;
        this.isInit = false;
        this.groupIcon = '<i class="f-icon f-icon-timepicker"></i>';
        this.display = 'block';
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.clearText = 'clear';
        this.popupClassName = '';
        this.defaultOpenValue = new Date();
        this.format = 'HH:mm:ss';
        this.isOpen = false;
        this.showHeader = false;
        this.openChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.clear = new EventEmitter();
        this._use12Hours = false;
        this.changeFlag = false;
        this.localConfig = null;
        this.overLayService = new OverLayHiddenService();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set use12Hours(value) {
        this._use12Hours = !!value;
        if (value && this.format) {
            this.format = this.format.replace(/H/g, 'h');
        }
        else if (!value && this.format) {
            this.format = this.format.replace(/h/g, 'H');
        }
        if (this._use12Hours) {
            if (!this.format) {
                this.format = 'hh:mm:ss a';
            }
            else {
                if (this.format.indexOf('a') === -1) {
                    this.format = this.format + ' a';
                }
            }
        }
    }
    /**
     * @return {?}
     */
    get use12Hours() {
        return this._use12Hours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hideDisabledOptions(value) {
        this._hideDisabledOptions = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideDisabledOptions() {
        return this._hideDisabledOptions;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowEmpty(value) {
        this._allowEmpty = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get allowEmpty() {
        return this._allowEmpty;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoFocus(value) {
        this._autoFocus = toBoolean(value);
        this.updateAutoFocus();
    }
    /**
     * @return {?}
     */
    get autoFocus() {
        return this._autoFocus;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set readonly(value) {
        this._readonly = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set editable(value) {
        this._editable = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get editable() {
        return this._editable;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
        if (this._onChange) {
            this._onChange(this.value);
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.localeService) {
            this.localConfig = this.localeService.getLocaleConfig();
            this.placeholder = this.placeholder ?
                this.placeholder :
                this.localConfig.placeholder ? this.localConfig.placeholder : '请选择时间';
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { use12Hours } = changes;
        if (use12Hours && (!this.format || this.format.indexOf('a') === -1)) {
            if (this.use12Hours) {
                this.format = this.format + ' a';
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.isInit = true;
        this.updateAutoFocus();
        if (!document.body.querySelector('.time-picker-overlay')) {
            this.overlayRef = this.renderer.createElement('div');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayRef, 'time-picker-overlay');
            this.renderer.addClass(this.overlayPanelRef, `overlay-panel-${num++}`);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
            document.body.appendChild(this.overlayRef);
        }
        else {
            this.overlayRef = document.body.querySelector('.time-picker-overlay');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayPanelRef, `overlay-panel-${num++}`);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
        }
        this.overlayRef.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
        }));
        this.timeInput.nativeElement.addEventListener('blur', (/**
         * @return {?}
         */
        () => {
            this.onBlur();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.timeInput.nativeElement.removeEventListener('blur', this.onBlur);
        this.overLayService.destory(this.element.nativeElement);
        this.overLayService = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        if (this.timeInput.nativeElement.value &&
            !this.readonly &&
            !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = '';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        if (!this.readonly && !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = 'none';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    open(event) {
        event.stopPropagation();
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.isOpen) {
            this.close();
            return;
        }
        this.creatPanel();
        this.isOpen = true;
        this.openChange.emit(this.isOpen);
        this.renderer.appendChild(this.overlayPanelRef, this.cRef.location.nativeElement);
        this.renderer.setStyle(this.overlayRef, 'display', 'block');
        this.renderer.setStyle(this.overlayRef, 'zIndex', '8888888888');
        this.overLayService.registerMouseEvent(this.element.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.cRef && this.cRef.location.nativeElement.contains(e.target)) {
                return;
            }
            this.renderer.setStyle(this.overlayRef, 'display', 'none');
            this.close();
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setPosition();
            this.renderer.addClass(this.cRef.location.nativeElement, 'f-area-show');
        }), 10);
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
        this.cRef.instance.opened = false;
        this.renderer.removeClass(this.cRef.location.nativeElement, 'f-area-show');
        while (this.overlayPanelRef.lastChild) {
            this.overlayPanelRef.removeChild(this.overlayPanelRef.lastChild);
        }
        this.openChange.emit(this.isOpen);
        this.focus();
        if (this.cRef) {
            this.cRef.destroy();
            this.cRef = null;
        }
        this.overLayService.destory(this.element.nativeElement);
        this.renderer.removeStyle(this.overlayRef, 'zIndex');
    }
    /**
     * @return {?}
     */
    creatPanel() {
        if (this.cRef === null) {
            this.vcRef.clear();
            this.cRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(TimePickerPanelComponent));
            this.cRef.location.nativeElement.classList.add('f-area-hide');
            // 解决在grid懒加载中，没有刷新视图的问题
            this.cRef.changeDetectorRef.detectChanges();
            this.cRef.instance.format = this.format;
            this.cRef.instance.hourStep = this.hourStep;
            this.cRef.instance.minuteStep = this.minuteStep;
            this.cRef.instance.secondStep = this.secondStep;
            this.cRef.instance.disabledHours = this.disabledHours;
            this.cRef.instance.disabledMinutes = this.disabledMinutes;
            this.cRef.instance.disabledSeconds = this.disabledSeconds;
            this.cRef.instance.hideDisabledOptions = this.hideDisabledOptions;
            this.cRef.instance.use12Hours = this.use12Hours;
            this.cRef.instance.opened = this.isOpen;
            this.cRef.instance.defaultOpenValue = this.defaultOpenValue;
            this.cRef.instance.value = this.value;
            this.cRef.instance.showHeader = this.showHeader;
            this.cRef.instance.timePanelTitle = this.localConfig.time;
            this.cRef.instance.valueChange.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                this.value = val;
                this.cdr.detectChanges();
                this.valueChange.emit(val);
            }));
        }
        else {
            this.cRef.instance.value = this.value;
        }
    }
    /**
     * @return {?}
     */
    setPosition() {
        const { top: elTop, left: elLeft, height: elHeight, width: elWidth } = this.element.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const panelHeight = 194;
        if (elTop + panelHeight + 30 > window.innerHeight) {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', `${elTop - panelHeight}px`);
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', `${elTop + elHeight}px`);
        }
        /** @type {?} */
        const panelWidth = this.cRef.instance.panelWidth;
        if (window.innerWidth - elLeft < panelWidth) {
            /** @type {?} */
            const r = window.innerWidth - elLeft - elWidth;
            this.renderer.setStyle(this.cRef.location.nativeElement, 'right', `${r}px`);
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'left', `${elLeft}px`);
        }
        this.cRef.instance.opened = true;
    }
    /**
     * @return {?}
     */
    updateAutoFocus() {
    }
    /**
     * @return {?}
     */
    onClickClearBtn() {
        this.value = null;
        this.cRef.instance.time.clear();
    }
    /**
     * @return {?}
     */
    focus() {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    blur() {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.blur();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.value) {
            /** @type {?} */
            const date = convertToDate(this.value, this.format);
            if (this.cRef) {
                this.cRef.instance.value = this.value;
            }
            this.value = convertToStr(date, this.format);
            if (this.changeFlag) {
                this.valueChange.emit(this.value);
                this.changeFlag = false;
            }
            if (this._onTouched) {
                this._onTouched(this.value);
            }
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onValueChange(val) {
        this.changeFlag = true;
    }
    /**
     * @return {?}
     */
    onClear() {
        this.clear.emit();
        this.value = '';
        if (this.cRef && this.cRef.instance) {
            this.cRef.instance.time.clear();
        }
        if (this._onTouched) {
            this._onTouched(this.value);
        }
        this.cdr.detectChanges();
    }
    /**
     * @param {?} time
     * @return {?}
     */
    writeValue(time) {
        this._value = time;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
}
TimePickerComponent.decorators = [
    { type: Component, args: [{
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                // tslint:disable-next-line:component-selector
                selector: 'farris-time-picker',
                exportAs: 'timePicker',
                // styleUrls: ['./style/index.scss'],
                template: "<!-- <input-group\r\n    [groupText]=\"groupIcon\"\r\n    #inputgroup\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [(ngModel)]=\"value\"\r\n    (valueChange)=\"onValueChange($event)\"\r\n    [enableClear]=\"true\"\r\n    (clickHandle)=\"open()\"\r\n    (clear)=\"onClear()\"\r\n    [placeholder]=\"placeholder\"\r\n></input-group> -->\r\n<div\r\n    class=\"input-group\"\r\n    [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly && !disabled,\r\n        'f-state-editable': editable && !disabled && !readonly\r\n    }\"\r\n>\r\n    <input\r\n        type=\"text\"\r\n        class=\"form-control f-utils-fill\"\r\n        [attr.placeholder]=\"disabled || readonly?'':placeholder\"\r\n        name=\"farris-time-picker\"\r\n        [(ngModel)]=\"value\"\r\n        (ngModelChange)=\"onValueChange($event)\"\r\n        #timeInput\r\n        autocomplete=\"off\"\r\n        [readonly]=\"readonly || !editable\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"open($event)\"\r\n    />\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!readonly && !disabled\">\r\n        <span class=\"input-group-text input-group-clear f-cmp-iconbtn\" (click)=\"onClear()\"  style=\"display: none;padding:0px 4px;\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n\r\n        <span class=\"input-group-text f-cmp-iconbtn\" (click)=\"open($event)\" style=\"padding:0px 4px;padding-top: 2px;\">\r\n            <i class=\"f-icon f-icon-timepicker\" style=\"font-size:0.85rem\"></i>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                animations: [slideMotion],
                providers: [
                    UpdateHostClassService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimePickerComponent,
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
TimePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: TimePickerLocaleService }
];
TimePickerComponent.propDecorators = {
    timeInput: [{ type: ViewChild, args: ['timeInput',] }],
    hostCls: [{ type: HostBinding, args: ['class.f-component-timepicker',] }],
    display: [{ type: HostBinding, args: ['style.display',] }],
    hourStep: [{ type: Input }],
    minuteStep: [{ type: Input }],
    secondStep: [{ type: Input }],
    clearText: [{ type: Input }],
    popupClassName: [{ type: Input }],
    placeholder: [{ type: Input }],
    addOn: [{ type: Input }],
    defaultOpenValue: [{ type: Input }],
    disabledHours: [{ type: Input }],
    disabledMinutes: [{ type: Input }],
    disabledSeconds: [{ type: Input }],
    format: [{ type: Input }],
    isOpen: [{ type: Input }],
    showHeader: [{ type: Input }],
    use12Hours: [{ type: Input }],
    openChange: [{ type: Output }],
    valueChange: [{ type: Output }],
    clear: [{ type: Output }],
    hideDisabledOptions: [{ type: Input }],
    allowEmpty: [{ type: Input }],
    autoFocus: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimePickerModule {
}
TimePickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TimePickerComponent,
                    TimePickerPanelComponent,
                    TimeValueAccessorDirective
                ],
                entryComponents: [TimePickerPanelComponent],
                exports: [TimePickerPanelComponent, TimePickerComponent],
                imports: [CommonModule, FormsModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TimePickerComponent, TimePickerModule, TimePickerPanelComponent, TimeValueAccessorDirective, AnimationDuration, AnimationCurves, slideMotion, UpdateHostClassService, TimePickerLocaleService };

//# sourceMappingURL=farris-ui-time-picker.js.map