/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { format as fnsFormat, parse as fnsParse } from 'date-fns';
/**
 * @param {?} value
 * @return {?}
 */
export function toBoolean(value) {
    return !!value;
}
/**
 * @param {?} value
 * @param {?=} format
 * @return {?}
 */
export function convertToDate(value, format) {
    if (format === void 0) { format = 'hh:mm:ss'; }
    if (!value || !format) {
        return;
    }
    // let hours = '0';
    // let minutes = '0';
    // let seconds = '0';
    // const formatSArr = format.split(' ')[0];
    // const formatEArr = format.split(' ')[1];
    // const formatArr = formatSArr.split(':');
    // const textArr = value.split(' ')[0].split(':');
    // // tslint:disable-next-line:variable-name
    // const AMOrPM = value.split(' ')[1];
    // formatArr.forEach((item: string, index: number) => {
    //     item = item.toUpperCase();
    //     if (item === 'H' || item === 'HH') {
    //         hours = textArr[index];
    //     } else if (item === 'M' || item === 'MM') {
    //         minutes = textArr[index];
    //     } else if (item === 'S' || item === 'SS') {
    //         seconds = textArr[index];
    //     } else if (item === 'A') {
    //     }
    // });
    // if (formatEArr && formatEArr.toUpperCase() === 'A') {
    //     if (AMOrPM === 'PM') {
    //         hours = Number(hours) + 12 + '';
    //     }
    // }
    // return new Date(
    //     1970,
    //     0,
    //     1,
    //     Number(hours),
    //     Number(minutes),
    //     Number(seconds)
    // );
    if (format.indexOf('ss') === -1 && value.split(':').length === 3) {
        format = format + ':ss';
    }
    return fnsParse(value, format, new Date());
}
/**
 * @param {?} date
 * @param {?=} format
 * @param {?=} selected12Hours
 * @return {?}
 */
export function convertToStr(date, format, selected12Hours) {
    if (format === void 0) { format = 'hh:mm:ss'; }
    if (selected12Hours === void 0) { selected12Hours = 'AM'; }
    if (!date || isNaN(date.getTime())) {
        return '';
    }
    // let _hours = date.getHours();
    // selected12Hours = selected12Hours ? selected12Hours : 'AM';
    // if (selected12Hours === 'PM') {
    //     _hours = _hours > 12 ? _hours - 12 : _hours;
    // }
    // const hours = addZero(_hours);
    // const minutes = addZero(date.getMinutes());
    // const seconds = addZero(date.getSeconds());
    // if (format.indexOf('a') >= 0 || format.indexOf('A') >= 0) {
    //     format = format.replace(/a/i, selected12Hours);
    // }
    // if (format.indexOf('hh') >= 0 || format.indexOf('HH') >= 0) {
    //     format = format.replace(/hh/i, hours);
    // } else if (format.indexOf('h') >= 0 || format.indexOf('H') >= 0) {
    //     format = format.replace(/h/i, hours);
    // }
    // if (format.indexOf('mm') >= 0 || format.indexOf('MM') >= 0) {
    //     format = format.replace(/mm/i, minutes);
    // } else if (format.indexOf('m') >= 0 || format.indexOf('M') >= 0) {
    //     format = format.replace(/m/i, minutes);
    // }
    // if (format.indexOf('ss') >= 0 || format.indexOf('SS') >= 0) {
    //     format = format.replace(/ss/i, seconds);
    // } else if (format.indexOf('s') >= 0 || format.indexOf('S') >= 0) {
    //     format = format.replace(/s/i, seconds);
    // }
    // return format;
    return fnsFormat(date, format);
}
/**
 * @param {?} val
 * @return {?}
 */
export function addZero(val) {
    val = String(val);
    if (val.length === 1) {
        return '0' + val;
    }
    return val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdGltZS1waWNrZXIvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvY29udmVydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxTQUFTLEVBQUUsS0FBSyxJQUFJLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFFbEUsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUF1QjtJQUM3QyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDbkIsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxLQUFhLEVBQUUsTUFBMkI7SUFBM0IsdUJBQUEsRUFBQSxtQkFBMkI7SUFDcEUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNuQixPQUFPO0tBQ1Y7SUFDRCxtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNyQiwyQ0FBMkM7SUFDM0MsMkNBQTJDO0lBQzNDLDJDQUEyQztJQUMzQyxrREFBa0Q7SUFDbEQsNENBQTRDO0lBQzVDLHNDQUFzQztJQUN0Qyx1REFBdUQ7SUFDdkQsaUNBQWlDO0lBQ2pDLDJDQUEyQztJQUMzQyxrQ0FBa0M7SUFDbEMsa0RBQWtEO0lBQ2xELG9DQUFvQztJQUNwQyxrREFBa0Q7SUFDbEQsb0NBQW9DO0lBQ3BDLGlDQUFpQztJQUNqQyxRQUFRO0lBQ1IsTUFBTTtJQUNOLHdEQUF3RDtJQUN4RCw2QkFBNkI7SUFDN0IsMkNBQTJDO0lBQzNDLFFBQVE7SUFDUixJQUFJO0lBQ0osbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixTQUFTO0lBQ1QsU0FBUztJQUNULHFCQUFxQjtJQUNyQix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLEtBQUs7SUFFTCxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzlELE1BQU0sR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO0tBQzNCO0lBRUQsT0FBTyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7QUFDL0MsQ0FBQzs7Ozs7OztBQUVELE1BQU0sVUFBVSxZQUFZLENBQ3hCLElBQVUsRUFDVixNQUEyQixFQUMzQixlQUFzQjtJQUR0Qix1QkFBQSxFQUFBLG1CQUEyQjtJQUMzQixnQ0FBQSxFQUFBLHNCQUFzQjtJQUV0QixJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtRQUNoQyxPQUFPLEVBQUUsQ0FBQztLQUNiO0lBQ0QsZ0NBQWdDO0lBQ2hDLDhEQUE4RDtJQUM5RCxrQ0FBa0M7SUFDbEMsbURBQW1EO0lBQ25ELElBQUk7SUFDSixpQ0FBaUM7SUFDakMsOENBQThDO0lBQzlDLDhDQUE4QztJQUM5Qyw4REFBOEQ7SUFDOUQsc0RBQXNEO0lBQ3RELElBQUk7SUFDSixnRUFBZ0U7SUFDaEUsNkNBQTZDO0lBQzdDLHFFQUFxRTtJQUNyRSw0Q0FBNEM7SUFDNUMsSUFBSTtJQUNKLGdFQUFnRTtJQUNoRSwrQ0FBK0M7SUFDL0MscUVBQXFFO0lBQ3JFLDhDQUE4QztJQUM5QyxJQUFJO0lBQ0osZ0VBQWdFO0lBQ2hFLCtDQUErQztJQUMvQyxxRUFBcUU7SUFDckUsOENBQThDO0lBQzlDLElBQUk7SUFDSixpQkFBaUI7SUFDakIsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxHQUFRO0lBQzVCLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNsQixPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUM7S0FDcEI7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXQgYXMgZm5zRm9ybWF0LCBwYXJzZSBhcyBmbnNQYXJzZSB9IGZyb20gJ2RhdGUtZm5zJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4odmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvRGF0ZSh2YWx1ZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZyA9ICdoaDptbTpzcycpOiBEYXRlIHtcclxuICAgIGlmICghdmFsdWUgfHwgIWZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGxldCBob3VycyA9ICcwJztcclxuICAgIC8vIGxldCBtaW51dGVzID0gJzAnO1xyXG4gICAgLy8gbGV0IHNlY29uZHMgPSAnMCc7XHJcbiAgICAvLyBjb25zdCBmb3JtYXRTQXJyID0gZm9ybWF0LnNwbGl0KCcgJylbMF07XHJcbiAgICAvLyBjb25zdCBmb3JtYXRFQXJyID0gZm9ybWF0LnNwbGl0KCcgJylbMV07XHJcbiAgICAvLyBjb25zdCBmb3JtYXRBcnIgPSBmb3JtYXRTQXJyLnNwbGl0KCc6Jyk7XHJcbiAgICAvLyBjb25zdCB0ZXh0QXJyID0gdmFsdWUuc3BsaXQoJyAnKVswXS5zcGxpdCgnOicpO1xyXG4gICAgLy8gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcclxuICAgIC8vIGNvbnN0IEFNT3JQTSA9IHZhbHVlLnNwbGl0KCcgJylbMV07XHJcbiAgICAvLyBmb3JtYXRBcnIuZm9yRWFjaCgoaXRlbTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAvLyAgICAgaXRlbSA9IGl0ZW0udG9VcHBlckNhc2UoKTtcclxuICAgIC8vICAgICBpZiAoaXRlbSA9PT0gJ0gnIHx8IGl0ZW0gPT09ICdISCcpIHtcclxuICAgIC8vICAgICAgICAgaG91cnMgPSB0ZXh0QXJyW2luZGV4XTtcclxuICAgIC8vICAgICB9IGVsc2UgaWYgKGl0ZW0gPT09ICdNJyB8fCBpdGVtID09PSAnTU0nKSB7XHJcbiAgICAvLyAgICAgICAgIG1pbnV0ZXMgPSB0ZXh0QXJyW2luZGV4XTtcclxuICAgIC8vICAgICB9IGVsc2UgaWYgKGl0ZW0gPT09ICdTJyB8fCBpdGVtID09PSAnU1MnKSB7XHJcbiAgICAvLyAgICAgICAgIHNlY29uZHMgPSB0ZXh0QXJyW2luZGV4XTtcclxuICAgIC8vICAgICB9IGVsc2UgaWYgKGl0ZW0gPT09ICdBJykge1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0pO1xyXG4gICAgLy8gaWYgKGZvcm1hdEVBcnIgJiYgZm9ybWF0RUFyci50b1VwcGVyQ2FzZSgpID09PSAnQScpIHtcclxuICAgIC8vICAgICBpZiAoQU1PclBNID09PSAnUE0nKSB7XHJcbiAgICAvLyAgICAgICAgIGhvdXJzID0gTnVtYmVyKGhvdXJzKSArIDEyICsgJyc7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gcmV0dXJuIG5ldyBEYXRlKFxyXG4gICAgLy8gICAgIDE5NzAsXHJcbiAgICAvLyAgICAgMCxcclxuICAgIC8vICAgICAxLFxyXG4gICAgLy8gICAgIE51bWJlcihob3VycyksXHJcbiAgICAvLyAgICAgTnVtYmVyKG1pbnV0ZXMpLFxyXG4gICAgLy8gICAgIE51bWJlcihzZWNvbmRzKVxyXG4gICAgLy8gKTtcclxuXHJcbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ3NzJykgPT09IC0xICYmIHZhbHVlLnNwbGl0KCc6JykubGVuZ3RoID09PSAzKSB7XHJcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0ICsgJzpzcyc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZuc1BhcnNlKHZhbHVlLCBmb3JtYXQsIG5ldyBEYXRlKCkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvU3RyKFxyXG4gICAgZGF0ZTogRGF0ZSxcclxuICAgIGZvcm1hdDogc3RyaW5nID0gJ2hoOm1tOnNzJyxcclxuICAgIHNlbGVjdGVkMTJIb3VycyA9ICdBTSdcclxuKSB7XHJcbiAgICBpZiAoIWRhdGUgfHwgaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgLy8gbGV0IF9ob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcclxuICAgIC8vIHNlbGVjdGVkMTJIb3VycyA9IHNlbGVjdGVkMTJIb3VycyA/IHNlbGVjdGVkMTJIb3VycyA6ICdBTSc7XHJcbiAgICAvLyBpZiAoc2VsZWN0ZWQxMkhvdXJzID09PSAnUE0nKSB7XHJcbiAgICAvLyAgICAgX2hvdXJzID0gX2hvdXJzID4gMTIgPyBfaG91cnMgLSAxMiA6IF9ob3VycztcclxuICAgIC8vIH1cclxuICAgIC8vIGNvbnN0IGhvdXJzID0gYWRkWmVybyhfaG91cnMpO1xyXG4gICAgLy8gY29uc3QgbWludXRlcyA9IGFkZFplcm8oZGF0ZS5nZXRNaW51dGVzKCkpO1xyXG4gICAgLy8gY29uc3Qgc2Vjb25kcyA9IGFkZFplcm8oZGF0ZS5nZXRTZWNvbmRzKCkpO1xyXG4gICAgLy8gaWYgKGZvcm1hdC5pbmRleE9mKCdhJykgPj0gMCB8fCBmb3JtYXQuaW5kZXhPZignQScpID49IDApIHtcclxuICAgIC8vICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvYS9pLCBzZWxlY3RlZDEySG91cnMpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gaWYgKGZvcm1hdC5pbmRleE9mKCdoaCcpID49IDAgfHwgZm9ybWF0LmluZGV4T2YoJ0hIJykgPj0gMCkge1xyXG4gICAgLy8gICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9oaC9pLCBob3Vycyk7XHJcbiAgICAvLyB9IGVsc2UgaWYgKGZvcm1hdC5pbmRleE9mKCdoJykgPj0gMCB8fCBmb3JtYXQuaW5kZXhPZignSCcpID49IDApIHtcclxuICAgIC8vICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvaC9pLCBob3Vycyk7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBpZiAoZm9ybWF0LmluZGV4T2YoJ21tJykgPj0gMCB8fCBmb3JtYXQuaW5kZXhPZignTU0nKSA+PSAwKSB7XHJcbiAgICAvLyAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL21tL2ksIG1pbnV0ZXMpO1xyXG4gICAgLy8gfSBlbHNlIGlmIChmb3JtYXQuaW5kZXhPZignbScpID49IDAgfHwgZm9ybWF0LmluZGV4T2YoJ00nKSA+PSAwKSB7XHJcbiAgICAvLyAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL20vaSwgbWludXRlcyk7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBpZiAoZm9ybWF0LmluZGV4T2YoJ3NzJykgPj0gMCB8fCBmb3JtYXQuaW5kZXhPZignU1MnKSA+PSAwKSB7XHJcbiAgICAvLyAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL3NzL2ksIHNlY29uZHMpO1xyXG4gICAgLy8gfSBlbHNlIGlmIChmb3JtYXQuaW5kZXhPZigncycpID49IDAgfHwgZm9ybWF0LmluZGV4T2YoJ1MnKSA+PSAwKSB7XHJcbiAgICAvLyAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL3MvaSwgc2Vjb25kcyk7XHJcbiAgICAvLyB9XHJcbiAgICAvLyByZXR1cm4gZm9ybWF0O1xyXG4gICAgcmV0dXJuIGZuc0Zvcm1hdChkYXRlLCBmb3JtYXQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkWmVybyh2YWw6IGFueSkge1xyXG4gICAgdmFsID0gU3RyaW5nKHZhbCk7XHJcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiAnMCcgKyB2YWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsO1xyXG59XHJcbiJdfQ==