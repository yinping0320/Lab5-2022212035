/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, TemplateRef, ViewChild, ViewEncapsulation, Output, EventEmitter, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { UpdateHostClassService as UpdateCls } from './services/update-host-class.service';
import { isNotNil } from './utils/check';
import { reqAnimFrame } from '@farris/ui-common';
import { TimeValueAccessorDirective } from './time-value-accessor.directive';
import { TimeHolder } from './time-holder';
import { convertToDate, convertToStr } from './utils/convert';
/**
 * @param {?} length
 * @param {?=} step
 * @param {?=} start
 * @return {?}
 */
function makeRange(length, step, start) {
    if (step === void 0) { step = 1; }
    if (start === void 0) { start = 0; }
    step = Math.ceil(step);
    return new Array(Math.ceil(length / step))
        .fill(0)
        .map((/**
     * @param {?} _
     * @param {?} i
     * @return {?}
     */
    function (_, i) { return (i + start) * step; }));
}
var TimePickerPanelComponent = /** @class */ (function () {
    function TimePickerPanelComponent(element, updateCls, cdr) {
        this.element = element;
        this.updateCls = updateCls;
        this.cdr = cdr;
        this._hourStep = 1;
        this._minuteStep = 1;
        this._secondStep = 1;
        this.unsubscribe$ = new Subject();
        this._format = 'HH:mm:ss';
        this._defaultOpenValue = new Date();
        this._opened = false;
        this._allowEmpty = true;
        this._value = '';
        this.prefixCls = 'time-picker-panel';
        this.time = new TimeHolder();
        this.hourEnabled = true;
        this.minuteEnabled = true;
        this.secondEnabled = true;
        this.enabledColumns = 3;
        this.inDatePicker = false; // If inside a date-picker, more diff works need to be done
        this.hideDisabledOptions = false;
        /**
         * 当value 为空时选中当前时间，默认为 true
         */
        this.selectCurrentTimeWhenNull = true;
        this.showHeader = false;
        this.panelWidth = 0;
        this.valueChange = new EventEmitter();
        this._use12Hours = false;
        this.timePanelTitle = null;
        this.trackByItems = (/**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        function (index, item) {
            return index;
        });
    }
    Object.defineProperty(TimePickerPanelComponent.prototype, "use12Hours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._use12Hours;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._use12Hours = !!value;
            if (!this._use12Hours) {
                this.format = this.format ? (this.format + '').replace(/h/g, 'H') : '';
            }
            else {
                this.format = this.format ? (this.format + '').replace(/H/g, 'h') : '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "allowEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this._allowEmpty;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._allowEmpty = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "opened", {
        get: /**
         * @return {?}
         */
        function () {
            return this._opened;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._opened = value;
            if (this.opened) {
                this.initPosition();
                this.selectInputRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "defaultOpenValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultOpenValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._defaultOpenValue = value;
                this.time.setDefaultOpenValue(this.defaultOpenValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "disabledHours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledHours;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledHours = value;
            if (this._disabledHours) {
                this.buildHours();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "disabledMinutes", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledMinutes;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._disabledMinutes = value;
                this.buildMinutes();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "disabledSeconds", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledSeconds;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._disabledSeconds = value;
                this.buildSeconds();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._format;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._format = value;
                this.enabledColumns = 0;
                /** @type {?} */
                var charSet = new Set(value);
                this.hourEnabled = charSet.has('H') || charSet.has('h');
                this.minuteEnabled = charSet.has('m');
                this.secondEnabled = charSet.has('s');
                if (this.hourEnabled) {
                    this.enabledColumns++;
                }
                if (this.minuteEnabled) {
                    this.enabledColumns++;
                }
                if (this.secondEnabled) {
                    this.enabledColumns++;
                }
                if (this.use12Hours) {
                    this.enabledColumns++;
                    this.build12Hours();
                }
                this.panelWidth = this.enabledColumns * 66;
                this.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "hourStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hourStep;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._hourStep = value;
                this.time.hourStep = value;
                this.buildHours();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "minuteStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minuteStep;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._minuteStep = value;
                this.time.minuteStep = value;
                this.buildMinutes();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "secondStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this._secondStep;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._secondStep = value;
                this.time.secondStep = value;
                this.buildSeconds();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            this._value = this.time.text;
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this.time.text = value;
                /** @type {?} */
                var _value = convertToDate(this.time.text, this.format);
                this.time.setValue(_value, this.use12Hours);
                this.buildTimes();
                this.cdr.markForCheck();
            }
            else {
                this.time.setUse12Hours(this.use12Hours);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.inDatePicker) {
            this.prefixCls = 'calendar-time-picker';
        }
        this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dateObj = {
                hours: _this.time.hours,
                minutes: _this.time.minutes,
                seconds: _this.time.seconds
            };
            _this.time.text = convertToStr(_this.time.value, _this.format, _this.time.selected12Hours);
            _this.changed();
            _this.touched();
            _this.valueChange.emit(_this.time.text);
        }));
        this.buildTimes();
        this.setClassMap();
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.opened) {
            this.initPosition();
        }
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var use12Hours = changes.use12Hours;
        if (use12Hours &&
            !use12Hours.previousValue &&
            use12Hours.currentValue) {
            this.build12Hours();
            this.enabledColumns++;
        }
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectInputRange = /**
     * @return {?}
     */
    function () {
        if (this.timeValueAccessorDirective) {
            this.timeValueAccessorDirective.setRange();
        }
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildHours = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var hourRanges = 24;
        /** @type {?} */
        var disabledHours = this.disabledHours && this.disabledHours();
        /** @type {?} */
        var startIndex = 0;
        if (this.use12Hours) {
            hourRanges = 12;
            if (disabledHours) {
                if (this.time.selected12Hours === 'PM') {
                    /**
                     * Filter and transform hours which greater or equal to 12
                     * [0, 1, 2, ..., 12, 13, 14, 15, ..., 23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i >= 12; }))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return (i > 12 ? i - 12 : i); }));
                }
                else {
                    /**
                     * Filter and transform hours which less than 12
                     * [0, 1, 2,..., 12, 13, 14, 15, ...23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i < 12 || i === 24; }))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return (i === 24 || i === 0 ? 12 : i); }));
                }
            }
            startIndex = 1;
        }
        this.hourRange = makeRange(hourRanges, this.hourStep, startIndex).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledHours && disabledHours.indexOf(r) !== -1
            };
        }));
        if (this.use12Hours &&
            this.hourRange[this.hourRange.length - 1].index === 12) {
            /** @type {?} */
            var temp = tslib_1.__spread(this.hourRange);
            temp.unshift(temp[temp.length - 1]);
            temp.splice(temp.length - 1, 1);
            this.hourRange = temp;
        }
        // 移除禁用的值
        this.hourRange = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(_this.hideDisabledOptions && n.disabled);
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildMinutes = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.minuteRange = makeRange(60, this.minuteStep).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledMinutes &&
                    _this.disabledMinutes((/** @type {?} */ (_this.time.hours))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.minuteRange = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(_this.hideDisabledOptions && n.disabled);
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildSeconds = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.secondRange = makeRange(60, this.secondStep).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledSeconds &&
                    _this.disabledSeconds((/** @type {?} */ (_this.time.hours)), (/** @type {?} */ (_this.time.minutes))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.secondRange = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(_this.hideDisabledOptions && n.disabled);
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.build12Hours = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var isUpperForamt = this._format.includes('A');
        this.use12HoursRange = [
            {
                index: 0,
                value: isUpperForamt ? 'AM' : 'am'
            },
            {
                index: 1,
                value: isUpperForamt ? 'PM' : 'pm'
            }
        ];
        // 移除禁用的值
        this.use12HoursRange = this.use12HoursRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !_this.hideDisabledOptions;
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildTimes = /**
     * @return {?}
     */
    function () {
        this.buildHours();
        this.buildMinutes();
        this.buildSeconds();
        this.build12Hours();
    };
    /**
     * @param {?} event
     * @param {?} hour
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectHour = /**
     * @param {?} event
     * @param {?} hour
     * @return {?}
     */
    function (event, hour) {
        var _this = this;
        event.stopPropagation();
        this.time.setHours(hour.index, hour.disabled);
        if (hour.disabled) {
            return;
        }
        this.scrollToSelected(this.hourListElement.nativeElement, hour.index, 120, 'hour');
        if (this._disabledMinutes) {
            this.buildMinutes();
            /** @type {?} */
            var minutes = this.minuteRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (!minutes.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.index === _this.time.minutes; }))) {
                var _a = minutes[0], index = _a.index, disabled = _a.disabled;
                this.time.setMinutes(index, disabled);
            }
        }
        if (this._disabledSeconds || this._disabledMinutes) {
            this.buildSeconds();
        }
    };
    /**
     * @param {?} event
     * @param {?} minute
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectMinute = /**
     * @param {?} event
     * @param {?} minute
     * @return {?}
     */
    function (event, minute) {
        var _this = this;
        event.stopPropagation();
        this.time.setMinutes(minute.index, minute.disabled);
        if (minute.disabled) {
            return;
        }
        this.scrollToSelected(this.minuteListElement.nativeElement, minute.index, 120, 'minute');
        if (this._disabledSeconds) {
            this.buildSeconds();
            /** @type {?} */
            var seconds = this.secondRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (!seconds.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.index === _this.time.seconds; }))) {
                var _a = seconds[0], index = _a.index, disabled = _a.disabled;
                this.time.setSeconds(index, disabled);
            }
        }
    };
    /**
     * @param {?} event
     * @param {?} second
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectSecond = /**
     * @param {?} event
     * @param {?} second
     * @return {?}
     */
    function (event, second) {
        event.stopPropagation();
        this.time.setSeconds(second.index, second.disabled);
        if (second.disabled) {
            return;
        }
        this.scrollToSelected(this.secondListElement.nativeElement, second.index, 120, 'second');
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    TimePickerPanelComponent.prototype.select12Hours = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        event.stopPropagation();
        this.time.selected12Hours = value.value;
        if (this._disabledHours) {
            this.buildHours();
        }
        if (this._disabledMinutes) {
            this.buildMinutes();
        }
        if (this._disabledSeconds) {
            this.buildSeconds();
        }
        this.scrollToSelected(this.use12HoursListElement.nativeElement, value.index, 120, '12-hour');
    };
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    TimePickerPanelComponent.prototype.scrollToSelected = /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    function (instance, index, duration, unit) {
        if (duration === void 0) { duration = 0; }
        /** @type {?} */
        var transIndex = this.translateIndex(index, unit);
        /** @type {?} */
        var currentOption = (/** @type {?} */ ((instance.children[0].children[transIndex] ||
            instance.children[0].children[0])));
        this.scrollTo(instance, currentOption.offsetTop, duration);
    };
    /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    TimePickerPanelComponent.prototype.translateIndex = /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    function (index, unit) {
        if (unit === 'hour') {
            /** @type {?} */
            var disabledHours = this.disabledHours && this.disabledHours();
            return this.calcIndex(disabledHours, this.hourRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
        else if (unit === 'minute') {
            /** @type {?} */
            var disabledMinutes = this.disabledMinutes && this.disabledMinutes((/** @type {?} */ (this.time.hours)));
            return this.calcIndex(disabledMinutes, this.minuteRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
        else if (unit === 'second') {
            // second
            /** @type {?} */
            var disabledSeconds = this.disabledSeconds &&
                this.disabledSeconds((/** @type {?} */ (this.time.hours)), (/** @type {?} */ (this.time.minutes)));
            return this.calcIndex(disabledSeconds, this.secondRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
        else {
            // 12-hour
            return this.calcIndex([], this.use12HoursRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
    };
    /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    TimePickerPanelComponent.prototype.scrollTo = /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    function (element, to, duration) {
        var _this = this;
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        /** @type {?} */
        var difference = to - element.scrollTop;
        /** @type {?} */
        var perTick = (difference / duration) * 10;
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            _this.scrollTo(element, to, duration - 10);
        }));
    };
    /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    TimePickerPanelComponent.prototype.calcIndex = /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    function (array, index) {
        if (array && array.length && this.hideDisabledOptions) {
            return (index -
                array.reduce((/**
                 * @param {?} pre
                 * @param {?} value
                 * @return {?}
                 */
                function (pre, value) {
                    return pre + (value < index ? 1 : 0);
                }), 0));
        }
        else {
            return index;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    TimePickerPanelComponent.prototype.changed = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.onChange) {
            this.onChange(this.time.text);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    TimePickerPanelComponent.prototype.touched = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.onTouch) {
            this.onTouch();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TimePickerPanelComponent.prototype.setClassMap = /**
     * @private
     * @return {?}
     */
    function () {
        var _a;
        this.updateCls.updateHostClass(this.element.nativeElement, (_a = {},
            _a["" + this.prefixCls] = true,
            _a[this.prefixCls + "-column-" + this.enabledColumns] = this
                .inDatePicker
                ? false
                : true,
            _a[this.prefixCls + "-narrow"] = this.enabledColumns < 3,
            _a[this.prefixCls + "-placement-bottomLeft"] = this.inDatePicker
                ? false
                : true,
            _a));
    };
    /**
     * @param {?} hour
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelectedHour = /**
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        return (hour.index === this.time.viewHours ||
            (!isNotNil(this.time.viewHours) &&
                hour.index === this.time.defaultViewHours && this.selectCurrentTimeWhenNull));
    };
    /**
     * @param {?} minute
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelectedMinute = /**
     * @param {?} minute
     * @return {?}
     */
    function (minute) {
        return (minute.index === this.time.minutes ||
            (!isNotNil(this.time.minutes) &&
                minute.index === this.time.defaultMinutes && this.selectCurrentTimeWhenNull));
    };
    /**
     * @param {?} second
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelectedSecond = /**
     * @param {?} second
     * @return {?}
     */
    function (second) {
        return (second.index === this.time.seconds ||
            (!isNotNil(this.time.seconds) &&
                second.index === this.time.defaultSeconds && this.selectCurrentTimeWhenNull));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelected12Hours = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return (value.value.toUpperCase() === this.time.selected12Hours ||
            (!isNotNil(this.time.selected12Hours) &&
                value.value.toUpperCase() === this.time.default12Hours && this.selectCurrentTimeWhenNull));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.initPosition = /**
     * @return {?}
     */
    function () {
        // setTimeout(() => {
        if (this.hourEnabled && this.hourListElement) {
            if (isNotNil(this.time.viewHours)) {
                this.scrollToSelected(this.hourListElement.nativeElement, (/** @type {?} */ (this.time.viewHours)), 0, 'hour');
            }
            else {
                this.scrollToSelected(this.hourListElement.nativeElement, this.time.defaultViewHours, 0, 'hour');
            }
        }
        if (this.minuteEnabled && this.minuteListElement) {
            if (isNotNil(this.time.minutes)) {
                this.scrollToSelected(this.minuteListElement.nativeElement, (/** @type {?} */ (this.time.minutes)), 0, 'minute');
            }
            else {
                this.scrollToSelected(this.minuteListElement.nativeElement, this.time.defaultMinutes, 0, 'minute');
            }
        }
        if (this.secondEnabled && this.secondListElement) {
            if (isNotNil(this.time.seconds)) {
                this.scrollToSelected(this.secondListElement.nativeElement, (/** @type {?} */ (this.time.seconds)), 0, 'second');
            }
            else {
                this.scrollToSelected(this.secondListElement.nativeElement, this.time.defaultSeconds, 0, 'second');
            }
        }
        if (this.use12Hours && this.use12HoursListElement) {
            /** @type {?} */
            var selectedHours = isNotNil(this.time.selected12Hours)
                ? this.time.selected12Hours
                : this.time.default12Hours;
            /** @type {?} */
            var index = selectedHours === 'AM' ? 0 : 1;
            this.scrollToSelected(this.use12HoursListElement.nativeElement, index, 0, '12-hour');
        }
        // });
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    TimePickerPanelComponent.prototype.checkMinutes = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.buildMinutes();
        /** @type {?} */
        var _date = new Date(date);
        /** @type {?} */
        var canuseMinute = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.disabled; }));
        if (canuseMinute && canuseMinute.length) {
            /** @type {?} */
            var minutes = canuseMinute.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (minutes.length !== 60) {
                /** @type {?} */
                var m = minutes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === _date.getMinutes(); }));
                if (!m) {
                    _date.setMinutes(minutes[0].index);
                }
                this.time.setValue(_date, this.use12Hours);
            }
        }
        return _date;
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    TimePickerPanelComponent.prototype.checkSeconds = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.buildSeconds();
        /** @type {?} */
        var _sdate = new Date(date);
        /** @type {?} */
        var canuseSecond = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.disabled; }));
        if (canuseSecond && canuseSecond.length && canuseSecond.length !== 60) {
            /** @type {?} */
            var seconds = canuseSecond.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (seconds.length !== 60) {
                /** @type {?} */
                var s = seconds.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === _sdate.getSeconds(); }));
                if (!s) {
                    _sdate.setMinutes(seconds[0].index);
                }
                this.time.setValue(_sdate, this.use12Hours);
            }
        }
        return _sdate;
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    TimePickerPanelComponent.prototype.checkDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var canuseHour = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.disabled; }));
        if (canuseHour && canuseHour.length) {
            /** @type {?} */
            var hour = canuseHour.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (hour.length !== 24) {
                /** @type {?} */
                var _h = hour.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === date.getHours(); }));
                if (!_h) {
                    date.setHours(hour[0].index);
                }
                this.time.setValue(date, this.use12Hours);
            }
        }
        /** @type {?} */
        var mdate = this.checkMinutes(date);
        return this.checkSeconds(mdate);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimePickerPanelComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.time.text = value;
        /** @type {?} */
        var _value = convertToDate(this.time.text, this.format);
        if (_value) {
            _value = this.checkDate(_value);
            this.time.setValue(_value, this.use12Hours);
        }
        if (value && this.opened) {
            this.initPosition();
        }
        this.buildTimes();
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerPanelComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerPanelComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouch = fn;
    };
    /**
     * @param {?} v
     * @param {?} type
     * @return {?}
     */
    TimePickerPanelComponent.prototype.hmsCls = /**
     * @param {?} v
     * @param {?} type
     * @return {?}
     */
    function (v, type) {
        /** @type {?} */
        var cls = '';
        /** @type {?} */
        var selected = " " + this.prefixCls + "-select-option-selected ";
        /** @type {?} */
        var disabledC = " " + this.prefixCls + "-select-option-disabled ";
        /** @type {?} */
        var f = false;
        if (type === 'h') {
            f = this.isSelectedHour(v);
        }
        else if (type === 'm') {
            f = this.isSelectedMinute(v);
        }
        else if (type === 'r') {
            f = this.isSelected12Hours(v);
        }
        else {
            f = this.isSelectedSecond(v);
        }
        if (f) {
            cls += selected;
        }
        if (type === 'r') {
            return cls;
        }
        if (v.disabled) {
            cls += disabledC;
        }
        return cls;
    };
    TimePickerPanelComponent.decorators = [
        { type: Component, args: [{
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'time-picker-panel',
                    exportAs: 'timePickerPanel',
                    template: "<div class=\"farris-timer-picker {{ inDatePicker ? prefixCls + '-panel' : '' }}\">\r\n    <div class=\"{{ prefixCls }}-inner {{ inDatePicker ? prefixCls + '-column-' + enabledColumns : ''}}\">\r\n        <div class=\"{{ prefixCls }}-combobox time-picker-panel-header\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'\" *ngIf=\"showHeader\">\r\n            <div *ngIf=\"hourEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"minuteEnabled\">{{ timePanelTitle?.hour || '\u65F6' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"secondEnabled\">{{ timePanelTitle?.minute || '\u5206'}}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\">{{ timePanelTitle?.seconds || '\u79D2' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\"></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-combobox\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'  \">\r\n            <div *ngIf=\"hourEnabled\" #hourListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li  *ngFor=\"let hour of hourRange;trackBy: trackByItems;\" (click)=\"selectHour($event,hour)\" [class]=\"hmsCls(hour, 'h')\">\r\n                        {{ hour.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" #minuteListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let minute of minuteRange;trackBy: trackByItems\" (click)=\"selectMinute($event,minute)\" [class]=\"hmsCls(minute, 'm')\">\r\n                        {{ minute.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" #secondListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let second of secondRange;trackBy: trackByItems\" (click)=\"selectSecond($event,second)\" [class]=\"hmsCls(second, 's')\">\r\n                        {{ second.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" #use12HoursListElement class=\"{{ prefixCls }}-select\" >\r\n                <ul>\r\n                    <li *ngFor=\"let range of use12HoursRange; trackBy: trackByItems\" (click)=\"select12Hours($event, range)\" [class]=\"hmsCls(range, 'r')\">\r\n                        {{ range.value }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-addon\" *ngIf=\"addOn\">\r\n            <ng-template [ngTemplateOutlet]=\"addOn\"></ng-template>\r\n        </div>\r\n    </div>\r\n</div>",
                    // styleUrls: ['./style/index.scss'],
                    providers: [
                        UpdateCls,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimePickerPanelComponent,
                            multi: true
                        }
                    ],
                    styles: ["\n        .calendar-time-picker-select,\n        .time-picker-panel-select {\n            overflow: overlay!important;\n            overflow-x: hidden!important;\n        }\n\n        .calendar-time-picker-select::-webkit-scrollbar,\n        .time-picker-panel-select::-webkit-scrollbar {\n            background-color: transparent!important;\n        }\n        .calendar-time-picker-select::-webkit-scrollbar-track,\n        .time-picker-panel-select::-webkit-scrollbar-track {\n            background: none;\n            background-color: transparent!important;\n        }\n\n        .calendar-time-picker-select::-webkit-scrollbar-thumb,\n        .time-picker-panel-select::-webkit-scrollbar-thumb {\n            display: none;\n        }\n        .calendar-time-picker-select:hover::-webkit-scrollbar-thumb,\n        .time-picker-panel-select:hover::-webkit-scrollbar-thumb {\n            display: block;\n        }\n      \n        .time-picker-panel-select::-webkit-scrollbar-corner {\n            background: rgba(0, 0, 0, 0);\n        }\n\n        .time-header-split:after {\n            content: ':';\n            position: absolute;\n            right: 0;\n        }\n\n        .time-picker-panel-header .calendar-time-picker-select,\n        .time-picker-panel-header .time-picker-panel-select{\n            border-left: 0!important;\n            background: white;\n            border-bottom: 1px solid #e3e3e3;\n            overflow:hidden!important\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    TimePickerPanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: UpdateCls },
        { type: ChangeDetectorRef }
    ]; };
    TimePickerPanelComponent.propDecorators = {
        timeValueAccessorDirective: [{ type: ViewChild, args: [TimeValueAccessorDirective,] }],
        hourListElement: [{ type: ViewChild, args: ['hourListElement',] }],
        minuteListElement: [{ type: ViewChild, args: ['minuteListElement',] }],
        secondListElement: [{ type: ViewChild, args: ['secondListElement',] }],
        use12HoursListElement: [{ type: ViewChild, args: ['use12HoursListElement',] }],
        inDatePicker: [{ type: Input }],
        addOn: [{ type: Input }],
        hideDisabledOptions: [{ type: Input }],
        clearText: [{ type: Input }],
        placeholder: [{ type: Input }],
        selectCurrentTimeWhenNull: [{ type: Input }],
        showHeader: [{ type: Input }],
        use12Hours: [{ type: Input }],
        allowEmpty: [{ type: Input }],
        opened: [{ type: Input }],
        defaultOpenValue: [{ type: Input }],
        disabledHours: [{ type: Input }],
        disabledMinutes: [{ type: Input }],
        disabledSeconds: [{ type: Input }],
        format: [{ type: Input }],
        hourStep: [{ type: Input }],
        minuteStep: [{ type: Input }],
        secondStep: [{ type: Input }],
        value: [{ type: Input }],
        valueChange: [{ type: Output }],
        timePanelTitle: [{ type: Input }]
    };
    return TimePickerPanelComponent;
}());
export { TimePickerPanelComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._hourStep;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._minuteStep;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._secondStep;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.unsubscribe$;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.onTouch;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._disabledHours;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._disabledMinutes;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._disabledSeconds;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._defaultOpenValue;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._opened;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._allowEmpty;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._value;
    /** @type {?} */
    TimePickerPanelComponent.prototype.prefixCls;
    /** @type {?} */
    TimePickerPanelComponent.prototype.time;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hourEnabled;
    /** @type {?} */
    TimePickerPanelComponent.prototype.minuteEnabled;
    /** @type {?} */
    TimePickerPanelComponent.prototype.secondEnabled;
    /** @type {?} */
    TimePickerPanelComponent.prototype.enabledColumns;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hourRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.minuteRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.secondRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.use12HoursRange;
    /** @type {?} */
    TimePickerPanelComponent.prototype.timeValueAccessorDirective;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hourListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.minuteListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.secondListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.use12HoursListElement;
    /** @type {?} */
    TimePickerPanelComponent.prototype.inDatePicker;
    /** @type {?} */
    TimePickerPanelComponent.prototype.addOn;
    /** @type {?} */
    TimePickerPanelComponent.prototype.hideDisabledOptions;
    /** @type {?} */
    TimePickerPanelComponent.prototype.clearText;
    /** @type {?} */
    TimePickerPanelComponent.prototype.placeholder;
    /**
     * 当value 为空时选中当前时间，默认为 true
     * @type {?}
     */
    TimePickerPanelComponent.prototype.selectCurrentTimeWhenNull;
    /** @type {?} */
    TimePickerPanelComponent.prototype.showHeader;
    /** @type {?} */
    TimePickerPanelComponent.prototype.panelWidth;
    /** @type {?} */
    TimePickerPanelComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype._use12Hours;
    /** @type {?} */
    TimePickerPanelComponent.prototype.timePanelTitle;
    /** @type {?} */
    TimePickerPanelComponent.prototype.trackByItems;
    /** @type {?} */
    TimePickerPanelComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    TimePickerPanelComponent.prototype.updateCls;
    /** @type {?} */
    TimePickerPanelComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,