/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, Renderer2, TemplateRef, ViewChild, ViewEncapsulation, HostBinding, ViewContainerRef, ComponentFactoryResolver, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { UpdateHostClassService as UpdateCls } from './services/update-host-class.service';
import { slideMotion } from './animations/slide';
import { toBoolean, convertToDate, convertToStr } from './utils/convert';
import { TimePickerPanelComponent } from './time-picker-panel.component';
import { TimePickerLocaleService } from './services/time-picker.locale.service';
import { OverLayHiddenService } from '@farris/ui-common';
/** @type {?} */
var num = 0;
var TimePickerComponent = /** @class */ (function () {
    function TimePickerComponent(element, renderer, vcRef, cfr, cdr, localeService) {
        this.element = element;
        this.renderer = renderer;
        this.vcRef = vcRef;
        this.cfr = cfr;
        this.cdr = cdr;
        this.localeService = localeService;
        this.hostCls = true;
        this._disabled = false;
        this._readonly = false;
        this._editable = true;
        this._allowEmpty = true;
        this._autoFocus = false;
        this._hideDisabledOptions = false;
        this.cRef = null;
        this.isInit = false;
        this.groupIcon = '<i class="f-icon f-icon-timepicker"></i>';
        this.display = 'block';
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.clearText = 'clear';
        this.popupClassName = '';
        this.defaultOpenValue = new Date();
        this.format = 'HH:mm:ss';
        this.isOpen = false;
        this.showHeader = false;
        this.openChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.clear = new EventEmitter();
        this._use12Hours = false;
        this.changeFlag = false;
        this.localConfig = null;
        this.overLayService = new OverLayHiddenService();
    }
    Object.defineProperty(TimePickerComponent.prototype, "use12Hours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._use12Hours;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._use12Hours = !!value;
            if (value && this.format) {
                this.format = this.format.replace(/H/g, 'h');
            }
            else if (!value && this.format) {
                this.format = this.format.replace(/h/g, 'H');
            }
            if (this._use12Hours) {
                if (!this.format) {
                    this.format = 'hh:mm:ss a';
                }
                else {
                    if (this.format.indexOf('a') === -1) {
                        this.format = this.format + ' a';
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "hideDisabledOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideDisabledOptions;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideDisabledOptions = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "allowEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this._allowEmpty;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._allowEmpty = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "autoFocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoFocus;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoFocus = toBoolean(value);
            this.updateAutoFocus();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "editable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._editable = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            if (this._onChange) {
                this._onChange(this.value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.localeService) {
            this.localConfig = this.localeService.getLocaleConfig();
            this.placeholder = this.placeholder ?
                this.placeholder :
                this.localConfig.placeholder ? this.localConfig.placeholder : '请选择时间';
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var use12Hours = changes.use12Hours;
        if (use12Hours && (!this.format || this.format.indexOf('a') === -1)) {
            if (this.use12Hours) {
                this.format = this.format + ' a';
            }
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isInit = true;
        this.updateAutoFocus();
        if (!document.body.querySelector('.time-picker-overlay')) {
            this.overlayRef = this.renderer.createElement('div');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayRef, 'time-picker-overlay');
            this.renderer.addClass(this.overlayPanelRef, "overlay-panel-" + num++);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
            document.body.appendChild(this.overlayRef);
        }
        else {
            this.overlayRef = document.body.querySelector('.time-picker-overlay');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayPanelRef, "overlay-panel-" + num++);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
        }
        this.overlayRef.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
        }));
        this.timeInput.nativeElement.addEventListener('blur', (/**
         * @return {?}
         */
        function () {
            _this.onBlur();
        }));
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.timeInput.nativeElement.removeEventListener('blur', this.onBlur);
        this.overLayService.destory(this.element.nativeElement);
        this.overLayService = null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimePickerComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.timeInput.nativeElement.value &&
            !this.readonly &&
            !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = '';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimePickerComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.readonly && !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = 'none';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimePickerComponent.prototype.open = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.stopPropagation();
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.isOpen) {
            this.close();
            return;
        }
        this.creatPanel();
        this.isOpen = true;
        this.openChange.emit(this.isOpen);
        this.renderer.appendChild(this.overlayPanelRef, this.cRef.location.nativeElement);
        this.renderer.setStyle(this.overlayRef, 'display', 'block');
        this.renderer.setStyle(this.overlayRef, 'zIndex', '8888888888');
        this.overLayService.registerMouseEvent(this.element.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.cRef && _this.cRef.location.nativeElement.contains(e.target)) {
                return;
            }
            _this.renderer.setStyle(_this.overlayRef, 'display', 'none');
            _this.close();
        }));
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setPosition();
            _this.renderer.addClass(_this.cRef.location.nativeElement, 'f-area-show');
        }), 10);
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.isOpen = false;
        this.cRef.instance.opened = false;
        this.renderer.removeClass(this.cRef.location.nativeElement, 'f-area-show');
        while (this.overlayPanelRef.lastChild) {
            this.overlayPanelRef.removeChild(this.overlayPanelRef.lastChild);
        }
        this.openChange.emit(this.isOpen);
        this.focus();
        if (this.cRef) {
            this.cRef.destroy();
            this.cRef = null;
        }
        this.overLayService.destory(this.element.nativeElement);
        this.renderer.removeStyle(this.overlayRef, 'zIndex');
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.creatPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.cRef === null) {
            this.vcRef.clear();
            this.cRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(TimePickerPanelComponent));
            this.cRef.location.nativeElement.classList.add('f-area-hide');
            // 解决在grid懒加载中，没有刷新视图的问题
            this.cRef.changeDetectorRef.detectChanges();
            this.cRef.instance.format = this.format;
            this.cRef.instance.hourStep = this.hourStep;
            this.cRef.instance.minuteStep = this.minuteStep;
            this.cRef.instance.secondStep = this.secondStep;
            this.cRef.instance.disabledHours = this.disabledHours;
            this.cRef.instance.disabledMinutes = this.disabledMinutes;
            this.cRef.instance.disabledSeconds = this.disabledSeconds;
            this.cRef.instance.hideDisabledOptions = this.hideDisabledOptions;
            this.cRef.instance.use12Hours = this.use12Hours;
            this.cRef.instance.opened = this.isOpen;
            this.cRef.instance.defaultOpenValue = this.defaultOpenValue;
            this.cRef.instance.value = this.value;
            this.cRef.instance.showHeader = this.showHeader;
            this.cRef.instance.timePanelTitle = this.localConfig.time;
            this.cRef.instance.valueChange.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                _this.value = val;
                _this.cdr.detectChanges();
                _this.valueChange.emit(val);
            }));
        }
        else {
            this.cRef.instance.value = this.value;
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.setPosition = /**
     * @return {?}
     */
    function () {
        var _a = this.element.nativeElement.getBoundingClientRect(), elTop = _a.top, elLeft = _a.left, elHeight = _a.height, elWidth = _a.width;
        /** @type {?} */
        var panelHeight = 194;
        if (elTop + panelHeight + 30 > window.innerHeight) {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', elTop - panelHeight + "px");
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', elTop + elHeight + "px");
        }
        /** @type {?} */
        var panelWidth = this.cRef.instance.panelWidth;
        if (window.innerWidth - elLeft < panelWidth) {
            /** @type {?} */
            var r = window.innerWidth - elLeft - elWidth;
            this.renderer.setStyle(this.cRef.location.nativeElement, 'right', r + "px");
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'left', elLeft + "px");
        }
        this.cRef.instance.opened = true;
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.updateAutoFocus = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.onClickClearBtn = /**
     * @return {?}
     */
    function () {
        this.value = null;
        this.cRef.instance.time.clear();
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.blur();
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        if (this.value) {
            /** @type {?} */
            var date = convertToDate(this.value, this.format);
            if (this.cRef) {
                this.cRef.instance.value = this.value;
            }
            this.value = convertToStr(date, this.format);
            if (this.changeFlag) {
                this.valueChange.emit(this.value);
                this.changeFlag = false;
            }
            if (this._onTouched) {
                this._onTouched(this.value);
            }
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    TimePickerComponent.prototype.onValueChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.changeFlag = true;
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.clear.emit();
        this.value = '';
        if (this.cRef && this.cRef.instance) {
            this.cRef.instance.time.clear();
        }
        if (this._onTouched) {
            this._onTouched(this.value);
        }
        this.cdr.detectChanges();
    };
    /**
     * @param {?} time
     * @return {?}
     */
    TimePickerComponent.prototype.writeValue = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this._value = time;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    TimePickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    TimePickerComponent.decorators = [
        { type: Component, args: [{
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    // tslint:disable-next-line:component-selector
                    selector: 'farris-time-picker',
                    exportAs: 'timePicker',
                    // styleUrls: ['./style/index.scss'],
                    template: "<!-- <input-group\r\n    [groupText]=\"groupIcon\"\r\n    #inputgroup\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [(ngModel)]=\"value\"\r\n    (valueChange)=\"onValueChange($event)\"\r\n    [enableClear]=\"true\"\r\n    (clickHandle)=\"open()\"\r\n    (clear)=\"onClear()\"\r\n    [placeholder]=\"placeholder\"\r\n></input-group> -->\r\n<div\r\n    class=\"input-group\"\r\n    [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly && !disabled,\r\n        'f-state-editable': editable && !disabled && !readonly\r\n    }\"\r\n>\r\n    <input\r\n        type=\"text\"\r\n        class=\"form-control f-utils-fill\"\r\n        [attr.placeholder]=\"disabled || readonly?'':placeholder\"\r\n        name=\"farris-time-picker\"\r\n        [(ngModel)]=\"value\"\r\n        (ngModelChange)=\"onValueChange($event)\"\r\n        #timeInput\r\n        autocomplete=\"off\"\r\n        [readonly]=\"readonly || !editable\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"open($event)\"\r\n    />\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!readonly && !disabled\">\r\n        <span class=\"input-group-text input-group-clear f-cmp-iconbtn\" (click)=\"onClear()\"  style=\"display: none;padding:0px 4px;\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n\r\n        <span class=\"input-group-text f-cmp-iconbtn\" (click)=\"open($event)\" style=\"padding:0px 4px;padding-top: 2px;\">\r\n            <i class=\"f-icon f-icon-timepicker\" style=\"font-size:0.85rem\"></i>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                    animations: [slideMotion],
                    providers: [
                        UpdateCls,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimePickerComponent,
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    TimePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef },
        { type: TimePickerLocaleService }
    ]; };
    TimePickerComponent.propDecorators = {
        timeInput: [{ type: ViewChild, args: ['timeInput',] }],
        hostCls: [{ type: HostBinding, args: ['class.f-component-timepicker',] }],
        display: [{ type: HostBinding, args: ['style.display',] }],
        hourStep: [{ type: Input }],
        minuteStep: [{ type: Input }],
        secondStep: [{ type: Input }],
        clearText: [{ type: Input }],
        popupClassName: [{ type: Input }],
        placeholder: [{ type: Input }],
        addOn: [{ type: Input }],
        defaultOpenValue: [{ type: Input }],
        disabledHours: [{ type: Input }],
        disabledMinutes: [{ type: Input }],
        disabledSeconds: [{ type: Input }],
        format: [{ type: Input }],
        isOpen: [{ type: Input }],
        showHeader: [{ type: Input }],
        use12Hours: [{ type: Input }],
        openChange: [{ type: Output }],
        valueChange: [{ type: Output }],
        clear: [{ type: Output }],
        hideDisabledOptions: [{ type: Input }],
        allowEmpty: [{ type: Input }],
        autoFocus: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
    };
    return TimePickerComponent;
}());
export { TimePickerComponent };
if (false) {
    /** @type {?} */
    TimePickerComponent.prototype.timeInput;
    /** @type {?} */
    TimePickerComponent.prototype.hostCls;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._editable;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._allowEmpty;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._autoFocus;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._hideDisabledOptions;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.cRef;
    /** @type {?} */
    TimePickerComponent.prototype.isInit;
    /** @type {?} */
    TimePickerComponent.prototype.groupIcon;
    /** @type {?} */
    TimePickerComponent.prototype.display;
    /** @type {?} */
    TimePickerComponent.prototype.hourStep;
    /** @type {?} */
    TimePickerComponent.prototype.minuteStep;
    /** @type {?} */
    TimePickerComponent.prototype.secondStep;
    /** @type {?} */
    TimePickerComponent.prototype.clearText;
    /** @type {?} */
    TimePickerComponent.prototype.popupClassName;
    /** @type {?} */
    TimePickerComponent.prototype.placeholder;
    /** @type {?} */
    TimePickerComponent.prototype.addOn;
    /** @type {?} */
    TimePickerComponent.prototype.defaultOpenValue;
    /** @type {?} */
    TimePickerComponent.prototype.disabledHours;
    /** @type {?} */
    TimePickerComponent.prototype.disabledMinutes;
    /** @type {?} */
    TimePickerComponent.prototype.disabledSeconds;
    /** @type {?} */
    TimePickerComponent.prototype.format;
    /** @type {?} */
    TimePickerComponent.prototype.isOpen;
    /** @type {?} */
    TimePickerComponent.prototype.showHeader;
    /** @type {?} */
    TimePickerComponent.prototype.openChange;
    /** @type {?} */
    TimePickerComponent.prototype.valueChange;
    /** @type {?} */
    TimePickerComponent.prototype.clear;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._use12Hours;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.overlayRef;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.overlayPanelRef;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.documentClickEvent;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.changeFlag;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.overLayService;
    /** @type {?} */
    TimePickerComponent.prototype.localConfig;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.cfr;
    /** @type {?} */
    TimePickerComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,