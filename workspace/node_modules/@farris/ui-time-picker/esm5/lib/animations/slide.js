/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { AnimationCurves, AnimationDuration } from './animation-consts';
/** @type {?} */
var ANIMATION_TRANSITION_IN = AnimationDuration.BASE + " " + AnimationCurves.EASE_OUT_QUINT;
/** @type {?} */
var ANIMATION_TRANSITION_OUT = AnimationDuration.BASE + " " + AnimationCurves.EASE_IN_QUINT;
/** @type {?} */
export var slideMotion = trigger('slideMotion', [
    state('bottom', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 0%'
    })),
    state('top', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 100%'
    })),
    transition('void => bottom', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('bottom => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }))
    ]),
    transition('void => top', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('top => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }))
    ])
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRpbWUtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvc2xpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUVWLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQUVsRSx1QkFBdUIsR0FBTSxpQkFBaUIsQ0FBQyxJQUFJLFNBQUksZUFBZSxDQUFDLGNBQWdCOztJQUN2Rix3QkFBd0IsR0FBTSxpQkFBaUIsQ0FBQyxJQUFJLFNBQUksZUFBZSxDQUFDLGFBQWU7O0FBRTdGLE1BQU0sS0FBTyxXQUFXLEdBQTZCLE9BQU8sQ0FBQyxhQUFhLEVBQUU7SUFDeEUsS0FBSyxDQUNELFFBQVEsRUFDUixLQUFLLENBQUM7UUFDRixPQUFPLEVBQUUsQ0FBQztRQUNWLFNBQVMsRUFBRSxXQUFXO1FBQ3RCLGVBQWUsRUFBRSxPQUFPO0tBQzNCLENBQUMsQ0FDTDtJQUNELEtBQUssQ0FDRCxLQUFLLEVBQ0wsS0FBSyxDQUFDO1FBQ0YsT0FBTyxFQUFFLENBQUM7UUFDVixTQUFTLEVBQUUsV0FBVztRQUN0QixlQUFlLEVBQUUsU0FBUztLQUM3QixDQUFDLENBQ0w7SUFDRCxVQUFVLENBQUMsZ0JBQWdCLEVBQUU7UUFDekIsS0FBSyxDQUFDO1lBQ0YsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsYUFBYTtZQUN4QixlQUFlLEVBQUUsT0FBTztTQUMzQixDQUFDO1FBQ0YsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0tBQ25DLENBQUM7SUFDRixVQUFVLENBQUMsZ0JBQWdCLEVBQUU7UUFDekIsT0FBTyxDQUNILHdCQUF3QixFQUN4QixLQUFLLENBQUM7WUFDRixPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxhQUFhO1lBQ3hCLGVBQWUsRUFBRSxPQUFPO1NBQzNCLENBQUMsQ0FDTDtLQUNKLENBQUM7SUFDRixVQUFVLENBQUMsYUFBYSxFQUFFO1FBQ3RCLEtBQUssQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLGFBQWE7WUFDeEIsZUFBZSxFQUFFLFNBQVM7U0FDN0IsQ0FBQztRQUNGLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztLQUNuQyxDQUFDO0lBQ0YsVUFBVSxDQUFDLGFBQWEsRUFBRTtRQUN0QixPQUFPLENBQ0gsd0JBQXdCLEVBQ3hCLEtBQUssQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLGFBQWE7WUFDeEIsZUFBZSxFQUFFLFNBQVM7U0FDN0IsQ0FBQyxDQUNMO0tBQ0osQ0FBQztDQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgYW5pbWF0ZSxcclxuICAgIHN0YXRlLFxyXG4gICAgc3R5bGUsXHJcbiAgICB0cmFuc2l0aW9uLFxyXG4gICAgdHJpZ2dlcixcclxuICAgIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YVxyXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xyXG5pbXBvcnQgeyBBbmltYXRpb25DdXJ2ZXMsIEFuaW1hdGlvbkR1cmF0aW9uIH0gZnJvbSAnLi9hbmltYXRpb24tY29uc3RzJztcclxuXHJcbmNvbnN0IEFOSU1BVElPTl9UUkFOU0lUSU9OX0lOID0gYCR7QW5pbWF0aW9uRHVyYXRpb24uQkFTRX0gJHtBbmltYXRpb25DdXJ2ZXMuRUFTRV9PVVRfUVVJTlR9YDtcclxuY29uc3QgQU5JTUFUSU9OX1RSQU5TSVRJT05fT1VUID0gYCR7QW5pbWF0aW9uRHVyYXRpb24uQkFTRX0gJHtBbmltYXRpb25DdXJ2ZXMuRUFTRV9JTl9RVUlOVH1gO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNsaWRlTW90aW9uOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEgPSB0cmlnZ2VyKCdzbGlkZU1vdGlvbicsIFtcclxuICAgIHN0YXRlKFxyXG4gICAgICAgICdib3R0b20nLFxyXG4gICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVZKDEpJyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXHJcbiAgICAgICAgfSlcclxuICAgICksXHJcbiAgICBzdGF0ZShcclxuICAgICAgICAndG9wJyxcclxuICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgxKScsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnXHJcbiAgICAgICAgfSlcclxuICAgICksXHJcbiAgICB0cmFuc2l0aW9uKCd2b2lkID0+IGJvdHRvbScsIFtcclxuICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgwLjgpJyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgYW5pbWF0ZShBTklNQVRJT05fVFJBTlNJVElPTl9JTilcclxuICAgIF0pLFxyXG4gICAgdHJhbnNpdGlvbignYm90dG9tID0+IHZvaWQnLCBbXHJcbiAgICAgICAgYW5pbWF0ZShcclxuICAgICAgICAgICAgQU5JTUFUSU9OX1RSQU5TSVRJT05fT1VULFxyXG4gICAgICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVZKDAuOCknLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKVxyXG4gICAgXSksXHJcbiAgICB0cmFuc2l0aW9uKCd2b2lkID0+IHRvcCcsIFtcclxuICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgwLjgpJyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJSdcclxuICAgICAgICB9KSxcclxuICAgICAgICBhbmltYXRlKEFOSU1BVElPTl9UUkFOU0lUSU9OX0lOKVxyXG4gICAgXSksXHJcbiAgICB0cmFuc2l0aW9uKCd0b3AgPT4gdm9pZCcsIFtcclxuICAgICAgICBhbmltYXRlKFxyXG4gICAgICAgICAgICBBTklNQVRJT05fVFJBTlNJVElPTl9PVVQsXHJcbiAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVkoMC44KScsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgIF0pXHJcbl0pO1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IHNsaWRlQWxlcnRNb3Rpb246IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSA9IHRyaWdnZXIoXHJcbi8vICAgICAnc2xpZGVBbGVydE1vdGlvbicsXHJcbi8vICAgICBbXHJcbi8vICAgICAgICAgdHJhbnNpdGlvbignOmxlYXZlJywgW1xyXG4vLyAgICAgICAgICAgICBzdHlsZSh7XHJcbi8vICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4vLyAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVZKDEpJyxcclxuLy8gICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJ1xyXG4vLyAgICAgICAgICAgICB9KSxcclxuLy8gICAgICAgICAgICAgYW5pbWF0ZShcclxuLy8gICAgICAgICAgICAgICAgIGAke0FuaW1hdGlvbkR1cmF0aW9uLlNMT1d9ICR7QW5pbWF0aW9uQ3VydmVzLkVBU0VfSU5fT1VUX0NJUkN9YCxcclxuLy8gICAgICAgICAgICAgICAgIHN0eWxlKHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgwKScsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMCUnXHJcbi8vICAgICAgICAgICAgICAgICB9KVxyXG4vLyAgICAgICAgICAgICApXHJcbi8vICAgICAgICAgXSlcclxuLy8gICAgIF1cclxuLy8gKTtcclxuIl19