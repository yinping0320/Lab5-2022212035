import { animate, state, style, transition, trigger } from '@angular/animations';
import { __assign, __spread } from 'tslib';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { format, parse, isValid } from 'date-fns';
import { LocaleService } from '@farris/ui-locale';
import { reqAnimFrame, OverLayHiddenService } from '@farris/ui-common';
import { CommonModule } from '@angular/common';
import { Injectable, RendererFactory2, Directive, ElementRef, HostListener, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewChild, ViewEncapsulation, Output, EventEmitter, Renderer2, HostBinding, ViewContainerRef, ComponentFactoryResolver, NgModule, defineInjectable, inject } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UpdateHostClassService = /** @class */ (function () {
    function UpdateHostClassService(rendererFactory2) {
        this.classMap = {};
        this.renderer = rendererFactory2.createRenderer(null, null);
    }
    /**
     * @param {?} el
     * @param {?} classMap
     * @return {?}
     */
    UpdateHostClassService.prototype.updateHostClass = /**
     * @param {?} el
     * @param {?} classMap
     * @return {?}
     */
    function (el, classMap) {
        this.removeClass(el, this.classMap, this.renderer);
        this.classMap = __assign({}, classMap);
        this.addClass(el, this.classMap, this.renderer);
    };
    /**
     * @private
     * @param {?} el
     * @param {?} classMap
     * @param {?} renderer
     * @return {?}
     */
    UpdateHostClassService.prototype.removeClass = /**
     * @private
     * @param {?} el
     * @param {?} classMap
     * @param {?} renderer
     * @return {?}
     */
    function (el, classMap, renderer) {
        for (var i in classMap) {
            if (classMap.hasOwnProperty(i)) {
                renderer.removeClass(el, i);
            }
        }
    };
    /**
     * @private
     * @param {?} el
     * @param {?} classMap
     * @param {?} renderer
     * @return {?}
     */
    UpdateHostClassService.prototype.addClass = /**
     * @private
     * @param {?} el
     * @param {?} classMap
     * @param {?} renderer
     * @return {?}
     */
    function (el, classMap, renderer) {
        for (var i in classMap) {
            if (classMap.hasOwnProperty(i) && classMap[i]) {
                renderer.addClass(el, i);
            }
        }
    };
    UpdateHostClassService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UpdateHostClassService.ctorParameters = function () { return [
        { type: RendererFactory2 }
    ]; };
    return UpdateHostClassService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnimationDuration = /** @class */ (function () {
    function AnimationDuration() {
    }
    AnimationDuration.SLOW = '0.3s'; // Modal
    // Modal
    AnimationDuration.BASE = '0.2s';
    AnimationDuration.FAST = '0.1s'; // Tooltip
    return AnimationDuration;
}());
var AnimationCurves = /** @class */ (function () {
    function AnimationCurves() {
    }
    AnimationCurves.EASE_BASE_OUT = 'cubic-bezier(0.7, 0.3, 0.1, 1)';
    AnimationCurves.EASE_BASE_IN = 'cubic-bezier(0.9, 0, 0.3, 0.7)';
    AnimationCurves.EASE_OUT = 'cubic-bezier(0.215, 0.61, 0.355, 1)';
    AnimationCurves.EASE_IN = 'cubic-bezier(0.55, 0.055, 0.675, 0.19)';
    AnimationCurves.EASE_IN_OUT = 'cubic-bezier(0.645, 0.045, 0.355, 1)';
    AnimationCurves.EASE_OUT_BACK = 'cubic-bezier(0.12, 0.4, 0.29, 1.46)';
    AnimationCurves.EASE_IN_BACK = 'cubic-bezier(0.71, -0.46, 0.88, 0.6)';
    AnimationCurves.EASE_IN_OUT_BACK = 'cubic-bezier(0.71, -0.46, 0.29, 1.46)';
    AnimationCurves.EASE_OUT_CIRC = 'cubic-bezier(0.08, 0.82, 0.17, 1)';
    AnimationCurves.EASE_IN_CIRC = 'cubic-bezier(0.6, 0.04, 0.98, 0.34)';
    AnimationCurves.EASE_IN_OUT_CIRC = 'cubic-bezier(0.78, 0.14, 0.15, 0.86)';
    AnimationCurves.EASE_OUT_QUINT = 'cubic-bezier(0.23, 1, 0.32, 1)';
    AnimationCurves.EASE_IN_QUINT = 'cubic-bezier(0.755, 0.05, 0.855, 0.06)';
    AnimationCurves.EASE_IN_OUT_QUINT = 'cubic-bezier(0.86, 0, 0.07, 1)';
    return AnimationCurves;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ANIMATION_TRANSITION_IN = AnimationDuration.BASE + " " + AnimationCurves.EASE_OUT_QUINT;
/** @type {?} */
var ANIMATION_TRANSITION_OUT = AnimationDuration.BASE + " " + AnimationCurves.EASE_IN_QUINT;
/** @type {?} */
var slideMotion = trigger('slideMotion', [
    state('bottom', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 0%'
    })),
    state('top', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 100%'
    })),
    transition('void => bottom', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('bottom => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 0%'
        }))
    ]),
    transition('void => top', [
        style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }),
        animate(ANIMATION_TRANSITION_IN)
    ]),
    transition('top => void', [
        animate(ANIMATION_TRANSITION_OUT, style({
            opacity: 0,
            transform: 'scaleY(0.8)',
            transformOrigin: '0% 100%'
        }))
    ])
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return !!value;
}
/**
 * @param {?} value
 * @param {?=} format
 * @return {?}
 */
function convertToDate(value, format$$1) {
    if (format$$1 === void 0) { format$$1 = 'hh:mm:ss'; }
    if (!value || !format$$1) {
        return;
    }
    // let hours = '0';
    // let minutes = '0';
    // let seconds = '0';
    // const formatSArr = format.split(' ')[0];
    // const formatEArr = format.split(' ')[1];
    // const formatArr = formatSArr.split(':');
    // const textArr = value.split(' ')[0].split(':');
    // // tslint:disable-next-line:variable-name
    // const AMOrPM = value.split(' ')[1];
    // formatArr.forEach((item: string, index: number) => {
    //     item = item.toUpperCase();
    //     if (item === 'H' || item === 'HH') {
    //         hours = textArr[index];
    //     } else if (item === 'M' || item === 'MM') {
    //         minutes = textArr[index];
    //     } else if (item === 'S' || item === 'SS') {
    //         seconds = textArr[index];
    //     } else if (item === 'A') {
    //     }
    // });
    // if (formatEArr && formatEArr.toUpperCase() === 'A') {
    //     if (AMOrPM === 'PM') {
    //         hours = Number(hours) + 12 + '';
    //     }
    // }
    // return new Date(
    //     1970,
    //     0,
    //     1,
    //     Number(hours),
    //     Number(minutes),
    //     Number(seconds)
    // );
    if (format$$1.indexOf('ss') === -1 && value.split(':').length === 3) {
        format$$1 = format$$1 + ':ss';
    }
    return parse(value, format$$1, new Date());
}
/**
 * @param {?} date
 * @param {?=} format
 * @param {?=} selected12Hours
 * @return {?}
 */
function convertToStr(date, format$$1, selected12Hours) {
    if (format$$1 === void 0) { format$$1 = 'hh:mm:ss'; }
    if (selected12Hours === void 0) { selected12Hours = 'AM'; }
    if (!date || isNaN(date.getTime())) {
        return '';
    }
    // let _hours = date.getHours();
    // selected12Hours = selected12Hours ? selected12Hours : 'AM';
    // if (selected12Hours === 'PM') {
    //     _hours = _hours > 12 ? _hours - 12 : _hours;
    // }
    // const hours = addZero(_hours);
    // const minutes = addZero(date.getMinutes());
    // const seconds = addZero(date.getSeconds());
    // if (format.indexOf('a') >= 0 || format.indexOf('A') >= 0) {
    //     format = format.replace(/a/i, selected12Hours);
    // }
    // if (format.indexOf('hh') >= 0 || format.indexOf('HH') >= 0) {
    //     format = format.replace(/hh/i, hours);
    // } else if (format.indexOf('h') >= 0 || format.indexOf('H') >= 0) {
    //     format = format.replace(/h/i, hours);
    // }
    // if (format.indexOf('mm') >= 0 || format.indexOf('MM') >= 0) {
    //     format = format.replace(/mm/i, minutes);
    // } else if (format.indexOf('m') >= 0 || format.indexOf('M') >= 0) {
    //     format = format.replace(/m/i, minutes);
    // }
    // if (format.indexOf('ss') >= 0 || format.indexOf('SS') >= 0) {
    //     format = format.replace(/ss/i, seconds);
    // } else if (format.indexOf('s') >= 0 || format.indexOf('S') >= 0) {
    //     format = format.replace(/s/i, seconds);
    // }
    // return format;
    return format(date, format$$1);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:no-any
/**
 * @param {?} value
 * @return {?}
 */
function isNotNil(value) {
    return typeof value !== 'undefined' && value !== null;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} text
 * @return {?}
 */
function parseTime(text) {
    if (!text) {
        return;
    }
    return new Date("1970-01-01 " + text);
}
/**
 * @param {?} date
 * @param {?} formatStr
 * @return {?}
 */
function format$1(date, formatStr) {
    return format(date, formatStr);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimeValueAccessorDirective = /** @class */ (function () {
    function TimeValueAccessorDirective(elementRef) {
        this.elementRef = elementRef;
    }
    /**
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.keyup = /**
     * @return {?}
     */
    function () {
        this.changed();
    };
    /**
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.touched();
    };
    /**
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.changed = /**
     * @return {?}
     */
    function () {
        if (this._onChange) {
            /** @type {?} */
            var value = parseTime(this.elementRef.nativeElement.value);
            this._onChange((/** @type {?} */ (value)));
        }
    };
    /**
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.touched = /**
     * @return {?}
     */
    function () {
        if (this._onTouch) {
            this._onTouch();
        }
    };
    /**
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.setRange = /**
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.focus();
        this.elementRef.nativeElement.setSelectionRange(0, this.elementRef.nativeElement.value.length);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.elementRef.nativeElement.value = format$1(value, this.nzTime);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimeValueAccessorDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouch = fn;
    };
    TimeValueAccessorDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[format]',
                    exportAs: 'format',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimeValueAccessorDirective,
                            multi: true
                        }
                    ]
                },] }
    ];
    /** @nocollapse */
    TimeValueAccessorDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    TimeValueAccessorDirective.propDecorators = {
        nzTime: [{ type: Input }],
        keyup: [{ type: HostListener, args: ['keyup',] }],
        blur: [{ type: HostListener, args: ['blur',] }]
    };
    return TimeValueAccessorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimeHolder = /** @class */ (function () {
    function TimeHolder() {
        this._seconds = undefined;
        this._hours = undefined;
        this._minutes = undefined;
        this._selected12Hours = undefined;
        this._use12Hours = false;
        this._defaultOpenValue = new Date();
        this._changes = new Subject();
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
    }
    /**
     * @param {?} value
     * @param {?} step
     * @return {?}
     */
    TimeHolder.prototype.setValueByStep = /**
     * @param {?} value
     * @param {?} step
     * @return {?}
     */
    function (value, step) {
        /** @type {?} */
        var times = Math.floor(value / step);
        /** @type {?} */
        var remainder = value % step;
        /** @type {?} */
        var halfStep = step / 2;
        times = remainder > halfStep ? times + 1 : times;
        return step * times;
    };
    /**
     * @return {?}
     */
    TimeHolder.prototype.setDefaultValueIfNil = /**
     * @return {?}
     */
    function () {
        if (!isNotNil(this._value)) {
            this._value = new Date(this.defaultOpenValue);
        }
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    TimeHolder.prototype.setMinutes = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    function (value, disabled) {
        if (disabled) {
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).setDefaultValueIfNil();
        (/** @type {?} */ (this)).minutes = value;
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    TimeHolder.prototype.setHours = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    function (value, disabled) {
        if (disabled) {
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).setDefaultValueIfNil();
        (/** @type {?} */ (this)).hours = value;
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    TimeHolder.prototype.setSeconds = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?} disabled
     * @return {THIS}
     */
    function (value, disabled) {
        if (disabled) {
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).setDefaultValueIfNil();
        (/** @type {?} */ (this)).seconds = value;
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    TimeHolder.prototype.setUse12Hours = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    function (value) {
        (/** @type {?} */ (this))._use12Hours = value;
        return (/** @type {?} */ (this));
    };
    Object.defineProperty(TimeHolder.prototype, "changes", {
        get: /**
         * @return {?}
         */
        function () {
            return this._changes.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._value) {
                this._value = value;
                if (isNotNil(this._value) && isValid(this._value)) {
                    // tslint:disable-next-line:no-non-null-assertion
                    this._hours = (/** @type {?} */ (this._value)).getHours();
                    this._minutes = (/** @type {?} */ (this._value)).getMinutes();
                    this._seconds = (/** @type {?} */ (this._value)).getSeconds();
                    if (this._use12Hours && isNotNil(this._hours)) {
                        this._selected12Hours = this._hours >= 12 ? 'PM' : 'AM';
                    }
                }
                else {
                    this._clear();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._text) {
                this._text = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?=} use12Hours
     * @return {THIS}
     */
    TimeHolder.prototype.setValue = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @param {?=} use12Hours
     * @return {THIS}
     */
    function (value, use12Hours) {
        if (isNotNil(use12Hours)) {
            (/** @type {?} */ (this))._use12Hours = (/** @type {?} */ (use12Hours));
        }
        (/** @type {?} */ (this)).value = value;
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    TimeHolder.prototype.clear = /**
     * @return {?}
     */
    function () {
        this._clear();
        this.update();
    };
    Object.defineProperty(TimeHolder.prototype, "isEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return !(isNotNil(this._hours) || isNotNil(this._minutes) || isNotNil(this._seconds));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    TimeHolder.prototype._clear = /**
     * @private
     * @return {?}
     */
    function () {
        this._hours = undefined;
        this._minutes = undefined;
        this._seconds = undefined;
        this._selected12Hours = undefined;
        this._value = undefined;
    };
    /**
     * @private
     * @return {?}
     */
    TimeHolder.prototype.update = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isEmpty) {
            this._value = undefined;
        }
        else {
            if (!isNotNil(this._hours)) {
                this._hours = this.defaultHours;
            }
            else {
                (/** @type {?} */ (this._value)).setHours((/** @type {?} */ (this.hours)));
            }
            if (!isNotNil(this._minutes)) {
                this._minutes = this.defaultMinutes;
            }
            else {
                (/** @type {?} */ (this._value)).setMinutes((/** @type {?} */ (this.minutes)));
            }
            if (!isNotNil(this._seconds)) {
                this._seconds = this.defaultSeconds;
            }
            else {
                (/** @type {?} */ (this._value)).setSeconds((/** @type {?} */ (this.seconds)));
            }
            if (this._use12Hours) {
                if (!isNotNil(this._selected12Hours)) {
                    this._selected12Hours = this.default12Hours;
                }
                if (this.selected12Hours === 'PM' && (/** @type {?} */ (this._hours)) < 12) {
                    (/** @type {?} */ (this._hours)) += 12;
                    (/** @type {?} */ (this._value)).setHours((/** @type {?} */ (this._hours)));
                }
                if (this.selected12Hours === 'AM' && (/** @type {?} */ (this._hours)) >= 12) {
                    (/** @type {?} */ (this._hours)) -= 12;
                    (/** @type {?} */ (this._value)).setHours((/** @type {?} */ (this._hours)));
                }
            }
            this._value = new Date((/** @type {?} */ (this._value)));
        }
        this.changed();
    };
    /**
     * @return {?}
     */
    TimeHolder.prototype.changed = /**
     * @return {?}
     */
    function () {
        this._changes.next(this._value);
    };
    Object.defineProperty(TimeHolder.prototype, "viewHours", {
        /**
         * @description
         * UI view hours
         * Get viewHours which is selected in `time-picker-panel` and its range is [12, 1, 2, ..., 11]
         */
        get: /**
         * \@description
         * UI view hours
         * Get viewHours which is selected in `time-picker-panel` and its range is [12, 1, 2, ..., 11]
         * @return {?}
         */
        function () {
            return this._use12Hours && isNotNil(this._hours) ? this.calculateViewHour((/** @type {?} */ (this._hours))) : this._hours;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "realHours", {
        /**
         * @description
         * Value hours
         * Get realHours and its range is [0, 1, 2, ..., 22, 23]
         */
        get: /**
         * \@description
         * Value hours
         * Get realHours and its range is [0, 1, 2, ..., 22, 23]
         * @return {?}
         */
        function () {
            return this._hours;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "hours", {
        /**
         * @description
         * Same as realHours
         * @see realHours
         */
        get: /**
         * \@description
         * Same as realHours
         * @see realHours
         * @return {?}
         */
        function () {
            return this._hours;
        },
        /**
         * @description
         * Set viewHours to realHours
         */
        set: /**
         * \@description
         * Set viewHours to realHours
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._hours) {
                if (this._use12Hours) {
                    if (this.selected12Hours === 'PM' && value !== 12) {
                        (/** @type {?} */ (this._hours)) = ((/** @type {?} */ (value))) + 12;
                    }
                    else if (this.selected12Hours === 'AM' && value === 12) {
                        this._hours = 0;
                    }
                    else {
                        this._hours = value;
                    }
                }
                else {
                    this._hours = value;
                }
                this.update();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "minutes", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minutes;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._minutes) {
                this._minutes = value;
                this.update();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "seconds", {
        get: /**
         * @return {?}
         */
        function () {
            return this._seconds;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._seconds) {
                this._seconds = value;
                this.update();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "selected12Hours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected12Hours;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if ((/** @type {?} */ (value)).toUpperCase() !== this._selected12Hours) {
                this._selected12Hours = (/** @type {?} */ (value)).toUpperCase();
                this.update();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "defaultOpenValue", {
        get: /**
         * @return {?}
         */
        function () {
            this._defaultOpenValue.setHours(this.setValueByStep(this._defaultOpenValue.getHours(), this.hourStep));
            this._defaultOpenValue.setMinutes(this.setValueByStep(this._defaultOpenValue.getMinutes(), this.minuteStep));
            this._defaultOpenValue.setSeconds(this.setValueByStep(this._defaultOpenValue.getSeconds(), this.secondStep));
            return this._defaultOpenValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._defaultOpenValue !== value) {
                this._defaultOpenValue = value;
                this.update();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    TimeHolder.prototype.setDefaultOpenValue = /**
     * @template THIS
     * @this {THIS}
     * @param {?} value
     * @return {THIS}
     */
    function (value) {
        (/** @type {?} */ (this)).defaultOpenValue = value;
        return (/** @type {?} */ (this));
    };
    Object.defineProperty(TimeHolder.prototype, "defaultViewHours", {
        /**
         * @description
         * Get deafultViewHours when defaultOpenValue is setted
         * @see viewHours
         */
        get: /**
         * \@description
         * Get deafultViewHours when defaultOpenValue is setted
         * @see viewHours
         * @return {?}
         */
        function () {
            /** @type {?} */
            var hours = this.defaultOpenValue.getHours();
            return this._use12Hours && isNotNil(hours) ? this.calculateViewHour(hours) : hours;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "defaultRealHours", {
        /**
         * @description
         * Get defaultRealHours when defaultOpenValue is setted
         * @see realHours
         */
        get: /**
         * \@description
         * Get defaultRealHours when defaultOpenValue is setted
         * @see realHours
         * @return {?}
         */
        function () {
            return this.defaultOpenValue.getHours();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "defaultHours", {
        /**
         * @description
         * Same as defaultRealHours
         */
        get: /**
         * \@description
         * Same as defaultRealHours
         * @return {?}
         */
        function () {
            return this.defaultOpenValue.getHours();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "defaultMinutes", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultOpenValue.getMinutes();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "defaultSeconds", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultOpenValue.getSeconds();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeHolder.prototype, "default12Hours", {
        get: /**
         * @return {?}
         */
        function () {
            return this.defaultOpenValue.getHours() >= 12 ? 'PM' : 'AM';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    TimeHolder.prototype.calculateViewHour = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var selected12Hours = this._selected12Hours || this.default12Hours;
        if (selected12Hours === 'PM' && value > 12) {
            return value - 12;
        }
        if (selected12Hours === 'AM' && value === 0) {
            return 12;
        }
        return value;
    };
    return TimeHolder;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} length
 * @param {?=} step
 * @param {?=} start
 * @return {?}
 */
function makeRange(length, step, start) {
    if (step === void 0) { step = 1; }
    if (start === void 0) { start = 0; }
    step = Math.ceil(step);
    return new Array(Math.ceil(length / step))
        .fill(0)
        .map((/**
     * @param {?} _
     * @param {?} i
     * @return {?}
     */
    function (_, i) { return (i + start) * step; }));
}
var TimePickerPanelComponent = /** @class */ (function () {
    function TimePickerPanelComponent(element, updateCls, cdr) {
        this.element = element;
        this.updateCls = updateCls;
        this.cdr = cdr;
        this._hourStep = 1;
        this._minuteStep = 1;
        this._secondStep = 1;
        this.unsubscribe$ = new Subject();
        this._format = 'HH:mm:ss';
        this._defaultOpenValue = new Date();
        this._opened = false;
        this._allowEmpty = true;
        this._value = '';
        this.prefixCls = 'time-picker-panel';
        this.time = new TimeHolder();
        this.hourEnabled = true;
        this.minuteEnabled = true;
        this.secondEnabled = true;
        this.enabledColumns = 3;
        this.inDatePicker = false; // If inside a date-picker, more diff works need to be done
        this.hideDisabledOptions = false;
        /**
         * 当value 为空时选中当前时间，默认为 true
         */
        this.selectCurrentTimeWhenNull = true;
        this.showHeader = false;
        this.panelWidth = 0;
        this.valueChange = new EventEmitter();
        this._use12Hours = false;
        this.timePanelTitle = null;
        this.trackByItems = (/**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        function (index, item) {
            return index;
        });
    }
    Object.defineProperty(TimePickerPanelComponent.prototype, "use12Hours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._use12Hours;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._use12Hours = !!value;
            if (!this._use12Hours) {
                this.format = this.format ? (this.format + '').replace(/h/g, 'H') : '';
            }
            else {
                this.format = this.format ? (this.format + '').replace(/H/g, 'h') : '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "allowEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this._allowEmpty;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._allowEmpty = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "opened", {
        get: /**
         * @return {?}
         */
        function () {
            return this._opened;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._opened = value;
            if (this.opened) {
                this.initPosition();
                this.selectInputRange();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "defaultOpenValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultOpenValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._defaultOpenValue = value;
                this.time.setDefaultOpenValue(this.defaultOpenValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "disabledHours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledHours;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledHours = value;
            if (this._disabledHours) {
                this.buildHours();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "disabledMinutes", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledMinutes;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._disabledMinutes = value;
                this.buildMinutes();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "disabledSeconds", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledSeconds;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._disabledSeconds = value;
                this.buildSeconds();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._format;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._format = value;
                this.enabledColumns = 0;
                /** @type {?} */
                var charSet = new Set(value);
                this.hourEnabled = charSet.has('H') || charSet.has('h');
                this.minuteEnabled = charSet.has('m');
                this.secondEnabled = charSet.has('s');
                if (this.hourEnabled) {
                    this.enabledColumns++;
                }
                if (this.minuteEnabled) {
                    this.enabledColumns++;
                }
                if (this.secondEnabled) {
                    this.enabledColumns++;
                }
                if (this.use12Hours) {
                    this.enabledColumns++;
                    this.build12Hours();
                }
                this.panelWidth = this.enabledColumns * 66;
                this.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "hourStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hourStep;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._hourStep = value;
                this.time.hourStep = value;
                this.buildHours();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "minuteStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minuteStep;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._minuteStep = value;
                this.time.minuteStep = value;
                this.buildMinutes();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "secondStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this._secondStep;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this._secondStep = value;
                this.time.secondStep = value;
                this.buildSeconds();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerPanelComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            this._value = this.time.text;
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNotNil(value)) {
                this.time.text = value;
                /** @type {?} */
                var _value = convertToDate(this.time.text, this.format);
                this.time.setValue(_value, this.use12Hours);
                this.buildTimes();
                this.cdr.markForCheck();
            }
            else {
                this.time.setUse12Hours(this.use12Hours);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.inDatePicker) {
            this.prefixCls = 'calendar-time-picker';
        }
        this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dateObj = {
                hours: _this.time.hours,
                minutes: _this.time.minutes,
                seconds: _this.time.seconds
            };
            _this.time.text = convertToStr(_this.time.value, _this.format, _this.time.selected12Hours);
            _this.changed();
            _this.touched();
            _this.valueChange.emit(_this.time.text);
        }));
        this.buildTimes();
        this.setClassMap();
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.opened) {
            this.initPosition();
        }
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TimePickerPanelComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var use12Hours = changes.use12Hours;
        if (use12Hours &&
            !use12Hours.previousValue &&
            use12Hours.currentValue) {
            this.build12Hours();
            this.enabledColumns++;
        }
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectInputRange = /**
     * @return {?}
     */
    function () {
        if (this.timeValueAccessorDirective) {
            this.timeValueAccessorDirective.setRange();
        }
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildHours = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var hourRanges = 24;
        /** @type {?} */
        var disabledHours = this.disabledHours && this.disabledHours();
        /** @type {?} */
        var startIndex = 0;
        if (this.use12Hours) {
            hourRanges = 12;
            if (disabledHours) {
                if (this.time.selected12Hours === 'PM') {
                    /**
                     * Filter and transform hours which greater or equal to 12
                     * [0, 1, 2, ..., 12, 13, 14, 15, ..., 23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i >= 12; }))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return (i > 12 ? i - 12 : i); }));
                }
                else {
                    /**
                     * Filter and transform hours which less than 12
                     * [0, 1, 2,..., 12, 13, 14, 15, ...23] => [12, 1, 2, 3, ..., 11]
                     */
                    disabledHours = disabledHours
                        .filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i < 12 || i === 24; }))
                        .map((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return (i === 24 || i === 0 ? 12 : i); }));
                }
            }
            startIndex = 1;
        }
        this.hourRange = makeRange(hourRanges, this.hourStep, startIndex).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledHours && disabledHours.indexOf(r) !== -1
            };
        }));
        if (this.use12Hours &&
            this.hourRange[this.hourRange.length - 1].index === 12) {
            /** @type {?} */
            var temp = __spread(this.hourRange);
            temp.unshift(temp[temp.length - 1]);
            temp.splice(temp.length - 1, 1);
            this.hourRange = temp;
        }
        // 移除禁用的值
        this.hourRange = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(_this.hideDisabledOptions && n.disabled);
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildMinutes = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.minuteRange = makeRange(60, this.minuteStep).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledMinutes &&
                    _this.disabledMinutes((/** @type {?} */ (_this.time.hours))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.minuteRange = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(_this.hideDisabledOptions && n.disabled);
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildSeconds = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.secondRange = makeRange(60, this.secondStep).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledSeconds &&
                    _this.disabledSeconds((/** @type {?} */ (_this.time.hours)), (/** @type {?} */ (_this.time.minutes))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        this.secondRange = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(_this.hideDisabledOptions && n.disabled);
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.build12Hours = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var isUpperForamt = this._format.includes('A');
        this.use12HoursRange = [
            {
                index: 0,
                value: isUpperForamt ? 'AM' : 'am'
            },
            {
                index: 1,
                value: isUpperForamt ? 'PM' : 'pm'
            }
        ];
        // 移除禁用的值
        this.use12HoursRange = this.use12HoursRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !_this.hideDisabledOptions;
        }));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.buildTimes = /**
     * @return {?}
     */
    function () {
        this.buildHours();
        this.buildMinutes();
        this.buildSeconds();
        this.build12Hours();
    };
    /**
     * @param {?} event
     * @param {?} hour
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectHour = /**
     * @param {?} event
     * @param {?} hour
     * @return {?}
     */
    function (event, hour) {
        var _this = this;
        event.stopPropagation();
        this.time.setHours(hour.index, hour.disabled);
        if (hour.disabled) {
            return;
        }
        this.scrollToSelected(this.hourListElement.nativeElement, hour.index, 120, 'hour');
        if (this._disabledMinutes) {
            this.buildMinutes();
            /** @type {?} */
            var minutes = this.minuteRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (!minutes.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.index === _this.time.minutes; }))) {
                var _a = minutes[0], index = _a.index, disabled = _a.disabled;
                this.time.setMinutes(index, disabled);
            }
        }
        if (this._disabledSeconds || this._disabledMinutes) {
            this.buildSeconds();
        }
    };
    /**
     * @param {?} event
     * @param {?} minute
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectMinute = /**
     * @param {?} event
     * @param {?} minute
     * @return {?}
     */
    function (event, minute) {
        var _this = this;
        event.stopPropagation();
        this.time.setMinutes(minute.index, minute.disabled);
        if (minute.disabled) {
            return;
        }
        this.scrollToSelected(this.minuteListElement.nativeElement, minute.index, 120, 'minute');
        if (this._disabledSeconds) {
            this.buildSeconds();
            /** @type {?} */
            var seconds = this.secondRange.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (!seconds.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.index === _this.time.seconds; }))) {
                var _a = seconds[0], index = _a.index, disabled = _a.disabled;
                this.time.setSeconds(index, disabled);
            }
        }
    };
    /**
     * @param {?} event
     * @param {?} second
     * @return {?}
     */
    TimePickerPanelComponent.prototype.selectSecond = /**
     * @param {?} event
     * @param {?} second
     * @return {?}
     */
    function (event, second) {
        event.stopPropagation();
        this.time.setSeconds(second.index, second.disabled);
        if (second.disabled) {
            return;
        }
        this.scrollToSelected(this.secondListElement.nativeElement, second.index, 120, 'second');
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    TimePickerPanelComponent.prototype.select12Hours = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        event.stopPropagation();
        this.time.selected12Hours = value.value;
        if (this._disabledHours) {
            this.buildHours();
        }
        if (this._disabledMinutes) {
            this.buildMinutes();
        }
        if (this._disabledSeconds) {
            this.buildSeconds();
        }
        this.scrollToSelected(this.use12HoursListElement.nativeElement, value.index, 120, '12-hour');
    };
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    TimePickerPanelComponent.prototype.scrollToSelected = /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    function (instance, index, duration, unit) {
        if (duration === void 0) { duration = 0; }
        /** @type {?} */
        var transIndex = this.translateIndex(index, unit);
        /** @type {?} */
        var currentOption = (/** @type {?} */ ((instance.children[0].children[transIndex] ||
            instance.children[0].children[0])));
        this.scrollTo(instance, currentOption.offsetTop, duration);
    };
    /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    TimePickerPanelComponent.prototype.translateIndex = /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    function (index, unit) {
        if (unit === 'hour') {
            /** @type {?} */
            var disabledHours = this.disabledHours && this.disabledHours();
            return this.calcIndex(disabledHours, this.hourRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
        else if (unit === 'minute') {
            /** @type {?} */
            var disabledMinutes = this.disabledMinutes && this.disabledMinutes((/** @type {?} */ (this.time.hours)));
            return this.calcIndex(disabledMinutes, this.minuteRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
        else if (unit === 'second') {
            // second
            /** @type {?} */
            var disabledSeconds = this.disabledSeconds &&
                this.disabledSeconds((/** @type {?} */ (this.time.hours)), (/** @type {?} */ (this.time.minutes)));
            return this.calcIndex(disabledSeconds, this.secondRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
        else {
            // 12-hour
            return this.calcIndex([], this.use12HoursRange.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.index; })).indexOf(index));
        }
    };
    /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    TimePickerPanelComponent.prototype.scrollTo = /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    function (element, to, duration) {
        var _this = this;
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        /** @type {?} */
        var difference = to - element.scrollTop;
        /** @type {?} */
        var perTick = (difference / duration) * 10;
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            _this.scrollTo(element, to, duration - 10);
        }));
    };
    /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    TimePickerPanelComponent.prototype.calcIndex = /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    function (array, index) {
        if (array && array.length && this.hideDisabledOptions) {
            return (index -
                array.reduce((/**
                 * @param {?} pre
                 * @param {?} value
                 * @return {?}
                 */
                function (pre, value) {
                    return pre + (value < index ? 1 : 0);
                }), 0));
        }
        else {
            return index;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    TimePickerPanelComponent.prototype.changed = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.onChange) {
            this.onChange(this.time.text);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    TimePickerPanelComponent.prototype.touched = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.onTouch) {
            this.onTouch();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TimePickerPanelComponent.prototype.setClassMap = /**
     * @private
     * @return {?}
     */
    function () {
        var _a;
        this.updateCls.updateHostClass(this.element.nativeElement, (_a = {},
            _a["" + this.prefixCls] = true,
            _a[this.prefixCls + "-column-" + this.enabledColumns] = this
                .inDatePicker
                ? false
                : true,
            _a[this.prefixCls + "-narrow"] = this.enabledColumns < 3,
            _a[this.prefixCls + "-placement-bottomLeft"] = this.inDatePicker
                ? false
                : true,
            _a));
    };
    /**
     * @param {?} hour
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelectedHour = /**
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        return (hour.index === this.time.viewHours ||
            (!isNotNil(this.time.viewHours) &&
                hour.index === this.time.defaultViewHours && this.selectCurrentTimeWhenNull));
    };
    /**
     * @param {?} minute
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelectedMinute = /**
     * @param {?} minute
     * @return {?}
     */
    function (minute) {
        return (minute.index === this.time.minutes ||
            (!isNotNil(this.time.minutes) &&
                minute.index === this.time.defaultMinutes && this.selectCurrentTimeWhenNull));
    };
    /**
     * @param {?} second
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelectedSecond = /**
     * @param {?} second
     * @return {?}
     */
    function (second) {
        return (second.index === this.time.seconds ||
            (!isNotNil(this.time.seconds) &&
                second.index === this.time.defaultSeconds && this.selectCurrentTimeWhenNull));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimePickerPanelComponent.prototype.isSelected12Hours = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return (value.value.toUpperCase() === this.time.selected12Hours ||
            (!isNotNil(this.time.selected12Hours) &&
                value.value.toUpperCase() === this.time.default12Hours && this.selectCurrentTimeWhenNull));
    };
    /**
     * @return {?}
     */
    TimePickerPanelComponent.prototype.initPosition = /**
     * @return {?}
     */
    function () {
        // setTimeout(() => {
        if (this.hourEnabled && this.hourListElement) {
            if (isNotNil(this.time.viewHours)) {
                this.scrollToSelected(this.hourListElement.nativeElement, (/** @type {?} */ (this.time.viewHours)), 0, 'hour');
            }
            else {
                this.scrollToSelected(this.hourListElement.nativeElement, this.time.defaultViewHours, 0, 'hour');
            }
        }
        if (this.minuteEnabled && this.minuteListElement) {
            if (isNotNil(this.time.minutes)) {
                this.scrollToSelected(this.minuteListElement.nativeElement, (/** @type {?} */ (this.time.minutes)), 0, 'minute');
            }
            else {
                this.scrollToSelected(this.minuteListElement.nativeElement, this.time.defaultMinutes, 0, 'minute');
            }
        }
        if (this.secondEnabled && this.secondListElement) {
            if (isNotNil(this.time.seconds)) {
                this.scrollToSelected(this.secondListElement.nativeElement, (/** @type {?} */ (this.time.seconds)), 0, 'second');
            }
            else {
                this.scrollToSelected(this.secondListElement.nativeElement, this.time.defaultSeconds, 0, 'second');
            }
        }
        if (this.use12Hours && this.use12HoursListElement) {
            /** @type {?} */
            var selectedHours = isNotNil(this.time.selected12Hours)
                ? this.time.selected12Hours
                : this.time.default12Hours;
            /** @type {?} */
            var index = selectedHours === 'AM' ? 0 : 1;
            this.scrollToSelected(this.use12HoursListElement.nativeElement, index, 0, '12-hour');
        }
        // });
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    TimePickerPanelComponent.prototype.checkMinutes = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.buildMinutes();
        /** @type {?} */
        var _date = new Date(date);
        /** @type {?} */
        var canuseMinute = this.minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.disabled; }));
        if (canuseMinute && canuseMinute.length) {
            /** @type {?} */
            var minutes = canuseMinute.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (minutes.length !== 60) {
                /** @type {?} */
                var m = minutes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === _date.getMinutes(); }));
                if (!m) {
                    _date.setMinutes(minutes[0].index);
                }
                this.time.setValue(_date, this.use12Hours);
            }
        }
        return _date;
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    TimePickerPanelComponent.prototype.checkSeconds = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.buildSeconds();
        /** @type {?} */
        var _sdate = new Date(date);
        /** @type {?} */
        var canuseSecond = this.secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.disabled; }));
        if (canuseSecond && canuseSecond.length && canuseSecond.length !== 60) {
            /** @type {?} */
            var seconds = canuseSecond.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (seconds.length !== 60) {
                /** @type {?} */
                var s = seconds.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === _sdate.getSeconds(); }));
                if (!s) {
                    _sdate.setMinutes(seconds[0].index);
                }
                this.time.setValue(_sdate, this.use12Hours);
            }
        }
        return _sdate;
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    TimePickerPanelComponent.prototype.checkDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var canuseHour = this.hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.disabled; }));
        if (canuseHour && canuseHour.length) {
            /** @type {?} */
            var hour = canuseHour.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.disabled; }));
            if (hour.length !== 24) {
                /** @type {?} */
                var _h = hour.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === date.getHours(); }));
                if (!_h) {
                    date.setHours(hour[0].index);
                }
                this.time.setValue(date, this.use12Hours);
            }
        }
        /** @type {?} */
        var mdate = this.checkMinutes(date);
        return this.checkSeconds(mdate);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimePickerPanelComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.time.text = value;
        /** @type {?} */
        var _value = convertToDate(this.time.text, this.format);
        if (_value) {
            _value = this.checkDate(_value);
            this.time.setValue(_value, this.use12Hours);
        }
        if (value && this.opened) {
            this.initPosition();
        }
        this.buildTimes();
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerPanelComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerPanelComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouch = fn;
    };
    /**
     * @param {?} v
     * @param {?} type
     * @return {?}
     */
    TimePickerPanelComponent.prototype.hmsCls = /**
     * @param {?} v
     * @param {?} type
     * @return {?}
     */
    function (v, type) {
        /** @type {?} */
        var cls = '';
        /** @type {?} */
        var selected = " " + this.prefixCls + "-select-option-selected ";
        /** @type {?} */
        var disabledC = " " + this.prefixCls + "-select-option-disabled ";
        /** @type {?} */
        var f = false;
        if (type === 'h') {
            f = this.isSelectedHour(v);
        }
        else if (type === 'm') {
            f = this.isSelectedMinute(v);
        }
        else if (type === 'r') {
            f = this.isSelected12Hours(v);
        }
        else {
            f = this.isSelectedSecond(v);
        }
        if (f) {
            cls += selected;
        }
        if (type === 'r') {
            return cls;
        }
        if (v.disabled) {
            cls += disabledC;
        }
        return cls;
    };
    TimePickerPanelComponent.decorators = [
        { type: Component, args: [{
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'time-picker-panel',
                    exportAs: 'timePickerPanel',
                    template: "<div class=\"farris-timer-picker {{ inDatePicker ? prefixCls + '-panel' : '' }}\">\r\n    <div class=\"{{ prefixCls }}-inner {{ inDatePicker ? prefixCls + '-column-' + enabledColumns : ''}}\">\r\n        <div class=\"{{ prefixCls }}-combobox time-picker-panel-header\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'\" *ngIf=\"showHeader\">\r\n            <div *ngIf=\"hourEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"minuteEnabled\">{{ timePanelTitle?.hour || '\u65F6' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\" [class.time-header-split]=\"secondEnabled\">{{ timePanelTitle?.minute || '\u5206'}}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" class=\"{{ prefixCls }}-select\" style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\">{{ timePanelTitle?.seconds || '\u79D2' }}</li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" class=\"{{ prefixCls }}-select\"  style=\"height: 32px\">\r\n                <ul>\r\n                    <li class=\"time-header\"></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-combobox\" [style.width]=\"use12Hours? panelWidth+'px' : '100%'  \">\r\n            <div *ngIf=\"hourEnabled\" #hourListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li  *ngFor=\"let hour of hourRange;trackBy: trackByItems;\" (click)=\"selectHour($event,hour)\" [class]=\"hmsCls(hour, 'h')\">\r\n                        {{ hour.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"minuteEnabled\" #minuteListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let minute of minuteRange;trackBy: trackByItems\" (click)=\"selectMinute($event,minute)\" [class]=\"hmsCls(minute, 'm')\">\r\n                        {{ minute.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"secondEnabled\" #secondListElement class=\"{{ prefixCls }}-select\">\r\n                <ul>\r\n                    <li *ngFor=\"let second of secondRange;trackBy: trackByItems\" (click)=\"selectSecond($event,second)\" [class]=\"hmsCls(second, 's')\">\r\n                        {{ second.index | number: '2.0-0':'en-US' }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div *ngIf=\"use12Hours\" #use12HoursListElement class=\"{{ prefixCls }}-select\" >\r\n                <ul>\r\n                    <li *ngFor=\"let range of use12HoursRange; trackBy: trackByItems\" (click)=\"select12Hours($event, range)\" [class]=\"hmsCls(range, 'r')\">\r\n                        {{ range.value }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"{{ prefixCls }}-addon\" *ngIf=\"addOn\">\r\n            <ng-template [ngTemplateOutlet]=\"addOn\"></ng-template>\r\n        </div>\r\n    </div>\r\n</div>",
                    // styleUrls: ['./style/index.scss'],
                    providers: [
                        UpdateHostClassService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimePickerPanelComponent,
                            multi: true
                        }
                    ],
                    styles: ["\n        .calendar-time-picker-select,\n        .time-picker-panel-select {\n            overflow: overlay!important;\n            overflow-x: hidden!important;\n        }\n\n        .calendar-time-picker-select::-webkit-scrollbar,\n        .time-picker-panel-select::-webkit-scrollbar {\n            background-color: transparent!important;\n        }\n        .calendar-time-picker-select::-webkit-scrollbar-track,\n        .time-picker-panel-select::-webkit-scrollbar-track {\n            background: none;\n            background-color: transparent!important;\n        }\n\n        .calendar-time-picker-select::-webkit-scrollbar-thumb,\n        .time-picker-panel-select::-webkit-scrollbar-thumb {\n            display: none;\n        }\n        .calendar-time-picker-select:hover::-webkit-scrollbar-thumb,\n        .time-picker-panel-select:hover::-webkit-scrollbar-thumb {\n            display: block;\n        }\n      \n        .time-picker-panel-select::-webkit-scrollbar-corner {\n            background: rgba(0, 0, 0, 0);\n        }\n\n        .time-header-split:after {\n            content: ':';\n            position: absolute;\n            right: 0;\n        }\n\n        .time-picker-panel-header .calendar-time-picker-select,\n        .time-picker-panel-header .time-picker-panel-select{\n            border-left: 0!important;\n            background: white;\n            border-bottom: 1px solid #e3e3e3;\n            overflow:hidden!important\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    TimePickerPanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: UpdateHostClassService },
        { type: ChangeDetectorRef }
    ]; };
    TimePickerPanelComponent.propDecorators = {
        timeValueAccessorDirective: [{ type: ViewChild, args: [TimeValueAccessorDirective,] }],
        hourListElement: [{ type: ViewChild, args: ['hourListElement',] }],
        minuteListElement: [{ type: ViewChild, args: ['minuteListElement',] }],
        secondListElement: [{ type: ViewChild, args: ['secondListElement',] }],
        use12HoursListElement: [{ type: ViewChild, args: ['use12HoursListElement',] }],
        inDatePicker: [{ type: Input }],
        addOn: [{ type: Input }],
        hideDisabledOptions: [{ type: Input }],
        clearText: [{ type: Input }],
        placeholder: [{ type: Input }],
        selectCurrentTimeWhenNull: [{ type: Input }],
        showHeader: [{ type: Input }],
        use12Hours: [{ type: Input }],
        allowEmpty: [{ type: Input }],
        opened: [{ type: Input }],
        defaultOpenValue: [{ type: Input }],
        disabledHours: [{ type: Input }],
        disabledMinutes: [{ type: Input }],
        disabledSeconds: [{ type: Input }],
        format: [{ type: Input }],
        hourStep: [{ type: Input }],
        minuteStep: [{ type: Input }],
        secondStep: [{ type: Input }],
        value: [{ type: Input }],
        valueChange: [{ type: Output }],
        timePanelTitle: [{ type: Input }]
    };
    return TimePickerPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimePickerLocaleService = /** @class */ (function () {
    function TimePickerLocaleService(localeService) {
        this.localeService = localeService;
        this.localeConfig = {
            'zh-CHS': {
                placeholder: '请选择时间',
                time: {
                    hour: '时', minute: '分', seconds: '秒'
                }
            },
            'en': {
                placeholder: 'Please select a time',
                time: {
                    hour: 'h', minute: 'min', seconds: 's'
                }
            },
            'zh-CHT': {
                placeholder: '請選擇時間',
                time: {
                    hour: '時', minute: '分', seconds: '秒'
                }
            }
        };
    }
    /**
     * @return {?}
     */
    TimePickerLocaleService.prototype.getLocaleConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var locale = this.localeService.localeId;
        if (locale && this.localeConfig[locale]) {
            return this.localeConfig[locale];
        }
        else {
            return this.localeConfig['zh-CHS'];
        }
    };
    TimePickerLocaleService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TimePickerLocaleService.ctorParameters = function () { return [
        { type: LocaleService }
    ]; };
    /** @nocollapse */ TimePickerLocaleService.ngInjectableDef = defineInjectable({ factory: function TimePickerLocaleService_Factory() { return new TimePickerLocaleService(inject(LocaleService)); }, token: TimePickerLocaleService, providedIn: "root" });
    return TimePickerLocaleService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var num = 0;
var TimePickerComponent = /** @class */ (function () {
    function TimePickerComponent(element, renderer, vcRef, cfr, cdr, localeService) {
        this.element = element;
        this.renderer = renderer;
        this.vcRef = vcRef;
        this.cfr = cfr;
        this.cdr = cdr;
        this.localeService = localeService;
        this.hostCls = true;
        this._disabled = false;
        this._readonly = false;
        this._editable = true;
        this._allowEmpty = true;
        this._autoFocus = false;
        this._hideDisabledOptions = false;
        this.cRef = null;
        this.isInit = false;
        this.groupIcon = '<i class="f-icon f-icon-timepicker"></i>';
        this.display = 'block';
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.clearText = 'clear';
        this.popupClassName = '';
        this.defaultOpenValue = new Date();
        this.format = 'HH:mm:ss';
        this.isOpen = false;
        this.showHeader = false;
        this.openChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.clear = new EventEmitter();
        this._use12Hours = false;
        this.changeFlag = false;
        this.localConfig = null;
        this.overLayService = new OverLayHiddenService();
    }
    Object.defineProperty(TimePickerComponent.prototype, "use12Hours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._use12Hours;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._use12Hours = !!value;
            if (value && this.format) {
                this.format = this.format.replace(/H/g, 'h');
            }
            else if (!value && this.format) {
                this.format = this.format.replace(/h/g, 'H');
            }
            if (this._use12Hours) {
                if (!this.format) {
                    this.format = 'hh:mm:ss a';
                }
                else {
                    if (this.format.indexOf('a') === -1) {
                        this.format = this.format + ' a';
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "hideDisabledOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideDisabledOptions;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideDisabledOptions = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "allowEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this._allowEmpty;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._allowEmpty = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "autoFocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoFocus;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoFocus = toBoolean(value);
            this.updateAutoFocus();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "editable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._editable = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimePickerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            if (this._onChange) {
                this._onChange(this.value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.localeService) {
            this.localConfig = this.localeService.getLocaleConfig();
            this.placeholder = this.placeholder ?
                this.placeholder :
                this.localConfig.placeholder ? this.localConfig.placeholder : '请选择时间';
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var use12Hours = changes.use12Hours;
        if (use12Hours && (!this.format || this.format.indexOf('a') === -1)) {
            if (this.use12Hours) {
                this.format = this.format + ' a';
            }
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isInit = true;
        this.updateAutoFocus();
        if (!document.body.querySelector('.time-picker-overlay')) {
            this.overlayRef = this.renderer.createElement('div');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayRef, 'time-picker-overlay');
            this.renderer.addClass(this.overlayPanelRef, "overlay-panel-" + num++);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
            document.body.appendChild(this.overlayRef);
        }
        else {
            this.overlayRef = document.body.querySelector('.time-picker-overlay');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayPanelRef, "overlay-panel-" + num++);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
        }
        this.overlayRef.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
        }));
        this.timeInput.nativeElement.addEventListener('blur', (/**
         * @return {?}
         */
        function () {
            _this.onBlur();
        }));
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.timeInput.nativeElement.removeEventListener('blur', this.onBlur);
        this.overLayService.destory(this.element.nativeElement);
        this.overLayService = null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimePickerComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.timeInput.nativeElement.value &&
            !this.readonly &&
            !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = '';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimePickerComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.readonly && !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = 'none';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimePickerComponent.prototype.open = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.stopPropagation();
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.isOpen) {
            this.close();
            return;
        }
        this.creatPanel();
        this.isOpen = true;
        this.openChange.emit(this.isOpen);
        this.renderer.appendChild(this.overlayPanelRef, this.cRef.location.nativeElement);
        this.renderer.setStyle(this.overlayRef, 'display', 'block');
        this.renderer.setStyle(this.overlayRef, 'zIndex', '8888888888');
        this.overLayService.registerMouseEvent(this.element.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.cRef && _this.cRef.location.nativeElement.contains(e.target)) {
                return;
            }
            _this.renderer.setStyle(_this.overlayRef, 'display', 'none');
            _this.close();
        }));
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setPosition();
            _this.renderer.addClass(_this.cRef.location.nativeElement, 'f-area-show');
        }), 10);
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.isOpen = false;
        this.cRef.instance.opened = false;
        this.renderer.removeClass(this.cRef.location.nativeElement, 'f-area-show');
        while (this.overlayPanelRef.lastChild) {
            this.overlayPanelRef.removeChild(this.overlayPanelRef.lastChild);
        }
        this.openChange.emit(this.isOpen);
        this.focus();
        if (this.cRef) {
            this.cRef.destroy();
            this.cRef = null;
        }
        this.overLayService.destory(this.element.nativeElement);
        this.renderer.removeStyle(this.overlayRef, 'zIndex');
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.creatPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.cRef === null) {
            this.vcRef.clear();
            this.cRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(TimePickerPanelComponent));
            this.cRef.location.nativeElement.classList.add('f-area-hide');
            // 解决在grid懒加载中，没有刷新视图的问题
            this.cRef.changeDetectorRef.detectChanges();
            this.cRef.instance.format = this.format;
            this.cRef.instance.hourStep = this.hourStep;
            this.cRef.instance.minuteStep = this.minuteStep;
            this.cRef.instance.secondStep = this.secondStep;
            this.cRef.instance.disabledHours = this.disabledHours;
            this.cRef.instance.disabledMinutes = this.disabledMinutes;
            this.cRef.instance.disabledSeconds = this.disabledSeconds;
            this.cRef.instance.hideDisabledOptions = this.hideDisabledOptions;
            this.cRef.instance.use12Hours = this.use12Hours;
            this.cRef.instance.opened = this.isOpen;
            this.cRef.instance.defaultOpenValue = this.defaultOpenValue;
            this.cRef.instance.value = this.value;
            this.cRef.instance.showHeader = this.showHeader;
            this.cRef.instance.timePanelTitle = this.localConfig.time;
            this.cRef.instance.valueChange.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                _this.value = val;
                _this.cdr.detectChanges();
                _this.valueChange.emit(val);
            }));
        }
        else {
            this.cRef.instance.value = this.value;
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.setPosition = /**
     * @return {?}
     */
    function () {
        var _a = this.element.nativeElement.getBoundingClientRect(), elTop = _a.top, elLeft = _a.left, elHeight = _a.height, elWidth = _a.width;
        /** @type {?} */
        var panelHeight = 194;
        if (elTop + panelHeight + 30 > window.innerHeight) {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', elTop - panelHeight + "px");
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', elTop + elHeight + "px");
        }
        /** @type {?} */
        var panelWidth = this.cRef.instance.panelWidth;
        if (window.innerWidth - elLeft < panelWidth) {
            /** @type {?} */
            var r = window.innerWidth - elLeft - elWidth;
            this.renderer.setStyle(this.cRef.location.nativeElement, 'right', r + "px");
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'left', elLeft + "px");
        }
        this.cRef.instance.opened = true;
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.updateAutoFocus = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.onClickClearBtn = /**
     * @return {?}
     */
    function () {
        this.value = null;
        this.cRef.instance.time.clear();
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.blur();
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        if (this.value) {
            /** @type {?} */
            var date = convertToDate(this.value, this.format);
            if (this.cRef) {
                this.cRef.instance.value = this.value;
            }
            this.value = convertToStr(date, this.format);
            if (this.changeFlag) {
                this.valueChange.emit(this.value);
                this.changeFlag = false;
            }
            if (this._onTouched) {
                this._onTouched(this.value);
            }
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    TimePickerComponent.prototype.onValueChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.changeFlag = true;
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.clear.emit();
        this.value = '';
        if (this.cRef && this.cRef.instance) {
            this.cRef.instance.time.clear();
        }
        if (this._onTouched) {
            this._onTouched(this.value);
        }
        this.cdr.detectChanges();
    };
    /**
     * @param {?} time
     * @return {?}
     */
    TimePickerComponent.prototype.writeValue = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this._value = time;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimePickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    TimePickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    TimePickerComponent.decorators = [
        { type: Component, args: [{
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    // tslint:disable-next-line:component-selector
                    selector: 'farris-time-picker',
                    exportAs: 'timePicker',
                    // styleUrls: ['./style/index.scss'],
                    template: "<!-- <input-group\r\n    [groupText]=\"groupIcon\"\r\n    #inputgroup\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [(ngModel)]=\"value\"\r\n    (valueChange)=\"onValueChange($event)\"\r\n    [enableClear]=\"true\"\r\n    (clickHandle)=\"open()\"\r\n    (clear)=\"onClear()\"\r\n    [placeholder]=\"placeholder\"\r\n></input-group> -->\r\n<div\r\n    class=\"input-group\"\r\n    [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly && !disabled,\r\n        'f-state-editable': editable && !disabled && !readonly\r\n    }\"\r\n>\r\n    <input\r\n        type=\"text\"\r\n        class=\"form-control f-utils-fill\"\r\n        [attr.placeholder]=\"disabled || readonly?'':placeholder\"\r\n        name=\"farris-time-picker\"\r\n        [(ngModel)]=\"value\"\r\n        (ngModelChange)=\"onValueChange($event)\"\r\n        #timeInput\r\n        autocomplete=\"off\"\r\n        [readonly]=\"readonly || !editable\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"open($event)\"\r\n    />\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!readonly && !disabled\">\r\n        <span class=\"input-group-text input-group-clear f-cmp-iconbtn\" (click)=\"onClear()\"  style=\"display: none;padding:0px 4px;\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n\r\n        <span class=\"input-group-text f-cmp-iconbtn\" (click)=\"open($event)\" style=\"padding:0px 4px;padding-top: 2px;\">\r\n            <i class=\"f-icon f-icon-timepicker\" style=\"font-size:0.85rem\"></i>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                    animations: [slideMotion],
                    providers: [
                        UpdateHostClassService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TimePickerComponent,
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    TimePickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef },
        { type: TimePickerLocaleService }
    ]; };
    TimePickerComponent.propDecorators = {
        timeInput: [{ type: ViewChild, args: ['timeInput',] }],
        hostCls: [{ type: HostBinding, args: ['class.f-component-timepicker',] }],
        display: [{ type: HostBinding, args: ['style.display',] }],
        hourStep: [{ type: Input }],
        minuteStep: [{ type: Input }],
        secondStep: [{ type: Input }],
        clearText: [{ type: Input }],
        popupClassName: [{ type: Input }],
        placeholder: [{ type: Input }],
        addOn: [{ type: Input }],
        defaultOpenValue: [{ type: Input }],
        disabledHours: [{ type: Input }],
        disabledMinutes: [{ type: Input }],
        disabledSeconds: [{ type: Input }],
        format: [{ type: Input }],
        isOpen: [{ type: Input }],
        showHeader: [{ type: Input }],
        use12Hours: [{ type: Input }],
        openChange: [{ type: Output }],
        valueChange: [{ type: Output }],
        clear: [{ type: Output }],
        hideDisabledOptions: [{ type: Input }],
        allowEmpty: [{ type: Input }],
        autoFocus: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
    };
    return TimePickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimePickerModule = /** @class */ (function () {
    function TimePickerModule() {
    }
    TimePickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TimePickerComponent,
                        TimePickerPanelComponent,
                        TimeValueAccessorDirective
                    ],
                    entryComponents: [TimePickerPanelComponent],
                    exports: [TimePickerPanelComponent, TimePickerComponent],
                    imports: [CommonModule, FormsModule]
                },] }
    ];
    return TimePickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TimePickerComponent, TimePickerModule, TimePickerPanelComponent, TimeValueAccessorDirective, AnimationDuration, AnimationCurves, slideMotion, UpdateHostClassService, TimePickerLocaleService };

//# sourceMappingURL=farris-ui-time-picker.js.map