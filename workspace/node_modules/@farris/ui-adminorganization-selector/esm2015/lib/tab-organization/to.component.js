/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-organization/to.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, Injector, ViewChild, TemplateRef, HostBinding, NgZone } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import * as _ from 'lodash-es';
import { of } from 'rxjs';
import { FavoritesTool } from '../../utils/favorites.tool';
import { ChangeType } from '../../utils/index.type';
import { CommonUtil } from '../../utils/common.tool';
import { TreeTableComponent } from '@farris/ui-treetable';
import { StateMgrTool } from '../../utils/state.mgr.tool';
import { switchMap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { LocaleService } from '@farris/ui-locale';
import { ORGANIZATION_SELECTOR_LOCALE } from '../../utils/locale';
export class OrganizationComponent {
    /**
     * @param {?} apiService
     * @param {?} cdr
     * @param {?} favoritesTool
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} stateMgr
     * @param {?} msgService
     */
    constructor(apiService, cdr, favoritesTool, injector, ngZone, stateMgr, msgService) {
        this.apiService = apiService;
        this.cdr = cdr;
        this.favoritesTool = favoritesTool;
        this.injector = injector;
        this.ngZone = ngZone;
        this.stateMgr = stateMgr;
        this.msgService = msgService;
        this.baseCls = true;
        this.primaryField = 'orgId';
        this.pathLength = 4;
        this.dataPermission = false;
        this.dataPermissionIds = [];
        this.selectionsChange = new EventEmitter();
        this.originalTreeData = [];
        this.locationOrgText = '';
        this.treeListData = [];
        this.treeTableCols = [];
        this.selections = [];
        this.favoritesList = [];
        this.initLoad = true;
        this.checkedOrgs = [];
        this.loadingService = null;
        this.localeService = null;
        this.dataToChecked = [];
        this.allAdminOrgData = [];
        this.orgTypeId = '9edf25d1-b991-4dde-90b9-30145422d24d';
        this.deptTypeId = '33c21504-3384-42a7-8fc3-c1b5e9e982d0';
        this.beforeClickNode = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.enableHierarchicalLoading) {
                return of(true);
            }
            if (!this.multiSelect) {
                if (e.rowNode.isSelected) {
                    this.setSelections([]);
                }
                else {
                    this.setSelections(new Array(e.rowNode.node.data));
                }
                return of(false);
            }
            // const param: OrgRequestParam = {
            //     absOrgType: this.absOrgType,
            //     notGetStopOrg: this.notGetStopOrg,
            //     getCurUser: false,
            //     parentID: e.rowNode.id,
            //     withAllSub: true,
            //     getOrgAllPath: true
            // };
            // return this.apiService.getOrganization(param).pipe(
            //     switchMap(
            //         (data: any) => {
            //             // if (data['data'].length > this.selectedLimit && !e.rowNode.isChecked) {
            //             //     this.msgService.show('warning', `亲，一次性选择了超过${this.selectedLimit}条数据~`, true);
            //             //     return of(false)
            //             // }
            //             // if (!e.rowNode.isChecked) {
            //             //     // todo 待验证，加入selection，
            //             //     data.data.forEach(item => {
            //             //         if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.selections) === -1) {
            //             //             this.setSelections(item, ChangeType.Append, 'other');
            //             //         }
            //             //     })
            //             // } else {
            //             //     this.selections.forEach((selection, index) => {
            //             //         data.data.forEach(item => {
            //             //             if (selection[this.primaryField] === item[this.primaryField]) {
            //             //                 this.setSelections(item, ChangeType.Remove, 'other');
            //             //             }
            //             //         });
            //             //     });
            //             // }
            //             // this.cdr.detectChanges();
            //             return of(true);
            //         }
            //     )
            // );
        });
        this.beforeCheckAll = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.enableHierarchicalLoading) {
                return of(true);
            }
            /** @type {?} */
            const param = {
                absOrgType: this.absOrgType,
                notGetStopOrg: this.notGetStopOrg,
                getCurUser: false,
                parentID: e.instance.data[0].id,
                withAllSub: true,
                getOrgAllPath: true
            };
            return this.apiService.getOrganization(param).pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // if (data['data'].length > this.selectedLimit) {
                //     this.msgService.show('warning', `亲，一次性选择了超过${this.selectedLimit}条数据~`, true);
                //     return of(false)
                // }
                this.setSelections(data['data'], ChangeType.ValueChanged, 'other');
                return of(true);
            })));
        });
        this.cdr = this.injector.get(ChangeDetectorRef);
        this.loadingService = this.injector.get(LoadingService, null);
        this.localeService = this.injector.get(LocaleService);
        if (!this.localeService.langData['organizationSelector']) {
            this.localeService.setLocaleData(ORGANIZATION_SELECTOR_LOCALE);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.favoritesSub.unsubscribe();
        this.selectionsSub.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.treeTableCols = [
            { field: 'name', title: this.localeService.getValue("organizationSelector.organization.orgName"), template: this.orgNameCell },
            { field: 'abbreviation', title: this.localeService.getValue("organizationSelector.organization.orgAbbreviation") }
        ];
        if (this.enableFavorites) {
            this.treeTableCols.push({
                field: '',
                title: this.localeService.getValue("organizationSelector.organization.favorite"),
                template: this.favoritesCell
            });
            this.treeTableCols[0].width = 300;
            this.treeTableCols[1].width = 300;
        }
        /** @type {?} */
        const param = {
            withDisabledOrg: !this.notGetStopOrg,
            gettingCurrentOrg: false,
            onlyDisplayOrg: false
        };
        this.apiService.getOrganizations(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res && res.orgs) {
                this.allAdminOrgData = res.orgs;
                if (this.initLoad && this.isActiveTab) {
                    if (this.enableHierarchicalLoading) {
                        this.hlAssembleData();
                    }
                    else {
                        this.assembleData();
                    }
                    this.initLoad = false;
                }
            }
        }));
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.favoritesList = data;
            this.setFavorites(this.treeListData);
            this.farrisTree.detectChanges();
        }));
        this.currentTabId = this.activeTabId;
        this.selectionsSub = this.stateMgr.selectionsSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data.changeType === ChangeType.ValueChanged) {
                this.selections = _.cloneDeep(data.value);
                if (this.selections.length === 0) {
                    this.dataToSelected = null;
                    this.dataToChecked = [];
                    this.farrisTree.clearCheckeds();
                    this.farrisTree.clearSelections();
                    this.farrisTree.detectChanges();
                }
            }
            else if (data.changeType === ChangeType.Remove) {
                this.selections = this.selections.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item['id'] !== data.value['id']));
                if (data.from == 'selection' && this.currentTabId == 'organization') {
                    this.inTreeList(this.treeListData, data.value);
                    if (data.value.inTreeList) {
                        if (this.multiSelect) {
                            this.farrisTree.unCheckedNode(data.value['id']);
                        }
                        else {
                            this.farrisTree.clearAll();
                        }
                    }
                }
            }
            else if (data.changeType === ChangeType.Append) {
                CommonUtil.findIndex(data.value['id'], 'id', this.selections) === -1 ? this.selections.push(data.value) : null;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /*
        const orgIdsChange = changes.orgIds;
        if (orgIdsChange && orgIdsChange.currentValue) {
            this.checkedOrgs = orgIdsChange.currentValue;
        }
        */
    }
    // 初始tab页不为组织架构，切换至组织架构时获取组织数据
    /**
     * @return {?}
     */
    loadTreeData() {
        if (this.initLoad) {
            if (this.enableHierarchicalLoading) {
                this.hlAssembleData();
            }
            else {
                this.assembleData();
            }
            this.initLoad = false;
        }
    }
    // 设置当前组织树各个节点的收藏状态
    /**
     * @private
     * @param {?} treeListData
     * @return {?}
     */
    setFavorites(treeListData) {
        for (let i = 0; i < treeListData.length; i++) {
            if (CommonUtil.findIndex(treeListData[i].id, 'id', this.favoritesList) === -1) {
                treeListData[i].data.inFavorites = false;
            }
            else {
                treeListData[i].data.inFavorites = true;
            }
            if (treeListData[i].children.length) {
                this.setFavorites(treeListData[i].children);
            }
        }
    }
    /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    setSelections(selections, changeType = ChangeType.ValueChanged, from = 'tree') {
        this.stateMgr.emitSelections(selections, changeType, from);
    }
    // 组织树全选事件
    /**
     * @return {?}
     */
    checkAll() {
        if (!this.enableHierarchicalLoading) {
            /** @type {?} */
            const checkeds = [];
            this.farrisTree.checkeds.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                checkeds.push(item.data);
            }));
            this.setSelections(checkeds);
        }
    }
    // 组织树取消全选事件
    /**
     * @return {?}
     */
    unCheckAll() {
        this.setSelections([]);
    }
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    /**
     * @param {?} e
     * @return {?}
     */
    changeSelections(e) {
        /*
        if (!this.enableHierarchicalLoading && !!e.originalEvent) {
            this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
        }
        */
        this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleChecked(e) {
        /** @type {?} */
        let checkeds = [];
        e && e.instance && e.instance.checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            checkeds.push(item.data);
        }));
        this.setSelections(checkeds.concat(this.dataToChecked));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleSelected(e) {
        /** @type {?} */
        let selected = [];
        e && e.instance && e.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            selected.push(item.data);
        }));
        this.setSelections(selected);
    }
    // 根据传入的组织id确定已选择组织
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    assembleDataByOrgIds(ids) {
        if (!ids || ids.length === 0) {
            return;
        }
        if (ids && ids.length > 0 && !this.multiSelect) {
            this.msgService.show('warning', this.localeService.getValue("organizationSelector.errorMessage.multiSelect"), true);
            return;
        }
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            idList: ids,
            getCurUser: false,
            getOrgAllPath: true,
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res && res.data && res.data.length > 0) {
                this.checkedOrgs = res.data;
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item['id'], 'id', this.selections) === -1) {
                        this.setSelections(item, ChangeType.Append, 'other');
                    }
                }));
                this.tickSelections();
                this.cdr.detectChanges();
            }
        }));
    }
    // 分层加载组织树
    /**
     * @return {?}
     */
    hlAssembleData() {
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        const param = {
            withDisabledOrg: !this.notGetStopOrg,
            gettingCurrentOrg: true,
            onlyDisplayOrg: this.onlyDisplayCompany
        };
        this.apiService.getOrganizationsWithLayer(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res || !res.orgs) {
                return;
            }
            /** @type {?} */
            const currentUserOrg = this.allAdminOrgData.find((/**
             * @param {?} data
             * @return {?}
             */
            data => data.id == res.currentOrg.orgId));
            if (this.onlyDisplayCompany) {
                /** @type {?} */
                const allPathInfoOrgList = this.allAdminOrgData.filter((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => currentUserOrg.path.startsWith(data.path) && data.valueType == this.orgTypeId));
                /** @type {?} */
                let layer = 0;
                allPathInfoOrgList.forEach((/**
                 * @param {?} org
                 * @return {?}
                 */
                org => {
                    if (Number(org.layer) > layer) {
                        this.currentUserOrgId = org.id;
                        this.currentUserOrgPath = org.path;
                        layer = Number(org.layer);
                    }
                }));
            }
            else {
                this.currentUserOrgId = currentUserOrg.id;
                this.currentUserOrgPath = currentUserOrg.path;
            }
            if (this.onlyCurrentAdminOrg) {
                /** @type {?} */
                const deptPathList = [];
                for (let i = 0; i < this.currentUserOrgPath.length / 4; i++) {
                    /** @type {?} */
                    let indexData = res.orgs.find((/**
                     * @param {?} org
                     * @return {?}
                     */
                    org => {
                        if (i == 0) {
                            return org.path == this.currentUserOrgPath;
                        }
                        else {
                            return org.path == this.currentUserOrgPath.slice(0, -4 * i);
                        }
                    }));
                    if (indexData.valueType == this.orgTypeId) {
                        this.currentAdminOrgPath = indexData.path;
                        break;
                    }
                    else {
                        if (indexData.path != this.currentUserOrgPath) {
                            deptPathList.push(indexData.path);
                        }
                    }
                }
                if (this.currentAdminOrgPath == this.currentUserOrgPath) {
                    this.originalTreeData = [res.orgs.find((/**
                         * @param {?} org
                         * @return {?}
                         */
                        org => org.path == this.currentUserOrgPath))];
                }
                else {
                    deptPathList.push(this.currentAdminOrgPath);
                    for (const item of deptPathList) {
                        /** @type {?} */
                        let targetOrgData = this.allAdminOrgData.filter((/**
                         * @param {?} org
                         * @return {?}
                         */
                        org => org.path.slice(0, -4) == item && org.valueType == this.deptTypeId && !org.disabled));
                        this.originalTreeData = this.originalTreeData.concat(targetOrgData || []);
                    }
                    this.originalTreeData.push(res.orgs.find((/**
                     * @param {?} org
                     * @return {?}
                     */
                    org => org.path == this.currentAdminOrgPath)));
                }
            }
            else {
                for (let i = this.currentUserOrgPath.length / 4, index = 1; i > 1; i--) {
                    /** @type {?} */
                    let targetOrgData = this.allAdminOrgData.filter((/**
                     * @param {?} org
                     * @return {?}
                     */
                    org => Number(org['layer']) == i && org.path.slice(0, -4) == this.currentUserOrgPath.slice(0, -4 * index) && !org.disabled));
                    this.originalTreeData = this.originalTreeData.concat(targetOrgData || []);
                    index += 1;
                }
                this.originalTreeData.push(res.orgs.find((/**
                 * @param {?} org
                 * @return {?}
                 */
                org => org['layer'] == '1')));
                if (this.onlyDisplayCompany) {
                    this.originalTreeData = this.originalTreeData.filter((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => data.valueType == this.orgTypeId));
                }
            }
            this.originalTreeData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.selectable = true;
                if (this.enableFavorites) {
                    if (CommonUtil.findIndex(item['id'], 'id', this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }
            }));
            if (res.currentOrg.orgId == 'nullorg') {
                // 需要区分是否为admin账户登录
                this.treeListData = this.dataToTree(this.originalTreeData, 1, '*');
            }
            else {
                this.treeListData = this.dataToTree(this.originalTreeData, 1, this.currentUserOrgPath);
            }
            this.farrisTree.loadData(this.treeListData);
            if (this.multiSelect) {
                this.checkOrgTreeNodes();
            }
            else {
                this.selectOrgTreeNode();
            }
            this.cdr.detectChanges();
            if (this.loadingService) {
                this.loadingService.close();
            }
        }));
    }
    // 全加载组织树
    /**
     * @return {?}
     */
    assembleData() {
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        const param = {
            withDisabledOrg: (!this.notGetStopOrg).toString(),
            getingCurrentOrg: '' + true,
        };
        this.apiService.getOrganizations(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res || !res.orgs) {
                return;
            }
            if (this.enableFavorites) {
                res.orgs.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item['id'], 'id', this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }));
            }
            this.originalTreeData = res.orgs;
            this.treeListData = this.dataToTree(res.orgs, 1, res.currentOrg.orgPath);
            this.farrisTree.loadData(this.treeListData);
            if (this.multiSelect) {
                this.checkOrgTreeNodes();
            }
            else {
                this.selectOrgTreeNode();
            }
            this.cdr.detectChanges();
            if (this.loadingService) {
                this.loadingService.close();
            }
        }));
    }
    // 确定已选组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    inTreeList(treeListData, item) {
        for (let i = 0; i < treeListData.length; i++) {
            if (treeListData[i].id === item['id']) {
                item.inTreeList = true;
                break;
            }
            if (treeListData[i].children.length) {
                this.inTreeList(treeListData[i].children, item);
            }
        }
    }
    // 在当前组织树内勾选所有已选择的组织
    /**
     * @private
     * @return {?}
     */
    tickSelections() {
        // const ids = [];
        // this.selectedDataNotInTreeList = [];
        // this.selections.forEach(item => {
        //     this.inTreeList(this.treeListData, item);
        //     if (!!item.inTreeList) {
        //         ids.push(item[this.primaryField]);
        //     } else {
        //         if(!this.multiSelect) {
        //             this.singleSelectedData = null;
        //         }
        //         this.selectedDataNotInTreeList.push(item);
        //     }
        // });
        // this.ngZone.runOutsideAngular(() => {
        //     setTimeout(() => {
        //         if (!ids.length) {
        //             return;
        //         }
        //         if (this.multiSelect) {
        //             this.farrisTree.checkedNodes(ids, true, true);
        //         } else {
        //             this.farrisTree.clearSelections();
        //             //
        //             this.farrisTree.detectChanges();
        //             this.selectOrgTreeNode();
        //         }
        //     })
        // })
    }
    /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    dataToTree(plainSource, layer, expandedPath = '') {
        /** @type {?} */
        const treeSource = this.dealData(plainSource, expandedPath ? expandedPath : '');
        // const parents = treeSource.filter(item => {
        //     return item.data.layer === layer;
        // });
        // this.treeData(parents, treeSource, 1);
        return treeSource;
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    dealDataWhenExpandTreeNode(data) {
        if (!data || !data.length) {
            return [];
        }
        /** @type {?} */
        const newDatas = [];
        data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            /** @type {?} */
            const newsDataObj = {
                data: {
                    id: item.id,
                    name: item.name,
                    path: item.path,
                    code: item.code,
                    abbreviation: item.abbreviation,
                    layer: Number(item.layer),
                    inFavorites: item.inFavorites
                },
                expanded: false,
                children: []
            };
            if (!item.isDetail) {
                newsDataObj.leaf = false;
            }
            newDatas.push(newsDataObj);
        }));
        return newDatas;
    }
    /**
     * 预处理组织数据
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    dealData(data, expandedPath = '') {
        /** @type {?} */
        const pathList = [];
        if (expandedPath != '') {
            /** @type {?} */
            let maxLength = expandedPath.length / this.pathLength;
            if (this.enableHierarchicalLoading) {
                maxLength -= 1;
            }
            for (let a = 0; a < maxLength; a++) {
                pathList.push({ path: expandedPath.substring(0, 4 * (a + 1)) });
            }
        }
        else {
            return [];
        }
        /** @type {?} */
        const nodes = new Map();
        /** @type {?} */
        const newDatas = [];
        if (data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const path = item['path'];
                /** @type {?} */
                let parentPath;
                if (this.onlyCurrentAdminOrg) {
                    parentPath = path == this.currentAdminOrgPath ? 'top' : item.path.slice(0, -4);
                }
                else {
                    parentPath = item['layer'] == '1' ? 'top' : item.path.slice(0, -4);
                }
                if (!nodes[path]) {
                    nodes[path] = { children: [] };
                }
                nodes[path] = {
                    data: {
                        id: item.id,
                        name: item.name,
                        path: item.path,
                        code: item.code,
                        abbreviation: item.abbreviation,
                        layer: Number(item.layer),
                        inFavorites: item.inFavorites
                    },
                    expanded: false,
                    children: nodes[path]['children']
                };
                if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1 || Number(item.layer) < this.layer) {
                    nodes[path]['expanded'] = true;
                }
                else {
                    nodes[path]['expanded'] = false;
                    if (this.enableHierarchicalLoading && !item.isDetail) {
                        nodes[path]['leaf'] = false;
                    }
                }
                if (this.dataPermission && this.dataPermissionIds.length) {
                    /** @type {?} */
                    const target = this.dataPermissionIds.find((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => t == item['orgId']));
                    nodes[path]['selectable'] = target ? true : false;
                }
                if (parentPath == 'top') {
                    newDatas.push(nodes[path]);
                }
                else {
                    if (!nodes[parentPath]) {
                        nodes[parentPath] = { children: [] };
                    }
                    ((/** @type {?} */ (nodes[parentPath]['children']))).push(nodes[path]);
                }
            }));
        }
        return newDatas;
    }
    /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    treeData(parents, treeSource, layer) {
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        parent => {
            /** @type {?} */
            const parentPath = parent['data']['path'];
            /** @type {?} */
            const parentLayer = parent['data']['layer'];
            treeSource.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item && item['data'] && item['data']['path']) {
                    /** @type {?} */
                    const itemPath = item['data']['path'];
                    /** @type {?} */
                    const itemLayer = item['data']['layer'];
                    /** @type {?} */
                    let targetPath;
                    if (itemPath && itemPath.length > parentPath.length) {
                        targetPath = itemPath.substr(0, Number(layer) * 4);
                    }
                    if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                        parent['children'].push(item);
                    }
                    if (parentPath === targetPath) {
                        this.treeData([item], treeSource, Number(layer) + 1);
                    }
                }
            }));
        }));
    }
    // 收藏或取消收藏当前节点对应的组织
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    toggleFavorites(e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    }
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    listenTreeExpand(obj) {
        // todo 分层加载
        if (this.enableHierarchicalLoading && obj.children.length === 0) {
            this.getOrganizationByParentNode(obj);
        }
    }
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    getOrganizationByParentNode(parentNode) {
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        const param = {
            withDisabledOrg: !this.notGetStopOrg,
            parentOrgId: parentNode.id,
            gettingCurrentOrg: false,
            onlyDisplayOrg: this.onlyDisplayCompany
        };
        this.apiService.getOrganizationsWithLayer(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res && res.orgs) {
                /** @type {?} */
                const newDatas = [];
                res.orgs.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if ((!this.onlyCurrentAdminOrg || item['valueType'] == this.deptTypeId) && !item.disabled) {
                        item.selectable = true;
                        if (this.dataPermission && this.dataPermissionIds.length) {
                            /** @type {?} */
                            const target = this.dataPermissionIds.find((/**
                             * @param {?} t
                             * @return {?}
                             */
                            t => t == item['id']));
                            if (!target) {
                                item.selectable = false;
                            }
                        }
                        this.originalTreeData.push(item);
                    }
                    if (this.enableFavorites) {
                        item.inFavorites = true;
                        if (CommonUtil.findIndex(item['id'], 'id', this.favoritesList) === -1) {
                            item.inFavorites = false;
                        }
                    }
                    newDatas.push(item);
                }));
                /** @type {?} */
                const nodes = this.dealDataWhenExpandTreeNode(newDatas);
                this.farrisTree.appendChildren(nodes, parentNode);
                this.farrisTree.detectChanges();
                if (this.multiSelect) {
                    this.checkOrgTreeNodes();
                }
                else {
                    this.selectOrgTreeNode();
                }
                if (this.loadingService) {
                    this.loadingService.close();
                }
            }
        }));
    }
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    nodeExpanded(item, arr, expanded) {
        for (let i = 0; i < arr.length; i++) {
            if (item.data.id === arr[i].data.id) {
                expanded[0] = arr[i].expanded;
            }
            else if (arr[i].children.length) {
                this.nodeExpanded(item, arr[i].children, expanded);
            }
        }
    }
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    expandTreeNode(treeData, path, layer) {
        treeData.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (path.includes(node.data.path)) {
                this.farrisTree.expandNode(node.data.id);
            }
            if (node.data.layer < layer && node.children.length) {
                this.expandTreeNode(node.children, path, layer);
            }
        }));
    }
    /**
     * @return {?}
     */
    selectOrgTreeNode() {
        if (this.treeListData && this.selections.length) {
            this.dataToSelected = this.selections[0];
            // if (!this.farrisTree.selectedRow) {
            //     if (this.orgTreeTimer) {
            //         clearTimeout(this.orgTreeTimer);
            //     }
            //     this.orgTreeTimer = 
            // } else {
            //     this.farrisTree.scrollToCurrentNode();
            // }
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.inTreeList(this.treeListData, this.dataToSelected);
                if (this.dataToSelected.inTreeList) {
                    this.farrisTree.selectNode(this.dataToSelected['id']);
                    this.dataToSelected = null;
                }
            }), 300);
        }
    }
    /**
     * @return {?}
     */
    checkOrgTreeNodes() {
        if (this.treeListData && this.selections.length) {
            this.dataToChecked = this.selections;
            /** @type {?} */
            const checkedNodes = [];
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.dataToChecked.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    this.inTreeList(this.treeListData, item);
                    if (item.inTreeList) {
                        checkedNodes.push(item['id']);
                    }
                }));
                this.dataToChecked = this.dataToChecked.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => !checkedNodes.includes(item['id'])));
                if (checkedNodes.length) {
                    this.farrisTree.checkedNodes(checkedNodes, true, true);
                }
            }), 300);
        }
    }
}
OrganizationComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-org',
                template: "<farris-treetable #farristree style=\"cursor:pointer\" [width]=\"'100%'\" [data]=\"treeListData\" [idField]=\"'id'\"\r\n    [columns]=\"treeTableCols\" [singleSelect]=\"!multiSelect\" [showBorder]=\"false\" [showCheckbox]=\"multiSelect\"\r\n    [showIcon]=\"false\" [showHeader]=\"true\" [fixedHeader]=\"true\" [disabled]=\"false\" [fit]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"\r\n    [striped]=\"true\" [cascadeCheck]=\"cascadeCheck\" [cascadeDown]=\"cascadeDown\" [cascadeUp]=\"cascadeUp\"\r\n    [keepSelect]=\"keepSelect\" [showCheckAll]=\"showCheckAll\" [onlySelectSelf]=\"true\"\r\n    [virtualized]=\"true\"\r\n    (nodeChecked)=\"changeSelections($event)\" (nodeUnChecked)=\"changeSelections($event)\"\r\n    (nodeSelected)=\"changeSelections($event)\" (nodeUnSelect)=\"changeSelections($event)\"\r\n    (checkAll)=\"checkAll()\" (unCheckAll)=\"unCheckAll()\"\r\n    (expand)=\"listenTreeExpand($event)\" class=\"fos-treetable\">\r\n</farris-treetable>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F -->\r\n<ng-template #orgNameCell let-ctx>\r\n    <span style=\"font-size: 13px;\" title=\"{{ctx.node.data.name}}\">{{ctx.node.data.name}}</span>\r\n</ng-template>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F-\u6536\u85CF\u5217 -->\r\n<ng-template #favoritesCell let-ctx>\r\n    <span class=\"f-icon f-icon-star\" [class.default-light-color]=\"ctx.node.data.inFavorites\"\r\n        [class.default-dark-color]=\"!ctx.node.data.inFavorites\" (click)=\"toggleFavorites($event, ctx.node.data)\"></span>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
OrganizationComponent.ctorParameters = () => [
    { type: ApiService },
    { type: ChangeDetectorRef },
    { type: FavoritesTool },
    { type: Injector },
    { type: NgZone },
    { type: StateMgrTool },
    { type: MessagerService }
];
OrganizationComponent.propDecorators = {
    enableFavorites: [{ type: Input }],
    baseCls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
    farrisTree: [{ type: ViewChild, args: ['farristree',] }],
    orgNameCell: [{ type: ViewChild, args: ['orgNameCell',] }],
    favoritesCell: [{ type: ViewChild, args: ['favoritesCell',] }],
    primaryField: [{ type: Input }],
    enableHierarchicalLoading: [{ type: Input }],
    notGetStopOrg: [{ type: Input }],
    layer: [{ type: Input }],
    multiSelect: [{ type: Input }],
    absOrgType: [{ type: Input }],
    cascadeCheck: [{ type: Input }],
    cascadeUp: [{ type: Input }],
    cascadeDown: [{ type: Input }],
    showCheckAll: [{ type: Input }],
    keepSelect: [{ type: Input }],
    pathLength: [{ type: Input }],
    orgIds: [{ type: Input }],
    selectedLimit: [{ type: Input }],
    virtualizedLoad: [{ type: Input }],
    isActiveTab: [{ type: Input }],
    activeTabId: [{ type: Input }],
    dataPermission: [{ type: Input }],
    dataPermissionIds: [{ type: Input }],
    orgNameType: [{ type: Input }],
    onlyDisplayCompany: [{ type: Input }],
    onlyCurrentAdminOrg: [{ type: Input }],
    selectionsChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    OrganizationComponent.prototype.enableFavorites;
    /** @type {?} */
    OrganizationComponent.prototype.baseCls;
    /** @type {?} */
    OrganizationComponent.prototype.farrisTree;
    /** @type {?} */
    OrganizationComponent.prototype.orgNameCell;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesCell;
    /** @type {?} */
    OrganizationComponent.prototype.primaryField;
    /** @type {?} */
    OrganizationComponent.prototype.enableHierarchicalLoading;
    /** @type {?} */
    OrganizationComponent.prototype.notGetStopOrg;
    /** @type {?} */
    OrganizationComponent.prototype.layer;
    /** @type {?} */
    OrganizationComponent.prototype.multiSelect;
    /** @type {?} */
    OrganizationComponent.prototype.absOrgType;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeCheck;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeUp;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeDown;
    /** @type {?} */
    OrganizationComponent.prototype.showCheckAll;
    /** @type {?} */
    OrganizationComponent.prototype.keepSelect;
    /** @type {?} */
    OrganizationComponent.prototype.pathLength;
    /** @type {?} */
    OrganizationComponent.prototype.orgIds;
    /** @type {?} */
    OrganizationComponent.prototype.selectedLimit;
    /** @type {?} */
    OrganizationComponent.prototype.virtualizedLoad;
    /** @type {?} */
    OrganizationComponent.prototype.isActiveTab;
    /** @type {?} */
    OrganizationComponent.prototype.activeTabId;
    /** @type {?} */
    OrganizationComponent.prototype.dataPermission;
    /** @type {?} */
    OrganizationComponent.prototype.dataPermissionIds;
    /** @type {?} */
    OrganizationComponent.prototype.orgNameType;
    /** @type {?} */
    OrganizationComponent.prototype.onlyDisplayCompany;
    /** @type {?} */
    OrganizationComponent.prototype.onlyCurrentAdminOrg;
    /** @type {?} */
    OrganizationComponent.prototype.selectionsChange;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.selectionsSub;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesSub;
    /** @type {?} */
    OrganizationComponent.prototype.originalTreeData;
    /** @type {?} */
    OrganizationComponent.prototype.locationOrgText;
    /** @type {?} */
    OrganizationComponent.prototype.treeListData;
    /** @type {?} */
    OrganizationComponent.prototype.treeTableCols;
    /** @type {?} */
    OrganizationComponent.prototype.selections;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesList;
    /** @type {?} */
    OrganizationComponent.prototype.initLoad;
    /** @type {?} */
    OrganizationComponent.prototype.checkedOrgs;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.localeService;
    /** @type {?} */
    OrganizationComponent.prototype.dataToChecked;
    /** @type {?} */
    OrganizationComponent.prototype.dataToSelected;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.orgTreeTimer;
    /** @type {?} */
    OrganizationComponent.prototype.currentTabId;
    /** @type {?} */
    OrganizationComponent.prototype.currentUserOrgId;
    /** @type {?} */
    OrganizationComponent.prototype.currentUserOrgPath;
    /** @type {?} */
    OrganizationComponent.prototype.allAdminOrgData;
    /** @type {?} */
    OrganizationComponent.prototype.currentAdminOrgPath;
    /** @type {?} */
    OrganizationComponent.prototype.orgTypeId;
    /** @type {?} */
    OrganizationComponent.prototype.deptTypeId;
    /** @type {?} */
    OrganizationComponent.prototype.beforeClickNode;
    /** @type {?} */
    OrganizationComponent.prototype.beforeCheckAll;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.stateMgr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.msgService;
}
//# sourceMappingURL=data:application/json;base64,