import { EventEmitter, OnInit, AfterViewInit, SimpleChanges, OnChanges, ChangeDetectorRef, Injector, TemplateRef, NgZone, OnDestroy } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import { FavoritesTool } from '../../utils/favorites.tool';
import { TreeNode, TreeTableComponent } from '@farris/ui-treetable';
import { StateMgrTool } from '../../utils/state.mgr.tool';
import { MessagerService } from '@farris/ui-messager';
export declare class OrganizationComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private apiService;
    private cdr;
    private favoritesTool;
    private injector;
    private ngZone;
    private stateMgr;
    private msgService;
    enableFavorites: boolean;
    baseCls: boolean;
    farrisTree: TreeTableComponent;
    orgNameCell: TemplateRef<any>;
    favoritesCell: TemplateRef<any>;
    primaryField: string;
    enableHierarchicalLoading: boolean;
    notGetStopOrg: boolean;
    layer: number;
    multiSelect: boolean;
    absOrgType: any;
    cascadeCheck: boolean;
    cascadeUp: boolean;
    cascadeDown: boolean;
    showCheckAll: boolean;
    keepSelect: boolean;
    pathLength: number;
    orgIds: string[];
    selectedLimit: number;
    virtualizedLoad: boolean;
    isActiveTab: boolean;
    activeTabId: string;
    dataPermission: boolean;
    dataPermissionIds: string[];
    orgNameType: string;
    onlyDisplayCompany: boolean;
    onlyCurrentAdminOrg: boolean;
    selectionsChange: EventEmitter<any>;
    private selectionsSub;
    private favoritesSub;
    originalTreeData: any[];
    locationOrgText: string;
    treeListData: TreeNode[];
    treeTableCols: any[];
    selections: any[];
    favoritesList: any[];
    initLoad: boolean;
    checkedOrgs: any[];
    private loadingService;
    private localeService;
    dataToChecked: any[];
    dataToSelected: any;
    private orgTreeTimer;
    currentTabId: string;
    currentUserOrgId: string;
    currentUserOrgPath: string;
    allAdminOrgData: any[];
    currentAdminOrgPath: string;
    orgTypeId: string;
    deptTypeId: string;
    beforeClickNode: (e: any) => import("rxjs").Observable<boolean>;
    beforeCheckAll: (e: any) => import("rxjs").Observable<boolean>;
    constructor(apiService: ApiService, cdr: ChangeDetectorRef, favoritesTool: FavoritesTool, injector: Injector, ngZone: NgZone, stateMgr: StateMgrTool, msgService: MessagerService);
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    loadTreeData(): void;
    private setFavorites;
    private setSelections;
    checkAll(): void;
    unCheckAll(): void;
    changeSelections(e: any): void;
    toggleChecked(e: any): void;
    toggleSelected(e: any): void;
    private assembleDataByOrgIds;
    hlAssembleData(): void;
    assembleData(): void;
    private inTreeList;
    private tickSelections;
    /**
    * 组织数据转换
    * @param plainSource 接口原始数据
    * @param layer 层级
    * @returns 返回树形接口的数据
    */
    private dataToTree;
    private dealDataWhenExpandTreeNode;
    /**
     * 预处理组织数据
     */
    private dealData;
    /**
     * 数据转换
     * @param parents 父级节点信息
     * @param treeSource 原始数据信息
     * @param layer 层级
     */
    treeData(parents: any, treeSource: any, layer: number): void;
    toggleFavorites(e: any, item: any): void;
    listenTreeExpand(obj: any): void;
    getOrganizationByParentNode(parentNode: any): void;
    private nodeExpanded;
    private expandTreeNode;
    selectOrgTreeNode(): void;
    checkOrgTreeNodes(): void;
}
