import { AfterViewInit, ChangeDetectorRef, EventEmitter, Injector, OnDestroy, OnInit } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import { FavoritesTool } from '../../utils/favorites.tool';
import { Group, GroupItem } from '../../utils/index.type';
import { StateMgrTool } from '../../utils/state.mgr.tool';
import { AppendGroupOrgComponent } from '../append-group-org/appendorg.component';
export declare class GroupComponent implements OnInit, AfterViewInit, OnDestroy {
    private apiService;
    private favoritesTool;
    private stateMgr;
    private cdr;
    private injector;
    appendOrg: AppendGroupOrgComponent;
    primaryField: string;
    multiSelect: any;
    absOrgType: string;
    busNum: string;
    enableFavorites: boolean;
    notGetStopOrg: boolean;
    groupApiUrl: string;
    enableHierarchicalLoading: boolean;
    cascadeCheck: boolean;
    cascadeDown: boolean;
    cascadeUp: boolean;
    keepSelect: boolean;
    layer: number;
    selectedLimit: number;
    showCheckAll: boolean;
    virtualizedLoad: boolean;
    isActiveTab: boolean;
    groupChange: EventEmitter<any>;
    groupIdField: string;
    userIdField: string;
    selections: any[];
    noDataImg: string;
    allChecked: boolean;
    items: any[];
    favoritesList: any[];
    groupData: Group;
    personnelList: any[];
    groupPersonnels: any[];
    publicVisible: boolean;
    personalVisible: boolean;
    publicToken: string;
    personalToken: string;
    selectedGroupId: string;
    selectedGroupTotal: number;
    allIndexId: string;
    showGroupOrgDialog: boolean;
    currentGroupType: string;
    showCheckAllIcon: boolean;
    private selectionsSub;
    private favoritesSub;
    private messageService;
    private loadingService;
    private notifyService;
    private localeService;
    constructor(apiService: ApiService, favoritesTool: FavoritesTool, stateMgr: StateMgrTool, cdr: ChangeDetectorRef, injector: Injector);
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    assembleData(reload?: boolean): void;
    updateGroup(): void;
    deleteGroup(e: MouseEvent, item: GroupItem): void;
    editGroup(e: MouseEvent, item: GroupItem): void;
    removeOrg(e: any, data: any): void;
    private setChecked;
    private setFavorites;
    toggleGroupOrgDialog(show: boolean, groupType?: string): void;
    getOrgsByGroup(item: any, groupType?: string, changeType?: any): void;
    getGroupList(changeType?: any): void;
    toggleFavorites(e: any, item: any): void;
    toggleVisible(e: any, type: string): void;
    toggleAll(e: any): void;
    toggleOne(data: any, e: any): void;
    /**
     * 全选后处理
     * @param dataArr 全选的值
     */
    checkAll(): void;
    /**
     * 全部取消
     * @param dataArr 取消的数据
     * @returns void
     */
    unCheckAll(): void;
    /**
     * 当前行选中
     * @param data 当前行的数据（）
     */
    selectLine(data: any): void;
    /**
     * 单选取消选中
     * @param data 取消选中行
     */
    unSelectLine(data: any): void;
    private emitSelections;
    /**
     * 选中并插入当前行数据到右侧
     * @param data 当前行的数据
     * @param collection 暂存当前数据的集合
     */
    _insertOneIntoSelections(data: any): void;
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     */
    toggleChecked(): void;
    private isAllChecked;
    trackByFn(index: any, item: any): any;
}
