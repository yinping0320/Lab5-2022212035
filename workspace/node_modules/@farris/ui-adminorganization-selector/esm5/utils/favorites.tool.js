/**
 * @fileoverview added by tsickle
 * Generated from: utils/favorites.tool.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var FavoritesTool = /** @class */ (function () {
    function FavoritesTool(http) {
        this.http = http;
        this.absOrgType = 'System_organization';
        this.busNum = 'common';
        this.idField = 'id';
        this.favoritesList = [];
        this.absRfQueryUrl = '/api/runtime/sys/v1.0/absRecentContacts/query';
        this.absRfModifyUrl = '/api/runtime/sys/v1.0/absRecentContacts/modify';
        this.subject = new Subject();
    }
    /**
     * 操作最近联系人或收藏夹
     * @param param any
     * @returns observable
     */
    /**
     * 操作最近联系人或收藏夹
     * @param {?} actionToken
     * @param {?} param any
     * @return {?} observable
     */
    FavoritesTool.prototype.curdRecentContactsOrFavorites = /**
     * 操作最近联系人或收藏夹
     * @param {?} actionToken
     * @param {?} param any
     * @return {?} observable
     */
    function (actionToken, param) {
        /** @type {?} */
        var url = this.absRfQueryUrl;
        if (actionToken === 'modify') {
            url = this.absRfModifyUrl;
        }
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, param, options);
    };
    Object.defineProperty(FavoritesTool.prototype, "favoritesSubject", {
        get: /**
         * @return {?}
         */
        function () {
            return this.subject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    FavoritesTool.prototype.setFavoritesList = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.subject.next(value);
    };
    /**
     * 获取收藏夹中人员列表
     */
    /**
     * 获取收藏夹中人员列表
     * @return {?}
     */
    FavoritesTool.prototype.getFavoritesList = /**
     * 获取收藏夹中人员列表
     * @return {?}
     */
    function () {
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'CollectOrg'
        };
        return this.curdRecentContactsOrFavorites('query', param);
    };
    /**
     * 加入或取消收藏
     * @param e 鼠标事件
     * @param id 标识
     * @returns Observable
     */
    /**
     * 加入或取消收藏
     * @param {?} e 鼠标事件
     * @param {?} object
     * @return {?} Observable
     */
    FavoritesTool.prototype.toggleFavorites = /**
     * 加入或取消收藏
     * @param {?} e 鼠标事件
     * @param {?} object
     * @return {?} Observable
     */
    function (e, object) {
        var _this = this;
        /** @type {?} */
        var id = object[this.idField];
        /** @type {?} */
        var action = 'add';
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'CollectOrg'
        };
        if (this.favoritesList.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item[_this.idField] === id; })) !== -1) {
            param.deleteList = [id];
            action = 'delete';
        }
        else {
            param.addList = [id];
        }
        this.curdRecentContactsOrFavorites('modify', param).subscribe((/**
         * @return {?}
         */
        function () {
            if (action === 'add') {
                /** @type {?} */
                var index = _this.favoritesList.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item[_this.idField] === id; }));
                if (index === -1) {
                    _this.favoritesList.push(object);
                }
            }
            else {
                _this.favoritesList = _this.favoritesList.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item[_this.idField] !== id; }));
            }
            _this.setFavoritesList(_this.favoritesList);
        }));
        e.cancelBubble = true;
        e.stopPropagation();
    };
    /**
     * 清空我的收藏
     */
    /**
     * 清空我的收藏
     * @return {?}
     */
    FavoritesTool.prototype.clearFavoritesList = /**
     * 清空我的收藏
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.favoritesList.length) {
            this.setFavoritesList(this.favoritesList);
            return;
        }
        /** @type {?} */
        var ids = this.favoritesList.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item[_this.idField]; }));
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'CollectOrg',
            addList: [],
            deleteList: ids
        };
        this.curdRecentContactsOrFavorites('modify', param).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            _this.favoritesList = [];
            _this.setFavoritesList(_this.favoritesList);
        }));
    };
    FavoritesTool.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FavoritesTool.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return FavoritesTool;
}());
export { FavoritesTool };
if (false) {
    /** @type {?} */
    FavoritesTool.prototype.absOrgType;
    /** @type {?} */
    FavoritesTool.prototype.busNum;
    /** @type {?} */
    FavoritesTool.prototype.idField;
    /** @type {?} */
    FavoritesTool.prototype.favoritesList;
    /** @type {?} */
    FavoritesTool.prototype.absRfQueryUrl;
    /** @type {?} */
    FavoritesTool.prototype.absRfModifyUrl;
    /**
     * @type {?}
     * @private
     */
    FavoritesTool.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    FavoritesTool.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,