/**
 * @fileoverview added by tsickle
 * Generated from: utils/state.mgr.tool.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Subject } from 'rxjs';
var StateMgrTool = /** @class */ (function () {
    function StateMgrTool(http) {
        this.http = http;
        this.slSubject = new Subject();
    }
    Object.defineProperty(StateMgrTool.prototype, "selectionsSubject", {
        get: /**
         * @return {?}
         */
        function () {
            return this.slSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} changeType
     * @param {?=} from
     * @return {?}
     */
    StateMgrTool.prototype.emitSelections = /**
     * @param {?} value
     * @param {?} changeType
     * @param {?=} from
     * @return {?}
     */
    function (value, changeType, from) {
        if (from === void 0) { from = 'other'; }
        this.slSubject.next({
            value: value,
            changeType: changeType,
            from: from
        });
    };
    StateMgrTool.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    StateMgrTool.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return StateMgrTool;
}());
export { StateMgrTool };
if (false) {
    /**
     * @type {?}
     * @private
     */
    StateMgrTool.prototype.slSubject;
    /**
     * @type {?}
     * @private
     */
    StateMgrTool.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUubWdyLnRvb2wuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWFkbWlub3JnYW5pemF0aW9uLXNlbGVjdG9yLyIsInNvdXJjZXMiOlsidXRpbHMvc3RhdGUubWdyLnRvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUUvRCxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDO0lBS0Usc0JBQ1UsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUhsQixjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVMsQ0FBQztJQUlyQyxDQUFDO0lBRUwsc0JBQUksMkNBQWlCOzs7O1FBQXJCO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBOzs7Ozs7O0lBRUQscUNBQWM7Ozs7OztJQUFkLFVBQWUsS0FBVSxFQUFFLFVBQXNCLEVBQUUsSUFBc0I7UUFBdEIscUJBQUEsRUFBQSxjQUFzQjtRQUN2RSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNsQixLQUFLLE9BQUE7WUFDTCxVQUFVLFlBQUE7WUFDVixJQUFJLE1BQUE7U0FDTCxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkFuQkYsVUFBVTs7OztnQkFKRixVQUFVOztJQXlCbkIsbUJBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQXBCWSxZQUFZOzs7Ozs7SUFFdkIsaUNBQXlDOzs7OztJQUd2Qyw0QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBDaGFuZ2VUeXBlLCBPcmdSZXF1ZXN0UGFyYW0sIFBhcmFtIH0gZnJvbSAnLi9pbmRleC50eXBlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3RhdGVNZ3JUb29sIHtcclxuXHJcbiAgcHJpdmF0ZSBzbFN1YmplY3QgPSBuZXcgU3ViamVjdDxQYXJhbT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnRcclxuICApIHsgfVxyXG5cclxuICBnZXQgc2VsZWN0aW9uc1N1YmplY3QoKTogT2JzZXJ2YWJsZTxQYXJhbT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2xTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgZW1pdFNlbGVjdGlvbnModmFsdWU6IGFueSwgY2hhbmdlVHlwZTogQ2hhbmdlVHlwZSwgZnJvbTogc3RyaW5nID0gJ290aGVyJykge1xyXG4gICAgdGhpcy5zbFN1YmplY3QubmV4dCh7XHJcbiAgICAgIHZhbHVlLFxyXG4gICAgICBjaGFuZ2VUeXBlLFxyXG4gICAgICBmcm9tXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==