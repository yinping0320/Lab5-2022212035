/**
 * @fileoverview added by tsickle
 * Generated from: utils/api.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
var ApiService = /** @class */ (function () {
    function ApiService(http) {
        this.http = http;
    }
    /**
      * 获取行政组织或系统用户
      * @returns observable
      */
    /**
     * 获取行政组织或系统用户
     * @param {?} param
     * @return {?} observable
     */
    ApiService.prototype.getOrganization = /**
     * 获取行政组织或系统用户
     * @param {?} param
     * @return {?} observable
     */
    function (param) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(this.absUrl + '/org', param, options);
    };
    /**
       * 获取行政组织（全加载）
       * @returns observable
       */
    /**
     * 获取行政组织（全加载）
     * @param {?} param
     * @return {?} observable
     */
    ApiService.prototype.getOrganizations = /**
     * 获取行政组织（全加载）
     * @param {?} param
     * @return {?} observable
     */
    function (param) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        /** @type {?} */
        var url = this.getOrgsUrl + ("/getorgs?withDisabledOrg=" + param.withDisabledOrg + "&gettingCurrentOrg=" + param.gettingCurrentOrg + "&onlyDisplayOrg=" + param.onlyDisplayOrg);
        return this.http.post(url, options);
    };
    /**
     * 获取行政组织（分层加载）
     * @returns observable
     */
    /**
     * 获取行政组织（分层加载）
     * @param {?} param
     * @return {?} observable
     */
    ApiService.prototype.getOrganizationsWithLayer = /**
     * 获取行政组织（分层加载）
     * @param {?} param
     * @return {?} observable
     */
    function (param) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        /** @type {?} */
        var url = this.getOrgsUrl + ("/getOrgsWithLayer?withDisabledOrg=" + param.withDisabledOrg);
        if (param.parentOrgId) {
            url = url + ("&parentOrgId=" + param.parentOrgId);
        }
        url = url + ("&gettingCurrentOrg=" + param.gettingCurrentOrg + "&onlyDisplayOrg=" + param.onlyDisplayOrg);
        return this.http.post(url, options);
    };
    /**
     * 根据id获取行政组织
     * @returns observable
     */
    /**
     * 根据id获取行政组织
     * @param {?} ids
     * @return {?} observable
     */
    ApiService.prototype.getOrganizationsWithIds = /**
     * 根据id获取行政组织
     * @param {?} ids
     * @return {?} observable
     */
    function (ids) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(this.getOrgsUrl + '/getorgsbyids', JSON.stringify(ids), options);
    };
    /**
     * 根据名称获取行政组织
     * @returns observable
     */
    /**
     * 根据名称获取行政组织
     * @param {?} queryFilter
     * @return {?} observable
     */
    ApiService.prototype.getOrganizationsWithFilter = /**
     * 根据名称获取行政组织
     * @param {?} queryFilter
     * @return {?} observable
     */
    function (queryFilter) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(this.getOrgsUrl + '/query', JSON.stringify(queryFilter), options);
    };
    /**
     * @param {?} absOrgType
     * @return {?}
     */
    ApiService.prototype.getOrgGroups = /**
     * @param {?} absOrgType
     * @return {?}
     */
    function (absOrgType) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.get(this.groupApiUrl + '/' + absOrgType, options);
    };
    /**
     * @param {?} groupId
     * @param {?} absOrgType
     * @return {?}
     */
    ApiService.prototype.getGroupMembers = /**
     * @param {?} groupId
     * @param {?} absOrgType
     * @return {?}
     */
    function (groupId, absOrgType) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        if (!groupId) {
            return of(null);
        }
        /** @type {?} */
        var url = this.groupApiUrl + '/' + groupId + '/absOrgType/' + absOrgType;
        return this.http.get(url, options);
    };
    /**
     * @param {?} groupInfo
     * @return {?}
     */
    ApiService.prototype.saveGroup = /**
     * @param {?} groupInfo
     * @return {?}
     */
    function (groupInfo) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(this.groupApiUrl, groupInfo, options);
    };
    ApiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ApiService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ApiService;
}());
export { ApiService };
if (false) {
    /** @type {?} */
    ApiService.prototype.absUrl;
    /** @type {?} */
    ApiService.prototype.groupApiUrl;
    /** @type {?} */
    ApiService.prototype.getOrgsUrl;
    /**
     * @type {?}
     * @private
     */
    ApiService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,