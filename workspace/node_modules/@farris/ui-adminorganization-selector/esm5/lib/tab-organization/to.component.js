/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-organization/to.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, Injector, ViewChild, TemplateRef, HostBinding, NgZone } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import * as _ from 'lodash-es';
import { of } from 'rxjs';
import { FavoritesTool } from '../../utils/favorites.tool';
import { ChangeType } from '../../utils/index.type';
import { CommonUtil } from '../../utils/common.tool';
import { TreeTableComponent } from '@farris/ui-treetable';
import { StateMgrTool } from '../../utils/state.mgr.tool';
import { switchMap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { LocaleService } from '@farris/ui-locale';
import { ORGANIZATION_SELECTOR_LOCALE } from '../../utils/locale';
var OrganizationComponent = /** @class */ (function () {
    function OrganizationComponent(apiService, cdr, favoritesTool, injector, ngZone, stateMgr, msgService) {
        var _this = this;
        this.apiService = apiService;
        this.cdr = cdr;
        this.favoritesTool = favoritesTool;
        this.injector = injector;
        this.ngZone = ngZone;
        this.stateMgr = stateMgr;
        this.msgService = msgService;
        this.baseCls = true;
        this.primaryField = 'orgId';
        this.pathLength = 4;
        this.dataPermission = false;
        this.dataPermissionIds = [];
        this.selectionsChange = new EventEmitter();
        this.originalTreeData = [];
        this.locationOrgText = '';
        this.treeListData = [];
        this.treeTableCols = [];
        this.selections = [];
        this.favoritesList = [];
        this.initLoad = true;
        this.checkedOrgs = [];
        this.loadingService = null;
        this.localeService = null;
        this.dataToChecked = [];
        this.allAdminOrgData = [];
        this.orgTypeId = '9edf25d1-b991-4dde-90b9-30145422d24d';
        this.deptTypeId = '33c21504-3384-42a7-8fc3-c1b5e9e982d0';
        this.beforeClickNode = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.enableHierarchicalLoading) {
                return of(true);
            }
            if (!_this.multiSelect) {
                if (e.rowNode.isSelected) {
                    _this.setSelections([]);
                }
                else {
                    _this.setSelections(new Array(e.rowNode.node.data));
                }
                return of(false);
            }
            // const param: OrgRequestParam = {
            //     absOrgType: this.absOrgType,
            //     notGetStopOrg: this.notGetStopOrg,
            //     getCurUser: false,
            //     parentID: e.rowNode.id,
            //     withAllSub: true,
            //     getOrgAllPath: true
            // };
            // return this.apiService.getOrganization(param).pipe(
            //     switchMap(
            //         (data: any) => {
            //             // if (data['data'].length > this.selectedLimit && !e.rowNode.isChecked) {
            //             //     this.msgService.show('warning', `亲，一次性选择了超过${this.selectedLimit}条数据~`, true);
            //             //     return of(false)
            //             // }
            //             // if (!e.rowNode.isChecked) {
            //             //     // todo 待验证，加入selection，
            //             //     data.data.forEach(item => {
            //             //         if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.selections) === -1) {
            //             //             this.setSelections(item, ChangeType.Append, 'other');
            //             //         }
            //             //     })
            //             // } else {
            //             //     this.selections.forEach((selection, index) => {
            //             //         data.data.forEach(item => {
            //             //             if (selection[this.primaryField] === item[this.primaryField]) {
            //             //                 this.setSelections(item, ChangeType.Remove, 'other');
            //             //             }
            //             //         });
            //             //     });
            //             // }
            //             // this.cdr.detectChanges();
            //             return of(true);
            //         }
            //     )
            // );
        });
        this.beforeCheckAll = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.enableHierarchicalLoading) {
                return of(true);
            }
            /** @type {?} */
            var param = {
                absOrgType: _this.absOrgType,
                notGetStopOrg: _this.notGetStopOrg,
                getCurUser: false,
                parentID: e.instance.data[0].id,
                withAllSub: true,
                getOrgAllPath: true
            };
            return _this.apiService.getOrganization(param).pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // if (data['data'].length > this.selectedLimit) {
                //     this.msgService.show('warning', `亲，一次性选择了超过${this.selectedLimit}条数据~`, true);
                //     return of(false)
                // }
                _this.setSelections(data['data'], ChangeType.ValueChanged, 'other');
                return of(true);
            })));
        });
        this.cdr = this.injector.get(ChangeDetectorRef);
        this.loadingService = this.injector.get(LoadingService, null);
        this.localeService = this.injector.get(LocaleService);
        if (!this.localeService.langData['organizationSelector']) {
            this.localeService.setLocaleData(ORGANIZATION_SELECTOR_LOCALE);
        }
    }
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.favoritesSub.unsubscribe();
        this.selectionsSub.unsubscribe();
    };
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeTableCols = [
            { field: 'name', title: this.localeService.getValue("organizationSelector.organization.orgName"), template: this.orgNameCell },
            { field: 'abbreviation', title: this.localeService.getValue("organizationSelector.organization.orgAbbreviation") }
        ];
        if (this.enableFavorites) {
            this.treeTableCols.push({
                field: '',
                title: this.localeService.getValue("organizationSelector.organization.favorite"),
                template: this.favoritesCell
            });
            this.treeTableCols[0].width = 300;
            this.treeTableCols[1].width = 300;
        }
        /** @type {?} */
        var param = {
            withDisabledOrg: !this.notGetStopOrg,
            gettingCurrentOrg: false,
            onlyDisplayOrg: false
        };
        this.apiService.getOrganizations(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res && res.orgs) {
                _this.allAdminOrgData = res.orgs;
                if (_this.initLoad && _this.isActiveTab) {
                    if (_this.enableHierarchicalLoading) {
                        _this.hlAssembleData();
                    }
                    else {
                        _this.assembleData();
                    }
                    _this.initLoad = false;
                }
            }
        }));
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.favoritesList = data;
            _this.setFavorites(_this.treeListData);
            _this.farrisTree.detectChanges();
        }));
        this.currentTabId = this.activeTabId;
        this.selectionsSub = this.stateMgr.selectionsSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.changeType === ChangeType.ValueChanged) {
                _this.selections = _.cloneDeep(data.value);
                if (_this.selections.length === 0) {
                    _this.dataToSelected = null;
                    _this.dataToChecked = [];
                    _this.farrisTree.clearCheckeds();
                    _this.farrisTree.clearSelections();
                    _this.farrisTree.detectChanges();
                }
            }
            else if (data.changeType === ChangeType.Remove) {
                _this.selections = _this.selections.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item['id'] !== data.value['id']; }));
                if (data.from == 'selection' && _this.currentTabId == 'organization') {
                    _this.inTreeList(_this.treeListData, data.value);
                    if (data.value.inTreeList) {
                        if (_this.multiSelect) {
                            _this.farrisTree.unCheckedNode(data.value['id']);
                        }
                        else {
                            _this.farrisTree.clearAll();
                        }
                    }
                }
            }
            else if (data.changeType === ChangeType.Append) {
                CommonUtil.findIndex(data.value['id'], 'id', _this.selections) === -1 ? _this.selections.push(data.value) : null;
            }
        }));
    };
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    OrganizationComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /*
        const orgIdsChange = changes.orgIds;
        if (orgIdsChange && orgIdsChange.currentValue) {
            this.checkedOrgs = orgIdsChange.currentValue;
        }
        */
    };
    // 初始tab页不为组织架构，切换至组织架构时获取组织数据
    // 初始tab页不为组织架构，切换至组织架构时获取组织数据
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.loadTreeData = 
    // 初始tab页不为组织架构，切换至组织架构时获取组织数据
    /**
     * @return {?}
     */
    function () {
        if (this.initLoad) {
            if (this.enableHierarchicalLoading) {
                this.hlAssembleData();
            }
            else {
                this.assembleData();
            }
            this.initLoad = false;
        }
    };
    // 设置当前组织树各个节点的收藏状态
    // 设置当前组织树各个节点的收藏状态
    /**
     * @private
     * @param {?} treeListData
     * @return {?}
     */
    OrganizationComponent.prototype.setFavorites = 
    // 设置当前组织树各个节点的收藏状态
    /**
     * @private
     * @param {?} treeListData
     * @return {?}
     */
    function (treeListData) {
        for (var i = 0; i < treeListData.length; i++) {
            if (CommonUtil.findIndex(treeListData[i].id, 'id', this.favoritesList) === -1) {
                treeListData[i].data.inFavorites = false;
            }
            else {
                treeListData[i].data.inFavorites = true;
            }
            if (treeListData[i].children.length) {
                this.setFavorites(treeListData[i].children);
            }
        }
    };
    /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    OrganizationComponent.prototype.setSelections = /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    function (selections, changeType, from) {
        if (changeType === void 0) { changeType = ChangeType.ValueChanged; }
        if (from === void 0) { from = 'tree'; }
        this.stateMgr.emitSelections(selections, changeType, from);
    };
    // 组织树全选事件
    // 组织树全选事件
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.checkAll = 
    // 组织树全选事件
    /**
     * @return {?}
     */
    function () {
        if (!this.enableHierarchicalLoading) {
            /** @type {?} */
            var checkeds_1 = [];
            this.farrisTree.checkeds.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                checkeds_1.push(item.data);
            }));
            this.setSelections(checkeds_1);
        }
    };
    // 组织树取消全选事件
    // 组织树取消全选事件
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.unCheckAll = 
    // 组织树取消全选事件
    /**
     * @return {?}
     */
    function () {
        this.setSelections([]);
    };
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    /**
     * @param {?} e
     * @return {?}
     */
    OrganizationComponent.prototype.changeSelections = 
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /*
        if (!this.enableHierarchicalLoading && !!e.originalEvent) {
            this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
        }
        */
        this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OrganizationComponent.prototype.toggleChecked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var checkeds = [];
        e && e.instance && e.instance.checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            checkeds.push(item.data);
        }));
        this.setSelections(checkeds.concat(this.dataToChecked));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OrganizationComponent.prototype.toggleSelected = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var selected = [];
        e && e.instance && e.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            selected.push(item.data);
        }));
        this.setSelections(selected);
    };
    // 根据传入的组织id确定已选择组织
    // 根据传入的组织id确定已选择组织
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    OrganizationComponent.prototype.assembleDataByOrgIds = 
    // 根据传入的组织id确定已选择组织
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        if (!ids || ids.length === 0) {
            return;
        }
        if (ids && ids.length > 0 && !this.multiSelect) {
            this.msgService.show('warning', this.localeService.getValue("organizationSelector.errorMessage.multiSelect"), true);
            return;
        }
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            idList: ids,
            getCurUser: false,
            getOrgAllPath: true,
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res && res.data && res.data.length > 0) {
                _this.checkedOrgs = res.data;
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item['id'], 'id', _this.selections) === -1) {
                        _this.setSelections(item, ChangeType.Append, 'other');
                    }
                }));
                _this.tickSelections();
                _this.cdr.detectChanges();
            }
        }));
    };
    // 分层加载组织树
    // 分层加载组织树
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.hlAssembleData = 
    // 分层加载组织树
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        var param = {
            withDisabledOrg: !this.notGetStopOrg,
            gettingCurrentOrg: true,
            onlyDisplayOrg: this.onlyDisplayCompany
        };
        this.apiService.getOrganizationsWithLayer(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            var e_1, _a;
            if (!res || !res.orgs) {
                return;
            }
            /** @type {?} */
            var currentUserOrg = _this.allAdminOrgData.find((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return data.id == res.currentOrg.orgId; }));
            if (_this.onlyDisplayCompany) {
                /** @type {?} */
                var allPathInfoOrgList = _this.allAdminOrgData.filter((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { return currentUserOrg.path.startsWith(data.path) && data.valueType == _this.orgTypeId; }));
                /** @type {?} */
                var layer_1 = 0;
                allPathInfoOrgList.forEach((/**
                 * @param {?} org
                 * @return {?}
                 */
                function (org) {
                    if (Number(org.layer) > layer_1) {
                        _this.currentUserOrgId = org.id;
                        _this.currentUserOrgPath = org.path;
                        layer_1 = Number(org.layer);
                    }
                }));
            }
            else {
                _this.currentUserOrgId = currentUserOrg.id;
                _this.currentUserOrgPath = currentUserOrg.path;
            }
            if (_this.onlyCurrentAdminOrg) {
                /** @type {?} */
                var deptPathList = [];
                var _loop_1 = function (i) {
                    /** @type {?} */
                    var indexData = res.orgs.find((/**
                     * @param {?} org
                     * @return {?}
                     */
                    function (org) {
                        if (i == 0) {
                            return org.path == _this.currentUserOrgPath;
                        }
                        else {
                            return org.path == _this.currentUserOrgPath.slice(0, -4 * i);
                        }
                    }));
                    if (indexData.valueType == _this.orgTypeId) {
                        _this.currentAdminOrgPath = indexData.path;
                        return "break";
                    }
                    else {
                        if (indexData.path != _this.currentUserOrgPath) {
                            deptPathList.push(indexData.path);
                        }
                    }
                };
                for (var i = 0; i < _this.currentUserOrgPath.length / 4; i++) {
                    var state_1 = _loop_1(i);
                    if (state_1 === "break")
                        break;
                }
                if (_this.currentAdminOrgPath == _this.currentUserOrgPath) {
                    _this.originalTreeData = [res.orgs.find((/**
                         * @param {?} org
                         * @return {?}
                         */
                        function (org) { return org.path == _this.currentUserOrgPath; }))];
                }
                else {
                    deptPathList.push(_this.currentAdminOrgPath);
                    var _loop_2 = function (item) {
                        /** @type {?} */
                        var targetOrgData = _this.allAdminOrgData.filter((/**
                         * @param {?} org
                         * @return {?}
                         */
                        function (org) { return org.path.slice(0, -4) == item && org.valueType == _this.deptTypeId && !org.disabled; }));
                        _this.originalTreeData = _this.originalTreeData.concat(targetOrgData || []);
                    };
                    try {
                        for (var deptPathList_1 = tslib_1.__values(deptPathList), deptPathList_1_1 = deptPathList_1.next(); !deptPathList_1_1.done; deptPathList_1_1 = deptPathList_1.next()) {
                            var item = deptPathList_1_1.value;
                            _loop_2(item);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (deptPathList_1_1 && !deptPathList_1_1.done && (_a = deptPathList_1.return)) _a.call(deptPathList_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    _this.originalTreeData.push(res.orgs.find((/**
                     * @param {?} org
                     * @return {?}
                     */
                    function (org) { return org.path == _this.currentAdminOrgPath; })));
                }
            }
            else {
                var _loop_3 = function (i, index) {
                    /** @type {?} */
                    var targetOrgData = _this.allAdminOrgData.filter((/**
                     * @param {?} org
                     * @return {?}
                     */
                    function (org) { return Number(org['layer']) == i && org.path.slice(0, -4) == _this.currentUserOrgPath.slice(0, -4 * index) && !org.disabled; }));
                    _this.originalTreeData = _this.originalTreeData.concat(targetOrgData || []);
                    index += 1;
                    out_index_1 = index;
                };
                var out_index_1;
                for (var i = _this.currentUserOrgPath.length / 4, index = 1; i > 1; i--) {
                    _loop_3(i, index);
                    index = out_index_1;
                }
                _this.originalTreeData.push(res.orgs.find((/**
                 * @param {?} org
                 * @return {?}
                 */
                function (org) { return org['layer'] == '1'; })));
                if (_this.onlyDisplayCompany) {
                    _this.originalTreeData = _this.originalTreeData.filter((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) { return data.valueType == _this.orgTypeId; }));
                }
            }
            _this.originalTreeData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.selectable = true;
                if (_this.enableFavorites) {
                    if (CommonUtil.findIndex(item['id'], 'id', _this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }
            }));
            if (res.currentOrg.orgId == 'nullorg') {
                // 需要区分是否为admin账户登录
                _this.treeListData = _this.dataToTree(_this.originalTreeData, 1, '*');
            }
            else {
                _this.treeListData = _this.dataToTree(_this.originalTreeData, 1, _this.currentUserOrgPath);
            }
            _this.farrisTree.loadData(_this.treeListData);
            if (_this.multiSelect) {
                _this.checkOrgTreeNodes();
            }
            else {
                _this.selectOrgTreeNode();
            }
            _this.cdr.detectChanges();
            if (_this.loadingService) {
                _this.loadingService.close();
            }
        }));
    };
    // 全加载组织树
    // 全加载组织树
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.assembleData = 
    // 全加载组织树
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        var param = {
            withDisabledOrg: (!this.notGetStopOrg).toString(),
            getingCurrentOrg: '' + true,
        };
        this.apiService.getOrganizations(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res || !res.orgs) {
                return;
            }
            if (_this.enableFavorites) {
                res.orgs.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item['id'], 'id', _this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }));
            }
            _this.originalTreeData = res.orgs;
            _this.treeListData = _this.dataToTree(res.orgs, 1, res.currentOrg.orgPath);
            _this.farrisTree.loadData(_this.treeListData);
            if (_this.multiSelect) {
                _this.checkOrgTreeNodes();
            }
            else {
                _this.selectOrgTreeNode();
            }
            _this.cdr.detectChanges();
            if (_this.loadingService) {
                _this.loadingService.close();
            }
        }));
    };
    // 确定已选组织是否在当前组织树内
    // 确定已选组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    OrganizationComponent.prototype.inTreeList = 
    // 确定已选组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    function (treeListData, item) {
        for (var i = 0; i < treeListData.length; i++) {
            if (treeListData[i].id === item['id']) {
                item.inTreeList = true;
                break;
            }
            if (treeListData[i].children.length) {
                this.inTreeList(treeListData[i].children, item);
            }
        }
    };
    // 在当前组织树内勾选所有已选择的组织
    // 在当前组织树内勾选所有已选择的组织
    /**
     * @private
     * @return {?}
     */
    OrganizationComponent.prototype.tickSelections = 
    // 在当前组织树内勾选所有已选择的组织
    /**
     * @private
     * @return {?}
     */
    function () {
        // const ids = [];
        // this.selectedDataNotInTreeList = [];
        // this.selections.forEach(item => {
        //     this.inTreeList(this.treeListData, item);
        //     if (!!item.inTreeList) {
        //         ids.push(item[this.primaryField]);
        //     } else {
        //         if(!this.multiSelect) {
        //             this.singleSelectedData = null;
        //         }
        //         this.selectedDataNotInTreeList.push(item);
        //     }
        // });
        // this.ngZone.runOutsideAngular(() => {
        //     setTimeout(() => {
        //         if (!ids.length) {
        //             return;
        //         }
        //         if (this.multiSelect) {
        //             this.farrisTree.checkedNodes(ids, true, true);
        //         } else {
        //             this.farrisTree.clearSelections();
        //             //
        //             this.farrisTree.detectChanges();
        //             this.selectOrgTreeNode();
        //         }
        //     })
        // })
    };
    /**
    * 组织数据转换
    * @param plainSource 接口原始数据
    * @param layer 层级
    * @returns 返回树形接口的数据
    */
    /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    OrganizationComponent.prototype.dataToTree = /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    function (plainSource, layer, expandedPath) {
        if (expandedPath === void 0) { expandedPath = ''; }
        /** @type {?} */
        var treeSource = this.dealData(plainSource, expandedPath ? expandedPath : '');
        // const parents = treeSource.filter(item => {
        //     return item.data.layer === layer;
        // });
        // this.treeData(parents, treeSource, 1);
        return treeSource;
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    OrganizationComponent.prototype.dealDataWhenExpandTreeNode = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (!data || !data.length) {
            return [];
        }
        /** @type {?} */
        var newDatas = [];
        data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var newsDataObj = {
                data: {
                    id: item.id,
                    name: item.name,
                    path: item.path,
                    code: item.code,
                    abbreviation: item.abbreviation,
                    layer: Number(item.layer),
                    inFavorites: item.inFavorites
                },
                expanded: false,
                children: []
            };
            if (!item.isDetail) {
                newsDataObj.leaf = false;
            }
            newDatas.push(newsDataObj);
        }));
        return newDatas;
    };
    /**
     * 预处理组织数据
     */
    /**
     * 预处理组织数据
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    OrganizationComponent.prototype.dealData = /**
     * 预处理组织数据
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    function (data, expandedPath) {
        var _this = this;
        if (expandedPath === void 0) { expandedPath = ''; }
        /** @type {?} */
        var pathList = [];
        if (expandedPath != '') {
            /** @type {?} */
            var maxLength = expandedPath.length / this.pathLength;
            if (this.enableHierarchicalLoading) {
                maxLength -= 1;
            }
            for (var a = 0; a < maxLength; a++) {
                pathList.push({ path: expandedPath.substring(0, 4 * (a + 1)) });
            }
        }
        else {
            return [];
        }
        /** @type {?} */
        var nodes = new Map();
        /** @type {?} */
        var newDatas = [];
        if (data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var path = item['path'];
                /** @type {?} */
                var parentPath;
                if (_this.onlyCurrentAdminOrg) {
                    parentPath = path == _this.currentAdminOrgPath ? 'top' : item.path.slice(0, -4);
                }
                else {
                    parentPath = item['layer'] == '1' ? 'top' : item.path.slice(0, -4);
                }
                if (!nodes[path]) {
                    nodes[path] = { children: [] };
                }
                nodes[path] = {
                    data: {
                        id: item.id,
                        name: item.name,
                        path: item.path,
                        code: item.code,
                        abbreviation: item.abbreviation,
                        layer: Number(item.layer),
                        inFavorites: item.inFavorites
                    },
                    expanded: false,
                    children: nodes[path]['children']
                };
                if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1 || Number(item.layer) < _this.layer) {
                    nodes[path]['expanded'] = true;
                }
                else {
                    nodes[path]['expanded'] = false;
                    if (_this.enableHierarchicalLoading && !item.isDetail) {
                        nodes[path]['leaf'] = false;
                    }
                }
                if (_this.dataPermission && _this.dataPermissionIds.length) {
                    /** @type {?} */
                    var target = _this.dataPermissionIds.find((/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) { return t == item['orgId']; }));
                    nodes[path]['selectable'] = target ? true : false;
                }
                if (parentPath == 'top') {
                    newDatas.push(nodes[path]);
                }
                else {
                    if (!nodes[parentPath]) {
                        nodes[parentPath] = { children: [] };
                    }
                    ((/** @type {?} */ (nodes[parentPath]['children']))).push(nodes[path]);
                }
            }));
        }
        return newDatas;
    };
    /**
     * 数据转换
     * @param parents 父级节点信息
     * @param treeSource 原始数据信息
     * @param layer 层级
     */
    /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    OrganizationComponent.prototype.treeData = /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    function (parents, treeSource, layer) {
        var _this = this;
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        function (parent) {
            /** @type {?} */
            var parentPath = parent['data']['path'];
            /** @type {?} */
            var parentLayer = parent['data']['layer'];
            treeSource.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item && item['data'] && item['data']['path']) {
                    /** @type {?} */
                    var itemPath = item['data']['path'];
                    /** @type {?} */
                    var itemLayer = item['data']['layer'];
                    /** @type {?} */
                    var targetPath = void 0;
                    if (itemPath && itemPath.length > parentPath.length) {
                        targetPath = itemPath.substr(0, Number(layer) * 4);
                    }
                    if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                        parent['children'].push(item);
                    }
                    if (parentPath === targetPath) {
                        _this.treeData([item], treeSource, Number(layer) + 1);
                    }
                }
            }));
        }));
    };
    // 收藏或取消收藏当前节点对应的组织
    // 收藏或取消收藏当前节点对应的组织
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    OrganizationComponent.prototype.toggleFavorites = 
    // 收藏或取消收藏当前节点对应的组织
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    function (e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    };
    // 监听组织树展开事件
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    OrganizationComponent.prototype.listenTreeExpand = 
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        // todo 分层加载
        if (this.enableHierarchicalLoading && obj.children.length === 0) {
            this.getOrganizationByParentNode(obj);
        }
    };
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    OrganizationComponent.prototype.getOrganizationByParentNode = 
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    function (parentNode) {
        var _this = this;
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        var param = {
            withDisabledOrg: !this.notGetStopOrg,
            parentOrgId: parentNode.id,
            gettingCurrentOrg: false,
            onlyDisplayOrg: this.onlyDisplayCompany
        };
        this.apiService.getOrganizationsWithLayer(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res && res.orgs) {
                /** @type {?} */
                var newDatas_1 = [];
                res.orgs.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if ((!_this.onlyCurrentAdminOrg || item['valueType'] == _this.deptTypeId) && !item.disabled) {
                        item.selectable = true;
                        if (_this.dataPermission && _this.dataPermissionIds.length) {
                            /** @type {?} */
                            var target = _this.dataPermissionIds.find((/**
                             * @param {?} t
                             * @return {?}
                             */
                            function (t) { return t == item['id']; }));
                            if (!target) {
                                item.selectable = false;
                            }
                        }
                        _this.originalTreeData.push(item);
                    }
                    if (_this.enableFavorites) {
                        item.inFavorites = true;
                        if (CommonUtil.findIndex(item['id'], 'id', _this.favoritesList) === -1) {
                            item.inFavorites = false;
                        }
                    }
                    newDatas_1.push(item);
                }));
                /** @type {?} */
                var nodes = _this.dealDataWhenExpandTreeNode(newDatas_1);
                _this.farrisTree.appendChildren(nodes, parentNode);
                _this.farrisTree.detectChanges();
                if (_this.multiSelect) {
                    _this.checkOrgTreeNodes();
                }
                else {
                    _this.selectOrgTreeNode();
                }
                if (_this.loadingService) {
                    _this.loadingService.close();
                }
            }
        }));
    };
    // 返回已经该节点是否展开过
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    OrganizationComponent.prototype.nodeExpanded = 
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    function (item, arr, expanded) {
        for (var i = 0; i < arr.length; i++) {
            if (item.data.id === arr[i].data.id) {
                expanded[0] = arr[i].expanded;
            }
            else if (arr[i].children.length) {
                this.nodeExpanded(item, arr[i].children, expanded);
            }
        }
    };
    // 展开节点
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    OrganizationComponent.prototype.expandTreeNode = 
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    function (treeData, path, layer) {
        var _this = this;
        treeData.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (path.includes(node.data.path)) {
                _this.farrisTree.expandNode(node.data.id);
            }
            if (node.data.layer < layer && node.children.length) {
                _this.expandTreeNode(node.children, path, layer);
            }
        }));
    };
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.selectOrgTreeNode = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.treeListData && this.selections.length) {
            this.dataToSelected = this.selections[0];
            // if (!this.farrisTree.selectedRow) {
            //     if (this.orgTreeTimer) {
            //         clearTimeout(this.orgTreeTimer);
            //     }
            //     this.orgTreeTimer = 
            // } else {
            //     this.farrisTree.scrollToCurrentNode();
            // }
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.inTreeList(_this.treeListData, _this.dataToSelected);
                if (_this.dataToSelected.inTreeList) {
                    _this.farrisTree.selectNode(_this.dataToSelected['id']);
                    _this.dataToSelected = null;
                }
            }), 300);
        }
    };
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.checkOrgTreeNodes = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.treeListData && this.selections.length) {
            this.dataToChecked = this.selections;
            /** @type {?} */
            var checkedNodes_1 = [];
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.dataToChecked.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    _this.inTreeList(_this.treeListData, item);
                    if (item.inTreeList) {
                        checkedNodes_1.push(item['id']);
                    }
                }));
                _this.dataToChecked = _this.dataToChecked.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return !checkedNodes_1.includes(item['id']); }));
                if (checkedNodes_1.length) {
                    _this.farrisTree.checkedNodes(checkedNodes_1, true, true);
                }
            }), 300);
        }
    };
    OrganizationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-org',
                    template: "<farris-treetable #farristree style=\"cursor:pointer\" [width]=\"'100%'\" [data]=\"treeListData\" [idField]=\"'id'\"\r\n    [columns]=\"treeTableCols\" [singleSelect]=\"!multiSelect\" [showBorder]=\"false\" [showCheckbox]=\"multiSelect\"\r\n    [showIcon]=\"false\" [showHeader]=\"true\" [fixedHeader]=\"true\" [disabled]=\"false\" [fit]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"\r\n    [striped]=\"true\" [cascadeCheck]=\"cascadeCheck\" [cascadeDown]=\"cascadeDown\" [cascadeUp]=\"cascadeUp\"\r\n    [keepSelect]=\"keepSelect\" [showCheckAll]=\"showCheckAll\" [onlySelectSelf]=\"true\"\r\n    [virtualized]=\"true\"\r\n    (nodeChecked)=\"changeSelections($event)\" (nodeUnChecked)=\"changeSelections($event)\"\r\n    (nodeSelected)=\"changeSelections($event)\" (nodeUnSelect)=\"changeSelections($event)\"\r\n    (checkAll)=\"checkAll()\" (unCheckAll)=\"unCheckAll()\"\r\n    (expand)=\"listenTreeExpand($event)\" class=\"fos-treetable\">\r\n</farris-treetable>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F -->\r\n<ng-template #orgNameCell let-ctx>\r\n    <span style=\"font-size: 13px;\" title=\"{{ctx.node.data.name}}\">{{ctx.node.data.name}}</span>\r\n</ng-template>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F-\u6536\u85CF\u5217 -->\r\n<ng-template #favoritesCell let-ctx>\r\n    <span class=\"f-icon f-icon-star\" [class.default-light-color]=\"ctx.node.data.inFavorites\"\r\n        [class.default-dark-color]=\"!ctx.node.data.inFavorites\" (click)=\"toggleFavorites($event, ctx.node.data)\"></span>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    OrganizationComponent.ctorParameters = function () { return [
        { type: ApiService },
        { type: ChangeDetectorRef },
        { type: FavoritesTool },
        { type: Injector },
        { type: NgZone },
        { type: StateMgrTool },
        { type: MessagerService }
    ]; };
    OrganizationComponent.propDecorators = {
        enableFavorites: [{ type: Input }],
        baseCls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
        farrisTree: [{ type: ViewChild, args: ['farristree',] }],
        orgNameCell: [{ type: ViewChild, args: ['orgNameCell',] }],
        favoritesCell: [{ type: ViewChild, args: ['favoritesCell',] }],
        primaryField: [{ type: Input }],
        enableHierarchicalLoading: [{ type: Input }],
        notGetStopOrg: [{ type: Input }],
        layer: [{ type: Input }],
        multiSelect: [{ type: Input }],
        absOrgType: [{ type: Input }],
        cascadeCheck: [{ type: Input }],
        cascadeUp: [{ type: Input }],
        cascadeDown: [{ type: Input }],
        showCheckAll: [{ type: Input }],
        keepSelect: [{ type: Input }],
        pathLength: [{ type: Input }],
        orgIds: [{ type: Input }],
        selectedLimit: [{ type: Input }],
        virtualizedLoad: [{ type: Input }],
        isActiveTab: [{ type: Input }],
        activeTabId: [{ type: Input }],
        dataPermission: [{ type: Input }],
        dataPermissionIds: [{ type: Input }],
        orgNameType: [{ type: Input }],
        onlyDisplayCompany: [{ type: Input }],
        onlyCurrentAdminOrg: [{ type: Input }],
        selectionsChange: [{ type: Output }]
    };
    return OrganizationComponent;
}());
export { OrganizationComponent };
if (false) {
    /** @type {?} */
    OrganizationComponent.prototype.enableFavorites;
    /** @type {?} */
    OrganizationComponent.prototype.baseCls;
    /** @type {?} */
    OrganizationComponent.prototype.farrisTree;
    /** @type {?} */
    OrganizationComponent.prototype.orgNameCell;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesCell;
    /** @type {?} */
    OrganizationComponent.prototype.primaryField;
    /** @type {?} */
    OrganizationComponent.prototype.enableHierarchicalLoading;
    /** @type {?} */
    OrganizationComponent.prototype.notGetStopOrg;
    /** @type {?} */
    OrganizationComponent.prototype.layer;
    /** @type {?} */
    OrganizationComponent.prototype.multiSelect;
    /** @type {?} */
    OrganizationComponent.prototype.absOrgType;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeCheck;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeUp;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeDown;
    /** @type {?} */
    OrganizationComponent.prototype.showCheckAll;
    /** @type {?} */
    OrganizationComponent.prototype.keepSelect;
    /** @type {?} */
    OrganizationComponent.prototype.pathLength;
    /** @type {?} */
    OrganizationComponent.prototype.orgIds;
    /** @type {?} */
    OrganizationComponent.prototype.selectedLimit;
    /** @type {?} */
    OrganizationComponent.prototype.virtualizedLoad;
    /** @type {?} */
    OrganizationComponent.prototype.isActiveTab;
    /** @type {?} */
    OrganizationComponent.prototype.activeTabId;
    /** @type {?} */
    OrganizationComponent.prototype.dataPermission;
    /** @type {?} */
    OrganizationComponent.prototype.dataPermissionIds;
    /** @type {?} */
    OrganizationComponent.prototype.orgNameType;
    /** @type {?} */
    OrganizationComponent.prototype.onlyDisplayCompany;
    /** @type {?} */
    OrganizationComponent.prototype.onlyCurrentAdminOrg;
    /** @type {?} */
    OrganizationComponent.prototype.selectionsChange;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.selectionsSub;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesSub;
    /** @type {?} */
    OrganizationComponent.prototype.originalTreeData;
    /** @type {?} */
    OrganizationComponent.prototype.locationOrgText;
    /** @type {?} */
    OrganizationComponent.prototype.treeListData;
    /** @type {?} */
    OrganizationComponent.prototype.treeTableCols;
    /** @type {?} */
    OrganizationComponent.prototype.selections;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesList;
    /** @type {?} */
    OrganizationComponent.prototype.initLoad;
    /** @type {?} */
    OrganizationComponent.prototype.checkedOrgs;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.localeService;
    /** @type {?} */
    OrganizationComponent.prototype.dataToChecked;
    /** @type {?} */
    OrganizationComponent.prototype.dataToSelected;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.orgTreeTimer;
    /** @type {?} */
    OrganizationComponent.prototype.currentTabId;
    /** @type {?} */
    OrganizationComponent.prototype.currentUserOrgId;
    /** @type {?} */
    OrganizationComponent.prototype.currentUserOrgPath;
    /** @type {?} */
    OrganizationComponent.prototype.allAdminOrgData;
    /** @type {?} */
    OrganizationComponent.prototype.currentAdminOrgPath;
    /** @type {?} */
    OrganizationComponent.prototype.orgTypeId;
    /** @type {?} */
    OrganizationComponent.prototype.deptTypeId;
    /** @type {?} */
    OrganizationComponent.prototype.beforeClickNode;
    /** @type {?} */
    OrganizationComponent.prototype.beforeCheckAll;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.stateMgr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.msgService;
}
//# sourceMappingURL=data:application/json;base64,