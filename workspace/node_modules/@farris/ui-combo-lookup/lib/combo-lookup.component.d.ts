import { EventEmitter } from '@angular/core';
import { OnInit, ElementRef, ChangeDetectorRef, Renderer2, Injector } from '@angular/core';
import { BaseComboComponent, ComboService } from '@farris/ui-combo-list';
import { TreeInfo } from '@farris/ui-lookup';
import { TreeNode, TreeTableComponent } from '@farris/ui-treetable';
import { DataTableComponent } from '@farris/ui-datatable';
export declare class ComboLookupComponent extends BaseComboComponent implements OnInit {
    el: ElementRef;
    cdr: ChangeDetectorRef;
    document: any;
    render: Renderer2;
    comboService: ComboService;
    injector: Injector;
    panelHeight: number;
    comPosition: {
        'height.px': number;
    };
    showHeader: boolean;
    useTreeView: boolean;
    columns: any[];
    pagination: boolean;
    displayType: string;
    /** -1: 不展开； 0: 全部展开；>0: 展开到指定级数 */
    expandLevel: number;
    /** 树表启用过滤行 */
    enableFilterRow: boolean;
    treeCmpRef: TreeTableComponent;
    tableCmpRef: DataTableComponent;
    cascade: {
        enable: boolean;
        up: boolean;
        down: boolean;
    };
    treeInfo: TreeInfo;
    /** 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载 */
    loadTreeDataType: 'default' | 'loadall' | 'layerload';
    /** 启用构造完整树过滤 */
    enableFullTree: boolean;
    pageChanged: EventEmitter<{}>;
    pageSizeChanged: EventEmitter<{}>;
    /** 使用表单映射，默认 false */
    useFormDataMapping: boolean;
    ownSelections: any;
    loadFinish: boolean;
    pageInfo: any;
    private tt$;
    private loaded$;
    private _columns;
    private _pagination;
    private _tableCmpRef;
    private _treeCmpRef;
    private _searchKeyWords;
    loadDataType: string;
    private idSer;
    constructor(el: ElementRef, cdr: ChangeDetectorRef, document: any, render: Renderer2, comboService: ComboService, injector: Injector);
    ngOnInit(): void;
    protected onSelectionsChange(selections: any[]): void;
    private setTreeNodeExpandBy;
    private initTreeData;
    private isTree;
    updateMappingFieldValue(clearMapFields?: boolean): void;
    updateSelectedValues(): void;
    onSelectRows(row: any): void;
    onUnSelectRows(row: any): void;
    onCheckAll(ev: any): void;
    private updateTextAndValues;
    onKeyup($event: any): void;
    onKeydown($event: KeyboardEvent): void;
    onPageChanged(event: any): void;
    onPageSizeChanged(event: any): void;
    onColumnSorted(event: {
        sortName: string;
        sortOrder: any;
    }): void;
    onClear(): void;
    private getChildren;
    getData(event?: any, type?: string): import("rxjs").Observable<any>;
    /** 构选查询参数 */
    private buildQueryParams;
    filterDataOnServer(value: any, field: any): void;
    onExpandNode(tn: TreeNode): void;
    protected initDatasChangeAction(): void;
}
