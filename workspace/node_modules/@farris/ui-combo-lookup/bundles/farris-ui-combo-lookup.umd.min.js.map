{"version":3,"sources":["ng://@farris/ui-combo-lookup/lib/combo-lookup.service.ts","node_modules/tslib/tslib.es6.js","ng://@farris/ui-combo-lookup/lib/combo-lookup.component.ts","ng://@farris/ui-combo-lookup/lib/combo-lookup.module.ts"],"names":["ComboLookupService","Injectable","args","providedIn","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_super","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","INPUT_COMBO_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ComboLookupComponent","multi","__extends","__","constructor","create","tslib_1.__extends","BaseComboComponent","defineProperty","_this","cols","_columns","undefined","comboService","columns","useTreeView","filter","field","textField","value","_pagination","pageInfo","enablePager","displayType","val","_treeCmpRef","cmf","cascadeCheck","cascade","enable","cascadeDown","down","cascadeUp","up","tt$","next","pagination","loaded$","pipe","take","subscribe","e","loadData","pageSize","total","data","pageIndex","_tableCmpRef","loadFinish","ngOnInit","treeClientSearch","debounceTime","remoteSearch","treeCmpRef","searchHandle","search","treeInfo$","loadTreeDataType","loadDataType","treeInfo","onSelectionsChange","selections","multiSelect","ownSelections","forEach","item","idField","cdr","detectChanges","initTreeData","setTreeNodeExpandBy","nodes","expandLayer","layer","dataField","expanded","children","__selections","ids","map","push","id","checkeds","expandLevel","updateSerializedValue","expandAll","checkValues","checkedNodes","selectNodes","isTree","updateMappingFieldValue","clearMapFields","ngControl","formDirective","form","bindingData","bindingData_1","bindingPath","pathArr_1","split","mappingField","mapFields","keys","f","fieldNames","text","getValueByObj","join","separator","fieldName","_val","nosearch","name","displayText","setValue","useFormDataMapping","concat","commonUtils","updateSelectedValues","pathArr","targetField","indexOf","getValue","selectedValues","el","nativeElement","onSelectRows","row","index","selectItem","selectChange","emit","instance","node","updateTextAndValues","isOpen$","onUnSelectRows","unSelectItem","onCheckAll","ev","state","checked","rowNodes","selectable","r","selectAll","unSelectAll","_displayText","onValueChange","onKeyup","$event","onKeydown","key","hide","stopPropagation","_searchKeyWords","onPageChanged","event","uri","getData","loadLookUpDataTable","sortName","pageChanged","onPageSizeChanged","pageSizeChanged","onColumnSorted","_a","sortOrder","onClear","clearAll","getChildren","parentPath","parentLayer","searchData","category","layerType","param","searchValue","JSON","stringify","customData","enableFullTree","searchField","tt","type","params","buildQueryParams","searchParam","filterDataOnServer","isOpen","serachValue$","onExpandNode","tn","leaf","_c","treeInfoField","layerField","pathField","writeConsole","items","checkNodeCanBeSelect","appendChildren","idArr","psRef","directiveRef","update","initDatasChangeAction","data$","delay","updateSelections","txt","cd","Component","selector","template","encapsulation","ViewEncapsulation","None","providers","ComboService","LookupUtils","ElementRef","ChangeDetectorRef","Inject","DOCUMENT","Renderer2","Injector","Input","ViewChild","Output","document","render","injector","panelHeight","comPosition","height.px","showHeader","enableFilterRow","EventEmitter","Subject","idSer","get","IdService","ComboLookupModule","NgModule","declarations","imports","CommonModule","FormsModule","DataTableModule","TreeTableModule","InputGroupModule","LoadingModule","forRoot","exports","ComboLocaleService"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ComboService } from '@farris/ui-combo-list';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LoadingService } from '@farris/ui-loading';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComboLookupService {\r\n\r\n  constructor() {}\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { EventEmitter } from '@angular/core';\r\nimport {\r\n    Component, OnInit, ElementRef, ChangeDetectorRef, Inject, Renderer2,\r\n    Injector, Input, ViewChild, forwardRef, ViewEncapsulation, AfterViewChecked, Output\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { skip, take, filter, takeUntil, map, debounceTime, delay } from 'rxjs/operators';\r\nimport { BaseComboComponent, ComboService } from '@farris/ui-combo-list';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { LookupUtils, TreeInfo } from '@farris/ui-lookup';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { Subject, forkJoin, interval, zip } from 'rxjs';\r\nimport { IdService } from '@farris/ui-common';\r\n\r\nconst INPUT_COMBO_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    // tslint:disable-next-line: no-use-before-declare\r\n    useExisting: forwardRef(() => ComboLookupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    // tslint:disable-next-line: component-selector\r\n    selector: 'farris-combo-lookup',\r\n    templateUrl: './combo-lookup.component.html',\r\n    encapsulation: ViewEncapsulation.None,\r\n    // styleUrls: ['./combo-lookup.component.scss'],\r\n    providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService, LookupUtils]\r\n})\r\nexport class ComboLookupComponent extends BaseComboComponent implements OnInit {\r\n    panelHeight = 300;\r\n\r\n    comPosition = {\r\n        'height.px': this.panelHeight\r\n    };\r\n\r\n    @Input() showHeader = true;\r\n\r\n    @Input() useTreeView = false;\r\n    // æ åè¡¨é»è®¤å±å¼å±çº§ã -1ï¼ ä¸å±å¼ï¼ 0ï¼ å¨é¨å±å¼ï¼ >0:  å±å¼å°æå®çº§æ°ï¼\r\n    @Input()\r\n    set columns(value: any[]) {\r\n        this._columns = value;\r\n    }\r\n    get columns(): any[] {\r\n        let cols = this._columns !== undefined && this._columns.length > 0 ? this._columns : this.comboService.columns;\r\n        if (this.useTreeView && cols.length > 1) {\r\n            cols = cols.filter(n => n.field === this.textField);\r\n        }\r\n        return cols;\r\n    }\r\n    @Input()\r\n    set pagination(value: boolean) {\r\n        this._pagination = value;\r\n    }\r\n    get pagination() {\r\n        if (this._pagination !== undefined) {\r\n            return this._pagination;\r\n        } else {\r\n            return this.comboService.pageInfo && this.pageInfo.enablePager ? this.pageInfo.enablePager : false;\r\n        }\r\n    }\r\n    @Input()\r\n    set displayType(val: string) {\r\n        this.comboService.displayType = val + '';\r\n    }\r\n    get displayType() {\r\n        return this.comboService.displayType;\r\n    }\r\n\r\n    /** -1: ä¸å±å¼ï¼ 0: å¨é¨å±å¼ï¼>0: å±å¼å°æå®çº§æ° */\r\n    @Input() expandLevel = -1;\r\n\r\n    /** æ è¡¨å¯ç¨è¿æ»¤è¡ */\r\n    @Input() enableFilterRow = false;\r\n\r\n    @ViewChild('tt')\r\n    set treeCmpRef(cmf: TreeTableComponent) {\r\n        if (cmf) {\r\n            cmf.cascadeCheck = this.cascade.enable;\r\n            cmf.cascadeDown = this.cascade.down;\r\n            cmf.cascadeUp = this.cascade.up;\r\n\r\n            this.tt$.next(cmf);\r\n        }\r\n        this._treeCmpRef = cmf;\r\n    }\r\n    get treeCmpRef(): TreeTableComponent {\r\n        return this._treeCmpRef;\r\n    }\r\n    @ViewChild('dt')\r\n    set tableCmpRef(cmf: DataTableComponent) {\r\n        if (cmf && this.pagination) {\r\n            this.loaded$.pipe(take(1)).subscribe(e => {\r\n                // console.log(this._tableCmpRef, cmf);\r\n                cmf.loadData({\r\n                    pageSize: this.pageInfo.pageSize,\r\n                    total: this.pageInfo.total,\r\n                    data: this.data,\r\n                    pageIndex: this.pageInfo.pageIndex\r\n                });\r\n            });\r\n        }\r\n        if (!this._tableCmpRef && this.loadFinish && cmf) {\r\n            cmf.loadData({\r\n                pageSize: this.pageInfo.pageSize,\r\n                total: this.pageInfo.total,\r\n                data: this.data,\r\n                pageIndex: this.pageInfo.pageIndex\r\n            });\r\n        }\r\n        this._tableCmpRef = cmf;\r\n    }\r\n\r\n    @Input() cascade = {\r\n        enable: false,\r\n        up: false,\r\n        down: false\r\n    };\r\n\r\n    @Input() treeInfo: TreeInfo;\r\n\r\n    /** æ å½¢å¸®å©æ°æ®å è½½æ¹å¼ï¼ default: åç½®åæ°ï¼ loadall: å è½½ææ layerloadï¼åå±å è½½ */\r\n    @Input() loadTreeDataType: 'default' | 'loadall' | 'layerload' = 'default';\r\n    /** å¯ç¨æé å®æ´æ è¿æ»¤ */\r\n    @Input() enableFullTree = true;\r\n\r\n    @Output() pageChanged = new EventEmitter();\r\n    @Output() pageSizeChanged = new EventEmitter();\r\n    /** ä½¿ç¨è¡¨åæ å°ï¼é»è®¤ false */\r\n    @Input() useFormDataMapping = false;\r\n\r\n    ownSelections: any;\r\n    loadFinish = false;\r\n    pageInfo: any = { pageSize: 20, pageIndex: 1, total: 0 };\r\n    private tt$ = new Subject();\r\n    private loaded$ = new Subject();\r\n    private _columns: any[];\r\n    private _pagination: boolean;\r\n    private _tableCmpRef: any;\r\n    private _treeCmpRef: any;\r\n    private _searchKeyWords = '';\r\n\r\n    loadDataType = 'all';\r\n\r\n    private idSer: IdService;\r\n\r\n    constructor(\r\n        public el: ElementRef,\r\n        public cdr: ChangeDetectorRef,\r\n        @Inject(DOCUMENT) public document: any,\r\n        public render: Renderer2,\r\n        public comboService: ComboService,\r\n        public injector: Injector\r\n    ) {\r\n        super(el, cdr, document, render, comboService, injector);\r\n        this.idSer = this.injector.get(IdService, null);\r\n        if (!this.idSer) {\r\n            this.idSer = new IdService();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n\r\n        this.treeClientSearch.pipe(debounceTime(300)).subscribe((value: string) => {\r\n            if (!this.remoteSearch && this.treeCmpRef) {\r\n                this.treeCmpRef.searchHandle.search(this.textField, value);\r\n            }\r\n        });\r\n\r\n        this.comboService.treeInfo$.subscribe( (t: any) => {\r\n            if (t) {\r\n                if (this.loadTreeDataType === 'default') {\r\n                    this.loadDataType = t.loadDataType;\r\n                }\r\n\r\n                this.treeInfo = Object.assign(this.treeInfo|| {}, t);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected onSelectionsChange(selections: any[]) {\r\n        if (this.displayType === 'LOOKUPLIST') {\r\n            if (!this.multiSelect) {\r\n                this.ownSelections = selections[0] ?  selections[0] : {};\r\n            } else {\r\n                this.ownSelections = {};\r\n                this.comboService.selections.forEach(item => {\r\n                    this.ownSelections[item[this.idField]] = item;\r\n                });\r\n            }\r\n            this.pageInfo = { ...this.pageInfo, ...this.comboService.pageInfo };\r\n            this.loadFinish = true;\r\n            this.cdr.detectChanges();\r\n            this.loaded$.next(this.pageInfo);\r\n        } else {\r\n            if (this.treeCmpRef) {\r\n                this.initTreeData();\r\n            } else {\r\n                this.tt$.pipe(take(1)).subscribe((cmf: TreeTableComponent) => {\r\n                    this.treeCmpRef = cmf;\r\n                    this.initTreeData();\r\n                    // cmf.checkedNodes(ids, true, false);\r\n                    // cmf.updateSerializedValue();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private setTreeNodeExpandBy(nodes: TreeNode[], expandLayer) {\r\n        if (!nodes || !nodes.length) {\r\n            return;\r\n        }\r\n        nodes.forEach((n: TreeNode) => {\r\n            const layer = n.data[this.treeInfo.dataField].layer;\r\n            n.expanded = layer <= expandLayer ? true : n.expanded;\r\n            if (n.children && n.children.length && layer + 1 <= expandLayer) {\r\n                this.setTreeNodeExpandBy(n.children, expandLayer);\r\n            }\r\n        });\r\n    }\r\n\r\n    private initTreeData() {\r\n        const __selections = this.comboService.selections.filter(n => n !== null && n !== undefined);\r\n        const ids = [];\r\n        this.ownSelections = __selections.map(item => {\r\n            ids.push(item[this.idField]);\r\n            return { data: item, id: item[this.idField] };\r\n        });\r\n        this.treeCmpRef.selections = this.ownSelections;\r\n        this.treeCmpRef.checkeds = this.ownSelections;\r\n\r\n        if (this.expandLevel != -1 && this.loadDataType == 'all' ) {\r\n            if (this.expandLevel > 0) {\r\n                this.setTreeNodeExpandBy(this.treeCmpRef.data, this.expandLevel);\r\n                this.treeCmpRef.updateSerializedValue();\r\n            } else {\r\n                this.treeCmpRef.expandAll();\r\n            }\r\n        }\r\n\r\n        if (this.comboService.data && this.comboService.data.length) {\r\n            if (this.treeCmpRef.checkValues && this.treeCmpRef.checkValues.length) {\r\n                if (this.multiSelect) {\r\n                    this.treeCmpRef.checkedNodes(this.treeCmpRef.checkValues);\r\n                    this.treeCmpRef.selectNodes(this.treeCmpRef.checkValues);\r\n                } else {\r\n                    this.treeCmpRef.selectNodes(this.treeCmpRef.checkValues);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private isTree() {\r\n        return this.displayType === 'LOOKUPTREELIST';\r\n    }\r\n\r\n\r\n    updateMappingFieldValue(clearMapFields = false) {\r\n        if ( this.ngControl && this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form && this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n            const bindingPath = this.ngControl.formDirective.form.bindingPath;\r\n            let pathArr = [];\r\n            if (bindingPath) {\r\n                pathArr = bindingPath.split('/').filter(n => n !== '');\r\n            }\r\n            this.mappingField = this.mappingField ? this.mappingField : {};\r\n            if (this.mapFields) {\r\n                const helpFields = Object.keys(this.mapFields);\r\n                helpFields.forEach((f: any) => {\r\n                    const fieldNames = this.mapFields[f] ? this.mapFields[f] : '';\r\n                    let value = '';\r\n                    if (!clearMapFields) {\r\n                        const text = this.comboService.selections && this.comboService.selections.map(item => {\r\n                            return this.comboService.getValueByObj(f, item);\r\n                        }).filter(n => n !== null).join(this.separator);\r\n                        // value = text ? text : this.displayText ? this.displayText : '';\r\n                        value = text || '';\r\n                    }\r\n\r\n                    if (fieldNames) {\r\n                        fieldNames.split(',').forEach((fieldName: any) => {\r\n                            let _val = value;\r\n                            if (this.nosearch && fieldName === this.ngControl.name) {\r\n                                _val = this.displayText;\r\n                            }\r\n                            if (bindingData.setValue) {\r\n                                if ( !this.useFormDataMapping) {\r\n                                    bindingData.setValue( pathArr.concat(fieldName.split('.')), _val, true, true);\r\n                                }\r\n                            } else {\r\n                                this.commonUtils.setValue(bindingData, fieldName, value);\r\n                            }\r\n                           \r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSelectedValues() {\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n            const bindingPath = this.ngControl.formDirective.form.bindingPath;\r\n            let pathArr = [];\r\n            if (bindingPath) {\r\n                pathArr = bindingPath.split('/').filter(n => n !== '');\r\n            }\r\n            let targetField = this.mappingField ? this.mapFields[this.idField] : '';\r\n\r\n            if (targetField && targetField.indexOf(',') > -1) {\r\n                targetField = targetField.split(',')[0];\r\n            }\r\n\r\n            // this.mappingField = this.mappingField ? this.mappingField : '';\r\n            if (targetField && bindingData.getValue) {\r\n                this.selectedValues = bindingData.getValue(pathArr.concat(targetField.split('.'))) || '';\r\n            } else if (targetField) {\r\n                this.selectedValues = this.commonUtils.getValue(targetField, bindingData) || '';\r\n            } \r\n            else {\r\n                // å¼å®¹ä¸ºè®¾ç½®idField å­æ®µæ å°çæåµï¼æ­¤æåµä½¿ç¨ valueField\r\n                targetField = this.mappingField ? this.mapFields[this.textField] : '';\r\n                if (targetField && bindingData.getValue) {\r\n                    this.comboService['__SELECTEDIDS__'] = this.comboService.getValue(this.idField);\r\n                    this.selectedValues =  bindingData.getValue(pathArr.concat(targetField.split('.'))) || '';\r\n                }\r\n            } \r\n        } else {\r\n            // UI state binding\r\n            if (this.el.nativeElement['__zone_symbol__UIStateBindingChangefalse']) {\r\n                // this.selectedValues = this.comboService.getValue(this.textField);\r\n                this.selectedValues = this.displayText;\r\n            }\r\n        }\r\n    }\r\n\r\n    onSelectRows(row) {\r\n        if (this.displayType === 'LOOKUPLIST') {\r\n            const { data, index } = row;\r\n            this.comboService.selectItem(data, index);\r\n            this.selectChange.emit({ data, index, instance: this }); // UI-STATE-BINDING ä¸­ä½¿ç¨\r\n        } else if (this.displayType === 'LOOKUPTREELIST') {\r\n            const { node } = row;\r\n            if (row.nodes) {\r\n                this.comboService.selectItem(row.nodes.map(n => n.data));\r\n            } else {\r\n                this.comboService.selectItem(node.data);\r\n            }\r\n            this.selectChange.emit(node);\r\n        }\r\n\r\n        this.updateTextAndValues();\r\n        if (!this.multiSelect) {\r\n            this.comboService.isOpen$.next(false);\r\n        }\r\n    }\r\n\r\n    onUnSelectRows(row) {\r\n        if (this.displayType === 'LOOKUPLIST') {\r\n            const { data } = row;\r\n            this.comboService.unSelectItem(data);\r\n        } else if (this.displayType === 'LOOKUPTREELIST') {\r\n            const { node } = row;\r\n            this.comboService.unSelectItem(node.data);\r\n            this.selectChange.emit(node);\r\n        }\r\n\r\n        this.updateTextAndValues();\r\n    }\r\n\r\n    onCheckAll(ev) {\r\n        let state;\r\n        let selections = [];\r\n        if (this.displayType === 'LOOKUPTREELIST') {\r\n            state = ev.checked;\r\n            selections = this.treeCmpRef.state.rowNodes\r\n                            .filter(n => n.node.selectable === undefined || n.node.selectable )\r\n                            .map(r => r.node.data);\r\n        } else {\r\n            state = ev;\r\n            selections = this.data;\r\n        }\r\n\r\n        if (state) {\r\n            this.comboService.selectAll(selections);\r\n        } else {\r\n            this.comboService.unSelectAll(selections);\r\n        }\r\n\r\n        this.updateTextAndValues();\r\n    }\r\n\r\n    private updateTextAndValues() {\r\n        this.comboService['__SELECTEDIDS__'] = this.comboService.getValue(this.idField);\r\n        this.selectedValues = this.comboService['__SELECTEDIDS__'];\r\n        if (!this.multiSelect) {\r\n            this.updateSelectedValues();\r\n        }\r\n        const _displayText = this.comboService.getValue(this.textField);\r\n        this.onValueChange({ text: _displayText, value: this.comboService['__SELECTEDIDS__'], selections: this.selections });\r\n    }\r\n\r\n    onKeyup($event) {\r\n        // console.log('key up', $event);\r\n\r\n    }\r\n\r\n    onKeydown($event: KeyboardEvent) {\r\n        // console.log('key down', $event);\r\n        if ($event.key === 'Tab') {\r\n            this.hide(false);\r\n        }\r\n\r\n        if ($event.key === 'Enter') {\r\n            $event.stopPropagation();\r\n            if (this._searchKeyWords && !this.multiSelect) {\r\n                if (this.displayType === 'LOOKUPLIST') {\r\n                    this.onSelectRows({data: this._tableCmpRef.selections});\r\n                } else if (this.displayType === 'LOOKUPTREELIST') {\r\n                    // this.treeCmpRef.selectNode()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageChanged(event) {\r\n        if (this.uri) {\r\n            this.getData(event).subscribe(data => this.comboService.loadLookUpDataTable(data, !!event.sortName));\r\n        } else {\r\n            this.pageChanged.emit(event);\r\n        }\r\n    }\r\n\r\n    onPageSizeChanged(event) {\r\n        if (this.uri) {\r\n            this.getData(event).subscribe(data => this.comboService.loadLookUpDataTable(data, !!event.sortName));\r\n        } else {\r\n            this.pageSizeChanged.emit(event);\r\n        }\r\n    }\r\n\r\n    onColumnSorted(event: { sortName: string; sortOrder: any }) {\r\n        const { sortName, sortOrder } = { ...event };\r\n        this.getData({ sortName, sortOrder }, 'search').subscribe(data => {\r\n            this.comboService.loadLookUpDataTable(data, true);\r\n        });\r\n    }\r\n\r\n    onClear() {\r\n        this.ownSelections = [];\r\n        if (this.isTree() && this.treeCmpRef) {\r\n            this.treeCmpRef.clearAll();\r\n        }\r\n        super.onClear();\r\n    }\r\n\r\n    private getChildren( parentPath,parentLayer,searchData: { searchField: string; searchValue: string }) {\r\n        const search = { parentLayer, category: 'children', ...searchData };\r\n        if (this.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.customData,\r\n            enableFullTree: this.enableFullTree,\r\n            loadTreeDataType: this.loadTreeDataType\r\n        };\r\n\r\n        if (this._searchKeyWords) {\r\n            param.enableFullTree = false;\r\n            param.loadTreeDataType = 'layerload';\r\n\r\n            if (this.treeInfo.layerType === 'parentId') {\r\n                // æ å½¢å¸®å©æ¥è¯¢åï¼å±å¼èç¹æ¶å°ç¸å³æ¥è¯¢åæ°ä¼ éå°åç«¯ 2022-09-13\r\n                search.searchValue = '';\r\n                search.searchField = '*';\r\n            }\r\n            param.searchValue = JSON.stringify(search);\r\n        }\r\n\r\n        const tt = this.treeCmpRef as TreeTableComponent;\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n        return this.comboService.getData(param, 'get', true);\r\n    }\r\n\r\n\r\n    getData(event?: any, type = 'all') {\r\n        event = event || {};\r\n        if (this._searchKeyWords) {\r\n            event.search = {\r\n                field: '*',\r\n                value: this._searchKeyWords\r\n            };\r\n        }\r\n\r\n        const params = this.buildQueryParams(event, type);\r\n        return this.comboService.getData(params);\r\n    }\r\n\r\n    /** æéæ¥è¯¢åæ° */\r\n    private buildQueryParams(event?: any, type = 'all') {\r\n        const params: any = {};\r\n\r\n        const searchParam = { category: type };\r\n        if (event) {\r\n            if (event.pageInfo) {\r\n                params['pageIndex'] = event.pageInfo.pageIndex;\r\n                params['pageSize'] = event.pageInfo.pageSize;\r\n            }\r\n\r\n            if (event.search) {\r\n                searchParam['searchField'] = event.search.field;\r\n                searchParam['searchValue'] = event.search.value;\r\n            }\r\n\r\n            if (event.sortName) {\r\n                searchParam['sortName'] = event.sortName;\r\n            }\r\n            if (event.sortOrder) {\r\n                searchParam['sortOrder'] = event.sortOrder;\r\n            }\r\n        }\r\n\r\n        params['searchValue'] = JSON.stringify(searchParam);\r\n        if (this.customData) {\r\n            params['customData'] = this.customData;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    filterDataOnServer(value, field) {\r\n        let search = { search: { field, value }};\r\n        if (value) {\r\n            this._searchKeyWords = value;\r\n\r\n        } else {\r\n            this._searchKeyWords = '';\r\n            search = null;\r\n        }\r\n\r\n        const params = this.buildQueryParams(search, 'search' );\r\n        if (!this.isOpen) {\r\n            if (this.nosearch) {\r\n                return;\r\n            }\r\n            this.isOpen = true;\r\n            this.comboService.isOpen$.next({ isOpen: this.isOpen, search: params});\r\n            return;\r\n        }\r\n        \r\n        this.comboService.serachValue$.next(params);\r\n    }\r\n\r\n    onExpandNode(tn: TreeNode) {\r\n        if (tn.leaf ||  tn['showLoading']) {\r\n            return;\r\n        }\r\n\r\n        if (!tn.children || !tn.children.length) {\r\n            let parentPath = '';\r\n            let parentLayer = -1;\r\n            const { field = '*', value = '' } = {\r\n                value: this._searchKeyWords\r\n            };\r\n            const treeInfoField = this.treeInfo.dataField;\r\n            if (this.treeInfo.layerType === 'parentId') {\r\n                // ç¶IDå è½½æ¹å¼\r\n                parentPath = tn['id'];\r\n                parentLayer = tn.data[treeInfoField][this.treeInfo.layerField];\r\n            } else {\r\n                if (treeInfoField) {\r\n                    parentPath = tn.data[treeInfoField][this.treeInfo.pathField];\r\n                    parentLayer = tn.data[treeInfoField][this.treeInfo.layerField];\r\n                } else {\r\n                    this.treeCmpRef.writeConsole('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                }\r\n            }\r\n\r\n            this.getChildren(parentPath, parentLayer, {\r\n                searchField: field === '*' ? '*' : field,\r\n                searchValue: value\r\n            }).subscribe(data => {\r\n                if (tn && data.items && data.items.length) {\r\n                    const nodes = this.comboService.checkNodeCanBeSelect(data.items, false);\r\n                    this.treeCmpRef.appendChildren(nodes, tn);\r\n                }\r\n                this.treeCmpRef.detectChanges();\r\n\r\n                // if (this.selectedValues && this.selectedValues.length) {\r\n                //     this.treeCmpRef.checkedNodes(this.selectedValues.split(','));\r\n                // }\r\n                const ids = this.comboService['__SELECTEDIDS__'];\r\n                if (ids && ids.length) {\r\n                    const idArr = ids.split(this.separator);\r\n                    if (this.multiSelect) {\r\n                        this.treeCmpRef.checkedNodes(idArr);\r\n                    }\r\n                    this.treeCmpRef.selectNodes(idArr);\r\n                }\r\n\r\n                this.treeCmpRef.psRef.directiveRef.update();\r\n            });\r\n        }\r\n    }\r\n\r\n    protected initDatasChangeAction() {\r\n        this.comboService.data$.pipe(\r\n            delay(120)\r\n        ).subscribe(data => {\r\n\r\n            // å¸®å©æ°æ®å¼æ­¥èªå®ä¹åæ°ï¼\r\n            // å¸®å©éç½®çé¢\r\n            if (!this.uri && data && data.length) {\r\n                this.updateSelections(this.selectedValues, data);\r\n                // TFS 574365\r\n                let txt = this.comboService.getValue(this.textField);\r\n                txt = txt ? txt : this.nosearch ? this.displayText: '';\r\n                \r\n                this.displayText = txt;\r\n                this['originalText'] = this.displayText;\r\n            }\r\n\r\n            if (this._searchKeyWords && data && data.length && !this.multiSelect) {\r\n                if (this.displayType === 'LOOKUPLIST') {\r\n                    this._tableCmpRef.selections = data[0];\r\n                    this._tableCmpRef.cd.detectChanges();\r\n                } else if (this.displayType === 'LOOKUPTREELIST') {\r\n                    // this.treeCmpRef.selectNode()\r\n                    const nodes = this.comboService.checkNodeCanBeSelect(data.items, false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ComboLookupComponent } from './combo-lookup.component';\r\nimport { DataTableModule } from '@farris/ui-datatable';\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LoadingModule } from '@farris/ui-loading';\r\nimport { ComboLocaleService } from '@farris/ui-combo-list';\r\n@NgModule({\r\n  declarations: [ComboLookupComponent],\r\n  imports: [\r\n    CommonModule, FormsModule, DataTableModule,\r\n    TreeTableModule, InputGroupModule,\r\n    LoadingModule.forRoot()\r\n  ],\r\n  exports: [ComboLookupComponent],\r\n  providers: [ComboLocaleService]\r\n})\r\nexport class ComboLookupModule { }\r\n"]}