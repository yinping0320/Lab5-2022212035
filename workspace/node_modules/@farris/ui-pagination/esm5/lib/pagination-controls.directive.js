/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, Optional, Injector } from '@angular/core';
import { PaginationService } from './pagination.service';
/**
 * @record
 */
export function Page() { }
if (false) {
    /** @type {?} */
    Page.prototype.label;
    /** @type {?} */
    Page.prototype.value;
}
/**
 * This directive is what powers all pagination controls components, including the default one.
 * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
 * with the pagination controls.
 */
var PaginationControlsDirective = /** @class */ (function () {
    function PaginationControlsDirective(service, changeDetectorRef, injector) {
        var _this = this;
        this.service = service;
        this.changeDetectorRef = changeDetectorRef;
        this.injector = injector;
        this.maxSize = 7;
        this.pageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.pages = [];
        if (!this.service) {
            if (this.injector) {
                this.service = this.injector.get(PaginationService);
            }
            else {
                this.service = new PaginationService();
            }
        }
        this.changeSub = this.service.change.subscribe((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            if (_this.id === id) {
                _this.updatePageLinks();
                _this.changeDetectorRef.markForCheck();
                _this.changeDetectorRef.detectChanges();
            }
        }));
    }
    /**
     * @return {?}
     */
    PaginationControlsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.id === undefined) {
            this.id = this.service.defaultId();
        }
        this.updatePageLinks();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PaginationControlsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.updatePageLinks();
    };
    /**
     * @return {?}
     */
    PaginationControlsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.changeSub.unsubscribe();
        this.service.removeInstance(this.id);
    };
    /**
     * Go to the previous page
     */
    /**
     * Go to the previous page
     * @return {?}
     */
    PaginationControlsDirective.prototype.previous = /**
     * Go to the previous page
     * @return {?}
     */
    function () {
        this.checkValidId();
        this.setCurrent(this.getCurrent() - 1);
    };
    /**
     * Go to the next page
     */
    /**
     * Go to the next page
     * @return {?}
     */
    PaginationControlsDirective.prototype.next = /**
     * Go to the next page
     * @return {?}
     */
    function () {
        this.checkValidId();
        this.setCurrent(this.getCurrent() + 1);
    };
    /**
     * lucas added 2019/07/02
     * Go to the first page
     */
    /**
     * lucas added 2019/07/02
     * Go to the first page
     * @param {?} $event
     * @return {?}
     */
    PaginationControlsDirective.prototype.first = /**
     * lucas added 2019/07/02
     * Go to the first page
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.checkValidId();
        this.setCurrent(1);
    };
    /**
     * lucas added 2019/07/02
     * Go to the last page
     */
    /**
     * lucas added 2019/07/02
     * Go to the last page
     * @param {?} $event
     * @return {?}
     */
    PaginationControlsDirective.prototype.last = /**
     * lucas added 2019/07/02
     * Go to the last page
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.checkValidId();
        this.setCurrent(this.getLastPage());
    };
    /**
     * Returns true if current page is first page
     */
    /**
     * Returns true if current page is first page
     * @return {?}
     */
    PaginationControlsDirective.prototype.isFirstPage = /**
     * Returns true if current page is first page
     * @return {?}
     */
    function () {
        return this.getCurrent() === 1;
    };
    /**
     * Returns true if current page is last page
     */
    /**
     * Returns true if current page is last page
     * @return {?}
     */
    PaginationControlsDirective.prototype.isLastPage = /**
     * Returns true if current page is last page
     * @return {?}
     */
    function () {
        return this.getLastPage() === this.getCurrent();
    };
    /**
     * Set the current page number.
     */
    /**
     * Set the current page number.
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} $event
     * @return {?}
     */
    PaginationControlsDirective.prototype.setCurrent = /**
     * Set the current page number.
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} $event
     * @return {?}
     */
    function (page, pageSize, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!pageSize) {
            pageSize = this.getPageSize();
        }
        this.pageChange.emit({ pageIndex: page, pageSize: pageSize });
    };
    /**
     * Get the current page number.
     */
    /**
     * Get the current page number.
     * @return {?}
     */
    PaginationControlsDirective.prototype.getCurrent = /**
     * Get the current page number.
     * @return {?}
     */
    function () {
        return this.service.getCurrentPage(this.id);
    };
    /**
     * @param {?} pageList
     * @return {?}
     */
    PaginationControlsDirective.prototype.setPageList = /**
     * @param {?} pageList
     * @return {?}
     */
    function (pageList) {
        this.service.setPageList(this.id, pageList);
    };
    /**
     * Returns the last page number
     */
    /**
     * Returns the last page number
     * @return {?}
     */
    PaginationControlsDirective.prototype.getLastPage = /**
     * Returns the last page number
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inst = this.service.getInstance(this.id);
        if (inst.totalItems < 1) {
            // when there are 0 or fewer (an error case) items, there are no "pages" as such,
            // but it makes sense to consider a single, empty page as the last page.
            return 1;
        }
        return Math.ceil(inst.totalItems / inst.itemsPerPage);
    };
    /**
     * @return {?}
     */
    PaginationControlsDirective.prototype.getTotalItems = /**
     * @return {?}
     */
    function () {
        return this.service.getInstance(this.id).totalItems;
    };
    /**
     * @return {?}
     */
    PaginationControlsDirective.prototype.getPageList = /**
     * @return {?}
     */
    function () {
        return this.service.getInstance(this.id).pageList;
    };
    /**
     * @return {?}
     */
    PaginationControlsDirective.prototype.getPageSize = /**
     * @return {?}
     */
    function () {
        return this.service.getInstance(this.id).itemsPerPage;
    };
    /**
     * @param {?} pager
     * @return {?}
     */
    PaginationControlsDirective.prototype.goto = /**
     * @param {?} pager
     * @return {?}
     */
    function (pager) {
        // alert(pager);
        this.setCurrent(pager);
    };
    /**
     * @private
     * @return {?}
     */
    PaginationControlsDirective.prototype.checkValidId = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.service.getInstance(this.id).id == null) {
            console.warn("PaginationControlsDirective: the specified id \"" + this.id + "\" does not match any registered PaginationInstance");
        }
    };
    /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     */
    /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     * @private
     * @return {?}
     */
    PaginationControlsDirective.prototype.updatePageLinks = /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var inst = this.service.getInstance(this.id);
        /** @type {?} */
        var correctedCurrentPage = this.outOfBoundCorrection(inst);
        if (correctedCurrentPage !== inst.currentPage) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.setCurrent(correctedCurrentPage);
                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);
            }));
        }
        else {
            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
        }
        this.changeDetectorRef.markForCheck();
        this.changeDetectorRef.detectChanges();
    };
    /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     */
    /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     * @private
     * @param {?} instance
     * @return {?}
     */
    PaginationControlsDirective.prototype.outOfBoundCorrection = /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        /** @type {?} */
        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    };
    /**
     * Returns an array of Page objects to use in the pagination controls.
     */
    /**
     * Returns an array of Page objects to use in the pagination controls.
     * @private
     * @param {?} currentPage
     * @param {?} itemsPerPage
     * @param {?} totalItems
     * @param {?} paginationRange
     * @return {?}
     */
    PaginationControlsDirective.prototype.createPageArray = /**
     * Returns an array of Page objects to use in the pagination controls.
     * @private
     * @param {?} currentPage
     * @param {?} itemsPerPage
     * @param {?} totalItems
     * @param {?} paginationRange
     * @return {?}
     */
    function (currentPage, itemsPerPage, totalItems, paginationRange) {
        // paginationRange could be a string if passed from attribute, so cast to number.
        paginationRange = +paginationRange;
        /** @type {?} */
        var pages = [];
        /** @type {?} */
        var totalPages = Math.ceil(totalItems / itemsPerPage);
        /** @type {?} */
        var halfWay = Math.ceil(paginationRange / 2);
        /** @type {?} */
        var isStart = currentPage <= halfWay;
        /** @type {?} */
        var isEnd = totalPages - halfWay < currentPage;
        /** @type {?} */
        var isMiddle = !isStart && !isEnd;
        /** @type {?} */
        var ellipsesNeeded = paginationRange < totalPages;
        /** @type {?} */
        var i = 1;
        while (i <= totalPages && i <= paginationRange) {
            /** @type {?} */
            var label = void 0;
            /** @type {?} */
            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
            /** @type {?} */
            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));
            /** @type {?} */
            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                label = '...';
            }
            else {
                label = pageNumber;
            }
            pages.push({
                label: label,
                value: pageNumber
            });
            i++;
        }
        return pages;
    };
    /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     */
    /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     * @private
     * @param {?} i
     * @param {?} currentPage
     * @param {?} paginationRange
     * @param {?} totalPages
     * @return {?}
     */
    PaginationControlsDirective.prototype.calculatePageNumber = /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     * @private
     * @param {?} i
     * @param {?} currentPage
     * @param {?} paginationRange
     * @param {?} totalPages
     * @return {?}
     */
    function (i, currentPage, paginationRange, totalPages) {
        /** @type {?} */
        var halfWay = Math.ceil(paginationRange / 2);
        if (i === paginationRange) {
            return totalPages;
        }
        else if (i === 1) {
            return i;
        }
        else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
                return totalPages - paginationRange + i;
            }
            else if (halfWay < currentPage) {
                return currentPage - halfWay + i;
            }
            else {
                return i;
            }
        }
        else {
            return i;
        }
    };
    PaginationControlsDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'pagination-template,[pagination-template]',
                    exportAs: 'paginationApi'
                },] }
    ];
    /** @nocollapse */
    PaginationControlsDirective.ctorParameters = function () { return [
        { type: PaginationService, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    PaginationControlsDirective.propDecorators = {
        id: [{ type: Input }],
        maxSize: [{ type: Input }],
        pageChange: [{ type: Output }],
        pageSizeChange: [{ type: Output }]
    };
    return PaginationControlsDirective;
}());
export { PaginationControlsDirective };
if (false) {
    /** @type {?} */
    PaginationControlsDirective.prototype.id;
    /** @type {?} */
    PaginationControlsDirective.prototype.maxSize;
    /** @type {?} */
    PaginationControlsDirective.prototype.pageChange;
    /** @type {?} */
    PaginationControlsDirective.prototype.pageSizeChange;
    /** @type {?} */
    PaginationControlsDirective.prototype.pages;
    /**
     * @type {?}
     * @private
     */
    PaginationControlsDirective.prototype.changeSub;
    /**
     * @type {?}
     * @private
     */
    PaginationControlsDirective.prototype.service;
    /** @type {?} */
    PaginationControlsDirective.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    PaginationControlsDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,