/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Optional, Pipe } from '@angular/core';
import { PaginationService } from './pagination.service';
/** @type {?} */
var LARGE_NUMBER = Number.MAX_SAFE_INTEGER;
/**
 * @record
 */
export function PaginatePipeArgs() { }
if (false) {
    /** @type {?|undefined} */
    PaginatePipeArgs.prototype.id;
    /** @type {?|undefined} */
    PaginatePipeArgs.prototype.itemsPerPage;
    /** @type {?|undefined} */
    PaginatePipeArgs.prototype.currentPage;
    /** @type {?|undefined} */
    PaginatePipeArgs.prototype.totalItems;
    /** @type {?|undefined} */
    PaginatePipeArgs.prototype.pageList;
    /** @type {?|undefined} */
    PaginatePipeArgs.prototype.remote;
}
/**
 * @record
 */
export function PipeState() { }
if (false) {
    /** @type {?} */
    PipeState.prototype.collection;
    /** @type {?} */
    PipeState.prototype.size;
    /** @type {?} */
    PipeState.prototype.start;
    /** @type {?} */
    PipeState.prototype.end;
    /** @type {?} */
    PipeState.prototype.slice;
}
var PaginatePipe = /** @class */ (function () {
    function PaginatePipe(service) {
        this.service = service;
        // store the values from the last time the pipe was invoked
        this.state = {};
        if (!this.service) {
            this.service = new PaginationService();
        }
    }
    /**
     * @template T, U
     * @param {?} collection
     * @param {?} args
     * @return {?}
     */
    PaginatePipe.prototype.transform = /**
     * @template T, U
     * @param {?} collection
     * @param {?} args
     * @return {?}
     */
    function (collection, args) {
        // When an observable is passed through the AsyncPipe, it will output
        // `null` until the subscription resolves. In this case, we want to
        // use the cached data from the `state` object to prevent the NgFor
        // from flashing empty until the real values arrive.
        if (!(collection instanceof Array)) {
            /** @type {?} */
            var _id = args.id || this.service.defaultId();
            if (this.state[_id]) {
                return (/** @type {?} */ (this.state[_id].slice));
            }
            else {
                return collection;
            }
        }
        // const serverSideMode = args.totalItems && args.totalItems !== collection.length;
        /** @type {?} */
        var serverSideMode = args.remote;
        /** @type {?} */
        var instance = this.createInstance(collection, args);
        /** @type {?} */
        var id = instance.id;
        /** @type {?} */
        var start;
        /** @type {?} */
        var end;
        /** @type {?} */
        var perPage = instance.itemsPerPage;
        this.service.register(instance);
        if (!serverSideMode && collection instanceof Array) {
            perPage = +perPage || LARGE_NUMBER;
            start = (instance.currentPage - 1) * perPage;
            end = start + perPage;
            /** @type {?} */
            var isIdentical = this.stateIsIdentical(id, collection, start, end);
            if (isIdentical) {
                return (/** @type {?} */ (this.state[id].slice));
            }
            else {
                /** @type {?} */
                var slice = collection.slice(start, end);
                this.saveState(id, collection, slice, start, end);
                this.service.change.emit(id);
                return (/** @type {?} */ (slice));
            }
        }
        // save the state for server-side collection to avoid null
        // flash as new data loads.
        this.saveState(id, collection, collection, start, end);
        return collection;
    };
    /**
     * Create an PaginationInstance object, using defaults for any optional properties not supplied.
     */
    /**
     * Create an PaginationInstance object, using defaults for any optional properties not supplied.
     * @private
     * @param {?} collection
     * @param {?} config
     * @return {?}
     */
    PaginatePipe.prototype.createInstance = /**
     * Create an PaginationInstance object, using defaults for any optional properties not supplied.
     * @private
     * @param {?} collection
     * @param {?} config
     * @return {?}
     */
    function (collection, config) {
        // this.checkConfig(config);
        return {
            id: config.id != null ? config.id : this.service.defaultId(),
            itemsPerPage: +config.itemsPerPage || 0,
            currentPage: +config.currentPage || 1,
            totalItems: +config.totalItems || collection.length,
            pageList: config.pageList || [10, 20, 30, 50, 100],
            remote: config.remote
        };
    };
    /**
     * Ensure the argument passed to the filter contains the required properties.
     */
    /**
     * Ensure the argument passed to the filter contains the required properties.
     * @private
     * @param {?} config
     * @return {?}
     */
    PaginatePipe.prototype.checkConfig = /**
     * Ensure the argument passed to the filter contains the required properties.
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var required = ['itemsPerPage', 'currentPage'];
        /** @type {?} */
        var missing = required.filter((/**
         * @param {?} prop
         * @return {?}
         */
        function (prop) { return !(prop in config); }));
        if (0 < missing.length) {
            throw new Error("PaginatePipe: Argument is missing the following required properties: " + missing.join(', '));
        }
    };
    /**
     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
     * array for a given id. This means that the next time the pipe is run on this collection & id, we just
     * need to check that the collection, start and end points are all identical, and if so, return the
     * last sliced array.
     */
    /**
     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
     * array for a given id. This means that the next time the pipe is run on this collection & id, we just
     * need to check that the collection, start and end points are all identical, and if so, return the
     * last sliced array.
     * @private
     * @param {?} id
     * @param {?} collection
     * @param {?} slice
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    PaginatePipe.prototype.saveState = /**
     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
     * array for a given id. This means that the next time the pipe is run on this collection & id, we just
     * need to check that the collection, start and end points are all identical, and if so, return the
     * last sliced array.
     * @private
     * @param {?} id
     * @param {?} collection
     * @param {?} slice
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (id, collection, slice, start, end) {
        this.state[id] = {
            collection: collection,
            size: collection.length,
            slice: slice,
            start: start,
            end: end
        };
    };
    /**
     * For a given id, returns true if the collection, size, start and end values are identical.
     */
    /**
     * For a given id, returns true if the collection, size, start and end values are identical.
     * @private
     * @param {?} id
     * @param {?} collection
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    PaginatePipe.prototype.stateIsIdentical = /**
     * For a given id, returns true if the collection, size, start and end values are identical.
     * @private
     * @param {?} id
     * @param {?} collection
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (id, collection, start, end) {
        /** @type {?} */
        var state = this.state[id];
        if (!state) {
            return false;
        }
        /** @type {?} */
        var isMetaDataIdentical = state.size === collection.length &&
            state.start === start &&
            state.end === end;
        if (!isMetaDataIdentical) {
            return false;
        }
        return state.slice.every((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) { return element === collection[start + index]; }));
    };
    PaginatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'paginate',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    PaginatePipe.ctorParameters = function () { return [
        { type: PaginationService, decorators: [{ type: Optional }] }
    ]; };
    return PaginatePipe;
}());
export { PaginatePipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PaginatePipe.prototype.state;
    /**
     * @type {?}
     * @private
     */
    PaginatePipe.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,