(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@angular/common'), require('@farris/ui-common'), require('@farris/ui-locale'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-pagination', ['exports', '@angular/forms', '@angular/common', '@farris/ui-common', '@farris/ui-locale', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-pagination'] = {}),global.ng.forms,global.ng.common,global.uiCommon,global.uiLocale,global.ng.core));
}(this, (function (exports,forms,common,uiCommon,uiLocale,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PaginationService = /** @class */ (function () {
        function PaginationService() {
            this.change = new i0.EventEmitter();
            this.instances = {};
            this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';
        }
        /**
         * @return {?}
         */
        PaginationService.prototype.defaultId = /**
         * @return {?}
         */
            function () {
                return this.DEFAULT_ID + new uiCommon.IdService().uuid();
            };
        /**
         * @param {?} id
         * @return {?}
         */
        PaginationService.prototype.removeInstance = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                if (this.instances[id]) {
                    this.instances[id] = null;
                    delete this.instances[id];
                }
            };
        /**
         * @param {?} instance
         * @return {?}
         */
        PaginationService.prototype.register = /**
         * @param {?} instance
         * @return {?}
         */
            function (instance) {
                if (instance.id == null) {
                    instance.id = this.DEFAULT_ID;
                }
                if (!this.instances[instance.id]) {
                    this.instances[instance.id] = instance;
                    this.change.emit(instance.id);
                }
                else {
                    /** @type {?} */
                    var changed = this.updateInstance(instance);
                    if (changed) {
                        this.change.emit(instance.id);
                    }
                }
            };
        /**
         * Check each property of the instance and update any that have changed. Return
         * true if any changes were made, else return false.
         */
        /**
         * Check each property of the instance and update any that have changed. Return
         * true if any changes were made, else return false.
         * @private
         * @param {?} instance
         * @return {?}
         */
        PaginationService.prototype.updateInstance = /**
         * Check each property of the instance and update any that have changed. Return
         * true if any changes were made, else return false.
         * @private
         * @param {?} instance
         * @return {?}
         */
            function (instance) {
                /** @type {?} */
                var changed = false;
                for (var prop in this.instances[instance.id]) {
                    if (instance[prop] !== this.instances[instance.id][prop]) {
                        this.instances[instance.id][prop] = instance[prop];
                        changed = true;
                    }
                }
                return changed;
            };
        /**
         * Returns the current page number.
         */
        /**
         * Returns the current page number.
         * @param {?} id
         * @return {?}
         */
        PaginationService.prototype.getCurrentPage = /**
         * Returns the current page number.
         * @param {?} id
         * @return {?}
         */
            function (id) {
                if (this.instances[id]) {
                    return this.instances[id].currentPage;
                }
            };
        /**
         * Sets the current page number.
         */
        /**
         * Sets the current page number.
         * @param {?} id
         * @param {?} page
         * @return {?}
         */
        PaginationService.prototype.setCurrentPage = /**
         * Sets the current page number.
         * @param {?} id
         * @param {?} page
         * @return {?}
         */
            function (id, page) {
                if (this.instances[id]) {
                    /** @type {?} */
                    var instance = this.instances[id];
                    /** @type {?} */
                    var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);
                    if (page <= maxPage && 1 <= page) {
                        this.instances[id].currentPage = page;
                        this.change.emit(id);
                    }
                }
            };
        /**
         * @param {?} id
         * @param {?} newList
         * @return {?}
         */
        PaginationService.prototype.setPageList = /**
         * @param {?} id
         * @param {?} newList
         * @return {?}
         */
            function (id, newList) {
                if (this.instances[id]) {
                    /** @type {?} */
                    var instance = this.instances[id];
                    instance.pageList = newList;
                    this.change.emit(id);
                }
            };
        /**
         * Sets the value of instance.totalItems
         */
        /**
         * Sets the value of instance.totalItems
         * @param {?} id
         * @param {?} totalItems
         * @return {?}
         */
        PaginationService.prototype.setTotalItems = /**
         * Sets the value of instance.totalItems
         * @param {?} id
         * @param {?} totalItems
         * @return {?}
         */
            function (id, totalItems) {
                if (this.instances[id] && 0 <= totalItems) {
                    this.instances[id].totalItems = totalItems;
                    this.change.emit(id);
                }
            };
        /**
         * Sets the value of instance.itemsPerPage.
         */
        /**
         * Sets the value of instance.itemsPerPage.
         * @param {?} id
         * @param {?} itemsPerPage
         * @return {?}
         */
        PaginationService.prototype.setItemsPerPage = /**
         * Sets the value of instance.itemsPerPage.
         * @param {?} id
         * @param {?} itemsPerPage
         * @return {?}
         */
            function (id, itemsPerPage) {
                if (this.instances[id]) {
                    this.instances[id].itemsPerPage = itemsPerPage;
                    this.change.emit(id);
                }
            };
        /**
         * Returns a clone of the pagination instance object matching the id. If no
         * id specified, returns the instance corresponding to the default id.
         */
        /**
         * Returns a clone of the pagination instance object matching the id. If no
         * id specified, returns the instance corresponding to the default id.
         * @param {?=} id
         * @return {?}
         */
        PaginationService.prototype.getInstance = /**
         * Returns a clone of the pagination instance object matching the id. If no
         * id specified, returns the instance corresponding to the default id.
         * @param {?=} id
         * @return {?}
         */
            function (id) {
                if (id === void 0) {
                    id = this.DEFAULT_ID;
                }
                if (this.instances[id]) {
                    return this.clone(this.instances[id]);
                }
                return ( /** @type {?} */({}));
            };
        /**
         * Perform a shallow clone of an object.
         */
        /**
         * Perform a shallow clone of an object.
         * @private
         * @param {?} obj
         * @return {?}
         */
        PaginationService.prototype.clone = /**
         * Perform a shallow clone of an object.
         * @private
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var target = {};
                for (var i in obj) {
                    if (obj.hasOwnProperty(i)) {
                        target[i] = obj[i];
                    }
                }
                return target;
            };
        PaginationService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ PaginationService.ngInjectableDef = i0.defineInjectable({ factory: function PaginationService_Factory() { return new PaginationService(); }, token: PaginationService, providedIn: "root" });
        return PaginationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LARGE_NUMBER = Number.MAX_SAFE_INTEGER;
    var PaginatePipe = /** @class */ (function () {
        function PaginatePipe(service) {
            this.service = service;
            // store the values from the last time the pipe was invoked
            this.state = {};
            if (!this.service) {
                this.service = new PaginationService();
            }
        }
        /**
         * @template T, U
         * @param {?} collection
         * @param {?} args
         * @return {?}
         */
        PaginatePipe.prototype.transform = /**
         * @template T, U
         * @param {?} collection
         * @param {?} args
         * @return {?}
         */
            function (collection, args) {
                // When an observable is passed through the AsyncPipe, it will output
                // `null` until the subscription resolves. In this case, we want to
                // use the cached data from the `state` object to prevent the NgFor
                // from flashing empty until the real values arrive.
                if (!(collection instanceof Array)) {
                    /** @type {?} */
                    var _id = args.id || this.service.defaultId();
                    if (this.state[_id]) {
                        return ( /** @type {?} */(this.state[_id].slice));
                    }
                    else {
                        return collection;
                    }
                }
                // const serverSideMode = args.totalItems && args.totalItems !== collection.length;
                /** @type {?} */
                var serverSideMode = args.remote;
                /** @type {?} */
                var instance = this.createInstance(collection, args);
                /** @type {?} */
                var id = instance.id;
                /** @type {?} */
                var start;
                /** @type {?} */
                var end;
                /** @type {?} */
                var perPage = instance.itemsPerPage;
                this.service.register(instance);
                if (!serverSideMode && collection instanceof Array) {
                    perPage = +perPage || LARGE_NUMBER;
                    start = (instance.currentPage - 1) * perPage;
                    end = start + perPage;
                    /** @type {?} */
                    var isIdentical = this.stateIsIdentical(id, collection, start, end);
                    if (isIdentical) {
                        return ( /** @type {?} */(this.state[id].slice));
                    }
                    else {
                        /** @type {?} */
                        var slice = collection.slice(start, end);
                        this.saveState(id, collection, slice, start, end);
                        this.service.change.emit(id);
                        return ( /** @type {?} */(slice));
                    }
                }
                // save the state for server-side collection to avoid null
                // flash as new data loads.
                this.saveState(id, collection, collection, start, end);
                return collection;
            };
        /**
         * Create an PaginationInstance object, using defaults for any optional properties not supplied.
         */
        /**
         * Create an PaginationInstance object, using defaults for any optional properties not supplied.
         * @private
         * @param {?} collection
         * @param {?} config
         * @return {?}
         */
        PaginatePipe.prototype.createInstance = /**
         * Create an PaginationInstance object, using defaults for any optional properties not supplied.
         * @private
         * @param {?} collection
         * @param {?} config
         * @return {?}
         */
            function (collection, config) {
                // this.checkConfig(config);
                return {
                    id: config.id != null ? config.id : this.service.defaultId(),
                    itemsPerPage: +config.itemsPerPage || 0,
                    currentPage: +config.currentPage || 1,
                    totalItems: +config.totalItems || collection.length,
                    pageList: config.pageList || [10, 20, 30, 50, 100],
                    remote: config.remote
                };
            };
        /**
         * Ensure the argument passed to the filter contains the required properties.
         */
        /**
         * Ensure the argument passed to the filter contains the required properties.
         * @private
         * @param {?} config
         * @return {?}
         */
        PaginatePipe.prototype.checkConfig = /**
         * Ensure the argument passed to the filter contains the required properties.
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var required = ['itemsPerPage', 'currentPage'];
                /** @type {?} */
                var missing = required.filter(( /**
                 * @param {?} prop
                 * @return {?}
                 */function (prop) { return !(prop in config); }));
                if (0 < missing.length) {
                    throw new Error("PaginatePipe: Argument is missing the following required properties: " + missing.join(', '));
                }
            };
        /**
         * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
         * array for a given id. This means that the next time the pipe is run on this collection & id, we just
         * need to check that the collection, start and end points are all identical, and if so, return the
         * last sliced array.
         */
        /**
         * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
         * array for a given id. This means that the next time the pipe is run on this collection & id, we just
         * need to check that the collection, start and end points are all identical, and if so, return the
         * last sliced array.
         * @private
         * @param {?} id
         * @param {?} collection
         * @param {?} slice
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
        PaginatePipe.prototype.saveState = /**
         * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
         * array for a given id. This means that the next time the pipe is run on this collection & id, we just
         * need to check that the collection, start and end points are all identical, and if so, return the
         * last sliced array.
         * @private
         * @param {?} id
         * @param {?} collection
         * @param {?} slice
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
            function (id, collection, slice, start, end) {
                this.state[id] = {
                    collection: collection,
                    size: collection.length,
                    slice: slice,
                    start: start,
                    end: end
                };
            };
        /**
         * For a given id, returns true if the collection, size, start and end values are identical.
         */
        /**
         * For a given id, returns true if the collection, size, start and end values are identical.
         * @private
         * @param {?} id
         * @param {?} collection
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
        PaginatePipe.prototype.stateIsIdentical = /**
         * For a given id, returns true if the collection, size, start and end values are identical.
         * @private
         * @param {?} id
         * @param {?} collection
         * @param {?} start
         * @param {?} end
         * @return {?}
         */
            function (id, collection, start, end) {
                /** @type {?} */
                var state = this.state[id];
                if (!state) {
                    return false;
                }
                /** @type {?} */
                var isMetaDataIdentical = state.size === collection.length &&
                    state.start === start &&
                    state.end === end;
                if (!isMetaDataIdentical) {
                    return false;
                }
                return state.slice.every(( /**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */function (element, index) { return element === collection[start + index]; }));
            };
        PaginatePipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'paginate',
                        pure: false
                    },] }
        ];
        /** @nocollapse */
        PaginatePipe.ctorParameters = function () {
            return [
                { type: PaginationService, decorators: [{ type: i0.Optional }] }
            ];
        };
        return PaginatePipe;
    }());

    /**
     * @param {?} input
     * @return {?}
     */
    function coerceToBoolean(input) {
        return !!input && input !== 'false';
    }
    // styleUrls: ['./pagination-controls.component.css'],
    /**
     * The default pagination controls component. Actually just a default implementation of a custom template.
     */
    //  #farris-gotopagenumber{ text-align: center;
    //     -moz-appearance: textfield;
    //     width: 40px;
    // }
    // #farris-gotopagenumber::-webkit-outer-spin-button,
    // #farris-gotopagenumber::-webkit-inner-spin-button {
    //     -webkit-appearance: none;
    // }
    var PaginationControlsComponent = /** @class */ (function () {
        function PaginationControlsComponent() {
            this._directionLinks = true;
            this._autoHide = false;
            this._responsive = false;
            this.mouseInSelectedList = false;
            /**
             * 显示模式， default 默认；simple: 简洁
             */
            this.viewMode = 'default';
            this.maxSize = 7;
            this.previousLabel = 'Previous';
            this.nextLabel = 'Next';
            this.screenReaderPaginationLabel = 'Pagination';
            this.screenReaderPageLabel = 'page';
            this.screenReaderCurrentLabel = "You're on page";
            this.showPageList = true;
            this.showPageInfo = true;
            this.showPageNumber = true;
            this.showSelectedList = false;
            this.showGoToLast = false;
            this.showGoToFirst = false;
            /**
             * 显示跳转至指定页码输入框
             */
            this.showGotoInput = false;
            this.position = 'right';
            /**
             * @deprecated
             */
            this.message = '每页 {0} 条记录，共 {1} 条记录';
            /**
             * @deprecated
             */
            this.pageListFirstText = '显示';
            /**
             * @deprecated
             */
            this.pageListLastText = '条';
            this.pageChange = new i0.EventEmitter();
            this.pageSizeChange = new i0.EventEmitter();
            this.showPagesPanel = false;
        }
        Object.defineProperty(PaginationControlsComponent.prototype, "directionLinks", {
            get: /**
             * @return {?}
             */ function () {
                return this._directionLinks;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._directionLinks = coerceToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationControlsComponent.prototype, "autoHide", {
            get: /**
             * @return {?}
             */ function () {
                return this._autoHide;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._autoHide = coerceToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationControlsComponent.prototype, "responsive", {
            get: /**
             * @return {?}
             */ function () {
                return this._responsive;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._responsive = coerceToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        // constructor(@Optional() private pagerService: PaginationService) {
        //     if (!this.pagerService) {
        //         this.pagerService = new PaginationService();
        //     }
        // }
        // constructor(@Optional() private pagerService: PaginationService) {
        //     if (!this.pagerService) {
        //         this.pagerService = new PaginationService();
        //     }
        // }
        /**
         * @param {?} $event
         * @return {?}
         */
        PaginationControlsComponent.prototype.onMouseLeave =
            // constructor(@Optional() private pagerService: PaginationService) {
            //     if (!this.pagerService) {
            //         this.pagerService = new PaginationService();
            //     }
            // }
            /**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                this.showPagesPanel = false;
                this.paginationDirective.changeDetectorRef.detectChanges();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PaginationControlsComponent.prototype.onMouseEnter = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.paginationDirective.getTotalItems() === 0) {
                    return;
                }
                this.showPagesPanel = true;
            };
        /**
         * @param {?} $event
         * @param {?} pagesize
         * @return {?}
         */
        PaginationControlsComponent.prototype.changePageSizeHandler = /**
         * @param {?} $event
         * @param {?} pagesize
         * @return {?}
         */
            function ($event, pagesize) {
                $event.stopPropagation();
                // 当前页再次点击
                if (pagesize === this.paginationDirective.getPageSize()) {
                    return;
                }
                this.showPagesPanel = false;
                // this.removeOverlay();
                this.pageSizeChange.emit(pagesize);
            };
        /**
         * @param {?} inputEl
         * @param {?} maxNumber
         * @return {?}
         */
        PaginationControlsComponent.prototype.onPageNumberChanged = /**
         * @param {?} inputEl
         * @param {?} maxNumber
         * @return {?}
         */
            function (inputEl, maxNumber) {
                /** @type {?} */
                var target = ( /** @type {?} */(inputEl.target));
                /** @type {?} */
                var currentPageNumber = Number(target.value);
                if (currentPageNumber > maxNumber) {
                    target.value = maxNumber;
                }
            };
        /**
         * @param {?} inputEl
         * @return {?}
         */
        PaginationControlsComponent.prototype.onPageNumberBlur = /**
         * @param {?} inputEl
         * @return {?}
         */
            function (inputEl) {
                /** @type {?} */
                var target = ( /** @type {?} */(inputEl.target));
                /** @type {?} */
                var currentPageNumber = Number(target.value);
                if (currentPageNumber < 1) {
                    target.value = 1;
                }
            };
        /**
         * @param {?} newpageList
         * @return {?}
         */
        PaginationControlsComponent.prototype.setPageList = /**
         * @param {?} newpageList
         * @return {?}
         */
            function (newpageList) {
                this.paginationDirective.setPageList(newpageList);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PaginationControlsComponent.prototype.goto = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var newpager = Number($event.target.value);
                if (newpager < 1) {
                    newpager = 1;
                    $event.target.value = 1;
                }
                if (this.paginationDirective.getCurrent() !== newpager) {
                    this.paginationDirective.goto(newpager);
                }
            };
        PaginationControlsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pagination-controls',
                        template: "<pagination-template #p=\"paginationApi\" [id]=\"id\" [maxSize]=\"maxSize\" (pageChange)=\"pageChange.emit($event)\">\r\n    <div class=\"pagination-container\">\r\n        <ng-content select=\".pager-overlay-container\"></ng-content>\r\n        <ul class=\"ngx-pagination pagination\" role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\"\r\n            style=\"position: relative;align-items: center;\" [class.responsive]=\"responsive\"\r\n            [class.pager-viewmode-default]=\"viewMode === 'default'\"\r\n            [class.pager-viewmode-simple]=\"viewMode === 'simple'\" *ngIf=\"!(autoHide && p.pages.length <= 1)\"\r\n            [style.justify-content]=\"position === 'center'?'center': 'start'\">\r\n            <ng-container *ngIf=\"viewMode === 'default'\">\r\n                <li class=\"pagination-message text-truncate d-flex\" *ngIf=\"showPageInfo\" style=\"min-width: 70px\"\r\n                    [class.ml-auto]=\"position=== 'right'\" [class.flex-fill]=\"position=== 'right'\"\r\n                    [style.justify-content]=\"position === 'right' ? 'right': ''\">\r\n                    <ng-content select=\".pager-pos-right\"></ng-content>\r\n                    <ng-content></ng-content>\r\n                    <div class=\"text-truncate \">\r\n                        <span class=\"pg-message-text\">{{ 'pagination.totalinfo.firstText' | locale}}</span>\r\n                        <b class=\"pg-message-total\">{{ p.getTotalItems()}}</b>\r\n                        <span class=\"pg-message-text\">{{ 'pagination.totalinfo.lastText' | locale}}</span>\r\n                    </div>\r\n                </li>\r\n                <!--\u6BCF\u9875\u8BB0\u5F55\u6570-->\r\n                <li class=\"pagination-pagelist\" *ngIf=\"showPageList\">\r\n                    <div class=\"dropup dropdown-right pg-pagelist\"\r\n                        [ngClass]=\"{'pagelist-disabled':p.getTotalItems()===0,'show': showPagesPanel}\"\r\n                        (mouseenter)=\"onMouseEnter($event)\" (mouseleave)=\"onMouseLeave($event)\">\r\n                        <div class=\"pg-pagelist-info\" #pglistinfo>\r\n                            <span class=\"pagelist-text\">{{'pagination.pagelist.firstText' | locale}}</span><b\r\n                                class=\"cur-pagesize\">{{p.getPageSize()}}</b><span\r\n                                class=\"pagelist-text\">{{'pagination.pagelist.lastText' | locale}}</span><i\r\n                                class=\"f-icon f-icon-dropdown\"></i>\r\n                        </div>\r\n                        <div class=\"dropdown-menu\" [ngClass]=\"{'show': showPagesPanel}\" style=\"margin-bottom: -1px;\">\r\n                <li class=\"dropdown-item\" [ngClass]=\"{'active':pagesize==p.getPageSize()}\"\r\n                    *ngFor=\"let pagesize of p.getPageList()\" (click)=\"changePageSizeHandler($event, pagesize)\">\r\n                    <span>{{ pagesize }}</span>\r\n                </li>\r\n    </div>\r\n    </div>\r\n    </li>\r\n\r\n    <!--\u9996\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\r\n        <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.first($event)\" (click)=\"p.first($event)\"\r\n            [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-first\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-first\"></span>\r\n        </span>\r\n    </li>\r\n\r\n    <!--\u4E0A\u4E00\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\r\n        <a class=\"page-link\" tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\"\r\n            [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\r\n            <span class=\"f-icon f-page-pre\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-pre\"></span>\r\n        </span>\r\n    </li>\r\n\r\n\r\n\r\n    <ng-container *ngIf=\"showPageNumber\">\r\n        <!--\u9875\u7801-->\r\n        <li class=\"page-item\" [class.current]=\"p.getCurrent() === page.value\" [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages\">\r\n            <a class=\"page-link\" tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\"\r\n                (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span>{{ page.label }}</span>\r\n            </a>\r\n            <span class=\"page-link\" *ngIf=\"p.getCurrent() === page.value\">{{page.label }}</span>\r\n        </li>\r\n    </ng-container>\r\n    <!--\u4E0B\u4E00\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n        <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\"\r\n            [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n            <span class=\"f-icon f-page-next\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-next\"></span>\r\n        </span>\r\n    </li>\r\n    <!--\u672B\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n        <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.last($event)\"\r\n            (click)=\"p.last($event)\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n            <span class=\"f-icon f-page-last\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-last\"></span>\r\n        </span>\r\n    </li>\r\n\r\n\r\n\r\n    <li class=\"page-goto-input d-flex flex-row\" *ngIf=\"showGotoInput\"\r\n        style=\"padding-left: 10px; white-space: nowrap;align-items: center;\">\r\n        {{'pagination.goto.prefix' | locale}}\r\n\r\n        <div style=\"min-width: 40px;position: relative;height: 24px;margin: 0 3px;\">\r\n            <label style=\"display: inline-block;font-size: inherit;line-height: normal;visibility: hidden;font-family: inherit;\r\n            padding: 0;\">{{gotoinput.value}}</label>\r\n            <input #gotoinput class=\"form-control farris-gotopagenumber\" value=\"1\" type=\"number\" min=\"1\"\r\n                max=\"{{p.getLastPage()}}\"\r\n                style=\"width: 100%;position: absolute;left: 0;top: 0;padding: 0;height: 100%;line-height: 24px;\"\r\n                (input)=\"onPageNumberChanged($event, p.getLastPage())\" [value]=\"p.getCurrent()\"\r\n                (keyup.enter)=\"goto($event)\" (blur)=\"onPageNumberBlur($event)\">\r\n        </div>\r\n\r\n\r\n        {{'pagination.goto.suffix' | locale}}\r\n    </li>\r\n\r\n    <li class=\"pagination-message text-truncate d-flex flex-fill ml-3\" *ngIf=\"showPageInfo && position==='left'\">\r\n        <ng-content select=\".pager-pos-left\"></ng-content>\r\n    </li>\r\n\r\n    </ng-container>\r\n    <ng-container *ngIf=\"viewMode === 'simple'\">\r\n        <li class=\"page-item d-flex flex-fill\">\r\n            <ng-content select=\".simple-pager-extend-area\"></ng-content>\r\n        </li>\r\n        <!--\u9996\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks && showGoToFirst\">\r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.first($event)\" (click)=\"p.first($event)\"\r\n                [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\" class=\"page-link\">\r\n                <span class=\"f-icon f-page-first\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\r\n                <span class=\"f-icon f-page-first\"></span>\r\n            </span>\r\n        </li>\r\n        <!--\u4E0A\u4E00\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\r\n            <a class=\"page-link border-0\" tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\"\r\n                (click)=\"p.previous()\" [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\r\n                <span class=\"f-icon f-page-pre\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" class=\"page-link border-0\">\r\n                <span class=\"f-icon f-page-pre\"></span>\r\n            </span>\r\n        </li>\r\n\r\n        <li class=\"page-item\">\r\n            <input id=\"farris-gotopagenumber\" class=\"form-control farris-gotopagenumber\" min=\"1\"\r\n                max=\"{{p.getLastPage()}}\" type=\"number\" [ngModel]=\"p.getCurrent()\"\r\n                (input)=\"onPageNumberChanged($event, p.getLastPage())\" (keyup.enter)=\"p.goto($event.target.value)\">\r\n        </li>\r\n        <li class=\"page-item page-separator\" style=\"margin-left: 10px\">\r\n            <span style=\"font-size: 15px; font-weight: 200;\"> /</span>\r\n        </li>\r\n        <li class=\"page-item page-total\" style=\"margin-left: 5px\">\r\n            <span style=\"font-size: 16px; font-weight: 600;\"> {{ p.getLastPage() }}</span>\r\n        </li>\r\n\r\n        <!--\u4E0B\u4E00\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a class=\"page-link border-0\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\"\r\n                (click)=\"p.next()\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n                <span class=\"f-icon f-page-next\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" class=\"page-link border-0\">\r\n                <span class=\"f-icon f-page-next\"></span>\r\n            </span>\r\n        </li>\r\n        <!--\u672B\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks  && showGoToLast\">\r\n            <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.last($event)\"\r\n                (click)=\"p.last($event)\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n                <span class=\"f-icon f-page-last\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\r\n                <span class=\"f-icon f-page-last\"></span>\r\n            </span>\r\n        </li>\r\n    </ng-container>\r\n\r\n    </ul>\r\n    </div>\r\n</pagination-template>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None
                    }] }
        ];
        PaginationControlsComponent.propDecorators = {
            viewMode: [{ type: i0.Input }],
            id: [{ type: i0.Input }],
            maxSize: [{ type: i0.Input }],
            directionLinks: [{ type: i0.Input }],
            autoHide: [{ type: i0.Input }],
            responsive: [{ type: i0.Input }],
            previousLabel: [{ type: i0.Input }],
            nextLabel: [{ type: i0.Input }],
            screenReaderPaginationLabel: [{ type: i0.Input }],
            screenReaderPageLabel: [{ type: i0.Input }],
            screenReaderCurrentLabel: [{ type: i0.Input }],
            showPageList: [{ type: i0.Input }],
            showPageInfo: [{ type: i0.Input }],
            showPageNumber: [{ type: i0.Input }],
            showSelectedList: [{ type: i0.Input }],
            showGoToLast: [{ type: i0.Input }],
            showGoToFirst: [{ type: i0.Input }],
            showGotoInput: [{ type: i0.Input }],
            position: [{ type: i0.Input }],
            message: [{ type: i0.Input }],
            pageListFirstText: [{ type: i0.Input }],
            pageListLastText: [{ type: i0.Input }],
            pageChange: [{ type: i0.Output }],
            pageSizeChange: [{ type: i0.Output }],
            paginationDirective: [{ type: i0.ViewChild, args: ['p',] }],
            focusPageSizeRef: [{ type: i0.ViewChild, args: ['focusPageSize',] }],
            pglistinfo: [{ type: i0.ViewChild, args: ['pglistinfo',] }]
        };
        return PaginationControlsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * This directive is what powers all pagination controls components, including the default one.
     * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
     * with the pagination controls.
     */
    var PaginationControlsDirective = /** @class */ (function () {
        function PaginationControlsDirective(service, changeDetectorRef, injector) {
            var _this = this;
            this.service = service;
            this.changeDetectorRef = changeDetectorRef;
            this.injector = injector;
            this.maxSize = 7;
            this.pageChange = new i0.EventEmitter();
            this.pageSizeChange = new i0.EventEmitter();
            this.pages = [];
            if (!this.service) {
                if (this.injector) {
                    this.service = this.injector.get(PaginationService);
                }
                else {
                    this.service = new PaginationService();
                }
            }
            this.changeSub = this.service.change.subscribe(( /**
             * @param {?} id
             * @return {?}
             */function (id) {
                if (_this.id === id) {
                    _this.updatePageLinks();
                    _this.changeDetectorRef.markForCheck();
                    _this.changeDetectorRef.detectChanges();
                }
            }));
        }
        /**
         * @return {?}
         */
        PaginationControlsDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.id === undefined) {
                    this.id = this.service.defaultId();
                }
                this.updatePageLinks();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        PaginationControlsDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.updatePageLinks();
            };
        /**
         * @return {?}
         */
        PaginationControlsDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.changeSub.unsubscribe();
                this.service.removeInstance(this.id);
            };
        /**
         * Go to the previous page
         */
        /**
         * Go to the previous page
         * @return {?}
         */
        PaginationControlsDirective.prototype.previous = /**
         * Go to the previous page
         * @return {?}
         */
            function () {
                this.checkValidId();
                this.setCurrent(this.getCurrent() - 1);
            };
        /**
         * Go to the next page
         */
        /**
         * Go to the next page
         * @return {?}
         */
        PaginationControlsDirective.prototype.next = /**
         * Go to the next page
         * @return {?}
         */
            function () {
                this.checkValidId();
                this.setCurrent(this.getCurrent() + 1);
            };
        /**
         * lucas added 2019/07/02
         * Go to the first page
         */
        /**
         * lucas added 2019/07/02
         * Go to the first page
         * @param {?} $event
         * @return {?}
         */
        PaginationControlsDirective.prototype.first = /**
         * lucas added 2019/07/02
         * Go to the first page
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                this.checkValidId();
                this.setCurrent(1);
            };
        /**
         * lucas added 2019/07/02
         * Go to the last page
         */
        /**
         * lucas added 2019/07/02
         * Go to the last page
         * @param {?} $event
         * @return {?}
         */
        PaginationControlsDirective.prototype.last = /**
         * lucas added 2019/07/02
         * Go to the last page
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                this.checkValidId();
                this.setCurrent(this.getLastPage());
            };
        /**
         * Returns true if current page is first page
         */
        /**
         * Returns true if current page is first page
         * @return {?}
         */
        PaginationControlsDirective.prototype.isFirstPage = /**
         * Returns true if current page is first page
         * @return {?}
         */
            function () {
                return this.getCurrent() === 1;
            };
        /**
         * Returns true if current page is last page
         */
        /**
         * Returns true if current page is last page
         * @return {?}
         */
        PaginationControlsDirective.prototype.isLastPage = /**
         * Returns true if current page is last page
         * @return {?}
         */
            function () {
                return this.getLastPage() === this.getCurrent();
            };
        /**
         * Set the current page number.
         */
        /**
         * Set the current page number.
         * @param {?} page
         * @param {?=} pageSize
         * @param {?=} $event
         * @return {?}
         */
        PaginationControlsDirective.prototype.setCurrent = /**
         * Set the current page number.
         * @param {?} page
         * @param {?=} pageSize
         * @param {?=} $event
         * @return {?}
         */
            function (page, pageSize, $event) {
                if ($event) {
                    $event.stopPropagation();
                }
                if (!pageSize) {
                    pageSize = this.getPageSize();
                }
                this.pageChange.emit({ pageIndex: page, pageSize: pageSize });
            };
        /**
         * Get the current page number.
         */
        /**
         * Get the current page number.
         * @return {?}
         */
        PaginationControlsDirective.prototype.getCurrent = /**
         * Get the current page number.
         * @return {?}
         */
            function () {
                return this.service.getCurrentPage(this.id);
            };
        /**
         * @param {?} pageList
         * @return {?}
         */
        PaginationControlsDirective.prototype.setPageList = /**
         * @param {?} pageList
         * @return {?}
         */
            function (pageList) {
                this.service.setPageList(this.id, pageList);
            };
        /**
         * Returns the last page number
         */
        /**
         * Returns the last page number
         * @return {?}
         */
        PaginationControlsDirective.prototype.getLastPage = /**
         * Returns the last page number
         * @return {?}
         */
            function () {
                /** @type {?} */
                var inst = this.service.getInstance(this.id);
                if (inst.totalItems < 1) {
                    // when there are 0 or fewer (an error case) items, there are no "pages" as such,
                    // but it makes sense to consider a single, empty page as the last page.
                    return 1;
                }
                return Math.ceil(inst.totalItems / inst.itemsPerPage);
            };
        /**
         * @return {?}
         */
        PaginationControlsDirective.prototype.getTotalItems = /**
         * @return {?}
         */
            function () {
                return this.service.getInstance(this.id).totalItems;
            };
        /**
         * @return {?}
         */
        PaginationControlsDirective.prototype.getPageList = /**
         * @return {?}
         */
            function () {
                return this.service.getInstance(this.id).pageList;
            };
        /**
         * @return {?}
         */
        PaginationControlsDirective.prototype.getPageSize = /**
         * @return {?}
         */
            function () {
                return this.service.getInstance(this.id).itemsPerPage;
            };
        /**
         * @param {?} pager
         * @return {?}
         */
        PaginationControlsDirective.prototype.goto = /**
         * @param {?} pager
         * @return {?}
         */
            function (pager) {
                // alert(pager);
                this.setCurrent(pager);
            };
        /**
         * @private
         * @return {?}
         */
        PaginationControlsDirective.prototype.checkValidId = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.service.getInstance(this.id).id == null) {
                    console.warn("PaginationControlsDirective: the specified id \"" + this.id + "\" does not match any registered PaginationInstance");
                }
            };
        /**
         * Updates the page links and checks that the current page is valid. Should run whenever the
         * PaginationService.change stream emits a value matching the current ID, or when any of the
         * input values changes.
         */
        /**
         * Updates the page links and checks that the current page is valid. Should run whenever the
         * PaginationService.change stream emits a value matching the current ID, or when any of the
         * input values changes.
         * @private
         * @return {?}
         */
        PaginationControlsDirective.prototype.updatePageLinks = /**
         * Updates the page links and checks that the current page is valid. Should run whenever the
         * PaginationService.change stream emits a value matching the current ID, or when any of the
         * input values changes.
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var inst = this.service.getInstance(this.id);
                /** @type {?} */
                var correctedCurrentPage = this.outOfBoundCorrection(inst);
                if (correctedCurrentPage !== inst.currentPage) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.setCurrent(correctedCurrentPage);
                        _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);
                    }));
                }
                else {
                    this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
                }
                this.changeDetectorRef.markForCheck();
                this.changeDetectorRef.detectChanges();
            };
        /**
         * Checks that the instance.currentPage property is within bounds for the current page range.
         * If not, return a correct value for currentPage, or the current value if OK.
         */
        /**
         * Checks that the instance.currentPage property is within bounds for the current page range.
         * If not, return a correct value for currentPage, or the current value if OK.
         * @private
         * @param {?} instance
         * @return {?}
         */
        PaginationControlsDirective.prototype.outOfBoundCorrection = /**
         * Checks that the instance.currentPage property is within bounds for the current page range.
         * If not, return a correct value for currentPage, or the current value if OK.
         * @private
         * @param {?} instance
         * @return {?}
         */
            function (instance) {
                /** @type {?} */
                var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
                if (totalPages < instance.currentPage && 0 < totalPages) {
                    return totalPages;
                }
                else if (instance.currentPage < 1) {
                    return 1;
                }
                return instance.currentPage;
            };
        /**
         * Returns an array of Page objects to use in the pagination controls.
         */
        /**
         * Returns an array of Page objects to use in the pagination controls.
         * @private
         * @param {?} currentPage
         * @param {?} itemsPerPage
         * @param {?} totalItems
         * @param {?} paginationRange
         * @return {?}
         */
        PaginationControlsDirective.prototype.createPageArray = /**
         * Returns an array of Page objects to use in the pagination controls.
         * @private
         * @param {?} currentPage
         * @param {?} itemsPerPage
         * @param {?} totalItems
         * @param {?} paginationRange
         * @return {?}
         */
            function (currentPage, itemsPerPage, totalItems, paginationRange) {
                // paginationRange could be a string if passed from attribute, so cast to number.
                paginationRange = +paginationRange;
                /** @type {?} */
                var pages = [];
                /** @type {?} */
                var totalPages = Math.ceil(totalItems / itemsPerPage);
                /** @type {?} */
                var halfWay = Math.ceil(paginationRange / 2);
                /** @type {?} */
                var isStart = currentPage <= halfWay;
                /** @type {?} */
                var isEnd = totalPages - halfWay < currentPage;
                /** @type {?} */
                var isMiddle = !isStart && !isEnd;
                /** @type {?} */
                var ellipsesNeeded = paginationRange < totalPages;
                /** @type {?} */
                var i = 1;
                while (i <= totalPages && i <= paginationRange) {
                    /** @type {?} */
                    var label = void 0;
                    /** @type {?} */
                    var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
                    /** @type {?} */
                    var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));
                    /** @type {?} */
                    var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));
                    if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                        label = '...';
                    }
                    else {
                        label = pageNumber;
                    }
                    pages.push({
                        label: label,
                        value: pageNumber
                    });
                    i++;
                }
                return pages;
            };
        /**
         * Given the position in the sequence of pagination links [i],
         * figure out what page number corresponds to that position.
         */
        /**
         * Given the position in the sequence of pagination links [i],
         * figure out what page number corresponds to that position.
         * @private
         * @param {?} i
         * @param {?} currentPage
         * @param {?} paginationRange
         * @param {?} totalPages
         * @return {?}
         */
        PaginationControlsDirective.prototype.calculatePageNumber = /**
         * Given the position in the sequence of pagination links [i],
         * figure out what page number corresponds to that position.
         * @private
         * @param {?} i
         * @param {?} currentPage
         * @param {?} paginationRange
         * @param {?} totalPages
         * @return {?}
         */
            function (i, currentPage, paginationRange, totalPages) {
                /** @type {?} */
                var halfWay = Math.ceil(paginationRange / 2);
                if (i === paginationRange) {
                    return totalPages;
                }
                else if (i === 1) {
                    return i;
                }
                else if (paginationRange < totalPages) {
                    if (totalPages - halfWay < currentPage) {
                        return totalPages - paginationRange + i;
                    }
                    else if (halfWay < currentPage) {
                        return currentPage - halfWay + i;
                    }
                    else {
                        return i;
                    }
                }
                else {
                    return i;
                }
            };
        PaginationControlsDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'pagination-template,[pagination-template]',
                        exportAs: 'paginationApi'
                    },] }
        ];
        /** @nocollapse */
        PaginationControlsDirective.ctorParameters = function () {
            return [
                { type: PaginationService, decorators: [{ type: i0.Optional }] },
                { type: i0.ChangeDetectorRef },
                { type: i0.Injector, decorators: [{ type: i0.Optional }] }
            ];
        };
        PaginationControlsDirective.propDecorators = {
            id: [{ type: i0.Input }],
            maxSize: [{ type: i0.Input }],
            pageChange: [{ type: i0.Output }],
            pageSizeChange: [{ type: i0.Output }]
        };
        return PaginationControlsDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PaginationSelectedListComponent = /** @class */ (function () {
        function PaginationSelectedListComponent() {
            this.data = [];
            //位置，决定是否翻转
            this.position = "bottom";
            this.close = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.clear = new i0.EventEmitter();
        }
        Object.defineProperty(PaginationSelectedListComponent.prototype, "slPosition", {
            get: /**
             * @return {?}
             */ function () { return this.position == 'top'; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        PaginationSelectedListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        PaginationSelectedListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PaginationSelectedListComponent.prototype.onClose = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                this.close.emit();
            };
        /**
         * @param {?} $event
         * @param {?} id
         * @return {?}
         */
        PaginationSelectedListComponent.prototype.onRemoveClick = /**
         * @param {?} $event
         * @param {?} id
         * @return {?}
         */
            function ($event, id) {
                $event.stopPropagation();
                this.remove.emit(id);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PaginationSelectedListComponent.prototype.onClearClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                this.clear.emit();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        PaginationSelectedListComponent.prototype.onClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                return false;
            };
        PaginationSelectedListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pagination-selected-list',
                        template: "\r\n<div class=\"f-cmp-pager-selected-list-wrapper \">\r\n\t<div class=\"selected-list--content\" (mouseleave)=\"onClose($event)\" (click)=\"onClick($event)\">\r\n\t\t<div class=\"selected-list--arrow\"></div>\r\n\t\t<div class=\"selected-list--title\">\r\n            <div class=\"btn-group\">\r\n                <button class=\"btn btn-link\" (click)=\"onClearClick($event)\"> \r\n                    <i class=\"f-icon f-icon-remove\"></i>\r\n                    <span class=\"btn-text\">{{ 'datagrid.selectionData.clearAll' | locale: '\u6E05\u7A7A' }}</span>\r\n                </button>\r\n            </div>\r\n            <div class=\"selected-list--close\"><span class=\"f-icon f-icon-close\" (click)=\"onClose($event)\"></span></div>\r\n        </div>\r\n        <div class=\"selected-list--main\">\r\n            <ul class=\"selected-list\">  <!-- selected-list--wrap -->\r\n                <li class=\"selected-list--item ng-star-inserted\" *ngFor=\"let item of data\" style=\"min-height: 35px;\">\r\n\t\t\t\t\t<span class=\"f-icon f-icon-close-outline list-icon list-error\" (click)=\"onRemoveClick($event, item.id)\"></span>\r\n                    <div class=\"list-con\" [innerHTML]=\"item.text\"></div>\r\n                </li>\r\n                \r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n"
                    }] }
        ];
        /** @nocollapse */
        PaginationSelectedListComponent.ctorParameters = function () { return []; };
        PaginationSelectedListComponent.propDecorators = {
            data: [{ type: i0.Input }],
            position: [{ type: i0.Input }],
            close: [{ type: i0.Output }],
            remove: [{ type: i0.Output }],
            clear: [{ type: i0.Output }],
            slPosition: [{ type: i0.HostBinding, args: ['class.pos-top',] }]
        };
        return PaginationSelectedListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PaginationModule = /** @class */ (function () {
        function PaginationModule() {
        }
        PaginationModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiCommon.FarrisCommonModule.forRoot(),
                            uiLocale.LocaleModule
                        ],
                        declarations: [
                            PaginatePipe,
                            PaginationControlsComponent,
                            PaginationControlsDirective,
                            PaginationSelectedListComponent
                        ],
                        providers: [PaginationService],
                        exports: [
                            PaginatePipe,
                            PaginationControlsComponent,
                            PaginationControlsDirective,
                            PaginationSelectedListComponent
                        ]
                    },] }
        ];
        return PaginationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.PaginationService = PaginationService;
    exports.PaginationControlsComponent = PaginationControlsComponent;
    exports.PaginationControlsDirective = PaginationControlsDirective;
    exports.PaginatePipe = PaginatePipe;
    exports.PaginationModule = PaginationModule;
    exports.PaginationSelectedListComponent = PaginationSelectedListComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-pagination.umd.js.map