{"version":3,"file":"farris-ui-pagination.umd.js.map","sources":["ng://@farris/ui-pagination/lib/pagination.service.ts","ng://@farris/ui-pagination/lib/paginate.pipe.ts","ng://@farris/ui-pagination/lib/pagination-controls.component.ts","ng://@farris/ui-pagination/lib/pagination-controls.directive.ts","ng://@farris/ui-pagination/lib/selected-list/selected-list.component.ts","ng://@farris/ui-pagination/lib/pagination.module.ts"],"sourcesContent":["import { IdService } from '@farris/ui-common';\r\nimport {EventEmitter, Injectable} from '@angular/core';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PaginationService {\r\n\r\n    public change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    private instances: { [id: string]: PaginationInstance } = {};\r\n    private DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n\r\n    public defaultId(): string {\r\n        return this.DEFAULT_ID + new IdService().uuid();\r\n    }\r\n\r\n    removeInstance(id: string) {\r\n        if (this.instances[id]) {\r\n            this.instances[id] = null;\r\n            delete this.instances[id];\r\n        }\r\n    }\r\n\r\n    public register(instance: PaginationInstance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        } else {\r\n            const changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    private updateInstance(instance: PaginationInstance): boolean {\r\n        let changed = false;\r\n        for (const prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    public getCurrentPage(id: string): number {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    public setCurrentPage(id: string, page: number) {\r\n        if (this.instances[id]) {\r\n            const instance = this.instances[id];\r\n            const maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setPageList(id: string, newList: number[]) {\r\n        if (this.instances[id]) {\r\n            const instance = this.instances[id];\r\n            instance.pageList = newList;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    public setTotalItems(id: string, totalItems: number) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    public setItemsPerPage(id: string, itemsPerPage: number) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    public getInstance(id: string = this.DEFAULT_ID): PaginationInstance {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {} as PaginationInstance;\r\n    }\r\n\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    private clone(obj: any): any {\r\n        const target = {};\r\n        for (const i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n}\r\n","import { Optional, Pipe, PipeTransform } from '@angular/core';\r\nimport { PaginationService } from './pagination.service';\r\nimport { PaginationInstance } from './pagination-instance';\r\n\r\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\n\r\nexport type Collection<T> = T[] | ReadonlyArray<T>;\r\n\r\nexport interface PaginatePipeArgs {\r\n    id?: string;\r\n    itemsPerPage?: string | number;\r\n    currentPage?: string | number;\r\n    totalItems?: string | number;\r\n    pageList?: number[];\r\n    remote?: boolean;\r\n}\r\n\r\nexport interface PipeState {\r\n    collection: any[];\r\n    size: number;\r\n    start: number;\r\n    end: number;\r\n    slice: any[];\r\n}\r\n\r\n@Pipe({\r\n    name: 'paginate',\r\n    pure: false\r\n})\r\nexport class PaginatePipe implements PipeTransform {\r\n\r\n    // store the values from the last time the pipe was invoked\r\n    private state: { [id: string]: PipeState } = {};\r\n\r\n    constructor(@Optional() private service: PaginationService) {\r\n        if (!this.service) {\r\n            this.service = new PaginationService();\r\n        }\r\n    }\r\n\r\n    public transform<T, U extends Collection<T>>(collection: U, args: PaginatePipeArgs): U {\r\n\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n\r\n\r\n\r\n        if (!(collection instanceof Array)) {\r\n            const _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice as U;\r\n            } else {\r\n                return collection;\r\n            }\r\n        }\r\n\r\n        // const serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        const serverSideMode = args.remote;\r\n        const instance = this.createInstance(collection, args);\r\n        const id = instance.id;\r\n        let start: number;\r\n        let end: number;\r\n        let perPage = instance.itemsPerPage;\r\n\r\n        this.service.register(instance);\r\n\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n\r\n            const isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice as U;\r\n            } else {\r\n                const slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice as U;\r\n            }\r\n        }\r\n\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    }\r\n\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    private createInstance(collection: any[], config: PaginatePipeArgs): PaginationInstance {\r\n        // this.checkConfig(config);\r\n\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length,\r\n            pageList: config.pageList || [10, 20, 30, 50, 100],\r\n            remote: config.remote\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    private checkConfig(config: PaginatePipeArgs): void {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    private saveState(id: string, collection: any[], slice: any[], start: number, end: number) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    private stateIsIdentical(id: string, collection: any[], start: number, end: number): boolean {\r\n        const state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        const isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\n","import { PaginationService } from './pagination.service';\r\nimport { PaginationControlsDirective } from './pagination-controls.directive';\r\nimport {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, ElementRef, Optional} from '@angular/core';\r\n\r\nfunction coerceToBoolean(input: string | boolean): boolean {\r\n    return !!input && input !== 'false';\r\n}\r\n\r\n// styleUrls: ['./pagination-controls.component.css'],\r\n\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\n\r\n//  #farris-gotopagenumber{ text-align: center;\r\n//     -moz-appearance: textfield;\r\n//     width: 40px;\r\n// }\r\n// #farris-gotopagenumber::-webkit-outer-spin-button,\r\n// #farris-gotopagenumber::-webkit-inner-spin-button {\r\n//     -webkit-appearance: none;\r\n// }\r\n@Component({\r\n    selector: 'pagination-controls',\r\n    templateUrl: './pagination-controls.component.html',\r\n    styles: [],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PaginationControlsComponent {\r\n\r\n    private _directionLinks = true;\r\n    private _autoHide = false;\r\n    private _responsive = false;\r\n\r\n    private mouseInSelectedList = false;\r\n\r\n    /** æ¾ç¤ºæ¨¡å¼ï¼ default é»è®¤ï¼simple: ç®æ´ */\r\n    @Input() viewMode = 'default';\r\n\r\n    @Input() id: string;\r\n    @Input() maxSize = 7;\r\n    @Input()\r\n    get directionLinks(): boolean {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value: boolean) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get autoHide(): boolean {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value: boolean) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get responsive(): boolean {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value: boolean) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    @Input() previousLabel = 'Previous';\r\n    @Input() nextLabel = 'Next';\r\n    @Input() screenReaderPaginationLabel = 'Pagination';\r\n    @Input() screenReaderPageLabel = 'page';\r\n    @Input() screenReaderCurrentLabel = `You're on page`;\r\n    @Input() showPageList = true;\r\n    @Input() showPageInfo = true;\r\n    @Input() showPageNumber = true;\r\n\r\n    @Input() showSelectedList = false;\r\n\r\n    @Input() showGoToLast = false;\r\n    @Input() showGoToFirst = false;\r\n\r\n    /** æ¾ç¤ºè·³è½¬è³æå®é¡µç è¾å¥æ¡ */\r\n    @Input() showGotoInput = false;\r\n\r\n    @Input() position: 'left'|'center'|'right' = 'right';\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    @Input() message = 'æ¯é¡µ {0} æ¡è®°å½ï¼å± {1} æ¡è®°å½';\r\n    /**\r\n     * @deprecated\r\n     */\r\n    @Input() pageListFirstText = 'æ¾ç¤º';\r\n    /**\r\n     * @deprecated\r\n     */\r\n    @Input() pageListLastText = 'æ¡';\r\n\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() pageSizeChange = new EventEmitter<number>();\r\n    @ViewChild('p') paginationDirective: PaginationControlsDirective;\r\n\r\n    @ViewChild('focusPageSize') focusPageSizeRef: ElementRef<any>;\r\n    @ViewChild('pglistinfo') pglistinfo: ElementRef<any>;\r\n    showPagesPanel = false;\r\n\r\n    // constructor(@Optional() private pagerService: PaginationService) {\r\n    //     if (!this.pagerService) {\r\n    //         this.pagerService = new PaginationService();\r\n    //     }\r\n    // }\r\n\r\n    onMouseLeave($event) {\r\n        this.showPagesPanel = false;\r\n        this.paginationDirective.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    onMouseEnter($event: MouseEvent) {\r\n        if (this.paginationDirective.getTotalItems() === 0) {\r\n            return;\r\n        }\r\n        this.showPagesPanel = true;\r\n    }\r\n\r\n    changePageSizeHandler($event, pagesize) {\r\n        $event.stopPropagation();\r\n        // å½åé¡µåæ¬¡ç¹å»\r\n        if (pagesize === this.paginationDirective.getPageSize()) {\r\n            return;\r\n        }\r\n        this.showPagesPanel = false;\r\n        // this.removeOverlay();\r\n        this.pageSizeChange.emit(pagesize);\r\n    }\r\n\r\n    onPageNumberChanged(inputEl: KeyboardEvent, maxNumber) {\r\n        const target = inputEl.target as any;\r\n        const currentPageNumber = Number(target.value);\r\n        if (currentPageNumber > maxNumber) {\r\n            target.value = maxNumber;\r\n        } else {\r\n            // if (currentPageNumber < 1) {\r\n            //     target.value = 1;\r\n            // }\r\n        }\r\n    }\r\n\r\n    onPageNumberBlur(inputEl: any) {\r\n        const target = inputEl.target as any;\r\n        const currentPageNumber = Number(target.value);\r\n        if (currentPageNumber < 1) {\r\n            target.value = 1;\r\n        }\r\n    }\r\n\r\n    setPageList(newpageList: number[]) {\r\n        this.paginationDirective.setPageList(newpageList);\r\n    }\r\n\r\n    goto($event) {\r\n        let newpager = Number($event.target.value);\r\n        if (newpager < 1) {\r\n            newpager = 1;\r\n            $event.target.value = 1;\r\n        }\r\n\r\n        if (this.paginationDirective.getCurrent() !== newpager) {\r\n            this.paginationDirective.goto(newpager);\r\n        }\r\n    }\r\n\r\n}\r\n","import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, OnInit, OnChanges, OnDestroy, Optional, Injector } from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\n\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport interface Page {\r\n    label: string;\r\n    value: any;\r\n}\r\n\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\n@Directive({\r\n    selector: 'pagination-template,[pagination-template]',\r\n    exportAs: 'paginationApi'\r\n})\r\nexport class PaginationControlsDirective implements OnInit, OnChanges, OnDestroy {\r\n    @Input() id: string;\r\n    @Input() maxSize = 7;\r\n    @Output() pageChange: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() pageSizeChange = new EventEmitter<number>();\r\n    pages: Page[] = [];\r\n\r\n\r\n    private changeSub: Subscription;\r\n\r\n    constructor(@Optional() private service: PaginationService,\r\n                public changeDetectorRef: ChangeDetectorRef, @Optional() private injector: Injector) {\r\n\r\n        if (!this.service) {\r\n            if (this.injector) {\r\n                this.service = this.injector.get(PaginationService);\r\n            } else {\r\n                this.service = new PaginationService();\r\n            }\r\n        }\r\n\r\n        this.changeSub = this.service.change.subscribe(id => {\r\n            if (this.id === id) {\r\n                this.updatePageLinks();\r\n                this.changeDetectorRef.markForCheck();\r\n                this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnChanges(changes: any) {\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n        this.service.removeInstance(this.id);\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * lucas added 2019/07/02\r\n     * Go to the first page\r\n     */\r\n    first($event: any) {\r\n        $event.stopPropagation();\r\n        this.checkValidId();\r\n        this.setCurrent( 1);\r\n    }\r\n    /**\r\n     * lucas added 2019/07/02\r\n     * Go to the last page\r\n     */\r\n    last($event: any) {\r\n        $event.stopPropagation();\r\n        this.checkValidId();\r\n        this.setCurrent(this.getLastPage());\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage(): boolean {\r\n        return this.getCurrent() === 1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage(): boolean {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page: number, pageSize?: number, $event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        if (!pageSize) {\r\n            pageSize =  this.getPageSize();\r\n        }\r\n\r\n        this.pageChange.emit({ pageIndex: page, pageSize});\r\n    }\r\n\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent(): number {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n\r\n\r\n    setPageList(pageList: number[]) {\r\n        this.service.setPageList(this.id, pageList);\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage(): number {\r\n        const inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n\r\n    getTotalItems(): number {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n\r\n    getPageList() {\r\n        return this.service.getInstance(this.id).pageList;\r\n    }\r\n\r\n    getPageSize() {\r\n        return this.service.getInstance(this.id).itemsPerPage;\r\n    }\r\n\r\n    goto(pager: number) {\r\n        // alert(pager);\r\n        this.setCurrent(pager);\r\n    }\r\n\r\n    private checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    private updatePageLinks() {\r\n        const inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.setCurrent(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        } else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n\r\n        this.changeDetectorRef.markForCheck();\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    private outOfBoundCorrection(instance: PaginationInstance): number {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        } else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n\r\n        return instance.currentPage;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    private createPageArray(currentPage: number, itemsPerPage: number, totalItems: number, paginationRange: number): Page[] {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        const pages = [];\r\n        const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n\r\n        const ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            const pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            const openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            const closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            } else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label,\r\n                value: pageNumber\r\n            });\r\n            i ++;\r\n        }\r\n        return pages;\r\n    }\r\n\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    private calculatePageNumber(i: number, currentPage: number, paginationRange: number, totalPages: number) {\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        } else if (i === 1) {\r\n            return i;\r\n        } else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            } else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            } else {\r\n                return i;\r\n            }\r\n        } else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n","import { debounce } from 'rxjs/operators';\r\nimport { Component, OnInit, EventEmitter, Output, Input, OnChanges, SimpleChanges, HostBinding } from '@angular/core';\r\nimport { interval } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'pagination-selected-list',\r\n    templateUrl: './selected-list.component.html',\r\n})\r\nexport class PaginationSelectedListComponent implements OnInit, OnChanges {\r\n\r\n    @Input() data = [];\r\n    //ä½ç½®ï¼å³å®æ¯å¦ç¿»è½¬\r\n    @Input() position=\"bottom\";\r\n    @Output() close = new EventEmitter();\r\n    @Output() remove = new EventEmitter();\r\n    @Output() clear = new EventEmitter();\r\n    @HostBinding('class.pos-top') get slPosition() { return this.position=='top'; }\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n    }\r\n\r\n    onClose($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.close.emit();\r\n    }\r\n\r\n    onRemoveClick($event: MouseEvent, id: any) {\r\n        $event.stopPropagation();\r\n        this.remove.emit(id);\r\n    }\r\n\r\n    onClearClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.clear.emit();\r\n    }\r\n\r\n    onClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        return false;\r\n    }\r\n}\r\n","import { FarrisCommonModule } from '@farris/ui-common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PaginatePipe} from './paginate.pipe';\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationControlsComponent} from './pagination-controls.component';\r\nimport {PaginationControlsDirective} from './pagination-controls.directive';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PaginationSelectedListComponent } from './selected-list/selected-list.component';\r\n\r\nexport {PaginationInstance} from './pagination-instance';\r\nexport {PaginationService} from './pagination.service';\r\nexport {PaginationControlsComponent} from './pagination-controls.component';\r\nexport {PaginationControlsDirective} from './pagination-controls.directive';\r\nexport {PaginatePipe} from './paginate.pipe';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        LocaleModule\r\n    ],\r\n    declarations: [\r\n        PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective,\r\n        PaginationSelectedListComponent\r\n    ],\r\n    providers: [PaginationService],\r\n    exports: [\r\n        PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective,\r\n        PaginationSelectedListComponent\r\n    ]\r\n})\r\nexport class PaginationModule { }\r\n"],"names":["EventEmitter","IdService","Injectable","Pipe","Optional","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","Output","ViewChild","Directive","ChangeDetectorRef","Injector","HostBinding","NgModule","CommonModule","FormsModule","FarrisCommonModule","LocaleModule"],"mappings":"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"}
