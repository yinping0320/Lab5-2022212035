import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { IdService, FarrisCommonModule } from '@farris/ui-common';
import { LocaleModule } from '@farris/ui-locale';
import { EventEmitter, Injectable, ChangeDetectorRef, Directive, Input, Output, Optional, Injector, Component, HostBinding, Pipe, NgModule, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PaginationService {
    constructor() {
        this.change = new EventEmitter();
        this.instances = {};
        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';
    }
    /**
     * @return {?}
     */
    defaultId() {
        return this.DEFAULT_ID + new IdService().uuid();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeInstance(id) {
        if (this.instances[id]) {
            this.instances[id] = null;
            delete this.instances[id];
        }
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    register(instance) {
        if (instance.id == null) {
            instance.id = this.DEFAULT_ID;
        }
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            /** @type {?} */
            const changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
    }
    /**
     * Check each property of the instance and update any that have changed. Return
     * true if any changes were made, else return false.
     * @private
     * @param {?} instance
     * @return {?}
     */
    updateInstance(instance) {
        /** @type {?} */
        let changed = false;
        for (const prop in this.instances[instance.id]) {
            if (instance[prop] !== this.instances[instance.id][prop]) {
                this.instances[instance.id][prop] = instance[prop];
                changed = true;
            }
        }
        return changed;
    }
    /**
     * Returns the current page number.
     * @param {?} id
     * @return {?}
     */
    getCurrentPage(id) {
        if (this.instances[id]) {
            return this.instances[id].currentPage;
        }
    }
    /**
     * Sets the current page number.
     * @param {?} id
     * @param {?} page
     * @return {?}
     */
    setCurrentPage(id, page) {
        if (this.instances[id]) {
            /** @type {?} */
            const instance = this.instances[id];
            /** @type {?} */
            const maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);
            if (page <= maxPage && 1 <= page) {
                this.instances[id].currentPage = page;
                this.change.emit(id);
            }
        }
    }
    /**
     * @param {?} id
     * @param {?} newList
     * @return {?}
     */
    setPageList(id, newList) {
        if (this.instances[id]) {
            /** @type {?} */
            const instance = this.instances[id];
            instance.pageList = newList;
            this.change.emit(id);
        }
    }
    /**
     * Sets the value of instance.totalItems
     * @param {?} id
     * @param {?} totalItems
     * @return {?}
     */
    setTotalItems(id, totalItems) {
        if (this.instances[id] && 0 <= totalItems) {
            this.instances[id].totalItems = totalItems;
            this.change.emit(id);
        }
    }
    /**
     * Sets the value of instance.itemsPerPage.
     * @param {?} id
     * @param {?} itemsPerPage
     * @return {?}
     */
    setItemsPerPage(id, itemsPerPage) {
        if (this.instances[id]) {
            this.instances[id].itemsPerPage = itemsPerPage;
            this.change.emit(id);
        }
    }
    /**
     * Returns a clone of the pagination instance object matching the id. If no
     * id specified, returns the instance corresponding to the default id.
     * @param {?=} id
     * @return {?}
     */
    getInstance(id = this.DEFAULT_ID) {
        if (this.instances[id]) {
            return this.clone(this.instances[id]);
        }
        return (/** @type {?} */ ({}));
    }
    /**
     * Perform a shallow clone of an object.
     * @private
     * @param {?} obj
     * @return {?}
     */
    clone(obj) {
        /** @type {?} */
        const target = {};
        for (const i in obj) {
            if (obj.hasOwnProperty(i)) {
                target[i] = obj[i];
            }
        }
        return target;
    }
}
PaginationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PaginationService.ngInjectableDef = defineInjectable({ factory: function PaginationService_Factory() { return new PaginationService(); }, token: PaginationService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LARGE_NUMBER = Number.MAX_SAFE_INTEGER;
class PaginatePipe {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        // store the values from the last time the pipe was invoked
        this.state = {};
        if (!this.service) {
            this.service = new PaginationService();
        }
    }
    /**
     * @template T, U
     * @param {?} collection
     * @param {?} args
     * @return {?}
     */
    transform(collection, args) {
        // When an observable is passed through the AsyncPipe, it will output
        // `null` until the subscription resolves. In this case, we want to
        // use the cached data from the `state` object to prevent the NgFor
        // from flashing empty until the real values arrive.
        if (!(collection instanceof Array)) {
            /** @type {?} */
            const _id = args.id || this.service.defaultId();
            if (this.state[_id]) {
                return (/** @type {?} */ (this.state[_id].slice));
            }
            else {
                return collection;
            }
        }
        // const serverSideMode = args.totalItems && args.totalItems !== collection.length;
        /** @type {?} */
        const serverSideMode = args.remote;
        /** @type {?} */
        const instance = this.createInstance(collection, args);
        /** @type {?} */
        const id = instance.id;
        /** @type {?} */
        let start;
        /** @type {?} */
        let end;
        /** @type {?} */
        let perPage = instance.itemsPerPage;
        this.service.register(instance);
        if (!serverSideMode && collection instanceof Array) {
            perPage = +perPage || LARGE_NUMBER;
            start = (instance.currentPage - 1) * perPage;
            end = start + perPage;
            /** @type {?} */
            const isIdentical = this.stateIsIdentical(id, collection, start, end);
            if (isIdentical) {
                return (/** @type {?} */ (this.state[id].slice));
            }
            else {
                /** @type {?} */
                const slice = collection.slice(start, end);
                this.saveState(id, collection, slice, start, end);
                this.service.change.emit(id);
                return (/** @type {?} */ (slice));
            }
        }
        // save the state for server-side collection to avoid null
        // flash as new data loads.
        this.saveState(id, collection, collection, start, end);
        return collection;
    }
    /**
     * Create an PaginationInstance object, using defaults for any optional properties not supplied.
     * @private
     * @param {?} collection
     * @param {?} config
     * @return {?}
     */
    createInstance(collection, config) {
        // this.checkConfig(config);
        return {
            id: config.id != null ? config.id : this.service.defaultId(),
            itemsPerPage: +config.itemsPerPage || 0,
            currentPage: +config.currentPage || 1,
            totalItems: +config.totalItems || collection.length,
            pageList: config.pageList || [10, 20, 30, 50, 100],
            remote: config.remote
        };
    }
    /**
     * Ensure the argument passed to the filter contains the required properties.
     * @private
     * @param {?} config
     * @return {?}
     */
    checkConfig(config) {
        /** @type {?} */
        const required = ['itemsPerPage', 'currentPage'];
        /** @type {?} */
        const missing = required.filter((/**
         * @param {?} prop
         * @return {?}
         */
        prop => !(prop in config)));
        if (0 < missing.length) {
            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);
        }
    }
    /**
     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
     * array for a given id. This means that the next time the pipe is run on this collection & id, we just
     * need to check that the collection, start and end points are all identical, and if so, return the
     * last sliced array.
     * @private
     * @param {?} id
     * @param {?} collection
     * @param {?} slice
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    saveState(id, collection, slice, start, end) {
        this.state[id] = {
            collection,
            size: collection.length,
            slice,
            start,
            end
        };
    }
    /**
     * For a given id, returns true if the collection, size, start and end values are identical.
     * @private
     * @param {?} id
     * @param {?} collection
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    stateIsIdentical(id, collection, start, end) {
        /** @type {?} */
        const state = this.state[id];
        if (!state) {
            return false;
        }
        /** @type {?} */
        const isMetaDataIdentical = state.size === collection.length &&
            state.start === start &&
            state.end === end;
        if (!isMetaDataIdentical) {
            return false;
        }
        return state.slice.every((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => element === collection[start + index]));
    }
}
PaginatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'paginate',
                pure: false
            },] }
];
/** @nocollapse */
PaginatePipe.ctorParameters = () => [
    { type: PaginationService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This directive is what powers all pagination controls components, including the default one.
 * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
 * with the pagination controls.
 */
class PaginationControlsDirective {
    /**
     * @param {?} service
     * @param {?} changeDetectorRef
     * @param {?} injector
     */
    constructor(service, changeDetectorRef, injector) {
        this.service = service;
        this.changeDetectorRef = changeDetectorRef;
        this.injector = injector;
        this.maxSize = 7;
        this.pageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.pages = [];
        if (!this.service) {
            if (this.injector) {
                this.service = this.injector.get(PaginationService);
            }
            else {
                this.service = new PaginationService();
            }
        }
        this.changeSub = this.service.change.subscribe((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            if (this.id === id) {
                this.updatePageLinks();
                this.changeDetectorRef.markForCheck();
                this.changeDetectorRef.detectChanges();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.id === undefined) {
            this.id = this.service.defaultId();
        }
        this.updatePageLinks();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.updatePageLinks();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.changeSub.unsubscribe();
        this.service.removeInstance(this.id);
    }
    /**
     * Go to the previous page
     * @return {?}
     */
    previous() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() - 1);
    }
    /**
     * Go to the next page
     * @return {?}
     */
    next() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() + 1);
    }
    /**
     * lucas added 2019/07/02
     * Go to the first page
     * @param {?} $event
     * @return {?}
     */
    first($event) {
        $event.stopPropagation();
        this.checkValidId();
        this.setCurrent(1);
    }
    /**
     * lucas added 2019/07/02
     * Go to the last page
     * @param {?} $event
     * @return {?}
     */
    last($event) {
        $event.stopPropagation();
        this.checkValidId();
        this.setCurrent(this.getLastPage());
    }
    /**
     * Returns true if current page is first page
     * @return {?}
     */
    isFirstPage() {
        return this.getCurrent() === 1;
    }
    /**
     * Returns true if current page is last page
     * @return {?}
     */
    isLastPage() {
        return this.getLastPage() === this.getCurrent();
    }
    /**
     * Set the current page number.
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} $event
     * @return {?}
     */
    setCurrent(page, pageSize, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!pageSize) {
            pageSize = this.getPageSize();
        }
        this.pageChange.emit({ pageIndex: page, pageSize });
    }
    /**
     * Get the current page number.
     * @return {?}
     */
    getCurrent() {
        return this.service.getCurrentPage(this.id);
    }
    /**
     * @param {?} pageList
     * @return {?}
     */
    setPageList(pageList) {
        this.service.setPageList(this.id, pageList);
    }
    /**
     * Returns the last page number
     * @return {?}
     */
    getLastPage() {
        /** @type {?} */
        const inst = this.service.getInstance(this.id);
        if (inst.totalItems < 1) {
            // when there are 0 or fewer (an error case) items, there are no "pages" as such,
            // but it makes sense to consider a single, empty page as the last page.
            return 1;
        }
        return Math.ceil(inst.totalItems / inst.itemsPerPage);
    }
    /**
     * @return {?}
     */
    getTotalItems() {
        return this.service.getInstance(this.id).totalItems;
    }
    /**
     * @return {?}
     */
    getPageList() {
        return this.service.getInstance(this.id).pageList;
    }
    /**
     * @return {?}
     */
    getPageSize() {
        return this.service.getInstance(this.id).itemsPerPage;
    }
    /**
     * @param {?} pager
     * @return {?}
     */
    goto(pager) {
        // alert(pager);
        this.setCurrent(pager);
    }
    /**
     * @private
     * @return {?}
     */
    checkValidId() {
        if (this.service.getInstance(this.id).id == null) {
            console.warn(`PaginationControlsDirective: the specified id "${this.id}" does not match any registered PaginationInstance`);
        }
    }
    /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     * @private
     * @return {?}
     */
    updatePageLinks() {
        /** @type {?} */
        const inst = this.service.getInstance(this.id);
        /** @type {?} */
        const correctedCurrentPage = this.outOfBoundCorrection(inst);
        if (correctedCurrentPage !== inst.currentPage) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.setCurrent(correctedCurrentPage);
                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
            }));
        }
        else {
            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
        }
        this.changeDetectorRef.markForCheck();
        this.changeDetectorRef.detectChanges();
    }
    /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     * @private
     * @param {?} instance
     * @return {?}
     */
    outOfBoundCorrection(instance) {
        /** @type {?} */
        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    }
    /**
     * Returns an array of Page objects to use in the pagination controls.
     * @private
     * @param {?} currentPage
     * @param {?} itemsPerPage
     * @param {?} totalItems
     * @param {?} paginationRange
     * @return {?}
     */
    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {
        // paginationRange could be a string if passed from attribute, so cast to number.
        paginationRange = +paginationRange;
        /** @type {?} */
        const pages = [];
        /** @type {?} */
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        /** @type {?} */
        const halfWay = Math.ceil(paginationRange / 2);
        /** @type {?} */
        const isStart = currentPage <= halfWay;
        /** @type {?} */
        const isEnd = totalPages - halfWay < currentPage;
        /** @type {?} */
        const isMiddle = !isStart && !isEnd;
        /** @type {?} */
        const ellipsesNeeded = paginationRange < totalPages;
        /** @type {?} */
        let i = 1;
        while (i <= totalPages && i <= paginationRange) {
            /** @type {?} */
            let label;
            /** @type {?} */
            const pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
            /** @type {?} */
            const openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));
            /** @type {?} */
            const closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                label = '...';
            }
            else {
                label = pageNumber;
            }
            pages.push({
                label,
                value: pageNumber
            });
            i++;
        }
        return pages;
    }
    /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     * @private
     * @param {?} i
     * @param {?} currentPage
     * @param {?} paginationRange
     * @param {?} totalPages
     * @return {?}
     */
    calculatePageNumber(i, currentPage, paginationRange, totalPages) {
        /** @type {?} */
        const halfWay = Math.ceil(paginationRange / 2);
        if (i === paginationRange) {
            return totalPages;
        }
        else if (i === 1) {
            return i;
        }
        else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
                return totalPages - paginationRange + i;
            }
            else if (halfWay < currentPage) {
                return currentPage - halfWay + i;
            }
            else {
                return i;
            }
        }
        else {
            return i;
        }
    }
}
PaginationControlsDirective.decorators = [
    { type: Directive, args: [{
                selector: 'pagination-template,[pagination-template]',
                exportAs: 'paginationApi'
            },] }
];
/** @nocollapse */
PaginationControlsDirective.ctorParameters = () => [
    { type: PaginationService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: Injector, decorators: [{ type: Optional }] }
];
PaginationControlsDirective.propDecorators = {
    id: [{ type: Input }],
    maxSize: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageSizeChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} input
 * @return {?}
 */
function coerceToBoolean(input) {
    return !!input && input !== 'false';
}
// styleUrls: ['./pagination-controls.component.css'],
/**
 * The default pagination controls component. Actually just a default implementation of a custom template.
 */
//  #farris-gotopagenumber{ text-align: center;
//     -moz-appearance: textfield;
//     width: 40px;
// }
// #farris-gotopagenumber::-webkit-outer-spin-button,
// #farris-gotopagenumber::-webkit-inner-spin-button {
//     -webkit-appearance: none;
// }
class PaginationControlsComponent {
    constructor() {
        this._directionLinks = true;
        this._autoHide = false;
        this._responsive = false;
        this.mouseInSelectedList = false;
        /**
         * 显示模式， default 默认；simple: 简洁
         */
        this.viewMode = 'default';
        this.maxSize = 7;
        this.previousLabel = 'Previous';
        this.nextLabel = 'Next';
        this.screenReaderPaginationLabel = 'Pagination';
        this.screenReaderPageLabel = 'page';
        this.screenReaderCurrentLabel = `You're on page`;
        this.showPageList = true;
        this.showPageInfo = true;
        this.showPageNumber = true;
        this.showSelectedList = false;
        this.showGoToLast = false;
        this.showGoToFirst = false;
        /**
         * 显示跳转至指定页码输入框
         */
        this.showGotoInput = false;
        this.position = 'right';
        /**
         * @deprecated
         */
        this.message = '每页 {0} 条记录，共 {1} 条记录';
        /**
         * @deprecated
         */
        this.pageListFirstText = '显示';
        /**
         * @deprecated
         */
        this.pageListLastText = '条';
        this.pageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.showPagesPanel = false;
    }
    /**
     * @return {?}
     */
    get directionLinks() {
        return this._directionLinks;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set directionLinks(value) {
        this._directionLinks = coerceToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoHide() {
        return this._autoHide;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoHide(value) {
        this._autoHide = coerceToBoolean(value);
    }
    /**
     * @return {?}
     */
    get responsive() {
        return this._responsive;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set responsive(value) {
        this._responsive = coerceToBoolean(value);
    }
    // constructor(@Optional() private pagerService: PaginationService) {
    //     if (!this.pagerService) {
    //         this.pagerService = new PaginationService();
    //     }
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseLeave($event) {
        this.showPagesPanel = false;
        this.paginationDirective.changeDetectorRef.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        if (this.paginationDirective.getTotalItems() === 0) {
            return;
        }
        this.showPagesPanel = true;
    }
    /**
     * @param {?} $event
     * @param {?} pagesize
     * @return {?}
     */
    changePageSizeHandler($event, pagesize) {
        $event.stopPropagation();
        // 当前页再次点击
        if (pagesize === this.paginationDirective.getPageSize()) {
            return;
        }
        this.showPagesPanel = false;
        // this.removeOverlay();
        this.pageSizeChange.emit(pagesize);
    }
    /**
     * @param {?} inputEl
     * @param {?} maxNumber
     * @return {?}
     */
    onPageNumberChanged(inputEl, maxNumber) {
        /** @type {?} */
        const target = (/** @type {?} */ (inputEl.target));
        /** @type {?} */
        const currentPageNumber = Number(target.value);
        if (currentPageNumber > maxNumber) {
            target.value = maxNumber;
        }
    }
    /**
     * @param {?} inputEl
     * @return {?}
     */
    onPageNumberBlur(inputEl) {
        /** @type {?} */
        const target = (/** @type {?} */ (inputEl.target));
        /** @type {?} */
        const currentPageNumber = Number(target.value);
        if (currentPageNumber < 1) {
            target.value = 1;
        }
    }
    /**
     * @param {?} newpageList
     * @return {?}
     */
    setPageList(newpageList) {
        this.paginationDirective.setPageList(newpageList);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    goto($event) {
        /** @type {?} */
        let newpager = Number($event.target.value);
        if (newpager < 1) {
            newpager = 1;
            $event.target.value = 1;
        }
        if (this.paginationDirective.getCurrent() !== newpager) {
            this.paginationDirective.goto(newpager);
        }
    }
}
PaginationControlsComponent.decorators = [
    { type: Component, args: [{
                selector: 'pagination-controls',
                template: "<pagination-template #p=\"paginationApi\" [id]=\"id\" [maxSize]=\"maxSize\" (pageChange)=\"pageChange.emit($event)\">\r\n    <div class=\"pagination-container\">\r\n        <ng-content select=\".pager-overlay-container\"></ng-content>\r\n        <ul class=\"ngx-pagination pagination\" role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\"\r\n            style=\"position: relative;align-items: center;\" [class.responsive]=\"responsive\"\r\n            [class.pager-viewmode-default]=\"viewMode === 'default'\"\r\n            [class.pager-viewmode-simple]=\"viewMode === 'simple'\" *ngIf=\"!(autoHide && p.pages.length <= 1)\"\r\n            [style.justify-content]=\"position === 'center'?'center': 'start'\">\r\n            <ng-container *ngIf=\"viewMode === 'default'\">\r\n                <li class=\"pagination-message text-truncate d-flex\" *ngIf=\"showPageInfo\" style=\"min-width: 70px\"\r\n                    [class.ml-auto]=\"position=== 'right'\" [class.flex-fill]=\"position=== 'right'\"\r\n                    [style.justify-content]=\"position === 'right' ? 'right': ''\">\r\n                    <ng-content select=\".pager-pos-right\"></ng-content>\r\n                    <ng-content></ng-content>\r\n                    <div class=\"text-truncate \">\r\n                        <span class=\"pg-message-text\">{{ 'pagination.totalinfo.firstText' | locale}}</span>\r\n                        <b class=\"pg-message-total\">{{ p.getTotalItems()}}</b>\r\n                        <span class=\"pg-message-text\">{{ 'pagination.totalinfo.lastText' | locale}}</span>\r\n                    </div>\r\n                </li>\r\n                <!--\u6BCF\u9875\u8BB0\u5F55\u6570-->\r\n                <li class=\"pagination-pagelist\" *ngIf=\"showPageList\">\r\n                    <div class=\"dropup dropdown-right pg-pagelist\"\r\n                        [ngClass]=\"{'pagelist-disabled':p.getTotalItems()===0,'show': showPagesPanel}\"\r\n                        (mouseenter)=\"onMouseEnter($event)\" (mouseleave)=\"onMouseLeave($event)\">\r\n                        <div class=\"pg-pagelist-info\" #pglistinfo>\r\n                            <span class=\"pagelist-text\">{{'pagination.pagelist.firstText' | locale}}</span><b\r\n                                class=\"cur-pagesize\">{{p.getPageSize()}}</b><span\r\n                                class=\"pagelist-text\">{{'pagination.pagelist.lastText' | locale}}</span><i\r\n                                class=\"f-icon f-icon-dropdown\"></i>\r\n                        </div>\r\n                        <div class=\"dropdown-menu\" [ngClass]=\"{'show': showPagesPanel}\" style=\"margin-bottom: -1px;\">\r\n                <li class=\"dropdown-item\" [ngClass]=\"{'active':pagesize==p.getPageSize()}\"\r\n                    *ngFor=\"let pagesize of p.getPageList()\" (click)=\"changePageSizeHandler($event, pagesize)\">\r\n                    <span>{{ pagesize }}</span>\r\n                </li>\r\n    </div>\r\n    </div>\r\n    </li>\r\n\r\n    <!--\u9996\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\r\n        <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.first($event)\" (click)=\"p.first($event)\"\r\n            [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-first\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-first\"></span>\r\n        </span>\r\n    </li>\r\n\r\n    <!--\u4E0A\u4E00\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\r\n        <a class=\"page-link\" tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\"\r\n            [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\r\n            <span class=\"f-icon f-page-pre\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-pre\"></span>\r\n        </span>\r\n    </li>\r\n\r\n\r\n\r\n    <ng-container *ngIf=\"showPageNumber\">\r\n        <!--\u9875\u7801-->\r\n        <li class=\"page-item\" [class.current]=\"p.getCurrent() === page.value\" [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages\">\r\n            <a class=\"page-link\" tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\"\r\n                (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span>{{ page.label }}</span>\r\n            </a>\r\n            <span class=\"page-link\" *ngIf=\"p.getCurrent() === page.value\">{{page.label }}</span>\r\n        </li>\r\n    </ng-container>\r\n    <!--\u4E0B\u4E00\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n        <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\"\r\n            [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n            <span class=\"f-icon f-page-next\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-next\"></span>\r\n        </span>\r\n    </li>\r\n    <!--\u672B\u9875-->\r\n    <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n        <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.last($event)\"\r\n            (click)=\"p.last($event)\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n            <span class=\"f-icon f-page-last\"></span>\r\n        </a>\r\n        <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\r\n            <span class=\"f-icon f-page-last\"></span>\r\n        </span>\r\n    </li>\r\n\r\n\r\n\r\n    <li class=\"page-goto-input d-flex flex-row\" *ngIf=\"showGotoInput\"\r\n        style=\"padding-left: 10px; white-space: nowrap;align-items: center;\">\r\n        {{'pagination.goto.prefix' | locale}}\r\n\r\n        <div style=\"min-width: 40px;position: relative;height: 24px;margin: 0 3px;\">\r\n            <label style=\"display: inline-block;font-size: inherit;line-height: normal;visibility: hidden;font-family: inherit;\r\n            padding: 0;\">{{gotoinput.value}}</label>\r\n            <input #gotoinput class=\"form-control farris-gotopagenumber\" value=\"1\" type=\"number\" min=\"1\"\r\n                max=\"{{p.getLastPage()}}\"\r\n                style=\"width: 100%;position: absolute;left: 0;top: 0;padding: 0;height: 100%;line-height: 24px;\"\r\n                (input)=\"onPageNumberChanged($event, p.getLastPage())\" [value]=\"p.getCurrent()\"\r\n                (keyup.enter)=\"goto($event)\" (blur)=\"onPageNumberBlur($event)\">\r\n        </div>\r\n\r\n\r\n        {{'pagination.goto.suffix' | locale}}\r\n    </li>\r\n\r\n    <li class=\"pagination-message text-truncate d-flex flex-fill ml-3\" *ngIf=\"showPageInfo && position==='left'\">\r\n        <ng-content select=\".pager-pos-left\"></ng-content>\r\n    </li>\r\n\r\n    </ng-container>\r\n    <ng-container *ngIf=\"viewMode === 'simple'\">\r\n        <li class=\"page-item d-flex flex-fill\">\r\n            <ng-content select=\".simple-pager-extend-area\"></ng-content>\r\n        </li>\r\n        <!--\u9996\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks && showGoToFirst\">\r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.first($event)\" (click)=\"p.first($event)\"\r\n                [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\" class=\"page-link\">\r\n                <span class=\"f-icon f-page-first\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" class=\"page-link\">\r\n                <span class=\"f-icon f-page-first\"></span>\r\n            </span>\r\n        </li>\r\n        <!--\u4E0A\u4E00\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\">\r\n            <a class=\"page-link border-0\" tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\"\r\n                (click)=\"p.previous()\" [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\r\n                <span class=\"f-icon f-page-pre\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" class=\"page-link border-0\">\r\n                <span class=\"f-icon f-page-pre\"></span>\r\n            </span>\r\n        </li>\r\n\r\n        <li class=\"page-item\">\r\n            <input id=\"farris-gotopagenumber\" class=\"form-control farris-gotopagenumber\" min=\"1\"\r\n                max=\"{{p.getLastPage()}}\" type=\"number\" [ngModel]=\"p.getCurrent()\"\r\n                (input)=\"onPageNumberChanged($event, p.getLastPage())\" (keyup.enter)=\"p.goto($event.target.value)\">\r\n        </li>\r\n        <li class=\"page-item page-separator\" style=\"margin-left: 10px\">\r\n            <span style=\"font-size: 15px; font-weight: 200;\"> /</span>\r\n        </li>\r\n        <li class=\"page-item page-total\" style=\"margin-left: 5px\">\r\n            <span style=\"font-size: 16px; font-weight: 600;\"> {{ p.getLastPage() }}</span>\r\n        </li>\r\n\r\n        <!--\u4E0B\u4E00\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a class=\"page-link border-0\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\"\r\n                (click)=\"p.next()\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n                <span class=\"f-icon f-page-next\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" class=\"page-link border-0\">\r\n                <span class=\"f-icon f-page-next\"></span>\r\n            </span>\r\n        </li>\r\n        <!--\u672B\u9875-->\r\n        <li class=\"page-item\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks  && showGoToLast\">\r\n            <a class=\"page-link\" tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.last($event)\"\r\n                (click)=\"p.last($event)\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\r\n                <span class=\"f-icon f-page-last\"></span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" class=\"page-link\">\r\n                <span class=\"f-icon f-page-last\"></span>\r\n            </span>\r\n        </li>\r\n    </ng-container>\r\n\r\n    </ul>\r\n    </div>\r\n</pagination-template>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }] }
];
PaginationControlsComponent.propDecorators = {
    viewMode: [{ type: Input }],
    id: [{ type: Input }],
    maxSize: [{ type: Input }],
    directionLinks: [{ type: Input }],
    autoHide: [{ type: Input }],
    responsive: [{ type: Input }],
    previousLabel: [{ type: Input }],
    nextLabel: [{ type: Input }],
    screenReaderPaginationLabel: [{ type: Input }],
    screenReaderPageLabel: [{ type: Input }],
    screenReaderCurrentLabel: [{ type: Input }],
    showPageList: [{ type: Input }],
    showPageInfo: [{ type: Input }],
    showPageNumber: [{ type: Input }],
    showSelectedList: [{ type: Input }],
    showGoToLast: [{ type: Input }],
    showGoToFirst: [{ type: Input }],
    showGotoInput: [{ type: Input }],
    position: [{ type: Input }],
    message: [{ type: Input }],
    pageListFirstText: [{ type: Input }],
    pageListLastText: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageSizeChange: [{ type: Output }],
    paginationDirective: [{ type: ViewChild, args: ['p',] }],
    focusPageSizeRef: [{ type: ViewChild, args: ['focusPageSize',] }],
    pglistinfo: [{ type: ViewChild, args: ['pglistinfo',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PaginationSelectedListComponent {
    constructor() {
        this.data = [];
        //位置，决定是否翻转
        this.position = "bottom";
        this.close = new EventEmitter();
        this.remove = new EventEmitter();
        this.clear = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get slPosition() { return this.position == 'top'; }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClose($event) {
        $event.stopPropagation();
        this.close.emit();
    }
    /**
     * @param {?} $event
     * @param {?} id
     * @return {?}
     */
    onRemoveClick($event, id) {
        $event.stopPropagation();
        this.remove.emit(id);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClearClick($event) {
        $event.stopPropagation();
        this.clear.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        return false;
    }
}
PaginationSelectedListComponent.decorators = [
    { type: Component, args: [{
                selector: 'pagination-selected-list',
                template: "\r\n<div class=\"f-cmp-pager-selected-list-wrapper \">\r\n\t<div class=\"selected-list--content\" (mouseleave)=\"onClose($event)\" (click)=\"onClick($event)\">\r\n\t\t<div class=\"selected-list--arrow\"></div>\r\n\t\t<div class=\"selected-list--title\">\r\n            <div class=\"btn-group\">\r\n                <button class=\"btn btn-link\" (click)=\"onClearClick($event)\"> \r\n                    <i class=\"f-icon f-icon-remove\"></i>\r\n                    <span class=\"btn-text\">{{ 'datagrid.selectionData.clearAll' | locale: '\u6E05\u7A7A' }}</span>\r\n                </button>\r\n            </div>\r\n            <div class=\"selected-list--close\"><span class=\"f-icon f-icon-close\" (click)=\"onClose($event)\"></span></div>\r\n        </div>\r\n        <div class=\"selected-list--main\">\r\n            <ul class=\"selected-list\">  <!-- selected-list--wrap -->\r\n                <li class=\"selected-list--item ng-star-inserted\" *ngFor=\"let item of data\" style=\"min-height: 35px;\">\r\n\t\t\t\t\t<span class=\"f-icon f-icon-close-outline list-icon list-error\" (click)=\"onRemoveClick($event, item.id)\"></span>\r\n                    <div class=\"list-con\" [innerHTML]=\"item.text\"></div>\r\n                </li>\r\n                \r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n"
            }] }
];
/** @nocollapse */
PaginationSelectedListComponent.ctorParameters = () => [];
PaginationSelectedListComponent.propDecorators = {
    data: [{ type: Input }],
    position: [{ type: Input }],
    close: [{ type: Output }],
    remove: [{ type: Output }],
    clear: [{ type: Output }],
    slPosition: [{ type: HostBinding, args: ['class.pos-top',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PaginationModule {
}
PaginationModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    FarrisCommonModule.forRoot(),
                    LocaleModule
                ],
                declarations: [
                    PaginatePipe,
                    PaginationControlsComponent,
                    PaginationControlsDirective,
                    PaginationSelectedListComponent
                ],
                providers: [PaginationService],
                exports: [
                    PaginatePipe,
                    PaginationControlsComponent,
                    PaginationControlsDirective,
                    PaginationSelectedListComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe, PaginationModule, PaginationSelectedListComponent };

//# sourceMappingURL=farris-ui-pagination.js.map