/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/external-integration/grid-external-integration.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Injector, Renderer2, ViewChild, } from "@angular/core";
import { RuntimeStateService } from "@farris/ui-common";
import { GRID_EDITORS } from "@farris/ui-datagrid";
import { DatagridBaseEditorDirective } from "@farris/ui-datagrid-editors";
import { ExternalIntegrationComponent } from "./external-integration.component";
/** @type {?} */
var ExtIntgrtnDefautOption = {
    readonly: false,
    // 是否只读
    placeholder: "请选择",
    viewType: "tag"
};
var DatagridExtIntgrtnComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridExtIntgrtnComponent, _super);
    function DatagridExtIntgrtnComponent(render, el, rts, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.stopPropagation = false;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridExtIntgrtnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.input.nativeElement;
        this.options = Object.assign({}, ExtIntgrtnDefautOption, this.options);
        this.column.editor.options.onBlur = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.editorRef.startPending();
            e.editorRef.formControl.setValue(_this.instance.fieldText);
            _this.instance.callSapService();
            _this.instance.afterOnblur.subscribe((/**
             * @return {?}
             */
            function () {
                e.editorRef.endPending();
            }));
        });
    };
    /**
     * @return {?}
     */
    DatagridExtIntgrtnComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridExtIntgrtnComponent.decorators = [
        { type: Component, args: [{
                    selector: "grid-external-integration",
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n      <web-external-integration\n        #extIntgrtn\n        style=\"width: 100%\"\n        extIntegration-dataMapping\n        [placeholder]=\"options.placeholder\"\n        [readonly]=\"options.readonly\"\n        [mapFields]=\"options.mapFields\"\n        [serviceCode] = \"options.serviceCode\"\n        [externalParams] = \"options.externalParams\"\n        [extTableSchemas] = \"options.extTableSchemas\"\n        [formControlName]=\"column.field\"\n        [mappingType] = \"'grid'\"\n        \n      ></web-external-integration>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    DatagridExtIntgrtnComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: Injector }
    ]; };
    DatagridExtIntgrtnComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ["extIntgrtn",] }]
    };
    return DatagridExtIntgrtnComponent;
}(DatagridBaseEditorDirective));
export { DatagridExtIntgrtnComponent };
if (false) {
    /** @type {?} */
    DatagridExtIntgrtnComponent.prototype.instance;
    /** @type {?} */
    DatagridExtIntgrtnComponent.prototype.stopPropagation;
    /**
     * @type {?}
     * @private
     */
    DatagridExtIntgrtnComponent.prototype.rts;
}
/** @type {?} */
export var ExtIntgrtnDataGridEditorProvider = {
    provide: GRID_EDITORS,
    useValue: { name: "external-integration", value: DatagridExtIntgrtnComponent },
    multi: true
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1leHRlcm5hbC1pbnRlZ3JhdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVybmFsLWludGVncmF0aW9uLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9leHRlcm5hbC1pbnRlZ3JhdGlvbi9ncmlkLWV4dGVybmFsLWludGVncmF0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBRVIsU0FBUyxFQUNULFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7O0lBRTFFLHNCQUFzQixHQUFHO0lBQzdCLFFBQVEsRUFBRSxLQUFLOztJQUNmLFdBQVcsRUFBRSxLQUFLO0lBQ2xCLFFBQVEsRUFBRSxLQUFLO0NBQ2hCO0FBRUQ7SUFxQmlELHVEQUEyQjtJQUsxRSxxQ0FDRSxNQUFpQixFQUNqQixFQUFjLEVBQ04sR0FBd0IsRUFDaEMsUUFBa0I7UUFKcEIsWUFNRSxrQkFBTSxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUM1QjtRQUpTLFNBQUcsR0FBSCxHQUFHLENBQXFCO1FBSmxDLHFCQUFlLEdBQUcsS0FBSyxDQUFDOztJQVF4QixDQUFDOzs7O0lBRUQsOENBQVE7OztJQUFSO1FBQUEsaUJBWUM7UUFYQyxpQkFBTSxRQUFRLFdBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHNCQUFzQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTTs7OztRQUFHLFVBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFELEtBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDL0IsS0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUzs7O1lBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDM0IsQ0FBQyxFQUFDLENBQUE7UUFDSixDQUFDLENBQUEsQ0FBQTtJQUNILENBQUM7Ozs7SUFFRCxxREFBZTs7O0lBQWY7UUFDRSxpQkFBTSxlQUFlLFdBQUUsQ0FBQztJQUMxQixDQUFDOztnQkFuREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFFBQVEsRUFBRSxvb0JBaUJUO2lCQUNGOzs7O2dCQWxDQyxTQUFTO2dCQUhULFVBQVU7Z0JBTUgsbUJBQW1CO2dCQUwxQixRQUFROzs7MkJBdUNQLFNBQVMsU0FBQyxZQUFZOztJQStCekIsa0NBQUM7Q0FBQSxBQXRERCxDQXFCaUQsMkJBQTJCLEdBaUMzRTtTQWpDWSwyQkFBMkI7OztJQUV0QywrQ0FBZ0U7O0lBRWhFLHNEQUF3Qjs7Ozs7SUFJdEIsMENBQWdDOzs7QUEyQnBDLE1BQU0sS0FBTyxnQ0FBZ0MsR0FBRztJQUM5QyxPQUFPLEVBQUUsWUFBWTtJQUNyQixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLDJCQUEyQixFQUFFO0lBQzlFLEtBQUssRUFBRSxJQUFJO0NBQ1oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5qZWN0b3IsXHJcbiAgT25Jbml0LFxyXG4gIFJlbmRlcmVyMixcclxuICBWaWV3Q2hpbGQsXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUnVudGltZVN0YXRlU2VydmljZSB9IGZyb20gXCJAZmFycmlzL3VpLWNvbW1vblwiO1xyXG5pbXBvcnQgeyBHUklEX0VESVRPUlMgfSBmcm9tIFwiQGZhcnJpcy91aS1kYXRhZ3JpZFwiO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tIFwiQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzXCI7XHJcbmltcG9ydCB7IEV4dGVybmFsSW50ZWdyYXRpb25Db21wb25lbnQgfSBmcm9tIFwiLi9leHRlcm5hbC1pbnRlZ3JhdGlvbi5jb21wb25lbnRcIjtcclxuXHJcbmNvbnN0IEV4dEludGdydG5EZWZhdXRPcHRpb24gPSB7XHJcbiAgcmVhZG9ubHk6IGZhbHNlLCAvLyDmmK/lkKblj6ror7tcclxuICBwbGFjZWhvbGRlcjogXCLor7fpgInmi6lcIixcclxuICB2aWV3VHlwZTogXCJ0YWdcIlxyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6IFwiZ3JpZC1leHRlcm5hbC1pbnRlZ3JhdGlvblwiLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIj5cclxuICAgICAgPHdlYi1leHRlcm5hbC1pbnRlZ3JhdGlvblxyXG4gICAgICAgICNleHRJbnRncnRuXHJcbiAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgZXh0SW50ZWdyYXRpb24tZGF0YU1hcHBpbmdcclxuICAgICAgICBbcGxhY2Vob2xkZXJdPVwib3B0aW9ucy5wbGFjZWhvbGRlclwiXHJcbiAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgIFttYXBGaWVsZHNdPVwib3B0aW9ucy5tYXBGaWVsZHNcIlxyXG4gICAgICAgIFtzZXJ2aWNlQ29kZV0gPSBcIm9wdGlvbnMuc2VydmljZUNvZGVcIlxyXG4gICAgICAgIFtleHRlcm5hbFBhcmFtc10gPSBcIm9wdGlvbnMuZXh0ZXJuYWxQYXJhbXNcIlxyXG4gICAgICAgIFtleHRUYWJsZVNjaGVtYXNdID0gXCJvcHRpb25zLmV4dFRhYmxlU2NoZW1hc1wiXHJcbiAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJjb2x1bW4uZmllbGRcIlxyXG4gICAgICAgIFttYXBwaW5nVHlwZV0gPSBcIidncmlkJ1wiXHJcbiAgICAgICAgXHJcbiAgICAgID48L3dlYi1leHRlcm5hbC1pbnRlZ3JhdGlvbj5cclxuICAgIDwvZGl2PlxyXG4gIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEV4dEludGdydG5Db21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmVcclxuICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQFZpZXdDaGlsZChcImV4dEludGdydG5cIikgaW5zdGFuY2U6IEV4dGVybmFsSW50ZWdyYXRpb25Db21wb25lbnQ7XHJcbiAgXHJcbiAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2U7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZW5kZXI6IFJlbmRlcmVyMixcclxuICAgIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBydHM6IFJ1bnRpbWVTdGF0ZVNlcnZpY2UsXHJcbiAgICBpbmplY3RvcjogSW5qZWN0b3JcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5pbnB1dC5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgRXh0SW50Z3J0bkRlZmF1dE9wdGlvbiwgdGhpcy5vcHRpb25zKTtcclxuICAgIHRoaXMuY29sdW1uLmVkaXRvci5vcHRpb25zLm9uQmx1ciA9IChlKSA9PiB7XHJcbiAgICAgIGUuZWRpdG9yUmVmLnN0YXJ0UGVuZGluZygpO1xyXG4gICAgICBlLmVkaXRvclJlZi5mb3JtQ29udHJvbC5zZXRWYWx1ZSh0aGlzLmluc3RhbmNlLmZpZWxkVGV4dCk7XHJcbiAgICAgIHRoaXMuaW5zdGFuY2UuY2FsbFNhcFNlcnZpY2UoKTtcclxuICAgICAgdGhpcy5pbnN0YW5jZS5hZnRlck9uYmx1ci5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIGUuZWRpdG9yUmVmLmVuZFBlbmRpbmcoKTtcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG4gIH1cclxuXHJcblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRXh0SW50Z3J0bkRhdGFHcmlkRWRpdG9yUHJvdmlkZXIgPSB7XHJcbiAgcHJvdmlkZTogR1JJRF9FRElUT1JTLFxyXG4gIHVzZVZhbHVlOiB7IG5hbWU6IFwiZXh0ZXJuYWwtaW50ZWdyYXRpb25cIiwgdmFsdWU6IERhdGFncmlkRXh0SW50Z3J0bkNvbXBvbmVudCB9LFxyXG4gIG11bHRpOiB0cnVlXHJcbn07XHJcbiJdfQ==