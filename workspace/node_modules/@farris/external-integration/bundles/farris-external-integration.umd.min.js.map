{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/external-integration/lib/component/external-integration/grid-external-integration.component.ts","ng://@farris/external-integration/lib/component/external-integration/external-integration-service.ts","ng://@farris/external-integration/lib/component/external-integration/external-integration.component.ts","ng://@farris/external-integration/lib/directives/ext-integration-data-mapping.directive.ts","ng://@farris/external-integration/lib/external-integration.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Injector,\r\n  OnInit,\r\n  Renderer2,\r\n  ViewChild,\r\n} from \"@angular/core\";\r\nimport { RuntimeStateService } from \"@farris/ui-common\";\r\nimport { GRID_EDITORS } from \"@farris/ui-datagrid\";\r\nimport { DatagridBaseEditorDirective } from \"@farris/ui-datagrid-editors\";\r\nimport { ExternalIntegrationComponent } from \"./external-integration.component\";\r\n\r\nconst ExtIntgrtnDefautOption = {\r\n  readonly: false, // 是否只读\r\n  placeholder: \"请选择\",\r\n  viewType: \"tag\"\r\n};\r\n\r\n@Component({\r\n  selector: \"grid-external-integration\",\r\n  template: `\r\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n      <web-external-integration\r\n        #extIntgrtn\r\n        style=\"width: 100%\"\r\n        extIntegration-dataMapping\r\n        [placeholder]=\"options.placeholder\"\r\n        [readonly]=\"options.readonly\"\r\n        [mapFields]=\"options.mapFields\"\r\n        [serviceCode] = \"options.serviceCode\"\r\n        [externalParams] = \"options.externalParams\"\r\n        [extTableSchemas] = \"options.extTableSchemas\"\r\n        [formControlName]=\"column.field\"\r\n        [mappingType] = \"'grid'\"\r\n        \r\n      ></web-external-integration>\r\n    </div>\r\n  `,\r\n})\r\nexport class DatagridExtIntgrtnComponent extends DatagridBaseEditorDirective\r\n  implements OnInit, AfterViewInit {\r\n  @ViewChild(\"extIntgrtn\") instance: ExternalIntegrationComponent;\r\n  \r\n  stopPropagation = false;\r\n  constructor(\r\n    render: Renderer2,\r\n    el: ElementRef,\r\n    private rts: RuntimeStateService,\r\n    injector: Injector\r\n  ) {\r\n    super(render, el, injector);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.inputElement = this.instance.input.nativeElement;\r\n    this.options = Object.assign({}, ExtIntgrtnDefautOption, this.options);\r\n    this.column.editor.options.onBlur = (e) => {\r\n      e.editorRef.startPending();\r\n      e.editorRef.formControl.setValue(this.instance.fieldText);\r\n      this.instance.callSapService();\r\n      this.instance.afterOnblur.subscribe(() => {\r\n        e.editorRef.endPending();\r\n      })\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n\r\n}\r\n\r\nexport const ExtIntgrtnDataGridEditorProvider = {\r\n  provide: GRID_EDITORS,\r\n  useValue: { name: \"external-integration\", value: DatagridExtIntgrtnComponent },\r\n  multi: true\r\n};\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable, Output, EventEmitter } from \"@angular/core\";\r\nimport { VariableParseService, ViewModel } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class ExternalIntegrationService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private variableParseService: VariableParseService,\r\n    private vm: ViewModel\r\n  ) {}\r\n  @Output() sapData = new EventEmitter();\r\n\r\n  sapUrl = \"/api/runtime/icc/v1.0/externalServiceOpenApi/invokeService\";\r\n\r\n  /**\r\n   * 调用外部服务\r\n   */\r\n  queryExtIntegrationService(externalParams, serviceCode) {\r\n    let req = this.assembleSapRequest(externalParams, serviceCode);\r\n    this.http.post(this.sapUrl, req).subscribe(\r\n      response => {\r\n        let respObj = Object.create(response);\r\n        if (!respObj || !respObj.success) {\r\n          return;\r\n        }\r\n        let resp = Object.create(respObj);\r\n        let sapData = resp.data;\r\n        this.sapData.emit(sapData);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        this.sapData.emit({});\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 组装sap api入参\r\n   */\r\n  private assembleSapRequest(externalParams, serviceCode) {\r\n    const params = JSON.parse(JSON.stringify(externalParams));\r\n    let requestParam = {\r\n      code: serviceCode,\r\n      params: this.variableParseService.parse(params, this.vm.frameContext),\r\n    };\r\n    return requestParam;\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewContainerRef\r\n} from \"@angular/core\";\r\nimport { DialogComponent } from \"@farris/ui-dialog\";\r\nimport { VariableParseService, ViewModel } from \"@farris/devkit\";\r\nimport { ExternalIntegrationService } from \"./external-integration-service\";\r\nimport { DatagridComponent } from \"@farris/ui-datagrid\";\r\nimport {\r\n  ControlValueAccessor,\r\n  NgControl,\r\n  NG_VALUE_ACCESSOR\r\n} from \"@angular/forms\";\r\nimport { TableColumn, TableInfo } from \"./external-integration-displaytype\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { ListViewComponent } from \"@farris/ui-list-view\";\r\n\r\n@Component({\r\n  selector: \"web-external-integration\",\r\n  templateUrl: \"./external-integration.component.html\",\r\n  styleUrls: [\"./external-integration.component.scss\"],\r\n  providers: [\r\n    ExternalIntegrationService,\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ExternalIntegrationComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class ExternalIntegrationComponent\r\n  implements OnInit, OnChanges, AfterViewInit, OnDestroy, ControlValueAccessor {\r\n  /** 模态框宽 */\r\n  @Input() width: number = 960;\r\n  /** 模态框高 */\r\n  @Input() height: number = 577;\r\n  /** 服务名 */\r\n  @Input(\"serviceCode\") serviceCode: string;\r\n  /** 外部服务请求入参,表达式 */\r\n  @Input(\"externalParams\") externalParams: any;\r\n  /** form:主表回填形式,grid：子表回填形式 */\r\n  @Input(\"mappingType\") mappingType: string;\r\n  /** 映射关系 */\r\n  @Input(\"mapFields\") myField: any;\r\n  @Input() fieldText: string = \"\";\r\n  /** sap出参表信息描述 */\r\n  @Input(\"extTableSchemas\") extTableSchemas: any;\r\n\r\n  @Input() placeholder = \"请选择\";\r\n  // 是否只读\r\n  @Input() readonly = false;\r\n  // 请求前事件\r\n  @Input() beforeSapSrvc: Observable<any>;\r\n\r\n  /** 内容中留白边距 */\r\n  containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };\r\n  /** 自定义数据 */\r\n  @Input() customData: any;\r\n  /** 指令回填sap数据 */\r\n  @Output() selectSapData = new EventEmitter();\r\n  @Output() afterOnblur = new EventEmitter();\r\n  @ViewChild(\"dialog\") dialog: DialogComponent;\r\n  @ViewChild(\"input\") input: ElementRef<any>;\r\n  @ViewChild(\"girdView\", { read: ViewContainerRef }) girdView: ViewContainerRef;\r\n  @ViewChild(\"farrisListView\") farrisListView: ListViewComponent;\r\n  componentRef: ComponentRef<DatagridComponent>;\r\n\r\n  /** 多表数据集合 */\r\n  tableData: TableInfo[] = [];\r\n  /** 模态框导航栏当前选中项 */\r\n  currentLink: any = {};\r\n  /** 模态框确定按钮是否可用 */\r\n  ensureFlag: boolean = true;\r\n\r\n  ngControl: NgControl;\r\n\r\n  containerStyle = {\r\n    marginLeft: this.containerMargin.left + \"px\",\r\n    marginRight: this.containerMargin.right + \"px\",\r\n    marginTop: this.containerMargin.top + \"px\",\r\n    marginBottom: this.containerMargin.bottom + \"px\"\r\n  };\r\n\r\n  constructor(\r\n    @Optional() private vm: ViewModel,\r\n    public el: ElementRef,\r\n    private extIntgrtnSrvc: ExternalIntegrationService,\r\n    private variableParseService: VariableParseService,\r\n    private resolver: ComponentFactoryResolver,\r\n    private inj: Injector\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {}\r\n\r\n  fieldTextChange() {\r\n    const pathArr = this.getBindingPathArray();\r\n    this.vm.bindingData.setValue(\r\n      pathArr.concat(this.ngControl.name),\r\n      this.fieldText,\r\n      true,\r\n      true\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit(): void {}\r\n  ngOnDestroy(): void {}\r\n  writeValue(obj: any): void {\r\n    this.fieldText = obj;\r\n  }\r\n  registerOnChange(fn: any): void {}\r\n  registerOnTouched(fn: any): void {}\r\n  setDisabledState?(isDisabled: boolean): void {}\r\n\r\n  ngOnInit() {\r\n    this.ngControl = this.inj.get(NgControl);\r\n    // 卡片绑定onblur事件，表格再grid-external-integration中绑定onblur事件\r\n    if (this.mappingType != \"grid\") {\r\n      this.input.nativeElement.onblur = () => {\r\n        this.callSapService();\r\n      };\r\n    }\r\n\r\n    this.extIntgrtnSrvc.sapData.subscribe((data: any) => {\r\n      this.sapDataHandle(data);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 打开模态框\r\n   * @returns\r\n   */\r\n  showDialog(): any {\r\n    this.farrisListView.listClick.emit({\r\n      data: [this.tableData[0]],\r\n      index: 0,\r\n      checkChangeEvent: false\r\n    });\r\n    this.farrisListView.clickItem = this.tableData[0];\r\n    this.dialog.show();\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 调用sap外部服务，出参在ngOninit监听\r\n   */\r\n  callSapService() {\r\n    this.fieldTextChange();\r\n    this.extIntgrtnSrvc.queryExtIntegrationService(\r\n      this.externalParams,\r\n      this.serviceCode\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 处理sap出参\r\n   * @param data sap出参\r\n   */\r\n  sapDataHandle(data) {\r\n    if (!data) {\r\n      return;\r\n    }\r\n    let tableNameList = Object.keys(data);\r\n    let mapTableList = this.getTableListFromMapFields();\r\n    // 取交集\r\n    tableNameList = tableNameList.filter(item => {\r\n      return mapTableList.indexOf(item) != -1;\r\n    });\r\n    // 多表场景\r\n    if (tableNameList.length > 1) {\r\n      // 校验是否弹出模态框\r\n      let openDialogFlag = this.checkMultiTableData(data, tableNameList);\r\n      if (openDialogFlag == \"open\") {\r\n        // 组装模态框数据\r\n        this.assembleTableData(data);\r\n        this.showDialog();\r\n      } else if (openDialogFlag == \"backfill\") {\r\n        // 多表，每个表只有一条数据\r\n        let backfillData: any = {};\r\n        tableNameList.forEach(tableName => {\r\n          Object.assign(\r\n            backfillData,\r\n            this.assembleSapData(tableName, data[tableName][0])\r\n          );\r\n        });\r\n        this.sendSapData(backfillData);\r\n      } else {\r\n        // 多表无数据\r\n        this.sendSapData();\r\n      }\r\n    } else if (tableNameList.length == 1) {\r\n      let tableName = tableNameList[0];\r\n      let sapDataLength = (data[tableName] || []).length;\r\n      if (sapDataLength > 0) {\r\n        if (sapDataLength == 1) {\r\n          // 一个表只有一条数据\r\n          let sapData = this.assembleSapData(tableName, data[tableName][0]);\r\n          this.sendSapData(sapData);\r\n        } else if (sapDataLength > 1) {\r\n          // 一个表有多条数据\r\n          this.assembleTableData(data);\r\n          this.showDialog();\r\n          return;\r\n        }\r\n      }\r\n    } else {\r\n      // 处理查询异常，editor没有endPending\r\n      this.sendSapData();\r\n    }\r\n  }\r\n\r\n  checkMultiTableData(data, tableNameList) {\r\n    let openDialogFlag = \"\";\r\n    for (let index = 0; index < tableNameList.length; index++) {\r\n      let tableName = tableNameList[index];\r\n      if (data[tableName].length > 1) {\r\n        openDialogFlag = \"open\";\r\n        break;\r\n      } else if (data[tableName].length == 0 && openDialogFlag != \"backfill\") {\r\n        openDialogFlag = \"none\";\r\n        continue;\r\n      }\r\n      openDialogFlag = \"backfill\";\r\n    }\r\n    return openDialogFlag;\r\n  }\r\n\r\n  /**\r\n   * 组装模态框数据\r\n   * @param data sap出参\r\n   */\r\n  assembleTableData(data) {\r\n    let tableNameList = Object.keys(data);\r\n    let mapTableList = this.getTableListFromMapFields();\r\n    // 取交集\r\n    mapTableList = mapTableList.filter(item => {\r\n      return tableNameList.indexOf(item) != -1;\r\n    });\r\n    if (mapTableList.length > 0) {\r\n      // 遍历sap映射表，组装表及对应数据\r\n      mapTableList.forEach(mapTable => {\r\n        // 组装模态框中单表数据\r\n        let tableInfo = this.assembleTableInfo(mapTable, data);\r\n        if (\r\n          tableInfo &&\r\n          Object.keys(tableInfo).length > 0 &&\r\n          (tableInfo.data || []).length > 0\r\n        ) {\r\n          this.tableData.push(tableInfo);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getTableListFromMapFields() {\r\n    // 获取需要回填的表\r\n    let mapKeyList = Object.keys(this.myField);\r\n    // 定义sap映射表集合\r\n    let mapTableList = [];\r\n    (mapKeyList || []).forEach(mapKey => {\r\n      // 在映射关系中获取sap出参中的表集合\r\n      mapTableList.push(mapKey.split(\".\")[0]);\r\n    });\r\n    // 去重\r\n    mapTableList = Array.from(new Set(mapTableList));\r\n    return mapTableList;\r\n  }\r\n\r\n  /**\r\n   * 组装模态框中单表数据\r\n   * @param mapTable 表名\r\n   * @param data sap出参\r\n   * @returns 模态框单表数据对象\r\n   */\r\n  assembleTableInfo(mapTable, data) {\r\n    // 模态框单表数据对象\r\n    let tableInfo: TableInfo = {\r\n\r\n    };\r\n    // 表头集合\r\n    let tableColumnList = [];\r\n    // 遍历sap出参表信息，获取表头中文、表名\r\n    (this.extTableSchemas || []).forEach(tableSchema => {\r\n      if (tableSchema.code == mapTable) {\r\n        tableInfo.name = tableSchema.name;\r\n        // 模拟主键，保证farris-grid组件【单选】功能正常\r\n        let idColumn: TableColumn = {};\r\n        idColumn.field = \"id\";\r\n        idColumn.title = \"序号\";\r\n        tableColumnList.push(idColumn);\r\n        // 组装表头\r\n        tableSchema.columns.forEach(column => {\r\n          let tableColumn: TableColumn = {};\r\n          tableColumn.field = column.code;\r\n          tableColumn.title = column.name;\r\n          tableColumnList.push(tableColumn);\r\n        });\r\n        tableInfo.columns = tableColumnList;\r\n        tableInfo.code = mapTable;\r\n        // 给表数据增加模拟主键\r\n        (data[mapTable] || []).forEach((item, index) => {\r\n          item[\"id\"] = index + 1;\r\n        });\r\n        tableInfo.data = data[mapTable];\r\n      }\r\n    });\r\n    return tableInfo;\r\n  }\r\n\r\n  /**\r\n   * 导航栏点击事件\r\n   * @param event 导航栏信息\r\n   * @returns\r\n   */\r\n  listClick(event) {\r\n    let clickData = event.data;\r\n    if (event.data.disable) {\r\n      return false;\r\n    } else {\r\n      if (typeof this.currentLink[\"data\"] !== \"undefined\") {\r\n        if (clickData[0].code === this.currentLink[\"data\"][0].code) {\r\n          return false;\r\n        } else {\r\n          this.currentLink = event;\r\n        }\r\n      } else {\r\n        this.currentLink = event;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 模态框，确定，取消按钮\r\n   * @param flag ensure:确定按钮，cancel：取消按钮\r\n   */\r\n\r\n  confirm(flag) {\r\n    // 点击确定按钮\r\n    if (flag == \"ensure\") {\r\n      let sapData: any = {};\r\n      // 遍历模态框表数据，组装回填数据\r\n      for (let index = 0; index < this.tableData.length; index++) {\r\n        let tableInfo = this.tableData[index];\r\n        Object.assign(\r\n          sapData,\r\n          this.assembleSapData(tableInfo.code, tableInfo.selectedData.data)\r\n        );\r\n      }\r\n      this.sendSapData(sapData);\r\n    }\r\n    // 清空模态框数据\r\n    this.tableData = [];\r\n    // 关闭模态框\r\n    this.dialog.close();\r\n  }\r\n\r\n  beforeClose = () => {\r\n    this.tableData = [];\r\n    this.ensureFlag = true;\r\n    this.sendSapData();\r\n    return of(true);\r\n  };\r\n\r\n  /**\r\n   * 选中一行事件\r\n   * @param selectedRow 选中行数据\r\n   * @param tableName 当前表格对应表名\r\n   */\r\n  selectRowChange(selectedRow, tableName) {\r\n    this.tableData.forEach(tableInfo => {\r\n      if (tableInfo.code == tableName) {\r\n        tableInfo.selectedData = selectedRow;\r\n      }\r\n    });\r\n    this.setEnsureButtonFlag();\r\n  }\r\n\r\n  /**\r\n   * 取消一行事件\r\n   * @param selectedRow 被取消行数据\r\n   * @param tableName 当前表格对应表名\r\n   */\r\n  unSelect(selectedRow, tableName) {\r\n    this.tableData.forEach(tableInfo => {\r\n      if (tableInfo.code == tableName) {\r\n        tableInfo.selectedData = null;\r\n        tableInfo.selectedValue = \"\";\r\n      }\r\n    });\r\n    selectedRow = null;\r\n    this.setEnsureButtonFlag();\r\n  }\r\n\r\n  /**\r\n   * 设置模态框确定按钮是否可用\r\n   */\r\n  setEnsureButtonFlag() {\r\n    let flag = false;\r\n    for (let index = 0; index < this.tableData.length; index++) {\r\n      let tableInfo = this.tableData[index];\r\n      if (!tableInfo.selectedData) {\r\n        flag = true;\r\n        break;\r\n      }\r\n    }\r\n    this.ensureFlag = flag;\r\n  }\r\n\r\n  /**\r\n   * 组装sap回填数据\r\n   * @param tableName 表名\r\n   * @param tableData 表数据\r\n   * @returns (表名.表字段名:表数据):Object\r\n   */\r\n  assembleSapData(tableName, tableData) {\r\n    if (!tableName || !tableData) {\r\n      return;\r\n    }\r\n    // sap回填数据\r\n    let sapData: any = {};\r\n    // 表字段名集合\r\n    let tableDataItemKeys = Object.keys(tableData);\r\n    for (let index = 0; index < tableDataItemKeys.length; index++) {\r\n      let itemKey = tableDataItemKeys[index];\r\n      // sap回填数据key= 表名.表字段名\r\n      let key = tableName + \".\" + itemKey;\r\n      sapData[key] = tableData[itemKey];\r\n    }\r\n    return sapData;\r\n  }\r\n\r\n  /**\r\n   * 回填sap数据\r\n   * @param sapData 将要回填的sap数据\r\n   */\r\n  private sendSapData(sapData?) {\r\n    if (sapData) {\r\n      this.selectSapData.emit(sapData);\r\n    }\r\n    // 子表关闭editor状态\r\n    if (this.mappingType == \"grid\") {\r\n      this.afterOnblur.emit();\r\n    }\r\n  }\r\n\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.vm.bindingPath;\r\n    if (path) {\r\n      return path.split(\"/\").filter(n => n !== \"\");\r\n    }\r\n    return [];\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output\r\n} from \"@angular/core\";\r\nimport {  ViewModel } from \"@farris/devkit\";\r\nimport { ExternalIntegrationComponent } from \"../../lib/component/external-integration/external-integration.component\";\r\n@Directive({\r\n  selector: \"[extIntegration-dataMapping]\",\r\n  \r\n})\r\nexport class ExtIntegrationDataMappingDirective {\r\n  @Input(\"mapFields\") myField: any;\r\n  @Output() showModal = new EventEmitter();\r\n  constructor(\r\n    @Optional() private vm: ViewModel,\r\n    private extIntegrationComponent: ExternalIntegrationComponent\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.extIntegrationComponent.selectSapData.subscribe((data:any) => {\r\n      this.mappingData(data, this.myField);\r\n    })\r\n  }\r\n\r\n  \r\n  /**\r\n   * 字段映射\r\n   * @param sapData sap返回信息\r\n   * @param mappingField 映射关系\r\n   */\r\n  mappingData(sapData, mappingField) {\r\n    let helpFields = Object.keys(mappingField);\r\n    helpFields.forEach((fieldName: any) => {\r\n      let pathArr = this.getBindingPathArray();\r\n      // 获取字段值\r\n      let val: any;\r\n      if (sapData) {\r\n        val = sapData[fieldName];\r\n      }\r\n      this.vm.bindingData.setValue(\r\n        pathArr.concat(mappingField[fieldName]),\r\n        val,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n  }\r\n\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.vm.bindingPath;\r\n    if (path) {\r\n      return path.split(\"/\").filter((n) => n !== \"\");\r\n    }\r\n    return [];\r\n  }\r\n\r\n  \r\n}\r\n","import {\r\n  ComponentRef,\r\n  ElementRef,\r\n  NgModule,\r\n  ViewContainerRef\r\n} from \"@angular/core\";\r\nimport { ExtIntegrationDataMappingDirective } from \"./directives/ext-integration-data-mapping.directive\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { DialogService, FarrisDialogModule } from \"@farris/ui-dialog\";\r\nimport { BsModalService, ModalDirective, ModalModule } from \"@farris/ui-modal\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { LocaleModule } from \"@farris/ui-locale\";\r\nimport { PerfectScrollbarModule } from \"@farris/ui-perfect-scrollbar\";\r\nimport { TreeModule } from \"@farris/ui-tree\";\r\nimport { FarrisTabsModule } from \"@farris/ui-tabs\";\r\nimport { FarrisCommonModule } from \"@farris/ui-common\";\r\nimport { FarrisFormsModule } from \"@farris/ui-forms\";\r\nimport { ExternalIntegrationComponent } from \"./component/external-integration/external-integration.component\";\r\nimport { TextModule } from \"@farris/ui-text\";\r\nimport { MessagerModule } from \"@farris/ui-messager\";\r\nimport { NotifyModule } from \"@farris/ui-notify\";\r\nimport { LayoutModule } from \"@farris/ui-layout\";\r\nimport { DatagridComponent, DatagridModule } from '@farris/ui-datagrid';\r\nimport { DatagridExtIntgrtnComponent  } from \"./component/external-integration/grid-external-integration.component\";\r\nimport { InputGroupModule } from \"@farris/ui-input-group\";\r\nimport { FormMessageModule } from '@farris/ui-forms/validation-message';\r\nimport { ListNavModule } from '@farris/ui-list-nav';\r\nimport { ListViewModule } from '@farris/ui-list-view'\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ExtIntegrationDataMappingDirective,\r\n    ExternalIntegrationComponent,\r\n    DatagridExtIntgrtnComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ListViewModule,\r\n    RouterModule,\r\n    ListNavModule,\r\n    InputGroupModule,\r\n    TextModule,\r\n    HttpClientModule,\r\n    FormMessageModule,\r\n    PerfectScrollbarModule,\r\n    TreeModule,\r\n    FarrisTabsModule,\r\n    FarrisFormsModule,\r\n    FormsModule,\r\n    FarrisCommonModule.forRoot(),\r\n    FarrisDialogModule.forRoot(),\r\n    MessagerModule.forRoot(),\r\n    NotifyModule.forRoot(),\r\n    LayoutModule,\r\n    LocaleModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    DatagridModule\r\n  ],\r\n  providers: [ BsModalService, DialogService ],\r\n  entryComponents: [DatagridExtIntgrtnComponent, DatagridComponent],\r\n  exports: [\r\n    ExtIntegrationDataMappingDirective,\r\n    ExternalIntegrationComponent,\r\n    DatagridExtIntgrtnComponent\r\n  ]\r\n})\r\nexport class ExternalIntegrationModule {}\r\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_super","ExtIntgrtnDefautOption","readonly","placeholder","viewType","DatagridExtIntgrtnComponent","DatagridBaseEditorDirective","tslib_1.__extends","prototype","create","__","ngOnInit","_this","this","call","inputElement","instance","input","nativeElement","options","assign","column","editor","onBlur","e","editorRef","startPending","formControl","setValue","fieldText","callSapService","afterOnblur","subscribe","endPending","ngAfterViewInit","Component","args","selector","template","Renderer2","ElementRef","RuntimeStateService","Injector","ViewChild","constructor","render","el","rts","injector","stopPropagation","ExtIntgrtnDataGridEditorProvider","provide","GRID_EDITORS","useValue","name","value","multi","ExternalIntegrationService","queryExtIntegrationService","externalParams","serviceCode","req","assembleSapRequest","http","post","sapUrl","response","respObj","success","sapData","data","emit","error","console","log","params","JSON","parse","stringify","code","variableParseService","vm","frameContext","Injectable","HttpClient","VariableParseService","ViewModel","Output","EventEmitter","ExternalIntegrationComponent","ngOnChanges","changes","fieldTextChange","pathArr","getBindingPathArray","bindingData","concat","ngControl","ngOnDestroy","writeValue","obj","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","inj","get","NgControl","mappingType","onblur","extIntgrtnSrvc","sapDataHandle","showDialog","farrisListView","listClick","tableData","index","checkChangeEvent","clickItem","dialog","show","mapTableList","backfillData_1","tableNameList","keys","getTableListFromMapFields","filter","item","indexOf","length","openDialogFlag","checkMultiTableData","assembleTableData","forEach","tableName","assembleSapData","sendSapData","sapDataLength","mapTable","tableInfo","assembleTableInfo","push","mapKeyList","myField","mapKey","split","from","Set","tableColumnList","extTableSchemas","tableSchema","field","title","columns","tableColumn","event","clickData","disable","currentLink","confirm","flag","selectedData","close","selectRowChange","selectedRow","setEnsureButtonFlag","unSelect","selectedValue","ensureFlag","tableDataItemKeys","itemKey","selectSapData","path","bindingPath","n","providers","NG_VALUE_ACCESSOR","useExisting","forwardRef","decorators","type","Optional","ComponentFactoryResolver","Input","read","ViewContainerRef","resolver","width","height","containerMargin","top","bottom","left","right","containerStyle","marginLeft","marginRight","marginTop","marginBottom","beforeClose","of","ExtIntegrationDataMappingDirective","extIntegrationComponent","mappingData","mappingField","fieldName","val","Directive","showModal","NgModule","declarations","imports","CommonModule","ReactiveFormsModule","ListViewModule","RouterModule","ListNavModule","InputGroupModule","TextModule","HttpClientModule","FormMessageModule","PerfectScrollbarModule","TreeModule","FarrisTabsModule","FarrisFormsModule","FormsModule","FarrisCommonModule","forRoot","FarrisDialogModule","MessagerModule","NotifyModule","LayoutModule","LocaleModule","ModalModule","DatagridModule","BsModalService","DialogService","entryComponents","DatagridComponent","exports","ExternalIntegrationModule"],"mappings":"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"}