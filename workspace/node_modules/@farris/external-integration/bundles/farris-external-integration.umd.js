(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-datagrid-editors'), require('@angular/core'), require('@farris/devkit'), require('rxjs'), require('@angular/common'), require('@farris/ui-dialog'), require('@farris/ui-modal'), require('@angular/common/http'), require('@angular/forms'), require('@farris/ui-locale'), require('@farris/ui-perfect-scrollbar'), require('@farris/ui-tree'), require('@farris/ui-tabs'), require('@farris/ui-common'), require('@farris/ui-forms'), require('@farris/ui-text'), require('@farris/ui-messager'), require('@farris/ui-notify'), require('@farris/ui-layout'), require('@farris/ui-datagrid'), require('@farris/ui-input-group'), require('@farris/ui-forms/validation-message'), require('@farris/ui-list-nav'), require('@farris/ui-list-view'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@farris/external-integration', ['exports', '@farris/ui-datagrid-editors', '@angular/core', '@farris/devkit', 'rxjs', '@angular/common', '@farris/ui-dialog', '@farris/ui-modal', '@angular/common/http', '@angular/forms', '@farris/ui-locale', '@farris/ui-perfect-scrollbar', '@farris/ui-tree', '@farris/ui-tabs', '@farris/ui-common', '@farris/ui-forms', '@farris/ui-text', '@farris/ui-messager', '@farris/ui-notify', '@farris/ui-layout', '@farris/ui-datagrid', '@farris/ui-input-group', '@farris/ui-forms/validation-message', '@farris/ui-list-nav', '@farris/ui-list-view', '@angular/router'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['external-integration'] = {}),global.uiDatagridEditors,global.ng.core,global.devkit,global.rxjs,global.ng.common,global.uiDialog,global.uiModal,global.ng.common.http,global.ng.forms,global.uiLocale,global.uiPerfectScrollbar,global.uiTree,global.uiTabs,global.uiCommon,global.uiForms,global.uiText,global.uiMessager,global.uiNotify,global.uiLayout,global.uiDatagrid,global.uiInputGroup,global.validationMessage,global.uiListNav,global.uiListView,global.ng.router));
}(this, (function (exports,uiDatagridEditors,core,devkit,rxjs,common,uiDialog,uiModal,http,forms,uiLocale,uiPerfectScrollbar,uiTree,uiTabs,uiCommon,uiForms,uiText,uiMessager,uiNotify,uiLayout,uiDatagrid,uiInputGroup,validationMessage,uiListNav,uiListView,router) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/component/external-integration/grid-external-integration.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ExtIntgrtnDefautOption = {
        readonly: false,
        // 是否只读
        placeholder: "请选择",
        viewType: "tag"
    };
    var DatagridExtIntgrtnComponent = /** @class */ (function (_super) {
        __extends(DatagridExtIntgrtnComponent, _super);
        function DatagridExtIntgrtnComponent(render, el, rts, injector) {
            var _this = _super.call(this, render, el, injector) || this;
            _this.rts = rts;
            _this.stopPropagation = false;
            return _this;
        }
        /**
         * @return {?}
         */
        DatagridExtIntgrtnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                this.inputElement = this.instance.input.nativeElement;
                this.options = Object.assign({}, ExtIntgrtnDefautOption, this.options);
                this.column.editor.options.onBlur = ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    e.editorRef.startPending();
                    e.editorRef.formControl.setValue(_this.instance.fieldText);
                    _this.instance.callSapService();
                    _this.instance.afterOnblur.subscribe(( /**
                     * @return {?}
                     */function () {
                        e.editorRef.endPending();
                    }));
                });
            };
        /**
         * @return {?}
         */
        DatagridExtIntgrtnComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngAfterViewInit.call(this);
            };
        DatagridExtIntgrtnComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "grid-external-integration",
                        template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n      <web-external-integration\n        #extIntgrtn\n        style=\"width: 100%\"\n        extIntegration-dataMapping\n        [placeholder]=\"options.placeholder\"\n        [readonly]=\"options.readonly\"\n        [mapFields]=\"options.mapFields\"\n        [serviceCode] = \"options.serviceCode\"\n        [externalParams] = \"options.externalParams\"\n        [extTableSchemas] = \"options.extTableSchemas\"\n        [formControlName]=\"column.field\"\n        [mappingType] = \"'grid'\"\n        \n      ></web-external-integration>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        DatagridExtIntgrtnComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.ElementRef },
                { type: uiCommon.RuntimeStateService },
                { type: core.Injector }
            ];
        };
        DatagridExtIntgrtnComponent.propDecorators = {
            instance: [{ type: core.ViewChild, args: ["extIntgrtn",] }]
        };
        return DatagridExtIntgrtnComponent;
    }(uiDatagridEditors.DatagridBaseEditorDirective));
    /** @type {?} */
    var ExtIntgrtnDataGridEditorProvider = {
        provide: uiDatagrid.GRID_EDITORS,
        useValue: { name: "external-integration", value: DatagridExtIntgrtnComponent },
        multi: true
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/component/external-integration/external-integration-service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExternalIntegrationService = /** @class */ (function () {
        function ExternalIntegrationService(http$$1, variableParseService, vm) {
            this.http = http$$1;
            this.variableParseService = variableParseService;
            this.vm = vm;
            this.sapData = new core.EventEmitter();
            this.sapUrl = "/api/runtime/icc/v1.0/externalServiceOpenApi/invokeService";
        }
        /**
         * 调用外部服务
         */
        /**
         * 调用外部服务
         * @param {?} externalParams
         * @param {?} serviceCode
         * @return {?}
         */
        ExternalIntegrationService.prototype.queryExtIntegrationService = /**
         * 调用外部服务
         * @param {?} externalParams
         * @param {?} serviceCode
         * @return {?}
         */
            function (externalParams, serviceCode) {
                var _this = this;
                /** @type {?} */
                var req = this.assembleSapRequest(externalParams, serviceCode);
                this.http.post(this.sapUrl, req).subscribe(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    /** @type {?} */
                    var respObj = Object.create(response);
                    if (!respObj || !respObj.success) {
                        return;
                    }
                    /** @type {?} */
                    var resp = Object.create(respObj);
                    /** @type {?} */
                    var sapData = resp.data;
                    _this.sapData.emit(sapData);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    console.log(error);
                    _this.sapData.emit({});
                }));
            };
        /**
         * 组装sap api入参
         */
        /**
         * 组装sap api入参
         * @private
         * @param {?} externalParams
         * @param {?} serviceCode
         * @return {?}
         */
        ExternalIntegrationService.prototype.assembleSapRequest = /**
         * 组装sap api入参
         * @private
         * @param {?} externalParams
         * @param {?} serviceCode
         * @return {?}
         */
            function (externalParams, serviceCode) {
                /** @type {?} */
                var params = JSON.parse(JSON.stringify(externalParams));
                /** @type {?} */
                var requestParam = {
                    code: serviceCode,
                    params: this.variableParseService.parse(params, this.vm.frameContext),
                };
                return requestParam;
            };
        ExternalIntegrationService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ExternalIntegrationService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: devkit.VariableParseService },
                { type: devkit.ViewModel }
            ];
        };
        ExternalIntegrationService.propDecorators = {
            sapData: [{ type: core.Output }]
        };
        return ExternalIntegrationService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/component/external-integration/external-integration.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExternalIntegrationComponent = /** @class */ (function () {
        function ExternalIntegrationComponent(vm, el, extIntgrtnSrvc, variableParseService, resolver, inj) {
            var _this = this;
            this.vm = vm;
            this.el = el;
            this.extIntgrtnSrvc = extIntgrtnSrvc;
            this.variableParseService = variableParseService;
            this.resolver = resolver;
            this.inj = inj;
            /**
             * 模态框宽
             */
            this.width = 960;
            /**
             * 模态框高
             */
            this.height = 577;
            this.fieldText = "";
            this.placeholder = "请选择";
            // 是否只读
            this.readonly = false;
            /**
             * 内容中留白边距
             */
            this.containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };
            /**
             * 指令回填sap数据
             */
            this.selectSapData = new core.EventEmitter();
            this.afterOnblur = new core.EventEmitter();
            /**
             * 多表数据集合
             */
            this.tableData = [];
            /**
             * 模态框导航栏当前选中项
             */
            this.currentLink = {};
            /**
             * 模态框确定按钮是否可用
             */
            this.ensureFlag = true;
            this.containerStyle = {
                marginLeft: this.containerMargin.left + "px",
                marginRight: this.containerMargin.right + "px",
                marginTop: this.containerMargin.top + "px",
                marginBottom: this.containerMargin.bottom + "px"
            };
            this.beforeClose = ( /**
             * @return {?}
             */function () {
                _this.tableData = [];
                _this.ensureFlag = true;
                _this.sendSapData();
                return rxjs.of(true);
            });
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) { };
        /**
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.fieldTextChange = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var pathArr = this.getBindingPathArray();
                this.vm.bindingData.setValue(pathArr.concat(this.ngControl.name), this.fieldText, true, true);
            };
        /**
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} obj
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                this.fieldText = obj;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) { };
        /**
         * @param {?} fn
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) { };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) { };
        /**
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngControl = this.inj.get(forms.NgControl);
                // 卡片绑定onblur事件，表格再grid-external-integration中绑定onblur事件
                if (this.mappingType != "grid") {
                    this.input.nativeElement.onblur = ( /**
                     * @return {?}
                     */function () {
                        _this.callSapService();
                    });
                }
                this.extIntgrtnSrvc.sapData.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.sapDataHandle(data);
                }));
            };
        /**
         * 打开模态框
         * @returns
         */
        /**
         * 打开模态框
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.showDialog = /**
         * 打开模态框
         * @return {?}
         */
            function () {
                this.farrisListView.listClick.emit({
                    data: [this.tableData[0]],
                    index: 0,
                    checkChangeEvent: false
                });
                this.farrisListView.clickItem = this.tableData[0];
                this.dialog.show();
                return false;
            };
        /**
         * 调用sap外部服务，出参在ngOninit监听
         */
        /**
         * 调用sap外部服务，出参在ngOninit监听
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.callSapService = /**
         * 调用sap外部服务，出参在ngOninit监听
         * @return {?}
         */
            function () {
                this.fieldTextChange();
                this.extIntgrtnSrvc.queryExtIntegrationService(this.externalParams, this.serviceCode);
            };
        /**
         * 处理sap出参
         * @param data sap出参
         */
        /**
         * 处理sap出参
         * @param {?} data sap出参
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.sapDataHandle = /**
         * 处理sap出参
         * @param {?} data sap出参
         * @return {?}
         */
            function (data) {
                var _this = this;
                if (!data) {
                    return;
                }
                /** @type {?} */
                var tableNameList = Object.keys(data);
                /** @type {?} */
                var mapTableList = this.getTableListFromMapFields();
                // 取交集
                tableNameList = tableNameList.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    return mapTableList.indexOf(item) != -1;
                }));
                // 多表场景
                if (tableNameList.length > 1) {
                    // 校验是否弹出模态框
                    /** @type {?} */
                    var openDialogFlag = this.checkMultiTableData(data, tableNameList);
                    if (openDialogFlag == "open") {
                        // 组装模态框数据
                        this.assembleTableData(data);
                        this.showDialog();
                    }
                    else if (openDialogFlag == "backfill") {
                        // 多表，每个表只有一条数据
                        /** @type {?} */
                        var backfillData_1 = {};
                        tableNameList.forEach(( /**
                         * @param {?} tableName
                         * @return {?}
                         */function (tableName) {
                            Object.assign(backfillData_1, _this.assembleSapData(tableName, data[tableName][0]));
                        }));
                        this.sendSapData(backfillData_1);
                    }
                    else {
                        // 多表无数据
                        this.sendSapData();
                    }
                }
                else if (tableNameList.length == 1) {
                    /** @type {?} */
                    var tableName = tableNameList[0];
                    /** @type {?} */
                    var sapDataLength = (data[tableName] || []).length;
                    if (sapDataLength > 0) {
                        if (sapDataLength == 1) {
                            // 一个表只有一条数据
                            /** @type {?} */
                            var sapData = this.assembleSapData(tableName, data[tableName][0]);
                            this.sendSapData(sapData);
                        }
                        else if (sapDataLength > 1) {
                            // 一个表有多条数据
                            this.assembleTableData(data);
                            this.showDialog();
                            return;
                        }
                    }
                }
                else {
                    // 处理查询异常，editor没有endPending
                    this.sendSapData();
                }
            };
        /**
         * @param {?} data
         * @param {?} tableNameList
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.checkMultiTableData = /**
         * @param {?} data
         * @param {?} tableNameList
         * @return {?}
         */
            function (data, tableNameList) {
                /** @type {?} */
                var openDialogFlag = "";
                for (var index = 0; index < tableNameList.length; index++) {
                    /** @type {?} */
                    var tableName = tableNameList[index];
                    if (data[tableName].length > 1) {
                        openDialogFlag = "open";
                        break;
                    }
                    else if (data[tableName].length == 0 && openDialogFlag != "backfill") {
                        openDialogFlag = "none";
                        continue;
                    }
                    openDialogFlag = "backfill";
                }
                return openDialogFlag;
            };
        /**
         * 组装模态框数据
         * @param data sap出参
         */
        /**
         * 组装模态框数据
         * @param {?} data sap出参
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.assembleTableData = /**
         * 组装模态框数据
         * @param {?} data sap出参
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var tableNameList = Object.keys(data);
                /** @type {?} */
                var mapTableList = this.getTableListFromMapFields();
                // 取交集
                mapTableList = mapTableList.filter(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    return tableNameList.indexOf(item) != -1;
                }));
                if (mapTableList.length > 0) {
                    // 遍历sap映射表，组装表及对应数据
                    mapTableList.forEach(( /**
                     * @param {?} mapTable
                     * @return {?}
                     */function (mapTable) {
                        // 组装模态框中单表数据
                        /** @type {?} */
                        var tableInfo = _this.assembleTableInfo(mapTable, data);
                        if (tableInfo &&
                            Object.keys(tableInfo).length > 0 &&
                            (tableInfo.data || []).length > 0) {
                            _this.tableData.push(tableInfo);
                        }
                    }));
                }
            };
        /**
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.getTableListFromMapFields = /**
         * @return {?}
         */
            function () {
                // 获取需要回填的表
                /** @type {?} */
                var mapKeyList = Object.keys(this.myField);
                // 定义sap映射表集合
                /** @type {?} */
                var mapTableList = [];
                (mapKeyList || []).forEach(( /**
                 * @param {?} mapKey
                 * @return {?}
                 */function (mapKey) {
                    // 在映射关系中获取sap出参中的表集合
                    mapTableList.push(mapKey.split(".")[0]);
                }));
                // 去重
                mapTableList = Array.from(new Set(mapTableList));
                return mapTableList;
            };
        /**
         * 组装模态框中单表数据
         * @param mapTable 表名
         * @param data sap出参
         * @returns 模态框单表数据对象
         */
        /**
         * 组装模态框中单表数据
         * @param {?} mapTable 表名
         * @param {?} data sap出参
         * @return {?} 模态框单表数据对象
         */
        ExternalIntegrationComponent.prototype.assembleTableInfo = /**
         * 组装模态框中单表数据
         * @param {?} mapTable 表名
         * @param {?} data sap出参
         * @return {?} 模态框单表数据对象
         */
            function (mapTable, data) {
                // 模态框单表数据对象
                /** @type {?} */
                var tableInfo = {};
                // 表头集合
                /** @type {?} */
                var tableColumnList = [];
                // 遍历sap出参表信息，获取表头中文、表名
                (this.extTableSchemas || []).forEach(( /**
                 * @param {?} tableSchema
                 * @return {?}
                 */function (tableSchema) {
                    if (tableSchema.code == mapTable) {
                        tableInfo.name = tableSchema.name;
                        // 模拟主键，保证farris-grid组件【单选】功能正常
                        /** @type {?} */
                        var idColumn = {};
                        idColumn.field = "id";
                        idColumn.title = "序号";
                        tableColumnList.push(idColumn);
                        // 组装表头
                        tableSchema.columns.forEach(( /**
                         * @param {?} column
                         * @return {?}
                         */function (column) {
                            /** @type {?} */
                            var tableColumn = {};
                            tableColumn.field = column.code;
                            tableColumn.title = column.name;
                            tableColumnList.push(tableColumn);
                        }));
                        tableInfo.columns = tableColumnList;
                        tableInfo.code = mapTable;
                        // 给表数据增加模拟主键
                        (data[mapTable] || []).forEach(( /**
                         * @param {?} item
                         * @param {?} index
                         * @return {?}
                         */function (item, index) {
                            item["id"] = index + 1;
                        }));
                        tableInfo.data = data[mapTable];
                    }
                }));
                return tableInfo;
            };
        /**
         * 导航栏点击事件
         * @param event 导航栏信息
         * @returns
         */
        /**
         * 导航栏点击事件
         * @param {?} event 导航栏信息
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.listClick = /**
         * 导航栏点击事件
         * @param {?} event 导航栏信息
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var clickData = event.data;
                if (event.data.disable) {
                    return false;
                }
                else {
                    if (typeof this.currentLink["data"] !== "undefined") {
                        if (clickData[0].code === this.currentLink["data"][0].code) {
                            return false;
                        }
                        else {
                            this.currentLink = event;
                        }
                    }
                    else {
                        this.currentLink = event;
                    }
                }
            };
        /**
         * 模态框，确定，取消按钮
         * @param flag ensure:确定按钮，cancel：取消按钮
         */
        /**
         * 模态框，确定，取消按钮
         * @param {?} flag ensure:确定按钮，cancel：取消按钮
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.confirm = /**
         * 模态框，确定，取消按钮
         * @param {?} flag ensure:确定按钮，cancel：取消按钮
         * @return {?}
         */
            function (flag) {
                // 点击确定按钮
                if (flag == "ensure") {
                    /** @type {?} */
                    var sapData = {};
                    // 遍历模态框表数据，组装回填数据
                    for (var index = 0; index < this.tableData.length; index++) {
                        /** @type {?} */
                        var tableInfo = this.tableData[index];
                        Object.assign(sapData, this.assembleSapData(tableInfo.code, tableInfo.selectedData.data));
                    }
                    this.sendSapData(sapData);
                }
                // 清空模态框数据
                this.tableData = [];
                // 关闭模态框
                this.dialog.close();
            };
        /**
         * 选中一行事件
         * @param selectedRow 选中行数据
         * @param tableName 当前表格对应表名
         */
        /**
         * 选中一行事件
         * @param {?} selectedRow 选中行数据
         * @param {?} tableName 当前表格对应表名
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.selectRowChange = /**
         * 选中一行事件
         * @param {?} selectedRow 选中行数据
         * @param {?} tableName 当前表格对应表名
         * @return {?}
         */
            function (selectedRow, tableName) {
                this.tableData.forEach(( /**
                 * @param {?} tableInfo
                 * @return {?}
                 */function (tableInfo) {
                    if (tableInfo.code == tableName) {
                        tableInfo.selectedData = selectedRow;
                    }
                }));
                this.setEnsureButtonFlag();
            };
        /**
         * 取消一行事件
         * @param selectedRow 被取消行数据
         * @param tableName 当前表格对应表名
         */
        /**
         * 取消一行事件
         * @param {?} selectedRow 被取消行数据
         * @param {?} tableName 当前表格对应表名
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.unSelect = /**
         * 取消一行事件
         * @param {?} selectedRow 被取消行数据
         * @param {?} tableName 当前表格对应表名
         * @return {?}
         */
            function (selectedRow, tableName) {
                this.tableData.forEach(( /**
                 * @param {?} tableInfo
                 * @return {?}
                 */function (tableInfo) {
                    if (tableInfo.code == tableName) {
                        tableInfo.selectedData = null;
                        tableInfo.selectedValue = "";
                    }
                }));
                selectedRow = null;
                this.setEnsureButtonFlag();
            };
        /**
         * 设置模态框确定按钮是否可用
         */
        /**
         * 设置模态框确定按钮是否可用
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.setEnsureButtonFlag = /**
         * 设置模态框确定按钮是否可用
         * @return {?}
         */
            function () {
                /** @type {?} */
                var flag = false;
                for (var index = 0; index < this.tableData.length; index++) {
                    /** @type {?} */
                    var tableInfo = this.tableData[index];
                    if (!tableInfo.selectedData) {
                        flag = true;
                        break;
                    }
                }
                this.ensureFlag = flag;
            };
        /**
         * 组装sap回填数据
         * @param tableName 表名
         * @param tableData 表数据
         * @returns (表名.表字段名:表数据):Object
         */
        /**
         * 组装sap回填数据
         * @param {?} tableName 表名
         * @param {?} tableData 表数据
         * @return {?} (表名.表字段名:表数据):Object
         */
        ExternalIntegrationComponent.prototype.assembleSapData = /**
         * 组装sap回填数据
         * @param {?} tableName 表名
         * @param {?} tableData 表数据
         * @return {?} (表名.表字段名:表数据):Object
         */
            function (tableName, tableData) {
                if (!tableName || !tableData) {
                    return;
                }
                // sap回填数据
                /** @type {?} */
                var sapData = {};
                // 表字段名集合
                /** @type {?} */
                var tableDataItemKeys = Object.keys(tableData);
                for (var index = 0; index < tableDataItemKeys.length; index++) {
                    /** @type {?} */
                    var itemKey = tableDataItemKeys[index];
                    // sap回填数据key= 表名.表字段名
                    /** @type {?} */
                    var key = tableName + "." + itemKey;
                    sapData[key] = tableData[itemKey];
                }
                return sapData;
            };
        /**
         * 回填sap数据
         * @param sapData 将要回填的sap数据
         */
        /**
         * 回填sap数据
         * @private
         * @param {?=} sapData 将要回填的sap数据
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.sendSapData = /**
         * 回填sap数据
         * @private
         * @param {?=} sapData 将要回填的sap数据
         * @return {?}
         */
            function (sapData) {
                if (sapData) {
                    this.selectSapData.emit(sapData);
                }
                // 子表关闭editor状态
                if (this.mappingType == "grid") {
                    this.afterOnblur.emit();
                }
            };
        /**
         * @private
         * @return {?}
         */
        ExternalIntegrationComponent.prototype.getBindingPathArray = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = this.vm.bindingPath;
                if (path) {
                    return path.split("/").filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n !== ""; }));
                }
                return [];
            };
        ExternalIntegrationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "web-external-integration",
                        template: "<input [(ngModel)]=\"fieldText\" #input  class=\"form-control\" input-end-edit [readonly]=\"false\"\r\n  tabindex=\"0\" maxlength=\"36\" />\r\n\r\n<farris-dialog #dialog [title]=\"'\u9009\u62E9\u6570\u636E'\" [beforeClose]=\"beforeClose\"  [width]=\"1000\" [height]=\"834\" [showButtons]=\"true\" [showMaxButton]=\"true\"\r\n  [showCloseButton]=\"true\" [enableScroll]=\"false\" [dialogHeaderHeight]=\"50\" [buttons]=\"defaultButtonRef\">\r\n  <div [ngStyle]=\"containerStyle\" style=\"height: 100%;\">\r\n    <div class=\"listnav-example-wrapper\">\r\n      <div class=\"example-side-nav\">\r\n        <farris-list-nav  [listNavWidth]=\"240\" (listClick)=\"listClick($event)\">\r\n          <ng-template listNavContent>\r\n            <farris-list-view #farrisListView [showEmpty]=\"true\" [data]=\"tableData\" [activeIndex]=\"3\" listidName=\"code\" (listClick)=\"listClick($event)\">\r\n              <ng-template #navView listTemplate let-item=\"item\" let-selected=\"selectedItem\">\r\n                <div class=\"f-template-listnav-row\">\r\n                  <!-- routerLinkActive=\"active\" -->\r\n                  <a class=\"list-nav-link\" [ngStyle]=\"{'pointer-events': item.disable ?'none' : '','width':240 +'px'}\"\r\n                     [title]=\"item.name\">\r\n                    <span class=\"nav-item-name\">\r\n                      {{ item.name }}\r\n                    </span>\r\n                  </a>\r\n                </div>\r\n              </ng-template>\r\n            </farris-list-view>\r\n          </ng-template>\r\n\r\n          <!-- <ng-template listNavFooter>\r\n                \u5E95\u90E8\u90E8\u5206\r\n            </ng-template> -->\r\n\r\n        </farris-list-nav>\r\n      </div>\r\n      <div class=\"example-content\" >\r\n        <ng-container #girdView *ngFor=\"let item of tableData;let i = index\">\r\n          <div style=\"height:100%\" [hidden]=\"! (currentLink && item.code == ((currentLink['data'] || [])[0] || {})['code'])\" >\r\n            <farris-datagrid \r\n              [autoFitColumns]=\"true\" \r\n              [columns]=\"item.columns\" \r\n              [data]=\"item.data\" \r\n              [fitColumns]=\"true\"\r\n              [fit]=\"true\" \r\n              [showBorder]=\"true\" \r\n              [(selectValue)]=\"item.selectedValue\"\r\n              [keepSelect]=\"false\"\r\n              [pagination]=\"false\"\r\n              (selectChanged)=\"selectRowChange($event, item.code)\"\r\n              (unSelect)=\"unSelect(null, item.code)\">\r\n            </farris-datagrid>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<ng-template #defaultButtonRef>\r\n  <button #okbtn type=\"button\" [disabled]=\"ensureFlag\" (click)=\"confirm('ensure')\"  class=\"btn btn-primary btn-lg\">\r\n    {{ 'lookup.okText' | locale: '\u786E\u5B9A' }}\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-lg\" (click)=\"confirm('cancel')\" [disabled]=\"false\">\r\n    {{ 'lookup.cancelText' | locale: '\u53D6\u6D88' }}\r\n  </button>\r\n</ng-template>",
                        providers: [
                            ExternalIntegrationService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return ExternalIntegrationComponent; })),
                                multi: true
                            }
                        ],
                        styles: [".listnav-example-wrapper{background-color:#e7ebef;display:flex;height:100%}.listnav-example-wrapper .example-side-nav{flex:0 0 auto}.listnav-example-wrapper .example-content{flex:1 1 0;width:726px;overflow-y:auto;padding:10px 10px 10px 4px}.listnav-example-wrapper .example-content .listnav-content{height:100%;width:100%;background-color:#fff}.listnav-example-wrapper .example-content.example-content-right{padding:10px 4px 10px 10px}"]
                    }] }
        ];
        /** @nocollapse */
        ExternalIntegrationComponent.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: core.ElementRef },
                { type: ExternalIntegrationService },
                { type: devkit.VariableParseService },
                { type: core.ComponentFactoryResolver },
                { type: core.Injector }
            ];
        };
        ExternalIntegrationComponent.propDecorators = {
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            serviceCode: [{ type: core.Input, args: ["serviceCode",] }],
            externalParams: [{ type: core.Input, args: ["externalParams",] }],
            mappingType: [{ type: core.Input, args: ["mappingType",] }],
            myField: [{ type: core.Input, args: ["mapFields",] }],
            fieldText: [{ type: core.Input }],
            extTableSchemas: [{ type: core.Input, args: ["extTableSchemas",] }],
            placeholder: [{ type: core.Input }],
            readonly: [{ type: core.Input }],
            beforeSapSrvc: [{ type: core.Input }],
            customData: [{ type: core.Input }],
            selectSapData: [{ type: core.Output }],
            afterOnblur: [{ type: core.Output }],
            dialog: [{ type: core.ViewChild, args: ["dialog",] }],
            input: [{ type: core.ViewChild, args: ["input",] }],
            girdView: [{ type: core.ViewChild, args: ["girdView", { read: core.ViewContainerRef },] }],
            farrisListView: [{ type: core.ViewChild, args: ["farrisListView",] }]
        };
        return ExternalIntegrationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/ext-integration-data-mapping.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtIntegrationDataMappingDirective = /** @class */ (function () {
        function ExtIntegrationDataMappingDirective(vm, extIntegrationComponent) {
            this.vm = vm;
            this.extIntegrationComponent = extIntegrationComponent;
            this.showModal = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ExtIntegrationDataMappingDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.extIntegrationComponent.selectSapData.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.mappingData(data, _this.myField);
                }));
            };
        /**
         * 字段映射
         * @param sapData sap返回信息
         * @param mappingField 映射关系
         */
        /**
         * 字段映射
         * @param {?} sapData sap返回信息
         * @param {?} mappingField 映射关系
         * @return {?}
         */
        ExtIntegrationDataMappingDirective.prototype.mappingData = /**
         * 字段映射
         * @param {?} sapData sap返回信息
         * @param {?} mappingField 映射关系
         * @return {?}
         */
            function (sapData, mappingField) {
                var _this = this;
                /** @type {?} */
                var helpFields = Object.keys(mappingField);
                helpFields.forEach(( /**
                 * @param {?} fieldName
                 * @return {?}
                 */function (fieldName) {
                    /** @type {?} */
                    var pathArr = _this.getBindingPathArray();
                    // 获取字段值
                    /** @type {?} */
                    var val;
                    if (sapData) {
                        val = sapData[fieldName];
                    }
                    _this.vm.bindingData.setValue(pathArr.concat(mappingField[fieldName]), val, true, true);
                }));
            };
        /**
         * @private
         * @return {?}
         */
        ExtIntegrationDataMappingDirective.prototype.getBindingPathArray = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = this.vm.bindingPath;
                if (path) {
                    return path.split("/").filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n !== ""; }));
                }
                return [];
            };
        ExtIntegrationDataMappingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[extIntegration-dataMapping]",
                    },] }
        ];
        /** @nocollapse */
        ExtIntegrationDataMappingDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: ExternalIntegrationComponent }
            ];
        };
        ExtIntegrationDataMappingDirective.propDecorators = {
            myField: [{ type: core.Input, args: ["mapFields",] }],
            showModal: [{ type: core.Output }]
        };
        return ExtIntegrationDataMappingDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/external-integration.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExternalIntegrationModule = /** @class */ (function () {
        function ExternalIntegrationModule() {
        }
        ExternalIntegrationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ExtIntegrationDataMappingDirective,
                            ExternalIntegrationComponent,
                            DatagridExtIntgrtnComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            uiListView.ListViewModule,
                            router.RouterModule,
                            uiListNav.ListNavModule,
                            uiInputGroup.InputGroupModule,
                            uiText.TextModule,
                            http.HttpClientModule,
                            validationMessage.FormMessageModule,
                            uiPerfectScrollbar.PerfectScrollbarModule,
                            uiTree.TreeModule,
                            uiTabs.FarrisTabsModule,
                            uiForms.FarrisFormsModule,
                            forms.FormsModule,
                            uiCommon.FarrisCommonModule.forRoot(),
                            uiDialog.FarrisDialogModule.forRoot(),
                            uiMessager.MessagerModule.forRoot(),
                            uiNotify.NotifyModule.forRoot(),
                            uiLayout.LayoutModule,
                            uiLocale.LocaleModule.forRoot(),
                            uiModal.ModalModule.forRoot(),
                            uiDatagrid.DatagridModule
                        ],
                        providers: [uiModal.BsModalService, uiDialog.DialogService],
                        entryComponents: [DatagridExtIntgrtnComponent, uiDatagrid.DatagridComponent],
                        exports: [
                            ExtIntegrationDataMappingDirective,
                            ExternalIntegrationComponent,
                            DatagridExtIntgrtnComponent
                        ]
                    },] }
        ];
        return ExternalIntegrationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: farris-external-integration.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.DatagridExtIntgrtnComponent = DatagridExtIntgrtnComponent;
    exports.ExtIntgrtnDataGridEditorProvider = ExtIntgrtnDataGridEditorProvider;
    exports.ExternalIntegrationModule = ExternalIntegrationModule;
    exports.ExtIntegrationDataMappingDirective = ExtIntegrationDataMappingDirective;
    exports.ExternalIntegrationService = ExternalIntegrationService;
    exports.ExternalIntegrationComponent = ExternalIntegrationComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-external-integration.umd.js.map