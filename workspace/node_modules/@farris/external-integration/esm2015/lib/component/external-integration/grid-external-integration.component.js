/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/external-integration/grid-external-integration.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Injector, Renderer2, ViewChild, } from "@angular/core";
import { RuntimeStateService } from "@farris/ui-common";
import { GRID_EDITORS } from "@farris/ui-datagrid";
import { DatagridBaseEditorDirective } from "@farris/ui-datagrid-editors";
import { ExternalIntegrationComponent } from "./external-integration.component";
/** @type {?} */
const ExtIntgrtnDefautOption = {
    readonly: false,
    // 是否只读
    placeholder: "请选择",
    viewType: "tag"
};
export class DatagridExtIntgrtnComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} rts
     * @param {?} injector
     */
    constructor(render, el, rts, injector) {
        super(render, el, injector);
        this.rts = rts;
        this.stopPropagation = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.input.nativeElement;
        this.options = Object.assign({}, ExtIntgrtnDefautOption, this.options);
        this.column.editor.options.onBlur = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.editorRef.startPending();
            e.editorRef.formControl.setValue(this.instance.fieldText);
            this.instance.callSapService();
            this.instance.afterOnblur.subscribe((/**
             * @return {?}
             */
            () => {
                e.editorRef.endPending();
            }));
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
}
DatagridExtIntgrtnComponent.decorators = [
    { type: Component, args: [{
                selector: "grid-external-integration",
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
      <web-external-integration
        #extIntgrtn
        style="width: 100%"
        extIntegration-dataMapping
        [placeholder]="options.placeholder"
        [readonly]="options.readonly"
        [mapFields]="options.mapFields"
        [serviceCode] = "options.serviceCode"
        [externalParams] = "options.externalParams"
        [extTableSchemas] = "options.extTableSchemas"
        [formControlName]="column.field"
        [mappingType] = "'grid'"
        
      ></web-external-integration>
    </div>
  `
            }] }
];
/** @nocollapse */
DatagridExtIntgrtnComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: RuntimeStateService },
    { type: Injector }
];
DatagridExtIntgrtnComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ["extIntgrtn",] }]
};
if (false) {
    /** @type {?} */
    DatagridExtIntgrtnComponent.prototype.instance;
    /** @type {?} */
    DatagridExtIntgrtnComponent.prototype.stopPropagation;
    /**
     * @type {?}
     * @private
     */
    DatagridExtIntgrtnComponent.prototype.rts;
}
/** @type {?} */
export const ExtIntgrtnDataGridEditorProvider = {
    provide: GRID_EDITORS,
    useValue: { name: "external-integration", value: DatagridExtIntgrtnComponent },
    multi: true
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1leHRlcm5hbC1pbnRlZ3JhdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVybmFsLWludGVncmF0aW9uLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9leHRlcm5hbC1pbnRlZ3JhdGlvbi9ncmlkLWV4dGVybmFsLWludGVncmF0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFFBQVEsRUFFUixTQUFTLEVBQ1QsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7TUFFMUUsc0JBQXNCLEdBQUc7SUFDN0IsUUFBUSxFQUFFLEtBQUs7O0lBQ2YsV0FBVyxFQUFFLEtBQUs7SUFDbEIsUUFBUSxFQUFFLEtBQUs7Q0FDaEI7QUF1QkQsTUFBTSxPQUFPLDJCQUE0QixTQUFRLDJCQUEyQjs7Ozs7OztJQUsxRSxZQUNFLE1BQWlCLEVBQ2pCLEVBQWMsRUFDTixHQUF3QixFQUNoQyxRQUFrQjtRQUVsQixLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUhwQixRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQUpsQyxvQkFBZSxHQUFHLEtBQUssQ0FBQztJQVF4QixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHNCQUFzQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTTs7OztRQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUMzQixDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVM7OztZQUFDLEdBQUcsRUFBRTtnQkFDdkMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMzQixDQUFDLEVBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQSxDQUFBO0lBQ0gsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7O1lBbkRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJUO2FBQ0Y7Ozs7WUFsQ0MsU0FBUztZQUhULFVBQVU7WUFNSCxtQkFBbUI7WUFMMUIsUUFBUTs7O3VCQXVDUCxTQUFTLFNBQUMsWUFBWTs7OztJQUF2QiwrQ0FBZ0U7O0lBRWhFLHNEQUF3Qjs7Ozs7SUFJdEIsMENBQWdDOzs7QUEyQnBDLE1BQU0sT0FBTyxnQ0FBZ0MsR0FBRztJQUM5QyxPQUFPLEVBQUUsWUFBWTtJQUNyQixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLDJCQUEyQixFQUFFO0lBQzlFLEtBQUssRUFBRSxJQUFJO0NBQ1oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgQ29tcG9uZW50LFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgSW5qZWN0b3IsXHJcbiAgT25Jbml0LFxyXG4gIFJlbmRlcmVyMixcclxuICBWaWV3Q2hpbGQsXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUnVudGltZVN0YXRlU2VydmljZSB9IGZyb20gXCJAZmFycmlzL3VpLWNvbW1vblwiO1xyXG5pbXBvcnQgeyBHUklEX0VESVRPUlMgfSBmcm9tIFwiQGZhcnJpcy91aS1kYXRhZ3JpZFwiO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tIFwiQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzXCI7XHJcbmltcG9ydCB7IEV4dGVybmFsSW50ZWdyYXRpb25Db21wb25lbnQgfSBmcm9tIFwiLi9leHRlcm5hbC1pbnRlZ3JhdGlvbi5jb21wb25lbnRcIjtcclxuXHJcbmNvbnN0IEV4dEludGdydG5EZWZhdXRPcHRpb24gPSB7XHJcbiAgcmVhZG9ubHk6IGZhbHNlLCAvLyDmmK/lkKblj6ror7tcclxuICBwbGFjZWhvbGRlcjogXCLor7fpgInmi6lcIixcclxuICB2aWV3VHlwZTogXCJ0YWdcIlxyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6IFwiZ3JpZC1leHRlcm5hbC1pbnRlZ3JhdGlvblwiLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIj5cclxuICAgICAgPHdlYi1leHRlcm5hbC1pbnRlZ3JhdGlvblxyXG4gICAgICAgICNleHRJbnRncnRuXHJcbiAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgZXh0SW50ZWdyYXRpb24tZGF0YU1hcHBpbmdcclxuICAgICAgICBbcGxhY2Vob2xkZXJdPVwib3B0aW9ucy5wbGFjZWhvbGRlclwiXHJcbiAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgIFttYXBGaWVsZHNdPVwib3B0aW9ucy5tYXBGaWVsZHNcIlxyXG4gICAgICAgIFtzZXJ2aWNlQ29kZV0gPSBcIm9wdGlvbnMuc2VydmljZUNvZGVcIlxyXG4gICAgICAgIFtleHRlcm5hbFBhcmFtc10gPSBcIm9wdGlvbnMuZXh0ZXJuYWxQYXJhbXNcIlxyXG4gICAgICAgIFtleHRUYWJsZVNjaGVtYXNdID0gXCJvcHRpb25zLmV4dFRhYmxlU2NoZW1hc1wiXHJcbiAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJjb2x1bW4uZmllbGRcIlxyXG4gICAgICAgIFttYXBwaW5nVHlwZV0gPSBcIidncmlkJ1wiXHJcbiAgICAgICAgXHJcbiAgICAgID48L3dlYi1leHRlcm5hbC1pbnRlZ3JhdGlvbj5cclxuICAgIDwvZGl2PlxyXG4gIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEV4dEludGdydG5Db21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmVcclxuICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQFZpZXdDaGlsZChcImV4dEludGdydG5cIikgaW5zdGFuY2U6IEV4dGVybmFsSW50ZWdyYXRpb25Db21wb25lbnQ7XHJcbiAgXHJcbiAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2U7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZW5kZXI6IFJlbmRlcmVyMixcclxuICAgIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBydHM6IFJ1bnRpbWVTdGF0ZVNlcnZpY2UsXHJcbiAgICBpbmplY3RvcjogSW5qZWN0b3JcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5pbnB1dC5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgRXh0SW50Z3J0bkRlZmF1dE9wdGlvbiwgdGhpcy5vcHRpb25zKTtcclxuICAgIHRoaXMuY29sdW1uLmVkaXRvci5vcHRpb25zLm9uQmx1ciA9IChlKSA9PiB7XHJcbiAgICAgIGUuZWRpdG9yUmVmLnN0YXJ0UGVuZGluZygpO1xyXG4gICAgICBlLmVkaXRvclJlZi5mb3JtQ29udHJvbC5zZXRWYWx1ZSh0aGlzLmluc3RhbmNlLmZpZWxkVGV4dCk7XHJcbiAgICAgIHRoaXMuaW5zdGFuY2UuY2FsbFNhcFNlcnZpY2UoKTtcclxuICAgICAgdGhpcy5pbnN0YW5jZS5hZnRlck9uYmx1ci5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIGUuZWRpdG9yUmVmLmVuZFBlbmRpbmcoKTtcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG4gIH1cclxuXHJcblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRXh0SW50Z3J0bkRhdGFHcmlkRWRpdG9yUHJvdmlkZXIgPSB7XHJcbiAgcHJvdmlkZTogR1JJRF9FRElUT1JTLFxyXG4gIHVzZVZhbHVlOiB7IG5hbWU6IFwiZXh0ZXJuYWwtaW50ZWdyYXRpb25cIiwgdmFsdWU6IERhdGFncmlkRXh0SW50Z3J0bkNvbXBvbmVudCB9LFxyXG4gIG11bHRpOiB0cnVlXHJcbn07XHJcbiJdfQ==