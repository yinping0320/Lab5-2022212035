/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/external-integration/external-integration-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from "@angular/common/http";
import { Injectable, Output, EventEmitter } from "@angular/core";
import { VariableParseService, ViewModel } from "@farris/devkit";
export class ExternalIntegrationService {
    /**
     * @param {?} http
     * @param {?} variableParseService
     * @param {?} vm
     */
    constructor(http, variableParseService, vm) {
        this.http = http;
        this.variableParseService = variableParseService;
        this.vm = vm;
        this.sapData = new EventEmitter();
        this.sapUrl = "/api/runtime/icc/v1.0/externalServiceOpenApi/invokeService";
    }
    /**
     * 调用外部服务
     * @param {?} externalParams
     * @param {?} serviceCode
     * @return {?}
     */
    queryExtIntegrationService(externalParams, serviceCode) {
        /** @type {?} */
        let req = this.assembleSapRequest(externalParams, serviceCode);
        this.http.post(this.sapUrl, req).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            let respObj = Object.create(response);
            if (!respObj || !respObj.success) {
                return;
            }
            /** @type {?} */
            let resp = Object.create(respObj);
            /** @type {?} */
            let sapData = resp.data;
            this.sapData.emit(sapData);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.log(error);
            this.sapData.emit({});
        }));
    }
    /**
     * 组装sap api入参
     * @private
     * @param {?} externalParams
     * @param {?} serviceCode
     * @return {?}
     */
    assembleSapRequest(externalParams, serviceCode) {
        /** @type {?} */
        const params = JSON.parse(JSON.stringify(externalParams));
        /** @type {?} */
        let requestParam = {
            code: serviceCode,
            params: this.variableParseService.parse(params, this.vm.frameContext),
        };
        return requestParam;
    }
}
ExternalIntegrationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExternalIntegrationService.ctorParameters = () => [
    { type: HttpClient },
    { type: VariableParseService },
    { type: ViewModel }
];
ExternalIntegrationService.propDecorators = {
    sapData: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ExternalIntegrationService.prototype.sapData;
    /** @type {?} */
    ExternalIntegrationService.prototype.sapUrl;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationService.prototype.variableParseService;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationService.prototype.vm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtaW50ZWdyYXRpb24tc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXh0ZXJuYWwtaW50ZWdyYXRpb24vIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L2V4dGVybmFsLWludGVncmF0aW9uL2V4dGVybmFsLWludGVncmF0aW9uLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdqRSxNQUFNLE9BQU8sMEJBQTBCOzs7Ozs7SUFDckMsWUFDVSxJQUFnQixFQUNoQixvQkFBMEMsRUFDMUMsRUFBYTtRQUZiLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxPQUFFLEdBQUYsRUFBRSxDQUFXO1FBRWIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFdkMsV0FBTSxHQUFHLDREQUE0RCxDQUFDO0lBSG5FLENBQUM7Ozs7Ozs7SUFRSiwwQkFBMEIsQ0FBQyxjQUFjLEVBQUUsV0FBVzs7WUFDaEQsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUzs7OztRQUN4QyxRQUFRLENBQUMsRUFBRTs7Z0JBQ0wsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO2dCQUNoQyxPQUFPO2FBQ1I7O2dCQUNHLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzs7Z0JBQzdCLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSTtZQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixDQUFDOzs7O1FBQ0QsS0FBSyxDQUFDLEVBQUU7WUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsRUFDRixDQUFDO0lBQ0osQ0FBQzs7Ozs7Ozs7SUFLTyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsV0FBVzs7Y0FDOUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQzs7WUFDckQsWUFBWSxHQUFHO1lBQ2pCLElBQUksRUFBRSxXQUFXO1lBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQztTQUN0RTtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7OztZQTNDRixVQUFVOzs7O1lBSkYsVUFBVTtZQUVWLG9CQUFvQjtZQUFFLFNBQVM7OztzQkFTckMsTUFBTTs7OztJQUFQLDZDQUF1Qzs7SUFFdkMsNENBQXNFOzs7OztJQU5wRSwwQ0FBd0I7Ozs7O0lBQ3hCLDBEQUFrRDs7Ozs7SUFDbEQsd0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VTZXJ2aWNlLCBWaWV3TW9kZWwgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV4dGVybmFsSW50ZWdyYXRpb25TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgdmFyaWFibGVQYXJzZVNlcnZpY2U6IFZhcmlhYmxlUGFyc2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSB2bTogVmlld01vZGVsXHJcbiAgKSB7fVxyXG4gIEBPdXRwdXQoKSBzYXBEYXRhID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBzYXBVcmwgPSBcIi9hcGkvcnVudGltZS9pY2MvdjEuMC9leHRlcm5hbFNlcnZpY2VPcGVuQXBpL2ludm9rZVNlcnZpY2VcIjtcclxuXHJcbiAgLyoqXHJcbiAgICog6LCD55So5aSW6YOo5pyN5YqhXHJcbiAgICovXHJcbiAgcXVlcnlFeHRJbnRlZ3JhdGlvblNlcnZpY2UoZXh0ZXJuYWxQYXJhbXMsIHNlcnZpY2VDb2RlKSB7XHJcbiAgICBsZXQgcmVxID0gdGhpcy5hc3NlbWJsZVNhcFJlcXVlc3QoZXh0ZXJuYWxQYXJhbXMsIHNlcnZpY2VDb2RlKTtcclxuICAgIHRoaXMuaHR0cC5wb3N0KHRoaXMuc2FwVXJsLCByZXEpLnN1YnNjcmliZShcclxuICAgICAgcmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGxldCByZXNwT2JqID0gT2JqZWN0LmNyZWF0ZShyZXNwb25zZSk7XHJcbiAgICAgICAgaWYgKCFyZXNwT2JqIHx8ICFyZXNwT2JqLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlc3AgPSBPYmplY3QuY3JlYXRlKHJlc3BPYmopO1xyXG4gICAgICAgIGxldCBzYXBEYXRhID0gcmVzcC5kYXRhO1xyXG4gICAgICAgIHRoaXMuc2FwRGF0YS5lbWl0KHNhcERhdGEpO1xyXG4gICAgICB9LFxyXG4gICAgICBlcnJvciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIHRoaXMuc2FwRGF0YS5lbWl0KHt9KTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOe7hOijhXNhcCBhcGnlhaXlj4JcclxuICAgKi9cclxuICBwcml2YXRlIGFzc2VtYmxlU2FwUmVxdWVzdChleHRlcm5hbFBhcmFtcywgc2VydmljZUNvZGUpIHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZXh0ZXJuYWxQYXJhbXMpKTtcclxuICAgIGxldCByZXF1ZXN0UGFyYW0gPSB7XHJcbiAgICAgIGNvZGU6IHNlcnZpY2VDb2RlLFxyXG4gICAgICBwYXJhbXM6IHRoaXMudmFyaWFibGVQYXJzZVNlcnZpY2UucGFyc2UocGFyYW1zLCB0aGlzLnZtLmZyYW1lQ29udGV4dCksXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJlcXVlc3RQYXJhbTtcclxuICB9XHJcbn1cclxuIl19