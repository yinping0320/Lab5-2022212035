/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/external-integration/external-integration.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, forwardRef, Injector, Input, Optional, Output, ViewChild, ViewContainerRef } from "@angular/core";
import { DialogComponent } from "@farris/ui-dialog";
import { VariableParseService, ViewModel } from "@farris/devkit";
import { ExternalIntegrationService } from "./external-integration-service";
import { NgControl, NG_VALUE_ACCESSOR } from "@angular/forms";
import { Observable, of } from "rxjs";
import { ListViewComponent } from "@farris/ui-list-view";
export class ExternalIntegrationComponent {
    /**
     * @param {?} vm
     * @param {?} el
     * @param {?} extIntgrtnSrvc
     * @param {?} variableParseService
     * @param {?} resolver
     * @param {?} inj
     */
    constructor(vm, el, extIntgrtnSrvc, variableParseService, resolver, inj) {
        this.vm = vm;
        this.el = el;
        this.extIntgrtnSrvc = extIntgrtnSrvc;
        this.variableParseService = variableParseService;
        this.resolver = resolver;
        this.inj = inj;
        /**
         * 模态框宽
         */
        this.width = 960;
        /**
         * 模态框高
         */
        this.height = 577;
        this.fieldText = "";
        this.placeholder = "请选择";
        // 是否只读
        this.readonly = false;
        /**
         * 内容中留白边距
         */
        this.containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };
        /**
         * 指令回填sap数据
         */
        this.selectSapData = new EventEmitter();
        this.afterOnblur = new EventEmitter();
        /**
         * 多表数据集合
         */
        this.tableData = [];
        /**
         * 模态框导航栏当前选中项
         */
        this.currentLink = {};
        /**
         * 模态框确定按钮是否可用
         */
        this.ensureFlag = true;
        this.containerStyle = {
            marginLeft: this.containerMargin.left + "px",
            marginRight: this.containerMargin.right + "px",
            marginTop: this.containerMargin.top + "px",
            marginBottom: this.containerMargin.bottom + "px"
        };
        this.beforeClose = (/**
         * @return {?}
         */
        () => {
            this.tableData = [];
            this.ensureFlag = true;
            this.sendSapData();
            return of(true);
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) { }
    /**
     * @return {?}
     */
    fieldTextChange() {
        /** @type {?} */
        const pathArr = this.getBindingPathArray();
        this.vm.bindingData.setValue(pathArr.concat(this.ngControl.name), this.fieldText, true, true);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        this.fieldText = obj;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngControl = this.inj.get(NgControl);
        // 卡片绑定onblur事件，表格再grid-external-integration中绑定onblur事件
        if (this.mappingType != "grid") {
            this.input.nativeElement.onblur = (/**
             * @return {?}
             */
            () => {
                this.callSapService();
            });
        }
        this.extIntgrtnSrvc.sapData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.sapDataHandle(data);
        }));
    }
    /**
     * 打开模态框
     * @return {?}
     */
    showDialog() {
        this.farrisListView.listClick.emit({
            data: [this.tableData[0]],
            index: 0,
            checkChangeEvent: false
        });
        this.farrisListView.clickItem = this.tableData[0];
        this.dialog.show();
        return false;
    }
    /**
     * 调用sap外部服务，出参在ngOninit监听
     * @return {?}
     */
    callSapService() {
        this.fieldTextChange();
        this.extIntgrtnSrvc.queryExtIntegrationService(this.externalParams, this.serviceCode);
    }
    /**
     * 处理sap出参
     * @param {?} data sap出参
     * @return {?}
     */
    sapDataHandle(data) {
        if (!data) {
            return;
        }
        /** @type {?} */
        let tableNameList = Object.keys(data);
        /** @type {?} */
        let mapTableList = this.getTableListFromMapFields();
        // 取交集
        tableNameList = tableNameList.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return mapTableList.indexOf(item) != -1;
        }));
        // 多表场景
        if (tableNameList.length > 1) {
            // 校验是否弹出模态框
            /** @type {?} */
            let openDialogFlag = this.checkMultiTableData(data, tableNameList);
            if (openDialogFlag == "open") {
                // 组装模态框数据
                this.assembleTableData(data);
                this.showDialog();
            }
            else if (openDialogFlag == "backfill") {
                // 多表，每个表只有一条数据
                /** @type {?} */
                let backfillData = {};
                tableNameList.forEach((/**
                 * @param {?} tableName
                 * @return {?}
                 */
                tableName => {
                    Object.assign(backfillData, this.assembleSapData(tableName, data[tableName][0]));
                }));
                this.sendSapData(backfillData);
            }
            else {
                // 多表无数据
                this.sendSapData();
            }
        }
        else if (tableNameList.length == 1) {
            /** @type {?} */
            let tableName = tableNameList[0];
            /** @type {?} */
            let sapDataLength = (data[tableName] || []).length;
            if (sapDataLength > 0) {
                if (sapDataLength == 1) {
                    // 一个表只有一条数据
                    /** @type {?} */
                    let sapData = this.assembleSapData(tableName, data[tableName][0]);
                    this.sendSapData(sapData);
                }
                else if (sapDataLength > 1) {
                    // 一个表有多条数据
                    this.assembleTableData(data);
                    this.showDialog();
                    return;
                }
            }
        }
        else {
            // 处理查询异常，editor没有endPending
            this.sendSapData();
        }
    }
    /**
     * @param {?} data
     * @param {?} tableNameList
     * @return {?}
     */
    checkMultiTableData(data, tableNameList) {
        /** @type {?} */
        let openDialogFlag = "";
        for (let index = 0; index < tableNameList.length; index++) {
            /** @type {?} */
            let tableName = tableNameList[index];
            if (data[tableName].length > 1) {
                openDialogFlag = "open";
                break;
            }
            else if (data[tableName].length == 0 && openDialogFlag != "backfill") {
                openDialogFlag = "none";
                continue;
            }
            openDialogFlag = "backfill";
        }
        return openDialogFlag;
    }
    /**
     * 组装模态框数据
     * @param {?} data sap出参
     * @return {?}
     */
    assembleTableData(data) {
        /** @type {?} */
        let tableNameList = Object.keys(data);
        /** @type {?} */
        let mapTableList = this.getTableListFromMapFields();
        // 取交集
        mapTableList = mapTableList.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return tableNameList.indexOf(item) != -1;
        }));
        if (mapTableList.length > 0) {
            // 遍历sap映射表，组装表及对应数据
            mapTableList.forEach((/**
             * @param {?} mapTable
             * @return {?}
             */
            mapTable => {
                // 组装模态框中单表数据
                /** @type {?} */
                let tableInfo = this.assembleTableInfo(mapTable, data);
                if (tableInfo &&
                    Object.keys(tableInfo).length > 0 &&
                    (tableInfo.data || []).length > 0) {
                    this.tableData.push(tableInfo);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    getTableListFromMapFields() {
        // 获取需要回填的表
        /** @type {?} */
        let mapKeyList = Object.keys(this.myField);
        // 定义sap映射表集合
        /** @type {?} */
        let mapTableList = [];
        (mapKeyList || []).forEach((/**
         * @param {?} mapKey
         * @return {?}
         */
        mapKey => {
            // 在映射关系中获取sap出参中的表集合
            mapTableList.push(mapKey.split(".")[0]);
        }));
        // 去重
        mapTableList = Array.from(new Set(mapTableList));
        return mapTableList;
    }
    /**
     * 组装模态框中单表数据
     * @param {?} mapTable 表名
     * @param {?} data sap出参
     * @return {?} 模态框单表数据对象
     */
    assembleTableInfo(mapTable, data) {
        // 模态框单表数据对象
        /** @type {?} */
        let tableInfo = {};
        // 表头集合
        /** @type {?} */
        let tableColumnList = [];
        // 遍历sap出参表信息，获取表头中文、表名
        (this.extTableSchemas || []).forEach((/**
         * @param {?} tableSchema
         * @return {?}
         */
        tableSchema => {
            if (tableSchema.code == mapTable) {
                tableInfo.name = tableSchema.name;
                // 模拟主键，保证farris-grid组件【单选】功能正常
                /** @type {?} */
                let idColumn = {};
                idColumn.field = "id";
                idColumn.title = "序号";
                tableColumnList.push(idColumn);
                // 组装表头
                tableSchema.columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                column => {
                    /** @type {?} */
                    let tableColumn = {};
                    tableColumn.field = column.code;
                    tableColumn.title = column.name;
                    tableColumnList.push(tableColumn);
                }));
                tableInfo.columns = tableColumnList;
                tableInfo.code = mapTable;
                // 给表数据增加模拟主键
                (data[mapTable] || []).forEach((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                (item, index) => {
                    item["id"] = index + 1;
                }));
                tableInfo.data = data[mapTable];
            }
        }));
        return tableInfo;
    }
    /**
     * 导航栏点击事件
     * @param {?} event 导航栏信息
     * @return {?}
     */
    listClick(event) {
        /** @type {?} */
        let clickData = event.data;
        if (event.data.disable) {
            return false;
        }
        else {
            if (typeof this.currentLink["data"] !== "undefined") {
                if (clickData[0].code === this.currentLink["data"][0].code) {
                    return false;
                }
                else {
                    this.currentLink = event;
                }
            }
            else {
                this.currentLink = event;
            }
        }
    }
    /**
     * 模态框，确定，取消按钮
     * @param {?} flag ensure:确定按钮，cancel：取消按钮
     * @return {?}
     */
    confirm(flag) {
        // 点击确定按钮
        if (flag == "ensure") {
            /** @type {?} */
            let sapData = {};
            // 遍历模态框表数据，组装回填数据
            for (let index = 0; index < this.tableData.length; index++) {
                /** @type {?} */
                let tableInfo = this.tableData[index];
                Object.assign(sapData, this.assembleSapData(tableInfo.code, tableInfo.selectedData.data));
            }
            this.sendSapData(sapData);
        }
        // 清空模态框数据
        this.tableData = [];
        // 关闭模态框
        this.dialog.close();
    }
    /**
     * 选中一行事件
     * @param {?} selectedRow 选中行数据
     * @param {?} tableName 当前表格对应表名
     * @return {?}
     */
    selectRowChange(selectedRow, tableName) {
        this.tableData.forEach((/**
         * @param {?} tableInfo
         * @return {?}
         */
        tableInfo => {
            if (tableInfo.code == tableName) {
                tableInfo.selectedData = selectedRow;
            }
        }));
        this.setEnsureButtonFlag();
    }
    /**
     * 取消一行事件
     * @param {?} selectedRow 被取消行数据
     * @param {?} tableName 当前表格对应表名
     * @return {?}
     */
    unSelect(selectedRow, tableName) {
        this.tableData.forEach((/**
         * @param {?} tableInfo
         * @return {?}
         */
        tableInfo => {
            if (tableInfo.code == tableName) {
                tableInfo.selectedData = null;
                tableInfo.selectedValue = "";
            }
        }));
        selectedRow = null;
        this.setEnsureButtonFlag();
    }
    /**
     * 设置模态框确定按钮是否可用
     * @return {?}
     */
    setEnsureButtonFlag() {
        /** @type {?} */
        let flag = false;
        for (let index = 0; index < this.tableData.length; index++) {
            /** @type {?} */
            let tableInfo = this.tableData[index];
            if (!tableInfo.selectedData) {
                flag = true;
                break;
            }
        }
        this.ensureFlag = flag;
    }
    /**
     * 组装sap回填数据
     * @param {?} tableName 表名
     * @param {?} tableData 表数据
     * @return {?} (表名.表字段名:表数据):Object
     */
    assembleSapData(tableName, tableData) {
        if (!tableName || !tableData) {
            return;
        }
        // sap回填数据
        /** @type {?} */
        let sapData = {};
        // 表字段名集合
        /** @type {?} */
        let tableDataItemKeys = Object.keys(tableData);
        for (let index = 0; index < tableDataItemKeys.length; index++) {
            /** @type {?} */
            let itemKey = tableDataItemKeys[index];
            // sap回填数据key= 表名.表字段名
            /** @type {?} */
            let key = tableName + "." + itemKey;
            sapData[key] = tableData[itemKey];
        }
        return sapData;
    }
    /**
     * 回填sap数据
     * @private
     * @param {?=} sapData 将要回填的sap数据
     * @return {?}
     */
    sendSapData(sapData) {
        if (sapData) {
            this.selectSapData.emit(sapData);
        }
        // 子表关闭editor状态
        if (this.mappingType == "grid") {
            this.afterOnblur.emit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getBindingPathArray() {
        /** @type {?} */
        const path = this.vm.bindingPath;
        if (path) {
            return path.split("/").filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n !== ""));
        }
        return [];
    }
}
ExternalIntegrationComponent.decorators = [
    { type: Component, args: [{
                selector: "web-external-integration",
                template: "<input [(ngModel)]=\"fieldText\" #input  class=\"form-control\" input-end-edit [readonly]=\"false\"\r\n  tabindex=\"0\" maxlength=\"36\" />\r\n\r\n<farris-dialog #dialog [title]=\"'\u9009\u62E9\u6570\u636E'\" [beforeClose]=\"beforeClose\"  [width]=\"1000\" [height]=\"834\" [showButtons]=\"true\" [showMaxButton]=\"true\"\r\n  [showCloseButton]=\"true\" [enableScroll]=\"false\" [dialogHeaderHeight]=\"50\" [buttons]=\"defaultButtonRef\">\r\n  <div [ngStyle]=\"containerStyle\" style=\"height: 100%;\">\r\n    <div class=\"listnav-example-wrapper\">\r\n      <div class=\"example-side-nav\">\r\n        <farris-list-nav  [listNavWidth]=\"240\" (listClick)=\"listClick($event)\">\r\n          <ng-template listNavContent>\r\n            <farris-list-view #farrisListView [showEmpty]=\"true\" [data]=\"tableData\" [activeIndex]=\"3\" listidName=\"code\" (listClick)=\"listClick($event)\">\r\n              <ng-template #navView listTemplate let-item=\"item\" let-selected=\"selectedItem\">\r\n                <div class=\"f-template-listnav-row\">\r\n                  <!-- routerLinkActive=\"active\" -->\r\n                  <a class=\"list-nav-link\" [ngStyle]=\"{'pointer-events': item.disable ?'none' : '','width':240 +'px'}\"\r\n                     [title]=\"item.name\">\r\n                    <span class=\"nav-item-name\">\r\n                      {{ item.name }}\r\n                    </span>\r\n                  </a>\r\n                </div>\r\n              </ng-template>\r\n            </farris-list-view>\r\n          </ng-template>\r\n\r\n          <!-- <ng-template listNavFooter>\r\n                \u5E95\u90E8\u90E8\u5206\r\n            </ng-template> -->\r\n\r\n        </farris-list-nav>\r\n      </div>\r\n      <div class=\"example-content\" >\r\n        <ng-container #girdView *ngFor=\"let item of tableData;let i = index\">\r\n          <div style=\"height:100%\" [hidden]=\"! (currentLink && item.code == ((currentLink['data'] || [])[0] || {})['code'])\" >\r\n            <farris-datagrid \r\n              [autoFitColumns]=\"true\" \r\n              [columns]=\"item.columns\" \r\n              [data]=\"item.data\" \r\n              [fitColumns]=\"true\"\r\n              [fit]=\"true\" \r\n              [showBorder]=\"true\" \r\n              [(selectValue)]=\"item.selectedValue\"\r\n              [keepSelect]=\"false\"\r\n              [pagination]=\"false\"\r\n              (selectChanged)=\"selectRowChange($event, item.code)\"\r\n              (unSelect)=\"unSelect(null, item.code)\">\r\n            </farris-datagrid>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<ng-template #defaultButtonRef>\r\n  <button #okbtn type=\"button\" [disabled]=\"ensureFlag\" (click)=\"confirm('ensure')\"  class=\"btn btn-primary btn-lg\">\r\n    {{ 'lookup.okText' | locale: '\u786E\u5B9A' }}\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-lg\" (click)=\"confirm('cancel')\" [disabled]=\"false\">\r\n    {{ 'lookup.cancelText' | locale: '\u53D6\u6D88' }}\r\n  </button>\r\n</ng-template>",
                providers: [
                    ExternalIntegrationService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ExternalIntegrationComponent)),
                        multi: true
                    }
                ],
                styles: [".listnav-example-wrapper{background-color:#e7ebef;display:flex;height:100%}.listnav-example-wrapper .example-side-nav{flex:0 0 auto}.listnav-example-wrapper .example-content{flex:1 1 0;width:726px;overflow-y:auto;padding:10px 10px 10px 4px}.listnav-example-wrapper .example-content .listnav-content{height:100%;width:100%;background-color:#fff}.listnav-example-wrapper .example-content.example-content-right{padding:10px 4px 10px 10px}"]
            }] }
];
/** @nocollapse */
ExternalIntegrationComponent.ctorParameters = () => [
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: ExternalIntegrationService },
    { type: VariableParseService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
ExternalIntegrationComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    serviceCode: [{ type: Input, args: ["serviceCode",] }],
    externalParams: [{ type: Input, args: ["externalParams",] }],
    mappingType: [{ type: Input, args: ["mappingType",] }],
    myField: [{ type: Input, args: ["mapFields",] }],
    fieldText: [{ type: Input }],
    extTableSchemas: [{ type: Input, args: ["extTableSchemas",] }],
    placeholder: [{ type: Input }],
    readonly: [{ type: Input }],
    beforeSapSrvc: [{ type: Input }],
    customData: [{ type: Input }],
    selectSapData: [{ type: Output }],
    afterOnblur: [{ type: Output }],
    dialog: [{ type: ViewChild, args: ["dialog",] }],
    input: [{ type: ViewChild, args: ["input",] }],
    girdView: [{ type: ViewChild, args: ["girdView", { read: ViewContainerRef },] }],
    farrisListView: [{ type: ViewChild, args: ["farrisListView",] }]
};
if (false) {
    /**
     * 模态框宽
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.width;
    /**
     * 模态框高
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.height;
    /**
     * 服务名
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.serviceCode;
    /**
     * 外部服务请求入参,表达式
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.externalParams;
    /**
     * form:主表回填形式,grid：子表回填形式
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.mappingType;
    /**
     * 映射关系
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.myField;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.fieldText;
    /**
     * sap出参表信息描述
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.extTableSchemas;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.placeholder;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.readonly;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.beforeSapSrvc;
    /**
     * 内容中留白边距
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.containerMargin;
    /**
     * 自定义数据
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.customData;
    /**
     * 指令回填sap数据
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.selectSapData;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.afterOnblur;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.dialog;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.input;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.girdView;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.farrisListView;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.componentRef;
    /**
     * 多表数据集合
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.tableData;
    /**
     * 模态框导航栏当前选中项
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.currentLink;
    /**
     * 模态框确定按钮是否可用
     * @type {?}
     */
    ExternalIntegrationComponent.prototype.ensureFlag;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.ngControl;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.containerStyle;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.beforeClose;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationComponent.prototype.vm;
    /** @type {?} */
    ExternalIntegrationComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationComponent.prototype.extIntgrtnSrvc;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationComponent.prototype.variableParseService;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ExternalIntegrationComponent.prototype.inj;
}
//# sourceMappingURL=data:application/json;base64,