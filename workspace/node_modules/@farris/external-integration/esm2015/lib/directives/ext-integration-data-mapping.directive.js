/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ext-integration-data-mapping.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Optional, Output } from "@angular/core";
import { ViewModel } from "@farris/devkit";
import { ExternalIntegrationComponent } from "../../lib/component/external-integration/external-integration.component";
export class ExtIntegrationDataMappingDirective {
    /**
     * @param {?} vm
     * @param {?} extIntegrationComponent
     */
    constructor(vm, extIntegrationComponent) {
        this.vm = vm;
        this.extIntegrationComponent = extIntegrationComponent;
        this.showModal = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.extIntegrationComponent.selectSapData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.mappingData(data, this.myField);
        }));
    }
    /**
     * 字段映射
     * @param {?} sapData sap返回信息
     * @param {?} mappingField 映射关系
     * @return {?}
     */
    mappingData(sapData, mappingField) {
        /** @type {?} */
        let helpFields = Object.keys(mappingField);
        helpFields.forEach((/**
         * @param {?} fieldName
         * @return {?}
         */
        (fieldName) => {
            /** @type {?} */
            let pathArr = this.getBindingPathArray();
            // 获取字段值
            /** @type {?} */
            let val;
            if (sapData) {
                val = sapData[fieldName];
            }
            this.vm.bindingData.setValue(pathArr.concat(mappingField[fieldName]), val, true, true);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getBindingPathArray() {
        /** @type {?} */
        const path = this.vm.bindingPath;
        if (path) {
            return path.split("/").filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n !== ""));
        }
        return [];
    }
}
ExtIntegrationDataMappingDirective.decorators = [
    { type: Directive, args: [{
                selector: "[extIntegration-dataMapping]",
            },] }
];
/** @nocollapse */
ExtIntegrationDataMappingDirective.ctorParameters = () => [
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: ExternalIntegrationComponent }
];
ExtIntegrationDataMappingDirective.propDecorators = {
    myField: [{ type: Input, args: ["mapFields",] }],
    showModal: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ExtIntegrationDataMappingDirective.prototype.myField;
    /** @type {?} */
    ExtIntegrationDataMappingDirective.prototype.showModal;
    /**
     * @type {?}
     * @private
     */
    ExtIntegrationDataMappingDirective.prototype.vm;
    /**
     * @type {?}
     * @private
     */
    ExtIntegrationDataMappingDirective.prototype.extIntegrationComponent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWludGVncmF0aW9uLWRhdGEtbWFwcGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVybmFsLWludGVncmF0aW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZXh0LWludGVncmF0aW9uLWRhdGEtbWFwcGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsUUFBUSxFQUNSLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUcsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0seUVBQXlFLENBQUM7QUFLdkgsTUFBTSxPQUFPLGtDQUFrQzs7Ozs7SUFHN0MsWUFDc0IsRUFBYSxFQUN6Qix1QkFBcUQ7UUFEekMsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQUN6Qiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQThCO1FBSHJELGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBSXRDLENBQUM7Ozs7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxJQUFRLEVBQUUsRUFBRTtZQUNoRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxFQUFDLENBQUE7SUFDSixDQUFDOzs7Ozs7O0lBUUQsV0FBVyxDQUFDLE9BQU8sRUFBRSxZQUFZOztZQUMzQixVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDMUMsVUFBVSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLFNBQWMsRUFBRSxFQUFFOztnQkFDaEMsT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRTs7O2dCQUVwQyxHQUFRO1lBQ1osSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMxQjtZQUNELElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDMUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDdkMsR0FBRyxFQUNILElBQUksRUFDSixJQUFJLENBQ0wsQ0FBQztRQUNKLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTyxtQkFBbUI7O2NBQ25CLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVc7UUFDaEMsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7OztZQWhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjthQUV6Qzs7OztZQUxTLFNBQVMsdUJBVWQsUUFBUTtZQVRKLDRCQUE0Qjs7O3NCQU1sQyxLQUFLLFNBQUMsV0FBVzt3QkFDakIsTUFBTTs7OztJQURQLHFEQUFpQzs7SUFDakMsdURBQXlDOzs7OztJQUV2QyxnREFBaUM7Ozs7O0lBQ2pDLHFFQUE2RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBJbnB1dCxcclxuICBPcHRpb25hbCxcclxuICBPdXRwdXRcclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyAgVmlld01vZGVsIH0gZnJvbSBcIkBmYXJyaXMvZGV2a2l0XCI7XHJcbmltcG9ydCB7IEV4dGVybmFsSW50ZWdyYXRpb25Db21wb25lbnQgfSBmcm9tIFwiLi4vLi4vbGliL2NvbXBvbmVudC9leHRlcm5hbC1pbnRlZ3JhdGlvbi9leHRlcm5hbC1pbnRlZ3JhdGlvbi5jb21wb25lbnRcIjtcclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6IFwiW2V4dEludGVncmF0aW9uLWRhdGFNYXBwaW5nXVwiLFxyXG4gIFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRXh0SW50ZWdyYXRpb25EYXRhTWFwcGluZ0RpcmVjdGl2ZSB7XHJcbiAgQElucHV0KFwibWFwRmllbGRzXCIpIG15RmllbGQ6IGFueTtcclxuICBAT3V0cHV0KCkgc2hvd01vZGFsID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSB2bTogVmlld01vZGVsLFxyXG4gICAgcHJpdmF0ZSBleHRJbnRlZ3JhdGlvbkNvbXBvbmVudDogRXh0ZXJuYWxJbnRlZ3JhdGlvbkNvbXBvbmVudFxyXG4gICkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmV4dEludGVncmF0aW9uQ29tcG9uZW50LnNlbGVjdFNhcERhdGEuc3Vic2NyaWJlKChkYXRhOmFueSkgPT4ge1xyXG4gICAgICB0aGlzLm1hcHBpbmdEYXRhKGRhdGEsIHRoaXMubXlGaWVsZCk7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgXHJcbiAgLyoqXHJcbiAgICog5a2X5q615pig5bCEXHJcbiAgICogQHBhcmFtIHNhcERhdGEgc2Fw6L+U5Zue5L+h5oGvXHJcbiAgICogQHBhcmFtIG1hcHBpbmdGaWVsZCDmmKDlsITlhbPns7tcclxuICAgKi9cclxuICBtYXBwaW5nRGF0YShzYXBEYXRhLCBtYXBwaW5nRmllbGQpIHtcclxuICAgIGxldCBoZWxwRmllbGRzID0gT2JqZWN0LmtleXMobWFwcGluZ0ZpZWxkKTtcclxuICAgIGhlbHBGaWVsZHMuZm9yRWFjaCgoZmllbGROYW1lOiBhbnkpID0+IHtcclxuICAgICAgbGV0IHBhdGhBcnIgPSB0aGlzLmdldEJpbmRpbmdQYXRoQXJyYXkoKTtcclxuICAgICAgLy8g6I635Y+W5a2X5q615YC8XHJcbiAgICAgIGxldCB2YWw6IGFueTtcclxuICAgICAgaWYgKHNhcERhdGEpIHtcclxuICAgICAgICB2YWwgPSBzYXBEYXRhW2ZpZWxkTmFtZV07XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52bS5iaW5kaW5nRGF0YS5zZXRWYWx1ZShcclxuICAgICAgICBwYXRoQXJyLmNvbmNhdChtYXBwaW5nRmllbGRbZmllbGROYW1lXSksXHJcbiAgICAgICAgdmFsLFxyXG4gICAgICAgIHRydWUsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEJpbmRpbmdQYXRoQXJyYXkoKTogYW55W10ge1xyXG4gICAgY29uc3QgcGF0aCA9IHRoaXMudm0uYmluZGluZ1BhdGg7XHJcbiAgICBpZiAocGF0aCkge1xyXG4gICAgICByZXR1cm4gcGF0aC5zcGxpdChcIi9cIikuZmlsdGVyKChuKSA9PiBuICE9PSBcIlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIFxyXG59XHJcbiJdfQ==