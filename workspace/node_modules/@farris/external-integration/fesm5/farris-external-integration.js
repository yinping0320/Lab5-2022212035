import { __extends } from 'tslib';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import { of } from 'rxjs';
import { Injectable, Output, EventEmitter, Component, ComponentFactoryResolver, ElementRef, forwardRef, Injector, Input, Optional, ViewChild, ViewContainerRef, Renderer2, Directive, NgModule } from '@angular/core';
import { VariableParseService, ViewModel } from '@farris/devkit';
import { CommonModule } from '@angular/common';
import { DialogService, FarrisDialogModule } from '@farris/ui-dialog';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NgControl, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { LocaleModule } from '@farris/ui-locale';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { TreeModule } from '@farris/ui-tree';
import { FarrisTabsModule } from '@farris/ui-tabs';
import { RuntimeStateService, FarrisCommonModule } from '@farris/ui-common';
import { FarrisFormsModule } from '@farris/ui-forms';
import { TextModule } from '@farris/ui-text';
import { MessagerModule } from '@farris/ui-messager';
import { NotifyModule } from '@farris/ui-notify';
import { LayoutModule } from '@farris/ui-layout';
import { GRID_EDITORS, DatagridComponent, DatagridModule } from '@farris/ui-datagrid';
import { InputGroupModule } from '@farris/ui-input-group';
import { FormMessageModule } from '@farris/ui-forms/validation-message';
import { ListNavModule } from '@farris/ui-list-nav';
import { ListViewModule } from '@farris/ui-list-view';
import { RouterModule } from '@angular/router';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/external-integration/external-integration-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExternalIntegrationService = /** @class */ (function () {
    function ExternalIntegrationService(http, variableParseService, vm) {
        this.http = http;
        this.variableParseService = variableParseService;
        this.vm = vm;
        this.sapData = new EventEmitter();
        this.sapUrl = "/api/runtime/icc/v1.0/externalServiceOpenApi/invokeService";
    }
    /**
     * 调用外部服务
     */
    /**
     * 调用外部服务
     * @param {?} externalParams
     * @param {?} serviceCode
     * @return {?}
     */
    ExternalIntegrationService.prototype.queryExtIntegrationService = /**
     * 调用外部服务
     * @param {?} externalParams
     * @param {?} serviceCode
     * @return {?}
     */
    function (externalParams, serviceCode) {
        var _this = this;
        /** @type {?} */
        var req = this.assembleSapRequest(externalParams, serviceCode);
        this.http.post(this.sapUrl, req).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var respObj = Object.create(response);
            if (!respObj || !respObj.success) {
                return;
            }
            /** @type {?} */
            var resp = Object.create(respObj);
            /** @type {?} */
            var sapData = resp.data;
            _this.sapData.emit(sapData);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.log(error);
            _this.sapData.emit({});
        }));
    };
    /**
     * 组装sap api入参
     */
    /**
     * 组装sap api入参
     * @private
     * @param {?} externalParams
     * @param {?} serviceCode
     * @return {?}
     */
    ExternalIntegrationService.prototype.assembleSapRequest = /**
     * 组装sap api入参
     * @private
     * @param {?} externalParams
     * @param {?} serviceCode
     * @return {?}
     */
    function (externalParams, serviceCode) {
        /** @type {?} */
        var params = JSON.parse(JSON.stringify(externalParams));
        /** @type {?} */
        var requestParam = {
            code: serviceCode,
            params: this.variableParseService.parse(params, this.vm.frameContext),
        };
        return requestParam;
    };
    ExternalIntegrationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExternalIntegrationService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: VariableParseService },
        { type: ViewModel }
    ]; };
    ExternalIntegrationService.propDecorators = {
        sapData: [{ type: Output }]
    };
    return ExternalIntegrationService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/external-integration/external-integration.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExternalIntegrationComponent = /** @class */ (function () {
    function ExternalIntegrationComponent(vm, el, extIntgrtnSrvc, variableParseService, resolver, inj) {
        var _this = this;
        this.vm = vm;
        this.el = el;
        this.extIntgrtnSrvc = extIntgrtnSrvc;
        this.variableParseService = variableParseService;
        this.resolver = resolver;
        this.inj = inj;
        /**
         * 模态框宽
         */
        this.width = 960;
        /**
         * 模态框高
         */
        this.height = 577;
        this.fieldText = "";
        this.placeholder = "请选择";
        // 是否只读
        this.readonly = false;
        /**
         * 内容中留白边距
         */
        this.containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };
        /**
         * 指令回填sap数据
         */
        this.selectSapData = new EventEmitter();
        this.afterOnblur = new EventEmitter();
        /**
         * 多表数据集合
         */
        this.tableData = [];
        /**
         * 模态框导航栏当前选中项
         */
        this.currentLink = {};
        /**
         * 模态框确定按钮是否可用
         */
        this.ensureFlag = true;
        this.containerStyle = {
            marginLeft: this.containerMargin.left + "px",
            marginRight: this.containerMargin.right + "px",
            marginTop: this.containerMargin.top + "px",
            marginBottom: this.containerMargin.bottom + "px"
        };
        this.beforeClose = (/**
         * @return {?}
         */
        function () {
            _this.tableData = [];
            _this.ensureFlag = true;
            _this.sendSapData();
            return of(true);
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) { };
    /**
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.fieldTextChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pathArr = this.getBindingPathArray();
        this.vm.bindingData.setValue(pathArr.concat(this.ngControl.name), this.fieldText, true, true);
    };
    /**
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} obj
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.fieldText = obj;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) { };
    /**
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngControl = this.inj.get(NgControl);
        // 卡片绑定onblur事件，表格再grid-external-integration中绑定onblur事件
        if (this.mappingType != "grid") {
            this.input.nativeElement.onblur = (/**
             * @return {?}
             */
            function () {
                _this.callSapService();
            });
        }
        this.extIntgrtnSrvc.sapData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.sapDataHandle(data);
        }));
    };
    /**
     * 打开模态框
     * @returns
     */
    /**
     * 打开模态框
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.showDialog = /**
     * 打开模态框
     * @return {?}
     */
    function () {
        this.farrisListView.listClick.emit({
            data: [this.tableData[0]],
            index: 0,
            checkChangeEvent: false
        });
        this.farrisListView.clickItem = this.tableData[0];
        this.dialog.show();
        return false;
    };
    /**
     * 调用sap外部服务，出参在ngOninit监听
     */
    /**
     * 调用sap外部服务，出参在ngOninit监听
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.callSapService = /**
     * 调用sap外部服务，出参在ngOninit监听
     * @return {?}
     */
    function () {
        this.fieldTextChange();
        this.extIntgrtnSrvc.queryExtIntegrationService(this.externalParams, this.serviceCode);
    };
    /**
     * 处理sap出参
     * @param data sap出参
     */
    /**
     * 处理sap出参
     * @param {?} data sap出参
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.sapDataHandle = /**
     * 处理sap出参
     * @param {?} data sap出参
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (!data) {
            return;
        }
        /** @type {?} */
        var tableNameList = Object.keys(data);
        /** @type {?} */
        var mapTableList = this.getTableListFromMapFields();
        // 取交集
        tableNameList = tableNameList.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return mapTableList.indexOf(item) != -1;
        }));
        // 多表场景
        if (tableNameList.length > 1) {
            // 校验是否弹出模态框
            /** @type {?} */
            var openDialogFlag = this.checkMultiTableData(data, tableNameList);
            if (openDialogFlag == "open") {
                // 组装模态框数据
                this.assembleTableData(data);
                this.showDialog();
            }
            else if (openDialogFlag == "backfill") {
                // 多表，每个表只有一条数据
                /** @type {?} */
                var backfillData_1 = {};
                tableNameList.forEach((/**
                 * @param {?} tableName
                 * @return {?}
                 */
                function (tableName) {
                    Object.assign(backfillData_1, _this.assembleSapData(tableName, data[tableName][0]));
                }));
                this.sendSapData(backfillData_1);
            }
            else {
                // 多表无数据
                this.sendSapData();
            }
        }
        else if (tableNameList.length == 1) {
            /** @type {?} */
            var tableName = tableNameList[0];
            /** @type {?} */
            var sapDataLength = (data[tableName] || []).length;
            if (sapDataLength > 0) {
                if (sapDataLength == 1) {
                    // 一个表只有一条数据
                    /** @type {?} */
                    var sapData = this.assembleSapData(tableName, data[tableName][0]);
                    this.sendSapData(sapData);
                }
                else if (sapDataLength > 1) {
                    // 一个表有多条数据
                    this.assembleTableData(data);
                    this.showDialog();
                    return;
                }
            }
        }
        else {
            // 处理查询异常，editor没有endPending
            this.sendSapData();
        }
    };
    /**
     * @param {?} data
     * @param {?} tableNameList
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.checkMultiTableData = /**
     * @param {?} data
     * @param {?} tableNameList
     * @return {?}
     */
    function (data, tableNameList) {
        /** @type {?} */
        var openDialogFlag = "";
        for (var index = 0; index < tableNameList.length; index++) {
            /** @type {?} */
            var tableName = tableNameList[index];
            if (data[tableName].length > 1) {
                openDialogFlag = "open";
                break;
            }
            else if (data[tableName].length == 0 && openDialogFlag != "backfill") {
                openDialogFlag = "none";
                continue;
            }
            openDialogFlag = "backfill";
        }
        return openDialogFlag;
    };
    /**
     * 组装模态框数据
     * @param data sap出参
     */
    /**
     * 组装模态框数据
     * @param {?} data sap出参
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.assembleTableData = /**
     * 组装模态框数据
     * @param {?} data sap出参
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var tableNameList = Object.keys(data);
        /** @type {?} */
        var mapTableList = this.getTableListFromMapFields();
        // 取交集
        mapTableList = mapTableList.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return tableNameList.indexOf(item) != -1;
        }));
        if (mapTableList.length > 0) {
            // 遍历sap映射表，组装表及对应数据
            mapTableList.forEach((/**
             * @param {?} mapTable
             * @return {?}
             */
            function (mapTable) {
                // 组装模态框中单表数据
                /** @type {?} */
                var tableInfo = _this.assembleTableInfo(mapTable, data);
                if (tableInfo &&
                    Object.keys(tableInfo).length > 0 &&
                    (tableInfo.data || []).length > 0) {
                    _this.tableData.push(tableInfo);
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.getTableListFromMapFields = /**
     * @return {?}
     */
    function () {
        // 获取需要回填的表
        /** @type {?} */
        var mapKeyList = Object.keys(this.myField);
        // 定义sap映射表集合
        /** @type {?} */
        var mapTableList = [];
        (mapKeyList || []).forEach((/**
         * @param {?} mapKey
         * @return {?}
         */
        function (mapKey) {
            // 在映射关系中获取sap出参中的表集合
            mapTableList.push(mapKey.split(".")[0]);
        }));
        // 去重
        mapTableList = Array.from(new Set(mapTableList));
        return mapTableList;
    };
    /**
     * 组装模态框中单表数据
     * @param mapTable 表名
     * @param data sap出参
     * @returns 模态框单表数据对象
     */
    /**
     * 组装模态框中单表数据
     * @param {?} mapTable 表名
     * @param {?} data sap出参
     * @return {?} 模态框单表数据对象
     */
    ExternalIntegrationComponent.prototype.assembleTableInfo = /**
     * 组装模态框中单表数据
     * @param {?} mapTable 表名
     * @param {?} data sap出参
     * @return {?} 模态框单表数据对象
     */
    function (mapTable, data) {
        // 模态框单表数据对象
        /** @type {?} */
        var tableInfo = {};
        // 表头集合
        /** @type {?} */
        var tableColumnList = [];
        // 遍历sap出参表信息，获取表头中文、表名
        (this.extTableSchemas || []).forEach((/**
         * @param {?} tableSchema
         * @return {?}
         */
        function (tableSchema) {
            if (tableSchema.code == mapTable) {
                tableInfo.name = tableSchema.name;
                // 模拟主键，保证farris-grid组件【单选】功能正常
                /** @type {?} */
                var idColumn = {};
                idColumn.field = "id";
                idColumn.title = "序号";
                tableColumnList.push(idColumn);
                // 组装表头
                tableSchema.columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) {
                    /** @type {?} */
                    var tableColumn = {};
                    tableColumn.field = column.code;
                    tableColumn.title = column.name;
                    tableColumnList.push(tableColumn);
                }));
                tableInfo.columns = tableColumnList;
                tableInfo.code = mapTable;
                // 给表数据增加模拟主键
                (data[mapTable] || []).forEach((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                function (item, index) {
                    item["id"] = index + 1;
                }));
                tableInfo.data = data[mapTable];
            }
        }));
        return tableInfo;
    };
    /**
     * 导航栏点击事件
     * @param event 导航栏信息
     * @returns
     */
    /**
     * 导航栏点击事件
     * @param {?} event 导航栏信息
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.listClick = /**
     * 导航栏点击事件
     * @param {?} event 导航栏信息
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var clickData = event.data;
        if (event.data.disable) {
            return false;
        }
        else {
            if (typeof this.currentLink["data"] !== "undefined") {
                if (clickData[0].code === this.currentLink["data"][0].code) {
                    return false;
                }
                else {
                    this.currentLink = event;
                }
            }
            else {
                this.currentLink = event;
            }
        }
    };
    /**
     * 模态框，确定，取消按钮
     * @param flag ensure:确定按钮，cancel：取消按钮
     */
    /**
     * 模态框，确定，取消按钮
     * @param {?} flag ensure:确定按钮，cancel：取消按钮
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.confirm = /**
     * 模态框，确定，取消按钮
     * @param {?} flag ensure:确定按钮，cancel：取消按钮
     * @return {?}
     */
    function (flag) {
        // 点击确定按钮
        if (flag == "ensure") {
            /** @type {?} */
            var sapData = {};
            // 遍历模态框表数据，组装回填数据
            for (var index = 0; index < this.tableData.length; index++) {
                /** @type {?} */
                var tableInfo = this.tableData[index];
                Object.assign(sapData, this.assembleSapData(tableInfo.code, tableInfo.selectedData.data));
            }
            this.sendSapData(sapData);
        }
        // 清空模态框数据
        this.tableData = [];
        // 关闭模态框
        this.dialog.close();
    };
    /**
     * 选中一行事件
     * @param selectedRow 选中行数据
     * @param tableName 当前表格对应表名
     */
    /**
     * 选中一行事件
     * @param {?} selectedRow 选中行数据
     * @param {?} tableName 当前表格对应表名
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.selectRowChange = /**
     * 选中一行事件
     * @param {?} selectedRow 选中行数据
     * @param {?} tableName 当前表格对应表名
     * @return {?}
     */
    function (selectedRow, tableName) {
        this.tableData.forEach((/**
         * @param {?} tableInfo
         * @return {?}
         */
        function (tableInfo) {
            if (tableInfo.code == tableName) {
                tableInfo.selectedData = selectedRow;
            }
        }));
        this.setEnsureButtonFlag();
    };
    /**
     * 取消一行事件
     * @param selectedRow 被取消行数据
     * @param tableName 当前表格对应表名
     */
    /**
     * 取消一行事件
     * @param {?} selectedRow 被取消行数据
     * @param {?} tableName 当前表格对应表名
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.unSelect = /**
     * 取消一行事件
     * @param {?} selectedRow 被取消行数据
     * @param {?} tableName 当前表格对应表名
     * @return {?}
     */
    function (selectedRow, tableName) {
        this.tableData.forEach((/**
         * @param {?} tableInfo
         * @return {?}
         */
        function (tableInfo) {
            if (tableInfo.code == tableName) {
                tableInfo.selectedData = null;
                tableInfo.selectedValue = "";
            }
        }));
        selectedRow = null;
        this.setEnsureButtonFlag();
    };
    /**
     * 设置模态框确定按钮是否可用
     */
    /**
     * 设置模态框确定按钮是否可用
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.setEnsureButtonFlag = /**
     * 设置模态框确定按钮是否可用
     * @return {?}
     */
    function () {
        /** @type {?} */
        var flag = false;
        for (var index = 0; index < this.tableData.length; index++) {
            /** @type {?} */
            var tableInfo = this.tableData[index];
            if (!tableInfo.selectedData) {
                flag = true;
                break;
            }
        }
        this.ensureFlag = flag;
    };
    /**
     * 组装sap回填数据
     * @param tableName 表名
     * @param tableData 表数据
     * @returns (表名.表字段名:表数据):Object
     */
    /**
     * 组装sap回填数据
     * @param {?} tableName 表名
     * @param {?} tableData 表数据
     * @return {?} (表名.表字段名:表数据):Object
     */
    ExternalIntegrationComponent.prototype.assembleSapData = /**
     * 组装sap回填数据
     * @param {?} tableName 表名
     * @param {?} tableData 表数据
     * @return {?} (表名.表字段名:表数据):Object
     */
    function (tableName, tableData) {
        if (!tableName || !tableData) {
            return;
        }
        // sap回填数据
        /** @type {?} */
        var sapData = {};
        // 表字段名集合
        /** @type {?} */
        var tableDataItemKeys = Object.keys(tableData);
        for (var index = 0; index < tableDataItemKeys.length; index++) {
            /** @type {?} */
            var itemKey = tableDataItemKeys[index];
            // sap回填数据key= 表名.表字段名
            /** @type {?} */
            var key = tableName + "." + itemKey;
            sapData[key] = tableData[itemKey];
        }
        return sapData;
    };
    /**
     * 回填sap数据
     * @param sapData 将要回填的sap数据
     */
    /**
     * 回填sap数据
     * @private
     * @param {?=} sapData 将要回填的sap数据
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.sendSapData = /**
     * 回填sap数据
     * @private
     * @param {?=} sapData 将要回填的sap数据
     * @return {?}
     */
    function (sapData) {
        if (sapData) {
            this.selectSapData.emit(sapData);
        }
        // 子表关闭editor状态
        if (this.mappingType == "grid") {
            this.afterOnblur.emit();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ExternalIntegrationComponent.prototype.getBindingPathArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var path = this.vm.bindingPath;
        if (path) {
            return path.split("/").filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== ""; }));
        }
        return [];
    };
    ExternalIntegrationComponent.decorators = [
        { type: Component, args: [{
                    selector: "web-external-integration",
                    template: "<input [(ngModel)]=\"fieldText\" #input  class=\"form-control\" input-end-edit [readonly]=\"false\"\r\n  tabindex=\"0\" maxlength=\"36\" />\r\n\r\n<farris-dialog #dialog [title]=\"'\u9009\u62E9\u6570\u636E'\" [beforeClose]=\"beforeClose\"  [width]=\"1000\" [height]=\"834\" [showButtons]=\"true\" [showMaxButton]=\"true\"\r\n  [showCloseButton]=\"true\" [enableScroll]=\"false\" [dialogHeaderHeight]=\"50\" [buttons]=\"defaultButtonRef\">\r\n  <div [ngStyle]=\"containerStyle\" style=\"height: 100%;\">\r\n    <div class=\"listnav-example-wrapper\">\r\n      <div class=\"example-side-nav\">\r\n        <farris-list-nav  [listNavWidth]=\"240\" (listClick)=\"listClick($event)\">\r\n          <ng-template listNavContent>\r\n            <farris-list-view #farrisListView [showEmpty]=\"true\" [data]=\"tableData\" [activeIndex]=\"3\" listidName=\"code\" (listClick)=\"listClick($event)\">\r\n              <ng-template #navView listTemplate let-item=\"item\" let-selected=\"selectedItem\">\r\n                <div class=\"f-template-listnav-row\">\r\n                  <!-- routerLinkActive=\"active\" -->\r\n                  <a class=\"list-nav-link\" [ngStyle]=\"{'pointer-events': item.disable ?'none' : '','width':240 +'px'}\"\r\n                     [title]=\"item.name\">\r\n                    <span class=\"nav-item-name\">\r\n                      {{ item.name }}\r\n                    </span>\r\n                  </a>\r\n                </div>\r\n              </ng-template>\r\n            </farris-list-view>\r\n          </ng-template>\r\n\r\n          <!-- <ng-template listNavFooter>\r\n                \u5E95\u90E8\u90E8\u5206\r\n            </ng-template> -->\r\n\r\n        </farris-list-nav>\r\n      </div>\r\n      <div class=\"example-content\" >\r\n        <ng-container #girdView *ngFor=\"let item of tableData;let i = index\">\r\n          <div style=\"height:100%\" [hidden]=\"! (currentLink && item.code == ((currentLink['data'] || [])[0] || {})['code'])\" >\r\n            <farris-datagrid \r\n              [autoFitColumns]=\"true\" \r\n              [columns]=\"item.columns\" \r\n              [data]=\"item.data\" \r\n              [fitColumns]=\"true\"\r\n              [fit]=\"true\" \r\n              [showBorder]=\"true\" \r\n              [(selectValue)]=\"item.selectedValue\"\r\n              [keepSelect]=\"false\"\r\n              [pagination]=\"false\"\r\n              (selectChanged)=\"selectRowChange($event, item.code)\"\r\n              (unSelect)=\"unSelect(null, item.code)\">\r\n            </farris-datagrid>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<ng-template #defaultButtonRef>\r\n  <button #okbtn type=\"button\" [disabled]=\"ensureFlag\" (click)=\"confirm('ensure')\"  class=\"btn btn-primary btn-lg\">\r\n    {{ 'lookup.okText' | locale: '\u786E\u5B9A' }}\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-lg\" (click)=\"confirm('cancel')\" [disabled]=\"false\">\r\n    {{ 'lookup.cancelText' | locale: '\u53D6\u6D88' }}\r\n  </button>\r\n</ng-template>",
                    providers: [
                        ExternalIntegrationService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ExternalIntegrationComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".listnav-example-wrapper{background-color:#e7ebef;display:flex;height:100%}.listnav-example-wrapper .example-side-nav{flex:0 0 auto}.listnav-example-wrapper .example-content{flex:1 1 0;width:726px;overflow-y:auto;padding:10px 10px 10px 4px}.listnav-example-wrapper .example-content .listnav-content{height:100%;width:100%;background-color:#fff}.listnav-example-wrapper .example-content.example-content-right{padding:10px 4px 10px 10px}"]
                }] }
    ];
    /** @nocollapse */
    ExternalIntegrationComponent.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: ExternalIntegrationService },
        { type: VariableParseService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    ExternalIntegrationComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        serviceCode: [{ type: Input, args: ["serviceCode",] }],
        externalParams: [{ type: Input, args: ["externalParams",] }],
        mappingType: [{ type: Input, args: ["mappingType",] }],
        myField: [{ type: Input, args: ["mapFields",] }],
        fieldText: [{ type: Input }],
        extTableSchemas: [{ type: Input, args: ["extTableSchemas",] }],
        placeholder: [{ type: Input }],
        readonly: [{ type: Input }],
        beforeSapSrvc: [{ type: Input }],
        customData: [{ type: Input }],
        selectSapData: [{ type: Output }],
        afterOnblur: [{ type: Output }],
        dialog: [{ type: ViewChild, args: ["dialog",] }],
        input: [{ type: ViewChild, args: ["input",] }],
        girdView: [{ type: ViewChild, args: ["girdView", { read: ViewContainerRef },] }],
        farrisListView: [{ type: ViewChild, args: ["farrisListView",] }]
    };
    return ExternalIntegrationComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/external-integration/grid-external-integration.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ExtIntgrtnDefautOption = {
    readonly: false,
    // 是否只读
    placeholder: "请选择",
    viewType: "tag"
};
var DatagridExtIntgrtnComponent = /** @class */ (function (_super) {
    __extends(DatagridExtIntgrtnComponent, _super);
    function DatagridExtIntgrtnComponent(render, el, rts, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.stopPropagation = false;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridExtIntgrtnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.input.nativeElement;
        this.options = Object.assign({}, ExtIntgrtnDefautOption, this.options);
        this.column.editor.options.onBlur = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.editorRef.startPending();
            e.editorRef.formControl.setValue(_this.instance.fieldText);
            _this.instance.callSapService();
            _this.instance.afterOnblur.subscribe((/**
             * @return {?}
             */
            function () {
                e.editorRef.endPending();
            }));
        });
    };
    /**
     * @return {?}
     */
    DatagridExtIntgrtnComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridExtIntgrtnComponent.decorators = [
        { type: Component, args: [{
                    selector: "grid-external-integration",
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n      <web-external-integration\n        #extIntgrtn\n        style=\"width: 100%\"\n        extIntegration-dataMapping\n        [placeholder]=\"options.placeholder\"\n        [readonly]=\"options.readonly\"\n        [mapFields]=\"options.mapFields\"\n        [serviceCode] = \"options.serviceCode\"\n        [externalParams] = \"options.externalParams\"\n        [extTableSchemas] = \"options.extTableSchemas\"\n        [formControlName]=\"column.field\"\n        [mappingType] = \"'grid'\"\n        \n      ></web-external-integration>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    DatagridExtIntgrtnComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: Injector }
    ]; };
    DatagridExtIntgrtnComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ["extIntgrtn",] }]
    };
    return DatagridExtIntgrtnComponent;
}(DatagridBaseEditorDirective));
/** @type {?} */
var ExtIntgrtnDataGridEditorProvider = {
    provide: GRID_EDITORS,
    useValue: { name: "external-integration", value: DatagridExtIntgrtnComponent },
    multi: true
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ext-integration-data-mapping.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExtIntegrationDataMappingDirective = /** @class */ (function () {
    function ExtIntegrationDataMappingDirective(vm, extIntegrationComponent) {
        this.vm = vm;
        this.extIntegrationComponent = extIntegrationComponent;
        this.showModal = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ExtIntegrationDataMappingDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.extIntegrationComponent.selectSapData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.mappingData(data, _this.myField);
        }));
    };
    /**
     * 字段映射
     * @param sapData sap返回信息
     * @param mappingField 映射关系
     */
    /**
     * 字段映射
     * @param {?} sapData sap返回信息
     * @param {?} mappingField 映射关系
     * @return {?}
     */
    ExtIntegrationDataMappingDirective.prototype.mappingData = /**
     * 字段映射
     * @param {?} sapData sap返回信息
     * @param {?} mappingField 映射关系
     * @return {?}
     */
    function (sapData, mappingField) {
        var _this = this;
        /** @type {?} */
        var helpFields = Object.keys(mappingField);
        helpFields.forEach((/**
         * @param {?} fieldName
         * @return {?}
         */
        function (fieldName) {
            /** @type {?} */
            var pathArr = _this.getBindingPathArray();
            // 获取字段值
            /** @type {?} */
            var val;
            if (sapData) {
                val = sapData[fieldName];
            }
            _this.vm.bindingData.setValue(pathArr.concat(mappingField[fieldName]), val, true, true);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ExtIntegrationDataMappingDirective.prototype.getBindingPathArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var path = this.vm.bindingPath;
        if (path) {
            return path.split("/").filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== ""; }));
        }
        return [];
    };
    ExtIntegrationDataMappingDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[extIntegration-dataMapping]",
                },] }
    ];
    /** @nocollapse */
    ExtIntegrationDataMappingDirective.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: ExternalIntegrationComponent }
    ]; };
    ExtIntegrationDataMappingDirective.propDecorators = {
        myField: [{ type: Input, args: ["mapFields",] }],
        showModal: [{ type: Output }]
    };
    return ExtIntegrationDataMappingDirective;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/external-integration.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExternalIntegrationModule = /** @class */ (function () {
    function ExternalIntegrationModule() {
    }
    ExternalIntegrationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ExtIntegrationDataMappingDirective,
                        ExternalIntegrationComponent,
                        DatagridExtIntgrtnComponent
                    ],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        ListViewModule,
                        RouterModule,
                        ListNavModule,
                        InputGroupModule,
                        TextModule,
                        HttpClientModule,
                        FormMessageModule,
                        PerfectScrollbarModule,
                        TreeModule,
                        FarrisTabsModule,
                        FarrisFormsModule,
                        FormsModule,
                        FarrisCommonModule.forRoot(),
                        FarrisDialogModule.forRoot(),
                        MessagerModule.forRoot(),
                        NotifyModule.forRoot(),
                        LayoutModule,
                        LocaleModule.forRoot(),
                        ModalModule.forRoot(),
                        DatagridModule
                    ],
                    providers: [BsModalService, DialogService],
                    entryComponents: [DatagridExtIntgrtnComponent, DatagridComponent],
                    exports: [
                        ExtIntegrationDataMappingDirective,
                        ExternalIntegrationComponent,
                        DatagridExtIntgrtnComponent
                    ]
                },] }
    ];
    return ExternalIntegrationModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-external-integration.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DatagridExtIntgrtnComponent, ExtIntgrtnDataGridEditorProvider, ExternalIntegrationModule, ExtIntegrationDataMappingDirective, ExternalIntegrationService, ExternalIntegrationComponent };

//# sourceMappingURL=farris-external-integration.js.map