/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { PropertyEntity } from '../entity/property-entity';
var UniformPropertyComponent = /** @class */ (function () {
    function UniformPropertyComponent() {
        this.valueChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    UniformPropertyComponent.prototype.initImportedOriginalData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var editorParams = this.elementConfig.editorParams;
        /** @type {?} */
        var constType = editorParams.constType;
        /** @type {?} */
        var valueType = this.getValueType();
        this.importedOriginalData = {
            controlName: editorParams.controlName,
            propertyName: this.elementConfig.propertyID,
            propertyType: constType,
            propertyValue: {
                type: valueType,
                value: this.elementValue
            },
            editorOptions: editorParams.editorOptions
        };
    };
    /**
     * 通过当前配置信息和值信息推断当前值的类型
     * @returns 值类型
     */
    /**
     * 通过当前配置信息和值信息推断当前值的类型
     * @return {?} 值类型
     */
    UniformPropertyComponent.prototype.getValueType = /**
     * 通过当前配置信息和值信息推断当前值的类型
     * @return {?} 值类型
     */
    function () {
        /** @type {?} */
        var propertyValue = this.elementValue;
        /** @type {?} */
        var editorParams = this.elementConfig.editorParams;
        /** @type {?} */
        var constType = editorParams.constType;
        /** @type {?} */
        var types = editorParams.editorOptions.types;
        // 当前值为对象时
        if (propertyValue && typeof propertyValue === "object") {
            // 判断是否为变量类型
            if (propertyValue.hasOwnProperty("type") && (typeof propertyValue.type === "string" && propertyValue.type.toLowerCase() === "variable")) {
                if (types.includes("variable"))
                    return "variable";
            }
        }
        // 当前值为字符串时
        if (typeof propertyValue === "string") {
            // 判断是否为自定义类型（通过是否含有“viewModel”子串硬推断）
            if (types.includes("custom") && (propertyValue.includes("viewModel") || !types.includes("const") || constType !== "string")) {
                return "custom";
            }
            // 判断是否为字符串常量
            if (types.includes("const") && constType === "string") {
                return "const";
            }
        }
        // 当前值为数字时
        if (typeof propertyValue === "number") {
            if (types.includes("const") && constType === "number") {
                return "const";
            }
        }
        // 默认为const类型（为枚举类型兜底）
        if (types.includes("const")) {
            return "const";
        }
        // 如果都找不到则任意返回一个值
        return types[0];
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    UniformPropertyComponent.prototype.handleValueChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var newValue = $event.propertyValue.value;
        if ($event.propertyValue.type === "variable" && typeof newValue === "object") {
            newValue.type = "Variable";
            if (newValue.name) {
                delete newValue.name;
            }
            if ($event["isNewVariable"]) {
                newValue["isNewVariable"] = true;
            }
        }
        this.valueChanged.next({ $event: $event, elementValue: newValue });
    };
    /**
     * @return {?}
     */
    UniformPropertyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initImportedOriginalData();
    };
    UniformPropertyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-unity-prop',
                    template: "\n      <div class=\"farris-input-wrap\">\n        <farris-propertyEditor\n          [importedOriginalData]=\"importedOriginalData\"\n          (propertyEditorValueChanged)=\"handleValueChanged($event)\">\n        </farris-propertyEditor>\n      </div>\n    "
                }] }
    ];
    UniformPropertyComponent.propDecorators = {
        elementConfig: [{ type: Input }],
        elementValue: [{ type: Input }],
        valueChanged: [{ type: Output }]
    };
    return UniformPropertyComponent;
}());
export { UniformPropertyComponent };
if (false) {
    /** @type {?} */
    UniformPropertyComponent.prototype.elementConfig;
    /** @type {?} */
    UniformPropertyComponent.prototype.elementValue;
    /** @type {?} */
    UniformPropertyComponent.prototype.valueChanged;
    /** @type {?} */
    UniformPropertyComponent.prototype.importedOriginalData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtcHJvcGVydHktcGFuZWwvIiwic291cmNlcyI6WyJsaWIvcHJvcGVydHktcGFuZWwvY29udHJvbHMvdW5pdHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFM0Q7SUFBQTtRQWVZLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQWlGbkQsQ0FBQzs7OztJQTdFQywyREFBd0I7OztJQUF4Qjs7WUFDUSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZOztZQUM5QyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVM7O1lBQ2xDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ3JDLElBQUksQ0FBQyxvQkFBb0IsR0FBRztZQUMxQixXQUFXLEVBQUUsWUFBWSxDQUFDLFdBQVc7WUFDckMsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVTtZQUMzQyxZQUFZLEVBQUUsU0FBUztZQUN2QixhQUFhLEVBQUU7Z0JBQ2IsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZO2FBQ3pCO1lBQ0QsYUFBYSxFQUFFLFlBQVksQ0FBQyxhQUFhO1NBQzFDLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHOzs7OztJQUNILCtDQUFZOzs7O0lBQVo7O1lBQ1EsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZOztZQUNqQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZOztZQUM5QyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVM7O1lBQ2xDLEtBQUssR0FBYSxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUs7UUFFeEQsVUFBVTtRQUNWLElBQUksYUFBYSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsRUFBRTtZQUN0RCxZQUFZO1lBQ1osSUFBSSxhQUFhLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxhQUFhLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLFVBQVUsQ0FBQyxFQUFFO2dCQUN2SSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO29CQUM1QixPQUFPLFVBQVUsQ0FBQzthQUNyQjtTQUNGO1FBQ0QsV0FBVztRQUNYLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO1lBQ3JDLHFDQUFxQztZQUNyQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBRSxhQUFhLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLEtBQUssUUFBUSxDQUFFLEVBQUU7Z0JBQzdILE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsYUFBYTtZQUNiLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLEtBQUssUUFBUSxFQUFFO2dCQUNyRCxPQUFPLE9BQU8sQ0FBQzthQUNoQjtTQUNGO1FBQ0QsVUFBVTtRQUNWLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO1lBQ3JDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLEtBQUssUUFBUSxFQUFFO2dCQUNyRCxPQUFPLE9BQU8sQ0FBQzthQUNoQjtTQUNGO1FBQ0Qsc0JBQXNCO1FBQ3RCLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUNELGlCQUFpQjtRQUNqQixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDOzs7OztJQUVELHFEQUFrQjs7OztJQUFsQixVQUFtQixNQUFXOztZQUN4QixRQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLO1FBQ3pDLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssVUFBVSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUM1RSxRQUFRLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztZQUMzQixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ2pCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQzthQUN0QjtZQUNELElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFO2dCQUMzQixRQUFRLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ2xDO1NBQ0Y7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sUUFBQSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7SUFFRCwyQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUNsQyxDQUFDOztnQkE5RkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxvUUFPUDtpQkFDSjs7O2dDQUdFLEtBQUs7K0JBQ0wsS0FBSzsrQkFDTCxNQUFNOztJQWlGVCwrQkFBQztDQUFBLEFBaEdELElBZ0dDO1NBckZZLHdCQUF3Qjs7O0lBRW5DLGlEQUF1Qzs7SUFDdkMsZ0RBQTJCOztJQUMzQixnREFBaUQ7O0lBRWpELHdEQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJy4uL2VudGl0eS9wcm9wZXJ0eS1lbnRpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtdW5pdHktcHJvcCcsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgICAgPGRpdiBjbGFzcz1cImZhcnJpcy1pbnB1dC13cmFwXCI+XHJcbiAgICAgICAgPGZhcnJpcy1wcm9wZXJ0eUVkaXRvclxyXG4gICAgICAgICAgW2ltcG9ydGVkT3JpZ2luYWxEYXRhXT1cImltcG9ydGVkT3JpZ2luYWxEYXRhXCJcclxuICAgICAgICAgIChwcm9wZXJ0eUVkaXRvclZhbHVlQ2hhbmdlZCk9XCJoYW5kbGVWYWx1ZUNoYW5nZWQoJGV2ZW50KVwiPlxyXG4gICAgICAgIDwvZmFycmlzLXByb3BlcnR5RWRpdG9yPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIFVuaWZvcm1Qcm9wZXJ0eUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpIGVsZW1lbnRDb25maWc6IFByb3BlcnR5RW50aXR5O1xyXG4gIEBJbnB1dCgpIGVsZW1lbnRWYWx1ZTogYW55O1xyXG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgaW1wb3J0ZWRPcmlnaW5hbERhdGE6IGFueTtcclxuXHJcbiAgaW5pdEltcG9ydGVkT3JpZ2luYWxEYXRhKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZWRpdG9yUGFyYW1zID0gdGhpcy5lbGVtZW50Q29uZmlnLmVkaXRvclBhcmFtcztcclxuICAgIGNvbnN0IGNvbnN0VHlwZSA9IGVkaXRvclBhcmFtcy5jb25zdFR5cGU7XHJcbiAgICBjb25zdCB2YWx1ZVR5cGUgPSB0aGlzLmdldFZhbHVlVHlwZSgpO1xyXG4gICAgdGhpcy5pbXBvcnRlZE9yaWdpbmFsRGF0YSA9IHtcclxuICAgICAgY29udHJvbE5hbWU6IGVkaXRvclBhcmFtcy5jb250cm9sTmFtZSxcclxuICAgICAgcHJvcGVydHlOYW1lOiB0aGlzLmVsZW1lbnRDb25maWcucHJvcGVydHlJRCxcclxuICAgICAgcHJvcGVydHlUeXBlOiBjb25zdFR5cGUsXHJcbiAgICAgIHByb3BlcnR5VmFsdWU6IHtcclxuICAgICAgICB0eXBlOiB2YWx1ZVR5cGUsXHJcbiAgICAgICAgdmFsdWU6IHRoaXMuZWxlbWVudFZhbHVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGVkaXRvck9wdGlvbnM6IGVkaXRvclBhcmFtcy5lZGl0b3JPcHRpb25zXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6YCa6L+H5b2T5YmN6YWN572u5L+h5oGv5ZKM5YC85L+h5oGv5o6o5pat5b2T5YmN5YC855qE57G75Z6LXHJcbiAgICogQHJldHVybnMg5YC857G75Z6LXHJcbiAgICovXHJcbiAgZ2V0VmFsdWVUeXBlKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gdGhpcy5lbGVtZW50VmFsdWU7XHJcbiAgICBjb25zdCBlZGl0b3JQYXJhbXMgPSB0aGlzLmVsZW1lbnRDb25maWcuZWRpdG9yUGFyYW1zO1xyXG4gICAgY29uc3QgY29uc3RUeXBlID0gZWRpdG9yUGFyYW1zLmNvbnN0VHlwZTtcclxuICAgIGNvbnN0IHR5cGVzOiBzdHJpbmdbXSA9IGVkaXRvclBhcmFtcy5lZGl0b3JPcHRpb25zLnR5cGVzO1xyXG5cclxuICAgIC8vIOW9k+WJjeWAvOS4uuWvueixoeaXtlxyXG4gICAgaWYgKHByb3BlcnR5VmFsdWUgJiYgdHlwZW9mIHByb3BlcnR5VmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgLy8g5Yik5pat5piv5ZCm5Li65Y+Y6YeP57G75Z6LXHJcbiAgICAgIGlmIChwcm9wZXJ0eVZhbHVlLmhhc093blByb3BlcnR5KFwidHlwZVwiKSAmJiAodHlwZW9mIHByb3BlcnR5VmFsdWUudHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBwcm9wZXJ0eVZhbHVlLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJ2YXJpYWJsZVwiKSkge1xyXG4gICAgICAgIGlmICh0eXBlcy5pbmNsdWRlcyhcInZhcmlhYmxlXCIpKVxyXG4gICAgICAgICAgcmV0dXJuIFwidmFyaWFibGVcIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5b2T5YmN5YC85Li65a2X56ym5Liy5pe2XHJcbiAgICBpZiAodHlwZW9mIHByb3BlcnR5VmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgLy8g5Yik5pat5piv5ZCm5Li66Ieq5a6a5LmJ57G75Z6L77yI6YCa6L+H5piv5ZCm5ZCr5pyJ4oCcdmlld01vZGVs4oCd5a2Q5Liy56Gs5o6o5pat77yJXHJcbiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcyhcImN1c3RvbVwiKSAmJiAoIHByb3BlcnR5VmFsdWUuaW5jbHVkZXMoXCJ2aWV3TW9kZWxcIikgfHwgIXR5cGVzLmluY2x1ZGVzKFwiY29uc3RcIikgfHwgY29uc3RUeXBlICE9PSBcInN0cmluZ1wiICkpIHtcclxuICAgICAgICByZXR1cm4gXCJjdXN0b21cIjtcclxuICAgICAgfVxyXG4gICAgICAvLyDliKTmlq3mmK/lkKbkuLrlrZfnrKbkuLLluLjph49cclxuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKFwiY29uc3RcIikgJiYgY29uc3RUeXBlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiY29uc3RcIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5b2T5YmN5YC85Li65pWw5a2X5pe2XHJcbiAgICBpZiAodHlwZW9mIHByb3BlcnR5VmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKFwiY29uc3RcIikgJiYgY29uc3RUeXBlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiY29uc3RcIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g6buY6K6k5Li6Y29uc3TnsbvlnovvvIjkuLrmnprkuL7nsbvlnovlhZzlupXvvIlcclxuICAgIGlmICh0eXBlcy5pbmNsdWRlcyhcImNvbnN0XCIpKSB7XHJcbiAgICAgIHJldHVybiBcImNvbnN0XCI7XHJcbiAgICB9XHJcbiAgICAvLyDlpoLmnpzpg73mib7kuI3liLDliJnku7vmhI/ov5Tlm57kuIDkuKrlgLxcclxuICAgIHJldHVybiB0eXBlc1swXTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVZhbHVlQ2hhbmdlZCgkZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgbGV0IG5ld1ZhbHVlID0gJGV2ZW50LnByb3BlcnR5VmFsdWUudmFsdWU7XHJcbiAgICBpZiAoJGV2ZW50LnByb3BlcnR5VmFsdWUudHlwZSA9PT0gXCJ2YXJpYWJsZVwiICYmIHR5cGVvZiBuZXdWYWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICBuZXdWYWx1ZS50eXBlID0gXCJWYXJpYWJsZVwiO1xyXG4gICAgICBpZiAobmV3VmFsdWUubmFtZSkge1xyXG4gICAgICAgIGRlbGV0ZSBuZXdWYWx1ZS5uYW1lO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgkZXZlbnRbXCJpc05ld1ZhcmlhYmxlXCJdKSB7XHJcbiAgICAgICAgbmV3VmFsdWVbXCJpc05ld1ZhcmlhYmxlXCJdID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy52YWx1ZUNoYW5nZWQubmV4dCh7ICRldmVudCwgZWxlbWVudFZhbHVlOiBuZXdWYWx1ZSB9KTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5pbml0SW1wb3J0ZWRPcmlnaW5hbERhdGEoKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==