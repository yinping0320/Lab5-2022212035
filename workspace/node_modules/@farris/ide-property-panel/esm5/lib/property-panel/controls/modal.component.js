/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, EventEmitter, Injector, Output } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
var ModalPropertyComponent = /** @class */ (function () {
    function ModalPropertyComponent(notifyServ, resolver, modalService, injector) {
        this.notifyServ = notifyServ;
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.showClearButton = false;
    }
    Object.defineProperty(ModalPropertyComponent.prototype, "elementConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementConfig;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._elementConfig = value;
            this.convertModalShowValue(this._elementValue);
            this.showClearButton = this.elementConfig.showClearButton && !this.elementConfig.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalPropertyComponent.prototype, "elementValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._elementValue = value;
            this.convertModalShowValue(this._elementValue);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ModalPropertyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ModalPropertyComponent.prototype.changeValue = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.valueChanged.next({ $event: $event, elementValue: this.elementValue });
    };
    /**
     * 清除模态框内容
     */
    /**
     * 清除模态框内容
     * @return {?}
     */
    ModalPropertyComponent.prototype.modalClear = /**
     * 清除模态框内容
     * @return {?}
     */
    function () {
        // 数据转换
        this.convertModalShowValue(null);
        // 若有清除后事件，先执行方法
        if (Object.keys(this.elementConfig).indexOf('afterClickClearButton') > -1 &&
            typeof (this.elementConfig.afterClickClearButton) === 'function') {
            this.elementConfig.afterClickClearButton(this.elementValue);
        }
        this.valueChanged.next({ elementValue: null });
    };
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @param value 属性值
     */
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value 属性值
     * @return {?}
     */
    ModalPropertyComponent.prototype.convertModalShowValue = /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value 属性值
     * @return {?}
     */
    function (value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    };
    /**
     * 自定义编辑器使用模态框打开
     */
    /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    ModalPropertyComponent.prototype.openModal = /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    function () {
        if (this.elementConfig.readonly) {
            return;
        }
        if (Object.keys(this.elementConfig).indexOf('beforeOpenModal') > -1 && typeof (this.elementConfig.beforeOpenModal) === 'function') {
            /** @type {?} */
            var result = this.elementConfig.beforeOpenModal();
            if (result && !result.result) {
                this.notifyServ.warning(result.message);
                return;
            }
        }
        this.createEditorComponent();
    };
    /**
     * 创建自定义编辑器
     */
    /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    ModalPropertyComponent.prototype.createEditorComponent = /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(editor);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        // 编辑器需要的额外参数
        compRef.instance.editorParams = this.elementConfig.editorParams;
        /** @type {?} */
        var modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (compRef.instance.closeModal && compRef.instance.closeModal instanceof EventEmitter) {
            compRef.instance.closeModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // 数据转换
                if (data) {
                    _this.convertModalShowValue(data);
                    _this.valueChanged.next({ elementValue: data });
                }
                dialog.close();
            }));
        }
        // 弹出框关闭事件，带参数，格式为{ value, parameters }
        if (compRef.instance.submitModal && compRef.instance.submitModal instanceof EventEmitter) {
            compRef.instance.submitModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (!data) {
                    dialog.close();
                    return;
                }
                var value = data.value, parameters = data.parameters;
                // 数据转换
                _this.convertModalShowValue(value);
                _this.submitModal.next({ elementValue: value, parameters: parameters });
                dialog.close();
            }));
        }
    };
    ModalPropertyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-modal-prop',
                    template: "\n    <div class=\"farris-input-wrap modalIcon\">\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" readonly>\n        <span [class.allowClear]=\"showClearButton\" class=\"showClearButton\" (click)=\"modalClear()\">\n            <i class=\"material-icons clearIcon\">close</i>\n        </span>\n        <i class=\"material-icons moreIcon\" (click)=\"openModal()\">filter_none</i>\n    </div>\n    ",
                    styles: ["\n        .modalIcon .showClearButton {\n            display: none;\n        }\n        .modalIcon:hover .allowClear.showClearButton {\n            display: block;\n        }\n        .modalIcon input {\n            padding-right: 30px;\n        }\n        .modalIcon .moreIcon {\n            position: absolute;\n            top: 6px;\n            right: 6px;\n            cursor: pointer;\n            font-size: 16px;\n            color: #758a96;\n        }\n        .modalIcon .clearIcon {\n            position: absolute;\n            top: 5px;\n            right: 30px;\n            cursor: pointer;\n            font-size: 19px;\n            color: #758a96;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    ModalPropertyComponent.ctorParameters = function () { return [
        { type: NotifyService },
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: Injector }
    ]; };
    ModalPropertyComponent.propDecorators = {
        valueChanged: [{ type: Output }],
        submitModal: [{ type: Output }]
    };
    return ModalPropertyComponent;
}());
export { ModalPropertyComponent };
if (false) {
    /** @type {?} */
    ModalPropertyComponent.prototype.valueChanged;
    /** @type {?} */
    ModalPropertyComponent.prototype.submitModal;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype._elementConfig;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype._elementValue;
    /**
     * 输入框中显示的值
     * @type {?}
     */
    ModalPropertyComponent.prototype.elementShowValue;
    /** @type {?} */
    ModalPropertyComponent.prototype.showClearButton;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.notifyServ;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,