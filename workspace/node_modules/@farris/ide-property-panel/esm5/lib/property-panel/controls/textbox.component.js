/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output } from '@angular/core';
var TextboxPropertyComponent = /** @class */ (function () {
    function TextboxPropertyComponent() {
        this.valueChanged = new EventEmitter();
    }
    Object.defineProperty(TextboxPropertyComponent.prototype, "elementConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementConfig;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._elementConfig = value;
            if (this.elementConfig.readonly) {
                this.convertModalShowValue(this._elementValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextboxPropertyComponent.prototype, "elementValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._elementValue = value;
            if (this.elementConfig.readonly) {
                this.convertModalShowValue(this._elementValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TextboxPropertyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TextboxPropertyComponent.prototype.changeValue = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        // 文本控件限制输入字符
        if (this.elementValue && !this.elementConfig.readonly &&
            this.elementConfig.notAllowedChars && this.elementConfig.notAllowedChars.length) {
            this.elementConfig.notAllowedChars.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (typeof (c) === 'object') {
                    _this.elementValue = _this.elementValue.replace(c, '');
                }
                else if (typeof (c) === 'string') {
                    _this.elementValue = _this.elementValue.replace(new RegExp(c, 'g'), '');
                }
            }));
        }
        this.valueChanged.next({ $event: $event, elementValue: this.elementValue });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TextboxPropertyComponent.prototype.restValueAfterValidRestrict = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.elementValue = value || '';
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    TextboxPropertyComponent.prototype.convertModalShowValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    };
    TextboxPropertyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-textbox-prop',
                    template: "\n    <div class=\"farris-input-wrap\">\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" (blur)=\"changeValue($event)\"\n            *ngIf=\"!elementConfig.readonly\">\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" [readonly]=\"'readonly'\"\n            *ngIf=\"elementConfig.readonly\">\n    </div>\n    "
                }] }
    ];
    TextboxPropertyComponent.propDecorators = {
        valueChanged: [{ type: Output }]
    };
    return TextboxPropertyComponent;
}());
export { TextboxPropertyComponent };
if (false) {
    /** @type {?} */
    TextboxPropertyComponent.prototype.valueChanged;
    /**
     * @type {?}
     * @private
     */
    TextboxPropertyComponent.prototype._elementConfig;
    /**
     * @type {?}
     * @private
     */
    TextboxPropertyComponent.prototype._elementValue;
    /**
     * 输入框中显示的值
     * @type {?}
     */
    TextboxPropertyComponent.prototype.elementShowValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1wcm9wZXJ0eS1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9wcm9wZXJ0eS1wYW5lbC9jb250cm9scy90ZXh0Ym94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQTRCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcxRjtJQUFBO1FBYWMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBaUVyRCxDQUFDO0lBN0RHLHNCQUFJLG1EQUFhOzs7O1FBQWpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQy9CLENBQUM7Ozs7O1FBRUQsVUFBa0IsS0FBSztZQUNuQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztZQUM1QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFO2dCQUM3QixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2xEO1FBQ0wsQ0FBQzs7O09BUEE7SUFRRCxzQkFBSSxrREFBWTs7OztRQUFoQjtZQUNJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM5QixDQUFDOzs7OztRQUVELFVBQWlCLEtBQUs7WUFDbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFDM0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUNsRDtRQUNMLENBQUM7OztPQVBBOzs7O0lBV0QsMkNBQVE7OztJQUFSO0lBRUEsQ0FBQzs7Ozs7SUFFRCw4Q0FBVzs7OztJQUFYLFVBQVksTUFBTTtRQUFsQixpQkFnQkM7UUFkRyxhQUFhO1FBQ2IsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRO1lBQ2pELElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUNqRixJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxDQUFNO2dCQUM5QyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ3pCLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUN4RDtxQkFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ2hDLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUN6RTtZQUVMLENBQUMsRUFBQyxDQUFDO1NBQ047UUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sUUFBQSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDOzs7OztJQUVELDhEQUEyQjs7OztJQUEzQixVQUE0QixLQUFLO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFHTyx3REFBcUI7Ozs7O0lBQTdCLFVBQThCLEtBQUs7UUFDL0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRTtZQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RFLE9BQU87U0FDVjtRQUNELElBQUksS0FBSyxJQUFJLEtBQUssWUFBWSxNQUFNLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDOztnQkE3RUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSw2WkFPVDtpQkFDSjs7OytCQUdJLE1BQU07O0lBaUVYLCtCQUFDO0NBQUEsQUE5RUQsSUE4RUM7U0FuRVksd0JBQXdCOzs7SUFFakMsZ0RBQWlEOzs7OztJQUVqRCxrREFBdUM7Ozs7O0lBQ3ZDLGlEQUEyQjs7Ozs7SUFzQjNCLG9EQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJy4uL2VudGl0eS9wcm9wZXJ0eS1lbnRpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2FwcC10ZXh0Ym94LXByb3AnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtaW5wdXQtd3JhcFwiPlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiaW5wdXRcIiBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc21cIiBbKG5nTW9kZWwpXT1cImVsZW1lbnRWYWx1ZVwiIChibHVyKT1cImNoYW5nZVZhbHVlKCRldmVudClcIlxyXG4gICAgICAgICAgICAqbmdJZj1cIiFlbGVtZW50Q29uZmlnLnJlYWRvbmx5XCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJpbnB1dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbVwiIFsobmdNb2RlbCldPVwiZWxlbWVudFNob3dWYWx1ZVwiIFtyZWFkb25seV09XCIncmVhZG9ubHknXCJcclxuICAgICAgICAgICAgKm5nSWY9XCJlbGVtZW50Q29uZmlnLnJlYWRvbmx5XCI+XHJcbiAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIFRleHRib3hQcm9wZXJ0eUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICAgIHByaXZhdGUgX2VsZW1lbnRDb25maWc6IFByb3BlcnR5RW50aXR5O1xyXG4gICAgcHJpdmF0ZSBfZWxlbWVudFZhbHVlOiBhbnk7XHJcbiAgICBnZXQgZWxlbWVudENvbmZpZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudENvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgZWxlbWVudENvbmZpZyh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRDb25maWcgPSB2YWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Q29uZmlnLnJlYWRvbmx5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udmVydE1vZGFsU2hvd1ZhbHVlKHRoaXMuX2VsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGVsZW1lbnRWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBlbGVtZW50VmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50VmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Q29uZmlnLnJlYWRvbmx5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udmVydE1vZGFsU2hvd1ZhbHVlKHRoaXMuX2VsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqIOi+k+WFpeahhuS4reaYvuekuueahOWAvCAqL1xyXG4gICAgZWxlbWVudFNob3dWYWx1ZTogc3RyaW5nO1xyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VWYWx1ZSgkZXZlbnQpIHtcclxuXHJcbiAgICAgICAgLy8g5paH5pys5o6n5Lu26ZmQ5Yi26L6T5YWl5a2X56ymXHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudFZhbHVlICYmICF0aGlzLmVsZW1lbnRDb25maWcucmVhZG9ubHkgJiZcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50Q29uZmlnLm5vdEFsbG93ZWRDaGFycyAmJiB0aGlzLmVsZW1lbnRDb25maWcubm90QWxsb3dlZENoYXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRDb25maWcubm90QWxsb3dlZENoYXJzLmZvckVhY2goKGM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoYykgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50VmFsdWUgPSB0aGlzLmVsZW1lbnRWYWx1ZS5yZXBsYWNlKGMsICcnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIChjKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRWYWx1ZSA9IHRoaXMuZWxlbWVudFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChjLCAnZycpLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLm5leHQoeyAkZXZlbnQsIGVsZW1lbnRWYWx1ZTogdGhpcy5lbGVtZW50VmFsdWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdFZhbHVlQWZ0ZXJWYWxpZFJlc3RyaWN0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50VmFsdWUgPSB2YWx1ZSB8fCAnJztcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjb252ZXJ0TW9kYWxTaG93VmFsdWUodmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Q29uZmlnLmNvbnZlcnRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRTaG93VmFsdWUgPSB0aGlzLmVsZW1lbnRDb25maWcuY29udmVydGVyLmNvbnZlcnRUbyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFNob3dWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsZW1lbnRTaG93VmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4iXX0=