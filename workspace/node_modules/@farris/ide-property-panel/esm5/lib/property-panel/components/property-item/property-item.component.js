/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ComponentFactoryResolver, Injector, ElementRef, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { PropertyEntity } from '../../entity/property-entity';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
var PropertyItemComponent = /** @class */ (function () {
    function PropertyItemComponent(resolver, modalService, injector, notifyServ, el) {
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.notifyServ = notifyServ;
        this.el = el;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        // 向上触发整体面板刷新
        this.triggerRefreshPanel = new EventEmitter();
        // 下拉框的枚举项
        this.selectOptions = [];
        // 控件类型
        this.itemType = 'string';
        // 数字控件精度
        this.precision = 2;
        // 已废弃
        this.showClearButton = false;
        // 默认值
        this.showDefaultValue = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PropertyItemComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.refresh();
    };
    /**
     * @return {?}
     */
    PropertyItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.refresh();
    };
    /**
     * @return {?}
     */
    PropertyItemComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.showClearButton = this.elementConfig.showClearButton && !this.elementConfig.readonly;
        /** @type {?} */
        var tmpl;
        // 显示格式
        /** @type {?} */
        var propertyType = this.itemType = this.elementConfig.propertyType;
        switch (propertyType) {
            case 'boolean': {
                this.itemType = 'select';
                this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
                tmpl = this.selectTmpl;
                break;
            }
            case 'select': {
                this.selectOptions = this.elementConfig.iterator || [];
                tmpl = this.selectTmpl;
                break;
            }
            case 'multiSelect': {
                this.selectOptions = this.elementConfig.iterator || [];
                if (this.elementConfig.multiSelectDataType === 'array') {
                    this.elementValue = this.elementValue ? this.elementValue.toString() : '';
                }
                tmpl = this.multiSelectTmpl;
                break;
            }
            case 'modal': {
                this._convertModalShowValue(this.elementValue);
                tmpl = this.modalTmpl;
                break;
            }
            case 'number': {
                this.precision = this.elementConfig.decimals === undefined ? 2 : this.elementConfig.decimals;
                tmpl = this.numberTmpl;
                break;
            }
            case 'string': {
                if (this.elementConfig.readonly) {
                    this._convertModalShowValue(this.elementValue);
                }
                tmpl = this.stringTmpl;
                break;
            }
            /** 已废弃，请使用editableSelect */
            case 'boolOrExp': {
                this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
                tmpl = this.boolOrExpTmpl;
                break;
            }
            case 'date': {
                tmpl = this.dateTmpl;
                break;
            }
            case 'datetime': {
                tmpl = this.datetimeTmpl;
                break;
            }
            case 'editableSelect': {
                this.selectOptions = this.elementConfig.iterator || [];
                tmpl = this.editableSelectTmpl;
                break;
            }
        }
        // 默认值
        if (Object.keys(this.elementConfig).indexOf('defaultValue') > -1) {
            if (this.elementValue === undefined || this.elementValue === null) {
                this.elementValue = this.elementConfig.defaultValue;
            }
            this.showDefaultValue = true;
        }
        // 是否显示
        if (Object.keys(this.elementConfig).indexOf('visible') < 0) {
            this.elementConfig.visible = true;
        }
        // 创建模板
        if (tmpl && (this.propItem.length === 0 || this.propertyOldType !== this.itemType)) {
            this.propItem.clear();
            this.propItem.createEmbeddedView(tmpl);
            this.propertyOldType = this.itemType;
        }
    };
    /**
     * 鼠标移入 --已废弃
     */
    /**
     * 鼠标移入 --已废弃
     * @return {?}
     */
    PropertyItemComponent.prototype.onmouseover = /**
     * 鼠标移入 --已废弃
     * @return {?}
     */
    function () {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        if (!this.showClearButton) {
            this.showClearButton = true;
        }
    };
    /**
     * 鼠标离开 --已废弃
     */
    /**
     * 鼠标离开 --已废弃
     * @return {?}
     */
    PropertyItemComponent.prototype.onmouseleave = /**
     * 鼠标离开 --已废弃
     * @return {?}
     */
    function () {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        this.showClearButton = false;
    };
    /**
     * 清除模态框内容
     */
    /**
     * 清除模态框内容
     * @return {?}
     */
    PropertyItemComponent.prototype.modalClear = /**
     * 清除模态框内容
     * @return {?}
     */
    function () {
        // 数据转换
        this._convertModalShowValue(null);
        // 若有清除后事件，先执行方法
        if (Object.keys(this.elementConfig).indexOf('afterClickClearButton') > -1 &&
            typeof (this.elementConfig.afterClickClearButton) === 'function') {
            this.elementConfig.afterClickClearButton(this.elementValue);
        }
        /** @type {?} */
        var changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: null
        };
        this.submitModal.emit({ changeObject: changeObject, parameters: null });
    };
    /**
     * 变更属性值
     */
    /**
     * 变更属性值
     * @param {?} e
     * @return {?}
     */
    PropertyItemComponent.prototype.changeValue = /**
     * 变更属性值
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var value = this.elementValue;
        // 文本控件限制输入字符
        if (value && this.elementConfig.propertyType === 'string' && !this.elementConfig.readonly &&
            this.elementConfig.notAllowedChars && this.elementConfig.notAllowedChars.length) {
            this.elementConfig.notAllowedChars.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (typeof (c) === 'object') {
                    value = value.replace(c, '');
                }
                else if (typeof (c) === 'string') {
                    value = value.replace(new RegExp(c, 'g'), '');
                }
            }));
            this.elementValue = value;
        }
        // 多选控件返回数组格式的数据
        if (this.itemType === 'multiSelect' && this.elementConfig.multiSelectDataType === 'array') {
            value = this.elementValue ? this.elementValue.split(',') : '';
        }
        /** @type {?} */
        var changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: value
        };
        this.valueChanged.emit({ changeObject: changeObject });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    };
    /**
     * farris 日期控件的变更事件
     * @param e e
     */
    /**
     * farris 日期控件的变更事件
     * @param {?} e e
     * @return {?}
     */
    PropertyItemComponent.prototype.changeDateValue = /**
     * farris 日期控件的变更事件
     * @param {?} e e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var value = e.formatted;
        /** @type {?} */
        var changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: value
        };
        this.valueChanged.emit({ changeObject: changeObject });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    };
    /**
     * 自定义编辑器使用模态框打开
     */
    /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    PropertyItemComponent.prototype.openModal = /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    function () {
        if (this.elementConfig.readonly) {
            return;
        }
        if (Object.keys(this.elementConfig).indexOf('beforeOpenModal') > -1 && typeof (this.elementConfig.beforeOpenModal) === 'function') {
            /** @type {?} */
            var result = this.elementConfig.beforeOpenModal();
            if (result && !result.result) {
                this.notifyServ.warning((/** @type {?} */ ({
                    title: '系统提示', msg: result.message, timeout: 3000
                })));
                return;
            }
        }
        this.createEditorComponent();
    };
    /**
     * 创建自定义编辑器
     */
    /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    PropertyItemComponent.prototype.createEditorComponent = /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(editor);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        if (this.elementConfig.editorParams) { // 编辑器需要的额外参数
            compRef.instance.editorParams = this.elementConfig.editorParams;
        }
        /** @type {?} */
        var modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (compRef.instance.closeModal && compRef.instance.closeModal instanceof EventEmitter) {
            compRef.instance.closeModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // 数据转换
                if (data) {
                    _this._convertModalShowValue(data);
                    /** @type {?} */
                    var changeObject = {
                        propertyID: _this.elementConfig.propertyID,
                        propertyValue: data
                    };
                    _this.valueChanged.emit({ changeObject: changeObject });
                }
                dialog.close();
            }));
        }
        // 弹出框关闭事件，带参数，格式为{ value, parameters }
        if (compRef.instance.submitModal && compRef.instance.submitModal instanceof EventEmitter) {
            compRef.instance.submitModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (!data) {
                    dialog.close();
                    return;
                }
                var value = data.value, parameters = data.parameters;
                // 数据转换
                _this._convertModalShowValue(value);
                /** @type {?} */
                var changeObject = {
                    propertyID: _this.elementConfig.propertyID,
                    propertyValue: value
                };
                _this.submitModal.emit({ changeObject: changeObject, parameters: parameters });
                dialog.close();
            }));
        }
    };
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @param value
     */
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value
     * @return {?}
     */
    PropertyItemComponent.prototype._convertModalShowValue = /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    };
    PropertyItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'webide-property-item',
                    template: "<div class=\"farris-group-wrap property-item\" [hidden]=\"!elementConfig.visible\">\r\n  <div class=\"form-group farris-form-group\">\r\n   <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\" farrisPopover [popover]=\"popTemplate\" [popoverTitle]=\"elementConfig.propertyName\"\r\n        container=\"body\" placement=\"left\" triggers=\"hover\">{{elementConfig.propertyName}}</span>\r\n    </label> \r\n    <!-- <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\" farrisPopover [popover]=\"popTemplate\" container=\"body\"\r\n        triggers=\"hover\">{{elementConfig.propertyName}}</span>\r\n    </label> -->\r\n    <!-- <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\">{{elementConfig.propertyName}}</span>\r\n    </label> -->\r\n\r\n    <ng-container #propItem> </ng-container>\r\n\r\n    <!--\u6587\u672C-->\r\n    <ng-template #stringTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" (blur)=\"changeValue($event)\"\r\n          *ngIf=\"!elementConfig.readonly\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" [readonly]=\"'readonly'\"\r\n          *ngIf=\"elementConfig.readonly\">\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template #numberTmpl>\r\n      <!-- \u6570\u5B57-->\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-number-spinner [(ngModel)]=\"elementValue\" [readonly]=\"elementConfig.readonly\" [precision]=\"precision\"\r\n          [autoDecimal]=\"true\" [min]=\"elementConfig.min\" [max]=\"elementConfig.max\" [canNull]=\"true\"\r\n          [bigNumber]=\"elementConfig.isBigNumber\" (ngModelChange)=\"changeValue($event)\">\r\n        </farris-number-spinner>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u4E0B\u62C9\u5217\u8868-->\r\n    <ng-template #selectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [editable]=\"false\" [enableClear]=\"false\" [enableCancelSelected]=\"false\"\r\n          (valueChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u53EF\u7F16\u8F91\u7684\u4E0B\u62C9\u5217\u8868\uFF08\u6B64\u5904\u662F\u6539\u52A8\u540E\u7684farris combolist\uFF0Cfarris combolist\uFF09-->\r\n    <ng-template #boolOrExpTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-editable-combo-list [data]=\"selectOptions\" textField=\"value\" idField=\"key\" [(ngModel)]=\"elementValue\"\r\n          (valueChange)=\"changeValue($event)\" [editable]=\"true\" [readonly]=\"elementConfig.readonly?true:false\">\r\n        </farris-editable-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!-- \u53EF\u7F16\u8F91\u7684\u4E0B\u62C9\u6846-->\r\n    <ng-template #editableSelectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [enableClear]=\"false\" [enableCancelSelected]=\"false\" [nosearch]=\"true\"\r\n          (ngModelChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u4E0B\u62C9\u591A\u9009-->\r\n    <ng-template #multiSelectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [editable]=\"false\" [multiSelect]=\"true\" [enableClear]=\"false\"\r\n          (ngModelChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u65E5\u671F-->\r\n    <ng-template #dateTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-datepicker [(ngModel)]=\"elementValue\" [editable]=\"false\" [showTime]=\"false\" [dateFormat]=\"'yyyy-MM-dd'\"\r\n          [readonly]=\"elementConfig.readonly\" (valueChange)=\"changeDateValue($event)\" [returnType]=\"'string'\"\r\n          [maxDate]=\"elementConfig.max\" [minDate]=\"elementConfig.min\">\r\n        </farris-datepicker>\r\n      </div>\r\n    </ng-template>\r\n\r\n\r\n    <!-- \u65E5\u671F\u65F6\u95F4 -->\r\n    <ng-template #datetimeTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-datepicker [(ngModel)]=\"elementValue\" [editable]=\"false\" [showTime]=\"true\"\r\n          [dateFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [readonly]=\"elementConfig.readonly\"\r\n          (valueChange)=\"changeDateValue($event)\" [returnType]=\"'string'\" [maxDate]=\"elementConfig.max\"\r\n          [minDate]=\"elementConfig.min\">\r\n        </farris-datepicker>\r\n      </div>\r\n    </ng-template>\r\n\r\n\r\n    <!-- \u6A21\u6001\u6846 -->\r\n    <ng-template #modalTmpl>\r\n      <div class=\"farris-input-wrap modalIcon\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" readonly>\r\n        <span *ngIf=\"showClearButton\" class=\"showClearButton\" (click)=\"modalClear()\">\r\n          <i class=\"material-icons clearIcon\">close</i>\r\n        </span>\r\n        <i class=\"material-icons moreIcon\" (click)=\"openModal()\">filter_none</i>\r\n      </div>\r\n    </ng-template>\r\n\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #popTemplate>\r\n  <div *ngIf=\"elementConfig.propertyID\">\r\n    <span>\u7F16\u53F7\uFF1A </span> {{elementConfig.propertyID}}</div>\r\n  <div *ngIf=\"elementConfig.description\">\r\n    <span>\u63CF\u8FF0\uFF1A </span> {{elementConfig.description}}</div>\r\n</ng-template>",
                    styles: [".property-item .form-group{margin-bottom:2px}.property-item .modalIcon .showClearButton{display:none}.property-item .modalIcon:hover .showClearButton{display:block}.property-item .modalIcon input{padding-right:30px}.property-item .modalIcon .moreIcon{position:absolute;top:6px;right:6px;cursor:pointer;font-size:16px;color:#758a96}.property-item .modalIcon .clearIcon{position:absolute;top:5px;right:30px;cursor:pointer;font-size:19px;color:#758a96}.property-item .form-control[readonly]{background-color:#fff}.property-item .form-control:disabled,.property-item .form-control[readonly]{color:#4b4c4c}"]
                }] }
    ];
    /** @nocollapse */
    PropertyItemComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: Injector },
        { type: NotifyService },
        { type: ElementRef }
    ]; };
    PropertyItemComponent.propDecorators = {
        elementConfig: [{ type: Input }],
        elementValue: [{ type: Input }],
        valueChanged: [{ type: Output }],
        submitModal: [{ type: Output }],
        triggerRefreshPanel: [{ type: Output }],
        propItem: [{ type: ViewChild, args: ['propItem', { read: ViewContainerRef },] }],
        stringTmpl: [{ type: ViewChild, args: ['stringTmpl',] }],
        numberTmpl: [{ type: ViewChild, args: ['numberTmpl',] }],
        selectTmpl: [{ type: ViewChild, args: ['selectTmpl',] }],
        boolOrExpTmpl: [{ type: ViewChild, args: ['boolOrExpTmpl',] }],
        multiSelectTmpl: [{ type: ViewChild, args: ['multiSelectTmpl',] }],
        dateTmpl: [{ type: ViewChild, args: ['dateTmpl',] }],
        datetimeTmpl: [{ type: ViewChild, args: ['datetimeTmpl',] }],
        modalTmpl: [{ type: ViewChild, args: ['modalTmpl',] }],
        editableSelectTmpl: [{ type: ViewChild, args: ['editableSelectTmpl',] }]
    };
    return PropertyItemComponent;
}());
export { PropertyItemComponent };
if (false) {
    /** @type {?} */
    PropertyItemComponent.prototype.elementConfig;
    /** @type {?} */
    PropertyItemComponent.prototype.elementValue;
    /** @type {?} */
    PropertyItemComponent.prototype.valueChanged;
    /** @type {?} */
    PropertyItemComponent.prototype.submitModal;
    /** @type {?} */
    PropertyItemComponent.prototype.triggerRefreshPanel;
    /** @type {?} */
    PropertyItemComponent.prototype.propItem;
    /** @type {?} */
    PropertyItemComponent.prototype.stringTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.numberTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.selectTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.boolOrExpTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.multiSelectTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.dateTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.datetimeTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.modalTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.editableSelectTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.propertyOldType;
    /** @type {?} */
    PropertyItemComponent.prototype.elementShowValue;
    /** @type {?} */
    PropertyItemComponent.prototype.selectOptions;
    /** @type {?} */
    PropertyItemComponent.prototype.itemType;
    /** @type {?} */
    PropertyItemComponent.prototype.precision;
    /** @type {?} */
    PropertyItemComponent.prototype.showClearButton;
    /** @type {?} */
    PropertyItemComponent.prototype.showDefaultValue;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.notifyServ;
    /** @type {?} */
    PropertyItemComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,