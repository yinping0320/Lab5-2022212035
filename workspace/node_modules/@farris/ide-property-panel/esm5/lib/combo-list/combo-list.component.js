/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, Output, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, ViewChild, Inject, Injector, Component, ChangeDetectionStrategy, ViewEncapsulation, forwardRef } from '@angular/core';
import { Subject, fromEvent, interval } from 'rxjs';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { takeUntil, filter, skip, debounceTime, throttle } from 'rxjs/operators';
import { ComboService } from './combo.service';
import { InputGroupComponent } from '@farris/ui-input-group';
/** @type {?} */
var nextUniqueId = 0;
/**
 * 已废弃，统一使用\@farris/ui-combo-list
 */
var ComboListComponent = /** @class */ (function () {
    function ComboListComponent(el, cdr, document, render, comboService, injector) {
        var _this = this;
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '请选择';
        this.panelWidth = 300;
        this.panelHeight = 300;
        this.autoWidth = true;
        this.enableClear = true;
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        // tslint:disable-next-line:variable-name
        this._cmbPanel = null;
        this.isOpen = false;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this.comboPanelCreated$ = new Subject();
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.displayText = '';
        this.onChange = (/**
         * @return {?}
         */
        function () { return null; });
        this.onTouched = (/**
         * @return {?}
         */
        function () { return null; });
        /** @type {?} */
        var container = this.creatContainer();
        /** @type {?} */
        var panel = this.creatPanel(container);
        this.comboPanelCreated$
            .pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return !!v; })))
            .subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            panel.appendChild(cmp.nativeElement);
            _this.updatePosition();
        }));
        this.destroy$.subscribe((/**
         * @return {?}
         */
        function () {
            // this.render.removeChild('body', container);
            if (document.body.contains(container) && container.contains(panel)) {
                container.removeChild(panel);
            }
            nextUniqueId = 0;
        }));
        this.comboService.isOpen$
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                _this.documentClickEvent = _this.render.listen('document', 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    if (!_this.el.nativeElement.contains(event.target) &&
                        (_this._cmbPanel && !_this.contains(_this._cmbPanel, event))) {
                        _this.isOpen = false;
                        _this.removeDocumentListener();
                        _this.cdr.markForCheck();
                    }
                }));
            }
            else {
                _this.removeDocumentListener();
            }
            _this.isOpen = !!val;
            _this.cdr.markForCheck();
        }));
        this.comboService.selected$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.displayText = _this.comboService.getValue(_this.textField);
            _this.value = _this.comboService.getValue(_this.idField);
            if (_this.data && _this.data.length > 0) {
                _this.onChange(_this.value);
                _this.valueChange.emit(_this.value);
            }
            else {
                _this.updateMappingFieldValue();
                _this.onChange(_this.displayText);
                _this.valueChange.emit(_this.displayText);
            }
            _this.cdr.detectChanges();
            // this.focus();
            // this.blur();
        }));
    }
    Object.defineProperty(ComboListComponent.prototype, "idField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.idField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.idField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboListComponent.prototype, "valueField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.valueField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.valueField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboListComponent.prototype, "textField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.textField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.textField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboListComponent.prototype, "cmbPanel", {
        set: /**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            this._cmbPanel = cmp;
            this.comboPanelCreated$.next(cmp);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComboListComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.comboService.isOpen$.next(!this.isOpen);
    };
    /**
     * @private
     * @return {?}
     */
    ComboListComponent.prototype.removeDocumentListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.documentClickEvent) {
            this.documentClickEvent();
            this.documentClickEvent = null;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ComboListComponent.prototype.onBlur = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onTouched();
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.blur();
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.value = '';
        this.comboService.selectedValue = null;
        this.comboService.isOpen$.next(false);
        this.comboService.selected$.next([]);
        // this.updateMappingFieldValue();
        // this.onChange('');
        // this.onTouched();
        this.clear.emit();
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.updateMappingFieldValue = /**
     * @return {?}
     */
    function () {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            var bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            var pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== ''; }));
            }
            this.mappingField = this.mappingField ? this.mappingField : '';
            bindingData.setValue(pathArr.concat(this.mappingField.split('.')), this.value, true, true);
        }
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.updateSelectedValues = /**
     * @return {?}
     */
    function () {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            var bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            var pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== ''; }));
            }
            this.mappingField = this.mappingField ? this.mappingField : '';
            this.value = bindingData.getValue(pathArr.concat(this.mappingField.split('.')));
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    ComboListComponent.prototype.onValueChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.value = val;
        this.onChange(val);
        this.valueChange.emit(val);
        // if (!this.multiSelect) {
        //     this.comboService.serachValue$.next(val);
        // }
        // this.comboService.filterSelections(val);
        // this.valueChange.emit(val);
        // if (!this.uri && this.data && this.data.length > 0) {
        //     this.onChange(this.selectedValues);
        // } else {
        //     this.onChange(this.displayText);
        // }
        // this.updateMappingFieldValue();
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.updatePosition = /**
     * @return {?}
     */
    function () {
        if (this.autoWidth) {
            var width = this.input.el.nativeElement.getBoundingClientRect().width;
            this.panelWidth = width ? width : this.panelWidth;
        }
        var _a = this.el.nativeElement.getBoundingClientRect(), left = _a.left, top = _a.top;
        if (top + this.panelHeight > window.innerHeight && top - this.panelHeight > 0) {
            top = top - this.panelHeight - 27;
        }
        return {
            left: left + 'px',
            top: top + 27 + 'px',
            width: this.panelWidth + 'px',
            height: this.panelHeight + 'px'
        };
    };
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    ComboListComponent.prototype.contains = /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    function (el, event) {
        return el.nativeElement.contains(event.target);
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.creatContainer = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var container = this.document.querySelector('.overlay-container');
        if (!container) {
            container = this.document.createElement('div');
            container.classList.add('overlay-container');
        }
        this.document.body.appendChild(container);
        return container;
    };
    /**
     * @param {?} host
     * @return {?}
     */
    ComboListComponent.prototype.creatPanel = /**
     * @param {?} host
     * @return {?}
     */
    function (host) {
        /** @type {?} */
        var pane = this.document.createElement('div');
        pane.id = "overlay-" + nextUniqueId++;
        pane.classList.add('overlay-pane');
        host.appendChild(pane);
        return pane;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboListComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.displayText = value;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ComboListComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ComboListComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    ComboListComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // tslint:disable-next-line: deprecation
        this.ngControl = this.injector.get(NgControl, null);
        if (!this.valueField && this.idField) {
            this.valueField = this.idField;
        }
        fromEvent(window, 'resize')
            .pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return interval(100); })), takeUntil(this.destroy$))
            .subscribe((/**
         * @return {?}
         */
        function () {
            var width = _this.input.el.nativeElement.getBoundingClientRect().width;
            _this.panelWidth = width;
            _this.comboService.isOpen$.next(false);
        }));
        // this.comboService.injectService();
    };
    /**
     * @return {?}
     */
    ComboListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboListComponent.prototype.onSelect = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _a = tslib_1.__assign({}, value), data = _a.data, index = _a.index;
        this.comboService.selectItem(data, index);
        this.selectChange.emit({ data: data, index: index });
        this.focus();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboListComponent.prototype.onUnSelected = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var data = tslib_1.__assign({}, value).data;
        this.comboService.unSelectItem(data);
        // console.log(data);
        this.focus();
    };
    ComboListComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'farris-editable-combo-list',
                    template: "<input-group\r\n    #input\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"false\"\r\n    (clickHandle)=\"onClick()\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (valueChange)=\"onValueChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    style=\"display: block;\"\r\n>\r\n</input-group>\r\n<div class=\"comboPanel\" *ngIf=\"isOpen\" [ngStyle]=\"updatePosition()\" #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [data]=\"data\"\r\n        [idField]=\"idField\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n    >\r\n<!--        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">-->\r\n<!--            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>-->\r\n<!--        </ng-template>-->\r\n    </farris-datalist>\r\n</div>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ComboListComponent; })),
                            multi: true
                        },
                        ComboService
                    ],
                    styles: [".overlay-container{position:fixed;z-index:9999;pointer-events:none;top:0;left:0;height:100%;width:100%}.overlay-pane{position:absolute;pointer-events:auto}.overlay-pane .comboPanel{position:absolute;overflow:auto;background:#fff;z-index:9;margin-top:-1px;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.overlay-pane .comboPanel combo2-list{position:absolute;width:100%;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    ComboListComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: ComboService },
        { type: Injector }
    ]; };
    ComboListComponent.propDecorators = {
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        placeholder: [{ type: Input }],
        panelWidth: [{ type: Input }],
        panelHeight: [{ type: Input }],
        autoWidth: [{ type: Input }],
        enableClear: [{ type: Input }],
        mappingField: [{ type: Input }],
        data: [{ type: Input }],
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        showPanel: [{ type: Output }],
        hidePanel: [{ type: Output }],
        clear: [{ type: Output }],
        valueChange: [{ type: Output }],
        selectChange: [{ type: Output }],
        cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
        input: [{ type: ViewChild, args: ['input',] }]
    };
    return ComboListComponent;
}());
export { ComboListComponent };
if (false) {
    /** @type {?} */
    ComboListComponent.prototype.disabled;
    /** @type {?} */
    ComboListComponent.prototype.readonly;
    /** @type {?} */
    ComboListComponent.prototype.editable;
    /** @type {?} */
    ComboListComponent.prototype.placeholder;
    /** @type {?} */
    ComboListComponent.prototype.panelWidth;
    /** @type {?} */
    ComboListComponent.prototype.panelHeight;
    /** @type {?} */
    ComboListComponent.prototype.autoWidth;
    /** @type {?} */
    ComboListComponent.prototype.enableClear;
    /** @type {?} */
    ComboListComponent.prototype.mappingField;
    /** @type {?} */
    ComboListComponent.prototype.data;
    /** @type {?} */
    ComboListComponent.prototype.showPanel;
    /** @type {?} */
    ComboListComponent.prototype.hidePanel;
    /** @type {?} */
    ComboListComponent.prototype.clear;
    /** @type {?} */
    ComboListComponent.prototype.valueChange;
    /** @type {?} */
    ComboListComponent.prototype.selectChange;
    /** @type {?} */
    ComboListComponent.prototype._cmbPanel;
    /** @type {?} */
    ComboListComponent.prototype.input;
    /** @type {?} */
    ComboListComponent.prototype.isOpen;
    /** @type {?} */
    ComboListComponent.prototype.groupIcon;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.comboPanelCreated$;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.documentClickEvent;
    /** @type {?} */
    ComboListComponent.prototype.ngControl;
    /** @type {?} */
    ComboListComponent.prototype.displayText;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.value;
    /** @type {?} */
    ComboListComponent.prototype.onChange;
    /** @type {?} */
    ComboListComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.el;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.render;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.comboService;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,