/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, ViewChild, Inject, Injector, Component, ChangeDetectionStrategy, ViewEncapsulation, forwardRef } from '@angular/core';
import { Subject, fromEvent, interval } from 'rxjs';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { takeUntil, filter, skip, debounceTime, throttle } from 'rxjs/operators';
import { ComboService } from './combo.service';
import { InputGroupComponent } from '@farris/ui-input-group';
/** @type {?} */
let nextUniqueId = 0;
/**
 * 已废弃，统一使用\@farris/ui-combo-list
 */
export class ComboListComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '请选择';
        this.panelWidth = 300;
        this.panelHeight = 300;
        this.autoWidth = true;
        this.enableClear = true;
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        // tslint:disable-next-line:variable-name
        this._cmbPanel = null;
        this.isOpen = false;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this.comboPanelCreated$ = new Subject();
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.displayText = '';
        this.onChange = (/**
         * @return {?}
         */
        () => null);
        this.onTouched = (/**
         * @return {?}
         */
        () => null);
        /** @type {?} */
        const container = this.creatContainer();
        /** @type {?} */
        const panel = this.creatPanel(container);
        this.comboPanelCreated$
            .pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} v
         * @return {?}
         */
        v => !!v)))
            .subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        (cmp) => {
            panel.appendChild(cmp.nativeElement);
            this.updatePosition();
        }));
        this.destroy$.subscribe((/**
         * @return {?}
         */
        () => {
            // this.render.removeChild('body', container);
            if (document.body.contains(container) && container.contains(panel)) {
                container.removeChild(panel);
            }
            nextUniqueId = 0;
        }));
        this.comboService.isOpen$
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val) {
                this.documentClickEvent = this.render.listen('document', 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    if (!this.el.nativeElement.contains(event.target) &&
                        (this._cmbPanel && !this.contains(this._cmbPanel, event))) {
                        this.isOpen = false;
                        this.removeDocumentListener();
                        this.cdr.markForCheck();
                    }
                }));
            }
            else {
                this.removeDocumentListener();
            }
            this.isOpen = !!val;
            this.cdr.markForCheck();
        }));
        this.comboService.selected$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.displayText = this.comboService.getValue(this.textField);
            this.value = this.comboService.getValue(this.idField);
            if (this.data && this.data.length > 0) {
                this.onChange(this.value);
                this.valueChange.emit(this.value);
            }
            else {
                this.updateMappingFieldValue();
                this.onChange(this.displayText);
                this.valueChange.emit(this.displayText);
            }
            this.cdr.detectChanges();
            // this.focus();
            // this.blur();
        }));
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set idField(val) {
        this.comboService.idField = val;
    }
    /**
     * @return {?}
     */
    get idField() {
        return this.comboService.idField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set valueField(val) {
        this.comboService.valueField = val;
    }
    /**
     * @return {?}
     */
    get valueField() {
        return this.comboService.valueField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set textField(val) {
        this.comboService.textField = val;
    }
    /**
     * @return {?}
     */
    get textField() {
        return this.comboService.textField;
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set cmbPanel(cmp) {
        this._cmbPanel = cmp;
        this.comboPanelCreated$.next(cmp);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.comboService.isOpen$.next(!this.isOpen);
    }
    /**
     * @private
     * @return {?}
     */
    removeDocumentListener() {
        if (this.documentClickEvent) {
            this.documentClickEvent();
            this.documentClickEvent = null;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onBlur(e) {
        this.onTouched();
    }
    /**
     * @return {?}
     */
    blur() {
        this.input.textbox.nativeElement.blur();
    }
    /**
     * @return {?}
     */
    focus() {
        this.input.textbox.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.value = '';
        this.comboService.selectedValue = null;
        this.comboService.isOpen$.next(false);
        this.comboService.selected$.next([]);
        // this.updateMappingFieldValue();
        // this.onChange('');
        // this.onTouched();
        this.clear.emit();
    }
    /**
     * @return {?}
     */
    updateMappingFieldValue() {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            const bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            let pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n !== ''));
            }
            this.mappingField = this.mappingField ? this.mappingField : '';
            bindingData.setValue(pathArr.concat(this.mappingField.split('.')), this.value, true, true);
        }
    }
    /**
     * @return {?}
     */
    updateSelectedValues() {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            const bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            let pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n !== ''));
            }
            this.mappingField = this.mappingField ? this.mappingField : '';
            this.value = bindingData.getValue(pathArr.concat(this.mappingField.split('.')));
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onValueChange(val) {
        this.value = val;
        this.onChange(val);
        this.valueChange.emit(val);
        // if (!this.multiSelect) {
        //     this.comboService.serachValue$.next(val);
        // }
        // this.comboService.filterSelections(val);
        // this.valueChange.emit(val);
        // if (!this.uri && this.data && this.data.length > 0) {
        //     this.onChange(this.selectedValues);
        // } else {
        //     this.onChange(this.displayText);
        // }
        // this.updateMappingFieldValue();
    }
    /**
     * @return {?}
     */
    updatePosition() {
        if (this.autoWidth) {
            const { width } = this.input.el.nativeElement.getBoundingClientRect();
            this.panelWidth = width ? width : this.panelWidth;
        }
        let { left, top } = this.el.nativeElement.getBoundingClientRect();
        if (top + this.panelHeight > window.innerHeight && top - this.panelHeight > 0) {
            top = top - this.panelHeight - 27;
        }
        return {
            left: left + 'px',
            top: top + 27 + 'px',
            width: this.panelWidth + 'px',
            height: this.panelHeight + 'px'
        };
    }
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    contains(el, event) {
        return el.nativeElement.contains(event.target);
    }
    /**
     * @return {?}
     */
    creatContainer() {
        /** @type {?} */
        let container = this.document.querySelector('.overlay-container');
        if (!container) {
            container = this.document.createElement('div');
            container.classList.add('overlay-container');
        }
        this.document.body.appendChild(container);
        return container;
    }
    /**
     * @param {?} host
     * @return {?}
     */
    creatPanel(host) {
        /** @type {?} */
        const pane = this.document.createElement('div');
        pane.id = `overlay-${nextUniqueId++}`;
        pane.classList.add('overlay-pane');
        host.appendChild(pane);
        return pane;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.displayText = value;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // tslint:disable-next-line: deprecation
        this.ngControl = this.injector.get(NgControl, null);
        if (!this.valueField && this.idField) {
            this.valueField = this.idField;
        }
        fromEvent(window, 'resize')
            .pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        ev => interval(100))), takeUntil(this.destroy$))
            .subscribe((/**
         * @return {?}
         */
        () => {
            const { width } = this.input.el.nativeElement.getBoundingClientRect();
            this.panelWidth = width;
            this.comboService.isOpen$.next(false);
        }));
        // this.comboService.injectService();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSelect(value) {
        const { data, index } = Object.assign({}, value);
        this.comboService.selectItem(data, index);
        this.selectChange.emit({ data, index });
        this.focus();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onUnSelected(value) {
        const { data } = Object.assign({}, value);
        this.comboService.unSelectItem(data);
        // console.log(data);
        this.focus();
    }
}
ComboListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'farris-editable-combo-list',
                template: "<input-group\r\n    #input\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"false\"\r\n    (clickHandle)=\"onClick()\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (valueChange)=\"onValueChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    style=\"display: block;\"\r\n>\r\n</input-group>\r\n<div class=\"comboPanel\" *ngIf=\"isOpen\" [ngStyle]=\"updatePosition()\" #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [data]=\"data\"\r\n        [idField]=\"idField\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n    >\r\n<!--        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">-->\r\n<!--            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>-->\r\n<!--        </ng-template>-->\r\n    </farris-datalist>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ComboListComponent)),
                        multi: true
                    },
                    ComboService
                ],
                styles: [".overlay-container{position:fixed;z-index:9999;pointer-events:none;top:0;left:0;height:100%;width:100%}.overlay-pane{position:absolute;pointer-events:auto}.overlay-pane .comboPanel{position:absolute;overflow:auto;background:#fff;z-index:9;margin-top:-1px;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.overlay-pane .comboPanel combo2-list{position:absolute;width:100%;height:100%}"]
            }] }
];
/** @nocollapse */
ComboListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
ComboListComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    placeholder: [{ type: Input }],
    panelWidth: [{ type: Input }],
    panelHeight: [{ type: Input }],
    autoWidth: [{ type: Input }],
    enableClear: [{ type: Input }],
    mappingField: [{ type: Input }],
    data: [{ type: Input }],
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    showPanel: [{ type: Output }],
    hidePanel: [{ type: Output }],
    clear: [{ type: Output }],
    valueChange: [{ type: Output }],
    selectChange: [{ type: Output }],
    cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
    input: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    ComboListComponent.prototype.disabled;
    /** @type {?} */
    ComboListComponent.prototype.readonly;
    /** @type {?} */
    ComboListComponent.prototype.editable;
    /** @type {?} */
    ComboListComponent.prototype.placeholder;
    /** @type {?} */
    ComboListComponent.prototype.panelWidth;
    /** @type {?} */
    ComboListComponent.prototype.panelHeight;
    /** @type {?} */
    ComboListComponent.prototype.autoWidth;
    /** @type {?} */
    ComboListComponent.prototype.enableClear;
    /** @type {?} */
    ComboListComponent.prototype.mappingField;
    /** @type {?} */
    ComboListComponent.prototype.data;
    /** @type {?} */
    ComboListComponent.prototype.showPanel;
    /** @type {?} */
    ComboListComponent.prototype.hidePanel;
    /** @type {?} */
    ComboListComponent.prototype.clear;
    /** @type {?} */
    ComboListComponent.prototype.valueChange;
    /** @type {?} */
    ComboListComponent.prototype.selectChange;
    /** @type {?} */
    ComboListComponent.prototype._cmbPanel;
    /** @type {?} */
    ComboListComponent.prototype.input;
    /** @type {?} */
    ComboListComponent.prototype.isOpen;
    /** @type {?} */
    ComboListComponent.prototype.groupIcon;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.comboPanelCreated$;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.documentClickEvent;
    /** @type {?} */
    ComboListComponent.prototype.ngControl;
    /** @type {?} */
    ComboListComponent.prototype.displayText;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.value;
    /** @type {?} */
    ComboListComponent.prototype.onChange;
    /** @type {?} */
    ComboListComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.el;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.render;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.comboService;
    /**
     * @type {?}
     * @protected
     */
    ComboListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,