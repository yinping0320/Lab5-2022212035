/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output } from '@angular/core';
export class CombolistPropertyComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
        /**
         * 下拉框的枚举项
         */
        this.selectOptions = [];
        /**
         * 是否可任意输入
         */
        this.nosearch = false;
        /**
         * 是否多选
         */
        this.multiSelect = false;
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
        // 多选控件使用数组格式的数据
        if (this.elementConfig.multiSelectDataType === 'array') {
            this._elementValue = this._elementValue ? this._elementValue.toString() : '';
        }
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        if (!this.elementConfig) {
            return;
        }
        this.editType = this.elementConfig.propertyType;
        if (this.editType === 'boolean') {
            this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
            this.editType = 'select';
        }
        else {
            this.selectOptions = this.elementConfig.iterator || [];
        }
        switch (this.editType) {
            case 'select': {
                // 不可编辑下拉框
                this.editable = false;
                break;
            }
            case 'editableSelect': {
                // 可编辑下拉框
                this.editable = true;
                this.nosearch = true;
                break;
            }
            case 'multiSelect': {
                // 不可编辑的下拉多选框
                this.editable = false;
                this.multiSelect = true;
                // 多选控件使用数组格式的数据
                if (this.elementConfig.multiSelectDataType === 'array') {
                    this._elementValue = this._elementValue ? this._elementValue.toString() : '';
                }
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        /** @type {?} */
        let value = this._elementValue;
        // 多选控件返回数组格式的数据
        if (this.editType === 'multiSelect' && this.elementConfig.multiSelectDataType === 'array') {
            value = this._elementValue ? this._elementValue.split(',') : '';
        }
        this.valueChanged.next({ elementValue: value });
    }
}
CombolistPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-combolist-prop',
                template: `
      <!--下拉列表-->
      <div class="farris-input-wrap">
        <farris-combo-list
          [(ngModel)]="elementValue"
          [idField]="'key'"
          [textField]="'value'"
          [data]="selectOptions"
          [readonly]="elementConfig.readonly"
          [editable]="editable"
          [multiSelect]="multiSelect"
          [enableClear]="false"
          [enableCancelSelected]="false"
          [nosearch]="nosearch"
          (ngModelChange)="changeValue($event)">
        </farris-combo-list>
      </div>
    `
            }] }
];
CombolistPropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CombolistPropertyComponent.prototype.valueChanged;
    /**
     * @type {?}
     * @private
     */
    CombolistPropertyComponent.prototype._elementConfig;
    /**
     * @type {?}
     * @private
     */
    CombolistPropertyComponent.prototype._elementValue;
    /**
     * 编辑类型
     * @type {?}
     */
    CombolistPropertyComponent.prototype.editType;
    /**
     * 下拉框的枚举项
     * @type {?}
     */
    CombolistPropertyComponent.prototype.selectOptions;
    /**
     * 是否可编辑
     * @type {?}
     */
    CombolistPropertyComponent.prototype.editable;
    /**
     * 是否可任意输入
     * @type {?}
     */
    CombolistPropertyComponent.prototype.nosearch;
    /**
     * 是否多选
     * @type {?}
     */
    CombolistPropertyComponent.prototype.multiSelect;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm9saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLXByb3BlcnR5LXBhbmVsLyIsInNvdXJjZXMiOlsibGliL3Byb3BlcnR5LXBhbmVsL2NvbnRyb2xzL2NvbWJvbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUE0QixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUF3QjFGLE1BQU0sT0FBTywwQkFBMEI7SUFyQnZDO1FBc0JZLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7OztRQVNqRCxrQkFBYSxHQUFHLEVBQUUsQ0FBQzs7OztRQUluQixhQUFRLEdBQUcsS0FBSyxDQUFDOzs7O1FBRWpCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBK0V0QixDQUFDOzs7O0lBOUVDLElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELElBQUksWUFBWSxDQUFDLEtBQUs7UUFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFFM0IsZ0JBQWdCO1FBQ2hCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsS0FBSyxPQUFPLEVBQUU7WUFDdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDOUU7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsSUFBSSxhQUFhLENBQUMsS0FBSztRQUVyQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBQ2hELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQzFCO2FBQU07WUFDTCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztTQUN4RDtRQUdELFFBQVEsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQixLQUFLLFFBQVEsQ0FBQyxDQUFDO2dCQUNiLFVBQVU7Z0JBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBRXRCLE1BQU07YUFDUDtZQUNELEtBQUssZ0JBQWdCLENBQUMsQ0FBQztnQkFDckIsU0FBUztnQkFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLE1BQU07YUFDUDtZQUNELEtBQUssYUFBYSxDQUFDLENBQUM7Z0JBQ2xCLGFBQWE7Z0JBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2dCQUV4QixnQkFBZ0I7Z0JBQ2hCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsS0FBSyxPQUFPLEVBQUU7b0JBQ3RELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUM5RTtnQkFFRCxNQUFNO2FBQ1A7U0FDRjtJQUlILENBQUM7Ozs7SUFHRCxRQUFRLEtBQVcsQ0FBQzs7Ozs7SUFFcEIsV0FBVyxDQUFDLE1BQU07O1lBQ1osS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhO1FBRTlCLGdCQUFnQjtRQUNoQixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLEtBQUssT0FBTyxFQUFFO1lBQ3pGLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ2pFO1FBR0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7WUFsSEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FpQlA7YUFDSjs7OzJCQUVFLE1BQU07Ozs7SUFBUCxrREFBaUQ7Ozs7O0lBRWpELG9EQUF1Qzs7Ozs7SUFDdkMsbURBQTJCOzs7OztJQUczQiw4Q0FBaUI7Ozs7O0lBR2pCLG1EQUFtQjs7Ozs7SUFFbkIsOENBQWtCOzs7OztJQUVsQiw4Q0FBaUI7Ozs7O0lBRWpCLGlEQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJy4uL2VudGl0eS9wcm9wZXJ0eS1lbnRpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtY29tYm9saXN0LXByb3AnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICAgIDwhLS3kuIvmi4nliJfooagtLT5cclxuICAgICAgPGRpdiBjbGFzcz1cImZhcnJpcy1pbnB1dC13cmFwXCI+XHJcbiAgICAgICAgPGZhcnJpcy1jb21iby1saXN0XHJcbiAgICAgICAgICBbKG5nTW9kZWwpXT1cImVsZW1lbnRWYWx1ZVwiXHJcbiAgICAgICAgICBbaWRGaWVsZF09XCIna2V5J1wiXHJcbiAgICAgICAgICBbdGV4dEZpZWxkXT1cIid2YWx1ZSdcIlxyXG4gICAgICAgICAgW2RhdGFdPVwic2VsZWN0T3B0aW9uc1wiXHJcbiAgICAgICAgICBbcmVhZG9ubHldPVwiZWxlbWVudENvbmZpZy5yZWFkb25seVwiXHJcbiAgICAgICAgICBbZWRpdGFibGVdPVwiZWRpdGFibGVcIlxyXG4gICAgICAgICAgW211bHRpU2VsZWN0XT1cIm11bHRpU2VsZWN0XCJcclxuICAgICAgICAgIFtlbmFibGVDbGVhcl09XCJmYWxzZVwiXHJcbiAgICAgICAgICBbZW5hYmxlQ2FuY2VsU2VsZWN0ZWRdPVwiZmFsc2VcIlxyXG4gICAgICAgICAgW25vc2VhcmNoXT1cIm5vc2VhcmNoXCJcclxuICAgICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cImNoYW5nZVZhbHVlKCRldmVudClcIj5cclxuICAgICAgICA8L2ZhcnJpcy1jb21iby1saXN0PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbWJvbGlzdFByb3BlcnR5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIHByaXZhdGUgX2VsZW1lbnRDb25maWc6IFByb3BlcnR5RW50aXR5O1xyXG4gIHByaXZhdGUgX2VsZW1lbnRWYWx1ZTogYW55O1xyXG5cclxuICAvKiog57yW6L6R57G75Z6LICovXHJcbiAgZWRpdFR5cGU6IHN0cmluZztcclxuXHJcbiAgLyoqIOS4i+aLieahhueahOaemuS4vumhuSAqL1xyXG4gIHNlbGVjdE9wdGlvbnMgPSBbXTtcclxuICAvKiog5piv5ZCm5Y+v57yW6L6RICovXHJcbiAgZWRpdGFibGU6IGJvb2xlYW47XHJcbiAgLyoqIOaYr+WQpuWPr+S7u+aEj+i+k+WFpSAqL1xyXG4gIG5vc2VhcmNoID0gZmFsc2U7XHJcbiAgLyoqIOaYr+WQpuWkmumAiSAqL1xyXG4gIG11bHRpU2VsZWN0ID0gZmFsc2U7XHJcbiAgZ2V0IGVsZW1lbnRWYWx1ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50VmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXQgZWxlbWVudFZhbHVlKHZhbHVlKSB7XHJcbiAgICB0aGlzLl9lbGVtZW50VmFsdWUgPSB2YWx1ZTtcclxuXHJcbiAgICAvLyDlpJrpgInmjqfku7bkvb/nlKjmlbDnu4TmoLzlvI/nmoTmlbDmja5cclxuICAgIGlmICh0aGlzLmVsZW1lbnRDb25maWcubXVsdGlTZWxlY3REYXRhVHlwZSA9PT0gJ2FycmF5Jykge1xyXG4gICAgICB0aGlzLl9lbGVtZW50VmFsdWUgPSB0aGlzLl9lbGVtZW50VmFsdWUgPyB0aGlzLl9lbGVtZW50VmFsdWUudG9TdHJpbmcoKSA6ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IGVsZW1lbnRDb25maWcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudENvbmZpZztcclxuICB9XHJcblxyXG4gIHNldCBlbGVtZW50Q29uZmlnKHZhbHVlKSB7XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudENvbmZpZyA9IHZhbHVlO1xyXG4gICAgaWYgKCF0aGlzLmVsZW1lbnRDb25maWcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5lZGl0VHlwZSA9IHRoaXMuZWxlbWVudENvbmZpZy5wcm9wZXJ0eVR5cGU7XHJcbiAgICBpZiAodGhpcy5lZGl0VHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0T3B0aW9ucyA9IFt7IGtleTogdHJ1ZSwgdmFsdWU6ICd0cnVlJyB9LCB7IGtleTogZmFsc2UsIHZhbHVlOiAnZmFsc2UnIH1dO1xyXG4gICAgICB0aGlzLmVkaXRUeXBlID0gJ3NlbGVjdCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNlbGVjdE9wdGlvbnMgPSB0aGlzLmVsZW1lbnRDb25maWcuaXRlcmF0b3IgfHwgW107XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN3aXRjaCAodGhpcy5lZGl0VHlwZSkge1xyXG4gICAgICBjYXNlICdzZWxlY3QnOiB7XHJcbiAgICAgICAgLy8g5LiN5Y+v57yW6L6R5LiL5ouJ5qGGXHJcbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdlZGl0YWJsZVNlbGVjdCc6IHtcclxuICAgICAgICAvLyDlj6/nvJbovpHkuIvmi4nmoYZcclxuICAgICAgICB0aGlzLmVkaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5vc2VhcmNoID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtdWx0aVNlbGVjdCc6IHtcclxuICAgICAgICAvLyDkuI3lj6/nvJbovpHnmoTkuIvmi4nlpJrpgInmoYZcclxuICAgICAgICB0aGlzLmVkaXRhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tdWx0aVNlbGVjdCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIOWkmumAieaOp+S7tuS9v+eUqOaVsOe7hOagvOW8j+eahOaVsOaNrlxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRDb25maWcubXVsdGlTZWxlY3REYXRhVHlwZSA9PT0gJ2FycmF5Jykge1xyXG4gICAgICAgICAgdGhpcy5fZWxlbWVudFZhbHVlID0gdGhpcy5fZWxlbWVudFZhbHVlID8gdGhpcy5fZWxlbWVudFZhbHVlLnRvU3RyaW5nKCkgOiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7IH1cclxuXHJcbiAgY2hhbmdlVmFsdWUoJGV2ZW50KSB7XHJcbiAgICBsZXQgdmFsdWUgPSB0aGlzLl9lbGVtZW50VmFsdWU7XHJcblxyXG4gICAgLy8g5aSa6YCJ5o6n5Lu26L+U5Zue5pWw57uE5qC85byP55qE5pWw5o2uXHJcbiAgICBpZiAodGhpcy5lZGl0VHlwZSA9PT0gJ211bHRpU2VsZWN0JyAmJiB0aGlzLmVsZW1lbnRDb25maWcubXVsdGlTZWxlY3REYXRhVHlwZSA9PT0gJ2FycmF5Jykge1xyXG4gICAgICB2YWx1ZSA9IHRoaXMuX2VsZW1lbnRWYWx1ZSA/IHRoaXMuX2VsZW1lbnRWYWx1ZS5zcGxpdCgnLCcpIDogJyc7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHRoaXMudmFsdWVDaGFuZ2VkLm5leHQoeyBlbGVtZW50VmFsdWU6IHZhbHVlIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19