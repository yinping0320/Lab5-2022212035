/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, EventEmitter, Injector, Output } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
export class ModalPropertyComponent {
    /**
     * @param {?} notifyServ
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     */
    constructor(notifyServ, resolver, modalService, injector) {
        this.notifyServ = notifyServ;
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.showClearButton = false;
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        this.convertModalShowValue(this._elementValue);
        this.showClearButton = this.elementConfig.showClearButton && !this.elementConfig.readonly;
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
        this.convertModalShowValue(this._elementValue);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        this.valueChanged.next({ $event, elementValue: this.elementValue });
    }
    /**
     * 清除模态框内容
     * @return {?}
     */
    modalClear() {
        // 数据转换
        this.convertModalShowValue(null);
        // 若有清除后事件，先执行方法
        if (Object.keys(this.elementConfig).indexOf('afterClickClearButton') > -1 &&
            typeof (this.elementConfig.afterClickClearButton) === 'function') {
            this.elementConfig.afterClickClearButton(this.elementValue);
        }
        this.valueChanged.next({ elementValue: null });
    }
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value 属性值
     * @return {?}
     */
    convertModalShowValue(value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    }
    /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    openModal() {
        if (this.elementConfig.readonly) {
            return;
        }
        if (Object.keys(this.elementConfig).indexOf('beforeOpenModal') > -1 && typeof (this.elementConfig.beforeOpenModal) === 'function') {
            /** @type {?} */
            const result = this.elementConfig.beforeOpenModal();
            if (result && !result.result) {
                this.notifyServ.warning(result.message);
                return;
            }
        }
        this.createEditorComponent();
    }
    /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    createEditorComponent() {
        /** @type {?} */
        const editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(editor);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        // 编辑器需要的额外参数
        compRef.instance.editorParams = this.elementConfig.editorParams;
        /** @type {?} */
        let modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (compRef.instance.closeModal && compRef.instance.closeModal instanceof EventEmitter) {
            compRef.instance.closeModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // 数据转换
                if (data) {
                    this.convertModalShowValue(data);
                    this.valueChanged.next({ elementValue: data });
                }
                dialog.close();
            }));
        }
        // 弹出框关闭事件，带参数，格式为{ value, parameters }
        if (compRef.instance.submitModal && compRef.instance.submitModal instanceof EventEmitter) {
            compRef.instance.submitModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (!data) {
                    dialog.close();
                    return;
                }
                const { value, parameters } = data;
                // 数据转换
                this.convertModalShowValue(value);
                this.submitModal.next({ elementValue: value, parameters });
                dialog.close();
            }));
        }
    }
}
ModalPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-modal-prop',
                template: `
    <div class="farris-input-wrap modalIcon">
        <input type="input" class="form-control form-control-sm" [(ngModel)]="elementShowValue" readonly>
        <span [class.allowClear]="showClearButton" class="showClearButton" (click)="modalClear()">
            <i class="material-icons clearIcon">close</i>
        </span>
        <i class="material-icons moreIcon" (click)="openModal()">filter_none</i>
    </div>
    `,
                styles: [`
        .modalIcon .showClearButton {
            display: none;
        }
        .modalIcon:hover .allowClear.showClearButton {
            display: block;
        }
        .modalIcon input {
            padding-right: 30px;
        }
        .modalIcon .moreIcon {
            position: absolute;
            top: 6px;
            right: 6px;
            cursor: pointer;
            font-size: 16px;
            color: #758a96;
        }
        .modalIcon .clearIcon {
            position: absolute;
            top: 5px;
            right: 30px;
            cursor: pointer;
            font-size: 19px;
            color: #758a96;
        }
        `]
            }] }
];
/** @nocollapse */
ModalPropertyComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector }
];
ModalPropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ModalPropertyComponent.prototype.valueChanged;
    /** @type {?} */
    ModalPropertyComponent.prototype.submitModal;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype._elementConfig;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype._elementValue;
    /**
     * 输入框中显示的值
     * @type {?}
     */
    ModalPropertyComponent.prototype.elementShowValue;
    /** @type {?} */
    ModalPropertyComponent.prototype.showClearButton;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.notifyServ;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ModalPropertyComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,