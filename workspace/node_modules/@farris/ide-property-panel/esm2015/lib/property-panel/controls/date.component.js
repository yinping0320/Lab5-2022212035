/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Output } from '@angular/core';
export class DatePropertyComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.showTime = false;
        this.dateFormat = 'yyyy-MM-dd';
        this.valueChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        if (!this.elementConfig) {
            return;
        }
        this.maxDate = value.max;
        this.minDate = value.min;
        this.showTime = this.elementConfig.propertyType === 'datetime';
        this.dateFormat = this.elementConfig.propertyType === 'datetime' ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd';
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
    }
    // editType: string;
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.editType = this.elementConfig && this.elementConfig.propertyType;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        /** @type {?} */
        const value = $event.formatted;
        this.valueChanged.next({ $event, elementValue: value });
    }
}
DatePropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-date-prop',
                template: `
        <farris-datepicker [(ngModel)]="elementValue" [editable]="false" [showTime]="showTime"
          [dateFormat]="dateFormat" [readonly]="elementConfig.readonly"
          (valueChange)="changeValue($event)" [returnType]="'string'" [maxDate]="maxDate"
          [minDate]="minDate">
        </farris-datepicker>

    `
            }] }
];
/** @nocollapse */
DatePropertyComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DatePropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatePropertyComponent.prototype._elementConfig;
    /**
     * @type {?}
     * @private
     */
    DatePropertyComponent.prototype._elementValue;
    /** @type {?} */
    DatePropertyComponent.prototype.maxDate;
    /** @type {?} */
    DatePropertyComponent.prototype.minDate;
    /** @type {?} */
    DatePropertyComponent.prototype.showTime;
    /** @type {?} */
    DatePropertyComponent.prototype.dateFormat;
    /** @type {?} */
    DatePropertyComponent.prototype.valueChanged;
    /**
     * @type {?}
     * @private
     */
    DatePropertyComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1wcm9wZXJ0eS1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9wcm9wZXJ0eS1wYW5lbC9jb250cm9scy9kYXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQTRCLE1BQU0sRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFjNUgsTUFBTSxPQUFPLHFCQUFxQjs7OztJQXVDaEMsWUFBb0IsRUFBcUI7UUFBckIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFoQ3pDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsZUFBVSxHQUFHLFlBQVksQ0FBQztRQTZCaEIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBSWpELENBQUM7Ozs7SUEvQkQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsSUFBSSxhQUFhLENBQUMsS0FBSztRQUVyQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEtBQUssVUFBVSxDQUFDO1FBQy9ELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBSTFHLENBQUM7Ozs7SUFDRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFFRCxJQUFJLFlBQVksQ0FBQyxLQUFLO1FBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBWUQsUUFBUTtRQUNOLHlFQUF5RTtJQUMzRSxDQUFDOzs7OztJQUNELFdBQVcsQ0FBQyxPQUFzQjtJQUVsQyxDQUFDOzs7OztJQUNELFdBQVcsQ0FBQyxNQUFNOztjQUNWLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUztRQUU5QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7WUFuRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUU7Ozs7Ozs7S0FPUDthQUNKOzs7O1lBYlEsaUJBQWlCOzs7MkJBbUR2QixNQUFNOzs7Ozs7O0lBcENQLCtDQUF1Qzs7Ozs7SUFDdkMsOENBQTJCOztJQUUzQix3Q0FBUTs7SUFDUix3Q0FBUTs7SUFFUix5Q0FBaUI7O0lBQ2pCLDJDQUEwQjs7SUE2QjFCLDZDQUFpRDs7Ozs7SUFFckMsbUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJy4uL2VudGl0eS9wcm9wZXJ0eS1lbnRpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtZGF0ZS1wcm9wJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxmYXJyaXMtZGF0ZXBpY2tlciBbKG5nTW9kZWwpXT1cImVsZW1lbnRWYWx1ZVwiIFtlZGl0YWJsZV09XCJmYWxzZVwiIFtzaG93VGltZV09XCJzaG93VGltZVwiXHJcbiAgICAgICAgICBbZGF0ZUZvcm1hdF09XCJkYXRlRm9ybWF0XCIgW3JlYWRvbmx5XT1cImVsZW1lbnRDb25maWcucmVhZG9ubHlcIlxyXG4gICAgICAgICAgKHZhbHVlQ2hhbmdlKT1cImNoYW5nZVZhbHVlKCRldmVudClcIiBbcmV0dXJuVHlwZV09XCInc3RyaW5nJ1wiIFttYXhEYXRlXT1cIm1heERhdGVcIlxyXG4gICAgICAgICAgW21pbkRhdGVdPVwibWluRGF0ZVwiPlxyXG4gICAgICAgIDwvZmFycmlzLWRhdGVwaWNrZXI+XHJcblxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0ZVByb3BlcnR5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gIHByaXZhdGUgX2VsZW1lbnRDb25maWc6IFByb3BlcnR5RW50aXR5O1xyXG4gIHByaXZhdGUgX2VsZW1lbnRWYWx1ZTogYW55O1xyXG5cclxuICBtYXhEYXRlO1xyXG4gIG1pbkRhdGU7XHJcblxyXG4gIHNob3dUaW1lID0gZmFsc2U7XHJcbiAgZGF0ZUZvcm1hdCA9ICd5eXl5LU1NLWRkJztcclxuXHJcbiAgZ2V0IGVsZW1lbnRDb25maWcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudENvbmZpZztcclxuICB9XHJcblxyXG4gIHNldCBlbGVtZW50Q29uZmlnKHZhbHVlKSB7XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudENvbmZpZyA9IHZhbHVlO1xyXG4gICAgaWYgKCF0aGlzLmVsZW1lbnRDb25maWcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5tYXhEYXRlID0gdmFsdWUubWF4O1xyXG4gICAgdGhpcy5taW5EYXRlID0gdmFsdWUubWluO1xyXG4gICAgdGhpcy5zaG93VGltZSA9IHRoaXMuZWxlbWVudENvbmZpZy5wcm9wZXJ0eVR5cGUgPT09ICdkYXRldGltZSc7XHJcbiAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLmVsZW1lbnRDb25maWcucHJvcGVydHlUeXBlID09PSAnZGF0ZXRpbWUnID8gJ3l5eXktTU0tZGQgSEg6bW06c3MnIDogJ3l5eXktTU0tZGQnO1xyXG5cclxuXHJcblxyXG4gIH1cclxuICBnZXQgZWxlbWVudFZhbHVlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRWYWx1ZTtcclxuICB9XHJcblxyXG4gIHNldCBlbGVtZW50VmFsdWUodmFsdWUpIHtcclxuICAgIHRoaXMuX2VsZW1lbnRWYWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcblxyXG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuXHJcbiAgfVxyXG5cclxuICAvLyBlZGl0VHlwZTogc3RyaW5nO1xyXG5cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAvLyB0aGlzLmVkaXRUeXBlID0gdGhpcy5lbGVtZW50Q29uZmlnICYmIHRoaXMuZWxlbWVudENvbmZpZy5wcm9wZXJ0eVR5cGU7XHJcbiAgfVxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuXHJcbiAgfVxyXG4gIGNoYW5nZVZhbHVlKCRldmVudCkge1xyXG4gICAgY29uc3QgdmFsdWUgPSAkZXZlbnQuZm9ybWF0dGVkO1xyXG5cclxuICAgIHRoaXMudmFsdWVDaGFuZ2VkLm5leHQoeyAkZXZlbnQsIGVsZW1lbnRWYWx1ZTogdmFsdWUgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=