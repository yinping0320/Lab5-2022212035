/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output } from '@angular/core';
export class NumberPropertyComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
        /**
         * 数字控件精度
         */
        this.precision = 2;
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        this.precision = this._elementConfig.decimals === undefined ? 2 : this._elementConfig.decimals;
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        this.valueChanged.next({ $event, elementValue: this.elementValue });
    }
}
NumberPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-number-prop',
                template: `
    <div class="farris-input-wrap">
        <farris-number-spinner [(ngModel)]="elementValue" [readonly]="elementConfig.readonly" [precision]="precision"
            [autoDecimal]="true" [min]="elementConfig.min" [max]="elementConfig.max" [canNull]="true"
            [bigNumber]="elementConfig.isBigNumber" (ngModelChange)="changeValue($event)">
        </farris-number-spinner>
    </div>
    `
            }] }
];
NumberPropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NumberPropertyComponent.prototype.valueChanged;
    /**
     * 数字控件精度
     * @type {?}
     */
    NumberPropertyComponent.prototype.precision;
    /**
     * @type {?}
     * @private
     */
    NumberPropertyComponent.prototype._elementConfig;
    /**
     * @type {?}
     * @private
     */
    NumberPropertyComponent.prototype._elementValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLXByb3BlcnR5LXBhbmVsLyIsInNvdXJjZXMiOlsibGliL3Byb3BlcnR5LXBhbmVsL2NvbnRyb2xzL251bWJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUE0QixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFjMUYsTUFBTSxPQUFPLHVCQUF1QjtJQVhwQztRQWFjLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7OztRQUdqRCxjQUFTLEdBQUcsQ0FBQyxDQUFDO0lBOEJsQixDQUFDOzs7O0lBeEJHLElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELElBQUksYUFBYSxDQUFDLEtBQUs7UUFDbkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7SUFFbkcsQ0FBQzs7OztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELElBQUksWUFBWSxDQUFDLEtBQUs7UUFDbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELFFBQVEsS0FBVyxDQUFDOzs7OztJQUVwQixXQUFXLENBQUMsTUFBTTtRQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDOzs7WUE1Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRTs7Ozs7OztLQU9UO2FBQ0o7OzsyQkFHSSxNQUFNOzs7O0lBQVAsK0NBQWlEOzs7OztJQUdqRCw0Q0FBYzs7Ozs7SUFFZCxpREFBdUM7Ozs7O0lBQ3ZDLGdEQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJy4uL2VudGl0eS9wcm9wZXJ0eS1lbnRpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2FwcC1udW1iZXItcHJvcCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImZhcnJpcy1pbnB1dC13cmFwXCI+XHJcbiAgICAgICAgPGZhcnJpcy1udW1iZXItc3Bpbm5lciBbKG5nTW9kZWwpXT1cImVsZW1lbnRWYWx1ZVwiIFtyZWFkb25seV09XCJlbGVtZW50Q29uZmlnLnJlYWRvbmx5XCIgW3ByZWNpc2lvbl09XCJwcmVjaXNpb25cIlxyXG4gICAgICAgICAgICBbYXV0b0RlY2ltYWxdPVwidHJ1ZVwiIFttaW5dPVwiZWxlbWVudENvbmZpZy5taW5cIiBbbWF4XT1cImVsZW1lbnRDb25maWcubWF4XCIgW2Nhbk51bGxdPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgIFtiaWdOdW1iZXJdPVwiZWxlbWVudENvbmZpZy5pc0JpZ051bWJlclwiIChuZ01vZGVsQ2hhbmdlKT1cImNoYW5nZVZhbHVlKCRldmVudClcIj5cclxuICAgICAgICA8L2ZhcnJpcy1udW1iZXItc3Bpbm5lcj5cclxuICAgIDwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTnVtYmVyUHJvcGVydHlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgICAvKiog5pWw5a2X5o6n5Lu257K+5bqmICovXHJcbiAgICBwcmVjaXNpb24gPSAyO1xyXG5cclxuICAgIHByaXZhdGUgX2VsZW1lbnRDb25maWc6IFByb3BlcnR5RW50aXR5O1xyXG4gICAgcHJpdmF0ZSBfZWxlbWVudFZhbHVlOiBhbnk7XHJcblxyXG5cclxuICAgIGdldCBlbGVtZW50Q29uZmlnKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50Q29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBlbGVtZW50Q29uZmlnKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudENvbmZpZyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMucHJlY2lzaW9uID0gdGhpcy5fZWxlbWVudENvbmZpZy5kZWNpbWFscyA9PT0gdW5kZWZpbmVkID8gMiA6IHRoaXMuX2VsZW1lbnRDb25maWcuZGVjaW1hbHM7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldCBlbGVtZW50VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgZWxlbWVudFZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudFZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7IH1cclxuXHJcbiAgICBjaGFuZ2VWYWx1ZSgkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5uZXh0KHsgJGV2ZW50LCBlbGVtZW50VmFsdWU6IHRoaXMuZWxlbWVudFZhbHVlIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=