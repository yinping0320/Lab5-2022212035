/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ComponentFactoryResolver, ViewChild, ViewContainerRef } from '@angular/core';
import { PropertyEntity } from '../../entity/property-entity';
import { TextboxPropertyComponent } from '../../controls/textbox.component';
import { NumberPropertyComponent } from '../../controls/number.component';
import { CombolistPropertyComponent } from '../../controls/combolist.component';
import { DatePropertyComponent } from '../../controls/date.component';
import { ModalPropertyComponent } from '../../controls/modal.component';
import { UniformPropertyComponent } from '../../controls/unity.component';
export class FPropertyItemComponent {
    /**
     * @param {?} resolver
     */
    constructor(resolver) {
        this.resolver = resolver;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        // 向上触发整体面板刷新
        this.triggerRefreshPanel = new EventEmitter();
        // 控件类型
        this.itemType = 'string';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refresh();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    refresh() {
        /** @type {?} */
        let controlComponent;
        // 显示格式
        /** @type {?} */
        const propertyType = this.itemType = this.elementConfig.propertyType;
        switch (propertyType) {
            case 'boolean': {
                this.itemType = 'select';
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'select': {
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'multiSelect': {
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'modal': {
                controlComponent = ModalPropertyComponent;
                break;
            }
            case 'number': {
                controlComponent = NumberPropertyComponent;
                break;
            }
            case 'string': {
                controlComponent = TextboxPropertyComponent;
                break;
            }
            case 'date':
            case 'datetime': {
                controlComponent = DatePropertyComponent;
                break;
            }
            case 'editableSelect': {
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'unity': {
                controlComponent = UniformPropertyComponent;
                break;
            }
            case 'custom': {
                controlComponent = this.elementConfig.editor;
                break;
            }
        }
        // 默认值
        if (Object.keys(this.elementConfig).indexOf('defaultValue') > -1) {
            if (this.elementValue === undefined || this.elementValue === null) {
                this.elementValue = this.elementConfig.defaultValue;
            }
            // this.showDefaultValue = true;
        }
        // 是否显示
        if (Object.keys(this.elementConfig).indexOf('visible') < 0) {
            this.elementConfig.visible = true;
        }
        this.createDynamicControl(controlComponent);
    }
    /**
     * 动态创建控件
     * @param {?} controlComponent  组件类型
     * @return {?}
     */
    createDynamicControl(controlComponent) {
        if (!controlComponent) {
            console.log('动态创建组件为空！');
            return;
        }
        if (this.propItem.length === 0 || this.propertyOldType !== this.itemType) {
            this.propItem.clear();
            /** @type {?} */
            const componentFactory = this.resolver.resolveComponentFactory(controlComponent);
            this.controlComponentRef = this.propItem.createComponent(componentFactory);
            this.controlComponentRef.instance.elementConfig = this.elementConfig;
            this.controlComponentRef.instance.elementValue = this.elementValue;
            if (this.controlComponentRef.instance.valueChanged) {
                this.controlComponentRef.instance.valueChanged.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    const { elementValue } = data;
                    this.elementValue = elementValue;
                    this.changeValue(null);
                }));
            }
            if (this.controlComponentRef.instance.submitModal) {
                this.controlComponentRef.instance.submitModal.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    const { elementValue, parameters } = data;
                    this.elementValue = elementValue;
                    this.changeModalValue(parameters);
                }));
            }
            this.propertyOldType = this.itemType;
        }
        else if (this.controlComponentRef) {
            this.controlComponentRef.instance.elementConfig = this.elementConfig;
            this.controlComponentRef.instance.elementValue = this.elementValue;
        }
    }
    /**
     * 变更属性值
     * @param {?} parameters
     * @return {?}
     */
    changeValue(parameters) {
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: this.elementValue
        };
        this.valueChanged.emit({ changeObject, parameters });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
    /**
     * 变更弹窗类属性值
     * @private
     * @param {?} parameters 参数值
     * @return {?}
     */
    changeModalValue(parameters) {
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: this.elementValue
        };
        this.submitModal.emit({ changeObject, parameters });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
}
FPropertyItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'dynamic-property-item',
                template: "<div class=\"farris-group-wrap property-item\" [hidden]=\"!elementConfig.visible\">\r\n  <div class=\"form-group farris-form-group\">\r\n    <label class=\"col-form-label mb-0\">\r\n\r\n      <!-- <span class=\"farris-label-text\" [popover]=\"popTemplate\" [popoverTitle]=\"elementConfig.propertyName\"\r\n        container=\"body\" placement=\"left\" triggers=\"hover\">{{elementConfig.propertyName}}</span> -->\r\n         <ng-template #popTemplate>\r\n           <div>\r\n            <div *ngIf=\"elementConfig.propertyName\" style=\"color: black;  float:left; margin-bottom:6px \">{{elementConfig.propertyName}}&nbsp;</div>\r\n            <div *ngIf=\"elementConfig.propertyID\" style=\"color: black;  float:left; margin-bottom:6px\">\u2014&nbsp;{{elementConfig.propertyID}}</div>\r\n            <br/>\r\n            <div *ngIf=\"elementConfig.description\" style=\"color: gray; float:left; margin-bottom:8px; \"> &nbsp;&nbsp;{{elementConfig.description}}</div>\r\n            <div *ngIf=\"elementConfig.detail\" style=\"float:left \">\r\n              <a href=\"{{elementConfig.detail}}\" target=\"_blank\">{{\"&nbsp;&nbsp;\u66F4\u591A\"}}</a></div> \r\n            </div>                \r\n        </ng-template>\r\n\r\n        <div>\r\n          <span class=\"farris-label-text\" farrisPopover [container]=\"'body'\" \r\n          [placement]=\"'left'\" [triggers]=\"'hover'\" [popover]=\"popTemplate\" [isFixed]=\"true\">{{elementConfig.propertyName}}</span>\r\n        </div>  \r\n\r\n    </label>\r\n\r\n    <ng-container #propItem> </ng-container>\r\n\r\n  </div>\r\n</div>\r\n",
                styles: [".property-item .form-group{margin-bottom:2px}.property-item .col-form-label{line-height:26px}"]
            }] }
];
/** @nocollapse */
FPropertyItemComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver }
];
FPropertyItemComponent.propDecorators = {
    elementConfig: [{ type: Input }],
    elementValue: [{ type: Input }],
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    triggerRefreshPanel: [{ type: Output }],
    propItem: [{ type: ViewChild, args: ['propItem', { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    FPropertyItemComponent.prototype.elementConfig;
    /** @type {?} */
    FPropertyItemComponent.prototype.elementValue;
    /** @type {?} */
    FPropertyItemComponent.prototype.valueChanged;
    /** @type {?} */
    FPropertyItemComponent.prototype.submitModal;
    /** @type {?} */
    FPropertyItemComponent.prototype.triggerRefreshPanel;
    /** @type {?} */
    FPropertyItemComponent.prototype.propItem;
    /** @type {?} */
    FPropertyItemComponent.prototype.propertyOldType;
    /** @type {?} */
    FPropertyItemComponent.prototype.itemType;
    /** @type {?} */
    FPropertyItemComponent.prototype.controlComponentRef;
    /**
     * @type {?}
     * @private
     */
    FPropertyItemComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,