import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ElementPropertyConfig } from '../../entity/property-entity';
import { FPropertyItemComponent } from '../farris-property-item/property-item.component';
import { PropertyItemComponent } from '../property-item/property-item.component';
export declare class PropertyItemListComponent implements OnChanges {
    /** 某一分类下的属性配置 */
    category: ElementPropertyConfig;
    propertyData: any;
    dynamicControl: boolean;
    valueChanged: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    triggerRefreshPanel: EventEmitter<any>;
    items: Array<PropertyItemComponent>;
    fitems: Array<FPropertyItemComponent>;
    data: any;
    constructor();
    ngOnChanges(simpleChanges: SimpleChanges): void;
    /**
     * 适配属性
     */
    private adaptProperties;
    refresh(): void;
    /**
     * 一般属性变更
     */
    _itemChanged($event: any): void;
    /**
     * 模态框数据变更（TODO:待优化，合并valueChange事件）
     */
    _submitModal($event: any): void;
    /**
     * 级联属性变更
     */
    _cascadeitemChanged($event: any, propItem: any): void;
    /**
     * 级联模态框属性变更
     */
    __cascadeitemSubmitModal($event: any, propItem: any): void;
    /**
     * 级联属性的汇总信息
     * @param propItem
     * @param valueObject
     */
    cascadeValueStringify(propItem: any, valueObject: any): void;
    /**
     *  已废弃
     */
    _checkCascadeVisible(propItem: any): any;
    refreshPanel(): void;
    trackByPropId(index: number, PropItem: any): string;
}
