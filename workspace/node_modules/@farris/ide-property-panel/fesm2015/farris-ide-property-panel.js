import { PopoverModule } from '@farris/ui-popover';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { NG_VALUE_ACCESSOR, NgControl, FormsModule } from '@angular/forms';
import { DOCUMENT, CommonModule } from '@angular/common';
import { takeUntil, filter, skip, debounceTime, throttle } from 'rxjs/operators';
import { Component, EventEmitter, Output, ChangeDetectorRef, ComponentFactoryResolver, Injector, Input, ViewChild, ViewContainerRef, ElementRef, ViewChildren, ViewEncapsulation, Injectable, Renderer2, Inject, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { BehaviorSubject, Subject, fromEvent, interval } from 'rxjs';
import { InputGroupModule } from '@farris/ui-input-group';
import { DatalistModule } from '@farris/ui-datalist';
import { ComboListModule } from '@farris/ui-combo-list';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { PropertyEditorModule } from '@farris/property-editor';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const PropertyType = {
    /** 字符串 */
    string: 'string',
    /** 布尔，下拉选择 */
    boolean: 'boolean',
    /** 数字 */
    number: 'number',
    /** 下拉选择：单选 */
    select: 'select',
    /** 已废弃，请使用editableSelect */
    boolOrExp: 'boolOrExp',
    /** 可编辑的下拉选择：单选，并且可编辑 */
    editableSelect: 'editableSelect',
    /** 下拉多选 */
    multiSelect: 'multiSelect',
    /** 日期 */
    date: 'date',
    /** 日期时间 */
    datetime: 'datetime',
    /** 模态窗，自定义组件 */
    modal: 'modal',
    /** 级联 */
    cascade: 'cascade',
    /** 自定义组件 */
    custom: 'custom',
};
/**
 * 属性分类实体
 */
class ElementPropertyConfig {
    constructor() {
        /**
         * 分类是否隐藏，默认false
         */
        this.hide = false;
        /**
         * 是否隐藏分类标题
         */
        this.hideTitle = false;
        /**
         * 是否启用级联特性，默认false
         */
        this.enableCascade = false;
    }
}
/**
 * 属性实体
 */
class PropertyEntity {
    constructor() {
        /**
         * 是否只读，默认false
         */
        this.readonly = false;
        /**
         * 是否可见，默认true
         */
        this.visible = true;
        /**
         * 是否大数字
         */
        this.isBigNumber = false;
        /**
         * 属性改变后是否需要刷新整个面板：用于更改其他分类下的属性
         */
        this.refreshPanelAfterChanged = false;
        /**
         * 下拉多选类型：属性值的类型：string(多值以逗号分隔)/array(多值组装成数组)
         */
        this.multiSelectDataType = 'string';
        /**
         * 级联属性是否默认收起
         */
        this.isExpand = false;
        /**
         * 是否隐藏级联属性的头部
         */
        this.hideCascadeTitle = false;
        /**
         * 模态框属性是否展示清除图标
         */
        this.showClearButton = false;
    }
    /**
     * 打开模态框前的方法，一般用于校验逻辑，返回值中result=true，则进一步打开模态框，result=false则提示message内容，并不再打开模态框。
     * @return {?}
     */
    beforeOpenModal() {
        return new BeforeOpenModalResult();
    }
}
/**
 * 打开模态框前的方法返回值，result=true，则进一步打开模态框，result=false则提示message内容，并不再打开模态框。
 */
class BeforeOpenModalResult {
}
/**
 * 属性变更集
 */
class PropertyChangeObject {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextboxPropertyComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        if (this.elementConfig.readonly) {
            this.convertModalShowValue(this._elementValue);
        }
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
        if (this.elementConfig.readonly) {
            this.convertModalShowValue(this._elementValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        // 文本控件限制输入字符
        if (this.elementValue && !this.elementConfig.readonly &&
            this.elementConfig.notAllowedChars && this.elementConfig.notAllowedChars.length) {
            this.elementConfig.notAllowedChars.forEach((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                if (typeof (c) === 'object') {
                    this.elementValue = this.elementValue.replace(c, '');
                }
                else if (typeof (c) === 'string') {
                    this.elementValue = this.elementValue.replace(new RegExp(c, 'g'), '');
                }
            }));
        }
        this.valueChanged.next({ $event, elementValue: this.elementValue });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    restValueAfterValidRestrict(value) {
        this.elementValue = value || '';
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    convertModalShowValue(value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    }
}
TextboxPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-textbox-prop',
                template: `
    <div class="farris-input-wrap">
        <input type="input" class="form-control form-control-sm" [(ngModel)]="elementValue" (blur)="changeValue($event)"
            *ngIf="!elementConfig.readonly">
        <input type="input" class="form-control form-control-sm" [(ngModel)]="elementShowValue" [readonly]="'readonly'"
            *ngIf="elementConfig.readonly">
    </div>
    `
            }] }
];
TextboxPropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberPropertyComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
        /**
         * 数字控件精度
         */
        this.precision = 2;
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        this.precision = this._elementConfig.decimals === undefined ? 2 : this._elementConfig.decimals;
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        this.valueChanged.next({ $event, elementValue: this.elementValue });
    }
}
NumberPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-number-prop',
                template: `
    <div class="farris-input-wrap">
        <farris-number-spinner [(ngModel)]="elementValue" [readonly]="elementConfig.readonly" [precision]="precision"
            [autoDecimal]="true" [min]="elementConfig.min" [max]="elementConfig.max" [canNull]="true"
            [bigNumber]="elementConfig.isBigNumber" (ngModelChange)="changeValue($event)">
        </farris-number-spinner>
    </div>
    `
            }] }
];
NumberPropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CombolistPropertyComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
        /**
         * 下拉框的枚举项
         */
        this.selectOptions = [];
        /**
         * 是否可任意输入
         */
        this.nosearch = false;
        /**
         * 是否多选
         */
        this.multiSelect = false;
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
        // 多选控件使用数组格式的数据
        if (this.elementConfig.multiSelectDataType === 'array') {
            this._elementValue = this._elementValue ? this._elementValue.toString() : '';
        }
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        if (!this.elementConfig) {
            return;
        }
        this.editType = this.elementConfig.propertyType;
        if (this.editType === 'boolean') {
            this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
            this.editType = 'select';
        }
        else {
            this.selectOptions = this.elementConfig.iterator || [];
        }
        switch (this.editType) {
            case 'select': {
                // 不可编辑下拉框
                this.editable = false;
                break;
            }
            case 'editableSelect': {
                // 可编辑下拉框
                this.editable = true;
                this.nosearch = true;
                break;
            }
            case 'multiSelect': {
                // 不可编辑的下拉多选框
                this.editable = false;
                this.multiSelect = true;
                // 多选控件使用数组格式的数据
                if (this.elementConfig.multiSelectDataType === 'array') {
                    this._elementValue = this._elementValue ? this._elementValue.toString() : '';
                }
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        /** @type {?} */
        let value = this._elementValue;
        // 多选控件返回数组格式的数据
        if (this.editType === 'multiSelect' && this.elementConfig.multiSelectDataType === 'array') {
            value = this._elementValue ? this._elementValue.split(',') : '';
        }
        this.valueChanged.next({ elementValue: value });
    }
}
CombolistPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-combolist-prop',
                template: `
      <!--下拉列表-->
      <div class="farris-input-wrap">
        <farris-combo-list
          [(ngModel)]="elementValue"
          [idField]="'key'"
          [textField]="'value'"
          [data]="selectOptions"
          [readonly]="elementConfig.readonly"
          [editable]="editable"
          [multiSelect]="multiSelect"
          [enableClear]="false"
          [enableCancelSelected]="false"
          [nosearch]="nosearch"
          (ngModelChange)="changeValue($event)">
        </farris-combo-list>
      </div>
    `
            }] }
];
CombolistPropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatePropertyComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.showTime = false;
        this.dateFormat = 'yyyy-MM-dd';
        this.valueChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        if (!this.elementConfig) {
            return;
        }
        this.maxDate = value.max;
        this.minDate = value.min;
        this.showTime = this.elementConfig.propertyType === 'datetime';
        this.dateFormat = this.elementConfig.propertyType === 'datetime' ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd';
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
    }
    // editType: string;
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.editType = this.elementConfig && this.elementConfig.propertyType;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        /** @type {?} */
        const value = $event.formatted;
        this.valueChanged.next({ $event, elementValue: value });
    }
}
DatePropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-date-prop',
                template: `
        <farris-datepicker [(ngModel)]="elementValue" [editable]="false" [showTime]="showTime"
          [dateFormat]="dateFormat" [readonly]="elementConfig.readonly"
          (valueChange)="changeValue($event)" [returnType]="'string'" [maxDate]="maxDate"
          [minDate]="minDate">
        </farris-datepicker>

    `
            }] }
];
/** @nocollapse */
DatePropertyComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DatePropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalPropertyComponent {
    /**
     * @param {?} notifyServ
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     */
    constructor(notifyServ, resolver, modalService, injector) {
        this.notifyServ = notifyServ;
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.showClearButton = false;
    }
    /**
     * @return {?}
     */
    get elementConfig() {
        return this._elementConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementConfig(value) {
        this._elementConfig = value;
        this.convertModalShowValue(this._elementValue);
        this.showClearButton = this.elementConfig.showClearButton && !this.elementConfig.readonly;
    }
    /**
     * @return {?}
     */
    get elementValue() {
        return this._elementValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set elementValue(value) {
        this._elementValue = value;
        this.convertModalShowValue(this._elementValue);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    changeValue($event) {
        this.valueChanged.next({ $event, elementValue: this.elementValue });
    }
    /**
     * 清除模态框内容
     * @return {?}
     */
    modalClear() {
        // 数据转换
        this.convertModalShowValue(null);
        // 若有清除后事件，先执行方法
        if (Object.keys(this.elementConfig).indexOf('afterClickClearButton') > -1 &&
            typeof (this.elementConfig.afterClickClearButton) === 'function') {
            this.elementConfig.afterClickClearButton(this.elementValue);
        }
        this.valueChanged.next({ elementValue: null });
    }
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value 属性值
     * @return {?}
     */
    convertModalShowValue(value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    }
    /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    openModal() {
        if (this.elementConfig.readonly) {
            return;
        }
        if (Object.keys(this.elementConfig).indexOf('beforeOpenModal') > -1 && typeof (this.elementConfig.beforeOpenModal) === 'function') {
            /** @type {?} */
            const result = this.elementConfig.beforeOpenModal();
            if (result && !result.result) {
                this.notifyServ.warning(result.message);
                return;
            }
        }
        this.createEditorComponent();
    }
    /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    createEditorComponent() {
        /** @type {?} */
        const editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(editor);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        // 编辑器需要的额外参数
        compRef.instance.editorParams = this.elementConfig.editorParams;
        /** @type {?} */
        let modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (compRef.instance.closeModal && compRef.instance.closeModal instanceof EventEmitter) {
            compRef.instance.closeModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // 数据转换
                if (data) {
                    this.convertModalShowValue(data);
                    this.valueChanged.next({ elementValue: data });
                }
                dialog.close();
            }));
        }
        // 弹出框关闭事件，带参数，格式为{ value, parameters }
        if (compRef.instance.submitModal && compRef.instance.submitModal instanceof EventEmitter) {
            compRef.instance.submitModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (!data) {
                    dialog.close();
                    return;
                }
                const { value, parameters } = data;
                // 数据转换
                this.convertModalShowValue(value);
                this.submitModal.next({ elementValue: value, parameters });
                dialog.close();
            }));
        }
    }
}
ModalPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-modal-prop',
                template: `
    <div class="farris-input-wrap modalIcon">
        <input type="input" class="form-control form-control-sm" [(ngModel)]="elementShowValue" readonly>
        <span [class.allowClear]="showClearButton" class="showClearButton" (click)="modalClear()">
            <i class="material-icons clearIcon">close</i>
        </span>
        <i class="material-icons moreIcon" (click)="openModal()">filter_none</i>
    </div>
    `,
                styles: [`
        .modalIcon .showClearButton {
            display: none;
        }
        .modalIcon:hover .allowClear.showClearButton {
            display: block;
        }
        .modalIcon input {
            padding-right: 30px;
        }
        .modalIcon .moreIcon {
            position: absolute;
            top: 6px;
            right: 6px;
            cursor: pointer;
            font-size: 16px;
            color: #758a96;
        }
        .modalIcon .clearIcon {
            position: absolute;
            top: 5px;
            right: 30px;
            cursor: pointer;
            font-size: 19px;
            color: #758a96;
        }
        `]
            }] }
];
/** @nocollapse */
ModalPropertyComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector }
];
ModalPropertyComponent.propDecorators = {
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UniformPropertyComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    initImportedOriginalData() {
        /** @type {?} */
        const editorParams = this.elementConfig.editorParams;
        /** @type {?} */
        const constType = editorParams.constType;
        /** @type {?} */
        const valueType = this.getValueType();
        this.importedOriginalData = {
            controlName: editorParams.controlName,
            propertyName: this.elementConfig.propertyID,
            propertyType: constType,
            propertyValue: {
                type: valueType,
                value: this.elementValue
            },
            editorOptions: editorParams.editorOptions
        };
    }
    /**
     * 通过当前配置信息和值信息推断当前值的类型
     * @return {?} 值类型
     */
    getValueType() {
        /** @type {?} */
        const propertyValue = this.elementValue;
        /** @type {?} */
        const editorParams = this.elementConfig.editorParams;
        /** @type {?} */
        const constType = editorParams.constType;
        /** @type {?} */
        const types = editorParams.editorOptions.types;
        // 当前值为对象时
        if (propertyValue && typeof propertyValue === "object") {
            // 判断是否为变量类型
            if (propertyValue.hasOwnProperty("type") && (typeof propertyValue.type === "string" && propertyValue.type.toLowerCase() === "variable")) {
                if (types.includes("variable"))
                    return "variable";
            }
        }
        // 当前值为字符串时
        if (typeof propertyValue === "string") {
            // 判断是否为自定义类型（通过是否含有“viewModel”子串硬推断）
            if (types.includes("custom") && (propertyValue.includes("viewModel") || !types.includes("const") || constType !== "string")) {
                return "custom";
            }
            // 判断是否为字符串常量
            if (types.includes("const") && constType === "string") {
                return "const";
            }
        }
        // 当前值为数字时
        if (typeof propertyValue === "number") {
            if (types.includes("const") && constType === "number") {
                return "const";
            }
        }
        // 默认为const类型（为枚举类型兜底）
        if (types.includes("const")) {
            return "const";
        }
        // 如果都找不到则任意返回一个值
        return types[0];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleValueChanged($event) {
        /** @type {?} */
        let newValue = $event.propertyValue.value;
        if ($event.propertyValue.type === "variable" && typeof newValue === "object") {
            newValue.type = "Variable";
            if (newValue.name) {
                delete newValue.name;
            }
            if ($event["isNewVariable"]) {
                newValue["isNewVariable"] = true;
            }
        }
        this.valueChanged.next({ $event, elementValue: newValue });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initImportedOriginalData();
    }
}
UniformPropertyComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-unity-prop',
                template: `
      <div class="farris-input-wrap">
        <farris-propertyEditor
          [importedOriginalData]="importedOriginalData"
          (propertyEditorValueChanged)="handleValueChanged($event)">
        </farris-propertyEditor>
      </div>
    `
            }] }
];
UniformPropertyComponent.propDecorators = {
    elementConfig: [{ type: Input }],
    elementValue: [{ type: Input }],
    valueChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FPropertyItemComponent {
    /**
     * @param {?} resolver
     */
    constructor(resolver) {
        this.resolver = resolver;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        // 向上触发整体面板刷新
        this.triggerRefreshPanel = new EventEmitter();
        // 控件类型
        this.itemType = 'string';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refresh();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    refresh() {
        /** @type {?} */
        let controlComponent;
        // 显示格式
        /** @type {?} */
        const propertyType = this.itemType = this.elementConfig.propertyType;
        switch (propertyType) {
            case 'boolean': {
                this.itemType = 'select';
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'select': {
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'multiSelect': {
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'modal': {
                controlComponent = ModalPropertyComponent;
                break;
            }
            case 'number': {
                controlComponent = NumberPropertyComponent;
                break;
            }
            case 'string': {
                controlComponent = TextboxPropertyComponent;
                break;
            }
            case 'date':
            case 'datetime': {
                controlComponent = DatePropertyComponent;
                break;
            }
            case 'editableSelect': {
                controlComponent = CombolistPropertyComponent;
                break;
            }
            case 'unity': {
                controlComponent = UniformPropertyComponent;
                break;
            }
            case 'custom': {
                controlComponent = this.elementConfig.editor;
                break;
            }
        }
        // 默认值
        if (Object.keys(this.elementConfig).indexOf('defaultValue') > -1) {
            if (this.elementValue === undefined || this.elementValue === null) {
                this.elementValue = this.elementConfig.defaultValue;
            }
            // this.showDefaultValue = true;
        }
        // 是否显示
        if (Object.keys(this.elementConfig).indexOf('visible') < 0) {
            this.elementConfig.visible = true;
        }
        this.createDynamicControl(controlComponent);
    }
    /**
     * 动态创建控件
     * @param {?} controlComponent  组件类型
     * @return {?}
     */
    createDynamicControl(controlComponent) {
        if (!controlComponent) {
            console.log('动态创建组件为空！');
            return;
        }
        if (this.propItem.length === 0 || this.propertyOldType !== this.itemType) {
            this.propItem.clear();
            /** @type {?} */
            const componentFactory = this.resolver.resolveComponentFactory(controlComponent);
            this.controlComponentRef = this.propItem.createComponent(componentFactory);
            this.controlComponentRef.instance.elementConfig = this.elementConfig;
            this.controlComponentRef.instance.elementValue = this.elementValue;
            if (this.controlComponentRef.instance.valueChanged) {
                this.controlComponentRef.instance.valueChanged.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    const { elementValue } = data;
                    this.elementValue = elementValue;
                    this.changeValue(null);
                }));
            }
            if (this.controlComponentRef.instance.submitModal) {
                this.controlComponentRef.instance.submitModal.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    const { elementValue, parameters } = data;
                    this.elementValue = elementValue;
                    this.changeModalValue(parameters);
                }));
            }
            this.propertyOldType = this.itemType;
        }
        else if (this.controlComponentRef) {
            this.controlComponentRef.instance.elementConfig = this.elementConfig;
            this.controlComponentRef.instance.elementValue = this.elementValue;
        }
    }
    /**
     * 变更属性值
     * @param {?} parameters
     * @return {?}
     */
    changeValue(parameters) {
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: this.elementValue
        };
        this.valueChanged.emit({ changeObject, parameters });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
    /**
     * 变更弹窗类属性值
     * @private
     * @param {?} parameters 参数值
     * @return {?}
     */
    changeModalValue(parameters) {
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: this.elementValue
        };
        this.submitModal.emit({ changeObject, parameters });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
}
FPropertyItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'dynamic-property-item',
                template: "<div class=\"farris-group-wrap property-item\" [hidden]=\"!elementConfig.visible\">\r\n  <div class=\"form-group farris-form-group\">\r\n    <label class=\"col-form-label mb-0\">\r\n\r\n      <!-- <span class=\"farris-label-text\" [popover]=\"popTemplate\" [popoverTitle]=\"elementConfig.propertyName\"\r\n        container=\"body\" placement=\"left\" triggers=\"hover\">{{elementConfig.propertyName}}</span> -->\r\n         <ng-template #popTemplate>\r\n           <div>\r\n            <div *ngIf=\"elementConfig.propertyName\" style=\"color: black;  float:left; margin-bottom:6px \">{{elementConfig.propertyName}}&nbsp;</div>\r\n            <div *ngIf=\"elementConfig.propertyID\" style=\"color: black;  float:left; margin-bottom:6px\">\u2014&nbsp;{{elementConfig.propertyID}}</div>\r\n            <br/>\r\n            <div *ngIf=\"elementConfig.description\" style=\"color: gray; float:left; margin-bottom:8px; \"> &nbsp;&nbsp;{{elementConfig.description}}</div>\r\n            <div *ngIf=\"elementConfig.detail\" style=\"float:left \">\r\n              <a href=\"{{elementConfig.detail}}\" target=\"_blank\">{{\"&nbsp;&nbsp;\u66F4\u591A\"}}</a></div> \r\n            </div>                \r\n        </ng-template>\r\n\r\n        <div>\r\n          <span class=\"farris-label-text\" farrisPopover [container]=\"'body'\" \r\n          [placement]=\"'left'\" [triggers]=\"'hover'\" [popover]=\"popTemplate\" [isFixed]=\"true\">{{elementConfig.propertyName}}</span>\r\n        </div>  \r\n\r\n    </label>\r\n\r\n    <ng-container #propItem> </ng-container>\r\n\r\n  </div>\r\n</div>\r\n",
                styles: [".property-item .form-group{margin-bottom:2px}.property-item .col-form-label{line-height:26px}"]
            }] }
];
/** @nocollapse */
FPropertyItemComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver }
];
FPropertyItemComponent.propDecorators = {
    elementConfig: [{ type: Input }],
    elementValue: [{ type: Input }],
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    triggerRefreshPanel: [{ type: Output }],
    propItem: [{ type: ViewChild, args: ['propItem', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyItemComponent {
    /**
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     * @param {?} notifyServ
     * @param {?} el
     */
    constructor(resolver, modalService, injector, notifyServ, el) {
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.notifyServ = notifyServ;
        this.el = el;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        // 向上触发整体面板刷新
        this.triggerRefreshPanel = new EventEmitter();
        // 下拉框的枚举项
        this.selectOptions = [];
        // 控件类型
        this.itemType = 'string';
        // 数字控件精度
        this.precision = 2;
        // 已废弃
        this.showClearButton = false;
        // 默认值
        this.showDefaultValue = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refresh();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.refresh();
    }
    /**
     * @return {?}
     */
    refresh() {
        this.showClearButton = this.elementConfig.showClearButton && !this.elementConfig.readonly;
        /** @type {?} */
        let tmpl;
        // 显示格式
        /** @type {?} */
        const propertyType = this.itemType = this.elementConfig.propertyType;
        switch (propertyType) {
            case 'boolean': {
                this.itemType = 'select';
                this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
                tmpl = this.selectTmpl;
                break;
            }
            case 'select': {
                this.selectOptions = this.elementConfig.iterator || [];
                tmpl = this.selectTmpl;
                break;
            }
            case 'multiSelect': {
                this.selectOptions = this.elementConfig.iterator || [];
                if (this.elementConfig.multiSelectDataType === 'array') {
                    this.elementValue = this.elementValue ? this.elementValue.toString() : '';
                }
                tmpl = this.multiSelectTmpl;
                break;
            }
            case 'modal': {
                this._convertModalShowValue(this.elementValue);
                tmpl = this.modalTmpl;
                break;
            }
            case 'number': {
                this.precision = this.elementConfig.decimals === undefined ? 2 : this.elementConfig.decimals;
                tmpl = this.numberTmpl;
                break;
            }
            case 'string': {
                if (this.elementConfig.readonly) {
                    this._convertModalShowValue(this.elementValue);
                }
                tmpl = this.stringTmpl;
                break;
            }
            /** 已废弃，请使用editableSelect */
            case 'boolOrExp': {
                this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
                tmpl = this.boolOrExpTmpl;
                break;
            }
            case 'date': {
                tmpl = this.dateTmpl;
                break;
            }
            case 'datetime': {
                tmpl = this.datetimeTmpl;
                break;
            }
            case 'editableSelect': {
                this.selectOptions = this.elementConfig.iterator || [];
                tmpl = this.editableSelectTmpl;
                break;
            }
        }
        // 默认值
        if (Object.keys(this.elementConfig).indexOf('defaultValue') > -1) {
            if (this.elementValue === undefined || this.elementValue === null) {
                this.elementValue = this.elementConfig.defaultValue;
            }
            this.showDefaultValue = true;
        }
        // 是否显示
        if (Object.keys(this.elementConfig).indexOf('visible') < 0) {
            this.elementConfig.visible = true;
        }
        // 创建模板
        if (tmpl && (this.propItem.length === 0 || this.propertyOldType !== this.itemType)) {
            this.propItem.clear();
            this.propItem.createEmbeddedView(tmpl);
            this.propertyOldType = this.itemType;
        }
    }
    /**
     * 鼠标移入 --已废弃
     * @return {?}
     */
    onmouseover() {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        if (!this.showClearButton) {
            this.showClearButton = true;
        }
    }
    /**
     * 鼠标离开 --已废弃
     * @return {?}
     */
    onmouseleave() {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        this.showClearButton = false;
    }
    /**
     * 清除模态框内容
     * @return {?}
     */
    modalClear() {
        // 数据转换
        this._convertModalShowValue(null);
        // 若有清除后事件，先执行方法
        if (Object.keys(this.elementConfig).indexOf('afterClickClearButton') > -1 &&
            typeof (this.elementConfig.afterClickClearButton) === 'function') {
            this.elementConfig.afterClickClearButton(this.elementValue);
        }
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: null
        };
        this.submitModal.emit({ changeObject, parameters: null });
    }
    /**
     * 变更属性值
     * @param {?} e
     * @return {?}
     */
    changeValue(e) {
        /** @type {?} */
        let value = this.elementValue;
        // 文本控件限制输入字符
        if (value && this.elementConfig.propertyType === 'string' && !this.elementConfig.readonly &&
            this.elementConfig.notAllowedChars && this.elementConfig.notAllowedChars.length) {
            this.elementConfig.notAllowedChars.forEach((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                if (typeof (c) === 'object') {
                    value = value.replace(c, '');
                }
                else if (typeof (c) === 'string') {
                    value = value.replace(new RegExp(c, 'g'), '');
                }
            }));
            this.elementValue = value;
        }
        // 多选控件返回数组格式的数据
        if (this.itemType === 'multiSelect' && this.elementConfig.multiSelectDataType === 'array') {
            value = this.elementValue ? this.elementValue.split(',') : '';
        }
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: value
        };
        this.valueChanged.emit({ changeObject });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
    /**
     * farris 日期控件的变更事件
     * @param {?} e e
     * @return {?}
     */
    changeDateValue(e) {
        /** @type {?} */
        const value = e.formatted;
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: value
        };
        this.valueChanged.emit({ changeObject });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
    /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    openModal() {
        if (this.elementConfig.readonly) {
            return;
        }
        if (Object.keys(this.elementConfig).indexOf('beforeOpenModal') > -1 && typeof (this.elementConfig.beforeOpenModal) === 'function') {
            /** @type {?} */
            const result = this.elementConfig.beforeOpenModal();
            if (result && !result.result) {
                this.notifyServ.warning((/** @type {?} */ ({
                    title: '系统提示', msg: result.message, timeout: 3000
                })));
                return;
            }
        }
        this.createEditorComponent();
    }
    /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    createEditorComponent() {
        /** @type {?} */
        const editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(editor);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        if (this.elementConfig.editorParams) { // 编辑器需要的额外参数
            compRef.instance.editorParams = this.elementConfig.editorParams;
        }
        /** @type {?} */
        let modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (compRef.instance.closeModal && compRef.instance.closeModal instanceof EventEmitter) {
            compRef.instance.closeModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // 数据转换
                if (data) {
                    this._convertModalShowValue(data);
                    /** @type {?} */
                    const changeObject = {
                        propertyID: this.elementConfig.propertyID,
                        propertyValue: data
                    };
                    this.valueChanged.emit({ changeObject });
                }
                dialog.close();
            }));
        }
        // 弹出框关闭事件，带参数，格式为{ value, parameters }
        if (compRef.instance.submitModal && compRef.instance.submitModal instanceof EventEmitter) {
            compRef.instance.submitModal.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (!data) {
                    dialog.close();
                    return;
                }
                const { value, parameters } = data;
                // 数据转换
                this._convertModalShowValue(value);
                /** @type {?} */
                const changeObject = {
                    propertyID: this.elementConfig.propertyID,
                    propertyValue: value
                };
                this.submitModal.emit({ changeObject, parameters });
                dialog.close();
            }));
        }
    }
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value
     * @return {?}
     */
    _convertModalShowValue(value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    }
}
PropertyItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'webide-property-item',
                template: "<div class=\"farris-group-wrap property-item\" [hidden]=\"!elementConfig.visible\">\r\n  <div class=\"form-group farris-form-group\">\r\n   <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\" farrisPopover [popover]=\"popTemplate\" [popoverTitle]=\"elementConfig.propertyName\"\r\n        container=\"body\" placement=\"left\" triggers=\"hover\">{{elementConfig.propertyName}}</span>\r\n    </label> \r\n    <!-- <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\" farrisPopover [popover]=\"popTemplate\" container=\"body\"\r\n        triggers=\"hover\">{{elementConfig.propertyName}}</span>\r\n    </label> -->\r\n    <!-- <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\">{{elementConfig.propertyName}}</span>\r\n    </label> -->\r\n\r\n    <ng-container #propItem> </ng-container>\r\n\r\n    <!--\u6587\u672C-->\r\n    <ng-template #stringTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" (blur)=\"changeValue($event)\"\r\n          *ngIf=\"!elementConfig.readonly\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" [readonly]=\"'readonly'\"\r\n          *ngIf=\"elementConfig.readonly\">\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template #numberTmpl>\r\n      <!-- \u6570\u5B57-->\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-number-spinner [(ngModel)]=\"elementValue\" [readonly]=\"elementConfig.readonly\" [precision]=\"precision\"\r\n          [autoDecimal]=\"true\" [min]=\"elementConfig.min\" [max]=\"elementConfig.max\" [canNull]=\"true\"\r\n          [bigNumber]=\"elementConfig.isBigNumber\" (ngModelChange)=\"changeValue($event)\">\r\n        </farris-number-spinner>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u4E0B\u62C9\u5217\u8868-->\r\n    <ng-template #selectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [editable]=\"false\" [enableClear]=\"false\" [enableCancelSelected]=\"false\"\r\n          (valueChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u53EF\u7F16\u8F91\u7684\u4E0B\u62C9\u5217\u8868\uFF08\u6B64\u5904\u662F\u6539\u52A8\u540E\u7684farris combolist\uFF0Cfarris combolist\uFF09-->\r\n    <ng-template #boolOrExpTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-editable-combo-list [data]=\"selectOptions\" textField=\"value\" idField=\"key\" [(ngModel)]=\"elementValue\"\r\n          (valueChange)=\"changeValue($event)\" [editable]=\"true\" [readonly]=\"elementConfig.readonly?true:false\">\r\n        </farris-editable-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!-- \u53EF\u7F16\u8F91\u7684\u4E0B\u62C9\u6846-->\r\n    <ng-template #editableSelectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [enableClear]=\"false\" [enableCancelSelected]=\"false\" [nosearch]=\"true\"\r\n          (ngModelChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u4E0B\u62C9\u591A\u9009-->\r\n    <ng-template #multiSelectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [editable]=\"false\" [multiSelect]=\"true\" [enableClear]=\"false\"\r\n          (ngModelChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u65E5\u671F-->\r\n    <ng-template #dateTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-datepicker [(ngModel)]=\"elementValue\" [editable]=\"false\" [showTime]=\"false\" [dateFormat]=\"'yyyy-MM-dd'\"\r\n          [readonly]=\"elementConfig.readonly\" (valueChange)=\"changeDateValue($event)\" [returnType]=\"'string'\"\r\n          [maxDate]=\"elementConfig.max\" [minDate]=\"elementConfig.min\">\r\n        </farris-datepicker>\r\n      </div>\r\n    </ng-template>\r\n\r\n\r\n    <!-- \u65E5\u671F\u65F6\u95F4 -->\r\n    <ng-template #datetimeTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-datepicker [(ngModel)]=\"elementValue\" [editable]=\"false\" [showTime]=\"true\"\r\n          [dateFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [readonly]=\"elementConfig.readonly\"\r\n          (valueChange)=\"changeDateValue($event)\" [returnType]=\"'string'\" [maxDate]=\"elementConfig.max\"\r\n          [minDate]=\"elementConfig.min\">\r\n        </farris-datepicker>\r\n      </div>\r\n    </ng-template>\r\n\r\n\r\n    <!-- \u6A21\u6001\u6846 -->\r\n    <ng-template #modalTmpl>\r\n      <div class=\"farris-input-wrap modalIcon\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" readonly>\r\n        <span *ngIf=\"showClearButton\" class=\"showClearButton\" (click)=\"modalClear()\">\r\n          <i class=\"material-icons clearIcon\">close</i>\r\n        </span>\r\n        <i class=\"material-icons moreIcon\" (click)=\"openModal()\">filter_none</i>\r\n      </div>\r\n    </ng-template>\r\n\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #popTemplate>\r\n  <div *ngIf=\"elementConfig.propertyID\">\r\n    <span>\u7F16\u53F7\uFF1A </span> {{elementConfig.propertyID}}</div>\r\n  <div *ngIf=\"elementConfig.description\">\r\n    <span>\u63CF\u8FF0\uFF1A </span> {{elementConfig.description}}</div>\r\n</ng-template>",
                styles: [".property-item .form-group{margin-bottom:2px}.property-item .modalIcon .showClearButton{display:none}.property-item .modalIcon:hover .showClearButton{display:block}.property-item .modalIcon input{padding-right:30px}.property-item .modalIcon .moreIcon{position:absolute;top:6px;right:6px;cursor:pointer;font-size:16px;color:#758a96}.property-item .modalIcon .clearIcon{position:absolute;top:5px;right:30px;cursor:pointer;font-size:19px;color:#758a96}.property-item .form-control[readonly]{background-color:#fff}.property-item .form-control:disabled,.property-item .form-control[readonly]{color:#4b4c4c}"]
            }] }
];
/** @nocollapse */
PropertyItemComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector },
    { type: NotifyService },
    { type: ElementRef }
];
PropertyItemComponent.propDecorators = {
    elementConfig: [{ type: Input }],
    elementValue: [{ type: Input }],
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    triggerRefreshPanel: [{ type: Output }],
    propItem: [{ type: ViewChild, args: ['propItem', { read: ViewContainerRef },] }],
    stringTmpl: [{ type: ViewChild, args: ['stringTmpl',] }],
    numberTmpl: [{ type: ViewChild, args: ['numberTmpl',] }],
    selectTmpl: [{ type: ViewChild, args: ['selectTmpl',] }],
    boolOrExpTmpl: [{ type: ViewChild, args: ['boolOrExpTmpl',] }],
    multiSelectTmpl: [{ type: ViewChild, args: ['multiSelectTmpl',] }],
    dateTmpl: [{ type: ViewChild, args: ['dateTmpl',] }],
    datetimeTmpl: [{ type: ViewChild, args: ['datetimeTmpl',] }],
    modalTmpl: [{ type: ViewChild, args: ['modalTmpl',] }],
    editableSelectTmpl: [{ type: ViewChild, args: ['editableSelectTmpl',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyItemListComponent {
    constructor() {
        // 属性值
        this.dynamicControl = false;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.triggerRefreshPanel = new EventEmitter();
    }
    /**
     * @param {?} simpleChanges
     * @return {?}
     */
    ngOnChanges(simpleChanges) {
        // 若分类下有propertyData，则取分类下的propertyData；否则取整体的propertyData
        if (this.category.propertyData && this.category.enableCascade) {
            this.data = this.category.propertyData;
        }
        else {
            this.data = this.propertyData;
        }
        this.adaptProperties();
    }
    /**
     * 适配属性
     * @private
     * @return {?}
     */
    adaptProperties() {
        this.category.properties.forEach((/**
         * @param {?} propItem
         * @return {?}
         */
        propItem => {
            if (propItem.propertyType === 'cascade') {
                this.cascadeValueStringify(propItem, this.data[propItem.propertyID]);
                if (Object.keys(propItem).indexOf('visible') < 0) {
                    propItem.visible = true;
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    refresh() {
        // 若分类下有propertyData，则取分类下的propertyData；否则取整体的propertyData
        if (this.category.propertyData && this.category.enableCascade) {
            this.data = this.category.propertyData;
        }
        else {
            this.data = this.propertyData;
        }
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.refresh()));
        this.fitems.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.refresh()));
    }
    /**
     * 一般属性变更
     * @param {?} $event
     * @return {?}
     */
    _itemChanged($event) {
        const { changeObject } = $event;
        this.data[changeObject.propertyID] = changeObject.propertyValue;
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
            this.fitems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        changeObject.categoryId = this.category.categoryId;
        if (this.category.enableCascade) {
            changeObject.propertyPath = this.category.parentPropertyID;
        }
        this.valueChanged.emit(changeObject);
    }
    /**
     * 模态框数据变更（TODO:待优化，合并valueChange事件）
     * @param {?} $event
     * @return {?}
     */
    _submitModal($event) {
        const { changeObject, parameters } = $event;
        this.data[changeObject.propertyID] = changeObject.propertyValue;
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data, parameters);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
            this.fitems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        changeObject.categoryId = this.category.categoryId;
        if (this.category.enableCascade) {
            changeObject.propertyPath = this.category.parentPropertyID;
        }
        this.submitModal.emit($event);
    }
    /**
     * 级联属性变更
     * @param {?} $event
     * @param {?} propItem
     * @return {?}
     */
    _cascadeitemChanged($event, propItem) {
        /** @type {?} */
        const parentPropertyID = propItem.propertyID;
        if (!parentPropertyID) {
            return;
        }
        const { changeObject } = $event;
        if (!this.data[parentPropertyID]) {
            this.data[parentPropertyID] = {};
        }
        this.data[parentPropertyID][changeObject.propertyID] = changeObject.propertyValue;
        changeObject.categoryId = this.category.categoryId;
        changeObject.parentPropertyID = changeObject.propertyPath = parentPropertyID;
        // 分类启用了级联，并且分类下有级联属性
        if (this.category.enableCascade) {
            changeObject.propertyPath = this.category.parentPropertyID + '.' + changeObject.parentPropertyID;
        }
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
            this.fitems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        this.cascadeValueStringify(propItem, this.data[parentPropertyID]);
        this.valueChanged.emit(changeObject);
    }
    /**
     * 级联模态框属性变更
     * @param {?} $event
     * @param {?} propItem
     * @return {?}
     */
    __cascadeitemSubmitModal($event, propItem) {
        /** @type {?} */
        const parentPropertyID = propItem.propertyID;
        if (!parentPropertyID) {
            return;
        }
        const { changeObject, parameters } = $event;
        if (!this.data[parentPropertyID]) {
            this.data[parentPropertyID] = {};
        }
        this.data[parentPropertyID][changeObject.propertyID] = changeObject.propertyValue;
        changeObject.categoryId = this.category.categoryId;
        changeObject.parentPropertyID = changeObject.propertyPath = parentPropertyID;
        // 分类启用了级联，并且分类下有级联属性
        if (this.category.enableCascade) {
            changeObject.propertyPath = this.category.parentPropertyID + '.' + changeObject.parentPropertyID;
        }
        if (this.category.setPropertyRelates && typeof (this.category.setPropertyRelates) === 'function') {
            this.category.setPropertyRelates(changeObject, this.data, parameters);
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
            this.fitems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.refresh()));
        }
        this.cascadeValueStringify(propItem, this.data[parentPropertyID]);
        this.submitModal.emit($event);
    }
    /**
     * 级联属性的汇总信息
     * @param {?} propItem
     * @param {?} valueObject
     * @return {?}
     */
    cascadeValueStringify(propItem, valueObject) {
        if (!propItem || !propItem.cascadeConfig) {
            return;
        }
        if (!valueObject) {
            propItem.cascadeSummary = '';
            return;
        }
        if (!propItem.cascadeConverter || !propItem.cascadeConverter.convertTo) {
            propItem.cascadeSummary = JSON.stringify(valueObject);
        }
        else {
            propItem.cascadeSummary = propItem.cascadeConverter.convertTo(valueObject, propItem.cascadeConfig);
        }
    }
    /**
     *  已废弃
     * @param {?} propItem
     * @return {?}
     */
    _checkCascadeVisible(propItem) {
        if (Object.keys(propItem).indexOf('visible') < 0) {
            return true;
        }
        else {
            return propItem.visible;
        }
    }
    /**
     * @return {?}
     */
    refreshPanel() {
        this.triggerRefreshPanel.emit();
    }
    /**
     * @param {?} index
     * @param {?} PropItem
     * @return {?}
     */
    trackByPropId(index, PropItem) {
        return PropItem.propertyID;
    }
}
PropertyItemListComponent.decorators = [
    { type: Component, args: [{
                selector: 'webide-property-item-list',
                template: "<div *ngFor=\"let propItem of category.properties; trackBy:trackByPropId\">\r\n    <!-- \u975E\u52A8\u6001\u521B\u5EFA-->\r\n    <ng-container *ngIf=\"!dynamicControl\">\r\n        <div *ngIf=\"propItem.propertyType != 'cascade'\" class=\"px-2\">\r\n            <webide-property-item (valueChanged)=\"_itemChanged($event)\" (submitModal)=\"_submitModal($event)\"\r\n                [elementValue]=\"data[propItem.propertyID]\" [elementConfig]=\"propItem\"\r\n                (triggerRefreshPanel)=\"refreshPanel()\"></webide-property-item>\r\n        </div>\r\n\r\n        <div class=\"farris-panel\" *ngIf=\"propItem.propertyType == 'cascade' && propItem.visible\">\r\n            <div class=\"propertyCascadeItem farris-panel-item card\">\r\n                <div class=\"card-header\" (click)=\"propItem.isExpand=!propItem.isExpand\">\r\n                    <div class=\"panel-item-title\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <div class=\"f-section-formgroup-legend\">\r\n                                <div class=\"f-header px-0  col-form-label\" style=\"font-size: inherit;\">\r\n                                    <div class=\"f-title f-utils-fill\">{{propItem.propertyName}}</div>\r\n                                    <div class=\"f-toolbar\">\r\n                                        <button class=\"btn f-btn-collapse-expand f-btn-mx\"\r\n                                            [class.f-state-expand]=\"propItem.isExpand\"><span></span></button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"farris-input-wrap\" *ngIf=\"!propItem.hideCascadeTitle\">\r\n                                <input type=\"input\" class=\"form-control form-control-sm\" readonly\r\n                                    [value]=\"propItem.cascadeSummary\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card-body\" [style.display]=\"propItem.isExpand?'block':'none'\">\r\n                    <div *ngFor=\"let cascadeItem of propItem.cascadeConfig\" class=\"px-2\">\r\n                        <webide-property-item (valueChanged)=\"_cascadeitemChanged($event,propItem)\"\r\n                            (submitModal)=\"__cascadeitemSubmitModal($event, propItem)\"\r\n                            [elementValue]=\"data[propItem.propertyID]?data[propItem.propertyID][cascadeItem.propertyID]:''\"\r\n                            [elementConfig]=\"cascadeItem\" (triggerRefreshPanel)=\"refreshPanel()\">\r\n                        </webide-property-item>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </ng-container>\r\n\r\n\r\n    <!-- \u52A8\u6001\u521B\u5EFA-->\r\n    <ng-container *ngIf=\"dynamicControl\">\r\n        <div *ngIf=\"propItem.propertyType !== 'cascade'\" class=\"px-2\">\r\n            <dynamic-property-item *ngIf=\"dynamicControl\" (valueChanged)=\"_itemChanged($event)\"\r\n                (submitModal)=\"_submitModal($event)\" [elementValue]=\"data[propItem.propertyID]\"\r\n                [elementConfig]=\"propItem\" (triggerRefreshPanel)=\"refreshPanel()\"></dynamic-property-item>\r\n        </div>\r\n\r\n        <div class=\"farris-panel\" *ngIf=\"propItem.propertyType === 'cascade'\">\r\n            <div class=\"propertyCascadeItem farris-panel-item card\" [hidden]=\"!propItem.visible\">\r\n                <div class=\"card-header\" (click)=\"propItem.isExpand=!propItem.isExpand\">\r\n                    <div class=\"panel-item-title\">\r\n                        <div class=\"form-group farris-form-group\">\r\n                            <div class=\"f-section-formgroup-legend\">\r\n                                <div class=\"f-header px-0  col-form-label\" style=\"font-size: inherit;\">\r\n                                    <div class=\"f-title f-utils-fill\">{{propItem.propertyName}}</div>\r\n                                    <div class=\"f-toolbar\">\r\n                                        <button class=\"btn f-btn-collapse-expand f-btn-mx\"\r\n                                            [class.f-state-expand]=\"propItem.isExpand\"><span></span></button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"farris-input-wrap\" *ngIf=\"!propItem.hideCascadeTitle\">\r\n                                <input type=\"input\" class=\"form-control form-control-sm\" readonly\r\n                                    [value]=\"propItem.cascadeSummary\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card-body\" [hidden]=\"!propItem.isExpand\">\r\n                    <div *ngFor=\"let cascadeItem of propItem.cascadeConfig\" class=\"px-2\">\r\n\r\n                        <dynamic-property-item *ngIf=\"dynamicControl\"\r\n                            (valueChanged)=\"_cascadeitemChanged($event,propItem)\"\r\n                            (submitModal)=\"__cascadeitemSubmitModal($event, propItem)\"\r\n                            [elementValue]=\"data[propItem.propertyID]?data[propItem.propertyID][cascadeItem.propertyID]:''\"\r\n                            [elementConfig]=\"cascadeItem\" (triggerRefreshPanel)=\"refreshPanel()\">\r\n                        </dynamic-property-item>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".propertyCascadeItem{background-color:transparent!important;border:none!important}.propertyCascadeItem .card-header{background-color:transparent!important;padding:4px 12px!important;color:inherit!important}.propertyCascadeItem .card-header .panel-item-title{width:100%;position:relative;font-size:inherit!important}.propertyCascadeItem .card-header .panel-item-title .farris-input-wrap{margin-left:-5px;margin-right:-5px}.propertyCascadeItem .f-accordion-collapse,.propertyCascadeItem .f-accordion-expand{right:0;left:auto!important;top:6px;color:#6b94ec!important;position:absolute}.propertyCascadeItem .card-body{padding:3px 12px!important;background:rgba(255,255,255,.8);border-radius:8px;margin:4px 8px}"]
            }] }
];
/** @nocollapse */
PropertyItemListComponent.ctorParameters = () => [];
PropertyItemListComponent.propDecorators = {
    category: [{ type: Input }],
    propertyData: [{ type: Input }],
    dynamicControl: [{ type: Input }],
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    triggerRefreshPanel: [{ type: Output }],
    items: [{ type: ViewChildren, args: [PropertyItemComponent,] }],
    fitems: [{ type: ViewChildren, args: [FPropertyItemComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyPanelComponent {
    constructor() {
        /**
         * 是否白色主题
         */
        this.isWhiteTheme = false;
        /**
         * 是否持有面板的隐藏显示状态
         */
        this.isPersitOpenState = false;
        /**
         * isPersitOpenState=true时，控制面板是否隐藏显示
         */
        this.isShowPanel = false;
        /**
         * isPersitOpenState=true时，抛出面板的关闭事件
         */
        this.closePropertyPanel = new EventEmitter();
        /**
         * 属性值
         */
        this.propertyData = {};
        this.dynamicControl = false;
        /**
         * 属性变更事件
         */
        this.propertyChanged = new EventEmitter();
        /**
         * 模态框属性变更事件
         */
        this.submitModal = new EventEmitter();
        /**
         * 是否展示关闭按钮
         */
        this.showCloseBtn = true;
        /**
         * 当前展示状态
         */
        this.isOpen = true;
        /**
         * 外层分类，以标签页形式展示
         */
        this.categoryTabs = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.width) {
            this.eastDiv.nativeElement.style.width = this.width + 'px';
        }
        else {
            this.eastDiv.nativeElement.style.width = 'inherit';
        }
        if (this.height) {
            this.eastDiv.nativeElement.style.height = this.height + 'px';
        }
        else {
            this.eastDiv.nativeElement.style.height = '100%';
        }
        if (this.isPersitOpenState) {
            this.isOpen = this.isShowPanel;
        }
        this.checkShowTabCategory();
    }
    /**
     *  更改面板的隐藏显示状态，只有在isPersitOpenState=true时生效
     * @param {?} simpleChanges
     * @return {?}
     */
    ngOnChanges(simpleChanges) {
        if (simpleChanges.isShowPanel && this.isPersitOpenState) {
            this.isOpen = this.isShowPanel;
        }
        this.checkShowTabCategory();
    }
    /**
     * @return {?}
     */
    refreshPanel() {
        this.checkShowTabCategory();
        this.itemLists.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.refresh()));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    changeStatus(item) {
        if (this.propertyConfig.length < 2) {
            return;
        }
        if (!item.status || item.status === 'open') {
            item.status = 'closed';
        }
        else {
            item.status = 'open';
        }
    }
    /**
     *  隐藏面板
     * @return {?}
     */
    collapse() {
        // isPersitOpenState=true时,由外部确定状态
        if (!this.isPersitOpenState) {
            this.isOpen = false;
        }
        this.closePropertyPanel.emit();
    }
    /**
     * 抛出属性变更事件
     * @param {?} changeObject
     * @return {?}
     */
    _valueChanged(changeObject) {
        this.propertyChanged.emit(changeObject);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _submitModal($event) {
        this.submitModal.emit($event);
    }
    /**
     * 将属性分类按照标签页进行归类
     * @private
     * @return {?}
     */
    checkShowTabCategory() {
        this.categoryTabs = [];
        if (!this.propertyConfig || this.propertyConfig.length === 0) {
            this.categoryTabs = [{
                    tabId: 'default',
                    tabName: '属性',
                    categoryList: []
                }];
            this.selectedTab = null;
            return;
        }
        this.propertyConfig.forEach((/**
         * @param {?} config
         * @return {?}
         */
        config => {
            if (config.tabId) {
                /** @type {?} */
                const propTab = this.categoryTabs.find((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => t.tabId === config.tabId));
                if (!propTab) {
                    this.categoryTabs.push({
                        tabId: config.tabId,
                        tabName: config.tabName,
                        categoryList: [config],
                        hide: config.hide || config.properties.length === 0
                    });
                }
                else {
                    propTab.categoryList.push(config);
                    if (propTab.hide) {
                        propTab.hide = config.hide || config.properties.length === 0;
                    }
                }
            }
            else {
                /** @type {?} */
                const defaultTab = this.categoryTabs.find((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => t.tabId === 'default'));
                if (!defaultTab) {
                    this.categoryTabs.push({
                        tabId: 'default',
                        tabName: '属性',
                        categoryList: [config]
                    });
                }
                else {
                    defaultTab.categoryList.push(config);
                }
            }
        }));
        // 记录已选的页签
        if (this.selectedTab) {
            /** @type {?} */
            const selectedTab = this.categoryTabs.find((/**
             * @param {?} tab
             * @return {?}
             */
            tab => tab.tabId === this.selectedTab.tabId));
            if (selectedTab) {
                this.selectedTab = selectedTab;
            }
        }
        else {
            this.selectedTab = this.categoryTabs[0];
        }
    }
}
PropertyPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-property-panel',
                template: "<div #east [style.display]=\"isOpen?'block':'none'\" [class.white-theme]=\"isWhiteTheme\">\r\n    <div class=\"propertyPanel panel d-flex flex-column\">\r\n\r\n\r\n        <div class=\"title d-flex\">\r\n            <div class=\"title-label\" *ngFor=\"let tab of categoryTabs\" (click)=\"selectedTab=tab\" [hidden]=\"tab.hide\"\r\n                [class.active]=\"selectedTab && selectedTab.tabId===tab.tabId && categoryTabs.length>1\">\r\n                <span>{{tab.tabName}}</span>\r\n            </div>\r\n            <div class=\"title-actions\">\r\n                <div class=\"monaco-toolbar\">\r\n                    <div class=\"monaco-action-bar animated\">\r\n                        <ul class=\"actions-container\" role=\"toolbar\">\r\n                            <li class=\"action-item\" (click)=\"collapse()\" *ngIf=\"showCloseBtn\">\r\n                                <a class=\"hide-panel\" title=\"\u5173\u95ED\"></a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div #propertyPanel class=\"panel-body\" [style.height]=\"(height - 35) + 'px'\" *ngIf=\"selectedTab\">\r\n            <ul class=\"property-grid\">\r\n                <li *ngFor=\"let category of selectedTab.categoryList\">\r\n                    <ng-container *ngIf=\"!category.hide\">\r\n                        <span *ngIf=\"!category.hideTitle\" class=\"group-label\" (click)=\"changeStatus(category)\">\r\n                            <span *ngIf=\"isWhiteTheme\"\r\n                                class=\"f-icon f-icon-yxs_level mr-2\"></span>{{ category.categoryName }}</span>\r\n                        <div [hidden]=\"category.status === 'closed'\">\r\n                            <webide-property-item-list [category]=\"category\" [propertyData]=\"propertyData\"\r\n                                (valueChanged)=\"_valueChanged($event)\" (submitModal)=\"_submitModal($event)\"\r\n                                (triggerRefreshPanel)=\"refreshPanel()\" [dynamicControl]=\"dynamicControl\">\r\n                            </webide-property-item-list>\r\n                        </div>\r\n                    </ng-container>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                styles: [":host{width:inherit;height:inherit}.propertyPanel{width:100%;height:100%;color:rgba(0,0,0,.75);background:#f3f8ff!important;border-color:#d8dbe2!important}.propertyPanel .title{position:relative;background:#d0d8e9!important;padding-right:40px;flex-wrap:wrap;border:0}.propertyPanel .title>.title-label{line-height:34px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding-left:12px;padding-right:12px;color:#333;font-size:14px;font-weight:600;cursor:pointer}.propertyPanel .title>.title-label.active{background:#8fb1df!important}.propertyPanel .title .title-actions{padding-left:35px;height:35px;flex:1;box-sizing:border-box;position:absolute;right:10px;top:0}.propertyPanel .property-grid .group-label{line-height:30px;display:block;padding-left:12px;cursor:pointer;background:#e2e9f6!important;color:#34495e!important;font-weight:600!important}.propertyPanel .panel-body{overflow:auto;height:100%}.propertyPanel .property-grid{list-style:none;margin:0;padding:0}.propertyPanel .panel-body .property-grid .group-label+div{padding-bottom:14px!important;padding-top:.25rem!important}.propertyPanel .action-item{cursor:pointer;display:inline-block;transition:transform 50ms;position:relative;padding:0}.propertyPanel .action-item .hide-panel{height:35px;display:block;line-height:35px;min-width:28px;color:rgba(66,66,66,.75);background-color:transparent!important;outline:0!important;background:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M9.784 8L13 11.217 11.215 13 8.001 9.786 4.785 13 3 11.216l3.214-3.215L3 4.785 4.784 3 8 6.216 11.216 3 13 4.785 9.784 8.001z' fill='%23424242'/%3E%3C/svg%3E\") 50% 50% no-repeat}.white-theme .propertyPanel{border:1px solid #d8dce6!important;background:#fff!important}.white-theme .propertyPanel .title{justify-content:space-around;overflow:visible;background:#fff!important;flex-wrap:wrap;text-align:center}.white-theme .propertyPanel .title>.title-label{border-bottom:0;font-weight:400!important;background:#fff!important;flex:1}.white-theme .propertyPanel .title>.title-label.active{border-bottom:3px solid #705dcc}.white-theme .propertyPanel .property-grid .group-label{background:#fff!important;line-height:32px;font-weight:400!important;border-top:1px solid #d8dce6!important}"]
            }] }
];
/** @nocollapse */
PropertyPanelComponent.ctorParameters = () => [];
PropertyPanelComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    isWhiteTheme: [{ type: Input }],
    isPersitOpenState: [{ type: Input }],
    isShowPanel: [{ type: Input }],
    closePropertyPanel: [{ type: Output }],
    propertyConfig: [{ type: Input }],
    propertyData: [{ type: Input }],
    dynamicControl: [{ type: Input }],
    propertyChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    showCloseBtn: [{ type: Input }],
    eastDiv: [{ type: ViewChild, args: ['east',] }],
    itemLists: [{ type: ViewChildren, args: [PropertyItemListComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboService {
    constructor() {
        this.innerData = [];
        this.selected$ = new Subject();
        this.isOpen$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject('');
        // initData() {
        //     // this.loadDataTable(this.data || []);
        //     // switch (this.displayType) {
        //     //     case 'TreeList': {
        //     //         this.getData().subscribe(data => this.loadDataTree(data));
        //     //         break;
        //     //     }
        //     //     case 'LIST': {
        //     //         // List
        //     //         this.getData().subscribe(data => this.loadDataTable(data));
        //     //         break;
        //     //     }
        //     //     // case 'LOOKUPLIST': {
        //     //     //     // List
        //     //     //     this.getData().subscribe(data =>
        //     //     //         this.loadLookUpDataTable(data)
        //     //     //     );
        //     //     //     break;
        //     //     // }
        //     //     // case 'LOOKUPTREELIST': {
        //     //     //     // List
        //     //     //     this.getData().subscribe(data => this.loadLookUpDataTree(data));
        //     //     //     break;
        //     //     // }
        //     // }
        // }
        // getData(): Observable<any> {
        //     // if (this.uri) {
        //     //     const params = {};
        //     //     this.showLoading();
        //     //     if (this.comboHttp) {
        //     //         return this.comboHttp.getData(this.uri);
        //     //     } else {
        //     //         return this.http.get(this.uri);
        //     //     }
        //     // } else {
        //         if (this.data) {
        //             return of(this.data);
        //         } else {
        //             return of([]);
        //         }
        //     // }
        // }
        // loadDataTable(data: any) {
        //     if (data instanceof Array) {
        //         this.data = data;
        //     } else {
        //         this.data = data.returnValue;
        //     }
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         // tslint:disable-next-line:triple-equals
        //         return dataArr.find(d => d[this.idField] + '' == val);
        //     });
        //     // this.closeLoading();
        // }
        // loadDataTree(data: any) {
        //     if (data instanceof Array) {
        //         this.data = data;
        //     } else {
        //         this.data = data.returnValue;
        //     }
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         return eachData(dataArr, val, this.idField);
        //         function eachData(paramData, paramVal, idField) {
        //             let rtnData: any = '';
        //             paramData.find(d => {
        //                 // tslint:disable-next-line:triple-equals
        //                 if (d.data[idField] == paramVal) {
        //                     rtnData = d.data;
        //                     return true;
        //                 } else if (d.children && d.children.length) {
        //                     rtnData = eachData(d.children, paramVal, idField);
        //                 } else {
        //                     return false;
        //                 }
        //             });
        //             return rtnData;
        //         }
        //     });
        //     // this.closeLoading();
        // }
        // loadLookUpDataTable(resData: any) {
        //     if (resData.returnValue) {
        //         resData = resData.returnValue;
        //     }
        //     this.columns = resData.columns;
        //     this.pageInfo = resData.pageInfo;
        //     this.data = resData.items;
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         // tslint:disable-next-line: triple-equals
        //         return dataArr.find(d => d[this.idField] + '' == val);
        //     });
        //     this.closeLoading();
        // }
        // loadLookUpDataTree(resData: any) {
        //     if (resData.returnValue) {
        //         resData = resData.returnValue;
        //     }
        //     this.columns = resData.columns;
        //     const treeInfo = resData.treeInfo;
        //     // tslint:disable-next-line: no-string-literal
        //     if (!treeInfo['treeDataIsInit']) {
        //         if (treeInfo.layerType.toLowerCase() === 'pathcode') {
        //             this.data = this.lookupUtils.makeTree(resData.items, treeInfo);
        //         } else {
        //             this.data = this.lookupUtils.makeTreeWithParentID(
        //                 resData.items,
        //                 '',
        //                 `${treeInfo.dataField}.${treeInfo.parentField}`,
        //                 this.idField
        //             );
        //         }
        //     }
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         return eachData(dataArr, val, this.idField);
        //         function eachData(paramData, paramVal, idField) {
        //             let rtnData: any = '';
        //             paramData.find(d => {
        //                 // tslint:disable-next-line:triple-equals
        //                 if (d.data[idField] == paramVal) {
        //                     rtnData = d.data;
        //                     return true;
        //                 } else if (d.children && d.children.length) {
        //                     rtnData = eachData(d.children, paramVal, idField);
        //                 } else {
        //                     return false;
        //                 }
        //             });
        //             return rtnData;
        //         }
        //     });
        //     this.closeLoading();
        // }
        // private showLoading() {
        //     this.loading = this.loadingService.show();
        // }
        // closeLoading() {
        //     if (this.loading) {
        //         this.loading.close();
        //         this.loading = null;
        //     }
        // }
    }
    /**
     * @return {?}
     */
    get data() {
        return this.innerData;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this.innerData = val;
        this.data$.next(val);
    }
    // columns: any;
    // injectService() {
    //     if (this.injector && !this.comboHttp) {
    //         this.lookupUtils = this.injector.get(LookupUtils, null);
    //         if (this.displayType.indexOf('LOOKUP') > -1) {
    //             this.comboHttp = this.injector.get(ServerSideToken, null);
    //         } else {
    //             this.comboHttp = this.injector.get(ComboServerSideToken, null);
    //         }
    //     }
    // }
    /**
     * @param {?} value
     * @return {?}
     */
    toBoolean(value) {
        return value != null && `${value}` !== 'false';
    }
    /**
     * @param {?} data
     * @param {?=} index
     * @return {?}
     */
    selectItem(data, index) {
        this.isOpen$.next(false);
        this.selectedValue = data;
        this.selected$.next(this.selectedValue);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    unSelectItem(data) {
        this.selectedValue = null;
        this.selected$.next(null);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    isSelect(id) {
        return false;
    }
    // loadData(data: any, selectValues: string = '', callback) {
    //     if (data) {
    //         if (selectValues) {
    //             if (selectValues.split) {
    //                 // key 是字符串，可能是拼起来的
    //                 const selectedItems = selectValues.split(',').map(val => {
    //                     return callback(data, val);
    //                 });
    //
    //                 this.selections = selectedItems;
    //             } else {
    //                 // key不可split
    //                 this.selections = [selectValues];
    //             }
    //         } else {
    //             this.selections = [];
    //         }
    //         // this.selections$.next(this.selections);
    //         // const _data = this.initData(data);
    //         // this.updateState({...this._state, data: _data});
    //     } else {
    //         // this.updateState({ data: [], selections: [] });
    //     }
    // }
    // filterData(val: string, filed: any = 'text') {
    //     if (val) {
    //         const data = this.data
    //             ? this.data.filter(item => {
    //                 if (item[filed]) {
    //                     return String(item[filed]).indexOf(val) > -1;
    //                 } else if (item.data && item.data[filed]) {
    //                     return String(item.data[filed]).indexOf(val) > -1;
    //                 }
    //               })
    //             : [];
    //         this.data$.next(data);
    //     }
    // }
    /**
     * @return {?}
     */
    getSelected() {
        return this.selectedValue;
    }
    // filterSelections(displayText: string) {
    //     if (displayText && this.selections) {
    //         const selections = displayText
    //             .split(',')
    //             .map(val => {
    //                 return this.selections.find(d => d[this.textField] === val);
    //             })
    //             .filter(val => !!val);
    //         this.selectedValues = this.getValue(this.valueField, selections);
    //         this.selections = selections;
    //     }
    // }
    // clearSelections() {
    //     this.selections = [];
    // }
    /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    getValue(prop, selections) {
        // selections = selections ? selections : this.selections;
        // if (selections && selections.length) {
        //     // if (this.mapFields) {
        //     //     const helpFields = Object.keys(this.mapFields);
        //     //     helpFields.forEach( (f: any) => {
        //     //         if (this.mapFields[f] === prop) {
        //     //             prop = f;
        //     //             return;
        //     //         }
        //     //     });
        //     // }
        //
        //     // if (selections.length === 1) {
        //     //     return this.getValueByObj(prop, selections[0]);
        //     // }
        //
        //     const tmp = selections
        //         .map(item => {
        //             return this.getValueByObj(prop, item);
        //         })
        //         .join(',');
        //     return tmp;
        // }
        if (this.selectedValue) {
            return this.getValueByObj(prop, this.selectedValue);
        }
        return '';
    }
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getValueByObj(field, data) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        return resultVal;
    }
}
ComboService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextUniqueId = 0;
/**
 * 已废弃，统一使用\@farris/ui-combo-list
 */
class ComboListComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '请选择';
        this.panelWidth = 300;
        this.panelHeight = 300;
        this.autoWidth = true;
        this.enableClear = true;
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        // tslint:disable-next-line:variable-name
        this._cmbPanel = null;
        this.isOpen = false;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this.comboPanelCreated$ = new Subject();
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.displayText = '';
        this.onChange = (/**
         * @return {?}
         */
        () => null);
        this.onTouched = (/**
         * @return {?}
         */
        () => null);
        /** @type {?} */
        const container = this.creatContainer();
        /** @type {?} */
        const panel = this.creatPanel(container);
        this.comboPanelCreated$
            .pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} v
         * @return {?}
         */
        v => !!v)))
            .subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        (cmp) => {
            panel.appendChild(cmp.nativeElement);
            this.updatePosition();
        }));
        this.destroy$.subscribe((/**
         * @return {?}
         */
        () => {
            // this.render.removeChild('body', container);
            if (document.body.contains(container) && container.contains(panel)) {
                container.removeChild(panel);
            }
            nextUniqueId = 0;
        }));
        this.comboService.isOpen$
            .pipe(takeUntil(this.destroy$), skip(1))
            .subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val) {
                this.documentClickEvent = this.render.listen('document', 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    if (!this.el.nativeElement.contains(event.target) &&
                        (this._cmbPanel && !this.contains(this._cmbPanel, event))) {
                        this.isOpen = false;
                        this.removeDocumentListener();
                        this.cdr.markForCheck();
                    }
                }));
            }
            else {
                this.removeDocumentListener();
            }
            this.isOpen = !!val;
            this.cdr.markForCheck();
        }));
        this.comboService.selected$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.displayText = this.comboService.getValue(this.textField);
            this.value = this.comboService.getValue(this.idField);
            if (this.data && this.data.length > 0) {
                this.onChange(this.value);
                this.valueChange.emit(this.value);
            }
            else {
                this.updateMappingFieldValue();
                this.onChange(this.displayText);
                this.valueChange.emit(this.displayText);
            }
            this.cdr.detectChanges();
            // this.focus();
            // this.blur();
        }));
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set idField(val) {
        this.comboService.idField = val;
    }
    /**
     * @return {?}
     */
    get idField() {
        return this.comboService.idField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set valueField(val) {
        this.comboService.valueField = val;
    }
    /**
     * @return {?}
     */
    get valueField() {
        return this.comboService.valueField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set textField(val) {
        this.comboService.textField = val;
    }
    /**
     * @return {?}
     */
    get textField() {
        return this.comboService.textField;
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set cmbPanel(cmp) {
        this._cmbPanel = cmp;
        this.comboPanelCreated$.next(cmp);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.comboService.isOpen$.next(!this.isOpen);
    }
    /**
     * @private
     * @return {?}
     */
    removeDocumentListener() {
        if (this.documentClickEvent) {
            this.documentClickEvent();
            this.documentClickEvent = null;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onBlur(e) {
        this.onTouched();
    }
    /**
     * @return {?}
     */
    blur() {
        this.input.textbox.nativeElement.blur();
    }
    /**
     * @return {?}
     */
    focus() {
        this.input.textbox.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.value = '';
        this.comboService.selectedValue = null;
        this.comboService.isOpen$.next(false);
        this.comboService.selected$.next([]);
        // this.updateMappingFieldValue();
        // this.onChange('');
        // this.onTouched();
        this.clear.emit();
    }
    /**
     * @return {?}
     */
    updateMappingFieldValue() {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            const bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            let pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n !== ''));
            }
            this.mappingField = this.mappingField ? this.mappingField : '';
            bindingData.setValue(pathArr.concat(this.mappingField.split('.')), this.value, true, true);
        }
    }
    /**
     * @return {?}
     */
    updateSelectedValues() {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            const bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            let pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n !== ''));
            }
            this.mappingField = this.mappingField ? this.mappingField : '';
            this.value = bindingData.getValue(pathArr.concat(this.mappingField.split('.')));
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onValueChange(val) {
        this.value = val;
        this.onChange(val);
        this.valueChange.emit(val);
        // if (!this.multiSelect) {
        //     this.comboService.serachValue$.next(val);
        // }
        // this.comboService.filterSelections(val);
        // this.valueChange.emit(val);
        // if (!this.uri && this.data && this.data.length > 0) {
        //     this.onChange(this.selectedValues);
        // } else {
        //     this.onChange(this.displayText);
        // }
        // this.updateMappingFieldValue();
    }
    /**
     * @return {?}
     */
    updatePosition() {
        if (this.autoWidth) {
            const { width } = this.input.el.nativeElement.getBoundingClientRect();
            this.panelWidth = width ? width : this.panelWidth;
        }
        let { left, top } = this.el.nativeElement.getBoundingClientRect();
        if (top + this.panelHeight > window.innerHeight && top - this.panelHeight > 0) {
            top = top - this.panelHeight - 27;
        }
        return {
            left: left + 'px',
            top: top + 27 + 'px',
            width: this.panelWidth + 'px',
            height: this.panelHeight + 'px'
        };
    }
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    contains(el, event) {
        return el.nativeElement.contains(event.target);
    }
    /**
     * @return {?}
     */
    creatContainer() {
        /** @type {?} */
        let container = this.document.querySelector('.overlay-container');
        if (!container) {
            container = this.document.createElement('div');
            container.classList.add('overlay-container');
        }
        this.document.body.appendChild(container);
        return container;
    }
    /**
     * @param {?} host
     * @return {?}
     */
    creatPanel(host) {
        /** @type {?} */
        const pane = this.document.createElement('div');
        pane.id = `overlay-${nextUniqueId++}`;
        pane.classList.add('overlay-pane');
        host.appendChild(pane);
        return pane;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.displayText = value;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // tslint:disable-next-line: deprecation
        this.ngControl = this.injector.get(NgControl, null);
        if (!this.valueField && this.idField) {
            this.valueField = this.idField;
        }
        fromEvent(window, 'resize')
            .pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        ev => interval(100))), takeUntil(this.destroy$))
            .subscribe((/**
         * @return {?}
         */
        () => {
            const { width } = this.input.el.nativeElement.getBoundingClientRect();
            this.panelWidth = width;
            this.comboService.isOpen$.next(false);
        }));
        // this.comboService.injectService();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSelect(value) {
        const { data, index } = Object.assign({}, value);
        this.comboService.selectItem(data, index);
        this.selectChange.emit({ data, index });
        this.focus();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onUnSelected(value) {
        const { data } = Object.assign({}, value);
        this.comboService.unSelectItem(data);
        // console.log(data);
        this.focus();
    }
}
ComboListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'farris-editable-combo-list',
                template: "<input-group\r\n    #input\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"false\"\r\n    (clickHandle)=\"onClick()\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (valueChange)=\"onValueChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    style=\"display: block;\"\r\n>\r\n</input-group>\r\n<div class=\"comboPanel\" *ngIf=\"isOpen\" [ngStyle]=\"updatePosition()\" #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [data]=\"data\"\r\n        [idField]=\"idField\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n    >\r\n<!--        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">-->\r\n<!--            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>-->\r\n<!--        </ng-template>-->\r\n    </farris-datalist>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ComboListComponent)),
                        multi: true
                    },
                    ComboService
                ],
                styles: [".overlay-container{position:fixed;z-index:9999;pointer-events:none;top:0;left:0;height:100%;width:100%}.overlay-pane{position:absolute;pointer-events:auto}.overlay-pane .comboPanel{position:absolute;overflow:auto;background:#fff;z-index:9;margin-top:-1px;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.overlay-pane .comboPanel combo2-list{position:absolute;width:100%;height:100%}"]
            }] }
];
/** @nocollapse */
ComboListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
ComboListComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    placeholder: [{ type: Input }],
    panelWidth: [{ type: Input }],
    panelHeight: [{ type: Input }],
    autoWidth: [{ type: Input }],
    enableClear: [{ type: Input }],
    mappingField: [{ type: Input }],
    data: [{ type: Input }],
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    showPanel: [{ type: Output }],
    hidePanel: [{ type: Output }],
    clear: [{ type: Output }],
    valueChange: [{ type: Output }],
    selectChange: [{ type: Output }],
    cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
    input: [{ type: ViewChild, args: ['input',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboListModule$1 {
}
ComboListModule$1.decorators = [
    { type: NgModule, args: [{
                declarations: [ComboListComponent],
                imports: [CommonModule, FormsModule, InputGroupModule, DatalistModule],
                exports: [ComboListComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PropertyPanelModule {
    constructor() { }
}
PropertyPanelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PropertyPanelComponent,
                    PropertyItemListComponent,
                    PropertyItemComponent,
                    TextboxPropertyComponent,
                    NumberPropertyComponent,
                    CombolistPropertyComponent,
                    DatePropertyComponent,
                    ModalPropertyComponent,
                    UniformPropertyComponent,
                    FPropertyItemComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    PopoverModule,
                    ComboListModule$1,
                    NotifyModule.forRoot(),
                    ModalModule.forRoot(),
                    FarrisDatePickerModule,
                    ComboListModule,
                    NumberSpinnerModule,
                    PropertyEditorModule
                ],
                exports: [
                    PropertyPanelComponent,
                ],
                entryComponents: [
                    PropertyPanelComponent,
                    PropertyItemComponent,
                    TextboxPropertyComponent,
                    NumberPropertyComponent,
                    CombolistPropertyComponent,
                    DatePropertyComponent,
                    ModalPropertyComponent,
                    UniformPropertyComponent
                ]
            },] }
];
/** @nocollapse */
PropertyPanelModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PropertyPanelModule, PropertyType, ElementPropertyConfig, PropertyEntity, BeforeOpenModalResult, PropertyChangeObject, TextboxPropertyComponent, NumberPropertyComponent, ModalPropertyComponent, DatePropertyComponent, CombolistPropertyComponent, UniformPropertyComponent, PropertyPanelComponent, ComboListComponent as ɵe, ComboListModule$1 as ɵd, ComboService as ɵf, FPropertyItemComponent as ɵc, PropertyItemListComponent as ɵa, PropertyItemComponent as ɵb };

//# sourceMappingURL=farris-ide-property-panel.js.map