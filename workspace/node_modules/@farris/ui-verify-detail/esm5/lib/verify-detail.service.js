/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { VerifyDetailComponent } from './verify-detail.component';
import * as i0 from "@angular/core";
var VerifyDetailService = /** @class */ (function () {
    function VerifyDetailService(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    VerifyDetailService.prototype.createVerify = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.clear();
        //if (!this.verifyContainer) {
        /** @type {?} */
        var containerFac = this.cfr.resolveComponentFactory(VerifyDetailComponent);
        /** @type {?} */
        var cmpRef = containerFac.create(this.injector);
        this.appRef.attachView(cmpRef.hostView);
        /** @type {?} */
        var maxHeight;
        if (option.parent) {
            // option.parent.nativeElement.style.position = 'relative';
            maxHeight = option.parent.nativeElement.offsetHeight - 60;
            option.parent.nativeElement.appendChild(cmpRef.location.nativeElement);
        }
        else {
            maxHeight = document.documentElement.clientHeight - 60;
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
        }
        this.verifyContainer = cmpRef;
        this.verifyContainer.instance.maxHeight = maxHeight;
        this.verifyContainer.instance.showList = option.showList;
        this.verifyContainer.instance.showType = option.showType;
        this.verifyContainer.instance.tabList = option.verifyType;
        this.verifyContainer.instance.validatorList = option.verifyList;
        if (option.hasOwnProperty('verifyResultTipsTmpl') && option['verifyResultTipsTmpl']) {
            this.verifyContainer.instance.resultTipsTmpl = option.verifyResultTipsTmpl;
        }
        // this.verifyContainer.instance.listshowChange.subscribe((event)=>{
        //   console.log(event);
        // });
        // this.verifyContainer.instance.validatorClick.subscribe((event)=>{
        //   console.log(event);
        // });
        return this.verifyContainer.instance;
        //}
    };
    /**
     * @return {?}
     */
    VerifyDetailService.prototype.clear = /**
     * @return {?}
     */
    function () {
        if (this.verifyContainer) {
            /** @type {?} */
            var el = this.verifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.verifyContainer.destroy();
            this.verifyContainer = undefined;
        }
    };
    VerifyDetailService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    VerifyDetailService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef }
    ]; };
    /** @nocollapse */ VerifyDetailService.ngInjectableDef = i0.defineInjectable({ factory: function VerifyDetailService_Factory() { return new VerifyDetailService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: VerifyDetailService, providedIn: "root" });
    return VerifyDetailService;
}());
export { VerifyDetailService };
if (false) {
    /** @type {?} */
    VerifyDetailService.prototype.verifyContainer;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LWRldGFpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12ZXJpZnktZGV0YWlsLyIsInNvdXJjZXMiOlsibGliL3ZlcmlmeS1kZXRhaWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsY0FBYyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFHbEU7SUFNRSw2QkFDVSxHQUE2QixFQUM3QixRQUFrQixFQUNsQixNQUFzQjtRQUZ0QixRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUM3QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQWdCO0lBQzNCLENBQUM7Ozs7O0lBRU4sMENBQVk7Ozs7SUFBWixVQUFhLE1BQTBCO1FBQ25DLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7O1lBRUwsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMscUJBQXFCLENBQUM7O1lBQ3RFLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztZQUNwQyxTQUFnQjtRQUNwQixJQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUM7WUFDZiwyREFBMkQ7WUFDM0QsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7WUFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDeEU7YUFDRztZQUNGLFNBQVMsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7WUFDdkQsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzRTtRQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO1FBQzlCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDekQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDekQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDMUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDaEUsSUFBRyxNQUFNLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUUsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEVBQUM7WUFDL0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsY0FBYyxHQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQztTQUMxRTtRQUNELG9FQUFvRTtRQUNwRSx3QkFBd0I7UUFDeEIsTUFBTTtRQUNOLG9FQUFvRTtRQUNwRSx3QkFBd0I7UUFDeEIsTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFDekMsR0FBRztJQUNMLENBQUM7Ozs7SUFFTSxtQ0FBSzs7O0lBQVo7UUFDSSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7O2dCQUNsQixFQUFFLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsYUFBYTtZQUN0RCxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDakM7WUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQzs7Z0JBeERGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTjRELHdCQUF3QjtnQkFBbEMsUUFBUTtnQkFBeEIsY0FBYzs7OzhCQUFqRDtDQThEQyxBQTFERCxJQTBEQztTQXZEWSxtQkFBbUI7OztJQUU5Qiw4Q0FBcUQ7Ozs7O0lBRW5ELGtDQUFxQzs7Ozs7SUFDckMsdUNBQTBCOzs7OztJQUMxQixxQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDb21wb25lbnRSZWYsIEFwcGxpY2F0aW9uUmVmLCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZlcmlmeURldGFpbENvbXBvbmVudCB9IGZyb20gJy4vdmVyaWZ5LWRldGFpbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWZXJpZnlEZXRhaWxPcHRpb25zIH0gZnJvbSAnLi92ZXJpZnkub3B0aW9ucyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBWZXJpZnlEZXRhaWxTZXJ2aWNlIHtcclxuXHJcbiAgdmVyaWZ5Q29udGFpbmVyOiBDb21wb25lbnRSZWY8VmVyaWZ5RGV0YWlsQ29tcG9uZW50PjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgXHJcbiAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWZcclxuICAgICkge31cclxuXHJcbiAgY3JlYXRlVmVyaWZ5KG9wdGlvbjpWZXJpZnlEZXRhaWxPcHRpb25zKXtcclxuICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgLy9pZiAoIXRoaXMudmVyaWZ5Q29udGFpbmVyKSB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyRmFjID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoVmVyaWZ5RGV0YWlsQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBjbXBSZWYgPSBjb250YWluZXJGYWMuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuYXBwUmVmLmF0dGFjaFZpZXcoY21wUmVmLmhvc3RWaWV3KTtcclxuICAgICAgICBsZXQgbWF4SGVpZ2h0Om51bWJlcjtcclxuICAgICAgICBpZihvcHRpb24ucGFyZW50KXtcclxuICAgICAgICAgIC8vIG9wdGlvbi5wYXJlbnQubmF0aXZlRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgICAgICBtYXhIZWlnaHQgPSBvcHRpb24ucGFyZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gNjA7XHJcbiAgICAgICAgICBvcHRpb24ucGFyZW50Lm5hdGl2ZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY21wUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgbWF4SGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCAtIDYwO1xyXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKGNtcFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIgPSBjbXBSZWY7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnNob3dMaXN0ID0gb3B0aW9uLnNob3dMaXN0O1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnNob3dUeXBlID0gb3B0aW9uLnNob3dUeXBlO1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnRhYkxpc3QgPSBvcHRpb24udmVyaWZ5VHlwZTtcclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS52YWxpZGF0b3JMaXN0ID0gb3B0aW9uLnZlcmlmeUxpc3Q7XHJcbiAgICAgICAgaWYob3B0aW9uLmhhc093blByb3BlcnR5KCd2ZXJpZnlSZXN1bHRUaXBzVG1wbCcpJiZvcHRpb25bJ3ZlcmlmeVJlc3VsdFRpcHNUbXBsJ10pe1xyXG4gICAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UucmVzdWx0VGlwc1RtcGw9b3B0aW9uLnZlcmlmeVJlc3VsdFRpcHNUbXBsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS5saXN0c2hvd0NoYW5nZS5zdWJzY3JpYmUoKGV2ZW50KT0+e1xyXG4gICAgICAgIC8vICAgY29uc29sZS5sb2coZXZlbnQpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIC8vIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnZhbGlkYXRvckNsaWNrLnN1YnNjcmliZSgoZXZlbnQpPT57XHJcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhldmVudCk7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlO1xyXG4gICAgLy99XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xlYXIoKSB7XHJcbiAgICAgIGlmICh0aGlzLnZlcmlmeUNvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy52ZXJpZnlDb250YWluZXIubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyID0gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=