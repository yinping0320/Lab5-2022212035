/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { VerifyDetailComponent } from './verify-detail.component';
import * as i0 from "@angular/core";
export class VerifyDetailService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    createVerify(option) {
        this.clear();
        //if (!this.verifyContainer) {
        /** @type {?} */
        const containerFac = this.cfr.resolveComponentFactory(VerifyDetailComponent);
        /** @type {?} */
        const cmpRef = containerFac.create(this.injector);
        this.appRef.attachView(cmpRef.hostView);
        /** @type {?} */
        let maxHeight;
        if (option.parent) {
            // option.parent.nativeElement.style.position = 'relative';
            maxHeight = option.parent.nativeElement.offsetHeight - 60;
            option.parent.nativeElement.appendChild(cmpRef.location.nativeElement);
        }
        else {
            maxHeight = document.documentElement.clientHeight - 60;
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
        }
        this.verifyContainer = cmpRef;
        this.verifyContainer.instance.maxHeight = maxHeight;
        this.verifyContainer.instance.showList = option.showList;
        this.verifyContainer.instance.showType = option.showType;
        this.verifyContainer.instance.tabList = option.verifyType;
        this.verifyContainer.instance.validatorList = option.verifyList;
        if (option.hasOwnProperty('verifyResultTipsTmpl') && option['verifyResultTipsTmpl']) {
            this.verifyContainer.instance.resultTipsTmpl = option.verifyResultTipsTmpl;
        }
        // this.verifyContainer.instance.listshowChange.subscribe((event)=>{
        //   console.log(event);
        // });
        // this.verifyContainer.instance.validatorClick.subscribe((event)=>{
        //   console.log(event);
        // });
        return this.verifyContainer.instance;
        //}
    }
    /**
     * @return {?}
     */
    clear() {
        if (this.verifyContainer) {
            /** @type {?} */
            const el = this.verifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.verifyContainer.destroy();
            this.verifyContainer = undefined;
        }
    }
}
VerifyDetailService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
VerifyDetailService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
/** @nocollapse */ VerifyDetailService.ngInjectableDef = i0.defineInjectable({ factory: function VerifyDetailService_Factory() { return new VerifyDetailService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: VerifyDetailService, providedIn: "root" });
if (false) {
    /** @type {?} */
    VerifyDetailService.prototype.verifyContainer;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LWRldGFpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12ZXJpZnktZGV0YWlsLyIsInNvdXJjZXMiOlsibGliL3ZlcmlmeS1kZXRhaWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsY0FBYyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFNbEUsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7O0lBRzlCLFlBQ1UsR0FBNkIsRUFDN0IsUUFBa0IsRUFDbEIsTUFBc0I7UUFGdEIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUMzQixDQUFDOzs7OztJQUVOLFlBQVksQ0FBQyxNQUEwQjtRQUNuQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7OztjQUVMLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDOztjQUN0RSxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7WUFDcEMsU0FBZ0I7UUFDcEIsSUFBRyxNQUFNLENBQUMsTUFBTSxFQUFDO1lBQ2YsMkRBQTJEO1lBQzNELFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQzFELE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3hFO2FBQ0c7WUFDRixTQUFTLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQ3ZELFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDM0U7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztRQUM5QixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3BELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQzFELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ2hFLElBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxFQUFDO1lBQy9FLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUM7U0FDMUU7UUFDRCxvRUFBb0U7UUFDcEUsd0JBQXdCO1FBQ3hCLE1BQU07UUFDTixvRUFBb0U7UUFDcEUsd0JBQXdCO1FBQ3hCLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDO1FBQ3pDLEdBQUc7SUFDTCxDQUFDOzs7O0lBRU0sS0FBSztRQUNSLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTs7a0JBQ2xCLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhO1lBQ3RELElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRTtnQkFDZixFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNqQztZQUNELElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7U0FDbEM7SUFDTCxDQUFDOzs7WUF4REYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBTjRELHdCQUF3QjtZQUFsQyxRQUFRO1lBQXhCLGNBQWM7Ozs7O0lBUy9DLDhDQUFxRDs7Ozs7SUFFbkQsa0NBQXFDOzs7OztJQUNyQyx1Q0FBMEI7Ozs7O0lBQzFCLHFDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudFJlZiwgQXBwbGljYXRpb25SZWYsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmVyaWZ5RGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi92ZXJpZnktZGV0YWlsLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZlcmlmeURldGFpbE9wdGlvbnMgfSBmcm9tICcuL3ZlcmlmeS5vcHRpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFZlcmlmeURldGFpbFNlcnZpY2Uge1xyXG5cclxuICB2ZXJpZnlDb250YWluZXI6IENvbXBvbmVudFJlZjxWZXJpZnlEZXRhaWxDb21wb25lbnQ+O1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBcclxuICAgIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZlxyXG4gICAgKSB7fVxyXG5cclxuICBjcmVhdGVWZXJpZnkob3B0aW9uOlZlcmlmeURldGFpbE9wdGlvbnMpe1xyXG4gICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAvL2lmICghdGhpcy52ZXJpZnlDb250YWluZXIpIHtcclxuICAgICAgICBjb25zdCBjb250YWluZXJGYWMgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShWZXJpZnlEZXRhaWxDb21wb25lbnQpO1xyXG4gICAgICAgIGNvbnN0IGNtcFJlZiA9IGNvbnRhaW5lckZhYy5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyhjbXBSZWYuaG9zdFZpZXcpO1xyXG4gICAgICAgIGxldCBtYXhIZWlnaHQ6bnVtYmVyO1xyXG4gICAgICAgIGlmKG9wdGlvbi5wYXJlbnQpe1xyXG4gICAgICAgICAgLy8gb3B0aW9uLnBhcmVudC5uYXRpdmVFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgICAgIG1heEhlaWdodCA9IG9wdGlvbi5wYXJlbnQubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgLSA2MDtcclxuICAgICAgICAgIG9wdGlvbi5wYXJlbnQubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChjbXBSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICBtYXhIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gNjA7XHJcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kQ2hpbGQoY21wUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lciA9IGNtcFJlZjtcclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2Uuc2hvd0xpc3QgPSBvcHRpb24uc2hvd0xpc3Q7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2Uuc2hvd1R5cGUgPSBvcHRpb24uc2hvd1R5cGU7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UudGFiTGlzdCA9IG9wdGlvbi52ZXJpZnlUeXBlO1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnZhbGlkYXRvckxpc3QgPSBvcHRpb24udmVyaWZ5TGlzdDtcclxuICAgICAgICBpZihvcHRpb24uaGFzT3duUHJvcGVydHkoJ3ZlcmlmeVJlc3VsdFRpcHNUbXBsJykmJm9wdGlvblsndmVyaWZ5UmVzdWx0VGlwc1RtcGwnXSl7XHJcbiAgICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS5yZXN1bHRUaXBzVG1wbD1vcHRpb24udmVyaWZ5UmVzdWx0VGlwc1RtcGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLmxpc3RzaG93Q2hhbmdlLnN1YnNjcmliZSgoZXZlbnQpPT57XHJcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhldmVudCk7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgLy8gdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UudmFsaWRhdG9yQ2xpY2suc3Vic2NyaWJlKChldmVudCk9PntcclxuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGV2ZW50KTtcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2U7XHJcbiAgICAvL31cclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhcigpIHtcclxuICAgICAgaWYgKHRoaXMudmVyaWZ5Q29udGFpbmVyKSB7XHJcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLnZlcmlmeUNvbnRhaW5lci5sb2NhdGlvbi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIGlmIChlbC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==