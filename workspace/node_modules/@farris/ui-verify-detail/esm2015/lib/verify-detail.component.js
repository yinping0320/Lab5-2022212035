/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, TemplateRef, Optional } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { DomSanitizer } from '@angular/platform-browser';
export class VerifyDetailComponent {
    /**
     * @param {?} localeService
     * @param {?} sanitizer
     */
    constructor(localeService, sanitizer) {
        this.localeService = localeService;
        this.sanitizer = sanitizer;
        // 追加结果提示模板
        this.resultTipsTmpl = null;
        //@Input() maxHeight:number;
        //@Input() validatorList;
        //表单验证分组信息
        //@Input() tabList:tabListItem[];
        //表单验证默认显示的分组信息
        this.showType = '';
        //是否默认显示验证信息列表
        this.showList = false;
        //验证信息点击
        this.validatorClick = new EventEmitter();
        //验证详情显示隐藏事件
        this.listshowChange = new EventEmitter();
        //showList = false;
        //处理后带分组的表单验证信息
        this.errorLists = [];
        //默认传入的表单验证信息数组
        this._validatorList = [];
        //列表部分最大高度
        this._maxHeight = 60;
    }
    //最大高度
    /**
     * @param {?} num
     * @return {?}
     */
    set maxHeight(num) {
        if (num < 50)
            return;
        this._maxHeight = num - 50;
    }
    /**
     * @return {?}
     */
    get maxHeight() {
        return this._maxHeight;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    set tabList(item) {
        if (item) {
            this._tablist = item;
        }
        else {
            /** @type {?} */
            const allTitle = this.localeService.getValue('verifyDetail.vertifyTypeAll');
            /** @type {?} */
            const errorTitle = this.localeService.getValue('verifyDetail.vertifyTypeError');
            /** @type {?} */
            const emptyTitle = this.localeService.getValue('verifyDetail.vertifyTypeEmpty');
            this._tablist = [
                {
                    id: 'vertifyType1',
                    type: 'all',
                    title: allTitle
                },
                {
                    id: 'vertifyType2',
                    type: 'error',
                    title: errorTitle
                },
                {
                    id: 'vertifyType3',
                    type: 'empty',
                    title: emptyTitle
                }
            ];
        }
    }
    /**
     * @return {?}
     */
    get tabList() {
        return this._tablist;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    set validatorList(obj) {
        this._validatorList = obj;
        this.errorLists = [];
        if (this.tabList && this.tabList.length) {
            this.tabList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.active = false;
            }));
            //判断默认展示的类型
            /** @type {?} */
            let hasTab = this.tabList.find((/**
             * @param {?} tab
             * @return {?}
             */
            (tab) => {
                return tab.type === this.showType;
            }));
            if (this.showType === '' || !hasTab) {
                this.showType = this.tabList[0].type;
            }
            this.tabList.forEach((/**
             * @param {?} tab
             * @return {?}
             */
            tab => {
                /** @type {?} */
                const tabType = tab.type;
                if (tabType === 'all') {
                    // 所有类型
                    /** @type {?} */
                    let listObj = {
                        'list': obj,
                        'show': false,
                        'type': tabType
                    };
                    tab.length = listObj.list.length;
                    this.errorLists.push(listObj);
                }
                else {
                    /** @type {?} */
                    let hasType = this.errorLists.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => {
                        return item.type === tabType;
                    }));
                    if (hasType) {
                        // 能找到类型
                        /** @type {?} */
                        let valList = obj.filter((/**
                         * @param {?} error
                         * @return {?}
                         */
                        error => {
                            return error.type === tabType;
                        }));
                        if (valList && valList.length) {
                            hasType.list = valList;
                        }
                    }
                    else {
                        // 找不到类型
                        /** @type {?} */
                        let listObj = {
                            'list': [],
                            'show': false,
                            'type': tabType
                        };
                        /** @type {?} */
                        let valList = obj.filter((/**
                         * @param {?} error
                         * @return {?}
                         */
                        error => {
                            return error.type === tabType;
                        }));
                        if (valList && valList.length) {
                            listObj.list = valList;
                        }
                        tab.length = listObj.list.length;
                        this.errorLists.push(listObj);
                    }
                }
            }));
            /** @type {?} */
            let tabObj = this.tabList.find((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return item.type === this.showType;
            }));
            if (tabObj) {
                tabObj.active = true;
            }
        }
        /** @type {?} */
        let showObj = this.errorLists.find((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item.type === this.showType;
        }));
        if (showObj) {
            showObj.show = true;
        }
    }
    ;
    /**
     * @return {?}
     */
    get validatorList() {
        return this._validatorList;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    //显示详情
    /**
     * @return {?}
     */
    show() {
        this.showList = !this.showList;
        this.listshowChange.emit(this.showList);
    }
    /**
     * 点击分组切换
     * @param {?} tab
     * @return {?}
     */
    showListContent(tab) {
        if (tab.length <= 0) {
            return;
        }
        this.tabList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.active = false;
        }));
        tab.active = true;
        this.errorLists.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (item.type === tab.type) {
                item.show = true;
            }
            else {
                item.show = false;
            }
        }));
    }
    /**
     * 点击关闭按钮
     * @return {?}
     */
    close() {
        this.showList = false;
        this.listshowChange.emit(false);
    }
    /**
     * 点击表单验证列表事件
     * @param {?} item
     * @return {?}
     */
    errorClick(item) {
        this.validatorClick.emit(item);
    }
    /**
     * 样式安全化
     * @param {?} typeInfo
     * @return {?}
     */
    getStyle(typeInfo) {
        if (this.sanitizer) {
            if (typeInfo.hasOwnProperty('iconStyle') && typeInfo['iconStyle']) {
                return this.sanitizer.bypassSecurityTrustStyle(typeInfo['iconStyle']);
            }
        }
        return null;
    }
    /**
     * 判断是否有新属性
     * @param {?} typeInfo
     * @return {?}
     */
    hasSelfDefind(typeInfo) {
        if (typeInfo) {
            if (typeInfo.hasOwnProperty('iconCls') && typeInfo['iconCls']) {
                return true;
            }
            if (typeInfo.hasOwnProperty('iconStyle') && typeInfo['iconStyle']) {
                return true;
            }
        }
        return false;
    }
}
VerifyDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-verify-detail',
                template: "<div class=\"f-verify-detail\" *ngIf=\"validatorList.length > 0\">\r\n    <div class=\"f-verify-detail-content\">\r\n        <div class=\"f-verify-nums\" (click)=\"show()\">\r\n            <ng-container *ngIf=\"resultTipsTmpl\">\r\n                <ng-container [ngTemplateOutlet]=\"resultTipsTmpl\" [ngTemplateOutletContext]=\"{ $implicit: errorLists}\">\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!resultTipsTmpl\">\r\n                <span class=\"nums-icon f-icon f-icon-warning\"></span>\r\n                <span class=\"nums-count\">{{validatorList.length}}</span>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"f-verify-form-main\" [hidden]=\"!showList\">\r\n            <div class=\"f-verify-form-content\">\r\n                <div class=\"f-verify-form-content-arrow\"></div>\r\n                <div class=\"f-verify-form-content-list\">\r\n                    <div class=\"f-verify-forms-title\">\r\n                        <div class=\"title-tabs\">\r\n                            <div class=\"btn-group\">\r\n                                <button class=\"btn btn-secondary\" *ngFor=\"let tab of tabList\"\r\n                                    [ngClass]=\"{'active': tab.active,'disabled': (tab.length<=0)}\"\r\n                                    (click)=\"showListContent(tab)\">{{tab.title}} <span>{{tab.length}}</span></button>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"f-verify-close\" (click)=\"close()\">\r\n                            <span class=\"f-icon f-icon-close\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"f-verify-forms-list\" [ngStyle]=\"{'max-height': maxHeight+'px'}\">\r\n                        <ng-container *ngFor=\"let list of errorLists;let typeIndex = index;\">\r\n                            <ul class=\"f-verify-list-content\" *ngIf=\"list.list.length > 0\"\r\n                                [ngClass]=\"{'active': list.show}\">\r\n                                <li class=\"f-verify-list\" *ngFor=\"let item of list.list\" (click)=\"errorClick(item)\">\r\n                                    <ng-container *ngIf=\"hasSelfDefind(tabList[typeIndex])\">\r\n                                        <span class=\"f-icon f-icon-close-outline list-icon list-error\" [ngClass]=\"tabList[typeIndex]['iconCls']\" [attr.style]=\"getStyle(tabList[typeIndex])\"></span>\r\n                                    </ng-container>\r\n                                    <span *ngIf=\"!hasSelfDefind(tabList[typeIndex])\" class=\"f-icon f-icon-close-outline list-icon list-error\"\r\n                                    [ngClass]=\"{'list-warning': item.type === 'warn'}\"></span>\r\n                                    <div class=\"list-con\" >\r\n                                        <p class=\"list-title\" [attr.title]=\"item.title\">{{item.title}}</p>\r\n                                        <p class=\"list-msg\" [attr.title]=\"item.msg\">{{item.msg}}</p>\r\n                                    </div>\r\n                                </li>\r\n                            </ul>\r\n                        </ng-container>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [".f-verify-detail{position:absolute;left:14px;bottom:16px;z-index:900}.f-verify-detail .f-verify-detail-content{position:relative}.f-verify-detail .f-verify-detail-content .f-verify-form-main{position:absolute;padding-bottom:.5rem;left:0;bottom:1.75rem;width:28.125rem}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content{background-color:#fff;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:.125rem;width:100%}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-arrow{display:block;position:absolute;left:1.125rem;bottom:.25rem;width:.625rem;height:.625rem;background:0 0;border-style:solid;border-width:.3125rem;box-shadow:2px 2px 5px rgba(0,0,0,.08);-webkit-transform:translateX(-50%) rotate(45deg);transform:translateX(-50%) rotate(45deg);border-color:transparent #fff #fff transparent}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list{position:relative}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-title{padding:.75rem .875rem}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-close{position:absolute;right:.75rem;top:.625rem;color:rgba(0,0,0,.25);font-size:.75rem;cursor:pointer;width:1.25rem;height:1.25rem;line-height:1.25rem;text-align:center}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list{overflow-y:auto}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list-content{display:none}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list-content.active{display:block}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list{cursor:pointer;position:relative;border-top:1px solid #e9e9e9;padding:.5rem .875rem .5rem 2.5rem}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list .list-icon{position:absolute;left:.875rem;top:.75rem;font-size:.875rem;color:#f5222d}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list .list-icon.list-warning{color:#faad14}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list .list-con p{margin-bottom:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list .list-con .list-title{font-size:.875rem;color:rgba(0,0,0,.75);line-height:1.375rem}.f-verify-detail .f-verify-detail-content .f-verify-form-main .f-verify-form-content .f-verify-form-content-list .f-verify-forms-list .f-verify-list .list-con .list-msg{font-size:.75rem;color:rgba(0,0,0,.45);line-height:1.25rem}.f-verify-detail .f-verify-nums{padding:.125rem .5rem;background:#fde5e5;box-shadow:0 1px 6px 0 rgba(0,0,0,.15);border-radius:2px;cursor:pointer}.f-verify-detail .f-verify-nums .nums-icon{margin-right:.25rem;vertical-align:middle}.f-verify-detail .f-verify-nums .nums-count{font-size:.875rem;line-height:1.25rem}"]
            }] }
];
/** @nocollapse */
VerifyDetailComponent.ctorParameters = () => [
    { type: LocaleService },
    { type: DomSanitizer, decorators: [{ type: Optional }] }
];
VerifyDetailComponent.propDecorators = {
    resultTipsTmpl: [{ type: Input }],
    showType: [{ type: Input }],
    showList: [{ type: Input }],
    validatorClick: [{ type: Output, args: ['validatorClick',] }],
    listshowChange: [{ type: Output, args: ['listshowChange',] }],
    maxHeight: [{ type: Input }],
    tabList: [{ type: Input }],
    validatorList: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VerifyDetailComponent.prototype.resultTipsTmpl;
    /** @type {?} */
    VerifyDetailComponent.prototype.showType;
    /** @type {?} */
    VerifyDetailComponent.prototype.showList;
    /** @type {?} */
    VerifyDetailComponent.prototype.validatorClick;
    /** @type {?} */
    VerifyDetailComponent.prototype.listshowChange;
    /** @type {?} */
    VerifyDetailComponent.prototype.errorLists;
    /** @type {?} */
    VerifyDetailComponent.prototype._validatorList;
    /** @type {?} */
    VerifyDetailComponent.prototype._maxHeight;
    /** @type {?} */
    VerifyDetailComponent.prototype._tablist;
    /** @type {?} */
    VerifyDetailComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailComponent.prototype.sanitizer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,