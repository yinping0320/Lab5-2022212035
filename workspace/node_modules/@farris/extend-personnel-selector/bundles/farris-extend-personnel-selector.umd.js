(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/devkit'), require('@angular/core'), require('@farris/ui-personnel-selector'), require('@farris/ui-messager')) :
    typeof define === 'function' && define.amd ? define('@farris/extend-personnel-selector', ['exports', '@farris/devkit', '@angular/core', '@farris/ui-personnel-selector', '@farris/ui-messager'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['extend-personnel-selector'] = {}),global.devkit,global.ng.core,global.uiPersonnelSelector,global.uiMessager));
}(this, (function (exports,devkit,core,uiPersonnelSelector,uiMessager) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PersonnelSelectorDataMappingDirective = /** @class */ (function () {
        function PersonnelSelectorDataMappingDirective(vm, targetComponent, injector) {
            this.vm = vm;
            this.targetComponent = targetComponent;
            this.injector = injector;
        }
        /**
         * @return {?}
         */
        PersonnelSelectorDataMappingDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.targetComponent.selectionsChange.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    if (data.data && data.data.length) {
                        _this.mappingData(data.data, mapfields);
                    }
                    else {
                        _this.mappingData(null, mapfields);
                    }
                }));
                this.targetComponent.inputClear.subscribe(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    _this.mappingData(null, mapfields);
                }));
                this.targetComponent.tagRemoved.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    _this.tagRemovedMappingData(data.deleteIndex, mapfields);
                    // if (this.targetComponent.selections && this.targetComponent.selections.length) {
                    //     this.mappingData(this.targetComponent.selections, mapfields);
                    // } else {
                    //     this.mappingData(null, mapfields);
                    // }
                }));
                if (!this.targetComponent.mapFields) {
                    this.targetComponent.mapFields = this.mapFields;
                }
            };
        /**
         * @return {?}
         */
        PersonnelSelectorDataMappingDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        PersonnelSelectorDataMappingDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} index
         * @param {?} mapFields
         * @return {?}
         */
        PersonnelSelectorDataMappingDirective.prototype.tagRemovedMappingData = /**
         * @param {?} index
         * @param {?} mapFields
         * @return {?}
         */
            function (index, mapFields) {
                var _this = this;
                if (!mapFields) {
                    return;
                }
                if (this.targetComponent.ngControl &&
                    this.targetComponent.ngControl.formDirective &&
                    this.targetComponent.ngControl.formDirective.form &&
                    this.targetComponent.ngControl.formDirective.form.bindingData) {
                    /** @type {?} */
                    var bindingData_1 = this.targetComponent.ngControl.formDirective.form.bindingData;
                    if (bindingData_1.setValue) {
                        // 关闭变更检测
                        /** @type {?} */
                        var appContext = this.vm.frameContext.appContext;
                        appContext.changeDetectionController.detach();
                        /** @type {?} */
                        var helpFields = Object.keys(mapFields);
                        /** @type {?} */
                        var idIndex = helpFields.findIndex(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return item === _this.targetComponent.idField; }));
                        if (helpFields.includes(this.targetComponent.idField) && idIndex !== 0) {
                            helpFields.splice(idIndex, 1);
                            helpFields = __spread([this.targetComponent.idField], helpFields);
                        }
                        /** @type {?} */
                        var pathArr_1 = this.getBindingPathArray();
                        /** @type {?} */
                        var anyFieldArr = this.mapFields[helpFields[0]].split(',');
                        /** @type {?} */
                        var formAnyData = bindingData_1.getValue(pathArr_1.concat(anyFieldArr[0]));
                        if (!formAnyData || formAnyData.split(',').length < 2) {
                            helpFields.reverse();
                        }
                        helpFields.forEach(( /**
                         * @param {?} field
                         * @return {?}
                         */function (field) {
                            /** @type {?} */
                            var fieldArr = _this.mapFields[field].split(',');
                            fieldArr.forEach(( /**
                             * @param {?} fa
                             * @return {?}
                             */function (fa) {
                                /** @type {?} */
                                var path = pathArr_1.concat(fa.split('.'));
                                if (_this.targetComponent.ngControl.path.join() === path.join()) {
                                    return;
                                }
                                /** @type {?} */
                                var resStr = bindingData_1.getValue(path);
                                if (!resStr) {
                                    bindingData_1.clearValue(path, true, true);
                                }
                                else {
                                    /** @type {?} */
                                    var resArr = resStr.split(',');
                                    resArr.splice(index, 1);
                                    /** @type {?} */
                                    var result = resArr.join();
                                    if (!result) {
                                        bindingData_1.clearValue(path, true, true);
                                    }
                                    else {
                                        bindingData_1.setValue(path, result, true, true);
                                    }
                                }
                            }));
                        }));
                        // 重新打开变更检测
                        appContext.changeDetectionController.reattach();
                    }
                }
            };
        /**
         *
         * @param helpData 清空时，值为null
         * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         */
        /**
         *
         * @param {?} helpData 清空时，值为null
         * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         * @return {?}
         */
        PersonnelSelectorDataMappingDirective.prototype.mappingData = /**
         *
         * @param {?} helpData 清空时，值为null
         * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         * @return {?}
         */
            function (helpData, mapFields) {
                var _this = this;
                if (!mapFields) {
                    return;
                }
                // 关闭变更检测
                /** @type {?} */
                var appContext = this.vm.frameContext.appContext;
                appContext.changeDetectionController.detach();
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                /** @type {?} */
                var idIndex = helpFields.findIndex(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item === _this.targetComponent.idField; }));
                if (helpFields.includes(this.targetComponent.idField) && idIndex !== 0) {
                    helpFields.splice(idIndex, 1);
                    helpFields = __spread([this.targetComponent.idField], helpFields);
                }
                if (!helpData) {
                    helpFields.reverse();
                }
                helpFields.forEach(( /**
                 * @param {?} f
                 * @return {?}
                 */function (f) {
                    // 1、获取字段值
                    // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
                    // 如果helpData没有值（清空场景），则返回一个空字符串
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map(( /**
                             * @param {?} h
                             * @return {?}
                             */function (h) {
                                return _this.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = _this.getValue(f, helpData);
                        }
                    }
                    // 2、设置字段值
                    // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
                    // 如果helpData存在：直接设置上一步中获取的值。
                    /** @type {?} */
                    var pathArr = _this.getBindingPathArray();
                    mapFields[f].split(',').forEach(( /**
                     * @param {?} ff
                     * @return {?}
                     */function (ff) {
                        if (_this.targetComponent.ngControl.path.join() === ff) {
                            return;
                        }
                        if (!helpData) {
                            _this.vm.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                        }
                        else {
                            _this.vm.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                        }
                    }));
                }));
                // 重新打开变更检测
                appContext.changeDetectionController.reattach();
            };
        /**
         * @private
         * @param {?} f
         * @param {?} data
         * @return {?}
         */
        PersonnelSelectorDataMappingDirective.prototype.getValue = /**
         * @private
         * @param {?} f
         * @param {?} data
         * @return {?}
         */
            function (f, data) {
                /** @type {?} */
                var val = '';
                if (f.indexOf('.') === -1) {
                    val = data[f];
                }
                else {
                    val = f.split('.').reduce(( /**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */function (a, b) {
                        return a[b];
                    }), data);
                }
                return val;
            };
        /**
         * @private
         * @return {?}
         */
        PersonnelSelectorDataMappingDirective.prototype.getBindingPathArray = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = this.vm.bindingPath;
                if (path) {
                    return path.split('/').filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n !== ''; }));
                }
                return [];
            };
        PersonnelSelectorDataMappingDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[personnel-selector-data-mapping]'
                    },] }
        ];
        /** @nocollapse */
        PersonnelSelectorDataMappingDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: uiPersonnelSelector.PersonnelSelectorComponent, decorators: [{ type: core.Optional }, { type: core.Self }] },
                { type: core.Injector }
            ];
        };
        PersonnelSelectorDataMappingDirective.propDecorators = {
            mapFields: [{ type: core.Input }]
        };
        return PersonnelSelectorDataMappingDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendPersonnelSelectorModule = /** @class */ (function () {
        function ExtendPersonnelSelectorModule() {
        }
        ExtendPersonnelSelectorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [PersonnelSelectorDataMappingDirective],
                        imports: [
                            uiPersonnelSelector.PersonnelSelectorModule,
                            uiMessager.MessagerModule
                        ],
                        exports: [PersonnelSelectorDataMappingDirective]
                    },] }
        ];
        return ExtendPersonnelSelectorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.PersonnelSelectorDataMappingDirective = PersonnelSelectorDataMappingDirective;
    exports.ExtendPersonnelSelectorModule = ExtendPersonnelSelectorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-extend-personnel-selector.umd.js.map