/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InputGroupModule } from '@farris/ui-input-group';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MessagerModule } from '@farris/ui-messager';
import { LocaleModule } from '@farris/ui-locale';
import { NgModule } from '@angular/core';
import { EnumEditorInputComponent } from './enum-editor-input.component';
import { EnumEditorComponent } from './enum-editor.component';
import { EnumEditorService } from './enum-editor.service';
import { FarrisCommonModule } from '@farris/ui-common';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { LookupModule } from '@farris/ui-lookup';
import { EnumEditorFooterComponent } from './enum-editor-footer.component';
export class EnumEditorModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: EnumEditorModule,
            providers: [
                EnumEditorService
            ]
        };
    }
}
EnumEditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    EnumEditorComponent,
                    EnumEditorInputComponent,
                    EnumEditorFooterComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    InputGroupModule,
                    FarrisCommonModule,
                    MessagerModule.forRoot(),
                    PerfectScrollbarModule,
                    LookupModule,
                    LocaleModule
                ],
                entryComponents: [
                    EnumEditorComponent
                ],
                exports: [EnumEditorComponent, EnumEditorInputComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS1lZGl0b3IubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1lbnVtLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9lbnVtLWVkaXRvci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXJELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUF1QjNFLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFDekIsTUFBTSxDQUFDLE9BQU87UUFDVixPQUFPO1lBQ0gsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixTQUFTLEVBQUU7Z0JBQ1AsaUJBQWlCO2FBQ3BCO1NBQ0osQ0FBQztJQUNOLENBQUM7OztZQTdCSixRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFO29CQUNWLG1CQUFtQjtvQkFDbkIsd0JBQXdCO29CQUN4Qix5QkFBeUI7aUJBQzVCO2dCQUNELE9BQU8sRUFBRTtvQkFDTCxZQUFZO29CQUNaLFdBQVc7b0JBQ1gsZ0JBQWdCO29CQUNoQixrQkFBa0I7b0JBQ2xCLGNBQWMsQ0FBQyxPQUFPLEVBQUU7b0JBQ3hCLHNCQUFzQjtvQkFDdEIsWUFBWTtvQkFDWixZQUFZO2lCQUNmO2dCQUNELGVBQWUsRUFBRTtvQkFDYixtQkFBbUI7aUJBQ3RCO2dCQUNELE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLHdCQUF3QixDQUFDO2FBQzNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXRHcm91cE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktaW5wdXQtZ3JvdXAnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgTW9kYWxNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFbnVtRWRpdG9ySW5wdXRDb21wb25lbnQgfSBmcm9tICcuL2VudW0tZWRpdG9yLWlucHV0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEVudW1FZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2VudW0tZWRpdG9yLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEVudW1FZGl0b3JTZXJ2aWNlIH0gZnJvbSAnLi9lbnVtLWVkaXRvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRmFycmlzQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBQZXJmZWN0U2Nyb2xsYmFyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1wZXJmZWN0LXNjcm9sbGJhcic7XHJcbmltcG9ydCB7IExvb2t1cE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgRW51bUVkaXRvckZvb3RlckNvbXBvbmVudCB9IGZyb20gJy4vZW51bS1lZGl0b3ItZm9vdGVyLmNvbXBvbmVudCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgRW51bUVkaXRvckNvbXBvbmVudCxcclxuICAgICAgICBFbnVtRWRpdG9ySW5wdXRDb21wb25lbnQsXHJcbiAgICAgICAgRW51bUVkaXRvckZvb3RlckNvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgSW5wdXRHcm91cE1vZHVsZSxcclxuICAgICAgICBGYXJyaXNDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgTWVzc2FnZXJNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIFBlcmZlY3RTY3JvbGxiYXJNb2R1bGUsXHJcbiAgICAgICAgTG9va3VwTW9kdWxlLFxyXG4gICAgICAgIExvY2FsZU1vZHVsZVxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgICAgIEVudW1FZGl0b3JDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbRW51bUVkaXRvckNvbXBvbmVudCwgRW51bUVkaXRvcklucHV0Q29tcG9uZW50XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRW51bUVkaXRvck1vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogRW51bUVkaXRvck1vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICBFbnVtRWRpdG9yU2VydmljZVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXX0=