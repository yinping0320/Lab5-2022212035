/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InputGroupComponent } from '@farris/ui-input-group';
import { EnumEditorService, EnumOutType } from './enum-editor.service';
import { Component, Injector, ElementRef, Input, EventEmitter, Output, forwardRef, ViewChild, ChangeDetectorRef } from '@angular/core';
import { LookupComponent } from '@farris/ui-lookup';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
export const ENUM_EDITOR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => EnumEditorInputComponent)),
    multi: true
};
export class EnumEditorInputComponent extends LookupComponent {
    /**
     * @param {?} injector
     * @param {?} ees
     * @param {?} el
     */
    constructor(injector, ees, el) {
        super(injector, el);
        this.injector = injector;
        this.ees = ees;
        this.el = el;
        this.textField = 'name';
        this.valueField = 'value';
        this.outType = EnumOutType.array;
        this.enableClear = true;
        this.valueChange = new EventEmitter();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.cd = null;
        this.ees.dataChanged.subscribe((/**
         * @param {?} str
         * @return {?}
         */
        str => {
            this.updateData(str);
        }));
        this.cd = this.injector.get(ChangeDetectorRef, null);
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    updateData(str) {
        this.value = str;
        if (this.cd) {
            this.cd.detectChanges();
        }
        this.valueChange.emit(str);
        this.onModelChange(str);
        this.onModelTouched(str);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    showDialog() {
        /** @type {?} */
        const enumData = this.convertValue2JSON();
        this.ees.showDialog(enumData, {
            textField: this.textField,
            valueField: this.valueField,
            outType: this.outType
        });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        this.updateData('');
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val && typeof val === 'object') {
            this.value = JSON.stringify(val);
        }
        else {
            this.value = val || '';
        }
    }
    /**
     * @private
     * @return {?}
     */
    convertValue2JSON() {
        return this.ees.toJSON(this.value);
    }
}
EnumEditorInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'enum-editor-input',
                template: `
    <input-group #ig style="width: 100%"
        [groupText]="groupIcon"
        (clear)="onClear($event)"
        (clickHandle)="showDialog()"
        [readonly] = "readonly"
        [editable] = "editable"
        [enableClear] = "enableClear"
        [(value)]="value">
    </input-group>
    `,
                providers: [
                    ENUM_EDITOR_VALUE_ACCESSOR,
                    EnumEditorService
                ]
            }] }
];
/** @nocollapse */
EnumEditorInputComponent.ctorParameters = () => [
    { type: Injector },
    { type: EnumEditorService },
    { type: ElementRef }
];
EnumEditorInputComponent.propDecorators = {
    value: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    outType: [{ type: Input }],
    enableClear: [{ type: Input }],
    valueChange: [{ type: Output }],
    inputGroupRef: [{ type: ViewChild, args: ['ig',] }]
};
if (false) {
    /** @type {?} */
    EnumEditorInputComponent.prototype.value;
    /** @type {?} */
    EnumEditorInputComponent.prototype.textField;
    /** @type {?} */
    EnumEditorInputComponent.prototype.valueField;
    /** @type {?} */
    EnumEditorInputComponent.prototype.outType;
    /** @type {?} */
    EnumEditorInputComponent.prototype.enableClear;
    /** @type {?} */
    EnumEditorInputComponent.prototype.valueChange;
    /** @type {?} */
    EnumEditorInputComponent.prototype.inputGroupRef;
    /** @type {?} */
    EnumEditorInputComponent.prototype.groupIcon;
    /** @type {?} */
    EnumEditorInputComponent.prototype.cd;
    /** @type {?} */
    EnumEditorInputComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EnumEditorInputComponent.prototype.ees;
    /** @type {?} */
    EnumEditorInputComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS1lZGl0b3ItaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1lbnVtLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9lbnVtLWVkaXRvci1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsU0FBUyxFQUFVLFFBQVEsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvSSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRW5ELE1BQU0sT0FBTywwQkFBMEIsR0FBUTtJQUMzQyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQyx3QkFBd0IsRUFBQztJQUN2RCxLQUFLLEVBQUUsSUFBSTtDQUNkO0FBcUJELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxlQUFlOzs7Ozs7SUFjekQsWUFBbUIsUUFBa0IsRUFBVSxHQUFzQixFQUFTLEVBQWM7UUFDeEYsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQURMLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUFTLE9BQUUsR0FBRixFQUFFLENBQVk7UUFabkYsY0FBUyxHQUFHLE1BQU0sQ0FBQztRQUNuQixlQUFVLEdBQUcsT0FBTyxDQUFDO1FBQ3JCLFlBQU8sR0FBZ0IsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUN6QyxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUVsQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJM0MsY0FBUyxHQUFHLHNDQUFzQyxDQUFDO1FBQ25ELE9BQUUsR0FBc0IsSUFBSSxDQUFDO1FBS3pCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVM7Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7Ozs7SUFFTyxVQUFVLENBQUMsR0FBUTtRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDVCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQzNCO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxRQUFRLEtBQVcsQ0FBQzs7OztJQUVwQixVQUFVOztjQUNBLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQzFCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3hCLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLE1BQU07UUFDVixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQVE7UUFDZixJQUFJLEdBQUcsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDO2FBQU07WUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsSUFBSSxFQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDOzs7OztJQUVPLGlCQUFpQjtRQUNyQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7WUE5RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRTs7Ozs7Ozs7OztLQVVUO2dCQUNELFNBQVMsRUFBRTtvQkFDUCwwQkFBMEI7b0JBQzFCLGlCQUFpQjtpQkFDcEI7YUFDSjs7OztZQTVCMkIsUUFBUTtZQUQzQixpQkFBaUI7WUFDWSxVQUFVOzs7b0JBOEIzQyxLQUFLO3dCQUNMLEtBQUs7eUJBQ0wsS0FBSztzQkFDTCxLQUFLOzBCQUNMLEtBQUs7MEJBRUwsTUFBTTs0QkFFTixTQUFTLFNBQUMsSUFBSTs7OztJQVJmLHlDQUFvQjs7SUFDcEIsNkNBQTRCOztJQUM1Qiw4Q0FBOEI7O0lBQzlCLDJDQUFrRDs7SUFDbEQsK0NBQTRCOztJQUU1QiwrQ0FBMkM7O0lBRTNDLGlEQUFvRDs7SUFFcEQsNkNBQW1EOztJQUNuRCxzQ0FBNkI7O0lBRWpCLDRDQUF5Qjs7Ozs7SUFBRSx1Q0FBOEI7O0lBQUUsc0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXRHcm91cENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktaW5wdXQtZ3JvdXAnO1xyXG5pbXBvcnQgeyBFbnVtRWRpdG9yU2VydmljZSwgRW51bU91dFR5cGUgfSBmcm9tICcuL2VudW0tZWRpdG9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5qZWN0b3IsIEVsZW1lbnRSZWYsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgZm9yd2FyZFJlZiwgVmlld0NoaWxkLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb29rdXBDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWxvb2t1cCc7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVOVU1fRURJVE9SX1ZBTFVFX0FDQ0VTU09SOiBhbnkgPSB7XHJcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEVudW1FZGl0b3JJbnB1dENvbXBvbmVudCksXHJcbiAgICBtdWx0aTogdHJ1ZVxyXG59O1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdlbnVtLWVkaXRvci1pbnB1dCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGlucHV0LWdyb3VwICNpZyBzdHlsZT1cIndpZHRoOiAxMDAlXCJcclxuICAgICAgICBbZ3JvdXBUZXh0XT1cImdyb3VwSWNvblwiXHJcbiAgICAgICAgKGNsZWFyKT1cIm9uQ2xlYXIoJGV2ZW50KVwiXHJcbiAgICAgICAgKGNsaWNrSGFuZGxlKT1cInNob3dEaWFsb2coKVwiXHJcbiAgICAgICAgW3JlYWRvbmx5XSA9IFwicmVhZG9ubHlcIlxyXG4gICAgICAgIFtlZGl0YWJsZV0gPSBcImVkaXRhYmxlXCJcclxuICAgICAgICBbZW5hYmxlQ2xlYXJdID0gXCJlbmFibGVDbGVhclwiXHJcbiAgICAgICAgWyh2YWx1ZSldPVwidmFsdWVcIj5cclxuICAgIDwvaW5wdXQtZ3JvdXA+XHJcbiAgICBgLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgRU5VTV9FRElUT1JfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICAgICAgRW51bUVkaXRvclNlcnZpY2VcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEVudW1FZGl0b3JJbnB1dENvbXBvbmVudCBleHRlbmRzIExvb2t1cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoKSB2YWx1ZTogYW55O1xyXG4gICAgQElucHV0KCkgdGV4dEZpZWxkID0gJ25hbWUnO1xyXG4gICAgQElucHV0KCkgdmFsdWVGaWVsZCA9ICd2YWx1ZSc7XHJcbiAgICBASW5wdXQoKSBvdXRUeXBlOiBFbnVtT3V0VHlwZSA9IEVudW1PdXRUeXBlLmFycmF5O1xyXG4gICAgQElucHV0KCkgZW5hYmxlQ2xlYXIgPSB0cnVlO1xyXG5cclxuICAgIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdpZycpIGlucHV0R3JvdXBSZWY6IElucHV0R3JvdXBDb21wb25lbnQ7XHJcblxyXG4gICAgZ3JvdXBJY29uID0gJzxpIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1sb29rdXBcIj48L2k+JztcclxuICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBlZXM6IEVudW1FZGl0b3JTZXJ2aWNlLCBwdWJsaWMgZWw6IEVsZW1lbnRSZWYpIHtcclxuICAgICAgICBzdXBlcihpbmplY3RvciwgZWwpO1xyXG5cclxuICAgICAgICB0aGlzLmVlcy5kYXRhQ2hhbmdlZC5zdWJzY3JpYmUoc3RyID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVEYXRhKHN0cik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2QgPSB0aGlzLmluamVjdG9yLmdldChDaGFuZ2VEZXRlY3RvclJlZiwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVEYXRhKHN0cjogYW55KSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHN0cjtcclxuICAgICAgICBpZiAodGhpcy5jZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdChzdHIpO1xyXG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZShzdHIpO1xyXG4gICAgICAgIHRoaXMub25Nb2RlbFRvdWNoZWQoc3RyKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHsgfVxyXG5cclxuICAgIHNob3dEaWFsb2coKSB7XHJcbiAgICAgICAgY29uc3QgZW51bURhdGEgPSB0aGlzLmNvbnZlcnRWYWx1ZTJKU09OKCk7XHJcbiAgICAgICAgdGhpcy5lZXMuc2hvd0RpYWxvZyhlbnVtRGF0YSwge1xyXG4gICAgICAgICAgICB0ZXh0RmllbGQ6IHRoaXMudGV4dEZpZWxkLFxyXG4gICAgICAgICAgICB2YWx1ZUZpZWxkOiB0aGlzLnZhbHVlRmllbGQsXHJcbiAgICAgICAgICAgIG91dFR5cGU6IHRoaXMub3V0VHlwZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xlYXIoJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhKCcnKTtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKHZhbDogYW55KSB7XHJcbiAgICAgICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsIHx8ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbnZlcnRWYWx1ZTJKU09OKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVlcy50b0pTT04odGhpcy52YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuIl19