/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { BsModalService } from '@farris/ui-modal';
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { Subject } from 'rxjs';
import { EnumEditorComponent } from './enum-editor.component';
import { cloneDeep } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal";
import * as i2 from "@farris/ui-locale";
/** @enum {number} */
const EnumOutType = {
    'array': 0,
    'object': 1,
};
export { EnumOutType };
EnumOutType[EnumOutType['array']] = 'array';
EnumOutType[EnumOutType['object']] = 'object';
export class EnumEditorService {
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} modalService
     * @param {?} localeService
     */
    constructor(injector, cfr, modalService, localeService) {
        this.injector = injector;
        this.cfr = cfr;
        this.modalService = modalService;
        this.localeService = localeService;
        this.enumEditorRef = null;
        this.dlgRef = null;
        this.originalData = [];
        this.textField = 'name';
        this.valueField = 'value';
        this.outType = EnumOutType.array;
        this.dataChanged = new Subject();
    }
    /**
     * @param {?=} enumData
     * @param {?=} options
     * @return {?}
     */
    showDialog(enumData = [], options = {}) {
        enumData = this.toJSON(enumData);
        /** @type {?} */
        const enumEditorFactory = this.cfr.resolveComponentFactory(EnumEditorComponent);
        this.enumEditorRef = enumEditorFactory.create(this.injector);
        this.enumEditorRef.instance.data = enumData;
        this.originalData = cloneDeep(enumData);
        this.textField = options['textField'] || 'name';
        this.valueField = options['valueField'] || 'value';
        this.outType = options['outType'] || EnumOutType.array;
        options['showSortBtns'] = this.outType === EnumOutType.array;
        this.dlgRef = this.modalService.show(this.enumEditorRef, {
            width: 800, height: 500,
            title: this.localeService.getValue('enumEditor.title'), enableScroll: false,
            minHeight: 398, minWidth: 798, iconCls: 'f-icon f-icon-top_developmenttool',
            buttons: [
                {
                    text: this.localeService.getValue('enumEditor.cancelButton'),
                    cls: 'btn btn-outline-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.cancel();
                    })
                },
                {
                    text: this.localeService.getValue('enumEditor.okButton'),
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.save();
                    })
                }
            ],
            initialState: options,
            dialogFooterStyles: { background: '#F4F6F9' },
            buttonAlign: 'right',
            closed: (/**
             * @param {?} isCloseButtonClick
             * @return {?}
             */
            (isCloseButtonClick) => {
                if (isCloseButtonClick) {
                    this.cancel();
                }
            })
        });
        this.enumEditorRef.instance.height = this.dlgRef.dialog.instance.getContainerSize().height;
        this.dlgRef.dialog.instance.resized.subscribe((/**
         * @param {?} size
         * @return {?}
         */
        size => {
            this.enumEditorRef.instance.height = size.containerHeight;
        }));
        this.enumEditorRef.changeDetectorRef.detectChanges();
        this.dlgRef.dialog.changeDetectorRef.reattach();
        // this.openDialog.emit();
    }
    /**
     * @return {?}
     */
    cancel() {
        this._dataChanged(this.originalData);
        this.dlgRef.close();
    }
    /**
     * @return {?}
     */
    save() {
        /** @type {?} */
        const enumData = this.enumEditorRef.instance.data;
        this._dataChanged(enumData);
        this.dlgRef.close();
    }
    /**
     * @private
     * @param {?} enumData
     * @return {?}
     */
    _dataChanged(enumData) {
        /** @type {?} */
        const str = this.toString(enumData);
        this.dataChanged.next(str);
    }
    /**
     * @param {?} enumData
     * @return {?}
     */
    toString(enumData) {
        if (enumData && enumData.length) {
            if (this.outType === EnumOutType.array) {
                return JSON.stringify(enumData);
            }
            else {
                /** @type {?} */
                const obj = enumData.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                (r, c) => {
                    r[c[this.valueField]] = c[this.textField];
                    return r;
                }), {});
                return JSON.stringify(obj);
            }
        }
        return '';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    toJSON(val) {
        /** @type {?} */
        let enumData = [];
        if (val) {
            if (typeof val === 'string') {
                try {
                    enumData = JSON.parse(val);
                    if (this.outType === EnumOutType.object) {
                        enumData = this.convertObject2Array(enumData);
                    }
                }
                catch (e) {
                    enumData = [];
                    // console.warn(e);
                }
            }
            else {
                if (Array.isArray(val)) {
                    enumData = val;
                }
                else {
                    enumData = this.convertObject2Array(val);
                }
            }
        }
        return enumData;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    convertObject2Array(obj) {
        /** @type {?} */
        const _enumData = [];
        Object.keys(obj).forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            _enumData.push({ [this.valueField]: n, [this.textField]: obj[n] });
        }));
        return _enumData;
    }
}
EnumEditorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
EnumEditorService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: LocaleService }
];
/** @nocollapse */ EnumEditorService.ngInjectableDef = i0.defineInjectable({ factory: function EnumEditorService_Factory() { return new EnumEditorService(i0.inject(i0.INJECTOR), i0.inject(i0.ComponentFactoryResolver), i0.inject(i1.BsModalService), i0.inject(i2.LocaleService)); }, token: EnumEditorService, providedIn: "root" });
if (false) {
    /** @type {?} */
    EnumEditorService.prototype.enumEditorRef;
    /** @type {?} */
    EnumEditorService.prototype.dlgRef;
    /** @type {?} */
    EnumEditorService.prototype.originalData;
    /** @type {?} */
    EnumEditorService.prototype.textField;
    /** @type {?} */
    EnumEditorService.prototype.valueField;
    /** @type {?} */
    EnumEditorService.prototype.outType;
    /** @type {?} */
    EnumEditorService.prototype.dataChanged;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS1lZGl0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZW51bS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZW51bS1lZGl0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7Ozs7SUFHbEMsVUFBTztJQUNQLFdBQVE7Ozt3QkFEUixPQUFPLEtBQVAsT0FBTzt3QkFDUCxRQUFRLEtBQVIsUUFBUTtBQU9aLE1BQU0sT0FBTyxpQkFBaUI7Ozs7Ozs7SUFhMUIsWUFBb0IsUUFBa0IsRUFBVSxHQUE2QixFQUN6RCxZQUE0QixFQUFVLGFBQTRCO1FBRGxFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUN6RCxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVp0RixrQkFBYSxHQUFzQyxJQUFJLENBQUM7UUFDeEQsV0FBTSxHQUFHLElBQUksQ0FBQztRQUNkLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBRWxCLGNBQVMsR0FBRyxNQUFNLENBQUM7UUFDbkIsZUFBVSxHQUFHLE9BQU8sQ0FBQztRQUNyQixZQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUU1QixnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFJOEQsQ0FBQzs7Ozs7O0lBRzNGLFVBQVUsQ0FBQyxRQUFRLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxFQUFFO1FBQ2xDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztjQUMzQixpQkFBaUIsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDO1FBQy9FLElBQUksQ0FBQyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLE1BQU0sQ0FBQztRQUNoRCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLENBQUM7UUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQztRQUV2RCxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBRTdELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNyRCxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHO1lBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLO1lBQzNFLFNBQVMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsbUNBQW1DO1lBQzNFLE9BQU8sRUFBRTtnQkFDTDtvQkFDSSxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7b0JBQzVELEdBQUcsRUFBRSwyQkFBMkI7b0JBQ2hDLE1BQU07OztvQkFBRSxHQUFHLEVBQUU7d0JBQ1QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNsQixDQUFDLENBQUE7aUJBQ0o7Z0JBQ0Q7b0JBQ0ksSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO29CQUN4RCxHQUFHLEVBQUUsaUJBQWlCO29CQUN0QixNQUFNOzs7b0JBQUUsR0FBRyxFQUFFO3dCQUNULElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDaEIsQ0FBQyxDQUFBO2lCQUNKO2FBQ0o7WUFDRCxZQUFZLEVBQUUsT0FBTztZQUNyQixrQkFBa0IsRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7WUFDN0MsV0FBVyxFQUFFLE9BQU87WUFDcEIsTUFBTTs7OztZQUFFLENBQUMsa0JBQTJCLEVBQUUsRUFBRTtnQkFDcEMsSUFBSSxrQkFBa0IsRUFBRTtvQkFDcEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUNqQjtZQUNMLENBQUMsQ0FBQTtTQUNKLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFFM0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDOUQsQ0FBQyxFQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXJELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hELDBCQUEwQjtJQUM5QixDQUFDOzs7O0lBRUQsTUFBTTtRQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVELElBQUk7O2NBQ00sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUk7UUFDakQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUVPLFlBQVksQ0FBQyxRQUFhOztjQUN4QixHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsUUFBYTtRQUNsQixJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQzdCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxXQUFXLENBQUMsS0FBSyxFQUFFO2dCQUNwQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkM7aUJBQU07O3NCQUNHLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTTs7Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ2pDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDMUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2IsQ0FBQyxHQUFFLEVBQUUsQ0FBQztnQkFDTixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDOUI7U0FDSjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBUTs7WUFDUCxRQUFRLEdBQUcsRUFBRTtRQUNqQixJQUFJLEdBQUcsRUFBRTtZQUNMLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO2dCQUN6QixJQUFJO29CQUNBLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDLE1BQU0sRUFBRTt3QkFDckMsUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDakQ7aUJBQ0o7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1IsUUFBUSxHQUFHLEVBQUUsQ0FBQztvQkFDZCxtQkFBbUI7aUJBQ3RCO2FBQ0o7aUJBQU07Z0JBQ0gsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNwQixRQUFRLEdBQUcsR0FBRyxDQUFDO2lCQUNsQjtxQkFBTTtvQkFDSCxRQUFRLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUM1QzthQUNKO1NBQ0o7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDOzs7Ozs7SUFFTyxtQkFBbUIsQ0FBQyxHQUFROztjQUMxQixTQUFTLEdBQUcsRUFBRTtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkUsQ0FBQyxFQUFDLENBQUM7UUFFSCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOzs7WUF6SUosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBZG9CLFFBQVE7WUFBRSx3QkFBd0I7WUFEOUMsY0FBYztZQURkLGFBQWE7Ozs7O0lBbUJsQiwwQ0FBd0Q7O0lBQ3hELG1DQUFjOztJQUNkLHlDQUFrQjs7SUFFbEIsc0NBQW1COztJQUNuQix1Q0FBcUI7O0lBQ3JCLG9DQUE0Qjs7SUFFNUIsd0NBQTRCOzs7OztJQUdoQixxQ0FBMEI7Ozs7O0lBQUUsZ0NBQXFDOzs7OztJQUNqRSx5Q0FBb0M7Ozs7O0lBQUUsMENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRW51bUVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vZW51bS1lZGl0b3IuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcblxyXG5leHBvcnQgZW51bSBFbnVtT3V0VHlwZSB7XHJcbiAgICAnYXJyYXknLFxyXG4gICAgJ29iamVjdCdcclxufVxyXG5cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRW51bUVkaXRvclNlcnZpY2Uge1xyXG5cclxuICAgIGVudW1FZGl0b3JSZWY6IENvbXBvbmVudFJlZjxFbnVtRWRpdG9yQ29tcG9uZW50PiA9IG51bGw7XHJcbiAgICBkbGdSZWYgPSBudWxsO1xyXG4gICAgb3JpZ2luYWxEYXRhID0gW107XHJcblxyXG4gICAgdGV4dEZpZWxkID0gJ25hbWUnO1xyXG4gICAgdmFsdWVGaWVsZCA9ICd2YWx1ZSc7XHJcbiAgICBvdXRUeXBlID0gRW51bU91dFR5cGUuYXJyYXk7XHJcblxyXG4gICAgZGF0YUNoYW5nZWQgPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICAgICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSwgcHJpdmF0ZSBsb2NhbGVTZXJ2aWNlOiBMb2NhbGVTZXJ2aWNlKSB7IH1cclxuXHJcblxyXG4gICAgc2hvd0RpYWxvZyhlbnVtRGF0YSA9IFtdLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICBlbnVtRGF0YSA9IHRoaXMudG9KU09OKGVudW1EYXRhKTtcclxuICAgICAgICBjb25zdCBlbnVtRWRpdG9yRmFjdG9yeSA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEVudW1FZGl0b3JDb21wb25lbnQpO1xyXG4gICAgICAgIHRoaXMuZW51bUVkaXRvclJlZiA9IGVudW1FZGl0b3JGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgICAgICB0aGlzLmVudW1FZGl0b3JSZWYuaW5zdGFuY2UuZGF0YSA9IGVudW1EYXRhO1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxEYXRhID0gY2xvbmVEZWVwKGVudW1EYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0RmllbGQgPSBvcHRpb25zWyd0ZXh0RmllbGQnXSB8fCAnbmFtZSc7XHJcbiAgICAgICAgdGhpcy52YWx1ZUZpZWxkID0gb3B0aW9uc1sndmFsdWVGaWVsZCddIHx8ICd2YWx1ZSc7XHJcbiAgICAgICAgdGhpcy5vdXRUeXBlID0gb3B0aW9uc1snb3V0VHlwZSddIHx8IEVudW1PdXRUeXBlLmFycmF5O1xyXG5cclxuICAgICAgICBvcHRpb25zWydzaG93U29ydEJ0bnMnXSA9IHRoaXMub3V0VHlwZSA9PT0gRW51bU91dFR5cGUuYXJyYXk7XHJcblxyXG4gICAgICAgIHRoaXMuZGxnUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyh0aGlzLmVudW1FZGl0b3JSZWYsIHtcclxuICAgICAgICAgICAgd2lkdGg6IDgwMCwgaGVpZ2h0OiA1MDAsXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ2VudW1FZGl0b3IudGl0bGUnKSwgZW5hYmxlU2Nyb2xsOiBmYWxzZSxcclxuICAgICAgICAgICAgbWluSGVpZ2h0OiAzOTgsIG1pbldpZHRoOiA3OTgsIGljb25DbHM6ICdmLWljb24gZi1pY29uLXRvcF9kZXZlbG9wbWVudHRvb2wnLFxyXG4gICAgICAgICAgICBidXR0b25zOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdlbnVtRWRpdG9yLmNhbmNlbEJ1dHRvbicpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsczogJ2J0biBidG4tb3V0bGluZS1zZWNvbmRhcnknLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdlbnVtRWRpdG9yLm9rQnV0dG9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgY2xzOiAnYnRuIGJ0bi1wcmltYXJ5JyxcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IG9wdGlvbnMsXHJcbiAgICAgICAgICAgIGRpYWxvZ0Zvb3RlclN0eWxlczogeyBiYWNrZ3JvdW5kOiAnI0Y0RjZGOScgfSxcclxuICAgICAgICAgICAgYnV0dG9uQWxpZ246ICdyaWdodCcsXHJcbiAgICAgICAgICAgIGNsb3NlZDogKGlzQ2xvc2VCdXR0b25DbGljazogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2xvc2VCdXR0b25DbGljaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbnVtRWRpdG9yUmVmLmluc3RhbmNlLmhlaWdodCA9IHRoaXMuZGxnUmVmLmRpYWxvZy5pbnN0YW5jZS5nZXRDb250YWluZXJTaXplKCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLmRsZ1JlZi5kaWFsb2cuaW5zdGFuY2UucmVzaXplZC5zdWJzY3JpYmUoc2l6ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZW51bUVkaXRvclJlZi5pbnN0YW5jZS5oZWlnaHQgPSBzaXplLmNvbnRhaW5lckhlaWdodDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbnVtRWRpdG9yUmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kbGdSZWYuZGlhbG9nLmNoYW5nZURldGVjdG9yUmVmLnJlYXR0YWNoKCk7XHJcbiAgICAgICAgLy8gdGhpcy5vcGVuRGlhbG9nLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5nZWQodGhpcy5vcmlnaW5hbERhdGEpO1xyXG4gICAgICAgIHRoaXMuZGxnUmVmLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZSgpIHtcclxuICAgICAgICBjb25zdCBlbnVtRGF0YSA9IHRoaXMuZW51bUVkaXRvclJlZi5pbnN0YW5jZS5kYXRhO1xyXG4gICAgICAgIHRoaXMuX2RhdGFDaGFuZ2VkKGVudW1EYXRhKTtcclxuICAgICAgICB0aGlzLmRsZ1JlZi5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2RhdGFDaGFuZ2VkKGVudW1EYXRhOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLnRvU3RyaW5nKGVudW1EYXRhKTtcclxuICAgICAgICB0aGlzLmRhdGFDaGFuZ2VkLm5leHQoc3RyKTtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0cmluZyhlbnVtRGF0YTogYW55KSB7XHJcbiAgICAgICAgaWYgKGVudW1EYXRhICYmIGVudW1EYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vdXRUeXBlID09PSBFbnVtT3V0VHlwZS5hcnJheSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVudW1EYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IGVudW1EYXRhLnJlZHVjZSgociwgYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJbY1t0aGlzLnZhbHVlRmllbGRdXSA9IGNbdGhpcy50ZXh0RmllbGRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHRvSlNPTih2YWw6IGFueSkge1xyXG4gICAgICAgIGxldCBlbnVtRGF0YSA9IFtdO1xyXG4gICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudW1EYXRhID0gSlNPTi5wYXJzZSh2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm91dFR5cGUgPT09IEVudW1PdXRUeXBlLm9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtRGF0YSA9IHRoaXMuY29udmVydE9iamVjdDJBcnJheShlbnVtRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudW1EYXRhID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudW1EYXRhID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnVtRGF0YSA9IHRoaXMuY29udmVydE9iamVjdDJBcnJheSh2YWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbnVtRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbnZlcnRPYmplY3QyQXJyYXkob2JqOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBfZW51bURhdGEgPSBbXTtcclxuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgIF9lbnVtRGF0YS5wdXNoKHsgW3RoaXMudmFsdWVGaWVsZF06IG4sIFt0aGlzLnRleHRGaWVsZF06IG9ialtuXSB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIF9lbnVtRGF0YTtcclxuICAgIH1cclxufVxyXG4iXX0=