/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { BsModalService } from '@farris/ui-modal';
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { Subject } from 'rxjs';
import { EnumEditorComponent } from './enum-editor.component';
import { cloneDeep } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal";
import * as i2 from "@farris/ui-locale";
/** @enum {number} */
var EnumOutType = {
    'array': 0,
    'object': 1,
};
export { EnumOutType };
EnumOutType[EnumOutType['array']] = 'array';
EnumOutType[EnumOutType['object']] = 'object';
var EnumEditorService = /** @class */ (function () {
    function EnumEditorService(injector, cfr, modalService, localeService) {
        this.injector = injector;
        this.cfr = cfr;
        this.modalService = modalService;
        this.localeService = localeService;
        this.enumEditorRef = null;
        this.dlgRef = null;
        this.originalData = [];
        this.textField = 'name';
        this.valueField = 'value';
        this.outType = EnumOutType.array;
        this.dataChanged = new Subject();
    }
    /**
     * @param {?=} enumData
     * @param {?=} options
     * @return {?}
     */
    EnumEditorService.prototype.showDialog = /**
     * @param {?=} enumData
     * @param {?=} options
     * @return {?}
     */
    function (enumData, options) {
        var _this = this;
        if (enumData === void 0) { enumData = []; }
        if (options === void 0) { options = {}; }
        enumData = this.toJSON(enumData);
        /** @type {?} */
        var enumEditorFactory = this.cfr.resolveComponentFactory(EnumEditorComponent);
        this.enumEditorRef = enumEditorFactory.create(this.injector);
        this.enumEditorRef.instance.data = enumData;
        this.originalData = cloneDeep(enumData);
        this.textField = options['textField'] || 'name';
        this.valueField = options['valueField'] || 'value';
        this.outType = options['outType'] || EnumOutType.array;
        options['showSortBtns'] = this.outType === EnumOutType.array;
        this.dlgRef = this.modalService.show(this.enumEditorRef, {
            width: 800, height: 500,
            title: this.localeService.getValue('enumEditor.title'), enableScroll: false,
            minHeight: 398, minWidth: 798, iconCls: 'f-icon f-icon-top_developmenttool',
            buttons: [
                {
                    text: this.localeService.getValue('enumEditor.cancelButton'),
                    cls: 'btn btn-outline-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        _this.cancel();
                    })
                },
                {
                    text: this.localeService.getValue('enumEditor.okButton'),
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        _this.save();
                    })
                }
            ],
            initialState: options,
            dialogFooterStyles: { background: '#F4F6F9' },
            buttonAlign: 'right',
            closed: (/**
             * @param {?} isCloseButtonClick
             * @return {?}
             */
            function (isCloseButtonClick) {
                if (isCloseButtonClick) {
                    _this.cancel();
                }
            })
        });
        this.enumEditorRef.instance.height = this.dlgRef.dialog.instance.getContainerSize().height;
        this.dlgRef.dialog.instance.resized.subscribe((/**
         * @param {?} size
         * @return {?}
         */
        function (size) {
            _this.enumEditorRef.instance.height = size.containerHeight;
        }));
        this.enumEditorRef.changeDetectorRef.detectChanges();
        this.dlgRef.dialog.changeDetectorRef.reattach();
        // this.openDialog.emit();
    };
    /**
     * @return {?}
     */
    EnumEditorService.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this._dataChanged(this.originalData);
        this.dlgRef.close();
    };
    /**
     * @return {?}
     */
    EnumEditorService.prototype.save = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enumData = this.enumEditorRef.instance.data;
        this._dataChanged(enumData);
        this.dlgRef.close();
    };
    /**
     * @private
     * @param {?} enumData
     * @return {?}
     */
    EnumEditorService.prototype._dataChanged = /**
     * @private
     * @param {?} enumData
     * @return {?}
     */
    function (enumData) {
        /** @type {?} */
        var str = this.toString(enumData);
        this.dataChanged.next(str);
    };
    /**
     * @param {?} enumData
     * @return {?}
     */
    EnumEditorService.prototype.toString = /**
     * @param {?} enumData
     * @return {?}
     */
    function (enumData) {
        var _this = this;
        if (enumData && enumData.length) {
            if (this.outType === EnumOutType.array) {
                return JSON.stringify(enumData);
            }
            else {
                /** @type {?} */
                var obj = enumData.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                function (r, c) {
                    r[c[_this.valueField]] = c[_this.textField];
                    return r;
                }), {});
                return JSON.stringify(obj);
            }
        }
        return '';
    };
    /**
     * @param {?} val
     * @return {?}
     */
    EnumEditorService.prototype.toJSON = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var enumData = [];
        if (val) {
            if (typeof val === 'string') {
                try {
                    enumData = JSON.parse(val);
                    if (this.outType === EnumOutType.object) {
                        enumData = this.convertObject2Array(enumData);
                    }
                }
                catch (e) {
                    enumData = [];
                    // console.warn(e);
                }
            }
            else {
                if (Array.isArray(val)) {
                    enumData = val;
                }
                else {
                    enumData = this.convertObject2Array(val);
                }
            }
        }
        return enumData;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    EnumEditorService.prototype.convertObject2Array = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var _enumData = [];
        Object.keys(obj).forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            var _a;
            _enumData.push((_a = {}, _a[_this.valueField] = n, _a[_this.textField] = obj[n], _a));
        }));
        return _enumData;
    };
    EnumEditorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EnumEditorService.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: LocaleService }
    ]; };
    /** @nocollapse */ EnumEditorService.ngInjectableDef = i0.defineInjectable({ factory: function EnumEditorService_Factory() { return new EnumEditorService(i0.inject(i0.INJECTOR), i0.inject(i0.ComponentFactoryResolver), i0.inject(i1.BsModalService), i0.inject(i2.LocaleService)); }, token: EnumEditorService, providedIn: "root" });
    return EnumEditorService;
}());
export { EnumEditorService };
if (false) {
    /** @type {?} */
    EnumEditorService.prototype.enumEditorRef;
    /** @type {?} */
    EnumEditorService.prototype.dlgRef;
    /** @type {?} */
    EnumEditorService.prototype.originalData;
    /** @type {?} */
    EnumEditorService.prototype.textField;
    /** @type {?} */
    EnumEditorService.prototype.valueField;
    /** @type {?} */
    EnumEditorService.prototype.outType;
    /** @type {?} */
    EnumEditorService.prototype.dataChanged;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    EnumEditorService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,