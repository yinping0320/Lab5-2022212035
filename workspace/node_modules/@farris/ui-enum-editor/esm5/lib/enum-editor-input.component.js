/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InputGroupComponent } from '@farris/ui-input-group';
import { EnumEditorService, EnumOutType } from './enum-editor.service';
import { Component, Injector, ElementRef, Input, EventEmitter, Output, forwardRef, ViewChild, ChangeDetectorRef } from '@angular/core';
import { LookupComponent } from '@farris/ui-lookup';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
export var ENUM_EDITOR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return EnumEditorInputComponent; })),
    multi: true
};
var EnumEditorInputComponent = /** @class */ (function (_super) {
    tslib_1.__extends(EnumEditorInputComponent, _super);
    function EnumEditorInputComponent(injector, ees, el) {
        var _this = _super.call(this, injector, el) || this;
        _this.injector = injector;
        _this.ees = ees;
        _this.el = el;
        _this.textField = 'name';
        _this.valueField = 'value';
        _this.outType = EnumOutType.array;
        _this.enableClear = true;
        _this.valueChange = new EventEmitter();
        _this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        _this.cd = null;
        _this.ees.dataChanged.subscribe((/**
         * @param {?} str
         * @return {?}
         */
        function (str) {
            _this.updateData(str);
        }));
        _this.cd = _this.injector.get(ChangeDetectorRef, null);
        return _this;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    EnumEditorInputComponent.prototype.updateData = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        this.value = str;
        if (this.cd) {
            this.cd.detectChanges();
        }
        this.valueChange.emit(str);
        this.onModelChange(str);
        this.onModelTouched(str);
    };
    /**
     * @return {?}
     */
    EnumEditorInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    EnumEditorInputComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enumData = this.convertValue2JSON();
        this.ees.showDialog(enumData, {
            textField: this.textField,
            valueField: this.valueField,
            outType: this.outType
        });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EnumEditorInputComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.updateData('');
    };
    /**
     * @param {?} val
     * @return {?}
     */
    EnumEditorInputComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val && typeof val === 'object') {
            this.value = JSON.stringify(val);
        }
        else {
            this.value = val || '';
        }
    };
    /**
     * @private
     * @return {?}
     */
    EnumEditorInputComponent.prototype.convertValue2JSON = /**
     * @private
     * @return {?}
     */
    function () {
        return this.ees.toJSON(this.value);
    };
    EnumEditorInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'enum-editor-input',
                    template: "\n    <input-group #ig style=\"width: 100%\"\n        [groupText]=\"groupIcon\"\n        (clear)=\"onClear($event)\"\n        (clickHandle)=\"showDialog()\"\n        [readonly] = \"readonly\"\n        [editable] = \"editable\"\n        [enableClear] = \"enableClear\"\n        [(value)]=\"value\">\n    </input-group>\n    ",
                    providers: [
                        ENUM_EDITOR_VALUE_ACCESSOR,
                        EnumEditorService
                    ]
                }] }
    ];
    /** @nocollapse */
    EnumEditorInputComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: EnumEditorService },
        { type: ElementRef }
    ]; };
    EnumEditorInputComponent.propDecorators = {
        value: [{ type: Input }],
        textField: [{ type: Input }],
        valueField: [{ type: Input }],
        outType: [{ type: Input }],
        enableClear: [{ type: Input }],
        valueChange: [{ type: Output }],
        inputGroupRef: [{ type: ViewChild, args: ['ig',] }]
    };
    return EnumEditorInputComponent;
}(LookupComponent));
export { EnumEditorInputComponent };
if (false) {
    /** @type {?} */
    EnumEditorInputComponent.prototype.value;
    /** @type {?} */
    EnumEditorInputComponent.prototype.textField;
    /** @type {?} */
    EnumEditorInputComponent.prototype.valueField;
    /** @type {?} */
    EnumEditorInputComponent.prototype.outType;
    /** @type {?} */
    EnumEditorInputComponent.prototype.enableClear;
    /** @type {?} */
    EnumEditorInputComponent.prototype.valueChange;
    /** @type {?} */
    EnumEditorInputComponent.prototype.inputGroupRef;
    /** @type {?} */
    EnumEditorInputComponent.prototype.groupIcon;
    /** @type {?} */
    EnumEditorInputComponent.prototype.cd;
    /** @type {?} */
    EnumEditorInputComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EnumEditorInputComponent.prototype.ees;
    /** @type {?} */
    EnumEditorInputComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS1lZGl0b3ItaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1lbnVtLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9lbnVtLWVkaXRvci1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkUsT0FBTyxFQUFFLFNBQVMsRUFBVSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0ksT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUVuRCxNQUFNLEtBQU8sMEJBQTBCLEdBQVE7SUFDM0MsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsY0FBTSxPQUFBLHdCQUF3QixFQUF4QixDQUF3QixFQUFDO0lBQ3ZELEtBQUssRUFBRSxJQUFJO0NBQ2Q7QUFHRDtJQWtCOEMsb0RBQWU7SUFjekQsa0NBQW1CLFFBQWtCLEVBQVUsR0FBc0IsRUFBUyxFQUFjO1FBQTVGLFlBQ0ksa0JBQU0sUUFBUSxFQUFFLEVBQUUsQ0FBQyxTQU90QjtRQVJrQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsU0FBRyxHQUFILEdBQUcsQ0FBbUI7UUFBUyxRQUFFLEdBQUYsRUFBRSxDQUFZO1FBWm5GLGVBQVMsR0FBRyxNQUFNLENBQUM7UUFDbkIsZ0JBQVUsR0FBRyxPQUFPLENBQUM7UUFDckIsYUFBTyxHQUFnQixXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ3pDLGlC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fSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgRW51bUVkaXRvclNlcnZpY2UsIEVudW1PdXRUeXBlIH0gZnJvbSAnLi9lbnVtLWVkaXRvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEluamVjdG9yLCBFbGVtZW50UmVmLCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIGZvcndhcmRSZWYsIFZpZXdDaGlsZCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTG9va3VwQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmV4cG9ydCBjb25zdCBFTlVNX0VESVRPUl9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xyXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFbnVtRWRpdG9ySW5wdXRDb21wb25lbnQpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZW51bS1lZGl0b3ItaW5wdXQnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxpbnB1dC1ncm91cCAjaWcgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgW2dyb3VwVGV4dF09XCJncm91cEljb25cIlxyXG4gICAgICAgIChjbGVhcik9XCJvbkNsZWFyKCRldmVudClcIlxyXG4gICAgICAgIChjbGlja0hhbmRsZSk9XCJzaG93RGlhbG9nKClcIlxyXG4gICAgICAgIFtyZWFkb25seV0gPSBcInJlYWRvbmx5XCJcclxuICAgICAgICBbZWRpdGFibGVdID0gXCJlZGl0YWJsZVwiXHJcbiAgICAgICAgW2VuYWJsZUNsZWFyXSA9IFwiZW5hYmxlQ2xlYXJcIlxyXG4gICAgICAgIFsodmFsdWUpXT1cInZhbHVlXCI+XHJcbiAgICA8L2lucHV0LWdyb3VwPlxyXG4gICAgYCxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIEVOVU1fRURJVE9SX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgICAgIEVudW1FZGl0b3JTZXJ2aWNlXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFbnVtRWRpdG9ySW5wdXRDb21wb25lbnQgZXh0ZW5kcyBMb29rdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCkgdmFsdWU6IGFueTtcclxuICAgIEBJbnB1dCgpIHRleHRGaWVsZCA9ICduYW1lJztcclxuICAgIEBJbnB1dCgpIHZhbHVlRmllbGQgPSAndmFsdWUnO1xyXG4gICAgQElucHV0KCkgb3V0VHlwZTogRW51bU91dFR5cGUgPSBFbnVtT3V0VHlwZS5hcnJheTtcclxuICAgIEBJbnB1dCgpIGVuYWJsZUNsZWFyID0gdHJ1ZTtcclxuXHJcbiAgICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnaWcnKSBpbnB1dEdyb3VwUmVmOiBJbnB1dEdyb3VwQ29tcG9uZW50O1xyXG5cclxuICAgIGdyb3VwSWNvbiA9ICc8aSBjbGFzcz1cImYtaWNvbiBmLWljb24tbG9va3VwXCI+PC9pPic7XHJcbiAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgZWVzOiBFbnVtRWRpdG9yU2VydmljZSwgcHVibGljIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICAgICAgc3VwZXIoaW5qZWN0b3IsIGVsKTtcclxuXHJcbiAgICAgICAgdGhpcy5lZXMuZGF0YUNoYW5nZWQuc3Vic2NyaWJlKHN0ciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YShzdHIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNkID0gdGhpcy5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlRGF0YShzdHI6IGFueSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBzdHI7XHJcbiAgICAgICAgaWYgKHRoaXMuY2QpIHtcclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQoc3RyKTtcclxuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2Uoc3RyKTtcclxuICAgICAgICB0aGlzLm9uTW9kZWxUb3VjaGVkKHN0cik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7IH1cclxuXHJcbiAgICBzaG93RGlhbG9nKCkge1xyXG4gICAgICAgIGNvbnN0IGVudW1EYXRhID0gdGhpcy5jb252ZXJ0VmFsdWUySlNPTigpO1xyXG4gICAgICAgIHRoaXMuZWVzLnNob3dEaWFsb2coZW51bURhdGEsIHtcclxuICAgICAgICAgICAgdGV4dEZpZWxkOiB0aGlzLnRleHRGaWVsZCxcclxuICAgICAgICAgICAgdmFsdWVGaWVsZDogdGhpcy52YWx1ZUZpZWxkLFxyXG4gICAgICAgICAgICBvdXRUeXBlOiB0aGlzLm91dFR5cGVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsZWFyKCRldmVudCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YSgnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWYWx1ZSh2YWw6IGFueSkge1xyXG4gICAgICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbCB8fCAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb252ZXJ0VmFsdWUySlNPTigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lZXMudG9KU09OKHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==