(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-modal'), require('rxjs'), require('lodash-es'), require('@farris/ui-input-group'), require('@angular/forms'), require('@angular/common'), require('@farris/ui-messager'), require('@farris/ui-locale'), require('@angular/core'), require('@farris/ui-common'), require('@farris/ui-perfect-scrollbar'), require('@farris/ui-lookup')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-enum-editor', ['exports', '@farris/ui-modal', 'rxjs', 'lodash-es', '@farris/ui-input-group', '@angular/forms', '@angular/common', '@farris/ui-messager', '@farris/ui-locale', '@angular/core', '@farris/ui-common', '@farris/ui-perfect-scrollbar', '@farris/ui-lookup'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-enum-editor'] = {}),global.i1,global.rxjs,global.lodashEs,global.uiInputGroup,global.ng.forms,global.ng.common,global.uiMessager,global.i2,global.ng.core,global.uiCommon,global.uiPerfectScrollbar,global.uiLookup));
}(this, (function (exports,i1,rxjs,lodashEs,uiInputGroup,forms,common,uiMessager,i2,i0,uiCommon,uiPerfectScrollbar,uiLookup) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumEditorComponent = /** @class */ (function () {
        function EnumEditorComponent(el, render, messagerService, localeSer) {
            var _a;
            this.el = el;
            this.render = render;
            this.messagerService = messagerService;
            this.localeSer = localeSer;
            /**
             * enum data
             */
            this.data = [];
            this.columns = [];
            this.textField = 'name';
            this.valueField = 'value';
            this.dataChange = new i0.EventEmitter();
            this.cls = 'd-flex flex-column flex-fill';
            this.overflow = 'hidden';
            this.height = '100%';
            this.showSortBtns = true;
            this.currentEnumData = null;
            this.newEnumData = (_a = {},
                _a[this.textField] = '',
                _a[this.valueField] = '',
                _a);
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        EnumEditorComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        EnumEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} index
         * @return {?}
         */
        EnumEditorComponent.prototype.insertCondition = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                /** @type {?} */
                var newEnumData = Object.assign({}, this.newEnumData);
                if (index === 0) {
                    this.data.unshift(newEnumData);
                }
                else {
                    this.data.splice(index, 0, newEnumData);
                }
                this.changeConditionList();
            };
        /**
         * @param {?} index
         * @return {?}
         */
        EnumEditorComponent.prototype.remove = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.data.splice(index, 1);
                this.changeConditionList();
                if (this.currentEnumData) {
                    if (index === this.currentEnumData.index) {
                        this.currentEnumData = null;
                    }
                }
            };
        /**
         * @return {?}
         */
        EnumEditorComponent.prototype.onAddFilter = /**
         * @return {?}
         */
            function () {
                this.data = __spread(this.data, [Object.assign({}, this.newEnumData)]);
                this.changeConditionList();
                this.itemIntoView();
            };
        /**
         * @return {?}
         */
        EnumEditorComponent.prototype.onClear = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.messagerService.question(this.localeSer.getValue('enumEditor.message'), ( /**
                 * @return {?}
                 */function () {
                    _this.data = [];
                    _this.currentEnumData = null;
                    _this.changeConditionList();
                }));
            };
        /**
         * @return {?}
         */
        EnumEditorComponent.prototype.onMoveTop = /**
         * @return {?}
         */
            function () {
                if (this.currentEnumData) {
                    this.data.unshift(this.currentEnumData.data);
                    this.data.splice(this.currentEnumData.index + 1, 1);
                    this.currentEnumData.index = 0;
                    this.changeConditionList();
                }
            };
        /**
         * @return {?}
         */
        EnumEditorComponent.prototype.onMovePrev = /**
         * @return {?}
         */
            function () {
                var _a;
                if (this.currentEnumData) {
                    /** @type {?} */
                    var index = this.currentEnumData.index;
                    /** @type {?} */
                    var tempArr = this.data.splice(index, 1);
                    (_a = this.data).splice.apply(_a, __spread([index - 1, 0], tempArr));
                    this.currentEnumData.index = index - 1;
                    this.changeConditionList();
                }
            };
        /**
         * @return {?}
         */
        EnumEditorComponent.prototype.onMoveNext = /**
         * @return {?}
         */
            function () {
                var _a;
                if (this.currentEnumData) {
                    /** @type {?} */
                    var index = this.currentEnumData.index;
                    /** @type {?} */
                    var tempArr = this.data.splice(index, 1);
                    (_a = this.data).splice.apply(_a, __spread([index + 1, 0], tempArr));
                    this.currentEnumData.index = index + 1;
                    this.changeConditionList();
                }
            };
        /**
         * @return {?}
         */
        EnumEditorComponent.prototype.onMoveBottom = /**
         * @return {?}
         */
            function () {
                if (this.currentEnumData) {
                    this.data.push(this.currentEnumData.data);
                    this.data.splice(this.currentEnumData.index, 1);
                    this.currentEnumData.index = this.data.length - 1;
                    this.changeConditionList();
                }
            };
        /**
         * @private
         * @return {?}
         */
        EnumEditorComponent.prototype.itemIntoView = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.tablebodybox) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var tr = _this.tablebodybox.nativeElement.querySelector('tbody tr:last-child');
                        if (tr) {
                            if (tr.scrollIntoViewIfNeeded) {
                                tr.scrollIntoViewIfNeeded(false);
                            }
                            else {
                                tr.scrollIntoView({ block: 'nearest' });
                            }
                        }
                    }), 50);
                }
            };
        /**
         * @private
         * @return {?}
         */
        EnumEditorComponent.prototype.changeConditionList = /**
         * @private
         * @return {?}
         */
            function () {
                this.dataChange.next(this.data);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EnumEditorComponent.prototype.selected = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                // console.log($event);
                this.currentEnumData = $event;
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EnumEditorComponent.prototype.isSelected = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.currentEnumData) {
                    return this.currentEnumData.index === $event;
                }
                return false;
            };
        EnumEditorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-enum-editor',
                        template: "<!-- <div class=\"table-header \">\r\n    <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n        <thead>\r\n            <tr>\r\n                <th style=\"width: 42px\"></th>\r\n                <th><b>{{'enumEditor.value'| locale}}</b></th>\r\n                <th><b>{{'enumEditor.name'| locale}}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div> -->\r\n<div style=\"\r\n    border-top: 1px solid  white;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 2;\r\n\"></div>\r\n<div class=\"table-body flex-fill win11Scroll show nobtn \" style=\"margin-left:14px; margin-right: 0; overflow-y: scroll;\" #tablebodybox>\r\n    <!-- <perfect-scrollbar [config]=\"{}\"> -->\r\n        <table class=\"table table-bordered\" #tbl>\r\n            <thead style=\"position: sticky; top: 0; z-index: 1;\">\r\n                <tr>\r\n                    <th style=\"width: 42px\"></th>\r\n                    <th><b>{{'enumEditor.value'| locale}}</b></th>\r\n                    <th><b>{{'enumEditor.name'| locale}}</b></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let item of data; let index=index;\" (click)=\"selected({'index':index, 'data': item})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td style=\"width: 42px\">\r\n                        <button type=\"button\" class=\"btn btn-link\" (click)=\"remove(index)\">\r\n                            <span class=\"f-icon f-icon-close\" style=\"color: red\"></span>\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"text\" style=\"width:100%\" autocomplete=\"off\" placeholder=\"\" class=\"k-textbox\" [(ngModel)]=\"item[valueField]\">\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"text\" style=\"width:100%\" placeholder=\"\" autocomplete=\"off\" class=\"k-textbox\" [(ngModel)]=\"item[textField]\">\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    <!-- </perfect-scrollbar> -->\r\n</div>\r\n<div style=\"flex-shrink: 0; margin: 0 14px;\">\r\n<enum-editor-footer\r\n[showSortBtns]=\"showSortBtns\"\r\n(addFilter)=\"onAddFilter()\"\r\n(clearFilter)=\"onClear()\"\r\n(moveTop)=\"onMoveTop()\"\r\n(movePrev)=\"onMovePrev()\"\r\n(moveNext)=\"onMoveNext()\"\r\n(moveBottom)=\"onMoveBottom()\"></enum-editor-footer>\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        EnumEditorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: uiMessager.MessagerService },
                { type: i2.LocaleService }
            ];
        };
        EnumEditorComponent.propDecorators = {
            data: [{ type: i0.Input }],
            columns: [{ type: i0.Input }],
            textField: [{ type: i0.Input }],
            valueField: [{ type: i0.Input }],
            dataChange: [{ type: i0.Output }],
            tablebodybox: [{ type: i0.ViewChild, args: ['tablebodybox',] }],
            cls: [{ type: i0.HostBinding, args: ['class',] }],
            overflow: [{ type: i0.HostBinding, args: ['style.overflow',] }],
            height: [{ type: i0.HostBinding, args: ['style.height',] }],
            showSortBtns: [{ type: i0.Input }]
        };
        return EnumEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var EnumOutType = {
        'array': 0,
        'object': 1,
    };
    EnumOutType[EnumOutType['array']] = 'array';
    EnumOutType[EnumOutType['object']] = 'object';
    var EnumEditorService = /** @class */ (function () {
        function EnumEditorService(injector, cfr, modalService, localeService) {
            this.injector = injector;
            this.cfr = cfr;
            this.modalService = modalService;
            this.localeService = localeService;
            this.enumEditorRef = null;
            this.dlgRef = null;
            this.originalData = [];
            this.textField = 'name';
            this.valueField = 'value';
            this.outType = EnumOutType.array;
            this.dataChanged = new rxjs.Subject();
        }
        /**
         * @param {?=} enumData
         * @param {?=} options
         * @return {?}
         */
        EnumEditorService.prototype.showDialog = /**
         * @param {?=} enumData
         * @param {?=} options
         * @return {?}
         */
            function (enumData, options) {
                var _this = this;
                if (enumData === void 0) {
                    enumData = [];
                }
                if (options === void 0) {
                    options = {};
                }
                enumData = this.toJSON(enumData);
                /** @type {?} */
                var enumEditorFactory = this.cfr.resolveComponentFactory(EnumEditorComponent);
                this.enumEditorRef = enumEditorFactory.create(this.injector);
                this.enumEditorRef.instance.data = enumData;
                this.originalData = lodashEs.cloneDeep(enumData);
                this.textField = options['textField'] || 'name';
                this.valueField = options['valueField'] || 'value';
                this.outType = options['outType'] || EnumOutType.array;
                options['showSortBtns'] = this.outType === EnumOutType.array;
                this.dlgRef = this.modalService.show(this.enumEditorRef, {
                    width: 800, height: 500,
                    title: this.localeService.getValue('enumEditor.title'), enableScroll: false,
                    minHeight: 398, minWidth: 798, iconCls: 'f-icon f-icon-top_developmenttool',
                    buttons: [
                        {
                            text: this.localeService.getValue('enumEditor.cancelButton'),
                            cls: 'btn btn-outline-secondary',
                            handle: ( /**
                             * @return {?}
                             */function () {
                                _this.cancel();
                            })
                        },
                        {
                            text: this.localeService.getValue('enumEditor.okButton'),
                            cls: 'btn btn-primary',
                            handle: ( /**
                             * @return {?}
                             */function () {
                                _this.save();
                            })
                        }
                    ],
                    initialState: options,
                    dialogFooterStyles: { background: '#F4F6F9' },
                    buttonAlign: 'right',
                    closed: ( /**
                     * @param {?} isCloseButtonClick
                     * @return {?}
                     */function (isCloseButtonClick) {
                        if (isCloseButtonClick) {
                            _this.cancel();
                        }
                    })
                });
                this.enumEditorRef.instance.height = this.dlgRef.dialog.instance.getContainerSize().height;
                this.dlgRef.dialog.instance.resized.subscribe(( /**
                 * @param {?} size
                 * @return {?}
                 */function (size) {
                    _this.enumEditorRef.instance.height = size.containerHeight;
                }));
                this.enumEditorRef.changeDetectorRef.detectChanges();
                this.dlgRef.dialog.changeDetectorRef.reattach();
                // this.openDialog.emit();
            };
        /**
         * @return {?}
         */
        EnumEditorService.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this._dataChanged(this.originalData);
                this.dlgRef.close();
            };
        /**
         * @return {?}
         */
        EnumEditorService.prototype.save = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var enumData = this.enumEditorRef.instance.data;
                this._dataChanged(enumData);
                this.dlgRef.close();
            };
        /**
         * @private
         * @param {?} enumData
         * @return {?}
         */
        EnumEditorService.prototype._dataChanged = /**
         * @private
         * @param {?} enumData
         * @return {?}
         */
            function (enumData) {
                /** @type {?} */
                var str = this.toString(enumData);
                this.dataChanged.next(str);
            };
        /**
         * @param {?} enumData
         * @return {?}
         */
        EnumEditorService.prototype.toString = /**
         * @param {?} enumData
         * @return {?}
         */
            function (enumData) {
                var _this = this;
                if (enumData && enumData.length) {
                    if (this.outType === EnumOutType.array) {
                        return JSON.stringify(enumData);
                    }
                    else {
                        /** @type {?} */
                        var obj = enumData.reduce(( /**
                         * @param {?} r
                         * @param {?} c
                         * @return {?}
                         */function (r, c) {
                            r[c[_this.valueField]] = c[_this.textField];
                            return r;
                        }), {});
                        return JSON.stringify(obj);
                    }
                }
                return '';
            };
        /**
         * @param {?} val
         * @return {?}
         */
        EnumEditorService.prototype.toJSON = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                /** @type {?} */
                var enumData = [];
                if (val) {
                    if (typeof val === 'string') {
                        try {
                            enumData = JSON.parse(val);
                            if (this.outType === EnumOutType.object) {
                                enumData = this.convertObject2Array(enumData);
                            }
                        }
                        catch (e) {
                            enumData = [];
                            // console.warn(e);
                        }
                    }
                    else {
                        if (Array.isArray(val)) {
                            enumData = val;
                        }
                        else {
                            enumData = this.convertObject2Array(val);
                        }
                    }
                }
                return enumData;
            };
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        EnumEditorService.prototype.convertObject2Array = /**
         * @private
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                var _this = this;
                /** @type {?} */
                var _enumData = [];
                Object.keys(obj).forEach(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) {
                    var _a;
                    _enumData.push((_a = {}, _a[_this.valueField] = n, _a[_this.textField] = obj[n], _a));
                }));
                return _enumData;
            };
        EnumEditorService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        EnumEditorService.ctorParameters = function () {
            return [
                { type: i0.Injector },
                { type: i0.ComponentFactoryResolver },
                { type: i1.BsModalService },
                { type: i2.LocaleService }
            ];
        };
        /** @nocollapse */ EnumEditorService.ngInjectableDef = i0.defineInjectable({ factory: function EnumEditorService_Factory() { return new EnumEditorService(i0.inject(i0.INJECTOR), i0.inject(i0.ComponentFactoryResolver), i0.inject(i1.BsModalService), i0.inject(i2.LocaleService)); }, token: EnumEditorService, providedIn: "root" });
        return EnumEditorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumEditorFooterComponent = /** @class */ (function () {
        function EnumEditorFooterComponent(grid) {
            this.grid = grid;
            this.cls = 'f-filter-footer';
            this.showSortBtns = true;
            this.addFilter = new i0.EventEmitter();
            this.clearFilter = new i0.EventEmitter();
            this.moveTop = new i0.EventEmitter();
            this.movePrev = new i0.EventEmitter();
            this.moveNext = new i0.EventEmitter();
            this.moveBottom = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.onAddFilter = /**
         * @return {?}
         */
            function () {
                this.addFilter.emit();
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.onClear = /**
         * @return {?}
         */
            function () {
                this.clearFilter.emit();
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.onMoveTop = /**
         * @return {?}
         */
            function () {
                this.moveTop.emit();
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.onMovePrev = /**
         * @return {?}
         */
            function () {
                this.movePrev.emit();
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.onMoveNext = /**
         * @return {?}
         */
            function () {
                this.moveNext.emit();
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.onMoveBottom = /**
         * @return {?}
         */
            function () {
                this.moveBottom.emit();
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.canUse = /**
         * @return {?}
         */
            function () {
                if (this.grid.currentEnumData) {
                    return this.grid.data.length > 1;
                }
                return false;
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.canMoveUp = /**
         * @return {?}
         */
            function () {
                if (this.canUse()) {
                    return this.grid.currentEnumData.index > 0;
                }
                return false;
            };
        /**
         * @return {?}
         */
        EnumEditorFooterComponent.prototype.canMoveDown = /**
         * @return {?}
         */
            function () {
                if (this.canUse()) {
                    return this.grid.currentEnumData.index < this.grid.data.length - 1;
                }
                return false;
            };
        EnumEditorFooterComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'enum-editor-footer',
                        template: "\n    <div class=\"footer-container px-2\" style=\"height: 36px;\">\n        <button type=\"button\" (click)=\"onAddFilter()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"k-icon k-i-add\"></span> {{ 'enumEditor.addWhere' | locale }}</button>\n        <button type=\"button\" (click)=\"onClear()\" [disabled]=\"!grid.data.length\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"k-icon k-i-delete\"></span> {{ 'enumEditor.clear' | locale }}</button>\n        <ng-container *ngIf=\"showSortBtns\">\n            <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMoveTop()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"k-icon k-i-arrow-end-up\"></span>\n            {{'enumEditor.moveTop' | locale }}</button>\n        <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMovePrev()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"k-icon k-i-arrow-60-up\"></span>\n            {{'enumEditor.moveUp' | locale }}</button>\n        <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveNext()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"k-icon k-i-arrow-60-down\"></span>\n            {{'enumEditor.moveDown' | locale }}</button>\n        <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveBottom()\"\n            class=\"k-button k-button-icontext k-flat\"><span class=\"k-icon k-i-arrow-end-down\"></span>\n            {{'enumEditor.moveBottom' | locale }}</button>\n            </ng-container>\n    </div>\n    "
                    }] }
        ];
        /** @nocollapse */
        EnumEditorFooterComponent.ctorParameters = function () {
            return [
                { type: EnumEditorComponent }
            ];
        };
        EnumEditorFooterComponent.propDecorators = {
            cls: [{ type: i0.HostBinding, args: ['class',] }],
            showSortBtns: [{ type: i0.Input }],
            addFilter: [{ type: i0.Output }],
            clearFilter: [{ type: i0.Output }],
            moveTop: [{ type: i0.Output }],
            movePrev: [{ type: i0.Output }],
            moveNext: [{ type: i0.Output }],
            moveBottom: [{ type: i0.Output }]
        };
        return EnumEditorFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ENUM_EDITOR_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(( /**
         * @return {?}
         */function () { return EnumEditorInputComponent; })),
        multi: true
    };
    var EnumEditorInputComponent = /** @class */ (function (_super) {
        __extends(EnumEditorInputComponent, _super);
        function EnumEditorInputComponent(injector, ees, el) {
            var _this = _super.call(this, injector, el) || this;
            _this.injector = injector;
            _this.ees = ees;
            _this.el = el;
            _this.textField = 'name';
            _this.valueField = 'value';
            _this.outType = EnumOutType.array;
            _this.enableClear = true;
            _this.valueChange = new i0.EventEmitter();
            _this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
            _this.cd = null;
            _this.ees.dataChanged.subscribe(( /**
             * @param {?} str
             * @return {?}
             */function (str) {
                _this.updateData(str);
            }));
            _this.cd = _this.injector.get(i0.ChangeDetectorRef, null);
            return _this;
        }
        /**
         * @private
         * @param {?} str
         * @return {?}
         */
        EnumEditorInputComponent.prototype.updateData = /**
         * @private
         * @param {?} str
         * @return {?}
         */
            function (str) {
                this.value = str;
                if (this.cd) {
                    this.cd.detectChanges();
                }
                this.valueChange.emit(str);
                this.onModelChange(str);
                this.onModelTouched(str);
            };
        /**
         * @return {?}
         */
        EnumEditorInputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        EnumEditorInputComponent.prototype.showDialog = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var enumData = this.convertValue2JSON();
                this.ees.showDialog(enumData, {
                    textField: this.textField,
                    valueField: this.valueField,
                    outType: this.outType
                });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EnumEditorInputComponent.prototype.onClear = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.updateData('');
            };
        /**
         * @param {?} val
         * @return {?}
         */
        EnumEditorInputComponent.prototype.writeValue = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                if (val && typeof val === 'object') {
                    this.value = JSON.stringify(val);
                }
                else {
                    this.value = val || '';
                }
            };
        /**
         * @private
         * @return {?}
         */
        EnumEditorInputComponent.prototype.convertValue2JSON = /**
         * @private
         * @return {?}
         */
            function () {
                return this.ees.toJSON(this.value);
            };
        EnumEditorInputComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'enum-editor-input',
                        template: "\n    <input-group #ig style=\"width: 100%\"\n        [groupText]=\"groupIcon\"\n        (clear)=\"onClear($event)\"\n        (clickHandle)=\"showDialog()\"\n        [readonly] = \"readonly\"\n        [editable] = \"editable\"\n        [enableClear] = \"enableClear\"\n        [(value)]=\"value\">\n    </input-group>\n    ",
                        providers: [
                            ENUM_EDITOR_VALUE_ACCESSOR,
                            EnumEditorService
                        ]
                    }] }
        ];
        /** @nocollapse */
        EnumEditorInputComponent.ctorParameters = function () {
            return [
                { type: i0.Injector },
                { type: EnumEditorService },
                { type: i0.ElementRef }
            ];
        };
        EnumEditorInputComponent.propDecorators = {
            value: [{ type: i0.Input }],
            textField: [{ type: i0.Input }],
            valueField: [{ type: i0.Input }],
            outType: [{ type: i0.Input }],
            enableClear: [{ type: i0.Input }],
            valueChange: [{ type: i0.Output }],
            inputGroupRef: [{ type: i0.ViewChild, args: ['ig',] }]
        };
        return EnumEditorInputComponent;
    }(uiLookup.LookupComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumEditorModule = /** @class */ (function () {
        function EnumEditorModule() {
        }
        /**
         * @return {?}
         */
        EnumEditorModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: EnumEditorModule,
                    providers: [
                        EnumEditorService
                    ]
                };
            };
        EnumEditorModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            EnumEditorComponent,
                            EnumEditorInputComponent,
                            EnumEditorFooterComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiInputGroup.InputGroupModule,
                            uiCommon.FarrisCommonModule,
                            uiMessager.MessagerModule.forRoot(),
                            uiPerfectScrollbar.PerfectScrollbarModule,
                            uiLookup.LookupModule,
                            i2.LocaleModule
                        ],
                        entryComponents: [
                            EnumEditorComponent
                        ],
                        exports: [EnumEditorComponent, EnumEditorInputComponent]
                    },] }
        ];
        return EnumEditorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.EnumOutType = EnumOutType;
    exports.EnumEditorService = EnumEditorService;
    exports.EnumEditorComponent = EnumEditorComponent;
    exports.EnumEditorFooterComponent = EnumEditorFooterComponent;
    exports.ENUM_EDITOR_VALUE_ACCESSOR = ENUM_EDITOR_VALUE_ACCESSOR;
    exports.EnumEditorInputComponent = EnumEditorInputComponent;
    exports.EnumEditorModule = EnumEditorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-enum-editor.umd.js.map