import { IdService, CommonUtils } from '@farris/ui-common';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DatalistModule } from '@farris/ui-datalist';
import { ComboListModule } from '@farris/ui-combo-list';
import { LookupModule } from '@farris/ui-lookup';
import { FarrisFormsModule } from '@farris/ui-forms';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { QuerySolutionService, FilterConditionModule } from '@farris/ui-filter-condition';
import { of } from 'rxjs';
import { InputGroupModule } from '@farris/ui-input-group';
import { cloneDeep } from 'lodash-es';
import { DomSanitizer } from '@angular/platform-browser';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { SwitchModule } from '@farris/ui-switch';
import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, ViewChild, ViewEncapsulation, HostListener, Injectable, ComponentFactoryResolver, Injector, ApplicationRef, Pipe, NgModule, Optional, defineInjectable, inject, INJECTOR } from '@angular/core';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// export function deepCopy (data) {
//     return JSON.parse(JSON.stringify(data));
//   }
/**
 * @param {?} obj
 * @return {?}
 */
function deepCopy(obj) {
    /** @type {?} */
    var newobj = obj.constructor === Array ? [] : {};
    if (typeof obj !== 'object') {
        return obj;
    }
    else {
        for (var i in obj) {
            if (typeof obj[i] === 'object') { //判断对象的这条属性是否为对象
                //判断对象的这条属性是否为对象
                /** @type {?} */
                const type = Object.prototype.toString.call(obj[i]);
                if (type == '[object Null]') {
                    newobj[i] = obj[i];
                }
                else {
                    newobj[i] = deepCopy(obj[i]); //若是对象进行嵌套调用
                }
            }
            else {
                newobj[i] = obj[i];
            }
        }
    }
    return newobj; //返回深度克隆后的对象
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 用于显示点击 简单筛选 项的下拉面板
class FilterPanelComponent {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} filterConditionSer
     */
    constructor(renderer, elementRef, filterConditionSer) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.filterConditionSer = filterConditionSer;
        this._hide = false;
        this.hidePanel = new EventEmitter();
        this.submit = new EventEmitter();
        this.filterSubmit = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.dataChange = new EventEmitter();
        this.canSubmit = false;
        this.fiexedLeft = true;
        // 全局标识，初始化标识元素没有发生mousemove
        this.hasMove = false;
        this._documentMouseUpEvent = null;
        this.currentItem = null;
        this.zIndex = 1060;
        this.isNil = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => val === null || val === undefined || val === '');
        this.el = this.elementRef.nativeElement;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set hide(val) {
        this._hide = val;
    }
    /**
     * @return {?}
     */
    get hide() {
        return this._hide;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._documentMouseUpEvent = this.renderer.listen(this.filterPanel.nativeElement, 'mouseup', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            event.stopPropagation();
            /** @type {?} */
            const tar = event.target;
            if (tar.closest('#mainContainerTabset')) {
                // self.hidePanel.emit(event);
                this.panelFilterCancel(event);
                return;
            }
            if (this.hasMove) {
                return;
            }
            if (!tar.closest('.f-filter-panel')
                && !tar.closest('.modal')
                && !tar.closest('.overlay-container') && !tar.closest('.overlay-pane')) {
                // self.hidePanel.emit(event);
                this.panelFilterCancel(event);
            }
            this.hasMove = false;
        }));
        if (this.option.item && (this.option.item.control.controltype == 'dropdown' || this.option.item.control.controltype == 'radio')) {
            this.canSubmit = true;
        }
        if (this.injector) {
            this.idService = this.injector.get(IdService);
        }
        this.currentItem = cloneDeep({ value: Object.assign({}, this.option.item.value), type: this.option.item.control.controltype, id: this.option.item.id });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const _panel = this.el.querySelector('.f-filter-panel');
        if (_panel && this.option.target) {
            /** @type {?} */
            const h = _panel.offsetHeight;
            /** @type {?} */
            const rect = this.option.target.getBoundingClientRect();
            if (window['innerHeight'] - this.option.top < h) {
                if (rect.top > h) {
                    this.option.top = rect.top - h - 14;
                }
                else {
                    this.option.top = 32;
                }
                /** @type {?} */
                const arrow = this.el.querySelector('.f-filter-panel-arrow');
                if (arrow) {
                    arrow.style.display = 'none';
                }
            }
        }
        if (_panel && this.option.right) {
            if (this.option.left + _panel.offsetWidth > window['innerWidth']) {
                // 超出显示在做
                this.fiexedLeft = false;
                this.option.left = this.option.right - _panel.offsetWidth;
            }
            else {
                this.fiexedLeft = true;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._documentMouseUpEvent) {
            this._documentMouseUpEvent();
            this._documentMouseUpEvent = null;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseDown($event) {
        this.hasMove = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseMove($event) {
        this.hasMove = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (this.option.item.control.controltype == 'radio') {
            this.panelFilterSubmit();
        }
        else if (this.option.item.control.controltype == 'text' && event['type'] && event['type'] === 'enter') {
            this.panelFilterSubmit();
        }
        // this.filterItem = event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    panelFilterCancel($event) {
        // $event._instanceId = this.id;
        this.hidePanel.emit($event);
    }
    /**
     * @param {?=} clear
     * @return {?}
     */
    panelFilterSubmit(clear = false) {
        if (!clear && !this.canSubmit) {
            return;
        }
        if (this.option.item.control.controltype === 'text') {
            /** @type {?} */
            const farrisSearchRecord = this.option.item.valueText;
            /** @type {?} */
            let farrisSearchRecordArray = [];
            /** @type {?} */
            const storagelabelCode = this.option.item.labelCode;
            /** @type {?} */
            let filterPanelArray = JSON.parse(localStorage.getItem(this.option.localStorageKey));
            if (Array.isArray(filterPanelArray)) {
                filterPanelArray = null;
            }
            if (!filterPanelArray || !filterPanelArray[storagelabelCode] || !filterPanelArray[storagelabelCode].length
                && farrisSearchRecord && farrisSearchRecord.length) {
                farrisSearchRecordArray.push(farrisSearchRecord);
            }
            else {
                farrisSearchRecordArray = filterPanelArray[storagelabelCode];
                /** @type {?} */
                const index = filterPanelArray[storagelabelCode].indexOf(farrisSearchRecord);
                if (index < 0 && farrisSearchRecord && farrisSearchRecord.length) {
                    farrisSearchRecordArray.unshift(farrisSearchRecord);
                }
                farrisSearchRecordArray = farrisSearchRecordArray.slice(0, 6);
            }
            if (filterPanelArray == null) {
                filterPanelArray = {};
            }
            filterPanelArray[storagelabelCode] = farrisSearchRecordArray;
            localStorage.setItem(this.option.localStorageKey, JSON.stringify(filterPanelArray));
        }
        /** @type {?} */
        const conditions = this.filterConditionSer.setFilterConditions(this.option.item);
        if (!clear) {
            this.filterSubmit.emit({
                item: this.option.item,
                filter: conditions
            });
        }
        this.submit.emit(this.option.item);
    }
    /**
     * @return {?}
     */
    panelFilterClear() {
        this.panelFilterempty();
        this.panelFilterSubmit(true);
        this.clearFilter.emit(this.option.item);
    }
    /**
     * @return {?}
     */
    panelFilterempty() {
        this.filterClearValue(this.option.item);
        this.option.item.valueText = '';
        this.option.item.filled = false;
        this.option.item = deepCopy(this.option.item);
        this.canSubmit = false;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    filterClearValue(item) {
        switch (item.control.controltype) {
            case 'text':
            case 'search':
            case 'singleDate':
            case 'year':
            case 'month':
            case 'dropdown':
            case 'singlenumber':
            case 'radio':
                item.value.value = null;
                break;
            case 'date':
            case 'datetime':
            case 'monthRange':
            case 'yearRange':
                item.value.startTime = null;
                item.value.endTime = null;
                break;
            case 'number':
                item.value.startValue = null;
                item.value.endValue = null;
                break;
            case 'help':
                item.value.value = [];
                item.value.valueField = null;
                item.value.textValue = null;
                break;
            case 'checkboxgroup':
            case 'bool-check':
                item.value.value = [];
                break;
            case 'input-group':
                item.value.value = [];
                item.value.textValue = null;
                item.value.textField = null;
                item.value.isInputText = null;
                break;
            case 'flexibleNumber':
            case 'flexibleDate':
                item.value.startValue = null;
                item.value.endValue = null;
                item.value.value = null;
                break;
            default:
                item.value.value = null;
                break;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSubmitChange(event) {
        this.canSubmit = event;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    buildSmartHelpKey(value) {
        if (this.idService) {
            /** @type {?} */
            let prefix = '';
            if (location.hash) {
                /** @type {?} */
                const pathArr = location.hash.split('?');
                prefix = pathArr ? pathArr[0] : '';
            }
            else {
                /** @type {?} */
                const pathArr = location.pathname.split('/');
                prefix = pathArr ? pathArr[pathArr.length - 1] : '';
            }
            return this.idService.encrypt(prefix + '/list-filter/' + value);
        }
        else {
            return 'list-filter/' + value;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    updateCurrentItem($event) {
        this.currentItem = cloneDeep({ value: Object.assign({}, $event.value), type: $event.control.controltype, id: $event.id });
        this.dataChange.emit(this.currentItem);
    }
    /**
     * @return {?}
     */
    canClearSearch() {
        /** @type {?} */
        const item = this.currentItem;
        if (!item) {
            return true;
        }
        switch (item.type) {
            case 'text':
            case 'search':
            case 'singleDate':
            case 'year':
            case 'month':
            case 'dropdown':
            case 'singlenumber':
            case 'radio':
                return !this.isNil(item.value.value);
            case 'date':
            case 'datetime':
            case 'monthRange':
            case 'yearRange':
                return !this.isNil(item.value.startTime) || !this.isNil(item.value.endTime);
            case 'help':
            case 'checkboxgroup':
            case 'bool-check':
                return item.value.value && item.value.value.length;
            case 'input-group':
                return (item.value.value && item.value.value.length) || item.value.textValue;
            case 'number':
            case 'flexibleNumber':
            case 'flexibleDate':
                if (item.value.single) {
                    return !this.isNil(item.value.value);
                }
                return !this.isNil(item.value.startValue) || !this.isNil(item.value.endValue);
            default:
                return !this.isNil(item.value.value);
        }
    }
}
FilterPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-filter-panel',
                template: "<div class=\"f-filter-panel-wrapper\" #filterPanel [ngClass]=\"{'d-none': hide}\" [style.zIndex]=\"zIndex\">\r\n    <div  [class]=\"'f-filter-panel f-filter-panel-'+(option.item && option.item.control.controltype)\"\r\n        [ngStyle]=\"{\r\n            'left': option.left > 0 ? option.left+'px' : '0px',\r\n            'top': option.top > 0 ? option.top+'px' : '0px',\r\n            'width': (option.width && option.width > 0) ? option.width+'px':'',\r\n            'height': (option.height && option.height > 0) ? option.height+'px':'',\r\n            'max-width': (option.maxWidth && option.maxWidth > 0) ? option.maxWidth+'px':'',\r\n            'max-height': (option.maxHeight && option.maxHeight > 0) ? option.maxHeight+'px':''\r\n        }\">\r\n        <div class=\"f-filter-panel-inner\" [ngClass]=\"{'f-filter-panel-inner-xs': option.item && option.item.control.controltype == 'radio','f-filter-panel-inner-auto': !option.item}\">\r\n            <div class=\"f-filter-panel-arrow\" [ngStyle]=\"{'left':fiexedLeft?'26px':'auto','right':fiexedLeft?'auto':'26px'}\"></div>\r\n            <div class=\"f-filter-panel-extend\" *ngIf=\"option.panelExtendTemplate\">\r\n                <ng-container [ngTemplateOutlet]=\"option.panelExtendTemplate\"></ng-container>\r\n            </div>\r\n            <div class=\"f-filter-panel-header\" *ngIf=\"option.showLable && option.item && option.item.control.controltype != 'radio'\">\r\n                <div class=\"panel-header-title\">\r\n                    {{ 'filterPanel.filter' | locale }}\r\n                </div>\r\n                <!-- <div class=\"panel-header-toolbar\"></div> -->\r\n            </div>\r\n            <div class=\"f-filter-panel-content\" *ngIf=\"option.item\">\r\n                <div class=\"f-filter-panel-form\">\r\n                    <ng-container [ngSwitch]=\"option.item.control.controltype\">\r\n                        <div class=\"filter-input-item filter-type-input position-relative\" *ngSwitchCase=\"'text'\">\r\n                            <panel-filter-input [item]=\"option.item\" [localStorageKey]=\"option.localStorageKey\"\r\n                                (searchHandle)=\"onSearch($event)\" (submitChange)=\"onSubmitChange($event)\" class=\"form-group farris-form-group\"></panel-filter-input>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-search\" *ngSwitchCase=\"'search'\">\r\n                            <panel-filter-search [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" (submitChange)=\"onSubmitChange($event)\" class=\"form-group farris-form-group\"></panel-filter-search>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'singleDate'\">\r\n                            <panel-filter-date [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" (submitChange)=\"onSubmitChange($event)\" class=\"form-group farris-form-group\"></panel-filter-date>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'year'\">\r\n                            <panel-filter-date [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" [showType]=\"'3'\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-date>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'month'\">\r\n                            <panel-filter-date [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" [showType]=\"'2'\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-date>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'date'\">\r\n                            <panel-filter-daterange [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-daterange>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'datetime'\">\r\n                            <panel-filter-daterange [item]=\"option.item\" [showTime]=\"true\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-daterange>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'monthRange'\">\r\n                            <panel-filter-daterange [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" [showType]=\"'2'\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-daterange>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'yearRange'\">\r\n                            <panel-filter-daterange [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" [showType]=\"'3'\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-daterange>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-dropdown\" *ngSwitchCase=\"'dropdown'\">\r\n                            <panel-filter-dropdown [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\"  (submitChange)=\"onSubmitChange($event)\"></panel-filter-dropdown>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-number\" *ngSwitchCase=\"'number'\">\r\n                            <panel-filter-number [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-number>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-single-number\" *ngSwitchCase=\"'singlenumber'\">\r\n                            <panel-filter-single-number [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-single-number>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-help\" *ngSwitchCase=\"'help'\">\r\n                            <panel-filter-help [item]=\"option.item\" [instanceId]=\"buildSmartHelpKey(option.item.fieldCode)\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-help>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-checkboxgroup\" [class.checkboxgroup-has-search]=\"option.item.control.enableSearch\" *ngSwitchCase=\"'checkboxgroup'\">\r\n                            <panel-filter-checkbox [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\"\r\n                                style=\"white-space: nowrap;\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-checkbox>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-radio\" *ngSwitchCase=\"'radio'\">\r\n                            <panel-filter-radio [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\"\r\n                                style=\"white-space: nowrap;\"></panel-filter-radio>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-radio\" *ngSwitchCase=\"'input-group'\">\r\n                            <panel-filter-inputgroup [item]=\"option.item\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\"\r\n                                style=\"white-space: nowrap;\"  (submitChange)=\"onSubmitChange($event)\"></panel-filter-inputgroup>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-flexiblenumber\" *ngSwitchCase=\"'flexibleNumber'\">\r\n                            <panel-filter-flexiblenumber [item]=\"option.item\" (itemChange)=\"updateCurrentItem($event)\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\"\r\n                                style=\"white-space: nowrap;\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-flexiblenumber>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-flexibledate\" *ngSwitchCase=\"'flexibleDate'\">\r\n                            <panel-filter-flexibledate [item]=\"option.item\"  (itemChange)=\"updateCurrentItem($event)\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\"\r\n                                style=\"white-space: nowrap;\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-flexibledate>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-boolcheck\" *ngSwitchCase=\"'bool-check'\">\r\n                            <panel-filter-checkbox [item]=\"option.item\" [boolcheck]=\"true\"\r\n                                (searchHandle)=\"onSearch($event)\" class=\"form-group farris-form-group\"\r\n                                style=\"white-space: nowrap;\" (submitChange)=\"onSubmitChange($event)\"></panel-filter-checkbox>\r\n                        </div>\r\n                        <div class=\"filter-input-item filter-type-default\" *ngSwitchDefault>\r\n                            <panel-filter-input [item]=\"option.item\" [localStorageKey]=\"option.localStorageKey\"\r\n                                (searchHandle)=\"onSearch($event)\" (submitChange)=\"onSubmitChange($event)\" class=\"form-group farris-form-group\"></panel-filter-input>\r\n                        </div>\r\n                    </ng-container>\r\n                </div>\r\n\r\n            </div>\r\n            <div class=\"f-filter-panel-footer\" *ngIf=\"option.item && option.item.control.controltype != 'radio'\">\r\n                <div class=\"filer-panel-clear\">\r\n                    <button class=\"btn btn-link\" (click)=\"panelFilterClear()\"  [disabled]=\"!canClearSearch()\">{{ 'filterPanel.reset' | locale }}</button>\r\n                    <!-- tfs 549371 2023-03-24 -->\r\n                    <!-- <button class=\"btn btn-link btn-empty\" (click)=\"panelFilterempty()\">{{ 'filterPanel.empty' | locale }}</button> -->\r\n                </div>\r\n                <div class=\"filter-panel-btns\">\r\n                    <button class=\"btn btn-secondary\" (click)=\"panelFilterCancel($event)\">{{ 'filterPanel.cancel' | locale }}</button>\r\n                    <button class=\"filter-panel-submit btn btn-primary\" (click)=\"panelFilterSubmit()\" [disabled]=\"!canSubmit\">{{ 'filterPanel.confirm' | locale }}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".filter-type-checkboxgroup.checkboxgroup-has-search{padding-top:0;position:relative;}"]
            }] }
];
/** @nocollapse */
FilterPanelComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: QuerySolutionService }
];
FilterPanelComponent.propDecorators = {
    option: [{ type: Input }],
    hide: [{ type: Input }],
    hidePanel: [{ type: Output }],
    submit: [{ type: Output }],
    filterSubmit: [{ type: Output }],
    clearFilter: [{ type: Output }],
    dataChange: [{ type: Output }],
    filterPanel: [{ type: ViewChild, args: ['filterPanel',] }],
    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onMouseMove: [{ type: HostListener, args: ['mousemove', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterPanelService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        // private instanceMap = new Map();
        this.commonUtils = null;
        this.commonUtils = this.injector.get(CommonUtils, null);
        if (!this.commonUtils) {
            this.commonUtils = new CommonUtils();
        }
    }
    /**
     * @param {?} option
     * @return {?}
     */
    showPanel(option) {
        /** @type {?} */
        const instanceID = option.localStorageKey;
        this.hidePanel();
        /** @type {?} */
        const containerFac = this.cfr.resolveComponentFactory(FilterPanelComponent);
        /** @type {?} */
        const filterPanelContainer = containerFac.create(this.injector);
        this.appRef.attachView(filterPanelContainer.hostView);
        document.querySelector('body').appendChild(filterPanelContainer.location.nativeElement);
        filterPanelContainer.instance.option = option;
        filterPanelContainer.instance.injector = this.injector;
        filterPanelContainer.instance.zIndex = this.commonUtils.getFloatingLayerIndex();
        // filterPanelContainer.instance.clear.subscribe((event)=>{
        //   this.clear();
        // });
        filterPanelContainer.changeDetectorRef.markForCheck();
        filterPanelContainer.changeDetectorRef.detectChanges();
        // if (!this.instanceMap.has(instanceID)) {
        //     this.instanceMap.set(instanceID, filterPanelContainer);
        // }
        this.filterPanelContainer = filterPanelContainer;
        return filterPanelContainer.instance;
    }
    /**
     * @return {?}
     */
    hidePanel() {
        //  const filterPanelContainer = this.instanceMap.get(id);
        if (this.filterPanelContainer) {
            this.filterPanelContainer.instance.hide = true;
            this.filterPanelContainer.destroy();
            this.filterPanelContainer = null;
            // this.instanceMap.delete(id);
        }
    }
}
FilterPanelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FilterPanelService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
/** @nocollapse */ FilterPanelService.ngInjectableDef = defineInjectable({ factory: function FilterPanelService_Factory() { return new FilterPanelService(inject(ComponentFactoryResolver), inject(INJECTOR), inject(ApplicationRef)); }, token: FilterPanelService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ControlType = {
    Text: 0,
    //DateTime=1,
    Help: 1,
    DropDown: 2,
    DateRange: 3,
    NumberRange: 4,
    Search: 5,
    Date: 6,
    CheckboxGroup: 7,
    DateRangeTime: 8,
    Radio: 9,
    Year: 10,
    Month: 11,
    MonthRange: 12,
    YearRange: 13,
    InputGroup: 14,
    Number: 15,
};
ControlType[ControlType.Text] = 'Text';
ControlType[ControlType.Help] = 'Help';
ControlType[ControlType.DropDown] = 'DropDown';
ControlType[ControlType.DateRange] = 'DateRange';
ControlType[ControlType.NumberRange] = 'NumberRange';
ControlType[ControlType.Search] = 'Search';
ControlType[ControlType.Date] = 'Date';
ControlType[ControlType.CheckboxGroup] = 'CheckboxGroup';
ControlType[ControlType.DateRangeTime] = 'DateRangeTime';
ControlType[ControlType.Radio] = 'Radio';
ControlType[ControlType.Year] = 'Year';
ControlType[ControlType.Month] = 'Month';
ControlType[ControlType.MonthRange] = 'MonthRange';
ControlType[ControlType.YearRange] = 'YearRange';
ControlType[ControlType.InputGroup] = 'InputGroup';
ControlType[ControlType.Number] = 'Number';
class PanelControlTypeXPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        /** @type {?} */
        let type;
        switch (value.control.getControlType()) {
            case ControlType.Text:
                type = 'input';
                break;
            case ControlType.Search:
                type = 'search';
                break;
            case ControlType.Date:
                type = 'date';
                break;
            case ControlType.DateRange:
                type = 'daterange';
                break;
            case ControlType.DateRangeTime:
                type = 'daterangetime';
                break;
            case ControlType.Year:
                type = 'year';
                break;
            case ControlType.Month:
                type = 'month';
                break;
            case ControlType.MonthRange:
                type = 'monthrange';
                break;
            case ControlType.YearRange:
                type = 'yearrange';
                break;
            case ControlType.DropDown:
                type = 'dropdown';
                break;
            case ControlType.NumberRange:
                type = 'number';
                break;
            case ControlType.Help:
                type = 'help';
                break;
            case ControlType.CheckboxGroup:
                type = 'checkboxgroup';
                break;
            case ControlType.Radio:
                type = 'radio';
                break;
            case ControlType.InputGroup:
                type = 'input-group';
                break;
            case ControlType.Number:
                type = 'singlenumber';
                break;
            default:
                type = 'input';
                break;
        }
        return type;
    }
}
PanelControlTypeXPipe.decorators = [
    { type: Pipe, args: [{ name: 'panelControlType' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 含义说明
* this._item
  A、control属性的含义{
    enumValues:枚举项数组[{value:枚举项的值,name:枚举项的显示文本}],
    isExtend:是否显示在扩展面板
  B、value 属性
     value 对应当前多选组件的值
  C、valueText 属性 --对应文本
}
 */
class PanelfilterCheckboxComponent {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.checkedAll = false;
        this.enableSearch = false;
        this.boolcheck = false;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.indeterminate = true;
        this.boolCheckState = 'indeterminate';
        // 数据源
        this.checkboxDataSource = new Array();
        // 当前查询结果
        this.allCols = new Array();
        // 在当前查询结果的选中值
        this.allColsCheckValue = [];
        //不在当前的查询结果中的选中值
        this.notInCurResult = [];
        // 是否设置查询时候的宽度
        this.hasSetWidthSearching = false;
        // 查询提示
        this.searchPlaceHolder = "请输入名称";
        this.checkallCheckboxDisabled = false;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        this.getDataSource();
        //this.checkValue = this._item.value.getOriginalValue();
        if (!this._item.hasOwnProperty('value'))
            this._item.value = { value: [] };
        if (this._item.hasOwnProperty('value')) {
            this.checkValue = this._item.value.value;
            //保存值
            this.allColsCheckValue = this.checkValue;
        }
        else {
            this._item.value.value = [];
        }
        if (this.boolcheck) {
            if (this.checkValue.length) {
                this.boolchecked = this.checkValue[0];
                if (this.boolchecked)
                    this.boolCheckState = 'checked';
                else
                    this.boolCheckState = 'unchecked';
            }
            else
                this.boolCheckState = 'indeterminate';
        }
        this.enableSearch = data.control.hasOwnProperty("enableSearch") ? data.control.enableSearch : false;
        if (this._item.value.value.length == 0)
            this.checkedAll = false;
        else if (this._item.control['enumValues'] && this._item.value.value.length == this._item.control['enumValues'].length)
            this.checkedAll = true;
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setLocaleData();
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this._item.control) {
            /** @type {?} */
            let checkboxList = (this._item.control);
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.checkboxDataSource.push(Object.assign({}, element));
                }));
                this.allCols = this.checkboxDataSource;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        /** @type {?} */
        let checkboxValue = [];
        if (event) {
            /** @type {?} */
            let checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this.allColsCheckValue = checkboxValue;
        }
        else {
            this.allColsCheckValue = [];
        }
        this.onlyUpdateCheckValue();
        this.searchResultIsCheckAll();
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getValueText() {
        /** @type {?} */
        const enumValue = (this._item.control).enumValues;
        /** @type {?} */
        const value = (this._item.value).value;
        if (enumValue && enumValue.length && value && value.length) {
            /** @type {?} */
            let texts = [];
            for (let i = 0; i <= value.length; i++) {
                /** @type {?} */
                const enums = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return val['value'] == value[i];
                }));
                if (enums) {
                    texts.push(enums['name']);
                }
            }
            this._item.valueText = texts.join(',');
        }
        else {
            this._item.valueText = '';
        }
    }
    /**
     * 是否可以提交
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || Object.keys(val.value).length === 0) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
    /**
     * 点击全选Checkbox
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        if (this.checkallCheckboxDisabled) {
            // 全选checkbox是否禁用
            return;
        }
        this.checkedAll = !this.checkedAll;
        if (this.checkedAll) {
            // 全选
            this.setCheckedAll();
        }
        else {
            // 取消全选
            this.setUnCheckedAll();
        }
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * 设置全选
     * 23年12月13日--增加过滤，改变此方法
     * @return {?}
     */
    setCheckedAll() {
        if (this.allCols && this.allCols.length) {
            /** @type {?} */
            let checkboxValue = [];
            checkboxValue = this.allCols.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.value));
            this.allColsCheckValue = [].concat(checkboxValue);
            this.onlyUpdateCheckValue();
        }
    }
    /**
     * 取消全选
     * @private
     * @return {?}
     */
    setUnCheckedAll() {
        if (this.allCols && this.allCols.length) {
            this.allColsCheckValue = [];
            this.onlyUpdateCheckValue();
        }
    }
    /**
     * @return {?}
     */
    handleCheckClick() {
        if (this.boolCheckState == 'indeterminate') {
            this.boolCheckState = 'checked';
            this.boolchecked = true;
            this._item.value.value = [true];
        }
        else if (this.boolCheckState == 'checked') {
            this.boolCheckState = 'unchecked';
            this.boolchecked = false;
            this._item.value.value = [false];
        }
        else if (this.boolCheckState == 'unchecked') {
            this.boolCheckState = 'indeterminate';
            this.boolchecked = null;
            this._item.value.value = [];
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * 清空查询
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    clearSearch($event, input) {
        if (input && input.value) {
            this.filterItems('');
            input.value = '';
        }
    }
    /**
     * 开始查询
     * @param {?} $event
     * @return {?}
     */
    searchItems($event) {
        /** @type {?} */
        const txt = $event.target.value;
        this.filterItems(txt);
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    searchInputFocus(ev) {
        if (!this.hasSetWidthSearching) {
            /** @type {?} */
            let findParEl = this.searchInput.nativeElement.closest('.checkboxgroup-has-search');
            this.hasSetWidthSearching = true;
            findParEl.style.width = findParEl.offsetWidth + 'px';
        }
    }
    /**
     * 过滤项
     * @private
     * @param {?=} searchWords
     * @return {?}
     */
    filterItems(searchWords = '') {
        /** @type {?} */
        let cols = [];
        searchWords = searchWords.trim();
        if (searchWords) {
            /** @type {?} */
            let searchArray = searchWords.split(" ");
            /** @type {?} */
            let tallColsCheckValue = [];
            this.notInCurResult = [];
            cols = this.checkboxDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                let waitSearchStr = item.name.toLowerCase();
                /** @type {?} */
                let curResult = false;
                // 空格做为同一个匹配条件
                /** @type {?} */
                let findNotContain = searchArray.findIndex((/**
                 * @param {?} searchStr
                 * @return {?}
                 */
                searchStr => {
                    // A B 两个条件过滤
                    if (searchStr == '') {
                        return false;
                    }
                    return waitSearchStr.indexOf(searchStr.toLowerCase()) == -1;
                }));
                curResult = findNotContain == -1;
                if (curResult) {
                    //在查询结果内
                    if (this.checkValue.some((/**
                     * @param {?} checkItem
                     * @return {?}
                     */
                    (checkItem) => checkItem == item.value))) {
                        //且在选择的值范围内
                        tallColsCheckValue.push(item.value);
                    }
                }
                return curResult;
            }));
            this.allCols = cols;
            this.allColsCheckValue = tallColsCheckValue;
            // 不在当前选中的数据
            this.notInCurResult = this.checkValue.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => tallColsCheckValue.indexOf(x) === -1));
        }
        else {
            this.allCols = this.checkboxDataSource;
            //如果是查询出全部数据
            this.allColsCheckValue = [].concat(this.checkValue);
            this.notInCurResult = [];
        }
        // 更改全选状态
        this.searchResultIsCheckAll();
    }
    /**
     * 查询结果全选的状态
     * @private
     * @return {?}
     */
    searchResultIsCheckAll() {
        // 如果无结果
        if (this.allCols.length == 0) {
            this.checkedAll = false;
            this.checkallCheckboxDisabled = true;
        }
        else {
            if (this.allCols.length > this.allColsCheckValue.length) {
                // 查询结果的长度比已选元素多
                this.checkedAll = false;
            }
            else {
                this.checkedAll = true;
            }
            this.checkallCheckboxDisabled = false;
        }
    }
    /**
     * 更新状态
     * @private
     * @return {?}
     */
    onlyUpdateCheckValue() {
        this.checkValue = [].concat(this.allColsCheckValue, this.notInCurResult);
        this._item.value.value = this.checkValue;
    }
    /**
     * @private
     * @return {?}
     */
    setLocaleData() {
        if (this.enableSearch && this.localeService) {
            this.searchPlaceHolder = this.localeService.getValue('filterPanel.searchPlaceHolder') || "请输入名称";
        }
    }
}
PanelfilterCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-checkbox',
                template: "<div class=\"f-cmp-inputgroup mb-2\"  *ngIf=\"!boolcheck&&enableSearch\" style=\"position: sticky;z-index: 1;top:0;\">\r\n    <div class=\"input-group\">\r\n        <input #searchInput class=\"form-control\" type=\"text\" [placeholder]=\"searchPlaceHolder\"  (input)=\"searchItems($event)\" (focus)=\"searchInputFocus($event)\"/>\r\n            <div class=\"input-group-append f-cursor-pointer\" (click)=\"clearSearch($event,searchInput)\">\r\n                <span class=\"input-group-text\">\r\n                    <i class=\"f-icon\"  [ngClass]=\"searchInput.value?'f-icon-close':'f-icon-search'\"></i>\r\n                </span>                \r\n            </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" *ngIf=\"!boolcheck\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\" [disabled]=\"checkallCheckboxDisabled\">\r\n    <label class=\"custom-control-label\" (click)=\"handleClick($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<ng-container *ngIf=\"!boolcheck; else elseTemplate\">\r\n    <farris-checkboxgroup [value]=\"allColsCheckValue\" [horizontal]=\"false\"\r\n        [data]=\"allCols\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup>\r\n</ng-container>\r\n<ng-template #elseTemplate>\r\n    <div class=\"custom-control custom-checkbox custom-control-inline filter-bool-checkbox\">\r\n        <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"boolchecked\" [indeterminate]=\"boolCheckState == 'indeterminate'\">\r\n        <label class=\"custom-control-label\" (click)=\"handleCheckClick()\">{{item.fieldName || item.name}}</label>\r\n    </div>\r\n</ng-template>\r\n\r\n"
            }] }
];
/** @nocollapse */
PanelfilterCheckboxComponent.ctorParameters = () => [
    { type: LocaleService, decorators: [{ type: Optional }] }
];
PanelfilterCheckboxComponent.propDecorators = {
    enableSearch: [{ type: Input }],
    boolcheck: [{ type: Input }],
    item: [{ type: Input }],
    searchInput: [{ type: ViewChild, args: ['searchInput',] }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelDateComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.initDate();
        }), 0);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    initDate() {
        if (this._item.placeHolder) {
            this.placeholder = this._item.placeHolder || '';
        }
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = { value: '' };
        }
        if (this.item && this._item.value
            && (this._item.value).value) {
            this.date = this._item.value.value;
        }
        else {
            this.date = undefined;
        }
        /** @type {?} */
        const format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');
        this.dateFormat = this._item.control.format ? this._item.control.format : format;
        this.setSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        if (event.returnFormatted) {
            (this._item.value).value = event.returnFormatted;
        }
        else {
            (this._item.value).value = '';
        }
        // this._item.valueText = this._item.value.value;
        this._item.valueText = event.formatted;
        this.setSubmitChange();
        this.searchHandle.emit(event);
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || !val.value) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-date',
                template: "\r\n<farris-datepicker\r\n    [(ngModel)]=\"date\"\r\n    [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\"\r\n    [editable]=\"false\" [dateFormat]=\"dateFormat\"\r\n    (valueChange)=\"onDateChange($event)\"\r\n    [placeholder]=\"placeholder\" [showType]=\"showType\">\r\n</farris-datepicker>"
            }] }
];
/** @nocollapse */
PanelDateComponent.ctorParameters = () => [];
PanelDateComponent.propDecorators = {
    item: [{ type: Input }],
    showType: [{ type: Input }],
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} num
 * @param {?} showtime
 * @param {?} type
 * @return {?}
 */
function getLastNumMonth(num, showtime, type) {
    /** @type {?} */
    let now = new Date();
    /** @type {?} */
    let year = now.getFullYear();
    /** @type {?} */
    let month = now.getMonth() + 1;
    //0-11表示1-12月
    /** @type {?} */
    let day = now.getDate();
    /** @type {?} */
    let hour = now.getHours();
    /** @type {?} */
    let min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
        : new Date().getMinutes();
    /** @type {?} */
    let sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
        : new Date().getSeconds();
    /** @type {?} */
    let dateObj = {};
    /** @type {?} */
    const time = hour + ':' + min + ':' + sec;
    // dateObj['endTime'] = year + '-' + month + '-' + day;
    /** @type {?} */
    let endMonth = month < 10 ? '0' + month : month;
    /** @type {?} */
    let endDay = day < 10 ? '0' + day : day;
    if (type == '2') {
        dateObj['endTime'] = year + '-' + endMonth;
    }
    else if (type == '3') {
        dateObj['endTime'] = year;
    }
    else {
        dateObj['endTime'] = year + '-' + endMonth + '-' + endDay;
    }
    /** @type {?} */
    let nowMonthDay = new Date(year, month, 0).getDate();
    //当前月的总天数
    /** @type {?} */
    let dYear;
    /** @type {?} */
    let dMouth;
    /** @type {?} */
    let dDay;
    if (month - num <= 0) { //如果是1、2、3月，年数往前推一年
        //如果是1、2、3月，年数往前推一年
        /** @type {?} */
        let lastMonthDay = new Date((year - 1), (12 - (num - month)), 0).getDate();
        if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
            // dateObj['startTime'] = (year - 1) + '-' + (12 - (num - month)) + '-' + lastMonthDay;
            dYear = year - 1;
            dMouth = 12 - (num - month);
            dDay = lastMonthDay;
        }
        else {
            dYear = year - 1;
            dMouth = 12 - (num - month);
            dDay = day;
            // dateObj['startTime']= (year - 1) + '-' + (12 - (num - month)) + '-' + day;
        }
    }
    else {
        /** @type {?} */
        let lastMonthDay = new Date(year, (month - num), 0).getDate();
        if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
            if (day < nowMonthDay) { //当前天日期小于当前月总天数,2月份比较特殊的月份
                // dateObj['startTime'] = year + '-' + (month - num) + '-' + (lastMonthDay - (nowMonthDay - day));
                dYear = year;
                dMouth = month - num;
                dDay = lastMonthDay - (nowMonthDay - day);
            }
            else {
                dYear = year;
                dMouth = month - num;
                dDay = lastMonthDay;
                // dateObj['startTime'] = year + '-' + (month - num) + '-' + lastMonthDay;
            }
        }
        else {
            dYear = year;
            dMouth = month - num;
            dDay = day;
            // dateObj['startTime'] = year + '-' + (month - num) + '-' + day;
        }
    }
    dMouth = dMouth < 10 ? '0' + dMouth : dMouth;
    dDay = dDay < 10 ? '0' + dDay : dDay;
    if (type == '2') {
        dateObj['startTime'] = dYear + '-' + dMouth;
    }
    else if (type == '3') {
        dateObj['startTime'] = dYear;
    }
    else {
        dateObj['startTime'] = dYear + '-' + dMouth + '-' + dDay;
    }
    if (showtime) {
        dateObj['endTime'] = dateObj['endTime'] + ' ' + time;
        dateObj['startTime'] = dateObj['startTime'] + ' ' + time;
    }
    return dateObj;
}
/**
 * @param {?=} dayTags
 * @param {?=} showtime
 * @return {?}
 */
function getToday(dayTags = 'today', showtime) {
    /** @type {?} */
    let now = new Date();
    /** @type {?} */
    let year = now.getFullYear();
    /** @type {?} */
    let month = now.getMonth() + 1;
    //0-11表示1-12月
    /** @type {?} */
    let day = now.getDate();
    /** @type {?} */
    let hour = now.getHours();
    /** @type {?} */
    let min = now.getMinutes() < 10 ? '0' + new Date().getMinutes() : new Date().getMinutes();
    /** @type {?} */
    let sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds() : new Date().getSeconds();
    /** @type {?} */
    const time = hour + ':' + min + ':' + sec;
    /** @type {?} */
    let yesterday = new Date();
    yesterday.setTime(now.getTime() - 24 * 60 * 60 * 1000);
    /** @type {?} */
    let yesterdayMonth = yesterday.getMonth() + 1;
    /** @type {?} */
    let yesterdayDate = yesterday.getDate();
    /** @type {?} */
    let yesterdayObj = yesterday.getFullYear() + "-" + (yesterdayMonth < 10 ? `0${yesterdayMonth}` : yesterdayMonth) + "-" + (yesterdayDate < 10 ? `0${yesterdayDate}` : yesterdayDate);
    /** @type {?} */
    let dateObj = year + '-' + (month < 10 ? `0${month}` : month) + '-' + (day < 10 ? `0${day}` : day);
    if (showtime) {
        dateObj = dateObj + ' ' + time;
        yesterdayObj = yesterdayObj + ' ' + time;
    }
    if (dayTags == 'today')
        return dateObj;
    else if (dayTags == 'yesterday')
        return yesterdayObj;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelDateRangeComponent {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.date = new Date();
        this.dateTags = [];
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.initDate();
        }), 0);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //this.initDate();
        this.dateTags = [
            {
                id: 'tag1',
                text: this.localeService.getValue('filterPanel.last1Month')
            },
            {
                id: 'tag2',
                text: this.localeService.getValue('filterPanel.last3Month')
            },
            {
                id: 'tag3',
                text: this.localeService.getValue('filterPanel.last6Month')
            }
        ];
    }
    /**
     * @return {?}
     */
    initDate() {
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = {
                startTime: '',
                endTime: ''
            };
        }
        if (this._item.beginPlaceHolder) {
            this.beginPlaceHolder = this._item.beginPlaceHolder || '';
        }
        if (this._item.endPlaceHolder) {
            this.endPlaceHolder = this._item.endPlaceHolder || '';
        }
        if (this.item && this._item.control) {
            /** @type {?} */
            let itemDateFormat = this._item.control.format;
            if (this.showTime && itemDateFormat) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            const format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        /** @type {?} */
        const rangeDateValue = this._item && this._item.value;
        this.activedDateTagId = '';
        if (rangeDateValue.startTime && rangeDateValue.endTime) {
            this.rangeDate = `${rangeDateValue.startTime}~${rangeDateValue.endTime}`;
        }
        else {
            this.rangeDate = '';
        }
        this.setSubmitChange();
    }
    /**
     * @param {?} dateString
     * @return {?}
     */
    getDate(dateString) {
        /** @type {?} */
        let date = new Date(dateString);
        return date;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        if (event.returnFormatted) {
            (this._item.value).startTime = event.returnFormatted.split('~')[0];
            (this._item.value).endTime = event.returnFormatted.split('~')[1];
        }
        else {
            this._item.value.startTime = '';
            this._item.value.endTime = '';
        }
        // if (Object.keys(this._item.value).length === 0 || (!this._item.value.startTime && !this._item.value.endTime)) {
        //     this._item.valueText = ''
        // }
        // else {
        //     this._item.valueText = this._item.value.startTime + '~' + this._item.value.endTime;
        // }
        this._item.valueText = event.formatted;
        this.activedDateTagId = '';
        this.setSubmitChange();
        this.searchHandle.emit(event);
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    clickTag(tag) {
        this.activedDateTagId = tag.id;
        /** @type {?} */
        let tagDate;
        if (tag.id == 'tag1') {
            tagDate = getLastNumMonth(1, this.showTime, this.showType);
        }
        else if (tag.id == 'tag2') {
            tagDate = getLastNumMonth(3, this.showTime, this.showType);
        }
        else if (tag.id == 'tag3') {
            tagDate = getLastNumMonth(6, this.showTime, this.showType);
        }
        this._item.value.startTime = tagDate['startTime'];
        this._item.value.endTime = tagDate['endTime'];
        /** @type {?} */
        const rangeDateValue = this._item && this._item.value;
        if (rangeDateValue.startTime && rangeDateValue.endTime) {
            this.rangeDate = `${rangeDateValue.startTime}~${rangeDateValue.endTime}`;
        }
        else {
            this.rangeDate = '';
        }
        // this._item.valueText = this._item.value.startTime + '~' + this._item.value.endTime;
        this._item.valueText = this.datepickerEle.dateTo(new Date(this._item.value.startTime)) + '~' + this.datepickerEle.dateTo(new Date(this._item.value.endTime));
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || (!val.startTime && !val.endTime)) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelDateRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-daterange',
                template: "<!-- <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showTime]=\"showTime\"></farris-datepicker> -->\r\n\r\n<ng-container *ngIf=\"showTime;else defaultdate\">\r\n    <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n</ng-container>\r\n<ng-template #defaultdate>\r\n    <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n</ng-template>\r\n\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"showType !== '3'\">\r\n    <div class=\"panel-date-tag\" \r\n    *ngFor=\"let tag of dateTags\" \r\n    (click)=\"clickTag(tag)\"\r\n    [ngClass]=\"{'active': tag.id == activedDateTagId}\"\r\n    >\r\n        {{tag.text}}\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
PanelDateRangeComponent.ctorParameters = () => [
    { type: LocaleService }
];
PanelDateRangeComponent.propDecorators = {
    item: [{ type: Input }],
    showTime: [{ type: Input }],
    showType: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }],
    datepickerEle: [{ type: ViewChild, args: ['datepicker',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelDropDownComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.dropDownListDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        this.getDataSource();
        if (this._item.placeHolder) {
            this.placeholder = this._item.placeHolder;
        }
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = { value: '' };
        }
        /** @type {?} */
        const initialValue = this._item.value;
        this.selectedItemId = initialValue.value ? initialValue.value : '';
        // console.log(this._item);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this._item && this._item.value
            && this._item.control) {
            /** @type {?} */
            let dropDownList = (this._item.control);
            if (dropDownList.valueType == '2') {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign({}, element));
                    }));
                }
            }
            else if (dropDownList.valueType == '0') {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign({}, element));
                    }));
                }
            }
            else if (dropDownList.valueType == '1') {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign({}, element));
                    }));
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        //console.log(event);
        if (event) {
            (this._item.value).value = event.data.value;
        }
        else {
            (this._item.value).value = '';
        }
        this._item.valueText = this._item.value.value;
        this.searchHandle.emit();
        this.setSubmitChange();
    }
    /**
     * @private
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (val == null || val == undefined) {
            this.submitChange.emit(false);
            return;
        }
        if (Object.keys(val).length === 0 || Object.keys(val.value).length === 0) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        this._item.value.value = '';
        this._item.valueText = '';
        this.searchHandle.emit();
        this.submitChange.emit(false);
    }
}
PanelDropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-dropdown',
                template: "<farris-combo-list\r\n    [idField]=\"'value'\"\r\n    [textField]=\"'name'\"\r\n    [data]=\"dropDownListDataSource\"\r\n    [(ngModel)]=\"selectedItemId\"\r\n    [editable]=\"false\"\r\n    (selectChange)=\"onSearch($event)\"\r\n    (clear)=\"onClear($event)\"\r\n    [placeholder]=\"placeholder\"\r\n></farris-combo-list>"
            }] }
];
/** @nocollapse */
PanelDropDownComponent.ctorParameters = () => [];
PanelDropDownComponent.propDecorators = {
    item: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelHelpComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.onSearch = (/**
         * @return {?}
         */
        () => {
            this.searchHandle.emit();
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        if (this._item.placeHolder) {
            this.placeholder = this._item.placeHolder;
        }
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = {
                value: [],
                valueField: '',
                textValue: ''
            };
        }
        this.getHelpBindingInfo();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // if(this.item.control && this.item.control.hasOwnProperty('placeholder')){
        //     this.placeholder = this.item.control.placeholder;
        // }
        // this.getHelpBindingInfo();
    }
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    selectedDataHandler(selectedItem) {
        /** @type {?} */
        const helpValue = (this._item.value);
        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; // 单选返回对象，多选返回数组
        helpValue.valueField = this.valueField;
        helpValue.textValue = this.getTextValue(this.textField, helpValue.value);
        this.textValue = helpValue.textValue;
        this._item.valueText = this._item.value.textValue;
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getHelpBindingInfo() {
        if (this._item && this._item.control) {
            /** @type {?} */
            const helpOpts = this._item.control;
            this.uri = helpOpts.uri;
            this.title = helpOpts.title;
            this.textField = helpOpts.textField;
            this.valueField = helpOpts.valueField;
            this.idField = helpOpts.idField;
            this.mapFields = helpOpts.mapFields;
            this.context = helpOpts.context;
            this.preEventCmd = helpOpts.preEventCmd;
            this.postEventCmd = helpOpts.postEventCmd;
            this.singleSelect = helpOpts.singleSelect;
            this.enableFullTree = helpOpts.enableFullTree;
            this.loadTreeDataType = helpOpts.loadTreeDataType;
            this.expandLevel = helpOpts.expandLevel;
            this.enableCascade = helpOpts.enableCascade;
            this.helpId = helpOpts.helpId;
            /** @type {?} */
            const helpValue = (this._item.value);
            // if (helpValue && helpValue.value) {
            //     // this.textValue = (this.item.value as HelpValue).value[this.textField];
            //     this.textValue = HelpValue.getPropValue(helpValue.value, this.textField.split('.'));
            // }
            this.displayType = helpOpts.displayType;
            if (helpValue.textValue == 'help-text-value-null') { // 旧数据兼容
                this.textValue = helpValue.getTextValue(this.textField);
            }
            else {
                this.textValue = helpValue.textValue;
            }
        }
        this.setSubmitChange();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clearData(data) {
        (this._item.value).clearValue();
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
    /**
     * @param {?} textField
     * @param {?} value
     * @return {?}
     */
    getTextValue(textField, value) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || !val.value || !val.valueField) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-help',
                template: "<farris-lookup-grid\r\n    id=\"{{instanceId}}\"\r\n    [uri]=\"uri\"\r\n    [title]=\"title\"\r\n    [idField]=\"idField\" \r\n    [textField]=\"textField\" \r\n    [valueField]=\"valueField\" \r\n    [(ngModel)]=\"textValue\"\r\n    [displayType]=\"displayType\"\r\n    [editable]=\"false\"\r\n    (clear)=\"clearData($event)\"\r\n    (selectedData)=\"selectedDataHandler($event)\"\r\n    [placeholder]=\"placeholder\"\r\n    [mapFields]=\"mapFields\"\r\n    [dictPicking]=\"preEventCmd\"\r\n    [dictPicked]=\"postEventCmd\"\r\n    [context]=\"context\"\r\n    [enableFullTree]=\"enableFullTree\"\r\n    [loadTreeDataType]=\"loadTreeDataType\"\r\n    [singleSelect]=\"singleSelect\"\r\n    [expandLevel]=\"expandLevel\"\r\n    [enableCascade]=\"enableCascade\"\r\n    [useFavorite]=\"true\"\r\n>\r\n</farris-lookup-grid>"
                // providers: [{ provide: ServerSideToken, useClass: LookupHttpBeQueryService }]
            }] }
];
/** @nocollapse */
PanelHelpComponent.ctorParameters = () => [
    { type: Injector }
];
PanelHelpComponent.propDecorators = {
    item: [{ type: Input }],
    instanceId: [{ type: Input }],
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelNumberComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = {
                    startValue: null,
                    endValue: null
                };
            }
            if (this._item.beginPlaceHolder) {
                this.beginPlaceHolder = this._item.beginPlaceHolder || '';
            }
            if (this._item.endPlaceHolder) {
                this.endPlaceHolder = this._item.endPlaceHolder || '';
            }
        }
        this.precision = nr.control.precision;
        this.bigNumber = nr.control.bigNumber;
        if (!this.bigNumber) {
            this.min = -2147483648;
            this.max = 2147483647;
        }
        this.constructMultiFieldNumberRange(nr.value);
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.numberRangeText) {
                this.numberRangeText.inputPrev.nativeElement.focus();
            }
        }), 100);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldNumberRange(value) {
        this.beginValue = value.startValue == null ? null : value.startValue;
        this.endValue = value.endValue == null ? null : value.endValue;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    numberChange(event) {
        if (event) {
            /** @type {?} */
            const dataArray = event.split('~');
            if (this.bigNumber) {
                this._item.value.startValue = dataArray[0] ? dataArray[0] : null;
                this._item.value.endValue = dataArray[1] ? dataArray[1] : null;
            }
            else {
                this._item.value.startValue = dataArray[0] ? parseFloat(dataArray[0]) : null;
                this._item.value.endValue = dataArray[1] ? parseFloat(dataArray[1]) : null;
            }
        }
        else {
            this._item.value.startValue = null;
            this._item.value.endValue = null;
        }
        if (Object.keys(this._item.value).length === 0 || (this._item.value.startValue == null && this._item.value.endValue == null)) {
            this._item.valueText = '';
        }
        else if (this._item.value.startValue == null) {
            this._item.valueText = '~' + this._item.value.endValue;
        }
        else if (this._item.value.endValue == null) {
            this._item.valueText = this._item.value.startValue + '~';
        }
        else {
            this._item.valueText = this._item.value.startValue + '~' + this._item.value.endValue;
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        this.beginValue = $event;
        this._item.value.startValue = this.beginValue;
        this.setSubmitChange();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        this.endValue = $event;
        this._item.value.endValue = this.endValue;
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || ((val.startValue === '' || val.startValue == null) && (val.endValue === '' || val.endValue == null))) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-number',
                template: "<farris-number-range class=\"f-utils-fill-flex-row\" [canNull]=\"canNull\" [beginValue]=\"beginValue\" [endValue]=\"endValue\" \r\n(beginValueChange)=\"beginValueChange($event)\" (endValueChange)=\"endValueChange($event)\" (valueChange)=\"numberChange($event)\"\r\n[beginPlaceHolder]=\"beginPlaceHolder\" [endPlaceHolder]=\"endPlaceHolder\"\r\n[placeholder]=\"placeholder\" [precision]=\"precision\" [bigNumber]=\"bigNumber\" [min]=\"min\" [max]=\"max\" #numberRangeText>\r\n</farris-number-range>"
            }] }
];
/** @nocollapse */
PanelNumberComponent.ctorParameters = () => [];
PanelNumberComponent.propDecorators = {
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }],
    item: [{ type: Input }],
    numberRangeText: [{ type: ViewChild, args: ['numberRangeText',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelInputComponent {
    /**
     * @param {?} renderer
     * @param {?} injector
     */
    constructor(renderer, injector) {
        this.renderer = renderer;
        this.injector = injector;
        this.localStorageKey = 'farrisSearchRecord';
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.placeholder = '';
        this.searchTags = [];
        this.searchItems = [];
        this.searchFocus = false;
        this.historyText = '历史搜索';
        this.resultText = '查询结果';
        this.resultTitle = '历史搜索';
        this.localeService = this.injector.get(LocaleService);
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                //this._item.value.value = undefined;
                this._item.value = { value: '' };
            }
            if (this._item.placeHolder) {
                this.placeholder = this._item.placeHolder || '';
            }
            this.inputValue = this._item.value.value;
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let filterPanelArray = JSON.parse(localStorage.getItem(this.localStorageKey));
                if (Array.isArray(filterPanelArray)) {
                    filterPanelArray = null;
                }
                if (filterPanelArray && filterPanelArray[this._item.labelCode]) {
                    this.searchTags = filterPanelArray[this._item.labelCode];
                    this.searchItems = filterPanelArray[this._item.labelCode];
                }
            }), 0);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const self = this;
        this.renderer.listen(document, 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!event.target.closest('.f-filter-search-result-panel') && !event.target.closest('.filter-type-input .form-control')) {
                self.searchFocus = false;
            }
        }));
        this.historyText = this.localeService.getValue('filterPanel.searchHistory');
        this.resultText = this.localeService.getValue('filterPanel.searchResult');
        this.resultTitle = this.historyText;
        this.setSubmitChange();
        this.inputText.nativeElement.focus();
    }
    /**
     * 绑定点击回车触发查询
     * @param {?} e
     * @return {?}
     */
    inputKeyEnter(e) {
        this._item.value.value = this.inputValue;
        this._item.valueText = this._item.value.value;
        this.setSubmitChange();
        this.searchHandle.emit({ value: this._item.value.value, type: 'enter' });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    inputChanged(e) {
        this._item.value.value = this.inputValue;
        this._item.valueText = this._item.value.value;
        this.setSubmitChange();
        // this.searchHandle.emit({value:this._item.value.value,type:'enter'});
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    clearInput($event) {
        $event.stopPropagation();
        this.inputValue = '';
        this._item.value.value = '';
        this._item.valueText = '';
        this.setSubmitChange();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    inputValueChange(e) {
        this.searchItems = this.searchTags;
        this.resultTitle = this.historyText;
        this._item.value.value = this.inputValue;
        this._item.valueText = this._item.value.value;
        this.setSubmitChange();
        if (this.inputValue && this.searchItems.length) {
            /** @type {?} */
            let arr = this.fuzzyQuery(this.searchItems, this.inputValue);
            if (arr.length) {
                this.searchItems = arr;
                this.resultTitle = this.resultText;
            }
            else {
                this.searchItems = this.searchTags;
                this.resultTitle = this.historyText;
            }
        }
    }
    /**
     * @private
     * @param {?} list
     * @param {?} keyWord
     * @return {?}
     */
    fuzzyQuery(list, keyWord) {
        // if (keyWord) {
        //     keyWord = keyWord.replace(/\\/g, '\\');
        // }
        // if (keyWord) {
        //     keyWord = keyWord.replace(/\\/g, '\\');
        // }
        // var reg = new RegExp(keyWord + '/');
        /** @type {?} */
        var arr = [];
        for (var i = 0; i < list.length; i++) {
            if (!arr.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n === keyWord))) {
                arr.push(list[i]);
            }
        }
        return arr;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    inputFocus(e) {
        this.searchFocus = true;
        this.inputValueChange(e);
    }
    /**
     * @param {?} tag
     * @param {?} event
     * @return {?}
     */
    clickTag(tag, event) {
        event.stopPropagation();
        if (this.inputValue !== tag) {
            this.inputValue = tag;
            this._item.value.value = this.inputValue;
            this._item.valueText = this._item.value.value;
            this.setSubmitChange();
            this.searchHandle.emit({ value: this._item.value.value, type: 'enter' });
        }
    }
    /**
     * @param {?} tag
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    removeTag(tag, index, event) {
        event.stopPropagation();
        if (this.searchTags && this.searchTags.length) {
            this.searchTags.splice(index, 1);
        }
        this.searchItems = this.searchTags;
        /** @type {?} */
        let filterPanelArray = JSON.parse(localStorage.getItem(this.localStorageKey));
        if (Array.isArray(filterPanelArray)) {
            filterPanelArray = null;
        }
        if (filterPanelArray && filterPanelArray[this._item.labelCode]) {
            if (this.searchTags.length) {
                filterPanelArray[this._item.labelCode] = this.searchTags;
            }
            else {
                delete filterPanelArray[this._item.labelCode];
            }
        }
        localStorage.setItem(this.localStorageKey, JSON.stringify(filterPanelArray));
    }
    /**
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    clickSearchItem(item, event) {
        this.clickTag(item, event);
        this.searchFocus = false;
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || !val.value) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
    /**
     * @return {?}
     */
    showSearchTags() {
        if (this.searchTags && this.searchTags.length > 0) {
            if (this.searchTags.length == 1 && this.searchTags[0].length == 0) {
                return false;
            }
            return true;
        }
        return false;
    }
}
PanelInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-input',
                template: "\r\n\r\n    <div class=\"input-group f-state-editable\">\r\n        <input class=\"form-control\" type=\"text\" [(ngModel)]=\"inputValue\" [placeholder]=\"placeholder\"\r\n            (keyup.enter)=\"inputKeyEnter($event)\" (keyup)=\"inputValueChange($event)\" (blur)=\"inputChanged($event)\"\r\n            (focus)=\"inputFocus($event)\" #inputText>\r\n        \r\n        <div class=\"input-group-append\" [style.display]=\"inputValue? '' : 'none'\">\r\n            <span class=\"input-group-text input-group-clear\" (click)=\"clearInput($event)\" style=\"width: 24px;cursor: pointer;\"><i class=\"f-icon modal_close\"></i></span>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n<div class=\"f-filter-panel-search-tags\" *ngIf=\"showSearchTags()\">\r\n    <ng-container *ngFor=\"let tag of searchTags;let i = index;\">\r\n        <div class=\"panel-search-tag\" *ngIf=\"tag.length>0\">\r\n            <span class=\"panel-search-tag-text\" (click)=\"clickTag(tag,$event)\" [title]=\"tag\">{{tag}}</span>\r\n            <span class=\"panel-search-tag-remove f-icon modal_close\" (click)=\"removeTag(tag,i,$event)\"></span>\r\n        </div>\r\n    </ng-container>\r\n</div>"
            }] }
];
/** @nocollapse */
PanelInputComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Injector }
];
PanelInputComponent.propDecorators = {
    item: [{ type: Input }],
    localStorageKey: [{ type: Input }],
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }],
    inputText: [{ type: ViewChild, args: ['inputText',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelSearchComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = { value: '' };
            }
            if (this._item.placeHolder) {
                this.placeholder = this._item.placeHolder || '';
            }
            this.searchValue = this._item.value.value;
        }
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.searchText) {
            this.searchText.textbox.nativeElement.focus();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearch($event) {
        this._item.value.value = this.searchValue;
        this._item.valueText = this._item.value.value;
        this.setSubmitChange();
        this.searchHandle.emit($event);
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || !val.value) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-search',
                template: "\r\n<input-group [groupText]=\"groupIcon\" [(ngModel)]=\"searchValue\" (ngModelChange)=\"onSearch($event)\" (clear)=\"onSearch($event)\"\r\n(blurHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" (clickHandle)=\"onSearch($event)\"\r\n[placeholder]=\"placeholder\" #searchText></input-group>"
            }] }
];
/** @nocollapse */
PanelSearchComponent.ctorParameters = () => [];
PanelSearchComponent.propDecorators = {
    item: [{ type: Input }],
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }],
    searchText: [{ type: ViewChild, args: ['searchText',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelRadioComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.radioDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        this.getDataSource();
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = { value: '' };
        }
        //this.radioValue = this._item.value.getOriginalValue();
        this.radioValue = this._item.value.value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.getDataSource();
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this._item && this._item.control) {
            /** @type {?} */
            let radioboxList = (this._item.control);
            this.radioDataSource = Array();
            if (radioboxList.enumValues && radioboxList.enumValues.length > 0) {
                radioboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.radioDataSource.push(Object.assign({}, element));
                }));
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            this._item.value.value = event;
        }
        else {
            this._item.value.value = '';
        }
        // this._item.valueText = this._item.value.value;
        this.getValueText();
        //this.radioValue = this._item.value.getOriginalValue();
        this.radioValue = this._item.value.value;
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getValueText() {
        /** @type {?} */
        const enumValue = (this._item.control).enumValues;
        /** @type {?} */
        const value = (this._item.value).value;
        if (enumValue && enumValue.length) {
            /** @type {?} */
            const texts = enumValue.find((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                return val['value'] == value;
            }));
            if (texts) {
                this._item.valueText = texts['name'];
            }
        }
    }
}
PanelRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-radio',
                template: "<!-- <farris-radiogroup \r\n[value]=\"radioValue\" \r\n[horizontal]=\"false\" \r\n[data]=\"radioDataSource\"\r\n(changeValue)=\"onSearch($event)\">\r\n</farris-radiogroup> -->\r\n\r\n<div class=\"f-filter-panel-radiogroup\">\r\n    <div class=\"panel-radiogroup-item\" \r\n    [ngClass]=\"{'panel-radiogroup-item-active': radioValue == item.value}\"\r\n    *ngFor=\"let item of radioDataSource\"\r\n    (click)=\"onSearch(item.value)\"\r\n    >\r\n        <span class=\"panel-radiogroup-item-text\">{{item.name}}</span>\r\n    </div>\r\n</div>"
                // encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
PanelRadioComponent.ctorParameters = () => [];
PanelRadioComponent.propDecorators = {
    item: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelInputGroupComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.isTextFromDialog = false;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructTextItem(this._item);
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    constructTextItem(textItem) {
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = {
                value: [],
                textValue: '',
                textField: '',
                isInputText: ''
            };
        }
        /** @type {?} */
        const textValueObj = textItem.value;
        textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();
        textItem.value = textValueObj;
        this.textValue = textValueObj.textValue;
        this.setSubmitChange();
        return textItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.getGuid();
        this.getInputGroupBindingInfo();
    }
    /**
     * @private
     * @return {?}
     */
    getGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @private
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    /**
     * @return {?}
     */
    getInputGroupBindingInfo() {
        /** @type {?} */
        const inputGroupControl = (this.item.control);
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            const options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                // let modalData = item[0];
                // this.item.value.value = modalData[this.targetField];
                /** @type {?} */
                let selectedItems = selectedItem.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                if (selectedItems && this.textField) {
                    this.item.value.value = selectedItems;
                    //this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    this.item.value.textValue = this.getTextValue(this.textField, this.item.value.value);
                    this.item.value.textField = this.textField;
                    this.item.value.isInputText = false;
                    this.item.textValue = this.item.value.textValue;
                    this.textValue = this.item.textValue;
                    this.isTextFromDialog = true;
                    this.textFormDialog = this.item.value.textValue;
                }
            });
            this.item.control.click({ event, options });
        }
    }
    /**
     * @param {?} targetField
     * @param {?} value
     * @return {?}
     */
    getTextValue(targetField, value) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.setSubmitChange();
        this.searchHandle.emit(event);
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || !val.textValue) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-inputgroup',
                template: "\r\n<input-group \r\n    [(ngModel)]=\"item.value.textValue\" \r\n    name=\"{{item.fieldName}}\" \r\n    id=\"{{testId}}\"\r\n    [groupText]=\"item.control.groupText\"\r\n    [editable]=\"item.control.editable\"\r\n    [placeholder]=\"item.placeHolder\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (enterHandle)=\"onBlur($event)\"\r\n    >\r\n</input-group>\r\n"
            }] }
];
/** @nocollapse */
PanelInputGroupComponent.ctorParameters = () => [];
PanelInputGroupComponent.propDecorators = {
    item: [{ type: Input }],
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterSafePipe {
    /**
     * @param {?} _sanitizer
     */
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} value
     * @param {?} type
     * @return {?}
     */
    transform(value, type) {
        switch (type) {
            // 这条语句就是我们今天主要用到的
            case 'html': return this._sanitizer.bypassSecurityTrustHtml(value);
            // 接下来的这些是DomSanitizer提供的其他一些安全的转换
            case 'style': return this._sanitizer.bypassSecurityTrustStyle(value);
            case 'script': return this._sanitizer.bypassSecurityTrustScript(value);
            case 'url': return this._sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl': return this._sanitizer.bypassSecurityTrustResourceUrl(value);
            default: throw new Error(`Invalid safe type specified: ${type}`);
        }
    }
}
FilterSafePipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterSafe',
            },] }
];
/** @nocollapse */
FilterSafePipe.ctorParameters = () => [
    { type: DomSanitizer }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterHighlightSearchPipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        /** @type {?} */
        const needMatchValue = args;
        // 用户在input框输入的值
        /** @type {?} */
        let endValue = value;
        // 最终处理好并高亮标识的结果
        /** @type {?} */
        const isEnglishReg = new RegExp('^[a-zA-Z]+$');
        if (isEnglishReg.test(needMatchValue)) { // 输入拼音的情况
            endValue = this.getEndMatchedValue(value, needMatchValue, value);
        }
        else {
            /** @type {?} */
            const searchValue = needMatchValue;
            /** @type {?} */
            const regExp = new RegExp(searchValue, 'gi');
            if (regExp.test(value)) {
                endValue = this.getEndMatchedValue(value, needMatchValue, value);
            }
        }
        return endValue;
    }
    /**
     * @param {?} value
     * @param {?} searchValue
     * @param {?} oriValue
     * @return {?}
     */
    getEndMatchedValue(value, searchValue, oriValue) {
        if (searchValue) {
            /** @type {?} */
            let endValue = oriValue;
            /** @type {?} */
            const upperValue = value.toUpperCase();
            /** @type {?} */
            const upperSearch = searchValue.toUpperCase();
            /** @type {?} */
            const matchIndex = upperValue.indexOf(upperSearch);
            if (matchIndex !== -1) {
                // 将匹配到的内容进行高亮标注
                endValue = oriValue.substring(0, matchIndex) +
                    `<span style="color: #FF9800">${oriValue.substring(matchIndex, matchIndex + searchValue.length)}</span>` +
                    oriValue.substring(matchIndex + searchValue.length);
            }
            return endValue;
        }
        else {
            return oriValue;
        }
    }
}
FilterHighlightSearchPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterHighlightSearchResult',
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelSingleNumberComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = { value: null };
            }
            if (this._item.placeHolder) {
                this.placeholder = this._item.placeHolder || '';
            }
        }
        this.precision = nr.control.precision;
        this.bigNumber = nr.control.bigNumber;
        if (!this.bigNumber) {
            this.min = -2147483648;
            this.max = 2147483647;
        }
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.numberText) {
            this.numberText.input.nativeElement.focus();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    numberChange(event) {
        this._item.value.value = event;
        if (Object.keys(this._item.value).length === 0) {
            this._item.valueText = '';
        }
        else {
            this._item.valueText = '' + this._item.value.value;
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || val.value == null) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelSingleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-single-number',
                template: "<farris-number-spinner\r\n    class=\"f-utils-fill-flex-row\"\r\n    [(ngModel)]=\"item.value.value\"\r\n    [canNull]=\"canNull\"\r\n    [precision]=\"precision\"\r\n    [bigNumber]=\"bigNumber\"\r\n    [min]=\"min\" \r\n    [max]=\"max\"\r\n    [placeholder]=\"placeholder\"\r\n    (valueChange)=\"numberChange($event)\"\r\n    #numberText\r\n></farris-number-spinner>"
            }] }
];
/** @nocollapse */
PanelSingleNumberComponent.ctorParameters = () => [];
PanelSingleNumberComponent.propDecorators = {
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }],
    item: [{ type: Input }],
    numberText: [{ type: ViewChild, args: ['numberText',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelFlexibleNumberComponent {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.itemChange = new EventEmitter();
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = {
                    startValue: null,
                    endValue: null,
                    value: null,
                    single: true
                };
            }
            if (!this._item.control.hasOwnProperty('single')) {
                this._item.control.single = true;
            }
            this.beginPlaceHolder = (this._item.hasOwnProperty('beginPlaceHolder') && this._item.beginPlaceHolder) ? this._item.beginPlaceHolder : this.localeService.getValue('filterPanel.beginPlaceHolder');
            this.endPlaceHolder = (this._item.hasOwnProperty('endPlaceHolder') && this._item.beginPlaceHolder) ? this._item.endPlaceHolder : this.localeService.getValue('filterPanel.endPlaceHolder');
            this.placeholder = (this._item.hasOwnProperty('placeHolder') && this._item.placeHolder) ? this._item.placeHolder : '';
            this.single = this._item.control.single;
        }
        this.precision = nr.control.precision;
        this.bigNumber = nr.control.bigNumber;
        if (!this.bigNumber) {
            this.min = -2147483648;
            this.max = 2147483647;
        }
        this.constructMultiFieldNumberRange(nr.value);
        this.numberSubmitChange();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.changeFocus();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldNumberRange(value) {
        if (this.single) {
            this.value = value.value == null ? null : value.value;
        }
        else {
            this.beginValue = value.startValue == null ? null : value.startValue;
            this.endValue = value.endValue == null ? null : value.endValue;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    numberChange(event) {
        this._item.value.value = event;
        if (Object.keys(this._item.value).length === 0) {
            this._item.valueText = '';
        }
        else {
            this._item.valueText = '' + this._item.value.value;
        }
        this.searchHandle.emit();
        this.numberSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    beginValueChange(event) {
        this._item.value.startValue = event;
        this.setValueText();
        this.numberSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    endValueChange(event) {
        this._item.value.endValue = event;
        this.setValueText();
        this.numberSubmitChange();
    }
    /**
     * @return {?}
     */
    setValueText() {
        //console.log(this._item.value.startValue,this._item.value.endValue);
        if (Object.keys(this._item.value).length === 0 || (this._item.value.startValue == null && this._item.value.endValue == null)) {
            this._item.valueText = '';
        }
        else if (this._item.value.startValue == null) {
            this._item.valueText = '~' + this._item.value.endValue;
        }
        else if (this._item.value.endValue == null) {
            this._item.valueText = this._item.value.startValue + '~';
        }
        else {
            this._item.valueText = this._item.value.startValue + '~' + this._item.value.endValue;
        }
    }
    /**
     * @return {?}
     */
    numberSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (this.single) {
            if (Object.keys(val).length < 0 || (val.value == null || val.value === '' || val === undefined)) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
        else {
            if (Object.keys(val).length === 0 || ((val.startValue === '' || val.startValue == null) && (val.endValue == null || val.endValue === ''))) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        this.single = !event;
        this._item.control.single = this.single;
        this._item.value.single = this.single;
        this.changeFocus();
        this.itemChange.emit(this.item);
        this.numberSubmitChange();
    }
    /**
     * @return {?}
     */
    changeFocus() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.beginNumberText)
                this.beginNumberText.input.nativeElement.focus();
            if (this.numberText)
                this.numberText.input.nativeElement.focus();
        }), 0);
    }
}
PanelFlexibleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-flexiblenumber',
                template: "<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onChange($event)\"></farris-switch>\r\n</div>\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <farris-number-spinner\r\n            class=\"f-utils-fill-flex-row\"\r\n            [(ngModel)]=\"value\"\r\n            [canNull]=\"canNull\"\r\n            [precision]=\"precision\"\r\n            [bigNumber]=\"bigNumber\"\r\n            [min]=\"min\" \r\n            [max]=\"max\"\r\n            [placeholder]=\"placeholder\"\r\n            (valueChange)=\"numberChange($event)\"\r\n            #numberText\r\n        ></farris-number-spinner>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex panel-flexible-range-wrapper\">\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"beginValue\"\r\n                [canNull]=\"canNull\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [min]=\"min\" \r\n                [max]=\"endValue?endValue:max\"\r\n                [placeholder]=\"beginPlaceHolder\"\r\n                (valueChange)=\"beginValueChange($event)\"\r\n                #beginNumberText\r\n            ></farris-number-spinner>\r\n            <span class=\"f-icon f-icon-orientation-arrow\"></span>\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"endValue\"\r\n                [canNull]=\"canNull\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [min]=\"beginValue?beginValue:min\" \r\n                [max]=\"max\"\r\n                [placeholder]=\"endPlaceHolder\"\r\n                (valueChange)=\"endValueChange($event)\"\r\n            ></farris-number-spinner>\r\n        </div>\r\n    </ng-template>\r\n    \r\n</div>"
            }] }
];
/** @nocollapse */
PanelFlexibleNumberComponent.ctorParameters = () => [
    { type: LocaleService }
];
PanelFlexibleNumberComponent.propDecorators = {
    itemChange: [{ type: Output }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }],
    item: [{ type: Input }],
    beginNumberText: [{ type: ViewChild, args: ['beginNumberText',] }],
    numberText: [{ type: ViewChild, args: ['numberText',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PanelFlexibleDateComponent {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.itemChange = new EventEmitter();
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
        this.date = new Date();
        this.dateTags = [];
        this.dayTags = [];
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = {
                    startValue: null,
                    endValue: null,
                    value: null,
                    single: true
                };
            }
            if (!this._item.control.hasOwnProperty('single')) {
                this._item.control.single = true;
            }
            this.beginPlaceHolder = (this._item.hasOwnProperty('beginPlaceHolder') && this._item.beginPlaceHolder) ? this._item.beginPlaceHolder : this.localeService.getValue('filterPanel.dateBeginPlaceHolder');
            this.endPlaceHolder = (this._item.hasOwnProperty('endPlaceHolder') && this._item.beginPlaceHolder) ? this._item.endPlaceHolder : this.localeService.getValue('filterPanel.dateEndPlaceHolder');
            this.placeholder = (this._item.hasOwnProperty('placeHolder') && this._item.placeHolder) ? this._item.placeHolder : '';
            this.single = this._item.control.single;
            this.showTime = (this._item.control.hasOwnProperty('showTime') && this._item.control.showTime) ? this._item.control.showTime : '';
            this.showType = (this._item.control.hasOwnProperty('showType') && this._item.control.showType) ? this._item.control.showType : '';
            /** @type {?} */
            let itemDateFormat = this._item.control.format;
            if (this.showTime && itemDateFormat) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            const format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.constructMultiFieldDateRange(nr.value);
        this.dateSubmitChange();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dateTags = [
            {
                id: 'tag1',
                text: this.localeService.getValue('filterPanel.last1Month')
            },
            {
                id: 'tag2',
                text: this.localeService.getValue('filterPanel.last3Month')
            },
            {
                id: 'tag3',
                text: this.localeService.getValue('filterPanel.last6Month')
            }
        ];
        this.dayTags = [
            {
                id: 'yesterday',
                text: this.localeService.getValue('filterPanel.yesterday')
            },
            {
                id: 'today',
                text: this.localeService.getValue('filterPanel.today')
            }
        ];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldDateRange(value) {
        if (this.single) {
            this.value = value.value == null ? null : value.value;
        }
        else {
            this.startValue = value.startValue == null ? null : value.startValue;
            this.endValue = value.endValue == null ? null : value.endValue;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        this._item.value.value = event.returnFormatted ? event.returnFormatted : null;
        this._item.valueText = event.formatted;
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.searchHandle.emit(event);
        this.dateSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    beginValueChange(event) {
        this._item.value.startValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.startValueText = event.formatted;
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.setValueText();
        this.dateSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    endValueChange(event) {
        this._item.value.endValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.endValueText = event.formatted;
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.setValueText();
        this.dateSubmitChange();
    }
    /**
     * @return {?}
     */
    setValueText() {
        if (Object.keys(this._item.value).length === 0 || (!this._item.value.startValue && !this._item.value.endValue)) {
            this._item.valueText = '';
        }
        else if (!this._item.value.startValueText) {
            this._item.valueText = '~' + this._item.value.endValueText;
        }
        else if (!this._item.value.endValueText) {
            this._item.valueText = this._item.value.startValueText + '~';
        }
        else {
            this._item.valueText = this._item.value.startValueText + '~' + this._item.value.endValueText;
        }
    }
    /**
     * @return {?}
     */
    dateSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (this.single) {
            if (Object.keys(val).length < 0 || !val.value) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
        else {
            if (Object.keys(val).length === 0 || (!val.startValue && !val.endValue)) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        this.single = !event;
        this._item.control.single = this.single;
        this._item.value.single = this.single;
        this.itemChange.emit(this.item);
        this.dateSubmitChange();
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    clickTag(tag) {
        this.activedDateTagId = tag.id;
        /** @type {?} */
        let tagDate;
        if (tag.id == 'tag1') {
            tagDate = getLastNumMonth(1, this.showTime, this.showType);
        }
        else if (tag.id == 'tag2') {
            tagDate = getLastNumMonth(3, this.showTime, this.showType);
        }
        else if (tag.id == 'tag3') {
            tagDate = getLastNumMonth(6, this.showTime, this.showType);
        }
        this._item.value.startValue = tagDate['startTime'];
        this._item.value.endValue = tagDate['endTime'];
        this._item.value.startValueText = this.datepickerEle.dateTo(new Date(this._item.value.startValue));
        this._item.value.endValueText = this.datepickerEle.dateTo(new Date(this._item.value.endValue));
        this.startValue = this._item.value.startValue;
        this.endValue = this._item.value.endValue;
        this.setValueText();
        this.dateSubmitChange();
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    clickDayTag(tag) {
        this.activedDayTagId = tag.id;
        /** @type {?} */
        let dayTag = getToday(this.activedDayTagId, this.showTime);
        this._item.value.value = dayTag;
        this.value = this._item.value.value;
        this._item.valueText = this.datepickerEle.dateTo(new Date(this._item.value.value));
        this.dateSubmitChange();
    }
}
PanelFlexibleDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-flexibledate',
                template: "<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onChange($event)\"></farris-switch>\r\n</div>\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <ng-container *ngIf=\"showTime;else singleDefaultdate\">\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n        </ng-container>\r\n        <ng-template #singleDefaultdate>\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n        </ng-template>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex panel-flexible-range-wrapper\">\r\n            <ng-container *ngIf=\"showTime;else startDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showTime]=\"showTime\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #startDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showType]=\"showType\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n            <span class=\"f-icon f-icon-orientation-arrow\"></span>\r\n            <ng-container *ngIf=\"showTime;else endDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showTime]=\"showTime\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #endDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showType]=\"showType\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n\r\n</div>\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"!single && showType !== '3'\">\r\n    <div class=\"panel-date-tag\" \r\n    *ngFor=\"let tag of dateTags\" \r\n    (click)=\"clickTag(tag)\"\r\n    [ngClass]=\"{'active': tag.id == activedDateTagId}\"\r\n    >\r\n        {{tag.text}}\r\n    </div>\r\n</div>\r\n\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"single && showType !== '3' && showType !== '2'\">\r\n    <div class=\"panel-date-tag\" \r\n    *ngFor=\"let day of dayTags\" \r\n    (click)=\"clickDayTag(day)\"\r\n    [ngClass]=\"{'active': day.id == activedDayTagId}\"\r\n    >\r\n        {{day.text}}\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
PanelFlexibleDateComponent.ctorParameters = () => [
    { type: LocaleService }
];
PanelFlexibleDateComponent.propDecorators = {
    itemChange: [{ type: Output }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }],
    datepickerEle: [{ type: ViewChild, args: ['datepicker',] }],
    item: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterPanelModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FilterPanelModule,
            providers: [
                FilterPanelService
            ]
        };
    }
}
FilterPanelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FilterPanelComponent,
                    PanelControlTypeXPipe,
                    FilterHighlightSearchPipe,
                    FilterSafePipe,
                    PanelDateComponent,
                    PanelNumberComponent,
                    PanelHelpComponent,
                    PanelInputComponent,
                    PanelDropDownComponent,
                    PanelSearchComponent,
                    PanelfilterCheckboxComponent,
                    PanelDateRangeComponent,
                    PanelRadioComponent,
                    PanelInputGroupComponent,
                    PanelSingleNumberComponent,
                    PanelFlexibleNumberComponent,
                    PanelFlexibleDateComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    InputGroupModule,
                    FarrisDatePickerModule,
                    DatalistModule,
                    ComboListModule,
                    LookupModule,
                    FarrisFormsModule,
                    NumberSpinnerModule,
                    PerfectScrollbarModule,
                    LocaleModule.forRoot(),
                    SwitchModule.forRoot(),
                    FilterConditionModule
                ],
                providers: [
                    // FilterPanelService,
                    QuerySolutionService
                    // FilterConditionService
                ],
                exports: [
                    FilterPanelComponent,
                    PanelControlTypeXPipe,
                    FilterHighlightSearchPipe,
                    FilterSafePipe,
                    PanelDateComponent,
                    PanelNumberComponent,
                    PanelHelpComponent,
                    PanelInputComponent,
                    PanelDropDownComponent,
                    PanelSearchComponent,
                    PanelfilterCheckboxComponent,
                    PanelDateRangeComponent,
                    PanelRadioComponent,
                    PanelInputGroupComponent,
                    PanelSingleNumberComponent,
                    PanelFlexibleNumberComponent,
                    PanelFlexibleDateComponent
                ],
                entryComponents: [
                    FilterPanelComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FilterPanelService, FilterPanelComponent, FilterPanelModule, PanelfilterCheckboxComponent, PanelDateComponent, PanelDateRangeComponent, PanelDropDownComponent, PanelHelpComponent, PanelInputComponent, PanelNumberComponent, PanelSearchComponent, PanelInputGroupComponent, PanelSingleNumberComponent, PanelFlexibleNumberComponent, PanelFlexibleDateComponent, PanelRadioComponent, ControlType, PanelControlTypeXPipe, FilterHighlightSearchPipe, FilterSafePipe, deepCopy };

//# sourceMappingURL=farris-ui-filter-panel.js.map