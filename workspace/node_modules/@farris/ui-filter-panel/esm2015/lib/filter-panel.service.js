/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, ApplicationRef } from '@angular/core';
import { CommonUtils } from '@farris/ui-common';
import { FilterPanelComponent } from './filter-panel.component';
import * as i0 from "@angular/core";
export class FilterPanelService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        // private instanceMap = new Map();
        this.commonUtils = null;
        this.commonUtils = this.injector.get(CommonUtils, null);
        if (!this.commonUtils) {
            this.commonUtils = new CommonUtils();
        }
    }
    /**
     * @param {?} option
     * @return {?}
     */
    showPanel(option) {
        /** @type {?} */
        const instanceID = option.localStorageKey;
        this.hidePanel();
        /** @type {?} */
        const containerFac = this.cfr.resolveComponentFactory(FilterPanelComponent);
        /** @type {?} */
        const filterPanelContainer = containerFac.create(this.injector);
        this.appRef.attachView(filterPanelContainer.hostView);
        document.querySelector('body').appendChild(filterPanelContainer.location.nativeElement);
        filterPanelContainer.instance.option = option;
        filterPanelContainer.instance.injector = this.injector;
        filterPanelContainer.instance.zIndex = this.commonUtils.getFloatingLayerIndex();
        // filterPanelContainer.instance.clear.subscribe((event)=>{
        //   this.clear();
        // });
        filterPanelContainer.changeDetectorRef.markForCheck();
        filterPanelContainer.changeDetectorRef.detectChanges();
        // if (!this.instanceMap.has(instanceID)) {
        //     this.instanceMap.set(instanceID, filterPanelContainer);
        // }
        this.filterPanelContainer = filterPanelContainer;
        return filterPanelContainer.instance;
    }
    /**
     * @return {?}
     */
    hidePanel() {
        //  const filterPanelContainer = this.instanceMap.get(id);
        if (this.filterPanelContainer) {
            this.filterPanelContainer.instance.hide = true;
            this.filterPanelContainer.destroy();
            this.filterPanelContainer = null;
            // this.instanceMap.delete(id);
        }
    }
}
FilterPanelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FilterPanelService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
/** @nocollapse */ FilterPanelService.ngInjectableDef = i0.defineInjectable({ factory: function FilterPanelService_Factory() { return new FilterPanelService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: FilterPanelService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FilterPanelService.prototype.filterPanelContainer;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItcGFuZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUE4QyxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0FBTWhFLE1BQU0sT0FBTyxrQkFBa0I7Ozs7OztJQU8zQixZQUNZLEdBQTZCLEVBQzdCLFFBQWtCLEVBQ2xCLE1BQXNCO1FBRnRCLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBQzdCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7O1FBSjFCLGdCQUFXLEdBQWdCLElBQUksQ0FBQztRQU9wQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNuQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7U0FDeEM7SUFDTCxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxNQUF5Qjs7Y0FDekIsVUFBVSxHQUFHLE1BQU0sQ0FBQyxlQUFlO1FBQ3pDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7Y0FDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQzs7Y0FDckUsb0JBQW9CLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9ELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXRELFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV4RixvQkFBb0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUM5QyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkQsb0JBQW9CLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDaEYsMkRBQTJEO1FBQzNELGtCQUFrQjtRQUNsQixNQUFNO1FBQ04sb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEQsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkQsMkNBQTJDO1FBQzNDLDhEQUE4RDtRQUM5RCxJQUFJO1FBQ0osSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBQ2pELE9BQU8sb0JBQW9CLENBQUMsUUFBUSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFTSxTQUFTO1FBQ1osMERBQTBEO1FBRTFELElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzNCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUMvQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztZQUNqQywrQkFBK0I7U0FDbEM7SUFDTCxDQUFDOzs7WUF2REosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBUG9CLHdCQUF3QjtZQUFFLFFBQVE7WUFBRSxjQUFjOzs7OztJQVVuRSxrREFBeUQ7Ozs7O0lBSXpELHlDQUF3Qzs7Ozs7SUFFcEMsaUNBQXFDOzs7OztJQUNyQyxzQ0FBMEI7Ozs7O0lBQzFCLG9DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uVXRpbHMgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IEZpbHRlclBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItcGFuZWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsdGVyUGFuZWxPcHRpb24gfSBmcm9tICcuL2ZpbHRlci1wYW5lbC5pbnRlcmZhY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJQYW5lbFNlcnZpY2Uge1xyXG5cclxuICAgIGZpbHRlclBhbmVsQ29udGFpbmVyOiBDb21wb25lbnRSZWY8RmlsdGVyUGFuZWxDb21wb25lbnQ+O1xyXG5cclxuICAgIC8vIHByaXZhdGUgaW5zdGFuY2VNYXAgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBjb21tb25VdGlsczogQ29tbW9uVXRpbHMgPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXHJcbiAgICApIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNvbW1vblV0aWxzID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tbW9uVXRpbHMsIG51bGwpO1xyXG4gICAgICAgIGlmICghdGhpcy5jb21tb25VdGlscykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbW1vblV0aWxzID0gbmV3IENvbW1vblV0aWxzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNob3dQYW5lbChvcHRpb246IEZpbHRlclBhbmVsT3B0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2VJRCA9IG9wdGlvbi5sb2NhbFN0b3JhZ2VLZXk7XHJcbiAgICAgICAgdGhpcy5oaWRlUGFuZWwoKTtcclxuICAgICAgICBjb25zdCBjb250YWluZXJGYWMgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShGaWx0ZXJQYW5lbENvbXBvbmVudCk7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyUGFuZWxDb250YWluZXIgPSBjb250YWluZXJGYWMuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuYXBwUmVmLmF0dGFjaFZpZXcoZmlsdGVyUGFuZWxDb250YWluZXIuaG9zdFZpZXcpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kQ2hpbGQoZmlsdGVyUGFuZWxDb250YWluZXIubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIGZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLm9wdGlvbiA9IG9wdGlvbjtcclxuICAgICAgICBmaWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5pbmplY3RvciA9IHRoaXMuaW5qZWN0b3I7XHJcbiAgICAgICAgZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2UuekluZGV4ID0gdGhpcy5jb21tb25VdGlscy5nZXRGbG9hdGluZ0xheWVySW5kZXgoKTtcclxuICAgICAgICAvLyBmaWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5jbGVhci5zdWJzY3JpYmUoKGV2ZW50KT0+e1xyXG4gICAgICAgIC8vICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIGZpbHRlclBhbmVsQ29udGFpbmVyLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIGZpbHRlclBhbmVsQ29udGFpbmVyLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAvLyBpZiAoIXRoaXMuaW5zdGFuY2VNYXAuaGFzKGluc3RhbmNlSUQpKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuaW5zdGFuY2VNYXAuc2V0KGluc3RhbmNlSUQsIGZpbHRlclBhbmVsQ29udGFpbmVyKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lciA9IGZpbHRlclBhbmVsQ29udGFpbmVyO1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGlkZVBhbmVsKCkge1xyXG4gICAgICAgIC8vICBjb25zdCBmaWx0ZXJQYW5lbENvbnRhaW5lciA9IHRoaXMuaW5zdGFuY2VNYXAuZ2V0KGlkKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5oaWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmluc3RhbmNlTWFwLmRlbGV0ZShpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==