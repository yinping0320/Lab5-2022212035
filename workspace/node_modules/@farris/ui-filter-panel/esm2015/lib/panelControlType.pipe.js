/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
/** @enum {number} */
const ControlType = {
    Text: 0,
    //DateTime=1,
    Help: 1,
    DropDown: 2,
    DateRange: 3,
    NumberRange: 4,
    Search: 5,
    Date: 6,
    CheckboxGroup: 7,
    DateRangeTime: 8,
    Radio: 9,
    Year: 10,
    Month: 11,
    MonthRange: 12,
    YearRange: 13,
    InputGroup: 14,
    Number: 15,
};
export { ControlType };
ControlType[ControlType.Text] = 'Text';
ControlType[ControlType.Help] = 'Help';
ControlType[ControlType.DropDown] = 'DropDown';
ControlType[ControlType.DateRange] = 'DateRange';
ControlType[ControlType.NumberRange] = 'NumberRange';
ControlType[ControlType.Search] = 'Search';
ControlType[ControlType.Date] = 'Date';
ControlType[ControlType.CheckboxGroup] = 'CheckboxGroup';
ControlType[ControlType.DateRangeTime] = 'DateRangeTime';
ControlType[ControlType.Radio] = 'Radio';
ControlType[ControlType.Year] = 'Year';
ControlType[ControlType.Month] = 'Month';
ControlType[ControlType.MonthRange] = 'MonthRange';
ControlType[ControlType.YearRange] = 'YearRange';
ControlType[ControlType.InputGroup] = 'InputGroup';
ControlType[ControlType.Number] = 'Number';
export class PanelControlTypeXPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        /** @type {?} */
        let type;
        switch (value.control.getControlType()) {
            case ControlType.Text:
                type = 'input';
                break;
            case ControlType.Search:
                type = 'search';
                break;
            case ControlType.Date:
                type = 'date';
                break;
            case ControlType.DateRange:
                type = 'daterange';
                break;
            case ControlType.DateRangeTime:
                type = 'daterangetime';
                break;
            case ControlType.Year:
                type = 'year';
                break;
            case ControlType.Month:
                type = 'month';
                break;
            case ControlType.MonthRange:
                type = 'monthrange';
                break;
            case ControlType.YearRange:
                type = 'yearrange';
                break;
            case ControlType.DropDown:
                type = 'dropdown';
                break;
            case ControlType.NumberRange:
                type = 'number';
                break;
            case ControlType.Help:
                type = 'help';
                break;
            case ControlType.CheckboxGroup:
                type = 'checkboxgroup';
                break;
            case ControlType.Radio:
                type = 'radio';
                break;
            case ControlType.InputGroup:
                type = 'input-group';
                break;
            case ControlType.Number:
                type = 'singlenumber';
                break;
            default:
                type = 'input';
                break;
        }
        return type;
    }
}
PanelControlTypeXPipe.decorators = [
    { type: Pipe, args: [{ name: 'panelControlType' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWxDb250cm9sVHlwZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItcGFuZWwvIiwic291cmNlcyI6WyJsaWIvcGFuZWxDb250cm9sVHlwZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7O0lBR2hELE9BQU07SUFDTixhQUFhO0lBQ2IsT0FBTTtJQUNOLFdBQVU7SUFDVixZQUFXO0lBQ1gsY0FBYTtJQUNiLFNBQVE7SUFDUixPQUFNO0lBQ04sZ0JBQWU7SUFDZixnQkFBZTtJQUNmLFFBQU87SUFDUCxRQUFPO0lBQ1AsU0FBUTtJQUNSLGNBQWE7SUFDYixhQUFZO0lBQ1osY0FBYTtJQUNiLFVBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJYixNQUFNLE9BQU8scUJBQXFCOzs7OztJQUM5QixTQUFTLENBQUMsS0FBSzs7WUFDUCxJQUFJO1FBQ1IsUUFBTyxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFDO1lBQ2xDLEtBQUssV0FBVyxDQUFDLElBQUk7Z0JBQ2pCLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ2YsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLE1BQU07Z0JBQ25CLElBQUksR0FBRyxRQUFRLENBQUM7Z0JBQ2hCLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxJQUFJO2dCQUNqQixJQUFJLEdBQUcsTUFBTSxDQUFDO2dCQUNkLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxTQUFTO2dCQUN0QixJQUFJLEdBQUcsV0FBVyxDQUFDO2dCQUNuQixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsYUFBYTtnQkFDMUIsSUFBSSxHQUFHLGVBQWUsQ0FBQztnQkFDdkIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLElBQUk7Z0JBQ2pCLElBQUksR0FBRyxNQUFNLENBQUM7Z0JBQ2QsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLEtBQUs7Z0JBQ2xCLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ2YsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLFVBQVU7Z0JBQ3ZCLElBQUksR0FBRyxZQUFZLENBQUM7Z0JBQ3BCLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxTQUFTO2dCQUN0QixJQUFJLEdBQUcsV0FBVyxDQUFDO2dCQUNuQixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsUUFBUTtnQkFDckIsSUFBSSxHQUFHLFVBQVUsQ0FBQztnQkFDbEIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLFdBQVc7Z0JBQ3hCLElBQUksR0FBRyxRQUFRLENBQUM7Z0JBQ2hCLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxJQUFJO2dCQUNqQixJQUFJLEdBQUcsTUFBTSxDQUFDO2dCQUNkLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxhQUFhO2dCQUMxQixJQUFJLEdBQUcsZUFBZSxDQUFDO2dCQUN2QixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsS0FBSztnQkFDbEIsSUFBSSxHQUFHLE9BQU8sQ0FBQztnQkFDZixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsVUFBVTtnQkFDdkIsSUFBSSxHQUFHLGFBQWEsQ0FBQztnQkFDckIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLE1BQU07Z0JBQ25CLElBQUksR0FBRyxjQUFjLENBQUM7Z0JBQ3RCLE1BQU07WUFDVjtnQkFDSSxJQUFJLEdBQUcsT0FBTyxDQUFDO2dCQUNmLE1BQU07U0FDYjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7OztZQTFESixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgZW51bSBDb250cm9sVHlwZXtcclxuICAgIFRleHQ9MCxcclxuICAgIC8vRGF0ZVRpbWU9MSxcclxuICAgIEhlbHA9MSxcclxuICAgIERyb3BEb3duPTIsXHJcbiAgICBEYXRlUmFuZ2U9MyxcclxuICAgIE51bWJlclJhbmdlPTQsXHJcbiAgICBTZWFyY2g9NSxcclxuICAgIERhdGU9NixcclxuICAgIENoZWNrYm94R3JvdXA9NyxcclxuICAgIERhdGVSYW5nZVRpbWU9OCxcclxuICAgIFJhZGlvPTksXHJcbiAgICBZZWFyPTEwLFxyXG4gICAgTW9udGg9MTEsXHJcbiAgICBNb250aFJhbmdlPTEyLFxyXG4gICAgWWVhclJhbmdlPTEzLFxyXG4gICAgSW5wdXRHcm91cD0xNCxcclxuICAgIE51bWJlcj0xNVxyXG59XHJcblxyXG5AUGlwZSh7bmFtZTogJ3BhbmVsQ29udHJvbFR5cGUnfSlcclxuZXhwb3J0IGNsYXNzIFBhbmVsQ29udHJvbFR5cGVYUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKHZhbHVlKTogQXJyYXk8YW55PiB7XHJcbiAgICAgICAgbGV0IHR5cGU7XHJcbiAgICAgICAgc3dpdGNoKHZhbHVlLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSl7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuVGV4dDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaW5wdXQnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuU2VhcmNoOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzZWFyY2gnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuRGF0ZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5EYXRlUmFuZ2U6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2RhdGVyYW5nZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5EYXRlUmFuZ2VUaW1lOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdkYXRlcmFuZ2V0aW1lJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLlllYXI6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ3llYXInO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuTW9udGg6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ21vbnRoJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLk1vbnRoUmFuZ2U6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ21vbnRocmFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuWWVhclJhbmdlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICd5ZWFycmFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuRHJvcERvd246XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2Ryb3Bkb3duJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLk51bWJlclJhbmdlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdudW1iZXInO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuSGVscDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaGVscCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5DaGVja2JveEdyb3VwOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdjaGVja2JveGdyb3VwJztcclxuICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5SYWRpbzpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmFkaW8nO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuSW5wdXRHcm91cDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaW5wdXQtZ3JvdXAnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuTnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzaW5nbGVudW1iZXInO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2lucHV0JztcclxuICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==