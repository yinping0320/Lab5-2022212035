/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild, ElementRef, Optional } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
/**
 * 含义说明
* this._item
  A、control属性的含义{
    enumValues:枚举项数组[{value:枚举项的值,name:枚举项的显示文本}],
    isExtend:是否显示在扩展面板
  B、value 属性
     value 对应当前多选组件的值
  C、valueText 属性 --对应文本
}
 */
export class PanelfilterCheckboxComponent {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.checkedAll = false;
        this.enableSearch = false;
        this.boolcheck = false;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.indeterminate = true;
        this.boolCheckState = 'indeterminate';
        // 数据源
        this.checkboxDataSource = new Array();
        // 当前查询结果
        this.allCols = new Array();
        // 在当前查询结果的选中值
        this.allColsCheckValue = [];
        //不在当前的查询结果中的选中值
        this.notInCurResult = [];
        // 是否设置查询时候的宽度
        this.hasSetWidthSearching = false;
        // 查询提示
        this.searchPlaceHolder = "请输入名称";
        this.checkallCheckboxDisabled = false;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        this.getDataSource();
        //this.checkValue = this._item.value.getOriginalValue();
        if (!this._item.hasOwnProperty('value'))
            this._item.value = { value: [] };
        if (this._item.hasOwnProperty('value')) {
            this.checkValue = this._item.value.value;
            //保存值
            this.allColsCheckValue = this.checkValue;
        }
        else {
            this._item.value.value = [];
        }
        if (this.boolcheck) {
            if (this.checkValue.length) {
                this.boolchecked = this.checkValue[0];
                if (this.boolchecked)
                    this.boolCheckState = 'checked';
                else
                    this.boolCheckState = 'unchecked';
            }
            else
                this.boolCheckState = 'indeterminate';
        }
        this.enableSearch = data.control.hasOwnProperty("enableSearch") ? data.control.enableSearch : false;
        if (this._item.value.value.length == 0)
            this.checkedAll = false;
        else if (this._item.control['enumValues'] && this._item.value.value.length == this._item.control['enumValues'].length)
            this.checkedAll = true;
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setLocaleData();
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this._item.control) {
            /** @type {?} */
            let checkboxList = (this._item.control);
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.checkboxDataSource.push(Object.assign({}, element));
                }));
                this.allCols = this.checkboxDataSource;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        /** @type {?} */
        let checkboxValue = [];
        if (event) {
            /** @type {?} */
            let checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this.allColsCheckValue = checkboxValue;
        }
        else {
            this.allColsCheckValue = [];
        }
        this.onlyUpdateCheckValue();
        this.searchResultIsCheckAll();
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getValueText() {
        /** @type {?} */
        const enumValue = (this._item.control).enumValues;
        /** @type {?} */
        const value = (this._item.value).value;
        if (enumValue && enumValue.length && value && value.length) {
            /** @type {?} */
            let texts = [];
            for (let i = 0; i <= value.length; i++) {
                /** @type {?} */
                const enums = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return val['value'] == value[i];
                }));
                if (enums) {
                    texts.push(enums['name']);
                }
            }
            this._item.valueText = texts.join(',');
        }
        else {
            this._item.valueText = '';
        }
    }
    /**
     * 是否可以提交
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || Object.keys(val.value).length === 0) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
    /**
     * 点击全选Checkbox
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        if (this.checkallCheckboxDisabled) {
            // 全选checkbox是否禁用
            return;
        }
        this.checkedAll = !this.checkedAll;
        if (this.checkedAll) {
            // 全选
            this.setCheckedAll();
        }
        else {
            // 取消全选
            this.setUnCheckedAll();
        }
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * 设置全选
     * 23年12月13日--增加过滤，改变此方法
     * @return {?}
     */
    setCheckedAll() {
        if (this.allCols && this.allCols.length) {
            /** @type {?} */
            let checkboxValue = [];
            checkboxValue = this.allCols.map((/**
             * @param {?} item
             * @return {?}
             */
            item => item.value));
            this.allColsCheckValue = [].concat(checkboxValue);
            this.onlyUpdateCheckValue();
        }
    }
    /**
     * 取消全选
     * @private
     * @return {?}
     */
    setUnCheckedAll() {
        if (this.allCols && this.allCols.length) {
            this.allColsCheckValue = [];
            this.onlyUpdateCheckValue();
        }
    }
    /**
     * @return {?}
     */
    handleCheckClick() {
        if (this.boolCheckState == 'indeterminate') {
            this.boolCheckState = 'checked';
            this.boolchecked = true;
            this._item.value.value = [true];
        }
        else if (this.boolCheckState == 'checked') {
            this.boolCheckState = 'unchecked';
            this.boolchecked = false;
            this._item.value.value = [false];
        }
        else if (this.boolCheckState == 'unchecked') {
            this.boolCheckState = 'indeterminate';
            this.boolchecked = null;
            this._item.value.value = [];
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * 清空查询
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    clearSearch($event, input) {
        if (input && input.value) {
            this.filterItems('');
            input.value = '';
        }
    }
    /**
     * 开始查询
     * @param {?} $event
     * @return {?}
     */
    searchItems($event) {
        /** @type {?} */
        const txt = $event.target.value;
        this.filterItems(txt);
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    searchInputFocus(ev) {
        if (!this.hasSetWidthSearching) {
            /** @type {?} */
            let findParEl = this.searchInput.nativeElement.closest('.checkboxgroup-has-search');
            this.hasSetWidthSearching = true;
            findParEl.style.width = findParEl.offsetWidth + 'px';
        }
    }
    /**
     * 过滤项
     * @private
     * @param {?=} searchWords
     * @return {?}
     */
    filterItems(searchWords = '') {
        /** @type {?} */
        let cols = [];
        searchWords = searchWords.trim();
        if (searchWords) {
            /** @type {?} */
            let searchArray = searchWords.split(" ");
            /** @type {?} */
            let tallColsCheckValue = [];
            this.notInCurResult = [];
            cols = this.checkboxDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                let waitSearchStr = item.name.toLowerCase();
                /** @type {?} */
                let curResult = false;
                // 空格做为同一个匹配条件
                /** @type {?} */
                let findNotContain = searchArray.findIndex((/**
                 * @param {?} searchStr
                 * @return {?}
                 */
                searchStr => {
                    // A B 两个条件过滤
                    if (searchStr == '') {
                        return false;
                    }
                    return waitSearchStr.indexOf(searchStr.toLowerCase()) == -1;
                }));
                curResult = findNotContain == -1;
                if (curResult) {
                    //在查询结果内
                    if (this.checkValue.some((/**
                     * @param {?} checkItem
                     * @return {?}
                     */
                    (checkItem) => checkItem == item.value))) {
                        //且在选择的值范围内
                        tallColsCheckValue.push(item.value);
                    }
                }
                return curResult;
            }));
            this.allCols = cols;
            this.allColsCheckValue = tallColsCheckValue;
            // 不在当前选中的数据
            this.notInCurResult = this.checkValue.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => tallColsCheckValue.indexOf(x) === -1));
        }
        else {
            this.allCols = this.checkboxDataSource;
            //如果是查询出全部数据
            this.allColsCheckValue = [].concat(this.checkValue);
            this.notInCurResult = [];
        }
        // 更改全选状态
        this.searchResultIsCheckAll();
    }
    /**
     * 查询结果全选的状态
     * @private
     * @return {?}
     */
    searchResultIsCheckAll() {
        // 如果无结果
        if (this.allCols.length == 0) {
            this.checkedAll = false;
            this.checkallCheckboxDisabled = true;
        }
        else {
            if (this.allCols.length > this.allColsCheckValue.length) {
                // 查询结果的长度比已选元素多
                this.checkedAll = false;
            }
            else {
                this.checkedAll = true;
            }
            this.checkallCheckboxDisabled = false;
        }
    }
    /**
     * 更新状态
     * @private
     * @return {?}
     */
    onlyUpdateCheckValue() {
        this.checkValue = [].concat(this.allColsCheckValue, this.notInCurResult);
        this._item.value.value = this.checkValue;
    }
    /**
     * @private
     * @return {?}
     */
    setLocaleData() {
        if (this.enableSearch && this.localeService) {
            this.searchPlaceHolder = this.localeService.getValue('filterPanel.searchPlaceHolder') || "请输入名称";
        }
    }
}
PanelfilterCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-checkbox',
                template: "<div class=\"f-cmp-inputgroup mb-2\"  *ngIf=\"!boolcheck&&enableSearch\" style=\"position: sticky;z-index: 1;top:0;\">\r\n    <div class=\"input-group\">\r\n        <input #searchInput class=\"form-control\" type=\"text\" [placeholder]=\"searchPlaceHolder\"  (input)=\"searchItems($event)\" (focus)=\"searchInputFocus($event)\"/>\r\n            <div class=\"input-group-append f-cursor-pointer\" (click)=\"clearSearch($event,searchInput)\">\r\n                <span class=\"input-group-text\">\r\n                    <i class=\"f-icon\"  [ngClass]=\"searchInput.value?'f-icon-close':'f-icon-search'\"></i>\r\n                </span>                \r\n            </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" *ngIf=\"!boolcheck\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\" [disabled]=\"checkallCheckboxDisabled\">\r\n    <label class=\"custom-control-label\" (click)=\"handleClick($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<ng-container *ngIf=\"!boolcheck; else elseTemplate\">\r\n    <farris-checkboxgroup [value]=\"allColsCheckValue\" [horizontal]=\"false\"\r\n        [data]=\"allCols\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup>\r\n</ng-container>\r\n<ng-template #elseTemplate>\r\n    <div class=\"custom-control custom-checkbox custom-control-inline filter-bool-checkbox\">\r\n        <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"boolchecked\" [indeterminate]=\"boolCheckState == 'indeterminate'\">\r\n        <label class=\"custom-control-label\" (click)=\"handleCheckClick()\">{{item.fieldName || item.name}}</label>\r\n    </div>\r\n</ng-template>\r\n\r\n"
            }] }
];
/** @nocollapse */
PanelfilterCheckboxComponent.ctorParameters = () => [
    { type: LocaleService, decorators: [{ type: Optional }] }
];
PanelfilterCheckboxComponent.propDecorators = {
    enableSearch: [{ type: Input }],
    boolcheck: [{ type: Input }],
    item: [{ type: Input }],
    searchInput: [{ type: ViewChild, args: ['searchInput',] }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }]
};
if (false) {
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkedAll;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.enableSearch;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolcheck;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype._item;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.searchInput;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.searchHandle;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.submitChange;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkValue;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolchecked;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolCheckState;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkboxDataSource;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.allCols;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.allColsCheckValue;
    /**
     * @type {?}
     * @private
     */
    PanelfilterCheckboxComponent.prototype.notInCurResult;
    /**
     * @type {?}
     * @private
     */
    PanelfilterCheckboxComponent.prototype.hasSetWidthSearching;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.searchPlaceHolder;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkallCheckboxDisabled;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,