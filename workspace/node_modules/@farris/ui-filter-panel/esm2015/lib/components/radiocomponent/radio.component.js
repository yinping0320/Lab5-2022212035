/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
export class PanelRadioComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.radioDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        this.getDataSource();
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = { value: '' };
        }
        //this.radioValue = this._item.value.getOriginalValue();
        this.radioValue = this._item.value.value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.getDataSource();
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this._item && this._item.control) {
            /** @type {?} */
            let radioboxList = (this._item.control);
            this.radioDataSource = Array();
            if (radioboxList.enumValues && radioboxList.enumValues.length > 0) {
                radioboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.radioDataSource.push(Object.assign({}, element));
                }));
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            this._item.value.value = event;
        }
        else {
            this._item.value.value = '';
        }
        // this._item.valueText = this._item.value.value;
        this.getValueText();
        //this.radioValue = this._item.value.getOriginalValue();
        this.radioValue = this._item.value.value;
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getValueText() {
        /** @type {?} */
        const enumValue = (this._item.control).enumValues;
        /** @type {?} */
        const value = (this._item.value).value;
        if (enumValue && enumValue.length) {
            /** @type {?} */
            const texts = enumValue.find((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                return val['value'] == value;
            }));
            if (texts) {
                this._item.valueText = texts['name'];
            }
        }
    }
}
PanelRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-radio',
                template: "<!-- <farris-radiogroup \r\n[value]=\"radioValue\" \r\n[horizontal]=\"false\" \r\n[data]=\"radioDataSource\"\r\n(changeValue)=\"onSearch($event)\">\r\n</farris-radiogroup> -->\r\n\r\n<div class=\"f-filter-panel-radiogroup\">\r\n    <div class=\"panel-radiogroup-item\" \r\n    [ngClass]=\"{'panel-radiogroup-item-active': radioValue == item.value}\"\r\n    *ngFor=\"let item of radioDataSource\"\r\n    (click)=\"onSearch(item.value)\"\r\n    >\r\n        <span class=\"panel-radiogroup-item-text\">{{item.name}}</span>\r\n    </div>\r\n</div>"
                // encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
PanelRadioComponent.ctorParameters = () => [];
PanelRadioComponent.propDecorators = {
    item: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }]
};
if (false) {
    /** @type {?} */
    PanelRadioComponent.prototype._item;
    /** @type {?} */
    PanelRadioComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    PanelRadioComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    PanelRadioComponent.prototype.showlabel;
    /** @type {?} */
    PanelRadioComponent.prototype.radioValue;
    /** @type {?} */
    PanelRadioComponent.prototype.selectCheck;
    /** @type {?} */
    PanelRadioComponent.prototype.radioDataSource;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItcGFuZWwvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9yYWRpb2NvbXBvbmVudC9yYWRpby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBUXpGLE1BQU0sT0FBTyxtQkFBbUI7SUEwQjVCO1FBWHdCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7OztRQUUxRCxXQUFNLEdBQVcsS0FBSyxDQUFDOzs7O1FBRXZCLGNBQVMsR0FBVyxJQUFJLENBQUM7UUFHekIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFakIsb0JBQWUsR0FBWSxJQUFJLEtBQUssRUFBTyxDQUFDO0lBRTlCLENBQUM7Ozs7SUF4QmYsSUFDSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSTtRQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUUsRUFBQyxLQUFLLEVBQUcsRUFBRSxFQUFDLENBQUM7U0FDbEM7UUFDRCx3REFBd0Q7UUFDeEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDN0MsQ0FBQzs7OztJQWNELFFBQVE7UUFDSixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELGFBQWE7UUFDVCxJQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUM7O2dCQUM1QixZQUFZLEdBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUNyQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssRUFBTyxDQUFDO1lBRXBDLElBQUcsWUFBWSxDQUFDLFVBQVUsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUM7Z0JBQzNELFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTzs7OztnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDdEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxFQUFDLENBQUM7YUFDTjtTQUNKO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsS0FBSztRQUNWLElBQUcsS0FBSyxFQUFDO1lBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNsQzthQUNHO1lBQ0EsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUMvQjtRQUNGLGlEQUFpRDtRQUNoRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsd0RBQXdEO1FBQ3hELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELFlBQVk7O2NBQ0YsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVOztjQUMzQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUs7UUFDdEMsSUFBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBQzs7a0JBQ3ZCLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSTs7OztZQUFDLEdBQUcsQ0FBQSxFQUFFO2dCQUM5QixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUM7WUFDakMsQ0FBQyxFQUFDO1lBQ0YsSUFBRyxLQUFLLEVBQUM7Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hDO1NBQ0o7SUFDTCxDQUFDOzs7WUFoRkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLDJpQkFBcUM7Z0JBQ3JDLHdDQUF3QzthQUMzQzs7Ozs7bUJBSUksS0FBSzsyQkFhTCxNQUFNLFNBQUMsY0FBYzs7OztJQWR0QixvQ0FBVTs7SUFjViwyQ0FBMEQ7Ozs7O0lBRTFELHFDQUF1Qjs7Ozs7SUFFdkIsd0NBQXlCOztJQUN6Qix5Q0FBa0I7O0lBRWxCLDBDQUFpQjs7SUFFakIsOENBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwYW5lbC1maWx0ZXItcmFkaW8nLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvLmNvbXBvbmVudC5odG1sJ1xyXG4gICAgLy8gZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhbmVsUmFkaW9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsT25DaGFuZ2Vze1xyXG4gICAgX2l0ZW06YW55O1xyXG4gICAgQElucHV0KClcclxuICAgIGdldCBpdGVtKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtO1xyXG4gICAgfVxyXG4gICAgc2V0IGl0ZW0oZGF0YSkge1xyXG4gICAgICAgIHRoaXMuX2l0ZW0gPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YVNvdXJjZSgpO1xyXG4gICAgICAgIGlmKCF0aGlzLl9pdGVtLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2l0ZW0udmFsdWUgPXt2YWx1ZSA6ICcnfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy90aGlzLnJhZGlvVmFsdWUgPSB0aGlzLl9pdGVtLnZhbHVlLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgICAgICB0aGlzLnJhZGlvVmFsdWUgPSB0aGlzLl9pdGVtLnZhbHVlLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgQE91dHB1dCgnc2VhcmNoSGFuZGxlJykgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgLyoq5Yik5pat5piv5ZCm5piv5Zyo5omp5bGV5Yy65Z+f5bGV56S6ICovXHJcbiAgICBleHRlbmQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoq5Yik5pat5piv5ZCm5pi+56S6bGFiZWwgKi9cclxuICAgIHNob3dsYWJlbDpib29sZWFuID0gdHJ1ZTtcclxuICAgIHJhZGlvVmFsdWU6IGFueVtdO1xyXG5cclxuICAgIHNlbGVjdENoZWNrID0gW107XHJcblxyXG4gICAgcmFkaW9EYXRhU291cmNlOkFycmF5PGFueT49bmV3IEFycmF5PGFueT4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdldERhdGFTb3VyY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdldERhdGFTb3VyY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhU291cmNlKCl7XHJcbiAgICAgICAgaWYodGhpcy5faXRlbSAmJiB0aGlzLl9pdGVtLmNvbnRyb2wpe1xyXG4gICAgICAgICAgICBsZXQgcmFkaW9ib3hMaXN0PSh0aGlzLl9pdGVtLmNvbnRyb2wpO1xyXG4gICAgICAgICAgICB0aGlzLnJhZGlvRGF0YVNvdXJjZSA9IEFycmF5PGFueT4oKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHJhZGlvYm94TGlzdC5lbnVtVmFsdWVzICYmIHJhZGlvYm94TGlzdC5lbnVtVmFsdWVzLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgICAgIHJhZGlvYm94TGlzdC5lbnVtVmFsdWVzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWRpb0RhdGFTb3VyY2UucHVzaChPYmplY3QuYXNzaWduKHt9LGVsZW1lbnQpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uU2VhcmNoKGV2ZW50KXtcclxuICAgICAgICBpZihldmVudCl7XHJcbiAgICAgICAgICAgIHRoaXMuX2l0ZW0udmFsdWUudmFsdWUgPSBldmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZS52YWx1ZSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgIC8vIHRoaXMuX2l0ZW0udmFsdWVUZXh0ID0gdGhpcy5faXRlbS52YWx1ZS52YWx1ZTtcclxuICAgICAgICB0aGlzLmdldFZhbHVlVGV4dCgpO1xyXG4gICAgICAgIC8vdGhpcy5yYWRpb1ZhbHVlID0gdGhpcy5faXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCk7XHJcbiAgICAgICAgdGhpcy5yYWRpb1ZhbHVlID0gdGhpcy5faXRlbS52YWx1ZS52YWx1ZTtcclxuICAgICAgICB0aGlzLnNlYXJjaEhhbmRsZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VmFsdWVUZXh0KCl7XHJcbiAgICAgICAgY29uc3QgZW51bVZhbHVlID0gKHRoaXMuX2l0ZW0uY29udHJvbCkuZW51bVZhbHVlcztcclxuICAgICAgICBjb25zdCB2YWx1ZSA9ICh0aGlzLl9pdGVtLnZhbHVlKS52YWx1ZTtcclxuICAgICAgICBpZihlbnVtVmFsdWUgJiYgZW51bVZhbHVlLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRzID0gZW51bVZhbHVlLmZpbmQodmFsPT57XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsWyd2YWx1ZSddID09IHZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYodGV4dHMpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZVRleHQgPSB0ZXh0c1snbmFtZSddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19