/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild } from '@angular/core';
import { NumberSpinnerComponent } from '@farris/ui-number-spinner';
export class PanelSingleNumberComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = { value: null };
            }
            if (this._item.placeHolder) {
                this.placeholder = this._item.placeHolder || '';
            }
        }
        this.precision = nr.control.precision;
        this.bigNumber = nr.control.bigNumber;
        if (!this.bigNumber) {
            this.min = -2147483648;
            this.max = 2147483647;
        }
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.numberText) {
            this.numberText.input.nativeElement.focus();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    numberChange(event) {
        this._item.value.value = event;
        if (Object.keys(this._item.value).length === 0) {
            this._item.valueText = '';
        }
        else {
            this._item.valueText = '' + this._item.value.value;
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || val.value == null) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelSingleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-single-number',
                template: "<farris-number-spinner\r\n    class=\"f-utils-fill-flex-row\"\r\n    [(ngModel)]=\"item.value.value\"\r\n    [canNull]=\"canNull\"\r\n    [precision]=\"precision\"\r\n    [bigNumber]=\"bigNumber\"\r\n    [min]=\"min\" \r\n    [max]=\"max\"\r\n    [placeholder]=\"placeholder\"\r\n    (valueChange)=\"numberChange($event)\"\r\n    #numberText\r\n></farris-number-spinner>"
            }] }
];
/** @nocollapse */
PanelSingleNumberComponent.ctorParameters = () => [];
PanelSingleNumberComponent.propDecorators = {
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }],
    item: [{ type: Input }],
    numberText: [{ type: ViewChild, args: ['numberText',] }]
};
if (false) {
    /** @type {?} */
    PanelSingleNumberComponent.prototype.searchHandle;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.submitChange;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.canNull;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.number;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.precision;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.placeholder;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.bigNumber;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.max;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.min;
    /** @type {?} */
    PanelSingleNumberComponent.prototype._item;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.numberRange;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.numberText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlbnVtYmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLXBhbmVsLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc2luZ2xlbnVtYmVyY29tcG9uZW50L3NpbmdsZW51bWJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF1QixZQUFZLEVBQUUsTUFBTSxFQUFjLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuSCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQVFuRSxNQUFNLE9BQU8sMEJBQTBCO0lBdUNuQztRQXJDVSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzVDLFlBQU8sR0FBRyxJQUFJLENBQUM7SUFtQ0MsQ0FBQzs7Ozs7SUF6QmpCLElBQ0ksSUFBSSxDQUFDLEVBQU87UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQ3RDO1lBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7YUFDbkQ7U0FDSjtRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFDRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQzs7OztJQU1ELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQy9DO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsS0FBSztRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7U0FDN0I7YUFBTTtZQUNILElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDdEQ7UUFDRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsZUFBZTs7Y0FDTCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO1FBQzVCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2xELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7OztZQXRFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsOFhBQTRDO2FBQy9DOzs7OzsyQkFJSSxNQUFNOzJCQUNOLE1BQU07bUJBV04sS0FBSzt5QkF1QkwsU0FBUyxTQUFDLFlBQVk7Ozs7SUFuQ3ZCLGtEQUE0Qzs7SUFDNUMsa0RBQTRDOztJQUM1Qyw2Q0FBZTs7SUFDZiw0Q0FBZTs7SUFDZiwrQ0FBa0I7O0lBQ2xCLGlEQUFvQjs7SUFDcEIsK0NBQW1COztJQUNuQix5Q0FBWTs7SUFDWix5Q0FBWTs7SUFFWiwyQ0FBVzs7SUFDWCxpREFBb0I7O0lBd0JwQixnREFBNEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIEhvc3RCaW5kaW5nLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgRWxlbWVudFJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE51bWJlclNwaW5uZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLW51bWJlci1zcGlubmVyJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAncGFuZWwtZmlsdGVyLXNpbmdsZS1udW1iZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NpbmdsZW51bWJlci5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBQYW5lbFNpbmdsZU51bWJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQE91dHB1dCgpIHNlYXJjaEhhbmRsZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBzdWJtaXRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjYW5OdWxsID0gdHJ1ZTtcclxuICAgIG51bWJlcjogc3RyaW5nO1xyXG4gICAgcHJlY2lzaW9uOiBudW1iZXI7XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgYmlnTnVtYmVyOiBib29sZWFuO1xyXG4gICAgbWF4OiBudW1iZXI7XHJcbiAgICBtaW46IG51bWJlcjtcclxuXHJcbiAgICBfaXRlbTogYW55O1xyXG4gICAgbnVtYmVyUmFuZ2U6IHN0cmluZztcclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgaXRlbShucjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5faXRlbSA9IG5yO1xyXG4gICAgICAgIGlmICh0aGlzLl9pdGVtKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faXRlbS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZSA9IHsgdmFsdWU6IG51bGwgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5faXRlbS5wbGFjZUhvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuX2l0ZW0ucGxhY2VIb2xkZXIgfHwgJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcmVjaXNpb24gPSBuci5jb250cm9sLnByZWNpc2lvbjtcclxuICAgICAgICB0aGlzLmJpZ051bWJlciA9IG5yLmNvbnRyb2wuYmlnTnVtYmVyO1xyXG4gICAgICAgIGlmICghdGhpcy5iaWdOdW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5taW4gPSAtMjE0NzQ4MzY0ODtcclxuICAgICAgICAgICAgdGhpcy5tYXggPSAyMTQ3NDgzNjQ3O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFN1Ym1pdENoYW5nZSgpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGl0ZW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnbnVtYmVyVGV4dCcpIG51bWJlclRleHQ6IE51bWJlclNwaW5uZXJDb21wb25lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5udW1iZXJUZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubnVtYmVyVGV4dC5pbnB1dC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG51bWJlckNoYW5nZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZW0udmFsdWUudmFsdWUgPSBldmVudDtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5faXRlbS52YWx1ZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2l0ZW0udmFsdWVUZXh0ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZVRleHQgPSAnJyArIHRoaXMuX2l0ZW0udmFsdWUudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0U3VibWl0Q2hhbmdlKCk7XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN1Ym1pdENoYW5nZSgpIHtcclxuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLl9pdGVtLnZhbHVlO1xyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA8IDAgfHwgdmFsLnZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXRDaGFuZ2UuZW1pdChmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXRDaGFuZ2UuZW1pdCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19