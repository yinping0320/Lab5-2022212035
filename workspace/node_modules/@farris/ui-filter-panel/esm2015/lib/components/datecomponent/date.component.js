/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
export class PanelDateComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.initDate();
        }), 0);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    initDate() {
        if (this._item.placeHolder) {
            this.placeholder = this._item.placeHolder || '';
        }
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = { value: '' };
        }
        if (this.item && this._item.value
            && (this._item.value).value) {
            this.date = this._item.value.value;
        }
        else {
            this.date = undefined;
        }
        /** @type {?} */
        const format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');
        this.dateFormat = this._item.control.format ? this._item.control.format : format;
        this.setSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        if (event.returnFormatted) {
            (this._item.value).value = event.returnFormatted;
        }
        else {
            (this._item.value).value = '';
        }
        // this._item.valueText = this._item.value.value;
        this._item.valueText = event.formatted;
        this.setSubmitChange();
        this.searchHandle.emit(event);
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || !val.value) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-date',
                template: "\r\n<farris-datepicker\r\n    [(ngModel)]=\"date\"\r\n    [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\"\r\n    [editable]=\"false\" [dateFormat]=\"dateFormat\"\r\n    (valueChange)=\"onDateChange($event)\"\r\n    [placeholder]=\"placeholder\" [showType]=\"showType\">\r\n</farris-datepicker>"
            }] }
];
/** @nocollapse */
PanelDateComponent.ctorParameters = () => [];
PanelDateComponent.propDecorators = {
    item: [{ type: Input }],
    showType: [{ type: Input }],
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PanelDateComponent.prototype._item;
    /** @type {?} */
    PanelDateComponent.prototype.showType;
    /** @type {?} */
    PanelDateComponent.prototype.searchHandle;
    /** @type {?} */
    PanelDateComponent.prototype.submitChange;
    /** @type {?} */
    PanelDateComponent.prototype.date;
    /** @type {?} */
    PanelDateComponent.prototype.placeholder;
    /** @type {?} */
    PanelDateComponent.prototype.dateFormat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2RhdGVjb21wb25lbnQvZGF0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPL0UsTUFBTSxPQUFPLGtCQUFrQjtJQXVCM0I7UUFQVSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBTTVCLENBQUM7Ozs7SUFsQmpCLElBQ0ksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDOzs7OztJQUNELElBQUksSUFBSSxDQUFDLElBQUk7UUFDVCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixVQUFVOzs7UUFBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1YsQ0FBQzs7OztJQVdELFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7U0FDbkQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7U0FDcEM7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO2VBQzFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDdEM7YUFBTTtZQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1NBQ3pCOztjQUNLLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztRQUNoRyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDakYsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQVU7UUFDbkIsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFO1lBQ3ZCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztTQUNwRDthQUFNO1lBQ0gsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDakM7UUFDRCxpREFBaUQ7UUFDakQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUN2QyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELGVBQWU7O2NBQ0wsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztRQUM1QixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakM7YUFDSTtZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQzs7O1lBdkVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qix1VkFBb0M7YUFDdkM7Ozs7O21CQU9JLEtBQUs7dUJBVUwsS0FBSzsyQkFDTCxNQUFNOzJCQUNOLE1BQU07Ozs7SUFiUCxtQ0FBVzs7SUFXWCxzQ0FBMEI7O0lBQzFCLDBDQUE0Qzs7SUFDNUMsMENBQTRDOztJQUU1QyxrQ0FBYTs7SUFDYix5Q0FBb0I7O0lBQ3BCLHdDQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwYW5lbC1maWx0ZXItZGF0ZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGF0ZS5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBQYW5lbERhdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIC8vIEBJbnB1dCgpIGl0ZW06YW55O1xyXG5cclxuICAgIF9pdGVtOiBhbnk7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ2V0IGl0ZW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW07XHJcbiAgICB9XHJcbiAgICBzZXQgaXRlbShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5faXRlbSA9IGRhdGE7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdERhdGUoKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIHNob3dUeXBlOiBzdHJpbmc7XHJcbiAgICBAT3V0cHV0KCkgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHN1Ym1pdENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIC8vIHRpbWU6RGF0ZTtcclxuICAgIGRhdGU6IHN0cmluZztcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgICBkYXRlRm9ybWF0OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBpbml0RGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXRlbS5wbGFjZUhvbGRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5faXRlbS5wbGFjZUhvbGRlciB8fCAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pdGVtLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2l0ZW0udmFsdWUgPSB7IHZhbHVlOiAnJyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pdGVtICYmIHRoaXMuX2l0ZW0udmFsdWVcclxuICAgICAgICAgICAgJiYgKHRoaXMuX2l0ZW0udmFsdWUpLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHRoaXMuX2l0ZW0udmFsdWUudmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLnNob3dUeXBlID09ICcyJyA/ICd5eXl5LU1NJyA6ICh0aGlzLnNob3dUeXBlID09ICczJyA/ICd5eXl5JyA6ICd5eXl5LU1NLWRkJyk7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5faXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuX2l0ZW0uY29udHJvbC5mb3JtYXQgOiBmb3JtYXQ7XHJcbiAgICAgICAgdGhpcy5zZXRTdWJtaXRDaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRhdGVDaGFuZ2UoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGlmIChldmVudC5yZXR1cm5Gb3JtYXR0ZWQpIHtcclxuICAgICAgICAgICAgKHRoaXMuX2l0ZW0udmFsdWUpLnZhbHVlID0gZXZlbnQucmV0dXJuRm9ybWF0dGVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICh0aGlzLl9pdGVtLnZhbHVlKS52YWx1ZSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLl9pdGVtLnZhbHVlVGV4dCA9IHRoaXMuX2l0ZW0udmFsdWUudmFsdWU7XHJcbiAgICAgICAgdGhpcy5faXRlbS52YWx1ZVRleHQgPSBldmVudC5mb3JtYXR0ZWQ7XHJcbiAgICAgICAgdGhpcy5zZXRTdWJtaXRDaGFuZ2UoKTtcclxuICAgICAgICB0aGlzLnNlYXJjaEhhbmRsZS5lbWl0KGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdWJtaXRDaGFuZ2UoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5faXRlbS52YWx1ZTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModmFsKS5sZW5ndGggPCAwIHx8ICF2YWwudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXRDaGFuZ2UuZW1pdChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdENoYW5nZS5lbWl0KHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=