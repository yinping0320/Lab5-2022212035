/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { cloneDeep } from 'lodash-es';
export class PanelInputGroupComponent {
    constructor() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.isTextFromDialog = false;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructTextItem(this._item);
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    constructTextItem(textItem) {
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = {
                value: [],
                textValue: '',
                textField: '',
                isInputText: ''
            };
        }
        /** @type {?} */
        const textValueObj = textItem.value;
        textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();
        textItem.value = textValueObj;
        this.textValue = textValueObj.textValue;
        this.setSubmitChange();
        return textItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.getGuid();
        this.getInputGroupBindingInfo();
    }
    /**
     * @private
     * @return {?}
     */
    getGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @private
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    /**
     * @return {?}
     */
    getInputGroupBindingInfo() {
        /** @type {?} */
        const inputGroupControl = (this.item.control);
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            const options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                // let modalData = item[0];
                // this.item.value.value = modalData[this.targetField];
                /** @type {?} */
                let selectedItems = selectedItem.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                if (selectedItems && this.textField) {
                    this.item.value.value = selectedItems;
                    //this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    this.item.value.textValue = this.getTextValue(this.textField, this.item.value.value);
                    this.item.value.textField = this.textField;
                    this.item.value.isInputText = false;
                    this.item.textValue = this.item.value.textValue;
                    this.textValue = this.item.textValue;
                    this.isTextFromDialog = true;
                    this.textFormDialog = this.item.value.textValue;
                }
            });
            this.item.control.click({ event, options });
        }
    }
    /**
     * @param {?} targetField
     * @param {?} value
     * @return {?}
     */
    getTextValue(targetField, value) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.setSubmitChange();
        this.searchHandle.emit(event);
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || !val.textValue) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
}
PanelInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-inputgroup',
                template: "\r\n<input-group \r\n    [(ngModel)]=\"item.value.textValue\" \r\n    name=\"{{item.fieldName}}\" \r\n    id=\"{{testId}}\"\r\n    [groupText]=\"item.control.groupText\"\r\n    [editable]=\"item.control.editable\"\r\n    [placeholder]=\"item.placeHolder\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (enterHandle)=\"onBlur($event)\"\r\n    >\r\n</input-group>\r\n"
            }] }
];
/** @nocollapse */
PanelInputGroupComponent.ctorParameters = () => [];
PanelInputGroupComponent.propDecorators = {
    item: [{ type: Input }],
    searchHandle: [{ type: Output }],
    submitChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PanelInputGroupComponent.prototype._item;
    /** @type {?} */
    PanelInputGroupComponent.prototype.testId;
    /** @type {?} */
    PanelInputGroupComponent.prototype.usageMode;
    /** @type {?} */
    PanelInputGroupComponent.prototype.dialogOptions;
    /** @type {?} */
    PanelInputGroupComponent.prototype.textValue;
    /** @type {?} */
    PanelInputGroupComponent.prototype.searchHandle;
    /** @type {?} */
    PanelInputGroupComponent.prototype.submitChange;
    /** @type {?} */
    PanelInputGroupComponent.prototype.textField;
    /** @type {?} */
    PanelInputGroupComponent.prototype.isTextFromDialog;
    /** @type {?} */
    PanelInputGroupComponent.prototype.textFormDialog;
}
//# sourceMappingURL=data:application/json;base64,