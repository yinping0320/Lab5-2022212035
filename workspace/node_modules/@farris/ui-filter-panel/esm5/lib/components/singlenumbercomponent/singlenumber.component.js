/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild } from '@angular/core';
import { NumberSpinnerComponent } from '@farris/ui-number-spinner';
var PanelSingleNumberComponent = /** @class */ (function () {
    function PanelSingleNumberComponent() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
    }
    Object.defineProperty(PanelSingleNumberComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
            if (this._item) {
                if (!this._item.hasOwnProperty('value')) {
                    this._item.value = { value: null };
                }
                if (this._item.placeHolder) {
                    this.placeholder = this._item.placeHolder || '';
                }
            }
            this.precision = nr.control.precision;
            this.bigNumber = nr.control.bigNumber;
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
            this.setSubmitChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelSingleNumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.numberText) {
            this.numberText.input.nativeElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelSingleNumberComponent.prototype.numberChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.value = event;
        if (Object.keys(this._item.value).length === 0) {
            this._item.valueText = '';
        }
        else {
            this._item.valueText = '' + this._item.value.value;
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    PanelSingleNumberComponent.prototype.setSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 || val.value == null) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    };
    PanelSingleNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-single-number',
                    template: "<farris-number-spinner\r\n    class=\"f-utils-fill-flex-row\"\r\n    [(ngModel)]=\"item.value.value\"\r\n    [canNull]=\"canNull\"\r\n    [precision]=\"precision\"\r\n    [bigNumber]=\"bigNumber\"\r\n    [min]=\"min\" \r\n    [max]=\"max\"\r\n    [placeholder]=\"placeholder\"\r\n    (valueChange)=\"numberChange($event)\"\r\n    #numberText\r\n></farris-number-spinner>"
                }] }
    ];
    /** @nocollapse */
    PanelSingleNumberComponent.ctorParameters = function () { return []; };
    PanelSingleNumberComponent.propDecorators = {
        searchHandle: [{ type: Output }],
        submitChange: [{ type: Output }],
        item: [{ type: Input }],
        numberText: [{ type: ViewChild, args: ['numberText',] }]
    };
    return PanelSingleNumberComponent;
}());
export { PanelSingleNumberComponent };
if (false) {
    /** @type {?} */
    PanelSingleNumberComponent.prototype.searchHandle;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.submitChange;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.canNull;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.number;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.precision;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.placeholder;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.bigNumber;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.max;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.min;
    /** @type {?} */
    PanelSingleNumberComponent.prototype._item;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.numberRange;
    /** @type {?} */
    PanelSingleNumberComponent.prototype.numberText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlbnVtYmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLXBhbmVsLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc2luZ2xlbnVtYmVyY29tcG9uZW50L3NpbmdsZW51bWJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF1QixZQUFZLEVBQUUsTUFBTSxFQUFjLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuSCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUduRTtJQTRDSTtRQXJDVSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzVDLFlBQU8sR0FBRyxJQUFJLENBQUM7SUFtQ0MsQ0FBQztJQXpCakIsc0JBQ0ksNENBQUk7Ozs7UUFrQlI7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7Ozs7UUFyQkQsVUFDUyxFQUFPO1lBQ1osSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDaEIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQ3RDO2dCQUNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO2lCQUNuRDthQUNKO1lBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO2dCQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQzthQUN6QjtZQUNELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQixDQUFDOzs7T0FBQTs7OztJQVNELDZDQUFROzs7SUFBUjtRQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDL0M7SUFDTCxDQUFDOzs7OztJQUVELGlEQUFZOzs7O0lBQVosVUFBYSxLQUFLO1FBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUMvQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztTQUM3QjthQUFNO1lBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztTQUN0RDtRQUNELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxvREFBZTs7O0lBQWY7O1lBQ1UsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztRQUM1QixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtZQUNsRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQzthQUFNO1lBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7SUFDTCxDQUFDOztnQkF0RUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLDhYQUE0QztpQkFDL0M7Ozs7OytCQUlJLE1BQU07K0JBQ04sTUFBTTt1QkFXTixLQUFLOzZCQXVCTCxTQUFTLFNBQUMsWUFBWTs7SUE2QjNCLGlDQUFDO0NBQUEsQUF2RUQsSUF1RUM7U0FsRVksMEJBQTBCOzs7SUFFbkMsa0RBQTRDOztJQUM1QyxrREFBNEM7O0lBQzVDLDZDQUFlOztJQUNmLDRDQUFlOztJQUNmLCtDQUFrQjs7SUFDbEIsaURBQW9COztJQUNwQiwrQ0FBbUI7O0lBQ25CLHlDQUFZOztJQUNaLHlDQUFZOztJQUVaLDJDQUFXOztJQUNYLGlEQUFvQjs7SUF3QnBCLGdEQUE0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTnVtYmVyU3Bpbm5lckNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbnVtYmVyLXNwaW5uZXInO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwYW5lbC1maWx0ZXItc2luZ2xlLW51bWJlcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2luZ2xlbnVtYmVyLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhbmVsU2luZ2xlTnVtYmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBAT3V0cHV0KCkgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHN1Ym1pdENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNhbk51bGwgPSB0cnVlO1xyXG4gICAgbnVtYmVyOiBzdHJpbmc7XHJcbiAgICBwcmVjaXNpb246IG51bWJlcjtcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgICBiaWdOdW1iZXI6IGJvb2xlYW47XHJcbiAgICBtYXg6IG51bWJlcjtcclxuICAgIG1pbjogbnVtYmVyO1xyXG5cclxuICAgIF9pdGVtOiBhbnk7XHJcbiAgICBudW1iZXJSYW5nZTogc3RyaW5nO1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBpdGVtKG5yOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9pdGVtID0gbnI7XHJcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pdGVtLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtLnZhbHVlID0geyB2YWx1ZTogbnVsbCB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pdGVtLnBsYWNlSG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5faXRlbS5wbGFjZUhvbGRlciB8fCAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByZWNpc2lvbiA9IG5yLmNvbnRyb2wucHJlY2lzaW9uO1xyXG4gICAgICAgIHRoaXMuYmlnTnVtYmVyID0gbnIuY29udHJvbC5iaWdOdW1iZXI7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJpZ051bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLm1pbiA9IC0yMTQ3NDgzNjQ4O1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IDIxNDc0ODM2NDc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0U3VibWl0Q2hhbmdlKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgaXRlbSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBAVmlld0NoaWxkKCdudW1iZXJUZXh0JykgbnVtYmVyVGV4dDogTnVtYmVyU3Bpbm5lckNvbXBvbmVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm51bWJlclRleHQpIHtcclxuICAgICAgICAgICAgdGhpcy5udW1iZXJUZXh0LmlucHV0Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbnVtYmVyQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5faXRlbS52YWx1ZS52YWx1ZSA9IGV2ZW50O1xyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9pdGVtLnZhbHVlKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZVRleHQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtLnZhbHVlVGV4dCA9ICcnICsgdGhpcy5faXRlbS52YWx1ZS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRTdWJtaXRDaGFuZ2UoKTtcclxuICAgICAgICB0aGlzLnNlYXJjaEhhbmRsZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U3VibWl0Q2hhbmdlKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuX2l0ZW0udmFsdWU7XHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoIDwgMCB8fCB2YWwudmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdENoYW5nZS5lbWl0KGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdENoYW5nZS5lbWl0KHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=