/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild, ElementRef, Optional } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
var PanelfilterCheckboxComponent = /** @class */ (function () {
    function PanelfilterCheckboxComponent(localeService) {
        this.localeService = localeService;
        this.checkedAll = false;
        this.enableSearch = false;
        this.boolcheck = false;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.indeterminate = true;
        this.boolCheckState = 'indeterminate';
        // 数据源
        this.checkboxDataSource = new Array();
        // 当前查询结果
        this.allCols = new Array();
        // 在当前查询结果的选中值
        this.allColsCheckValue = [];
        //不在当前的查询结果中的选中值
        this.notInCurResult = [];
        // 是否设置查询时候的宽度
        this.hasSetWidthSearching = false;
        // 查询提示
        this.searchPlaceHolder = "请输入名称";
        this.checkallCheckboxDisabled = false;
    }
    Object.defineProperty(PanelfilterCheckboxComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._item = data;
            this.getDataSource();
            //this.checkValue = this._item.value.getOriginalValue();
            if (!this._item.hasOwnProperty('value'))
                this._item.value = { value: [] };
            if (this._item.hasOwnProperty('value')) {
                this.checkValue = this._item.value.value;
                //保存值
                this.allColsCheckValue = this.checkValue;
            }
            else {
                this._item.value.value = [];
            }
            if (this.boolcheck) {
                if (this.checkValue.length) {
                    this.boolchecked = this.checkValue[0];
                    if (this.boolchecked)
                        this.boolCheckState = 'checked';
                    else
                        this.boolCheckState = 'unchecked';
                }
                else
                    this.boolCheckState = 'indeterminate';
            }
            this.enableSearch = data.control.hasOwnProperty("enableSearch") ? data.control.enableSearch : false;
            if (this._item.value.value.length == 0)
                this.checkedAll = false;
            else if (this._item.control['enumValues'] && this._item.value.value.length == this._item.control['enumValues'].length)
                this.checkedAll = true;
            this.setSubmitChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setLocaleData();
    };
    /**
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.item && this._item.control) {
            /** @type {?} */
            var checkboxList = (this._item.control);
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.checkboxDataSource.push(Object.assign({}, element));
                }));
                this.allCols = this.checkboxDataSource;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var checkboxValue = [];
        if (event) {
            /** @type {?} */
            var checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this.allColsCheckValue = checkboxValue;
        }
        else {
            this.allColsCheckValue = [];
        }
        this.onlyUpdateCheckValue();
        this.searchResultIsCheckAll();
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enumValue = (this._item.control).enumValues;
        /** @type {?} */
        var value = (this._item.value).value;
        if (enumValue && enumValue.length && value && value.length) {
            /** @type {?} */
            var texts = [];
            var _loop_1 = function (i) {
                /** @type {?} */
                var enums = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return val['value'] == value[i];
                }));
                if (enums) {
                    texts.push(enums['name']);
                }
            };
            for (var i = 0; i <= value.length; i++) {
                _loop_1(i);
            }
            this._item.valueText = texts.join(',');
        }
        else {
            this._item.valueText = '';
        }
    };
    /**
     * 是否可以提交
     */
    /**
     * 是否可以提交
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.setSubmitChange = /**
     * 是否可以提交
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 || Object.keys(val.value).length === 0) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    };
    /**
     * 点击全选Checkbox
     * @param event
     */
    /**
     * 点击全选Checkbox
     * @param {?} event
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.handleClick = /**
     * 点击全选Checkbox
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.checkallCheckboxDisabled) {
            // 全选checkbox是否禁用
            return;
        }
        this.checkedAll = !this.checkedAll;
        if (this.checkedAll) {
            // 全选
            this.setCheckedAll();
        }
        else {
            // 取消全选
            this.setUnCheckedAll();
        }
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    };
    /**
     * 设置全选
     * 23年12月13日--增加过滤，改变此方法
     */
    /**
     * 设置全选
     * 23年12月13日--增加过滤，改变此方法
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.setCheckedAll = /**
     * 设置全选
     * 23年12月13日--增加过滤，改变此方法
     * @return {?}
     */
    function () {
        if (this.allCols && this.allCols.length) {
            /** @type {?} */
            var checkboxValue = [];
            checkboxValue = this.allCols.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.value; }));
            this.allColsCheckValue = [].concat(checkboxValue);
            this.onlyUpdateCheckValue();
        }
    };
    /**
     * 取消全选
     */
    /**
     * 取消全选
     * @private
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.setUnCheckedAll = /**
     * 取消全选
     * @private
     * @return {?}
     */
    function () {
        if (this.allCols && this.allCols.length) {
            this.allColsCheckValue = [];
            this.onlyUpdateCheckValue();
        }
    };
    /**
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.handleCheckClick = /**
     * @return {?}
     */
    function () {
        if (this.boolCheckState == 'indeterminate') {
            this.boolCheckState = 'checked';
            this.boolchecked = true;
            this._item.value.value = [true];
        }
        else if (this.boolCheckState == 'checked') {
            this.boolCheckState = 'unchecked';
            this.boolchecked = false;
            this._item.value.value = [false];
        }
        else if (this.boolCheckState == 'unchecked') {
            this.boolCheckState = 'indeterminate';
            this.boolchecked = null;
            this._item.value.value = [];
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    };
    /**
     * 清空查询
     * @param $event
     * @param input
     */
    /**
     * 清空查询
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.clearSearch = /**
     * 清空查询
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    function ($event, input) {
        if (input && input.value) {
            this.filterItems('');
            input.value = '';
        }
    };
    /**
     * 开始查询
     * @param $event
     */
    /**
     * 开始查询
     * @param {?} $event
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.searchItems = /**
     * 开始查询
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var txt = $event.target.value;
        this.filterItems(txt);
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.searchInputFocus = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (!this.hasSetWidthSearching) {
            /** @type {?} */
            var findParEl = this.searchInput.nativeElement.closest('.checkboxgroup-has-search');
            this.hasSetWidthSearching = true;
            findParEl.style.width = findParEl.offsetWidth + 'px';
        }
    };
    /**
     * 过滤项
     * @param searchWords
     */
    /**
     * 过滤项
     * @private
     * @param {?=} searchWords
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.filterItems = /**
     * 过滤项
     * @private
     * @param {?=} searchWords
     * @return {?}
     */
    function (searchWords) {
        var _this = this;
        if (searchWords === void 0) { searchWords = ''; }
        /** @type {?} */
        var cols = [];
        searchWords = searchWords.trim();
        if (searchWords) {
            /** @type {?} */
            var searchArray_1 = searchWords.split(" ");
            /** @type {?} */
            var tallColsCheckValue_1 = [];
            this.notInCurResult = [];
            cols = this.checkboxDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var waitSearchStr = item.name.toLowerCase();
                /** @type {?} */
                var curResult = false;
                // 空格做为同一个匹配条件
                /** @type {?} */
                var findNotContain = searchArray_1.findIndex((/**
                 * @param {?} searchStr
                 * @return {?}
                 */
                function (searchStr) {
                    // A B 两个条件过滤
                    if (searchStr == '') {
                        return false;
                    }
                    return waitSearchStr.indexOf(searchStr.toLowerCase()) == -1;
                }));
                curResult = findNotContain == -1;
                if (curResult) {
                    //在查询结果内
                    if (_this.checkValue.some((/**
                     * @param {?} checkItem
                     * @return {?}
                     */
                    function (checkItem) { return checkItem == item.value; }))) {
                        //且在选择的值范围内
                        tallColsCheckValue_1.push(item.value);
                    }
                }
                return curResult;
            }));
            this.allCols = cols;
            this.allColsCheckValue = tallColsCheckValue_1;
            // 不在当前选中的数据
            this.notInCurResult = this.checkValue.filter((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return tallColsCheckValue_1.indexOf(x) === -1; }));
        }
        else {
            this.allCols = this.checkboxDataSource;
            //如果是查询出全部数据
            this.allColsCheckValue = [].concat(this.checkValue);
            this.notInCurResult = [];
        }
        // 更改全选状态
        this.searchResultIsCheckAll();
    };
    /**
     * 查询结果全选的状态
     */
    /**
     * 查询结果全选的状态
     * @private
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.searchResultIsCheckAll = /**
     * 查询结果全选的状态
     * @private
     * @return {?}
     */
    function () {
        // 如果无结果
        if (this.allCols.length == 0) {
            this.checkedAll = false;
            this.checkallCheckboxDisabled = true;
        }
        else {
            if (this.allCols.length > this.allColsCheckValue.length) {
                // 查询结果的长度比已选元素多
                this.checkedAll = false;
            }
            else {
                this.checkedAll = true;
            }
            this.checkallCheckboxDisabled = false;
        }
    };
    /**
     * 更新状态
     */
    /**
     * 更新状态
     * @private
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.onlyUpdateCheckValue = /**
     * 更新状态
     * @private
     * @return {?}
     */
    function () {
        this.checkValue = [].concat(this.allColsCheckValue, this.notInCurResult);
        this._item.value.value = this.checkValue;
    };
    /**
     * @private
     * @return {?}
     */
    PanelfilterCheckboxComponent.prototype.setLocaleData = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.enableSearch && this.localeService) {
            this.searchPlaceHolder = this.localeService.getValue('filterPanel.searchPlaceHolder') || "请输入名称";
        }
    };
    PanelfilterCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-checkbox',
                    template: "<div class=\"f-cmp-inputgroup mb-2\"  *ngIf=\"!boolcheck&&enableSearch\" style=\"position: sticky;z-index: 1;top:0;\">\r\n    <div class=\"input-group\">\r\n        <input #searchInput class=\"form-control\" type=\"text\" [placeholder]=\"searchPlaceHolder\"  (input)=\"searchItems($event)\" (focus)=\"searchInputFocus($event)\"/>\r\n            <div class=\"input-group-append f-cursor-pointer\" (click)=\"clearSearch($event,searchInput)\">\r\n                <span class=\"input-group-text\">\r\n                    <i class=\"f-icon\"  [ngClass]=\"searchInput.value?'f-icon-close':'f-icon-search'\"></i>\r\n                </span>                \r\n            </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" *ngIf=\"!boolcheck\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\" [disabled]=\"checkallCheckboxDisabled\">\r\n    <label class=\"custom-control-label\" (click)=\"handleClick($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<ng-container *ngIf=\"!boolcheck; else elseTemplate\">\r\n    <farris-checkboxgroup [value]=\"allColsCheckValue\" [horizontal]=\"false\"\r\n        [data]=\"allCols\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup>\r\n</ng-container>\r\n<ng-template #elseTemplate>\r\n    <div class=\"custom-control custom-checkbox custom-control-inline filter-bool-checkbox\">\r\n        <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"boolchecked\" [indeterminate]=\"boolCheckState == 'indeterminate'\">\r\n        <label class=\"custom-control-label\" (click)=\"handleCheckClick()\">{{item.fieldName || item.name}}</label>\r\n    </div>\r\n</ng-template>\r\n\r\n"
                }] }
    ];
    /** @nocollapse */
    PanelfilterCheckboxComponent.ctorParameters = function () { return [
        { type: LocaleService, decorators: [{ type: Optional }] }
    ]; };
    PanelfilterCheckboxComponent.propDecorators = {
        enableSearch: [{ type: Input }],
        boolcheck: [{ type: Input }],
        item: [{ type: Input }],
        searchInput: [{ type: ViewChild, args: ['searchInput',] }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        submitChange: [{ type: Output, args: ['submitChange',] }]
    };
    return PanelfilterCheckboxComponent;
}());
export { PanelfilterCheckboxComponent };
if (false) {
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkedAll;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.enableSearch;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolcheck;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype._item;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.searchInput;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.searchHandle;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.submitChange;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkValue;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolchecked;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolCheckState;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkboxDataSource;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.allCols;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.allColsCheckValue;
    /**
     * @type {?}
     * @private
     */
    PanelfilterCheckboxComponent.prototype.notInCurResult;
    /**
     * @type {?}
     * @private
     */
    PanelfilterCheckboxComponent.prototype.hasSetWidthSearching;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.searchPlaceHolder;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkallCheckboxDisabled;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,