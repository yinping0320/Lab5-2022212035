/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
var PanelDateComponent = /** @class */ (function () {
    function PanelDateComponent() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
    }
    Object.defineProperty(PanelDateComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _this = this;
            this._item = data;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.initDate();
            }), 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelDateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PanelDateComponent.prototype.initDate = /**
     * @return {?}
     */
    function () {
        if (this._item.placeHolder) {
            this.placeholder = this._item.placeHolder || '';
        }
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = { value: '' };
        }
        if (this.item && this._item.value
            && (this._item.value).value) {
            this.date = this._item.value.value;
        }
        else {
            this.date = undefined;
        }
        /** @type {?} */
        var format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');
        this.dateFormat = this._item.control.format ? this._item.control.format : format;
        this.setSubmitChange();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelDateComponent.prototype.onDateChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.returnFormatted) {
            (this._item.value).value = event.returnFormatted;
        }
        else {
            (this._item.value).value = '';
        }
        // this._item.valueText = this._item.value.value;
        this._item.valueText = event.formatted;
        this.setSubmitChange();
        this.searchHandle.emit(event);
    };
    /**
     * @return {?}
     */
    PanelDateComponent.prototype.setSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 || !val.value) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    };
    PanelDateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-date',
                    template: "\r\n<farris-datepicker\r\n    [(ngModel)]=\"date\"\r\n    [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\"\r\n    [editable]=\"false\" [dateFormat]=\"dateFormat\"\r\n    (valueChange)=\"onDateChange($event)\"\r\n    [placeholder]=\"placeholder\" [showType]=\"showType\">\r\n</farris-datepicker>"
                }] }
    ];
    /** @nocollapse */
    PanelDateComponent.ctorParameters = function () { return []; };
    PanelDateComponent.propDecorators = {
        item: [{ type: Input }],
        showType: [{ type: Input }],
        searchHandle: [{ type: Output }],
        submitChange: [{ type: Output }]
    };
    return PanelDateComponent;
}());
export { PanelDateComponent };
if (false) {
    /** @type {?} */
    PanelDateComponent.prototype._item;
    /** @type {?} */
    PanelDateComponent.prototype.showType;
    /** @type {?} */
    PanelDateComponent.prototype.searchHandle;
    /** @type {?} */
    PanelDateComponent.prototype.submitChange;
    /** @type {?} */
    PanelDateComponent.prototype.date;
    /** @type {?} */
    PanelDateComponent.prototype.placeholder;
    /** @type {?} */
    PanelDateComponent.prototype.dateFormat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2RhdGVjb21wb25lbnQvZGF0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0U7SUE0Qkk7UUFQVSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBTTVCLENBQUM7SUFsQmpCLHNCQUNJLG9DQUFJOzs7O1FBRFI7WUFFSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7Ozs7UUFDRCxVQUFTLElBQUk7WUFBYixpQkFLQztZQUpHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLFVBQVU7OztZQUFDO2dCQUNQLEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwQixDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7UUFDVixDQUFDOzs7T0FOQTs7OztJQWlCRCxxQ0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQscUNBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztTQUNuRDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztTQUNwQztRQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUs7ZUFDMUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztTQUN0QzthQUFNO1lBQ0gsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7U0FDekI7O1lBQ0ssTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ2hHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNqRixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFRCx5Q0FBWTs7OztJQUFaLFVBQWEsS0FBVTtRQUNuQixJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUU7WUFDdkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO1NBQ3BEO2FBQU07WUFDSCxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNqQztRQUNELGlEQUFpRDtRQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7O0lBRUQsNENBQWU7OztJQUFmOztZQUNVLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUs7UUFDNUIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO2FBQ0k7WUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7O2dCQXZFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsdVZBQW9DO2lCQUN2Qzs7Ozs7dUJBT0ksS0FBSzsyQkFVTCxLQUFLOytCQUNMLE1BQU07K0JBQ04sTUFBTTs7SUFrRFgseUJBQUM7Q0FBQSxBQXhFRCxJQXdFQztTQW5FWSxrQkFBa0I7OztJQUkzQixtQ0FBVzs7SUFXWCxzQ0FBMEI7O0lBQzFCLDBDQUE0Qzs7SUFDNUMsMENBQTRDOztJQUU1QyxrQ0FBYTs7SUFDYix5Q0FBb0I7O0lBQ3BCLHdDQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwYW5lbC1maWx0ZXItZGF0ZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGF0ZS5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBQYW5lbERhdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIC8vIEBJbnB1dCgpIGl0ZW06YW55O1xyXG5cclxuICAgIF9pdGVtOiBhbnk7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ2V0IGl0ZW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW07XHJcbiAgICB9XHJcbiAgICBzZXQgaXRlbShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5faXRlbSA9IGRhdGE7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdERhdGUoKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIHNob3dUeXBlOiBzdHJpbmc7XHJcbiAgICBAT3V0cHV0KCkgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHN1Ym1pdENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIC8vIHRpbWU6RGF0ZTtcclxuICAgIGRhdGU6IHN0cmluZztcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgICBkYXRlRm9ybWF0OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBpbml0RGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXRlbS5wbGFjZUhvbGRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5faXRlbS5wbGFjZUhvbGRlciB8fCAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pdGVtLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2l0ZW0udmFsdWUgPSB7IHZhbHVlOiAnJyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pdGVtICYmIHRoaXMuX2l0ZW0udmFsdWVcclxuICAgICAgICAgICAgJiYgKHRoaXMuX2l0ZW0udmFsdWUpLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IHRoaXMuX2l0ZW0udmFsdWUudmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLnNob3dUeXBlID09ICcyJyA/ICd5eXl5LU1NJyA6ICh0aGlzLnNob3dUeXBlID09ICczJyA/ICd5eXl5JyA6ICd5eXl5LU1NLWRkJyk7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5faXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuX2l0ZW0uY29udHJvbC5mb3JtYXQgOiBmb3JtYXQ7XHJcbiAgICAgICAgdGhpcy5zZXRTdWJtaXRDaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRhdGVDaGFuZ2UoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGlmIChldmVudC5yZXR1cm5Gb3JtYXR0ZWQpIHtcclxuICAgICAgICAgICAgKHRoaXMuX2l0ZW0udmFsdWUpLnZhbHVlID0gZXZlbnQucmV0dXJuRm9ybWF0dGVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICh0aGlzLl9pdGVtLnZhbHVlKS52YWx1ZSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLl9pdGVtLnZhbHVlVGV4dCA9IHRoaXMuX2l0ZW0udmFsdWUudmFsdWU7XHJcbiAgICAgICAgdGhpcy5faXRlbS52YWx1ZVRleHQgPSBldmVudC5mb3JtYXR0ZWQ7XHJcbiAgICAgICAgdGhpcy5zZXRTdWJtaXRDaGFuZ2UoKTtcclxuICAgICAgICB0aGlzLnNlYXJjaEhhbmRsZS5lbWl0KGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdWJtaXRDaGFuZ2UoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5faXRlbS52YWx1ZTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModmFsKS5sZW5ndGggPCAwIHx8ICF2YWwudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXRDaGFuZ2UuZW1pdChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdENoYW5nZS5lbWl0KHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=