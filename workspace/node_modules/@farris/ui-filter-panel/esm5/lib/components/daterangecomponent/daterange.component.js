/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { getLastNumMonth } from './utils';
import { LocaleService } from '@farris/ui-locale';
import { FarrisDatepickerComponent } from '@farris/ui-datepicker';
var PanelDateRangeComponent = /** @class */ (function () {
    function PanelDateRangeComponent(localeService) {
        this.localeService = localeService;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.date = new Date();
        this.dateTags = [];
    }
    Object.defineProperty(PanelDateRangeComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _this = this;
            this._item = data;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.initDate();
            }), 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelDateRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //this.initDate();
        this.dateTags = [
            {
                id: 'tag1',
                text: this.localeService.getValue('filterPanel.last1Month')
            },
            {
                id: 'tag2',
                text: this.localeService.getValue('filterPanel.last3Month')
            },
            {
                id: 'tag3',
                text: this.localeService.getValue('filterPanel.last6Month')
            }
        ];
    };
    /**
     * @return {?}
     */
    PanelDateRangeComponent.prototype.initDate = /**
     * @return {?}
     */
    function () {
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = {
                startTime: '',
                endTime: ''
            };
        }
        if (this._item.beginPlaceHolder) {
            this.beginPlaceHolder = this._item.beginPlaceHolder || '';
        }
        if (this._item.endPlaceHolder) {
            this.endPlaceHolder = this._item.endPlaceHolder || '';
        }
        if (this.item && this._item.control) {
            /** @type {?} */
            var itemDateFormat = this._item.control.format;
            if (this.showTime && itemDateFormat) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            var format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        /** @type {?} */
        var rangeDateValue = this._item && this._item.value;
        this.activedDateTagId = '';
        if (rangeDateValue.startTime && rangeDateValue.endTime) {
            this.rangeDate = rangeDateValue.startTime + "~" + rangeDateValue.endTime;
        }
        else {
            this.rangeDate = '';
        }
        this.setSubmitChange();
    };
    /**
     * @param {?} dateString
     * @return {?}
     */
    PanelDateRangeComponent.prototype.getDate = /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        /** @type {?} */
        var date = new Date(dateString);
        return date;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelDateRangeComponent.prototype.onDateChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.returnFormatted) {
            (this._item.value).startTime = event.returnFormatted.split('~')[0];
            (this._item.value).endTime = event.returnFormatted.split('~')[1];
        }
        else {
            this._item.value.startTime = '';
            this._item.value.endTime = '';
        }
        // if (Object.keys(this._item.value).length === 0 || (!this._item.value.startTime && !this._item.value.endTime)) {
        //     this._item.valueText = ''
        // }
        // else {
        //     this._item.valueText = this._item.value.startTime + '~' + this._item.value.endTime;
        // }
        this._item.valueText = event.formatted;
        this.activedDateTagId = '';
        this.setSubmitChange();
        this.searchHandle.emit(event);
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    PanelDateRangeComponent.prototype.clickTag = /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        this.activedDateTagId = tag.id;
        /** @type {?} */
        var tagDate;
        if (tag.id == 'tag1') {
            tagDate = getLastNumMonth(1, this.showTime, this.showType);
        }
        else if (tag.id == 'tag2') {
            tagDate = getLastNumMonth(3, this.showTime, this.showType);
        }
        else if (tag.id == 'tag3') {
            tagDate = getLastNumMonth(6, this.showTime, this.showType);
        }
        this._item.value.startTime = tagDate['startTime'];
        this._item.value.endTime = tagDate['endTime'];
        /** @type {?} */
        var rangeDateValue = this._item && this._item.value;
        if (rangeDateValue.startTime && rangeDateValue.endTime) {
            this.rangeDate = rangeDateValue.startTime + "~" + rangeDateValue.endTime;
        }
        else {
            this.rangeDate = '';
        }
        // this._item.valueText = this._item.value.startTime + '~' + this._item.value.endTime;
        this._item.valueText = this.datepickerEle.dateTo(new Date(this._item.value.startTime)) + '~' + this.datepickerEle.dateTo(new Date(this._item.value.endTime));
        this.setSubmitChange();
    };
    /**
     * @return {?}
     */
    PanelDateRangeComponent.prototype.setSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 || (!val.startTime && !val.endTime)) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    };
    PanelDateRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-daterange',
                    template: "<!-- <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showTime]=\"showTime\"></farris-datepicker> -->\r\n\r\n<ng-container *ngIf=\"showTime;else defaultdate\">\r\n    <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n</ng-container>\r\n<ng-template #defaultdate>\r\n    <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n</ng-template>\r\n\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"showType !== '3'\">\r\n    <div class=\"panel-date-tag\" \r\n    *ngFor=\"let tag of dateTags\" \r\n    (click)=\"clickTag(tag)\"\r\n    [ngClass]=\"{'active': tag.id == activedDateTagId}\"\r\n    >\r\n        {{tag.text}}\r\n    </div>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    PanelDateRangeComponent.ctorParameters = function () { return [
        { type: LocaleService }
    ]; };
    PanelDateRangeComponent.propDecorators = {
        item: [{ type: Input }],
        showTime: [{ type: Input }],
        showType: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        submitChange: [{ type: Output, args: ['submitChange',] }],
        datepickerEle: [{ type: ViewChild, args: ['datepicker',] }]
    };
    return PanelDateRangeComponent;
}());
export { PanelDateRangeComponent };
if (false) {
    /** @type {?} */
    PanelDateRangeComponent.prototype._item;
    /** @type {?} */
    PanelDateRangeComponent.prototype.showTime;
    /** @type {?} */
    PanelDateRangeComponent.prototype.showType;
    /** @type {?} */
    PanelDateRangeComponent.prototype.searchHandle;
    /** @type {?} */
    PanelDateRangeComponent.prototype.submitChange;
    /** @type {?} */
    PanelDateRangeComponent.prototype.datepickerEle;
    /** @type {?} */
    PanelDateRangeComponent.prototype.startTime;
    /** @type {?} */
    PanelDateRangeComponent.prototype.endTime;
    /** @type {?} */
    PanelDateRangeComponent.prototype.rangeDate;
    /** @type {?} */
    PanelDateRangeComponent.prototype.placeholder;
    /** @type {?} */
    PanelDateRangeComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    PanelDateRangeComponent.prototype.endPlaceHolder;
    /** @type {?} */
    PanelDateRangeComponent.prototype.dateFormat;
    /** @type {?} */
    PanelDateRangeComponent.prototype.date;
    /** @type {?} */
    PanelDateRangeComponent.prototype.dateTags;
    /** @type {?} */
    PanelDateRangeComponent.prototype.activedDateTagId;
    /** @type {?} */
    PanelDateRangeComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,