/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} num
 * @param {?} showtime
 * @param {?} type
 * @return {?}
 */
export function getLastNumMonth(num, showtime, type) {
    /** @type {?} */
    var now = new Date();
    /** @type {?} */
    var year = now.getFullYear();
    /** @type {?} */
    var month = now.getMonth() + 1;
    //0-11表示1-12月
    /** @type {?} */
    var day = now.getDate();
    /** @type {?} */
    var hour = now.getHours();
    /** @type {?} */
    var min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
        : new Date().getMinutes();
    /** @type {?} */
    var sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
        : new Date().getSeconds();
    /** @type {?} */
    var dateObj = {};
    /** @type {?} */
    var time = hour + ':' + min + ':' + sec;
    // dateObj['endTime'] = year + '-' + month + '-' + day;
    /** @type {?} */
    var endMonth = month < 10 ? '0' + month : month;
    /** @type {?} */
    var endDay = day < 10 ? '0' + day : day;
    if (type == '2') {
        dateObj['endTime'] = year + '-' + endMonth;
    }
    else if (type == '3') {
        dateObj['endTime'] = year;
    }
    else {
        dateObj['endTime'] = year + '-' + endMonth + '-' + endDay;
    }
    /** @type {?} */
    var nowMonthDay = new Date(year, month, 0).getDate();
    //当前月的总天数
    /** @type {?} */
    var dYear;
    /** @type {?} */
    var dMouth;
    /** @type {?} */
    var dDay;
    if (month - num <= 0) { //如果是1、2、3月，年数往前推一年
        //如果是1、2、3月，年数往前推一年
        /** @type {?} */
        var lastMonthDay = new Date((year - 1), (12 - (num - month)), 0).getDate();
        if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
            // dateObj['startTime'] = (year - 1) + '-' + (12 - (num - month)) + '-' + lastMonthDay;
            dYear = year - 1;
            dMouth = 12 - (num - month);
            dDay = lastMonthDay;
        }
        else {
            dYear = year - 1;
            dMouth = 12 - (num - month);
            dDay = day;
            // dateObj['startTime']= (year - 1) + '-' + (12 - (num - month)) + '-' + day;
        }
    }
    else {
        /** @type {?} */
        var lastMonthDay = new Date(year, (month - num), 0).getDate();
        if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
            if (day < nowMonthDay) { //当前天日期小于当前月总天数,2月份比较特殊的月份
                // dateObj['startTime'] = year + '-' + (month - num) + '-' + (lastMonthDay - (nowMonthDay - day));
                dYear = year;
                dMouth = month - num;
                dDay = lastMonthDay - (nowMonthDay - day);
            }
            else {
                dYear = year;
                dMouth = month - num;
                dDay = lastMonthDay;
                // dateObj['startTime'] = year + '-' + (month - num) + '-' + lastMonthDay;
            }
        }
        else {
            dYear = year;
            dMouth = month - num;
            dDay = day;
            // dateObj['startTime'] = year + '-' + (month - num) + '-' + day;
        }
    }
    dMouth = dMouth < 10 ? '0' + dMouth : dMouth;
    dDay = dDay < 10 ? '0' + dDay : dDay;
    if (type == '2') {
        dateObj['startTime'] = dYear + '-' + dMouth;
    }
    else if (type == '3') {
        dateObj['startTime'] = dYear;
    }
    else {
        dateObj['startTime'] = dYear + '-' + dMouth + '-' + dDay;
    }
    if (showtime) {
        dateObj['endTime'] = dateObj['endTime'] + ' ' + time;
        dateObj['startTime'] = dateObj['startTime'] + ' ' + time;
    }
    return dateObj;
}
/**
 * @param {?=} dayTags
 * @param {?=} showtime
 * @return {?}
 */
export function getToday(dayTags, showtime) {
    if (dayTags === void 0) { dayTags = 'today'; }
    /** @type {?} */
    var now = new Date();
    /** @type {?} */
    var year = now.getFullYear();
    /** @type {?} */
    var month = now.getMonth() + 1;
    //0-11表示1-12月
    /** @type {?} */
    var day = now.getDate();
    /** @type {?} */
    var hour = now.getHours();
    /** @type {?} */
    var min = now.getMinutes() < 10 ? '0' + new Date().getMinutes() : new Date().getMinutes();
    /** @type {?} */
    var sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds() : new Date().getSeconds();
    /** @type {?} */
    var time = hour + ':' + min + ':' + sec;
    /** @type {?} */
    var yesterday = new Date();
    yesterday.setTime(now.getTime() - 24 * 60 * 60 * 1000);
    /** @type {?} */
    var yesterdayMonth = yesterday.getMonth() + 1;
    /** @type {?} */
    var yesterdayDate = yesterday.getDate();
    /** @type {?} */
    var yesterdayObj = yesterday.getFullYear() + "-" + (yesterdayMonth < 10 ? "0" + yesterdayMonth : yesterdayMonth) + "-" + (yesterdayDate < 10 ? "0" + yesterdayDate : yesterdayDate);
    /** @type {?} */
    var dateObj = year + '-' + (month < 10 ? "0" + month : month) + '-' + (day < 10 ? "0" + day : day);
    if (showtime) {
        dateObj = dateObj + ' ' + time;
        yesterdayObj = yesterdayObj + ' ' + time;
    }
    if (dayTags == 'today')
        return dateObj;
    else if (dayTags == 'yesterday')
        return yesterdayObj;
}
//# sourceMappingURL=data:application/json;base64,