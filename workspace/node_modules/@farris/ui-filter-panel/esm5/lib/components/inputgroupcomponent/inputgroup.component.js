/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { cloneDeep } from 'lodash-es';
var PanelInputGroupComponent = /** @class */ (function () {
    function PanelInputGroupComponent() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.isTextFromDialog = false;
    }
    Object.defineProperty(PanelInputGroupComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this.constructTextItem(this._item);
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._item = data;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} textItem
     * @return {?}
     */
    PanelInputGroupComponent.prototype.constructTextItem = /**
     * @param {?} textItem
     * @return {?}
     */
    function (textItem) {
        if (!this._item.hasOwnProperty('value')) {
            this._item.value = {
                value: [],
                textValue: '',
                textField: '',
                isInputText: ''
            };
        }
        /** @type {?} */
        var textValueObj = textItem.value;
        textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();
        textItem.value = textValueObj;
        this.textValue = textValueObj.textValue;
        this.setSubmitChange();
        return textItem;
    };
    /**
     * @return {?}
     */
    PanelInputGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.testId = this.getGuid();
        this.getInputGroupBindingInfo();
    };
    /**
     * @private
     * @return {?}
     */
    PanelInputGroupComponent.prototype.getGuid = /**
     * @private
     * @return {?}
     */
    function () {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    };
    /**
     * @private
     * @return {?}
     */
    PanelInputGroupComponent.prototype.s4 = /**
     * @private
     * @return {?}
     */
    function () {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    /**
     * @return {?}
     */
    PanelInputGroupComponent.prototype.getInputGroupBindingInfo = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputGroupControl = (this.item.control);
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelInputGroupComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            var options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            function (selectedItem) {
                // let modalData = item[0];
                // this.item.value.value = modalData[this.targetField];
                /** @type {?} */
                var selectedItems = selectedItem.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                if (selectedItems && _this.textField) {
                    _this.item.value.value = selectedItems;
                    //this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    _this.item.value.textValue = _this.getTextValue(_this.textField, _this.item.value.value);
                    _this.item.value.textField = _this.textField;
                    _this.item.value.isInputText = false;
                    _this.item.textValue = _this.item.value.textValue;
                    _this.textValue = _this.item.textValue;
                    _this.isTextFromDialog = true;
                    _this.textFormDialog = _this.item.value.textValue;
                }
            });
            this.item.control.click({ event: event, options: options });
        }
    };
    /**
     * @param {?} targetField
     * @param {?} value
     * @return {?}
     */
    PanelInputGroupComponent.prototype.getTextValue = /**
     * @param {?} targetField
     * @param {?} value
     * @return {?}
     */
    function (targetField, value) {
        var _this = this;
        /** @type {?} */
        var args = targetField.split('.');
        /** @type {?} */
        var textArr = value.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.getPropValue(item, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    PanelInputGroupComponent.prototype.getPropValue = /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    function (item, args) {
        if (args.length > 1) {
            /** @type {?} */
            var arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelInputGroupComponent.prototype.onBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.setSubmitChange();
        this.searchHandle.emit(event);
    };
    /**
     * @return {?}
     */
    PanelInputGroupComponent.prototype.setSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 || !val.textValue) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    };
    PanelInputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-inputgroup',
                    template: "\r\n<input-group \r\n    [(ngModel)]=\"item.value.textValue\" \r\n    name=\"{{item.fieldName}}\" \r\n    id=\"{{testId}}\"\r\n    [groupText]=\"item.control.groupText\"\r\n    [editable]=\"item.control.editable\"\r\n    [placeholder]=\"item.placeHolder\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (enterHandle)=\"onBlur($event)\"\r\n    >\r\n</input-group>\r\n"
                }] }
    ];
    /** @nocollapse */
    PanelInputGroupComponent.ctorParameters = function () { return []; };
    PanelInputGroupComponent.propDecorators = {
        item: [{ type: Input }],
        searchHandle: [{ type: Output }],
        submitChange: [{ type: Output }]
    };
    return PanelInputGroupComponent;
}());
export { PanelInputGroupComponent };
if (false) {
    /** @type {?} */
    PanelInputGroupComponent.prototype._item;
    /** @type {?} */
    PanelInputGroupComponent.prototype.testId;
    /** @type {?} */
    PanelInputGroupComponent.prototype.usageMode;
    /** @type {?} */
    PanelInputGroupComponent.prototype.dialogOptions;
    /** @type {?} */
    PanelInputGroupComponent.prototype.textValue;
    /** @type {?} */
    PanelInputGroupComponent.prototype.searchHandle;
    /** @type {?} */
    PanelInputGroupComponent.prototype.submitChange;
    /** @type {?} */
    PanelInputGroupComponent.prototype.textField;
    /** @type {?} */
    PanelInputGroupComponent.prototype.isTextFromDialog;
    /** @type {?} */
    PanelInputGroupComponent.prototype.textFormDialog;
}
//# sourceMappingURL=data:application/json;base64,