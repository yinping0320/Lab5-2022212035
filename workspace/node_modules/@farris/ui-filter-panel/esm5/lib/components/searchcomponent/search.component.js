/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { InputGroupComponent } from '@farris/ui-input-group';
var PanelSearchComponent = /** @class */ (function () {
    function PanelSearchComponent() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    Object.defineProperty(PanelSearchComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._item = data;
            if (this._item) {
                if (!this._item.hasOwnProperty('value')) {
                    this._item.value = { value: '' };
                }
                if (this._item.placeHolder) {
                    this.placeholder = this._item.placeHolder || '';
                }
                this.searchValue = this._item.value.value;
            }
            this.setSubmitChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelSearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.searchText) {
            this.searchText.textbox.nativeElement.focus();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PanelSearchComponent.prototype.onSearch = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this._item.value.value = this.searchValue;
        this._item.valueText = this._item.value.value;
        this.setSubmitChange();
        this.searchHandle.emit($event);
    };
    /**
     * @return {?}
     */
    PanelSearchComponent.prototype.setSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 || !val.value) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    };
    PanelSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-search',
                    template: "\r\n<input-group [groupText]=\"groupIcon\" [(ngModel)]=\"searchValue\" (ngModelChange)=\"onSearch($event)\" (clear)=\"onSearch($event)\"\r\n(blurHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" (clickHandle)=\"onSearch($event)\"\r\n[placeholder]=\"placeholder\" #searchText></input-group>"
                }] }
    ];
    /** @nocollapse */
    PanelSearchComponent.ctorParameters = function () { return []; };
    PanelSearchComponent.propDecorators = {
        item: [{ type: Input }],
        searchHandle: [{ type: Output }],
        submitChange: [{ type: Output }],
        searchText: [{ type: ViewChild, args: ['searchText',] }]
    };
    return PanelSearchComponent;
}());
export { PanelSearchComponent };
if (false) {
    /** @type {?} */
    PanelSearchComponent.prototype._item;
    /** @type {?} */
    PanelSearchComponent.prototype.searchHandle;
    /** @type {?} */
    PanelSearchComponent.prototype.submitChange;
    /** @type {?} */
    PanelSearchComponent.prototype.searchText;
    /** @type {?} */
    PanelSearchComponent.prototype.placeholder;
    /** @type {?} */
    PanelSearchComponent.prototype.groupIcon;
    /** @type {?} */
    PanelSearchComponent.prototype.searchValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLXBhbmVsLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc2VhcmNoY29tcG9uZW50L3NlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTdEO0lBZ0NJO1FBUFUsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUc1QyxjQUFTLEdBQUcseUNBQXlDLENBQUM7SUFHdEMsQ0FBQztJQXhCakIsc0JBQ0ksc0NBQUk7Ozs7UUFEUjtZQUVJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDOzs7OztRQUNELFVBQVMsSUFBSTtZQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDWixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO2lCQUNwQztnQkFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO29CQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztpQkFDbkQ7Z0JBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7YUFDN0M7WUFDRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDM0IsQ0FBQzs7O09BYkE7Ozs7SUF1QkQsdUNBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNqRDtJQUNMLENBQUM7Ozs7O0lBRUQsdUNBQVE7Ozs7SUFBUixVQUFTLE1BQU07UUFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDOUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCw4Q0FBZTs7O0lBQWY7O1lBQ1UsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztRQUM1QixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakM7YUFBTTtZQUNILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQzs7Z0JBdERKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQiwyVEFBc0M7aUJBQ3pDOzs7Ozt1QkFLSSxLQUFLOytCQWlCTCxNQUFNOytCQUNOLE1BQU07NkJBQ04sU0FBUyxTQUFDLFlBQVk7O0lBNEIzQiwyQkFBQztDQUFBLEFBdkRELElBdURDO1NBbERZLG9CQUFvQjs7O0lBRTdCLHFDQUFXOztJQWtCWCw0Q0FBNEM7O0lBQzVDLDRDQUE0Qzs7SUFDNUMsMENBQXlEOztJQUN6RCwyQ0FBb0I7O0lBQ3BCLHlDQUFzRDs7SUFDdEQsMkNBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdwYW5lbC1maWx0ZXItc2VhcmNoJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWFyY2guY29tcG9uZW50Lmh0bWwnXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUGFuZWxTZWFyY2hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIF9pdGVtOiBhbnk7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ2V0IGl0ZW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW07XHJcbiAgICB9XHJcbiAgICBzZXQgaXRlbShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5faXRlbSA9IGRhdGE7XHJcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pdGVtLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtLnZhbHVlID0geyB2YWx1ZTogJycgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5faXRlbS5wbGFjZUhvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuX2l0ZW0ucGxhY2VIb2xkZXIgfHwgJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hWYWx1ZSA9IHRoaXMuX2l0ZW0udmFsdWUudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0U3VibWl0Q2hhbmdlKCk7XHJcbiAgICB9XHJcbiAgICBAT3V0cHV0KCkgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHN1Ym1pdENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBWaWV3Q2hpbGQoJ3NlYXJjaFRleHQnKSBzZWFyY2hUZXh0OiBJbnB1dEdyb3VwQ29tcG9uZW50O1xyXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuICAgIGdyb3VwSWNvbiA9ICc8c3BhbiBjbGFzcz1cImstaWNvbiBrLWktc2VhcmNoXCI+PC9zcGFuPic7XHJcbiAgICBzZWFyY2hWYWx1ZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoVGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaFRleHQudGV4dGJveC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uU2VhcmNoKCRldmVudCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZW0udmFsdWUudmFsdWUgPSB0aGlzLnNlYXJjaFZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2l0ZW0udmFsdWVUZXh0ID0gdGhpcy5faXRlbS52YWx1ZS52YWx1ZTtcclxuICAgICAgICB0aGlzLnNldFN1Ym1pdENoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoSGFuZGxlLmVtaXQoJGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdWJtaXRDaGFuZ2UoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5faXRlbS52YWx1ZTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModmFsKS5sZW5ndGggPCAwIHx8ICF2YWwudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXRDaGFuZ2UuZW1pdChmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXRDaGFuZ2UuZW1pdCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19