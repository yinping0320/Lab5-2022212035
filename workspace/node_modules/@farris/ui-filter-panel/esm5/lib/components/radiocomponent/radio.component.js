/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
var PanelRadioComponent = /** @class */ (function () {
    function PanelRadioComponent() {
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.radioDataSource = new Array();
    }
    Object.defineProperty(PanelRadioComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._item = data;
            this.getDataSource();
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = { value: '' };
            }
            //this.radioValue = this._item.value.getOriginalValue();
            this.radioValue = this._item.value.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelRadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    PanelRadioComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    PanelRadioComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._item && this._item.control) {
            /** @type {?} */
            var radioboxList = (this._item.control);
            this.radioDataSource = Array();
            if (radioboxList.enumValues && radioboxList.enumValues.length > 0) {
                radioboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.radioDataSource.push(Object.assign({}, element));
                }));
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelRadioComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            this._item.value.value = event;
        }
        else {
            this._item.value.value = '';
        }
        // this._item.valueText = this._item.value.value;
        this.getValueText();
        //this.radioValue = this._item.value.getOriginalValue();
        this.radioValue = this._item.value.value;
        this.searchHandle.emit();
    };
    /**
     * @return {?}
     */
    PanelRadioComponent.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enumValue = (this._item.control).enumValues;
        /** @type {?} */
        var value = (this._item.value).value;
        if (enumValue && enumValue.length) {
            /** @type {?} */
            var texts = enumValue.find((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                return val['value'] == value;
            }));
            if (texts) {
                this._item.valueText = texts['name'];
            }
        }
    };
    PanelRadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-radio',
                    template: "<!-- <farris-radiogroup \r\n[value]=\"radioValue\" \r\n[horizontal]=\"false\" \r\n[data]=\"radioDataSource\"\r\n(changeValue)=\"onSearch($event)\">\r\n</farris-radiogroup> -->\r\n\r\n<div class=\"f-filter-panel-radiogroup\">\r\n    <div class=\"panel-radiogroup-item\" \r\n    [ngClass]=\"{'panel-radiogroup-item-active': radioValue == item.value}\"\r\n    *ngFor=\"let item of radioDataSource\"\r\n    (click)=\"onSearch(item.value)\"\r\n    >\r\n        <span class=\"panel-radiogroup-item-text\">{{item.name}}</span>\r\n    </div>\r\n</div>"
                    // encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    PanelRadioComponent.ctorParameters = function () { return []; };
    PanelRadioComponent.propDecorators = {
        item: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }]
    };
    return PanelRadioComponent;
}());
export { PanelRadioComponent };
if (false) {
    /** @type {?} */
    PanelRadioComponent.prototype._item;
    /** @type {?} */
    PanelRadioComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    PanelRadioComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    PanelRadioComponent.prototype.showlabel;
    /** @type {?} */
    PanelRadioComponent.prototype.radioValue;
    /** @type {?} */
    PanelRadioComponent.prototype.selectCheck;
    /** @type {?} */
    PanelRadioComponent.prototype.radioDataSource;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItcGFuZWwvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9yYWRpb2NvbXBvbmVudC9yYWRpby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpGO0lBZ0NJO1FBWHdCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7OztRQUUxRCxXQUFNLEdBQVcsS0FBSyxDQUFDOzs7O1FBRXZCLGNBQVMsR0FBVyxJQUFJLENBQUM7UUFHekIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFakIsb0JBQWUsR0FBWSxJQUFJLEtBQUssRUFBTyxDQUFDO0lBRTlCLENBQUM7SUF4QmYsc0JBQ0kscUNBQUk7Ozs7UUFEUjtZQUVJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDOzs7OztRQUNELFVBQVMsSUFBSTtZQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixJQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFFLEVBQUMsS0FBSyxFQUFHLEVBQUUsRUFBQyxDQUFDO2FBQ2xDO1lBQ0Qsd0RBQXdEO1lBQ3hELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzdDLENBQUM7OztPQVRBOzs7O0lBdUJELHNDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ0ksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCwyQ0FBYTs7O0lBQWI7UUFBQSxpQkFXQztRQVZHLElBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBQzs7Z0JBQzVCLFlBQVksR0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxFQUFPLENBQUM7WUFFcEMsSUFBRyxZQUFZLENBQUMsVUFBVSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBQztnQkFDM0QsWUFBWSxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7O2dCQUFDLFVBQUEsT0FBTztvQkFDbkMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxFQUFDLENBQUM7YUFDTjtTQUNKO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxzQ0FBUTs7OztJQUFSLFVBQVMsS0FBSztRQUNWLElBQUcsS0FBSyxFQUFDO1lBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNsQzthQUNHO1lBQ0EsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUMvQjtRQUNGLGlEQUFpRDtRQUNoRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsd0RBQXdEO1FBQ3hELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELDBDQUFZOzs7SUFBWjs7WUFDVSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVU7O1lBQzNDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSztRQUN0QyxJQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFDOztnQkFDdkIsS0FBSyxHQUFHLFNBQVMsQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxHQUFHO2dCQUM1QixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUM7WUFDakMsQ0FBQyxFQUFDO1lBQ0YsSUFBRyxLQUFLLEVBQUM7Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hDO1NBQ0o7SUFDTCxDQUFDOztnQkFoRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLDJpQkFBcUM7b0JBQ3JDLHdDQUF3QztpQkFDM0M7Ozs7O3VCQUlJLEtBQUs7K0JBYUwsTUFBTSxTQUFDLGNBQWM7O0lBNEQxQiwwQkFBQztDQUFBLEFBakZELElBaUZDO1NBM0VZLG1CQUFtQjs7O0lBQzVCLG9DQUFVOztJQWNWLDJDQUEwRDs7Ozs7SUFFMUQscUNBQXVCOzs7OztJQUV2Qix3Q0FBeUI7O0lBQ3pCLHlDQUFrQjs7SUFFbEIsMENBQWlCOztJQUVqQiw4Q0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIE9uQ2hhbmdlcywgRXZlbnRFbWl0dGVyLCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3BhbmVsLWZpbHRlci1yYWRpbycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcmFkaW8uY29tcG9uZW50Lmh0bWwnXHJcbiAgICAvLyBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUGFuZWxSYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCxPbkNoYW5nZXN7XHJcbiAgICBfaXRlbTphbnk7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ2V0IGl0ZW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW07XHJcbiAgICB9XHJcbiAgICBzZXQgaXRlbShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5faXRlbSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5nZXREYXRhU291cmNlKCk7XHJcbiAgICAgICAgaWYoIXRoaXMuX2l0ZW0uaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcclxuICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZSA9e3ZhbHVlIDogJyd9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3RoaXMucmFkaW9WYWx1ZSA9IHRoaXMuX2l0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgIHRoaXMucmFkaW9WYWx1ZSA9IHRoaXMuX2l0ZW0udmFsdWUudmFsdWU7XHJcbiAgICB9XHJcbiAgICBAT3V0cHV0KCdzZWFyY2hIYW5kbGUnKSBzZWFyY2hIYW5kbGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKirliKTmlq3mmK/lkKbmmK/lnKjmianlsZXljLrln5/lsZXnpLogKi9cclxuICAgIGV4dGVuZDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAvKirliKTmlq3mmK/lkKbmmL7npLpsYWJlbCAqL1xyXG4gICAgc2hvd2xhYmVsOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcmFkaW9WYWx1ZTogYW55W107XHJcblxyXG4gICAgc2VsZWN0Q2hlY2sgPSBbXTtcclxuXHJcbiAgICByYWRpb0RhdGFTb3VyY2U6QXJyYXk8YW55Pj1uZXcgQXJyYXk8YW55PigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YVNvdXJjZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YVNvdXJjZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGFTb3VyY2UoKXtcclxuICAgICAgICBpZih0aGlzLl9pdGVtICYmIHRoaXMuX2l0ZW0uY29udHJvbCl7XHJcbiAgICAgICAgICAgIGxldCByYWRpb2JveExpc3Q9KHRoaXMuX2l0ZW0uY29udHJvbCk7XHJcbiAgICAgICAgICAgIHRoaXMucmFkaW9EYXRhU291cmNlID0gQXJyYXk8YW55PigpO1xyXG5cclxuICAgICAgICAgICAgaWYocmFkaW9ib3hMaXN0LmVudW1WYWx1ZXMgJiYgcmFkaW9ib3hMaXN0LmVudW1WYWx1ZXMubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICAgICAgcmFkaW9ib3hMaXN0LmVudW1WYWx1ZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhZGlvRGF0YVNvdXJjZS5wdXNoKE9iamVjdC5hc3NpZ24oe30sZWxlbWVudCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWFyY2goZXZlbnQpe1xyXG4gICAgICAgIGlmKGV2ZW50KXtcclxuICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZS52YWx1ZSA9IGV2ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtLnZhbHVlLnZhbHVlID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgLy8gdGhpcy5faXRlbS52YWx1ZVRleHQgPSB0aGlzLl9pdGVtLnZhbHVlLnZhbHVlO1xyXG4gICAgICAgIHRoaXMuZ2V0VmFsdWVUZXh0KCk7XHJcbiAgICAgICAgLy90aGlzLnJhZGlvVmFsdWUgPSB0aGlzLl9pdGVtLnZhbHVlLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgICAgICB0aGlzLnJhZGlvVmFsdWUgPSB0aGlzLl9pdGVtLnZhbHVlLnZhbHVlO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoSGFuZGxlLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWYWx1ZVRleHQoKXtcclxuICAgICAgICBjb25zdCBlbnVtVmFsdWUgPSAodGhpcy5faXRlbS5jb250cm9sKS5lbnVtVmFsdWVzO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gKHRoaXMuX2l0ZW0udmFsdWUpLnZhbHVlO1xyXG4gICAgICAgIGlmKGVudW1WYWx1ZSAmJiBlbnVtVmFsdWUubGVuZ3RoKXtcclxuICAgICAgICAgICAgY29uc3QgdGV4dHMgPSBlbnVtVmFsdWUuZmluZCh2YWw9PntcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWxbJ3ZhbHVlJ10gPT0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZih0ZXh0cyl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtLnZhbHVlVGV4dCA9IHRleHRzWyduYW1lJ107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=