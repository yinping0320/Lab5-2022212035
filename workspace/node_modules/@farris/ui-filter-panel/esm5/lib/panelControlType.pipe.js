/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
/** @enum {number} */
var ControlType = {
    Text: 0,
    //DateTime=1,
    Help: 1,
    DropDown: 2,
    DateRange: 3,
    NumberRange: 4,
    Search: 5,
    Date: 6,
    CheckboxGroup: 7,
    DateRangeTime: 8,
    Radio: 9,
    Year: 10,
    Month: 11,
    MonthRange: 12,
    YearRange: 13,
    InputGroup: 14,
    Number: 15,
};
export { ControlType };
ControlType[ControlType.Text] = 'Text';
ControlType[ControlType.Help] = 'Help';
ControlType[ControlType.DropDown] = 'DropDown';
ControlType[ControlType.DateRange] = 'DateRange';
ControlType[ControlType.NumberRange] = 'NumberRange';
ControlType[ControlType.Search] = 'Search';
ControlType[ControlType.Date] = 'Date';
ControlType[ControlType.CheckboxGroup] = 'CheckboxGroup';
ControlType[ControlType.DateRangeTime] = 'DateRangeTime';
ControlType[ControlType.Radio] = 'Radio';
ControlType[ControlType.Year] = 'Year';
ControlType[ControlType.Month] = 'Month';
ControlType[ControlType.MonthRange] = 'MonthRange';
ControlType[ControlType.YearRange] = 'YearRange';
ControlType[ControlType.InputGroup] = 'InputGroup';
ControlType[ControlType.Number] = 'Number';
var PanelControlTypeXPipe = /** @class */ (function () {
    function PanelControlTypeXPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    PanelControlTypeXPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var type;
        switch (value.control.getControlType()) {
            case ControlType.Text:
                type = 'input';
                break;
            case ControlType.Search:
                type = 'search';
                break;
            case ControlType.Date:
                type = 'date';
                break;
            case ControlType.DateRange:
                type = 'daterange';
                break;
            case ControlType.DateRangeTime:
                type = 'daterangetime';
                break;
            case ControlType.Year:
                type = 'year';
                break;
            case ControlType.Month:
                type = 'month';
                break;
            case ControlType.MonthRange:
                type = 'monthrange';
                break;
            case ControlType.YearRange:
                type = 'yearrange';
                break;
            case ControlType.DropDown:
                type = 'dropdown';
                break;
            case ControlType.NumberRange:
                type = 'number';
                break;
            case ControlType.Help:
                type = 'help';
                break;
            case ControlType.CheckboxGroup:
                type = 'checkboxgroup';
                break;
            case ControlType.Radio:
                type = 'radio';
                break;
            case ControlType.InputGroup:
                type = 'input-group';
                break;
            case ControlType.Number:
                type = 'singlenumber';
                break;
            default:
                type = 'input';
                break;
        }
        return type;
    };
    PanelControlTypeXPipe.decorators = [
        { type: Pipe, args: [{ name: 'panelControlType' },] }
    ];
    return PanelControlTypeXPipe;
}());
export { PanelControlTypeXPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWxDb250cm9sVHlwZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItcGFuZWwvIiwic291cmNlcyI6WyJsaWIvcGFuZWxDb250cm9sVHlwZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7O0lBR2hELE9BQU07SUFDTixhQUFhO0lBQ2IsT0FBTTtJQUNOLFdBQVU7SUFDVixZQUFXO0lBQ1gsY0FBYTtJQUNiLFNBQVE7SUFDUixPQUFNO0lBQ04sZ0JBQWU7SUFDZixnQkFBZTtJQUNmLFFBQU87SUFDUCxRQUFPO0lBQ1AsU0FBUTtJQUNSLGNBQWE7SUFDYixhQUFZO0lBQ1osY0FBYTtJQUNiLFVBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHYjtJQUFBO0lBMkRBLENBQUM7Ozs7O0lBekRHLHlDQUFTOzs7O0lBQVQsVUFBVSxLQUFLOztZQUNQLElBQUk7UUFDUixRQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUM7WUFDbEMsS0FBSyxXQUFXLENBQUMsSUFBSTtnQkFDakIsSUFBSSxHQUFHLE9BQU8sQ0FBQztnQkFDZixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsTUFBTTtnQkFDbkIsSUFBSSxHQUFHLFFBQVEsQ0FBQztnQkFDaEIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLElBQUk7Z0JBQ2pCLElBQUksR0FBRyxNQUFNLENBQUM7Z0JBQ2QsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLFNBQVM7Z0JBQ3RCLElBQUksR0FBRyxXQUFXLENBQUM7Z0JBQ25CLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxhQUFhO2dCQUMxQixJQUFJLEdBQUcsZUFBZSxDQUFDO2dCQUN2QixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsSUFBSTtnQkFDakIsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDZCxNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsS0FBSztnQkFDbEIsSUFBSSxHQUFHLE9BQU8sQ0FBQztnQkFDZixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsVUFBVTtnQkFDdkIsSUFBSSxHQUFHLFlBQVksQ0FBQztnQkFDcEIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLFNBQVM7Z0JBQ3RCLElBQUksR0FBRyxXQUFXLENBQUM7Z0JBQ25CLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxRQUFRO2dCQUNyQixJQUFJLEdBQUcsVUFBVSxDQUFDO2dCQUNsQixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsV0FBVztnQkFDeEIsSUFBSSxHQUFHLFFBQVEsQ0FBQztnQkFDaEIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLElBQUk7Z0JBQ2pCLElBQUksR0FBRyxNQUFNLENBQUM7Z0JBQ2QsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLGFBQWE7Z0JBQzFCLElBQUksR0FBRyxlQUFlLENBQUM7Z0JBQ3ZCLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxLQUFLO2dCQUNsQixJQUFJLEdBQUcsT0FBTyxDQUFDO2dCQUNmLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxVQUFVO2dCQUN2QixJQUFJLEdBQUcsYUFBYSxDQUFDO2dCQUNyQixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsTUFBTTtnQkFDbkIsSUFBSSxHQUFHLGNBQWMsQ0FBQztnQkFDdEIsTUFBTTtZQUNWO2dCQUNJLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ2YsTUFBTTtTQUNiO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Z0JBMURKLElBQUksU0FBQyxFQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBQzs7SUEyRGhDLDRCQUFDO0NBQUEsQUEzREQsSUEyREM7U0ExRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGVudW0gQ29udHJvbFR5cGV7XHJcbiAgICBUZXh0PTAsXHJcbiAgICAvL0RhdGVUaW1lPTEsXHJcbiAgICBIZWxwPTEsXHJcbiAgICBEcm9wRG93bj0yLFxyXG4gICAgRGF0ZVJhbmdlPTMsXHJcbiAgICBOdW1iZXJSYW5nZT00LFxyXG4gICAgU2VhcmNoPTUsXHJcbiAgICBEYXRlPTYsXHJcbiAgICBDaGVja2JveEdyb3VwPTcsXHJcbiAgICBEYXRlUmFuZ2VUaW1lPTgsXHJcbiAgICBSYWRpbz05LFxyXG4gICAgWWVhcj0xMCxcclxuICAgIE1vbnRoPTExLFxyXG4gICAgTW9udGhSYW5nZT0xMixcclxuICAgIFllYXJSYW5nZT0xMyxcclxuICAgIElucHV0R3JvdXA9MTQsXHJcbiAgICBOdW1iZXI9MTVcclxufVxyXG5cclxuQFBpcGUoe25hbWU6ICdwYW5lbENvbnRyb2xUeXBlJ30pXHJcbmV4cG9ydCBjbGFzcyBQYW5lbENvbnRyb2xUeXBlWFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICAgIHRyYW5zZm9ybSh2YWx1ZSk6IEFycmF5PGFueT4ge1xyXG4gICAgICAgIGxldCB0eXBlO1xyXG4gICAgICAgIHN3aXRjaCh2YWx1ZS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkpe1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLlRleHQ6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2lucHV0JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLlNlYXJjaDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2VhcmNoJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLkRhdGU6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2RhdGUnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuRGF0ZVJhbmdlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdkYXRlcmFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuRGF0ZVJhbmdlVGltZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZXJhbmdldGltZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5ZZWFyOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICd5ZWFyJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLk1vbnRoOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdtb250aCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5Nb250aFJhbmdlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdtb250aHJhbmdlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLlllYXJSYW5nZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAneWVhcnJhbmdlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLkRyb3BEb3duOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdkcm9wZG93bic7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5OdW1iZXJSYW5nZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnbnVtYmVyJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLkhlbHA6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2hlbHAnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuQ2hlY2tib3hHcm91cDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnY2hlY2tib3hncm91cCc7XHJcbiAgICAgICAgICAgICAgICBicmVhazsgXHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuUmFkaW86XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ3JhZGlvJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLklucHV0R3JvdXA6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2lucHV0LWdyb3VwJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLk51bWJlcjpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlbnVtYmVyJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdpbnB1dCc7XHJcbiAgICAgICAgICAgICAgICBicmVhazsgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZTtcclxuICAgIH1cclxufVxyXG4iXX0=