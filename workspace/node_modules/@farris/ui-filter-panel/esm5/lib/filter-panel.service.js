/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, ApplicationRef } from '@angular/core';
import { CommonUtils } from '@farris/ui-common';
import { FilterPanelComponent } from './filter-panel.component';
import * as i0 from "@angular/core";
var FilterPanelService = /** @class */ (function () {
    function FilterPanelService(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        // private instanceMap = new Map();
        this.commonUtils = null;
        this.commonUtils = this.injector.get(CommonUtils, null);
        if (!this.commonUtils) {
            this.commonUtils = new CommonUtils();
        }
    }
    /**
     * @param {?} option
     * @return {?}
     */
    FilterPanelService.prototype.showPanel = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var instanceID = option.localStorageKey;
        this.hidePanel();
        /** @type {?} */
        var containerFac = this.cfr.resolveComponentFactory(FilterPanelComponent);
        /** @type {?} */
        var filterPanelContainer = containerFac.create(this.injector);
        this.appRef.attachView(filterPanelContainer.hostView);
        document.querySelector('body').appendChild(filterPanelContainer.location.nativeElement);
        filterPanelContainer.instance.option = option;
        filterPanelContainer.instance.injector = this.injector;
        filterPanelContainer.instance.zIndex = this.commonUtils.getFloatingLayerIndex();
        // filterPanelContainer.instance.clear.subscribe((event)=>{
        //   this.clear();
        // });
        filterPanelContainer.changeDetectorRef.markForCheck();
        filterPanelContainer.changeDetectorRef.detectChanges();
        // if (!this.instanceMap.has(instanceID)) {
        //     this.instanceMap.set(instanceID, filterPanelContainer);
        // }
        this.filterPanelContainer = filterPanelContainer;
        return filterPanelContainer.instance;
    };
    /**
     * @return {?}
     */
    FilterPanelService.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        //  const filterPanelContainer = this.instanceMap.get(id);
        if (this.filterPanelContainer) {
            this.filterPanelContainer.instance.hide = true;
            this.filterPanelContainer.destroy();
            this.filterPanelContainer = null;
            // this.instanceMap.delete(id);
        }
    };
    FilterPanelService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FilterPanelService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef }
    ]; };
    /** @nocollapse */ FilterPanelService.ngInjectableDef = i0.defineInjectable({ factory: function FilterPanelService_Factory() { return new FilterPanelService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: FilterPanelService, providedIn: "root" });
    return FilterPanelService;
}());
export { FilterPanelService };
if (false) {
    /** @type {?} */
    FilterPanelService.prototype.filterPanelContainer;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItcGFuZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUE4QyxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0FBR2hFO0lBVUksNEJBQ1ksR0FBNkIsRUFDN0IsUUFBa0IsRUFDbEIsTUFBc0I7UUFGdEIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFnQjs7UUFKMUIsZ0JBQVcsR0FBZ0IsSUFBSSxDQUFDO1FBT3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztTQUN4QztJQUNMLENBQUM7Ozs7O0lBRUQsc0NBQVM7Ozs7SUFBVCxVQUFVLE1BQXlCOztZQUN6QixVQUFVLEdBQUcsTUFBTSxDQUFDLGVBQWU7UUFDekMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOztZQUNYLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLG9CQUFvQixDQUFDOztZQUNyRSxvQkFBb0IsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDL0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEQsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXhGLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQzlDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2RCxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNoRiwyREFBMkQ7UUFDM0Qsa0JBQWtCO1FBQ2xCLE1BQU07UUFDTixvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RCxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2RCwyQ0FBMkM7UUFDM0MsOERBQThEO1FBQzlELElBQUk7UUFDSixJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7UUFDakQsT0FBTyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQzs7OztJQUVNLHNDQUFTOzs7SUFBaEI7UUFDSSwwREFBMEQ7UUFFMUQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDM0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQy9DLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1lBQ2pDLCtCQUErQjtTQUNsQztJQUNMLENBQUM7O2dCQXZESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQVBvQix3QkFBd0I7Z0JBQUUsUUFBUTtnQkFBRSxjQUFjOzs7NkJBQXZFO0NBNkRDLEFBeERELElBd0RDO1NBckRZLGtCQUFrQjs7O0lBRTNCLGtEQUF5RDs7Ozs7SUFJekQseUNBQXdDOzs7OztJQUVwQyxpQ0FBcUM7Ozs7O0lBQ3JDLHNDQUEwQjs7Ozs7SUFDMUIsb0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgRmlsdGVyUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1wYW5lbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJQYW5lbE9wdGlvbiB9IGZyb20gJy4vZmlsdGVyLXBhbmVsLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbHRlclBhbmVsU2VydmljZSB7XHJcblxyXG4gICAgZmlsdGVyUGFuZWxDb250YWluZXI6IENvbXBvbmVudFJlZjxGaWx0ZXJQYW5lbENvbXBvbmVudD47XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBpbnN0YW5jZU1hcCA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICBwcml2YXRlIGNvbW1vblV0aWxzOiBDb21tb25VdGlscyA9IG51bGw7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZixcclxuICAgICkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuY29tbW9uVXRpbHMgPSB0aGlzLmluamVjdG9yLmdldChDb21tb25VdGlscywgbnVsbCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbW1vblV0aWxzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tbW9uVXRpbHMgPSBuZXcgQ29tbW9uVXRpbHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd1BhbmVsKG9wdGlvbjogRmlsdGVyUGFuZWxPcHRpb24pIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZUlEID0gb3B0aW9uLmxvY2FsU3RvcmFnZUtleTtcclxuICAgICAgICB0aGlzLmhpZGVQYW5lbCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckZhYyA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEZpbHRlclBhbmVsQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBmaWx0ZXJQYW5lbENvbnRhaW5lciA9IGNvbnRhaW5lckZhYy5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyhmaWx0ZXJQYW5lbENvbnRhaW5lci5ob3N0Vmlldyk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChmaWx0ZXJQYW5lbENvbnRhaW5lci5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcclxuXHJcbiAgICAgICAgZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2Uub3B0aW9uID0gb3B0aW9uO1xyXG4gICAgICAgIGZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLmluamVjdG9yID0gdGhpcy5pbmplY3RvcjtcclxuICAgICAgICBmaWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS56SW5kZXggPSB0aGlzLmNvbW1vblV0aWxzLmdldEZsb2F0aW5nTGF5ZXJJbmRleCgpO1xyXG4gICAgICAgIC8vIGZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLmNsZWFyLnN1YnNjcmliZSgoZXZlbnQpPT57XHJcbiAgICAgICAgLy8gICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgZmlsdGVyUGFuZWxDb250YWluZXIuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgZmlsdGVyUGFuZWxDb250YWluZXIuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIC8vIGlmICghdGhpcy5pbnN0YW5jZU1hcC5oYXMoaW5zdGFuY2VJRCkpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5pbnN0YW5jZU1hcC5zZXQoaW5zdGFuY2VJRCwgZmlsdGVyUGFuZWxDb250YWluZXIpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyID0gZmlsdGVyUGFuZWxDb250YWluZXI7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoaWRlUGFuZWwoKSB7XHJcbiAgICAgICAgLy8gIGNvbnN0IGZpbHRlclBhbmVsQ29udGFpbmVyID0gdGhpcy5pbnN0YW5jZU1hcC5nZXQoaWQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLmhpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuaW5zdGFuY2VNYXAuZGVsZXRlKGlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19