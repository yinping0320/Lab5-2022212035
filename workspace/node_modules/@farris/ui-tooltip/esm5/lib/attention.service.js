/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, RendererFactory2, NgZone } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function AttentionElement() { }
if (false) {
    /** @type {?} */
    AttentionElement.prototype.idOrEl;
    /** @type {?|undefined} */
    AttentionElement.prototype.type;
    /** @type {?|undefined} */
    AttentionElement.prototype.class;
}
var AttentionService = /** @class */ (function () {
    function AttentionService(renderFac, ngZone) {
        this.ngZone = ngZone;
        this.renderer = renderFac.createRenderer(null, null);
    }
    /**
     * @param {?} els
     * @param {?=} timer
     * @return {?}
     */
    AttentionService.prototype.catchAttention = /**
     * @param {?} els
     * @param {?=} timer
     * @return {?}
     */
    function (els, timer) {
        var _this = this;
        if (timer === void 0) { timer = 600; }
        if (els && els.length > 0) {
            /** @type {?} */
            var attentionEls_1 = [];
            for (var k = 0; k < els.length; k++) {
                /** @type {?} */
                var attentionEl;
                if (typeof els[k].idOrEl == 'string') {
                    attentionEl = document.getElementById(els[k].idOrEl);
                }
                else {
                    attentionEl = els[k].idOrEl;
                }
                if (attentionEl) {
                    attentionEls_1.push(attentionEl);
                    this.renderer.addClass(attentionEl, 'f-catch-attention-debounce');
                }
            }
            // 移除class
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    for (var m = 0; m < attentionEls_1.length; m++) {
                        _this.renderer.removeClass(attentionEls_1[m], 'f-catch-attention-debounce');
                    }
                }), timer);
            }));
        }
    };
    /**
     * @return {?}
     */
    AttentionService.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AttentionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AttentionService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: NgZone }
    ]; };
    /** @nocollapse */ AttentionService.ngInjectableDef = i0.defineInjectable({ factory: function AttentionService_Factory() { return new AttentionService(i0.inject(i0.RendererFactory2), i0.inject(i0.NgZone)); }, token: AttentionService, providedIn: "root" });
    return AttentionService;
}());
export { AttentionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AttentionService.prototype.renderer;
    /** @type {?} */
    AttentionService.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0ZW50aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRvb2x0aXAvIiwic291cmNlcyI6WyJsaWIvYXR0ZW50aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXFCLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFDeEYsc0NBSUM7OztJQUhHLGtDQUFZOztJQUNaLGdDQUFhOztJQUNiLGlDQUFlOztBQUduQjtJQUtJLDBCQUFZLFNBQTJCLEVBQVMsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7Ozs7SUFFRCx5Q0FBYzs7Ozs7SUFBZCxVQUFlLEdBQXVCLEVBQUUsS0FBVztRQUFuRCxpQkF3QkM7UUF4QnVDLHNCQUFBLEVBQUEsV0FBVztRQUMvQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ25CLGNBQVksR0FBRyxFQUFFO1lBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztvQkFDN0IsV0FBVztnQkFDZixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxRQUFRLEVBQUU7b0JBQ2xDLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDeEQ7cUJBQU07b0JBQ0gsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7aUJBQy9CO2dCQUNELElBQUksV0FBVyxFQUFFO29CQUNiLGNBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO2lCQUNyRTthQUNKO1lBQ0QsVUFBVTtZQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7WUFBQztnQkFDMUIsVUFBVTs7O2dCQUFDO29CQUNQLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUMxQyxLQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxjQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztxQkFDNUU7Z0JBQ0wsQ0FBQyxHQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2QsQ0FBQyxFQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7SUFDRCxtQ0FBUTs7O0lBQVI7SUFDQSxDQUFDOztnQkFuQ0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFUdUMsZ0JBQWdCO2dCQUFFLE1BQU07OzsyQkFBaEU7Q0EyQ0MsQUFwQ0QsSUFvQ0M7U0FqQ1ksZ0JBQWdCOzs7Ozs7SUFDekIsb0NBQTJCOztJQUNjLGtDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uSW5pdCwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuZXhwb3J0IGludGVyZmFjZSBBdHRlbnRpb25FbGVtZW50IHtcclxuICAgIGlkT3JFbDogYW55O1xyXG4gICAgdHlwZT86c3RyaW5nOy8vIOiuoeWIkum7mOiupCBkZWJvdW5jZVxyXG4gICAgY2xhc3M/OiBzdHJpbmc7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXR0ZW50aW9uU2VydmljZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlckZhYzogUmVuZGVyZXJGYWN0b3J5MiwgcHVibGljIG5nWm9uZTogTmdab25lKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlckZhYy5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBjYXRjaEF0dGVudGlvbihlbHM6IEF0dGVudGlvbkVsZW1lbnRbXSwgdGltZXIgPSA2MDApIHtcclxuICAgICAgICBpZiAoZWxzICYmIGVscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBhdHRlbnRpb25FbHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBlbHMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhdHRlbnRpb25FbDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZWxzW2tdLmlkT3JFbCA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dGVudGlvbkVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxzW2tdLmlkT3JFbCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dGVudGlvbkVsID0gZWxzW2tdLmlkT3JFbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhdHRlbnRpb25FbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dGVudGlvbkVscy5wdXNoKGF0dGVudGlvbkVsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGF0dGVudGlvbkVsLCAnZi1jYXRjaC1hdHRlbnRpb24tZGVib3VuY2UnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDnp7vpmaRjbGFzc1xyXG4gICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gMDsgbSA8IGF0dGVudGlvbkVscy5sZW5ndGg7IG0rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKGF0dGVudGlvbkVsc1ttXSwgJ2YtY2F0Y2gtYXR0ZW50aW9uLWRlYm91bmNlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgdGltZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgIH1cclxufVxyXG4iXX0=