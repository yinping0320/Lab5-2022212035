/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2, ViewContainerRef, ComponentFactoryResolver, } from "@angular/core";
import { OverLayHiddenService, CommonUtils } from "@farris/ui-common";
import { TooltipComponent } from "./tooltip-component/tooltip.component";
var FarrisTooltipDirective = /** @class */ (function () {
    function FarrisTooltipDirective(el, render, viewContainerRef, resolver) {
        this.el = el;
        this.render = render;
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.tooltipEnable = true;
        /* 提示文本 */
        this.text = "";
        // 提示框样式
        this.tipCls = "";
        // 提示框宽度
        this.tipWidth = "";
        /* 位置 */
        this.placement = "top";
        this.zIndex = '';
        this.triggerMode = "hover";
        this.showTip = true;
        this.delay = 0;
        // 是否绑定了事件
        this.hasBindEvent = false;
        this.delayTimer = null;
        /* 生成提示组件 */
        this.componentFactory = this.resolver.resolveComponentFactory(TooltipComponent);
        this.overLayService = new OverLayHiddenService();
        this.commUtils = new CommonUtils();
    }
    Object.defineProperty(FarrisTooltipDirective.prototype, "enableTooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tooltipEnable;
        },
        // 5月7日追加这种写法，控制禁用、启用
        // 原来的时候value是空字符串
        set: 
        // 5月7日追加这种写法，控制禁用、启用
        // 原来的时候value是空字符串
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value == "string" && value == "") {
                this.enableOrDisable(true);
            }
            else {
                this.enableOrDisable(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTooltipDirective.prototype, "trigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this.triggerMode;
        },
        /* 触发方式 */
        set: /* 触发方式 */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                if (value !== this.triggerMode) {
                    this.triggerMode = value;
                    this.unbindEvent();
                    this.bindEvent();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTooltipDirective.prototype, "disable", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.tooltipEnable;
        },
        /* 禁用---跟其他控件的属性容易冲突，逐渐废弃。
         * 比如按钮可以设置禁用不触发点击，但想给出点击提示，这样就冲突了
         */
        set: /* 禁用---跟其他控件的属性容易冲突，逐渐废弃。
             * 比如按钮可以设置禁用不触发点击，但想给出点击提示，这样就冲突了
             */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableOrDisable(!value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.bindEvent();
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unbindEvent();
        this.removeTooltip();
        this.overLayService.destory(this.el.nativeElement);
        this.overLayService = null;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FarrisTooltipDirective.prototype.enableOrDisable = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.tooltipEnable = value;
        if (this.tooltipEnable) {
            this.bindEvent();
        }
        else {
            this.unbindEvent();
        }
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.bindEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.tooltipEnable) {
            return;
        }
        // 是否已绑定事件
        if (this.hasBindEvent) {
            return;
        }
        if (this.trigger === "click") {
            // 鼠标点击
            this.clickEvent = this.render.listen(this.el.nativeElement, "click", (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.appendTooltip();
                _this.clickOutEvent = _this.render.listen(document, "click", (/**
                 * @return {?}
                 */
                function () {
                    _this.removeTooltip();
                    _this.clickOutEvent();
                }));
            }));
        }
        else if (this.trigger === "focus") {
            // 聚焦
            // @Todo 需要把input等组件和普通组件分开
            this.focusDownEvent = this.render.listen(this.el.nativeElement, "mousedown", (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                _this.appendTooltip();
            }));
            this.focusUpEvent = this.render.listen(this.el.nativeElement, "mouseup", (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.removeTooltip();
            }));
        }
        else {
            // 鼠标移动上去
            this.mouseenterEvent = this.render.listen(this.el.nativeElement, "mouseenter", (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                if (_this.delay) {
                    if (_this.delayTimer) {
                        clearTimeout(_this.delayTimer);
                    }
                    _this.delayTimer = setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.appendTooltip();
                        clearTimeout(_this.delayTimer);
                    }), _this.delay);
                }
                else {
                    _this.appendTooltip();
                }
            }));
            this.mouseleaveEvent = this.render.listen(this.el.nativeElement, "mouseleave", (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                if (_this.delayTimer) {
                    clearTimeout(_this.delayTimer);
                }
                _this.removeTooltip();
            }));
        }
        this.hasBindEvent = true;
    };
    /* 解绑事件 */
    /* 解绑事件 */
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.unbindEvent = /* 解绑事件 */
    /**
     * @return {?}
     */
    function () {
        // 鼠标移上去
        if (this.mouseenterEvent) {
            this.mouseenterEvent();
        }
        if (this.mouseleaveEvent) {
            this.mouseleaveEvent();
        }
        if (this.clickEvent) {
            this.clickEvent();
        }
        if (this.clickOutEvent) {
            this.clickOutEvent();
        }
        if (this.focusDownEvent) {
            this.focusDownEvent();
        }
        if (this.focusUpEvent) {
            this.focusUpEvent();
        }
        this.hasBindEvent = false;
    };
    /* body  移除tooltip */
    /* body  移除tooltip */
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.removeTooltip = /* body  移除tooltip */
    /**
     * @return {?}
     */
    function () {
        if (this.tooltip) {
            this.render.removeChild(document.body, this.tooltip.el.nativeElement);
            this._componentRef.changeDetectorRef.markForCheck();
            this._componentRef.changeDetectorRef.detectChanges();
            this._componentRef.destroy();
            this.viewContainerRef.clear();
            this.tooltip = null;
            this._componentRef = null;
            this.overLayService.destory(this.el.nativeElement);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisTooltipDirective.prototype.appendTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.showTip)
            return;
        this.generateTooltip();
        this.updateViewProps(this.placement, this.content, this.el.nativeElement.getBoundingClientRect(), this.getReferencePosition());
        this.overLayService.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.removeTooltip();
        }));
    };
    /* 更新tooltip组件属性 */
    /* 更新tooltip组件属性 */
    /**
     * @private
     * @param {?} placement
     * @param {?} content
     * @param {?} hostBoundingClientRect
     * @param {?} referenceBoundingRect
     * @return {?}
     */
    FarrisTooltipDirective.prototype.updateViewProps = /* 更新tooltip组件属性 */
    /**
     * @private
     * @param {?} placement
     * @param {?} content
     * @param {?} hostBoundingClientRect
     * @param {?} referenceBoundingRect
     * @return {?}
     */
    function (placement, content, hostBoundingClientRect, referenceBoundingRect) {
        this.tooltip.placement = placement;
        this.tooltip.content = content;
        this.tooltip.hostBoundingClientRect = hostBoundingClientRect;
        this.tooltip.tipCls = this.tipCls;
        this.tooltip.tipWidth = this.tipWidth;
        this.tooltip.referenceBoundingRect = referenceBoundingRect;
        this._componentRef.changeDetectorRef.markForCheck();
        this._componentRef.changeDetectorRef.detectChanges();
    };
    /* 构造tooltip结构 */
    /* 构造tooltip结构 */
    /**
     * @private
     * @return {?}
     */
    FarrisTooltipDirective.prototype.generateTooltip = /* 构造tooltip结构 */
    /**
     * @private
     * @return {?}
     */
    function () {
        this._componentRef = this.viewContainerRef.createComponent(this.componentFactory);
        this.tooltip = this._componentRef.instance;
        this.tooltip.zIndex = '' + this.commUtils.getFloatingLayerIndex();
        // 父元素中移除  添加到body中
        this.render.removeChild(this.render.parentNode(this.el.nativeElement), this.tooltip.el.nativeElement);
        this.render.appendChild(document.body, this.tooltip.el.nativeElement);
    };
    /**
     * 确认参照的边界
     */
    /**
     * 确认参照的边界
     * @private
     * @return {?}
     */
    FarrisTooltipDirective.prototype.getReferencePosition = /**
     * 确认参照的边界
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rRight = document.documentElement.clientWidth;
        /** @type {?} */
        var rBottom = document.documentElement.clientHeight;
        /** @type {?} */
        var rTop = 0;
        /** @type {?} */
        var rLeft = 0;
        // 横向参照
        if (this.rectifyReferenceH) {
            /** @type {?} */
            var rectifyReferenceHEl = this.getRectifyReferenceElement(this.rectifyReferenceH);
            rRight = rectifyReferenceHEl.getBoundingClientRect().right;
            rLeft = rectifyReferenceHEl.getBoundingClientRect().left;
        }
        // 纵向参照
        if (this.rectifyReferenceV) {
            /** @type {?} */
            var rectifyReferenceVEl = this.getRectifyReferenceElement(this.rectifyReferenceV);
            rBottom = rectifyReferenceVEl.getBoundingClientRect().bottom;
            rTop = rectifyReferenceVEl.getBoundingClientRect().top;
        }
        return { top: rTop, left: rLeft, right: rRight, bottom: rBottom };
    };
    /**
     * 获取纠正元素
     */
    /**
     * 获取纠正元素
     * @private
     * @param {?} referenceEl
     * @return {?}
     */
    FarrisTooltipDirective.prototype.getRectifyReferenceElement = /**
     * 获取纠正元素
     * @private
     * @param {?} referenceEl
     * @return {?}
     */
    function (referenceEl) {
        if (referenceEl instanceof ElementRef) {
            return referenceEl.nativeElement;
        }
        else if (typeof referenceEl == "string") {
            return document.querySelector((/** @type {?} */ (referenceEl)));
        }
        return referenceEl;
    };
    FarrisTooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[farrisTooltip]",
                },] }
    ];
    /** @nocollapse */
    FarrisTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    FarrisTooltipDirective.propDecorators = {
        enableTooltip: [{ type: Input, args: ["farrisTooltip",] }],
        text: [{ type: Input }],
        tipCls: [{ type: Input }],
        tipWidth: [{ type: Input }],
        placement: [{ type: Input }],
        zIndex: [{ type: Input }],
        trigger: [{ type: Input }],
        disable: [{ type: Input }],
        showTip: [{ type: Input }],
        rectifyReferenceH: [{ type: Input }],
        rectifyReferenceV: [{ type: Input }],
        delay: [{ type: Input }],
        content: [{ type: Input }]
    };
    return FarrisTooltipDirective;
}());
export { FarrisTooltipDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.tooltipEnable;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype._componentRef;
    /** @type {?} */
    FarrisTooltipDirective.prototype.text;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tipCls;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tipWidth;
    /** @type {?} */
    FarrisTooltipDirective.prototype.placement;
    /** @type {?} */
    FarrisTooltipDirective.prototype.zIndex;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.triggerMode;
    /** @type {?} */
    FarrisTooltipDirective.prototype.showTip;
    /** @type {?} */
    FarrisTooltipDirective.prototype.rectifyReferenceH;
    /** @type {?} */
    FarrisTooltipDirective.prototype.rectifyReferenceV;
    /** @type {?} */
    FarrisTooltipDirective.prototype.delay;
    /** @type {?} */
    FarrisTooltipDirective.prototype.content;
    /** @type {?} */
    FarrisTooltipDirective.prototype.mouseenterEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.mouseleaveEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.clickEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.clickOutEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.focusDownEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.focusUpEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.docBody;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.hasBindEvent;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.delayTimer;
    /** @type {?} */
    FarrisTooltipDirective.prototype.componentFactory;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tooltipRef;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tooltip;
    /** @type {?} */
    FarrisTooltipDirective.prototype.overLayService;
    /** @type {?} */
    FarrisTooltipDirective.prototype.commUtils;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,