/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, NgZone, Input } from '@angular/core';
var FInputTipsDirective = /** @class */ (function () {
    function FInputTipsDirective(el, ngzone, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.render = render;
        this.cloneEl = null;
        this.tipsText = "";
        this._enableTips = true;
    }
    Object.defineProperty(FInputTipsDirective.prototype, "enableTips", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableTips;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._enableTips !== value) {
                this._enableTips = value;
                this.changeEventBind();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    FInputTipsDirective.prototype.createCloneEl = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.el.nativeElement) {
            return;
        }
        /** @type {?} */
        var global = {
            cloneCSSProperties: [
                'line-height', 'letter-spacing',
                'font-size', 'font-family', 'font-style', 'font-weight', 'border',
                'padding', 'height'
            ]
        };
        /** @type {?} */
        var el$ = window.getComputedStyle(this.el.nativeElement);
        this.cloneEl = this.render.createElement('span');
        this.cloneEl['innerText'] = el$['value'];
        global.cloneCSSProperties.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            _this.cloneEl.style[item] = el$.getPropertyValue(item);
        }));
        this.render.addClass(this.cloneEl, 'f-dir-hidden-el');
        this.render.appendChild(document.body, this.cloneEl);
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.changeEventBind();
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.changeEventBind = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.enableTips) {
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.mouseEnterListener = _this.onMouseEnterHandler.bind(_this);
                _this.el.nativeElement.addEventListener('mouseenter', _this.mouseEnterListener);
                _this.mouseLeaveListener = _this.onMouseLeaveHandler.bind(_this);
                _this.el.nativeElement.addEventListener('mouseleave', _this.mouseLeaveListener);
            }));
        }
        else {
            if (this.mouseEnterListener) {
                this.el.nativeElement.removeEventListener('mouseenter', this.mouseEnterListener);
                this.mouseEnterListener = null;
                this.el.nativeElement.removeEventListener('mouseleave', this.mouseLeaveListener);
                this.mouseLeaveListener = null;
            }
        }
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.cloneEl) {
            this.render.removeChild(document.body, this.cloneEl);
        }
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.onMouseEnterHandler = /**
     * @return {?}
     */
    function () {
        this.changeTitle();
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.onMouseLeaveHandler = /**
     * @return {?}
     */
    function () {
        // 移除提示
        this.render.setAttribute(this.el.nativeElement, 'title', '');
    };
    /**
     * @private
     * @return {?}
     */
    FInputTipsDirective.prototype.changeTitle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.cloneEl) {
            this.createCloneEl();
        }
        this.tipsText = this.el.nativeElement['value'];
        this.cloneEl['innerText'] = this.tipsText;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.cloneEl.getBoundingClientRect().width > _this.el.nativeElement.getBoundingClientRect().width) {
                    _this.render.setAttribute(_this.el.nativeElement, "title", _this.tipsText);
                }
                else {
                    _this.onMouseLeaveHandler();
                }
            }), 0);
        }));
    };
    FInputTipsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[f-input-tips]'
                },] }
    ];
    /** @nocollapse */
    FInputTipsDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    FInputTipsDirective.propDecorators = {
        enableTips: [{ type: Input, args: ['f-input-tips',] }]
    };
    return FInputTipsDirective;
}());
export { FInputTipsDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.cloneEl;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.tipsText;
    /** @type {?} */
    FInputTipsDirective.prototype.mouseEnterListener;
    /** @type {?} */
    FInputTipsDirective.prototype.mouseLeaveListener;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype._enableTips;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.el;
    /** @type {?} */
    FInputTipsDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,