/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, RendererFactory2, NgZone } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function AttentionElement() { }
if (false) {
    /** @type {?} */
    AttentionElement.prototype.idOrEl;
    /** @type {?|undefined} */
    AttentionElement.prototype.type;
    /** @type {?|undefined} */
    AttentionElement.prototype.class;
}
export class AttentionService {
    /**
     * @param {?} renderFac
     * @param {?} ngZone
     */
    constructor(renderFac, ngZone) {
        this.ngZone = ngZone;
        this.renderer = renderFac.createRenderer(null, null);
    }
    /**
     * @param {?} els
     * @param {?=} timer
     * @return {?}
     */
    catchAttention(els, timer = 600) {
        if (els && els.length > 0) {
            /** @type {?} */
            let attentionEls = [];
            for (let k = 0; k < els.length; k++) {
                /** @type {?} */
                var attentionEl;
                if (typeof els[k].idOrEl == 'string') {
                    attentionEl = document.getElementById(els[k].idOrEl);
                }
                else {
                    attentionEl = els[k].idOrEl;
                }
                if (attentionEl) {
                    attentionEls.push(attentionEl);
                    this.renderer.addClass(attentionEl, 'f-catch-attention-debounce');
                }
            }
            // 移除class
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    for (let m = 0; m < attentionEls.length; m++) {
                        this.renderer.removeClass(attentionEls[m], 'f-catch-attention-debounce');
                    }
                }), timer);
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AttentionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AttentionService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: NgZone }
];
/** @nocollapse */ AttentionService.ngInjectableDef = i0.defineInjectable({ factory: function AttentionService_Factory() { return new AttentionService(i0.inject(i0.RendererFactory2), i0.inject(i0.NgZone)); }, token: AttentionService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AttentionService.prototype.renderer;
    /** @type {?} */
    AttentionService.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0ZW50aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRvb2x0aXAvIiwic291cmNlcyI6WyJsaWIvYXR0ZW50aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXFCLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFDeEYsc0NBSUM7OztJQUhHLGtDQUFZOztJQUNaLGdDQUFhOztJQUNiLGlDQUFlOztBQU1uQixNQUFNLE9BQU8sZ0JBQWdCOzs7OztJQUV6QixZQUFZLFNBQTJCLEVBQVMsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7Ozs7SUFFRCxjQUFjLENBQUMsR0FBdUIsRUFBRSxLQUFLLEdBQUcsR0FBRztRQUMvQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ25CLFlBQVksR0FBRyxFQUFFO1lBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztvQkFDN0IsV0FBVztnQkFDZixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxRQUFRLEVBQUU7b0JBQ2xDLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDeEQ7cUJBQU07b0JBQ0gsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7aUJBQy9CO2dCQUNELElBQUksV0FBVyxFQUFFO29CQUNiLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO2lCQUNyRTthQUNKO1lBQ0QsVUFBVTtZQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQy9CLFVBQVU7OztnQkFBQyxHQUFHLEVBQUU7b0JBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO3FCQUM1RTtnQkFDTCxDQUFDLEdBQUUsS0FBSyxDQUFDLENBQUM7WUFDZCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7OztJQUNELFFBQVE7SUFDUixDQUFDOzs7WUFuQ0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBVHVDLGdCQUFnQjtZQUFFLE1BQU07Ozs7Ozs7O0lBVzVELG9DQUEyQjs7SUFDYyxrQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkluaXQsIFJlbmRlcmVyMiwgUmVuZGVyZXJGYWN0b3J5MiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmV4cG9ydCBpbnRlcmZhY2UgQXR0ZW50aW9uRWxlbWVudCB7XHJcbiAgICBpZE9yRWw6IGFueTtcclxuICAgIHR5cGU/OnN0cmluZzsvLyDorqHliJLpu5jorqQgZGVib3VuY2VcclxuICAgIGNsYXNzPzogc3RyaW5nO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEF0dGVudGlvblNlcnZpY2UgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyXHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJGYWM6IFJlbmRlcmVyRmFjdG9yeTIsIHB1YmxpYyBuZ1pvbmU6IE5nWm9uZSkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJGYWMuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2F0Y2hBdHRlbnRpb24oZWxzOiBBdHRlbnRpb25FbGVtZW50W10sIHRpbWVyID0gNjAwKSB7XHJcbiAgICAgICAgaWYgKGVscyAmJiBlbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgYXR0ZW50aW9uRWxzID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZWxzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0ZW50aW9uRWw7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsc1trXS5pZE9yRWwgPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb25FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsc1trXS5pZE9yRWwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb25FbCA9IGVsc1trXS5pZE9yRWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0ZW50aW9uRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb25FbHMucHVzaChhdHRlbnRpb25FbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhhdHRlbnRpb25FbCwgJ2YtY2F0Y2gtYXR0ZW50aW9uLWRlYm91bmNlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g56e76ZmkY2xhc3NcclxuICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCBhdHRlbnRpb25FbHMubGVuZ3RoOyBtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhhdHRlbnRpb25FbHNbbV0sICdmLWNhdGNoLWF0dGVudGlvbi1kZWJvdW5jZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRpbWVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICB9XHJcbn1cclxuIl19