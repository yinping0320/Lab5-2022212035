/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, NgZone, Input } from '@angular/core';
export class FInputTipsDirective {
    /**
     * @param {?} el
     * @param {?} ngzone
     * @param {?} render
     */
    constructor(el, ngzone, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.render = render;
        this.cloneEl = null;
        this.tipsText = "";
        this._enableTips = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableTips(value) {
        if (this._enableTips !== value) {
            this._enableTips = value;
            this.changeEventBind();
        }
    }
    /**
     * @return {?}
     */
    get enableTips() {
        return this._enableTips;
    }
    /**
     * @private
     * @return {?}
     */
    createCloneEl() {
        if (!this.el.nativeElement) {
            return;
        }
        /** @type {?} */
        const global = {
            cloneCSSProperties: [
                'line-height', 'letter-spacing',
                'font-size', 'font-family', 'font-style', 'font-weight', 'border',
                'padding', 'height'
            ]
        };
        /** @type {?} */
        const el$ = window.getComputedStyle(this.el.nativeElement);
        this.cloneEl = this.render.createElement('span');
        this.cloneEl['innerText'] = el$['value'];
        global.cloneCSSProperties.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            this.cloneEl.style[item] = el$.getPropertyValue(item);
        }));
        this.render.addClass(this.cloneEl, 'f-dir-hidden-el');
        this.render.appendChild(document.body, this.cloneEl);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.changeEventBind();
    }
    /**
     * @return {?}
     */
    changeEventBind() {
        if (this.enableTips) {
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.mouseEnterListener = this.onMouseEnterHandler.bind(this);
                this.el.nativeElement.addEventListener('mouseenter', this.mouseEnterListener);
                this.mouseLeaveListener = this.onMouseLeaveHandler.bind(this);
                this.el.nativeElement.addEventListener('mouseleave', this.mouseLeaveListener);
            }));
        }
        else {
            if (this.mouseEnterListener) {
                this.el.nativeElement.removeEventListener('mouseenter', this.mouseEnterListener);
                this.mouseEnterListener = null;
                this.el.nativeElement.removeEventListener('mouseleave', this.mouseLeaveListener);
                this.mouseLeaveListener = null;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.cloneEl) {
            this.render.removeChild(document.body, this.cloneEl);
        }
    }
    /**
     * @return {?}
     */
    onMouseEnterHandler() {
        this.changeTitle();
    }
    /**
     * @return {?}
     */
    onMouseLeaveHandler() {
        // 移除提示
        this.render.setAttribute(this.el.nativeElement, 'title', '');
    }
    /**
     * @private
     * @return {?}
     */
    changeTitle() {
        if (!this.cloneEl) {
            this.createCloneEl();
        }
        this.tipsText = this.el.nativeElement['value'];
        this.cloneEl['innerText'] = this.tipsText;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.cloneEl.getBoundingClientRect().width > this.el.nativeElement.getBoundingClientRect().width) {
                    this.render.setAttribute(this.el.nativeElement, "title", this.tipsText);
                }
                else {
                    this.onMouseLeaveHandler();
                }
            }), 0);
        }));
    }
}
FInputTipsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[f-input-tips]'
            },] }
];
/** @nocollapse */
FInputTipsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
FInputTipsDirective.propDecorators = {
    enableTips: [{ type: Input, args: ['f-input-tips',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.cloneEl;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.tipsText;
    /** @type {?} */
    FInputTipsDirective.prototype.mouseEnterListener;
    /** @type {?} */
    FInputTipsDirective.prototype.mouseLeaveListener;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype._enableTips;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.el;
    /** @type {?} */
    FInputTipsDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FInputTipsDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRUaXBzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdG9vbHRpcC8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dFRpcHMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWdCLE1BQU0sRUFBYSxLQUFLLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBS3hILE1BQU0sT0FBTyxtQkFBbUI7Ozs7OztJQWtCNUIsWUFBb0IsRUFBYyxFQUFTLE1BQWMsRUFBVSxNQUFpQjtRQUFoRSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFqQjVFLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFDZixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBSWQsZ0JBQVcsR0FBRyxJQUFJLENBQUM7SUFhM0IsQ0FBQzs7Ozs7SUFaRCxJQUNJLFVBQVUsQ0FBQyxLQUFLO1FBQ2hCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7OztJQUNELElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDOzs7OztJQUtPLGFBQWE7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFO1lBQUUsT0FBTztTQUFFOztjQUNqQyxNQUFNLEdBQUc7WUFDWCxrQkFBa0IsRUFBRTtnQkFDaEIsYUFBYSxFQUFFLGdCQUFnQjtnQkFDL0IsV0FBVyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVE7Z0JBQ2pFLFNBQVMsRUFBRSxRQUFRO2FBQ3RCO1NBQ0o7O2NB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QUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFO1lBQy9CLFVBQVU7OztZQUFDLEdBQUcsRUFBRTtnQkFDWixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLEVBQUU7b0JBQ2xHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzNFO3FCQUFNO29CQUNILElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2lCQUM5QjtZQUNMLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNWLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBM0ZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzdCOzs7O1lBSm1CLFVBQVU7WUFBMkIsTUFBTTtZQUEvQixTQUFTOzs7eUJBWXBDLEtBQUssU0FBQyxjQUFjOzs7Ozs7O0lBTnJCLHNDQUF1Qjs7Ozs7SUFDdkIsdUNBQXNCOztJQUN0QixpREFBd0I7O0lBRXhCLGlEQUF3Qjs7Ozs7SUFDeEIsMENBQTJCOzs7OztJQVlmLGlDQUFzQjs7SUFBRSxxQ0FBcUI7Ozs7O0lBQUUscUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEhvc3RMaXN0ZW5lciwgTmdab25lLCBPbkRlc3Ryb3ksIElucHV0LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2YtaW5wdXQtdGlwc10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGSW5wdXRUaXBzRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUgY2xvbmVFbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIHRpcHNUZXh0ID0gXCJcIjtcclxuICAgIG1vdXNlRW50ZXJMaXN0ZW5lcjogYW55O1xyXG4gICAgLy8g5aaC5p6c5piv5LiN5piv55So6buY6K6k55qEVGl0bGXvvIzmraTlsZ7mgKfnm7jlhbPnmoTlip/og73lj6/ku6Xnp7vpmaRcclxuICAgIG1vdXNlTGVhdmVMaXN0ZW5lcjogYW55O1xyXG4gICAgcHJpdmF0ZSBfZW5hYmxlVGlwcyA9IHRydWU7XHJcbiAgICBASW5wdXQoJ2YtaW5wdXQtdGlwcycpXHJcbiAgICBzZXQgZW5hYmxlVGlwcyh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9lbmFibGVUaXBzICE9PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbmFibGVUaXBzID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRXZlbnRCaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGVuYWJsZVRpcHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZVRpcHM7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHVibGljIG5nem9uZTogTmdab25lLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVDbG9uZUVsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5lbC5uYXRpdmVFbGVtZW50KSB7IHJldHVybjsgfVxyXG4gICAgICAgIGNvbnN0IGdsb2JhbCA9IHtcclxuICAgICAgICAgICAgY2xvbmVDU1NQcm9wZXJ0aWVzOiBbXHJcbiAgICAgICAgICAgICAgICAnbGluZS1oZWlnaHQnLCAnbGV0dGVyLXNwYWNpbmcnLFxyXG4gICAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZScsICdmb250LWZhbWlseScsICdmb250LXN0eWxlJywgJ2ZvbnQtd2VpZ2h0JywgJ2JvcmRlcicsXHJcbiAgICAgICAgICAgICAgICAncGFkZGluZycsICdoZWlnaHQnXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGVsJCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5jbG9uZUVsID0gdGhpcy5yZW5kZXIuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIHRoaXMuY2xvbmVFbFsnaW5uZXJUZXh0J10gPSBlbCRbJ3ZhbHVlJ107XHJcbiAgICAgICAgZ2xvYmFsLmNsb25lQ1NTUHJvcGVydGllcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsb25lRWwuc3R5bGVbaXRlbV0gPSBlbCQuZ2V0UHJvcGVydHlWYWx1ZShpdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmNsb25lRWwsICdmLWRpci1oaWRkZW4tZWwnKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5hcHBlbmRDaGlsZChkb2N1bWVudC5ib2R5LCB0aGlzLmNsb25lRWwpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZUV2ZW50QmluZCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjaGFuZ2VFdmVudEJpbmQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlVGlwcykge1xyXG4gICAgICAgICAgICB0aGlzLm5nem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRW50ZXJMaXN0ZW5lciA9IHRoaXMub25Nb3VzZUVudGVySGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm1vdXNlRW50ZXJMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlTGVhdmVMaXN0ZW5lciA9IHRoaXMub25Nb3VzZUxlYXZlSGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm1vdXNlTGVhdmVMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1vdXNlRW50ZXJMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm1vdXNlRW50ZXJMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRW50ZXJMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMubW91c2VMZWF2ZUxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW91c2VMZWF2ZUxpc3RlbmVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNsb25lRWwpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuYm9keSwgdGhpcy5jbG9uZUVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbk1vdXNlRW50ZXJIYW5kbGVyKCkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlVGl0bGUoKTtcclxuICAgIH1cclxuICAgIG9uTW91c2VMZWF2ZUhhbmRsZXIoKSB7XHJcbiAgICAgICAgLy8g56e76Zmk5o+Q56S6XHJcbiAgICAgICAgdGhpcy5yZW5kZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3RpdGxlJywgJycpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VUaXRsZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2xvbmVFbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNsb25lRWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50aXBzVGV4dCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudFsndmFsdWUnXTtcclxuICAgICAgICB0aGlzLmNsb25lRWxbJ2lubmVyVGV4dCddID0gdGhpcy50aXBzVGV4dDtcclxuICAgICAgICB0aGlzLm5nem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xvbmVFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA+IHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIFwidGl0bGVcIiwgdGhpcy50aXBzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Nb3VzZUxlYXZlSGFuZGxlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=