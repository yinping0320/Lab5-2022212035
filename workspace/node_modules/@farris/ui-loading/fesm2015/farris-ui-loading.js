import { delay, filter, takeUntil } from 'rxjs/operators';
import { Subject, BehaviorSubject } from 'rxjs';
import { max } from 'lodash-es';
import { InjectionToken, Component, ElementRef, ViewChild, Renderer2, Output, EventEmitter, Input, Injectable, ApplicationRef, ComponentFactoryResolver, Injector, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CommonUtils, DebugService, FarrisCommonModule } from '@farris/ui-common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const loaddingDefaultConfig = {
    width: 30,
    container: 'body',
    message: '正在加载中，请稍候...',
    posion: 'center',
    type: 0,
    delay: 300
};
/** @type {?} */
const LOADING_DEFAULT_CONFIG = new InjectionToken('loading default options.');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LOADING_STYLES = [
    `<div class="f-loading-round"></div>`,
    `<div class="f-loading-dot-wrapper">
    <div class="f-loading-dot">
        <div class="dot dot1"></div>
        <div class="dot dot2"></div>
        <div class="dot dot3"></div>
        <div class="dot dot4"></div>
    </div>
</div>`,
    `<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" class="lds-coffee"><defs><linearGradient id="gradient" x1="0%" x2="0%" y1="0%" y2="100%"><stop offset="10%" stop-color="black" stop-opacity="0"></stop><stop offset="100%" stop-color="white" stop-opacity="1"></stop></linearGradient><mask id="mask" maskUnits="userSpaceOnUse" x="0" y="0" width="100" height="100"><rect x="22" y="8" width="56" height="54" fill="url(#gradient)"></rect></mask><path id="steam" d="M0-4c-2.1,2.6-2.1,6.4,0,9l0,0c2.1,2.6,2.1,6.4,0,9l0,0c-2.1,2.6-2.1,6.4,0,9l0,0c2.1,2.6,2.1,6.4,0,9l0,0 c-2.1,2.6-2.1,6.4,0,9l0,0c2.1,2.6,2.1,6.4,0,9c-2.1,2.6-2.1,6.4,0,9l0,0c2.1,2.6,2.1,6.4,0,9l0,0c-2.1,2.6-2.1,6.4,0,9l0,0 c2.1,2.6,2.1,6.4,0,9l0,0c-2.1,2.6-2.1,6.4,0,9l0,0c2.1,2.6,2.1,6.4,0,9c-2.1,2.6-2.1,6.4,0,9l0,0c2.1,2.6,2.1,6.4,0,9l0,0 c-2.1,2.6-2.1,6.4,0,9h0c2.1,2.6,2.1,6.4,0,9h0c-2.1,2.6-2.1,6.4,0,9h0c2.1,2.6,2.1,6.4,0,9" stroke-width="6" stroke-linecap="round" fill="#f00" stroke="#58a8f6"></path></defs><g mask="url(#mask)"><use x="29" y="1.00876" href="#steam"><animate attributeName="y" calcMode="linear" values="4;-14" keyTimes="0;1" dur="0.5" begin="0s" repeatCount="indefinite"></animate></use><use x="47" y="-5.98248" href="#steam"><animate attributeName="y" calcMode="linear" values="0;-18" keyTimes="0;1" dur="0.25" begin="0s" repeatCount="indefinite"></animate></use><use x="64" y="-8.48686" href="#steam"><animate attributeName="y" calcMode="linear" values="-4;-22" keyTimes="0;1" dur="0.3333333333333333" begin="0s" repeatCount="indefinite"></animate></use></g><path d="M81.2,52.5l-5.2,0V49c0-1.6-1.3-3-3-3H20c-1.6,0-3,1.3-3,3v11.6C17,71.3,25.7,80,36.5,80h20.1 c7.1,0,13.3-3.8,16.7-9.5h8.3c5.2,0,9.3-4.4,9-9.6C90.2,56.1,86,52.5,81.2,52.5z M81.5,67.5h-6.8c0.8-2.2,1.3-4.5,1.3-7v-5h5.5 c3.3,0,6,2.7,6,6S84.8,67.5,81.5,67.5z" fill="#58a8f6"></path><path d="M78.8,88H19.2c-1.1,0-2-0.9-2-2s0.9-2,2-2h59.5c1.1,0,2,0.9,2,2S79.9,88,78.8,88z" fill="rgba(80.78431372549018%,94.50980392156862%,72.15686274509802%,0)"></path></svg>`
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingComponent {
    /**
     * @param {?} render
     * @param {?} el
     */
    constructor(render, el) {
        this.render = render;
        this.el = el;
        this.showMessage = true;
        this.loadingStyleDom = LOADING_STYLES;
        this._isActive = false;
        this.activeSubject = new BehaviorSubject(false);
        this.message = '';
        this.width = 30;
        /**
         * loading 样式
         */
        this.type = 0;
        this.delay = 300;
        this.closed = new EventEmitter();
        this.activedSubscrition = null;
        this.parentContainer = null;
        this.destroy$ = new Subject();
        this.debugSer = null;
        this.commonUtils = null;
        if (!this.debugSer) {
            this.debugSer = new DebugService();
        }
        if (this.debugSer.useDebugMode) {
            this.debugSer.useDebugMode();
        }
    }
    /**
     * @return {?}
     */
    get isActive() {
        return this._isActive;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set isActive(val) {
        this._isActive = val;
        if (this.activeSubject) {
            this.activeSubject.next(val);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.activedSubscrition = this.activeSubject.pipe(takeUntil(this.destroy$)).pipe(filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            return n;
        })), delay(this.delay)).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (v && this.isActive) {
                // this.render.setStyle(this.loadingContainerEl.nativeElement, 'display', 'block');
                this.render.setStyle(this.loadingBackdrop.nativeElement, 'display', 'block');
                this.render.setStyle(this.loadingContainerEl.nativeElement, 'left', 0);
                this.setPosition();
                this.render.removeStyle(this.loadingContainerEl.nativeElement, 'visibility');
                this.render.removeStyle(this.loadingContainerEl.nativeElement, 'left');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.commonUtils = null;
    }
    /**
     * @return {?}
     */
    close() {
        if (this.loadingBackdrop) {
            this.loadingBackdrop.nativeElement.remove();
        }
        this.isActive = false;
        this.render.removeAttribute(this.el.nativeElement, 'class');
        // this.animate('f-component-loading fadeOut animated animated-0.5');
        this.closed.emit(this.isActive);
    }
    /**
     * @private
     * @return {?}
     */
    setPosition() {
        if (!this.commonUtils) {
            this.commonUtils = new CommonUtils();
        }
        /** @type {?} */
        const containerWidth = this.loadingContainerEl.nativeElement.clientWidth;
        /** @type {?} */
        const containerHeight = this.loadingContainerEl.nativeElement.clientHeight;
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginTop', -containerHeight / 2 + 'px');
        /** @type {?} */
        let ml = -containerWidth / 2 + 'px';
        if (this.parentContainer) {
            if (this.parentContainer.clientWidth <= 200) {
                ml = '-100px';
            }
        }
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginLeft', ml);
        /** @type {?} */
        const zindex = this.commonUtils.getFloatingLayerIndex();
        this.render.setStyle(this.loadingBackdrop.nativeElement, 'zIndex', zindex);
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'zIndex', zindex + 1);
    }
    /**
     * @private
     * @param {?} animateCls
     * @return {?}
     */
    animate(animateCls) {
        this.addAnimationEndEvent('webkitAnimationEnd', 'mozAnimationEnd', 'MSAnimationEnd', 'oanimationend', 'animationend');
        this.render.setAttribute(this.el.nativeElement, 'class', animateCls);
    }
    /**
     * @private
     * @param {...?} events
     * @return {?}
     */
    addAnimationEndEvent(...events) {
        /** @type {?} */
        const _this = this;
        events.forEach((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            _this.el.nativeElement.addEventListener(e, (/**
             * @return {?}
             */
            function handler() {
                _this.el.nativeElement.removeEventListener(e, handler);
                // _this.render.removeAttribute(_this.el.nativeElement, 'class');
                ['fadeIn', 'fadeOut', 'animated', 'animated-0.5'].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    _this.render.removeClass(_this.el.nativeElement, n);
                }));
                _this.closed.emit(_this.isActive);
            }));
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    closeWhenClick5($event) {
        $event.stopPropagation();
        if (this.debugSer.isDebug) {
            this.commonUtils.clickContinuity((/**
             * @return {?}
             */
            () => {
                this.close();
            }));
        }
    }
}
LoadingComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-loading',
                template: `
        <div #loadingBackdrop class="farris-loading-backdrop loading-wait" (click)="closeWhenClick5($event)"></div>
        <div #loadingContainerEl class="farris-loading" style="visibility: hidden">
            <div class="ng-busy-default-wrapper">
                <div class="ng-busy-default-sign" >
                    <div [style.width]="width+ 'px'" [style.height]="width+'px'" style="display: inline-block;margin:4px;"
                                [innerHTML]="loadingStyleDom[type] | safe: 'html'"></div>
                    <div class="ng-busy-default-text" style="margin-left:0;"
                                 *ngIf="showMessage" [innerHTML]="'loading.message' | locale: '' :message | safe: 'html'"></div>
                </div>
            </div>
        </div>
    `,
                styles: [`.loading-wait {
            cursor: wait
        }
        .animated-0.5 {
            -webkit-animation-duration: 0s;
            animation-duration: 0s;
        }
        `]
            }] }
];
/** @nocollapse */
LoadingComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
LoadingComponent.propDecorators = {
    showMessage: [{ type: Input }],
    loadingContainerEl: [{ type: ViewChild, args: ['loadingContainerEl',] }],
    loadingBackdrop: [{ type: ViewChild, args: ['loadingBackdrop',] }],
    closed: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingService {
    /**
     * @param {?} appRef
     * @param {?} cfr
     * @param {?} injecotr
     */
    constructor(appRef, cfr, injecotr) {
        this.appRef = appRef;
        this.cfr = cfr;
        this.injecotr = injecotr;
        this.currentLoadingInstanceID = null;
        this.loadingInstances = {};
        this.localeSer = this.injecotr.get(LocaleService);
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    show(config) {
        this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG) || {};
        this.config = Object.assign(loaddingDefaultConfig, this.config);
        /** @type {?} */
        let _loadingCmpRef;
        /** @type {?} */
        const loadingFactory = this.cfr.resolveComponentFactory(LoadingComponent);
        _loadingCmpRef = loadingFactory.create(this.injecotr);
        if (config) {
            this.config = Object.assign({}, this.config, config);
        }
        // const languageCode = localStorage.getItem('languageCode');
        // if (languageCode === 'en') {
        //     this.config.message = 'Loading...';
        // }
        if (this.localeSer) {
            if (!this.config.message || this.config.message === '正在加载中，请稍候...') {
                this.config.message = this.localeSer.getValue('loading.message');
            }
        }
        /** @type {?} */
        const container = this.config.container;
        /** @type {?} */
        let parentContainer = null;
        if (container === 'body') {
            document.querySelector((/** @type {?} */ (container))).appendChild(_loadingCmpRef.location.nativeElement);
        }
        else {
            if (container instanceof ElementRef) {
                container.nativeElement.appendChild(_loadingCmpRef.location.nativeElement);
                parentContainer = container.nativeElement;
            }
            else {
                if (container instanceof Element) {
                    container.appendChild(_loadingCmpRef.location.nativeElement);
                    parentContainer = container;
                }
            }
        }
        _loadingCmpRef.instance.delay = this.config.delay;
        _loadingCmpRef.instance.isActive = true;
        _loadingCmpRef.instance.parentContainer = parentContainer;
        Object.assign(_loadingCmpRef.instance, this.config);
        _loadingCmpRef.instance.closed.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            if (!state) {
                delete this.loadingInstances[_loadingCmpRef.instance.id];
                this.currentLoadingInstanceID = this.getMaxLoadingID();
                this.clearDom(_loadingCmpRef);
            }
        }));
        _loadingCmpRef.changeDetectorRef.markForCheck();
        _loadingCmpRef.changeDetectorRef.detectChanges();
        /** @type {?} */
        const loadingID = this.createInsId();
        _loadingCmpRef.instance.id = loadingID;
        this.loadingInstances[loadingID] = _loadingCmpRef;
        this.currentLoadingInstanceID = loadingID;
        return _loadingCmpRef.instance;
    }
    /**
     * @param {?=} loadingId
     * @return {?}
     */
    close(loadingId) {
        /** @type {?} */
        const id = loadingId || this.currentLoadingInstanceID;
        /** @type {?} */
        const loadingRef = this.loadingInstances[id];
        if (loadingRef) {
            loadingRef.instance.close();
        }
    }
    /**
     * @return {?}
     */
    clearAll() {
        /** @type {?} */
        const keys = Object.keys(this.loadingInstances);
        if (keys.length) {
            keys.forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                this.clearDom(this.loadingInstances[id]);
            }));
        }
        else {
            /** @type {?} */
            const loadings = document.querySelectorAll('farris-loading');
            if (loadings.length) {
                loadings.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => el.remove()));
            }
            this.loadingInstances = {};
        }
    }
    /**
     * @private
     * @param {?} _loadingCmpRef
     * @return {?}
     */
    clearDom(_loadingCmpRef) {
        if (_loadingCmpRef && _loadingCmpRef.location) {
            /** @type {?} */
            const loadingEl = _loadingCmpRef.location.nativeElement;
            if (loadingEl.parentNode) {
                loadingEl.parentNode.removeChild(loadingEl);
            }
            _loadingCmpRef.destroy();
        }
        _loadingCmpRef = null;
    }
    /**
     * @private
     * @return {?}
     */
    createInsId() {
        return this.getMaxLoadingID() + 1;
    }
    /**
     * @private
     * @return {?}
     */
    getMaxLoadingID() {
        /** @type {?} */
        const ids = Object.keys(this.loadingInstances).map((/**
         * @param {?} k
         * @return {?}
         */
        k => parseInt(k, 10)));
        if (ids.length) {
            return max(ids);
        }
        return 0;
    }
}
LoadingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LoadingService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: LoadingModule,
            providers: [
                { provide: LOADING_DEFAULT_CONFIG, useValue: config || loaddingDefaultConfig },
                LoadingService
            ]
        };
    }
}
LoadingModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FarrisCommonModule,
                    LocaleModule
                ],
                declarations: [
                    LoadingComponent
                ],
                entryComponents: [
                    LoadingComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { loaddingDefaultConfig, LOADING_DEFAULT_CONFIG, LoadingComponent, LoadingService, LoadingModule };

//# sourceMappingURL=farris-ui-loading.js.map