(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-employee-selector'), require('@angular/core'), require('@farris/devkit'), require('@farris/ui-adminorganization-selector')) :
    typeof define === 'function' && define.amd ? define('@farris/dff-data-binding', ['exports', '@farris/ui-employee-selector', '@angular/core', '@farris/devkit', '@farris/ui-adminorganization-selector'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['dff-data-binding'] = {}),global.uiEmployeeSelector,global.ng.core,global.devkit,global.uiAdminorganizationSelector));
}(this, (function (exports,uiEmployeeSelector,i0,devkit,uiAdminorganizationSelector) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dff-data-binding.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DffDataBindingService = /** @class */ (function () {
        function DffDataBindingService() {
        }
        DffDataBindingService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DffDataBindingService.ctorParameters = function () { return []; };
        /** @nocollapse */ DffDataBindingService.ngInjectableDef = i0.defineInjectable({ factory: function DffDataBindingService_Factory() { return new DffDataBindingService(); }, token: DffDataBindingService, providedIn: "root" });
        return DffDataBindingService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dff-data-binding.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DffDataBindingComponent = /** @class */ (function () {
        function DffDataBindingComponent() {
        }
        /**
         * @return {?}
         */
        DffDataBindingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        DffDataBindingComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-dff-data-binding',
                        template: "\n    <p>\n      dff-data-binding works!\n    </p>\n  "
                    }] }
        ];
        /** @nocollapse */
        DffDataBindingComponent.ctorParameters = function () { return []; };
        return DffDataBindingComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/employee-selector-data-mapping.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EmployeeSelectorDataMappingDirective = /** @class */ (function () {
        function EmployeeSelectorDataMappingDirective(vm, targetComponent, injector) {
            this.vm = vm;
            this.targetComponent = targetComponent;
            this.injector = injector;
        }
        /**
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.targetComponent.selectionsChange.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    if (data.data && data.data.length) {
                        _this.mappingData(data.data, mapfields);
                    }
                    else {
                        _this.mappingData(null, mapfields);
                    }
                }));
                this.targetComponent.inputClear.subscribe(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    _this.mappingData(null, mapfields);
                }));
                this.targetComponent.tagRemoved.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    _this.tagRemovedMappingData(data.deleteIndex, mapfields);
                    // if (this.targetComponent.selections && this.targetComponent.selections.length) {
                    //     this.mappingData(this.targetComponent.selections, mapfields);
                    // } else {
                    //     this.mappingData(null, mapfields);
                    // }
                }));
                if (!this.targetComponent.mapFields) {
                    this.targetComponent.mapFields = this.mapFields;
                }
            };
        /**
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @private
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.getFieldBinding = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var ngControl = this.targetComponent && this.targetComponent.ngControl && this.targetComponent.ngControl;
                /** @type {?} */
                var ngFormControls = ngControl && ngControl.formDirective && ngControl.formDirective.form
                    && ngControl.formDirective.form && ngControl.formDirective.form.ngFormControls;
                /** @type {?} */
                var name = ngControl && ngControl.name;
                return ngFormControls && ngFormControls[name] && ngFormControls[name].binding;
            };
        /**
         * @param {?} index
         * @param {?} mapFields
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.tagRemovedMappingData = /**
         * @param {?} index
         * @param {?} mapFields
         * @return {?}
         */
            function (index, mapFields) {
                var _this = this;
                if (!mapFields) {
                    return;
                }
                if (this.targetComponent.ngControl &&
                    this.targetComponent.ngControl.formDirective &&
                    this.targetComponent.ngControl.formDirective.form &&
                    this.targetComponent.ngControl.formDirective.form.bindingData) {
                    /** @type {?} */
                    var bindingData_1 = this.targetComponent.ngControl.formDirective.form.bindingData;
                    if (bindingData_1.setValue) {
                        // 关闭变更检测
                        /** @type {?} */
                        var appContext = this.vm.frameContext.appContext;
                        appContext.changeDetectionController.detach();
                        /** @type {?} */
                        var helpFields = Object.keys(mapFields);
                        /** @type {?} */
                        var idIndex = helpFields.findIndex(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return item === 'id'; }));
                        if (helpFields.includes('id') && idIndex !== 0) {
                            helpFields.splice(idIndex, 1);
                            helpFields = __spread(['id'], helpFields);
                        }
                        /** @type {?} */
                        var pathArr_1 = this.getBindingPathArray();
                        /** @type {?} */
                        var anyFieldArr = this.mapFields[helpFields[0]].split(',');
                        /** @type {?} */
                        var formAnyData = bindingData_1.getValue(pathArr_1.concat(anyFieldArr[0]));
                        if (!formAnyData || formAnyData.split(',').length < 2) {
                            helpFields.reverse();
                        }
                        helpFields.forEach(( /**
                         * @param {?} helpField
                         * @return {?}
                         */function (helpField) {
                            _this.mapFields[helpField].split(',').forEach(( /**
                             * @param {?} fieldPath
                             * @return {?}
                             */function (fieldPath) {
                                /** @type {?} */
                                var path = pathArr_1.concat(fieldPath.split('.'));
                                // todo udt关联问题
                                if (_this.getFieldBinding() === fieldPath) {
                                    return;
                                }
                                /** @type {?} */
                                var resStr = bindingData_1.getValue(path);
                                if (!resStr) {
                                    bindingData_1.clearValue(path, true, true);
                                }
                                else {
                                    /** @type {?} */
                                    var resArr = resStr.split(',');
                                    resArr.splice(index, 1);
                                    /** @type {?} */
                                    var result = resArr.join();
                                    if (!result) {
                                        bindingData_1.clearValue(path, true, true);
                                    }
                                    else {
                                        bindingData_1.setValue(path, result, true, true);
                                    }
                                }
                            }));
                        }));
                        // 重新打开变更检测
                        appContext.changeDetectionController.reattach();
                    }
                }
            };
        /**
         *
         * @param helpData 清空时，值为null
         * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         */
        /**
         *
         * @param {?} helpData 清空时，值为null
         * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.mappingData = /**
         *
         * @param {?} helpData 清空时，值为null
         * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         * @return {?}
         */
            function (helpData, mapFields) {
                var _this = this;
                if (!mapFields) {
                    return;
                }
                // 关闭变更检测
                /** @type {?} */
                var appContext = this.vm.frameContext.appContext;
                appContext.changeDetectionController.detach();
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                /** @type {?} */
                var idIndex = helpFields.findIndex(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item === 'id'; }));
                if (helpFields.includes('id') && idIndex !== 0) {
                    helpFields.splice(idIndex, 1);
                    helpFields = __spread(['id'], helpFields);
                }
                if (!helpData) {
                    helpFields.reverse();
                }
                helpFields.forEach(( /**
                 * @param {?} f
                 * @return {?}
                 */function (f) {
                    // 1、获取字段值
                    // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
                    // 如果helpData没有值（清空场景），则返回一个空字符串
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map(( /**
                             * @param {?} h
                             * @return {?}
                             */function (h) {
                                return _this.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = _this.getValue(f, helpData);
                        }
                    }
                    // 2、设置字段值
                    // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
                    // 如果helpData存在：直接设置上一步中获取的值。
                    /** @type {?} */
                    var pathArr = _this.getBindingPathArray();
                    mapFields[f].split(',').forEach(( /**
                     * @param {?} ff
                     * @return {?}
                     */function (ff) {
                        if (_this.getFieldBinding() === ff) {
                            return;
                        }
                        if (!helpData) {
                            _this.vm.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                        }
                        else {
                            _this.vm.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                        }
                    }));
                }));
                // 重新打开变更检测
                appContext.changeDetectionController.reattach();
            };
        /**
         * @private
         * @param {?} f
         * @param {?} data
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.getValue = /**
         * @private
         * @param {?} f
         * @param {?} data
         * @return {?}
         */
            function (f, data) {
                /** @type {?} */
                var val = '';
                if (f.indexOf('.') === -1) {
                    val = data[f];
                }
                else {
                    val = f.split('.').reduce(( /**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */function (a, b) {
                        return a[b];
                    }), data);
                }
                return val;
            };
        /**
         * @private
         * @return {?}
         */
        EmployeeSelectorDataMappingDirective.prototype.getBindingPathArray = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = this.vm.bindingPath;
                if (path) {
                    return path.split('/').filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n !== ''; }));
                }
                return [];
            };
        EmployeeSelectorDataMappingDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[employee-selector-data-mapping]'
                    },] }
        ];
        /** @nocollapse */
        EmployeeSelectorDataMappingDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: i0.Optional }] },
                { type: uiEmployeeSelector.EmployeeSelectorComponent, decorators: [{ type: i0.Optional }, { type: i0.Self }] },
                { type: i0.Injector }
            ];
        };
        EmployeeSelectorDataMappingDirective.propDecorators = {
            mapFields: [{ type: i0.Input }]
        };
        return EmployeeSelectorDataMappingDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/adminorganization-selector-data-mapping.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AdminOrganizationSelectorDataMappingDirective = /** @class */ (function () {
        function AdminOrganizationSelectorDataMappingDirective(vm, targetComponent, injector) {
            this.vm = vm;
            this.targetComponent = targetComponent;
            this.injector = injector;
        }
        /**
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.targetComponent.selectionsChange.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    if (data.selections && data.selections.length) {
                        _this.mappingData(data.selections, mapfields);
                    }
                    else {
                        _this.mappingData(null, mapfields);
                    }
                }));
                this.targetComponent.inputClear.subscribe(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    _this.mappingData(null, mapfields);
                }));
                this.targetComponent.tagRemoved.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    /** @type {?} */
                    var mapfields = _this.mapFields;
                    _this.tagRemovedMappingData(data.deleteIndex, mapfields);
                    // if (this.targetComponent.selections && this.targetComponent.selections.length) {
                    //     this.mappingData(this.targetComponent.selections, mapfields);
                    // } else {
                    //     this.mappingData(null, mapfields);
                    // }
                }));
                if (!this.targetComponent.mapFields) {
                    this.targetComponent.mapFields = this.mapFields;
                }
            };
        /**
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @private
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.getFieldBinding = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var ngControl = this.targetComponent && this.targetComponent.ngControl && this.targetComponent.ngControl;
                /** @type {?} */
                var ngFormControls = ngControl && ngControl.formDirective && ngControl.formDirective.form
                    && ngControl.formDirective.form && ngControl.formDirective.form.ngFormControls;
                /** @type {?} */
                var name = ngControl && ngControl.name;
                return ngFormControls && ngFormControls[name] && ngFormControls[name].binding;
            };
        /**
         * @param {?} index
         * @param {?} mapFields
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.tagRemovedMappingData = /**
         * @param {?} index
         * @param {?} mapFields
         * @return {?}
         */
            function (index, mapFields) {
                var _this = this;
                if (!mapFields) {
                    return;
                }
                if (this.targetComponent.ngControl &&
                    this.targetComponent.ngControl.formDirective &&
                    this.targetComponent.ngControl.formDirective.form &&
                    this.targetComponent.ngControl.formDirective.form.bindingData) {
                    /** @type {?} */
                    var bindingData_1 = this.targetComponent.ngControl.formDirective.form.bindingData;
                    if (bindingData_1.setValue) {
                        // 关闭变更检测
                        /** @type {?} */
                        var appContext = this.vm.frameContext.appContext;
                        appContext.changeDetectionController.detach();
                        /** @type {?} */
                        var helpFields = Object.keys(mapFields);
                        /** @type {?} */
                        var idIndex = helpFields.findIndex(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return item === 'id'; }));
                        if (helpFields.includes('id') && idIndex !== 0) {
                            helpFields.splice(idIndex, 1);
                            helpFields = __spread(['id'], helpFields);
                        }
                        /** @type {?} */
                        var pathArr_1 = this.getBindingPathArray();
                        /** @type {?} */
                        var anyFieldArr = this.mapFields[helpFields[0]].split(',');
                        /** @type {?} */
                        var formAnyData = bindingData_1.getValue(pathArr_1.concat(anyFieldArr[0]));
                        if (!formAnyData || formAnyData.split(',').length < 2) {
                            helpFields.reverse();
                        }
                        helpFields.forEach(( /**
                         * @param {?} helpField
                         * @return {?}
                         */function (helpField) {
                            _this.mapFields[helpField].split(',').forEach(( /**
                             * @param {?} fieldPath
                             * @return {?}
                             */function (fieldPath) {
                                /** @type {?} */
                                var path = pathArr_1.concat(fieldPath.split('.'));
                                // todo udt关联问题
                                if (_this.getFieldBinding() === fieldPath) {
                                    return;
                                }
                                /** @type {?} */
                                var resStr = bindingData_1.getValue(path);
                                if (!resStr) {
                                    bindingData_1.clearValue(path, true, true);
                                }
                                else {
                                    /** @type {?} */
                                    var resArr = resStr.split(',');
                                    resArr.splice(index, 1);
                                    /** @type {?} */
                                    var result = resArr.join();
                                    if (!result) {
                                        bindingData_1.clearValue(path, true, true);
                                    }
                                    else {
                                        bindingData_1.setValue(path, result, true, true);
                                    }
                                }
                            }));
                        }));
                        // 重新打开变更检测
                        appContext.changeDetectionController.reattach();
                    }
                }
            };
        /**
         *
         * @param helpData 清空时，值为null
         * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         */
        /**
         *
         * @param {?} helpData 清空时，值为null
         * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.mappingData = /**
         *
         * @param {?} helpData 清空时，值为null
         * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         * @return {?}
         */
            function (helpData, mapFields) {
                var _this = this;
                if (!mapFields) {
                    return;
                }
                // 关闭变更检测
                /** @type {?} */
                var appContext = this.vm.frameContext.appContext;
                appContext.changeDetectionController.detach();
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                /** @type {?} */
                var idIndex = helpFields.findIndex(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item === 'id'; }));
                if (helpFields.includes('id') && idIndex !== 0) {
                    helpFields.splice(idIndex, 1);
                    helpFields = __spread(['id'], helpFields);
                }
                if (!helpData) {
                    helpFields.reverse();
                }
                helpFields.forEach(( /**
                 * @param {?} f
                 * @return {?}
                 */function (f) {
                    // 1、获取字段值
                    // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
                    // 如果helpData没有值（清空场景），则返回一个空字符串
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map(( /**
                             * @param {?} h
                             * @return {?}
                             */function (h) {
                                return _this.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = _this.getValue(f, helpData);
                        }
                    }
                    // 2、设置字段值
                    // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
                    // 如果helpData存在：直接设置上一步中获取的值。
                    /** @type {?} */
                    var pathArr = _this.getBindingPathArray();
                    mapFields[f].split(',').forEach(( /**
                     * @param {?} ff
                     * @return {?}
                     */function (ff) {
                        if (_this.getFieldBinding() === ff) {
                            return;
                        }
                        if (!helpData) {
                            _this.vm.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                        }
                        else {
                            _this.vm.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                        }
                    }));
                }));
                // 重新打开变更检测
                appContext.changeDetectionController.reattach();
            };
        /**
         * @private
         * @param {?} f
         * @param {?} data
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.getValue = /**
         * @private
         * @param {?} f
         * @param {?} data
         * @return {?}
         */
            function (f, data) {
                /** @type {?} */
                var val = '';
                if (f.indexOf('.') === -1) {
                    val = data[f];
                }
                else {
                    val = f.split('.').reduce(( /**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */function (a, b) {
                        return a[b];
                    }), data);
                }
                return val;
            };
        /**
         * @private
         * @return {?}
         */
        AdminOrganizationSelectorDataMappingDirective.prototype.getBindingPathArray = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var path = this.vm.bindingPath;
                if (path) {
                    return path.split('/').filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n !== ''; }));
                }
                return [];
            };
        AdminOrganizationSelectorDataMappingDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[adminorganization-selector-data-mapping]'
                    },] }
        ];
        /** @nocollapse */
        AdminOrganizationSelectorDataMappingDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: i0.Optional }] },
                { type: uiAdminorganizationSelector.AdminOrganizationSelectorComponent, decorators: [{ type: i0.Optional }, { type: i0.Self }] },
                { type: i0.Injector }
            ];
        };
        AdminOrganizationSelectorDataMappingDirective.propDecorators = {
            mapFields: [{ type: i0.Input }]
        };
        return AdminOrganizationSelectorDataMappingDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/dff-data-binding.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DffDataBindingModule = /** @class */ (function () {
        function DffDataBindingModule() {
        }
        DffDataBindingModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            DffDataBindingComponent,
                            EmployeeSelectorDataMappingDirective,
                            AdminOrganizationSelectorDataMappingDirective
                        ],
                        imports: [
                            uiEmployeeSelector.EmployeeSelectorModule,
                            uiAdminorganizationSelector.AdminOrganizationSelectorModule
                        ],
                        providers: [],
                        exports: [
                            DffDataBindingComponent,
                            EmployeeSelectorDataMappingDirective,
                            AdminOrganizationSelectorDataMappingDirective
                        ]
                    },] }
        ];
        return DffDataBindingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: farris-dff-data-binding.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.DffDataBindingService = DffDataBindingService;
    exports.DffDataBindingComponent = DffDataBindingComponent;
    exports.DffDataBindingModule = DffDataBindingModule;
    exports.EmployeeSelectorDataMappingDirective = EmployeeSelectorDataMappingDirective;
    exports.AdminOrganizationSelectorDataMappingDirective = AdminOrganizationSelectorDataMappingDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-dff-data-binding.umd.js.map