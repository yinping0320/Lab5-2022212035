/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/adminorganization-selector-data-mapping.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Optional, Self, Input, Injector } from '@angular/core';
import { ViewModel } from '@farris/devkit';
import { AdminOrganizationSelectorComponent } from '@farris/ui-adminorganization-selector';
export class AdminOrganizationSelectorDataMappingDirective {
    /**
     * @param {?} vm
     * @param {?} targetComponent
     * @param {?} injector
     */
    constructor(vm, targetComponent, injector) {
        this.vm = vm;
        this.targetComponent = targetComponent;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.targetComponent.selectionsChange.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const mapfields = this.mapFields;
            if (data.selections && data.selections.length) {
                this.mappingData(data.selections, mapfields);
            }
            else {
                this.mappingData(null, mapfields);
            }
        }));
        this.targetComponent.inputClear.subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const mapfields = this.mapFields;
            this.mappingData(null, mapfields);
        }));
        this.targetComponent.tagRemoved.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const mapfields = this.mapFields;
            this.tagRemovedMappingData(data.deleteIndex, mapfields);
            // if (this.targetComponent.selections && this.targetComponent.selections.length) {
            //     this.mappingData(this.targetComponent.selections, mapfields);
            // } else {
            //     this.mappingData(null, mapfields);
            // }
        }));
        if (!this.targetComponent.mapFields) {
            this.targetComponent.mapFields = this.mapFields;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @return {?}
     */
    getFieldBinding() {
        /** @type {?} */
        const ngControl = this.targetComponent && this.targetComponent.ngControl && this.targetComponent.ngControl;
        /** @type {?} */
        const ngFormControls = ngControl && ngControl.formDirective && ngControl.formDirective.form
            && ngControl.formDirective.form && ngControl.formDirective.form.ngFormControls;
        /** @type {?} */
        const name = ngControl && ngControl.name;
        return ngFormControls && ngFormControls[name] && ngFormControls[name].binding;
    }
    /**
     * @param {?} index
     * @param {?} mapFields
     * @return {?}
     */
    tagRemovedMappingData(index, mapFields) {
        if (!mapFields) {
            return;
        }
        if (this.targetComponent.ngControl &&
            this.targetComponent.ngControl.formDirective &&
            this.targetComponent.ngControl.formDirective.form &&
            this.targetComponent.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.targetComponent.ngControl.formDirective.form.bindingData;
            if (bindingData.setValue) {
                // 关闭变更检测
                /** @type {?} */
                const appContext = this.vm.frameContext.appContext;
                appContext.changeDetectionController.detach();
                /** @type {?} */
                let helpFields = Object.keys(mapFields);
                /** @type {?} */
                const idIndex = helpFields.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item === 'id'));
                if (helpFields.includes('id') && idIndex !== 0) {
                    helpFields.splice(idIndex, 1);
                    helpFields = ['id', ...helpFields];
                }
                /** @type {?} */
                const pathArr = this.getBindingPathArray();
                /** @type {?} */
                const anyFieldArr = this.mapFields[helpFields[0]].split(',');
                /** @type {?} */
                const formAnyData = bindingData.getValue(pathArr.concat(anyFieldArr[0]));
                if (!formAnyData || formAnyData.split(',').length < 2) {
                    helpFields.reverse();
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                (helpField) => {
                    this.mapFields[helpField].split(',').forEach((/**
                     * @param {?} fieldPath
                     * @return {?}
                     */
                    fieldPath => {
                        /** @type {?} */
                        const path = pathArr.concat(fieldPath.split('.'));
                        // todo udt关联问题
                        if (this.getFieldBinding() === fieldPath) {
                            return;
                        }
                        /** @type {?} */
                        const resStr = bindingData.getValue(path);
                        if (!resStr) {
                            bindingData.clearValue(path, true, true);
                        }
                        else {
                            /** @type {?} */
                            const resArr = resStr.split(',');
                            resArr.splice(index, 1);
                            /** @type {?} */
                            const result = resArr.join();
                            if (!result) {
                                bindingData.clearValue(path, true, true);
                            }
                            else {
                                bindingData.setValue(path, result, true, true);
                            }
                        }
                    }));
                }));
                // 重新打开变更检测
                appContext.changeDetectionController.reattach();
            }
        }
    }
    /**
     *
     * @param {?} helpData 清空时，值为null
     * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     * @return {?}
     */
    mappingData(helpData, mapFields) {
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        /** @type {?} */
        const appContext = this.vm.frameContext.appContext;
        appContext.changeDetectionController.detach();
        /** @type {?} */
        let helpFields = Object.keys(mapFields);
        /** @type {?} */
        const idIndex = helpFields.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item === 'id'));
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = ['id', ...helpFields];
        }
        if (!helpData) {
            helpFields.reverse();
        }
        helpFields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        (f) => {
            // 1、获取字段值
            // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
            // 如果helpData没有值（清空场景），则返回一个空字符串
            /** @type {?} */
            let val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    (h) => {
                        return this.getValue(f, h);
                    })).join(',');
                }
                else {
                    val = this.getValue(f, helpData);
                }
            }
            // 2、设置字段值
            // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
            // 如果helpData存在：直接设置上一步中获取的值。
            /** @type {?} */
            const pathArr = this.getBindingPathArray();
            mapFields[f].split(',').forEach((/**
             * @param {?} ff
             * @return {?}
             */
            (ff) => {
                if (this.getFieldBinding() === ff) {
                    return;
                }
                if (!helpData) {
                    this.vm.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                }
                else {
                    this.vm.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            }));
        }));
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    }
    /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    getValue(f, data) {
        /** @type {?} */
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a[b];
            }), data);
        }
        return val;
    }
    /**
     * @private
     * @return {?}
     */
    getBindingPathArray() {
        /** @type {?} */
        const path = this.vm.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n !== ''));
        }
        return [];
    }
}
AdminOrganizationSelectorDataMappingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adminorganization-selector-data-mapping]'
            },] }
];
/** @nocollapse */
AdminOrganizationSelectorDataMappingDirective.ctorParameters = () => [
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: AdminOrganizationSelectorComponent, decorators: [{ type: Optional }, { type: Self }] },
    { type: Injector }
];
AdminOrganizationSelectorDataMappingDirective.propDecorators = {
    mapFields: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AdminOrganizationSelectorDataMappingDirective.prototype.mapFields;
    /**
     * @type {?}
     * @private
     */
    AdminOrganizationSelectorDataMappingDirective.prototype.vm;
    /**
     * @type {?}
     * @private
     */
    AdminOrganizationSelectorDataMappingDirective.prototype.targetComponent;
    /**
     * @type {?}
     * @private
     */
    AdminOrganizationSelectorDataMappingDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,