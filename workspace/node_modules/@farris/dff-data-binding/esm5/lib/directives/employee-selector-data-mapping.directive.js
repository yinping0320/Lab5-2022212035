/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/employee-selector-data-mapping.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Optional, Self, Input, Injector } from '@angular/core';
import { ViewModel } from '@farris/devkit';
import { EmployeeSelectorComponent } from '@farris/ui-employee-selector';
var EmployeeSelectorDataMappingDirective = /** @class */ (function () {
    function EmployeeSelectorDataMappingDirective(vm, targetComponent, injector) {
        this.vm = vm;
        this.targetComponent = targetComponent;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.targetComponent.selectionsChange.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var mapfields = _this.mapFields;
            if (data.data && data.data.length) {
                _this.mappingData(data.data, mapfields);
            }
            else {
                _this.mappingData(null, mapfields);
            }
        }));
        this.targetComponent.inputClear.subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var mapfields = _this.mapFields;
            _this.mappingData(null, mapfields);
        }));
        this.targetComponent.tagRemoved.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var mapfields = _this.mapFields;
            _this.tagRemovedMappingData(data.deleteIndex, mapfields);
            // if (this.targetComponent.selections && this.targetComponent.selections.length) {
            //     this.mappingData(this.targetComponent.selections, mapfields);
            // } else {
            //     this.mappingData(null, mapfields);
            // }
        }));
        if (!this.targetComponent.mapFields) {
            this.targetComponent.mapFields = this.mapFields;
        }
    };
    /**
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.getFieldBinding = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ngControl = this.targetComponent && this.targetComponent.ngControl && this.targetComponent.ngControl;
        /** @type {?} */
        var ngFormControls = ngControl && ngControl.formDirective && ngControl.formDirective.form
            && ngControl.formDirective.form && ngControl.formDirective.form.ngFormControls;
        /** @type {?} */
        var name = ngControl && ngControl.name;
        return ngFormControls && ngFormControls[name] && ngFormControls[name].binding;
    };
    /**
     * @param {?} index
     * @param {?} mapFields
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.tagRemovedMappingData = /**
     * @param {?} index
     * @param {?} mapFields
     * @return {?}
     */
    function (index, mapFields) {
        var _this = this;
        if (!mapFields) {
            return;
        }
        if (this.targetComponent.ngControl &&
            this.targetComponent.ngControl.formDirective &&
            this.targetComponent.ngControl.formDirective.form &&
            this.targetComponent.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData_1 = this.targetComponent.ngControl.formDirective.form.bindingData;
            if (bindingData_1.setValue) {
                // 关闭变更检测
                /** @type {?} */
                var appContext = this.vm.frameContext.appContext;
                appContext.changeDetectionController.detach();
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                /** @type {?} */
                var idIndex = helpFields.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item === 'id'; }));
                if (helpFields.includes('id') && idIndex !== 0) {
                    helpFields.splice(idIndex, 1);
                    helpFields = tslib_1.__spread(['id'], helpFields);
                }
                /** @type {?} */
                var pathArr_1 = this.getBindingPathArray();
                /** @type {?} */
                var anyFieldArr = this.mapFields[helpFields[0]].split(',');
                /** @type {?} */
                var formAnyData = bindingData_1.getValue(pathArr_1.concat(anyFieldArr[0]));
                if (!formAnyData || formAnyData.split(',').length < 2) {
                    helpFields.reverse();
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField].split(',').forEach((/**
                     * @param {?} fieldPath
                     * @return {?}
                     */
                    function (fieldPath) {
                        /** @type {?} */
                        var path = pathArr_1.concat(fieldPath.split('.'));
                        // todo udt关联问题
                        if (_this.getFieldBinding() === fieldPath) {
                            return;
                        }
                        /** @type {?} */
                        var resStr = bindingData_1.getValue(path);
                        if (!resStr) {
                            bindingData_1.clearValue(path, true, true);
                        }
                        else {
                            /** @type {?} */
                            var resArr = resStr.split(',');
                            resArr.splice(index, 1);
                            /** @type {?} */
                            var result = resArr.join();
                            if (!result) {
                                bindingData_1.clearValue(path, true, true);
                            }
                            else {
                                bindingData_1.setValue(path, result, true, true);
                            }
                        }
                    }));
                }));
                // 重新打开变更检测
                appContext.changeDetectionController.reattach();
            }
        }
    };
    /**
     *
     * @param helpData 清空时，值为null
     * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     */
    /**
     *
     * @param {?} helpData 清空时，值为null
     * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.mappingData = /**
     *
     * @param {?} helpData 清空时，值为null
     * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     * @return {?}
     */
    function (helpData, mapFields) {
        var _this = this;
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        /** @type {?} */
        var appContext = this.vm.frameContext.appContext;
        appContext.changeDetectionController.detach();
        /** @type {?} */
        var helpFields = Object.keys(mapFields);
        /** @type {?} */
        var idIndex = helpFields.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item === 'id'; }));
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = tslib_1.__spread(['id'], helpFields);
        }
        if (!helpData) {
            helpFields.reverse();
        }
        helpFields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            // 1、获取字段值
            // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
            // 如果helpData没有值（清空场景），则返回一个空字符串
            /** @type {?} */
            var val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) {
                        return _this.getValue(f, h);
                    })).join(',');
                }
                else {
                    val = _this.getValue(f, helpData);
                }
            }
            // 2、设置字段值
            // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
            // 如果helpData存在：直接设置上一步中获取的值。
            /** @type {?} */
            var pathArr = _this.getBindingPathArray();
            mapFields[f].split(',').forEach((/**
             * @param {?} ff
             * @return {?}
             */
            function (ff) {
                if (_this.getFieldBinding() === ff) {
                    return;
                }
                if (!helpData) {
                    _this.vm.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                }
                else {
                    _this.vm.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            }));
        }));
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    };
    /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.getValue = /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    function (f, data) {
        /** @type {?} */
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a[b];
            }), data);
        }
        return val;
    };
    /**
     * @private
     * @return {?}
     */
    EmployeeSelectorDataMappingDirective.prototype.getBindingPathArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var path = this.vm.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== ''; }));
        }
        return [];
    };
    EmployeeSelectorDataMappingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[employee-selector-data-mapping]'
                },] }
    ];
    /** @nocollapse */
    EmployeeSelectorDataMappingDirective.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: EmployeeSelectorComponent, decorators: [{ type: Optional }, { type: Self }] },
        { type: Injector }
    ]; };
    EmployeeSelectorDataMappingDirective.propDecorators = {
        mapFields: [{ type: Input }]
    };
    return EmployeeSelectorDataMappingDirective;
}());
export { EmployeeSelectorDataMappingDirective };
if (false) {
    /** @type {?} */
    EmployeeSelectorDataMappingDirective.prototype.mapFields;
    /**
     * @type {?}
     * @private
     */
    EmployeeSelectorDataMappingDirective.prototype.vm;
    /**
     * @type {?}
     * @private
     */
    EmployeeSelectorDataMappingDirective.prototype.targetComponent;
    /**
     * @type {?}
     * @private
     */
    EmployeeSelectorDataMappingDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,