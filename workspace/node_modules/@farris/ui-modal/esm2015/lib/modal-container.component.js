/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, Renderer2, ViewChild, Output, EventEmitter, TemplateRef, Input, ViewChildren, QueryList, HostBinding } from '@angular/core';
import { AngularDraggableDirective } from '@farris/ui-draggable';
import { DomSanitizer } from "@angular/platform-browser";
import { CLASS_NAME, DISMISS_REASONS, ModalOptions, TRANSITION_DURATIONS } from './modal-options.class';
import { isBs3 } from '@farris/ui-modal/utils';
import { ModalButtonDirective } from './modal-button.directive';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
export class ModalContainerComponent {
    /**
     * @param {?} options
     * @param {?} el
     * @param {?} _renderer
     * @param {?} sanitizer
     */
    constructor(options, el, _renderer, sanitizer) {
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        // 是否非模态窗口
        this.isModeless = false;
        this.isModalHiding = false;
        // 记录上次的高度
        this.isMax = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = `MODALID_${Date.now().toPrecision()}`;
        this._windowResizeToMax = false;
        this.windowResize$ = null;
        this.config = Object.assign({}, options);
        if (!this.config.buttons) {
            this.config.buttons = [
                {
                    text: '取消',
                    cls: 'btn btn-light',
                    iconCls: 'k-icon k-i-close',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.close();
                    })
                },
                {
                    text: '确定',
                    cls: 'btn btn-primary',
                    iconCls: 'k-icon k-i-check',
                    handle: (/**
                     * @return {?}
                     */
                    () => { alert('好(｡･∀･)ﾉﾞ嗨哟!!'); })
                }
            ];
        }
        this.setIsModeless();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iframe(value) {
        if (this.sanitizer) {
            this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.isModeless) {
            // 如果是非模态窗口
            this.boundsElement = null;
            this._renderer.addClass(this.el.nativeElement, 'f-modal-is-modeless');
        }
        else {
            this.boundsElement = this.el.nativeElement;
        }
        if (this.config.fitContent) {
            this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent');
        }
        if (this.isAnimated) {
            this._renderer.addClass(this.el.nativeElement, CLASS_NAME.FADE);
        }
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isShown = true;
            this._renderer.addClass(this.el.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);
            if (this.isModeless) {
                this._renderer.setStyle(this.el.nativeElement, 'position', 'static');
            }
            this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
            if (this.config.fitContent && this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
                this.el.nativeElement.scrollTop = 0;
            }
            if (document && document.body) {
                /** @type {?} */
                const modalLen = this.bsModalService.getModalsCount();
                if (modalLen === 1) {
                    this.bsModalService.checkScrollbar();
                    this.bsModalService.setScrollbar();
                }
                if (!document.body.classList.contains(CLASS_NAME.OPEN)) {
                    this._renderer.addClass(document.body, CLASS_NAME.OPEN);
                }
            }
            this.opened.emit({ modal: this });
        }), this.isAnimated ? TRANSITION_DURATIONS.BACKDROP : 0);
        // });
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
        this.dlgHeaderLineHeight = this.getDialogHeaderLineHeight() + 'px';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.
        // Add 'implements AfterViewInit' to the class.
        this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
        // 如果内容适应宽度
        if (this.config.fitContent) {
            /** @type {?} */
            let initElRect = this.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            let initBodySize = this.getContainerSize();
            if (initElRect.height < initBodySize.height + 30) {
                this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent-scroll');
            }
        }
        this.originalHeight = this.config.height;
        this.originalWidth = this.config.width;
        this.windowResize$ = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const winWidth = window.innerWidth - 20;
            /** @type {?} */
            const winHeight = window.innerHeight - 20;
            if (this.config.width <= winWidth && this.config.height <= winHeight) {
                if (this._windowResizeToMax) {
                    this.revertDialog();
                    this._windowResizeToMax = false;
                }
                else {
                    if (this.isMax) {
                        this.maxDialog(false);
                    }
                }
            }
            else {
                if (!this.isMax) {
                    this._windowResizeToMax = true;
                    this.maxDialog();
                }
                else {
                    this.maxDialog(false);
                }
            }
            this.toCenter();
            this.moveTo(0, 0);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getDlgElement() {
        return this.el.nativeElement.querySelector('.modal-dialog');
    }
    /**
     * @private
     * @return {?}
     */
    getDialogHeaderLineHeight() {
        if (this.config.showHeader) {
            /** @type {?} */
            const modalHeaderStyles = window.getComputedStyle(this.modalHeader.nativeElement);
            /** @type {?} */
            const paddingTop = parseInt(modalHeaderStyles.paddingTop.replace('px', ''), 10);
            /** @type {?} */
            const paddingBottom = parseInt(modalHeaderStyles.paddingBottom.replace('px', ''), 10);
            return this.config.dialogHeaderHeight - paddingTop - paddingBottom;
        }
        else {
            return 0;
        }
    }
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    getContainerSize() {
        /** @type {?} */
        const bodyTarget = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        const height = bodyTarget.offsetHeight;
        /** @type {?} */
        const width = bodyTarget.offsetWidth;
        return { width, height };
    }
    /**
     * @return {?}
     */
    buildFooterStyles() {
        /** @type {?} */
        let styles = {};
        if (this.config.dialogFooterStyles) {
            styles = Object.assign({}, styles, this.config.dialogFooterStyles);
        }
        return styles;
    }
    /**
     * @return {?}
     */
    useButtonsTemplate() {
        return this.config.buttons instanceof TemplateRef;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        /** @type {?} */
        const tag = (/** @type {?} */ (event.target));
        // if (tag.localName === 'label') {
        //     if (tag.className) {
        //         const clsList = tag.className.split(' ');
        //         if (
        //             clsList.indexOf('k-radio-label') > -1 ||
        //             clsList.indexOf('k-checkbox-label') > -1 ||
        //             clsList.indexOf('custom-control-label') > -1
        //         ) {
        //             return;
        //         }
        //     }
        // }
        // if (tag.localName === 'input' && (tag.type === 'checkbox' || tag.type === 'radio' || tag.type === 'file')) {
        //     return;
        // }
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(DISMISS_REASONS.BACKRDOP);
        this.close();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEsc(event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        /**从最后一个窗口开始关闭 */
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(DISMISS_REASONS.ESC);
            this.close(event);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.isShown) {
            this.close();
        }
        if (this.windowResize$) {
            this.windowResize$.unsubscribe();
            this.windowResize$ = null;
        }
    }
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    close(e, isCloseButton = false) {
        if (e && e.stopPropagation) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this, { event: e }).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            if (!r) {
                return false;
            }
            // 更新服务中非模态窗口的个数
            this.bsModalService.closeUpdateModelessCountByModal(this.isModeless);
            this.isModalHiding = true;
            this._renderer.removeClass(this.el.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.isShown = false;
                this.bsModalService.hide(this.level);
                this.isModalHiding = false;
                if (document && document.body && !document.querySelectorAll('.farris-modal.show').length) {
                    this._renderer.removeClass(document.body, CLASS_NAME.OPEN);
                }
                if (this.config.closed) {
                    this.config.closed(isCloseButton, { modalRef: this, event: e });
                }
                this.closed.emit(this.level);
            }), this.isAnimated ? TRANSITION_DURATIONS.MODAL : 0);
            // });
        }));
    }
    /**
     * @return {?}
     */
    toCenter() {
        /** @type {?} */
        const marginLeft = Number.parseInt('' + -this.config.width / 2);
        /** @type {?} */
        const marginTop = Number.parseInt('' + -this.config.height / 2);
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        /** @type {?} */
        const contentEl = this.el.nativeElement.querySelector('.modal-body');
        // this._renderer.setStyle(dialogEl, 'margin-left', marginLeft);
        // this._renderer.setStyle(dialogEl, 'margin-top', marginTop);
        this._renderer.setStyle(dialogEl, 'left', `${window.innerWidth / 2 + marginLeft}px`);
        this._renderer.setStyle(dialogEl, 'top', `${window.innerHeight / 2 + marginTop}px`);
        /** @type {?} */
        let contentHeight = this.config.height - 38;
        if (this.config.showButtons) {
            contentHeight = contentHeight - 50;
        }
        if (!this.config.fitContent) {
            this._renderer.setStyle(contentEl, 'height', contentHeight + 'px');
        }
        this._renderer.setStyle(contentEl, 'overflow', 'hidden');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(0px, 0px, 0px)`);
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const container = this.getContainerSize();
            const { width: containerWidth, height: containerHeight } = container;
            this.resized.emit({ width: this.config.width, height: this.config.height, containerWidth, containerHeight });
        }));
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    moveTo(x, y) {
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(${x}px, ${y}px, 0px)`);
        // this._renderer.setStyle(dialogEl, 'top', '50%');
        // this._renderer.setStyle(dialogEl, 'left', '50%');
        // const marginLeft = Number.parseInt('' + -this.config.width / 2);
        // const marginTop = Number.parseInt('' + -this.config.height / 2);
        // this._renderer.setStyle(dialogEl, 'left', `${window.innerWidth / 2 + marginLeft}px`);
        // this._renderer.setStyle(dialogEl, 'top',  `${window.innerHeight / 2 + marginTop}px`);
        this.draggbar.position = { x, y };
        this.draggbar.resetPosition();
    }
    /**
     * @param {?=} rememberPrevSize
     * @return {?}
     */
    maxDialog(rememberPrevSize = true) {
        if (rememberPrevSize) {
            this.prevWidth = this.config.width;
            this.prevHeight = this.config.height;
        }
        // this.config.width = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientWidth'] - 20;
        // this.config.height = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientHeight'] - 20;
        this.config.width = window.innerWidth - 20;
        this.config.height = window.innerHeight - 20;
        this.config.draggable = false;
        this.config.resizable = false;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.addClass(dialogEl, 'model-dialog-maximize');
        this._renderer.setStyle(dialogEl, 'top', '50%');
        this._renderer.setStyle(dialogEl, 'left', '50%');
        this.isMax = true;
        this.toCenter();
        this.moveTo(0, 0);
    }
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    resize(width, height) {
        if (width) {
            this.config.width = width;
        }
        if (height) {
            this.config.height = height;
        }
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    dropdown(el) {
        // const rect = el.getBoundingClientRect();
        // this._renderer.removeStyle(el, 'margin-top');
        // this._renderer.removeStyle(el, 'margin-left');
        // this._renderer.setStyle(el, 'top', `${rect.top}px`);
        // this._renderer.setStyle(el, 'left', `${rect.left}px`);
        // this._renderer.removeStyle(el, 'transform');
        // this._renderer.removeStyle(el, '-webkit-transform');
        // this._renderer.removeStyle(el, '-ms-transform');
        // this._renderer.removeStyle(el, '-moz-transform');
        // this._renderer.removeStyle(el, '-o-transform');
    }
    /**
     * @return {?}
     */
    revertDialog() {
        this.isMax = false;
        /** @type {?} */
        const ww = window.innerWidth - 20;
        /** @type {?} */
        const wh = window.innerHeight - 20;
        this.config.width = this.prevWidth == ww ? this.originalWidth : this.prevWidth;
        this.config.height = this.prevHeight == wh ? this.originalHeight : this.prevHeight;
        if (this.config.width > ww) {
            this.config.width = ww;
        }
        if (this.config.height > wh) {
            this.config.height = wh;
        }
        this.config.draggable = true;
        this.config.resizable = true;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    }
    /**
     * @return {?}
     */
    changeDialogSize() {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
        this._windowResizeToMax = false;
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    resizeStop(opts) {
        // console.log('resizeStop');
        this.config.width = opts.size.width;
        this.config.height = opts.size.height;
        /** @type {?} */
        const container = this.getContainerSize();
        const { width: containerWidth, height: containerHeight } = container;
        this.resized.emit(Object.assign({}, opts.size, { containerWidth, containerHeight }));
    }
    /**
     * 是否非模态
     * @return {?}
     */
    setIsModeless() {
        if (this.config.hasOwnProperty('modeless')) {
            this.isModeless = this.config['modeless'];
        }
        else {
            this.isModeless = false;
        }
    }
    /**
     * @param {?} zIndex
     * @return {?}
     */
    updateDialogZindex(zIndex) {
        if (this.isModeless) {
            /** @type {?} */
            let modalEl = this.el.nativeElement;
            /** @type {?} */
            const dialogEl = modalEl.querySelector('.modal-dialog');
            this._renderer.setStyle(dialogEl, 'position', 'fixed');
            this._renderer.setStyle(dialogEl, 'zIndex', zIndex ? zIndex : modalEl.style.zIndex);
        }
    }
}
ModalContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'modal-container',
                template: `
    <div [attr.id]="modalID"

        [ngDraggable]="config.draggable"
        [ngResizable]="config.resizable"
        [rzMinWidth]="config.minWidth"
        [rzMaxWidth]="config.maxWidth"
        [rzMinHeight]="config.minHeight"
        [rzMaxHeight]="config.maxHeight"
        rzHandles="all" [handle]="config.showHeader ? header:dragEl"
        (stopped)="dropdown($event)"
        (rzStop)="resizeStop($event)"
        [inBounds]="true" [bounds]="boundsElement" [rzContainment]="boundsElement" [isFixed]="isModeless"
        [class]="'modal-dialog' + (config.class ? ' ' + config.class : '')" role="document"
        [style.width]="config.width + 'px'" [style.height]="config.fitContent?'auto':(config.height + 'px')"
        style="position: absolute;top: 50%;left: 50%;">
        <div class="modal-content" [ngClass]="{'modal-content--has-header':config.showHeader}">
            <div #header class="modal-header" [style.display]="config.showHeader ? '': 'none'">
                <div class="modal-title">
                    <span *ngIf="config.iconCls" [class]="config.iconCls" style="margin-right: 8px"></span>
                    <span class="modal-title-label">{{ config.title }}</span>
                </div>
                <div class="actions">
                    <ul>
                        <li *ngIf="config.showMinButton" class="f-btn-icon f-bare">
                            <span class="f-icon modal_minimize"></span></li>
                        <li *ngIf="config.showMaxButton" (click)="changeDialogSize()" class="f-btn-icon f-bare">
                            <span class="f-icon modal_maximize" [class.modalrevert]="isMax"></span>
                        </li>
                        <li *ngIf="config.showCloseButton" (click)="close($event, true)" class="f-btn-icon f-bare">
                             <span class="f-icon modal_close"></span>
                        </li>
                    </ul>
                </div>
            </div>
        <div #dragEl class="f-utils-absolute-all" style="height:10px;z-index: 1;" [style.display]="config.showHeader ? 'none': ''"></div>
            <div class="modal-body" [class.f-utils-flex-column]="dialogType === 'iframe'"   [f-area-response]="config.areaResponse">
                <perfect-scrollbar [config]="{}" [disabled]="!config.enableScroll||config.fitContent"  *ngIf="!dialogType || dialogType === 'default'">
                    <ng-content ></ng-content>
                </perfect-scrollbar>
                <iframe *ngIf="dialogType === 'iframe'" class="f-utils-fill" width="100%" frameborder="0" [src]="iframeSrc"></iframe>
            </div>

            <div [style.textAlign]="config.buttonAlign" class="modal-footer" [ngStyle]="buildFooterStyles()" *ngIf="config.showButtons && config.buttons">
                <ng-container [ngTemplateOutlet]="useButtonsTemplate() ? config.buttons : defaultButtonRef"></ng-container>
            </div>
        </div>
    </div>

    <ng-template #defaultButtonRef>

        <ng-container *ngFor="let btn of config.buttons; last as isLast">
            <button type="button" modal-button  *ngIf="btn.display === undefined && btn.tipsEnable === undefined"
                [class]="btn.cls"
                (click)="btn.handle && btn.handle($event) ">
                <span [class]="btn.iconCls" *ngIf="btn.iconCls"></span> {{ btn.text }}
            </button>

            <button type="button" modal-button  *ngIf="btn.display !== undefined || btn.tipsEnable !== undefined"
                [class]="btn.cls"
                (click)="btn.handle && btn.handle($event) " 
                [style.display]="(btn.display === true || btn.display === undefined) ? '' : 'none'"
                [farrisTooltip]="btn?.tipsEnable" [placement]="'top'" [delay]="500" [content]="btn?.tipsText">
                <span [class]="btn.iconCls" *ngIf="btn.iconCls"></span> {{ btn.text }}
            </button>

        </ng-container>

    </ng-template>
  `,
                host: {
                    class: 'modal farris-modal',
                    role: 'dialog',
                    tabindex: '-1',
                    '[attr.aria-modal]': 'true'
                }
            }] }
];
/** @nocollapse */
ModalContainerComponent.ctorParameters = () => [
    { type: ModalOptions },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomSanitizer }
];
ModalContainerComponent.propDecorators = {
    iframe: [{ type: Input }],
    draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
    modalHeader: [{ type: ViewChild, args: ['header',] }],
    closed: [{ type: Output }],
    opened: [{ type: Output }],
    resized: [{ type: Output }],
    modalID: [{ type: HostBinding, args: ['id',] }],
    buttons: [{ type: ViewChildren, args: [ModalButtonDirective,] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ModalContainerComponent.prototype.config;
    /** @type {?} */
    ModalContainerComponent.prototype.isShown;
    /** @type {?} */
    ModalContainerComponent.prototype.level;
    /** @type {?} */
    ModalContainerComponent.prototype.isAnimated;
    /** @type {?} */
    ModalContainerComponent.prototype.bsModalService;
    /** @type {?} */
    ModalContainerComponent.prototype.dialogType;
    /** @type {?} */
    ModalContainerComponent.prototype.iframeSrc;
    /** @type {?} */
    ModalContainerComponent.prototype.isModeless;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.isModalHiding;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.originalWidth;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.originalHeight;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.prevWidth;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.prevHeight;
    /** @type {?} */
    ModalContainerComponent.prototype.isMax;
    /** @type {?} */
    ModalContainerComponent.prototype.draggbar;
    /** @type {?} */
    ModalContainerComponent.prototype.modalHeader;
    /** @type {?} */
    ModalContainerComponent.prototype.boundsElement;
    /** @type {?} */
    ModalContainerComponent.prototype.closed;
    /** @type {?} */
    ModalContainerComponent.prototype.opened;
    /** @type {?} */
    ModalContainerComponent.prototype.resized;
    /** @type {?} */
    ModalContainerComponent.prototype.modalID;
    /** @type {?} */
    ModalContainerComponent.prototype.buttons;
    /** @type {?} */
    ModalContainerComponent.prototype.dlgHeaderLineHeight;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype._windowResizeToMax;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.windowResize$;
    /**
     * @type {?}
     * @protected
     */
    ModalContainerComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbW9kYWwvIiwic291cmNlcyI6WyJsaWIvbW9kYWwtY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUMzQixTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFDcEMsWUFBWSxFQUFFLFdBQVcsRUFBaUIsS0FBSyxFQUUvQyxZQUFZLEVBQ1osU0FBUyxFQUNULFdBQVcsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsWUFBWSxFQUFtQixNQUFNLDJCQUEyQixDQUFDO0FBQzFFLE9BQU8sRUFDSCxVQUFVLEVBQUUsZUFBZSxFQUMzQixZQUFZLEVBQUUsb0JBQW9CLEVBQ3JDLE1BQU0sdUJBQXVCLENBQUM7QUFFL0IsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9DLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQVMsTUFBTSxnQkFBZ0IsQ0FBQztBQWlGckQsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7OztJQXVDaEMsWUFDSSxPQUFxQixFQUNYLEVBQWMsRUFDaEIsU0FBb0IsRUFDcEIsU0FBdUI7UUFGckIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNoQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUF6Q25DLFlBQU8sR0FBRyxLQUFLLENBQUM7O1FBT2hCLGVBQVUsR0FBQyxLQUFLLENBQUM7UUFPVCxrQkFBYSxHQUFHLEtBQUssQ0FBQzs7UUFNOUIsVUFBSyxHQUFHLEtBQUssQ0FBQztRQU1KLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzVCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzVCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXBCLFlBQU8sR0FBRyxXQUFXLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO1FBSzNELHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixrQkFBYSxHQUFpQixJQUFJLENBQUM7UUFPdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUc7Z0JBQ2xCO29CQUNJLElBQUksRUFBRSxJQUFJO29CQUNWLEdBQUcsRUFBRSxlQUFlO29CQUNwQixPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixNQUFNOzs7b0JBQUUsR0FBRyxFQUFFO3dCQUNULElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDakIsQ0FBQyxDQUFBO2lCQUNKO2dCQUNEO29CQUNJLElBQUksRUFBRSxJQUFJO29CQUNWLEdBQUcsRUFBRSxpQkFBaUI7b0JBQ3RCLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLE1BQU07OztvQkFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQzVDO2FBQ0osQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBdkRELElBQ1csTUFBTSxDQUFDLEtBQWE7UUFDM0IsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6RTtJQUNMLENBQUM7Ozs7SUFvREQsUUFBUTtRQUNKLElBQUcsSUFBSSxDQUFDLFVBQVUsRUFBQztZQUNmLFdBQVc7WUFDWCxJQUFJLENBQUMsYUFBYSxHQUFDLElBQUksQ0FBQztZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1NBQ3pFO2FBQUk7WUFDRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuRTtRQUNELHdDQUF3QztRQUN4QyxVQUFVOzs7UUFBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FDbkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQ3JCLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUM1QyxDQUFDO1lBQ0YsSUFBRyxJQUFJLENBQUMsVUFBVSxFQUFDO2dCQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUN4RTtZQUNELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNuRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDckcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQzthQUN2QztZQUVELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7O3NCQUNyQixRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUU7Z0JBQ3JELElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtvQkFDaEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDckMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztpQkFDdEM7Z0JBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3BELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMzRDthQUNKO1lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN0QyxDQUFDLEdBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNO1FBRU4sSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRTtZQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNqQztRQUVELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMseUJBQXlCLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDdkUsQ0FBQzs7OztJQUVELGVBQWU7UUFDWCw4R0FBOEc7UUFDOUcsK0NBQStDO1FBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuRSxXQUFXO1FBQ1gsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTs7Z0JBQ3BCLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRTs7Z0JBQzFELFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDMUMsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO2dCQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO2FBQy9FO1NBQ0o7UUFFRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDakQsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUNuQixDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLENBQU0sRUFBRSxFQUFFOztrQkFDYixRQUFRLEdBQUksTUFBTSxDQUFDLFVBQVUsR0FBRSxFQUFFOztrQkFDakMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsRUFBRTtZQUV6QyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxTQUFTLEVBQUU7Z0JBQ2xFLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO29CQUN6QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7aUJBQ25DO3FCQUFNO29CQUNILElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTt3QkFDWixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUN6QjtpQkFDSjthQUNKO2lCQUFNO2dCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNiLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7b0JBQy9CLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQkFDcEI7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDekI7YUFDSjtZQUVELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixDQUFDLEVBQUMsQ0FBQztJQUVQLENBQUM7Ozs7O0lBRU8sYUFBYTtRQUNqQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7OztJQUVPLHlCQUF5QjtRQUM3QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFOztrQkFDbEIsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDOztrQkFDM0UsVUFBVSxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7O2tCQUN6RSxhQUFhLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNyRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxHQUFHLGFBQWEsQ0FBQztTQUN0RTthQUFNO1lBQ0gsT0FBTyxDQUFDLENBQUM7U0FDWjtJQUNMLENBQUM7Ozs7O0lBR0QsZ0JBQWdCOztjQUNOLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDOztjQUMvRCxNQUFNLEdBQUcsVUFBVSxDQUFDLFlBQVk7O2NBQ2hDLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVztRQUNwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxpQkFBaUI7O1lBQ1QsTUFBTSxHQUFHLEVBQUU7UUFFZixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUU7WUFDaEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDdEU7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7O0lBRUQsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sWUFBWSxXQUFXLENBQUM7SUFDdEQsQ0FBQzs7Ozs7SUFHRCxPQUFPLENBQUMsS0FBaUI7O2NBQ2YsR0FBRyxHQUFHLG1CQUFBLEtBQUssQ0FBQyxNQUFNLEVBQU87UUFFL0IsbUNBQW1DO1FBQ25DLDJCQUEyQjtRQUMzQixvREFBb0Q7UUFDcEQsZUFBZTtRQUNmLHVEQUF1RDtRQUN2RCwwREFBMEQ7UUFDMUQsMkRBQTJEO1FBQzNELGNBQWM7UUFDZCxzQkFBc0I7UUFDdEIsWUFBWTtRQUNaLFFBQVE7UUFDUixJQUFJO1FBRUosK0dBQStHO1FBQy9HLGNBQWM7UUFDZCxJQUFJO1FBRUosSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFHO1lBQ2pILEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN4QixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7Ozs7SUFHRCxLQUFLLENBQUMsS0FBVTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2YsT0FBTztTQUNWO1FBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtZQUN0QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDMUI7UUFDRCxpQkFBaUI7UUFDakIsSUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7WUFDcEIsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxFQUNyRDtZQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckI7SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNoQjtRQUVELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQzdCO0lBQ0wsQ0FBQzs7Ozs7O0lBRUQsS0FBSyxDQUFDLENBQWMsRUFBRSxhQUFhLEdBQUcsS0FBSztRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxFQUFFO1lBQ3hCLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN2QjtRQUVELElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDckMsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3RELElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ0osT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFDRCxnQkFBZ0I7WUFDaEIsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQ3RCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUNyQixLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDNUMsQ0FBQztZQUNGLFVBQVU7OztZQUFDLEdBQUcsRUFBRTtnQkFDWixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztnQkFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFFM0IsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksSUFBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sRUFBRTtvQkFDdkYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzlEO2dCQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ25FO2dCQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqQyxDQUFDLEdBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRCxNQUFNO1FBQ1YsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsUUFBUTs7Y0FDRSxVQUFVLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7O2NBQ3pELFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzs7Y0FFekQsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUM7O2NBQy9ELFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1FBRXBFLGdFQUFnRTtRQUNoRSw4REFBOEQ7UUFFOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxHQUFHLFVBQVUsSUFBSSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLFNBQVMsSUFBSSxDQUFDLENBQUM7O1lBRWpGLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFO1FBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDekIsYUFBYSxHQUFHLGFBQWEsR0FBRyxFQUFFLENBQUM7U0FDdEM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQ25CLFNBQVMsRUFDVCxRQUFRLEVBQ1IsYUFBYSxHQUFHLElBQUksQ0FDdkIsQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFFN0UsVUFBVTs7O1FBQUMsR0FBRyxFQUFFOztrQkFDTixTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFO2tCQUNuQyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxHQUFHLFNBQVM7WUFDcEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFHLGNBQWMsRUFBRyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ25ILENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7O0lBRUQsTUFBTSxDQUFDLENBQVMsRUFBRSxDQUFTOztjQUNqQixRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQztRQUNyRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkYsbURBQW1EO1FBQ25ELG9EQUFvRDtRQUVwRCxtRUFBbUU7UUFDbkUsbUVBQW1FO1FBQ25FLHdGQUF3RjtRQUN4Rix3RkFBd0Y7UUFHeEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJO1FBQzdCLElBQUksZ0JBQWdCLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNuQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ3hDO1FBQ0QsMEhBQTBIO1FBQzFILDRIQUE0SDtRQUU1SCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUU3QyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDOztjQUN4QixRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQztRQUNyRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxLQUFhLEVBQUUsTUFBYztRQUNoQyxJQUFJLEtBQUssRUFBRTtZQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUM3QjtRQUVELElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQy9COztjQUVLLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDO1FBQ3JFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLEVBQU87UUFDWiwyQ0FBMkM7UUFDM0MsZ0RBQWdEO1FBQ2hELGlEQUFpRDtRQUNqRCx1REFBdUQ7UUFDdkQseURBQXlEO1FBRXpELCtDQUErQztRQUMvQyx1REFBdUQ7UUFDdkQsbURBQW1EO1FBQ25ELG9EQUFvRDtRQUNwRCxrREFBa0Q7SUFDdEQsQ0FBQzs7OztJQUVELFlBQVk7UUFDUixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7Y0FFYixFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxFQUFFOztjQUMzQixFQUFFLEdBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxFQUFFO1FBRWxDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQy9FLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRW5GLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUMxQjtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUMzQjtRQUdELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7O2NBQ3ZCLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDO1FBQ3JFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Ozs7SUFFRCxnQkFBZ0I7UUFDWixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdkI7YUFBTTtZQUNILElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNwQjtRQUNELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsSUFBUztRQUNoQiw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7O2NBQ2hDLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Y0FDbkMsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxTQUFTO1FBQ3BFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxtQkFBTSxJQUFJLENBQUMsSUFBSSxFQUFLLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxFQUFHLENBQUM7SUFDaEYsQ0FBQzs7Ozs7SUFLRCxhQUFhO1FBQ1QsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBQztZQUN0QyxJQUFJLENBQUMsVUFBVSxHQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUM7YUFBSTtZQUNELElBQUksQ0FBQyxVQUFVLEdBQUMsS0FBSyxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQzs7Ozs7SUFDRCxrQkFBa0IsQ0FBQyxNQUFNO1FBQ3JCLElBQUcsSUFBSSxDQUFDLFVBQVUsRUFBQzs7Z0JBQ1gsT0FBTyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYTs7a0JBQzNCLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQztZQUN2RCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFBLENBQUMsQ0FBQSxNQUFNLENBQUEsQ0FBQyxDQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFFLENBQUM7U0FDcEY7SUFDTCxDQUFDOzs7WUE1aEJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFFWDtnQkFDQyxJQUFJLEVBQUU7b0JBQ0YsS0FBSyxFQUFFLG9CQUFvQjtvQkFDM0IsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsUUFBUSxFQUFFLElBQUk7b0JBQ2QsbUJBQW1CLEVBQUUsTUFBTTtpQkFDOUI7YUFDSjs7OztZQXRGRyxZQUFZO1lBWkQsVUFBVTtZQUNiLFNBQVM7WUFRWixZQUFZOzs7cUJBb0doQixLQUFLO3VCQWNMLFNBQVMsU0FBQyx5QkFBeUI7MEJBQ25DLFNBQVMsU0FBQyxRQUFRO3FCQUdsQixNQUFNO3FCQUNOLE1BQU07c0JBQ04sTUFBTTtzQkFFTixXQUFXLFNBQUMsSUFBSTtzQkFFaEIsWUFBWSxTQUFDLG9CQUFvQjtzQkF1S2pDLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7b0JBOEJoQyxZQUFZLFNBQUMsb0JBQW9CLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUF0TzlDLHlDQUFxQjs7SUFDckIsMENBQWdCOztJQUNoQix3Q0FBYzs7SUFDZCw2Q0FBb0I7O0lBQ3BCLGlEQUErQjs7SUFDL0IsNkNBQW1COztJQUNuQiw0Q0FBMkI7O0lBRTNCLDZDQUFpQjs7Ozs7SUFPakIsZ0RBQThCOzs7OztJQUM5QixnREFBOEI7Ozs7O0lBQzlCLGlEQUErQjs7Ozs7SUFFL0IsNENBQTBCOzs7OztJQUMxQiw2Q0FBMkI7O0lBQzNCLHdDQUFjOztJQUVkLDJDQUEwRTs7SUFDMUUsOENBQTZDOztJQUM3QyxnREFBMkI7O0lBRTNCLHlDQUFzQzs7SUFDdEMseUNBQXNDOztJQUN0QywwQ0FBdUM7O0lBRXZDLDBDQUFtRTs7SUFFbkUsMENBQTZFOztJQUU3RSxzREFBeUI7Ozs7O0lBQ3pCLHFEQUFtQzs7Ozs7SUFDbkMsZ0RBQTJDOzs7OztJQUd2QyxxQ0FBd0I7Ozs7O0lBQ3hCLDRDQUE0Qjs7Ozs7SUFDNUIsNENBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBPbkRlc3Ryb3ksXHJcbiAgICBPbkluaXQsIFJlbmRlcmVyMiwgVmlld0NoaWxkLCBPdXRwdXQsXHJcbiAgICBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBBZnRlclZpZXdJbml0LCBJbnB1dCxcclxuICAgIE5nWm9uZSxcclxuICAgIFZpZXdDaGlsZHJlbixcclxuICAgIFF1ZXJ5TGlzdCxcclxuICAgIEhvc3RCaW5kaW5nXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFuZ3VsYXJEcmFnZ2FibGVEaXJlY3RpdmUgfSBmcm9tICdAZmFycmlzL3VpLWRyYWdnYWJsZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVJlc291cmNlVXJsIH0gZnJvbSBcIkBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXJcIjtcclxuaW1wb3J0IHtcclxuICAgIENMQVNTX05BTUUsIERJU01JU1NfUkVBU09OUyxcclxuICAgIE1vZGFsT3B0aW9ucywgVFJBTlNJVElPTl9EVVJBVElPTlNcclxufSBmcm9tICcuL21vZGFsLW9wdGlvbnMuY2xhc3MnO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJy4vYnMtbW9kYWwuc2VydmljZSc7XHJcbmltcG9ydCB7IGlzQnMzIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbC91dGlscyc7XHJcbmltcG9ydCB7IE1vZGFsQnV0dG9uRGlyZWN0aXZlIH0gZnJvbSAnLi9tb2RhbC1idXR0b24uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkZWxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdtb2RhbC1jb250YWluZXInLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgW2F0dHIuaWRdPVwibW9kYWxJRFwiXHJcblxyXG4gICAgICAgIFtuZ0RyYWdnYWJsZV09XCJjb25maWcuZHJhZ2dhYmxlXCJcclxuICAgICAgICBbbmdSZXNpemFibGVdPVwiY29uZmlnLnJlc2l6YWJsZVwiXHJcbiAgICAgICAgW3J6TWluV2lkdGhdPVwiY29uZmlnLm1pbldpZHRoXCJcclxuICAgICAgICBbcnpNYXhXaWR0aF09XCJjb25maWcubWF4V2lkdGhcIlxyXG4gICAgICAgIFtyek1pbkhlaWdodF09XCJjb25maWcubWluSGVpZ2h0XCJcclxuICAgICAgICBbcnpNYXhIZWlnaHRdPVwiY29uZmlnLm1heEhlaWdodFwiXHJcbiAgICAgICAgcnpIYW5kbGVzPVwiYWxsXCIgW2hhbmRsZV09XCJjb25maWcuc2hvd0hlYWRlciA/IGhlYWRlcjpkcmFnRWxcIlxyXG4gICAgICAgIChzdG9wcGVkKT1cImRyb3Bkb3duKCRldmVudClcIlxyXG4gICAgICAgIChyelN0b3ApPVwicmVzaXplU3RvcCgkZXZlbnQpXCJcclxuICAgICAgICBbaW5Cb3VuZHNdPVwidHJ1ZVwiIFtib3VuZHNdPVwiYm91bmRzRWxlbWVudFwiIFtyekNvbnRhaW5tZW50XT1cImJvdW5kc0VsZW1lbnRcIiBbaXNGaXhlZF09XCJpc01vZGVsZXNzXCJcclxuICAgICAgICBbY2xhc3NdPVwiJ21vZGFsLWRpYWxvZycgKyAoY29uZmlnLmNsYXNzID8gJyAnICsgY29uZmlnLmNsYXNzIDogJycpXCIgcm9sZT1cImRvY3VtZW50XCJcclxuICAgICAgICBbc3R5bGUud2lkdGhdPVwiY29uZmlnLndpZHRoICsgJ3B4J1wiIFtzdHlsZS5oZWlnaHRdPVwiY29uZmlnLmZpdENvbnRlbnQ/J2F1dG8nOihjb25maWcuaGVpZ2h0ICsgJ3B4JylcIlxyXG4gICAgICAgIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlO3RvcDogNTAlO2xlZnQ6IDUwJTtcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiIFtuZ0NsYXNzXT1cInsnbW9kYWwtY29udGVudC0taGFzLWhlYWRlcic6Y29uZmlnLnNob3dIZWFkZXJ9XCI+XHJcbiAgICAgICAgICAgIDxkaXYgI2hlYWRlciBjbGFzcz1cIm1vZGFsLWhlYWRlclwiIFtzdHlsZS5kaXNwbGF5XT1cImNvbmZpZy5zaG93SGVhZGVyID8gJyc6ICdub25lJ1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJjb25maWcuaWNvbkNsc1wiIFtjbGFzc109XCJjb25maWcuaWNvbkNsc1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiA4cHhcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtb2RhbC10aXRsZS1sYWJlbFwiPnt7IGNvbmZpZy50aXRsZSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAqbmdJZj1cImNvbmZpZy5zaG93TWluQnV0dG9uXCIgY2xhc3M9XCJmLWJ0bi1pY29uIGYtYmFyZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmLWljb24gbW9kYWxfbWluaW1pemVcIj48L3NwYW4+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpICpuZ0lmPVwiY29uZmlnLnNob3dNYXhCdXR0b25cIiAoY2xpY2spPVwiY2hhbmdlRGlhbG9nU2l6ZSgpXCIgY2xhc3M9XCJmLWJ0bi1pY29uIGYtYmFyZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmLWljb24gbW9kYWxfbWF4aW1pemVcIiBbY2xhc3MubW9kYWxyZXZlcnRdPVwiaXNNYXhcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSAqbmdJZj1cImNvbmZpZy5zaG93Q2xvc2VCdXR0b25cIiAoY2xpY2spPVwiY2xvc2UoJGV2ZW50LCB0cnVlKVwiIGNsYXNzPVwiZi1idG4taWNvbiBmLWJhcmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImYtaWNvbiBtb2RhbF9jbG9zZVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgI2RyYWdFbCBjbGFzcz1cImYtdXRpbHMtYWJzb2x1dGUtYWxsXCIgc3R5bGU9XCJoZWlnaHQ6MTBweDt6LWluZGV4OiAxO1wiIFtzdHlsZS5kaXNwbGF5XT1cImNvbmZpZy5zaG93SGVhZGVyID8gJ25vbmUnOiAnJ1wiPjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiIFtjbGFzcy5mLXV0aWxzLWZsZXgtY29sdW1uXT1cImRpYWxvZ1R5cGUgPT09ICdpZnJhbWUnXCIgICBbZi1hcmVhLXJlc3BvbnNlXT1cImNvbmZpZy5hcmVhUmVzcG9uc2VcIj5cclxuICAgICAgICAgICAgICAgIDxwZXJmZWN0LXNjcm9sbGJhciBbY29uZmlnXT1cInt9XCIgW2Rpc2FibGVkXT1cIiFjb25maWcuZW5hYmxlU2Nyb2xsfHxjb25maWcuZml0Q29udGVudFwiICAqbmdJZj1cIiFkaWFsb2dUeXBlIHx8IGRpYWxvZ1R5cGUgPT09ICdkZWZhdWx0J1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxuZy1jb250ZW50ID48L25nLWNvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICA8L3BlcmZlY3Qtc2Nyb2xsYmFyPlxyXG4gICAgICAgICAgICAgICAgPGlmcmFtZSAqbmdJZj1cImRpYWxvZ1R5cGUgPT09ICdpZnJhbWUnXCIgY2xhc3M9XCJmLXV0aWxzLWZpbGxcIiB3aWR0aD1cIjEwMCVcIiBmcmFtZWJvcmRlcj1cIjBcIiBbc3JjXT1cImlmcmFtZVNyY1wiPjwvaWZyYW1lPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgW3N0eWxlLnRleHRBbGlnbl09XCJjb25maWcuYnV0dG9uQWxpZ25cIiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiIFtuZ1N0eWxlXT1cImJ1aWxkRm9vdGVyU3R5bGVzKClcIiAqbmdJZj1cImNvbmZpZy5zaG93QnV0dG9ucyAmJiBjb25maWcuYnV0dG9uc1wiPlxyXG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciBbbmdUZW1wbGF0ZU91dGxldF09XCJ1c2VCdXR0b25zVGVtcGxhdGUoKSA/IGNvbmZpZy5idXR0b25zIDogZGVmYXVsdEJ1dHRvblJlZlwiPjwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG5cclxuICAgIDxuZy10ZW1wbGF0ZSAjZGVmYXVsdEJ1dHRvblJlZj5cclxuXHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgYnRuIG9mIGNvbmZpZy5idXR0b25zOyBsYXN0IGFzIGlzTGFzdFwiPlxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBtb2RhbC1idXR0b24gICpuZ0lmPVwiYnRuLmRpc3BsYXkgPT09IHVuZGVmaW5lZCAmJiBidG4udGlwc0VuYWJsZSA9PT0gdW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzc109XCJidG4uY2xzXCJcclxuICAgICAgICAgICAgICAgIChjbGljayk9XCJidG4uaGFuZGxlICYmIGJ0bi5oYW5kbGUoJGV2ZW50KSBcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJidG4uaWNvbkNsc1wiICpuZ0lmPVwiYnRuLmljb25DbHNcIj48L3NwYW4+IHt7IGJ0bi50ZXh0IH19XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgbW9kYWwtYnV0dG9uICAqbmdJZj1cImJ0bi5kaXNwbGF5ICE9PSB1bmRlZmluZWQgfHwgYnRuLnRpcHNFbmFibGUgIT09IHVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICBbY2xhc3NdPVwiYnRuLmNsc1wiXHJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwiYnRuLmhhbmRsZSAmJiBidG4uaGFuZGxlKCRldmVudCkgXCIgXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUuZGlzcGxheV09XCIoYnRuLmRpc3BsYXkgPT09IHRydWUgfHwgYnRuLmRpc3BsYXkgPT09IHVuZGVmaW5lZCkgPyAnJyA6ICdub25lJ1wiXHJcbiAgICAgICAgICAgICAgICBbZmFycmlzVG9vbHRpcF09XCJidG4/LnRpcHNFbmFibGVcIiBbcGxhY2VtZW50XT1cIid0b3AnXCIgW2RlbGF5XT1cIjUwMFwiIFtjb250ZW50XT1cImJ0bj8udGlwc1RleHRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJidG4uaWNvbkNsc1wiICpuZ0lmPVwiYnRuLmljb25DbHNcIj48L3NwYW4+IHt7IGJ0bi50ZXh0IH19XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICA8L25nLXRlbXBsYXRlPlxyXG4gIGAsXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgY2xhc3M6ICdtb2RhbCBmYXJyaXMtbW9kYWwnLFxyXG4gICAgICAgIHJvbGU6ICdkaWFsb2cnLFxyXG4gICAgICAgIHRhYmluZGV4OiAnLTEnLFxyXG4gICAgICAgICdbYXR0ci5hcmlhLW1vZGFsXSc6ICd0cnVlJ1xyXG4gICAgfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9kYWxDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBjb25maWc6IE1vZGFsT3B0aW9ucztcclxuICAgIGlzU2hvd24gPSBmYWxzZTtcclxuICAgIGxldmVsOiBudW1iZXI7XHJcbiAgICBpc0FuaW1hdGVkOiBib29sZWFuO1xyXG4gICAgYnNNb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlO1xyXG4gICAgZGlhbG9nVHlwZTogc3RyaW5nO1xyXG4gICAgaWZyYW1lU3JjOiBTYWZlUmVzb3VyY2VVcmw7XHJcbiAgICAvLyDmmK/lkKbpnZ7mqKHmgIHnqpflj6NcclxuICAgIGlzTW9kZWxlc3M9ZmFsc2U7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHNldCBpZnJhbWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLnNhbml0aXplcikge1xyXG4gICAgICAgICAgICB0aGlzLmlmcmFtZVNyYyA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBpc01vZGFsSGlkaW5nID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIG9yaWdpbmFsV2lkdGg6IG51bWJlcjsgIC8vIOiusOW9leWOn+Wni+eahOWuveW6plxyXG4gICAgcHJpdmF0ZSBvcmlnaW5hbEhlaWdodDogbnVtYmVyOyAvLyDorrDlvZXljp/lp4vnmoTpq5jluqZcclxuXHJcbiAgICBwcml2YXRlIHByZXZXaWR0aDogbnVtYmVyOyAvLyDorrDlvZXkuIrmrKHnmoTlrr3luqZcclxuICAgIHByaXZhdGUgcHJldkhlaWdodDogbnVtYmVyOyAvLyDorrDlvZXkuIrmrKHnmoTpq5jluqZcclxuICAgIGlzTWF4ID0gZmFsc2U7XHJcblxyXG4gICAgQFZpZXdDaGlsZChBbmd1bGFyRHJhZ2dhYmxlRGlyZWN0aXZlKSBkcmFnZ2JhcjogQW5ndWxhckRyYWdnYWJsZURpcmVjdGl2ZTtcclxuICAgIEBWaWV3Q2hpbGQoJ2hlYWRlcicpIG1vZGFsSGVhZGVyOiBFbGVtZW50UmVmO1xyXG4gICAgYm91bmRzRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgQE91dHB1dCgpIGNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBvcGVuZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgcmVzaXplZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2lkJykgbW9kYWxJRCA9IGBNT0RBTElEXyR7RGF0ZS5ub3coKS50b1ByZWNpc2lvbigpfWA7XHJcblxyXG4gICAgQFZpZXdDaGlsZHJlbihNb2RhbEJ1dHRvbkRpcmVjdGl2ZSkgYnV0dG9uczogUXVlcnlMaXN0PE1vZGFsQnV0dG9uRGlyZWN0aXZlPjtcclxuXHJcbiAgICBkbGdIZWFkZXJMaW5lSGVpZ2h0OiBhbnk7XHJcbiAgICBwcml2YXRlIF93aW5kb3dSZXNpemVUb01heCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSB3aW5kb3dSZXNpemUkOiBTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgb3B0aW9uczogTW9kYWxPcHRpb25zLFxyXG4gICAgICAgIHByb3RlY3RlZCBlbDogRWxlbWVudFJlZixcclxuICAgICAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXJcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5idXR0b25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmJ1dHRvbnMgPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+WPlua2iCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xzOiAnYnRuIGJ0bi1saWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNsczogJ2staWNvbiBrLWktY2xvc2UnLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn56Gu5a6aJyxcclxuICAgICAgICAgICAgICAgICAgICBjbHM6ICdidG4gYnRuLXByaW1hcnknLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb25DbHM6ICdrLWljb24gay1pLWNoZWNrJyxcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGU6ICgpID0+IHsgYWxlcnQoJ+WlvSjvvaHvvaXiiIDvvaUp776J776e5Zeo5ZOfISEnKTsgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldElzTW9kZWxlc3MoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZih0aGlzLmlzTW9kZWxlc3Mpe1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzmmK/pnZ7mqKHmgIHnqpflj6NcclxuICAgICAgICAgICAgdGhpcy5ib3VuZHNFbGVtZW50PW51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2YtbW9kYWwtaXMtbW9kZWxlc3MnKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5ib3VuZHNFbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIH0gICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmZpdENvbnRlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZi1tb2RhbC1maXRDb250ZW50Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgQ0xBU1NfTkFNRS5GQURFKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmlzU2hvd24gPSB0cnVlOyAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgaXNCczMoKSA/IENMQVNTX05BTUUuSU4gOiBDTEFTU19OQU1FLlNIT1dcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYodGhpcy5pc01vZGVsZXNzKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3Bvc2l0aW9uJywgJ3N0YXRpYycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmZpdENvbnRlbnQgJiYgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKCdmLW1vZGFsLWZpdENvbnRlbnQtc2Nyb2xsJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbExlbiA9IHRoaXMuYnNNb2RhbFNlcnZpY2UuZ2V0TW9kYWxzQ291bnQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RhbExlbiA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnNNb2RhbFNlcnZpY2UuY2hlY2tTY3JvbGxiYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJzTW9kYWxTZXJ2aWNlLnNldFNjcm9sbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FLk9QRU4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3MoZG9jdW1lbnQuYm9keSwgQ0xBU1NfTkFNRS5PUEVOKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9wZW5lZC5lbWl0KHsgbW9kYWw6IHRoaXMgfSk7XHJcbiAgICAgICAgfSwgdGhpcy5pc0FuaW1hdGVkID8gVFJBTlNJVElPTl9EVVJBVElPTlMuQkFDS0RST1AgOiAwKTtcclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZWwubmF0aXZlRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGxnSGVhZGVyTGluZUhlaWdodCA9IHRoaXMuZ2V0RGlhbG9nSGVhZGVyTGluZUhlaWdodCgpICsgJ3B4JztcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gQ2FsbGVkIGFmdGVyIG5nQWZ0ZXJDb250ZW50SW5pdCB3aGVuIHRoZSBjb21wb25lbnQncyB2aWV3IGhhcyBiZWVuIGluaXRpYWxpemVkLiBBcHBsaWVzIHRvIGNvbXBvbmVudHMgb25seS5cclxuICAgICAgICAvLyBBZGQgJ2ltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCcgdG8gdGhlIGNsYXNzLlxyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICAvLyDlpoLmnpzlhoXlrrnpgILlupTlrr3luqZcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuZml0Q29udGVudCkge1xyXG4gICAgICAgICAgICBsZXQgaW5pdEVsUmVjdCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgbGV0IGluaXRCb2R5U2l6ZSA9IHRoaXMuZ2V0Q29udGFpbmVyU2l6ZSgpO1xyXG4gICAgICAgICAgICBpZiAoaW5pdEVsUmVjdC5oZWlnaHQgPCBpbml0Qm9keVNpemUuaGVpZ2h0ICsgMzApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2YtbW9kYWwtZml0Q29udGVudC1zY3JvbGwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbEhlaWdodCA9IHRoaXMuY29uZmlnLmhlaWdodDtcclxuICAgICAgICB0aGlzLm9yaWdpbmFsV2lkdGggPSB0aGlzLmNvbmZpZy53aWR0aDtcclxuXHJcbiAgICAgICAgdGhpcy53aW5kb3dSZXNpemUkID0gZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpLnBpcGUoXHJcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSg1MClcclxuICAgICAgICApLnN1YnNjcmliZSgoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpbldpZHRoID0gIHdpbmRvdy5pbm5lcldpZHRoIC0yMDtcclxuICAgICAgICAgICAgY29uc3Qgd2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gMjA7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcud2lkdGggPD0gd2luV2lkdGggJiYgdGhpcy5jb25maWcuaGVpZ2h0IDw9IHdpbkhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dpbmRvd1Jlc2l6ZVRvTWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlcnREaWFsb2coKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93aW5kb3dSZXNpemVUb01heCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc01heCkgeyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhEaWFsb2coZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc01heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dpbmRvd1Jlc2l6ZVRvTWF4ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heERpYWxvZygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heERpYWxvZyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudG9DZW50ZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0RGxnRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1kaWFsb2cnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldERpYWxvZ0hlYWRlckxpbmVIZWlnaHQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNob3dIZWFkZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kYWxIZWFkZXJTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm1vZGFsSGVhZGVyLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBwYWRkaW5nVG9wID0gcGFyc2VJbnQobW9kYWxIZWFkZXJTdHlsZXMucGFkZGluZ1RvcC5yZXBsYWNlKCdweCcsICcnKSwgMTApO1xyXG4gICAgICAgICAgICBjb25zdCBwYWRkaW5nQm90dG9tID0gcGFyc2VJbnQobW9kYWxIZWFkZXJTdHlsZXMucGFkZGluZ0JvdHRvbS5yZXBsYWNlKCdweCcsICcnKSwgMTApO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZGlhbG9nSGVhZGVySGVpZ2h0IC0gcGFkZGluZ1RvcCAtIHBhZGRpbmdCb3R0b207XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOiOt+WPluWGheWuueWMuuWfn+eahOWwuuWvuFxyXG4gICAgZ2V0Q29udGFpbmVyU2l6ZSgpIHtcclxuICAgICAgICBjb25zdCBib2R5VGFyZ2V0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1ib2R5Jyk7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gYm9keVRhcmdldC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBib2R5VGFyZ2V0Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcclxuICAgIH1cclxuXHJcbiAgICBidWlsZEZvb3RlclN0eWxlcygpIHtcclxuICAgICAgICBsZXQgc3R5bGVzID0ge307XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5kaWFsb2dGb290ZXJTdHlsZXMpIHtcclxuICAgICAgICAgICAgc3R5bGVzID0gT2JqZWN0LmFzc2lnbih7fSwgc3R5bGVzLCB0aGlzLmNvbmZpZy5kaWFsb2dGb290ZXJTdHlsZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcclxuICAgIH1cclxuXHJcbiAgICB1c2VCdXR0b25zVGVtcGxhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmJ1dHRvbnMgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgICBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgdGFnID0gZXZlbnQudGFyZ2V0IGFzIGFueTtcclxuXHJcbiAgICAgICAgLy8gaWYgKHRhZy5sb2NhbE5hbWUgPT09ICdsYWJlbCcpIHtcclxuICAgICAgICAvLyAgICAgaWYgKHRhZy5jbGFzc05hbWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIGNvbnN0IGNsc0xpc3QgPSB0YWcuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgLy8gICAgICAgICBpZiAoXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgY2xzTGlzdC5pbmRleE9mKCdrLXJhZGlvLWxhYmVsJykgPiAtMSB8fFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIGNsc0xpc3QuaW5kZXhPZignay1jaGVja2JveC1sYWJlbCcpID4gLTEgfHxcclxuICAgICAgICAvLyAgICAgICAgICAgICBjbHNMaXN0LmluZGV4T2YoJ2N1c3RvbS1jb250cm9sLWxhYmVsJykgPiAtMVxyXG4gICAgICAgIC8vICAgICAgICAgKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyBpZiAodGFnLmxvY2FsTmFtZSA9PT0gJ2lucHV0JyAmJiAodGFnLnR5cGUgPT09ICdjaGVja2JveCcgfHwgdGFnLnR5cGUgPT09ICdyYWRpbycgfHwgdGFnLnR5cGUgPT09ICdmaWxlJykpIHtcclxuICAgICAgICAvLyAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlnbm9yZUJhY2tkcm9wQ2xpY2sgfHwgdGhpcy5jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnIHx8IGV2ZW50LnRhcmdldCAhPT0gdGhpcy5lbC5uYXRpdmVFbGVtZW50ICkge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ic01vZGFsU2VydmljZS5zZXREaXNtaXNzUmVhc29uKERJU01JU1NfUkVBU09OUy5CQUNLUkRPUCk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzprZXlkb3duLmVzYycsIFsnJGV2ZW50J10pXHJcbiAgICBvbkVzYyhldmVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzU2hvd24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKuS7juacgOWQjuS4gOS4queql+WPo+W8gOWni+WFs+mXrSAqL1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5jb25maWcua2V5Ym9hcmQgJiZcclxuICAgICAgICAgICAgdGhpcy5sZXZlbCA9PT0gdGhpcy5ic01vZGFsU2VydmljZS5nZXRNb2RhbHNDb3VudCgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnNNb2RhbFNlcnZpY2Uuc2V0RGlzbWlzc1JlYXNvbihESVNNSVNTX1JFQVNPTlMuRVNDKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZShldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2hvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMud2luZG93UmVzaXplJCkge1xyXG4gICAgICAgICAgICB0aGlzLndpbmRvd1Jlc2l6ZSQudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3dSZXNpemUkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoZT86IE1vdXNlRXZlbnQsIGlzQ2xvc2VCdXR0b24gPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChlICYmIGUuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc01vZGFsSGlkaW5nIHx8ICF0aGlzLmlzU2hvd24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcuYmVmb3JlQ2xvc2UodGhpcywgeyBldmVudDogZSB9KS5zdWJzY3JpYmUociA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOabtOaWsOacjeWKoeS4remdnuaooeaAgeeql+WPo+eahOS4quaVsFxyXG4gICAgICAgICAgICB0aGlzLmJzTW9kYWxTZXJ2aWNlLmNsb3NlVXBkYXRlTW9kZWxlc3NDb3VudEJ5TW9kYWwodGhpcy5pc01vZGVsZXNzKTtcclxuICAgICAgICAgICAgdGhpcy5pc01vZGFsSGlkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICBpc0JzMygpID8gQ0xBU1NfTkFNRS5JTiA6IENMQVNTX05BTUUuU0hPV1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNTaG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ic01vZGFsU2VydmljZS5oaWRlKHRoaXMubGV2ZWwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc01vZGFsSGlkaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50ICYmIGRvY3VtZW50LmJvZHkgJiYgICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmFycmlzLW1vZGFsLnNob3cnKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCBDTEFTU19OQU1FLk9QRU4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5jbG9zZWQoaXNDbG9zZUJ1dHRvbiwgeyBtb2RhbFJlZjogdGhpcywgZXZlbnQ6IGUgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlZC5lbWl0KHRoaXMubGV2ZWwpO1xyXG4gICAgICAgICAgICB9LCB0aGlzLmlzQW5pbWF0ZWQgPyBUUkFOU0lUSU9OX0RVUkFUSU9OUy5NT0RBTCA6IDApO1xyXG4gICAgICAgICAgICAvLyB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0b0NlbnRlcigpIHtcclxuICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gTnVtYmVyLnBhcnNlSW50KCcnICsgLXRoaXMuY29uZmlnLndpZHRoIC8gMik7XHJcbiAgICAgICAgY29uc3QgbWFyZ2luVG9wID0gTnVtYmVyLnBhcnNlSW50KCcnICsgLXRoaXMuY29uZmlnLmhlaWdodCAvIDIpO1xyXG5cclxuICAgICAgICBjb25zdCBkaWFsb2dFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtZGlhbG9nJyk7XHJcbiAgICAgICAgY29uc3QgY29udGVudEVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1ib2R5Jyk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGRpYWxvZ0VsLCAnbWFyZ2luLWxlZnQnLCBtYXJnaW5MZWZ0KTtcclxuICAgICAgICAvLyB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShkaWFsb2dFbCwgJ21hcmdpbi10b3AnLCBtYXJnaW5Ub3ApO1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShkaWFsb2dFbCwgJ2xlZnQnLCBgJHt3aW5kb3cuaW5uZXJXaWR0aCAvIDIgKyBtYXJnaW5MZWZ0fXB4YCk7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoZGlhbG9nRWwsICd0b3AnLCAgYCR7d2luZG93LmlubmVySGVpZ2h0IC8gMiArIG1hcmdpblRvcH1weGApO1xyXG5cclxuICAgICAgICBsZXQgY29udGVudEhlaWdodCA9IHRoaXMuY29uZmlnLmhlaWdodCAtIDM4O1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5zaG93QnV0dG9ucykge1xyXG4gICAgICAgICAgICBjb250ZW50SGVpZ2h0ID0gY29udGVudEhlaWdodCAtIDUwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmZpdENvbnRlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoXHJcbiAgICAgICAgICAgICAgICBjb250ZW50RWwsXHJcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JyxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRIZWlnaHQgKyAncHgnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGNvbnRlbnRFbCwgJ292ZXJmbG93JywgJ2hpZGRlbicpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGRpYWxvZ0VsLCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpYCk7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmdldENvbnRhaW5lclNpemUoKTtcclxuICAgICAgICAgICAgY29uc3QgeyB3aWR0aDogY29udGFpbmVyV2lkdGgsIGhlaWdodDogY29udGFpbmVySGVpZ2h0IH0gPSBjb250YWluZXI7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplZC5lbWl0KHsgd2lkdGg6IHRoaXMuY29uZmlnLndpZHRoLCBoZWlnaHQ6IHRoaXMuY29uZmlnLmhlaWdodCwgIGNvbnRhaW5lcldpZHRoLCAgY29udGFpbmVySGVpZ2h0IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdmVUbyh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZ0VsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1kaWFsb2cnKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShkaWFsb2dFbCwgJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgMHB4KWApO1xyXG4gICAgICAgIC8vIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGRpYWxvZ0VsLCAndG9wJywgJzUwJScpO1xyXG4gICAgICAgIC8vIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGRpYWxvZ0VsLCAnbGVmdCcsICc1MCUnKTtcclxuXHJcbiAgICAgICAgLy8gY29uc3QgbWFyZ2luTGVmdCA9IE51bWJlci5wYXJzZUludCgnJyArIC10aGlzLmNvbmZpZy53aWR0aCAvIDIpO1xyXG4gICAgICAgIC8vIGNvbnN0IG1hcmdpblRvcCA9IE51bWJlci5wYXJzZUludCgnJyArIC10aGlzLmNvbmZpZy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAvLyB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShkaWFsb2dFbCwgJ2xlZnQnLCBgJHt3aW5kb3cuaW5uZXJXaWR0aCAvIDIgKyBtYXJnaW5MZWZ0fXB4YCk7XHJcbiAgICAgICAgLy8gdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoZGlhbG9nRWwsICd0b3AnLCAgYCR7d2luZG93LmlubmVySGVpZ2h0IC8gMiArIG1hcmdpblRvcH1weGApO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5kcmFnZ2Jhci5wb3NpdGlvbiA9IHsgeCwgeSB9O1xyXG4gICAgICAgIHRoaXMuZHJhZ2diYXIucmVzZXRQb3NpdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIG1heERpYWxvZyhyZW1lbWJlclByZXZTaXplID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChyZW1lbWJlclByZXZTaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJldldpZHRoID0gdGhpcy5jb25maWcud2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMucHJldkhlaWdodCA9IHRoaXMuY29uZmlnLmhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcy5jb25maWcud2lkdGggPSAoZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudD9kb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudClbJ2NsaWVudFdpZHRoJ10gLSAyMDtcclxuICAgICAgICAvLyB0aGlzLmNvbmZpZy5oZWlnaHQgPSAoZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudD9kb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudClbJ2NsaWVudEhlaWdodCddIC0gMjA7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLndpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSAyMDtcclxuICAgICAgICB0aGlzLmNvbmZpZy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAyMDtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcuZHJhZ2dhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb25maWcucmVzaXphYmxlID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgZGlhbG9nRWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWRpYWxvZycpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKGRpYWxvZ0VsLCAnbW9kZWwtZGlhbG9nLW1heGltaXplJyk7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoZGlhbG9nRWwsICd0b3AnLCAnNTAlJyk7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoZGlhbG9nRWwsICdsZWZ0JywgJzUwJScpO1xyXG4gICAgICAgIHRoaXMuaXNNYXggPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudG9DZW50ZXIoKTtcclxuICAgICAgICB0aGlzLm1vdmVUbygwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAod2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChoZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGlhbG9nRWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWRpYWxvZycpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKGRpYWxvZ0VsLCAnbW9kZWwtZGlhbG9nLW1heGltaXplJyk7XHJcbiAgICAgICAgdGhpcy50b0NlbnRlcigpO1xyXG4gICAgICAgIHRoaXMuZHJhZ2diYXIucmVzZXRQb3NpdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyb3Bkb3duKGVsOiBhbnkpIHtcclxuICAgICAgICAvLyBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgLy8gdGhpcy5fcmVuZGVyZXIucmVtb3ZlU3R5bGUoZWwsICdtYXJnaW4tdG9wJyk7XHJcbiAgICAgICAgLy8gdGhpcy5fcmVuZGVyZXIucmVtb3ZlU3R5bGUoZWwsICdtYXJnaW4tbGVmdCcpO1xyXG4gICAgICAgIC8vIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGVsLCAndG9wJywgYCR7cmVjdC50b3B9cHhgKTtcclxuICAgICAgICAvLyB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShlbCwgJ2xlZnQnLCBgJHtyZWN0LmxlZnR9cHhgKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5fcmVuZGVyZXIucmVtb3ZlU3R5bGUoZWwsICd0cmFuc2Zvcm0nKTtcclxuICAgICAgICAvLyB0aGlzLl9yZW5kZXJlci5yZW1vdmVTdHlsZShlbCwgJy13ZWJraXQtdHJhbnNmb3JtJyk7XHJcbiAgICAgICAgLy8gdGhpcy5fcmVuZGVyZXIucmVtb3ZlU3R5bGUoZWwsICctbXMtdHJhbnNmb3JtJyk7XHJcbiAgICAgICAgLy8gdGhpcy5fcmVuZGVyZXIucmVtb3ZlU3R5bGUoZWwsICctbW96LXRyYW5zZm9ybScpO1xyXG4gICAgICAgIC8vIHRoaXMuX3JlbmRlcmVyLnJlbW92ZVN0eWxlKGVsLCAnLW8tdHJhbnNmb3JtJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV2ZXJ0RGlhbG9nKCkge1xyXG4gICAgICAgIHRoaXMuaXNNYXggPSBmYWxzZTtcclxuXHJcbiAgICAgICAgY29uc3Qgd3cgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIDIwO1xyXG4gICAgICAgIGNvbnN0IHdoID0gd2luZG93LmlubmVySGVpZ2h0IC0gMjBcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcud2lkdGggPSB0aGlzLnByZXZXaWR0aCA9PSB3dyA/IHRoaXMub3JpZ2luYWxXaWR0aCA6IHRoaXMucHJldldpZHRoO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLmhlaWdodCA9IHRoaXMucHJldkhlaWdodCA9PSB3aCA/IHRoaXMub3JpZ2luYWxIZWlnaHQgOiB0aGlzLnByZXZIZWlnaHQ7XHJcbiAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5jb25maWcud2lkdGggPiB3dykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy53aWR0aCA9IHd3O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmhlaWdodCA+IHdoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmhlaWdodCA9IHdoO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnLmRyYWdnYWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jb25maWcucmVzaXphYmxlID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBkaWFsb2dFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtZGlhbG9nJyk7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3MoZGlhbG9nRWwsICdtb2RlbC1kaWFsb2ctbWF4aW1pemUnKTtcclxuICAgICAgICB0aGlzLnRvQ2VudGVyKCk7XHJcbiAgICAgICAgdGhpcy5kcmFnZ2Jhci5yZXNldFBvc2l0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlRGlhbG9nU2l6ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc01heCkge1xyXG4gICAgICAgICAgICB0aGlzLnJldmVydERpYWxvZygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4RGlhbG9nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dpbmRvd1Jlc2l6ZVRvTWF4ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzaXplU3RvcChvcHRzOiBhbnkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygncmVzaXplU3RvcCcpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLndpZHRoID0gb3B0cy5zaXplLndpZHRoO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLmhlaWdodCA9IG9wdHMuc2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5nZXRDb250YWluZXJTaXplKCk7XHJcbiAgICAgICAgY29uc3QgeyB3aWR0aDogY29udGFpbmVyV2lkdGgsIGhlaWdodDogY29udGFpbmVySGVpZ2h0IH0gPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5yZXNpemVkLmVtaXQoeyAuLi5vcHRzLnNpemUsIC4uLnsgY29udGFpbmVyV2lkdGgsIGNvbnRhaW5lckhlaWdodCB9IH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKbpnZ7mqKHmgIFcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBzZXRJc01vZGVsZXNzKCl7ICAgICAgICBcclxuICAgICAgICBpZih0aGlzLmNvbmZpZy5oYXNPd25Qcm9wZXJ0eSgnbW9kZWxlc3MnKSl7XHJcbiAgICAgICAgICAgIHRoaXMuaXNNb2RlbGVzcz0gdGhpcy5jb25maWdbJ21vZGVsZXNzJ107XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuaXNNb2RlbGVzcz1mYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB1cGRhdGVEaWFsb2daaW5kZXgoekluZGV4KXtcclxuICAgICAgICBpZih0aGlzLmlzTW9kZWxlc3Mpe1xyXG4gICAgICAgICAgICBsZXQgbW9kYWxFbD10aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ0VsID0gbW9kYWxFbC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtZGlhbG9nJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGRpYWxvZ0VsLCAncG9zaXRpb24nLCAnZml4ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoZGlhbG9nRWwsICd6SW5kZXgnLCB6SW5kZXg/ekluZGV4Om1vZGFsRWwuc3R5bGUuekluZGV4ICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==