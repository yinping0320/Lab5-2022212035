/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Trigger } from "./trigger.class";
/**
 * @record
 */
export function ListenOptions() { }
if (false) {
    /** @type {?|undefined} */
    ListenOptions.prototype.target;
    /** @type {?|undefined} */
    ListenOptions.prototype.targets;
    /** @type {?|undefined} */
    ListenOptions.prototype.triggers;
    /** @type {?|undefined} */
    ListenOptions.prototype.outsideClick;
    /** @type {?|undefined} */
    ListenOptions.prototype.show;
    /** @type {?|undefined} */
    ListenOptions.prototype.hide;
    /** @type {?|undefined} */
    ListenOptions.prototype.toggle;
}
/** @type {?} */
const DEFAULT_ALIASES = {
    hover: ["mouseenter", "mouseleave"],
    focus: ["focusin", "focusout"],
};
/**
 * @param {?} triggers
 * @param {?=} aliases
 * @return {?}
 */
export function parseTriggers(triggers, aliases = DEFAULT_ALIASES) {
    /** @type {?} */
    const trimmedTriggers = (triggers || "").trim();
    if (trimmedTriggers.length === 0) {
        return [];
    }
    /** @type {?} */
    const parsedTriggers = trimmedTriggers
        .split(/\s+/)
        .map((/**
     * @param {?} trigger
     * @return {?}
     */
    (trigger) => trigger.split(":")))
        .map((/**
     * @param {?} triggerPair
     * @return {?}
     */
    (triggerPair) => {
        /** @type {?} */
        const alias = aliases[triggerPair[0]] || triggerPair;
        return new Trigger(alias[0], alias[1]);
    }));
    /** @type {?} */
    const manualTriggers = parsedTriggers.filter((/**
     * @param {?} triggerPair
     * @return {?}
     */
    (triggerPair) => triggerPair.isManual()));
    if (manualTriggers.length > 1) {
        throw new Error("Triggers parse error: only one manual trigger is allowed");
    }
    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
        throw new Error("Triggers parse error: manual trigger can't be mixed with other triggers");
    }
    return parsedTriggers;
}
/**
 * @param {?} renderer
 * @param {?} target
 * @param {?} triggers
 * @param {?} showFn
 * @param {?} hideFn
 * @param {?} toggleFn
 * @return {?}
 */
export function listenToTriggers(renderer, target, triggers, showFn, hideFn, toggleFn) {
    /** @type {?} */
    const parsedTriggers = parseTriggers(triggers);
    /** @type {?} */
    const listeners = [];
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return Function.prototype;
    }
    parsedTriggers.forEach((/**
     * @param {?} trigger
     * @return {?}
     */
    (trigger) => {
        if (trigger.open === trigger.close) {
            listeners.push(renderer.listen(target, trigger.open, toggleFn));
            return;
        }
        listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));
    }));
    return (/**
     * @return {?}
     */
    () => {
        listeners.forEach((/**
         * @param {?} unsubscribeFn
         * @return {?}
         */
        (unsubscribeFn) => unsubscribeFn()));
    });
}
/**
 * @param {?} renderer
 * @param {?} options
 * @return {?}
 */
export function listenToTriggersV2(renderer, options) {
    /** @type {?} */
    const parsedTriggers = parseTriggers(options.triggers);
    /** @type {?} */
    const target = options.target;
    // do nothing
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return Function.prototype;
    }
    // all listeners
    /** @type {?} */
    const listeners = [];
    // lazy listeners registration
    /** @type {?} */
    const _registerHide = [];
    /** @type {?} */
    const registerHide = (/**
     * @return {?}
     */
    () => {
        // add hide listeners to unregister array
        _registerHide.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        (fn) => listeners.push(fn())));
        // register hide events only once
        _registerHide.length = 0;
    });
    // register open\close\toggle listeners
    parsedTriggers.forEach((/**
     * @param {?} trigger
     * @return {?}
     */
    (trigger) => {
        /** @type {?} */
        const useToggle = trigger.open === trigger.close;
        /** @type {?} */
        const showFn = useToggle ? options.toggle : options.show;
        if (!useToggle) {
            _registerHide.push((/**
             * @return {?}
             */
            () => renderer.listen(target, trigger.close, options.hide)));
        }
        listeners.push(renderer.listen(target, trigger.open, (/**
         * @return {?}
         */
        () => showFn(registerHide))));
    }));
    return (/**
     * @return {?}
     */
    () => {
        listeners.forEach((/**
         * @param {?} unsubscribeFn
         * @return {?}
         */
        (unsubscribeFn) => unsubscribeFn()));
    });
}
/**
 * @param {?} renderer
 * @param {?} options
 * @return {?}
 */
export function registerOutsideClick(renderer, options) {
    if (!options.outsideClick) {
        return Function.prototype;
    }
    return renderer.listen("document", "click", (/**
     * @param {?} event
     * @return {?}
     */
    (event) => {
        if (options.target && options.target.contains(event.target)) {
            return;
        }
        if (options.targets &&
            options.targets.some((/**
             * @param {?} target
             * @return {?}
             */
            (target) => target.contains(event.target)))) {
            return;
        }
        options.hide();
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLW1vZGFsL3V0aWxzLyIsInNvdXJjZXMiOlsidHJpZ2dlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUtBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUkxQyxtQ0FRQzs7O0lBUEcsK0JBQXFCOztJQUNyQixnQ0FBd0I7O0lBQ3hCLGlDQUFrQjs7SUFDbEIscUNBQXVCOztJQUN2Qiw2QkFBdUI7O0lBQ3ZCLDZCQUF1Qjs7SUFDdkIsK0JBQXlCOzs7TUFHdkIsZUFBZSxHQUFHO0lBQ3BCLEtBQUssRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUM7SUFDbkMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQztDQUNqQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FDekIsUUFBZ0IsRUFDaEIsVUFBZSxlQUFlOztVQUV4QixlQUFlLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFO0lBRS9DLElBQUksZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDOUIsT0FBTyxFQUFFLENBQUM7S0FDYjs7VUFFSyxjQUFjLEdBQUcsZUFBZTtTQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDO1NBQ1osR0FBRzs7OztJQUFDLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFDO1NBQzVDLEdBQUc7Ozs7SUFBQyxDQUFDLFdBQXFCLEVBQUUsRUFBRTs7Y0FDckIsS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXO1FBRXBELE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsRUFBQzs7VUFFQSxj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O1FBRUQsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLENBQUMsRUFBQyxDQUFDO0FBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAY29weXJpZ2h0IFZhbG9yIFNvZnR3YXJlXHJcbiAqIEBjb3B5cmlnaHQgQW5ndWxhciBuZy1ib290c3RyYXAgdGVhbVxyXG4gKi9cclxuaW1wb3J0IHsgUmVuZGVyZXIyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgVHJpZ2dlciB9IGZyb20gXCIuL3RyaWdnZXIuY2xhc3NcIjtcclxuXHJcbmV4cG9ydCB0eXBlIEJzRXZlbnRDYWxsYmFjayA9IChldmVudD86IGFueSkgPT4gYm9vbGVhbiB8IHZvaWQ7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpc3Rlbk9wdGlvbnMge1xyXG4gICAgdGFyZ2V0PzogSFRNTEVsZW1lbnQ7XHJcbiAgICB0YXJnZXRzPzogSFRNTEVsZW1lbnRbXTtcclxuICAgIHRyaWdnZXJzPzogc3RyaW5nO1xyXG4gICAgb3V0c2lkZUNsaWNrPzogYm9vbGVhbjtcclxuICAgIHNob3c/OiBCc0V2ZW50Q2FsbGJhY2s7XHJcbiAgICBoaWRlPzogQnNFdmVudENhbGxiYWNrO1xyXG4gICAgdG9nZ2xlPzogQnNFdmVudENhbGxiYWNrO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX0FMSUFTRVMgPSB7XHJcbiAgICBob3ZlcjogW1wibW91c2VlbnRlclwiLCBcIm1vdXNlbGVhdmVcIl0sXHJcbiAgICBmb2N1czogW1wiZm9jdXNpblwiLCBcImZvY3Vzb3V0XCJdLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJpZ2dlcnMoXHJcbiAgICB0cmlnZ2Vyczogc3RyaW5nLFxyXG4gICAgYWxpYXNlczogYW55ID0gREVGQVVMVF9BTElBU0VTXHJcbik6IFRyaWdnZXJbXSB7XHJcbiAgICBjb25zdCB0cmltbWVkVHJpZ2dlcnMgPSAodHJpZ2dlcnMgfHwgXCJcIikudHJpbSgpO1xyXG5cclxuICAgIGlmICh0cmltbWVkVHJpZ2dlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBhcnNlZFRyaWdnZXJzID0gdHJpbW1lZFRyaWdnZXJzXHJcbiAgICAgICAgLnNwbGl0KC9cXHMrLylcclxuICAgICAgICAubWFwKCh0cmlnZ2VyOiBzdHJpbmcpID0+IHRyaWdnZXIuc3BsaXQoXCI6XCIpKVxyXG4gICAgICAgIC5tYXAoKHRyaWdnZXJQYWlyOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhbGlhcyA9IGFsaWFzZXNbdHJpZ2dlclBhaXJbMF1dIHx8IHRyaWdnZXJQYWlyO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmlnZ2VyKGFsaWFzWzBdLCBhbGlhc1sxXSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgY29uc3QgbWFudWFsVHJpZ2dlcnMgPSBwYXJzZWRUcmlnZ2Vycy5maWx0ZXIoKHRyaWdnZXJQYWlyOiBUcmlnZ2VyKSA9PlxyXG4gICAgICAgIHRyaWdnZXJQYWlyLmlzTWFudWFsKClcclxuICAgICk7XHJcblxyXG4gICAgaWYgKG1hbnVhbFRyaWdnZXJzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgIFwiVHJpZ2dlcnMgcGFyc2UgZXJyb3I6IG9ubHkgb25lIG1hbnVhbCB0cmlnZ2VyIGlzIGFsbG93ZWRcIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1hbnVhbFRyaWdnZXJzLmxlbmd0aCA9PT0gMSAmJiBwYXJzZWRUcmlnZ2Vycy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICBcIlRyaWdnZXJzIHBhcnNlIGVycm9yOiBtYW51YWwgdHJpZ2dlciBjYW4ndCBiZSBtaXhlZCB3aXRoIG90aGVyIHRyaWdnZXJzXCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXJzZWRUcmlnZ2VycztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlblRvVHJpZ2dlcnMoXHJcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgdGFyZ2V0OiBhbnksXHJcbiAgICB0cmlnZ2Vyczogc3RyaW5nLFxyXG4gICAgc2hvd0ZuOiBCc0V2ZW50Q2FsbGJhY2ssXHJcbiAgICBoaWRlRm46IEJzRXZlbnRDYWxsYmFjayxcclxuICAgIHRvZ2dsZUZuOiBCc0V2ZW50Q2FsbGJhY2tcclxuKTogRnVuY3Rpb24ge1xyXG4gICAgY29uc3QgcGFyc2VkVHJpZ2dlcnMgPSBwYXJzZVRyaWdnZXJzKHRyaWdnZXJzKTtcclxuICAgIGNvbnN0IGxpc3RlbmVyczogYW55W10gPSBbXTtcclxuXHJcbiAgICBpZiAocGFyc2VkVHJpZ2dlcnMubGVuZ3RoID09PSAxICYmIHBhcnNlZFRyaWdnZXJzWzBdLmlzTWFudWFsKCkpIHtcclxuICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlZFRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXI6IFRyaWdnZXIpID0+IHtcclxuICAgICAgICBpZiAodHJpZ2dlci5vcGVuID09PSB0cmlnZ2VyLmNsb3NlKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKHJlbmRlcmVyLmxpc3Rlbih0YXJnZXQsIHRyaWdnZXIub3BlbiwgdG9nZ2xlRm4pKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKFxyXG4gICAgICAgICAgICByZW5kZXJlci5saXN0ZW4odGFyZ2V0LCB0cmlnZ2VyLm9wZW4sIHNob3dGbiksXHJcbiAgICAgICAgICAgIHJlbmRlcmVyLmxpc3Rlbih0YXJnZXQsIHRyaWdnZXIuY2xvc2UsIGhpZGVGbilcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgodW5zdWJzY3JpYmVGbjogRnVuY3Rpb24pID0+IHVuc3Vic2NyaWJlRm4oKSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuVG9UcmlnZ2Vyc1YyKFxyXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIG9wdGlvbnM6IExpc3Rlbk9wdGlvbnNcclxuKTogRnVuY3Rpb24ge1xyXG4gICAgY29uc3QgcGFyc2VkVHJpZ2dlcnMgPSBwYXJzZVRyaWdnZXJzKG9wdGlvbnMudHJpZ2dlcnMpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gb3B0aW9ucy50YXJnZXQ7XHJcbiAgICAvLyBkbyBub3RoaW5nXHJcbiAgICBpZiAocGFyc2VkVHJpZ2dlcnMubGVuZ3RoID09PSAxICYmIHBhcnNlZFRyaWdnZXJzWzBdLmlzTWFudWFsKCkpIHtcclxuICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGFsbCBsaXN0ZW5lcnNcclxuICAgIGNvbnN0IGxpc3RlbmVyczogYW55W10gPSBbXTtcclxuXHJcbiAgICAvLyBsYXp5IGxpc3RlbmVycyByZWdpc3RyYXRpb25cclxuICAgIGNvbnN0IF9yZWdpc3RlckhpZGU6IEZ1bmN0aW9uW10gPSBbXTtcclxuICAgIGNvbnN0IHJlZ2lzdGVySGlkZSA9ICgpID0+IHtcclxuICAgICAgICAvLyBhZGQgaGlkZSBsaXN0ZW5lcnMgdG8gdW5yZWdpc3RlciBhcnJheVxyXG4gICAgICAgIF9yZWdpc3RlckhpZGUuZm9yRWFjaCgoZm46IEZ1bmN0aW9uKSA9PiBsaXN0ZW5lcnMucHVzaChmbigpKSk7XHJcbiAgICAgICAgLy8gcmVnaXN0ZXIgaGlkZSBldmVudHMgb25seSBvbmNlXHJcbiAgICAgICAgX3JlZ2lzdGVySGlkZS5sZW5ndGggPSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyByZWdpc3RlciBvcGVuXFxjbG9zZVxcdG9nZ2xlIGxpc3RlbmVyc1xyXG4gICAgcGFyc2VkVHJpZ2dlcnMuZm9yRWFjaCgodHJpZ2dlcjogVHJpZ2dlcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVzZVRvZ2dsZSA9IHRyaWdnZXIub3BlbiA9PT0gdHJpZ2dlci5jbG9zZTtcclxuICAgICAgICBjb25zdCBzaG93Rm4gPSB1c2VUb2dnbGUgPyBvcHRpb25zLnRvZ2dsZSA6IG9wdGlvbnMuc2hvdztcclxuXHJcbiAgICAgICAgaWYgKCF1c2VUb2dnbGUpIHtcclxuICAgICAgICAgICAgX3JlZ2lzdGVySGlkZS5wdXNoKCgpID0+XHJcbiAgICAgICAgICAgICAgICByZW5kZXJlci5saXN0ZW4odGFyZ2V0LCB0cmlnZ2VyLmNsb3NlLCBvcHRpb25zLmhpZGUpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsaXN0ZW5lcnMucHVzaChcclxuICAgICAgICAgICAgcmVuZGVyZXIubGlzdGVuKHRhcmdldCwgdHJpZ2dlci5vcGVuLCAoKSA9PiBzaG93Rm4ocmVnaXN0ZXJIaWRlKSlcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgodW5zdWJzY3JpYmVGbjogRnVuY3Rpb24pID0+IHVuc3Vic2NyaWJlRm4oKSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJPdXRzaWRlQ2xpY2soXHJcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgb3B0aW9uczogTGlzdGVuT3B0aW9uc1xyXG4pIHtcclxuICAgIGlmICghb3B0aW9ucy5vdXRzaWRlQ2xpY2spIHtcclxuICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZW5kZXJlci5saXN0ZW4oXCJkb2N1bWVudFwiLCBcImNsaWNrXCIsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudGFyZ2V0ICYmIG9wdGlvbnMudGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIG9wdGlvbnMudGFyZ2V0cyAmJlxyXG4gICAgICAgICAgICBvcHRpb25zLnRhcmdldHMuc29tZSgodGFyZ2V0KSA9PiB0YXJnZXQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3B0aW9ucy5oaWRlKCk7XHJcbiAgICB9KTtcclxufVxyXG4iXX0=