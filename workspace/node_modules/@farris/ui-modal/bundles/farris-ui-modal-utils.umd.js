(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@farris/ui-modal/utils', ['exports'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-modal'] = global.farris['ui-modal'] || {}, global.farris['ui-modal'].utils = {})));
}(this, (function (exports) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*tslint:disable */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * JS version of browser APIs. This library can only run in the browser.
     * @type {?}
     */
    var win = (typeof window !== 'undefined' && window) || ( /** @type {?} */({}));
    /** @type {?} */
    var document$1 = win.document;
    /** @type {?} */
    var location = win.location;
    /** @type {?} */
    var gc = win['gc'] ? ( /**
     * @return {?}
     */function () { return win['gc'](); }) : ( /**
     * @return {?}
     */function () { return null; });
    /** @type {?} */
    var performance = win['performance'] ? win['performance'] : null;
    /** @type {?} */
    var Event = win['Event'];
    /** @type {?} */
    var MouseEvent = win['MouseEvent'];
    /** @type {?} */
    var KeyboardEvent = win['KeyboardEvent'];
    /** @type {?} */
    var EventTarget = win['EventTarget'];
    /** @type {?} */
    var History = win['History'];
    /** @type {?} */
    var Location = win['Location'];
    /** @type {?} */
    var EventListener = win['EventListener'];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var guessedVersion;
    /**
     * @return {?}
     */
    function _guessBsVersion() {
        if (typeof document === 'undefined') {
            return null;
        }
        /** @type {?} */
        var spanEl = document.createElement('span');
        spanEl.innerText = 'test bs version';
        document.body.appendChild(spanEl);
        spanEl.classList.add('d-none');
        /** @type {?} */
        var rect = spanEl.getBoundingClientRect();
        document.body.removeChild(spanEl);
        if (!rect) {
            return 'bs3';
        }
        return rect.top === 0 ? 'bs4' : 'bs3';
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    function setTheme(theme) {
        guessedVersion = theme;
    }
    // todo: in ngx-bootstrap, bs4 will became a default one
    /**
     * @return {?}
     */
    function isBs3() {
        if (typeof win === 'undefined') {
            return true;
        }
        if (typeof win.__theme === 'undefined') {
            if (guessedVersion) {
                return guessedVersion === 'bs3';
            }
            guessedVersion = _guessBsVersion();
            return guessedVersion === 'bs3';
        }
        return win.__theme !== 'bs4';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @copyright Valor Software
     * @copyright Angular ng-bootstrap team
     */
    var Trigger = /** @class */ (function () {
        function Trigger(open, close) {
            this.open = open;
            this.close = close || open;
        }
        /**
         * @return {?}
         */
        Trigger.prototype.isManual = /**
         * @return {?}
         */
            function () {
                return this.open === 'manual' || this.close === 'manual';
            };
        return Trigger;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Utils = /** @class */ (function () {
        function Utils() {
        }
        /**
         * @param {?} element
         * @return {?}
         */
        Utils.reflow = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                (( /**
                 * @param {?} bs
                 * @return {?}
                 */function (bs) { return bs; }))(element.offsetHeight);
            };
        // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
        // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
        /**
         * @param {?} elem
         * @return {?}
         */
        Utils.getStyles =
            // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js
            /**
             * @param {?} elem
             * @return {?}
             */
            function (elem) {
                // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
                // IE throws on elements created in popups
                // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
                /** @type {?} */
                var view = elem.ownerDocument.defaultView;
                if (!view || !view.opener) {
                    view = win;
                }
                return view.getComputedStyle(elem);
            };
        /**
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        Utils.checkDialogSize = /**
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
            function (width, height) {
                // 可视区域尺寸
                /** @type {?} */
                var winSize = {
                    width: document.body.offsetWidth,
                    height: win.innerHeight
                };
                if (winSize.width < width) {
                    width = winSize.width;
                }
                if (winSize.height < height) {
                    height = winSize.height;
                }
                return {
                    width: width,
                    height: height
                };
            };
        return Utils;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_ALIASES = {
        hover: ["mouseenter", "mouseleave"],
        focus: ["focusin", "focusout"],
    };
    /**
     * @param {?} triggers
     * @param {?=} aliases
     * @return {?}
     */
    function parseTriggers(triggers, aliases) {
        if (aliases === void 0) {
            aliases = DEFAULT_ALIASES;
        }
        /** @type {?} */
        var trimmedTriggers = (triggers || "").trim();
        if (trimmedTriggers.length === 0) {
            return [];
        }
        /** @type {?} */
        var parsedTriggers = trimmedTriggers
            .split(/\s+/)
            .map(( /**
     * @param {?} trigger
     * @return {?}
     */function (trigger) { return trigger.split(":"); }))
            .map(( /**
     * @param {?} triggerPair
     * @return {?}
     */function (triggerPair) {
            /** @type {?} */
            var alias = aliases[triggerPair[0]] || triggerPair;
            return new Trigger(alias[0], alias[1]);
        }));
        /** @type {?} */
        var manualTriggers = parsedTriggers.filter(( /**
         * @param {?} triggerPair
         * @return {?}
         */function (triggerPair) {
            return triggerPair.isManual();
        }));
        if (manualTriggers.length > 1) {
            throw new Error("Triggers parse error: only one manual trigger is allowed");
        }
        if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
            throw new Error("Triggers parse error: manual trigger can't be mixed with other triggers");
        }
        return parsedTriggers;
    }
    /**
     * @param {?} renderer
     * @param {?} options
     * @return {?}
     */
    function listenToTriggersV2(renderer, options) {
        /** @type {?} */
        var parsedTriggers = parseTriggers(options.triggers);
        /** @type {?} */
        var target = options.target;
        // do nothing
        if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
            return Function.prototype;
        }
        // all listeners
        /** @type {?} */
        var listeners = [];
        // lazy listeners registration
        /** @type {?} */
        var _registerHide = [];
        /** @type {?} */
        var registerHide = ( /**
         * @return {?}
         */function () {
            // add hide listeners to unregister array
            _registerHide.forEach(( /**
             * @param {?} fn
             * @return {?}
             */function (fn) { return listeners.push(fn()); }));
            // register hide events only once
            _registerHide.length = 0;
        });
        // register open\close\toggle listeners
        parsedTriggers.forEach(( /**
         * @param {?} trigger
         * @return {?}
         */function (trigger) {
            /** @type {?} */
            var useToggle = trigger.open === trigger.close;
            /** @type {?} */
            var showFn = useToggle ? options.toggle : options.show;
            if (!useToggle) {
                _registerHide.push(( /**
                 * @return {?}
                 */function () {
                    return renderer.listen(target, trigger.close, options.hide);
                }));
            }
            listeners.push(renderer.listen(target, trigger.open, ( /**
             * @return {?}
             */function () { return showFn(registerHide); })));
        }));
        return ( /**
         * @return {?}
         */function () {
            listeners.forEach(( /**
             * @param {?} unsubscribeFn
             * @return {?}
             */function (unsubscribeFn) { return unsubscribeFn(); }));
        });
    }
    /**
     * @param {?} renderer
     * @param {?} options
     * @return {?}
     */
    function registerOutsideClick(renderer, options) {
        if (!options.outsideClick) {
            return Function.prototype;
        }
        return renderer.listen("document", "click", ( /**
         * @param {?} event
         * @return {?}
         */function (event) {
            if (options.target && options.target.contains(event.target)) {
                return;
            }
            if (options.targets &&
                options.targets.some(( /**
                 * @param {?} target
                 * @return {?}
                 */function (target) { return target.contains(event.target); }))) {
                return;
            }
            options.hide();
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.isBs3 = isBs3;
    exports.setTheme = setTheme;
    exports.Trigger = Trigger;
    exports.parseTriggers = parseTriggers;
    exports.listenToTriggersV2 = listenToTriggersV2;
    exports.registerOutsideClick = registerOutsideClick;
    exports.window = win;
    exports.document = document$1;
    exports.location = location;
    exports.gc = gc;
    exports.performance = performance;
    exports.Event = Event;
    exports.MouseEvent = MouseEvent;
    exports.KeyboardEvent = KeyboardEvent;
    exports.EventTarget = EventTarget;
    exports.History = History;
    exports.Location = Location;
    exports.EventListener = EventListener;
    exports.Utils = Utils;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-modal-utils.umd.js.map