/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Injector, ElementRef, Input } from '@angular/core';
var ModalButtonDirective = /** @class */ (function () {
    function ModalButtonDirective(injector, el) {
        this.injector = injector;
        this.el = el;
        this.visable = true;
    }
    /**
     * @param {?} disable
     * @return {?}
     */
    ModalButtonDirective.prototype.setDisabled = /**
     * @param {?} disable
     * @return {?}
     */
    function (disable) {
        this.el.nativeElement.disabled = disable;
    };
    /**
     * @return {?}
     */
    ModalButtonDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        this.visable = true;
    };
    /**
     * @return {?}
     */
    ModalButtonDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.visable = false;
    };
    ModalButtonDirective.decorators = [
        { type: Directive, args: [{ selector: '[modal-button]' },] }
    ];
    /** @nocollapse */
    ModalButtonDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef }
    ]; };
    ModalButtonDirective.propDecorators = {
        visable: [{ type: Input }]
    };
    return ModalButtonDirective;
}());
export { ModalButtonDirective };
if (false) {
    /** @type {?} */
    ModalButtonDirective.prototype.visable;
    /**
     * @type {?}
     * @private
     */
    ModalButtonDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ModalButtonDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbW9kYWwvIiwic291cmNlcyI6WyJsaWIvbW9kYWwtYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RTtJQUdJLDhCQUFvQixRQUFrQixFQUFVLEVBQWM7UUFBMUMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFEckQsWUFBTyxHQUFHLElBQUksQ0FBQztJQUMwQyxDQUFDOzs7OztJQUVuRSwwQ0FBVzs7OztJQUFYLFVBQVksT0FBZ0I7UUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUM3QyxDQUFDOzs7O0lBRUQsbUNBQUk7OztJQUFKO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVELG1DQUFJOzs7SUFBSjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7O2dCQWZKLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRTs7OztnQkFGckIsUUFBUTtnQkFBRSxVQUFVOzs7MEJBSW5DLEtBQUs7O0lBY1YsMkJBQUM7Q0FBQSxBQWhCRCxJQWdCQztTQWZZLG9CQUFvQjs7O0lBQzdCLHVDQUF3Qjs7Ozs7SUFDWix3Q0FBMEI7Ozs7O0lBQUUsa0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3RvciwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1ttb2RhbC1idXR0b25dJyB9KVxyXG5leHBvcnQgY2xhc3MgTW9kYWxCdXR0b25EaXJlY3RpdmUge1xyXG4gICAgQElucHV0KCkgdmlzYWJsZSA9IHRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gICAgc2V0RGlzYWJsZWQoZGlzYWJsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IGRpc2FibGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLnZpc2FibGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy52aXNhYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIl19