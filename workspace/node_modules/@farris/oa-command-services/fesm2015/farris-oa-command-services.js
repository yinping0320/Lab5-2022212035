import { NotifyService } from '@farris/ui-notify';
import { concatMap, switchMap, tap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { Injectable, NgModule, Injector, defineInjectable, inject } from '@angular/core';
import { empty, of, Subject, BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class OAListDataService {
    /**
     * @param {?} msgService
     * @param {?} notifySer
     */
    constructor(msgService, notifySer) {
        this.msgService = msgService;
        this.notifySer = notifySer;
    }
    /**
     * @param {?} ids
     * @param {?=} ifSave
     * @return {?}
     */
    filterAndRemoveRows(ids, ifSave) {
        if (!ids || ids.length === 0) {
            this.notifySer.error('请选择要删除的数据！');
            return empty();
        }
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        const bindingData = frameContext['bindingData'];
        /** @type {?} */
        const removableIds = [];
        ids.forEach((id) => {
            /** @type {?} */
            const rowData = bindingData.list.findById(id);
            if (rowData && rowData['billState'] && rowData['billState']['billState'] === 'Billing') {
                removableIds.push(id);
            }
        });
        if (!removableIds.length) {
            this.notifySer.error('没有可删除的数据！');
            return empty();
        }
        /** @type {?} */
        const action$ = this.msgService.confirm('确认删除？');
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            if (typeof ifSave === 'undefined') {
                ifSave = true;
            }
            if (typeof ifSave === 'string') {
                ifSave = ifSave.toLowerCase() === 'false' ? false : true;
            }
            ifSave = (ifSave === false) ? false : true;
            /** @type {?} */
            let repository;
            try {
                repository = frameContext['repository'];
            }
            catch (error) {
                return empty();
            }
            /** @type {?} */
            const remove$ = repository.removeByIds(removableIds, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(() => {
                this.notifySer.success('删除成功！');
            }, error => {
                this.msgService.error(error);
            }), switchMap(() => {
                return of([]);
            }));
        }));
    }
}
OAListDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
OAListDataService.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
const templateType = {
    card: "card",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class PrintWebPageService {
    /**
     * @param {?} msgSer
     */
    constructor(msgSer) {
        this.msgSer = msgSer;
        window.onbeforeprint = () => {
            if (this.currentTemplate == templateType.card) {
                /** @type {?} */
                const rootLayout = document.getElementById('root-layout');
                /** @type {?} */
                const mainContainer = document.getElementById('main-container');
                if (rootLayout && mainContainer) {
                    rootLayout.style.display = 'block';
                    rootLayout.style.position = 'relative';
                    mainContainer.style.display = 'block';
                    rootLayout.parentElement.style.position = 'relative';
                    document.title = '';
                }
                else {
                    this.msgSer.error('未找到模板中关键节点，请检查命令传参中模板类型是否正确。');
                }
            }
        };
        window.onafterprint = () => {
            if (this.currentTemplate == templateType.card) {
                /** @type {?} */
                const rootLayout = document.getElementById('root-layout');
                /** @type {?} */
                const mainContainer = document.getElementById('main-container');
                if (rootLayout && mainContainer) {
                    mainContainer.setAttribute('style', '');
                    rootLayout.setAttribute('style', '');
                    rootLayout.parentElement.setAttribute('style', '');
                }
            }
        };
    }
    /**
     * @param {?=} tempType
     * @return {?}
     */
    printWebPage(tempType = templateType.card) {
        this.currentTemplate = tempType;
        if (!window.navigator.userAgent.includes('AppleWebKit/')) {
            this.msgSer.prompt('提示', '为保证打印效果，推荐使用谷歌浏览器进行打印。是否继续打印？').subscribe((confirmed) => {
                if (confirmed) {
                    window.print();
                }
            });
        }
        else {
            window.print();
        }
    }
}
PrintWebPageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrintWebPageService.ctorParameters = () => [
    { type: MessagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
const ScheduleResultType = {
    Finally: "finally",
    Progress: "progress",
    Error: "error",
};
class SyncTaskSchdule {
    constructor() {
        this.actIndex = 0;
        this.resultStack = [];
        this.status = 0; // 0 停止中 1 运行中
        // 0 停止中 1 运行中
        this.taskResult = new Subject();
        this.taskStack = [];
    }
    /**
     * @param {?} fun
     * @param {?=} params
     * @param {?=} context
     * @param {?=} key
     * @return {?}
     */
    propTask(fun, params = [], context, key) {
        this.taskStack.push({
            funName: key,
            fun: fun,
            params: params,
            context: context
        });
        // 未开始执行 需要手动吊起一次
        if (!this.status) {
            this.actTask().subscribe((res) => {
                this.taskResult.next(res);
            });
        }
        return this.taskResult;
    }
    /**
     * @return {?}
     */
    actTask() {
        this.status = 1;
        /** @type {?} */
        const result = new Subject();
        /** @type {?} */
        const actOne = this.taskStack[this.actIndex];
        try {
            actOne.fun.apply(actOne.context || window, actOne.params || []).subscribe((res) => {
                this.resultStack.push(res);
                result.next({
                    type: this.actIndex == this.taskStack.length - 1 ? ScheduleResultType.Finally : ScheduleResultType.Progress,
                    recentResult: res,
                    progressIndex: this.actIndex,
                    resultStack: this.resultStack
                });
                if (this.actIndex < this.taskStack.length - 1) {
                    this.actIndex++;
                    this.actTask();
                }
                else {
                    this.status = 0;
                }
            });
        }
        catch (error) {
            this.resultStack.push(error);
            result.next({
                type: ScheduleResultType.Error,
                recentResult: error,
                progressIndex: this.actIndex,
                resultStack: this.resultStack
            });
            if (this.actIndex < this.taskStack.length - 1) {
                this.actIndex++;
                this.actTask();
            }
            else {
                this.status = 0;
            }
        }
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
const WFActionType = {
    /**
     * 审批通过
    */
    Pass: 'Pass',
    /**
     *
    */
    Resubmit: 'Resubmit',
    /**
     * 驳回
    */
    Back: 'Back',
    /**
     * 移交
    */
    Transfer: 'Transfer',
    /**
     * 评论
    */
    Comment: 'Comment',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class TaskCenterBridgeService {
    /**
     * @param {?} msgService
     */
    constructor(msgService) {
        this.msgService = msgService;
        this.taskSchdule = new SyncTaskSchdule();
    }
    /**
     * @param {?} customerCmds
     * @return {?}
     */
    initTaskCenterBridge(customerCmds) {
        /** @type {?} */
        const bridgeWin = window.parent;
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        let slienceSaveTask;
        try {
            slienceSaveTask = this['context'].frameContext.viewModel.slienceSave1;
        }
        catch (error) {
            // 不存在静音保存命令
        }
        if (bridgeWin) {
            bridgeWin['taskCenterBeforeLoad'] = (actionObj) => {
                return new Promise((resolve, reject) => {
                    const { action } = actionObj;
                    if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
                        slienceSaveTask.call(this).subscribe(() => {
                            resolve({
                                result: true
                            });
                        }, () => {
                            window.document.body.click();
                            if (action.code === WFActionType.Pass) { // 除了审评通过外，其它的不需要保存 
                                resolve({
                                    result: false
                                });
                            }
                            else if (action.code === WFActionType.Comment) {
                                resolve({
                                    result: true
                                });
                            }
                            else {
                                this.msgService.confirm('检测到单据保存失败，是否继续？').subscribe((confirm) => {
                                    resolve({
                                        result: confirm
                                    });
                                });
                            }
                        });
                    }
                    else if (action.code == WFActionType.Resubmit && slienceSaveTask) {
                        slienceSaveTask.call(this).subscribe(() => {
                            resolve({
                                result: true
                            });
                        });
                    }
                    else {
                        resolve({
                            result: true
                        });
                    }
                });
            };
        }
    }
    /**
     * @param {?} taskArray
     * @return {?}
     */
    executeSchedules(taskArray) {
        // 这里根据 任务名称，从 viewmodel中找到，然后依次执行
        taskArray = taskArray.split(',');
        // 这里需要验证拿到 commandService 
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        taskArray.forEach((item) => {
            /** @type {?} */
            let targetTask;
            try {
                targetTask = frameContext.viewModel[item];
                this.taskSchdule.propTask(targetTask, [], this, item).subscribe((res) => {
                    console.log(res);
                });
            }
            catch (error) {
                // 未找到应该在children中继续查找 未找到
                console.log(error);
            }
        });
    }
}
TaskCenterBridgeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaskCenterBridgeService.ctorParameters = () => [
    { type: MessagerService }
];
/** @nocollapse */ TaskCenterBridgeService.ngInjectableDef = defineInjectable({ factory: function TaskCenterBridgeService_Factory() { return new TaskCenterBridgeService(inject(MessagerService)); }, token: TaskCenterBridgeService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class TransitApprovalStatus {
    /**
     * @param {?} injetor
     */
    constructor(injetor) {
        this.injetor = injetor;
        // 因为注位置的问题，这样子拿不到
        // this.stateMachineSer = this.injetor.get(StateMachineService);
    }
    /**
     * @return {?}
     */
    switchStatus() {
        /** @type {?} */
        const result = new BehaviorSubject('Cancel');
        //  判断流程传参  formConfigId
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
            result.next('Edit');
        }
        return result;
    }
}
TransitApprovalStatus.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TransitApprovalStatus.ctorParameters = () => [
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class OACommandServicesModule {
    constructor() { }
}
OACommandServicesModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    TaskCenterBridgeService,
                    PrintWebPageService,
                    TransitApprovalStatus,
                    OAListDataService
                ],
                imports: [],
                exports: [],
                entryComponents: []
            },] }
];
/** @nocollapse */
OACommandServicesModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { OAListDataService, OACommandServicesModule, PrintWebPageService, TaskCenterBridgeService, TransitApprovalStatus };

//# sourceMappingURL=farris-oa-command-services.js.map