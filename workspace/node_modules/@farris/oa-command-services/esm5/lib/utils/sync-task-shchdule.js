/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Subject } from "rxjs";
/** @enum {string} */
var ScheduleResultType = {
    Finally: "finally",
    Progress: "progress",
    Error: "error",
};
export { ScheduleResultType };
/**
 * @record
 */
export function ScheduleResult() { }
if (false) {
    /** @type {?} */
    ScheduleResult.prototype.type;
    /** @type {?} */
    ScheduleResult.prototype.recentResult;
    /** @type {?} */
    ScheduleResult.prototype.progressIndex;
    /** @type {?} */
    ScheduleResult.prototype.resultStack;
}
var SyncTaskSchdule = /** @class */ (function () {
    function SyncTaskSchdule() {
        this.actIndex = 0;
        this.resultStack = [];
        this.status = 0; // 0 停止中 1 运行中
        // 0 停止中 1 运行中
        this.taskResult = new Subject();
        this.taskStack = [];
    }
    /**
     * @param {?} fun
     * @param {?=} params
     * @param {?=} context
     * @param {?=} key
     * @return {?}
     */
    SyncTaskSchdule.prototype.propTask = /**
     * @param {?} fun
     * @param {?=} params
     * @param {?=} context
     * @param {?=} key
     * @return {?}
     */
    function (fun, params, context, key) {
        var _this = this;
        if (params === void 0) { params = []; }
        this.taskStack.push({
            funName: key,
            fun: fun,
            params: params,
            context: context
        });
        // 未开始执行 需要手动吊起一次
        if (!this.status) {
            this.actTask().subscribe(function (res) {
                _this.taskResult.next(res);
            });
        }
        return this.taskResult;
    };
    /**
     * @return {?}
     */
    SyncTaskSchdule.prototype.actTask = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.status = 1;
        /** @type {?} */
        var result = new Subject();
        /** @type {?} */
        var actOne = this.taskStack[this.actIndex];
        try {
            actOne.fun.apply(actOne.context || window, actOne.params || []).subscribe(function (res) {
                _this.resultStack.push(res);
                result.next({
                    type: _this.actIndex == _this.taskStack.length - 1 ? ScheduleResultType.Finally : ScheduleResultType.Progress,
                    recentResult: res,
                    progressIndex: _this.actIndex,
                    resultStack: _this.resultStack
                });
                if (_this.actIndex < _this.taskStack.length - 1) {
                    _this.actIndex++;
                    _this.actTask();
                }
                else {
                    _this.status = 0;
                }
            });
        }
        catch (error) {
            this.resultStack.push(error);
            result.next({
                type: ScheduleResultType.Error,
                recentResult: error,
                progressIndex: this.actIndex,
                resultStack: this.resultStack
            });
            if (this.actIndex < this.taskStack.length - 1) {
                this.actIndex++;
                this.actTask();
            }
            else {
                this.status = 0;
            }
        }
        return result;
    };
    return SyncTaskSchdule;
}());
export { SyncTaskSchdule };
if (false) {
    /** @type {?} */
    SyncTaskSchdule.prototype.actIndex;
    /** @type {?} */
    SyncTaskSchdule.prototype.resultStack;
    /** @type {?} */
    SyncTaskSchdule.prototype.status;
    /** @type {?} */
    SyncTaskSchdule.prototype.taskResult;
    /** @type {?} */
    SyncTaskSchdule.prototype.taskStack;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luYy10YXNrLXNoY2hkdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9vYS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3N5bmMtdGFzay1zaGNoZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0lBSTdCLFNBQVUsU0FBUztJQUNuQixVQUFXLFVBQVU7SUFDckIsT0FBUSxPQUFPOzs7Ozs7QUFHakIsb0NBS0M7OztJQUpDLDhCQUF5Qjs7SUFDekIsc0NBQWtCOztJQUNsQix1Q0FBc0I7O0lBQ3RCLHFDQUF1Qjs7QUFJekI7SUFFRTtRQUVRLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFYixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUVqQixXQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUEsY0FBYzs7UUFFekIsZUFBVSxHQUE0QixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRXBELGNBQVMsR0FLWixFQUFFLENBQUM7SUFmUSxDQUFDOzs7Ozs7OztJQWlCVixrQ0FBUTs7Ozs7OztJQUFmLFVBQWdCLEdBQWEsRUFBRSxNQUFXLEVBQUUsT0FBTyxFQUFFLEdBQVc7UUFBaEUsaUJBY0M7UUFkOEIsdUJBQUEsRUFBQSxXQUFXO1FBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxHQUFHO1lBQ1osR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxPQUFPO1NBQ2pCLENBQUMsQ0FBQztRQUNILGlCQUFpQjtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsR0FBbUI7Z0JBQzNDLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQzs7OztJQUVPLGlDQUFPOzs7SUFBZjtRQUFBLGlCQW9DQztRQW5DQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzs7WUFDVixNQUFNLEdBQTRCLElBQUksT0FBTyxFQUFFOztZQUMvQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzVDLElBQUk7WUFDRixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEdBQUc7Z0JBQzVFLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNWLElBQUksRUFBRSxLQUFJLENBQUMsUUFBUSxJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRO29CQUMzRyxZQUFZLEVBQUUsR0FBRztvQkFDakIsYUFBYSxFQUFFLEtBQUksQ0FBQyxRQUFRO29CQUM1QixXQUFXLEVBQUUsS0FBSSxDQUFDLFdBQVc7aUJBQzlCLENBQUMsQ0FBQTtnQkFDRixJQUFJLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUM3QyxLQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQ2hCLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDaEI7cUJBQU07b0JBQ0wsS0FBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7aUJBQ2pCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDVixJQUFJLEVBQUUsa0JBQWtCLENBQUMsS0FBSztnQkFDOUIsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLGFBQWEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDNUIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO2FBQzlCLENBQUMsQ0FBQTtZQUNGLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzdDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2hCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBR0gsc0JBQUM7QUFBRCxDQUFDLEFBMUVELElBMEVDOzs7O0lBdEVDLG1DQUFxQjs7SUFFckIsc0NBQXlCOztJQUV6QixpQ0FBbUI7O0lBRW5CLHFDQUE0RDs7SUFFNUQsb0NBS1EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcclxuXHJcblxyXG5leHBvcnQgZW51bSBTY2hlZHVsZVJlc3VsdFR5cGUge1xyXG4gIEZpbmFsbHkgPSBcImZpbmFsbHlcIixcclxuICBQcm9ncmVzcyA9IFwicHJvZ3Jlc3NcIixcclxuICBFcnJvciA9IFwiZXJyb3JcIixcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTY2hlZHVsZVJlc3VsdCB7XHJcbiAgdHlwZTogU2NoZWR1bGVSZXN1bHRUeXBlLFxyXG4gIHJlY2VudFJlc3VsdDogYW55LFxyXG4gIHByb2dyZXNzSW5kZXg6IE51bWJlcixcclxuICByZXN1bHRTdGFjazogQXJyYXk8YW55PlxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFN5bmNUYXNrU2NoZHVsZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIHByaXZhdGUgYWN0SW5kZXggPSAwO1xyXG5cclxuICBwcml2YXRlIHJlc3VsdFN0YWNrID0gW107XHJcblxyXG4gIHByaXZhdGUgc3RhdHVzID0gMDsvLyAwIOWBnOatouS4rSAxIOi/kOihjOS4rVxyXG5cclxuICBwcml2YXRlIHRhc2tSZXN1bHQ6IFN1YmplY3Q8U2NoZWR1bGVSZXN1bHQ+ID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgcHJpdmF0ZSB0YXNrU3RhY2s6IEFycmF5PHtcclxuICAgIGZ1bk5hbWU6IHN0cmluZyxcclxuICAgIGZ1bjogRnVuY3Rpb24sXHJcbiAgICBwYXJhbXM/OiBBcnJheTxhbnk+LFxyXG4gICAgY29udGV4dD86IGFueVxyXG4gIH0+ID0gW107XHJcblxyXG4gIHB1YmxpYyBwcm9wVGFzayhmdW46IEZ1bmN0aW9uLCBwYXJhbXMgPSBbXSwgY29udGV4dCwga2V5OiBzdHJpbmcpIHtcclxuICAgIHRoaXMudGFza1N0YWNrLnB1c2goe1xyXG4gICAgICBmdW5OYW1lOiBrZXksXHJcbiAgICAgIGZ1bjogZnVuLFxyXG4gICAgICBwYXJhbXM6IHBhcmFtcyxcclxuICAgICAgY29udGV4dDogY29udGV4dFxyXG4gICAgfSk7XHJcbiAgICAvLyDmnKrlvIDlp4vmiafooYwg6ZyA6KaB5omL5Yqo5ZCK6LW35LiA5qyhXHJcbiAgICBpZiAoIXRoaXMuc3RhdHVzKSB7XHJcbiAgICAgIHRoaXMuYWN0VGFzaygpLnN1YnNjcmliZSgocmVzOiBTY2hlZHVsZVJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHRoaXMudGFza1Jlc3VsdC5uZXh0KHJlcyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMudGFza1Jlc3VsdDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWN0VGFzaygpIHtcclxuICAgIHRoaXMuc3RhdHVzID0gMTtcclxuICAgIGNvbnN0IHJlc3VsdDogU3ViamVjdDxTY2hlZHVsZVJlc3VsdD4gPSBuZXcgU3ViamVjdCgpXHJcbiAgICBjb25zdCBhY3RPbmUgPSB0aGlzLnRhc2tTdGFja1t0aGlzLmFjdEluZGV4XTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGFjdE9uZS5mdW4uYXBwbHkoYWN0T25lLmNvbnRleHQgfHwgd2luZG93LCBhY3RPbmUucGFyYW1zIHx8IFtdKS5zdWJzY3JpYmUoKHJlcykgPT4ge1xyXG4gICAgICAgIHRoaXMucmVzdWx0U3RhY2sucHVzaChyZXMpO1xyXG4gICAgICAgIHJlc3VsdC5uZXh0KHtcclxuICAgICAgICAgIHR5cGU6IHRoaXMuYWN0SW5kZXggPT0gdGhpcy50YXNrU3RhY2subGVuZ3RoIC0gMSA/IFNjaGVkdWxlUmVzdWx0VHlwZS5GaW5hbGx5IDogU2NoZWR1bGVSZXN1bHRUeXBlLlByb2dyZXNzLFxyXG4gICAgICAgICAgcmVjZW50UmVzdWx0OiByZXMsXHJcbiAgICAgICAgICBwcm9ncmVzc0luZGV4OiB0aGlzLmFjdEluZGV4LFxyXG4gICAgICAgICAgcmVzdWx0U3RhY2s6IHRoaXMucmVzdWx0U3RhY2tcclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmICh0aGlzLmFjdEluZGV4IDwgdGhpcy50YXNrU3RhY2subGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgdGhpcy5hY3RJbmRleCsrO1xyXG4gICAgICAgICAgdGhpcy5hY3RUYXNrKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc3RhdHVzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5yZXN1bHRTdGFjay5wdXNoKGVycm9yKTtcclxuICAgICAgcmVzdWx0Lm5leHQoe1xyXG4gICAgICAgIHR5cGU6IFNjaGVkdWxlUmVzdWx0VHlwZS5FcnJvcixcclxuICAgICAgICByZWNlbnRSZXN1bHQ6IGVycm9yLFxyXG4gICAgICAgIHByb2dyZXNzSW5kZXg6IHRoaXMuYWN0SW5kZXgsXHJcbiAgICAgICAgcmVzdWx0U3RhY2s6IHRoaXMucmVzdWx0U3RhY2tcclxuICAgICAgfSlcclxuICAgICAgaWYgKHRoaXMuYWN0SW5kZXggPCB0aGlzLnRhc2tTdGFjay5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgdGhpcy5hY3RJbmRleCsrO1xyXG4gICAgICAgIHRoaXMuYWN0VGFzaygpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=