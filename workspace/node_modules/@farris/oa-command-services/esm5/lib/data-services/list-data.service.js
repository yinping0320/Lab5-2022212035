/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { empty, of } from "rxjs";
import { concatMap, switchMap, tap } from 'rxjs/operators';
var OAListDataService = /** @class */ (function () {
    function OAListDataService(msgService, notifySer) {
        this.msgService = msgService;
        this.notifySer = notifySer;
    }
    /**
     * @param {?} ids
     * @param {?=} ifSave
     * @return {?}
     */
    OAListDataService.prototype.filterAndRemoveRows = /**
     * @param {?} ids
     * @param {?=} ifSave
     * @return {?}
     */
    function (ids, ifSave) {
        var _this = this;
        if (!ids || ids.length === 0) {
            this.notifySer.error('请选择要删除的数据！');
            return empty();
        }
        /** @type {?} */
        var frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        var bindingData = frameContext['bindingData'];
        /** @type {?} */
        var removableIds = [];
        ids.forEach(function (id) {
            /** @type {?} */
            var rowData = bindingData.list.findById(id);
            if (rowData && rowData['billState'] && rowData['billState']['billState'] === 'Billing') {
                removableIds.push(id);
            }
        });
        if (!removableIds.length) {
            this.notifySer.error('没有可删除的数据！');
            return empty();
        }
        /** @type {?} */
        var action$ = this.msgService.confirm('确认删除？');
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            if (typeof ifSave === 'undefined') {
                ifSave = true;
            }
            if (typeof ifSave === 'string') {
                ifSave = ifSave.toLowerCase() === 'false' ? false : true;
            }
            ifSave = (ifSave === false) ? false : true;
            /** @type {?} */
            var repository;
            try {
                repository = frameContext['repository'];
            }
            catch (error) {
                return empty();
            }
            /** @type {?} */
            var remove$ = repository.removeByIds(removableIds, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(function () {
                _this.notifySer.success('删除成功！');
            }, function (error) {
                _this.msgService.error(error);
            }), switchMap(function () {
                return of([]);
            }));
        }));
    };
    OAListDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OAListDataService.ctorParameters = function () { return [
        { type: MessagerService },
        { type: NotifyService }
    ]; };
    return OAListDataService;
}());
export { OAListDataService };
if (false) {
    /** @type {?} */
    OAListDataService.prototype.msgService;
    /** @type {?} */
    OAListDataService.prototype.notifySer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL29hLWNvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy9saXN0LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNEO0lBR0UsMkJBQ1UsVUFBMkIsRUFDM0IsU0FBd0I7UUFEeEIsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDM0IsY0FBUyxHQUFULFNBQVMsQ0FBZTtJQUM5QixDQUFDOzs7Ozs7SUFHRSwrQ0FBbUI7Ozs7O0lBQTFCLFVBQTJCLEdBQWEsRUFBRSxNQUF5QjtRQUFuRSxpQkFxRUM7UUFwRUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNuQyxPQUFPLEtBQUssRUFBRSxDQUFDO1NBQ2hCOztZQUVHLFlBQTBCO1FBQzlCLElBQUk7WUFDRixZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQTtTQUM1QztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQzdDOztZQUNLLFdBQVcsR0FBZ0IsWUFBWSxDQUFDLGFBQWEsQ0FBQzs7WUFDdEQsWUFBWSxHQUFHLEVBQUU7UUFFdkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEVBQUU7O2dCQUNQLE9BQU8sR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDN0MsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ3RGLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDdkI7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sS0FBSyxFQUFFLENBQUM7U0FDaEI7O1lBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNoRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDZCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNYLE9BQU8sS0FBSyxFQUFFLENBQUM7YUFDaEI7WUFDRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtnQkFDakMsTUFBTSxHQUFHLElBQUksQ0FBQzthQUNmO1lBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQzlCLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUMxRDtZQUNELE1BQU0sR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7O2dCQUV2QyxVQUEyQjtZQUMvQixJQUFJO2dCQUNGLFVBQVUsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUE7YUFDeEM7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxPQUFPLEtBQUssRUFBRSxDQUFDO2FBQ2hCOztnQkFFSyxPQUFPLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBRTVELElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osT0FBTyxLQUFLLEVBQUUsQ0FBQzthQUNoQjtZQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FDakIsR0FBRyxDQUNEO2dCQUNFLEtBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLENBQUMsRUFDRCxVQUFBLEtBQUs7Z0JBQ0gsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsQ0FBQyxDQUNGLEVBQ0QsU0FBUyxDQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Z0JBOUVGLFVBQVU7Ozs7Z0JBTkYsZUFBZTtnQkFDZixhQUFhOztJQXFGdEIsd0JBQUM7Q0FBQSxBQWhGRCxJQWdGQztTQS9FWSxpQkFBaUI7OztJQUcxQix1Q0FBbUM7O0lBQ25DLHNDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YSwgUmVwb3NpdG9yeSB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IGVtcHR5LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGNvbmNhdE1hcCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE9BTGlzdERhdGFTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIG1zZ1NlcnZpY2U6IE1lc3NhZ2VyU2VydmljZSxcclxuICAgIHByaXZhdGUgbm90aWZ5U2VyOiBOb3RpZnlTZXJ2aWNlLFxyXG4gICkgeyB9XHJcblxyXG5cclxuICBwdWJsaWMgZmlsdGVyQW5kUmVtb3ZlUm93cyhpZHM6IHN0cmluZ1tdLCBpZlNhdmU/OiBib29sZWFuIHwgc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghaWRzIHx8IGlkcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXIuZXJyb3IoJ+ivt+mAieaLqeimgeWIoOmZpOeahOaVsOaNru+8gScpO1xyXG4gICAgICByZXR1cm4gZW1wdHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQ7XHJcbiAgICB0cnkge1xyXG4gICAgICBmcmFtZUNvbnRleHQgPSB0aGlzWydjb250ZXh0J10uZnJhbWVDb250ZXh0XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbiBub3QgZmluZCBmcmFtZUNvbnRleCcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhID0gZnJhbWVDb250ZXh0WydiaW5kaW5nRGF0YSddO1xyXG4gICAgY29uc3QgcmVtb3ZhYmxlSWRzID0gW107XHJcblxyXG4gICAgaWRzLmZvckVhY2goKGlkKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJvd0RhdGEgPSBiaW5kaW5nRGF0YS5saXN0LmZpbmRCeUlkKGlkKTtcclxuICAgICAgaWYgKHJvd0RhdGEgJiYgcm93RGF0YVsnYmlsbFN0YXRlJ10gJiYgcm93RGF0YVsnYmlsbFN0YXRlJ11bJ2JpbGxTdGF0ZSddID09PSAnQmlsbGluZycpIHtcclxuICAgICAgICByZW1vdmFibGVJZHMucHVzaChpZCk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgaWYgKCFyZW1vdmFibGVJZHMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VyLmVycm9yKCfmsqHmnInlj6/liKDpmaTnmoTmlbDmja7vvIEnKTtcclxuICAgICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYWN0aW9uJCA9IHRoaXMubXNnU2VydmljZS5jb25maXJtKCfnoa7orqTliKDpmaTvvJ8nKTtcclxuICAgIHJldHVybiBhY3Rpb24kLnBpcGUoXHJcbiAgICAgIGNvbmNhdE1hcChyZXN1bHQgPT4ge1xyXG4gICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpZlNhdmUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICBpZlNhdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGlmU2F2ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIGlmU2F2ZSA9IGlmU2F2ZS50b0xvd2VyQ2FzZSgpID09PSAnZmFsc2UnID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZlNhdmUgPSAoaWZTYXZlID09PSBmYWxzZSkgPyBmYWxzZSA6IHRydWU7XHJcblxyXG4gICAgICAgIGxldCByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT47XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHJlcG9zaXRvcnkgPSBmcmFtZUNvbnRleHRbJ3JlcG9zaXRvcnknXVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbW92ZSQgPSByZXBvc2l0b3J5LnJlbW92ZUJ5SWRzKHJlbW92YWJsZUlkcywgaWZTYXZlKTtcclxuXHJcbiAgICAgICAgaWYgKCFyZW1vdmUkKSB7XHJcbiAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZW1vdmUkLnBpcGUoXHJcbiAgICAgICAgICB0YXAoXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLm5vdGlmeVNlci5zdWNjZXNzKCfliKDpmaTmiJDlip/vvIEnKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMubXNnU2VydmljZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICksXHJcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YoW10pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59Il19