import { NotifyService } from '@farris/ui-notify';
import { concatMap, switchMap, tap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { Injectable, NgModule, Injector, defineInjectable, inject } from '@angular/core';
import { empty, of, Subject, BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var OAListDataService = /** @class */ (function () {
    function OAListDataService(msgService, notifySer) {
        this.msgService = msgService;
        this.notifySer = notifySer;
    }
    /**
     * @param {?} ids
     * @param {?=} ifSave
     * @return {?}
     */
    OAListDataService.prototype.filterAndRemoveRows = /**
     * @param {?} ids
     * @param {?=} ifSave
     * @return {?}
     */
    function (ids, ifSave) {
        var _this = this;
        if (!ids || ids.length === 0) {
            this.notifySer.error('请选择要删除的数据！');
            return empty();
        }
        /** @type {?} */
        var frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        var bindingData = frameContext['bindingData'];
        /** @type {?} */
        var removableIds = [];
        ids.forEach(function (id) {
            /** @type {?} */
            var rowData = bindingData.list.findById(id);
            if (rowData && rowData['billState'] && rowData['billState']['billState'] === 'Billing') {
                removableIds.push(id);
            }
        });
        if (!removableIds.length) {
            this.notifySer.error('没有可删除的数据！');
            return empty();
        }
        /** @type {?} */
        var action$ = this.msgService.confirm('确认删除？');
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            if (typeof ifSave === 'undefined') {
                ifSave = true;
            }
            if (typeof ifSave === 'string') {
                ifSave = ifSave.toLowerCase() === 'false' ? false : true;
            }
            ifSave = (ifSave === false) ? false : true;
            /** @type {?} */
            var repository;
            try {
                repository = frameContext['repository'];
            }
            catch (error) {
                return empty();
            }
            /** @type {?} */
            var remove$ = repository.removeByIds(removableIds, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(function () {
                _this.notifySer.success('删除成功！');
            }, function (error) {
                _this.msgService.error(error);
            }), switchMap(function () {
                return of([]);
            }));
        }));
    };
    OAListDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OAListDataService.ctorParameters = function () { return [
        { type: MessagerService },
        { type: NotifyService }
    ]; };
    return OAListDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
var templateType = {
    card: "card",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var PrintWebPageService = /** @class */ (function () {
    function PrintWebPageService(msgSer) {
        var _this = this;
        this.msgSer = msgSer;
        window.onbeforeprint = function () {
            if (_this.currentTemplate == templateType.card) {
                /** @type {?} */
                var rootLayout = document.getElementById('root-layout');
                /** @type {?} */
                var mainContainer = document.getElementById('main-container');
                if (rootLayout && mainContainer) {
                    rootLayout.style.display = 'block';
                    rootLayout.style.position = 'relative';
                    mainContainer.style.display = 'block';
                    rootLayout.parentElement.style.position = 'relative';
                    document.title = '';
                }
                else {
                    _this.msgSer.error('未找到模板中关键节点，请检查命令传参中模板类型是否正确。');
                }
            }
        };
        window.onafterprint = function () {
            if (_this.currentTemplate == templateType.card) {
                /** @type {?} */
                var rootLayout = document.getElementById('root-layout');
                /** @type {?} */
                var mainContainer = document.getElementById('main-container');
                if (rootLayout && mainContainer) {
                    mainContainer.setAttribute('style', '');
                    rootLayout.setAttribute('style', '');
                    rootLayout.parentElement.setAttribute('style', '');
                }
            }
        };
    }
    /**
     * @param {?=} tempType
     * @return {?}
     */
    PrintWebPageService.prototype.printWebPage = /**
     * @param {?=} tempType
     * @return {?}
     */
    function (tempType) {
        if (tempType === void 0) { tempType = templateType.card; }
        this.currentTemplate = tempType;
        if (!window.navigator.userAgent.includes('AppleWebKit/')) {
            this.msgSer.prompt('提示', '为保证打印效果，推荐使用谷歌浏览器进行打印。是否继续打印？').subscribe(function (confirmed) {
                if (confirmed) {
                    window.print();
                }
            });
        }
        else {
            window.print();
        }
    };
    PrintWebPageService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PrintWebPageService.ctorParameters = function () { return [
        { type: MessagerService }
    ]; };
    return PrintWebPageService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
var ScheduleResultType = {
    Finally: "finally",
    Progress: "progress",
    Error: "error",
};
var SyncTaskSchdule = /** @class */ (function () {
    function SyncTaskSchdule() {
        this.actIndex = 0;
        this.resultStack = [];
        this.status = 0; // 0 停止中 1 运行中
        // 0 停止中 1 运行中
        this.taskResult = new Subject();
        this.taskStack = [];
    }
    /**
     * @param {?} fun
     * @param {?=} params
     * @param {?=} context
     * @param {?=} key
     * @return {?}
     */
    SyncTaskSchdule.prototype.propTask = /**
     * @param {?} fun
     * @param {?=} params
     * @param {?=} context
     * @param {?=} key
     * @return {?}
     */
    function (fun, params, context, key) {
        var _this = this;
        if (params === void 0) { params = []; }
        this.taskStack.push({
            funName: key,
            fun: fun,
            params: params,
            context: context
        });
        // 未开始执行 需要手动吊起一次
        if (!this.status) {
            this.actTask().subscribe(function (res) {
                _this.taskResult.next(res);
            });
        }
        return this.taskResult;
    };
    /**
     * @return {?}
     */
    SyncTaskSchdule.prototype.actTask = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.status = 1;
        /** @type {?} */
        var result = new Subject();
        /** @type {?} */
        var actOne = this.taskStack[this.actIndex];
        try {
            actOne.fun.apply(actOne.context || window, actOne.params || []).subscribe(function (res) {
                _this.resultStack.push(res);
                result.next({
                    type: _this.actIndex == _this.taskStack.length - 1 ? ScheduleResultType.Finally : ScheduleResultType.Progress,
                    recentResult: res,
                    progressIndex: _this.actIndex,
                    resultStack: _this.resultStack
                });
                if (_this.actIndex < _this.taskStack.length - 1) {
                    _this.actIndex++;
                    _this.actTask();
                }
                else {
                    _this.status = 0;
                }
            });
        }
        catch (error) {
            this.resultStack.push(error);
            result.next({
                type: ScheduleResultType.Error,
                recentResult: error,
                progressIndex: this.actIndex,
                resultStack: this.resultStack
            });
            if (this.actIndex < this.taskStack.length - 1) {
                this.actIndex++;
                this.actTask();
            }
            else {
                this.status = 0;
            }
        }
        return result;
    };
    return SyncTaskSchdule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
var WFActionType = {
    /**
     * 审批通过
    */
    Pass: 'Pass',
    /**
     *
    */
    Resubmit: 'Resubmit',
    /**
     * 驳回
    */
    Back: 'Back',
    /**
     * 移交
    */
    Transfer: 'Transfer',
    /**
     * 评论
    */
    Comment: 'Comment',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var TaskCenterBridgeService = /** @class */ (function () {
    function TaskCenterBridgeService(msgService) {
        this.msgService = msgService;
        this.taskSchdule = new SyncTaskSchdule();
    }
    /**
     * @param {?} customerCmds
     * @return {?}
     */
    TaskCenterBridgeService.prototype.initTaskCenterBridge = /**
     * @param {?} customerCmds
     * @return {?}
     */
    function (customerCmds) {
        var _this = this;
        /** @type {?} */
        var bridgeWin = window.parent;
        /** @type {?} */
        var frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        var slienceSaveTask;
        try {
            slienceSaveTask = this['context'].frameContext.viewModel.slienceSave1;
        }
        catch (error) {
            // 不存在静音保存命令
        }
        if (bridgeWin) {
            bridgeWin['taskCenterBeforeLoad'] = function (actionObj) {
                return new Promise(function (resolve, reject) {
                    var action = actionObj.action;
                    if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
                        slienceSaveTask.call(_this).subscribe(function () {
                            resolve({
                                result: true
                            });
                        }, function () {
                            window.document.body.click();
                            if (action.code === WFActionType.Pass) { // 除了审评通过外，其它的不需要保存 
                                resolve({
                                    result: false
                                });
                            }
                            else if (action.code === WFActionType.Comment) {
                                resolve({
                                    result: true
                                });
                            }
                            else {
                                _this.msgService.confirm('检测到单据保存失败，是否继续？').subscribe(function (confirm) {
                                    resolve({
                                        result: confirm
                                    });
                                });
                            }
                        });
                    }
                    else if (action.code == WFActionType.Resubmit && slienceSaveTask) {
                        slienceSaveTask.call(_this).subscribe(function () {
                            resolve({
                                result: true
                            });
                        });
                    }
                    else {
                        resolve({
                            result: true
                        });
                    }
                });
            };
        }
    };
    /**
     * @param {?} taskArray
     * @return {?}
     */
    TaskCenterBridgeService.prototype.executeSchedules = /**
     * @param {?} taskArray
     * @return {?}
     */
    function (taskArray) {
        var _this = this;
        // 这里根据 任务名称，从 viewmodel中找到，然后依次执行
        taskArray = taskArray.split(',');
        // 这里需要验证拿到 commandService 
        /** @type {?} */
        var frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        taskArray.forEach(function (item) {
            /** @type {?} */
            var targetTask;
            try {
                targetTask = frameContext.viewModel[item];
                _this.taskSchdule.propTask(targetTask, [], _this, item).subscribe(function (res) {
                    console.log(res);
                });
            }
            catch (error) {
                // 未找到应该在children中继续查找 未找到
                console.log(error);
            }
        });
    };
    TaskCenterBridgeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskCenterBridgeService.ctorParameters = function () { return [
        { type: MessagerService }
    ]; };
    /** @nocollapse */ TaskCenterBridgeService.ngInjectableDef = defineInjectable({ factory: function TaskCenterBridgeService_Factory() { return new TaskCenterBridgeService(inject(MessagerService)); }, token: TaskCenterBridgeService, providedIn: "root" });
    return TaskCenterBridgeService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var TransitApprovalStatus = /** @class */ (function () {
    function TransitApprovalStatus(injetor) {
        this.injetor = injetor;
        // 因为注位置的问题，这样子拿不到
        // this.stateMachineSer = this.injetor.get(StateMachineService);
    }
    /**
     * @return {?}
     */
    TransitApprovalStatus.prototype.switchStatus = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = new BehaviorSubject('Cancel');
        //  判断流程传参  formConfigId
        /** @type {?} */
        var frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
            result.next('Edit');
        }
        return result;
    };
    TransitApprovalStatus.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TransitApprovalStatus.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return TransitApprovalStatus;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var OACommandServicesModule = /** @class */ (function () {
    function OACommandServicesModule() {
    }
    OACommandServicesModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        TaskCenterBridgeService,
                        PrintWebPageService,
                        TransitApprovalStatus,
                        OAListDataService
                    ],
                    imports: [],
                    exports: [],
                    entryComponents: []
                },] }
    ];
    /** @nocollapse */
    OACommandServicesModule.ctorParameters = function () { return []; };
    return OACommandServicesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { OAListDataService, OACommandServicesModule, PrintWebPageService, TaskCenterBridgeService, TransitApprovalStatus };

//# sourceMappingURL=farris-oa-command-services.js.map