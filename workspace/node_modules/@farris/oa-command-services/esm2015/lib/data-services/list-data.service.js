/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { empty, of } from "rxjs";
import { concatMap, switchMap, tap } from 'rxjs/operators';
export class OAListDataService {
    /**
     * @param {?} msgService
     * @param {?} notifySer
     */
    constructor(msgService, notifySer) {
        this.msgService = msgService;
        this.notifySer = notifySer;
    }
    /**
     * @param {?} ids
     * @param {?=} ifSave
     * @return {?}
     */
    filterAndRemoveRows(ids, ifSave) {
        if (!ids || ids.length === 0) {
            this.notifySer.error('请选择要删除的数据！');
            return empty();
        }
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        const bindingData = frameContext['bindingData'];
        /** @type {?} */
        const removableIds = [];
        ids.forEach((id) => {
            /** @type {?} */
            const rowData = bindingData.list.findById(id);
            if (rowData && rowData['billState'] && rowData['billState']['billState'] === 'Billing') {
                removableIds.push(id);
            }
        });
        if (!removableIds.length) {
            this.notifySer.error('没有可删除的数据！');
            return empty();
        }
        /** @type {?} */
        const action$ = this.msgService.confirm('确认删除？');
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            if (typeof ifSave === 'undefined') {
                ifSave = true;
            }
            if (typeof ifSave === 'string') {
                ifSave = ifSave.toLowerCase() === 'false' ? false : true;
            }
            ifSave = (ifSave === false) ? false : true;
            /** @type {?} */
            let repository;
            try {
                repository = frameContext['repository'];
            }
            catch (error) {
                return empty();
            }
            /** @type {?} */
            const remove$ = repository.removeByIds(removableIds, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(() => {
                this.notifySer.success('删除成功！');
            }, error => {
                this.msgService.error(error);
            }), switchMap(() => {
                return of([]);
            }));
        }));
    }
}
OAListDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
OAListDataService.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService }
];
if (false) {
    /** @type {?} */
    OAListDataService.prototype.msgService;
    /** @type {?} */
    OAListDataService.prototype.notifySer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL29hLWNvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy9saXN0LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTNELE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBRTVCLFlBQ1UsVUFBMkIsRUFDM0IsU0FBd0I7UUFEeEIsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDM0IsY0FBUyxHQUFULFNBQVMsQ0FBZTtJQUM5QixDQUFDOzs7Ozs7SUFHRSxtQkFBbUIsQ0FBQyxHQUFhLEVBQUUsTUFBeUI7UUFDakUsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNuQyxPQUFPLEtBQUssRUFBRSxDQUFDO1NBQ2hCOztZQUVHLFlBQTBCO1FBQzlCLElBQUk7WUFDRixZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQTtTQUM1QztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQzdDOztjQUNLLFdBQVcsR0FBZ0IsWUFBWSxDQUFDLGFBQWEsQ0FBQzs7Y0FDdEQsWUFBWSxHQUFHLEVBQUU7UUFFdkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFOztrQkFDWCxPQUFPLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzdDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUN0RixZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNsQyxPQUFPLEtBQUssRUFBRSxDQUFDO1NBQ2hCOztjQUVLLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDaEQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDakIsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxPQUFPLEtBQUssRUFBRSxDQUFDO2FBQ2hCO1lBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7Z0JBQ2pDLE1BQU0sR0FBRyxJQUFJLENBQUM7YUFDZjtZQUNELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUM5QixNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDMUQ7WUFDRCxNQUFNLEdBQUcsQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDOztnQkFFdkMsVUFBMkI7WUFDL0IsSUFBSTtnQkFDRixVQUFVLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBO2FBQ3hDO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsT0FBTyxLQUFLLEVBQUUsQ0FBQzthQUNoQjs7a0JBRUssT0FBTyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztZQUU1RCxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLE9BQU8sS0FBSyxFQUFFLENBQUM7YUFDaEI7WUFFRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLEdBQUcsQ0FDRCxHQUFHLEVBQUU7Z0JBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxFQUNELEtBQUssQ0FBQyxFQUFFO2dCQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FDRixFQUNELFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUE5RUYsVUFBVTs7OztZQU5GLGVBQWU7WUFDZixhQUFhOzs7O0lBU2xCLHVDQUFtQzs7SUFDbkMsc0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhLCBSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgTm90aWZ5U2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgZW1wdHksIE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgY29uY2F0TWFwLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT0FMaXN0RGF0YVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgbXNnU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBub3RpZnlTZXI6IE5vdGlmeVNlcnZpY2UsXHJcbiAgKSB7IH1cclxuXHJcblxyXG4gIHB1YmxpYyBmaWx0ZXJBbmRSZW1vdmVSb3dzKGlkczogc3RyaW5nW10sIGlmU2F2ZT86IGJvb2xlYW4gfCBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFpZHMgfHwgaWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlci5lcnJvcign6K+36YCJ5oup6KaB5Yig6Zmk55qE5pWw5o2u77yBJyk7XHJcbiAgICAgIHJldHVybiBlbXB0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGZyYW1lQ29udGV4dCA9IHRoaXNbJ2NvbnRleHQnXS5mcmFtZUNvbnRleHRcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2FuIG5vdCBmaW5kIGZyYW1lQ29udGV4Jyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEgPSBmcmFtZUNvbnRleHRbJ2JpbmRpbmdEYXRhJ107XHJcbiAgICBjb25zdCByZW1vdmFibGVJZHMgPSBbXTtcclxuXHJcbiAgICBpZHMuZm9yRWFjaCgoaWQpID0+IHtcclxuICAgICAgY29uc3Qgcm93RGF0YSA9IGJpbmRpbmdEYXRhLmxpc3QuZmluZEJ5SWQoaWQpO1xyXG4gICAgICBpZiAocm93RGF0YSAmJiByb3dEYXRhWydiaWxsU3RhdGUnXSAmJiByb3dEYXRhWydiaWxsU3RhdGUnXVsnYmlsbFN0YXRlJ10gPT09ICdCaWxsaW5nJykge1xyXG4gICAgICAgIHJlbW92YWJsZUlkcy5wdXNoKGlkKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAoIXJlbW92YWJsZUlkcy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXIuZXJyb3IoJ+ayoeacieWPr+WIoOmZpOeahOaVsOaNru+8gScpO1xyXG4gICAgICByZXR1cm4gZW1wdHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhY3Rpb24kID0gdGhpcy5tc2dTZXJ2aWNlLmNvbmZpcm0oJ+ehruiupOWIoOmZpO+8nycpO1xyXG4gICAgcmV0dXJuIGFjdGlvbiQucGlwZShcclxuICAgICAgY29uY2F0TWFwKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGlmU2F2ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgIGlmU2F2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgaWZTYXZlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgaWZTYXZlID0gaWZTYXZlLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZScgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmU2F2ZSA9IChpZlNhdmUgPT09IGZhbHNlKSA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PjtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgcmVwb3NpdG9yeSA9IGZyYW1lQ29udGV4dFsncmVwb3NpdG9yeSddXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVtb3ZlJCA9IHJlcG9zaXRvcnkucmVtb3ZlQnlJZHMocmVtb3ZhYmxlSWRzLCBpZlNhdmUpO1xyXG5cclxuICAgICAgICBpZiAoIXJlbW92ZSQpIHtcclxuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZSQucGlwZShcclxuICAgICAgICAgIHRhcChcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMubm90aWZ5U2VyLnN1Y2Nlc3MoJ+WIoOmZpOaIkOWKn++8gScpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5tc2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKSxcclxuICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBvZihbXSk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0iXX0=