/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Subject } from "rxjs";
/** @enum {string} */
const ScheduleResultType = {
    Finally: "finally",
    Progress: "progress",
    Error: "error",
};
export { ScheduleResultType };
/**
 * @record
 */
export function ScheduleResult() { }
if (false) {
    /** @type {?} */
    ScheduleResult.prototype.type;
    /** @type {?} */
    ScheduleResult.prototype.recentResult;
    /** @type {?} */
    ScheduleResult.prototype.progressIndex;
    /** @type {?} */
    ScheduleResult.prototype.resultStack;
}
export class SyncTaskSchdule {
    constructor() {
        this.actIndex = 0;
        this.resultStack = [];
        this.status = 0; // 0 停止中 1 运行中
        // 0 停止中 1 运行中
        this.taskResult = new Subject();
        this.taskStack = [];
    }
    /**
     * @param {?} fun
     * @param {?=} params
     * @param {?=} context
     * @param {?=} key
     * @return {?}
     */
    propTask(fun, params = [], context, key) {
        this.taskStack.push({
            funName: key,
            fun: fun,
            params: params,
            context: context
        });
        // 未开始执行 需要手动吊起一次
        if (!this.status) {
            this.actTask().subscribe((res) => {
                this.taskResult.next(res);
            });
        }
        return this.taskResult;
    }
    /**
     * @return {?}
     */
    actTask() {
        this.status = 1;
        /** @type {?} */
        const result = new Subject();
        /** @type {?} */
        const actOne = this.taskStack[this.actIndex];
        try {
            actOne.fun.apply(actOne.context || window, actOne.params || []).subscribe((res) => {
                this.resultStack.push(res);
                result.next({
                    type: this.actIndex == this.taskStack.length - 1 ? ScheduleResultType.Finally : ScheduleResultType.Progress,
                    recentResult: res,
                    progressIndex: this.actIndex,
                    resultStack: this.resultStack
                });
                if (this.actIndex < this.taskStack.length - 1) {
                    this.actIndex++;
                    this.actTask();
                }
                else {
                    this.status = 0;
                }
            });
        }
        catch (error) {
            this.resultStack.push(error);
            result.next({
                type: ScheduleResultType.Error,
                recentResult: error,
                progressIndex: this.actIndex,
                resultStack: this.resultStack
            });
            if (this.actIndex < this.taskStack.length - 1) {
                this.actIndex++;
                this.actTask();
            }
            else {
                this.status = 0;
            }
        }
        return result;
    }
}
if (false) {
    /** @type {?} */
    SyncTaskSchdule.prototype.actIndex;
    /** @type {?} */
    SyncTaskSchdule.prototype.resultStack;
    /** @type {?} */
    SyncTaskSchdule.prototype.status;
    /** @type {?} */
    SyncTaskSchdule.prototype.taskResult;
    /** @type {?} */
    SyncTaskSchdule.prototype.taskStack;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luYy10YXNrLXNoY2hkdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9vYS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3N5bmMtdGFzay1zaGNoZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0lBSTdCLFNBQVUsU0FBUztJQUNuQixVQUFXLFVBQVU7SUFDckIsT0FBUSxPQUFPOzs7Ozs7QUFHakIsb0NBS0M7OztJQUpDLDhCQUF5Qjs7SUFDekIsc0NBQWtCOztJQUNsQix1Q0FBc0I7O0lBQ3RCLHFDQUF1Qjs7QUFJekIsTUFBTSxPQUFPLGVBQWU7SUFFMUI7UUFFUSxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRWIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFakIsV0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFBLGNBQWM7O1FBRXpCLGVBQVUsR0FBNEIsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUVwRCxjQUFTLEdBS1osRUFBRSxDQUFDO0lBZlEsQ0FBQzs7Ozs7Ozs7SUFpQlYsUUFBUSxDQUFDLEdBQWEsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFXO1FBQzlELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxHQUFHO1lBQ1osR0FBRyxFQUFFLEdBQUc7WUFDUixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxPQUFPO1NBQ2pCLENBQUMsQ0FBQztRQUNILGlCQUFpQjtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBbUIsRUFBRSxFQUFFO2dCQUMvQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM1QixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFTyxPQUFPO1FBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7O2NBQ1YsTUFBTSxHQUE0QixJQUFJLE9BQU8sRUFBRTs7Y0FDL0MsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM1QyxJQUFJO1lBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDaEYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFFBQVE7b0JBQzNHLFlBQVksRUFBRSxHQUFHO29CQUNqQixhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQzVCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztpQkFDOUIsQ0FBQyxDQUFBO2dCQUNGLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQzdDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDaEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUNoQjtxQkFBTTtvQkFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztpQkFDakI7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNWLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxLQUFLO2dCQUM5QixZQUFZLEVBQUUsS0FBSztnQkFDbkIsYUFBYSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7YUFDOUIsQ0FBQyxDQUFBO1lBQ0YsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDN0MsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNoQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDakI7U0FDRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FHRjs7O0lBdEVDLG1DQUFxQjs7SUFFckIsc0NBQXlCOztJQUV6QixpQ0FBbUI7O0lBRW5CLHFDQUE0RDs7SUFFNUQsb0NBS1EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcclxuXHJcblxyXG5leHBvcnQgZW51bSBTY2hlZHVsZVJlc3VsdFR5cGUge1xyXG4gIEZpbmFsbHkgPSBcImZpbmFsbHlcIixcclxuICBQcm9ncmVzcyA9IFwicHJvZ3Jlc3NcIixcclxuICBFcnJvciA9IFwiZXJyb3JcIixcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTY2hlZHVsZVJlc3VsdCB7XHJcbiAgdHlwZTogU2NoZWR1bGVSZXN1bHRUeXBlLFxyXG4gIHJlY2VudFJlc3VsdDogYW55LFxyXG4gIHByb2dyZXNzSW5kZXg6IE51bWJlcixcclxuICByZXN1bHRTdGFjazogQXJyYXk8YW55PlxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFN5bmNUYXNrU2NoZHVsZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIHByaXZhdGUgYWN0SW5kZXggPSAwO1xyXG5cclxuICBwcml2YXRlIHJlc3VsdFN0YWNrID0gW107XHJcblxyXG4gIHByaXZhdGUgc3RhdHVzID0gMDsvLyAwIOWBnOatouS4rSAxIOi/kOihjOS4rVxyXG5cclxuICBwcml2YXRlIHRhc2tSZXN1bHQ6IFN1YmplY3Q8U2NoZWR1bGVSZXN1bHQ+ID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgcHJpdmF0ZSB0YXNrU3RhY2s6IEFycmF5PHtcclxuICAgIGZ1bk5hbWU6IHN0cmluZyxcclxuICAgIGZ1bjogRnVuY3Rpb24sXHJcbiAgICBwYXJhbXM/OiBBcnJheTxhbnk+LFxyXG4gICAgY29udGV4dD86IGFueVxyXG4gIH0+ID0gW107XHJcblxyXG4gIHB1YmxpYyBwcm9wVGFzayhmdW46IEZ1bmN0aW9uLCBwYXJhbXMgPSBbXSwgY29udGV4dCwga2V5OiBzdHJpbmcpIHtcclxuICAgIHRoaXMudGFza1N0YWNrLnB1c2goe1xyXG4gICAgICBmdW5OYW1lOiBrZXksXHJcbiAgICAgIGZ1bjogZnVuLFxyXG4gICAgICBwYXJhbXM6IHBhcmFtcyxcclxuICAgICAgY29udGV4dDogY29udGV4dFxyXG4gICAgfSk7XHJcbiAgICAvLyDmnKrlvIDlp4vmiafooYwg6ZyA6KaB5omL5Yqo5ZCK6LW35LiA5qyhXHJcbiAgICBpZiAoIXRoaXMuc3RhdHVzKSB7XHJcbiAgICAgIHRoaXMuYWN0VGFzaygpLnN1YnNjcmliZSgocmVzOiBTY2hlZHVsZVJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHRoaXMudGFza1Jlc3VsdC5uZXh0KHJlcyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMudGFza1Jlc3VsdDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWN0VGFzaygpIHtcclxuICAgIHRoaXMuc3RhdHVzID0gMTtcclxuICAgIGNvbnN0IHJlc3VsdDogU3ViamVjdDxTY2hlZHVsZVJlc3VsdD4gPSBuZXcgU3ViamVjdCgpXHJcbiAgICBjb25zdCBhY3RPbmUgPSB0aGlzLnRhc2tTdGFja1t0aGlzLmFjdEluZGV4XTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGFjdE9uZS5mdW4uYXBwbHkoYWN0T25lLmNvbnRleHQgfHwgd2luZG93LCBhY3RPbmUucGFyYW1zIHx8IFtdKS5zdWJzY3JpYmUoKHJlcykgPT4ge1xyXG4gICAgICAgIHRoaXMucmVzdWx0U3RhY2sucHVzaChyZXMpO1xyXG4gICAgICAgIHJlc3VsdC5uZXh0KHtcclxuICAgICAgICAgIHR5cGU6IHRoaXMuYWN0SW5kZXggPT0gdGhpcy50YXNrU3RhY2subGVuZ3RoIC0gMSA/IFNjaGVkdWxlUmVzdWx0VHlwZS5GaW5hbGx5IDogU2NoZWR1bGVSZXN1bHRUeXBlLlByb2dyZXNzLFxyXG4gICAgICAgICAgcmVjZW50UmVzdWx0OiByZXMsXHJcbiAgICAgICAgICBwcm9ncmVzc0luZGV4OiB0aGlzLmFjdEluZGV4LFxyXG4gICAgICAgICAgcmVzdWx0U3RhY2s6IHRoaXMucmVzdWx0U3RhY2tcclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmICh0aGlzLmFjdEluZGV4IDwgdGhpcy50YXNrU3RhY2subGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgdGhpcy5hY3RJbmRleCsrO1xyXG4gICAgICAgICAgdGhpcy5hY3RUYXNrKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc3RhdHVzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5yZXN1bHRTdGFjay5wdXNoKGVycm9yKTtcclxuICAgICAgcmVzdWx0Lm5leHQoe1xyXG4gICAgICAgIHR5cGU6IFNjaGVkdWxlUmVzdWx0VHlwZS5FcnJvcixcclxuICAgICAgICByZWNlbnRSZXN1bHQ6IGVycm9yLFxyXG4gICAgICAgIHByb2dyZXNzSW5kZXg6IHRoaXMuYWN0SW5kZXgsXHJcbiAgICAgICAgcmVzdWx0U3RhY2s6IHRoaXMucmVzdWx0U3RhY2tcclxuICAgICAgfSlcclxuICAgICAgaWYgKHRoaXMuYWN0SW5kZXggPCB0aGlzLnRhc2tTdGFjay5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgdGhpcy5hY3RJbmRleCsrO1xyXG4gICAgICAgIHRoaXMuYWN0VGFzaygpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=