import { __assign } from 'tslib';
import { Subject, of } from 'rxjs';
import { DebugService, OverLayHiddenService } from '@farris/ui-common';
import { NG_VALUE_ACCESSOR, NgControl, RequiredValidator, FormsModule } from '@angular/forms';
import { Injectable, ElementRef, NgZone, Injector, Renderer2, ViewEncapsulation, ChangeDetectorRef, HostListener, Component, Input, Output, EventEmitter, forwardRef, ComponentFactoryResolver, ApplicationRef, Optional, Self, ViewChild, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { InputGroupModule } from '@farris/ui-input-group';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LanguageTextboxService = /** @class */ (function () {
    function LanguageTextboxService() {
        this.activePane = null;
        this.hide$ = new Subject();
    }
    /**
     * @param {?} p
     * @return {?}
     */
    LanguageTextboxService.prototype.setActivePane = /**
     * @param {?} p
     * @return {?}
     */
    function (p) {
        if (this.activePane && this.activePane != p) {
            this.activePane.hideDropDownPanel();
            this.activePane = null;
        }
        this.activePane = p;
    };
    /**
     * @return {?}
     */
    LanguageTextboxService.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.hide$.next();
    };
    LanguageTextboxService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LanguageTextboxService.ctorParameters = function () { return []; };
    /** @nocollapse */ LanguageTextboxService.ngInjectableDef = defineInjectable({ factory: function LanguageTextboxService_Factory() { return new LanguageTextboxService(); }, token: LanguageTextboxService, providedIn: "root" });
    return LanguageTextboxService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LanguageTextPanelComponent = /** @class */ (function () {
    function LanguageTextPanelComponent(el, ngzone, injector, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.opened = false;
        this.width = 365;
        this.height = 200;
        this.items = [];
        this.data = {};
        this.maxWords = null;
        this.itemClick = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.showPanel = new EventEmitter();
        this.currentItem = undefined;
        this.languageInputRef = null;
        this.panelClickHandler = undefined;
        this.cd = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.onEnterHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onItemClick(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.onEscHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.hide(event);
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.panelClickHandler = _this.render.listen(_this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e) {
                    e.stopPropagation();
                }
                // let name = e.target.nodeName || e.target.tagName;
                // if (!name) {
                //     name = e.target.path[0].localeName;
                // }
                // name = name.toLowerCase();
                if (_this.inputRef) {
                    _this.inputRef.lts.hide();
                }
                return false;
            }));
        }));
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.opened = false;
        if (this.panelClickHandler) {
            this.panelClickHandler();
        }
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.getPositionStyles = /**
     * @return {?}
     */
    function () {
        return {
            left: this.left + 'px',
            top: this.top + 'px',
            width: this.width + 'px',
        };
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.getPanelDivElement = /**
     * @private
     * @return {?}
     */
    function () {
        return this.el.nativeElement.querySelector('.language-textbox-panel');
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.resetPanelPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var panelEle = this.getPanelDivElement();
        if (panelEle) {
            /** @type {?} */
            var panelHeight = panelEle.offsetHeight;
            /** @type {?} */
            var rect = this.inputRef.input.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var winHeight = window.innerHeight;
            /** @type {?} */
            var postop = rect.top;
            if (winHeight - postop - rect.height < panelHeight) {
                postop = postop - panelHeight;
            }
            else {
                postop = postop + rect.height;
            }
            /** @type {?} */
            var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
            postop += scrollTop;
            panelEle.style.top = postop + "px";
        }
        return panelEle;
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.setInputFocus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 第1个input 获得焦点
        // 获取当前语言的索引，根据索引值定位 input
        /** @type {?} */
        var el = this.getPanelDivElement();
        if (!el) {
            return;
        }
        /** @type {?} */
        var focusInput = el.querySelector('input');
        if (this.currentItem && (!this.languageInputRef || this.languageInputRef['autoFocus'])) {
            /** @type {?} */
            var idx = this.items.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.code === _this.currentItem.code; }));
            if (idx > -1) {
                focusInput = el.querySelectorAll('input')[idx];
            }
        }
        if (focusInput) {
            focusInput.focus();
        }
    };
    /**
     * @param {?} input
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.show = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        var _this = this;
        this.inputRef = input;
        this.render.setStyle(document.body, 'overflow', 'hidden');
        this.opened = true;
        if (this.cd) {
            this.cd.detectChanges();
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var el = _this.resetPanelPosition();
            if (!el) {
                return;
            }
            /** @type {?} */
            var transitionFlag = true;
            el.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    _this.showPanel.emit(_this);
                }
            }), false);
            // this.render.removeClass(el, 'hide');
            _this.render.addClass(el, 'f-area-show');
        }));
        return of({ element: this.el });
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.hide = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        this.opened = false;
        /** @type {?} */
        var el = this.getPanelDivElement();
        // this.render.addClass(el, 'f-area-hide');
        this.render.removeStyle(document.body, 'overflow');
        this.hidePanel.emit();
        if ($event) {
            $event.stopPropagation();
            return false;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.onItemClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.currentItem = item;
        this.itemClick.emit(this.data);
        $event.stopPropagation();
        return false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.inputClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        return false;
    };
    LanguageTextPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'language-textbox-panel',
                    template: "\n        <div *ngIf=\"opened\" class=\"language-textbox-panel f-area-hide\" [ngStyle]=\"getPositionStyles()\" (click)=\"inputClick($event)\">\n            <ul class=\"list-group\">\n                <li class=\"list-group-item border-0 p-2 px-2\"  *ngFor=\"let item of items\">\n                    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n                        <div class=\"form-group farris-form-group\">\n                            <label for=\"hpinput01\" class=\"col-form-label\">\n                                <span class=\"farris-label-text\" [attr.title]=\"'languageLabel.'+item.code | locale: item.name\">\n                                    {{ 'languageLabel.'+item.code | locale: item.name }}</span>\n                            </label>\n                            <div class=\"farris-input-wrap\">\n                                <input type=\"input\" (click)=\"inputClick($event)\" maxlength=\"{{maxWords? maxWords[item.code] : ''}}\" [(ngModel)]=\"data[item.code]\" class=\"form-control\">\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item border-0 p-2 px-3 text-right\">\n                    <button class=\"btn btn-secondary mr-2\" (click)=\"hide($event)\">{{ 'languageLabel.cancel'| locale: '\u53D6\u6D88' }}</button>\n                    <button class=\"btn btn-primary\" (click)=\"onItemClick($event)\">{{ 'languageLabel.ok'| locale: '\u786E\u5B9A' }}</button>\n                </li>\n            </ul>\n        </div>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".language-textbox-panel {\n            overflow: hidden;\n            overflow-y: auto;\n            padding: 5px;\n            position: absolute;\n            z-index: 99999;\n            background: white;\n            box-shadow: 2px 2px 5px #c6c6c6;\n        }\n\n        .language-textbox-panel .dropdown-menu {\n            left: -5px;\n            box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.37);\n            position: relative;\n        }\n\n        .language-selected {\n            background-color: #1890ff!important;\n            color: #fff;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    LanguageTextPanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 }
    ]; };
    LanguageTextPanelComponent.propDecorators = {
        opened: [{ type: Input }],
        left: [{ type: Input }],
        top: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        items: [{ type: Input }],
        data: [{ type: Input }],
        maxWords: [{ type: Input }],
        itemClick: [{ type: Output }],
        hidePanel: [{ type: Output }],
        showPanel: [{ type: Output }],
        onEnterHandler: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
        onEscHandler: [{ type: HostListener, args: ['document:keydown.esc', ['$event'],] }]
    };
    return LanguageTextPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LANGUAGE_TEXTBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return LanguageTextboxComponent; })),
    multi: true
};
var LanguageTextboxComponent = /** @class */ (function () {
    function LanguageTextboxComponent(el, cfr, injector, ngZone, applicationRef, renderer, requiredValidator, cd) {
        var _this = this;
        this.el = el;
        this.cfr = cfr;
        this.injector = injector;
        this.ngZone = ngZone;
        this.applicationRef = applicationRef;
        this.renderer = renderer;
        this.requiredValidator = requiredValidator;
        this.cd = cd;
        this.disabled = false;
        this.readonly = false;
        this.editable = false;
        this.enableClear = false;
        this.languages = [];
        this.panelHeight = 260;
        this.panelWidth = 365;
        this.maxWords = null;
        /**
         * 面板输入框根据LOCALE_ID 自动获得焦点
         * 设为 false 时，仅第1个获得焦点
         */
        this.autoFocus = true;
        this.openOnFocus = true;
        this.groupIcon = '<span class="f-icon f-icon-yxs_earth"></span>';
        this.currentLanguageItem = undefined;
        this.data = {};
        this.value = '';
        this.onTextBoxclickHandler = null;
        this.lts = null;
        this.overLayService = null;
        this.onModelChange = (/**
         * @param {?=} obj
         * @return {?}
         */
        function (obj) { });
        this.onModelTouched = (/**
         * @param {?=} obj
         * @return {?}
         */
        function (obj) { });
        this.debugSer = null;
        this.localeService = this.injector.get(LocaleService);
        this.lts = this.injector.get(LanguageTextboxService, null);
        this.debugSer = this.injector.get(DebugService, null);
        if (!this.lts) {
            this.lts = new LanguageTextboxService();
        }
        this.lts.hide$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.hideDropDownPanel();
        }));
        this.overLayService = this.injector.get(OverLayHiddenService, null);
        if (!this.overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
    }
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.editable) {
            this.editable = this.languages && this.languages.length && this.languages.length === 1;
        }
        this.bindLanguageInfo(this.languages);
        this.onTextBoxclickHandler = this.renderer.listen(this.input.textbox.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            if (_this.editable) {
                _this.hideDropDownPanel();
                return;
            }
            if (!_this.comboPanelRef) {
                _this.showDropDownPanel();
            }
        }));
        this.ngCtrl = this.injector.get(NgControl, null);
        this.registerKeyDown();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LanguageTextboxComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.languages && !changes.languages.isFirstChange()) {
            this.bindLanguageInfo(changes.languages.currentValue);
            this.setValue();
        }
    };
    /**
     * @private
     * @param {?} languages
     * @return {?}
     */
    LanguageTextboxComponent.prototype.bindLanguageInfo = /**
     * @private
     * @param {?} languages
     * @return {?}
     */
    function (languages) {
        if (languages && languages.length) {
            if (!this.currentLanguage) {
                /** @type {?} */
                var runtimeLanguageCode_1 = this.localeService.localeId;
                if (runtimeLanguageCode_1) {
                    /** @type {?} */
                    var defaultLang = languages.find((/**
                     * @param {?} l
                     * @return {?}
                     */
                    function (l) { return l.code === runtimeLanguageCode_1; }));
                    if (defaultLang) {
                        this.currentLanguage = defaultLang.code;
                        this.currentLanguageItem = defaultLang;
                    }
                    else {
                        if (languages.length) {
                            this.currentLanguage = languages[0].code;
                            this.currentLanguageItem = languages[0];
                        }
                    }
                }
                else {
                    if (this.debugSer) {
                        this.debugSer.warn('当前上下文环境未取到语言代码。');
                    }
                }
            }
            else {
                this.currentLanguageItem = this.getLanguageItem(this.currentLanguage);
            }
        }
        else {
            if (this.debugSer) {
                this.debugSer.warn("Please set  the '[languages]' data.");
            }
        }
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.onKeyDownHandler) {
            this.onKeyDownHandler();
        }
        this.hideDropDownPanel();
        if (this.onTextBoxclickHandler) {
            this.onTextBoxclickHandler();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextboxComponent.prototype.registerKeyDown = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var textEl = this.input.textbox.nativeElement;
        this.onKeyDownHandler = this.renderer.listen(textEl, 'keydown', this.onKeyDown.bind(this));
        // this.ngZone.runOutsideAngular(() => {
        // });
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onKeyDown = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
            /** @type {?} */
            var keyCode = $event.keyCode;
            // F2
            if (keyCode === 113) {
                this.showDropDownPanel();
            }
            if (keyCode !== 38 && keyCode !== 40) {
                return;
            }
            /** @type {?} */
            var languageItemIndex = this.languages.findIndex((/**
             * @param {?} l
             * @return {?}
             */
            function (l) { return l.code === _this.currentLanguageItem.code; }));
            switch (keyCode) {
                case 38:
                    if (languageItemIndex === 0) {
                        this.currentLanguageItem = this.languages[this.languages.length - 1];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex - 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
                case 40:
                    if (languageItemIndex === this.languages.length - 1) {
                        this.currentLanguageItem = this.languages[0];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex + 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
            }
            this.setValue();
            this.cd.markForCheck();
            this.cd.detectChanges();
            // this.input.cd.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.input.setFocusToEnd();
            }));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.openOnFocus) {
            this.showDropDownPanel();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        // this.hideDropDownPanel();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onIconClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
            $event.originalEvent.preventDefault();
        }
        if (!this.comboPanelRef) {
            this.showDropDownPanel();
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextboxComponent.prototype.getCliecntRect = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rect = this.input.el.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var winWidth = window.innerWidth;
        /** @type {?} */
        var winHeight = window.innerHeight;
        /** @type {?} */
        var posleft = rect.left;
        if (winWidth - posleft < this.panelWidth) {
            posleft = posleft + rect.width - this.panelWidth;
        }
        /** @type {?} */
        var postop = rect.top;
        if (winHeight - postop < this.panelHeight) {
            postop = postop - rect.height;
        }
        else {
            postop = postop + rect.height;
        }
        return {
            left: posleft,
            // + rect.width - this.panelWidth
            top: postop,
            height: this.panelHeight,
            width: this.panelWidth
        };
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextboxComponent.prototype.updateLangOrder = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var idx = -1;
        /** @type {?} */
        var curritem = this.languages.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            /** @type {?} */
            var f = n.code === _this.localeService.localeId;
            if (f) {
                idx = i;
            }
            return f;
        }));
        if (curritem) {
            /** @type {?} */
            var _item = Object.assign({}, curritem);
            this.languages.splice(idx, 1);
            this.languages.unshift(_item);
        }
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.showDropDownPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.languages || this.languages.length === 1) {
            return;
        }
        if (this.readonly || this.disabled) {
            return;
        }
        if (!this.comboPanelRef) {
            /** @type {?} */
            var compFac = this.cfr.resolveComponentFactory(LanguageTextPanelComponent);
            this.comboPanelRef = compFac.create(this.injector);
            this.applicationRef.attachView(this.comboPanelRef.hostView);
            Object.assign(this.comboPanelRef.instance, this.getCliecntRect());
            /** @type {?} */
            var panelRefEl_1 = this.comboPanelRef.location.nativeElement;
            document.body.appendChild(panelRefEl_1);
            this.renderer.addClass(panelRefEl_1, 'overlay-pane');
            // this.renderer.setStyle(panelRefEl, 'width', '100vw');
            // this.renderer.setStyle(panelRefEl, 'height', '100vh');
            this.renderer.setStyle(panelRefEl_1, 'z-index', '99999999');
            this.renderer.setStyle(panelRefEl_1, 'left', '0');
            this.renderer.setStyle(panelRefEl_1, 'top', '0');
            // 根据上下文语言，自动调整语言列表的顺序，将当前语言设为第1个
            this.updateLangOrder();
            this.comboPanelRef.instance.items = this.languages;
            this.comboPanelRef.instance.languageInputRef = this;
            this.comboPanelRef.instance.data = __assign({}, this.data);
            this.comboPanelRef.instance.currentItem = this.currentLanguageItem;
            this.comboPanelRef.instance.maxWords = this.maxWords;
            this.comboPanelRef.instance.itemClick.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // this.currentLanguageItem = item;
                // this.currentLanguage = item.code;
                _this.data = __assign({}, data);
                _this.hideDropDownPanel();
                _this.setValue();
            }));
            this.comboPanelRef.instance.hidePanel.subscribe((/**
             * @return {?}
             */
            function () {
                _this.hideDropDownPanel();
            }));
            this.comboPanelRef.instance.showPanel.subscribe((/**
             * @param {?} panelIns
             * @return {?}
             */
            function (panelIns) {
                panelIns.setInputFocus();
            }));
            this.comboPanelRef.instance.show(this);
            this.lts.setActivePane(this);
            // 注册鼠标滚轮，点击事件，用于隐藏Panel
            this.overLayService.registerMouseEvent(panelRefEl_1, (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (panelRefEl_1.contains(e.target)) {
                    return;
                }
                _this.hideDropDownPanel();
            }));
        }
        else {
            this.hideDropDownPanel();
        }
    };
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    LanguageTextboxComponent.prototype.getLanguageItem = /**
     * @private
     * @param {?} code
     * @return {?}
     */
    function (code) {
        return this.languages.find((/**
         * @param {?} l
         * @return {?}
         */
        function (l) { return l.code === code; }));
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onClear = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?=} val
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onChanges = /**
     * @param {?=} val
     * @return {?}
     */
    function (val) {
        this.data[this.currentLanguage] = this.value;
        this.onModelChange(__assign({}, this.data));
        this.onModelTouched(__assign({}, this.data));
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.setValue = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.value = this.data[this.currentLanguage] || '';
        }
        else {
            this.value = '';
        }
        this.onChanges();
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.hideDropDownPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer.removeStyle(document.body, 'overflow');
        if (this.comboPanelRef && this.comboPanelRef.instance) {
            // if (this.comboPanelRef.instance.opened) {
            //     this.comboPanelRef.instance.hide();
            // }
            this.comboPanelRef.instance.opened = false;
            /** @type {?} */
            var componentEl = this.comboPanelRef.location.nativeElement;
            if (componentEl.parentNode) {
                if (this.overLayService) {
                    this.overLayService.destory(componentEl);
                }
                componentEl.parentNode.removeChild(componentEl);
            }
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.input.focus();
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (_this.comboPanelRef) {
                        _this.comboPanelRef.destroy();
                        _this.comboPanelRef = null;
                    }
                }), 100);
            }));
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    LanguageTextboxComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && Object.keys(obj).length) {
            this.data = obj;
            this.value = obj[this.currentLanguage];
        }
        else {
            this.data = {};
            this.value = '';
        }
        this.cd.detectChanges();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LanguageTextboxComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LanguageTextboxComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    LanguageTextboxComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    LanguageTextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'language-textbox',
                    template: "\n        <input-group #input\n            [customCls] = \"'farris-language-textbox'\"\n            [groupText]=\"groupIcon\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [editable]=\"editable\"\n            [(ngModel)]=\"value\"\n            [enableClear]=\"false\"\n            [value]=\"value\"\n            (valueChange)=\"onChanges($event)\"\n            (clear)=\"onClear()\"\n            (clickHandle)=\"onIconClick($event)\"\n            (focusHandle)=\"onFocus($event)\"\n        >\n        </input-group>\n    ",
                    providers: [LANGUAGE_TEXTBOX_VALUE_ACCESSOR],
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n        .farris-language-textbox .input-group-text {\n            padding-right: 3px;\n        }\n        .farris-language-textbox .input-group-text .language-text {\n            padding-right: 3px;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    LanguageTextboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: NgZone },
        { type: ApplicationRef },
        { type: Renderer2 },
        { type: RequiredValidator, decorators: [{ type: Optional }, { type: Self }] },
        { type: ChangeDetectorRef }
    ]; };
    LanguageTextboxComponent.propDecorators = {
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        enableClear: [{ type: Input }],
        languages: [{ type: Input }],
        currentLanguage: [{ type: Input }],
        panelHeight: [{ type: Input }],
        panelWidth: [{ type: Input }],
        maxWords: [{ type: Input }],
        autoFocus: [{ type: Input }],
        input: [{ type: ViewChild, args: ['input',] }],
        openOnFocus: [{ type: Input }]
    };
    return LanguageTextboxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LanguageTextboxModule = /** @class */ (function () {
    function LanguageTextboxModule() {
    }
    LanguageTextboxModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        LanguageTextboxComponent,
                        LanguageTextPanelComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        InputGroupModule,
                        LocaleModule.forRoot()
                    ],
                    exports: [LanguageTextboxComponent],
                    providers: [],
                    entryComponents: [LanguageTextPanelComponent]
                },] }
    ];
    return LanguageTextboxModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LanguageTextPanelComponent, LANGUAGE_TEXTBOX_VALUE_ACCESSOR, LanguageTextboxComponent, LanguageTextboxModule };

//# sourceMappingURL=farris-ui-language-textbox.js.map