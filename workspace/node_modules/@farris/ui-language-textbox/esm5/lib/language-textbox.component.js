/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LanguageTextboxService } from './language-textbox.service';
/*
* @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-03-12 15:46:47
 * @LastEditTime: 2019-04-08 18:46:53
 */
import { Component, Input, ViewChild, ElementRef, ComponentFactoryResolver, Injector, ApplicationRef, NgZone, Renderer2, ViewEncapsulation, forwardRef, Optional, Self } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl, RequiredValidator } from '@angular/forms';
import { InputGroupComponent } from '@farris/ui-input-group';
import { LanguageTextPanelComponent } from './language-textbox-panel.component';
import { LocaleService } from '@farris/ui-locale';
import { ChangeDetectorRef } from '@angular/core';
import { DebugService, OverLayHiddenService } from '@farris/ui-common';
/** @type {?} */
export var LANGUAGE_TEXTBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return LanguageTextboxComponent; })),
    multi: true
};
/**
 * @record
 */
export function LanguageTextMaxLength() { }
var LanguageTextboxComponent = /** @class */ (function () {
    function LanguageTextboxComponent(el, cfr, injector, ngZone, applicationRef, renderer, requiredValidator, cd) {
        var _this = this;
        this.el = el;
        this.cfr = cfr;
        this.injector = injector;
        this.ngZone = ngZone;
        this.applicationRef = applicationRef;
        this.renderer = renderer;
        this.requiredValidator = requiredValidator;
        this.cd = cd;
        this.disabled = false;
        this.readonly = false;
        this.editable = false;
        this.enableClear = false;
        this.languages = [];
        this.panelHeight = 260;
        this.panelWidth = 365;
        this.maxWords = null;
        /**
         * 面板输入框根据LOCALE_ID 自动获得焦点
         * 设为 false 时，仅第1个获得焦点
         */
        this.autoFocus = true;
        this.openOnFocus = true;
        this.groupIcon = '<span class="f-icon f-icon-yxs_earth"></span>';
        this.currentLanguageItem = undefined;
        this.data = {};
        this.value = '';
        this.onTextBoxclickHandler = null;
        this.lts = null;
        this.overLayService = null;
        this.onModelChange = (/**
         * @param {?=} obj
         * @return {?}
         */
        function (obj) { });
        this.onModelTouched = (/**
         * @param {?=} obj
         * @return {?}
         */
        function (obj) { });
        this.debugSer = null;
        this.localeService = this.injector.get(LocaleService);
        this.lts = this.injector.get(LanguageTextboxService, null);
        this.debugSer = this.injector.get(DebugService, null);
        if (!this.lts) {
            this.lts = new LanguageTextboxService();
        }
        this.lts.hide$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.hideDropDownPanel();
        }));
        this.overLayService = this.injector.get(OverLayHiddenService, null);
        if (!this.overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
    }
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.editable) {
            this.editable = this.languages && this.languages.length && this.languages.length === 1;
        }
        this.bindLanguageInfo(this.languages);
        this.onTextBoxclickHandler = this.renderer.listen(this.input.textbox.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            if (_this.editable) {
                _this.hideDropDownPanel();
                return;
            }
            if (!_this.comboPanelRef) {
                _this.showDropDownPanel();
            }
        }));
        this.ngCtrl = this.injector.get(NgControl, null);
        this.registerKeyDown();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LanguageTextboxComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.languages && !changes.languages.isFirstChange()) {
            this.bindLanguageInfo(changes.languages.currentValue);
            this.setValue();
        }
    };
    /**
     * @private
     * @param {?} languages
     * @return {?}
     */
    LanguageTextboxComponent.prototype.bindLanguageInfo = /**
     * @private
     * @param {?} languages
     * @return {?}
     */
    function (languages) {
        if (languages && languages.length) {
            if (!this.currentLanguage) {
                /** @type {?} */
                var runtimeLanguageCode_1 = this.localeService.localeId;
                if (runtimeLanguageCode_1) {
                    /** @type {?} */
                    var defaultLang = languages.find((/**
                     * @param {?} l
                     * @return {?}
                     */
                    function (l) { return l.code === runtimeLanguageCode_1; }));
                    if (defaultLang) {
                        this.currentLanguage = defaultLang.code;
                        this.currentLanguageItem = defaultLang;
                    }
                    else {
                        if (languages.length) {
                            this.currentLanguage = languages[0].code;
                            this.currentLanguageItem = languages[0];
                        }
                    }
                }
                else {
                    if (this.debugSer) {
                        this.debugSer.warn('当前上下文环境未取到语言代码。');
                    }
                }
            }
            else {
                this.currentLanguageItem = this.getLanguageItem(this.currentLanguage);
            }
        }
        else {
            if (this.debugSer) {
                this.debugSer.warn("Please set  the '[languages]' data.");
            }
        }
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.onKeyDownHandler) {
            this.onKeyDownHandler();
        }
        this.hideDropDownPanel();
        if (this.onTextBoxclickHandler) {
            this.onTextBoxclickHandler();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextboxComponent.prototype.registerKeyDown = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var textEl = this.input.textbox.nativeElement;
        this.onKeyDownHandler = this.renderer.listen(textEl, 'keydown', this.onKeyDown.bind(this));
        // this.ngZone.runOutsideAngular(() => {
        // });
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onKeyDown = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
            /** @type {?} */
            var keyCode = $event.keyCode;
            // F2
            if (keyCode === 113) {
                this.showDropDownPanel();
            }
            if (keyCode !== 38 && keyCode !== 40) {
                return;
            }
            /** @type {?} */
            var languageItemIndex = this.languages.findIndex((/**
             * @param {?} l
             * @return {?}
             */
            function (l) { return l.code === _this.currentLanguageItem.code; }));
            switch (keyCode) {
                case 38:
                    if (languageItemIndex === 0) {
                        this.currentLanguageItem = this.languages[this.languages.length - 1];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex - 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
                case 40:
                    if (languageItemIndex === this.languages.length - 1) {
                        this.currentLanguageItem = this.languages[0];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex + 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
            }
            this.setValue();
            this.cd.markForCheck();
            this.cd.detectChanges();
            // this.input.cd.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.input.setFocusToEnd();
            }));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.openOnFocus) {
            this.showDropDownPanel();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        // this.hideDropDownPanel();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onIconClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
            $event.originalEvent.preventDefault();
        }
        if (!this.comboPanelRef) {
            this.showDropDownPanel();
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextboxComponent.prototype.getCliecntRect = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rect = this.input.el.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var winWidth = window.innerWidth;
        /** @type {?} */
        var winHeight = window.innerHeight;
        /** @type {?} */
        var posleft = rect.left;
        if (winWidth - posleft < this.panelWidth) {
            posleft = posleft + rect.width - this.panelWidth;
        }
        /** @type {?} */
        var postop = rect.top;
        if (winHeight - postop < this.panelHeight) {
            postop = postop - rect.height;
        }
        else {
            postop = postop + rect.height;
        }
        return {
            left: posleft,
            // + rect.width - this.panelWidth
            top: postop,
            height: this.panelHeight,
            width: this.panelWidth
        };
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextboxComponent.prototype.updateLangOrder = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var idx = -1;
        /** @type {?} */
        var curritem = this.languages.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            /** @type {?} */
            var f = n.code === _this.localeService.localeId;
            if (f) {
                idx = i;
            }
            return f;
        }));
        if (curritem) {
            /** @type {?} */
            var _item = Object.assign({}, curritem);
            this.languages.splice(idx, 1);
            this.languages.unshift(_item);
        }
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.showDropDownPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.languages || this.languages.length === 1) {
            return;
        }
        if (this.readonly || this.disabled) {
            return;
        }
        if (!this.comboPanelRef) {
            /** @type {?} */
            var compFac = this.cfr.resolveComponentFactory(LanguageTextPanelComponent);
            this.comboPanelRef = compFac.create(this.injector);
            this.applicationRef.attachView(this.comboPanelRef.hostView);
            Object.assign(this.comboPanelRef.instance, this.getCliecntRect());
            /** @type {?} */
            var panelRefEl_1 = this.comboPanelRef.location.nativeElement;
            document.body.appendChild(panelRefEl_1);
            this.renderer.addClass(panelRefEl_1, 'overlay-pane');
            // this.renderer.setStyle(panelRefEl, 'width', '100vw');
            // this.renderer.setStyle(panelRefEl, 'height', '100vh');
            this.renderer.setStyle(panelRefEl_1, 'z-index', '99999999');
            this.renderer.setStyle(panelRefEl_1, 'left', '0');
            this.renderer.setStyle(panelRefEl_1, 'top', '0');
            // 根据上下文语言，自动调整语言列表的顺序，将当前语言设为第1个
            this.updateLangOrder();
            this.comboPanelRef.instance.items = this.languages;
            this.comboPanelRef.instance.languageInputRef = this;
            this.comboPanelRef.instance.data = tslib_1.__assign({}, this.data);
            this.comboPanelRef.instance.currentItem = this.currentLanguageItem;
            this.comboPanelRef.instance.maxWords = this.maxWords;
            this.comboPanelRef.instance.itemClick.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // this.currentLanguageItem = item;
                // this.currentLanguage = item.code;
                _this.data = tslib_1.__assign({}, data);
                _this.hideDropDownPanel();
                _this.setValue();
            }));
            this.comboPanelRef.instance.hidePanel.subscribe((/**
             * @return {?}
             */
            function () {
                _this.hideDropDownPanel();
            }));
            this.comboPanelRef.instance.showPanel.subscribe((/**
             * @param {?} panelIns
             * @return {?}
             */
            function (panelIns) {
                panelIns.setInputFocus();
            }));
            this.comboPanelRef.instance.show(this);
            this.lts.setActivePane(this);
            // 注册鼠标滚轮，点击事件，用于隐藏Panel
            this.overLayService.registerMouseEvent(panelRefEl_1, (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (panelRefEl_1.contains(e.target)) {
                    return;
                }
                _this.hideDropDownPanel();
            }));
        }
        else {
            this.hideDropDownPanel();
        }
    };
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    LanguageTextboxComponent.prototype.getLanguageItem = /**
     * @private
     * @param {?} code
     * @return {?}
     */
    function (code) {
        return this.languages.find((/**
         * @param {?} l
         * @return {?}
         */
        function (l) { return l.code === code; }));
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onClear = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?=} val
     * @return {?}
     */
    LanguageTextboxComponent.prototype.onChanges = /**
     * @param {?=} val
     * @return {?}
     */
    function (val) {
        this.data[this.currentLanguage] = this.value;
        this.onModelChange(tslib_1.__assign({}, this.data));
        this.onModelTouched(tslib_1.__assign({}, this.data));
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.setValue = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.value = this.data[this.currentLanguage] || '';
        }
        else {
            this.value = '';
        }
        this.onChanges();
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    LanguageTextboxComponent.prototype.hideDropDownPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer.removeStyle(document.body, 'overflow');
        if (this.comboPanelRef && this.comboPanelRef.instance) {
            // if (this.comboPanelRef.instance.opened) {
            //     this.comboPanelRef.instance.hide();
            // }
            this.comboPanelRef.instance.opened = false;
            /** @type {?} */
            var componentEl = this.comboPanelRef.location.nativeElement;
            if (componentEl.parentNode) {
                if (this.overLayService) {
                    this.overLayService.destory(componentEl);
                }
                componentEl.parentNode.removeChild(componentEl);
            }
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.input.focus();
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (_this.comboPanelRef) {
                        _this.comboPanelRef.destroy();
                        _this.comboPanelRef = null;
                    }
                }), 100);
            }));
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    LanguageTextboxComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && Object.keys(obj).length) {
            this.data = obj;
            this.value = obj[this.currentLanguage];
        }
        else {
            this.data = {};
            this.value = '';
        }
        this.cd.detectChanges();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LanguageTextboxComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LanguageTextboxComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    LanguageTextboxComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    LanguageTextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'language-textbox',
                    template: "\n        <input-group #input\n            [customCls] = \"'farris-language-textbox'\"\n            [groupText]=\"groupIcon\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [editable]=\"editable\"\n            [(ngModel)]=\"value\"\n            [enableClear]=\"false\"\n            [value]=\"value\"\n            (valueChange)=\"onChanges($event)\"\n            (clear)=\"onClear()\"\n            (clickHandle)=\"onIconClick($event)\"\n            (focusHandle)=\"onFocus($event)\"\n        >\n        </input-group>\n    ",
                    providers: [LANGUAGE_TEXTBOX_VALUE_ACCESSOR],
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n        .farris-language-textbox .input-group-text {\n            padding-right: 3px;\n        }\n        .farris-language-textbox .input-group-text .language-text {\n            padding-right: 3px;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    LanguageTextboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: NgZone },
        { type: ApplicationRef },
        { type: Renderer2 },
        { type: RequiredValidator, decorators: [{ type: Optional }, { type: Self }] },
        { type: ChangeDetectorRef }
    ]; };
    LanguageTextboxComponent.propDecorators = {
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        enableClear: [{ type: Input }],
        languages: [{ type: Input }],
        currentLanguage: [{ type: Input }],
        panelHeight: [{ type: Input }],
        panelWidth: [{ type: Input }],
        maxWords: [{ type: Input }],
        autoFocus: [{ type: Input }],
        input: [{ type: ViewChild, args: ['input',] }],
        openOnFocus: [{ type: Input }]
    };
    return LanguageTextboxComponent;
}());
export { LanguageTextboxComponent };
if (false) {
    /** @type {?} */
    LanguageTextboxComponent.prototype.disabled;
    /** @type {?} */
    LanguageTextboxComponent.prototype.readonly;
    /** @type {?} */
    LanguageTextboxComponent.prototype.editable;
    /** @type {?} */
    LanguageTextboxComponent.prototype.enableClear;
    /** @type {?} */
    LanguageTextboxComponent.prototype.languages;
    /** @type {?} */
    LanguageTextboxComponent.prototype.currentLanguage;
    /** @type {?} */
    LanguageTextboxComponent.prototype.panelHeight;
    /** @type {?} */
    LanguageTextboxComponent.prototype.panelWidth;
    /** @type {?} */
    LanguageTextboxComponent.prototype.maxWords;
    /**
     * 面板输入框根据LOCALE_ID 自动获得焦点
     * 设为 false 时，仅第1个获得焦点
     * @type {?}
     */
    LanguageTextboxComponent.prototype.autoFocus;
    /** @type {?} */
    LanguageTextboxComponent.prototype.input;
    /** @type {?} */
    LanguageTextboxComponent.prototype.openOnFocus;
    /** @type {?} */
    LanguageTextboxComponent.prototype.groupIcon;
    /** @type {?} */
    LanguageTextboxComponent.prototype.comboPanelRef;
    /** @type {?} */
    LanguageTextboxComponent.prototype.currentLanguageItem;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.ngCtrl;
    /** @type {?} */
    LanguageTextboxComponent.prototype.value;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onKeyDownHandler;
    /** @type {?} */
    LanguageTextboxComponent.prototype.localeService;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onTextBoxclickHandler;
    /** @type {?} */
    LanguageTextboxComponent.prototype.lts;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.overLayService;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onModelChange;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.requiredValidator;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,