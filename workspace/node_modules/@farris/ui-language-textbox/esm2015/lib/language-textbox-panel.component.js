/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, NgZone, Injector, Renderer2, ViewEncapsulation, ChangeDetectorRef, HostListener } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-03-12 18:21:51
 * @LastEditTime: 2019-03-13 13:36:58
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { of } from 'rxjs';
export class LanguageTextPanelComponent {
    /**
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     */
    constructor(el, ngzone, injector, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.opened = false;
        this.width = 365;
        this.height = 200;
        this.items = [];
        this.data = {};
        this.maxWords = null;
        this.itemClick = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.showPanel = new EventEmitter();
        this.currentItem = undefined;
        this.languageInputRef = null;
        this.panelClickHandler = undefined;
        this.cd = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnterHandler(event) {
        this.onItemClick(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEscHandler(event) {
        this.hide(event);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.panelClickHandler = this.render.listen(this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e) {
                    e.stopPropagation();
                }
                // let name = e.target.nodeName || e.target.tagName;
                // if (!name) {
                //     name = e.target.path[0].localeName;
                // }
                // name = name.toLowerCase();
                if (this.inputRef) {
                    this.inputRef.lts.hide();
                }
                return false;
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.opened = false;
        if (this.panelClickHandler) {
            this.panelClickHandler();
        }
    }
    /**
     * @return {?}
     */
    getPositionStyles() {
        return {
            left: this.left + 'px',
            top: this.top + 'px',
            width: this.width + 'px',
        };
    }
    /**
     * @private
     * @return {?}
     */
    getPanelDivElement() {
        return this.el.nativeElement.querySelector('.language-textbox-panel');
    }
    /**
     * @private
     * @return {?}
     */
    resetPanelPosition() {
        /** @type {?} */
        const panelEle = this.getPanelDivElement();
        if (panelEle) {
            /** @type {?} */
            const panelHeight = panelEle.offsetHeight;
            /** @type {?} */
            const rect = this.inputRef.input.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            const winHeight = window.innerHeight;
            /** @type {?} */
            let postop = rect.top;
            if (winHeight - postop - rect.height < panelHeight) {
                postop = postop - panelHeight;
            }
            else {
                postop = postop + rect.height;
            }
            /** @type {?} */
            const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
            postop += scrollTop;
            panelEle.style.top = `${postop}px`;
        }
        return panelEle;
    }
    /**
     * @return {?}
     */
    setInputFocus() {
        // 第1个input 获得焦点
        // 获取当前语言的索引，根据索引值定位 input
        /** @type {?} */
        const el = this.getPanelDivElement();
        if (!el) {
            return;
        }
        /** @type {?} */
        let focusInput = el.querySelector('input');
        if (this.currentItem && (!this.languageInputRef || this.languageInputRef['autoFocus'])) {
            /** @type {?} */
            const idx = this.items.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.code === this.currentItem.code));
            if (idx > -1) {
                focusInput = el.querySelectorAll('input')[idx];
            }
        }
        if (focusInput) {
            focusInput.focus();
        }
    }
    /**
     * @param {?} input
     * @return {?}
     */
    show(input) {
        this.inputRef = input;
        this.render.setStyle(document.body, 'overflow', 'hidden');
        this.opened = true;
        if (this.cd) {
            this.cd.detectChanges();
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const el = this.resetPanelPosition();
            if (!el) {
                return;
            }
            /** @type {?} */
            let transitionFlag = true;
            el.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    this.showPanel.emit(this);
                }
            }), false);
            // this.render.removeClass(el, 'hide');
            this.render.addClass(el, 'f-area-show');
        }));
        return of({ element: this.el });
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    hide($event) {
        this.opened = false;
        /** @type {?} */
        const el = this.getPanelDivElement();
        // this.render.addClass(el, 'f-area-hide');
        this.render.removeStyle(document.body, 'overflow');
        this.hidePanel.emit();
        if ($event) {
            $event.stopPropagation();
            return false;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onItemClick($event) {
        // this.currentItem = item;
        this.itemClick.emit(this.data);
        $event.stopPropagation();
        return false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    inputClick($event) {
        $event.stopPropagation();
        return false;
    }
}
LanguageTextPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'language-textbox-panel',
                template: `
        <div *ngIf="opened" class="language-textbox-panel f-area-hide" [ngStyle]="getPositionStyles()" (click)="inputClick($event)">
            <ul class="list-group">
                <li class="list-group-item border-0 p-2 px-2"  *ngFor="let item of items">
                    <div class="farris-group-wrap form-inline farris-form-inline">
                        <div class="form-group farris-form-group">
                            <label for="hpinput01" class="col-form-label">
                                <span class="farris-label-text" [attr.title]="'languageLabel.'+item.code | locale: item.name">
                                    {{ 'languageLabel.'+item.code | locale: item.name }}</span>
                            </label>
                            <div class="farris-input-wrap">
                                <input type="input" (click)="inputClick($event)" maxlength="{{maxWords? maxWords[item.code] : ''}}" [(ngModel)]="data[item.code]" class="form-control">
                            </div>
                        </div>
                    </div>
                </li>
                <li class="list-group-item border-0 p-2 px-3 text-right">
                    <button class="btn btn-secondary mr-2" (click)="hide($event)">{{ 'languageLabel.cancel'| locale: '取消' }}</button>
                    <button class="btn btn-primary" (click)="onItemClick($event)">{{ 'languageLabel.ok'| locale: '确定' }}</button>
                </li>
            </ul>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                styles: [`.language-textbox-panel {
            overflow: hidden;
            overflow-y: auto;
            padding: 5px;
            position: absolute;
            z-index: 99999;
            background: white;
            box-shadow: 2px 2px 5px #c6c6c6;
        }

        .language-textbox-panel .dropdown-menu {
            left: -5px;
            box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.37);
            position: relative;
        }

        .language-selected {
            background-color: #1890ff!important;
            color: #fff;
        }
        `]
            }] }
];
/** @nocollapse */
LanguageTextPanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 }
];
LanguageTextPanelComponent.propDecorators = {
    opened: [{ type: Input }],
    left: [{ type: Input }],
    top: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    items: [{ type: Input }],
    data: [{ type: Input }],
    maxWords: [{ type: Input }],
    itemClick: [{ type: Output }],
    hidePanel: [{ type: Output }],
    showPanel: [{ type: Output }],
    onEnterHandler: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
    onEscHandler: [{ type: HostListener, args: ['document:keydown.esc', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    LanguageTextPanelComponent.prototype.opened;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.left;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.top;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.width;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.height;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.items;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.data;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.maxWords;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.itemClick;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.hidePanel;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.showPanel;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.currentItem;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.languageInputRef;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.panelClickHandler;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.injector;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,