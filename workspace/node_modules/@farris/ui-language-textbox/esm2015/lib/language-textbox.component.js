/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LanguageTextboxService } from './language-textbox.service';
/*
* @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-03-12 15:46:47
 * @LastEditTime: 2019-04-08 18:46:53
 */
import { Component, Input, ViewChild, ElementRef, ComponentFactoryResolver, Injector, ApplicationRef, NgZone, Renderer2, ViewEncapsulation, forwardRef, Optional, Self } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl, RequiredValidator } from '@angular/forms';
import { InputGroupComponent } from '@farris/ui-input-group';
import { LanguageTextPanelComponent } from './language-textbox-panel.component';
import { LocaleService } from '@farris/ui-locale';
import { ChangeDetectorRef } from '@angular/core';
import { DebugService, OverLayHiddenService } from '@farris/ui-common';
/** @type {?} */
export const LANGUAGE_TEXTBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => LanguageTextboxComponent)),
    multi: true
};
/**
 * @record
 */
export function LanguageTextMaxLength() { }
export class LanguageTextboxComponent {
    /**
     * @param {?} el
     * @param {?} cfr
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} applicationRef
     * @param {?} renderer
     * @param {?} requiredValidator
     * @param {?} cd
     */
    constructor(el, cfr, injector, ngZone, applicationRef, renderer, requiredValidator, cd) {
        this.el = el;
        this.cfr = cfr;
        this.injector = injector;
        this.ngZone = ngZone;
        this.applicationRef = applicationRef;
        this.renderer = renderer;
        this.requiredValidator = requiredValidator;
        this.cd = cd;
        this.disabled = false;
        this.readonly = false;
        this.editable = false;
        this.enableClear = false;
        this.languages = [];
        this.panelHeight = 260;
        this.panelWidth = 365;
        this.maxWords = null;
        /**
         * 面板输入框根据LOCALE_ID 自动获得焦点
         * 设为 false 时，仅第1个获得焦点
         */
        this.autoFocus = true;
        this.openOnFocus = true;
        this.groupIcon = '<span class="f-icon f-icon-yxs_earth"></span>';
        this.currentLanguageItem = undefined;
        this.data = {};
        this.value = '';
        this.onTextBoxclickHandler = null;
        this.lts = null;
        this.overLayService = null;
        this.onModelChange = (/**
         * @param {?=} obj
         * @return {?}
         */
        (obj) => { });
        this.onModelTouched = (/**
         * @param {?=} obj
         * @return {?}
         */
        (obj) => { });
        this.debugSer = null;
        this.localeService = this.injector.get(LocaleService);
        this.lts = this.injector.get(LanguageTextboxService, null);
        this.debugSer = this.injector.get(DebugService, null);
        if (!this.lts) {
            this.lts = new LanguageTextboxService();
        }
        this.lts.hide$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.hideDropDownPanel();
        }));
        this.overLayService = this.injector.get(OverLayHiddenService, null);
        if (!this.overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.editable) {
            this.editable = this.languages && this.languages.length && this.languages.length === 1;
        }
        this.bindLanguageInfo(this.languages);
        this.onTextBoxclickHandler = this.renderer.listen(this.input.textbox.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            if (this.editable) {
                this.hideDropDownPanel();
                return;
            }
            if (!this.comboPanelRef) {
                this.showDropDownPanel();
            }
        }));
        this.ngCtrl = this.injector.get(NgControl, null);
        this.registerKeyDown();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.languages && !changes.languages.isFirstChange()) {
            this.bindLanguageInfo(changes.languages.currentValue);
            this.setValue();
        }
    }
    /**
     * @private
     * @param {?} languages
     * @return {?}
     */
    bindLanguageInfo(languages) {
        if (languages && languages.length) {
            if (!this.currentLanguage) {
                /** @type {?} */
                const runtimeLanguageCode = this.localeService.localeId;
                if (runtimeLanguageCode) {
                    /** @type {?} */
                    const defaultLang = languages.find((/**
                     * @param {?} l
                     * @return {?}
                     */
                    l => l.code === runtimeLanguageCode));
                    if (defaultLang) {
                        this.currentLanguage = defaultLang.code;
                        this.currentLanguageItem = defaultLang;
                    }
                    else {
                        if (languages.length) {
                            this.currentLanguage = languages[0].code;
                            this.currentLanguageItem = languages[0];
                        }
                    }
                }
                else {
                    if (this.debugSer) {
                        this.debugSer.warn('当前上下文环境未取到语言代码。');
                    }
                }
            }
            else {
                this.currentLanguageItem = this.getLanguageItem(this.currentLanguage);
            }
        }
        else {
            if (this.debugSer) {
                this.debugSer.warn(`Please set  the '[languages]' data.`);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.onKeyDownHandler) {
            this.onKeyDownHandler();
        }
        this.hideDropDownPanel();
        if (this.onTextBoxclickHandler) {
            this.onTextBoxclickHandler();
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerKeyDown() {
        /** @type {?} */
        const textEl = this.input.textbox.nativeElement;
        this.onKeyDownHandler = this.renderer.listen(textEl, 'keydown', this.onKeyDown.bind(this));
        // this.ngZone.runOutsideAngular(() => {
        // });
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    onKeyDown($event) {
        if ($event) {
            $event.stopPropagation();
            /** @type {?} */
            const keyCode = $event.keyCode;
            // F2
            if (keyCode === 113) {
                this.showDropDownPanel();
            }
            if (keyCode !== 38 && keyCode !== 40) {
                return;
            }
            /** @type {?} */
            const languageItemIndex = this.languages.findIndex((/**
             * @param {?} l
             * @return {?}
             */
            l => l.code === this.currentLanguageItem.code));
            switch (keyCode) {
                case 38:
                    if (languageItemIndex === 0) {
                        this.currentLanguageItem = this.languages[this.languages.length - 1];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex - 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
                case 40:
                    if (languageItemIndex === this.languages.length - 1) {
                        this.currentLanguageItem = this.languages[0];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex + 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
            }
            this.setValue();
            this.cd.markForCheck();
            this.cd.detectChanges();
            // this.input.cd.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.input.setFocusToEnd();
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        $event.stopPropagation();
        if (this.openOnFocus) {
            this.showDropDownPanel();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        $event.stopPropagation();
        // this.hideDropDownPanel();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onIconClick($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
            $event.originalEvent.preventDefault();
        }
        if (!this.comboPanelRef) {
            this.showDropDownPanel();
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    getCliecntRect() {
        /** @type {?} */
        const rect = this.input.el.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const winWidth = window.innerWidth;
        /** @type {?} */
        const winHeight = window.innerHeight;
        /** @type {?} */
        let posleft = rect.left;
        if (winWidth - posleft < this.panelWidth) {
            posleft = posleft + rect.width - this.panelWidth;
        }
        /** @type {?} */
        let postop = rect.top;
        if (winHeight - postop < this.panelHeight) {
            postop = postop - rect.height;
        }
        else {
            postop = postop + rect.height;
        }
        return {
            left: posleft,
            // + rect.width - this.panelWidth
            top: postop,
            height: this.panelHeight,
            width: this.panelWidth
        };
    }
    /**
     * @private
     * @return {?}
     */
    updateLangOrder() {
        /** @type {?} */
        let idx = -1;
        /** @type {?} */
        const curritem = this.languages.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            /** @type {?} */
            const f = n.code === this.localeService.localeId;
            if (f) {
                idx = i;
            }
            return f;
        }));
        if (curritem) {
            /** @type {?} */
            const _item = Object.assign({}, curritem);
            this.languages.splice(idx, 1);
            this.languages.unshift(_item);
        }
    }
    /**
     * @return {?}
     */
    showDropDownPanel() {
        if (!this.languages || this.languages.length === 1) {
            return;
        }
        if (this.readonly || this.disabled) {
            return;
        }
        if (!this.comboPanelRef) {
            /** @type {?} */
            const compFac = this.cfr.resolveComponentFactory(LanguageTextPanelComponent);
            this.comboPanelRef = compFac.create(this.injector);
            this.applicationRef.attachView(this.comboPanelRef.hostView);
            Object.assign(this.comboPanelRef.instance, this.getCliecntRect());
            /** @type {?} */
            const panelRefEl = this.comboPanelRef.location.nativeElement;
            document.body.appendChild(panelRefEl);
            this.renderer.addClass(panelRefEl, 'overlay-pane');
            // this.renderer.setStyle(panelRefEl, 'width', '100vw');
            // this.renderer.setStyle(panelRefEl, 'height', '100vh');
            this.renderer.setStyle(panelRefEl, 'z-index', '99999999');
            this.renderer.setStyle(panelRefEl, 'left', '0');
            this.renderer.setStyle(panelRefEl, 'top', '0');
            // 根据上下文语言，自动调整语言列表的顺序，将当前语言设为第1个
            this.updateLangOrder();
            this.comboPanelRef.instance.items = this.languages;
            this.comboPanelRef.instance.languageInputRef = this;
            this.comboPanelRef.instance.data = Object.assign({}, this.data);
            this.comboPanelRef.instance.currentItem = this.currentLanguageItem;
            this.comboPanelRef.instance.maxWords = this.maxWords;
            this.comboPanelRef.instance.itemClick.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // this.currentLanguageItem = item;
                // this.currentLanguage = item.code;
                this.data = Object.assign({}, data);
                this.hideDropDownPanel();
                this.setValue();
            }));
            this.comboPanelRef.instance.hidePanel.subscribe((/**
             * @return {?}
             */
            () => {
                this.hideDropDownPanel();
            }));
            this.comboPanelRef.instance.showPanel.subscribe((/**
             * @param {?} panelIns
             * @return {?}
             */
            (panelIns) => {
                panelIns.setInputFocus();
            }));
            this.comboPanelRef.instance.show(this);
            this.lts.setActivePane(this);
            // 注册鼠标滚轮，点击事件，用于隐藏Panel
            this.overLayService.registerMouseEvent(panelRefEl, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (panelRefEl.contains(e.target)) {
                    return;
                }
                this.hideDropDownPanel();
            }));
        }
        else {
            this.hideDropDownPanel();
        }
    }
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    getLanguageItem(code) {
        return this.languages.find((/**
         * @param {?} l
         * @return {?}
         */
        l => l.code === code));
    }
    /**
     * @return {?}
     */
    onClear() { }
    /**
     * @param {?=} val
     * @return {?}
     */
    onChanges(val) {
        this.data[this.currentLanguage] = this.value;
        this.onModelChange(Object.assign({}, this.data));
        this.onModelTouched(Object.assign({}, this.data));
    }
    /**
     * @return {?}
     */
    setValue() {
        if (this.data) {
            this.value = this.data[this.currentLanguage] || '';
        }
        else {
            this.value = '';
        }
        this.onChanges();
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    hideDropDownPanel() {
        this.renderer.removeStyle(document.body, 'overflow');
        if (this.comboPanelRef && this.comboPanelRef.instance) {
            // if (this.comboPanelRef.instance.opened) {
            //     this.comboPanelRef.instance.hide();
            // }
            this.comboPanelRef.instance.opened = false;
            /** @type {?} */
            const componentEl = this.comboPanelRef.location.nativeElement;
            if (componentEl.parentNode) {
                if (this.overLayService) {
                    this.overLayService.destory(componentEl);
                }
                componentEl.parentNode.removeChild(componentEl);
            }
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.input.focus();
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (this.comboPanelRef) {
                        this.comboPanelRef.destroy();
                        this.comboPanelRef = null;
                    }
                }), 100);
            }));
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (obj && Object.keys(obj).length) {
            this.data = obj;
            this.value = obj[this.currentLanguage];
        }
        else {
            this.data = {};
            this.value = '';
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
LanguageTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'language-textbox',
                template: `
        <input-group #input
            [customCls] = "'farris-language-textbox'"
            [groupText]="groupIcon"
            [disabled]="disabled"
            [readonly]="readonly"
            [editable]="editable"
            [(ngModel)]="value"
            [enableClear]="false"
            [value]="value"
            (valueChange)="onChanges($event)"
            (clear)="onClear()"
            (clickHandle)="onIconClick($event)"
            (focusHandle)="onFocus($event)"
        >
        </input-group>
    `,
                providers: [LANGUAGE_TEXTBOX_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None,
                styles: [`
        .farris-language-textbox .input-group-text {
            padding-right: 3px;
        }
        .farris-language-textbox .input-group-text .language-text {
            padding-right: 3px;
        }
        `]
            }] }
];
/** @nocollapse */
LanguageTextboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: NgZone },
    { type: ApplicationRef },
    { type: Renderer2 },
    { type: RequiredValidator, decorators: [{ type: Optional }, { type: Self }] },
    { type: ChangeDetectorRef }
];
LanguageTextboxComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    enableClear: [{ type: Input }],
    languages: [{ type: Input }],
    currentLanguage: [{ type: Input }],
    panelHeight: [{ type: Input }],
    panelWidth: [{ type: Input }],
    maxWords: [{ type: Input }],
    autoFocus: [{ type: Input }],
    input: [{ type: ViewChild, args: ['input',] }],
    openOnFocus: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LanguageTextboxComponent.prototype.disabled;
    /** @type {?} */
    LanguageTextboxComponent.prototype.readonly;
    /** @type {?} */
    LanguageTextboxComponent.prototype.editable;
    /** @type {?} */
    LanguageTextboxComponent.prototype.enableClear;
    /** @type {?} */
    LanguageTextboxComponent.prototype.languages;
    /** @type {?} */
    LanguageTextboxComponent.prototype.currentLanguage;
    /** @type {?} */
    LanguageTextboxComponent.prototype.panelHeight;
    /** @type {?} */
    LanguageTextboxComponent.prototype.panelWidth;
    /** @type {?} */
    LanguageTextboxComponent.prototype.maxWords;
    /**
     * 面板输入框根据LOCALE_ID 自动获得焦点
     * 设为 false 时，仅第1个获得焦点
     * @type {?}
     */
    LanguageTextboxComponent.prototype.autoFocus;
    /** @type {?} */
    LanguageTextboxComponent.prototype.input;
    /** @type {?} */
    LanguageTextboxComponent.prototype.openOnFocus;
    /** @type {?} */
    LanguageTextboxComponent.prototype.groupIcon;
    /** @type {?} */
    LanguageTextboxComponent.prototype.comboPanelRef;
    /** @type {?} */
    LanguageTextboxComponent.prototype.currentLanguageItem;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.ngCtrl;
    /** @type {?} */
    LanguageTextboxComponent.prototype.value;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onKeyDownHandler;
    /** @type {?} */
    LanguageTextboxComponent.prototype.localeService;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onTextBoxclickHandler;
    /** @type {?} */
    LanguageTextboxComponent.prototype.lts;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.overLayService;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onModelChange;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.requiredValidator;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2UtdGV4dGJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWxhbmd1YWdlLXRleHRib3gvIiwic291cmNlcyI6WyJsaWIvbGFuZ3VhZ2UtdGV4dGJveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7Ozs7Ozs7QUFXcEUsT0FBTyxFQUNILFNBQVMsRUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFnQixVQUFVLEVBQzdELHdCQUF3QixFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQ2xELE1BQU0sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQ25FLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0IsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFaEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxpQkFBaUIsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBRXZFLE1BQU0sT0FBTywrQkFBK0IsR0FBUTtJQUNoRCxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQyx3QkFBd0IsRUFBQztJQUN2RCxLQUFLLEVBQUUsSUFBSTtDQUNkOzs7O0FBR0QsMkNBRUM7QUFtQ0QsTUFBTSxPQUFPLHdCQUF3Qjs7Ozs7Ozs7Ozs7SUEwQ2pDLFlBQ1ksRUFBYyxFQUNkLEdB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QUFNO1lBRDhCLGNBQWM7WUFDMUMsU0FBUztZQUV3QyxpQkFBaUIsdUJBcUdyRSxRQUFRLFlBQUksSUFBSTtZQWhHaEIsaUJBQWlCOzs7dUJBZ0RyQixLQUFLO3VCQUNMLEtBQUs7dUJBQ0wsS0FBSzswQkFDTCxLQUFLO3dCQUNMLEtBQUs7OEJBQ0wsS0FBSzswQkFDTCxLQUFLO3lCQUNMLEtBQUs7dUJBRUwsS0FBSzt3QkFNTCxLQUFLO29CQUVMLFNBQVMsU0FBQyxPQUFPOzBCQUVqQixLQUFLOzs7O0lBbkJOLDRDQUEwQjs7SUFDMUIsNENBQTBCOztJQUMxQiw0Q0FBMEI7O0lBQzFCLCtDQUE2Qjs7SUFDN0IsNkNBQXdDOztJQUN4QyxtREFBaUM7O0lBQ2pDLCtDQUEyQjs7SUFDM0IsOENBQTBCOztJQUUxQiw0Q0FBZ0Q7Ozs7OztJQU1oRCw2Q0FBMEI7O0lBRTFCLHlDQUErQzs7SUFFL0MsK0NBQTRCOztJQUU1Qiw2Q0FBNEQ7O0lBRTVELGlEQUF3RDs7SUFDeEQsdURBQThDOzs7OztJQUM5Qyx3Q0FBZ0M7Ozs7O0lBQ2hDLDBDQUEwQjs7SUFDMUIseUNBQVc7O0lBRVgsb0RBQXNCOztJQUN0QixpREFBNkI7O0lBRTdCLHlEQUE2Qjs7SUFDN0IsdUNBQW1DOzs7OztJQUNuQyxrREFBb0Q7O0lBQ3BELGlEQUFtQzs7SUFDbkMsa0RBQW9DOzs7OztJQUVwQyw0Q0FBc0M7Ozs7O0lBSWxDLHNDQUFzQjs7Ozs7SUFDdEIsdUNBQXFDOzs7OztJQUNyQyw0Q0FBMEI7Ozs7O0lBQzFCLDBDQUFzQjs7Ozs7SUFDdEIsa0RBQXNDOzs7OztJQUN0Qyw0Q0FBMkI7Ozs7O0lBQzNCLHFEQUFnRTs7Ozs7SUFDaEUsc0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGFuZ3VhZ2VUZXh0Ym94U2VydmljZSB9IGZyb20gJy4vbGFuZ3VhZ2UtdGV4dGJveC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSG9zdExpc3RlbmVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qXHJcbiogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqIEBEYXRlOiAyMDE5LTAzLTEyIDE1OjQ2OjQ3XHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDQtMDggMTg6NDY6NTNcclxuICovXHJcbmltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIFZpZXdDaGlsZCwgQ29tcG9uZW50UmVmLCBFbGVtZW50UmVmLFxyXG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgQXBwbGljYXRpb25SZWYsXHJcbiAgICBOZ1pvbmUsIFJlbmRlcmVyMiwgVmlld0VuY2Fwc3VsYXRpb24sIGZvcndhcmRSZWYsIE9wdGlvbmFsLCBTZWxmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgTmdDb250cm9sLCBSZXF1aXJlZFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgSW5wdXRHcm91cENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktaW5wdXQtZ3JvdXAnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVRleHRQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vbGFuZ3VhZ2UtdGV4dGJveC1wYW5lbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUl0ZW0sIExhbmd1YWdlRGF0YSB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBMb2NhbGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERlYnVnU2VydmljZSwgT3ZlckxheUhpZGRlblNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcblxyXG5leHBvcnQgY29uc3QgTEFOR1VBR0VfVEVYVEJPWF9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xyXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMYW5ndWFnZVRleHRib3hDb21wb25lbnQpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExhbmd1YWdlVGV4dE1heExlbmd0aCB7XHJcbiAgICBbbGFuZ0NvZGU6IHN0cmluZ106IG51bWJlcjtcclxufVxyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdsYW5ndWFnZS10ZXh0Ym94JyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGlucHV0LWdyb3VwICNpbnB1dFxyXG4gICAgICAgICAgICBbY3VzdG9tQ2xzXSA9IFwiJ2ZhcnJpcy1sYW5ndWFnZS10ZXh0Ym94J1wiXHJcbiAgICAgICAgICAgIFtncm91cFRleHRdPVwiZ3JvdXBJY29uXCJcclxuICAgICAgICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cInJlYWRvbmx5XCJcclxuICAgICAgICAgICAgW2VkaXRhYmxlXT1cImVkaXRhYmxlXCJcclxuICAgICAgICAgICAgWyhuZ01vZGVsKV09XCJ2YWx1ZVwiXHJcbiAgICAgICAgICAgIFtlbmFibGVDbGVhcl09XCJmYWxzZVwiXHJcbiAgICAgICAgICAgIFt2YWx1ZV09XCJ2YWx1ZVwiXHJcbiAgICAgICAgICAgICh2YWx1ZUNoYW5nZSk9XCJvbkNoYW5nZXMoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIChjbGVhcik9XCJvbkNsZWFyKClcIlxyXG4gICAgICAgICAgICAoY2xpY2tIYW5kbGUpPVwib25JY29uQ2xpY2soJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIChmb2N1c0hhbmRsZSk9XCJvbkZvY3VzKCRldmVudClcIlxyXG4gICAgICAgID5cclxuICAgICAgICA8L2lucHV0LWdyb3VwPlxyXG4gICAgYCxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIGBcclxuICAgICAgICAuZmFycmlzLWxhbmd1YWdlLXRleHRib3ggLmlucHV0LWdyb3VwLXRleHQge1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mYXJyaXMtbGFuZ3VhZ2UtdGV4dGJveCAuaW5wdXQtZ3JvdXAtdGV4dCAubGFuZ3VhZ2UtdGV4dCB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDNweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgYFxyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW0xBTkdVQUdFX1RFWFRCT1hfVkFMVUVfQUNDRVNTT1JdLFxyXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTGFuZ3VhZ2VUZXh0Ym94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIHJlYWRvbmx5ID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlZGl0YWJsZSA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgZW5hYmxlQ2xlYXIgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGxhbmd1YWdlczogTGFuZ3VhZ2VJdGVtW10gPSBbXTtcclxuICAgIEBJbnB1dCgpIGN1cnJlbnRMYW5ndWFnZTogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgcGFuZWxIZWlnaHQgPSAyNjA7XHJcbiAgICBASW5wdXQoKSBwYW5lbFdpZHRoID0gMzY1O1xyXG5cclxuICAgIEBJbnB1dCgpIG1heFdvcmRzOiBMYW5ndWFnZVRleHRNYXhMZW5ndGggPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6Z2i5p2/6L6T5YWl5qGG5qC55o2uTE9DQUxFX0lEIOiHquWKqOiOt+W+l+eEpueCuVxyXG4gICAgICog6K6+5Li6IGZhbHNlIOaXtu+8jOS7heesrDHkuKrojrflvpfnhKbngrlcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgYXV0b0ZvY3VzID0gdHJ1ZTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdpbnB1dCcpIGlucHV0OiBJbnB1dEdyb3VwQ29tcG9uZW50O1xyXG5cclxuICAgIEBJbnB1dCgpIG9wZW5PbkZvY3VzID0gdHJ1ZTtcclxuXHJcbiAgICBncm91cEljb24gPSAnPHNwYW4gY2xhc3M9XCJmLWljb24gZi1pY29uLXl4c19lYXJ0aFwiPjwvc3Bhbj4nO1xyXG5cclxuICAgIGNvbWJvUGFuZWxSZWY6IENvbXBvbmVudFJlZjxMYW5ndWFnZVRleHRQYW5lbENvbXBvbmVudD47XHJcbiAgICBjdXJyZW50TGFuZ3VhZ2VJdGVtOiBMYW5ndWFnZUl0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICBwcml2YXRlIGRhdGE6IExhbmd1YWdlRGF0YSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBuZ0N0cmw6IE5nQ29udHJvbDtcclxuICAgIHZhbHVlID0gJyc7XHJcblxyXG4gICAgb25LZXlEb3duSGFuZGxlcjogYW55O1xyXG4gICAgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZTtcclxuXHJcbiAgICBvblRleHRCb3hjbGlja0hhbmRsZXIgPSBudWxsO1xyXG4gICAgbHRzOiBMYW5ndWFnZVRleHRib3hTZXJ2aWNlID0gbnVsbDtcclxuICAgIHByaXZhdGUgb3ZlckxheVNlcnZpY2U6IE92ZXJMYXlIaWRkZW5TZXJ2aWNlID0gbnVsbDtcclxuICAgIG9uTW9kZWxDaGFuZ2UgPSAob2JqPzogYW55KSA9PiB7IH07XHJcbiAgICBvbk1vZGVsVG91Y2hlZCA9IChvYmo/OiBhbnkpID0+IHsgfTtcclxuXHJcbiAgICBwcml2YXRlIGRlYnVnU2VyOiBEZWJ1Z1NlcnZpY2UgPSBudWxsO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcclxuICAgICAgICBwcml2YXRlIGFwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZixcclxuICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBwcml2YXRlIHJlcXVpcmVkVmFsaWRhdG9yOiBSZXF1aXJlZFZhbGlkYXRvcixcclxuICAgICAgICBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChMb2NhbGVTZXJ2aWNlKTtcclxuICAgICAgICAgICAgdGhpcy5sdHMgPSB0aGlzLmluamVjdG9yLmdldChMYW5ndWFnZVRleHRib3hTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1Z1NlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KERlYnVnU2VydmljZSwgbnVsbCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMubHRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmx0cyA9IG5ldyBMYW5ndWFnZVRleHRib3hTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubHRzLmhpZGUkLnN1YnNjcmliZSggZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVEcm9wRG93blBhbmVsKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vdmVyTGF5U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE92ZXJMYXlIaWRkZW5TZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm92ZXJMYXlTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJMYXlTZXJ2aWNlID0gbmV3IE92ZXJMYXlIaWRkZW5TZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdGFibGUgPSB0aGlzLmxhbmd1YWdlcyAmJiB0aGlzLmxhbmd1YWdlcy5sZW5ndGggJiYgdGhpcy5sYW5ndWFnZXMubGVuZ3RoID09PSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5iaW5kTGFuZ3VhZ2VJbmZvKHRoaXMubGFuZ3VhZ2VzKTtcclxuXHJcbiAgICAgICAgdGhpcy5vblRleHRCb3hjbGlja0hhbmRsZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmlucHV0LnRleHRib3gubmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVEcm9wRG93blBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb21ib1BhbmVsUmVmKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dEcm9wRG93blBhbmVsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5uZ0N0cmwgPSB0aGlzLmluamVjdG9yLmdldChOZ0NvbnRyb2wsIG51bGwpO1xyXG5cclxuICAgICAgICB0aGlzLnJlZ2lzdGVyS2V5RG93bigpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoY2hhbmdlcy5sYW5ndWFnZXMgJiYgIWNoYW5nZXMubGFuZ3VhZ2VzLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmJpbmRMYW5ndWFnZUluZm8oY2hhbmdlcy5sYW5ndWFnZXMuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJpbmRMYW5ndWFnZUluZm8obGFuZ3VhZ2VzOiBMYW5ndWFnZUl0ZW1bXSkge1xyXG4gICAgICAgIGlmIChsYW5ndWFnZXMgJiYgbGFuZ3VhZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY3VycmVudExhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBydW50aW1lTGFuZ3VhZ2VDb2RlID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmxvY2FsZUlkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ1bnRpbWVMYW5ndWFnZUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0TGFuZyA9IGxhbmd1YWdlcy5maW5kKGwgPT4gbC5jb2RlID09PSBydW50aW1lTGFuZ3VhZ2VDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdExhbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TGFuZ3VhZ2UgPSBkZWZhdWx0TGFuZy5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZUl0ZW0gPSBkZWZhdWx0TGFuZztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TGFuZ3VhZ2UgPSBsYW5ndWFnZXNbMF0uY29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlSXRlbSA9IGxhbmd1YWdlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVidWdTZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z1Nlci53YXJuKCflvZPliY3kuIrkuIvmlofnjq/looPmnKrlj5bliLDor63oqIDku6PnoIHjgIInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZUl0ZW0gPSB0aGlzLmdldExhbmd1YWdlSXRlbSh0aGlzLmN1cnJlbnRMYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Z1Nlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z1Nlci53YXJuKGBQbGVhc2Ugc2V0ICB0aGUgJ1tsYW5ndWFnZXNdJyBkYXRhLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9uS2V5RG93bkhhbmRsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5vbktleURvd25IYW5kbGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmhpZGVEcm9wRG93blBhbmVsKCk7XHJcbiAgICAgICAgaWYgKHRoaXMub25UZXh0Qm94Y2xpY2tIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25UZXh0Qm94Y2xpY2tIYW5kbGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIHByaXZhdGUgcmVnaXN0ZXJLZXlEb3duKCkge1xyXG4gICAgICAgIGNvbnN0IHRleHRFbCA9IHRoaXMuaW5wdXQudGV4dGJveC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMub25LZXlEb3duSGFuZGxlciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKHRleHRFbCwgJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpKTtcclxuICAgICAgICAvLyB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbktleURvd24oJGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCRldmVudCkge1xyXG4gICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBrZXlDb2RlID0gJGV2ZW50LmtleUNvZGU7XHJcbiAgICAgICAgICAgIC8vIEYyXHJcbiAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSAxMTMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Ryb3BEb3duUGFuZWwoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChrZXlDb2RlICE9PSAzOCAmJiBrZXlDb2RlICE9PSA0MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsYW5ndWFnZUl0ZW1JbmRleCA9IHRoaXMubGFuZ3VhZ2VzLmZpbmRJbmRleChsID0+IGwuY29kZSA9PT0gdGhpcy5jdXJyZW50TGFuZ3VhZ2VJdGVtLmNvZGUpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmd1YWdlSXRlbUluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlSXRlbSA9IHRoaXMubGFuZ3VhZ2VzW3RoaXMubGFuZ3VhZ2VzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlSXRlbSA9IHRoaXMubGFuZ3VhZ2VzW2xhbmd1YWdlSXRlbUluZGV4IC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gdGhpcy5jdXJyZW50TGFuZ3VhZ2VJdGVtLmNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZUl0ZW1JbmRleCA9PT0gdGhpcy5sYW5ndWFnZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZUl0ZW0gPSB0aGlzLmxhbmd1YWdlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZUl0ZW0gPSB0aGlzLmxhbmd1YWdlc1tsYW5ndWFnZUl0ZW1JbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IHRoaXMuY3VycmVudExhbmd1YWdlSXRlbS5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuaW5wdXQuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnNldEZvY3VzVG9FbmQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uRm9jdXMoJGV2ZW50KSB7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wZW5PbkZvY3VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0Ryb3BEb3duUGFuZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25CbHVyKCRldmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAvLyB0aGlzLmhpZGVEcm9wRG93blBhbmVsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25JY29uQ2xpY2soJGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCRldmVudC5vcmlnaW5hbEV2ZW50KSB7XHJcbiAgICAgICAgICAgICRldmVudC5vcmlnaW5hbEV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAkZXZlbnQub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuY29tYm9QYW5lbFJlZikge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dEcm9wRG93blBhbmVsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldENsaWVjbnRSZWN0KCkge1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmlucHV0LmVsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHdpbldpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgY29uc3Qgd2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG5cclxuICAgICAgICBsZXQgcG9zbGVmdCA9IHJlY3QubGVmdDtcclxuICAgICAgICBpZiAod2luV2lkdGggLSBwb3NsZWZ0IDwgdGhpcy5wYW5lbFdpZHRoKSB7XHJcbiAgICAgICAgICAgIHBvc2xlZnQgPSBwb3NsZWZ0ICsgcmVjdC53aWR0aCAtIHRoaXMucGFuZWxXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwb3N0b3AgPSByZWN0LnRvcDtcclxuICAgICAgICBpZiAod2luSGVpZ2h0IC0gcG9zdG9wIDwgdGhpcy5wYW5lbEhlaWdodCkge1xyXG4gICAgICAgICAgICBwb3N0b3AgPSBwb3N0b3AgLSByZWN0LmhlaWdodDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwb3N0b3AgPSBwb3N0b3AgKyByZWN0LmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxlZnQ6IHBvc2xlZnQsIC8vICsgcmVjdC53aWR0aCAtIHRoaXMucGFuZWxXaWR0aFxyXG4gICAgICAgICAgICB0b3A6IHBvc3RvcCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnBhbmVsSGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5wYW5lbFdpZHRoXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUxhbmdPcmRlcigpIHtcclxuICAgICAgICBsZXQgaWR4ID0gLTE7XHJcbiAgICAgICAgY29uc3QgY3Vycml0ZW0gPSB0aGlzLmxhbmd1YWdlcy5maW5kKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGYgPSBuLmNvZGUgPT09IHRoaXMubG9jYWxlU2VydmljZS5sb2NhbGVJZDtcclxuICAgICAgICAgICAgaWYgKGYpIHtcclxuICAgICAgICAgICAgICAgIGlkeCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGY7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChjdXJyaXRlbSkge1xyXG4gICAgICAgICAgICBjb25zdCBfaXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGN1cnJpdGVtKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlcy51bnNoaWZ0KF9pdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0Ryb3BEb3duUGFuZWwoKSB7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5sYW5ndWFnZXMgfHwgdGhpcy5sYW5ndWFnZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJlYWRvbmx5IHx8IHRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICghdGhpcy5jb21ib1BhbmVsUmVmKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBGYWMgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShMYW5ndWFnZVRleHRQYW5lbENvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tYm9QYW5lbFJlZiA9IGNvbXBGYWMuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uUmVmLmF0dGFjaFZpZXcodGhpcy5jb21ib1BhbmVsUmVmLmhvc3RWaWV3KTtcclxuXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5jb21ib1BhbmVsUmVmLmluc3RhbmNlLCB0aGlzLmdldENsaWVjbnRSZWN0KCkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGFuZWxSZWZFbCA9IHRoaXMuY29tYm9QYW5lbFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBhbmVsUmVmRWwpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHBhbmVsUmVmRWwsICdvdmVybGF5LXBhbmUnKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5yZW5kZXJlci5zZXRTdHlsZShwYW5lbFJlZkVsLCAnd2lkdGgnLCAnMTAwdncnKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5yZW5kZXJlci5zZXRTdHlsZShwYW5lbFJlZkVsLCAnaGVpZ2h0JywgJzEwMHZoJyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUocGFuZWxSZWZFbCwgJ3otaW5kZXgnLCAnOTk5OTk5OTknKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShwYW5lbFJlZkVsLCAnbGVmdCcsICcwJyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUocGFuZWxSZWZFbCwgJ3RvcCcsICcwJyk7XHJcblxyXG4gICAgICAgICAgICAvLyDmoLnmja7kuIrkuIvmlofor63oqIDvvIzoh6rliqjosIPmlbTor63oqIDliJfooajnmoTpobrluo/vvIzlsIblvZPliY3or63oqIDorr7kuLrnrKwx5LiqXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFuZ09yZGVyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbWJvUGFuZWxSZWYuaW5zdGFuY2UuaXRlbXMgPSB0aGlzLmxhbmd1YWdlcztcclxuICAgICAgICAgICAgdGhpcy5jb21ib1BhbmVsUmVmLmluc3RhbmNlLmxhbmd1YWdlSW5wdXRSZWYgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmNvbWJvUGFuZWxSZWYuaW5zdGFuY2UuZGF0YSA9IHsuLi50aGlzLmRhdGF9O1xyXG4gICAgICAgICAgICB0aGlzLmNvbWJvUGFuZWxSZWYuaW5zdGFuY2UuY3VycmVudEl0ZW0gPSB0aGlzLmN1cnJlbnRMYW5ndWFnZUl0ZW07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbWJvUGFuZWxSZWYuaW5zdGFuY2UubWF4V29yZHMgPSB0aGlzLm1heFdvcmRzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb21ib1BhbmVsUmVmLmluc3RhbmNlLml0ZW1DbGljay5zdWJzY3JpYmUoKGRhdGE6IExhbmd1YWdlRGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5jdXJyZW50TGFuZ3VhZ2VJdGVtID0gaXRlbTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuY3VycmVudExhbmd1YWdlID0gaXRlbS5jb2RlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gey4uLmRhdGF9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlRHJvcERvd25QYW5lbCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jb21ib1BhbmVsUmVmLmluc3RhbmNlLmhpZGVQYW5lbC5zdWJzY3JpYmUoICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZURyb3BEb3duUGFuZWwoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbWJvUGFuZWxSZWYuaW5zdGFuY2Uuc2hvd1BhbmVsLnN1YnNjcmliZSggKHBhbmVsSW5zOiBMYW5ndWFnZVRleHRQYW5lbENvbXBvbmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFuZWxJbnMuc2V0SW5wdXRGb2N1cygpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29tYm9QYW5lbFJlZi5pbnN0YW5jZS5zaG93KHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sdHMuc2V0QWN0aXZlUGFuZSh0aGlzKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyDms6jlhozpvKDmoIfmu5rova7vvIzngrnlh7vkuovku7bvvIznlKjkuo7pmpDol49QYW5lbFxyXG4gICAgICAgICAgICB0aGlzLm92ZXJMYXlTZXJ2aWNlLnJlZ2lzdGVyTW91c2VFdmVudChwYW5lbFJlZkVsLCAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYocGFuZWxSZWZFbC5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlRHJvcERvd25QYW5lbCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVEcm9wRG93blBhbmVsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TGFuZ3VhZ2VJdGVtKGNvZGU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlcy5maW5kKGwgPT4gbC5jb2RlID09PSBjb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsZWFyKCkgeyB9XHJcblxyXG4gICAgb25DaGFuZ2VzKHZhbD86IGFueSkge1xyXG4gICAgICAgIHRoaXMuZGF0YVt0aGlzLmN1cnJlbnRMYW5ndWFnZV0gPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSh7Li4udGhpcy5kYXRhfSk7XHJcbiAgICAgICAgdGhpcy5vbk1vZGVsVG91Y2hlZCh7Li4udGhpcy5kYXRhfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VmFsdWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5kYXRhW3RoaXMuY3VycmVudExhbmd1YWdlXSB8fCAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uQ2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBoaWRlRHJvcERvd25QYW5lbCgpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKGRvY3VtZW50LmJvZHksICdvdmVyZmxvdycpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbWJvUGFuZWxSZWYgJiYgdGhpcy5jb21ib1BhbmVsUmVmLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLmNvbWJvUGFuZWxSZWYuaW5zdGFuY2Uub3BlbmVkKSB7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmNvbWJvUGFuZWxSZWYuaW5zdGFuY2UuaGlkZSgpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHRoaXMuY29tYm9QYW5lbFJlZi5pbnN0YW5jZS5vcGVuZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50RWwgPSB0aGlzLmNvbWJvUGFuZWxSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEVsLnBhcmVudE5vZGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vdmVyTGF5U2VydmljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlckxheVNlcnZpY2UuZGVzdG9yeShjb21wb25lbnRFbClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbXBvbmVudEVsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tYm9QYW5lbFJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbWJvUGFuZWxSZWYuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbWJvUGFuZWxSZWYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWYWx1ZShvYmo6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChvYmogJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhID0gb2JqO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gb2JqW3RoaXMuY3VycmVudExhbmd1YWdlXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSA9IGZuO1xyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub25Nb2RlbFRvdWNoZWQgPSBmbjtcclxuICAgIH1cclxuICAgIHNldERpc2FibGVkU3RhdGU/KGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcclxuICAgIH1cclxufVxyXG4iXX0=