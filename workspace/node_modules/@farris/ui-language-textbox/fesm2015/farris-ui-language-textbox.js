import { Subject, of } from 'rxjs';
import { DebugService, OverLayHiddenService } from '@farris/ui-common';
import { NG_VALUE_ACCESSOR, NgControl, RequiredValidator, FormsModule } from '@angular/forms';
import { Injectable, ElementRef, NgZone, Injector, Renderer2, ViewEncapsulation, ChangeDetectorRef, HostListener, Component, Input, Output, EventEmitter, forwardRef, ComponentFactoryResolver, ApplicationRef, Optional, Self, ViewChild, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { InputGroupModule } from '@farris/ui-input-group';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LanguageTextboxService {
    constructor() {
        this.activePane = null;
        this.hide$ = new Subject();
    }
    /**
     * @param {?} p
     * @return {?}
     */
    setActivePane(p) {
        if (this.activePane && this.activePane != p) {
            this.activePane.hideDropDownPanel();
            this.activePane = null;
        }
        this.activePane = p;
    }
    /**
     * @return {?}
     */
    hide() {
        this.hide$.next();
    }
}
LanguageTextboxService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LanguageTextboxService.ctorParameters = () => [];
/** @nocollapse */ LanguageTextboxService.ngInjectableDef = defineInjectable({ factory: function LanguageTextboxService_Factory() { return new LanguageTextboxService(); }, token: LanguageTextboxService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LanguageTextPanelComponent {
    /**
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     */
    constructor(el, ngzone, injector, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.opened = false;
        this.width = 365;
        this.height = 200;
        this.items = [];
        this.data = {};
        this.maxWords = null;
        this.itemClick = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.showPanel = new EventEmitter();
        this.currentItem = undefined;
        this.languageInputRef = null;
        this.panelClickHandler = undefined;
        this.cd = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnterHandler(event) {
        this.onItemClick(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEscHandler(event) {
        this.hide(event);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.panelClickHandler = this.render.listen(this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e) {
                    e.stopPropagation();
                }
                // let name = e.target.nodeName || e.target.tagName;
                // if (!name) {
                //     name = e.target.path[0].localeName;
                // }
                // name = name.toLowerCase();
                if (this.inputRef) {
                    this.inputRef.lts.hide();
                }
                return false;
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.opened = false;
        if (this.panelClickHandler) {
            this.panelClickHandler();
        }
    }
    /**
     * @return {?}
     */
    getPositionStyles() {
        return {
            left: this.left + 'px',
            top: this.top + 'px',
            width: this.width + 'px',
        };
    }
    /**
     * @private
     * @return {?}
     */
    getPanelDivElement() {
        return this.el.nativeElement.querySelector('.language-textbox-panel');
    }
    /**
     * @private
     * @return {?}
     */
    resetPanelPosition() {
        /** @type {?} */
        const panelEle = this.getPanelDivElement();
        if (panelEle) {
            /** @type {?} */
            const panelHeight = panelEle.offsetHeight;
            /** @type {?} */
            const rect = this.inputRef.input.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            const winHeight = window.innerHeight;
            /** @type {?} */
            let postop = rect.top;
            if (winHeight - postop - rect.height < panelHeight) {
                postop = postop - panelHeight;
            }
            else {
                postop = postop + rect.height;
            }
            /** @type {?} */
            const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
            postop += scrollTop;
            panelEle.style.top = `${postop}px`;
        }
        return panelEle;
    }
    /**
     * @return {?}
     */
    setInputFocus() {
        // 第1个input 获得焦点
        // 获取当前语言的索引，根据索引值定位 input
        /** @type {?} */
        const el = this.getPanelDivElement();
        if (!el) {
            return;
        }
        /** @type {?} */
        let focusInput = el.querySelector('input');
        if (this.currentItem && (!this.languageInputRef || this.languageInputRef['autoFocus'])) {
            /** @type {?} */
            const idx = this.items.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.code === this.currentItem.code));
            if (idx > -1) {
                focusInput = el.querySelectorAll('input')[idx];
            }
        }
        if (focusInput) {
            focusInput.focus();
        }
    }
    /**
     * @param {?} input
     * @return {?}
     */
    show(input) {
        this.inputRef = input;
        this.render.setStyle(document.body, 'overflow', 'hidden');
        this.opened = true;
        if (this.cd) {
            this.cd.detectChanges();
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const el = this.resetPanelPosition();
            if (!el) {
                return;
            }
            /** @type {?} */
            let transitionFlag = true;
            el.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    this.showPanel.emit(this);
                }
            }), false);
            // this.render.removeClass(el, 'hide');
            this.render.addClass(el, 'f-area-show');
        }));
        return of({ element: this.el });
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    hide($event) {
        this.opened = false;
        /** @type {?} */
        const el = this.getPanelDivElement();
        // this.render.addClass(el, 'f-area-hide');
        this.render.removeStyle(document.body, 'overflow');
        this.hidePanel.emit();
        if ($event) {
            $event.stopPropagation();
            return false;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onItemClick($event) {
        // this.currentItem = item;
        this.itemClick.emit(this.data);
        $event.stopPropagation();
        return false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    inputClick($event) {
        $event.stopPropagation();
        return false;
    }
}
LanguageTextPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'language-textbox-panel',
                template: `
        <div *ngIf="opened" class="language-textbox-panel f-area-hide" [ngStyle]="getPositionStyles()" (click)="inputClick($event)">
            <ul class="list-group">
                <li class="list-group-item border-0 p-2 px-2"  *ngFor="let item of items">
                    <div class="farris-group-wrap form-inline farris-form-inline">
                        <div class="form-group farris-form-group">
                            <label for="hpinput01" class="col-form-label">
                                <span class="farris-label-text" [attr.title]="'languageLabel.'+item.code | locale: item.name">
                                    {{ 'languageLabel.'+item.code | locale: item.name }}</span>
                            </label>
                            <div class="farris-input-wrap">
                                <input type="input" (click)="inputClick($event)" maxlength="{{maxWords? maxWords[item.code] : ''}}" [(ngModel)]="data[item.code]" class="form-control">
                            </div>
                        </div>
                    </div>
                </li>
                <li class="list-group-item border-0 p-2 px-3 text-right">
                    <button class="btn btn-secondary mr-2" (click)="hide($event)">{{ 'languageLabel.cancel'| locale: '取消' }}</button>
                    <button class="btn btn-primary" (click)="onItemClick($event)">{{ 'languageLabel.ok'| locale: '确定' }}</button>
                </li>
            </ul>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                styles: [`.language-textbox-panel {
            overflow: hidden;
            overflow-y: auto;
            padding: 5px;
            position: absolute;
            z-index: 99999;
            background: white;
            box-shadow: 2px 2px 5px #c6c6c6;
        }

        .language-textbox-panel .dropdown-menu {
            left: -5px;
            box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.37);
            position: relative;
        }

        .language-selected {
            background-color: #1890ff!important;
            color: #fff;
        }
        `]
            }] }
];
/** @nocollapse */
LanguageTextPanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 }
];
LanguageTextPanelComponent.propDecorators = {
    opened: [{ type: Input }],
    left: [{ type: Input }],
    top: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    items: [{ type: Input }],
    data: [{ type: Input }],
    maxWords: [{ type: Input }],
    itemClick: [{ type: Output }],
    hidePanel: [{ type: Output }],
    showPanel: [{ type: Output }],
    onEnterHandler: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
    onEscHandler: [{ type: HostListener, args: ['document:keydown.esc', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LANGUAGE_TEXTBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => LanguageTextboxComponent)),
    multi: true
};
class LanguageTextboxComponent {
    /**
     * @param {?} el
     * @param {?} cfr
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} applicationRef
     * @param {?} renderer
     * @param {?} requiredValidator
     * @param {?} cd
     */
    constructor(el, cfr, injector, ngZone, applicationRef, renderer, requiredValidator, cd) {
        this.el = el;
        this.cfr = cfr;
        this.injector = injector;
        this.ngZone = ngZone;
        this.applicationRef = applicationRef;
        this.renderer = renderer;
        this.requiredValidator = requiredValidator;
        this.cd = cd;
        this.disabled = false;
        this.readonly = false;
        this.editable = false;
        this.enableClear = false;
        this.languages = [];
        this.panelHeight = 260;
        this.panelWidth = 365;
        this.maxWords = null;
        /**
         * 面板输入框根据LOCALE_ID 自动获得焦点
         * 设为 false 时，仅第1个获得焦点
         */
        this.autoFocus = true;
        this.openOnFocus = true;
        this.groupIcon = '<span class="f-icon f-icon-yxs_earth"></span>';
        this.currentLanguageItem = undefined;
        this.data = {};
        this.value = '';
        this.onTextBoxclickHandler = null;
        this.lts = null;
        this.overLayService = null;
        this.onModelChange = (/**
         * @param {?=} obj
         * @return {?}
         */
        (obj) => { });
        this.onModelTouched = (/**
         * @param {?=} obj
         * @return {?}
         */
        (obj) => { });
        this.debugSer = null;
        this.localeService = this.injector.get(LocaleService);
        this.lts = this.injector.get(LanguageTextboxService, null);
        this.debugSer = this.injector.get(DebugService, null);
        if (!this.lts) {
            this.lts = new LanguageTextboxService();
        }
        this.lts.hide$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.hideDropDownPanel();
        }));
        this.overLayService = this.injector.get(OverLayHiddenService, null);
        if (!this.overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.editable) {
            this.editable = this.languages && this.languages.length && this.languages.length === 1;
        }
        this.bindLanguageInfo(this.languages);
        this.onTextBoxclickHandler = this.renderer.listen(this.input.textbox.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            if (this.editable) {
                this.hideDropDownPanel();
                return;
            }
            if (!this.comboPanelRef) {
                this.showDropDownPanel();
            }
        }));
        this.ngCtrl = this.injector.get(NgControl, null);
        this.registerKeyDown();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.languages && !changes.languages.isFirstChange()) {
            this.bindLanguageInfo(changes.languages.currentValue);
            this.setValue();
        }
    }
    /**
     * @private
     * @param {?} languages
     * @return {?}
     */
    bindLanguageInfo(languages) {
        if (languages && languages.length) {
            if (!this.currentLanguage) {
                /** @type {?} */
                const runtimeLanguageCode = this.localeService.localeId;
                if (runtimeLanguageCode) {
                    /** @type {?} */
                    const defaultLang = languages.find((/**
                     * @param {?} l
                     * @return {?}
                     */
                    l => l.code === runtimeLanguageCode));
                    if (defaultLang) {
                        this.currentLanguage = defaultLang.code;
                        this.currentLanguageItem = defaultLang;
                    }
                    else {
                        if (languages.length) {
                            this.currentLanguage = languages[0].code;
                            this.currentLanguageItem = languages[0];
                        }
                    }
                }
                else {
                    if (this.debugSer) {
                        this.debugSer.warn('当前上下文环境未取到语言代码。');
                    }
                }
            }
            else {
                this.currentLanguageItem = this.getLanguageItem(this.currentLanguage);
            }
        }
        else {
            if (this.debugSer) {
                this.debugSer.warn(`Please set  the '[languages]' data.`);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.onKeyDownHandler) {
            this.onKeyDownHandler();
        }
        this.hideDropDownPanel();
        if (this.onTextBoxclickHandler) {
            this.onTextBoxclickHandler();
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerKeyDown() {
        /** @type {?} */
        const textEl = this.input.textbox.nativeElement;
        this.onKeyDownHandler = this.renderer.listen(textEl, 'keydown', this.onKeyDown.bind(this));
        // this.ngZone.runOutsideAngular(() => {
        // });
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    onKeyDown($event) {
        if ($event) {
            $event.stopPropagation();
            /** @type {?} */
            const keyCode = $event.keyCode;
            // F2
            if (keyCode === 113) {
                this.showDropDownPanel();
            }
            if (keyCode !== 38 && keyCode !== 40) {
                return;
            }
            /** @type {?} */
            const languageItemIndex = this.languages.findIndex((/**
             * @param {?} l
             * @return {?}
             */
            l => l.code === this.currentLanguageItem.code));
            switch (keyCode) {
                case 38:
                    if (languageItemIndex === 0) {
                        this.currentLanguageItem = this.languages[this.languages.length - 1];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex - 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
                case 40:
                    if (languageItemIndex === this.languages.length - 1) {
                        this.currentLanguageItem = this.languages[0];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex + 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
            }
            this.setValue();
            this.cd.markForCheck();
            this.cd.detectChanges();
            // this.input.cd.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.input.setFocusToEnd();
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        $event.stopPropagation();
        if (this.openOnFocus) {
            this.showDropDownPanel();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        $event.stopPropagation();
        // this.hideDropDownPanel();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onIconClick($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
            $event.originalEvent.preventDefault();
        }
        if (!this.comboPanelRef) {
            this.showDropDownPanel();
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    getCliecntRect() {
        /** @type {?} */
        const rect = this.input.el.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const winWidth = window.innerWidth;
        /** @type {?} */
        const winHeight = window.innerHeight;
        /** @type {?} */
        let posleft = rect.left;
        if (winWidth - posleft < this.panelWidth) {
            posleft = posleft + rect.width - this.panelWidth;
        }
        /** @type {?} */
        let postop = rect.top;
        if (winHeight - postop < this.panelHeight) {
            postop = postop - rect.height;
        }
        else {
            postop = postop + rect.height;
        }
        return {
            left: posleft,
            // + rect.width - this.panelWidth
            top: postop,
            height: this.panelHeight,
            width: this.panelWidth
        };
    }
    /**
     * @private
     * @return {?}
     */
    updateLangOrder() {
        /** @type {?} */
        let idx = -1;
        /** @type {?} */
        const curritem = this.languages.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            /** @type {?} */
            const f = n.code === this.localeService.localeId;
            if (f) {
                idx = i;
            }
            return f;
        }));
        if (curritem) {
            /** @type {?} */
            const _item = Object.assign({}, curritem);
            this.languages.splice(idx, 1);
            this.languages.unshift(_item);
        }
    }
    /**
     * @return {?}
     */
    showDropDownPanel() {
        if (!this.languages || this.languages.length === 1) {
            return;
        }
        if (this.readonly || this.disabled) {
            return;
        }
        if (!this.comboPanelRef) {
            /** @type {?} */
            const compFac = this.cfr.resolveComponentFactory(LanguageTextPanelComponent);
            this.comboPanelRef = compFac.create(this.injector);
            this.applicationRef.attachView(this.comboPanelRef.hostView);
            Object.assign(this.comboPanelRef.instance, this.getCliecntRect());
            /** @type {?} */
            const panelRefEl = this.comboPanelRef.location.nativeElement;
            document.body.appendChild(panelRefEl);
            this.renderer.addClass(panelRefEl, 'overlay-pane');
            // this.renderer.setStyle(panelRefEl, 'width', '100vw');
            // this.renderer.setStyle(panelRefEl, 'height', '100vh');
            this.renderer.setStyle(panelRefEl, 'z-index', '99999999');
            this.renderer.setStyle(panelRefEl, 'left', '0');
            this.renderer.setStyle(panelRefEl, 'top', '0');
            // 根据上下文语言，自动调整语言列表的顺序，将当前语言设为第1个
            this.updateLangOrder();
            this.comboPanelRef.instance.items = this.languages;
            this.comboPanelRef.instance.languageInputRef = this;
            this.comboPanelRef.instance.data = Object.assign({}, this.data);
            this.comboPanelRef.instance.currentItem = this.currentLanguageItem;
            this.comboPanelRef.instance.maxWords = this.maxWords;
            this.comboPanelRef.instance.itemClick.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // this.currentLanguageItem = item;
                // this.currentLanguage = item.code;
                this.data = Object.assign({}, data);
                this.hideDropDownPanel();
                this.setValue();
            }));
            this.comboPanelRef.instance.hidePanel.subscribe((/**
             * @return {?}
             */
            () => {
                this.hideDropDownPanel();
            }));
            this.comboPanelRef.instance.showPanel.subscribe((/**
             * @param {?} panelIns
             * @return {?}
             */
            (panelIns) => {
                panelIns.setInputFocus();
            }));
            this.comboPanelRef.instance.show(this);
            this.lts.setActivePane(this);
            // 注册鼠标滚轮，点击事件，用于隐藏Panel
            this.overLayService.registerMouseEvent(panelRefEl, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (panelRefEl.contains(e.target)) {
                    return;
                }
                this.hideDropDownPanel();
            }));
        }
        else {
            this.hideDropDownPanel();
        }
    }
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    getLanguageItem(code) {
        return this.languages.find((/**
         * @param {?} l
         * @return {?}
         */
        l => l.code === code));
    }
    /**
     * @return {?}
     */
    onClear() { }
    /**
     * @param {?=} val
     * @return {?}
     */
    onChanges(val) {
        this.data[this.currentLanguage] = this.value;
        this.onModelChange(Object.assign({}, this.data));
        this.onModelTouched(Object.assign({}, this.data));
    }
    /**
     * @return {?}
     */
    setValue() {
        if (this.data) {
            this.value = this.data[this.currentLanguage] || '';
        }
        else {
            this.value = '';
        }
        this.onChanges();
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    hideDropDownPanel() {
        this.renderer.removeStyle(document.body, 'overflow');
        if (this.comboPanelRef && this.comboPanelRef.instance) {
            // if (this.comboPanelRef.instance.opened) {
            //     this.comboPanelRef.instance.hide();
            // }
            this.comboPanelRef.instance.opened = false;
            /** @type {?} */
            const componentEl = this.comboPanelRef.location.nativeElement;
            if (componentEl.parentNode) {
                if (this.overLayService) {
                    this.overLayService.destory(componentEl);
                }
                componentEl.parentNode.removeChild(componentEl);
            }
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.input.focus();
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (this.comboPanelRef) {
                        this.comboPanelRef.destroy();
                        this.comboPanelRef = null;
                    }
                }), 100);
            }));
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (obj && Object.keys(obj).length) {
            this.data = obj;
            this.value = obj[this.currentLanguage];
        }
        else {
            this.data = {};
            this.value = '';
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
LanguageTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'language-textbox',
                template: `
        <input-group #input
            [customCls] = "'farris-language-textbox'"
            [groupText]="groupIcon"
            [disabled]="disabled"
            [readonly]="readonly"
            [editable]="editable"
            [(ngModel)]="value"
            [enableClear]="false"
            [value]="value"
            (valueChange)="onChanges($event)"
            (clear)="onClear()"
            (clickHandle)="onIconClick($event)"
            (focusHandle)="onFocus($event)"
        >
        </input-group>
    `,
                providers: [LANGUAGE_TEXTBOX_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None,
                styles: [`
        .farris-language-textbox .input-group-text {
            padding-right: 3px;
        }
        .farris-language-textbox .input-group-text .language-text {
            padding-right: 3px;
        }
        `]
            }] }
];
/** @nocollapse */
LanguageTextboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: NgZone },
    { type: ApplicationRef },
    { type: Renderer2 },
    { type: RequiredValidator, decorators: [{ type: Optional }, { type: Self }] },
    { type: ChangeDetectorRef }
];
LanguageTextboxComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    enableClear: [{ type: Input }],
    languages: [{ type: Input }],
    currentLanguage: [{ type: Input }],
    panelHeight: [{ type: Input }],
    panelWidth: [{ type: Input }],
    maxWords: [{ type: Input }],
    autoFocus: [{ type: Input }],
    input: [{ type: ViewChild, args: ['input',] }],
    openOnFocus: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LanguageTextboxModule {
}
LanguageTextboxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    LanguageTextboxComponent,
                    LanguageTextPanelComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    InputGroupModule,
                    LocaleModule.forRoot()
                ],
                exports: [LanguageTextboxComponent],
                providers: [],
                entryComponents: [LanguageTextPanelComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LanguageTextPanelComponent, LANGUAGE_TEXTBOX_VALUE_ACCESSOR, LanguageTextboxComponent, LanguageTextboxModule };

//# sourceMappingURL=farris-ui-language-textbox.js.map