{"version":3,"file":"farris-bef.js.map","sources":["ng://@farris/bef/lib/types.ts","ng://@farris/bef/lib/tokens.ts","ng://@farris/bef/lib/entity_util.ts","ng://@farris/bef/lib/bef_change_builder.ts","ng://@farris/bef/lib/bef_change_handler.ts","ng://@farris/bef/lib/framework_session_service.ts","ng://@farris/bef/lib/session/bef_session_storage_strategy.ts","ng://@farris/bef/lib/utils/http_header.util.ts","ng://@farris/bef/lib/utils/http_param.util.ts","ng://@farris/bef/lib/utils/request_info.util.ts","ng://@farris/bef/lib/utils/response_info.util.ts","ng://@farris/bef/lib/http_service.ts","ng://@farris/bef/lib/session/bef_session_handling_strategy.ts","ng://@farris/bef/lib/session/bef_session_handling_strategy_factory.ts","ng://@farris/bef/lib/session/bef_session_service.ts","ng://@farris/bef/lib/decorators.ts","ng://@farris/bef/lib/deprecated/deprecated_bef_repository.ts","ng://@farris/bef/lib/bef_entity_manager.ts","ng://@farris/bef/lib/bef_change_util.ts","ng://@farris/bef/lib/bef_variable_manager.ts","ng://@farris/bef/lib/bef_proxy_util.ts","ng://@farris/bef/lib/bef_data_path_util.ts","ng://@farris/bef/lib/bef_data_service.ts","ng://@farris/bef/lib/utils/back_end_message.util.ts","ng://@farris/bef/lib/session/bef_session_manager.ts","ng://@farris/bef/lib/bef_proxy_extend.ts","ng://@farris/bef/lib/bef_repository.ts","ng://@farris/bef/lib/uri_service.ts","ng://@farris/bef/lib/bef_proxy.ts","ng://@farris/bef/lib/bef_rest_service.ts","ng://@farris/bef/lib/bef_lookup.service.ts","ng://@farris/bef/lib/bef_lookup_default.service.ts","ng://@farris/bef/lib/bef_repository_util.ts","ng://@farris/bef/lib/uri.ts","ng://@farris/bef/lib/bef_combo.service.ts","ng://@farris/bef/lib/bef_dynamic_control_group_default.service.ts","ng://@farris/bef/lib/dynamic_bef_repository.ts","ng://@farris/bef/lib/preset_bef_repository.ts","ng://@farris/bef/public-api.ts"],"sourcesContent":["import { Observable } from 'rxjs';\r\n\r\n/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:48\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-07-30 17:37:02\r\n */\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * 变更集相关类型\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport class ChangeDetailType {\r\n\r\n  /**\r\n   * 新增\r\n   */\r\n  static Added = 'Added';\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  static Modify = 'Modify';\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  static Deleted = 'Deleted';\r\n}\r\n\r\n/**\r\n * 行变更信息\r\n * 必须包含：\r\n * 1、DataId   => 主键值；\r\n * 2、属性名   => 新的属性值；\r\n * 3、子表名+s => 子表行的ChangeDetail数组\r\n */\r\nexport interface ChangeDetailInfo {\r\n  DataId?: string;\r\n  [key: string]: number | string | boolean | null | ChangeDetail | ChangeDetail[] | { [key: string]: any };\r\n}\r\n\r\n/**\r\n * 行变更详情\r\n * 包含：\r\n * 1、变更类型；\r\n * 2、变更信息\r\n */\r\nexport interface ChangeDetail {\r\n  ChangeType: ChangeDetailType;\r\n  ChangeInfo: ChangeDetailInfo;\r\n}\r\n\r\n\r\n/**\r\n * 请求类型\r\n */\r\nexport interface RequestInfo {\r\n  dataChange: ChangeDetail[];\r\n  variableChange?: ChangeDetail;\r\n}\r\n\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * 请求、响应相关类型定义\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  totalCount: number;\r\n  pageCount: number;\r\n  pageIndex: number;\r\n}\r\n\r\n/**\r\n * 查询结果\r\n */\r\nexport interface QueryResult {\r\n  result: any[];\r\n  pagination: Pagination;\r\n}\r\n\r\n/**\r\n * 返回结果类型\r\n */\r\nexport interface ResponseInfo {\r\n  returnValue: any;\r\n  message: any[];\r\n  innerDataChange: ChangeDetail[];\r\n  innerVariableChange: ChangeDetail;\r\n}\r\n\r\n/**\r\n * 代理钩子\r\n */\r\nexport interface IProxyExtend {\r\n  extendUrl(url: string, params: { [propName: string]: any }): string;\r\n  extendBody(body: any): { [propName: string]: any };\r\n  extendHeaders(headers: { [propName: string]: any }, runtimeContext?: any): Observable<any>;\r\n  onResponse?(response: ResponseInfo, ignoreChanges?: boolean, options?: any);\r\n  onError?(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any>;\r\n  parseHeaders(response: any);\r\n}\r\n\r\n/**\r\n * 带RequestInfo的body对象\r\n */\r\nexport interface BodyWithRequestInfo {\r\n  requestInfo: RequestInfo;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * request option格式\r\n */\r\nexport interface RequestOption {\r\n  body: BodyWithRequestInfo;\r\n  [key: string]: any;\r\n}\r\n/**\r\n * 子表分页参数\r\n */\r\nexport interface RetrieveParam {\r\n  filters: { [nodeCode: string]: { pagination: { pageIndex: number, pageSize: number } } },\r\n  parentIds?: { [nodeCode: string]: string }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:48\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2018-10-19 15:36:48\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nconst BE_SERVER_URI_TOKEN = new InjectionToken<string>('@farris/be BE_SERVER_URL');\r\n\r\n/**\r\n * 1、因为bef里，很多类都没有注入，BefSessionHandlingStragegy无法直接注入；\r\n * 2、通过一个字符串Token来间接做策略选择。\r\n */\r\nconst BE_SESSION_HANDLING_STRATEGY_TOKEN = new InjectionToken<boolean>('@farris/be BE_SESSION_HANDLING_STRATEGY_TOKEN');\r\n\r\nexport { BE_SERVER_URI_TOKEN, BE_SESSION_HANDLING_STRATEGY_TOKEN };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:21\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-04-30 15:41:45\r\n */\r\nimport { FieldMetadataUtil } from '@farris/devkit';\r\n\r\nclass EntityUtil {\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any, propMetadata: any} {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n    let propMetadata: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n        propMetadata = ngFieldProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n        propMetadata = ngObjectProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n        propMetadata = ngListProperties[propName];\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n        propMetadata = ngDynamicProperties[propName];\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType, propMetadata };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string, ) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData (entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:35:39\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-18 16:15:47\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { Modification, ModifyType, Entity, EntityCollection, FieldMetadataUtil } from '@farris/devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { EntityUtil } from './entity_util';\r\n\r\n\r\n/**\r\n * BEF变更集构造器\r\n */\r\nclass BefChangeBuilder {\r\n\r\n  /**\r\n   * Bef变更集\r\n   */\r\n  public changeDetail: ChangeDetail;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param entityType 实体类型\r\n   */\r\n  constructor(\r\n    private entityType: Type<Entity>,\r\n    private entityCollection: EntityCollection<Entity>\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更集\r\n   * @param modifications\r\n   */\r\n  public build(modifications: Modification[]): ChangeDetail {\r\n\r\n    // 重置changeDetail\r\n    this.changeDetail = {\r\n      ChangeType: ChangeDetailType.Modify,\r\n      ChangeInfo: {\r\n        DataId: ''\r\n      }\r\n    };\r\n\r\n    modifications.forEach(modification => {\r\n      this.buildChangeDetail(modification);\r\n    });\r\n\r\n    return this.changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更详情\r\n   */\r\n  public buildChangeDetail(modification: Modification) {\r\n\r\n    const paths = modification.path.concat();\r\n\r\n    // 设置根节点DataId\r\n    if (!this.changeDetail.ChangeInfo.DataId) {\r\n      this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];\r\n    }\r\n\r\n    let parentChangeDetail = this.changeDetail;\r\n    let parentEntityType = this.entityType;\r\n\r\n    for (let i = 1; i < paths.length && parentChangeDetail; i = i + 2) {\r\n\r\n      const parentChangeInfo = this.getChangeInfo(parentChangeDetail);\r\n      const propName = paths[i];\r\n      const { propType, propEntityType, propMetadata } = EntityUtil.getPropInfo(parentEntityType, propName);\r\n      const dataField = propMetadata.dataField || propName;\r\n\r\n      if (propType === 'NgField') {\r\n\r\n        // 不支持主键变更，忽略\r\n        const primaryKey = EntityUtil.getPrimaryKey(parentEntityType);\r\n        if (propName === primaryKey) {\r\n          continue;\r\n        }\r\n\r\n        if (modification.type !== ModifyType.ValueChange) {\r\n          throw Error('简单类型的属性上不支持ValueChange类型之外的变更');\r\n        }\r\n\r\n        // NgField类型：说明是最后一级\r\n        parentChangeInfo[dataField] = modification.value;\r\n        parentChangeDetail = null;\r\n\r\n      } else if (propType === 'NgObject') {\r\n\r\n        // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。\r\n        const childId = paths[i + 1].split(':')[1];\r\n        const childIdName = paths[i + 1].split(':')[0];\r\n\r\n        if (childIdName) {\r\n\r\n          // 有主键（关联对象）：是一个普通的对象\r\n          let changeObject = parentChangeInfo[dataField];\r\n\r\n          // 获取数据\r\n          const entityPath = paths.slice(0, i + 1);\r\n          const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n          changeObject = changedEntity ? changedEntity.toJSON(true) : {};\r\n          parentChangeInfo[dataField] = changeObject;\r\n          parentChangeDetail = null;\r\n          parentEntityType = null;\r\n\r\n        } else {\r\n\r\n          // 没有主键（值对象）：是一个完整的ChangeDetail\r\n          let changeDetail = parentChangeInfo[dataField] as ChangeDetail;\r\n          if (!changeDetail) {\r\n            changeDetail = {\r\n              ChangeType: ChangeDetailType.Modify,\r\n              ChangeInfo: {}\r\n            };\r\n          }\r\n          parentChangeInfo[dataField] = changeDetail;\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 如果不存在则创建一个空数组\r\n        if (!parentChangeDetail.ChangeInfo[dataField]) {\r\n          parentChangeDetail.ChangeInfo[dataField] = [];\r\n        }\r\n        const changeDetails = parentChangeDetail.ChangeInfo[dataField] as ChangeDetail[];\r\n\r\n        // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：\r\n        // 1、不存在：创建一个Modify类型的ChangeDetail；\r\n        // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；\r\n        // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。\r\n        if (i !== paths.length - 1) {\r\n\r\n          // 遍历检查变更是否已经存在\r\n          const dataId = paths[i + 1].split(':')[1];\r\n\r\n          let changeDetail = changeDetails.find(changeDetailItem => {\r\n            return changeDetailItem.ChangeInfo.DataId === dataId;\r\n          });\r\n\r\n          // 如果不存在，则创建并添加\r\n          if (!changeDetail) {\r\n            changeDetail = this.createEmptyChangeDetail(ChangeDetailType.Modify, dataId);\r\n            changeDetails.push(changeDetail);\r\n          }\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n          continue;\r\n        }\r\n\r\n        // 如果是叶子节点，则肯定是新增或者删除变更。\r\n        if (modification.type === ModifyType.Add || modification.type === ModifyType.Insert) {\r\n\r\n          // // 遍历添加\r\n          // modification.value.forEach((entity: any) => {\r\n          //   this.addAddChangeDetail(changeDetails, entity.toJSON(), propEntityType);\r\n          // });\r\n        } else if (modification.type === ModifyType.Remove) {\r\n\r\n          // @todo：删除变更直接向服务器端提交了，不需要再次提交\r\n          // 遍历变更集，添加移除变更\r\n          // modification.value.forEach((entityData) => {\r\n          //   this.addRemoveChangeDetail(changeDetails, entityData, propEntityType);\r\n          // });\r\n        }\r\n\r\n        // 重置\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n\r\n      } else if (propType === 'NgDynamic') {\r\n        // 获取数据\r\n        const entityPath = paths.slice(0, i + 1);\r\n        const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n        parentChangeInfo[dataField] = {\r\n          ChangeType: ChangeDetailType.Modify,\r\n          ChangeInfo: changedEntity ? changedEntity.toJSON(true) : {}\r\n        };\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取变更信息\r\n   * 在整个ChangeDetail树上，存在两种类型的节点\r\n   * ChangeDetail：实体变更、值对象变更（没有DataID）\r\n   * PlainObject: 关联对象的变更\r\n   * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。\r\n   * @todo：为这两种节点封装ChangeNode基类来解决这个差异。\r\n   */\r\n  private getChangeInfo(changeDetail: any): any {\r\n\r\n    // @todo：可能存在同名属性\r\n    if (changeDetail.hasOwnProperty('ChangeInfo')) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建ChangeDetail\r\n   * @param type BEF变更类型\r\n   * @param dataId 数据内码\r\n   */\r\n  private createEmptyChangeDetail(type: ChangeDetailType, dataId: string): ChangeDetail {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {\r\n        DataId: dataId\r\n      }\r\n    };\r\n    return changeDetail;\r\n  }\r\n\r\n}\r\n\r\nexport { BefChangeBuilder };\r\n","import { Type } from '@angular/core';\r\nimport { Entity, EntityList, EntityCollection } from '@farris/devkit';\r\nimport { EntityUtil } from './entity_util';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\n\r\n/**\r\n * 处理服务器端变更\r\n */\r\nclass BefChangeHandler {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集\r\n   */\r\n  handle(\r\n    entityType: Type<Entity>,\r\n    entityCollection: EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    this.handleChangeDetails(entityType, entityCollection, changeDetails);\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（批量）\r\n   * @param entities\r\n   */\r\n  handleChangeDetails(\r\n    entityType: Type<Entity>,\r\n    entityList: EntityList<Entity> | EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    if (!changeDetails) {\r\n      return;\r\n    }\r\n\r\n    changeDetails.forEach((changeDetail: ChangeDetail) => {\r\n      const id = (changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId) as string;\r\n      const entity = this.getEntityById(entityList, id);\r\n      if (!entity) {\r\n        return;\r\n      }\r\n      this.handleChangeDetail(entityType, entity, changeDetail);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（单条）\r\n   */\r\n  handleChangeDetail(\r\n    entityType: Type<Entity>,\r\n    entity: Entity,\r\n    changeDetail: ChangeDetail\r\n  ) {\r\n\r\n    if (!changeDetail || !entity) {\r\n      return;\r\n    }\r\n\r\n    // 只处理值变更，其他变更待进一步验证。\r\n    if (changeDetail.ChangeType !== ChangeDetailType.Modify) {\r\n      return;\r\n    }\r\n\r\n    const changeInfo = changeDetail.ChangeInfo;\r\n    Object.keys(changeInfo).forEach((propName: string) => {\r\n      const { propType, propEntityType } = EntityUtil.getPropInfo(entityType, propName);\r\n      if (propType === 'NgField') {\r\n\r\n        // 简单属性：更新值\r\n        entity[propName] = changeInfo[propName];\r\n      } else if (propType === 'NgObject') {\r\n        const childEntity = entity[propName] as Entity;\r\n        if (childEntity.primaryKey) {\r\n\r\n          // 关联对象：重新加载数据\r\n          const childEntityData = changeInfo[propName];\r\n          childEntity.load(childEntityData);\r\n\r\n        } else {\r\n\r\n          // 值对象：递归处理变更\r\n          const childChangeDetail = changeInfo[propName] as ChangeDetail;\r\n          this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 子列表：递归处理变更集合\r\n        const childEntityList = entity[propName] as EntityList<Entity>;\r\n        const childChangeDetails = changeInfo[propName] as ChangeDetail[];\r\n        this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异\r\n   */\r\n  private getEntityById(entityList: EntityList<Entity> | EntityCollection<Entity>, id: string): Entity {\r\n    let target: Entity;\r\n    if (entityList instanceof EntityCollection) {\r\n      target = entityList.getEntityById(id);\r\n    } else {\r\n      target = entityList.get(id);\r\n    }\r\n    return target ? target : null;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { BefChangeHandler };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-13 20:05:46\r\n */\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { SessionService } from '@ecp-caf/caf-common';\r\n\r\n@Injectable()\r\nclass FrameworkSessionService {\r\n\r\n  constructor(@Optional() private sessionService: SessionService) {\r\n  }\r\n\r\n  /**\r\n   * 获取用户SessionId\r\n   */\r\n  getUserSessionId() {\r\n    return this.sessionService.getUserSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取当前功能菜单的SessionId\r\n   */\r\n  getCurrentSessionId(runtimeContext?: any) {\r\n    let sessionId: string;\r\n    const rsi = this.getRuntimeSessionId();\r\n    if (rsi) {\r\n      return rsi;\r\n    }\r\n    if (this.sessionService) {\r\n      if (runtimeContext && runtimeContext.hasOwnProperty('tabId')) {\r\n        const tabId = runtimeContext.tabId;\r\n        sessionId = this.sessionService.getCurrentSeesionId(tabId);\r\n      } else {\r\n        sessionId = this.sessionService.getCurrentSeesionId();\r\n      }\r\n    }\r\n    if (!sessionId) {\r\n      sessionId = this.getUserSessionId();\r\n    }\r\n    return sessionId;\r\n  }\r\n  private getRuntimeSessionId() {\r\n    const hash = window.location.hash;\r\n    const params = this.parse(hash);\r\n    return params && params.rsi || null;\r\n  }\r\n  public parse(queryString: string): { [propName: string]: any } {\r\n    if (!queryString) {\r\n      return {};\r\n    }\r\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n\r\nexport { FrameworkSessionService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\n/**\r\n * BeSession缓存\r\n */\r\ninterface BeSessionStorageStrategy {\r\n  getItem(beSessionKey: string): string;\r\n  setItem(beSessionKey: string, beSessionid: string): void;\r\n  removeItem(beSessionKey: string): void;\r\n  clear(frmSessionId: string, beSessionKey: string): void;\r\n}\r\n\r\n/**\r\n * 基于浏览器SessionStorage的BeSession缓存\r\n * @summary\r\n * 1、SeparatedSession模式下：\r\n *  {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1_beSessionUri1: beSessionId-1,\r\n *      frmSessionId2_beSessionUri2: beSessionId-2,\r\n *    }\r\n *  }\r\n * 2、UnifiedSession模式下（在Debug状态，同模式1）：\r\n * {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1: beSessionId-1,\r\n *      frmSessionId2: beSessionId-2,\r\n *    }\r\n *  }\r\n */\r\nclass SessionStorageBeSessionStorageStrategy implements BeSessionStorageStrategy {\r\n\r\n  /**\r\n   * 缓存Token\r\n   */\r\n  private sessionStorageKey = 'BE_SESSION_ID';\r\n\r\n  /**\r\n   * 获取值\r\n   */\r\n  public getItem(beSessionKey: string): string {\r\n    const beSessions = this.getAllBeSessions();\r\n    return beSessions[beSessionKey];\r\n  }\r\n\r\n  /**\r\n   * 设置值\r\n   */\r\n  public setItem(beSessionKey: string, beSessionId: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    beSessions[beSessionKey] = beSessionId;\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n\r\n  /**\r\n   * 删除值\r\n   */\r\n  public removeItem(beSessionKey: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    if (beSessions[beSessionKey]) {\r\n      delete beSessions[beSessionKey];\r\n    }\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n  /**\r\n   * 清空同一个父Session下所有的缓存\r\n   * @summary\r\n   * 框架内：清空功能菜单token下的所有BeSession缓存；\r\n   * 框架外：只清空当前beSessionUri的，框架外，用的是用户Sessionid，无法统一清理。\r\n   */\r\n  public clear(frmSessionId: string, beSessionUri: string): void {\r\n    const isInFramework = this.isInFramework();\r\n    if (isInFramework === true) {\r\n      this.removeItemsByFrmSessionId(frmSessionId);\r\n    } else {\r\n      this.removeItem(beSessionUri);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空frmSessionId对应的所有子BeSessionId\r\n   */\r\n  private removeItemsByFrmSessionId(frmSessionId: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    Object.keys(beSessions).forEach((beSessionKey: string) => {\r\n      if (beSessionKey.startsWith(frmSessionId) === true) {\r\n        delete beSessions[beSessionKey];\r\n      }\r\n    });\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n  /**\r\n   * 从SessionStorage中获取全部BeSessions\r\n   */\r\n  private getAllBeSessions(): any {\r\n    const beSessionsJson = window.sessionStorage.getItem(this.sessionStorageKey);\r\n    if (!beSessionsJson) {\r\n      return {};\r\n    }\r\n    return JSON.parse(beSessionsJson);\r\n  }\r\n\r\n  /**\r\n   * 设置全部BeSessions到SessionStorage\r\n   */\r\n  setAllBeSessions(beSessions: any): void {\r\n    const beSessionsString = JSON.stringify(beSessions);\r\n    window.sessionStorage.setItem(this.sessionStorageKey, beSessionsString);\r\n  }\r\n  /**\r\n   * 是否在框架内\r\n   */\r\n  private isInFramework(): boolean {\r\n    const hashString = window.location.hash;\r\n    if (!hashString) {\r\n      return false;\r\n    }\r\n    // todo: 不能直接依赖url中的参数，运行框架已经提供相关的获取参数的方法，应该通过运行框架服务获取\r\n    return hashString.indexOf('tabId=') !== -1;\r\n  }\r\n\r\n}\r\n\r\nexport { BeSessionStorageStrategy, SessionStorageBeSessionStorageStrategy };\r\n\r\n","import { HttpHeaders } from '@angular/common/http';\r\n\r\nclass HttpHeaderUtil {\r\n\r\n  /**\r\n   * PlainObject => HttpHeaders\r\n   */\r\n  public static convertToHeaders(headers: any) {\r\n    if (!headers) {\r\n      headers = new HttpHeaders();\r\n    }\r\n\r\n    // 已经是HttpHeaders，直接返回\r\n    const isHttpHeaders = headers instanceof HttpHeaders;\r\n    if (isHttpHeaders === true) {\r\n      return headers;\r\n    }\r\n    if (Object.keys(headers).length > 0) {\r\n      let httpHeaders = new HttpHeaders();\r\n      Object.keys(headers).forEach(prop => {\r\n        httpHeaders = httpHeaders.append(prop, headers[prop]);\r\n      });\r\n      headers = httpHeaders;\r\n    } else {\r\n      headers = new HttpHeaders();\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  // #region 添加特定含义的header\r\n\r\n  /**\r\n   * 追加SessionId头\r\n   * @param headers HttpHeaders对象\r\n   * @param context BeSessionId\r\n   */\r\n  public static appendSessionId(headers: HttpHeaders, sessionId: string): HttpHeaders {\r\n    return headers.append('SessionId', sessionId);\r\n  }\r\n\r\n  /**\r\n   * 追加CommonVariable头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 框架会话token，等价于原来的SessionId\r\n   */\r\n  public static appendCafRuntimeCommonVariable(headers: HttpHeaders, commonVariable: string): HttpHeaders {\r\n    return headers.append('X-CAF-Runtime-CommonVariable', commonVariable);\r\n  }\r\n\r\n  /**\r\n   * 追加X-CAF-Runtime-Context头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 等价于BeSessionId\r\n   */\r\n  public static appendCafRuntimeContext(headers: HttpHeaders, context: string): HttpHeaders {\r\n    return headers.append('X-CAF-Runtime-Context', context);\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加Content-Type头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 提交内容的MIME类型，默认为application/json\r\n   */\r\n  public static appendContextType(headers: HttpHeaders, contentType?: string): HttpHeaders {\r\n    contentType = contentType ? contentType : 'application/json';\r\n    return headers.append('Content-Type', contentType);\r\n  }\r\n  public static appendRequireMessage(headers: HttpHeaders, requireMessage = true) {\r\n    return headers.append('Bff-Require-Message', requireMessage.toString());\r\n  }\r\n  /**\r\n   * 组合表单复用，表单实例id\r\n   * @param headers headers\r\n   * @param funcInstId 表单实例id\r\n   */\r\n  public static appendFuncInstId(headers: HttpHeaders, funcInstId: string) {\r\n    return headers.append('Func-Inst-Id', funcInstId);\r\n  }\r\n  /**\r\n   * http headers to json\r\n   * @param headers headers\r\n   */\r\n  public static toJson(headers: HttpHeaders) {\r\n    if (!(headers instanceof HttpHeaders)) {\r\n      return null;\r\n    }\r\n    const result = {};\r\n    headers.keys().forEach(header => {\r\n      const values = headers.getAll(header);\r\n      if (values.length > 1) {\r\n        result[header] = values;\r\n      } else {\r\n        result[header] = values[0] || '';\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { HttpHeaderUtil };\r\n","import { HttpParams } from '@angular/common/http';\r\n\r\n/**\r\n * HttpParams工具类\r\n */\r\nclass HttpParamUtil {\r\n\r\n  /**\r\n   * 将PlainObject=>HttpParams\r\n   */\r\n  public static buildParams(params: any): HttpParams {\r\n    let httpParams = new HttpParams();\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = params[key].toString();\r\n        httpParams = httpParams.append(key, value);\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n}\r\n\r\nexport { HttpParamUtil };\r\n","import { Entity } from '@farris/devkit';\r\nimport { BefRepository } from '../bef_repository';\r\nimport { RequestInfo } from '../types';\r\n\r\nclass RequestInfoUtil {\r\n\r\n  /**\r\n   * 检查是否有requestInfo\r\n   */\r\n  public static hasRequestInfo(options: any): boolean {\r\n    if (!options || !options.body) {\r\n      return false;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.requestInfo && body.requestInfo.dataChange) {\r\n      return true;\r\n    }\r\n    if (body.dataChange) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 检查是否有RquestInfo\r\n   * @summary\r\n   * 产品部依赖了请求时传递RequestInfo，返回时直接取到returnValue的特性。\r\n   */\r\n  public static hasRequestInfoWithR(options: any): boolean {\r\n    if (!options || !options.body) {\r\n      return false;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.RequestInfo && body.RequestInfo.dataChange) {\r\n      return true;\r\n    }\r\n    if (body.dataChange) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(repository: BefRepository<Entity>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: repository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: repository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n\r\n  /**\r\n   * 构造带requestInfo的body（仅适用于body中有多个参数的情况）\r\n   * @summary\r\n   * 一个参数时body=requestInfo，不适用该方法。\r\n   */\r\n  public static buildBodyWithRequestInfo(body: any, repository: BefRepository<Entity>): any {\r\n    if (body.RequestInfo || body.requestInfo) {\r\n      return body;\r\n    }\r\n    const requestInfo = this.buildRequestInfo(repository);\r\n    const bodyWithRequestInfo = Object.assign({}, body, { requestInfo: requestInfo });\r\n    return bodyWithRequestInfo;\r\n  }\r\n  public static getRequestInfo(options: any) {\r\n    if (!options || !options.body) {\r\n      return null;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.requestInfo) {\r\n      return body.requestInfo;\r\n    }\r\n    if (body.dataChange || body.variableChange) {\r\n      return body;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { RequestInfoUtil };\r\n","import { HttpErrorResponse, HttpHeaderResponse, HttpResponse, HttpResponseBase } from '@angular/common/http';\r\n\r\nclass ResponseInfoUtil {\r\n\r\n  /**\r\n   * 将ResponseInfo转换为老接口的数据返回格式\r\n   */\r\n  public static unWrapResponseInfo(result: any) {\r\n\r\n    // 兼容cancel没有返回值的情况\r\n    if (!result) {\r\n      return result;\r\n    }\r\n\r\n    // 没有returnValue的情况下，兼容query取数的的格式\r\n    if (result.hasOwnProperty('returnValue') === false) {\r\n      if (result.hasOwnProperty('result') && result.hasOwnProperty('pagination')) {\r\n\r\n        // 兼容返回带分页的列表数据\r\n        return result.result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // 其他：返回RequestInfo.returnValue的情况\r\n    const returnValue = result.returnValue;\r\n    if (returnValue && returnValue.hasOwnProperty('result') && returnValue.hasOwnProperty('pagination')) {\r\n\r\n      // 兼容返回带分页的列表数据\r\n      return returnValue.result;\r\n    }\r\n    return result.returnValue;\r\n\r\n  }\r\n\r\n  public static isReported401Error(response: HttpResponseBase) {\r\n    return response.status === 401;\r\n  }\r\n  /**\r\n   * 解析后端消息\r\n   * @param result result\r\n   */\r\n  public static parseBackEndMessage(result: any) {\r\n    if (result && result.message && Array.isArray(result.message) && result.message.length > 0) {\r\n      return result.message;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 解析后端错误消息\r\n   * @param error error\r\n   */\r\n  public static parseBackEndError(e: any) {\r\n    const error = e && e.error;\r\n    if (error && error.hasOwnProperty('extensionMessage') && error.extensionMessage && error.extensionMessage.hasOwnProperty('UIMsg') && error.extensionMessage.UIMsg && error.extensionMessage.UIMsg.length > 0) {\r\n      return JSON.parse(error.extensionMessage.UIMsg);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { ResponseInfoUtil };\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// tslint:disable: no-string-literal disable: max-line-length\r\n@Injectable()\r\nexport class HttpService {\r\n  public httpClient: HttpClient;\r\n  private rtf: any;\r\n  constructor(private defaultHttpClient: HttpClient) {\r\n    this.httpClient = defaultHttpClient;\r\n    this.rtf = this.getService();\r\n  }\r\n  /**\r\n   * 遍历获取rtf服务\r\n   */\r\n  private getService() {\r\n    let env: Window = window;\r\n    while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {\r\n      env = window.parent;\r\n    }\r\n    return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};\r\n  }\r\n  /**\r\n   * 是否同源\r\n   * @param environment window\r\n   */\r\n  private isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  private get params() {\r\n    if (this.rtf && this.rtf.hasOwnProperty('session') && typeof this.rtf['session']['getCommonVariable'] === 'function') {\r\n      return this.rtf['session']['getCommonVariable']();\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取运行框架http服务\r\n   */\r\n  public get httpService() {\r\n    if (this.rtf && this.rtf.hasOwnProperty('http') && typeof this.rtf['http']['request'] === 'function') {\r\n      return this.rtf.http;\r\n    }\r\n    return null;\r\n  }\r\n  public request(method: string, url: string, options: any = {}): Observable<any> {\r\n    // todo: 使用运行框架的httpclient导致帮助无法显示数据，暂时撤回\r\n    // if (this.httpService && this.params && this.params.tabId) {\r\n    //   return this.httpService.request$(method, url, options);\r\n    // } else {\r\n    //   return this.defaultHttpClient.request(method, url, options);\r\n    // }\r\n    return this.defaultHttpClient.request(method, url, options);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport { HttpHeaderUtil } from '../utils/index';\r\nimport { BeSessionStorageStrategy } from './bef_session_storage_strategy';\r\nimport { HttpService } from '../http_service';\r\nimport { Injector } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\n/**\r\n * BefSession处理策略类\r\n */\r\nabstract class BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 存储策略\r\n   */\r\n  protected storageStrategy: BeSessionStorageStrategy;\r\n\r\n  /**\r\n   * 框架Session服务\r\n   */\r\n  protected frmSessionService: FrameworkSessionService;\r\n  /**\r\n   * 框架SessionId（用户的或者功能菜单的）\r\n   */\r\n  protected getFrmSessionId(runtimeContext?: any): string {\r\n    return this.frmSessionService.getCurrentSessionId(runtimeContext);\r\n  }\r\n  protected get frmSessionId(): string {\r\n    return this.frmSessionService.getCurrentSessionId();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService) {\r\n    this.storageStrategy = storageStrategy;\r\n    this.frmSessionService = frmSessionService;\r\n  }\r\n\r\n  /**\r\n   * 获取SessionId\r\n   */\r\n  public abstract getSessionId(): Observable<string>;\r\n  public abstract setSessionId(sessionId): void;\r\n  public abstract clearSessionId(): void;\r\n  public abstract extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders;\r\n  public abstract handleReponseHeaders(headers: HttpHeaders): void;\r\n  protected abstract getSessionStorageKey(runtimeContext?: any): string;\r\n\r\n  /**\r\n   * 获取框架SessionId\r\n   */\r\n  public getFrameworkSessionId(runtimeContext?: any) {\r\n    return this.getFrmSessionId(runtimeContext);\r\n  }\r\n\r\n  /**\r\n   * 从缓存中获取BeSession\r\n   */\r\n  protected getSessionIdFromStorage(runtimeContext?: any) {\r\n    const sessionStorageKey = this.getSessionStorageKey(runtimeContext);\r\n    const beSessionId = this.storageStrategy.getItem(sessionStorageKey);\r\n    return beSessionId;\r\n  }\r\n}\r\n\r\n/**\r\n * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）\r\n * @summary\r\n * ----------------------------------------\r\n * 处理原则：\r\n * 1、通过createSession创建；\r\n * 2、每个Repository拥有独立的BeSession；\r\n * 3、访问BE的EAPI时，通过header里的SessionId传递；\r\n * ----------------------------------------\r\n * 兼容性考虑：\r\n * 1、有产品部直接new BeSessionService()，没有传递\r\n */\r\nclass BefSeparatedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n  private injector: Injector;\r\n  /**\r\n   * 创建Session的的EAPI地址\r\n   */\r\n  private beSessionUri: string;\r\n\r\n  /**\r\n   * httpClient\r\n   */\r\n  private httpClient: HttpClient;\r\n\r\n  private httpService: HttpService;\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService,\r\n    httpClient: HttpClient, beBaseUri: string, injector: Injector\r\n  ) {\r\n    super(storageStrategy, frmSessionService);\r\n    this.beSessionUri = beBaseUri;\r\n    this.httpClient = httpClient;\r\n    this.httpService = new HttpService(this.httpClient);\r\n    this.injector = injector;\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getSessionId(): Observable<string> {\r\n    const beSessionId = this.getSessionIdFromStorage();\r\n    if (beSessionId) {\r\n      return of(beSessionId);\r\n    }\r\n    return this.createSession();\r\n\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空Sessionid\r\n   */\r\n  public clearSessionId() {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    // this.storageStrategy.removeItem(sessionKey);\r\n    this.storageStrategy.clear(this.frmSessionId, sessionKey);\r\n  }\r\n\r\n  /**\r\n   * 扩展Session相关头信息\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    const frmSessionId = this.getFrameworkSessionId(runtimeContext);\r\n    const beSessionId = this.getSessionIdFromStorage(runtimeContext);\r\n    headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    if (beSessionId) {\r\n      headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);\r\n      headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);\r\n    }\r\n\r\n    // const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    //if (appContext) {\r\n    // const appId = appContext.ApplicationId;\r\n    headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);\r\n    // }\r\n    // headers = HttpHeaderUtil.appendRequireMessage(headers, true);\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: HttpHeaders): void {\r\n  }\r\n\r\n  /**\r\n   * 创建BeSessionId\r\n   */\r\n  public createSession(): Observable<string> {\r\n    const params: { [propName: string]: any } = {\r\n      responseType: 'text'\r\n    };\r\n    if (!!this.frmSessionId) {\r\n      const appContext = this.injector.get<AppContext>(AppContext, null);\r\n      params.headers = new HttpHeaders({ SessionId: this.frmSessionId });\r\n      params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);\r\n      //if (appContext) {\r\n      // const appId = appContext.ApplicationId;\r\n      params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);\r\n      //}\r\n      params.headers = HttpHeaderUtil.toJson(params.headers);\r\n    }\r\n\r\n    return this.httpService.request('POST', this.beSessionUri, params).pipe(\r\n      tap((beSessionId: string) => {\r\n        this.setSessionId(beSessionId);\r\n      })\r\n    );\r\n  }\r\n\r\n  public extendHttpHeader() {\r\n  }\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   * @summary\r\n   * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；\r\n   * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，\r\n   */\r\n  protected getSessionStorageKey(runtimeContext?: any): string {\r\n    let sessionId = null;\r\n    if (runtimeContext) {\r\n      sessionId = this.getFrameworkSessionId(runtimeContext);\r\n    } else {\r\n      sessionId = this.frmSessionId;\r\n    }\r\n    return `${sessionId}_${this.beSessionUri}`;\r\n  }\r\n\r\n}\r\n\r\n\r\nclass BefUnifiedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 创建Session的的EAPI地址\r\n   */\r\n  private beSessionUri: string;\r\n  private injector: Injector;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService, beBaseUri: string, injector: Injector\r\n  ) {\r\n    super(storageStrategy, frmSessionService);\r\n    this.beSessionUri = beBaseUri;\r\n    this.injector = injector;\r\n  }\r\n\r\n  public getSessionId(): Observable<string> {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    const sessionId = this.storageStrategy.getItem(sessionKey);\r\n    return of(sessionId)\r\n    // return of(null);\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空Sessionid\r\n   */\r\n  public clearSessionId() {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.removeItem(sessionKey);\r\n  }\r\n\r\n  /**\r\n   * 扩展Session相关头信息\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    const frmSessionId = this.getFrameworkSessionId(runtimeContext);\r\n    const beSessionId = this.getSessionIdFromStorage(runtimeContext);\r\n    // headers = HttpHeaderUtil.appendRequireMessage(headers, true);\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const token = appContext.Token;\r\n      headers = HttpHeaderUtil.appendFuncInstId(headers, token);\r\n    }\r\n    headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    if (beSessionId) {\r\n      headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: HttpHeaders): void {\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   * @summary\r\n   */\r\n  protected getSessionStorageKey(runtimeContext?: any): string {\r\n    // const isDebug = false;\r\n    // if (isDebug) {\r\n    //   return `${this.frmSessionId}_${this.beSessionUri}`;\r\n    // } else {\r\n    //   return this.frmSessionId;\r\n    // }\r\n    let sessionId = null;\r\n    if (runtimeContext) {\r\n      sessionId = this.getFrameworkSessionId(runtimeContext);\r\n    } else {\r\n      sessionId = this.frmSessionId;\r\n    }\r\n    return `${sessionId}_${this.beSessionUri}`;\r\n  }\r\n}\r\n\r\nexport { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport {\r\n  BeSessionStorageStrategy, SessionStorageBeSessionStorageStrategy\r\n} from './bef_session_storage_strategy';\r\nimport {\r\n  BefSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy\r\n} from './bef_session_handling_strategy';\r\n\r\n\r\n/**\r\n * BeSession处理策略工厂\r\n */\r\n@Injectable()\r\nclass BefSessionHandlingStrategyFactory {\r\n\r\n  /**\r\n   * 创建BeSession处理策略\r\n   */\r\n  public create(\r\n    handlingStrategyName: string, frmSessionService: FrameworkSessionService,\r\n    beBaseUri: string, httpClient: HttpClient, injector: Injector\r\n  ): BefSessionHandlingStrategy {\r\n\r\n    const storageStrategy = this.createStorageStrategy();\r\n    const beSessionUri = this.createBeSessionUri(beBaseUri);\r\n\r\n    if (handlingStrategyName === 'UnifiedSession') {\r\n      return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beSessionUri, injector);\r\n    } else {\r\n      return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beSessionUri, injector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建BeSession缓存策略\r\n   */\r\n  private createStorageStrategy(): BeSessionStorageStrategy {\r\n    return new SessionStorageBeSessionStorageStrategy();\r\n  }\r\n\r\n  /**\r\n   * 创建BeSession地址\r\n   */\r\n  private createBeSessionUri(beBaseUri: string): string {\r\n    return `${beBaseUri}/service/createsession`;\r\n  }\r\n}\r\n\r\nexport { BefSessionHandlingStrategyFactory };\r\n\r\n\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { Injectable, Injector, InjectFlags, inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport { BE_SESSION_HANDLING_STRATEGY_TOKEN } from '../tokens';\r\nimport { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy } from './bef_session_handling_strategy';\r\nimport { BefSessionHandlingStrategyFactory } from './bef_session_handling_strategy_factory';\r\nimport { AppContext } from '@farris/devkit';\r\n\r\n@Injectable()\r\nclass BefSessionService {\r\n  public beBaseUri: string;\r\n  /**\r\n   * Session处理策略类\r\n   */\r\n  private handlingStrategy: BefSessionHandlingStrategy;\r\n  private injector: Injector;\r\n  /**\r\n   * 构造函数\r\n   * @summary\r\n   * 产品部存在new BeSessionService()的场景，injector可能为空，必须要兼容。\r\n   */\r\n  constructor(\r\n    httpClient: HttpClient, beBaseUri: string,\r\n    frmSessionService: FrameworkSessionService, injector?: Injector\r\n  ) {\r\n    this.beBaseUri = beBaseUri;\r\n    this.injector = injector;\r\n    this.handlingStrategy = this.createHandlingStrategy(injector, httpClient, frmSessionService, beBaseUri);\r\n  }\r\n  /**\r\n   * 获取token\r\n   */\r\n  public get token() {\r\n    return this.handlingStrategy.getFrameworkSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getBeSessionId(): Observable<string> {\r\n    return this.handlingStrategy.getSessionId();\r\n  }\r\n\r\n  /**\r\n   * 设置sessionId\r\n   * @param sessionId sessionId\r\n   */\r\n  public setBeSessionId(sessionId: string) {\r\n    this.handlingStrategy.setSessionId(sessionId);\r\n    this.setSessionId(sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空BeSessionId\r\n   */\r\n  public clearBeSessionId() {\r\n    this.handlingStrategy.clearSessionId();\r\n  }\r\n\r\n  /**\r\n   * 扩展请求header\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    return this.handlingStrategy.extendRequestHeaders(headers, runtimeContext);\r\n  }\r\n\r\n  /**\r\n   * 处理响应header\r\n   */\r\n  public handleResponseHeaders(headers: HttpHeaders): void {\r\n    return this.handlingStrategy.handleReponseHeaders(headers);\r\n  }\r\n\r\n  /**\r\n   * 创建BeSessionId\r\n   * @deprecated\r\n   * 不再提供封装，请自行调用EAPI上的createSession方法。\r\n   * @summary\r\n   * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；\r\n   * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.\r\n   */\r\n  public createBeSession(): Observable<string> {\r\n    const handlingStrategy = this.handlingStrategy as BefSeparatedSessionHandlingStrategy;\r\n    return handlingStrategy.createSession();\r\n  }\r\n  private setSessionId(sessionId: string) {\r\n    const appContext = this.injector.get<AppContext>(AppContext, null, InjectFlags.Optional);\r\n    if (appContext && sessionId) {\r\n      appContext.params.set('sessionId', sessionId);\r\n    }\r\n  }\r\n  /**\r\n   * 创建BeSession处理策略\r\n   * @summary session处理策略\r\n   *\r\n   * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector\r\n   *\r\n   * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`\r\n   *\r\n   * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）\r\n   */\r\n  private createHandlingStrategy(\r\n    injector: Injector, httpClient: HttpClient,\r\n    frmSessionService: FrameworkSessionService, beBaseUri: string\r\n  ): BefSessionHandlingStrategy {\r\n    let handlingStrategyName: string;\r\n    // 开发自己实例化的befSessionService\r\n    if (!injector) {\r\n      handlingStrategyName = 'SeparatedSession';\r\n    } else {\r\n      // bef 实例化\r\n      handlingStrategyName = injector.get<string>(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);\r\n    }\r\n    // 老表单，兼容老的模式，分开创建session\r\n    if (!handlingStrategyName) {\r\n      handlingStrategyName = 'SeparatedSession';\r\n    }\r\n    const handlingStrategyFactory = new BefSessionHandlingStrategyFactory();\r\n    return handlingStrategyFactory.create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector);\r\n  }\r\n}\r\n\r\n\r\nexport { BefSessionService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-05 19:32:10\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-03-05 19:55:27\r\n */\r\n\r\nimport { makePropDecorator } from '@farris/devkit';\r\n\r\n\r\n/**\r\n * 变量元数据名称\r\n */\r\nexport const NG_VARIABLE = '@farris/bef NG_VARIABLE';\r\n\r\n\r\n/**\r\n * NgVariable元数据接口\r\n */\r\nexport interface NgVariable {\r\n\r\n  /**\r\n   * 变量影射\r\n   */\r\n  mapping: string;\r\n  /**\r\n   * 原始数据类型\r\n   */\r\n  originalDataType?: string;\r\n  /**\r\n   * 变量类型（locale|remote）\r\n   */\r\n  category?: string;\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰器工厂接口\r\n */\r\nexport interface NgVariableDecorator {\r\n  (obj?: NgVariable): any;\r\n  new(obj?: NgVariable): any;\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰工厂的工厂\r\n */\r\nexport const NgVariable: NgVariableDecorator =\r\n  makePropDecorator(NG_VARIABLE, (obj: NgVariable) => obj);\r\n","/*\r\n * @Author: Sagi, Lucas, Witt\r\n * @Date: 2018-10-11 17:34:26\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-29 11:39:02\r\n */\r\n// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { Entity, Repository } from '@farris/devkit';\r\n\r\nimport { ChangeDetail, RequestInfo } from '../types';\r\n\r\nimport { BefRestService } from '../bef_rest_service';\r\nimport { BefChangeBuilder } from '../bef_change_builder';\r\nimport { BefChangeHandler } from '../bef_change_handler';\r\n\r\nimport { BefEntityManager } from '../bef_entity_manager';\r\nimport { BefVariableManager } from '../bef_variable_manager';\r\nimport { BefDataService } from '../bef_data_service';\r\n\r\n/**\r\n * 适配老的API，保持兼容\r\n */\r\n@Injectable()\r\nabstract class DeprecatedBefRepository<T extends Entity> extends Repository<T> {\r\n\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: BefEntityManager<T>;\r\n\r\n  /**\r\n   * 变量管理器\r\n   * @internal\r\n   */\r\n  public variableManager: BefVariableManager;\r\n\r\n  /**\r\n   * 取数服务\r\n   * @internal\r\n   */\r\n  protected dataService: BefDataService<T>;\r\n\r\n\r\n  // #region 老的属性包装成get方法进行兼容\r\n\r\n  /**\r\n   * 取数服务\r\n   */\r\n  public get restService(): BefRestService {\r\n    return this.dataService.restService;\r\n  }\r\n\r\n  /**\r\n   * 实体变更（前端）=> BE变更（后端）\r\n   */\r\n  public get changeBuilder(): BefChangeBuilder {\r\n    return this.entityManager.changeBuilder;\r\n  }\r\n\r\n  /**\r\n   * BE变更（后端）=> 实体变更（前端）\r\n   */\r\n  public get changeHandler(): BefChangeHandler {\r\n    return this.entityManager.changeHandler;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n  * 构造函数\r\n  */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // #region 数据访问\r\n\r\n  /**\r\n  * 获取实体集合\r\n  */\r\n  public getList(): Observable<T[]> {\r\n    return this.dataService.getList(null, null, null, null);\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   * @param id 主实体id\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    return this.dataService.getById(id);\r\n  }\r\n\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    return this.dataService.updateById(id);\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并加载\r\n   */\r\n  public create(defaultValue?: any): Observable<any> {\r\n    return this.dataService.create(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public append(defaultValue?: any): Observable<T> {\r\n    return this.dataService.append(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendByPath(fpath: string): Observable<any> {\r\n    return this.dataService.appendByPath(fpath);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 内码\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    return this.dataService.removeById(id, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param id 内码\r\n   * @param ifSave 是否保存\r\n   */\r\n  public removeByIds(ids: string[], ifSave?: boolean): Observable<any> {\r\n    return this.dataService.removeByIds(ids, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   * @param path 路径\r\n   * @param id   内码\r\n   */\r\n  public removeByPath(fpath: string, id: string): Observable<boolean> {\r\n    return this.dataService.removeByPath(fpath, id);\r\n  }\r\n  /**\r\n   * 将id对应的实体的变更提交的服务器端\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    return this.dataService.updateChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 提交path对应实体的变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<any> {\r\n    throw new Error('Not Implement');\r\n  }\r\n  /**\r\n   * 提交所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n    return this.dataService.updateAllChanges();\r\n  }\r\n\r\n  /**\r\n   * 应用变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    return this.dataService.applyChanges();\r\n  }\r\n\r\n  /**\r\n   * 提交数据变更和变量变更，通过retrieve模拟\r\n   * @internal\r\n   */\r\n  public updateDataAndVariableChanges(): Observable<any> {\r\n    const filterConditions: any[] = [];\r\n    const sortConditions: any[] = [];\r\n    const entityFilter = {\r\n      FilterConditions: filterConditions,\r\n      SortConditions: sortConditions,\r\n      IsUsePagination: true,\r\n      Pagination: {\r\n        PageIndex: 1,\r\n        PageSize: 1,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    const entityFilterJson = JSON.stringify(entityFilter);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 没有变更时不再提交变更\r\n    if (this.isEmptyRequestInfo(requestInfo)) {\r\n      return of(null);\r\n    }\r\n    const url = `${this.restService.baseUri}/extension/query?entityFilter=${entityFilterJson}`;\r\n    const body = requestInfo;\r\n    const options = {\r\n      body\r\n    };\r\n    return this.restService.invoke(url, 'PUT', null, options, false, true, true);\r\n  }\r\n\r\n  /**\r\n   * 应用id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    return this.dataService.applyChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 取消变更\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    return this.dataService.cancelChanges(options);\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 数据变更集处理\r\n\r\n  /**\r\n   * 清空所有本地实体的变更集\r\n   */\r\n  public clearAllEntityChanges(): void {\r\n    return this.entityManager.clearAllEntityChanges();\r\n  }\r\n\r\n  /**\r\n   * 获取数据变更\r\n   */\r\n  public getDataChangeDetails(): ChangeDetail[] {\r\n    return this.entityManager.buildAllEntityChangeDetails();\r\n  }\r\n\r\n  /**\r\n   * 处理数据变更\r\n   */\r\n  public handleDataChangeDetails(changeDetails: ChangeDetail[]): void {\r\n    return this.entityManager.handleDataChangeDetails(changeDetails);\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变量变更集处理\r\n\r\n  /**\r\n   * 获取变量变更\r\n   */\r\n  public getVariableChangeDetail(): ChangeDetail {\r\n    return this.variableManager.buildChangeDetail();\r\n  }\r\n\r\n  /**\r\n   * 处理变量变更\r\n   */\r\n  public handleVariableChangeDetail(changeDetail: ChangeDetail) {\r\n    this.variableManager.handleChangeDetail(changeDetail);\r\n  }\r\n\r\n  // #endregion\r\n  /**\r\n   * 变更集是否为空\r\n   * @param requestInfo requestInfo\r\n   */\r\n  private isEmptyRequestInfo(requestInfo: RequestInfo) {\r\n    if (!requestInfo) {\r\n      return true;\r\n    }\r\n    if ((!requestInfo.dataChange || requestInfo.dataChange.length < 1) && (!requestInfo.variableChange || Object.keys(requestInfo.variableChange).length < 1)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { DeprecatedBefRepository };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-07 17:24:38\r\n */\r\n\r\nimport { Entity, EntityList, EntityFactory, EntityCollection, EntityManager } from '@farris/devkit';\r\nimport { ChangeDetail} from './types';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BefChangeBuilder } from './bef_change_builder';\r\nimport { BefChangeHandler } from './bef_change_handler';\r\n\r\n\r\n/**\r\n * 实体管理类：管理Entity和\r\n * @todo\r\n * 1、实体管理应该放在Devkit中；\r\n * 2、目前只是简单代码拆分，待进一步明确职责。\r\n */\r\nclass BefEntityManager<T extends Entity> extends EntityManager<T> {\r\n\r\n\r\n  /**\r\n   * ChangeDetail构造器\r\n   */\r\n  public changeBuilder: BefChangeBuilder;\r\n\r\n  /**\r\n   * ChangeDetail处理器\r\n   */\r\n  public changeHandler: BefChangeHandler;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    super(entityCollection);\r\n    this.changeBuilder = new BefChangeBuilder(this.entityCollection.entityType, this.entityCollection);\r\n    this.changeHandler = new BefChangeHandler();\r\n  }\r\n\r\n\r\n  // #region 处理ChangeDetail相关\r\n\r\n\r\n  /**\r\n   * 获取数据变更\r\n   */\r\n  public buildAllEntityChangeDetails(): ChangeDetail[] {\r\n    const changeDetails: ChangeDetail[] = [];\r\n    const entities = this.entityCollection.getAllEntities();\r\n    entities.forEach((entity: Entity) => {\r\n      if (entity.changes.length === 0) {\r\n        return;\r\n      }\r\n      const changeDetail = this.changeBuilder.build(entity.changes);\r\n      \r\n      // 防止空id的变更被提交\r\n      // @todo：此处判断应该放到更底层，临时修复Bug。\r\n      if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {\r\n        changeDetails.push(changeDetail);\r\n      }\r\n    });\r\n    return changeDetails;\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   */\r\n  public buildEntityChangeDetailById(id: string): ChangeDetail {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (entity.changes.length === 0) {\r\n      return null;\r\n    }\r\n    const changeDetail = this.changeBuilder.build(entity.changes);\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 应用数据变更\r\n   * @param changeDetails ChangeDetail数组\r\n   */\r\n  public handleDataChangeDetails(changeDetails: ChangeDetail[]): void {\r\n    this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 清空所有实体\r\n   */\r\n  public reset() {\r\n    this.entityCollection.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { BefEntityManager };\r\n","import { ChangeDetailType, ChangeDetail } from './types';\r\n\r\n/**\r\n * 变更集工具类\r\n */\r\nclass BefChangeUtil {\r\n\r\n  /**\r\n   * 创建空的ChangeDetail\r\n   * @param type   the type of change\r\n   * @param dataId the identity of the entity whose properties's values have changed\r\n   */\r\n  static createEmpty(type: ChangeDetailType, dataId?: string) {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {}\r\n    };\r\n\r\n    if (dataId) {\r\n      changeDetail.ChangeInfo['DataId'] = dataId ;\r\n    }\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Get changes from an ChangeDetail object or an plain object\r\n   * @param changeDetail 变更详情\r\n   */\r\n  static getChangeInfo(changeDetail: any): any {\r\n\r\n    const isChangeDetail = this.isChangeDetail(changeDetail);\r\n    if (isChangeDetail === true) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether the changeDetial object is an instance of the ChangeDetial class.\r\n   * @param changeDetail\r\n   */\r\n  static isChangeDetail(changeDetail: any) {\r\n\r\n    // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.\r\n    const keys = Object.keys(changeDetail);\r\n    return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;\r\n  }\r\n}\r\n\r\nexport { BefChangeUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-05 19:55:44\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-03-13 20:35:29\r\n */\r\nimport { format } from 'date-fns';\r\nimport { AppContext, FrameContext, UIState } from '@farris/devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { NgVariable } from './decorators';\r\nimport { BefChangeUtil } from './bef_change_util';\r\nimport { Injector, Optional } from '@angular/core';\r\n\r\n\r\n/**\r\n * Be变量管理器\r\n */\r\nclass BefVariableManager {\r\n\r\n  /**\r\n   * 变量元数据\r\n   */\r\n  private ngVariableMap: Map<string, NgVariable>;\r\n\r\n  /**\r\n   * 设置值\r\n   */\r\n  private innerValueMap: Map<string, any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private appContext: AppContext, private ngVariables: any, @Optional() private injector: Injector) {\r\n\r\n    this.ngVariableMap = new Map<string, NgVariable>();\r\n    this.innerValueMap = new Map<string, any>();\r\n\r\n    // 重新组织变量元数据\r\n    Object.keys(ngVariables).forEach((propName: string) => {\r\n      this.ngVariableMap.set(propName, ngVariables[propName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取变更集\r\n   */\r\n  public handleChangeDetail(changeDetail: ChangeDetail): void {\r\n    const changeInfo = changeDetail.ChangeInfo;\r\n    Object.keys(changeInfo).forEach((varName: string) => {\r\n      // 变量元数据\r\n      const ngVariable = this.ngVariableMap.get(varName);\r\n      if (!ngVariable) {\r\n        return;\r\n      }\r\n      const mapping = ngVariable.mapping;\r\n\r\n      // 更新UIState变更\r\n      const newValue = changeInfo[varName];\r\n      const oldValue = this.getValueFromUIState(mapping);\r\n\r\n      if (oldValue === newValue) {\r\n        return;\r\n      }\r\n      // 更新值\r\n      this.setValueToUIState(mapping, newValue);\r\n      this.innerValueMap.set(varName, newValue);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build ChangeDetail instance for all variables.\r\n   */\r\n  public buildChangeDetail(): ChangeDetail {\r\n    const changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n    this.ngVariableMap.forEach((ngVariable: NgVariable, varName: string) => {\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      const oldValue = this.innerValueMap.get(varName);\r\n      if (this.isValueEqual(newValue, oldValue) === false) {\r\n        // 不清除变更，请求成功后清除变更\r\n        // this.innerValueMap.set(varName, newValue);\r\n        this.appendToChangeInfo(changeDetail, varName, newValue);\r\n      }\r\n    });\r\n\r\n    if (Object.keys(changeDetail.ChangeInfo).length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Clear variable values cached in the innerValueMap property.\r\n   */\r\n  public reset() {\r\n    this.innerValueMap.clear();\r\n  }\r\n  /**\r\n   * 清空所有vo变量变更集\r\n   */\r\n  public clearChanges() {\r\n    this.ngVariableMap.forEach((ngVariable: NgVariable, varName: string) => {\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      const oldValue = this.innerValueMap.get(varName);\r\n      if (this.isValueEqual(newValue, oldValue) === false) {\r\n        this.innerValueMap.set(varName, newValue);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 清空只读vo变更\r\n   * @param changeDetail \r\n   * @returns \r\n   */\r\n  public clearChangeDetail(changeDetail: ChangeDetail) {\r\n    if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {\r\n      return;\r\n    }\r\n    Object.keys(changeDetail.ChangeInfo).forEach((key: string) => {\r\n      const ngVariable: NgVariable = this.ngVariableMap.get(key);\r\n      if (!ngVariable) {\r\n        return;\r\n      }\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      this.innerValueMap.set(key, newValue);\r\n    });\r\n  }\r\n  /**\r\n   * Append changed variable to ChangeDetail instance.\r\n   */\r\n  private appendToChangeInfo(changeDetail: ChangeDetail, varName: string, varValue: any): void {\r\n    if (this.isUdtVariable(varValue) === true) {\r\n      const udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n      udtVarChangeDetail.ChangeInfo = varValue;\r\n      changeDetail.ChangeInfo[varName] = udtVarChangeDetail;\r\n    } else {\r\n      changeDetail.ChangeInfo[varName] = varValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从UIState上获取值\r\n   */\r\n  private getValueFromUIState(mapping: string): any {\r\n    const uiState = this.getRootUIState();\r\n\r\n    // 计算value\r\n    const mappingArray = mapping.split('.');\r\n    const value = mappingArray.reduce((accumulator: any, currentValue: any) => {\r\n      return accumulator ? accumulator[currentValue] : null;\r\n    }, uiState);\r\n\r\n    if (value instanceof Date) {\r\n      return format(value, 'yyyy-MM-dd HH:mm:ss');\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 获取根组件上的UIState\r\n   */\r\n  private getRootUIState(): UIState {\r\n\r\n    let rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();\r\n    if (this.injector) {\r\n      const frameContext = this.injector.get<FrameContext>(FrameContext, null);\r\n      if (frameContext) {\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        rootFrameContext = virtualRootFrameContext || rootFrameContext;\r\n      }\r\n    }\r\n    if (!rootFrameContext) {\r\n      return;\r\n    }\r\n    return rootFrameContext.uiState;\r\n  }\r\n\r\n  /**\r\n   * 值比较\r\n   * @todo 临时采用这种方式\r\n   */\r\n  private isValueEqual(srcValue: any, dstValue: any): boolean {\r\n    return JSON.stringify(srcValue) === JSON.stringify(dstValue);\r\n  }\r\n\r\n  /**\r\n   * Check if the object is a plain object\r\n   */\r\n  private isUdtVariable(obj: any): boolean {\r\n    return obj && obj.constructor &&\r\n      obj.toString() === '[object Object]' &&\r\n      obj.constructor.prototype.hasOwnProperty('isPrototypeOf');\r\n  }\r\n\r\n\r\n  /**\r\n   * 设置值到UIState\r\n   * @todo：\r\n   * 1、服务器端不支持；\r\n   * 2、日期类型处理方案待定。\r\n   */\r\n  private setValueToUIState(mapping: string, value: any): void {\r\n    const uiState = this.getRootUIState();\r\n    uiState[mapping] = value;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { BefVariableManager };\r\n","import { RequestInfo } from './types';\r\nimport { BefRepository } from './bef_repository';\r\n\r\n/**\r\n * BefProxy工具类\r\n * @summary\r\n * 1、BefProxy辅助工具类；\r\n * 2、暂时无法归类的代码封装；\r\n */\r\nclass BefProxyUtil {\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(befRepository: BefRepository<any>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: befRepository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: befRepository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n}\r\n\r\nexport { BefProxyUtil };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil, BindingPathConverter\r\n} from '@farris/devkit';\r\n\r\n/**\r\n * Bef数据中各种Path的转换\r\n */\r\nclass BefDataPathUtil {\r\n\r\n  /**\r\n   * 转换成路径数组\r\n   * 返回结果：\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childCodes, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]\r\n   */\r\n  public static convertToPathArray(bindingPath: string | string[], bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    const pathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    pathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      pathArray.push(this.trimTrailingS(propName));\r\n      pathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdu\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade\r\n   */\r\n  public static convertToPathUrl(bindingPath: string | string[], bindingData: BindingData): string {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 转换为表名数组\r\n   * 返回结果：\r\n   * 主表（/）：[]\r\n   * 从表（/childCodes）：[ childCodes ]\r\n   * 从从表（/childCodes/grandCodes [childCode ,grandCode]\r\n   */\r\n  public static convertToObjectCodes(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const objectCodes = [];\r\n    for (let i = 1; i < pathLen; i = i + 2) {\r\n      objectCodes.push(pathArray[i]);\r\n    }\r\n\r\n    return objectCodes;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，包含最后一级的主键\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]\r\n   */\r\n  public static convertToDataIdsForUpdate(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const dataIds = [];\r\n    for (let i = 0; i < pathLen; i = i + 2) {\r\n      dataIds.push(pathArray[i]);\r\n    }\r\n\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，不包含最后一级的主键\r\n   * 主表（/）：[ ]\r\n   * 从表（/childCodes）：[ parentId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId]\r\n   */\r\n  public static convertToDataIdsForAdd(bindingPath: string | string[], bindingData: BindingData) {\r\n    const dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);\r\n    dataIds.pop();\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 将EntityPathString转换为Url\r\n   * @deprecated\r\n   */\r\n  public static convertPathToUrl(path: string): string {\r\n    const subPaths = path.split('/');\r\n    for (let i = subPaths.length - 1; i > 0; i--) {\r\n      if (subPaths[i] && subPaths[i].endsWith('s')) {\r\n        subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1).toLowerCase();\r\n      }\r\n    }\r\n    // url不再转小写，兼容主键有大写字母的情况\r\n    return subPaths.join('/'); // .toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * 去除最后的s\r\n   */\r\n  private static trimTrailingS(str: string) {\r\n    return str.substr(0, str.length - 1);\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有表名的数组\r\n   *\r\n   * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']  \r\n   * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']  \r\n   * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']  \r\n   * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']\r\n   */\r\n  public static convertPathsToNodeCodes(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') === -1).forEach(node => {\r\n      result.push(node);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有实体主键值的数组\r\n   * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']\r\n   */\r\n  public static convertPathsToIds(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') !== -1).forEach(id => {\r\n      result.push(id.split(':')[1]);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { BefDataPathUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 16:55:33\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-10-09 16:44:58\r\n */\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, zip } from 'rxjs';\r\nimport { tap, map, switchMap } from 'rxjs/operators';\r\n\r\nimport { Entity, EventBus, ModifyType, AppContext, DataChangeType, DataTypeInfoUtil, DataPropGroup, ViewModel, ExpressionUtil, BindingList } from '@farris/devkit';\r\n\r\nimport { ResponseInfo, QueryResult, Pagination, RequestInfo, RetrieveParam } from './types';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\nimport { BefRestService } from './bef_rest_service';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefProxyUtil } from './bef_proxy_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BefDataPathUtil } from './bef_data_path_util';\r\n/**\r\n * Bef数据访问服务\r\n * @todo：\r\n * 1、临时将BefRepository相关代码转移到该类中；\r\n * 2、进一步明确职责，调整结构\r\n */\r\n// tslint:disable: no-string-literal\r\nclass BefDataService<T extends Entity> {\r\n\r\n  /**\r\n   * 全局上下文\r\n   */\r\n  private appContext: AppContext;\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  private repository: BefRepository<T>;\r\n\r\n  /**\r\n   * BefRest代理\r\n   */\r\n  public get restProxy(): BefProxy {\r\n    return this.repository.restService.proxy;\r\n  }\r\n\r\n  /**\r\n   * RestService实例(请使用restProxy代替)\r\n   * @deprecated\r\n   */\r\n  public restService: BefRestService;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private injector: Injector, repository: BefRepository<T>) {\r\n    this.repository = repository;\r\n\r\n    const frmSessionService = injector.get<FrameworkSessionService>(FrameworkSessionService);\r\n    const httpClient = injector.get<HttpClient>(HttpClient);\r\n    const serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n\r\n    // 创建BefRestService实例\r\n    const restBaseUri = `${serverUri}/${this.repository.apiUri}`;\r\n\r\n    const eventBus: EventBus = injector.get<EventBus>(EventBus);\r\n    this.restService = new BefRestService(httpClient, restBaseUri, frmSessionService, this.repository, eventBus);\r\n\r\n    this.appContext = injector.get<AppContext>(AppContext);\r\n  }\r\n\r\n  /**\r\n   * 获取实体集合\r\n   */\r\n  public getList(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    if (pageSize !== 0) {\r\n      pageSize = pageSize || this.repository.entityCollection.pageSize;\r\n      pageIndex = pageIndex || this.repository.entityCollection.pageIndex;\r\n    }\r\n    const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const filter$ = this.restProxy.extendQuery(entityFilter, requestInfo);\r\n    return filter$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const queryResult = responseInfo.returnValue as QueryResult;\r\n        const listData = queryResult.result;\r\n        const entities: T[] = [];\r\n        listData.forEach((data: any) => {\r\n          const entity = this.repository.buildEntity(data);\r\n          EntityUtil.appendInitialData(entity, data);\r\n          entities.push(entity);\r\n        });\r\n        // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面\r\n        const serverPaginationInfo = queryResult.pagination as Pagination;\r\n        if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {\r\n          const { pageSize, pageIndex, totalCount } = serverPaginationInfo;\r\n          // 处理主表分页信息\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });\r\n        } else {\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });\r\n        }\r\n        this.repository.entityCollection.loadEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 过滤数据\r\n   * @param filter 过滤条件\r\n   * @param sort 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 当前分页\r\n   */\r\n  public filter(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    if (pageSize !== 0) {\r\n      pageSize = pageSize || this.repository.entityCollection.pageSize;\r\n      pageIndex = pageIndex || this.repository.entityCollection.pageIndex;\r\n    }\r\n    const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const filter$ = this.restProxy.filter(entityFilter, requestInfo);\r\n    return filter$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const queryResult = responseInfo.returnValue as QueryResult;\r\n        const listData = queryResult.result;\r\n        const entities: T[] = [];\r\n        listData.forEach((data: any) => {\r\n          const entity = this.repository.buildEntity(data);\r\n          EntityUtil.appendInitialData(entity, data);\r\n          entities.push(entity);\r\n        });\r\n        // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面\r\n        const serverPaginationInfo = queryResult.pagination as Pagination;\r\n        if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {\r\n          const { pageSize, pageIndex, totalCount } = serverPaginationInfo;\r\n          // 处理主表分页信息\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });\r\n        } else {\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });\r\n        }\r\n        this.repository.entityCollection.loadEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 构造EntityFilter\r\n   */\r\n  private buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n    // @todo：临时兼容老代码，降低改动带来的风险\r\n    if (!filter && !sort && !pageSize && !pageIndex) {\r\n      return null;\r\n    }\r\n\r\n    // 纠正最后一个过滤条件的Relation\r\n    if (filter && filter.length > 0) {\r\n      filter[filter.length - 1].relation = 0;\r\n    }\r\n\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    return entityFilter;\r\n  }\r\n  /**\r\n   * 获取单个实体\r\n   * @param id id\r\n   * @param enableChildrenPagination en\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    if (retrieveParam) {\r\n      return this.getEntityById(id);\r\n    }\r\n    const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue;\r\n        const entity = this.repository.buildEntity(entityData);\r\n        this.repository.entityCollection.loadEntities([entity]);\r\n        return entity;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  public getEntityById(id: string) {\r\n    // 获取所有分页信息\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 构造分页信息\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: any) => {\r\n        const returnValue = responseInfo.returnValue || {};\r\n        const entityData = returnValue.result;\r\n        const serverPaginationInfo = returnValue.pagination;\r\n        this.updatePagination(serverPaginationInfo);\r\n        const entity = this.repository.buildEntity(entityData);\r\n        this.repository.entityCollection.loadEntities([entity]);\r\n        return entity;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']\r\n   * 分页查询从表/从从表数据\r\n   * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']\r\n   * @param paths 通用路径\r\n   * @param pageIndex 页码\r\n   * @param pageSize 分页大小\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string) {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    let nodeCodes = BefDataPathUtil.convertPathsToNodeCodes(paths);\r\n    const entityCodes = nodeCodes.map(node => node.substring(0, node.length - 1));\r\n    let entityName = entityCodes[entityCodes.length - 1];\r\n    // 查询对象可能为从表或从从表\r\n    const pagination = this.repository.entityCollection.getPaginationConfigByPath(`/${entityName}`);\r\n    const { pageSize: ps = 0 } = pagination || {};\r\n    const viewModel = this.injector.get<ViewModel>(ViewModel, null);\r\n    let forceQueryChild = false;\r\n    if (viewModel) {\r\n      forceQueryChild = viewModel.frameContext.appContext.params.get('forceQueryChild') || false;\r\n    }\r\n    if (ps == 0 && !forceQueryChild) {\r\n      return of(null);\r\n    }\r\n    const ids = BefDataPathUtil.convertPathsToIds(paths);\r\n    const parentId = ids[ids.length - 1];\r\n    const params = {\r\n      nodeCodes: entityCodes,\r\n      ids,\r\n      pagination: {\r\n        pageIndex,\r\n        pageSize\r\n      },\r\n      requestInfo\r\n    };\r\n\r\n    const request$ = this.restService.queryChild(params);\r\n    return request$.pipe(\r\n      map(response => {\r\n        const returnValue = response.returnValue;\r\n        if (!returnValue) {\r\n          return null;\r\n        }\r\n        const { result = [], pagination = {} } = returnValue;\r\n        const commonPaths = paths.map((path, index) => {\r\n          if (path.includes(':') && index % 2 === 0) {\r\n            return path.split(':')[1];\r\n          }\r\n          return path;\r\n        });\r\n        const entities = this.repository.entityManager.createEntitiesByPath(`/${commonPaths.join('/')}`, result);\r\n        this.repository.entityCollection.resetEntities(paths, entities);\r\n        // 更新分页信息\r\n        this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}`, { pageIndex: pagination.pageIndex, pageSize: pagination.pageSize });\r\n        this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}_${parentId}`, pagination);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 构造子表分页信息\r\n   */\r\n  private buildChildrenPagination() {\r\n    const paginationInfo = this.repository.entityCollection.getPaginationConfigByPath('/');\r\n    const childPaginationInfo = {};\r\n    const childrenEntityCodes = [];\r\n    DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    // 实体无子表\r\n    if (!childrenEntityCodes || childrenEntityCodes.length < 1) {\r\n      return null;\r\n    }\r\n    Object.keys(paginationInfo).forEach(key => {\r\n      const value = paginationInfo[key];\r\n      if (typeof value === 'object') {\r\n        const entityCode = key && key.includes('_') && key.split('_')[0] || null;\r\n        if (!(entityCode && childrenEntityCodes.includes(`${entityCode}s`))) {\r\n          childPaginationInfo[key] = value;\r\n        }\r\n      }\r\n    });\r\n    return childPaginationInfo;\r\n  }\r\n  /**\r\n   * 更新分页配置信息\r\n   * @param paginationInfo 服务器分页信息\r\n   */\r\n  private updatePagination(paginationInfo: any) {\r\n    if (!paginationInfo) {\r\n      return;\r\n    }\r\n    let childrenEntityCodes: string[] = [];\r\n    DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    childrenEntityCodes = childrenEntityCodes.map(item => item.substr(0, item.length - 1));\r\n    // retrieve之后没有子表数据\r\n    if (!paginationInfo || Object.keys(paginationInfo).length < 1) {\r\n      if (childrenEntityCodes && childrenEntityCodes.length > 0) {\r\n        childrenEntityCodes.forEach((nodeCode: string) => {\r\n          const original = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`);\r\n          if (original) {\r\n            //original.pageIndex = 1;\r\n            //original.total = 0;\r\n            // 重置当前子表公共分页信息\r\n            //this.repository.entityCollection.setPaginationConfigByPath(`/${nodeCode}`, original);\r\n            // 删除当前数据下级表分页信息\r\n            const localPagination = this.repository.entityCollection.getPaginationConfigByPath('/');\r\n            const keys = Object.keys(localPagination).filter(item => item.startsWith(`${nodeCode}_`));\r\n            if (keys && keys.length > 0) {\r\n              keys.forEach(key => {\r\n                this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, { pageIndex: 1, total: 0, pageSize: original.pageSize });\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    Object.keys(paginationInfo).forEach(key => {\r\n      // const entityName = childrenEntityCodes.find(item => key.startsWith(`${item}_`));\r\n      this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, paginationInfo[key]);\r\n    });\r\n  }\r\n  /**\r\n   * 构造retrieve分页信息\r\n   * @description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数\r\n   */\r\n  private buildRetrieveParam() {\r\n    const childPaginationInfo = this.buildChildrenPagination();\r\n    if (!childPaginationInfo || Object.keys(childPaginationInfo).length < 1) {\r\n      return null;\r\n    }\r\n    const retrieveParam: RetrieveParam = { filters: {}, parentIds: {} };\r\n    let childrenEntityCodes: any[] = [];\r\n    ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    Object.keys(childPaginationInfo).forEach(typeName => {\r\n      const entity: any = childPaginationInfo[typeName];\r\n      const pageIndex = entity.pageIndex || 1;\r\n      retrieveParam.filters[typeName] = { pagination: { pageSize: entity.pageSize || 0, pageIndex: pageIndex } };\r\n      // if (this.isChildrenTable(typeName)) {\r\n      //   retrieveParam.parentIds[typeName] = this.getId(typeName, pageIndex);\r\n      // }\r\n    });\r\n\r\n    return retrieveParam;\r\n  }\r\n  /*\r\n  private getId(nodeCode: string, pageIndex: number): string {\r\n    const viewModel = this.injector.get<ViewModel>(ViewModel, null);\r\n    const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};\r\n    if (pageIndex !== originalPageIndex) {\r\n      return null;\r\n    }\r\n    if (viewModel) {\r\n      const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;\r\n      if (bindingList && bindingList.currentId) {\r\n        return bindingList.currentId;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  private isChildrenTable(nodeCode: string) {\r\n    let childrenEntityCodes: any[] = [];\r\n    nodeCode += 's';\r\n    ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    if (childrenEntityCodes && childrenEntityCodes.length > 0) {\r\n      const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);\r\n      return index !== -1;\r\n    }\r\n    return false;\r\n  }*/\r\n  /**\r\n   * 更新并对实体加锁\r\n   * @param id 实体id\r\n   */\r\n  public editById(id: string): Observable<T> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return of(null);\r\n    }\r\n\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    const retrieve$ = this.restProxy.edit(id, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue.data;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        if (entityToUpdate && entityData) {\r\n          this.reloadEntityData(entityToUpdate, entityData);\r\n        }\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    // 如果要更新的实体不存在，返回一个null流；\r\n    // @todo：返回empty()还是null流，为了不影响现有行为，临时返回null流。\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return of(null);\r\n    }\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    if (retrieveParam) {\r\n      return this.updateEntityById(id);\r\n    }\r\n    const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        this.reloadEntityData(entityToUpdate, entityData);\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateEntityById(id: string) {\r\n    // 获取所有分页信息\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 构造分页信息\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: any) => {\r\n        const returnValue = responseInfo.returnValue || {};\r\n        const entityData = returnValue.result;\r\n        const serverPaginationInfo = returnValue.pagination;\r\n        this.updatePagination(serverPaginationInfo);\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        this.reloadEntityData(entityToUpdate, entityData);\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * 重新加载实体数据\r\n   * @param id 要重载的实体id\r\n   * @param entityData 要重载的数据\r\n   * @todo：\r\n   * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；\r\n   * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。\r\n   */\r\n  private reloadEntityData(entity: Entity, entityData: any): void {\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    // 关闭变更检测\r\n    this.appContext.changeDetectionController.detach();\r\n    // retrieve之后已经是最新数据，移除变更\r\n    // entity.load(entityData);\r\n    this.repository.entityCollection.updateEntity(entity, entityData);\r\n    // 重新加载数据不应该产生变更\r\n    entity.changes.splice(0, entity.changes.length);\r\n    // 重新打开变更检测\r\n    this.appContext.changeDetectionController.reattach();\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并加载\r\n   */\r\n  public create(defaultValue?: any) {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const result$ = this.restService.create(defaultValue, requestInfo);\r\n    return result$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        EntityUtil.appendInitialData(newEntity, newData);\r\n        this.repository.entityCollection.loadEntities([newEntity], true);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public append(defaultValue?: any): Observable<T> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const append$ = this.restService.create(defaultValue, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        this.repository.entityCollection.addEntity(newEntity);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 插入数据\r\n   * @param position 数据插入位置\r\n   * @param defaultValue 默认值\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const insert$ = this.restProxy.create(defaultValue, requestInfo);\r\n    return insert$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        this.repository.entityCollection.insertEntity(newEntity, position);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendByPath(fpath: string): Observable<Entity> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const append$ = this.restService.createByPath(fpath, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.entityManager.appendEntityByPath(fpath, newData, newData);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 创建子实体并插入到指定位置\r\n   * @param fpath 父路径\r\n   * @param position 数据插入位置\r\n   */\r\n  public insertByPath(fpath: string, position: 1 | -1) {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const insert$ = this.restProxy.createByPath(fpath, requestInfo);\r\n    return insert$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.entityManager.insertEntityByPath(fpath, newData, newData, position);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 内码\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    ifSave = (ifSave === undefined) ? true : ifSave;\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    let delete$;\r\n    if (ifSave) {\r\n      delete$ = this.restProxy.deleteAndSave(id, requestInfo);\r\n      return delete$.pipe(\r\n        switchMap(() => {\r\n          this.repository.entityCollection.removeEntityById(id);\r\n          return of(true);\r\n        })\r\n      );\r\n    } else {\r\n      delete$ = this.restService.extendDelete(id, requestInfo);\r\n      return delete$.pipe(\r\n        switchMap(() => {\r\n          this.repository.entityCollection.removeEntityById(id);\r\n          this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });\r\n          return of(true);\r\n        })\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   * @param id 要删除的实体id\r\n   */\r\n  public removeAndSaveById(id: string) {\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    const delete$ = this.restProxy.deleteAndSave(id, requestInfo);\r\n    const result$ = delete$.pipe(\r\n      switchMap(() => {\r\n        this.repository.entityCollection.removeEntityById(id);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });\r\n        return of(true);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param id 内码\r\n   * @param ifSave 是否保存\r\n   */\r\n  public removeByIds(ids: string[], ifSave?: boolean): Observable<boolean> {\r\n    ifSave = (ifSave === undefined) ? true : ifSave;\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendBatchDelete(ids, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        if (ifSave) {\r\n          // 执行保存\r\n          return this.applyChangesByIdArray(ids).pipe(\r\n            tap(result => {\r\n              if (result) {\r\n                // 从实体集合中删除\r\n                this.repository.entityCollection.removeEntities(\r\n                  (value) => {\r\n                    return this.checkEntityValueExists(value, ids);\r\n                  }\r\n                );\r\n              }\r\n            })\r\n          );\r\n        } else {\r\n          // 从实体集合中删除\r\n          this.repository.entityCollection.removeEntities(\r\n            (value) => {\r\n              return this.checkEntityValueExists(value, ids);\r\n            }\r\n          );\r\n          if (ids && ids.length > 0) {\r\n            const changes = [];\r\n            ids.forEach(id => {\r\n              changes.push({ dataId: id, changeType: DataChangeType.Delete });\r\n            });\r\n            this.repository.dataChangeHistory.addChanges(changes);\r\n          }\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public batchRemove(ids: string[], ifSave: boolean): Observable<any> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendBatchDeletion(ids, requestInfo);\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        if (ifSave) {\r\n          // 执行保存\r\n          return this.applyChangesByIdArray(ids).pipe(\r\n            tap(result => {\r\n              if (result) {\r\n                // 从实体集合中删除\r\n                this.removeEntities(ids);\r\n              }\r\n            })\r\n          );\r\n        } else {\r\n          // 从实体集合中删除\r\n          this.removeEntities(ids);\r\n          this.addBatchRemoveHistory(ids);\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 添加批量删除记录到变更记录中\r\n   * @param ids ids\r\n   */\r\n  private addBatchRemoveHistory(ids: string[]) {\r\n    if (ids && ids.length > 0) {\r\n      const changes = [];\r\n      ids.forEach(id => {\r\n        changes.push({ dataId: id, changeType: DataChangeType.Delete });\r\n      });\r\n      this.repository.dataChangeHistory.addChanges(changes);\r\n    }\r\n  }\r\n  /**\r\n   * 从实体仓库中批量移除指定id的数据\r\n   * @param ids \r\n   */\r\n  private removeEntities(ids: string[]) {\r\n    this.repository.entityCollection.removeEntities(\r\n      (value) => {\r\n        return this.checkEntityValueExists(value, ids);\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * 检测实体的主键值是否存在于数组中，如果存在返回true\r\n   * @param array 待遍历数组\r\n   */\r\n  private checkEntityValueExists(entity: Entity, primaryValueArray: any[]): boolean {\r\n    let isExistInTargetArray = false;\r\n\r\n    for (let i = 0; i < primaryValueArray.length; i++) {\r\n      if (entity.primaryValue === primaryValueArray[i]) {\r\n        isExistInTargetArray = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isExistInTargetArray;\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   * @param path 路径\r\n   * @param id   内码\r\n   */\r\n  public removeByPath(fpath: string, id: string): Observable<boolean> {\r\n\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendDeletByPath(fpath, id, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      map(() => {\r\n        this.repository.entityManager.removeEntityByPath(fpath, id);\r\n        this.repository.dataChangeHistory.addChange({ fpath, dataId: id, changeType: DataChangeType.Delete });\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 批量删除子级\r\n   * @param fPath 路径\r\n   * @param ids  子级id集合\r\n   */\r\n  public batchRemoveByPath(fPath: string, ids: string): Observable<boolean> {\r\n\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.batchDeleteByPath(fPath, ids, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      map(() => {\r\n        const idArray = ids.split(',');\r\n        if (idArray.length > 0) {\r\n          idArray.forEach((id) => {\r\n            this.repository.entityManager.removeEntityByPath(fPath, id);\r\n            this.repository.dataChangeHistory.addChange({ fpath: fPath, dataId: id, changeType: DataChangeType.Delete });\r\n          });\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 将id对应的实体的变更提交的服务器端\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n\r\n    // 变更集不存在\r\n    if (!entity.changes) {\r\n      return of(true);\r\n    }\r\n\r\n    // 变更集为空\r\n    if (entity.changes.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    const changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n\r\n    const update$ = this.restService.update(changeDetail, requestInfo);\r\n    const result$ = update$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 提交path对应实体的变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<any> {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 提交所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n\r\n    // 遍历实体，提交变更\r\n    const updateResults: Observable<boolean>[] = [];\r\n    const entities: Entity[] = this.repository.entityCollection.toArray();\r\n    if (entities.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    entities.forEach((entity: Entity) => {\r\n      const updateResult$ = this.updateChangesById(entity.primaryValue);\r\n      updateResults.push(updateResult$);\r\n    });\r\n\r\n    // 串联流\r\n    const result$ = zip(...updateResults).pipe(\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.clearAllVariableChanges(requestInfo.variableChange);\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用idArray对应数据的变更\r\n   */\r\n  public applyChangesByIdArray(idArray: string[]): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesByArray(idArray);\r\n        this.repository.dataChangeHistory.clearByIds(idArray);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n        this.repository.dataChangeHistory.clearByIds([id]);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 取消变更\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    const cancel$ = this.restService.cancel(options);\r\n    const result$ = cancel$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const append$ = this.restProxy.batchAppendByPath(path, defaultValues, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const list = responseInfo.returnValue;\r\n        const entities = this.repository.entityManager.createEntitiesByPath(path, list);\r\n        const paths = path.split('/').filter(p => p);\r\n        this.repository.entityManager.appendEntitiesByPath(paths, entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const append$ = this.restProxy.batchAppend(defaultValues, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const list = responseInfo.returnValue;\r\n        const entities = this.repository.buildEntities(list);\r\n        this.repository.entityCollection.addEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @returns \r\n   */\r\n  public hasChanges(): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    return this.restService.hasChanges(requestInfo);\r\n  }\r\n  /**\r\n   * 构造变更集\r\n   */\r\n  public buildRequestInfo(): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: this.repository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: this.repository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n}\r\n\r\nexport { BefDataService };\r\n","import { Injector } from \"@angular/core\";\r\nimport { AppContext, BackEndMessage, BACK_END_MESSAGE_HANDLER_TOKEN, NAMESPACE } from \"@farris/devkit\";\r\n\r\nexport class BackEndMessageUtil {\r\n  public static handleMessage(messages: object[], injector: Injector, options?: any) {\r\n    const namespace = injector.get(NAMESPACE, null);\r\n    const appContext = injector.get<AppContext>(AppContext, null);\r\n    const context: BackEndMessage.IMessageContext = {\r\n      ns: namespace,\r\n      appContext\r\n    };\r\n    const bizMessages = this.buildBackEndMessages(messages);\r\n    const backEndMessage = new BackEndMessage.Message(bizMessages, context);\r\n    const backEndMessageHandler = injector.get<BackEndMessage.IBackEndMessageHandler>(BACK_END_MESSAGE_HANDLER_TOKEN, null);\r\n    if (backEndMessageHandler) {\r\n      backEndMessageHandler.handle(backEndMessage, options);\r\n    }\r\n  }\r\n  public static isBackEndMessageHandlerExist(injector: Injector) {\r\n    const backEndMessageHandler = injector.get<BackEndMessage.IBackEndMessageHandler>(BACK_END_MESSAGE_HANDLER_TOKEN, null);\r\n    return backEndMessageHandler && true || false;\r\n  }\r\n  public static getFormlessMessages(messages: BackEndMessage.IBizMessage[]) {\r\n    const bizMessages = this.buildBackEndMessages(messages) || [];\r\n    return bizMessages.filter((message: BackEndMessage.IBizMessage) => {\r\n      return !message.location || !message.location.columns || message.location.columns.length < 1 || !message.location.nodeCode;\r\n    });\r\n  }\r\n  public static buildBackEndMessages(messages: object[]): BackEndMessage.IBizMessage[] {\r\n    if (!messages || messages.length < 1 || !Array.isArray(messages)) {\r\n      return null;\r\n    }\r\n    const bizMessages: BackEndMessage.IBizMessage[] = [];\r\n    messages.forEach((message: any) => {\r\n      const bizMessage: BackEndMessage.IBizMessage = {\r\n        level: message.level,\r\n        message: message.message\r\n      };\r\n      if (message.hasOwnProperty('location') && message.location) {\r\n        bizMessage.location = {\r\n          nodeCode: message.location.nodeCode,\r\n          rows: message.location.dataIds,\r\n          columns: message.location.columnNames\r\n        };\r\n      }\r\n      bizMessages.push(bizMessage);\r\n    });\r\n    return bizMessages;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { AppContext } from \"@farris/devkit\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { BefSessionService } from \"./bef_session_service\";\r\n\r\n@Injectable()\r\nexport class BefSessionManager {\r\n  private static createSessionHistory = [];\r\n  public static getSessionId(appContext: AppContext, sessionService: BefSessionService): Observable<any> {\r\n    const appId = appContext.ApplicationId;\r\n    const beBaseUri = sessionService.beBaseUri;\r\n    const key = `${appId}_${beBaseUri}`;\r\n    const createSessionIsInvoked = this.createSessionHistory.includes(key);\r\n    if (createSessionIsInvoked) {\r\n      return of(null);\r\n    } else {\r\n      this.createSessionHistory.push(key);\r\n      return sessionService.getBeSessionId();\r\n    }\r\n  }\r\n}","import { throwError, Observable, of, EMPTY } from 'rxjs';\r\nimport { Entity } from '@farris/devkit';\r\nimport { IProxyExtend, ResponseInfo } from './types';\r\nimport { BefRepository } from './bef_repository';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { RequestInfoUtil, ResponseInfoUtil } from './utils';\r\nimport { BackEndMessageUtil } from './utils/back_end_message.util';\r\nimport { BefSessionManager } from './session/bef_session_manager';\r\nimport { LoadingService } from '@farris/ui-loading';\r\n\r\n// tslint:disable: max-line-length tslint:disable: no-string-literal\r\nexport class BefProxyExtend implements IProxyExtend {\r\n  private loadingService: LoadingService;\r\n  constructor(private context: BefRepository<Entity>) {\r\n    const injector = this.context.getInjector();\r\n    if (injector) {\r\n      this.loadingService = injector.get(LoadingService, null);\r\n    }\r\n  }\r\n  /**\r\n   * 请求结果返回\r\n   * @param response response\r\n   * @param ignoreChanges 忽略变更\r\n   */\r\n  public onResponse(response: ResponseInfo, ignoreChanges?: boolean, options?: any) {\r\n    if (response && response.innerDataChange && ignoreChanges !== true) {\r\n      this.context.handleDataChangeDetails(response.innerDataChange);\r\n    }\r\n    if (response && response.innerVariableChange) {\r\n      this.context.handleVariableChangeDetail(response.innerVariableChange);\r\n    }\r\n    const messages = ResponseInfoUtil.parseBackEndMessage(response);\r\n    BackEndMessageUtil.handleMessage(messages, this.context.getInjector());\r\n    this.context.clearAllEntityChanges();\r\n    const requestInfo = RequestInfoUtil.getRequestInfo(options);\r\n    const variableChange = requestInfo && requestInfo.variableChange;\r\n    this.context.clearAllVariableChanges(variableChange);\r\n    if (response && response.hasOwnProperty('returnValue')) {\r\n      return response.returnValue;\r\n    } else {\r\n      return response;\r\n    }\r\n  }\r\n  /**\r\n   * 发生错误\r\n   * @param error error\r\n   * @param selfHandError 自定义错误处理\r\n   * @param ignoreError 忽略错误\r\n   */\r\n  public onError(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any> {\r\n    const formAppContext = this.context.appContext.getFormAppContext();\r\n    const applicationId = formAppContext.ApplicationId;\r\n    const loadingServices = window['DEVKIT_LOADING_SERVICE'];\r\n    const messages = ResponseInfoUtil.parseBackEndError(error);\r\n    BackEndMessageUtil.handleMessage(messages, this.context.getInjector());\r\n    if (this.loadingService) {\r\n      window.setTimeout(() => {\r\n        this.loadingService.clearAll();\r\n      }, 350);\r\n    }\r\n    if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {\r\n      for (const loadingService of loadingServices) {\r\n        if (typeof (loadingService.destroy) === 'function') {\r\n          loadingService.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!!selfHandError) {\r\n      return throwError(error);\r\n    } else {\r\n      const eventBus = this.context.restService.eventBus;\r\n      const applicationContext: any = window[applicationId] || {};\r\n      const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;\r\n      const messages = ResponseInfoUtil.parseBackEndError(error);\r\n      const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);\r\n      const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;\r\n      const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.context.getInjector()) && !isExistFormlessMessage);\r\n      const willThrowException = !!eventBus && isExceptionHandlerExist && needThrowException;\r\n      BackEndMessageUtil.handleMessage(messages, this.context.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: eventBus, error, formAppContext });\r\n      if (!!eventBus && isExceptionHandlerExist) {\r\n        if (ResponseInfoUtil.isReported401Error(error)) {\r\n          return throwError(error);\r\n        }\r\n        if (needThrowException) {\r\n          eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        }\r\n        if (ignoreError) {\r\n          return of(null);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n\r\n    }\r\n  }\r\n  /**\r\n   * 扩展http headers\r\n   * @param headers headers\r\n   */\r\n  public extendHeaders(headers: HttpHeaders, runtimeContext?: any): Observable<{ [propName: string]: any }> {\r\n    const formAppContext = this.context.appContext.getFormAppContext();\r\n    const $getSessionId = BefSessionManager.getSessionId(formAppContext, this.context.restService.sessionService);\r\n    return $getSessionId.pipe(\r\n      switchMap(sessionId => {\r\n        headers = this.context.restService.sessionService.extendRequestHeaders(headers, runtimeContext);\r\n        return of(headers);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 扩展请求参数\r\n   * @param params 参数\r\n   */\r\n  public extendUrl(url: string, params: { [propName: string]: any }): string {\r\n    if (!params) {\r\n      return url;\r\n    }\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = JSON.stringify(params[key]);\r\n        if (url.indexOf('?') === -1) {\r\n          url = `${url}?${key}=${value}`;\r\n        } else {\r\n          url = `${url}&${key}=${value}`;\r\n        }\r\n      }\r\n    }\r\n    return url;\r\n  }\r\n  /**\r\n   * 扩展请求体\r\n   * @param body body\r\n   */\r\n  public extendBody(body): { [propName: string]: any } {\r\n    if (!body || typeof body !== 'object' || Object.keys(body).length < 1) {\r\n      return body;\r\n    }\r\n    Object.keys(body).forEach(name => {\r\n      if (name === 'requestInfo') {\r\n        body['requestInfo'] = this.context.restService.buildRequestInfo();\r\n      }\r\n    });\r\n    // 兼容J版后端body只有一个key时body只传value的情况\r\n    if (Object.keys(body).length === 1) {\r\n      body = Object.values(body)[0];\r\n    }\r\n    return body;\r\n  }\r\n  public parseHeaders(response: any) {\r\n    const sessionIdKey = 'BEFSessionID';\r\n    if (response.headers && response.headers.has(sessionIdKey)) {\r\n      this.context.restService.sessionService.setBeSessionId(response.headers.get(sessionIdKey));\r\n    }\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 17:34:26\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-11 17:23:15\r\n * @todo\r\n * 1、修改command-services中的DataService，调用新的API\r\n * 2、移除DeprecatedBefRepository，启用新API\r\n * 3、修改Repository抽象类，添加新API\r\n * 4、对path做处理，修改为数组\r\n */\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MetadataUtil, Entity, AppContext } from '@farris/devkit';\r\n\r\nimport { NG_VARIABLE } from './decorators';\r\nimport { DeprecatedBefRepository } from './deprecated/deprecated_bef_repository';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefVariableManager } from './bef_variable_manager';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefProxyExtend } from './bef_proxy_extend';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { ChangeDetail } from './types';\r\n/**\r\n * BEF实体仓储\r\n * @description\r\n * 负责与后端的业务实体框架交互，管理业务实体数据 \\\r\n * apiUri示例如下：api/scm/sd/v1.0/empservice，前后均不带斜杠\r\n */\r\n@Injectable()\r\nabstract class BefRepository<T extends Entity> extends DeprecatedBefRepository<T> {\r\n\r\n  private befProxy: BefProxy;\r\n  /**\r\n   * @member {BefProxy} proxy\r\n   * @description 每一个BefRepository都需要一个Bef代理，用来处理http请求\r\n   */\r\n  public set proxy(value) {\r\n    this.befProxy = value;\r\n    this.befProxy.setProxyExtend(new BefProxyExtend(this));\r\n  }\r\n  public get proxy(): BefProxy {\r\n    return this.befProxy;\r\n  }\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: BefEntityManager<T>;\r\n\r\n  /**\r\n   * 变量管理器\r\n   * @internal\r\n   */\r\n  public variableManager: BefVariableManager;\r\n\r\n  public appContext: AppContext;\r\n  /**\r\n   * 取数服务\r\n   * @internal\r\n   */\r\n  protected dataService: BefDataService<T>;\r\n\r\n  public serverUri: string;\r\n  /**\r\n   * @param injector 依赖注入器\r\n   */\r\n  constructor(private injector: Injector) {\r\n    super();\r\n\r\n    if (this.entityCollection) {\r\n      // 初始化实体管理器\r\n      this.entityManager = new BefEntityManager(this.entityCollection);\r\n    }\r\n\r\n    // 初始化变量管理器\r\n    this.appContext = this.injector.get<AppContext>(AppContext);\r\n    const ngVariables = MetadataUtil.getPropsMetadatasByName(this.constructor, NG_VARIABLE);\r\n    this.variableManager = new BefVariableManager(this.appContext, ngVariables, this.injector);\r\n\r\n    // 初始化DataService\r\n    this.dataService = new BefDataService(this.injector, this);\r\n    this.serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sort 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 页码\r\n   * @description\r\n   * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）\r\n   * ```json\r\n   * [\r\n   *   {\r\n   *     \"FilterField\": \"DomainID.DomainID_name\",\r\n   *     \"Compare\": 0,\r\n   *     \"Value\": \"人力资源部\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0,\r\n   *     \"Lbracket\": \"(\",\r\n   *     \"Rbracket\": \")\"\r\n   *   }, {\r\n   *     \"FilterField\": \"BillDate\",\r\n   *     \"Compare\": 3,\r\n   *     \"Value\": \"2021-09-03\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0\r\n   *   }, {\r\n   *     \"FilterField\": \"BillDate\",\r\n   *     \"Compare\": 5,\r\n   *     \"Value\": \"2021-10-05\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0\r\n   *   }\r\n   * ]\r\n   * ```\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析\r\n   * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);\r\n   * ```\r\n   */\r\n  public getEntities(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    return this.dataService.getList(filter, sort, pageSize, pageIndex);\r\n  }\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sorts 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 页码\r\n   * @description\r\n   * 与getEntities方法功能相近，用法相同 \\\r\n   * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上\r\n   * @see {@link getEntities}\r\n   */\r\n  public filter(filter: any[] = [], sorts: any[] = [], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    return this.dataService.filter(filter, sorts, pageSize, pageIndex);\r\n  }\r\n  // #endregion\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param paths 通用路径\r\n   * @param pageIndex 页码\r\n   * @param pageSize 分页大小\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   * @todo 目前并未应用排序和过滤条件\r\n   * @description\r\n   * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \\\r\n   * 通用路径的主键值前必须含有冒号，冒号之前的\"id\"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \\\r\n   * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \\\r\n   * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径\r\n   * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\r\n   * const paths = fullPaths.slice(0, fullPaths.length - 1);\r\n   * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\r\n   * const bindingData = this.viewModel.bindingData;\r\n   * let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n   * nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n   * // 获取上级实体\r\n   * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n   * const parentObject = bindingData.getValue(parentPaths) as BindingObject;\r\n   * if (!parentObject) {\r\n   *   throw new Error('上级实体不存在');\r\n   * }\r\n   * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n   * // 获取绑定路径对应的分页信息\r\n   * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);\r\n   * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);\r\n   * ```\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string) {\r\n    return this.dataService.queryChild(paths, pageIndex, pageSize, filter, sort);\r\n  }\r\n  /**\r\n  * 获取主键为id的实体\r\n  * @param id 主表实体主键\r\n  * @description\r\n  * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \\\r\n  * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {@link updateEntityById} 方法\r\n  */\r\n  public getEntityById(id: string): Observable<T> {\r\n    return this.dataService.getById(id);\r\n  }\r\n\r\n  /**\r\n   * 更新实体数据\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 重新从服务器获取主表上对应主键的实体数据 \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * const rootDataId = this.bindingData.list.currentId;\r\n   * return this.repository.updateEntityById(rootDataId);\r\n   * ```\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    return this.dataService.updateById(id);\r\n  }\r\n  /**\r\n   * 更新实体数据并加锁\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 使用示例：\r\n   * ```typescript\r\n   * id = this.bindingData.list.currentId;  // 编辑当前行\r\n   * const edit$ = this.repository.editEntityById(id);\r\n   * ```\r\n   */\r\n  public editEntityById(id: string): Observable<T> {\r\n    return this.dataService.editById(id);\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建实体\r\n   * @param defaultValue 默认值，JSON对象\r\n   * @description\r\n   * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 在创建新实体后进入编辑状态\r\n   * const create$ = this.repository.createEntity();\r\n   * create$.pipe(\r\n   *   tap(() => {\r\n   *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);\r\n   *   })\r\n   * );\r\n   * ```\r\n   */\r\n  public createEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.create(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param defaultValue 默认值\r\n   * @description 请求创建一个新的实体，并追加到实体仓库（适用于列表）\r\n   */\r\n  public appendEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.append(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 创建并插入新实体（向主表插入）\r\n   * @param position 插入位置\r\n   * @param defaultValue 默认值\r\n   * @description\r\n   * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    return this.dataService.insert(position, defaultValue);\r\n  }\r\n  /**\r\n   * 创建子实体并插入到指定位置（向从表或从从表插入）\r\n   * @param path 父路径\r\n   * @param position 插入位置\r\n   * @description\r\n   * 关于父路径格式，从表形如：\"/1/edus\"，从从表形如：\"/1/edus/12/grades\" \\\r\n   * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \\\r\n   * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \\\r\n   * 插入位置参考 {@link insert} \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径\r\n   * const append$ = this.repository.insertByPath(path, position);\r\n   * ```\r\n   */\r\n  public insertByPath(path: string, position: 1 | -1): Observable<any> {\r\n    return this.dataService.insertByPath(path, position);\r\n  }\r\n  /**\r\n   * 创建子实体并追加到末尾\r\n   * @param fpath 父路径\r\n   * @description\r\n   * 父路径格式参考 {@link insertByPath}\r\n   */\r\n  public appendEntityByPath(fpath: string): Observable<Entity> {\r\n    return this.dataService.appendByPath(fpath);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 主表实体主键\r\n   * @param ifSave 是否保存，可选，默认为true\r\n   * @description\r\n   * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存\r\n   */\r\n  public removeEntityById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    return this.dataService.removeById(id, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体并执行保存\r\n   * @param id 主表实体主键\r\n   */\r\n  public removeEntityAndSaveById(id: string): Observable<boolean> {\r\n    return this.dataService.removeAndSaveById(id);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除父路径下子表中的实体\r\n   * @param fpath 父路径\r\n   * @param id 实体主键\r\n   * @description\r\n   * 父路径格式参考 {@link insertByPath}\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string): Observable<boolean> {\r\n    return this.dataService.removeByPath(fpath, id);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存(默认为false)\r\n   */\r\n  public batchRemove(ids: string[], ifSave: boolean = false): Observable<any> {\r\n    return this.dataService.batchRemove(ids, ifSave);\r\n  }\r\n  /**\r\n   * 批量删除子级实体\r\n   * @param fPath 父路径\r\n   * @param ids 子级id集合\r\n   * @description\r\n   * ids中各个id之间以逗号分隔，父路径格式参考 {@link insertByPath} \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量\r\n   * const remove$ = this.repository.batchRemoveByPath(path, ids);\r\n   * ```\r\n   */\r\n  public batchRemoveByPath(fPath: string, ids: string): Observable<boolean> {\r\n    return this.dataService.batchRemoveByPath(fPath, ids);\r\n  }\r\n  /**\r\n   * 保存主键为id的实体\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 调用该方法会应用id对应实体上的变更 \\\r\n   * ```typescript\r\n   * const id = this.bindingData.list.currentId as string;\r\n   * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用\r\n   * ```\r\n   */\r\n  public saveEntityById(id: string): Observable<boolean> {\r\n    return this.dataService.applyChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 批量保存\r\n   * @description\r\n   * 应用所有变更，比如调用了 {@link removeEntityById} 且未保存则可以通过此方法保存 \\\r\n   * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存\r\n   */\r\n  public saveEntities(): Observable<boolean> {\r\n    return this.dataService.applyChanges();\r\n  }\r\n\r\n  /**\r\n   * 取消实体变更\r\n   * @description 清空所有实体变更，不希望保存变更时调用此方法\r\n   */\r\n  public cancelEntityChanges(): Observable<boolean> {\r\n    return this.dataService.cancelChanges();\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 父路径，参考 {@link insertByPath}\r\n   * @param defaultValues 默认实体数据数组\r\n   * @description\r\n   * 后端接口只支持批量新增子表，批量新增主表目前不支持\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    return this.dataService.batchAppendByPath(path, defaultValues);\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    return this.dataService.batchAppend(defaultValues);\r\n  }\r\n  /**\r\n   * 清空Repositoy内的数据和变量\r\n   * @description 清空所有实体、变量，并清空BeSessionId\r\n   */\r\n  public reset() {\r\n    this.entityManager.reset();\r\n    this.variableManager.reset();\r\n    this.restService.sessionService.clearBeSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取Injector（外部请勿使用）\r\n   * @internal\r\n   */\r\n  public getInjector(): Injector {\r\n    return this.injector;\r\n  }\r\n  /**\r\n   * 清空vo变量变更\r\n   */\r\n  public clearAllVariableChanges(changeDetail: ChangeDetail) {\r\n    this.variableManager.clearChangeDetail(changeDetail);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @returns \r\n   */\r\n  public hasChanges(): Observable<any> {\r\n    return this.dataService.hasChanges();\r\n  }\r\n}\r\n\r\nexport { BefRepository };\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\n\r\n@Injectable()\r\nexport class UriService {\r\n    constructor(@Inject(BE_SERVER_URI_TOKEN) private serverUri: string) {\r\n    }\r\n    /**\r\n     * 扩展eapi基路径\r\n     * @param apiUri eapi基路径\r\n     */\r\n    public extendUri(apiUri: string): string {\r\n        return `${this.serverUri}/${apiUri}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { HttpParams, HttpClient } from '@angular/common/http';\r\nimport { encodeUrl } from '@farris/devkit';\r\nimport { IProxyExtend, RequestInfo, ResponseInfo, ChangeDetail, RetrieveParam } from './types';\r\nimport { BefDataPathUtil } from './bef_data_path_util';\r\nimport { UriService } from './uri_service';\r\nimport { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';\r\nimport { HttpService } from './http_service';\r\n\r\n\r\nconst GET = 'GET';\r\nconst DELETE = 'DELETE';\r\nconst PUT = 'PUT';\r\nconst POST = 'POST';\r\nconst PATCH = 'PATCH';\r\n\r\n/**\r\n * Bef代理类\r\n * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter\r\n * uri 由uriService\r\n */\r\n@Injectable()\r\nexport class BefProxy {\r\n  protected proxyExtend: IProxyExtend;\r\n  /**\r\n   * restful基路径\r\n   */\r\n  protected baseUri: string;\r\n  private httpService: HttpService;\r\n  constructor(public httpClient: HttpClient, public uriService: UriService) {\r\n    this.httpService = new HttpService(this.httpClient);\r\n  }\r\n  /**\r\n   * 设置基路径\r\n   * @param baseUri 基路径\r\n   */\r\n  public setBaseUri(baseUri: string): void {\r\n    this.baseUri = baseUri;\r\n  }\r\n  /**\r\n   * 设置策略模式\r\n   * @param strategy 策略\r\n   */\r\n  public setProxyExtend(proxyExtend: IProxyExtend) {\r\n    this.proxyExtend = proxyExtend;\r\n  }\r\n  /**\r\n   * 查询\r\n   */\r\n  public query(entityFilter?: any): Observable<any> {\r\n    let url = this.baseUri;\r\n    if (entityFilter) {\r\n      const entityFilterJson = JSON.stringify(entityFilter);\r\n      url = `${url}?entityFilter=${entityFilterJson}`;\r\n    }\r\n    return this.request(url, GET);\r\n  }\r\n\r\n  /**\r\n   * 扩展查询\r\n   */\r\n  public extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    let url = `${this.baseUri}/extension/query`;\r\n    if (entityFilter) {\r\n      let entityFilterJson = JSON.stringify(entityFilter);\r\n      entityFilterJson = encodeUrl(entityFilterJson);\r\n      url = `${url}?entityFilter=${entityFilterJson}`;\r\n    }\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options, false);\r\n  }\r\n  /**\r\n   * 查询数据（带过滤条件）\r\n   * @param entityFilter 过滤、排序、分页信息\r\n   * @param requestInfo requestInfo\r\n   * @description 和extendQuery一致，仅将查询参数放到body中\r\n   */\r\n  public filter(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    let url = `${this.baseUri}/extension/filter`;\r\n    let body: any = { requestInfo };\r\n    if (entityFilter) {\r\n      body = { entityFilter, requestInfo };\r\n    }\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options, false);\r\n  }\r\n\r\n  /**\r\n   * 检索数据\r\n   * @param id 单据内码\r\n   * @return 数据对象\r\n   */\r\n  public retrieve(id: string): Observable<any> {\r\n    const url = `${this.baseUri}/${id}`;\r\n    return this.request(url, GET);\r\n  }\r\n  /**\r\n   * @deprecated 方法已经废弃，请勿使用\r\n   */\r\n  public serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/service/retrieve/${id}`;\r\n    const options = {\r\n      body: { retrieveParam, requestInfo }\r\n    };\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param params 参数\r\n   */\r\n  public queryChild(params: any) {\r\n    const url = `${this.baseUri}/service/querychild`;\r\n    const options = { body: params };\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 检索数据（扩展）\r\n   */\r\n  public extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/retrieve/${id}`;\r\n    let body: any = requestInfo;\r\n    if (retrieveParam) {\r\n      body = { retrieveParam, requestInfo };\r\n    }\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 检索数据\r\n   */\r\n  public edit(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/service/edit/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 创建一条数据\r\n   */\r\n  public create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any> {\r\n    const body = {\r\n      defaultValue,\r\n      requestInfo: requestInfo,\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(this.baseUri, POST, null, options);\r\n  }\r\n\r\n  /**\r\n   * 从表新增\r\n   * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}${pathUrl}`;\r\n\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n\r\n  /**\r\n   * 提交变更\r\n   */\r\n  update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any> {\r\n    const body = {\r\n      changeDetail,\r\n      requestInfo: requestInfo,\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n\r\n    return this.request(this.baseUri, PATCH, null, options);\r\n  }\r\n\r\n  /**\r\n   * 执行保存\r\n   */\r\n  public save(requestInfo?: RequestInfo): Observable<any> {\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(this.baseUri, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  public delete(id: string): Observable<any> {\r\n    const url = `${this.baseUri}/${id}`;\r\n    return this.request(url, DELETE);\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   */\r\n  public deleteAndSave(id: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/service/delete/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除（扩展）\r\n   */\r\n  public extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/delete/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除后代\r\n   * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public deletByPath(fpath: string, id: string): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}${pathUrl}/${id}`;\r\n    return this.request(url, DELETE);\r\n  }\r\n\r\n  /**\r\n   * 删除后代（扩展）\r\n   * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}/extension${pathUrl}/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 批量删除后代\r\n   * @param fPath 'extension/{rootId}/cc/batch'\r\n   * @param  ids 子集id\r\n   * @param  requestInfo 请求信息\r\n   */\r\n  public batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fPath);\r\n    const pathArray = pathUrl.split('/');\r\n    if (pathArray.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\r\n    }\r\n    /*   const rootId = pathArray[1];\r\n\r\n    const nameArray = [];\r\n    pathArray.forEach((name, index) => {\r\n      if (index > 1 ) {\r\n        if (name.indexOf('s') !== -1) {\r\n          nameArray.push(name.substr(0, name.length - 1));\r\n        } else {\r\n          nameArray.push(name);\r\n        }\r\n      }\r\n    });\r\n    const childName = nameArray.join('/');*/\r\n    const url = `${this.baseUri}/extension${pathUrl}/batch`;\r\n    const idsArray = ids.split(',');\r\n    const body = {\r\n      ids: idsArray,\r\n      requestInfo: requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 批量删除\r\n   * @param ids 待删除的id数组\r\n   */\r\n  public batchDelete(ids: string[]): Observable<any> {\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n    return this.request(this.baseUri, DELETE, params);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/extension/batchdeletion`;\r\n    const body = {\r\n      ids: ids,\r\n      requestInfo: requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 批量删除（扩展）\r\n   */\r\n  public extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/batchdelete`;\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, params, options);\r\n  }\r\n\r\n\r\n  /**\r\n   * 取消\r\n   */\r\n  public cancel(context?: any): Observable<any> {\r\n    const url = `${this.baseUri}/service/cancel`;\r\n    return this.request(url, POST, null, null, false, false, false, context);\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(path);\r\n    const url = `${this.baseUri}${pathUrl}/batch`;\r\n    const body = {\r\n      requestInfo,\r\n      retrieveDefaultParam: {\r\n        defaultValues\r\n      }\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/batch`;\r\n    const body = {\r\n      requestInfo,\r\n      retrieveDefaultParam: {\r\n        defaultValues\r\n      }\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @param requestInfo requestInfo\r\n   * @returns \r\n   */\r\n  public hasChanges(requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/haschanges`;\r\n    const body = {\r\n      ...requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  // tslint:disable-next-line: max-line-length\r\n  public request(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean, runtimeContext?: any\r\n  ): Observable<any> {\r\n    options = options || {};\r\n\r\n    // 是否自行处理错误\r\n    if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {\r\n      selfHandError = false;\r\n    }\r\n\r\n    // 是否忽略异常继续执行\r\n    if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {\r\n      ignoreError = false;\r\n    }\r\n\r\n    // params\r\n    if (params) {\r\n      // const httpParams = this.buildParams(params);\r\n      options.params = params;\r\n    }\r\n\r\n    // 处理headers\r\n    options.headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n    // 1、判断是否带requestInfo（不区分首字母大小写）;\r\n    // 2、如果传递的是RequestInfo，则转换为requestInfo；\r\n    const hasRequestInfo = this.hasRequestInfo(options);\r\n    if (options && options.body && options.body.hasOwnProperty('RequestInfo')) {\r\n      options.body.requestInfo = options.body.RequestInfo;\r\n      delete options.body.RequestInfo;\r\n    }\r\n    return this.proxyExtend.extendHeaders(options.headers, runtimeContext).pipe(\r\n      switchMap(headers => {\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options);\r\n      }),\r\n      tap((response: any) => this.proxyExtend.parseHeaders(response)),\r\n      map((result: any) => result.body),\r\n      map((result: any) => {\r\n        if (hasRequestInfo) {\r\n          this.proxyExtend.onResponse(result, ignoreChanges, options);\r\n          return result;\r\n        } else {\r\n\r\n          // body里没有requestInfo的情况，模拟老的处理方式（不清理变更、将returnValue解析出来）\r\n          return this.unWrapResponseInfo(result);\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        return this.proxyExtend.onError(error, selfHandError, ignoreError);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 调用httpclient取数\r\n   * @param url url\r\n   * @param method methods\r\n   * @param options options\r\n   */\r\n  protected invoke(url: string, method: string, options: any): Observable<any> {\r\n    if (options.params) {\r\n      url = this.proxyExtend.extendUrl(url, options.params);\r\n      options.params = null;\r\n    }\r\n    if (options.body) {\r\n      options.body = this.proxyExtend.extendBody(options.body);\r\n    }\r\n    options.headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n    const headers$ = this.proxyExtend.extendHeaders(options.headers);\r\n    return headers$.pipe(\r\n      switchMap(headers => {\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options)\r\n          .pipe(\r\n            tap((response: any) => this.proxyExtend.parseHeaders(response)),\r\n            map((result: any) => result.body),\r\n            map((result: any) => this.proxyExtend.onResponse(result, false, options)),\r\n            catchError(error => this.proxyExtend.onError(error, false, false))\r\n          );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 向HttpOptions对象中添加body\r\n   * @param options 原来的options\r\n   * @param body body内容\r\n   */\r\n  private addBodyToOptions(options: any, body: any) {\r\n    options = options || {};\r\n    const mergedOptions = Object.assign(options, { body });\r\n    return mergedOptions;\r\n  }\r\n  /**\r\n   * 构造HttpParams对象\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: object): HttpParams {\r\n    return HttpParamUtil.buildParams(params);\r\n  }\r\n  /**\r\n   * 是否带有RequestInfo\r\n   */\r\n  private hasRequestInfo(options: any): boolean {\r\n    return RequestInfoUtil.hasRequestInfo(options) || RequestInfoUtil.hasRequestInfoWithR(options);\r\n  }\r\n  /**\r\n   * 处理返回值，兼容老版本\r\n   */\r\n  private unWrapResponseInfo(result: any) {\r\n    return ResponseInfoUtil.unWrapResponseInfo(result);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-02-23 13:57:47\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-24 14:10:40\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError, of, EMPTY } from 'rxjs';\r\nimport { switchMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { Entity, EventBus } from '@farris/devkit';\r\nimport { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';\r\nimport { BefRepository } from './bef_repository';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\nimport { BefSessionService } from './session/index';\r\nimport { ChangeDetail, RequestInfo, ResponseInfo, RetrieveParam } from './types';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { UriService } from './uri_service';\r\nimport { BefProxyExtend } from './bef_proxy_extend';\r\nimport { HttpService } from './http_service';\r\nimport { BackEndMessageUtil } from './utils/back_end_message.util';\r\nimport { BefSessionManager } from './session/bef_session_manager';\r\nimport { LoadingService } from '@farris/ui-loading';\r\n\r\nconst GET = 'GET';\r\nconst DELETE = 'DELETE';\r\nconst PUT = 'PUT';\r\nconst POST = 'POST';\r\nconst PATCH = 'PATCH';\r\n\r\n/**\r\n * BEF取数服务\r\n * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。\r\n */\r\n@Injectable()\r\nclass BefRestService {\r\n\r\n  private repository: BefRepository<Entity>;\r\n  private loadingService: LoadingService;\r\n  /**\r\n   * httpClient\r\n   */\r\n  private httpClient: HttpClient;\r\n  private httpService: HttpService;\r\n\r\n  /**\r\n   * 会话服务\r\n   */\r\n  public sessionService: BefSessionService;\r\n\r\n  /**\r\n   * 接口根Uri\r\n   */\r\n  public baseUri: string;\r\n\r\n  /**\r\n   * 事件总线\r\n   */\r\n  public eventBus: EventBus;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param httpClient http服务\r\n   * @param serverUri 应用服务器地址\r\n   * @param beUri BE API地址\r\n   */\r\n  constructor(\r\n    httpClient: HttpClient, baseUri: string,\r\n    frmSessionService: FrameworkSessionService,\r\n    repository: BefRepository<Entity>,\r\n    eventBus?: EventBus\r\n  ) {\r\n    this.httpClient = httpClient;\r\n    this.httpService = new HttpService(this.httpClient);\r\n    this.baseUri = baseUri;\r\n    const injector = repository.getInjector();\r\n    this.sessionService = new BefSessionService(httpClient, baseUri, frmSessionService, injector);\r\n    this.repository = repository;\r\n    this.eventBus = eventBus;\r\n    if (injector) {\r\n      this.loadingService = injector.get(LoadingService, null);\r\n    }\r\n  }\r\n\r\n\r\n  // #region 代理相关\r\n\r\n  /**\r\n   * 获取Bef代理\r\n   */\r\n  public get proxy(): BefProxy {\r\n    if (!!this.repository.proxy) {\r\n      return this.repository.proxy;\r\n    } else {\r\n      return this.createBefProxy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建Bef代理\r\n   */\r\n  private createBefProxy() {\r\n    const serverUri = this.repository.serverUri;\r\n    const uriService = new UriService(serverUri);\r\n    const defaultProxy = new BefProxy(this.httpClient, uriService);\r\n    defaultProxy.setBaseUri(this.baseUri);\r\n    const extend = new BefProxyExtend(this.repository);\r\n    defaultProxy.setProxyExtend(extend);\r\n    return defaultProxy;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 基本CRUD方法\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public query(entityFilter?: any): Observable<any> {\r\n    return this.proxy.query(entityFilter);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendQuery(entityFilter, requestInfo);\r\n  }\r\n  /**\r\n   * 分页查询各从表数据\r\n   * @param id 主表id\r\n   * @param retrieveParam 参数\r\n   */\r\n  public serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any> {\r\n    return this.proxy.serviceRetrieve(id, retrieveParam, requestInfo);\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param params 查询参数\r\n   */\r\n  public queryChild(params: any) {\r\n    return this.proxy.queryChild(params);\r\n  }\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public retrieve(id: string): Observable<any> {\r\n    return this.proxy.retrieve(id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo> {\r\n    return this.proxy.extendRetrieve(id, requestInfo, retrieveParam);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.create(defaultValue, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.createByPath(fpath, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.update(changeDetail, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public save(requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.save(requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public delete(id: string): Observable<any> {\r\n    return this.proxy.delete(id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendDelete(id, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public deletByPath(fpath: string, id: string): Observable<any> {\r\n    return this.proxy.deletByPath(fpath, id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendDeletByPath(fpath, id, requestInfo);\r\n  }\r\n  public batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.batchDeleteByPath(fPath, ids, requestInfo);\r\n  }\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public batchDelete(ids: string[]): Observable<any> {\r\n    return this.proxy.batchDelete(ids);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendBatchDelete(ids, requestInfo);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param requestInfo requestInfo\r\n   */\r\n  public extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any> {\r\n    return this.proxy.extendBatchDeletion(ids, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public cancel(options?: any): Observable<any> {\r\n    return this.proxy.cancel(options);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @param requestInfo requestInfo\r\n   * @returns \r\n   */\r\n  public hasChanges(requestInfo: RequestInfo): Observable<any>{\r\n    return this.proxy.hasChanges(requestInfo);\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region request方法\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public request(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean\r\n  ): Observable<any> {\r\n    return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, false);\r\n  }\r\n  // tslint:disable: align\r\n\r\n  /**\r\n   * 调用后端方法\r\n   * @param url url\r\n   * @param method method\r\n   * @param params params\r\n   * @param options options\r\n   * @param selfHandError 自己处理异常\r\n   * @param ignoreError 忽略错误\r\n   * @param ignoreChanges 忽略变更\r\n   */\r\n  public invoke(url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean) {\r\n    if (options && options.body && options.body.RequestInfo) {\r\n      throw new Error('请使用requestInfo提交变更');\r\n    }\r\n    return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, true);\r\n  }\r\n\r\n  /**\r\n   * 内部的request方法\r\n   */\r\n  private innerRequest(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean,\r\n    useCorrectRequestInfoCheckMethod?: boolean\r\n  ) {\r\n    options = options || {};\r\n    const befSessionIdKey = 'BEFSessionID';\r\n\r\n    // 是否自己处理异常\r\n    if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {\r\n      selfHandError = false;\r\n    }\r\n\r\n    // 是否忽略异常继续执行\r\n    if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {\r\n      ignoreError = false;\r\n    }\r\n\r\n    // 选择检查RequestInfo的方法\r\n    if (typeof (useCorrectRequestInfoCheckMethod) === 'undefined' || typeof (useCorrectRequestInfoCheckMethod) !== 'boolean') {\r\n      useCorrectRequestInfoCheckMethod = false;\r\n    }\r\n    const checkRequestInfoMethod = useCorrectRequestInfoCheckMethod ? this.existRequestInfo : this.hasRequestInfo;\r\n\r\n    // params\r\n    if (params) {\r\n      // const httpParams = this.buildParams(params);\r\n      options.params = params;\r\n    }\r\n\r\n    // 带有requestInfo的请求，请求成功后清空变更集\r\n    const hasRequestInfo = checkRequestInfoMethod(options);\r\n    let headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n\r\n    // 串联session流和http流\r\n    const formAppContext = this.repository.appContext.getFormAppContext();\r\n    return BefSessionManager.getSessionId(formAppContext, this.sessionService).pipe(\r\n      switchMap((sessionId: string) => {\r\n        headers = this.sessionService.extendRequestHeaders(headers);\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options);\r\n      }),\r\n      tap((response: any) => {\r\n        if (response.headers && response.headers.has(befSessionIdKey)) {\r\n          this.sessionService.setBeSessionId(response.headers.get(befSessionIdKey));\r\n        }\r\n      }),\r\n      map((response: any) => response.body),\r\n      map((result: any) => {\r\n        const messages = ResponseInfoUtil.parseBackEndMessage(result);\r\n        BackEndMessageUtil.handleMessage(messages, this.repository.getInjector());\r\n\r\n        return this.handleReponseInfo(result, hasRequestInfo, ignoreChanges, options);\r\n      }),\r\n      catchError((error: any) => {\r\n\r\n        return this.handleErrors(error, selfHandError, ignoreError);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 处理返回结果\r\n   */\r\n  public handleReponseInfo(result: any, hasRequestInfo: boolean, ignoreChanges: boolean, options: any): any {\r\n    if (hasRequestInfo) {\r\n      // 如果有带有RequestInfo，则按新结构处理\r\n      // 1、应用服务器端返回的变更；\r\n      // 2、清空本地变更集；\r\n      // 3、返回新结构\r\n      if (result && result.innerDataChange && ignoreChanges !== true) {\r\n        this.repository.handleDataChangeDetails(result.innerDataChange);\r\n      }\r\n      if (result && result.innerVariableChange) {\r\n        this.repository.handleVariableChangeDetail(result.innerVariableChange);\r\n      }\r\n      this.repository.clearAllEntityChanges();\r\n      const requestInfo = RequestInfoUtil.getRequestInfo(options);\r\n      const variableChange = requestInfo && requestInfo.variableChange;\r\n      this.repository.clearAllVariableChanges(variableChange);\r\n      return result;\r\n    } else {\r\n      // 如果有没有RequestInfo，则按老的方式处理\r\n      // 1、不处理服务器端返回的变更：跟老的行为一样；\r\n      // 2、不清理本地变更：因为变更没有提交；\r\n      // 3、返回老的结构：兼容老的代码\r\n      return this.unWrapResponseInfo(result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 错误处理\r\n   */\r\n  public handleErrors(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any> {\r\n    this.clearLoading();\r\n\r\n    if (!!selfHandError) {\r\n      return throwError(error);\r\n    } else {\r\n      const formAppContext = this.repository.appContext.getFormAppContext();\r\n      const applicationId = formAppContext.ApplicationId;\r\n      const applicationContext: any = window[applicationId] || {};\r\n      const messages = ResponseInfoUtil.parseBackEndError(error);\r\n      const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);\r\n      const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;\r\n      const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;\r\n      const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.repository.getInjector()) && !isExistFormlessMessage);\r\n      const willThrowException = !!this.eventBus && isExceptionHandlerExist && needThrowException;\r\n      BackEndMessageUtil.handleMessage(messages, this.repository.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: this.eventBus, error, formAppContext });\r\n      if (!!this.eventBus && isExceptionHandlerExist) {\r\n        if (ResponseInfoUtil.isReported401Error(error)) {\r\n          return throwError(error);\r\n        }\r\n        if (needThrowException) {\r\n          this.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        }\r\n        if (ignoreError) {\r\n          return of(null);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    }\r\n\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 工具方法\r\n\r\n  /**\r\n   * 清空Loading\r\n   */\r\n  private clearLoading(): void {\r\n    const ifLoadingExists = window['DEVKIT_LOADING_SERVICE'] &&\r\n      window['DEVKIT_LOADING_SERVICE'] instanceof Array &&\r\n      window['DEVKIT_LOADING_SERVICE'].length > 0 || false;\r\n\r\n    if (ifLoadingExists === false) {\r\n      this.clearAllLoading();\r\n      return;\r\n    }\r\n\r\n    const loadingServices: any[] = window['DEVKIT_LOADING_SERVICE'];\r\n    for (const service of loadingServices) {\r\n      if (typeof (service.destroy) === 'function') {\r\n        service.destroy();\r\n      }\r\n    }\r\n    this.clearAllLoading();\r\n  }\r\n  private clearAllLoading() {\r\n    if (this.loadingService) {\r\n      window.setTimeout(() => {\r\n        this.loadingService.clearAll();\r\n      }, 350);\r\n    }\r\n  }\r\n  /**\r\n   * 处理返回值，兼容老版本\r\n   */\r\n  private unWrapResponseInfo(result: any): any {\r\n    return ResponseInfoUtil.unWrapResponseInfo(result);\r\n  }\r\n\r\n  /**\r\n   * 是否带有RequestInfo\r\n   */\r\n  private hasRequestInfo(options: any): boolean {\r\n    return RequestInfoUtil.hasRequestInfoWithR(options);\r\n  }\r\n  /**\r\n   * 是否带有requestInfo\r\n   */\r\n  private existRequestInfo(options: any) {\r\n    return RequestInfoUtil.hasRequestInfo(options);\r\n  }\r\n\r\n  /**\r\n   * 构造HttpParams对象\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: any): HttpParams {\r\n    return HttpParamUtil.buildParams(params);\r\n  }\r\n\r\n  /**\r\n   * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）\r\n   * @body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}\r\n   */\r\n  public buildBodyWithRequestInfo(body: any): any {\r\n    return RequestInfoUtil.buildBodyWithRequestInfo(body, this.repository);\r\n  }\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public buildRequestInfo(): RequestInfo {\r\n    return RequestInfoUtil.buildRequestInfo(this.repository);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { BefRestService };\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { switchMap, map, tap, catchError } from 'rxjs/operators';\r\nimport { ILookupHttpService, RemoteParams, LookupGridResult } from '@farris/ui-lookup';\r\nimport { Repository, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { ResponseInfo } from './types';\r\nimport { LoadingService, LoadingConfig, LoadingComponent } from '@farris/ui-loading';\r\n/**\r\n * 帮助Rest取数服务\r\n */\r\n@Injectable()\r\nexport class BefLookupRestService implements ILookupHttpService {\r\n  private loadingService: LoadingService;\r\n  private befRepository: BefRepository<any>;\r\n\r\n  /**\r\n   * 帮助取数上下文\r\n   */\r\n  public context: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    repository: Repository<any>,\r\n    @Optional() private frameContext: FrameContext\r\n  ) {\r\n    this.befRepository = <BefRepository<any>>repository;\r\n    this.registerDestroyEvent();\r\n    this.loadingService = this.frameContext && this.frameContext.injector.get(LoadingService, null);\r\n  }\r\n  private registerDestroyEvent() {\r\n    if (this.frameContext && this.frameContext.destorySignal) {\r\n      this.frameContext.destorySignal.subscribe(() => {\r\n        this.frameContext = null;\r\n        this.befRepository = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  public getData(helpMetadataId: string, data?: RemoteParams): Observable<LookupGridResult> {\r\n    const tableName = helpMetadataId.split('.')[0];\r\n    const labelId = helpMetadataId.split('.')[1];\r\n    data = data || {};\r\n    if (this.frameContext) {\r\n      const primaryValue = this.frameContext.bindingData.list.currentId;\r\n      data['currentForm'] = {\r\n        id: primaryValue\r\n      };\r\n    }\r\n    const enableExtendLoadMethod = this.ifEnableExtendLoadMethod(helpMetadataId);\r\n    if (enableExtendLoadMethod === true) {\r\n      return this.extendGetHelpData(labelId, tableName, data);\r\n    }\r\n    return this.getHelpData(labelId, tableName, data);\r\n  }\r\n  public saveUserSettings(data) {\r\n    const url = '/api/runtime/bcc/v1.0/datagrid/settings';\r\n    return this.befRepository.restService.invoke(url, 'POST', null, { body: data }, false).pipe(\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getUserSettings(key) {\r\n    const url = '/api/runtime/bcc/v1.0/datagrid/settings/' + key;\r\n    return this.befRepository.restService.invoke(url, 'GET', null, null, false).pipe(\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 是否启用扩展取数方法\r\n   */\r\n  private ifEnableExtendLoadMethod(helpMetadataId: string) {\r\n\r\n    // 优先使用context里的设置\r\n    if (this.context && this.context.hasOwnProperty('enableExtendLoadMethod')) {\r\n      return this.context.enableExtendLoadMethod;\r\n    }\r\n\r\n    // context没有设置时，继续使用通过指令设置的开关\r\n    let enableExtendLoadMethod = false;\r\n    if (this.frameContext) {\r\n      const befApiUrl = this.frameContext.repository.apiUri;\r\n      const enableKey = `${helpMetadataId}@${befApiUrl}`;\r\n      enableExtendLoadMethod = this.frameContext.getParam(enableKey);\r\n    }\r\n    return enableExtendLoadMethod;\r\n  }\r\n\r\n  /**\r\n   * 老的帮助取树\r\n   */\r\n  private getHelpData(labelId: string, tableName: string, data: any): Observable<LookupGridResult> {\r\n    const url = `${this.befRepository.restService.baseUri}/elementhelps/${labelId}`;\r\n    const update$ = this.befRepository.updateDataAndVariableChanges();\r\n\r\n    const result$ = update$.pipe(\r\n      switchMap(() => {\r\n        this.extendQueryParam(data);\r\n        // tslint:disable-next-line: max-line-length\r\n        return this.befRepository.restService.invoke(url, 'GET', { nodeCode: tableName, queryParam: JSON.stringify(data) }, null, false).pipe(\r\n          catchError(error => {\r\n            this.clearLoading();\r\n            const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n            return EMPTY;\r\n          })\r\n        );\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 扩展的帮助取数\r\n   */\r\n  private extendGetHelpData(labelId: string, tableName: string, data: any): Observable<LookupGridResult> {\r\n    const url = `${this.befRepository.restService.baseUri}/extension/elementhelps`;\r\n    this.extendQueryParam(data);\r\n    const body = {\r\n      labelId: labelId,\r\n      nodeCode: tableName,\r\n      queryParam: data,\r\n      requestInfo: this.befRepository.restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n\r\n    const result$ = this.befRepository.restService.invoke(url, 'PUT', null, options, false, true);\r\n    return result$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        return responseInfo && responseInfo.returnValue || null;\r\n      }),\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      }\r\n      ),\r\n    );\r\n  }\r\n  private clearLoading() {\r\n    if (this.loadingService) {\r\n      this.loadingService.clearAll();\r\n    }\r\n  }\r\n  private convert2TreeDataWithPathCode(data: any[], layer = 1, parentPathCode = '01') {\r\n    let nodes = data.filter(d => d.layer === layer && d.pathcode === parentPathCode);\r\n    if (layer > 1) {\r\n      nodes = data.filter(d => d.layer === layer && d.pathcode.substr(0, (layer - 1) * 2) === parentPathCode);\r\n    }\r\n    if (nodes.length) {\r\n      const treeNodes = nodes.map(n => {\r\n        return {\r\n          data: n,\r\n          children: []\r\n        };\r\n      });\r\n\r\n      treeNodes.forEach(tn => {\r\n        const _tns = this.convert2TreeDataWithPathCode(data, tn.data.layer + 1, tn.data.pathcode);\r\n        tn.children.push(..._tns);\r\n      });\r\n\r\n      return treeNodes;\r\n    }\r\n  }\r\n  private extendQueryParam(queryParam: any) {\r\n    if (queryParam && typeof queryParam === 'object') {\r\n      const paths = this.getPath();\r\n      queryParam.relationFilterFieldInfo = paths;\r\n    }\r\n  }\r\n  private getPath(): string {\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const rid = this.frameContext.viewModel.bindingData.list.currentId; // root表数据id\r\n    let path = rid;\r\n\r\n    const subPaths = bindingPath.split('/').filter(p => p);\r\n    if (subPaths.length > 0) {\r\n      let subData: any = this.frameContext.viewModel.bindingData;\r\n      for (let index = 0; index < subPaths.length; index++) {\r\n        const subPath = subPaths[index];\r\n        subData = subData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);\r\n        }\r\n        path += `/${subPath.substring(0, subPath.length - 1)}/${subData.currentId}`;\r\n      }\r\n      // path += '/' + subPaths[subPaths.length - 1]+'/' + ;\r\n    }\r\n    return path;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ILookupHttpService, RemoteParams, LookupGridResult } from '@farris/ui-lookup';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { map } from 'rxjs/operators/map';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\n\r\n\r\n/**\r\n * 帮助Rest取数服务\r\n */\r\n@Injectable()\r\nexport class BefLookupDefaultService implements ILookupHttpService {\r\n    private befRepository: BefRepository<any>;\r\n\r\n    constructor(repository: Repository<any>, private sessionService: FrameworkSessionService) {\r\n        this.befRepository = <BefRepository<any>>repository;\r\n    }\r\n\r\n    createSession(url: string) {\r\n        const userSessionID = this.sessionService.getUserSessionId();\r\n        if (userSessionID) {\r\n            return this.befRepository.restService.invoke(url, 'POST', null, {\r\n                headers: new HttpHeaders({ 'SessionId': userSessionID }),\r\n                responseType: 'text'\r\n            }, false).pipe(\r\n                switchMap((str: string) => {\r\n                    return of({ status: true, payload: str });\r\n                })\r\n            );\r\n        } else {\r\n            return of({ status: false, payload: '用户登录信息已过期，请重新登录' });\r\n        }\r\n    }\r\n\r\n    getData(url: string, params?: RemoteParams): Observable<LookupGridResult> {\r\n\r\n        let entityFilter = {};\r\n        if (params.condition) {\r\n            entityFilter = params.condition;\r\n        }\r\n\r\n        if (url[url.length - 1] === '/') {\r\n            url = url.substr(0, url.length - 1);\r\n        }\r\n\r\n        let queryUrl = `${url}/extension/query`, createSessionUrl = `${url}/service/createsession`;\r\n\r\n        if (entityFilter) {\r\n            const entityFilterJson = JSON.stringify(entityFilter);\r\n            queryUrl = `${queryUrl}?entityFilter=${entityFilterJson}`;\r\n        }\r\n\r\n\r\n        return this.createSession(createSessionUrl).pipe(\r\n            switchMap((usrSess: any) => {\r\n                if (usrSess.status) {\r\n                    const sessionId = usrSess.payload;\r\n                    const options: any = {};\r\n                    // if (options.headers) {\r\n                    //     options.headers = options.headers.append('SessionId', usrSess.payload);\r\n                    // } else {\r\n                    // options.headers = new HttpHeaders({ SessionId: sessionId });\r\n                    // }\r\n                    // const token = this.befRepository.restService.sessionService.token;\r\n                    // options.headers = options.headers.append('X-CAF-Runtime-CommonVariable', token);\r\n                    // options.headers = options.headers.append('X-CAF-Runtime-Context', sessionId);\r\n                    return this.befRepository.restService.invoke(queryUrl, 'PUT', null, options, false);\r\n                } else {\r\n                    // @todo: ng7\r\n                    // return new ErrorObservable(usrSess.payload);\r\n                    throw new Error(usrSess.payload);\r\n                }\r\n            }),\r\n            map((res: any) => {\r\n                const val = res.returnValue;\r\n                const data = { items: val.result };\r\n                if (val.pagination) {\r\n                    return Object.assign({}, data, {\r\n                        total: val.pagination.totalCount,\r\n                        pageInfo: {\r\n                            pageSize: val.pagination.pageSize,\r\n                            pageIndex: val.pagination.pageIndex,\r\n                            enablePager: true\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return data;\r\n            })\r\n        )\r\n    }\r\n\r\n}\r\n","import { BefRepository } from './bef_repository';\r\n\r\nexport class BefRepositoryUtil {\r\n  /**\r\n   * 检查BefRepository是否存在未保存数据\r\n   * @param befRepository \r\n   */\r\n  public static isExistUnsaveData(befRepository: BefRepository<any>): boolean {\r\n    let hasUnsavedData = false;\r\n    if (!befRepository || !befRepository.entityCollection) {\r\n      throw 'Current Object is null or it\\'s entityCollection is null.';\r\n    }\r\n\r\n    const entityArray = befRepository.entityCollection.toArray();\r\n    if (befRepository.dataChangeHistory.isChanged()) {\r\n      return true;\r\n    }\r\n    for (let i = 0; i < entityArray.length; i++) {\r\n      if (entityArray[i].changes.length > 0) {\r\n        hasUnsavedData = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasUnsavedData;\r\n  }\r\n\r\n}\r\n","export class Uri {\r\n    constructor(private url: string, private paths: { [propName: string]: any } = null) {\r\n        if (!!this.paths) {\r\n            Object.keys(paths).forEach(path => {\r\n                if (this.url.indexOf(`{${path}}`) !== -1) {\r\n                    this.url = this.url.replace(`{${path}}`, `${paths[path]}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public toString() {\r\n        return this.url;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ComboHttpService } from '@farris/ui-combo-list';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DefaultComboHttpService implements ComboHttpService {\r\n  private befRest: BefRepository<any>;\r\n\r\n  constructor(repository: Repository<any>) {\r\n    this.befRest = repository as BefRepository<any>;\r\n  }\r\n  getData(url: string, params = {}, method = 'GET'): Observable<any> {\r\n    const headers = new HttpHeaders({ 'content-type': 'application/json' })\r\n    // return this.befRest.restService.invoke(url, method, params, { headers });\r\n    if (method.toLowerCase() !== 'get') {\r\n      return this.befRest.restService.invoke(url, method, null, { headers, body: params });\r\n    } else {\r\n      return this.befRest.restService.invoke(url, method, params, { headers });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ComboHttpService } from '@farris/ui-combo-list';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { DynamiControlGroupHttpInterface } from '@farris/dynamic-control-group';\r\n\r\n@Injectable()\r\nexport class DefaultDynamiControlGroupHttpService implements DynamiControlGroupHttpInterface {\r\n    private befRest: BefRepository<any>;\r\n\r\n    constructor(repository: Repository<any>) {\r\n        this.befRest = repository as BefRepository<any>;\r\n    }\r\n    getData(url: string, params = {}, method = 'GET'): Observable<any> {\r\n        const headers = new HttpHeaders({ 'content-type': 'application/json' })\r\n        return this.befRest.restService.invoke(url, method, params, { headers });\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { DataTypeInfo, Entity, EntityCollection } from '@farris/devkit';\r\nimport { Observable } from 'rxjs';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { UriService } from './uri_service';\r\n\r\nclass DynamicBefRepository<T extends Entity> extends BefRepository<T> {\r\n  batchAppend(defaultValues: any[]): Observable<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // public paginationInfo = {\r\n  //   Entity: {\r\n  //     pageSize: 20,\r\n  //   },\r\n  // };\r\n\r\n\r\n\r\n\r\n  constructor(injector: Injector, public name: string, public entityType: any, public serverUri: string, public apiUri: string) {\r\n    super(injector);\r\n    this.apiUri = apiUri;\r\n    // 构造分页属性信息\r\n    const paginationInfo = {};\r\n    paginationInfo[entityType.typeName] = { pageSize: 20 };\r\n    this.paginationInfo = paginationInfo;\r\n\r\n    this.name = name;\r\n\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection(this.entityType);\r\n    // 初始化实体管理器\r\n    this.entityManager = new BefEntityManager(this.entityCollection);\r\n\r\n    // 设置proxy属性值\r\n    const httpClient = injector.get(HttpClient);\r\n    const uriService = new UriService(serverUri);\r\n    const proxy = new BefProxy(httpClient, uriService);\r\n    const baseUri = uriService.extendUri(apiUri);\r\n    proxy.setBaseUri(baseUri);\r\n    this.proxy = proxy;\r\n\r\n    this.dataService = new BefDataService(injector, this);\r\n    this.serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n  }\r\n}\r\n\r\nexport { DynamicBefRepository };\r\n","import { Injector } from '@angular/core';\r\nimport { DataTypeInfo, Entity, EntityCollection, EntityTypeFactory } from '@farris/devkit';\r\nimport { Observable } from 'rxjs';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefRepository } from './bef_repository';\r\n\r\nclass PresetBefRepository<T extends Entity> extends BefRepository<T> {\r\n  batchAppend(defaultValues: any[]): Observable<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  constructor(injector: Injector, public schema: any) {\r\n    super(injector);\r\n    const entityTypeFactory: EntityTypeFactory = new EntityTypeFactory();\r\n    this.entityType = entityTypeFactory.create(schema) as  any;\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection(this.entityType);\r\n    // 初始化实体管理器\r\n    this.entityManager = new BefEntityManager(this.entityCollection);\r\n  }\r\n}\r\n\r\nexport { PresetBefRepository };\r\n","export * from './lib/types';\r\nexport * from './lib/tokens';\r\nexport * from './lib/bef_change_builder';\r\nexport * from './lib/bef_change_handler';\r\nexport * from './lib/session/index';\r\nexport * from './lib/bef_rest_service';\r\nexport * from './lib/bef_proxy';\r\nexport * from './lib/bef_lookup.service';\r\nexport * from './lib/bef_lookup_default.service';\r\nexport * from './lib/bef_repository';\r\nexport * from './lib/framework_session_service';\r\nexport * from './lib/decorators';\r\nexport * from './lib/bef_repository_util';\r\nexport * from './lib/bef_data_path_util';\r\nexport * from './lib/uri_service';\r\nexport * from './lib/uri';\r\nexport * from './lib/bef_combo.service';\r\nexport * from './lib/bef_dynamic_control_group_default.service';\r\nexport * from './lib/bef_entity_manager';\r\nexport * from './lib/dynamic_bef_repository';\r\nexport * from './lib/preset_bef_repository';\r\nexport * from './lib/bef_variable_manager';\r\nexport const VERSION = 'ver.';\r\n"],"names":["tslib_1.__extends","tslib_1.__values","map"],"mappings":"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"}
