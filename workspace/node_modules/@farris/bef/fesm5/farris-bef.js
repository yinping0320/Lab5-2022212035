import { SessionService } from '@ecp-caf/caf-common';
import { format } from 'date-fns';
import { LoadingService } from '@farris/ui-loading';
import { of, zip, throwError, EMPTY } from 'rxjs';
import { tap, map, switchMap, catchError } from 'rxjs/operators';
import { map as map$1 } from 'rxjs/operators/map';
import { InjectionToken, Injectable, Optional, Injector, InjectFlags, Inject } from '@angular/core';
import { HttpHeaders, HttpParams, HttpClient } from '@angular/common/http';
import { __values, __assign, __spread, __extends } from 'tslib';
import { FieldMetadataUtil, ModifyType, EntityCollection, AppContext, makePropDecorator, Repository, EntityManager, FrameContext, BindingPropertyType, PropertyUtil, BindingPathConverter, EventBus, DataChangeType, DataTypeInfoUtil, ViewModel, ExpressionUtil, BackEndMessage, BACK_END_MESSAGE_HANDLER_TOKEN, NAMESPACE, MetadataUtil, encodeUrl, DataTypeInfo, EntityTypeFactory } from '@farris/devkit';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-19 15:36:48
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-07-30 17:37:02
 */
/**
 * --------------------------------------------------------------------------------
 * 变更集相关类型
 * --------------------------------------------------------------------------------
 */
/**
 * 变更类型
 */
var ChangeDetailType = /** @class */ (function () {
    function ChangeDetailType() {
    }
    /**
     * 新增
     */
    ChangeDetailType.Added = 'Added';
    /**
     * 修改
     */
    ChangeDetailType.Modify = 'Modify';
    /**
     * 删除
     */
    ChangeDetailType.Deleted = 'Deleted';
    return ChangeDetailType;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/tokens.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BE_SERVER_URI_TOKEN = new InjectionToken('@farris/be BE_SERVER_URL');
/**
 * 1、因为bef里，很多类都没有注入，BefSessionHandlingStragegy无法直接注入；
 * 2、通过一个字符串Token来间接做策略选择。
 * @type {?}
 */
var BE_SESSION_HANDLING_STRATEGY_TOKEN = new InjectionToken('@farris/be BE_SESSION_HANDLING_STRATEGY_TOKEN');

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EntityUtil = /** @class */ (function () {
    function EntityUtil() {
    }
    /**
     * 查找属性的类型
     * @param entityType 实体类型
     * @param targetPropName 属性名称
     * @return 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    EntityUtil.getPropInfo = /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var propType;
        /** @type {?} */
        var propEntityType;
        /** @type {?} */
        var propMetadata;
        // NgField
        /** @type {?} */
        var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgField';
                propEntityType = null;
                propMetadata = ngFieldProperties[propName];
            }
        }));
        // NgObject
        /** @type {?} */
        var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgObject';
                propEntityType = ngObjectProperties[propName].type;
                propMetadata = ngObjectProperties[propName];
            }
        }));
        // NgList
        /** @type {?} */
        var ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgList';
                propEntityType = ngListProperties[propName].type;
                propMetadata = ngListProperties[propName];
            }
        }));
        /** @type {?} */
        var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgDynamic';
                propEntityType = ngDynamicProperties[propName].type;
                propMetadata = ngDynamicProperties[propName];
            }
        }));
        return { propType: propType, propEntityType: propEntityType, propMetadata: propMetadata };
    };
    /**
     * 获取实体的主键名
     * @param entityType 实体类型
     */
    /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    EntityUtil.getPrimaryKey = /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    function (entityType) {
        /** @type {?} */
        var primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
        if (primaryNgFiledProp) {
            return primaryNgFiledProp.dataField;
        }
        else {
            return '';
        }
    };
    /**
     * 是否为对象属性
     */
    /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    EntityUtil.isObjectProp = /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var isObjectProp = false;
        /** @type {?} */
        var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                isObjectProp = true;
            }
        }));
        return isObjectProp;
    };
    /**
     * 检查是否是动态列属性
     */
    /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    EntityUtil.isDynamicProp = /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var isDynamicProp = false;
        /** @type {?} */
        var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                isDynamicProp = true;
            }
        }));
        return isDynamicProp;
    };
    /**
     * 为实体增加initialData属性
     * @param entity 实体实例
     * @param initialData 默认值对象
     */
    /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    EntityUtil.appendInitialData = /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    function (entity, initialData) {
        /** @type {?} */
        var data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    };
    return EntityUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BEF变更集构造器
 */
var  /**
 * BEF变更集构造器
 */
BefChangeBuilder = /** @class */ (function () {
    /**
     * 构造函数
     * @param entityType 实体类型
     */
    function BefChangeBuilder(entityType, entityCollection) {
        this.entityType = entityType;
        this.entityCollection = entityCollection;
    }
    /**
     * 构造Bef变更集
     * @param modifications
     */
    /**
     * 构造Bef变更集
     * @param {?} modifications
     * @return {?}
     */
    BefChangeBuilder.prototype.build = /**
     * 构造Bef变更集
     * @param {?} modifications
     * @return {?}
     */
    function (modifications) {
        var _this = this;
        // 重置changeDetail
        this.changeDetail = {
            ChangeType: ChangeDetailType.Modify,
            ChangeInfo: {
                DataId: ''
            }
        };
        modifications.forEach((/**
         * @param {?} modification
         * @return {?}
         */
        function (modification) {
            _this.buildChangeDetail(modification);
        }));
        return this.changeDetail;
    };
    /**
     * 构造Bef变更详情
     */
    /**
     * 构造Bef变更详情
     * @param {?} modification
     * @return {?}
     */
    BefChangeBuilder.prototype.buildChangeDetail = /**
     * 构造Bef变更详情
     * @param {?} modification
     * @return {?}
     */
    function (modification) {
        /** @type {?} */
        var paths = modification.path.concat();
        // 设置根节点DataId
        if (!this.changeDetail.ChangeInfo.DataId) {
            this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];
        }
        /** @type {?} */
        var parentChangeDetail = this.changeDetail;
        /** @type {?} */
        var parentEntityType = this.entityType;
        var _loop_1 = function (i) {
            /** @type {?} */
            var parentChangeInfo = this_1.getChangeInfo(parentChangeDetail);
            /** @type {?} */
            var propName = paths[i];
            var _a = EntityUtil.getPropInfo(parentEntityType, propName), propType = _a.propType, propEntityType = _a.propEntityType, propMetadata = _a.propMetadata;
            /** @type {?} */
            var dataField = propMetadata.dataField || propName;
            if (propType === 'NgField') {
                // 不支持主键变更，忽略
                /** @type {?} */
                var primaryKey = EntityUtil.getPrimaryKey(parentEntityType);
                if (propName === primaryKey) {
                    return "continue";
                }
                if (modification.type !== ModifyType.ValueChange) {
                    throw Error('简单类型的属性上不支持ValueChange类型之外的变更');
                }
                // NgField类型：说明是最后一级
                parentChangeInfo[dataField] = modification.value;
                parentChangeDetail = null;
            }
            else if (propType === 'NgObject') {
                // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。
                /** @type {?} */
                var childId = paths[i + 1].split(':')[1];
                /** @type {?} */
                var childIdName = paths[i + 1].split(':')[0];
                if (childIdName) {
                    // 有主键（关联对象）：是一个普通的对象
                    /** @type {?} */
                    var changeObject = parentChangeInfo[dataField];
                    // 获取数据
                    /** @type {?} */
                    var entityPath = paths.slice(0, i + 1);
                    /** @type {?} */
                    var changedEntity = this_1.entityCollection.getEntityByPath(entityPath);
                    changeObject = changedEntity ? changedEntity.toJSON(true) : {};
                    parentChangeInfo[dataField] = changeObject;
                    parentChangeDetail = null;
                    parentEntityType = null;
                }
                else {
                    // 没有主键（值对象）：是一个完整的ChangeDetail
                    /** @type {?} */
                    var changeDetail = (/** @type {?} */ (parentChangeInfo[dataField]));
                    if (!changeDetail) {
                        changeDetail = {
                            ChangeType: ChangeDetailType.Modify,
                            ChangeInfo: {}
                        };
                    }
                    parentChangeInfo[dataField] = changeDetail;
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                }
            }
            else if (propType === 'NgList') {
                // 如果不存在则创建一个空数组
                if (!parentChangeDetail.ChangeInfo[dataField]) {
                    parentChangeDetail.ChangeInfo[dataField] = [];
                }
                /** @type {?} */
                var changeDetails = (/** @type {?} */ (parentChangeDetail.ChangeInfo[dataField]));
                // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：
                // 1、不存在：创建一个Modify类型的ChangeDetail；
                // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；
                // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。
                if (i !== paths.length - 1) {
                    // 遍历检查变更是否已经存在
                    /** @type {?} */
                    var dataId_1 = paths[i + 1].split(':')[1];
                    /** @type {?} */
                    var changeDetail = changeDetails.find((/**
                     * @param {?} changeDetailItem
                     * @return {?}
                     */
                    function (changeDetailItem) {
                        return changeDetailItem.ChangeInfo.DataId === dataId_1;
                    }));
                    // 如果不存在，则创建并添加
                    if (!changeDetail) {
                        changeDetail = this_1.createEmptyChangeDetail(ChangeDetailType.Modify, dataId_1);
                        changeDetails.push(changeDetail);
                    }
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                    return "continue";
                }
                // 如果是叶子节点，则肯定是新增或者删除变更。
                if (modification.type === ModifyType.Add || modification.type === ModifyType.Insert) ;
                else if (modification.type === ModifyType.Remove) ;
                // 重置
                parentChangeDetail = null;
                parentEntityType = null;
            }
            else if (propType === 'NgDynamic') {
                // 获取数据
                /** @type {?} */
                var entityPath = paths.slice(0, i + 1);
                /** @type {?} */
                var changedEntity = this_1.entityCollection.getEntityByPath(entityPath);
                parentChangeInfo[dataField] = {
                    ChangeType: ChangeDetailType.Modify,
                    ChangeInfo: changedEntity ? changedEntity.toJSON(true) : {}
                };
                parentChangeDetail = null;
                parentEntityType = null;
            }
        };
        var this_1 = this;
        for (var i = 1; i < paths.length && parentChangeDetail; i = i + 2) {
            _loop_1(i);
        }
    };
    /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * @todo：为这两种节点封装ChangeNode基类来解决这个差异。
     */
    /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * \@todo：为这两种节点封装ChangeNode基类来解决这个差异。
     * @private
     * @param {?} changeDetail
     * @return {?}
     */
    BefChangeBuilder.prototype.getChangeInfo = /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * \@todo：为这两种节点封装ChangeNode基类来解决这个差异。
     * @private
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        // @todo：可能存在同名属性
        if (changeDetail.hasOwnProperty('ChangeInfo')) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    };
    /**
     * 创建ChangeDetail
     * @param type BEF变更类型
     * @param dataId 数据内码
     */
    /**
     * 创建ChangeDetail
     * @private
     * @param {?} type BEF变更类型
     * @param {?} dataId 数据内码
     * @return {?}
     */
    BefChangeBuilder.prototype.createEmptyChangeDetail = /**
     * 创建ChangeDetail
     * @private
     * @param {?} type BEF变更类型
     * @param {?} dataId 数据内码
     * @return {?}
     */
    function (type, dataId) {
        /** @type {?} */
        var changeDetail = {
            ChangeType: type,
            ChangeInfo: {
                DataId: dataId
            }
        };
        return changeDetail;
    };
    return BefChangeBuilder;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 处理服务器端变更
 */
var  /**
 * 处理服务器端变更
 */
BefChangeHandler = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefChangeHandler() {
    }
    /**
     * 处理Bef变更集
     */
    /**
     * 处理Bef变更集
     * @param {?} entityType
     * @param {?} entityCollection
     * @param {?} changeDetails
     * @return {?}
     */
    BefChangeHandler.prototype.handle = /**
     * 处理Bef变更集
     * @param {?} entityType
     * @param {?} entityCollection
     * @param {?} changeDetails
     * @return {?}
     */
    function (entityType, entityCollection, changeDetails) {
        this.handleChangeDetails(entityType, entityCollection, changeDetails);
    };
    /**
     * 处理Bef变更集（批量）
     * @param entities
     */
    /**
     * 处理Bef变更集（批量）
     * @param {?} entityType
     * @param {?} entityList
     * @param {?} changeDetails
     * @return {?}
     */
    BefChangeHandler.prototype.handleChangeDetails = /**
     * 处理Bef变更集（批量）
     * @param {?} entityType
     * @param {?} entityList
     * @param {?} changeDetails
     * @return {?}
     */
    function (entityType, entityList, changeDetails) {
        var _this = this;
        if (!changeDetails) {
            return;
        }
        changeDetails.forEach((/**
         * @param {?} changeDetail
         * @return {?}
         */
        function (changeDetail) {
            /** @type {?} */
            var id = (/** @type {?} */ ((changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId)));
            /** @type {?} */
            var entity = _this.getEntityById(entityList, id);
            if (!entity) {
                return;
            }
            _this.handleChangeDetail(entityType, entity, changeDetail);
        }));
    };
    /**
     * 处理Bef变更集（单条）
     */
    /**
     * 处理Bef变更集（单条）
     * @param {?} entityType
     * @param {?} entity
     * @param {?} changeDetail
     * @return {?}
     */
    BefChangeHandler.prototype.handleChangeDetail = /**
     * 处理Bef变更集（单条）
     * @param {?} entityType
     * @param {?} entity
     * @param {?} changeDetail
     * @return {?}
     */
    function (entityType, entity, changeDetail) {
        var _this = this;
        if (!changeDetail || !entity) {
            return;
        }
        // 只处理值变更，其他变更待进一步验证。
        if (changeDetail.ChangeType !== ChangeDetailType.Modify) {
            return;
        }
        /** @type {?} */
        var changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            var _a = EntityUtil.getPropInfo(entityType, propName), propType = _a.propType, propEntityType = _a.propEntityType;
            if (propType === 'NgField') {
                // 简单属性：更新值
                entity[propName] = changeInfo[propName];
            }
            else if (propType === 'NgObject') {
                /** @type {?} */
                var childEntity = (/** @type {?} */ (entity[propName]));
                if (childEntity.primaryKey) {
                    // 关联对象：重新加载数据
                    /** @type {?} */
                    var childEntityData = changeInfo[propName];
                    childEntity.load(childEntityData);
                }
                else {
                    // 值对象：递归处理变更
                    /** @type {?} */
                    var childChangeDetail = (/** @type {?} */ (changeInfo[propName]));
                    _this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);
                }
            }
            else if (propType === 'NgList') {
                // 子列表：递归处理变更集合
                /** @type {?} */
                var childEntityList = (/** @type {?} */ (entity[propName]));
                /** @type {?} */
                var childChangeDetails = (/** @type {?} */ (changeInfo[propName]));
                _this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);
            }
        }));
    };
    /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     */
    /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     * @private
     * @param {?} entityList
     * @param {?} id
     * @return {?}
     */
    BefChangeHandler.prototype.getEntityById = /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     * @private
     * @param {?} entityList
     * @param {?} id
     * @return {?}
     */
    function (entityList, id) {
        /** @type {?} */
        var target;
        if (entityList instanceof EntityCollection) {
            target = entityList.getEntityById(id);
        }
        else {
            target = entityList.get(id);
        }
        return target ? target : null;
    };
    return BefChangeHandler;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/framework_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FrameworkSessionService = /** @class */ (function () {
    function FrameworkSessionService(sessionService) {
        this.sessionService = sessionService;
    }
    /**
     * 获取用户SessionId
     */
    /**
     * 获取用户SessionId
     * @return {?}
     */
    FrameworkSessionService.prototype.getUserSessionId = /**
     * 获取用户SessionId
     * @return {?}
     */
    function () {
        return this.sessionService.getUserSessionId();
    };
    /**
     * 获取当前功能菜单的SessionId
     */
    /**
     * 获取当前功能菜单的SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    FrameworkSessionService.prototype.getCurrentSessionId = /**
     * 获取当前功能菜单的SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionId;
        /** @type {?} */
        var rsi = this.getRuntimeSessionId();
        if (rsi) {
            return rsi;
        }
        if (this.sessionService) {
            if (runtimeContext && runtimeContext.hasOwnProperty('tabId')) {
                /** @type {?} */
                var tabId = runtimeContext.tabId;
                sessionId = this.sessionService.getCurrentSeesionId(tabId);
            }
            else {
                sessionId = this.sessionService.getCurrentSeesionId();
            }
        }
        if (!sessionId) {
            sessionId = this.getUserSessionId();
        }
        return sessionId;
    };
    /**
     * @private
     * @return {?}
     */
    FrameworkSessionService.prototype.getRuntimeSessionId = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hash = window.location.hash;
        /** @type {?} */
        var params = this.parse(hash);
        return params && params.rsi || null;
    };
    /**
     * @param {?} queryString
     * @return {?}
     */
    FrameworkSessionService.prototype.parse = /**
     * @param {?} queryString
     * @return {?}
     */
    function (queryString) {
        if (!queryString) {
            return {};
        }
        /** @type {?} */
        var hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce((/**
         * @param {?} params
         * @param {?} hash
         * @return {?}
         */
        function (params, hash) {
            var _a;
            /** @type {?} */
            var split = hash.indexOf('=');
            /** @type {?} */
            var key = hash.slice(0, split);
            /** @type {?} */
            var val = hash.slice(split + 1);
            return Object.assign(params, (_a = {}, _a[key] = decodeURIComponent(val), _a));
        }), {});
    };
    FrameworkSessionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrameworkSessionService.ctorParameters = function () { return [
        { type: SessionService, decorators: [{ type: Optional }] }
    ]; };
    return FrameworkSessionService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_storage_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 基于浏览器SessionStorage的BeSession缓存
 * \@summary
 * 1、SeparatedSession模式下：
 *  {
 *    BE_SESSION_ID: {
 *      frmSessionId1_beSessionUri1: beSessionId-1,
 *      frmSessionId2_beSessionUri2: beSessionId-2,
 *    }
 *  }
 * 2、UnifiedSession模式下（在Debug状态，同模式1）：
 * {
 *    BE_SESSION_ID: {
 *      frmSessionId1: beSessionId-1,
 *      frmSessionId2: beSessionId-2,
 *    }
 *  }
 */
var /**
 * 基于浏览器SessionStorage的BeSession缓存
 * \@summary
 * 1、SeparatedSession模式下：
 *  {
 *    BE_SESSION_ID: {
 *      frmSessionId1_beSessionUri1: beSessionId-1,
 *      frmSessionId2_beSessionUri2: beSessionId-2,
 *    }
 *  }
 * 2、UnifiedSession模式下（在Debug状态，同模式1）：
 * {
 *    BE_SESSION_ID: {
 *      frmSessionId1: beSessionId-1,
 *      frmSessionId2: beSessionId-2,
 *    }
 *  }
 */
SessionStorageBeSessionStorageStrategy = /** @class */ (function () {
    function SessionStorageBeSessionStorageStrategy() {
        /**
         * 缓存Token
         */
        this.sessionStorageKey = 'BE_SESSION_ID';
    }
    /**
     * 获取值
     */
    /**
     * 获取值
     * @param {?} beSessionKey
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.getItem = /**
     * 获取值
     * @param {?} beSessionKey
     * @return {?}
     */
    function (beSessionKey) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        return beSessions[beSessionKey];
    };
    /**
     * 设置值
     */
    /**
     * 设置值
     * @param {?} beSessionKey
     * @param {?} beSessionId
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.setItem = /**
     * 设置值
     * @param {?} beSessionKey
     * @param {?} beSessionId
     * @return {?}
     */
    function (beSessionKey, beSessionId) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        beSessions[beSessionKey] = beSessionId;
        this.setAllBeSessions(beSessions);
    };
    /**
     * 删除值
     */
    /**
     * 删除值
     * @param {?} beSessionKey
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.removeItem = /**
     * 删除值
     * @param {?} beSessionKey
     * @return {?}
     */
    function (beSessionKey) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        if (beSessions[beSessionKey]) {
            delete beSessions[beSessionKey];
        }
        this.setAllBeSessions(beSessions);
    };
    /**
     * 清空同一个父Session下所有的缓存
     * @summary
     * 框架内：清空功能菜单token下的所有BeSession缓存；
     * 框架外：只清空当前beSessionUri的，框架外，用的是用户Sessionid，无法统一清理。
     */
    /**
     * 清空同一个父Session下所有的缓存
     * \@summary
     * 框架内：清空功能菜单token下的所有BeSession缓存；
     * 框架外：只清空当前beSessionUri的，框架外，用的是用户Sessionid，无法统一清理。
     * @param {?} frmSessionId
     * @param {?} beSessionUri
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.clear = /**
     * 清空同一个父Session下所有的缓存
     * \@summary
     * 框架内：清空功能菜单token下的所有BeSession缓存；
     * 框架外：只清空当前beSessionUri的，框架外，用的是用户Sessionid，无法统一清理。
     * @param {?} frmSessionId
     * @param {?} beSessionUri
     * @return {?}
     */
    function (frmSessionId, beSessionUri) {
        /** @type {?} */
        var isInFramework = this.isInFramework();
        if (isInFramework === true) {
            this.removeItemsByFrmSessionId(frmSessionId);
        }
        else {
            this.removeItem(beSessionUri);
        }
    };
    /**
     * 清空frmSessionId对应的所有子BeSessionId
     */
    /**
     * 清空frmSessionId对应的所有子BeSessionId
     * @private
     * @param {?} frmSessionId
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.removeItemsByFrmSessionId = /**
     * 清空frmSessionId对应的所有子BeSessionId
     * @private
     * @param {?} frmSessionId
     * @return {?}
     */
    function (frmSessionId) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        Object.keys(beSessions).forEach((/**
         * @param {?} beSessionKey
         * @return {?}
         */
        function (beSessionKey) {
            if (beSessionKey.startsWith(frmSessionId) === true) {
                delete beSessions[beSessionKey];
            }
        }));
        this.setAllBeSessions(beSessions);
    };
    /**
     * 从SessionStorage中获取全部BeSessions
     */
    /**
     * 从SessionStorage中获取全部BeSessions
     * @private
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.getAllBeSessions = /**
     * 从SessionStorage中获取全部BeSessions
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var beSessionsJson = window.sessionStorage.getItem(this.sessionStorageKey);
        if (!beSessionsJson) {
            return {};
        }
        return JSON.parse(beSessionsJson);
    };
    /**
     * 设置全部BeSessions到SessionStorage
     */
    /**
     * 设置全部BeSessions到SessionStorage
     * @param {?} beSessions
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.setAllBeSessions = /**
     * 设置全部BeSessions到SessionStorage
     * @param {?} beSessions
     * @return {?}
     */
    function (beSessions) {
        /** @type {?} */
        var beSessionsString = JSON.stringify(beSessions);
        window.sessionStorage.setItem(this.sessionStorageKey, beSessionsString);
    };
    /**
     * 是否在框架内
     */
    /**
     * 是否在框架内
     * @private
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.isInFramework = /**
     * 是否在框架内
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hashString = window.location.hash;
        if (!hashString) {
            return false;
        }
        // todo: 不能直接依赖url中的参数，运行框架已经提供相关的获取参数的方法，应该通过运行框架服务获取
        return hashString.indexOf('tabId=') !== -1;
    };
    return SessionStorageBeSessionStorageStrategy;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/http_header.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpHeaderUtil = /** @class */ (function () {
    function HttpHeaderUtil() {
    }
    /**
     * PlainObject => HttpHeaders
     */
    /**
     * PlainObject => HttpHeaders
     * @param {?} headers
     * @return {?}
     */
    HttpHeaderUtil.convertToHeaders = /**
     * PlainObject => HttpHeaders
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        if (!headers) {
            headers = new HttpHeaders();
        }
        // 已经是HttpHeaders，直接返回
        /** @type {?} */
        var isHttpHeaders = headers instanceof HttpHeaders;
        if (isHttpHeaders === true) {
            return headers;
        }
        if (Object.keys(headers).length > 0) {
            /** @type {?} */
            var httpHeaders_1 = new HttpHeaders();
            Object.keys(headers).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) {
                httpHeaders_1 = httpHeaders_1.append(prop, headers[prop]);
            }));
            headers = httpHeaders_1;
        }
        else {
            headers = new HttpHeaders();
        }
        return headers;
    };
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param headers HttpHeaders对象
     * @param context BeSessionId
     */
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param {?} headers HttpHeaders对象
     * @param {?} sessionId
     * @return {?}
     */
    HttpHeaderUtil.appendSessionId = 
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param {?} headers HttpHeaders对象
     * @param {?} sessionId
     * @return {?}
     */
    function (headers, sessionId) {
        return headers.append('SessionId', sessionId);
    };
    /**
     * 追加CommonVariable头
     * @param headers HttpHeaders对象
     * @param context 框架会话token，等价于原来的SessionId
     */
    /**
     * 追加CommonVariable头
     * @param {?} headers HttpHeaders对象
     * @param {?} commonVariable
     * @return {?}
     */
    HttpHeaderUtil.appendCafRuntimeCommonVariable = /**
     * 追加CommonVariable头
     * @param {?} headers HttpHeaders对象
     * @param {?} commonVariable
     * @return {?}
     */
    function (headers, commonVariable) {
        return headers.append('X-CAF-Runtime-CommonVariable', commonVariable);
    };
    /**
     * 追加X-CAF-Runtime-Context头
     * @param headers HttpHeaders对象
     * @param context 等价于BeSessionId
     */
    /**
     * 追加X-CAF-Runtime-Context头
     * @param {?} headers HttpHeaders对象
     * @param {?} context 等价于BeSessionId
     * @return {?}
     */
    HttpHeaderUtil.appendCafRuntimeContext = /**
     * 追加X-CAF-Runtime-Context头
     * @param {?} headers HttpHeaders对象
     * @param {?} context 等价于BeSessionId
     * @return {?}
     */
    function (headers, context) {
        return headers.append('X-CAF-Runtime-Context', context);
    };
    /**
     * 追加Content-Type头
     * @param headers HttpHeaders对象
     * @param context 提交内容的MIME类型，默认为application/json
     */
    /**
     * 追加Content-Type头
     * @param {?} headers HttpHeaders对象
     * @param {?=} contentType
     * @return {?}
     */
    HttpHeaderUtil.appendContextType = /**
     * 追加Content-Type头
     * @param {?} headers HttpHeaders对象
     * @param {?=} contentType
     * @return {?}
     */
    function (headers, contentType) {
        contentType = contentType ? contentType : 'application/json';
        return headers.append('Content-Type', contentType);
    };
    /**
     * @param {?} headers
     * @param {?=} requireMessage
     * @return {?}
     */
    HttpHeaderUtil.appendRequireMessage = /**
     * @param {?} headers
     * @param {?=} requireMessage
     * @return {?}
     */
    function (headers, requireMessage) {
        if (requireMessage === void 0) { requireMessage = true; }
        return headers.append('Bff-Require-Message', requireMessage.toString());
    };
    /**
     * 组合表单复用，表单实例id
     * @param headers headers
     * @param funcInstId 表单实例id
     */
    /**
     * 组合表单复用，表单实例id
     * @param {?} headers headers
     * @param {?} funcInstId 表单实例id
     * @return {?}
     */
    HttpHeaderUtil.appendFuncInstId = /**
     * 组合表单复用，表单实例id
     * @param {?} headers headers
     * @param {?} funcInstId 表单实例id
     * @return {?}
     */
    function (headers, funcInstId) {
        return headers.append('Func-Inst-Id', funcInstId);
    };
    /**
     * http headers to json
     * @param headers headers
     */
    /**
     * http headers to json
     * @param {?} headers headers
     * @return {?}
     */
    HttpHeaderUtil.toJson = /**
     * http headers to json
     * @param {?} headers headers
     * @return {?}
     */
    function (headers) {
        if (!(headers instanceof HttpHeaders)) {
            return null;
        }
        /** @type {?} */
        var result = {};
        headers.keys().forEach((/**
         * @param {?} header
         * @return {?}
         */
        function (header) {
            /** @type {?} */
            var values = headers.getAll(header);
            if (values.length > 1) {
                result[header] = values;
            }
            else {
                result[header] = values[0] || '';
            }
        }));
        return result;
    };
    return HttpHeaderUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/http_param.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * HttpParams工具类
 */
var /**
 * HttpParams工具类
 */
HttpParamUtil = /** @class */ (function () {
    function HttpParamUtil() {
    }
    /**
     * 将PlainObject=>HttpParams
     */
    /**
     * 将PlainObject=>HttpParams
     * @param {?} params
     * @return {?}
     */
    HttpParamUtil.buildParams = /**
     * 将PlainObject=>HttpParams
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var httpParams = new HttpParams();
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                /** @type {?} */
                var value = params[key].toString();
                httpParams = httpParams.append(key, value);
            }
        }
        return httpParams;
    };
    return HttpParamUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/request_info.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RequestInfoUtil = /** @class */ (function () {
    function RequestInfoUtil() {
    }
    /**
     * 检查是否有requestInfo
     */
    /**
     * 检查是否有requestInfo
     * @param {?} options
     * @return {?}
     */
    RequestInfoUtil.hasRequestInfo = /**
     * 检查是否有requestInfo
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (!options || !options.body) {
            return false;
        }
        /** @type {?} */
        var body = options.body;
        // 有多个参数的时候
        if (body.requestInfo && body.requestInfo.dataChange) {
            return true;
        }
        if (body.dataChange) {
            return true;
        }
        return false;
    };
    /**
     * 检查是否有RquestInfo
     * @summary
     * 产品部依赖了请求时传递RequestInfo，返回时直接取到returnValue的特性。
     */
    /**
     * 检查是否有RquestInfo
     * \@summary
     * 产品部依赖了请求时传递RequestInfo，返回时直接取到returnValue的特性。
     * @param {?} options
     * @return {?}
     */
    RequestInfoUtil.hasRequestInfoWithR = /**
     * 检查是否有RquestInfo
     * \@summary
     * 产品部依赖了请求时传递RequestInfo，返回时直接取到returnValue的特性。
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (!options || !options.body) {
            return false;
        }
        /** @type {?} */
        var body = options.body;
        // 有多个参数的时候
        if (body.RequestInfo && body.RequestInfo.dataChange) {
            return true;
        }
        if (body.dataChange) {
            return true;
        }
        return false;
    };
    /**
     * 构造RequestInfo
     */
    /**
     * 构造RequestInfo
     * @param {?} repository
     * @return {?}
     */
    RequestInfoUtil.buildRequestInfo = /**
     * 构造RequestInfo
     * @param {?} repository
     * @return {?}
     */
    function (repository) {
        /** @type {?} */
        var requestInfo = {
            dataChange: repository.entityManager.buildAllEntityChangeDetails(),
            variableChange: repository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    };
    /**
     * 构造带requestInfo的body（仅适用于body中有多个参数的情况）
     * @summary
     * 一个参数时body=requestInfo，不适用该方法。
     */
    /**
     * 构造带requestInfo的body（仅适用于body中有多个参数的情况）
     * \@summary
     * 一个参数时body=requestInfo，不适用该方法。
     * @param {?} body
     * @param {?} repository
     * @return {?}
     */
    RequestInfoUtil.buildBodyWithRequestInfo = /**
     * 构造带requestInfo的body（仅适用于body中有多个参数的情况）
     * \@summary
     * 一个参数时body=requestInfo，不适用该方法。
     * @param {?} body
     * @param {?} repository
     * @return {?}
     */
    function (body, repository) {
        if (body.RequestInfo || body.requestInfo) {
            return body;
        }
        /** @type {?} */
        var requestInfo = this.buildRequestInfo(repository);
        /** @type {?} */
        var bodyWithRequestInfo = Object.assign({}, body, { requestInfo: requestInfo });
        return bodyWithRequestInfo;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    RequestInfoUtil.getRequestInfo = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (!options || !options.body) {
            return null;
        }
        /** @type {?} */
        var body = options.body;
        // 有多个参数的时候
        if (body.requestInfo) {
            return body.requestInfo;
        }
        if (body.dataChange || body.variableChange) {
            return body;
        }
        return null;
    };
    return RequestInfoUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/response_info.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResponseInfoUtil = /** @class */ (function () {
    function ResponseInfoUtil() {
    }
    /**
     * 将ResponseInfo转换为老接口的数据返回格式
     */
    /**
     * 将ResponseInfo转换为老接口的数据返回格式
     * @param {?} result
     * @return {?}
     */
    ResponseInfoUtil.unWrapResponseInfo = /**
     * 将ResponseInfo转换为老接口的数据返回格式
     * @param {?} result
     * @return {?}
     */
    function (result) {
        // 兼容cancel没有返回值的情况
        if (!result) {
            return result;
        }
        // 没有returnValue的情况下，兼容query取数的的格式
        if (result.hasOwnProperty('returnValue') === false) {
            if (result.hasOwnProperty('result') && result.hasOwnProperty('pagination')) {
                // 兼容返回带分页的列表数据
                return result.result;
            }
            return result;
        }
        // 其他：返回RequestInfo.returnValue的情况
        /** @type {?} */
        var returnValue = result.returnValue;
        if (returnValue && returnValue.hasOwnProperty('result') && returnValue.hasOwnProperty('pagination')) {
            // 兼容返回带分页的列表数据
            return returnValue.result;
        }
        return result.returnValue;
    };
    /**
     * @param {?} response
     * @return {?}
     */
    ResponseInfoUtil.isReported401Error = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        return response.status === 401;
    };
    /**
     * 解析后端消息
     * @param result result
     */
    /**
     * 解析后端消息
     * @param {?} result result
     * @return {?}
     */
    ResponseInfoUtil.parseBackEndMessage = /**
     * 解析后端消息
     * @param {?} result result
     * @return {?}
     */
    function (result) {
        if (result && result.message && Array.isArray(result.message) && result.message.length > 0) {
            return result.message;
        }
        return null;
    };
    /**
     * 解析后端错误消息
     * @param error error
     */
    /**
     * 解析后端错误消息
     * @param {?} e
     * @return {?}
     */
    ResponseInfoUtil.parseBackEndError = /**
     * 解析后端错误消息
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var error = e && e.error;
        if (error && error.hasOwnProperty('extensionMessage') && error.extensionMessage && error.extensionMessage.hasOwnProperty('UIMsg') && error.extensionMessage.UIMsg && error.extensionMessage.UIMsg.length > 0) {
            return JSON.parse(error.extensionMessage.UIMsg);
        }
        return null;
    };
    return ResponseInfoUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/http_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable: no-string-literal disable: max-line-length
var HttpService = /** @class */ (function () {
    function HttpService(defaultHttpClient) {
        this.defaultHttpClient = defaultHttpClient;
        this.httpClient = defaultHttpClient;
        this.rtf = this.getService();
    }
    /**
     * 遍历获取rtf服务
     */
    /**
     * 遍历获取rtf服务
     * @private
     * @return {?}
     */
    HttpService.prototype.getService = /**
     * 遍历获取rtf服务
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var env = window;
        while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {
            env = window.parent;
        }
        return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};
    };
    /**
     * 是否同源
     * @param environment window
     */
    /**
     * 是否同源
     * @private
     * @param {?} environment window
     * @return {?}
     */
    HttpService.prototype.isSameOrigin = /**
     * 是否同源
     * @private
     * @param {?} environment window
     * @return {?}
     */
    function (environment) {
        /** @type {?} */
        var host = window.location.host;
        try {
            if (environment && environment.location && typeof environment.location.host !== 'undefined') {
                return environment.location.host === host;
            }
        }
        catch (e) {
            return false;
        }
        return false;
    };
    Object.defineProperty(HttpService.prototype, "params", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (this.rtf && this.rtf.hasOwnProperty('session') && typeof this.rtf['session']['getCommonVariable'] === 'function') {
                return this.rtf['session']['getCommonVariable']();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpService.prototype, "httpService", {
        /**
         * 获取运行框架http服务
         */
        get: /**
         * 获取运行框架http服务
         * @return {?}
         */
        function () {
            if (this.rtf && this.rtf.hasOwnProperty('http') && typeof this.rtf['http']['request'] === 'function') {
                return this.rtf.http;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} method
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.request = /**
     * @param {?} method
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (method, url, options) {
        if (options === void 0) { options = {}; }
        // todo: 使用运行框架的httpclient导致帮助无法显示数据，暂时撤回
        // if (this.httpService && this.params && this.params.tabId) {
        //   return this.httpService.request$(method, url, options);
        // } else {
        //   return this.defaultHttpClient.request(method, url, options);
        // }
        return this.defaultHttpClient.request(method, url, options);
    };
    HttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return HttpService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefSession处理策略类
 * @abstract
 */
var /**
 * BefSession处理策略类
 * @abstract
 */
BefSessionHandlingStrategy = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefSessionHandlingStrategy(storageStrategy, frmSessionService) {
        this.storageStrategy = storageStrategy;
        this.frmSessionService = frmSessionService;
    }
    /**
     * 框架SessionId（用户的或者功能菜单的）
     */
    /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getFrmSessionId = /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        return this.frmSessionService.getCurrentSessionId(runtimeContext);
    };
    Object.defineProperty(BefSessionHandlingStrategy.prototype, "frmSessionId", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.frmSessionService.getCurrentSessionId();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取框架SessionId
     */
    /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getFrameworkSessionId = /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        return this.getFrmSessionId(runtimeContext);
    };
    /**
     * 从缓存中获取BeSession
     */
    /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionIdFromStorage = /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionStorageKey = this.getSessionStorageKey(runtimeContext);
        /** @type {?} */
        var beSessionId = this.storageStrategy.getItem(sessionStorageKey);
        return beSessionId;
    };
    return BefSessionHandlingStrategy;
}());
/**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
var /**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
BefSeparatedSessionHandlingStrategy = /** @class */ (function (_super) {
    __extends(BefSeparatedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUri, injector) {
        var _this = _super.call(this, storageStrategy, frmSessionService) || this;
        _this.beSessionUri = beBaseUri;
        _this.httpClient = httpClient;
        _this.httpService = new HttpService(_this.httpClient);
        _this.injector = injector;
        return _this;
    }
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            return of(beSessionId);
        }
        return this.createSession();
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        // this.storageStrategy.removeItem(sessionKey);
        this.storageStrategy.clear(this.frmSessionId, sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.extendRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage(runtimeContext);
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);
        }
        // const appContext = this.injector.get<AppContext>(AppContext, null);
        //if (appContext) {
        // const appId = appContext.ApplicationId;
        headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);
        // }
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * 创建BeSessionId
     */
    /**
     * 创建BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.createSession = /**
     * 创建BeSessionId
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = {
            responseType: 'text'
        };
        if (!!this.frmSessionId) {
            /** @type {?} */
            var appContext = this.injector.get(AppContext, null);
            params.headers = new HttpHeaders({ SessionId: this.frmSessionId });
            params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);
            //if (appContext) {
            // const appId = appContext.ApplicationId;
            params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);
            //}
            params.headers = HttpHeaderUtil.toJson(params.headers);
        }
        return this.httpService.request('POST', this.beSessionUri, params).pipe(tap((/**
         * @param {?} beSessionId
         * @return {?}
         */
        function (beSessionId) {
            _this.setSessionId(beSessionId);
        })));
    };
    /**
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.extendHttpHeader = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return sessionId + "_" + this.beSessionUri;
    };
    return BefSeparatedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));
var BefUnifiedSessionHandlingStrategy = /** @class */ (function (_super) {
    __extends(BefUnifiedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beBaseUri, injector) {
        var _this = _super.call(this, storageStrategy, frmSessionService) || this;
        _this.beSessionUri = beBaseUri;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        var sessionId = this.storageStrategy.getItem(sessionKey);
        return of(sessionId);
        // return of(null);
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.removeItem(sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.extendRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage(runtimeContext);
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        /** @type {?} */
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            /** @type {?} */
            var token = appContext.Token;
            headers = HttpHeaderUtil.appendFuncInstId(headers, token);
        }
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @summary
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        // const isDebug = false;
        // if (isDebug) {
        //   return `${this.frmSessionId}_${this.beSessionUri}`;
        // } else {
        //   return this.frmSessionId;
        // }
        /** @type {?} */
        var sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return sessionId + "_" + this.beSessionUri;
    };
    return BefUnifiedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy_factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BeSession处理策略工厂
 */
var BefSessionHandlingStrategyFactory = /** @class */ (function () {
    function BefSessionHandlingStrategyFactory() {
    }
    /**
     * 创建BeSession处理策略
     */
    /**
     * 创建BeSession处理策略
     * @param {?} handlingStrategyName
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @param {?} httpClient
     * @param {?} injector
     * @return {?}
     */
    BefSessionHandlingStrategyFactory.prototype.create = /**
     * 创建BeSession处理策略
     * @param {?} handlingStrategyName
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @param {?} httpClient
     * @param {?} injector
     * @return {?}
     */
    function (handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector) {
        /** @type {?} */
        var storageStrategy = this.createStorageStrategy();
        /** @type {?} */
        var beSessionUri = this.createBeSessionUri(beBaseUri);
        if (handlingStrategyName === 'UnifiedSession') {
            return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beSessionUri, injector);
        }
        else {
            return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beSessionUri, injector);
        }
    };
    /**
     * 创建BeSession缓存策略
     */
    /**
     * 创建BeSession缓存策略
     * @private
     * @return {?}
     */
    BefSessionHandlingStrategyFactory.prototype.createStorageStrategy = /**
     * 创建BeSession缓存策略
     * @private
     * @return {?}
     */
    function () {
        return new SessionStorageBeSessionStorageStrategy();
    };
    /**
     * 创建BeSession地址
     */
    /**
     * 创建BeSession地址
     * @private
     * @param {?} beBaseUri
     * @return {?}
     */
    BefSessionHandlingStrategyFactory.prototype.createBeSessionUri = /**
     * 创建BeSession地址
     * @private
     * @param {?} beBaseUri
     * @return {?}
     */
    function (beBaseUri) {
        return beBaseUri + "/service/createsession";
    };
    BefSessionHandlingStrategyFactory.decorators = [
        { type: Injectable }
    ];
    return BefSessionHandlingStrategyFactory;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BefSessionService = /** @class */ (function () {
    /**
     * 构造函数
     * @summary
     * 产品部存在new BeSessionService()的场景，injector可能为空，必须要兼容。
     */
    function BefSessionService(httpClient, beBaseUri, frmSessionService, injector) {
        this.beBaseUri = beBaseUri;
        this.injector = injector;
        this.handlingStrategy = this.createHandlingStrategy(injector, httpClient, frmSessionService, beBaseUri);
    }
    Object.defineProperty(BefSessionService.prototype, "token", {
        /**
         * 获取token
         */
        get: /**
         * 获取token
         * @return {?}
         */
        function () {
            return this.handlingStrategy.getFrameworkSessionId();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSessionService.prototype.getBeSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        return this.handlingStrategy.getSessionId();
    };
    /**
     * 设置sessionId
     * @param sessionId sessionId
     */
    /**
     * 设置sessionId
     * @param {?} sessionId sessionId
     * @return {?}
     */
    BefSessionService.prototype.setBeSessionId = /**
     * 设置sessionId
     * @param {?} sessionId sessionId
     * @return {?}
     */
    function (sessionId) {
        this.handlingStrategy.setSessionId(sessionId);
        this.setSessionId(sessionId);
    };
    /**
     * 清空BeSessionId
     */
    /**
     * 清空BeSessionId
     * @return {?}
     */
    BefSessionService.prototype.clearBeSessionId = /**
     * 清空BeSessionId
     * @return {?}
     */
    function () {
        this.handlingStrategy.clearSessionId();
    };
    /**
     * 扩展请求header
     */
    /**
     * 扩展请求header
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionService.prototype.extendRequestHeaders = /**
     * 扩展请求header
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        return this.handlingStrategy.extendRequestHeaders(headers, runtimeContext);
    };
    /**
     * 处理响应header
     */
    /**
     * 处理响应header
     * @param {?} headers
     * @return {?}
     */
    BefSessionService.prototype.handleResponseHeaders = /**
     * 处理响应header
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        return this.handlingStrategy.handleReponseHeaders(headers);
    };
    /**
     * 创建BeSessionId
     * @deprecated
     * 不再提供封装，请自行调用EAPI上的createSession方法。
     * @summary
     * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；
     * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.
     */
    /**
     * 创建BeSessionId
     * @deprecated
     * 不再提供封装，请自行调用EAPI上的createSession方法。
     * \@summary
     * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；
     * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.
     * @return {?}
     */
    BefSessionService.prototype.createBeSession = /**
     * 创建BeSessionId
     * @deprecated
     * 不再提供封装，请自行调用EAPI上的createSession方法。
     * \@summary
     * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；
     * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var handlingStrategy = (/** @type {?} */ (this.handlingStrategy));
        return handlingStrategy.createSession();
    };
    /**
     * @private
     * @param {?} sessionId
     * @return {?}
     */
    BefSessionService.prototype.setSessionId = /**
     * @private
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var appContext = this.injector.get(AppContext, null, InjectFlags.Optional);
        if (appContext && sessionId) {
            appContext.params.set('sessionId', sessionId);
        }
    };
    /**
     * 创建BeSession处理策略
     * @summary session处理策略
     *
     * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector
     *
     * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`
     *
     * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）
     */
    /**
     * 创建BeSession处理策略
     * \@summary session处理策略
     *
     * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector
     *
     * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`
     *
     * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）
     * @private
     * @param {?} injector
     * @param {?} httpClient
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @return {?}
     */
    BefSessionService.prototype.createHandlingStrategy = /**
     * 创建BeSession处理策略
     * \@summary session处理策略
     *
     * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector
     *
     * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`
     *
     * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）
     * @private
     * @param {?} injector
     * @param {?} httpClient
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @return {?}
     */
    function (injector, httpClient, frmSessionService, beBaseUri) {
        /** @type {?} */
        var handlingStrategyName;
        // 开发自己实例化的befSessionService
        if (!injector) {
            handlingStrategyName = 'SeparatedSession';
        }
        else {
            // bef 实例化
            handlingStrategyName = injector.get(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);
        }
        // 老表单，兼容老的模式，分开创建session
        if (!handlingStrategyName) {
            handlingStrategyName = 'SeparatedSession';
        }
        /** @type {?} */
        var handlingStrategyFactory = new BefSessionHandlingStrategyFactory();
        return handlingStrategyFactory.create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector);
    };
    BefSessionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefSessionService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String },
        { type: FrameworkSessionService },
        { type: Injector }
    ]; };
    return BefSessionService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/decorators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量元数据名称
 * @type {?}
 */
var NG_VARIABLE = '@farris/bef NG_VARIABLE';
/**
 * NgVariable装饰工厂的工厂
 * @type {?}
 */
var NgVariable = makePropDecorator(NG_VARIABLE, (/**
 * @param {?} obj
 * @return {?}
 */
function (obj) { return obj; }));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/deprecated/deprecated_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 适配老的API，保持兼容
 * @abstract
 * @template T
 */
var DeprecatedBefRepository = /** @class */ (function (_super) {
    __extends(DeprecatedBefRepository, _super);
    // #endregion
    /**
    * 构造函数
    */
    function DeprecatedBefRepository() {
        return _super.call(this) || this;
    }
    Object.defineProperty(DeprecatedBefRepository.prototype, "restService", {
        // #region 老的属性包装成get方法进行兼容
        /**
         * 取数服务
         */
        get: 
        // #region 老的属性包装成get方法进行兼容
        /**
         * 取数服务
         * @return {?}
         */
        function () {
            return this.dataService.restService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeprecatedBefRepository.prototype, "changeBuilder", {
        /**
         * 实体变更（前端）=> BE变更（后端）
         */
        get: /**
         * 实体变更（前端）=> BE变更（后端）
         * @return {?}
         */
        function () {
            return this.entityManager.changeBuilder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeprecatedBefRepository.prototype, "changeHandler", {
        /**
         * BE变更（后端）=> 实体变更（前端）
         */
        get: /**
         * BE变更（后端）=> 实体变更（前端）
         * @return {?}
         */
        function () {
            return this.entityManager.changeHandler;
        },
        enumerable: true,
        configurable: true
    });
    // #region 数据访问
    /**
    * 获取实体集合
    */
    // #region 数据访问
    /**
     * 获取实体集合
     * @return {?}
     */
    DeprecatedBefRepository.prototype.getList = 
    // #region 数据访问
    /**
     * 获取实体集合
     * @return {?}
     */
    function () {
        return this.dataService.getList(null, null, null, null);
    };
    /**
     * 获取单个实体
     * @param id 主实体id
     */
    /**
     * 获取单个实体
     * @param {?} id 主实体id
     * @return {?}
     */
    DeprecatedBefRepository.prototype.getById = /**
     * 获取单个实体
     * @param {?} id 主实体id
     * @return {?}
     */
    function (id) {
        return this.dataService.getById(id);
    };
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    DeprecatedBefRepository.prototype.updateById = /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        return this.dataService.updateById(id);
    };
    /**
     * 创建新实体，并加载
     */
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    DeprecatedBefRepository.prototype.create = /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.create(defaultValue);
    };
    /**
     * 追加实体
     */
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    DeprecatedBefRepository.prototype.append = /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.append(defaultValue);
    };
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    DeprecatedBefRepository.prototype.appendByPath = /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    function (fpath) {
        return this.dataService.appendByPath(fpath);
    };
    /**
     * 根据id删除实体
     * @param id 内码
     */
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    DeprecatedBefRepository.prototype.removeById = /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    function (id, ifSave) {
        return this.dataService.removeById(id, ifSave);
    };
    /**
     * 批量删除
     * @param id 内码
     * @param ifSave 是否保存
     */
    /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    DeprecatedBefRepository.prototype.removeByIds = /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    function (ids, ifSave) {
        return this.dataService.removeByIds(ids, ifSave);
    };
    /**
     * 删除子级
     * @param path 路径
     * @param id   内码
     */
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    DeprecatedBefRepository.prototype.removeByPath = /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    function (fpath, id) {
        return this.dataService.removeByPath(fpath, id);
    };
    /**
     * 将id对应的实体的变更提交的服务器端
     */
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    DeprecatedBefRepository.prototype.updateChangesById = /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.dataService.updateChangesById(id);
    };
    /**
     * 提交path对应实体的变更
     */
    /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    DeprecatedBefRepository.prototype.updateChangesByPath = /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    function (path, id) {
        throw new Error('Not Implement');
    };
    /**
     * 提交所有变更
     */
    /**
     * 提交所有变更
     * @return {?}
     */
    DeprecatedBefRepository.prototype.updateAllChanges = /**
     * 提交所有变更
     * @return {?}
     */
    function () {
        return this.dataService.updateAllChanges();
    };
    /**
     * 应用变更
     */
    /**
     * 应用变更
     * @return {?}
     */
    DeprecatedBefRepository.prototype.applyChanges = /**
     * 应用变更
     * @return {?}
     */
    function () {
        return this.dataService.applyChanges();
    };
    /**
     * 提交数据变更和变量变更，通过retrieve模拟
     * @internal
     */
    /**
     * 提交数据变更和变量变更，通过retrieve模拟
     * \@internal
     * @return {?}
     */
    DeprecatedBefRepository.prototype.updateDataAndVariableChanges = /**
     * 提交数据变更和变量变更，通过retrieve模拟
     * \@internal
     * @return {?}
     */
    function () {
        /** @type {?} */
        var filterConditions = [];
        /** @type {?} */
        var sortConditions = [];
        /** @type {?} */
        var entityFilter = {
            FilterConditions: filterConditions,
            SortConditions: sortConditions,
            IsUsePagination: true,
            Pagination: {
                PageIndex: 1,
                PageSize: 1,
                PageCount: 0,
                TotalCount: 0
            }
        };
        /** @type {?} */
        var entityFilterJson = JSON.stringify(entityFilter);
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        // 没有变更时不再提交变更
        if (this.isEmptyRequestInfo(requestInfo)) {
            return of(null);
        }
        /** @type {?} */
        var url = this.restService.baseUri + "/extension/query?entityFilter=" + entityFilterJson;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = {
            body: body
        };
        return this.restService.invoke(url, 'PUT', null, options, false, true, true);
    };
    /**
     * 应用id对应数据的变更
     */
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    DeprecatedBefRepository.prototype.applyChangesById = /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.dataService.applyChangesById(id);
    };
    /**
     * 取消变更
     */
    /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    DeprecatedBefRepository.prototype.cancelChanges = /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.dataService.cancelChanges(options);
    };
    // #endregion
    // #region 数据变更集处理
    /**
     * 清空所有本地实体的变更集
     */
    // #endregion
    // #region 数据变更集处理
    /**
     * 清空所有本地实体的变更集
     * @return {?}
     */
    DeprecatedBefRepository.prototype.clearAllEntityChanges = 
    // #endregion
    // #region 数据变更集处理
    /**
     * 清空所有本地实体的变更集
     * @return {?}
     */
    function () {
        return this.entityManager.clearAllEntityChanges();
    };
    /**
     * 获取数据变更
     */
    /**
     * 获取数据变更
     * @return {?}
     */
    DeprecatedBefRepository.prototype.getDataChangeDetails = /**
     * 获取数据变更
     * @return {?}
     */
    function () {
        return this.entityManager.buildAllEntityChangeDetails();
    };
    /**
     * 处理数据变更
     */
    /**
     * 处理数据变更
     * @param {?} changeDetails
     * @return {?}
     */
    DeprecatedBefRepository.prototype.handleDataChangeDetails = /**
     * 处理数据变更
     * @param {?} changeDetails
     * @return {?}
     */
    function (changeDetails) {
        return this.entityManager.handleDataChangeDetails(changeDetails);
    };
    // #endregion
    // #region 变量变更集处理
    /**
     * 获取变量变更
     */
    // #endregion
    // #region 变量变更集处理
    /**
     * 获取变量变更
     * @return {?}
     */
    DeprecatedBefRepository.prototype.getVariableChangeDetail = 
    // #endregion
    // #region 变量变更集处理
    /**
     * 获取变量变更
     * @return {?}
     */
    function () {
        return this.variableManager.buildChangeDetail();
    };
    /**
     * 处理变量变更
     */
    /**
     * 处理变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    DeprecatedBefRepository.prototype.handleVariableChangeDetail = /**
     * 处理变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        this.variableManager.handleChangeDetail(changeDetail);
    };
    // #endregion
    /**
     * 变更集是否为空
     * @param requestInfo requestInfo
     */
    // #endregion
    /**
     * 变更集是否为空
     * @private
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    DeprecatedBefRepository.prototype.isEmptyRequestInfo = 
    // #endregion
    /**
     * 变更集是否为空
     * @private
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (requestInfo) {
        if (!requestInfo) {
            return true;
        }
        if ((!requestInfo.dataChange || requestInfo.dataChange.length < 1) && (!requestInfo.variableChange || Object.keys(requestInfo.variableChange).length < 1)) {
            return true;
        }
        return false;
    };
    DeprecatedBefRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DeprecatedBefRepository.ctorParameters = function () { return []; };
    return DeprecatedBefRepository;
}(Repository));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_entity_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 实体管理类：管理Entity和
 * \@todo
 * 1、实体管理应该放在Devkit中；
 * 2、目前只是简单代码拆分，待进一步明确职责。
 * @template T
 */
var  /**
 * 实体管理类：管理Entity和
 * \@todo
 * 1、实体管理应该放在Devkit中；
 * 2、目前只是简单代码拆分，待进一步明确职责。
 * @template T
 */
BefEntityManager = /** @class */ (function (_super) {
    __extends(BefEntityManager, _super);
    /**
     * 构造函数
     */
    function BefEntityManager(entityCollection) {
        var _this = _super.call(this, entityCollection) || this;
        _this.changeBuilder = new BefChangeBuilder(_this.entityCollection.entityType, _this.entityCollection);
        _this.changeHandler = new BefChangeHandler();
        return _this;
    }
    // #region 处理ChangeDetail相关
    /**
     * 获取数据变更
     */
    // #region 处理ChangeDetail相关
    /**
     * 获取数据变更
     * @return {?}
     */
    BefEntityManager.prototype.buildAllEntityChangeDetails = 
    // #region 处理ChangeDetail相关
    /**
     * 获取数据变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changeDetails = [];
        /** @type {?} */
        var entities = this.entityCollection.getAllEntities();
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            if (entity.changes.length === 0) {
                return;
            }
            /** @type {?} */
            var changeDetail = _this.changeBuilder.build(entity.changes);
            // 防止空id的变更被提交
            // @todo：此处判断应该放到更底层，临时修复Bug。
            if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {
                changeDetails.push(changeDetail);
            }
        }));
        return changeDetails;
    };
    /**
     * 获取单个实体
     */
    /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    BefEntityManager.prototype.buildEntityChangeDetailById = /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var entity = this.entityCollection.getEntityById(id);
        if (entity.changes.length === 0) {
            return null;
        }
        /** @type {?} */
        var changeDetail = this.changeBuilder.build(entity.changes);
        return changeDetail;
    };
    /**
     * 应用数据变更
     * @param changeDetails ChangeDetail数组
     */
    /**
     * 应用数据变更
     * @param {?} changeDetails ChangeDetail数组
     * @return {?}
     */
    BefEntityManager.prototype.handleDataChangeDetails = /**
     * 应用数据变更
     * @param {?} changeDetails ChangeDetail数组
     * @return {?}
     */
    function (changeDetails) {
        this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);
    };
    // #endregion
    /**
     * 清空所有实体
     */
    // #endregion
    /**
     * 清空所有实体
     * @return {?}
     */
    BefEntityManager.prototype.reset = 
    // #endregion
    /**
     * 清空所有实体
     * @return {?}
     */
    function () {
        this.entityCollection.clear();
    };
    return BefEntityManager;
}(EntityManager));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变更集工具类
 */
var /**
 * 变更集工具类
 */
BefChangeUtil = /** @class */ (function () {
    function BefChangeUtil() {
    }
    /**
     * 创建空的ChangeDetail
     * @param type   the type of change
     * @param dataId the identity of the entity whose properties's values have changed
     */
    /**
     * 创建空的ChangeDetail
     * @param {?} type   the type of change
     * @param {?=} dataId the identity of the entity whose properties's values have changed
     * @return {?}
     */
    BefChangeUtil.createEmpty = /**
     * 创建空的ChangeDetail
     * @param {?} type   the type of change
     * @param {?=} dataId the identity of the entity whose properties's values have changed
     * @return {?}
     */
    function (type, dataId) {
        /** @type {?} */
        var changeDetail = {
            ChangeType: type,
            ChangeInfo: {}
        };
        if (dataId) {
            changeDetail.ChangeInfo['DataId'] = dataId;
        }
        return changeDetail;
    };
    /**
     * Get changes from an ChangeDetail object or an plain object
     * @param changeDetail 变更详情
     */
    /**
     * Get changes from an ChangeDetail object or an plain object
     * @param {?} changeDetail 变更详情
     * @return {?}
     */
    BefChangeUtil.getChangeInfo = /**
     * Get changes from an ChangeDetail object or an plain object
     * @param {?} changeDetail 变更详情
     * @return {?}
     */
    function (changeDetail) {
        /** @type {?} */
        var isChangeDetail = this.isChangeDetail(changeDetail);
        if (isChangeDetail === true) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    };
    /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     * @param changeDetail
     */
    /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     * @param {?} changeDetail
     * @return {?}
     */
    BefChangeUtil.isChangeDetail = /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.
        /** @type {?} */
        var keys = Object.keys(changeDetail);
        return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;
    };
    return BefChangeUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_variable_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Be变量管理器
 */
var BefVariableManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefVariableManager(appContext, ngVariables, injector) {
        var _this = this;
        this.appContext = appContext;
        this.ngVariables = ngVariables;
        this.injector = injector;
        this.ngVariableMap = new Map();
        this.innerValueMap = new Map();
        // 重新组织变量元数据
        Object.keys(ngVariables).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this.ngVariableMap.set(propName, ngVariables[propName]);
        }));
    }
    /**
     * 获取变更集
     */
    /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.handleChangeDetail = /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        var _this = this;
        /** @type {?} */
        var changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} varName
         * @return {?}
         */
        function (varName) {
            // 变量元数据
            /** @type {?} */
            var ngVariable = _this.ngVariableMap.get(varName);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            var mapping = ngVariable.mapping;
            // 更新UIState变更
            /** @type {?} */
            var newValue = changeInfo[varName];
            /** @type {?} */
            var oldValue = _this.getValueFromUIState(mapping);
            if (oldValue === newValue) {
                return;
            }
            // 更新值
            _this.setValueToUIState(mapping, newValue);
            _this.innerValueMap.set(varName, newValue);
        }));
    };
    /**
     * Build ChangeDetail instance for all variables.
     */
    /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    BefVariableManager.prototype.buildChangeDetail = /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        function (ngVariable, varName) {
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            /** @type {?} */
            var oldValue = _this.innerValueMap.get(varName);
            if (_this.isValueEqual(newValue, oldValue) === false) {
                // 不清除变更，请求成功后清除变更
                // this.innerValueMap.set(varName, newValue);
                _this.appendToChangeInfo(changeDetail, varName, newValue);
            }
        }));
        if (Object.keys(changeDetail.ChangeInfo).length === 0) {
            return null;
        }
        return changeDetail;
    };
    /**
     * Clear variable values cached in the innerValueMap property.
     */
    /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    BefVariableManager.prototype.reset = /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    function () {
        this.innerValueMap.clear();
    };
    /**
     * 清空所有vo变量变更集
     */
    /**
     * 清空所有vo变量变更集
     * @return {?}
     */
    BefVariableManager.prototype.clearChanges = /**
     * 清空所有vo变量变更集
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        function (ngVariable, varName) {
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            /** @type {?} */
            var oldValue = _this.innerValueMap.get(varName);
            if (_this.isValueEqual(newValue, oldValue) === false) {
                _this.innerValueMap.set(varName, newValue);
            }
        }));
    };
    /**
     * 清空只读vo变更
     * @param changeDetail
     * @returns
     */
    /**
     * 清空只读vo变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.clearChangeDetail = /**
     * 清空只读vo变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        var _this = this;
        if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {
            return;
        }
        Object.keys(changeDetail.ChangeInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var ngVariable = _this.ngVariableMap.get(key);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            _this.innerValueMap.set(key, newValue);
        }));
    };
    /**
     * Append changed variable to ChangeDetail instance.
     */
    /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    BefVariableManager.prototype.appendToChangeInfo = /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    function (changeDetail, varName, varValue) {
        if (this.isUdtVariable(varValue) === true) {
            /** @type {?} */
            var udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
            udtVarChangeDetail.ChangeInfo = varValue;
            changeDetail.ChangeInfo[varName] = udtVarChangeDetail;
        }
        else {
            changeDetail.ChangeInfo[varName] = varValue;
        }
    };
    /**
     * 从UIState上获取值
     */
    /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    BefVariableManager.prototype.getValueFromUIState = /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    function (mapping) {
        /** @type {?} */
        var uiState = this.getRootUIState();
        // 计算value
        /** @type {?} */
        var mappingArray = mapping.split('.');
        /** @type {?} */
        var value = mappingArray.reduce((/**
         * @param {?} accumulator
         * @param {?} currentValue
         * @return {?}
         */
        function (accumulator, currentValue) {
            return accumulator ? accumulator[currentValue] : null;
        }), uiState);
        if (value instanceof Date) {
            return format(value, 'yyyy-MM-dd HH:mm:ss');
        }
        return value;
    };
    /**
     * 获取根组件上的UIState
     */
    /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    BefVariableManager.prototype.getRootUIState = /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();
        if (this.injector) {
            /** @type {?} */
            var frameContext = this.injector.get(FrameContext, null);
            if (frameContext) {
                /** @type {?} */
                var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
                rootFrameContext = virtualRootFrameContext || rootFrameContext;
            }
        }
        if (!rootFrameContext) {
            return;
        }
        return rootFrameContext.uiState;
    };
    /**
     * 值比较
     * @todo 临时采用这种方式
     */
    /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    BefVariableManager.prototype.isValueEqual = /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    function (srcValue, dstValue) {
        return JSON.stringify(srcValue) === JSON.stringify(dstValue);
    };
    /**
     * Check if the object is a plain object
     */
    /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    BefVariableManager.prototype.isUdtVariable = /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj && obj.constructor &&
            obj.toString() === '[object Object]' &&
            obj.constructor.prototype.hasOwnProperty('isPrototypeOf');
    };
    /**
     * 设置值到UIState
     * @todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     */
    /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    BefVariableManager.prototype.setValueToUIState = /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    function (mapping, value) {
        /** @type {?} */
        var uiState = this.getRootUIState();
        uiState[mapping] = value;
    };
    /** @nocollapse */
    BefVariableManager.ctorParameters = function () { return [
        { type: AppContext },
        { type: undefined },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return BefVariableManager;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefProxy工具类
 * \@summary
 * 1、BefProxy辅助工具类；
 * 2、暂时无法归类的代码封装；
 */
var /**
 * BefProxy工具类
 * \@summary
 * 1、BefProxy辅助工具类；
 * 2、暂时无法归类的代码封装；
 */
BefProxyUtil = /** @class */ (function () {
    function BefProxyUtil() {
    }
    /**
     * 构造RequestInfo
     */
    /**
     * 构造RequestInfo
     * @param {?} befRepository
     * @return {?}
     */
    BefProxyUtil.buildRequestInfo = /**
     * 构造RequestInfo
     * @param {?} befRepository
     * @return {?}
     */
    function (befRepository) {
        /** @type {?} */
        var requestInfo = {
            dataChange: befRepository.entityManager.buildAllEntityChangeDetails(),
            variableChange: befRepository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    };
    return BefProxyUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_path_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef数据中各种Path的转换
 */
var  /**
 * Bef数据中各种Path的转换
 */
BefDataPathUtil = /** @class */ (function () {
    function BefDataPathUtil() {
    }
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     */
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathArray = /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        var _this = this;
        /** @type {?} */
        var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
        /** @type {?} */
        var pathArray = [];
        /** @type {?} */
        var currentBindingObject = bindingData.list.currentItem;
        pathArray.push(currentBindingObject.primaryKeyValue);
        bindingPathArray.forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            /** @type {?} */
            var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            if (propInfo.type !== BindingPropertyType.List) {
                throw new Error(propInfo.name + "\u4E0D\u662F\u5B50\u8868\u5BF9\u5E94\u7684\u5C5E\u6027");
            }
            /** @type {?} */
            var currentBindingList = currentBindingObject[propName];
            currentBindingObject = currentBindingList.currentItem;
            pathArray.push(_this.trimTrailingS(propName));
            pathArray.push(currentBindingObject.primaryKeyValue);
        }));
        return pathArray;
    };
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     */
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathUrl = /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        pathArray.pop();
        return '/' + pathArray.join('/');
    };
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     */
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToObjectCodes = /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var objectCodes = [];
        for (var i = 1; i < pathLen; i = i + 2) {
            objectCodes.push(pathArray[i]);
        }
        return objectCodes;
    };
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     */
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForUpdate = /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var dataIds = [];
        for (var i = 0; i < pathLen; i = i + 2) {
            dataIds.push(pathArray[i]);
        }
        return dataIds;
    };
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     */
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForAdd = /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);
        dataIds.pop();
        return dataIds;
    };
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     */
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    BefDataPathUtil.convertPathToUrl = /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var subPaths = path.split('/');
        for (var i = subPaths.length - 1; i > 0; i--) {
            if (subPaths[i] && subPaths[i].endsWith('s')) {
                subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1).toLowerCase();
            }
        }
        // url不再转小写，兼容主键有大写字母的情况
        return subPaths.join('/'); // .toLowerCase();
    };
    /**
     * 去除最后的s
     */
    /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    BefDataPathUtil.trimTrailingS = /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substr(0, str.length - 1);
    };
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     */
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToNodeCodes = /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') === -1; })).forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            result.push(node);
        }));
        return result;
    };
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     */
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToIds = /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') !== -1; })).forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            result.push(id.split(':')[1]);
        }));
        return result;
    };
    return BefDataPathUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef数据访问服务
 * \@todo：
 * 1、临时将BefRepository相关代码转移到该类中；
 * 2、进一步明确职责，调整结构
 * @template T
 */
// tslint:disable: no-string-literal
var /**
 * Bef数据访问服务
 * \@todo：
 * 1、临时将BefRepository相关代码转移到该类中；
 * 2、进一步明确职责，调整结构
 * @template T
 */
// tslint:disable: no-string-literal
BefDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefDataService(injector, repository) {
        this.injector = injector;
        this.repository = repository;
        /** @type {?} */
        var frmSessionService = injector.get(FrameworkSessionService);
        /** @type {?} */
        var httpClient = injector.get(HttpClient);
        /** @type {?} */
        var serverUri = injector.get(BE_SERVER_URI_TOKEN);
        // 创建BefRestService实例
        /** @type {?} */
        var restBaseUri = serverUri + "/" + this.repository.apiUri;
        /** @type {?} */
        var eventBus = injector.get(EventBus);
        this.restService = new BefRestService(httpClient, restBaseUri, frmSessionService, this.repository, eventBus);
        this.appContext = injector.get(AppContext);
    }
    Object.defineProperty(BefDataService.prototype, "restProxy", {
        /**
         * BefRest代理
         */
        get: /**
         * BefRest代理
         * @return {?}
         */
        function () {
            return this.repository.restService.proxy;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实体集合
     */
    /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.getList = /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        var _this = this;
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        var entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var filter$ = this.restProxy.extendQuery(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            var listData = queryResult.result;
            /** @type {?} */
            var entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var entity = _this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            var serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                var pageSize_1 = serverPaginationInfo.pageSize, pageIndex_1 = serverPaginationInfo.pageIndex, totalCount = serverPaginationInfo.totalCount;
                // 处理主表分页信息
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: pageIndex_1, pageSize: pageSize_1, totalCount: totalCount });
            }
            else {
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            _this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    };
    /**
     * 过滤数据
     * @param filter 过滤条件
     * @param sort 排序条件
     * @param pageSize 分页大小
     * @param pageIndex 当前分页
     */
    /**
     * 过滤数据
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 当前分页
     * @return {?}
     */
    BefDataService.prototype.filter = /**
     * 过滤数据
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 当前分页
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        var _this = this;
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        var entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var filter$ = this.restProxy.filter(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            var listData = queryResult.result;
            /** @type {?} */
            var entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var entity = _this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            var serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                var pageSize_2 = serverPaginationInfo.pageSize, pageIndex_2 = serverPaginationInfo.pageIndex, totalCount = serverPaginationInfo.totalCount;
                // 处理主表分页信息
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: pageIndex_2, pageSize: pageSize_2, totalCount: totalCount });
            }
            else {
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            _this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    };
    /**
     * 构造EntityFilter
     */
    /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.buildEntityFilter = /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].relation = 0;
        }
        /** @type {?} */
        var entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    };
    /**
     * 获取单个实体
     * @param id id
     * @param enableChildrenPagination en
     */
    /**
     * 获取单个实体
     * @param {?} id id
     * @return {?}
     */
    BefDataService.prototype.getById = /**
     * 获取单个实体
     * @param {?} id id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.getEntityById(id);
        }
        /** @type {?} */
        var retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var entityData = responseInfo.returnValue;
            /** @type {?} */
            var entity = _this.repository.buildEntity(entityData);
            _this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.getEntityById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        // 获取所有分页信息
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        var retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            var entityData = returnValue.result;
            /** @type {?} */
            var serverPaginationInfo = returnValue.pagination;
            _this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            var entity = _this.repository.buildEntity(entityData);
            _this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    };
    /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param paths 通用路径
     * @param pageIndex 页码
     * @param pageSize 分页大小
     * @param filter 过滤条件
     * @param sort 排序
     */
    /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    BefDataService.prototype.queryChild = /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    function (paths, pageIndex, pageSize, filter, sort) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var nodeCodes = BefDataPathUtil.convertPathsToNodeCodes(paths);
        /** @type {?} */
        var entityCodes = nodeCodes.map((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.substring(0, node.length - 1); }));
        /** @type {?} */
        var entityName = entityCodes[entityCodes.length - 1];
        // 查询对象可能为从表或从从表
        /** @type {?} */
        var pagination = this.repository.entityCollection.getPaginationConfigByPath("/" + entityName);
        var _a = (pagination || {}).pageSize, ps = _a === void 0 ? 0 : _a;
        /** @type {?} */
        var viewModel = this.injector.get(ViewModel, null);
        /** @type {?} */
        var forceQueryChild = false;
        if (viewModel) {
            forceQueryChild = viewModel.frameContext.appContext.params.get('forceQueryChild') || false;
        }
        if (ps == 0 && !forceQueryChild) {
            return of(null);
        }
        /** @type {?} */
        var ids = BefDataPathUtil.convertPathsToIds(paths);
        /** @type {?} */
        var parentId = ids[ids.length - 1];
        /** @type {?} */
        var params = {
            nodeCodes: entityCodes,
            ids: ids,
            pagination: {
                pageIndex: pageIndex,
                pageSize: pageSize
            },
            requestInfo: requestInfo
        };
        /** @type {?} */
        var request$ = this.restService.queryChild(params);
        return request$.pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var returnValue = response.returnValue;
            if (!returnValue) {
                return null;
            }
            var _a = returnValue.result, result = _a === void 0 ? [] : _a, _b = returnValue.pagination, pagination = _b === void 0 ? {} : _b;
            /** @type {?} */
            var commonPaths = paths.map((/**
             * @param {?} path
             * @param {?} index
             * @return {?}
             */
            function (path, index) {
                if (path.includes(':') && index % 2 === 0) {
                    return path.split(':')[1];
                }
                return path;
            }));
            /** @type {?} */
            var entities = _this.repository.entityManager.createEntitiesByPath("/" + commonPaths.join('/'), result);
            _this.repository.entityCollection.resetEntities(paths, entities);
            // 更新分页信息
            _this.repository.entityCollection.setPaginationConfigByPath("/" + entityName, { pageIndex: pagination.pageIndex, pageSize: pagination.pageSize });
            _this.repository.entityCollection.setPaginationConfigByPath("/" + entityName + "_" + parentId, pagination);
        })));
    };
    /**
     * 构造子表分页信息
     */
    /**
     * 构造子表分页信息
     * @private
     * @return {?}
     */
    BefDataService.prototype.buildChildrenPagination = /**
     * 构造子表分页信息
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var paginationInfo = this.repository.entityCollection.getPaginationConfigByPath('/');
        /** @type {?} */
        var childPaginationInfo = {};
        /** @type {?} */
        var childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        // 实体无子表
        if (!childrenEntityCodes || childrenEntityCodes.length < 1) {
            return null;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var value = paginationInfo[key];
            if (typeof value === 'object') {
                /** @type {?} */
                var entityCode = key && key.includes('_') && key.split('_')[0] || null;
                if (!(entityCode && childrenEntityCodes.includes(entityCode + "s"))) {
                    childPaginationInfo[key] = value;
                }
            }
        }));
        return childPaginationInfo;
    };
    /**
     * 更新分页配置信息
     * @param paginationInfo 服务器分页信息
     */
    /**
     * 更新分页配置信息
     * @private
     * @param {?} paginationInfo 服务器分页信息
     * @return {?}
     */
    BefDataService.prototype.updatePagination = /**
     * 更新分页配置信息
     * @private
     * @param {?} paginationInfo 服务器分页信息
     * @return {?}
     */
    function (paginationInfo) {
        var _this = this;
        if (!paginationInfo) {
            return;
        }
        /** @type {?} */
        var childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        childrenEntityCodes = childrenEntityCodes.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.substr(0, item.length - 1); }));
        // retrieve之后没有子表数据
        if (!paginationInfo || Object.keys(paginationInfo).length < 1) {
            if (childrenEntityCodes && childrenEntityCodes.length > 0) {
                childrenEntityCodes.forEach((/**
                 * @param {?} nodeCode
                 * @return {?}
                 */
                function (nodeCode) {
                    /** @type {?} */
                    var original = _this.repository.entityCollection.getPaginationConfigByPath("/" + nodeCode);
                    if (original) {
                        //original.pageIndex = 1;
                        //original.total = 0;
                        // 重置当前子表公共分页信息
                        //this.repository.entityCollection.setPaginationConfigByPath(`/${nodeCode}`, original);
                        // 删除当前数据下级表分页信息
                        /** @type {?} */
                        var localPagination = _this.repository.entityCollection.getPaginationConfigByPath('/');
                        /** @type {?} */
                        var keys = Object.keys(localPagination).filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.startsWith(nodeCode + "_"); }));
                        if (keys && keys.length > 0) {
                            keys.forEach((/**
                             * @param {?} key
                             * @return {?}
                             */
                            function (key) {
                                _this.repository.entityCollection.setPaginationConfigByPath("/" + key, { pageIndex: 1, total: 0, pageSize: original.pageSize });
                            }));
                        }
                    }
                }));
            }
            return;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            // const entityName = childrenEntityCodes.find(item => key.startsWith(`${item}_`));
            _this.repository.entityCollection.setPaginationConfigByPath("/" + key, paginationInfo[key]);
        }));
    };
    /**
     * 构造retrieve分页信息
     * @description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     */
    /**
     * 构造retrieve分页信息
     * \@description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     * @private
     * @return {?}
     */
    BefDataService.prototype.buildRetrieveParam = /**
     * 构造retrieve分页信息
     * \@description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childPaginationInfo = this.buildChildrenPagination();
        if (!childPaginationInfo || Object.keys(childPaginationInfo).length < 1) {
            return null;
        }
        /** @type {?} */
        var retrieveParam = { filters: {}, parentIds: {} };
        /** @type {?} */
        var childrenEntityCodes = [];
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        Object.keys(childPaginationInfo).forEach((/**
         * @param {?} typeName
         * @return {?}
         */
        function (typeName) {
            /** @type {?} */
            var entity = childPaginationInfo[typeName];
            /** @type {?} */
            var pageIndex = entity.pageIndex || 1;
            retrieveParam.filters[typeName] = { pagination: { pageSize: entity.pageSize || 0, pageIndex: pageIndex } };
            // if (this.isChildrenTable(typeName)) {
            //   retrieveParam.parentIds[typeName] = this.getId(typeName, pageIndex);
            // }
        }));
        return retrieveParam;
    };
    /*
    private getId(nodeCode: string, pageIndex: number): string {
      const viewModel = this.injector.get<ViewModel>(ViewModel, null);
      const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
      if (pageIndex !== originalPageIndex) {
        return null;
      }
      if (viewModel) {
        const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
        if (bindingList && bindingList.currentId) {
          return bindingList.currentId;
        }
      }
      return null;
    }
    private isChildrenTable(nodeCode: string) {
      let childrenEntityCodes: any[] = [];
      nodeCode += 's';
      ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
      if (childrenEntityCodes && childrenEntityCodes.length > 0) {
        const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
        return index !== -1;
      }
      return false;
    }*/
    /**
     * 更新并对实体加锁
     * @param id 实体id
     */
    /*
      private getId(nodeCode: string, pageIndex: number): string {
        const viewModel = this.injector.get<ViewModel>(ViewModel, null);
        const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
        if (pageIndex !== originalPageIndex) {
          return null;
        }
        if (viewModel) {
          const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
          if (bindingList && bindingList.currentId) {
            return bindingList.currentId;
          }
        }
        return null;
      }
      private isChildrenTable(nodeCode: string) {
        let childrenEntityCodes: any[] = [];
        nodeCode += 's';
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        if (childrenEntityCodes && childrenEntityCodes.length > 0) {
          const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
          return index !== -1;
        }
        return false;
      }*/
    /**
     * 更新并对实体加锁
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.editById = /*
      private getId(nodeCode: string, pageIndex: number): string {
        const viewModel = this.injector.get<ViewModel>(ViewModel, null);
        const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
        if (pageIndex !== originalPageIndex) {
          return null;
        }
        if (viewModel) {
          const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
          if (bindingList && bindingList.currentId) {
            return bindingList.currentId;
          }
        }
        return null;
      }
      private isChildrenTable(nodeCode: string) {
        let childrenEntityCodes: any[] = [];
        nodeCode += 's';
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        if (childrenEntityCodes && childrenEntityCodes.length > 0) {
          const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
          return index !== -1;
        }
        return false;
      }*/
    /**
     * 更新并对实体加锁
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        var requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        var retrieve$ = this.restProxy.edit(id, requestInfo);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var entityData = responseInfo.returnValue.data;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            if (entityToUpdate && entityData) {
                _this.reloadEntityData(entityToUpdate, entityData);
            }
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.updateById = /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        // 如果要更新的实体不存在，返回一个null流；
        // @todo：返回empty()还是null流，为了不影响现有行为，临时返回null流。
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.updateEntityById(id);
        }
        /** @type {?} */
        var retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var entityData = responseInfo.returnValue;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            _this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.updateEntityById = /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        // 获取所有分页信息
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        var retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            var entityData = returnValue.result;
            /** @type {?} */
            var serverPaginationInfo = returnValue.pagination;
            _this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            _this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 重新加载实体数据
     * @param id 要重载的实体id
     * @param entityData 要重载的数据
     * @todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     */
    /**
     * 重新加载实体数据
     * \@todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     * @private
     * @param {?} entity
     * @param {?} entityData 要重载的数据
     * @return {?}
     */
    BefDataService.prototype.reloadEntityData = /**
     * 重新加载实体数据
     * \@todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     * @private
     * @param {?} entity
     * @param {?} entityData 要重载的数据
     * @return {?}
     */
    function (entity, entityData) {
        if (!entity) {
            return;
        }
        // 关闭变更检测
        this.appContext.changeDetectionController.detach();
        // retrieve之后已经是最新数据，移除变更
        // entity.load(entityData);
        this.repository.entityCollection.updateEntity(entity, entityData);
        // 重新加载数据不应该产生变更
        entity.changes.splice(0, entity.changes.length);
        // 重新打开变更检测
        this.appContext.changeDetectionController.reattach();
    };
    /**
     * 创建新实体，并加载
     */
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.create = /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var result$ = this.restService.create(defaultValue, requestInfo);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newData);
            EntityUtil.appendInitialData(newEntity, newData);
            _this.repository.entityCollection.loadEntities([newEntity], true);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    };
    /**
     * 追加实体
     */
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.append = /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restService.create(defaultValue, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newData);
            _this.repository.entityCollection.addEntity(newEntity);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    };
    /**
     * 插入数据
     * @param position 数据插入位置
     * @param defaultValue 默认值
     */
    /**
     * 插入数据
     * @param {?} position 数据插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    BefDataService.prototype.insert = /**
     * 插入数据
     * @param {?} position 数据插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    function (position, defaultValue) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var insert$ = this.restProxy.create(defaultValue, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newData);
            _this.repository.entityCollection.insertEntity(newEntity, position);
            return newEntity;
        })));
    };
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    BefDataService.prototype.appendByPath = /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    function (fpath) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restService.createByPath(fpath, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.entityManager.appendEntityByPath(fpath, newData, newData);
            return newEntity;
        })));
    };
    /**
     * 创建子实体并插入到指定位置
     * @param fpath 父路径
     * @param position 数据插入位置
     */
    /**
     * 创建子实体并插入到指定位置
     * @param {?} fpath 父路径
     * @param {?} position 数据插入位置
     * @return {?}
     */
    BefDataService.prototype.insertByPath = /**
     * 创建子实体并插入到指定位置
     * @param {?} fpath 父路径
     * @param {?} position 数据插入位置
     * @return {?}
     */
    function (fpath, position) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var insert$ = this.restProxy.createByPath(fpath, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.entityManager.insertEntityByPath(fpath, newData, newData, position);
            return newEntity;
        })));
    };
    /**
     * 根据id删除实体
     * @param id 内码
     */
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    BefDataService.prototype.removeById = /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    function (id, ifSave) {
        var _this = this;
        ifSave = (ifSave === undefined) ? true : ifSave;
        /** @type {?} */
        var requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        var delete$;
        if (ifSave) {
            delete$ = this.restProxy.deleteAndSave(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            function () {
                _this.repository.entityCollection.removeEntityById(id);
                return of(true);
            })));
        }
        else {
            delete$ = this.restService.extendDelete(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            function () {
                _this.repository.entityCollection.removeEntityById(id);
                _this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
                return of(true);
            })));
        }
    };
    /**
     * 删除并保存
     * @param id 要删除的实体id
     */
    /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    BefDataService.prototype.removeAndSaveById = /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        var delete$ = this.restProxy.deleteAndSave(id, requestInfo);
        /** @type {?} */
        var result$ = delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityCollection.removeEntityById(id);
            // this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
            return of(true);
        })));
        return result$;
    };
    /**
     * 批量删除
     * @param id 内码
     * @param ifSave 是否保存
     */
    /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    BefDataService.prototype.removeByIds = /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    function (ids, ifSave) {
        var _this = this;
        ifSave = (ifSave === undefined) ? true : ifSave;
        // 服务器端删除
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.extendBatchDelete(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            if (ifSave) {
                // 执行保存
                return _this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        // 从实体集合中删除
                        _this.repository.entityCollection.removeEntities((/**
                         * @param {?} value
                         * @return {?}
                         */
                        function (value) {
                            return _this.checkEntityValueExists(value, ids);
                        }));
                    }
                })));
            }
            else {
                // 从实体集合中删除
                _this.repository.entityCollection.removeEntities((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    return _this.checkEntityValueExists(value, ids);
                }));
                if (ids && ids.length > 0) {
                    /** @type {?} */
                    var changes_1 = [];
                    ids.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    function (id) {
                        changes_1.push({ dataId: id, changeType: DataChangeType.Delete });
                    }));
                    _this.repository.dataChangeHistory.addChanges(changes_1);
                }
                return of(true);
            }
        })));
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} ifSave 是否保存
     * @return {?}
     */
    BefDataService.prototype.batchRemove = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} ifSave 是否保存
     * @return {?}
     */
    function (ids, ifSave) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.extendBatchDeletion(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            if (ifSave) {
                // 执行保存
                return _this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        // 从实体集合中删除
                        _this.removeEntities(ids);
                    }
                })));
            }
            else {
                // 从实体集合中删除
                _this.removeEntities(ids);
                _this.addBatchRemoveHistory(ids);
                return of(true);
            }
        })));
    };
    /**
     * 添加批量删除记录到变更记录中
     * @param ids ids
     */
    /**
     * 添加批量删除记录到变更记录中
     * @private
     * @param {?} ids ids
     * @return {?}
     */
    BefDataService.prototype.addBatchRemoveHistory = /**
     * 添加批量删除记录到变更记录中
     * @private
     * @param {?} ids ids
     * @return {?}
     */
    function (ids) {
        if (ids && ids.length > 0) {
            /** @type {?} */
            var changes_2 = [];
            ids.forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                changes_2.push({ dataId: id, changeType: DataChangeType.Delete });
            }));
            this.repository.dataChangeHistory.addChanges(changes_2);
        }
    };
    /**
     * 从实体仓库中批量移除指定id的数据
     * @param ids
     */
    /**
     * 从实体仓库中批量移除指定id的数据
     * @private
     * @param {?} ids
     * @return {?}
     */
    BefDataService.prototype.removeEntities = /**
     * 从实体仓库中批量移除指定id的数据
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        this.repository.entityCollection.removeEntities((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return _this.checkEntityValueExists(value, ids);
        }));
    };
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @param array 待遍历数组
     */
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    BefDataService.prototype.checkEntityValueExists = /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    function (entity, primaryValueArray) {
        /** @type {?} */
        var isExistInTargetArray = false;
        for (var i = 0; i < primaryValueArray.length; i++) {
            if (entity.primaryValue === primaryValueArray[i]) {
                isExistInTargetArray = true;
                break;
            }
        }
        return isExistInTargetArray;
    };
    /**
     * 删除子级
     * @param path 路径
     * @param id   内码
     */
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    BefDataService.prototype.removeByPath = /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    function (fpath, id) {
        var _this = this;
        // 服务器端删除
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.extendDeletByPath(fpath, id, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.removeEntityByPath(fpath, id);
            _this.repository.dataChangeHistory.addChange({ fpath: fpath, dataId: id, changeType: DataChangeType.Delete });
            return true;
        })));
    };
    /**
     * 批量删除子级
     * @param fPath 路径
     * @param ids  子级id集合
     */
    /**
     * 批量删除子级
     * @param {?} fPath 路径
     * @param {?} ids  子级id集合
     * @return {?}
     */
    BefDataService.prototype.batchRemoveByPath = /**
     * 批量删除子级
     * @param {?} fPath 路径
     * @param {?} ids  子级id集合
     * @return {?}
     */
    function (fPath, ids) {
        var _this = this;
        // 服务器端删除
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.batchDeleteByPath(fPath, ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var idArray = ids.split(',');
            if (idArray.length > 0) {
                idArray.forEach((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    _this.repository.entityManager.removeEntityByPath(fPath, id);
                    _this.repository.dataChangeHistory.addChange({ fpath: fPath, dataId: id, changeType: DataChangeType.Delete });
                }));
            }
            return true;
        })));
    };
    /**
     * 将id对应的实体的变更提交的服务器端
     */
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.updateChangesById = /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        // 变更集不存在
        if (!entity.changes) {
            return of(true);
        }
        // 变更集为空
        if (entity.changes.length === 0) {
            return of(true);
        }
        /** @type {?} */
        var changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var update$ = this.restService.update(changeDetail, requestInfo);
        /** @type {?} */
        var result$ = update$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 提交path对应实体的变更
     */
    /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.updateChangesByPath = /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    function (path, id) {
        throw new Error('Not Implement');
    };
    /**
     * 提交所有变更
     */
    /**
     * 提交所有变更
     * @return {?}
     */
    BefDataService.prototype.updateAllChanges = /**
     * 提交所有变更
     * @return {?}
     */
    function () {
        var _this = this;
        // 遍历实体，提交变更
        /** @type {?} */
        var updateResults = [];
        /** @type {?} */
        var entities = this.repository.entityCollection.toArray();
        if (entities.length === 0) {
            return of(true);
        }
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            /** @type {?} */
            var updateResult$ = _this.updateChangesById(entity.primaryValue);
            updateResults.push(updateResult$);
        }));
        // 串联流
        /** @type {?} */
        var result$ = zip.apply(void 0, __spread(updateResults)).pipe(map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用变更
     */
    /**
     * 应用变更
     * @return {?}
     */
    BefDataService.prototype.applyChanges = /**
     * 应用变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var save$ = this.restService.save(requestInfo);
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.clearAllVariableChanges(requestInfo.variableChange);
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用idArray对应数据的变更
     */
    /**
     * 应用idArray对应数据的变更
     * @param {?} idArray
     * @return {?}
     */
    BefDataService.prototype.applyChangesByIdArray = /**
     * 应用idArray对应数据的变更
     * @param {?} idArray
     * @return {?}
     */
    function (idArray) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var save$ = this.restService.save(requestInfo);
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesByArray(idArray);
            _this.repository.dataChangeHistory.clearByIds(idArray);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用id对应数据的变更
     */
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.applyChangesById = /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var save$ = this.restService.save(requestInfo);
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
            _this.repository.dataChangeHistory.clearByIds([id]);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 取消变更
     */
    /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    BefDataService.prototype.cancelChanges = /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        /** @type {?} */
        var cancel$ = this.restService.cancel(options);
        /** @type {?} */
        var result$ = cancel$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefDataService.prototype.batchAppendByPath = /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (path, defaultValues) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restProxy.batchAppendByPath(path, defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var list = responseInfo.returnValue;
            /** @type {?} */
            var entities = _this.repository.entityManager.createEntitiesByPath(path, list);
            /** @type {?} */
            var paths = path.split('/').filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p; }));
            _this.repository.entityManager.appendEntitiesByPath(paths, entities);
            return entities;
        })));
    };
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefDataService.prototype.batchAppend = /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (defaultValues) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restProxy.batchAppend(defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var list = responseInfo.returnValue;
            /** @type {?} */
            var entities = _this.repository.buildEntities(list);
            _this.repository.entityCollection.addEntities(entities);
            return entities;
        })));
    };
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @returns
     */
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @return {?}
     */
    BefDataService.prototype.hasChanges = /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @return {?}
     */
    function () {
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        return this.restService.hasChanges(requestInfo);
    };
    /**
     * 构造变更集
     */
    /**
     * 构造变更集
     * @return {?}
     */
    BefDataService.prototype.buildRequestInfo = /**
     * 构造变更集
     * @return {?}
     */
    function () {
        /** @type {?} */
        var requestInfo = {
            dataChange: this.repository.entityManager.buildAllEntityChangeDetails(),
            variableChange: this.repository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    };
    return BefDataService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/back_end_message.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BackEndMessageUtil = /** @class */ (function () {
    function BackEndMessageUtil() {
    }
    /**
     * @param {?} messages
     * @param {?} injector
     * @param {?=} options
     * @return {?}
     */
    BackEndMessageUtil.handleMessage = /**
     * @param {?} messages
     * @param {?} injector
     * @param {?=} options
     * @return {?}
     */
    function (messages, injector, options) {
        /** @type {?} */
        var namespace = injector.get(NAMESPACE, null);
        /** @type {?} */
        var appContext = injector.get(AppContext, null);
        /** @type {?} */
        var context = {
            ns: namespace,
            appContext: appContext
        };
        /** @type {?} */
        var bizMessages = this.buildBackEndMessages(messages);
        /** @type {?} */
        var backEndMessage = new BackEndMessage.Message(bizMessages, context);
        /** @type {?} */
        var backEndMessageHandler = injector.get(BACK_END_MESSAGE_HANDLER_TOKEN, null);
        if (backEndMessageHandler) {
            backEndMessageHandler.handle(backEndMessage, options);
        }
    };
    /**
     * @param {?} injector
     * @return {?}
     */
    BackEndMessageUtil.isBackEndMessageHandlerExist = /**
     * @param {?} injector
     * @return {?}
     */
    function (injector) {
        /** @type {?} */
        var backEndMessageHandler = injector.get(BACK_END_MESSAGE_HANDLER_TOKEN, null);
        return backEndMessageHandler && true || false;
    };
    /**
     * @param {?} messages
     * @return {?}
     */
    BackEndMessageUtil.getFormlessMessages = /**
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        /** @type {?} */
        var bizMessages = this.buildBackEndMessages(messages) || [];
        return bizMessages.filter((/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            return !message.location || !message.location.columns || message.location.columns.length < 1 || !message.location.nodeCode;
        }));
    };
    /**
     * @param {?} messages
     * @return {?}
     */
    BackEndMessageUtil.buildBackEndMessages = /**
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        if (!messages || messages.length < 1 || !Array.isArray(messages)) {
            return null;
        }
        /** @type {?} */
        var bizMessages = [];
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            /** @type {?} */
            var bizMessage = {
                level: message.level,
                message: message.message
            };
            if (message.hasOwnProperty('location') && message.location) {
                bizMessage.location = {
                    nodeCode: message.location.nodeCode,
                    rows: message.location.dataIds,
                    columns: message.location.columnNames
                };
            }
            bizMessages.push(bizMessage);
        }));
        return bizMessages;
    };
    return BackEndMessageUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BefSessionManager = /** @class */ (function () {
    function BefSessionManager() {
    }
    /**
     * @param {?} appContext
     * @param {?} sessionService
     * @return {?}
     */
    BefSessionManager.getSessionId = /**
     * @param {?} appContext
     * @param {?} sessionService
     * @return {?}
     */
    function (appContext, sessionService) {
        /** @type {?} */
        var appId = appContext.ApplicationId;
        /** @type {?} */
        var beBaseUri = sessionService.beBaseUri;
        /** @type {?} */
        var key = appId + "_" + beBaseUri;
        /** @type {?} */
        var createSessionIsInvoked = this.createSessionHistory.includes(key);
        if (createSessionIsInvoked) {
            return of(null);
        }
        else {
            this.createSessionHistory.push(key);
            return sessionService.getBeSessionId();
        }
    };
    BefSessionManager.createSessionHistory = [];
    BefSessionManager.decorators = [
        { type: Injectable }
    ];
    return BefSessionManager;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_extend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable: max-line-length tslint:disable: no-string-literal
var 
// tslint:disable: max-line-length tslint:disable: no-string-literal
BefProxyExtend = /** @class */ (function () {
    function BefProxyExtend(context) {
        this.context = context;
        /** @type {?} */
        var injector = this.context.getInjector();
        if (injector) {
            this.loadingService = injector.get(LoadingService, null);
        }
    }
    /**
     * 请求结果返回
     * @param response response
     * @param ignoreChanges 忽略变更
     */
    /**
     * 请求结果返回
     * @param {?} response response
     * @param {?=} ignoreChanges 忽略变更
     * @param {?=} options
     * @return {?}
     */
    BefProxyExtend.prototype.onResponse = /**
     * 请求结果返回
     * @param {?} response response
     * @param {?=} ignoreChanges 忽略变更
     * @param {?=} options
     * @return {?}
     */
    function (response, ignoreChanges, options) {
        if (response && response.innerDataChange && ignoreChanges !== true) {
            this.context.handleDataChangeDetails(response.innerDataChange);
        }
        if (response && response.innerVariableChange) {
            this.context.handleVariableChangeDetail(response.innerVariableChange);
        }
        /** @type {?} */
        var messages = ResponseInfoUtil.parseBackEndMessage(response);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        this.context.clearAllEntityChanges();
        /** @type {?} */
        var requestInfo = RequestInfoUtil.getRequestInfo(options);
        /** @type {?} */
        var variableChange = requestInfo && requestInfo.variableChange;
        this.context.clearAllVariableChanges(variableChange);
        if (response && response.hasOwnProperty('returnValue')) {
            return response.returnValue;
        }
        else {
            return response;
        }
    };
    /**
     * 发生错误
     * @param error error
     * @param selfHandError 自定义错误处理
     * @param ignoreError 忽略错误
     */
    /**
     * 发生错误
     * @param {?} error error
     * @param {?} selfHandError 自定义错误处理
     * @param {?} ignoreError 忽略错误
     * @return {?}
     */
    BefProxyExtend.prototype.onError = /**
     * 发生错误
     * @param {?} error error
     * @param {?} selfHandError 自定义错误处理
     * @param {?} ignoreError 忽略错误
     * @return {?}
     */
    function (error, selfHandError, ignoreError) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        var applicationId = formAppContext.ApplicationId;
        /** @type {?} */
        var loadingServices = window['DEVKIT_LOADING_SERVICE'];
        /** @type {?} */
        var messages = ResponseInfoUtil.parseBackEndError(error);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        if (this.loadingService) {
            window.setTimeout((/**
             * @return {?}
             */
            function () {
                _this.loadingService.clearAll();
            }), 350);
        }
        if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {
            try {
                for (var loadingServices_1 = __values(loadingServices), loadingServices_1_1 = loadingServices_1.next(); !loadingServices_1_1.done; loadingServices_1_1 = loadingServices_1.next()) {
                    var loadingService = loadingServices_1_1.value;
                    if (typeof (loadingService.destroy) === 'function') {
                        loadingService.destroy();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (loadingServices_1_1 && !loadingServices_1_1.done && (_a = loadingServices_1.return)) _a.call(loadingServices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            var eventBus = this.context.restService.eventBus;
            /** @type {?} */
            var applicationContext = window[applicationId] || {};
            /** @type {?} */
            var isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            var messages_1 = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            var bizMessages = BackEndMessageUtil.getFormlessMessages(messages_1);
            /** @type {?} */
            var isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            var needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.context.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            var willThrowException = !!eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages_1, this.context.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: eventBus, error: error, formAppContext: formAppContext });
            if (!!eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    };
    /**
     * 扩展http headers
     * @param headers headers
     */
    /**
     * 扩展http headers
     * @param {?} headers headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefProxyExtend.prototype.extendHeaders = /**
     * 扩展http headers
     * @param {?} headers headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        var _this = this;
        /** @type {?} */
        var formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        var $getSessionId = BefSessionManager.getSessionId(formAppContext, this.context.restService.sessionService);
        return $getSessionId.pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        function (sessionId) {
            headers = _this.context.restService.sessionService.extendRequestHeaders(headers, runtimeContext);
            return of(headers);
        })));
    };
    /**
     * 扩展请求参数
     * @param params 参数
     */
    /**
     * 扩展请求参数
     * @param {?} url
     * @param {?} params 参数
     * @return {?}
     */
    BefProxyExtend.prototype.extendUrl = /**
     * 扩展请求参数
     * @param {?} url
     * @param {?} params 参数
     * @return {?}
     */
    function (url, params) {
        if (!params) {
            return url;
        }
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                /** @type {?} */
                var value = JSON.stringify(params[key]);
                if (url.indexOf('?') === -1) {
                    url = url + "?" + key + "=" + value;
                }
                else {
                    url = url + "&" + key + "=" + value;
                }
            }
        }
        return url;
    };
    /**
     * 扩展请求体
     * @param body body
     */
    /**
     * 扩展请求体
     * @param {?} body body
     * @return {?}
     */
    BefProxyExtend.prototype.extendBody = /**
     * 扩展请求体
     * @param {?} body body
     * @return {?}
     */
    function (body) {
        var _this = this;
        if (!body || typeof body !== 'object' || Object.keys(body).length < 1) {
            return body;
        }
        Object.keys(body).forEach((/**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            if (name === 'requestInfo') {
                body['requestInfo'] = _this.context.restService.buildRequestInfo();
            }
        }));
        // 兼容J版后端body只有一个key时body只传value的情况
        if (Object.keys(body).length === 1) {
            body = Object.values(body)[0];
        }
        return body;
    };
    /**
     * @param {?} response
     * @return {?}
     */
    BefProxyExtend.prototype.parseHeaders = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        /** @type {?} */
        var sessionIdKey = 'BEFSessionID';
        if (response.headers && response.headers.has(sessionIdKey)) {
            this.context.restService.sessionService.setBeSessionId(response.headers.get(sessionIdKey));
        }
    };
    return BefProxyExtend;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BEF实体仓储
 * \@description
 * 负责与后端的业务实体框架交互，管理业务实体数据 \
 * apiUri示例如下：api/scm/sd/v1.0/empservice，前后均不带斜杠
 * @abstract
 * @template T
 */
var BefRepository = /** @class */ (function (_super) {
    __extends(BefRepository, _super);
    /**
     * @param injector 依赖注入器
     */
    function BefRepository(injector) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        if (_this.entityCollection) {
            // 初始化实体管理器
            _this.entityManager = new BefEntityManager(_this.entityCollection);
        }
        // 初始化变量管理器
        _this.appContext = _this.injector.get(AppContext);
        /** @type {?} */
        var ngVariables = MetadataUtil.getPropsMetadatasByName(_this.constructor, NG_VARIABLE);
        _this.variableManager = new BefVariableManager(_this.appContext, ngVariables, _this.injector);
        // 初始化DataService
        _this.dataService = new BefDataService(_this.injector, _this);
        _this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
        return _this;
    }
    Object.defineProperty(BefRepository.prototype, "proxy", {
        get: /**
         * @return {?}
         */
        function () {
            return this.befProxy;
        },
        /**
         * @member {BefProxy} proxy
         * @description 每一个BefRepository都需要一个Bef代理，用来处理http请求
         */
        set: /**
         * \@member {BefProxy} proxy
         * \@description 每一个BefRepository都需要一个Bef代理，用来处理http请求
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.befProxy = value;
            this.befProxy.setProxyExtend(new BefProxyExtend(this));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实体列表
     * @param filter 过滤条件
     * @param sort 排序条件
     * @param pageSize 分页大小
     * @param pageIndex 页码
     * @description
     * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）
     * ```json
     * [
     *   {
     *     "FilterField": "DomainID.DomainID_name",
     *     "Compare": 0,
     *     "Value": "人力资源部",
     *     "Relation": 1,
     *     "Expresstype": 0,
     *     "Lbracket": "(",
     *     "Rbracket": ")"
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 3,
     *     "Value": "2021-09-03",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 5,
     *     "Value": "2021-10-05",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }
     * ]
     * ```
     * 使用示例：
     * ```typescript
     * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析
     * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
     * ```
     */
    /**
     * 获取实体列表
     * \@description
     * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）
     * ```json
     * [
     *   {
     *     "FilterField": "DomainID.DomainID_name",
     *     "Compare": 0,
     *     "Value": "人力资源部",
     *     "Relation": 1,
     *     "Expresstype": 0,
     *     "Lbracket": "(",
     *     "Rbracket": ")"
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 3,
     *     "Value": "2021-09-03",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 5,
     *     "Value": "2021-10-05",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }
     * ]
     * ```
     * 使用示例：
     * ```typescript
     * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析
     * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
     * ```
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 页码
     * @return {?}
     */
    BefRepository.prototype.getEntities = /**
     * 获取实体列表
     * \@description
     * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）
     * ```json
     * [
     *   {
     *     "FilterField": "DomainID.DomainID_name",
     *     "Compare": 0,
     *     "Value": "人力资源部",
     *     "Relation": 1,
     *     "Expresstype": 0,
     *     "Lbracket": "(",
     *     "Rbracket": ")"
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 3,
     *     "Value": "2021-09-03",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 5,
     *     "Value": "2021-10-05",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }
     * ]
     * ```
     * 使用示例：
     * ```typescript
     * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析
     * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
     * ```
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 页码
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        return this.dataService.getList(filter, sort, pageSize, pageIndex);
    };
    /**
     * 获取实体列表
     * @param filter 过滤条件
     * @param sorts 排序条件
     * @param pageSize 分页大小
     * @param pageIndex 页码
     * @description
     * 与getEntities方法功能相近，用法相同 \
     * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上
     * @see {@link getEntities}
     */
    /**
     * 获取实体列表
     * \@description
     * 与getEntities方法功能相近，用法相同 \
     * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上
     * @see {\@link getEntities}
     * @param {?=} filter 过滤条件
     * @param {?=} sorts 排序条件
     * @param {?=} pageSize 分页大小
     * @param {?=} pageIndex 页码
     * @return {?}
     */
    BefRepository.prototype.filter = /**
     * 获取实体列表
     * \@description
     * 与getEntities方法功能相近，用法相同 \
     * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上
     * @see {\@link getEntities}
     * @param {?=} filter 过滤条件
     * @param {?=} sorts 排序条件
     * @param {?=} pageSize 分页大小
     * @param {?=} pageIndex 页码
     * @return {?}
     */
    function (filter, sorts, pageSize, pageIndex) {
        if (filter === void 0) { filter = []; }
        if (sorts === void 0) { sorts = []; }
        return this.dataService.filter(filter, sorts, pageSize, pageIndex);
    };
    // #endregion
    /**
     * 分页查询从表/从从表数据
     * @param paths 通用路径
     * @param pageIndex 页码
     * @param pageSize 分页大小
     * @param filter 过滤条件
     * @param sort 排序
     * @todo 目前并未应用排序和过滤条件
     * @description
     * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \
     * 通用路径的主键值前必须含有冒号，冒号之前的"id"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \
     * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \
     * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \
     * 使用示例：
     * ```typescript
     * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径
     * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
     * const paths = fullPaths.slice(0, fullPaths.length - 1);
     * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
     * const bindingData = this.viewModel.bindingData;
     * let nodeCode = bindingPaths[bindingPaths.length - 1];
     * nodeCode = nodeCode.substr(0, nodeCode.length - 1);
     * // 获取上级实体
     * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
     * const parentObject = bindingData.getValue(parentPaths) as BindingObject;
     * if (!parentObject) {
     *   throw new Error('上级实体不存在');
     * }
     * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;
     * // 获取绑定路径对应的分页信息
     * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);
     * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
     * ```
     */
    // #endregion
    /**
     * 分页查询从表/从从表数据
     * \@todo 目前并未应用排序和过滤条件
     * \@description
     * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \
     * 通用路径的主键值前必须含有冒号，冒号之前的"id"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \
     * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \
     * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \
     * 使用示例：
     * ```typescript
     * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径
     * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
     * const paths = fullPaths.slice(0, fullPaths.length - 1);
     * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
     * const bindingData = this.viewModel.bindingData;
     * let nodeCode = bindingPaths[bindingPaths.length - 1];
     * nodeCode = nodeCode.substr(0, nodeCode.length - 1);
     * // 获取上级实体
     * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
     * const parentObject = bindingData.getValue(parentPaths) as BindingObject;
     * if (!parentObject) {
     *   throw new Error('上级实体不存在');
     * }
     * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;
     * // 获取绑定路径对应的分页信息
     * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);
     * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
     * ```
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    BefRepository.prototype.queryChild = 
    // #endregion
    /**
     * 分页查询从表/从从表数据
     * \@todo 目前并未应用排序和过滤条件
     * \@description
     * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \
     * 通用路径的主键值前必须含有冒号，冒号之前的"id"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \
     * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \
     * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \
     * 使用示例：
     * ```typescript
     * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径
     * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
     * const paths = fullPaths.slice(0, fullPaths.length - 1);
     * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
     * const bindingData = this.viewModel.bindingData;
     * let nodeCode = bindingPaths[bindingPaths.length - 1];
     * nodeCode = nodeCode.substr(0, nodeCode.length - 1);
     * // 获取上级实体
     * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
     * const parentObject = bindingData.getValue(parentPaths) as BindingObject;
     * if (!parentObject) {
     *   throw new Error('上级实体不存在');
     * }
     * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;
     * // 获取绑定路径对应的分页信息
     * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);
     * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
     * ```
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    function (paths, pageIndex, pageSize, filter, sort) {
        return this.dataService.queryChild(paths, pageIndex, pageSize, filter, sort);
    };
    /**
    * 获取主键为id的实体
    * @param id 主表实体主键
    * @description
    * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \
    * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {@link updateEntityById} 方法
    */
    /**
     * 获取主键为id的实体
     * \@description
     * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \
     * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {\@link updateEntityById} 方法
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.getEntityById = /**
     * 获取主键为id的实体
     * \@description
     * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \
     * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {\@link updateEntityById} 方法
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.getById(id);
    };
    /**
     * 更新实体数据
     * @param id 主表实体主键
     * @description
     * 重新从服务器获取主表上对应主键的实体数据 \
     * 使用示例：
     * ```typescript
     * const rootDataId = this.bindingData.list.currentId;
     * return this.repository.updateEntityById(rootDataId);
     * ```
     */
    /**
     * 更新实体数据
     * \@description
     * 重新从服务器获取主表上对应主键的实体数据 \
     * 使用示例：
     * ```typescript
     * const rootDataId = this.bindingData.list.currentId;
     * return this.repository.updateEntityById(rootDataId);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.updateEntityById = /**
     * 更新实体数据
     * \@description
     * 重新从服务器获取主表上对应主键的实体数据 \
     * 使用示例：
     * ```typescript
     * const rootDataId = this.bindingData.list.currentId;
     * return this.repository.updateEntityById(rootDataId);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.updateById(id);
    };
    /**
     * 更新实体数据并加锁
     * @param id 主表实体主键
     * @description
     * 使用示例：
     * ```typescript
     * id = this.bindingData.list.currentId;  // 编辑当前行
     * const edit$ = this.repository.editEntityById(id);
     * ```
     */
    /**
     * 更新实体数据并加锁
     * \@description
     * 使用示例：
     * ```typescript
     * id = this.bindingData.list.currentId;  // 编辑当前行
     * const edit$ = this.repository.editEntityById(id);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.editEntityById = /**
     * 更新实体数据并加锁
     * \@description
     * 使用示例：
     * ```typescript
     * id = this.bindingData.list.currentId;  // 编辑当前行
     * const edit$ = this.repository.editEntityById(id);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.editById(id);
    };
    /**
     * 创建实体
     * @param defaultValue 默认值，JSON对象
     * @description
     * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \
     * 使用示例：
     * ```typescript
     * // 在创建新实体后进入编辑状态
     * const create$ = this.repository.createEntity();
     * create$.pipe(
     *   tap(() => {
     *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);
     *   })
     * );
     * ```
     */
    /**
     * 创建实体
     * \@description
     * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \
     * 使用示例：
     * ```typescript
     * // 在创建新实体后进入编辑状态
     * const create$ = this.repository.createEntity();
     * create$.pipe(
     *   tap(() => {
     *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);
     *   })
     * );
     * ```
     * @param {?=} defaultValue 默认值，JSON对象
     * @return {?}
     */
    BefRepository.prototype.createEntity = /**
     * 创建实体
     * \@description
     * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \
     * 使用示例：
     * ```typescript
     * // 在创建新实体后进入编辑状态
     * const create$ = this.repository.createEntity();
     * create$.pipe(
     *   tap(() => {
     *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);
     *   })
     * );
     * ```
     * @param {?=} defaultValue 默认值，JSON对象
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.create(defaultValue);
    };
    /**
     * 追加实体
     * @param defaultValue 默认值
     * @description 请求创建一个新的实体，并追加到实体仓库（适用于列表）
     */
    /**
     * 追加实体
     * \@description 请求创建一个新的实体，并追加到实体仓库（适用于列表）
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    BefRepository.prototype.appendEntity = /**
     * 追加实体
     * \@description 请求创建一个新的实体，并追加到实体仓库（适用于列表）
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.append(defaultValue);
    };
    /**
     * 创建并插入新实体（向主表插入）
     * @param position 插入位置
     * @param defaultValue 默认值
     * @description
     * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前
     */
    /**
     * 创建并插入新实体（向主表插入）
     * \@description
     * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前
     * @param {?} position 插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    BefRepository.prototype.insert = /**
     * 创建并插入新实体（向主表插入）
     * \@description
     * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前
     * @param {?} position 插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    function (position, defaultValue) {
        return this.dataService.insert(position, defaultValue);
    };
    /**
     * 创建子实体并插入到指定位置（向从表或从从表插入）
     * @param path 父路径
     * @param position 插入位置
     * @description
     * 关于父路径格式，从表形如："/1/edus"，从从表形如："/1/edus/12/grades" \
     * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \
     * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \
     * 插入位置参考 {@link insert} \
     * 使用示例：
     * ```typescript
     * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径
     * const append$ = this.repository.insertByPath(path, position);
     * ```
     */
    /**
     * 创建子实体并插入到指定位置（向从表或从从表插入）
     * \@description
     * 关于父路径格式，从表形如："/1/edus"，从从表形如："/1/edus/12/grades" \
     * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \
     * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \
     * 插入位置参考 {\@link insert} \
     * 使用示例：
     * ```typescript
     * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径
     * const append$ = this.repository.insertByPath(path, position);
     * ```
     * @param {?} path 父路径
     * @param {?} position 插入位置
     * @return {?}
     */
    BefRepository.prototype.insertByPath = /**
     * 创建子实体并插入到指定位置（向从表或从从表插入）
     * \@description
     * 关于父路径格式，从表形如："/1/edus"，从从表形如："/1/edus/12/grades" \
     * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \
     * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \
     * 插入位置参考 {\@link insert} \
     * 使用示例：
     * ```typescript
     * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径
     * const append$ = this.repository.insertByPath(path, position);
     * ```
     * @param {?} path 父路径
     * @param {?} position 插入位置
     * @return {?}
     */
    function (path, position) {
        return this.dataService.insertByPath(path, position);
    };
    /**
     * 创建子实体并追加到末尾
     * @param fpath 父路径
     * @description
     * 父路径格式参考 {@link insertByPath}
     */
    /**
     * 创建子实体并追加到末尾
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @return {?}
     */
    BefRepository.prototype.appendEntityByPath = /**
     * 创建子实体并追加到末尾
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @return {?}
     */
    function (fpath) {
        return this.dataService.appendByPath(fpath);
    };
    /**
     * 根据id删除实体
     * @param id 主表实体主键
     * @param ifSave 是否保存，可选，默认为true
     * @description
     * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存
     */
    /**
     * 根据id删除实体
     * \@description
     * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存
     * @param {?} id 主表实体主键
     * @param {?=} ifSave 是否保存，可选，默认为true
     * @return {?}
     */
    BefRepository.prototype.removeEntityById = /**
     * 根据id删除实体
     * \@description
     * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存
     * @param {?} id 主表实体主键
     * @param {?=} ifSave 是否保存，可选，默认为true
     * @return {?}
     */
    function (id, ifSave) {
        return this.dataService.removeById(id, ifSave);
    };
    /**
     * 根据id删除实体并执行保存
     * @param id 主表实体主键
     */
    /**
     * 根据id删除实体并执行保存
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.removeEntityAndSaveById = /**
     * 根据id删除实体并执行保存
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.removeAndSaveById(id);
    };
    /**
     * 根据id删除父路径下子表中的实体
     * @param fpath 父路径
     * @param id 实体主键
     * @description
     * 父路径格式参考 {@link insertByPath}
     */
    /**
     * 根据id删除父路径下子表中的实体
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @param {?} id 实体主键
     * @return {?}
     */
    BefRepository.prototype.removeEntityByPath = /**
     * 根据id删除父路径下子表中的实体
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @param {?} id 实体主键
     * @return {?}
     */
    function (fpath, id) {
        return this.dataService.removeByPath(fpath, id);
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存(默认为false)
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?=} ifSave 是否保存(默认为false)
     * @return {?}
     */
    BefRepository.prototype.batchRemove = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?=} ifSave 是否保存(默认为false)
     * @return {?}
     */
    function (ids, ifSave) {
        if (ifSave === void 0) { ifSave = false; }
        return this.dataService.batchRemove(ids, ifSave);
    };
    /**
     * 批量删除子级实体
     * @param fPath 父路径
     * @param ids 子级id集合
     * @description
     * ids中各个id之间以逗号分隔，父路径格式参考 {@link insertByPath} \
     * 使用示例：
     * ```typescript
     * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量
     * const remove$ = this.repository.batchRemoveByPath(path, ids);
     * ```
     */
    /**
     * 批量删除子级实体
     * \@description
     * ids中各个id之间以逗号分隔，父路径格式参考 {\@link insertByPath} \
     * 使用示例：
     * ```typescript
     * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量
     * const remove$ = this.repository.batchRemoveByPath(path, ids);
     * ```
     * @param {?} fPath 父路径
     * @param {?} ids 子级id集合
     * @return {?}
     */
    BefRepository.prototype.batchRemoveByPath = /**
     * 批量删除子级实体
     * \@description
     * ids中各个id之间以逗号分隔，父路径格式参考 {\@link insertByPath} \
     * 使用示例：
     * ```typescript
     * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量
     * const remove$ = this.repository.batchRemoveByPath(path, ids);
     * ```
     * @param {?} fPath 父路径
     * @param {?} ids 子级id集合
     * @return {?}
     */
    function (fPath, ids) {
        return this.dataService.batchRemoveByPath(fPath, ids);
    };
    /**
     * 保存主键为id的实体
     * @param id 主表实体主键
     * @description
     * 调用该方法会应用id对应实体上的变更 \
     * ```typescript
     * const id = this.bindingData.list.currentId as string;
     * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用
     * ```
     */
    /**
     * 保存主键为id的实体
     * \@description
     * 调用该方法会应用id对应实体上的变更 \
     * ```typescript
     * const id = this.bindingData.list.currentId as string;
     * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.saveEntityById = /**
     * 保存主键为id的实体
     * \@description
     * 调用该方法会应用id对应实体上的变更 \
     * ```typescript
     * const id = this.bindingData.list.currentId as string;
     * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.applyChangesById(id);
    };
    /**
     * 批量保存
     * @description
     * 应用所有变更，比如调用了 {@link removeEntityById} 且未保存则可以通过此方法保存 \
     * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存
     */
    /**
     * 批量保存
     * \@description
     * 应用所有变更，比如调用了 {\@link removeEntityById} 且未保存则可以通过此方法保存 \
     * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存
     * @return {?}
     */
    BefRepository.prototype.saveEntities = /**
     * 批量保存
     * \@description
     * 应用所有变更，比如调用了 {\@link removeEntityById} 且未保存则可以通过此方法保存 \
     * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存
     * @return {?}
     */
    function () {
        return this.dataService.applyChanges();
    };
    /**
     * 取消实体变更
     * @description 清空所有实体变更，不希望保存变更时调用此方法
     */
    /**
     * 取消实体变更
     * \@description 清空所有实体变更，不希望保存变更时调用此方法
     * @return {?}
     */
    BefRepository.prototype.cancelEntityChanges = /**
     * 取消实体变更
     * \@description 清空所有实体变更，不希望保存变更时调用此方法
     * @return {?}
     */
    function () {
        return this.dataService.cancelChanges();
    };
    /**
     * 批量新增从表/从从表数据
     * @param path 父路径，参考 {@link insertByPath}
     * @param defaultValues 默认实体数据数组
     * @description
     * 后端接口只支持批量新增子表，批量新增主表目前不支持
     */
    /**
     * 批量新增从表/从从表数据
     * \@description
     * 后端接口只支持批量新增子表，批量新增主表目前不支持
     * @param {?} path 父路径，参考 {\@link insertByPath}
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefRepository.prototype.batchAppendByPath = /**
     * 批量新增从表/从从表数据
     * \@description
     * 后端接口只支持批量新增子表，批量新增主表目前不支持
     * @param {?} path 父路径，参考 {\@link insertByPath}
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (path, defaultValues) {
        return this.dataService.batchAppendByPath(path, defaultValues);
    };
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefRepository.prototype.batchAppend = /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (defaultValues) {
        return this.dataService.batchAppend(defaultValues);
    };
    /**
     * 清空Repositoy内的数据和变量
     * @description 清空所有实体、变量，并清空BeSessionId
     */
    /**
     * 清空Repositoy内的数据和变量
     * \@description 清空所有实体、变量，并清空BeSessionId
     * @return {?}
     */
    BefRepository.prototype.reset = /**
     * 清空Repositoy内的数据和变量
     * \@description 清空所有实体、变量，并清空BeSessionId
     * @return {?}
     */
    function () {
        this.entityManager.reset();
        this.variableManager.reset();
        this.restService.sessionService.clearBeSessionId();
    };
    /**
     * 获取Injector（外部请勿使用）
     * @internal
     */
    /**
     * 获取Injector（外部请勿使用）
     * \@internal
     * @return {?}
     */
    BefRepository.prototype.getInjector = /**
     * 获取Injector（外部请勿使用）
     * \@internal
     * @return {?}
     */
    function () {
        return this.injector;
    };
    /**
     * 清空vo变量变更
     */
    /**
     * 清空vo变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefRepository.prototype.clearAllVariableChanges = /**
     * 清空vo变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        this.variableManager.clearChangeDetail(changeDetail);
    };
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @returns
     */
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @return {?}
     */
    BefRepository.prototype.hasChanges = /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @return {?}
     */
    function () {
        return this.dataService.hasChanges();
    };
    BefRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefRepository.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return BefRepository;
}(DeprecatedBefRepository));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/uri_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UriService = /** @class */ (function () {
    function UriService(serverUri) {
        this.serverUri = serverUri;
    }
    /**
     * 扩展eapi基路径
     * @param apiUri eapi基路径
     */
    /**
     * 扩展eapi基路径
     * @param {?} apiUri eapi基路径
     * @return {?}
     */
    UriService.prototype.extendUri = /**
     * 扩展eapi基路径
     * @param {?} apiUri eapi基路径
     * @return {?}
     */
    function (apiUri) {
        return this.serverUri + "/" + apiUri;
    };
    UriService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UriService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [BE_SERVER_URI_TOKEN,] }] }
    ]; };
    return UriService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var GET = 'GET';
/** @type {?} */
var DELETE = 'DELETE';
/** @type {?} */
var PUT = 'PUT';
/** @type {?} */
var POST = 'POST';
/** @type {?} */
var PATCH = 'PATCH';
/**
 * Bef代理类
 * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter
 * uri 由uriService
 */
var BefProxy = /** @class */ (function () {
    function BefProxy(httpClient, uriService) {
        this.httpClient = httpClient;
        this.uriService = uriService;
        this.httpService = new HttpService(this.httpClient);
    }
    /**
     * 设置基路径
     * @param baseUri 基路径
     */
    /**
     * 设置基路径
     * @param {?} baseUri 基路径
     * @return {?}
     */
    BefProxy.prototype.setBaseUri = /**
     * 设置基路径
     * @param {?} baseUri 基路径
     * @return {?}
     */
    function (baseUri) {
        this.baseUri = baseUri;
    };
    /**
     * 设置策略模式
     * @param strategy 策略
     */
    /**
     * 设置策略模式
     * @param {?} proxyExtend
     * @return {?}
     */
    BefProxy.prototype.setProxyExtend = /**
     * 设置策略模式
     * @param {?} proxyExtend
     * @return {?}
     */
    function (proxyExtend) {
        this.proxyExtend = proxyExtend;
    };
    /**
     * 查询
     */
    /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    BefProxy.prototype.query = /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        /** @type {?} */
        var url = this.baseUri;
        if (entityFilter) {
            /** @type {?} */
            var entityFilterJson = JSON.stringify(entityFilter);
            url = url + "?entityFilter=" + entityFilterJson;
        }
        return this.request(url, GET);
    };
    /**
     * 扩展查询
     */
    /**
     * 扩展查询
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendQuery = /**
     * 扩展查询
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    function (entityFilter, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/query";
        if (entityFilter) {
            /** @type {?} */
            var entityFilterJson = JSON.stringify(entityFilter);
            entityFilterJson = encodeUrl(entityFilterJson);
            url = url + "?entityFilter=" + entityFilterJson;
        }
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options, false);
    };
    /**
     * 查询数据（带过滤条件）
     * @param entityFilter 过滤、排序、分页信息
     * @param requestInfo requestInfo
     * @description 和extendQuery一致，仅将查询参数放到body中
     */
    /**
     * 查询数据（带过滤条件）
     * \@description 和extendQuery一致，仅将查询参数放到body中
     * @param {?} entityFilter 过滤、排序、分页信息
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    BefProxy.prototype.filter = /**
     * 查询数据（带过滤条件）
     * \@description 和extendQuery一致，仅将查询参数放到body中
     * @param {?} entityFilter 过滤、排序、分页信息
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (entityFilter, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/filter";
        /** @type {?} */
        var body = { requestInfo: requestInfo };
        if (entityFilter) {
            body = { entityFilter: entityFilter, requestInfo: requestInfo };
        }
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options, false);
    };
    /**
     * 检索数据
     * @param id 单据内码
     * @return 数据对象
     */
    /**
     * 检索数据
     * @param {?} id 单据内码
     * @return {?} 数据对象
     */
    BefProxy.prototype.retrieve = /**
     * 检索数据
     * @param {?} id 单据内码
     * @return {?} 数据对象
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUri + "/" + id;
        return this.request(url, GET);
    };
    /**
     * @deprecated 方法已经废弃，请勿使用
     */
    /**
     * @deprecated 方法已经废弃，请勿使用
     * @param {?} id
     * @param {?} retrieveParam
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.serviceRetrieve = /**
     * @deprecated 方法已经废弃，请勿使用
     * @param {?} id
     * @param {?} retrieveParam
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, retrieveParam, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/service/retrieve/" + id;
        /** @type {?} */
        var options = {
            body: { retrieveParam: retrieveParam, requestInfo: requestInfo }
        };
        return this.request(url, PUT, null, options);
    };
    /**
     * 分页查询从表/从从表数据
     * @param params 参数
     */
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 参数
     * @return {?}
     */
    BefProxy.prototype.queryChild = /**
     * 分页查询从表/从从表数据
     * @param {?} params 参数
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var url = this.baseUri + "/service/querychild";
        /** @type {?} */
        var options = { body: params };
        return this.request(url, PUT, null, options);
    };
    /**
     * 检索数据（扩展）
     */
    /**
     * 检索数据（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    BefProxy.prototype.extendRetrieve = /**
     * 检索数据（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    function (id, requestInfo, retrieveParam) {
        /** @type {?} */
        var url = this.baseUri + "/extension/retrieve/" + id;
        /** @type {?} */
        var body = requestInfo;
        if (retrieveParam) {
            body = { retrieveParam: retrieveParam, requestInfo: requestInfo };
        }
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 检索数据
     */
    /**
     * 检索数据
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.edit = /**
     * 检索数据
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/service/edit/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 创建一条数据
     */
    /**
     * 创建一条数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.create = /**
     * 创建一条数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    function (defaultValue, requestInfo) {
        /** @type {?} */
        var body = {
            defaultValue: defaultValue,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, POST, null, options);
    };
    /**
     * 从表新增
     * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 从表新增
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.createByPath = /**
     * 从表新增
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    function (fpath, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUri + pathUrl;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    };
    /**
     * 提交变更
     */
    /**
     * 提交变更
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.update = /**
     * 提交变更
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    function (changeDetail, requestInfo) {
        /** @type {?} */
        var body = {
            changeDetail: changeDetail,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PATCH, null, options);
    };
    /**
     * 执行保存
     */
    /**
     * 执行保存
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.save = /**
     * 执行保存
     * @param {?=} requestInfo
     * @return {?}
     */
    function (requestInfo) {
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PUT, null, options);
    };
    /**
     * 删除
     */
    /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.delete = /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUri + "/" + id;
        return this.request(url, DELETE);
    };
    /**
     * 删除并保存
     */
    /**
     * 删除并保存
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.deleteAndSave = /**
     * 删除并保存
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/service/delete/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 删除（扩展）
     */
    /**
     * 删除（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendDelete = /**
     * 删除（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/delete/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 删除后代
     * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 删除后代
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.deletByPath = /**
     * 删除后代
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUri + pathUrl + "/" + id;
        return this.request(url, DELETE);
    };
    /**
     * 删除后代（扩展）
     * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 删除后代（扩展）
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendDeletByPath = /**
     * 删除后代（扩展）
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (fpath, id, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = this.baseUri + "/extension" + pathUrl + "/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 批量删除后代
     * @param fPath 'extension/{rootId}/cc/batch'
     * @param  ids 子集id
     * @param  requestInfo 请求信息
     */
    /**
     * 批量删除后代
     * @param {?} fPath 'extension/{rootId}/cc/batch'
     * @param {?} ids 子集id
     * @param {?} requestInfo 请求信息
     * @return {?}
     */
    BefProxy.prototype.batchDeleteByPath = /**
     * 批量删除后代
     * @param {?} fPath 'extension/{rootId}/cc/batch'
     * @param {?} ids 子集id
     * @param {?} requestInfo 请求信息
     * @return {?}
     */
    function (fPath, ids, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fPath);
        /** @type {?} */
        var pathArray = pathUrl.split('/');
        if (pathArray.length < 3) {
            throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fPath + "]\u683C\u5F0F\u4E0D\u5BF9");
        }
        /*   const rootId = pathArray[1];
        
            const nameArray = [];
            pathArray.forEach((name, index) => {
              if (index > 1 ) {
                if (name.indexOf('s') !== -1) {
                  nameArray.push(name.substr(0, name.length - 1));
                } else {
                  nameArray.push(name);
                }
              }
            });
            const childName = nameArray.join('/');*/
        /** @type {?} */
        var url = this.baseUri + "/extension" + pathUrl + "/batch";
        /** @type {?} */
        var idsArray = ids.split(',');
        /** @type {?} */
        var body = {
            ids: idsArray,
            requestInfo: requestInfo
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 批量删除
     * @param ids 待删除的id数组
     */
    /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    BefProxy.prototype.batchDelete = /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        return this.request(this.baseUri, DELETE, params);
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendBatchDeletion = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/batchdeletion";
        /** @type {?} */
        var body = {
            ids: ids,
            requestInfo: requestInfo
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 批量删除（扩展）
     */
    /**
     * 批量删除（扩展）
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendBatchDelete = /**
     * 批量删除（扩展）
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/batchdelete";
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, params, options);
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @param {?=} context
     * @return {?}
     */
    BefProxy.prototype.cancel = /**
     * 取消
     * @param {?=} context
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = this.baseUri + "/service/cancel";
        return this.request(url, POST, null, null, false, false, false, context);
    };
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.batchAppendByPath = /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    function (path, defaultValues, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(path);
        /** @type {?} */
        var url = "" + this.baseUri + pathUrl + "/batch";
        /** @type {?} */
        var body = {
            requestInfo: requestInfo,
            retrieveDefaultParam: {
                defaultValues: defaultValues
            }
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    };
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.batchAppend = /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    function (defaultValues, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/batch";
        /** @type {?} */
        var body = {
            requestInfo: requestInfo,
            retrieveDefaultParam: {
                defaultValues: defaultValues
            }
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    };
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param requestInfo requestInfo
     * @returns
     */
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    BefProxy.prototype.hasChanges = /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/haschanges";
        /** @type {?} */
        var body = __assign({}, requestInfo);
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    // tslint:disable-next-line: max-line-length
    // tslint:disable-next-line: max-line-length
    /**
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefProxy.prototype.request = 
    // tslint:disable-next-line: max-line-length
    /**
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges, runtimeContext) {
        var _this = this;
        options = options || {};
        // 是否自行处理错误
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 处理headers
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 1、判断是否带requestInfo（不区分首字母大小写）;
        // 2、如果传递的是RequestInfo，则转换为requestInfo；
        /** @type {?} */
        var hasRequestInfo = this.hasRequestInfo(options);
        if (options && options.body && options.body.hasOwnProperty('RequestInfo')) {
            options.body.requestInfo = options.body.RequestInfo;
            delete options.body.RequestInfo;
        }
        return this.proxyExtend.extendHeaders(options.headers, runtimeContext).pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return _this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.proxyExtend.parseHeaders(response); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result.body; })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (hasRequestInfo) {
                _this.proxyExtend.onResponse(result, ignoreChanges, options);
                return result;
            }
            else {
                // body里没有requestInfo的情况，模拟老的处理方式（不清理变更、将returnValue解析出来）
                return _this.unWrapResponseInfo(result);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return _this.proxyExtend.onError(error, selfHandError, ignoreError);
        })));
    };
    /**
     * 调用httpclient取数
     * @param url url
     * @param method methods
     * @param options options
     */
    /**
     * 调用httpclient取数
     * @protected
     * @param {?} url url
     * @param {?} method methods
     * @param {?} options options
     * @return {?}
     */
    BefProxy.prototype.invoke = /**
     * 调用httpclient取数
     * @protected
     * @param {?} url url
     * @param {?} method methods
     * @param {?} options options
     * @return {?}
     */
    function (url, method, options) {
        var _this = this;
        if (options.params) {
            url = this.proxyExtend.extendUrl(url, options.params);
            options.params = null;
        }
        if (options.body) {
            options.body = this.proxyExtend.extendBody(options.body);
        }
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        /** @type {?} */
        var headers$ = this.proxyExtend.extendHeaders(options.headers);
        return headers$.pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return _this.httpService.request(method, url, options)
                .pipe(tap((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.proxyExtend.parseHeaders(response); })), map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return result.body; })), map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return _this.proxyExtend.onResponse(result, false, options); })), catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.proxyExtend.onError(error, false, false); })));
        })));
    };
    /**
     * 向HttpOptions对象中添加body
     * @param options 原来的options
     * @param body body内容
     */
    /**
     * 向HttpOptions对象中添加body
     * @private
     * @param {?} options 原来的options
     * @param {?} body body内容
     * @return {?}
     */
    BefProxy.prototype.addBodyToOptions = /**
     * 向HttpOptions对象中添加body
     * @private
     * @param {?} options 原来的options
     * @param {?} body body内容
     * @return {?}
     */
    function (options, body) {
        options = options || {};
        /** @type {?} */
        var mergedOptions = Object.assign(options, { body: body });
        return mergedOptions;
    };
    /**
     * 构造HttpParams对象
     * @param params 请求参数
     */
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    BefProxy.prototype.buildParams = /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    function (params) {
        return HttpParamUtil.buildParams(params);
    };
    /**
     * 是否带有RequestInfo
     */
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    BefProxy.prototype.hasRequestInfo = /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return RequestInfoUtil.hasRequestInfo(options) || RequestInfoUtil.hasRequestInfoWithR(options);
    };
    /**
     * 处理返回值，兼容老版本
     */
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    BefProxy.prototype.unWrapResponseInfo = /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    };
    BefProxy.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefProxy.ctorParameters = function () { return [
        { type: HttpClient },
        { type: UriService }
    ]; };
    return BefProxy;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_rest_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BEF取数服务
 * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。
 */
var BefRestService = /** @class */ (function () {
    /**
     * 构造函数
     * @param httpClient http服务
     * @param serverUri 应用服务器地址
     * @param beUri BE API地址
     */
    function BefRestService(httpClient, baseUri, frmSessionService, repository, eventBus) {
        this.httpClient = httpClient;
        this.httpService = new HttpService(this.httpClient);
        this.baseUri = baseUri;
        /** @type {?} */
        var injector = repository.getInjector();
        this.sessionService = new BefSessionService(httpClient, baseUri, frmSessionService, injector);
        this.repository = repository;
        this.eventBus = eventBus;
        if (injector) {
            this.loadingService = injector.get(LoadingService, null);
        }
    }
    Object.defineProperty(BefRestService.prototype, "proxy", {
        // #region 代理相关
        /**
         * 获取Bef代理
         */
        get: 
        // #region 代理相关
        /**
         * 获取Bef代理
         * @return {?}
         */
        function () {
            if (!!this.repository.proxy) {
                return this.repository.proxy;
            }
            else {
                return this.createBefProxy();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 创建Bef代理
     */
    /**
     * 创建Bef代理
     * @private
     * @return {?}
     */
    BefRestService.prototype.createBefProxy = /**
     * 创建Bef代理
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var serverUri = this.repository.serverUri;
        /** @type {?} */
        var uriService = new UriService(serverUri);
        /** @type {?} */
        var defaultProxy = new BefProxy(this.httpClient, uriService);
        defaultProxy.setBaseUri(this.baseUri);
        /** @type {?} */
        var extend = new BefProxyExtend(this.repository);
        defaultProxy.setProxyExtend(extend);
        return defaultProxy;
    };
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} entityFilter
     * @return {?}
     */
    BefRestService.prototype.query = 
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        return this.proxy.query(entityFilter);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendQuery = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    function (entityFilter, requestInfo) {
        return this.proxy.extendQuery(entityFilter, requestInfo);
    };
    /**
     * 分页查询各从表数据
     * @param id 主表id
     * @param retrieveParam 参数
     */
    /**
     * 分页查询各从表数据
     * @param {?} id 主表id
     * @param {?} retrieveParam 参数
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.serviceRetrieve = /**
     * 分页查询各从表数据
     * @param {?} id 主表id
     * @param {?} retrieveParam 参数
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, retrieveParam, requestInfo) {
        return this.proxy.serviceRetrieve(id, retrieveParam, requestInfo);
    };
    /**
     * 分页查询从表/从从表数据
     * @param params 查询参数
     */
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 查询参数
     * @return {?}
     */
    BefRestService.prototype.queryChild = /**
     * 分页查询从表/从从表数据
     * @param {?} params 查询参数
     * @return {?}
     */
    function (params) {
        return this.proxy.queryChild(params);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    BefRestService.prototype.retrieve = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.proxy.retrieve(id);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    BefRestService.prototype.extendRetrieve = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    function (id, requestInfo, retrieveParam) {
        return this.proxy.extendRetrieve(id, requestInfo, retrieveParam);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.create = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    function (defaultValue, requestInfo) {
        return this.proxy.create(defaultValue, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.createByPath = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    function (fpath, requestInfo) {
        return this.proxy.createByPath(fpath, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.update = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    function (changeDetail, requestInfo) {
        return this.proxy.update(changeDetail, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.save = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} requestInfo
     * @return {?}
     */
    function (requestInfo) {
        return this.proxy.save(requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    BefRestService.prototype.delete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.proxy.delete(id);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendDelete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        return this.proxy.extendDelete(id, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    BefRestService.prototype.deletByPath = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        return this.proxy.deletByPath(fpath, id);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendDeletByPath = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (fpath, id, requestInfo) {
        return this.proxy.extendDeletByPath(fpath, id, requestInfo);
    };
    /**
     * @param {?} fPath
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.batchDeleteByPath = /**
     * @param {?} fPath
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (fPath, ids, requestInfo) {
        return this.proxy.batchDeleteByPath(fPath, ids, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @return {?}
     */
    BefRestService.prototype.batchDelete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.proxy.batchDelete(ids);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendBatchDelete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        return this.proxy.extendBatchDelete(ids, requestInfo);
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param requestInfo requestInfo
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendBatchDeletion = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        return this.proxy.extendBatchDeletion(ids, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} options
     * @return {?}
     */
    BefRestService.prototype.cancel = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.proxy.cancel(options);
    };
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param requestInfo requestInfo
     * @returns
     */
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    BefRestService.prototype.hasChanges = /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (requestInfo) {
        return this.proxy.hasChanges(requestInfo);
    };
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @return {?}
     */
    BefRestService.prototype.request = 
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, false);
    };
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param url url
     * @param method method
     * @param params params
     * @param options options
     * @param selfHandError 自己处理异常
     * @param ignoreError 忽略错误
     * @param ignoreChanges 忽略变更
     */
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param {?} url url
     * @param {?} method method
     * @param {?=} params params
     * @param {?=} options options
     * @param {?=} selfHandError 自己处理异常
     * @param {?=} ignoreError 忽略错误
     * @param {?=} ignoreChanges 忽略变更
     * @return {?}
     */
    BefRestService.prototype.invoke = 
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param {?} url url
     * @param {?} method method
     * @param {?=} params params
     * @param {?=} options options
     * @param {?=} selfHandError 自己处理异常
     * @param {?=} ignoreError 忽略错误
     * @param {?=} ignoreChanges 忽略变更
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        if (options && options.body && options.body.RequestInfo) {
            throw new Error('请使用requestInfo提交变更');
        }
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, true);
    };
    /**
     * 内部的request方法
     */
    /**
     * 内部的request方法
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} useCorrectRequestInfoCheckMethod
     * @return {?}
     */
    BefRestService.prototype.innerRequest = /**
     * 内部的request方法
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} useCorrectRequestInfoCheckMethod
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges, useCorrectRequestInfoCheckMethod) {
        var _this = this;
        options = options || {};
        /** @type {?} */
        var befSessionIdKey = 'BEFSessionID';
        // 是否自己处理异常
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // 选择检查RequestInfo的方法
        if (typeof (useCorrectRequestInfoCheckMethod) === 'undefined' || typeof (useCorrectRequestInfoCheckMethod) !== 'boolean') {
            useCorrectRequestInfoCheckMethod = false;
        }
        /** @type {?} */
        var checkRequestInfoMethod = useCorrectRequestInfoCheckMethod ? this.existRequestInfo : this.hasRequestInfo;
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 带有requestInfo的请求，请求成功后清空变更集
        /** @type {?} */
        var hasRequestInfo = checkRequestInfoMethod(options);
        /** @type {?} */
        var headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 串联session流和http流
        /** @type {?} */
        var formAppContext = this.repository.appContext.getFormAppContext();
        return BefSessionManager.getSessionId(formAppContext, this.sessionService).pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        function (sessionId) {
            headers = _this.sessionService.extendRequestHeaders(headers);
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return _this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response.headers && response.headers.has(befSessionIdKey)) {
                _this.sessionService.setBeSessionId(response.headers.get(befSessionIdKey));
            }
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response.body; })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var messages = ResponseInfoUtil.parseBackEndMessage(result);
            BackEndMessageUtil.handleMessage(messages, _this.repository.getInjector());
            return _this.handleReponseInfo(result, hasRequestInfo, ignoreChanges, options);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return _this.handleErrors(error, selfHandError, ignoreError);
        })));
    };
    /**
     * 处理返回结果
     */
    /**
     * 处理返回结果
     * @param {?} result
     * @param {?} hasRequestInfo
     * @param {?} ignoreChanges
     * @param {?} options
     * @return {?}
     */
    BefRestService.prototype.handleReponseInfo = /**
     * 处理返回结果
     * @param {?} result
     * @param {?} hasRequestInfo
     * @param {?} ignoreChanges
     * @param {?} options
     * @return {?}
     */
    function (result, hasRequestInfo, ignoreChanges, options) {
        if (hasRequestInfo) {
            // 如果有带有RequestInfo，则按新结构处理
            // 1、应用服务器端返回的变更；
            // 2、清空本地变更集；
            // 3、返回新结构
            if (result && result.innerDataChange && ignoreChanges !== true) {
                this.repository.handleDataChangeDetails(result.innerDataChange);
            }
            if (result && result.innerVariableChange) {
                this.repository.handleVariableChangeDetail(result.innerVariableChange);
            }
            this.repository.clearAllEntityChanges();
            /** @type {?} */
            var requestInfo = RequestInfoUtil.getRequestInfo(options);
            /** @type {?} */
            var variableChange = requestInfo && requestInfo.variableChange;
            this.repository.clearAllVariableChanges(variableChange);
            return result;
        }
        else {
            // 如果有没有RequestInfo，则按老的方式处理
            // 1、不处理服务器端返回的变更：跟老的行为一样；
            // 2、不清理本地变更：因为变更没有提交；
            // 3、返回老的结构：兼容老的代码
            return this.unWrapResponseInfo(result);
        }
    };
    /**
     * 错误处理
     */
    /**
     * 错误处理
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    BefRestService.prototype.handleErrors = /**
     * 错误处理
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    function (error, selfHandError, ignoreError) {
        this.clearLoading();
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            var formAppContext = this.repository.appContext.getFormAppContext();
            /** @type {?} */
            var applicationId = formAppContext.ApplicationId;
            /** @type {?} */
            var applicationContext = window[applicationId] || {};
            /** @type {?} */
            var messages = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            var bizMessages = BackEndMessageUtil.getFormlessMessages(messages);
            /** @type {?} */
            var isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            var isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            var needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.repository.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            var willThrowException = !!this.eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages, this.repository.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: this.eventBus, error: error, formAppContext: formAppContext });
            if (!!this.eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    this.eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    };
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     */
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     * @private
     * @return {?}
     */
    BefRestService.prototype.clearLoading = 
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var ifLoadingExists = window['DEVKIT_LOADING_SERVICE'] &&
            window['DEVKIT_LOADING_SERVICE'] instanceof Array &&
            window['DEVKIT_LOADING_SERVICE'].length > 0 || false;
        if (ifLoadingExists === false) {
            this.clearAllLoading();
            return;
        }
        /** @type {?} */
        var loadingServices = window['DEVKIT_LOADING_SERVICE'];
        try {
            for (var loadingServices_1 = __values(loadingServices), loadingServices_1_1 = loadingServices_1.next(); !loadingServices_1_1.done; loadingServices_1_1 = loadingServices_1.next()) {
                var service = loadingServices_1_1.value;
                if (typeof (service.destroy) === 'function') {
                    service.destroy();
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (loadingServices_1_1 && !loadingServices_1_1.done && (_a = loadingServices_1.return)) _a.call(loadingServices_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.clearAllLoading();
    };
    /**
     * @private
     * @return {?}
     */
    BefRestService.prototype.clearAllLoading = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.loadingService) {
            window.setTimeout((/**
             * @return {?}
             */
            function () {
                _this.loadingService.clearAll();
            }), 350);
        }
    };
    /**
     * 处理返回值，兼容老版本
     */
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    BefRestService.prototype.unWrapResponseInfo = /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    };
    /**
     * 是否带有RequestInfo
     */
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    BefRestService.prototype.hasRequestInfo = /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return RequestInfoUtil.hasRequestInfoWithR(options);
    };
    /**
     * 是否带有requestInfo
     */
    /**
     * 是否带有requestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    BefRestService.prototype.existRequestInfo = /**
     * 是否带有requestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return RequestInfoUtil.hasRequestInfo(options);
    };
    /**
     * 构造HttpParams对象
     * @param params 请求参数
     */
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    BefRestService.prototype.buildParams = /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    function (params) {
        return HttpParamUtil.buildParams(params);
    };
    /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * @body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     */
    /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * \@body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     * @param {?} body
     * @return {?}
     */
    BefRestService.prototype.buildBodyWithRequestInfo = /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * \@body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return RequestInfoUtil.buildBodyWithRequestInfo(body, this.repository);
    };
    /**
     * 构造RequestInfo
     */
    /**
     * 构造RequestInfo
     * @return {?}
     */
    BefRestService.prototype.buildRequestInfo = /**
     * 构造RequestInfo
     * @return {?}
     */
    function () {
        return RequestInfoUtil.buildRequestInfo(this.repository);
    };
    BefRestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefRestService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String },
        { type: FrameworkSessionService },
        { type: BefRepository },
        { type: EventBus }
    ]; };
    return BefRestService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_lookup.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助Rest取数服务
 */
var BefLookupRestService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefLookupRestService(repository, frameContext) {
        this.frameContext = frameContext;
        this.befRepository = (/** @type {?} */ (repository));
        this.registerDestroyEvent();
        this.loadingService = this.frameContext && this.frameContext.injector.get(LoadingService, null);
    }
    /**
     * @private
     * @return {?}
     */
    BefLookupRestService.prototype.registerDestroyEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.frameContext && this.frameContext.destorySignal) {
            this.frameContext.destorySignal.subscribe((/**
             * @return {?}
             */
            function () {
                _this.frameContext = null;
                _this.befRepository = null;
            }));
        }
    };
    /**
     * @param {?} helpMetadataId
     * @param {?=} data
     * @return {?}
     */
    BefLookupRestService.prototype.getData = /**
     * @param {?} helpMetadataId
     * @param {?=} data
     * @return {?}
     */
    function (helpMetadataId, data) {
        /** @type {?} */
        var tableName = helpMetadataId.split('.')[0];
        /** @type {?} */
        var labelId = helpMetadataId.split('.')[1];
        data = data || {};
        if (this.frameContext) {
            /** @type {?} */
            var primaryValue = this.frameContext.bindingData.list.currentId;
            data['currentForm'] = {
                id: primaryValue
            };
        }
        /** @type {?} */
        var enableExtendLoadMethod = this.ifEnableExtendLoadMethod(helpMetadataId);
        if (enableExtendLoadMethod === true) {
            return this.extendGetHelpData(labelId, tableName, data);
        }
        return this.getHelpData(labelId, tableName, data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BefLookupRestService.prototype.saveUserSettings = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/bcc/v1.0/datagrid/settings';
        return this.befRepository.restService.invoke(url, 'POST', null, { body: data }, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.clearLoading();
            /** @type {?} */
            var formAppContext = _this.befRepository.appContext.getFormAppContext();
            _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    BefLookupRestService.prototype.getUserSettings = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/bcc/v1.0/datagrid/settings/' + key;
        return this.befRepository.restService.invoke(url, 'GET', null, null, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.clearLoading();
            /** @type {?} */
            var formAppContext = _this.befRepository.appContext.getFormAppContext();
            _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    };
    /**
     * 是否启用扩展取数方法
     */
    /**
     * 是否启用扩展取数方法
     * @private
     * @param {?} helpMetadataId
     * @return {?}
     */
    BefLookupRestService.prototype.ifEnableExtendLoadMethod = /**
     * 是否启用扩展取数方法
     * @private
     * @param {?} helpMetadataId
     * @return {?}
     */
    function (helpMetadataId) {
        // 优先使用context里的设置
        if (this.context && this.context.hasOwnProperty('enableExtendLoadMethod')) {
            return this.context.enableExtendLoadMethod;
        }
        // context没有设置时，继续使用通过指令设置的开关
        /** @type {?} */
        var enableExtendLoadMethod = false;
        if (this.frameContext) {
            /** @type {?} */
            var befApiUrl = this.frameContext.repository.apiUri;
            /** @type {?} */
            var enableKey = helpMetadataId + "@" + befApiUrl;
            enableExtendLoadMethod = this.frameContext.getParam(enableKey);
        }
        return enableExtendLoadMethod;
    };
    /**
     * 老的帮助取树
     */
    /**
     * 老的帮助取树
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    BefLookupRestService.prototype.getHelpData = /**
     * 老的帮助取树
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    function (labelId, tableName, data) {
        var _this = this;
        /** @type {?} */
        var url = this.befRepository.restService.baseUri + "/elementhelps/" + labelId;
        /** @type {?} */
        var update$ = this.befRepository.updateDataAndVariableChanges();
        /** @type {?} */
        var result$ = update$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            _this.extendQueryParam(data);
            // tslint:disable-next-line: max-line-length
            return _this.befRepository.restService.invoke(url, 'GET', { nodeCode: tableName, queryParam: JSON.stringify(data) }, null, false).pipe(catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.clearLoading();
                /** @type {?} */
                var formAppContext = _this.befRepository.appContext.getFormAppContext();
                _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
                return EMPTY;
            })));
        })));
        return result$;
    };
    /**
     * 扩展的帮助取数
     */
    /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    BefLookupRestService.prototype.extendGetHelpData = /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    function (labelId, tableName, data) {
        var _this = this;
        /** @type {?} */
        var url = this.befRepository.restService.baseUri + "/extension/elementhelps";
        this.extendQueryParam(data);
        /** @type {?} */
        var body = {
            labelId: labelId,
            nodeCode: tableName,
            queryParam: data,
            requestInfo: this.befRepository.restService.buildRequestInfo()
        };
        /** @type {?} */
        var options = {
            body: body
        };
        /** @type {?} */
        var result$ = this.befRepository.restService.invoke(url, 'PUT', null, options, false, true);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            return responseInfo && responseInfo.returnValue || null;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.clearLoading();
            /** @type {?} */
            var formAppContext = _this.befRepository.appContext.getFormAppContext();
            _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    };
    /**
     * @private
     * @return {?}
     */
    BefLookupRestService.prototype.clearLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.loadingService) {
            this.loadingService.clearAll();
        }
    };
    /**
     * @private
     * @param {?} data
     * @param {?=} layer
     * @param {?=} parentPathCode
     * @return {?}
     */
    BefLookupRestService.prototype.convert2TreeDataWithPathCode = /**
     * @private
     * @param {?} data
     * @param {?=} layer
     * @param {?=} parentPathCode
     * @return {?}
     */
    function (data, layer, parentPathCode) {
        var _this = this;
        if (layer === void 0) { layer = 1; }
        if (parentPathCode === void 0) { parentPathCode = '01'; }
        /** @type {?} */
        var nodes = data.filter((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.layer === layer && d.pathcode === parentPathCode; }));
        if (layer > 1) {
            nodes = data.filter((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.layer === layer && d.pathcode.substr(0, (layer - 1) * 2) === parentPathCode; }));
        }
        if (nodes.length) {
            /** @type {?} */
            var treeNodes = nodes.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return {
                    data: n,
                    children: []
                };
            }));
            treeNodes.forEach((/**
             * @param {?} tn
             * @return {?}
             */
            function (tn) {
                var _a;
                /** @type {?} */
                var _tns = _this.convert2TreeDataWithPathCode(data, tn.data.layer + 1, tn.data.pathcode);
                (_a = tn.children).push.apply(_a, __spread(_tns));
            }));
            return treeNodes;
        }
    };
    /**
     * @private
     * @param {?} queryParam
     * @return {?}
     */
    BefLookupRestService.prototype.extendQueryParam = /**
     * @private
     * @param {?} queryParam
     * @return {?}
     */
    function (queryParam) {
        if (queryParam && typeof queryParam === 'object') {
            /** @type {?} */
            var paths = this.getPath();
            queryParam.relationFilterFieldInfo = paths;
        }
    };
    /**
     * @private
     * @return {?}
     */
    BefLookupRestService.prototype.getPath = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bindingPath = this.frameContext.viewModel.bindingPath;
        /** @type {?} */
        var rid = this.frameContext.viewModel.bindingData.list.currentId;
        // root表数据id
        /** @type {?} */
        var path = rid;
        /** @type {?} */
        var subPaths = bindingPath.split('/').filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p; }));
        if (subPaths.length > 0) {
            /** @type {?} */
            var subData = this.frameContext.viewModel.bindingData;
            for (var index = 0; index < subPaths.length; index++) {
                /** @type {?} */
                var subPath = subPaths[index];
                subData = subData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath.substring(0, subPath.length - 1) + "/" + subData.currentId;
            }
            // path += '/' + subPaths[subPaths.length - 1]+'/' + ;
        }
        return path;
    };
    BefLookupRestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefLookupRestService.ctorParameters = function () { return [
        { type: Repository },
        { type: FrameContext, decorators: [{ type: Optional }] }
    ]; };
    return BefLookupRestService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_lookup_default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助Rest取数服务
 */
var BefLookupDefaultService = /** @class */ (function () {
    function BefLookupDefaultService(repository, sessionService) {
        this.sessionService = sessionService;
        this.befRepository = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    BefLookupDefaultService.prototype.createSession = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var userSessionID = this.sessionService.getUserSessionId();
        if (userSessionID) {
            return this.befRepository.restService.invoke(url, 'POST', null, {
                headers: new HttpHeaders({ 'SessionId': userSessionID }),
                responseType: 'text'
            }, false).pipe(switchMap((/**
             * @param {?} str
             * @return {?}
             */
            function (str) {
                return of({ status: true, payload: str });
            })));
        }
        else {
            return of({ status: false, payload: '用户登录信息已过期，请重新登录' });
        }
    };
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    BefLookupDefaultService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        var _this = this;
        /** @type {?} */
        var entityFilter = {};
        if (params.condition) {
            entityFilter = params.condition;
        }
        if (url[url.length - 1] === '/') {
            url = url.substr(0, url.length - 1);
        }
        /** @type {?} */
        var queryUrl = url + "/extension/query";
        /** @type {?} */
        var createSessionUrl = url + "/service/createsession";
        if (entityFilter) {
            /** @type {?} */
            var entityFilterJson = JSON.stringify(entityFilter);
            queryUrl = queryUrl + "?entityFilter=" + entityFilterJson;
        }
        return this.createSession(createSessionUrl).pipe(switchMap((/**
         * @param {?} usrSess
         * @return {?}
         */
        function (usrSess) {
            if (usrSess.status) {
                /** @type {?} */
                var sessionId = usrSess.payload;
                /** @type {?} */
                var options = {};
                // if (options.headers) {
                //     options.headers = options.headers.append('SessionId', usrSess.payload);
                // } else {
                // options.headers = new HttpHeaders({ SessionId: sessionId });
                // }
                // const token = this.befRepository.restService.sessionService.token;
                // options.headers = options.headers.append('X-CAF-Runtime-CommonVariable', token);
                // options.headers = options.headers.append('X-CAF-Runtime-Context', sessionId);
                return _this.befRepository.restService.invoke(queryUrl, 'PUT', null, options, false);
            }
            else {
                // @todo: ng7
                // return new ErrorObservable(usrSess.payload);
                throw new Error(usrSess.payload);
            }
        })), map$1((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var val = res.returnValue;
            /** @type {?} */
            var data = { items: val.result };
            if (val.pagination) {
                return Object.assign({}, data, {
                    total: val.pagination.totalCount,
                    pageInfo: {
                        pageSize: val.pagination.pageSize,
                        pageIndex: val.pagination.pageIndex,
                        enablePager: true
                    }
                });
            }
            return data;
        })));
    };
    BefLookupDefaultService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefLookupDefaultService.ctorParameters = function () { return [
        { type: Repository },
        { type: FrameworkSessionService }
    ]; };
    return BefLookupDefaultService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BefRepositoryUtil = /** @class */ (function () {
    function BefRepositoryUtil() {
    }
    /**
     * 检查BefRepository是否存在未保存数据
     * @param befRepository
     */
    /**
     * 检查BefRepository是否存在未保存数据
     * @param {?} befRepository
     * @return {?}
     */
    BefRepositoryUtil.isExistUnsaveData = /**
     * 检查BefRepository是否存在未保存数据
     * @param {?} befRepository
     * @return {?}
     */
    function (befRepository) {
        /** @type {?} */
        var hasUnsavedData = false;
        if (!befRepository || !befRepository.entityCollection) {
            throw 'Current Object is null or it\'s entityCollection is null.';
        }
        /** @type {?} */
        var entityArray = befRepository.entityCollection.toArray();
        if (befRepository.dataChangeHistory.isChanged()) {
            return true;
        }
        for (var i = 0; i < entityArray.length; i++) {
            if (entityArray[i].changes.length > 0) {
                hasUnsavedData = true;
                break;
            }
        }
        return hasUnsavedData;
    };
    return BefRepositoryUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/uri.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Uri = /** @class */ (function () {
    function Uri(url, paths) {
        if (paths === void 0) { paths = null; }
        var _this = this;
        this.url = url;
        this.paths = paths;
        if (!!this.paths) {
            Object.keys(paths).forEach((/**
             * @param {?} path
             * @return {?}
             */
            function (path) {
                if (_this.url.indexOf("{" + path + "}") !== -1) {
                    _this.url = _this.url.replace("{" + path + "}", "" + paths[path]);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    Uri.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.url;
    };
    return Uri;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_combo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultComboHttpService = /** @class */ (function () {
    function DefaultComboHttpService(repository) {
        this.befRest = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    DefaultComboHttpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    function (url, params, method) {
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'GET'; }
        /** @type {?} */
        var headers = new HttpHeaders({ 'content-type': 'application/json' })
        // return this.befRest.restService.invoke(url, method, params, { headers });
        ;
        // return this.befRest.restService.invoke(url, method, params, { headers });
        if (method.toLowerCase() !== 'get') {
            return this.befRest.restService.invoke(url, method, null, { headers: headers, body: params });
        }
        else {
            return this.befRest.restService.invoke(url, method, params, { headers: headers });
        }
    };
    DefaultComboHttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DefaultComboHttpService.ctorParameters = function () { return [
        { type: Repository }
    ]; };
    return DefaultComboHttpService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_dynamic_control_group_default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultDynamiControlGroupHttpService = /** @class */ (function () {
    function DefaultDynamiControlGroupHttpService(repository) {
        this.befRest = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    DefaultDynamiControlGroupHttpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    function (url, params, method) {
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'GET'; }
        /** @type {?} */
        var headers = new HttpHeaders({ 'content-type': 'application/json' });
        return this.befRest.restService.invoke(url, method, params, { headers: headers });
    };
    DefaultDynamiControlGroupHttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DefaultDynamiControlGroupHttpService.ctorParameters = function () { return [
        { type: Repository }
    ]; };
    return DefaultDynamiControlGroupHttpService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
DynamicBefRepository = /** @class */ (function (_super) {
    __extends(DynamicBefRepository, _super);
    // public paginationInfo = {
    //   Entity: {
    //     pageSize: 20,
    //   },
    // };
    function DynamicBefRepository(injector, name, entityType, serverUri, apiUri) {
        var _this = _super.call(this, injector) || this;
        _this.name = name;
        _this.entityType = entityType;
        _this.serverUri = serverUri;
        _this.apiUri = apiUri;
        _this.apiUri = apiUri;
        // 构造分页属性信息
        /** @type {?} */
        var paginationInfo = {};
        paginationInfo[entityType.typeName] = { pageSize: 20 };
        _this.paginationInfo = paginationInfo;
        _this.name = name;
        _this.entityTypeInfo = new DataTypeInfo(_this.entityType);
        _this.entityCollection = new EntityCollection(_this.entityType);
        // 初始化实体管理器
        _this.entityManager = new BefEntityManager(_this.entityCollection);
        // 设置proxy属性值
        /** @type {?} */
        var httpClient = injector.get(HttpClient);
        /** @type {?} */
        var uriService = new UriService(serverUri);
        /** @type {?} */
        var proxy = new BefProxy(httpClient, uriService);
        /** @type {?} */
        var baseUri = uriService.extendUri(apiUri);
        proxy.setBaseUri(baseUri);
        _this.proxy = proxy;
        _this.dataService = new BefDataService(injector, _this);
        _this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
        return _this;
    }
    /**
     * @param {?} defaultValues
     * @return {?}
     */
    DynamicBefRepository.prototype.batchAppend = /**
     * @param {?} defaultValues
     * @return {?}
     */
    function (defaultValues) {
        throw new Error('Method not implemented.');
    };
    return DynamicBefRepository;
}(BefRepository));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/preset_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
PresetBefRepository = /** @class */ (function (_super) {
    __extends(PresetBefRepository, _super);
    function PresetBefRepository(injector, schema) {
        var _this = _super.call(this, injector) || this;
        _this.schema = schema;
        /** @type {?} */
        var entityTypeFactory = new EntityTypeFactory();
        _this.entityType = (/** @type {?} */ (entityTypeFactory.create(schema)));
        _this.entityTypeInfo = new DataTypeInfo(_this.entityType);
        _this.entityCollection = new EntityCollection(_this.entityType);
        // 初始化实体管理器
        _this.entityManager = new BefEntityManager(_this.entityCollection);
        return _this;
    }
    /**
     * @param {?} defaultValues
     * @return {?}
     */
    PresetBefRepository.prototype.batchAppend = /**
     * @param {?} defaultValues
     * @return {?}
     */
    function (defaultValues) {
        throw new Error('Method not implemented.');
    };
    return PresetBefRepository;
}(BefRepository));

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var VERSION = 'ver.';

/**
 * @fileoverview added by tsickle
 * Generated from: farris-bef.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { VERSION, ChangeDetailType, BE_SERVER_URI_TOKEN, BE_SESSION_HANDLING_STRATEGY_TOKEN, BefChangeBuilder, BefChangeHandler, BefSessionService, BefRestService, BefProxy, BefLookupRestService, BefLookupDefaultService, BefRepository, FrameworkSessionService, NG_VARIABLE, NgVariable, BefRepositoryUtil, BefDataPathUtil, UriService, Uri, DefaultComboHttpService, DefaultDynamiControlGroupHttpService, BefEntityManager, DynamicBefRepository, PresetBefRepository, BefVariableManager, DeprecatedBefRepository as ɵa };

//# sourceMappingURL=farris-bef.js.map