import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { IProxyExtend, RequestInfo, ResponseInfo, ChangeDetail, RetrieveParam } from './types';
import { UriService } from './uri_service';
/**
 * Bef代理类
 * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter
 * uri 由uriService
 */
export declare class BefProxy {
    httpClient: HttpClient;
    uriService: UriService;
    protected proxyExtend: IProxyExtend;
    /**
     * restful基路径
     */
    protected baseUri: string;
    private httpService;
    constructor(httpClient: HttpClient, uriService: UriService);
    /**
     * 设置基路径
     * @param baseUri 基路径
     */
    setBaseUri(baseUri: string): void;
    /**
     * 设置策略模式
     * @param strategy 策略
     */
    setProxyExtend(proxyExtend: IProxyExtend): void;
    /**
     * 查询
     */
    query(entityFilter?: any): Observable<any>;
    /**
     * 扩展查询
     */
    extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 查询数据（带过滤条件）
     * @param entityFilter 过滤、排序、分页信息
     * @param requestInfo requestInfo
     * @description 和extendQuery一致，仅将查询参数放到body中
     */
    filter(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 检索数据
     * @param id 单据内码
     * @return 数据对象
     */
    retrieve(id: string): Observable<any>;
    /**
     * @deprecated 方法已经废弃，请勿使用
     */
    serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any>;
    /**
     * 分页查询从表/从从表数据
     * @param params 参数
     */
    queryChild(params: any): Observable<any>;
    /**
     * 检索数据（扩展）
     */
    extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo>;
    /**
     * 检索数据
     */
    edit(id: string, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 创建一条数据
     */
    create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any>;
    /**
     * 从表新增
     * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any>;
    /**
     * 提交变更
     */
    update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any>;
    /**
     * 执行保存
     */
    save(requestInfo?: RequestInfo): Observable<any>;
    /**
     * 删除
     */
    delete(id: string): Observable<any>;
    /**
     * 删除并保存
     */
    deleteAndSave(id: any, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 删除（扩展）
     */
    extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 删除后代
     * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    deletByPath(fpath: string, id: string): Observable<any>;
    /**
     * 删除后代（扩展）
     * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 批量删除后代
     * @param fPath 'extension/{rootId}/cc/batch'
     * @param  ids 子集id
     * @param  requestInfo 请求信息
     */
    batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 批量删除
     * @param ids 待删除的id数组
     */
    batchDelete(ids: string[]): Observable<any>;
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any>;
    /**
     * 批量删除（扩展）
     */
    extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 取消
     */
    cancel(context?: any): Observable<any>;
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    batchAppendByPath(path: string, defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any>;
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    batchAppend(defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any>;
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param requestInfo requestInfo
     * @returns
     */
    hasChanges(requestInfo: RequestInfo): Observable<any>;
    request(url: string, method: string, params?: any, options?: any, selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean, runtimeContext?: any): Observable<any>;
    /**
     * 调用httpclient取数
     * @param url url
     * @param method methods
     * @param options options
     */
    protected invoke(url: string, method: string, options: any): Observable<any>;
    /**
     * 向HttpOptions对象中添加body
     * @param options 原来的options
     * @param body body内容
     */
    private addBodyToOptions;
    /**
     * 构造HttpParams对象
     * @param params 请求参数
     */
    private buildParams;
    /**
     * 是否带有RequestInfo
     */
    private hasRequestInfo;
    /**
     * 处理返回值，兼容老版本
     */
    private unWrapResponseInfo;
}
