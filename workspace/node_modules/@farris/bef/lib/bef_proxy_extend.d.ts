import { Observable } from 'rxjs';
import { Entity } from '@farris/devkit';
import { IProxyExtend, ResponseInfo } from './types';
import { BefRepository } from './bef_repository';
import { HttpHeaders } from '@angular/common/http';
export declare class BefProxyExtend implements IProxyExtend {
    private context;
    private loadingService;
    constructor(context: BefRepository<Entity>);
    /**
     * 请求结果返回
     * @param response response
     * @param ignoreChanges 忽略变更
     */
    onResponse(response: ResponseInfo, ignoreChanges?: boolean, options?: any): any;
    /**
     * 发生错误
     * @param error error
     * @param selfHandError 自定义错误处理
     * @param ignoreError 忽略错误
     */
    onError(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any>;
    /**
     * 扩展http headers
     * @param headers headers
     */
    extendHeaders(headers: HttpHeaders, runtimeContext?: any): Observable<{
        [propName: string]: any;
    }>;
    /**
     * 扩展请求参数
     * @param params 参数
     */
    extendUrl(url: string, params: {
        [propName: string]: any;
    }): string;
    /**
     * 扩展请求体
     * @param body body
     */
    extendBody(body: any): {
        [propName: string]: any;
    };
    parseHeaders(response: any): void;
}
