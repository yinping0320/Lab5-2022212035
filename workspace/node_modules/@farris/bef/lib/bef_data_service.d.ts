import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { Entity } from '@farris/devkit';
import { RequestInfo } from './types';
import { BefRestService } from './bef_rest_service';
import { BefRepository } from './bef_repository';
import { BefProxy } from './bef_proxy';
/**
 * Bef数据访问服务
 * @todo：
 * 1、临时将BefRepository相关代码转移到该类中；
 * 2、进一步明确职责，调整结构
 */
declare class BefDataService<T extends Entity> {
    private injector;
    /**
     * 全局上下文
     */
    private appContext;
    /**
     * 实体仓库
     */
    private repository;
    /**
     * BefRest代理
     */
    readonly restProxy: BefProxy;
    /**
     * RestService实例(请使用restProxy代替)
     * @deprecated
     */
    restService: BefRestService;
    /**
     * 构造函数
     */
    constructor(injector: Injector, repository: BefRepository<T>);
    /**
     * 获取实体集合
     */
    getList(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;
    /**
     * 过滤数据
     * @param filter 过滤条件
     * @param sort 排序条件
     * @param pageSize 分页大小
     * @param pageIndex 当前分页
     */
    filter(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;
    /**
     * 构造EntityFilter
     */
    private buildEntityFilter;
    /**
     * 获取单个实体
     * @param id id
     * @param enableChildrenPagination en
     */
    getById(id: string): Observable<T>;
    getEntityById(id: string): Observable<T>;
    /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param paths 通用路径
     * @param pageIndex 页码
     * @param pageSize 分页大小
     * @param filter 过滤条件
     * @param sort 排序
     */
    queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<any>;
    /**
     * 构造子表分页信息
     */
    private buildChildrenPagination;
    /**
     * 更新分页配置信息
     * @param paginationInfo 服务器分页信息
     */
    private updatePagination;
    /**
     * 构造retrieve分页信息
     * @description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     */
    private buildRetrieveParam;
    /**
     * 更新并对实体加锁
     * @param id 实体id
     */
    editById(id: string): Observable<T>;
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    updateById(id: string): Observable<T>;
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    updateEntityById(id: string): Observable<any>;
    /**
     * 重新加载实体数据
     * @param id 要重载的实体id
     * @param entityData 要重载的数据
     * @todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     */
    private reloadEntityData;
    /**
     * 创建新实体，并加载
     */
    create(defaultValue?: any): Observable<T>;
    /**
     * 追加实体
     */
    append(defaultValue?: any): Observable<T>;
    /**
     * 插入数据
     * @param position 数据插入位置
     * @param defaultValue 默认值
     */
    insert(position: 1 | -1, defaultValue?: any): Observable<any>;
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    appendByPath(fpath: string): Observable<Entity>;
    /**
     * 创建子实体并插入到指定位置
     * @param fpath 父路径
     * @param position 数据插入位置
     */
    insertByPath(fpath: string, position: 1 | -1): Observable<Entity>;
    /**
     * 根据id删除实体
     * @param id 内码
     */
    removeById(id: string, ifSave?: boolean): Observable<boolean>;
    /**
     * 删除并保存
     * @param id 要删除的实体id
     */
    removeAndSaveById(id: string): Observable<boolean>;
    /**
     * 批量删除
     * @param id 内码
     * @param ifSave 是否保存
     */
    removeByIds(ids: string[], ifSave?: boolean): Observable<boolean>;
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    batchRemove(ids: string[], ifSave: boolean): Observable<any>;
    /**
     * 添加批量删除记录到变更记录中
     * @param ids ids
     */
    private addBatchRemoveHistory;
    /**
     * 从实体仓库中批量移除指定id的数据
     * @param ids
     */
    private removeEntities;
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @param array 待遍历数组
     */
    private checkEntityValueExists;
    /**
     * 删除子级
     * @param path 路径
     * @param id   内码
     */
    removeByPath(fpath: string, id: string): Observable<boolean>;
    /**
     * 批量删除子级
     * @param fPath 路径
     * @param ids  子级id集合
     */
    batchRemoveByPath(fPath: string, ids: string): Observable<boolean>;
    /**
     * 将id对应的实体的变更提交的服务器端
     */
    updateChangesById(id: string): Observable<boolean>;
    /**
     * 提交path对应实体的变更
     */
    updateChangesByPath(path: string, id: string): Observable<any>;
    /**
     * 提交所有变更
     */
    updateAllChanges(): Observable<boolean>;
    /**
     * 应用变更
     */
    applyChanges(): Observable<boolean>;
    /**
     * 应用idArray对应数据的变更
     */
    applyChangesByIdArray(idArray: string[]): Observable<boolean>;
    /**
     * 应用id对应数据的变更
     */
    applyChangesById(id: string): Observable<boolean>;
    /**
     * 取消变更
     */
    cancelChanges(options?: any): Observable<boolean>;
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any>;
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    batchAppend(defaultValues: Array<any>): Observable<any>;
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @returns
     */
    hasChanges(): Observable<any>;
    /**
     * 构造变更集
     */
    buildRequestInfo(): RequestInfo;
}
export { BefDataService };
