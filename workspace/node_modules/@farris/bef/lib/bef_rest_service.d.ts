import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Entity, EventBus } from '@farris/devkit';
import { BefRepository } from './bef_repository';
import { FrameworkSessionService } from './framework_session_service';
import { BefSessionService } from './session/index';
import { ChangeDetail, RequestInfo, ResponseInfo, RetrieveParam } from './types';
import { BefProxy } from './bef_proxy';
/**
 * BEF取数服务
 * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。
 */
declare class BefRestService {
    private repository;
    private loadingService;
    /**
     * httpClient
     */
    private httpClient;
    private httpService;
    /**
     * 会话服务
     */
    sessionService: BefSessionService;
    /**
     * 接口根Uri
     */
    baseUri: string;
    /**
     * 事件总线
     */
    eventBus: EventBus;
    /**
     * 构造函数
     * @param httpClient http服务
     * @param serverUri 应用服务器地址
     * @param beUri BE API地址
     */
    constructor(httpClient: HttpClient, baseUri: string, frmSessionService: FrameworkSessionService, repository: BefRepository<Entity>, eventBus?: EventBus);
    /**
     * 获取Bef代理
     */
    readonly proxy: BefProxy;
    /**
     * 创建Bef代理
     */
    private createBefProxy;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    query(entityFilter?: any): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 分页查询各从表数据
     * @param id 主表id
     * @param retrieveParam 参数
     */
    serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any>;
    /**
     * 分页查询从表/从从表数据
     * @param params 查询参数
     */
    queryChild(params: any): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    retrieve(id: string): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    save(requestInfo?: RequestInfo): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    delete(id: string): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    deletByPath(fpath: string, id: string): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo>;
    batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    batchDelete(ids: string[]): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo>;
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param requestInfo requestInfo
     */
    extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    cancel(options?: any): Observable<any>;
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param requestInfo requestInfo
     * @returns
     */
    hasChanges(requestInfo: RequestInfo): Observable<any>;
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    request(url: string, method: string, params?: any, options?: any, selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean): Observable<any>;
    /**
     * 调用后端方法
     * @param url url
     * @param method method
     * @param params params
     * @param options options
     * @param selfHandError 自己处理异常
     * @param ignoreError 忽略错误
     * @param ignoreChanges 忽略变更
     */
    invoke(url: string, method: string, params?: any, options?: any, selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean): Observable<any>;
    /**
     * 内部的request方法
     */
    private innerRequest;
    /**
     * 处理返回结果
     */
    handleReponseInfo(result: any, hasRequestInfo: boolean, ignoreChanges: boolean, options: any): any;
    /**
     * 错误处理
     */
    handleErrors(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any>;
    /**
     * 清空Loading
     */
    private clearLoading;
    private clearAllLoading;
    /**
     * 处理返回值，兼容老版本
     */
    private unWrapResponseInfo;
    /**
     * 是否带有RequestInfo
     */
    private hasRequestInfo;
    /**
     * 是否带有requestInfo
     */
    private existRequestInfo;
    /**
     * 构造HttpParams对象
     * @param params 请求参数
     */
    private buildParams;
    /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * @body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     */
    buildBodyWithRequestInfo(body: any): any;
    /**
     * 构造RequestInfo
     */
    buildRequestInfo(): RequestInfo;
}
export { BefRestService };
