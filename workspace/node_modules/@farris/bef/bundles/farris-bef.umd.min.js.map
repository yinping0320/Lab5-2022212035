{"version":3,"sources":["ng://@farris/bef/lib/types.ts","ng://@farris/bef/lib/tokens.ts","ng://@farris/bef/lib/entity_util.ts","ng://@farris/bef/lib/bef_change_builder.ts","ng://@farris/bef/lib/bef_change_handler.ts","ng://@farris/bef/lib/framework_session_service.ts","ng://@farris/bef/lib/session/bef_session_storage_strategy.ts","node_modules/tslib/tslib.es6.js","ng://@farris/bef/lib/utils/http_header.util.ts","ng://@farris/bef/lib/utils/http_param.util.ts","ng://@farris/bef/lib/utils/request_info.util.ts","ng://@farris/bef/lib/utils/response_info.util.ts","ng://@farris/bef/lib/http_service.ts","ng://@farris/bef/lib/session/bef_session_handling_strategy.ts","ng://@farris/bef/lib/session/bef_session_handling_strategy_factory.ts","ng://@farris/bef/lib/session/bef_session_service.ts","ng://@farris/bef/lib/decorators.ts","ng://@farris/bef/lib/deprecated/deprecated_bef_repository.ts","ng://@farris/bef/lib/bef_entity_manager.ts","ng://@farris/bef/lib/bef_change_util.ts","ng://@farris/bef/lib/bef_variable_manager.ts","ng://@farris/bef/lib/bef_proxy_util.ts","ng://@farris/bef/lib/bef_data_path_util.ts","ng://@farris/bef/lib/bef_data_service.ts","ng://@farris/bef/lib/utils/back_end_message.util.ts","ng://@farris/bef/lib/session/bef_session_manager.ts","ng://@farris/bef/lib/bef_proxy_extend.ts","ng://@farris/bef/lib/bef_repository.ts","ng://@farris/bef/lib/uri_service.ts","ng://@farris/bef/lib/bef_proxy.ts","ng://@farris/bef/lib/bef_rest_service.ts","ng://@farris/bef/lib/bef_lookup.service.ts","ng://@farris/bef/lib/bef_lookup_default.service.ts","ng://@farris/bef/lib/bef_repository_util.ts","ng://@farris/bef/lib/uri.ts","ng://@farris/bef/lib/bef_combo.service.ts","ng://@farris/bef/lib/bef_dynamic_control_group_default.service.ts","ng://@farris/bef/lib/dynamic_bef_repository.ts","ng://@farris/bef/lib/preset_bef_repository.ts","ng://@farris/bef/public-api.ts"],"names":["ChangeDetailType","Added","Modify","Deleted","BE_SERVER_URI_TOKEN","InjectionToken","BE_SESSION_HANDLING_STRATEGY_TOKEN","EntityUtil","getPropInfo","entityType","targetPropName","propType","propEntityType","propMetadata","ngFieldProperties","FieldMetadataUtil","getNgFields","Object","keys","forEach","propName","ngObjectProperties","getNgObjects","type","ngListProperties","getNgList","ngDynamicProperties","getNgDynamic","getPrimaryKey","primaryNgFiledProp","getPrimaryFieldMetadata","dataField","isObjectProp","isDynamicProp","appendInitialData","entity","initialData","data","assign","id","parentID","BefChangeBuilder","prototype","build","modifications","_this","this","changeDetail","ChangeType","ChangeInfo","DataId","modification","buildChangeDetail","paths","path","concat","split","parentChangeDetail","parentEntityType","i","parentChangeInfo","this_1","getChangeInfo","_a","ModifyType","ValueChange","Error","value","changeObject","entityPath","slice","changedEntity","entityCollection","getEntityByPath","toJSON","changeDetails","length","dataId_1","find","changeDetailItem","createEmptyChangeDetail","push","Add","Insert","Remove","hasOwnProperty","dataId","BefChangeHandler","handle","handleChangeDetails","entityList","getEntityById","handleChangeDetail","changeInfo","childEntity","primaryKey","childEntityData","load","childChangeDetail","childEntityList","childChangeDetails","EntityCollection","get","FrameworkSessionService","getUserSessionId","sessionService","getCurrentSessionId","runtimeContext","sessionId","rsi","getRuntimeSessionId","tabId","getCurrentSeesionId","hash","window","location","params","parse","queryString","indexOf","reduce","key","val","decodeURIComponent","Injectable","SessionService","decorators","Optional","SessionStorageBeSessionStorageStrategy","getItem","beSessionKey","getAllBeSessions","setItem","beSessionId","beSessions","setAllBeSessions","removeItem","clear","frmSessionId","beSessionUri","isInFramework","removeItemsByFrmSessionId","startsWith","beSessionsJson","sessionStorage","sessionStorageKey","JSON","beSessionsString","stringify","hashString","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","__extends","__","constructor","create","__assign","t","s","n","arguments","call","apply","__values","o","Symbol","iterator","m","next","done","TypeError","__read","r","e","ar","error","__spread","HttpHeaderUtil","convertToHeaders","headers","HttpHeaders","httpHeaders_1","prop","append","appendSessionId","appendCafRuntimeCommonVariable","commonVariable","appendCafRuntimeContext","context","appendContextType","contentType","appendRequireMessage","requireMessage","toString","appendFuncInstId","funcInstId","toJson","result","header","values","getAll","HttpParamUtil","buildParams","httpParams","HttpParams","RequestInfoUtil","hasRequestInfo","options","body","requestInfo","dataChange","hasRequestInfoWithR","RequestInfo","buildRequestInfo","repository","entityManager","buildAllEntityChangeDetails","variableChange","variableManager","buildBodyWithRequestInfo","getRequestInfo","ResponseInfoUtil","unWrapResponseInfo","returnValue","isReported401Error","response","status","parseBackEndMessage","message","isArray","parseBackEndError","extensionMessage","UIMsg","HttpService","getService","env","top","isSameOrigin","parent","environment","host","defineProperty","rtf","http","request","method","url","defaultHttpClient","HttpClient","httpClient","BefSessionHandlingStrategy","getFrmSessionId","frmSessionService","getFrameworkSessionId","getSessionIdFromStorage","getSessionStorageKey","storageStrategy","tslib_1.__extends","BefSeparatedSessionHandlingStrategy","getSessionId","of","createSession","setSessionId","sessionKey","clearSessionId","extendRequestHeaders","handleReponseHeaders","responseType","injector","AppContext","SessionId","httpService","pipe","tap","extendHttpHeader","beBaseUri","_super","BefUnifiedSessionHandlingStrategy","appContext","token","Token","BefSessionHandlingStrategyFactory","handlingStrategyName","createStorageStrategy","createBeSessionUri","BefSessionService","handlingStrategy","getBeSessionId","setBeSessionId","clearBeSessionId","handleResponseHeaders","createBeSession","InjectFlags","set","createHandlingStrategy","Injector","NG_VARIABLE","NgVariable","makePropDecorator","obj","DeprecatedBefRepository","Repository","dataService","restService","changeBuilder","changeHandler","getList","getById","updateById","defaultValue","appendByPath","fpath","removeById","ifSave","removeByIds","ids","removeByPath","updateChangesById","updateChangesByPath","updateAllChanges","applyChanges","updateDataAndVariableChanges","entityFilter","FilterConditions","SortConditions","IsUsePagination","Pagination","PageIndex","PageSize","PageCount","TotalCount","entityFilterJson","isEmptyRequestInfo","baseUri","invoke","applyChangesById","cancelChanges","clearAllEntityChanges","getDataChangeDetails","handleDataChangeDetails","getVariableChangeDetail","handleVariableChangeDetail","EntityManager","BefEntityManager","getAllEntities","changes","buildEntityChangeDetailById","reset","BefChangeUtil","createEmpty","isChangeDetail","BefVariableManager","varName","ngVariable","ngVariableMap","mapping","newValue","getValueFromUIState","setValueToUIState","innerValueMap","oldValue","isValueEqual","appendToChangeInfo","clearChanges","clearChangeDetail","varValue","isUdtVariable","udtVarChangeDetail","uiState","getRootUIState","accumulator","currentValue","Date","format","rootFrameContext","frameContextManager","getRootFrameContext","frameContext","FrameContext","getVirtualRootFrameContext","srcValue","dstValue","ngVariables","Map","BefProxyUtil","befRepository","BefDataPathUtil","convertToPathArray","bindingPath","bindingData","bindingPathArray","BindingPathConverter","toBindingPathArray","pathArray","currentBindingObject","list","currentItem","primaryKeyValue","propInfo","PropertyUtil","getPropertyByName","properties","BindingPropertyType","List","name","currentBindingList","trimTrailingS","convertToPathUrl","pop","join","convertToObjectCodes","pathLen","objectCodes","convertToDataIdsForUpdate","dataIds","convertToDataIdsForAdd","convertPathToUrl","subPaths","endsWith","substr","toLowerCase","str","convertPathsToNodeCodes","filter","item","node","convertPathsToIds","BefDataService","proxy","sort","pageSize","pageIndex","buildEntityFilter","restProxy","extendQuery","map","responseInfo","queryResult","listData","entities","buildEntity","serverPaginationInfo","pageSize_1","pageIndex_1","totalCount","updatePaginationInfoByPath","loadEntities","pageSize_2","pageIndex_2","relation","retrieveParam","buildRetrieveParam","extendRetrieve","entityData","serviceRetrieve","pagination","updatePagination","queryChild","entityCodes","substring","entityName","getPaginationConfigByPath","ps","viewModel","ViewModel","forceQueryChild","parentId","nodeCodes","_b","commonPaths","index","includes","createEntitiesByPath","resetEntities","setPaginationConfigByPath","buildChildrenPagination","paginationInfo","childPaginationInfo","childrenEntityCodes","DataTypeInfoUtil","getChildrenNodeCodes","entityTypeInfo","entityCode","nodeCode","original","localPagination","total","filters","parentIds","ExpressionUtil","getChildrenEntityPaths","typeName","editById","edit","entityToUpdate","reloadEntityData","updateEntityById","changeDetectionController","detach","updateEntity","splice","reattach","newData","newEntity","addEntity","insert","position","insertEntity","createByPath","appendEntityByPath","insertByPath","insertEntityByPath","undefined","deleteAndSave","switchMap","removeEntityById","extendDelete","dataChangeHistory","addChange","changeType","DataChangeType","Delete","removeAndSaveById","extendBatchDelete","applyChangesByIdArray","removeEntities","checkEntityValueExists","changes_1","addChanges","batchRemove","extendBatchDeletion","addBatchRemoveHistory","changes_2","primaryValueArray","isExistInTargetArray","primaryValue","extendDeletByPath","removeEntityByPath","batchRemoveByPath","fPath","batchDeleteByPath","idArray","update","clearEntityChangesById","updateResults","toArray","updateResult$","zip","save","clearAllVariableChanges","clearEntityChangesByArray","clearByIds","cancel","batchAppendByPath","defaultValues","appendEntitiesByPath","batchAppend","buildEntities","addEntities","hasChanges","restBaseUri","apiUri","eventBus","EventBus","BefRestService","BackEndMessageUtil","handleMessage","messages","ns","NAMESPACE","bizMessages","buildBackEndMessages","backEndMessage","BackEndMessage","Message","backEndMessageHandler","BACK_END_MESSAGE_HANDLER_TOKEN","isBackEndMessageHandlerExist","getFormlessMessages","columns","bizMessage","level","rows","columnNames","BefSessionManager","ApplicationId","createSessionHistory","BefProxyExtend","onResponse","ignoreChanges","innerDataChange","innerVariableChange","getInjector","onError","selfHandError","ignoreError","formAppContext","getFormAppContext","applicationId","loadingServices","loadingService","setTimeout","clearAll","loadingServices_1","tslib_1.__values","loadingServices_1_1","destroy","throwError","isExceptionHandlerExist","messages_1","isExistFormlessMessage","needThrowException","willThrowException","hasThrowError","isException","post","EMPTY","extendHeaders","extendUrl","extendBody","parseHeaders","sessionIdKey","has","LoadingService","BefRepository","befProxy","setProxyExtend","getEntities","sorts","editEntityById","createEntity","appendEntity","removeEntityAndSaveById","saveEntityById","saveEntities","cancelEntityChanges","MetadataUtil","getPropsMetadatasByName","serverUri","UriService","extendUri","Inject","args","DELETE","PUT","POST","BefProxy","setBaseUri","proxyExtend","query","encodeUrl","addBodyToOptions","retrieve","pathUrl","delete","deletByPath","batchDelete","retrieveDefaultParam","observe","catchError","uriService","createBefProxy","defaultProxy","extend","innerRequest","useCorrectRequestInfoCheckMethod","befSessionIdKey","checkRequestInfoMethod","existRequestInfo","handleReponseInfo","handleErrors","clearLoading","applicationContext","service","clearAllLoading","BefLookupRestService","registerDestroyEvent","destorySignal","subscribe","getData","helpMetadataId","tableName","labelId","currentId","ifEnableExtendLoadMethod","extendGetHelpData","getHelpData","saveUserSettings","getUserSettings","enableExtendLoadMethod","enableKey","getParam","extendQueryParam","queryParam","convert2TreeDataWithPathCode","layer","parentPathCode","nodes","pathcode","treeNodes","children","tn","_tns","getPath","relationFilterFieldInfo","subData","subPath","BefLookupDefaultService","userSessionID","payload","condition","queryUrl","createSessionUrl","usrSess","res","items","pageInfo","enablePager","BefRepositoryUtil","isExistUnsaveData","hasUnsavedData","entityArray","isChanged","Uri","replace","DefaultComboHttpService","content-type","befRest","DefaultDynamiControlGroupHttpService","DynamicBefRepository","DataTypeInfo","PresetBefRepository","schema","entityTypeFactory","EntityTypeFactory"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\n\r\n/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:48\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-07-30 17:37:02\r\n */\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * 变更集相关类型\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport class ChangeDetailType {\r\n\r\n  /**\r\n   * 新增\r\n   */\r\n  static Added = 'Added';\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  static Modify = 'Modify';\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  static Deleted = 'Deleted';\r\n}\r\n\r\n/**\r\n * 行变更信息\r\n * 必须包含：\r\n * 1、DataId   => 主键值；\r\n * 2、属性名   => 新的属性值；\r\n * 3、子表名+s => 子表行的ChangeDetail数组\r\n */\r\nexport interface ChangeDetailInfo {\r\n  DataId?: string;\r\n  [key: string]: number | string | boolean | null | ChangeDetail | ChangeDetail[] | { [key: string]: any };\r\n}\r\n\r\n/**\r\n * 行变更详情\r\n * 包含：\r\n * 1、变更类型；\r\n * 2、变更信息\r\n */\r\nexport interface ChangeDetail {\r\n  ChangeType: ChangeDetailType;\r\n  ChangeInfo: ChangeDetailInfo;\r\n}\r\n\r\n\r\n/**\r\n * 请求类型\r\n */\r\nexport interface RequestInfo {\r\n  dataChange: ChangeDetail[];\r\n  variableChange?: ChangeDetail;\r\n}\r\n\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * 请求、响应相关类型定义\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  totalCount: number;\r\n  pageCount: number;\r\n  pageIndex: number;\r\n}\r\n\r\n/**\r\n * 查询结果\r\n */\r\nexport interface QueryResult {\r\n  result: any[];\r\n  pagination: Pagination;\r\n}\r\n\r\n/**\r\n * 返回结果类型\r\n */\r\nexport interface ResponseInfo {\r\n  returnValue: any;\r\n  message: any[];\r\n  innerDataChange: ChangeDetail[];\r\n  innerVariableChange: ChangeDetail;\r\n}\r\n\r\n/**\r\n * 代理钩子\r\n */\r\nexport interface IProxyExtend {\r\n  extendUrl(url: string, params: { [propName: string]: any }): string;\r\n  extendBody(body: any): { [propName: string]: any };\r\n  extendHeaders(headers: { [propName: string]: any }, runtimeContext?: any): Observable<any>;\r\n  onResponse?(response: ResponseInfo, ignoreChanges?: boolean, options?: any);\r\n  onError?(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any>;\r\n  parseHeaders(response: any);\r\n}\r\n\r\n/**\r\n * 带RequestInfo的body对象\r\n */\r\nexport interface BodyWithRequestInfo {\r\n  requestInfo: RequestInfo;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * request option格式\r\n */\r\nexport interface RequestOption {\r\n  body: BodyWithRequestInfo;\r\n  [key: string]: any;\r\n}\r\n/**\r\n * 子表分页参数\r\n */\r\nexport interface RetrieveParam {\r\n  filters: { [nodeCode: string]: { pagination: { pageIndex: number, pageSize: number } } },\r\n  parentIds?: { [nodeCode: string]: string }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:48\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2018-10-19 15:36:48\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nconst BE_SERVER_URI_TOKEN = new InjectionToken<string>('@farris/be BE_SERVER_URL');\r\n\r\n/**\r\n * 1、因为bef里，很多类都没有注入，BefSessionHandlingStragegy无法直接注入；\r\n * 2、通过一个字符串Token来间接做策略选择。\r\n */\r\nconst BE_SESSION_HANDLING_STRATEGY_TOKEN = new InjectionToken<boolean>('@farris/be BE_SESSION_HANDLING_STRATEGY_TOKEN');\r\n\r\nexport { BE_SERVER_URI_TOKEN, BE_SESSION_HANDLING_STRATEGY_TOKEN };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:21\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-04-30 15:41:45\r\n */\r\nimport { FieldMetadataUtil } from '@farris/devkit';\r\n\r\nclass EntityUtil {\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any, propMetadata: any} {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n    let propMetadata: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n        propMetadata = ngFieldProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n        propMetadata = ngObjectProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n        propMetadata = ngListProperties[propName];\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n        propMetadata = ngDynamicProperties[propName];\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType, propMetadata };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string, ) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData (entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:35:39\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-18 16:15:47\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { Modification, ModifyType, Entity, EntityCollection, FieldMetadataUtil } from '@farris/devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { EntityUtil } from './entity_util';\r\n\r\n\r\n/**\r\n * BEF变更集构造器\r\n */\r\nclass BefChangeBuilder {\r\n\r\n  /**\r\n   * Bef变更集\r\n   */\r\n  public changeDetail: ChangeDetail;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param entityType 实体类型\r\n   */\r\n  constructor(\r\n    private entityType: Type<Entity>,\r\n    private entityCollection: EntityCollection<Entity>\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更集\r\n   * @param modifications\r\n   */\r\n  public build(modifications: Modification[]): ChangeDetail {\r\n\r\n    // 重置changeDetail\r\n    this.changeDetail = {\r\n      ChangeType: ChangeDetailType.Modify,\r\n      ChangeInfo: {\r\n        DataId: ''\r\n      }\r\n    };\r\n\r\n    modifications.forEach(modification => {\r\n      this.buildChangeDetail(modification);\r\n    });\r\n\r\n    return this.changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更详情\r\n   */\r\n  public buildChangeDetail(modification: Modification) {\r\n\r\n    const paths = modification.path.concat();\r\n\r\n    // 设置根节点DataId\r\n    if (!this.changeDetail.ChangeInfo.DataId) {\r\n      this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];\r\n    }\r\n\r\n    let parentChangeDetail = this.changeDetail;\r\n    let parentEntityType = this.entityType;\r\n\r\n    for (let i = 1; i < paths.length && parentChangeDetail; i = i + 2) {\r\n\r\n      const parentChangeInfo = this.getChangeInfo(parentChangeDetail);\r\n      const propName = paths[i];\r\n      const { propType, propEntityType, propMetadata } = EntityUtil.getPropInfo(parentEntityType, propName);\r\n      const dataField = propMetadata.dataField || propName;\r\n\r\n      if (propType === 'NgField') {\r\n\r\n        // 不支持主键变更，忽略\r\n        const primaryKey = EntityUtil.getPrimaryKey(parentEntityType);\r\n        if (propName === primaryKey) {\r\n          continue;\r\n        }\r\n\r\n        if (modification.type !== ModifyType.ValueChange) {\r\n          throw Error('简单类型的属性上不支持ValueChange类型之外的变更');\r\n        }\r\n\r\n        // NgField类型：说明是最后一级\r\n        parentChangeInfo[dataField] = modification.value;\r\n        parentChangeDetail = null;\r\n\r\n      } else if (propType === 'NgObject') {\r\n\r\n        // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。\r\n        const childId = paths[i + 1].split(':')[1];\r\n        const childIdName = paths[i + 1].split(':')[0];\r\n\r\n        if (childIdName) {\r\n\r\n          // 有主键（关联对象）：是一个普通的对象\r\n          let changeObject = parentChangeInfo[dataField];\r\n\r\n          // 获取数据\r\n          const entityPath = paths.slice(0, i + 1);\r\n          const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n          changeObject = changedEntity ? changedEntity.toJSON(true) : {};\r\n          parentChangeInfo[dataField] = changeObject;\r\n          parentChangeDetail = null;\r\n          parentEntityType = null;\r\n\r\n        } else {\r\n\r\n          // 没有主键（值对象）：是一个完整的ChangeDetail\r\n          let changeDetail = parentChangeInfo[dataField] as ChangeDetail;\r\n          if (!changeDetail) {\r\n            changeDetail = {\r\n              ChangeType: ChangeDetailType.Modify,\r\n              ChangeInfo: {}\r\n            };\r\n          }\r\n          parentChangeInfo[dataField] = changeDetail;\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 如果不存在则创建一个空数组\r\n        if (!parentChangeDetail.ChangeInfo[dataField]) {\r\n          parentChangeDetail.ChangeInfo[dataField] = [];\r\n        }\r\n        const changeDetails = parentChangeDetail.ChangeInfo[dataField] as ChangeDetail[];\r\n\r\n        // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：\r\n        // 1、不存在：创建一个Modify类型的ChangeDetail；\r\n        // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；\r\n        // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。\r\n        if (i !== paths.length - 1) {\r\n\r\n          // 遍历检查变更是否已经存在\r\n          const dataId = paths[i + 1].split(':')[1];\r\n\r\n          let changeDetail = changeDetails.find(changeDetailItem => {\r\n            return changeDetailItem.ChangeInfo.DataId === dataId;\r\n          });\r\n\r\n          // 如果不存在，则创建并添加\r\n          if (!changeDetail) {\r\n            changeDetail = this.createEmptyChangeDetail(ChangeDetailType.Modify, dataId);\r\n            changeDetails.push(changeDetail);\r\n          }\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n          continue;\r\n        }\r\n\r\n        // 如果是叶子节点，则肯定是新增或者删除变更。\r\n        if (modification.type === ModifyType.Add || modification.type === ModifyType.Insert) {\r\n\r\n          // // 遍历添加\r\n          // modification.value.forEach((entity: any) => {\r\n          //   this.addAddChangeDetail(changeDetails, entity.toJSON(), propEntityType);\r\n          // });\r\n        } else if (modification.type === ModifyType.Remove) {\r\n\r\n          // @todo：删除变更直接向服务器端提交了，不需要再次提交\r\n          // 遍历变更集，添加移除变更\r\n          // modification.value.forEach((entityData) => {\r\n          //   this.addRemoveChangeDetail(changeDetails, entityData, propEntityType);\r\n          // });\r\n        }\r\n\r\n        // 重置\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n\r\n      } else if (propType === 'NgDynamic') {\r\n        // 获取数据\r\n        const entityPath = paths.slice(0, i + 1);\r\n        const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n        parentChangeInfo[dataField] = {\r\n          ChangeType: ChangeDetailType.Modify,\r\n          ChangeInfo: changedEntity ? changedEntity.toJSON(true) : {}\r\n        };\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取变更信息\r\n   * 在整个ChangeDetail树上，存在两种类型的节点\r\n   * ChangeDetail：实体变更、值对象变更（没有DataID）\r\n   * PlainObject: 关联对象的变更\r\n   * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。\r\n   * @todo：为这两种节点封装ChangeNode基类来解决这个差异。\r\n   */\r\n  private getChangeInfo(changeDetail: any): any {\r\n\r\n    // @todo：可能存在同名属性\r\n    if (changeDetail.hasOwnProperty('ChangeInfo')) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建ChangeDetail\r\n   * @param type BEF变更类型\r\n   * @param dataId 数据内码\r\n   */\r\n  private createEmptyChangeDetail(type: ChangeDetailType, dataId: string): ChangeDetail {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {\r\n        DataId: dataId\r\n      }\r\n    };\r\n    return changeDetail;\r\n  }\r\n\r\n}\r\n\r\nexport { BefChangeBuilder };\r\n","import { Type } from '@angular/core';\r\nimport { Entity, EntityList, EntityCollection } from '@farris/devkit';\r\nimport { EntityUtil } from './entity_util';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\n\r\n/**\r\n * 处理服务器端变更\r\n */\r\nclass BefChangeHandler {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集\r\n   */\r\n  handle(\r\n    entityType: Type<Entity>,\r\n    entityCollection: EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    this.handleChangeDetails(entityType, entityCollection, changeDetails);\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（批量）\r\n   * @param entities\r\n   */\r\n  handleChangeDetails(\r\n    entityType: Type<Entity>,\r\n    entityList: EntityList<Entity> | EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    if (!changeDetails) {\r\n      return;\r\n    }\r\n\r\n    changeDetails.forEach((changeDetail: ChangeDetail) => {\r\n      const id = (changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId) as string;\r\n      const entity = this.getEntityById(entityList, id);\r\n      if (!entity) {\r\n        return;\r\n      }\r\n      this.handleChangeDetail(entityType, entity, changeDetail);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（单条）\r\n   */\r\n  handleChangeDetail(\r\n    entityType: Type<Entity>,\r\n    entity: Entity,\r\n    changeDetail: ChangeDetail\r\n  ) {\r\n\r\n    if (!changeDetail || !entity) {\r\n      return;\r\n    }\r\n\r\n    // 只处理值变更，其他变更待进一步验证。\r\n    if (changeDetail.ChangeType !== ChangeDetailType.Modify) {\r\n      return;\r\n    }\r\n\r\n    const changeInfo = changeDetail.ChangeInfo;\r\n    Object.keys(changeInfo).forEach((propName: string) => {\r\n      const { propType, propEntityType } = EntityUtil.getPropInfo(entityType, propName);\r\n      if (propType === 'NgField') {\r\n\r\n        // 简单属性：更新值\r\n        entity[propName] = changeInfo[propName];\r\n      } else if (propType === 'NgObject') {\r\n        const childEntity = entity[propName] as Entity;\r\n        if (childEntity.primaryKey) {\r\n\r\n          // 关联对象：重新加载数据\r\n          const childEntityData = changeInfo[propName];\r\n          childEntity.load(childEntityData);\r\n\r\n        } else {\r\n\r\n          // 值对象：递归处理变更\r\n          const childChangeDetail = changeInfo[propName] as ChangeDetail;\r\n          this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 子列表：递归处理变更集合\r\n        const childEntityList = entity[propName] as EntityList<Entity>;\r\n        const childChangeDetails = changeInfo[propName] as ChangeDetail[];\r\n        this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异\r\n   */\r\n  private getEntityById(entityList: EntityList<Entity> | EntityCollection<Entity>, id: string): Entity {\r\n    let target: Entity;\r\n    if (entityList instanceof EntityCollection) {\r\n      target = entityList.getEntityById(id);\r\n    } else {\r\n      target = entityList.get(id);\r\n    }\r\n    return target ? target : null;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { BefChangeHandler };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-13 20:05:46\r\n */\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { SessionService } from '@ecp-caf/caf-common';\r\n\r\n@Injectable()\r\nclass FrameworkSessionService {\r\n\r\n  constructor(@Optional() private sessionService: SessionService) {\r\n  }\r\n\r\n  /**\r\n   * 获取用户SessionId\r\n   */\r\n  getUserSessionId() {\r\n    return this.sessionService.getUserSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取当前功能菜单的SessionId\r\n   */\r\n  getCurrentSessionId(runtimeContext?: any) {\r\n    let sessionId: string;\r\n    const rsi = this.getRuntimeSessionId();\r\n    if (rsi) {\r\n      return rsi;\r\n    }\r\n    if (this.sessionService) {\r\n      if (runtimeContext && runtimeContext.hasOwnProperty('tabId')) {\r\n        const tabId = runtimeContext.tabId;\r\n        sessionId = this.sessionService.getCurrentSeesionId(tabId);\r\n      } else {\r\n        sessionId = this.sessionService.getCurrentSeesionId();\r\n      }\r\n    }\r\n    if (!sessionId) {\r\n      sessionId = this.getUserSessionId();\r\n    }\r\n    return sessionId;\r\n  }\r\n  private getRuntimeSessionId() {\r\n    const hash = window.location.hash;\r\n    const params = this.parse(hash);\r\n    return params && params.rsi || null;\r\n  }\r\n  public parse(queryString: string): { [propName: string]: any } {\r\n    if (!queryString) {\r\n      return {};\r\n    }\r\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n\r\nexport { FrameworkSessionService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\n/**\r\n * BeSession缓存\r\n */\r\ninterface BeSessionStorageStrategy {\r\n  getItem(beSessionKey: string): string;\r\n  setItem(beSessionKey: string, beSessionid: string): void;\r\n  removeItem(beSessionKey: string): void;\r\n  clear(frmSessionId: string, beSessionKey: string): void;\r\n}\r\n\r\n/**\r\n * 基于浏览器SessionStorage的BeSession缓存\r\n * @summary\r\n * 1、SeparatedSession模式下：\r\n *  {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1_beSessionUri1: beSessionId-1,\r\n *      frmSessionId2_beSessionUri2: beSessionId-2,\r\n *    }\r\n *  }\r\n * 2、UnifiedSession模式下（在Debug状态，同模式1）：\r\n * {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1: beSessionId-1,\r\n *      frmSessionId2: beSessionId-2,\r\n *    }\r\n *  }\r\n */\r\nclass SessionStorageBeSessionStorageStrategy implements BeSessionStorageStrategy {\r\n\r\n  /**\r\n   * 缓存Token\r\n   */\r\n  private sessionStorageKey = 'BE_SESSION_ID';\r\n\r\n  /**\r\n   * 获取值\r\n   */\r\n  public getItem(beSessionKey: string): string {\r\n    const beSessions = this.getAllBeSessions();\r\n    return beSessions[beSessionKey];\r\n  }\r\n\r\n  /**\r\n   * 设置值\r\n   */\r\n  public setItem(beSessionKey: string, beSessionId: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    beSessions[beSessionKey] = beSessionId;\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n\r\n  /**\r\n   * 删除值\r\n   */\r\n  public removeItem(beSessionKey: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    if (beSessions[beSessionKey]) {\r\n      delete beSessions[beSessionKey];\r\n    }\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n  /**\r\n   * 清空同一个父Session下所有的缓存\r\n   * @summary\r\n   * 框架内：清空功能菜单token下的所有BeSession缓存；\r\n   * 框架外：只清空当前beSessionUri的，框架外，用的是用户Sessionid，无法统一清理。\r\n   */\r\n  public clear(frmSessionId: string, beSessionUri: string): void {\r\n    const isInFramework = this.isInFramework();\r\n    if (isInFramework === true) {\r\n      this.removeItemsByFrmSessionId(frmSessionId);\r\n    } else {\r\n      this.removeItem(beSessionUri);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空frmSessionId对应的所有子BeSessionId\r\n   */\r\n  private removeItemsByFrmSessionId(frmSessionId: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    Object.keys(beSessions).forEach((beSessionKey: string) => {\r\n      if (beSessionKey.startsWith(frmSessionId) === true) {\r\n        delete beSessions[beSessionKey];\r\n      }\r\n    });\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n  /**\r\n   * 从SessionStorage中获取全部BeSessions\r\n   */\r\n  private getAllBeSessions(): any {\r\n    const beSessionsJson = window.sessionStorage.getItem(this.sessionStorageKey);\r\n    if (!beSessionsJson) {\r\n      return {};\r\n    }\r\n    return JSON.parse(beSessionsJson);\r\n  }\r\n\r\n  /**\r\n   * 设置全部BeSessions到SessionStorage\r\n   */\r\n  setAllBeSessions(beSessions: any): void {\r\n    const beSessionsString = JSON.stringify(beSessions);\r\n    window.sessionStorage.setItem(this.sessionStorageKey, beSessionsString);\r\n  }\r\n  /**\r\n   * 是否在框架内\r\n   */\r\n  private isInFramework(): boolean {\r\n    const hashString = window.location.hash;\r\n    if (!hashString) {\r\n      return false;\r\n    }\r\n    // todo: 不能直接依赖url中的参数，运行框架已经提供相关的获取参数的方法，应该通过运行框架服务获取\r\n    return hashString.indexOf('tabId=') !== -1;\r\n  }\r\n\r\n}\r\n\r\nexport { BeSessionStorageStrategy, SessionStorageBeSessionStorageStrategy };\r\n\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\n\r\nclass HttpHeaderUtil {\r\n\r\n  /**\r\n   * PlainObject => HttpHeaders\r\n   */\r\n  public static convertToHeaders(headers: any) {\r\n    if (!headers) {\r\n      headers = new HttpHeaders();\r\n    }\r\n\r\n    // 已经是HttpHeaders，直接返回\r\n    const isHttpHeaders = headers instanceof HttpHeaders;\r\n    if (isHttpHeaders === true) {\r\n      return headers;\r\n    }\r\n    if (Object.keys(headers).length > 0) {\r\n      let httpHeaders = new HttpHeaders();\r\n      Object.keys(headers).forEach(prop => {\r\n        httpHeaders = httpHeaders.append(prop, headers[prop]);\r\n      });\r\n      headers = httpHeaders;\r\n    } else {\r\n      headers = new HttpHeaders();\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  // #region 添加特定含义的header\r\n\r\n  /**\r\n   * 追加SessionId头\r\n   * @param headers HttpHeaders对象\r\n   * @param context BeSessionId\r\n   */\r\n  public static appendSessionId(headers: HttpHeaders, sessionId: string): HttpHeaders {\r\n    return headers.append('SessionId', sessionId);\r\n  }\r\n\r\n  /**\r\n   * 追加CommonVariable头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 框架会话token，等价于原来的SessionId\r\n   */\r\n  public static appendCafRuntimeCommonVariable(headers: HttpHeaders, commonVariable: string): HttpHeaders {\r\n    return headers.append('X-CAF-Runtime-CommonVariable', commonVariable);\r\n  }\r\n\r\n  /**\r\n   * 追加X-CAF-Runtime-Context头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 等价于BeSessionId\r\n   */\r\n  public static appendCafRuntimeContext(headers: HttpHeaders, context: string): HttpHeaders {\r\n    return headers.append('X-CAF-Runtime-Context', context);\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加Content-Type头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 提交内容的MIME类型，默认为application/json\r\n   */\r\n  public static appendContextType(headers: HttpHeaders, contentType?: string): HttpHeaders {\r\n    contentType = contentType ? contentType : 'application/json';\r\n    return headers.append('Content-Type', contentType);\r\n  }\r\n  public static appendRequireMessage(headers: HttpHeaders, requireMessage = true) {\r\n    return headers.append('Bff-Require-Message', requireMessage.toString());\r\n  }\r\n  /**\r\n   * 组合表单复用，表单实例id\r\n   * @param headers headers\r\n   * @param funcInstId 表单实例id\r\n   */\r\n  public static appendFuncInstId(headers: HttpHeaders, funcInstId: string) {\r\n    return headers.append('Func-Inst-Id', funcInstId);\r\n  }\r\n  /**\r\n   * http headers to json\r\n   * @param headers headers\r\n   */\r\n  public static toJson(headers: HttpHeaders) {\r\n    if (!(headers instanceof HttpHeaders)) {\r\n      return null;\r\n    }\r\n    const result = {};\r\n    headers.keys().forEach(header => {\r\n      const values = headers.getAll(header);\r\n      if (values.length > 1) {\r\n        result[header] = values;\r\n      } else {\r\n        result[header] = values[0] || '';\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { HttpHeaderUtil };\r\n","import { HttpParams } from '@angular/common/http';\r\n\r\n/**\r\n * HttpParams工具类\r\n */\r\nclass HttpParamUtil {\r\n\r\n  /**\r\n   * 将PlainObject=>HttpParams\r\n   */\r\n  public static buildParams(params: any): HttpParams {\r\n    let httpParams = new HttpParams();\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = params[key].toString();\r\n        httpParams = httpParams.append(key, value);\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n}\r\n\r\nexport { HttpParamUtil };\r\n","import { Entity } from '@farris/devkit';\r\nimport { BefRepository } from '../bef_repository';\r\nimport { RequestInfo } from '../types';\r\n\r\nclass RequestInfoUtil {\r\n\r\n  /**\r\n   * 检查是否有requestInfo\r\n   */\r\n  public static hasRequestInfo(options: any): boolean {\r\n    if (!options || !options.body) {\r\n      return false;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.requestInfo && body.requestInfo.dataChange) {\r\n      return true;\r\n    }\r\n    if (body.dataChange) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 检查是否有RquestInfo\r\n   * @summary\r\n   * 产品部依赖了请求时传递RequestInfo，返回时直接取到returnValue的特性。\r\n   */\r\n  public static hasRequestInfoWithR(options: any): boolean {\r\n    if (!options || !options.body) {\r\n      return false;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.RequestInfo && body.RequestInfo.dataChange) {\r\n      return true;\r\n    }\r\n    if (body.dataChange) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(repository: BefRepository<Entity>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: repository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: repository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n\r\n  /**\r\n   * 构造带requestInfo的body（仅适用于body中有多个参数的情况）\r\n   * @summary\r\n   * 一个参数时body=requestInfo，不适用该方法。\r\n   */\r\n  public static buildBodyWithRequestInfo(body: any, repository: BefRepository<Entity>): any {\r\n    if (body.RequestInfo || body.requestInfo) {\r\n      return body;\r\n    }\r\n    const requestInfo = this.buildRequestInfo(repository);\r\n    const bodyWithRequestInfo = Object.assign({}, body, { requestInfo: requestInfo });\r\n    return bodyWithRequestInfo;\r\n  }\r\n  public static getRequestInfo(options: any) {\r\n    if (!options || !options.body) {\r\n      return null;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.requestInfo) {\r\n      return body.requestInfo;\r\n    }\r\n    if (body.dataChange || body.variableChange) {\r\n      return body;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { RequestInfoUtil };\r\n","import { HttpErrorResponse, HttpHeaderResponse, HttpResponse, HttpResponseBase } from '@angular/common/http';\r\n\r\nclass ResponseInfoUtil {\r\n\r\n  /**\r\n   * 将ResponseInfo转换为老接口的数据返回格式\r\n   */\r\n  public static unWrapResponseInfo(result: any) {\r\n\r\n    // 兼容cancel没有返回值的情况\r\n    if (!result) {\r\n      return result;\r\n    }\r\n\r\n    // 没有returnValue的情况下，兼容query取数的的格式\r\n    if (result.hasOwnProperty('returnValue') === false) {\r\n      if (result.hasOwnProperty('result') && result.hasOwnProperty('pagination')) {\r\n\r\n        // 兼容返回带分页的列表数据\r\n        return result.result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // 其他：返回RequestInfo.returnValue的情况\r\n    const returnValue = result.returnValue;\r\n    if (returnValue && returnValue.hasOwnProperty('result') && returnValue.hasOwnProperty('pagination')) {\r\n\r\n      // 兼容返回带分页的列表数据\r\n      return returnValue.result;\r\n    }\r\n    return result.returnValue;\r\n\r\n  }\r\n\r\n  public static isReported401Error(response: HttpResponseBase) {\r\n    return response.status === 401;\r\n  }\r\n  /**\r\n   * 解析后端消息\r\n   * @param result result\r\n   */\r\n  public static parseBackEndMessage(result: any) {\r\n    if (result && result.message && Array.isArray(result.message) && result.message.length > 0) {\r\n      return result.message;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 解析后端错误消息\r\n   * @param error error\r\n   */\r\n  public static parseBackEndError(e: any) {\r\n    const error = e && e.error;\r\n    if (error && error.hasOwnProperty('extensionMessage') && error.extensionMessage && error.extensionMessage.hasOwnProperty('UIMsg') && error.extensionMessage.UIMsg && error.extensionMessage.UIMsg.length > 0) {\r\n      return JSON.parse(error.extensionMessage.UIMsg);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { ResponseInfoUtil };\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// tslint:disable: no-string-literal disable: max-line-length\r\n@Injectable()\r\nexport class HttpService {\r\n  public httpClient: HttpClient;\r\n  private rtf: any;\r\n  constructor(private defaultHttpClient: HttpClient) {\r\n    this.httpClient = defaultHttpClient;\r\n    this.rtf = this.getService();\r\n  }\r\n  /**\r\n   * 遍历获取rtf服务\r\n   */\r\n  private getService() {\r\n    let env: Window = window;\r\n    while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {\r\n      env = window.parent;\r\n    }\r\n    return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};\r\n  }\r\n  /**\r\n   * 是否同源\r\n   * @param environment window\r\n   */\r\n  private isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  private get params() {\r\n    if (this.rtf && this.rtf.hasOwnProperty('session') && typeof this.rtf['session']['getCommonVariable'] === 'function') {\r\n      return this.rtf['session']['getCommonVariable']();\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取运行框架http服务\r\n   */\r\n  public get httpService() {\r\n    if (this.rtf && this.rtf.hasOwnProperty('http') && typeof this.rtf['http']['request'] === 'function') {\r\n      return this.rtf.http;\r\n    }\r\n    return null;\r\n  }\r\n  public request(method: string, url: string, options: any = {}): Observable<any> {\r\n    // todo: 使用运行框架的httpclient导致帮助无法显示数据，暂时撤回\r\n    // if (this.httpService && this.params && this.params.tabId) {\r\n    //   return this.httpService.request$(method, url, options);\r\n    // } else {\r\n    //   return this.defaultHttpClient.request(method, url, options);\r\n    // }\r\n    return this.defaultHttpClient.request(method, url, options);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport { HttpHeaderUtil } from '../utils/index';\r\nimport { BeSessionStorageStrategy } from './bef_session_storage_strategy';\r\nimport { HttpService } from '../http_service';\r\nimport { Injector } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\n/**\r\n * BefSession处理策略类\r\n */\r\nabstract class BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 存储策略\r\n   */\r\n  protected storageStrategy: BeSessionStorageStrategy;\r\n\r\n  /**\r\n   * 框架Session服务\r\n   */\r\n  protected frmSessionService: FrameworkSessionService;\r\n  /**\r\n   * 框架SessionId（用户的或者功能菜单的）\r\n   */\r\n  protected getFrmSessionId(runtimeContext?: any): string {\r\n    return this.frmSessionService.getCurrentSessionId(runtimeContext);\r\n  }\r\n  protected get frmSessionId(): string {\r\n    return this.frmSessionService.getCurrentSessionId();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService) {\r\n    this.storageStrategy = storageStrategy;\r\n    this.frmSessionService = frmSessionService;\r\n  }\r\n\r\n  /**\r\n   * 获取SessionId\r\n   */\r\n  public abstract getSessionId(): Observable<string>;\r\n  public abstract setSessionId(sessionId): void;\r\n  public abstract clearSessionId(): void;\r\n  public abstract extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders;\r\n  public abstract handleReponseHeaders(headers: HttpHeaders): void;\r\n  protected abstract getSessionStorageKey(runtimeContext?: any): string;\r\n\r\n  /**\r\n   * 获取框架SessionId\r\n   */\r\n  public getFrameworkSessionId(runtimeContext?: any) {\r\n    return this.getFrmSessionId(runtimeContext);\r\n  }\r\n\r\n  /**\r\n   * 从缓存中获取BeSession\r\n   */\r\n  protected getSessionIdFromStorage(runtimeContext?: any) {\r\n    const sessionStorageKey = this.getSessionStorageKey(runtimeContext);\r\n    const beSessionId = this.storageStrategy.getItem(sessionStorageKey);\r\n    return beSessionId;\r\n  }\r\n}\r\n\r\n/**\r\n * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）\r\n * @summary\r\n * ----------------------------------------\r\n * 处理原则：\r\n * 1、通过createSession创建；\r\n * 2、每个Repository拥有独立的BeSession；\r\n * 3、访问BE的EAPI时，通过header里的SessionId传递；\r\n * ----------------------------------------\r\n * 兼容性考虑：\r\n * 1、有产品部直接new BeSessionService()，没有传递\r\n */\r\nclass BefSeparatedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n  private injector: Injector;\r\n  /**\r\n   * 创建Session的的EAPI地址\r\n   */\r\n  private beSessionUri: string;\r\n\r\n  /**\r\n   * httpClient\r\n   */\r\n  private httpClient: HttpClient;\r\n\r\n  private httpService: HttpService;\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService,\r\n    httpClient: HttpClient, beBaseUri: string, injector: Injector\r\n  ) {\r\n    super(storageStrategy, frmSessionService);\r\n    this.beSessionUri = beBaseUri;\r\n    this.httpClient = httpClient;\r\n    this.httpService = new HttpService(this.httpClient);\r\n    this.injector = injector;\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getSessionId(): Observable<string> {\r\n    const beSessionId = this.getSessionIdFromStorage();\r\n    if (beSessionId) {\r\n      return of(beSessionId);\r\n    }\r\n    return this.createSession();\r\n\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空Sessionid\r\n   */\r\n  public clearSessionId() {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    // this.storageStrategy.removeItem(sessionKey);\r\n    this.storageStrategy.clear(this.frmSessionId, sessionKey);\r\n  }\r\n\r\n  /**\r\n   * 扩展Session相关头信息\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    const frmSessionId = this.getFrameworkSessionId(runtimeContext);\r\n    const beSessionId = this.getSessionIdFromStorage(runtimeContext);\r\n    headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    if (beSessionId) {\r\n      headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);\r\n      headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);\r\n    }\r\n\r\n    // const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    //if (appContext) {\r\n    // const appId = appContext.ApplicationId;\r\n    headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);\r\n    // }\r\n    // headers = HttpHeaderUtil.appendRequireMessage(headers, true);\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: HttpHeaders): void {\r\n  }\r\n\r\n  /**\r\n   * 创建BeSessionId\r\n   */\r\n  public createSession(): Observable<string> {\r\n    const params: { [propName: string]: any } = {\r\n      responseType: 'text'\r\n    };\r\n    if (!!this.frmSessionId) {\r\n      const appContext = this.injector.get<AppContext>(AppContext, null);\r\n      params.headers = new HttpHeaders({ SessionId: this.frmSessionId });\r\n      params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);\r\n      //if (appContext) {\r\n      // const appId = appContext.ApplicationId;\r\n      params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);\r\n      //}\r\n      params.headers = HttpHeaderUtil.toJson(params.headers);\r\n    }\r\n\r\n    return this.httpService.request('POST', this.beSessionUri, params).pipe(\r\n      tap((beSessionId: string) => {\r\n        this.setSessionId(beSessionId);\r\n      })\r\n    );\r\n  }\r\n\r\n  public extendHttpHeader() {\r\n  }\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   * @summary\r\n   * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；\r\n   * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，\r\n   */\r\n  protected getSessionStorageKey(runtimeContext?: any): string {\r\n    let sessionId = null;\r\n    if (runtimeContext) {\r\n      sessionId = this.getFrameworkSessionId(runtimeContext);\r\n    } else {\r\n      sessionId = this.frmSessionId;\r\n    }\r\n    return `${sessionId}_${this.beSessionUri}`;\r\n  }\r\n\r\n}\r\n\r\n\r\nclass BefUnifiedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 创建Session的的EAPI地址\r\n   */\r\n  private beSessionUri: string;\r\n  private injector: Injector;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService, beBaseUri: string, injector: Injector\r\n  ) {\r\n    super(storageStrategy, frmSessionService);\r\n    this.beSessionUri = beBaseUri;\r\n    this.injector = injector;\r\n  }\r\n\r\n  public getSessionId(): Observable<string> {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    const sessionId = this.storageStrategy.getItem(sessionKey);\r\n    return of(sessionId)\r\n    // return of(null);\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空Sessionid\r\n   */\r\n  public clearSessionId() {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.removeItem(sessionKey);\r\n  }\r\n\r\n  /**\r\n   * 扩展Session相关头信息\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    const frmSessionId = this.getFrameworkSessionId(runtimeContext);\r\n    const beSessionId = this.getSessionIdFromStorage(runtimeContext);\r\n    // headers = HttpHeaderUtil.appendRequireMessage(headers, true);\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const token = appContext.Token;\r\n      headers = HttpHeaderUtil.appendFuncInstId(headers, token);\r\n    }\r\n    headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    if (beSessionId) {\r\n      headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: HttpHeaders): void {\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   * @summary\r\n   */\r\n  protected getSessionStorageKey(runtimeContext?: any): string {\r\n    // const isDebug = false;\r\n    // if (isDebug) {\r\n    //   return `${this.frmSessionId}_${this.beSessionUri}`;\r\n    // } else {\r\n    //   return this.frmSessionId;\r\n    // }\r\n    let sessionId = null;\r\n    if (runtimeContext) {\r\n      sessionId = this.getFrameworkSessionId(runtimeContext);\r\n    } else {\r\n      sessionId = this.frmSessionId;\r\n    }\r\n    return `${sessionId}_${this.beSessionUri}`;\r\n  }\r\n}\r\n\r\nexport { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport {\r\n  BeSessionStorageStrategy, SessionStorageBeSessionStorageStrategy\r\n} from './bef_session_storage_strategy';\r\nimport {\r\n  BefSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy\r\n} from './bef_session_handling_strategy';\r\n\r\n\r\n/**\r\n * BeSession处理策略工厂\r\n */\r\n@Injectable()\r\nclass BefSessionHandlingStrategyFactory {\r\n\r\n  /**\r\n   * 创建BeSession处理策略\r\n   */\r\n  public create(\r\n    handlingStrategyName: string, frmSessionService: FrameworkSessionService,\r\n    beBaseUri: string, httpClient: HttpClient, injector: Injector\r\n  ): BefSessionHandlingStrategy {\r\n\r\n    const storageStrategy = this.createStorageStrategy();\r\n    const beSessionUri = this.createBeSessionUri(beBaseUri);\r\n\r\n    if (handlingStrategyName === 'UnifiedSession') {\r\n      return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beSessionUri, injector);\r\n    } else {\r\n      return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beSessionUri, injector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建BeSession缓存策略\r\n   */\r\n  private createStorageStrategy(): BeSessionStorageStrategy {\r\n    return new SessionStorageBeSessionStorageStrategy();\r\n  }\r\n\r\n  /**\r\n   * 创建BeSession地址\r\n   */\r\n  private createBeSessionUri(beBaseUri: string): string {\r\n    return `${beBaseUri}/service/createsession`;\r\n  }\r\n}\r\n\r\nexport { BefSessionHandlingStrategyFactory };\r\n\r\n\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { Injectable, Injector, InjectFlags, inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport { BE_SESSION_HANDLING_STRATEGY_TOKEN } from '../tokens';\r\nimport { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy } from './bef_session_handling_strategy';\r\nimport { BefSessionHandlingStrategyFactory } from './bef_session_handling_strategy_factory';\r\nimport { AppContext } from '@farris/devkit';\r\n\r\n@Injectable()\r\nclass BefSessionService {\r\n  public beBaseUri: string;\r\n  /**\r\n   * Session处理策略类\r\n   */\r\n  private handlingStrategy: BefSessionHandlingStrategy;\r\n  private injector: Injector;\r\n  /**\r\n   * 构造函数\r\n   * @summary\r\n   * 产品部存在new BeSessionService()的场景，injector可能为空，必须要兼容。\r\n   */\r\n  constructor(\r\n    httpClient: HttpClient, beBaseUri: string,\r\n    frmSessionService: FrameworkSessionService, injector?: Injector\r\n  ) {\r\n    this.beBaseUri = beBaseUri;\r\n    this.injector = injector;\r\n    this.handlingStrategy = this.createHandlingStrategy(injector, httpClient, frmSessionService, beBaseUri);\r\n  }\r\n  /**\r\n   * 获取token\r\n   */\r\n  public get token() {\r\n    return this.handlingStrategy.getFrameworkSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getBeSessionId(): Observable<string> {\r\n    return this.handlingStrategy.getSessionId();\r\n  }\r\n\r\n  /**\r\n   * 设置sessionId\r\n   * @param sessionId sessionId\r\n   */\r\n  public setBeSessionId(sessionId: string) {\r\n    this.handlingStrategy.setSessionId(sessionId);\r\n    this.setSessionId(sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空BeSessionId\r\n   */\r\n  public clearBeSessionId() {\r\n    this.handlingStrategy.clearSessionId();\r\n  }\r\n\r\n  /**\r\n   * 扩展请求header\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    return this.handlingStrategy.extendRequestHeaders(headers, runtimeContext);\r\n  }\r\n\r\n  /**\r\n   * 处理响应header\r\n   */\r\n  public handleResponseHeaders(headers: HttpHeaders): void {\r\n    return this.handlingStrategy.handleReponseHeaders(headers);\r\n  }\r\n\r\n  /**\r\n   * 创建BeSessionId\r\n   * @deprecated\r\n   * 不再提供封装，请自行调用EAPI上的createSession方法。\r\n   * @summary\r\n   * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；\r\n   * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.\r\n   */\r\n  public createBeSession(): Observable<string> {\r\n    const handlingStrategy = this.handlingStrategy as BefSeparatedSessionHandlingStrategy;\r\n    return handlingStrategy.createSession();\r\n  }\r\n  private setSessionId(sessionId: string) {\r\n    const appContext = this.injector.get<AppContext>(AppContext, null, InjectFlags.Optional);\r\n    if (appContext && sessionId) {\r\n      appContext.params.set('sessionId', sessionId);\r\n    }\r\n  }\r\n  /**\r\n   * 创建BeSession处理策略\r\n   * @summary session处理策略\r\n   *\r\n   * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector\r\n   *\r\n   * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`\r\n   *\r\n   * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）\r\n   */\r\n  private createHandlingStrategy(\r\n    injector: Injector, httpClient: HttpClient,\r\n    frmSessionService: FrameworkSessionService, beBaseUri: string\r\n  ): BefSessionHandlingStrategy {\r\n    let handlingStrategyName: string;\r\n    // 开发自己实例化的befSessionService\r\n    if (!injector) {\r\n      handlingStrategyName = 'SeparatedSession';\r\n    } else {\r\n      // bef 实例化\r\n      handlingStrategyName = injector.get<string>(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);\r\n    }\r\n    // 老表单，兼容老的模式，分开创建session\r\n    if (!handlingStrategyName) {\r\n      handlingStrategyName = 'SeparatedSession';\r\n    }\r\n    const handlingStrategyFactory = new BefSessionHandlingStrategyFactory();\r\n    return handlingStrategyFactory.create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector);\r\n  }\r\n}\r\n\r\n\r\nexport { BefSessionService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-05 19:32:10\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-03-05 19:55:27\r\n */\r\n\r\nimport { makePropDecorator } from '@farris/devkit';\r\n\r\n\r\n/**\r\n * 变量元数据名称\r\n */\r\nexport const NG_VARIABLE = '@farris/bef NG_VARIABLE';\r\n\r\n\r\n/**\r\n * NgVariable元数据接口\r\n */\r\nexport interface NgVariable {\r\n\r\n  /**\r\n   * 变量影射\r\n   */\r\n  mapping: string;\r\n  /**\r\n   * 原始数据类型\r\n   */\r\n  originalDataType?: string;\r\n  /**\r\n   * 变量类型（locale|remote）\r\n   */\r\n  category?: string;\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰器工厂接口\r\n */\r\nexport interface NgVariableDecorator {\r\n  (obj?: NgVariable): any;\r\n  new(obj?: NgVariable): any;\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰工厂的工厂\r\n */\r\nexport const NgVariable: NgVariableDecorator =\r\n  makePropDecorator(NG_VARIABLE, (obj: NgVariable) => obj);\r\n","/*\r\n * @Author: Sagi, Lucas, Witt\r\n * @Date: 2018-10-11 17:34:26\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-29 11:39:02\r\n */\r\n// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { Entity, Repository } from '@farris/devkit';\r\n\r\nimport { ChangeDetail, RequestInfo } from '../types';\r\n\r\nimport { BefRestService } from '../bef_rest_service';\r\nimport { BefChangeBuilder } from '../bef_change_builder';\r\nimport { BefChangeHandler } from '../bef_change_handler';\r\n\r\nimport { BefEntityManager } from '../bef_entity_manager';\r\nimport { BefVariableManager } from '../bef_variable_manager';\r\nimport { BefDataService } from '../bef_data_service';\r\n\r\n/**\r\n * 适配老的API，保持兼容\r\n */\r\n@Injectable()\r\nabstract class DeprecatedBefRepository<T extends Entity> extends Repository<T> {\r\n\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: BefEntityManager<T>;\r\n\r\n  /**\r\n   * 变量管理器\r\n   * @internal\r\n   */\r\n  public variableManager: BefVariableManager;\r\n\r\n  /**\r\n   * 取数服务\r\n   * @internal\r\n   */\r\n  protected dataService: BefDataService<T>;\r\n\r\n\r\n  // #region 老的属性包装成get方法进行兼容\r\n\r\n  /**\r\n   * 取数服务\r\n   */\r\n  public get restService(): BefRestService {\r\n    return this.dataService.restService;\r\n  }\r\n\r\n  /**\r\n   * 实体变更（前端）=> BE变更（后端）\r\n   */\r\n  public get changeBuilder(): BefChangeBuilder {\r\n    return this.entityManager.changeBuilder;\r\n  }\r\n\r\n  /**\r\n   * BE变更（后端）=> 实体变更（前端）\r\n   */\r\n  public get changeHandler(): BefChangeHandler {\r\n    return this.entityManager.changeHandler;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n  * 构造函数\r\n  */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // #region 数据访问\r\n\r\n  /**\r\n  * 获取实体集合\r\n  */\r\n  public getList(): Observable<T[]> {\r\n    return this.dataService.getList(null, null, null, null);\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   * @param id 主实体id\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    return this.dataService.getById(id);\r\n  }\r\n\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    return this.dataService.updateById(id);\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并加载\r\n   */\r\n  public create(defaultValue?: any): Observable<any> {\r\n    return this.dataService.create(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public append(defaultValue?: any): Observable<T> {\r\n    return this.dataService.append(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendByPath(fpath: string): Observable<any> {\r\n    return this.dataService.appendByPath(fpath);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 内码\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    return this.dataService.removeById(id, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param id 内码\r\n   * @param ifSave 是否保存\r\n   */\r\n  public removeByIds(ids: string[], ifSave?: boolean): Observable<any> {\r\n    return this.dataService.removeByIds(ids, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   * @param path 路径\r\n   * @param id   内码\r\n   */\r\n  public removeByPath(fpath: string, id: string): Observable<boolean> {\r\n    return this.dataService.removeByPath(fpath, id);\r\n  }\r\n  /**\r\n   * 将id对应的实体的变更提交的服务器端\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    return this.dataService.updateChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 提交path对应实体的变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<any> {\r\n    throw new Error('Not Implement');\r\n  }\r\n  /**\r\n   * 提交所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n    return this.dataService.updateAllChanges();\r\n  }\r\n\r\n  /**\r\n   * 应用变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    return this.dataService.applyChanges();\r\n  }\r\n\r\n  /**\r\n   * 提交数据变更和变量变更，通过retrieve模拟\r\n   * @internal\r\n   */\r\n  public updateDataAndVariableChanges(): Observable<any> {\r\n    const filterConditions: any[] = [];\r\n    const sortConditions: any[] = [];\r\n    const entityFilter = {\r\n      FilterConditions: filterConditions,\r\n      SortConditions: sortConditions,\r\n      IsUsePagination: true,\r\n      Pagination: {\r\n        PageIndex: 1,\r\n        PageSize: 1,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    const entityFilterJson = JSON.stringify(entityFilter);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 没有变更时不再提交变更\r\n    if (this.isEmptyRequestInfo(requestInfo)) {\r\n      return of(null);\r\n    }\r\n    const url = `${this.restService.baseUri}/extension/query?entityFilter=${entityFilterJson}`;\r\n    const body = requestInfo;\r\n    const options = {\r\n      body\r\n    };\r\n    return this.restService.invoke(url, 'PUT', null, options, false, true, true);\r\n  }\r\n\r\n  /**\r\n   * 应用id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    return this.dataService.applyChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 取消变更\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    return this.dataService.cancelChanges(options);\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 数据变更集处理\r\n\r\n  /**\r\n   * 清空所有本地实体的变更集\r\n   */\r\n  public clearAllEntityChanges(): void {\r\n    return this.entityManager.clearAllEntityChanges();\r\n  }\r\n\r\n  /**\r\n   * 获取数据变更\r\n   */\r\n  public getDataChangeDetails(): ChangeDetail[] {\r\n    return this.entityManager.buildAllEntityChangeDetails();\r\n  }\r\n\r\n  /**\r\n   * 处理数据变更\r\n   */\r\n  public handleDataChangeDetails(changeDetails: ChangeDetail[]): void {\r\n    return this.entityManager.handleDataChangeDetails(changeDetails);\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变量变更集处理\r\n\r\n  /**\r\n   * 获取变量变更\r\n   */\r\n  public getVariableChangeDetail(): ChangeDetail {\r\n    return this.variableManager.buildChangeDetail();\r\n  }\r\n\r\n  /**\r\n   * 处理变量变更\r\n   */\r\n  public handleVariableChangeDetail(changeDetail: ChangeDetail) {\r\n    this.variableManager.handleChangeDetail(changeDetail);\r\n  }\r\n\r\n  // #endregion\r\n  /**\r\n   * 变更集是否为空\r\n   * @param requestInfo requestInfo\r\n   */\r\n  private isEmptyRequestInfo(requestInfo: RequestInfo) {\r\n    if (!requestInfo) {\r\n      return true;\r\n    }\r\n    if ((!requestInfo.dataChange || requestInfo.dataChange.length < 1) && (!requestInfo.variableChange || Object.keys(requestInfo.variableChange).length < 1)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { DeprecatedBefRepository };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-07 17:24:38\r\n */\r\n\r\nimport { Entity, EntityList, EntityFactory, EntityCollection, EntityManager } from '@farris/devkit';\r\nimport { ChangeDetail} from './types';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BefChangeBuilder } from './bef_change_builder';\r\nimport { BefChangeHandler } from './bef_change_handler';\r\n\r\n\r\n/**\r\n * 实体管理类：管理Entity和\r\n * @todo\r\n * 1、实体管理应该放在Devkit中；\r\n * 2、目前只是简单代码拆分，待进一步明确职责。\r\n */\r\nclass BefEntityManager<T extends Entity> extends EntityManager<T> {\r\n\r\n\r\n  /**\r\n   * ChangeDetail构造器\r\n   */\r\n  public changeBuilder: BefChangeBuilder;\r\n\r\n  /**\r\n   * ChangeDetail处理器\r\n   */\r\n  public changeHandler: BefChangeHandler;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    super(entityCollection);\r\n    this.changeBuilder = new BefChangeBuilder(this.entityCollection.entityType, this.entityCollection);\r\n    this.changeHandler = new BefChangeHandler();\r\n  }\r\n\r\n\r\n  // #region 处理ChangeDetail相关\r\n\r\n\r\n  /**\r\n   * 获取数据变更\r\n   */\r\n  public buildAllEntityChangeDetails(): ChangeDetail[] {\r\n    const changeDetails: ChangeDetail[] = [];\r\n    const entities = this.entityCollection.getAllEntities();\r\n    entities.forEach((entity: Entity) => {\r\n      if (entity.changes.length === 0) {\r\n        return;\r\n      }\r\n      const changeDetail = this.changeBuilder.build(entity.changes);\r\n      \r\n      // 防止空id的变更被提交\r\n      // @todo：此处判断应该放到更底层，临时修复Bug。\r\n      if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {\r\n        changeDetails.push(changeDetail);\r\n      }\r\n    });\r\n    return changeDetails;\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   */\r\n  public buildEntityChangeDetailById(id: string): ChangeDetail {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (entity.changes.length === 0) {\r\n      return null;\r\n    }\r\n    const changeDetail = this.changeBuilder.build(entity.changes);\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 应用数据变更\r\n   * @param changeDetails ChangeDetail数组\r\n   */\r\n  public handleDataChangeDetails(changeDetails: ChangeDetail[]): void {\r\n    this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 清空所有实体\r\n   */\r\n  public reset() {\r\n    this.entityCollection.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { BefEntityManager };\r\n","import { ChangeDetailType, ChangeDetail } from './types';\r\n\r\n/**\r\n * 变更集工具类\r\n */\r\nclass BefChangeUtil {\r\n\r\n  /**\r\n   * 创建空的ChangeDetail\r\n   * @param type   the type of change\r\n   * @param dataId the identity of the entity whose properties's values have changed\r\n   */\r\n  static createEmpty(type: ChangeDetailType, dataId?: string) {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {}\r\n    };\r\n\r\n    if (dataId) {\r\n      changeDetail.ChangeInfo['DataId'] = dataId ;\r\n    }\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Get changes from an ChangeDetail object or an plain object\r\n   * @param changeDetail 变更详情\r\n   */\r\n  static getChangeInfo(changeDetail: any): any {\r\n\r\n    const isChangeDetail = this.isChangeDetail(changeDetail);\r\n    if (isChangeDetail === true) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether the changeDetial object is an instance of the ChangeDetial class.\r\n   * @param changeDetail\r\n   */\r\n  static isChangeDetail(changeDetail: any) {\r\n\r\n    // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.\r\n    const keys = Object.keys(changeDetail);\r\n    return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;\r\n  }\r\n}\r\n\r\nexport { BefChangeUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-05 19:55:44\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-03-13 20:35:29\r\n */\r\nimport { format } from 'date-fns';\r\nimport { AppContext, FrameContext, UIState } from '@farris/devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { NgVariable } from './decorators';\r\nimport { BefChangeUtil } from './bef_change_util';\r\nimport { Injector, Optional } from '@angular/core';\r\n\r\n\r\n/**\r\n * Be变量管理器\r\n */\r\nclass BefVariableManager {\r\n\r\n  /**\r\n   * 变量元数据\r\n   */\r\n  private ngVariableMap: Map<string, NgVariable>;\r\n\r\n  /**\r\n   * 设置值\r\n   */\r\n  private innerValueMap: Map<string, any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private appContext: AppContext, private ngVariables: any, @Optional() private injector: Injector) {\r\n\r\n    this.ngVariableMap = new Map<string, NgVariable>();\r\n    this.innerValueMap = new Map<string, any>();\r\n\r\n    // 重新组织变量元数据\r\n    Object.keys(ngVariables).forEach((propName: string) => {\r\n      this.ngVariableMap.set(propName, ngVariables[propName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取变更集\r\n   */\r\n  public handleChangeDetail(changeDetail: ChangeDetail): void {\r\n    const changeInfo = changeDetail.ChangeInfo;\r\n    Object.keys(changeInfo).forEach((varName: string) => {\r\n      // 变量元数据\r\n      const ngVariable = this.ngVariableMap.get(varName);\r\n      if (!ngVariable) {\r\n        return;\r\n      }\r\n      const mapping = ngVariable.mapping;\r\n\r\n      // 更新UIState变更\r\n      const newValue = changeInfo[varName];\r\n      const oldValue = this.getValueFromUIState(mapping);\r\n\r\n      if (oldValue === newValue) {\r\n        return;\r\n      }\r\n      // 更新值\r\n      this.setValueToUIState(mapping, newValue);\r\n      this.innerValueMap.set(varName, newValue);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build ChangeDetail instance for all variables.\r\n   */\r\n  public buildChangeDetail(): ChangeDetail {\r\n    const changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n    this.ngVariableMap.forEach((ngVariable: NgVariable, varName: string) => {\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      const oldValue = this.innerValueMap.get(varName);\r\n      if (this.isValueEqual(newValue, oldValue) === false) {\r\n        // 不清除变更，请求成功后清除变更\r\n        // this.innerValueMap.set(varName, newValue);\r\n        this.appendToChangeInfo(changeDetail, varName, newValue);\r\n      }\r\n    });\r\n\r\n    if (Object.keys(changeDetail.ChangeInfo).length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Clear variable values cached in the innerValueMap property.\r\n   */\r\n  public reset() {\r\n    this.innerValueMap.clear();\r\n  }\r\n  /**\r\n   * 清空所有vo变量变更集\r\n   */\r\n  public clearChanges() {\r\n    this.ngVariableMap.forEach((ngVariable: NgVariable, varName: string) => {\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      const oldValue = this.innerValueMap.get(varName);\r\n      if (this.isValueEqual(newValue, oldValue) === false) {\r\n        this.innerValueMap.set(varName, newValue);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 清空只读vo变更\r\n   * @param changeDetail \r\n   * @returns \r\n   */\r\n  public clearChangeDetail(changeDetail: ChangeDetail) {\r\n    if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {\r\n      return;\r\n    }\r\n    Object.keys(changeDetail.ChangeInfo).forEach((key: string) => {\r\n      const ngVariable: NgVariable = this.ngVariableMap.get(key);\r\n      if (!ngVariable) {\r\n        return;\r\n      }\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      this.innerValueMap.set(key, newValue);\r\n    });\r\n  }\r\n  /**\r\n   * Append changed variable to ChangeDetail instance.\r\n   */\r\n  private appendToChangeInfo(changeDetail: ChangeDetail, varName: string, varValue: any): void {\r\n    if (this.isUdtVariable(varValue) === true) {\r\n      const udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n      udtVarChangeDetail.ChangeInfo = varValue;\r\n      changeDetail.ChangeInfo[varName] = udtVarChangeDetail;\r\n    } else {\r\n      changeDetail.ChangeInfo[varName] = varValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从UIState上获取值\r\n   */\r\n  private getValueFromUIState(mapping: string): any {\r\n    const uiState = this.getRootUIState();\r\n\r\n    // 计算value\r\n    const mappingArray = mapping.split('.');\r\n    const value = mappingArray.reduce((accumulator: any, currentValue: any) => {\r\n      return accumulator ? accumulator[currentValue] : null;\r\n    }, uiState);\r\n\r\n    if (value instanceof Date) {\r\n      return format(value, 'yyyy-MM-dd HH:mm:ss');\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 获取根组件上的UIState\r\n   */\r\n  private getRootUIState(): UIState {\r\n\r\n    let rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();\r\n    if (this.injector) {\r\n      const frameContext = this.injector.get<FrameContext>(FrameContext, null);\r\n      if (frameContext) {\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        rootFrameContext = virtualRootFrameContext || rootFrameContext;\r\n      }\r\n    }\r\n    if (!rootFrameContext) {\r\n      return;\r\n    }\r\n    return rootFrameContext.uiState;\r\n  }\r\n\r\n  /**\r\n   * 值比较\r\n   * @todo 临时采用这种方式\r\n   */\r\n  private isValueEqual(srcValue: any, dstValue: any): boolean {\r\n    return JSON.stringify(srcValue) === JSON.stringify(dstValue);\r\n  }\r\n\r\n  /**\r\n   * Check if the object is a plain object\r\n   */\r\n  private isUdtVariable(obj: any): boolean {\r\n    return obj && obj.constructor &&\r\n      obj.toString() === '[object Object]' &&\r\n      obj.constructor.prototype.hasOwnProperty('isPrototypeOf');\r\n  }\r\n\r\n\r\n  /**\r\n   * 设置值到UIState\r\n   * @todo：\r\n   * 1、服务器端不支持；\r\n   * 2、日期类型处理方案待定。\r\n   */\r\n  private setValueToUIState(mapping: string, value: any): void {\r\n    const uiState = this.getRootUIState();\r\n    uiState[mapping] = value;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { BefVariableManager };\r\n","import { RequestInfo } from './types';\r\nimport { BefRepository } from './bef_repository';\r\n\r\n/**\r\n * BefProxy工具类\r\n * @summary\r\n * 1、BefProxy辅助工具类；\r\n * 2、暂时无法归类的代码封装；\r\n */\r\nclass BefProxyUtil {\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(befRepository: BefRepository<any>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: befRepository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: befRepository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n}\r\n\r\nexport { BefProxyUtil };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil, BindingPathConverter\r\n} from '@farris/devkit';\r\n\r\n/**\r\n * Bef数据中各种Path的转换\r\n */\r\nclass BefDataPathUtil {\r\n\r\n  /**\r\n   * 转换成路径数组\r\n   * 返回结果：\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childCodes, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]\r\n   */\r\n  public static convertToPathArray(bindingPath: string | string[], bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    const pathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    pathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      pathArray.push(this.trimTrailingS(propName));\r\n      pathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdu\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade\r\n   */\r\n  public static convertToPathUrl(bindingPath: string | string[], bindingData: BindingData): string {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 转换为表名数组\r\n   * 返回结果：\r\n   * 主表（/）：[]\r\n   * 从表（/childCodes）：[ childCodes ]\r\n   * 从从表（/childCodes/grandCodes [childCode ,grandCode]\r\n   */\r\n  public static convertToObjectCodes(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const objectCodes = [];\r\n    for (let i = 1; i < pathLen; i = i + 2) {\r\n      objectCodes.push(pathArray[i]);\r\n    }\r\n\r\n    return objectCodes;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，包含最后一级的主键\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]\r\n   */\r\n  public static convertToDataIdsForUpdate(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const dataIds = [];\r\n    for (let i = 0; i < pathLen; i = i + 2) {\r\n      dataIds.push(pathArray[i]);\r\n    }\r\n\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，不包含最后一级的主键\r\n   * 主表（/）：[ ]\r\n   * 从表（/childCodes）：[ parentId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId]\r\n   */\r\n  public static convertToDataIdsForAdd(bindingPath: string | string[], bindingData: BindingData) {\r\n    const dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);\r\n    dataIds.pop();\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 将EntityPathString转换为Url\r\n   * @deprecated\r\n   */\r\n  public static convertPathToUrl(path: string): string {\r\n    const subPaths = path.split('/');\r\n    for (let i = subPaths.length - 1; i > 0; i--) {\r\n      if (subPaths[i] && subPaths[i].endsWith('s')) {\r\n        subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1).toLowerCase();\r\n      }\r\n    }\r\n    // url不再转小写，兼容主键有大写字母的情况\r\n    return subPaths.join('/'); // .toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * 去除最后的s\r\n   */\r\n  private static trimTrailingS(str: string) {\r\n    return str.substr(0, str.length - 1);\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有表名的数组\r\n   *\r\n   * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']  \r\n   * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']  \r\n   * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']  \r\n   * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']\r\n   */\r\n  public static convertPathsToNodeCodes(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') === -1).forEach(node => {\r\n      result.push(node);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有实体主键值的数组\r\n   * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']\r\n   */\r\n  public static convertPathsToIds(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') !== -1).forEach(id => {\r\n      result.push(id.split(':')[1]);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { BefDataPathUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 16:55:33\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-10-09 16:44:58\r\n */\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, zip } from 'rxjs';\r\nimport { tap, map, switchMap } from 'rxjs/operators';\r\n\r\nimport { Entity, EventBus, ModifyType, AppContext, DataChangeType, DataTypeInfoUtil, DataPropGroup, ViewModel, ExpressionUtil, BindingList } from '@farris/devkit';\r\n\r\nimport { ResponseInfo, QueryResult, Pagination, RequestInfo, RetrieveParam } from './types';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\nimport { BefRestService } from './bef_rest_service';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefProxyUtil } from './bef_proxy_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BefDataPathUtil } from './bef_data_path_util';\r\n/**\r\n * Bef数据访问服务\r\n * @todo：\r\n * 1、临时将BefRepository相关代码转移到该类中；\r\n * 2、进一步明确职责，调整结构\r\n */\r\n// tslint:disable: no-string-literal\r\nclass BefDataService<T extends Entity> {\r\n\r\n  /**\r\n   * 全局上下文\r\n   */\r\n  private appContext: AppContext;\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  private repository: BefRepository<T>;\r\n\r\n  /**\r\n   * BefRest代理\r\n   */\r\n  public get restProxy(): BefProxy {\r\n    return this.repository.restService.proxy;\r\n  }\r\n\r\n  /**\r\n   * RestService实例(请使用restProxy代替)\r\n   * @deprecated\r\n   */\r\n  public restService: BefRestService;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private injector: Injector, repository: BefRepository<T>) {\r\n    this.repository = repository;\r\n\r\n    const frmSessionService = injector.get<FrameworkSessionService>(FrameworkSessionService);\r\n    const httpClient = injector.get<HttpClient>(HttpClient);\r\n    const serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n\r\n    // 创建BefRestService实例\r\n    const restBaseUri = `${serverUri}/${this.repository.apiUri}`;\r\n\r\n    const eventBus: EventBus = injector.get<EventBus>(EventBus);\r\n    this.restService = new BefRestService(httpClient, restBaseUri, frmSessionService, this.repository, eventBus);\r\n\r\n    this.appContext = injector.get<AppContext>(AppContext);\r\n  }\r\n\r\n  /**\r\n   * 获取实体集合\r\n   */\r\n  public getList(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    if (pageSize !== 0) {\r\n      pageSize = pageSize || this.repository.entityCollection.pageSize;\r\n      pageIndex = pageIndex || this.repository.entityCollection.pageIndex;\r\n    }\r\n    const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const filter$ = this.restProxy.extendQuery(entityFilter, requestInfo);\r\n    return filter$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const queryResult = responseInfo.returnValue as QueryResult;\r\n        const listData = queryResult.result;\r\n        const entities: T[] = [];\r\n        listData.forEach((data: any) => {\r\n          const entity = this.repository.buildEntity(data);\r\n          EntityUtil.appendInitialData(entity, data);\r\n          entities.push(entity);\r\n        });\r\n        // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面\r\n        const serverPaginationInfo = queryResult.pagination as Pagination;\r\n        if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {\r\n          const { pageSize, pageIndex, totalCount } = serverPaginationInfo;\r\n          // 处理主表分页信息\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });\r\n        } else {\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });\r\n        }\r\n        this.repository.entityCollection.loadEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 过滤数据\r\n   * @param filter 过滤条件\r\n   * @param sort 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 当前分页\r\n   */\r\n  public filter(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    if (pageSize !== 0) {\r\n      pageSize = pageSize || this.repository.entityCollection.pageSize;\r\n      pageIndex = pageIndex || this.repository.entityCollection.pageIndex;\r\n    }\r\n    const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const filter$ = this.restProxy.filter(entityFilter, requestInfo);\r\n    return filter$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const queryResult = responseInfo.returnValue as QueryResult;\r\n        const listData = queryResult.result;\r\n        const entities: T[] = [];\r\n        listData.forEach((data: any) => {\r\n          const entity = this.repository.buildEntity(data);\r\n          EntityUtil.appendInitialData(entity, data);\r\n          entities.push(entity);\r\n        });\r\n        // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面\r\n        const serverPaginationInfo = queryResult.pagination as Pagination;\r\n        if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {\r\n          const { pageSize, pageIndex, totalCount } = serverPaginationInfo;\r\n          // 处理主表分页信息\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });\r\n        } else {\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });\r\n        }\r\n        this.repository.entityCollection.loadEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 构造EntityFilter\r\n   */\r\n  private buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n    // @todo：临时兼容老代码，降低改动带来的风险\r\n    if (!filter && !sort && !pageSize && !pageIndex) {\r\n      return null;\r\n    }\r\n\r\n    // 纠正最后一个过滤条件的Relation\r\n    if (filter && filter.length > 0) {\r\n      filter[filter.length - 1].relation = 0;\r\n    }\r\n\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    return entityFilter;\r\n  }\r\n  /**\r\n   * 获取单个实体\r\n   * @param id id\r\n   * @param enableChildrenPagination en\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    if (retrieveParam) {\r\n      return this.getEntityById(id);\r\n    }\r\n    const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue;\r\n        const entity = this.repository.buildEntity(entityData);\r\n        this.repository.entityCollection.loadEntities([entity]);\r\n        return entity;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  public getEntityById(id: string) {\r\n    // 获取所有分页信息\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 构造分页信息\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: any) => {\r\n        const returnValue = responseInfo.returnValue || {};\r\n        const entityData = returnValue.result;\r\n        const serverPaginationInfo = returnValue.pagination;\r\n        this.updatePagination(serverPaginationInfo);\r\n        const entity = this.repository.buildEntity(entityData);\r\n        this.repository.entityCollection.loadEntities([entity]);\r\n        return entity;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']\r\n   * 分页查询从表/从从表数据\r\n   * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']\r\n   * @param paths 通用路径\r\n   * @param pageIndex 页码\r\n   * @param pageSize 分页大小\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string) {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    let nodeCodes = BefDataPathUtil.convertPathsToNodeCodes(paths);\r\n    const entityCodes = nodeCodes.map(node => node.substring(0, node.length - 1));\r\n    let entityName = entityCodes[entityCodes.length - 1];\r\n    // 查询对象可能为从表或从从表\r\n    const pagination = this.repository.entityCollection.getPaginationConfigByPath(`/${entityName}`);\r\n    const { pageSize: ps = 0 } = pagination || {};\r\n    const viewModel = this.injector.get<ViewModel>(ViewModel, null);\r\n    let forceQueryChild = false;\r\n    if (viewModel) {\r\n      forceQueryChild = viewModel.frameContext.appContext.params.get('forceQueryChild') || false;\r\n    }\r\n    if (ps == 0 && !forceQueryChild) {\r\n      return of(null);\r\n    }\r\n    const ids = BefDataPathUtil.convertPathsToIds(paths);\r\n    const parentId = ids[ids.length - 1];\r\n    const params = {\r\n      nodeCodes: entityCodes,\r\n      ids,\r\n      pagination: {\r\n        pageIndex,\r\n        pageSize\r\n      },\r\n      requestInfo\r\n    };\r\n\r\n    const request$ = this.restService.queryChild(params);\r\n    return request$.pipe(\r\n      map(response => {\r\n        const returnValue = response.returnValue;\r\n        if (!returnValue) {\r\n          return null;\r\n        }\r\n        const { result = [], pagination = {} } = returnValue;\r\n        const commonPaths = paths.map((path, index) => {\r\n          if (path.includes(':') && index % 2 === 0) {\r\n            return path.split(':')[1];\r\n          }\r\n          return path;\r\n        });\r\n        const entities = this.repository.entityManager.createEntitiesByPath(`/${commonPaths.join('/')}`, result);\r\n        this.repository.entityCollection.resetEntities(paths, entities);\r\n        // 更新分页信息\r\n        this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}`, { pageIndex: pagination.pageIndex, pageSize: pagination.pageSize });\r\n        this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}_${parentId}`, pagination);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 构造子表分页信息\r\n   */\r\n  private buildChildrenPagination() {\r\n    const paginationInfo = this.repository.entityCollection.getPaginationConfigByPath('/');\r\n    const childPaginationInfo = {};\r\n    const childrenEntityCodes = [];\r\n    DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    // 实体无子表\r\n    if (!childrenEntityCodes || childrenEntityCodes.length < 1) {\r\n      return null;\r\n    }\r\n    Object.keys(paginationInfo).forEach(key => {\r\n      const value = paginationInfo[key];\r\n      if (typeof value === 'object') {\r\n        const entityCode = key && key.includes('_') && key.split('_')[0] || null;\r\n        if (!(entityCode && childrenEntityCodes.includes(`${entityCode}s`))) {\r\n          childPaginationInfo[key] = value;\r\n        }\r\n      }\r\n    });\r\n    return childPaginationInfo;\r\n  }\r\n  /**\r\n   * 更新分页配置信息\r\n   * @param paginationInfo 服务器分页信息\r\n   */\r\n  private updatePagination(paginationInfo: any) {\r\n    if (!paginationInfo) {\r\n      return;\r\n    }\r\n    let childrenEntityCodes: string[] = [];\r\n    DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    childrenEntityCodes = childrenEntityCodes.map(item => item.substr(0, item.length - 1));\r\n    // retrieve之后没有子表数据\r\n    if (!paginationInfo || Object.keys(paginationInfo).length < 1) {\r\n      if (childrenEntityCodes && childrenEntityCodes.length > 0) {\r\n        childrenEntityCodes.forEach((nodeCode: string) => {\r\n          const original = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`);\r\n          if (original) {\r\n            //original.pageIndex = 1;\r\n            //original.total = 0;\r\n            // 重置当前子表公共分页信息\r\n            //this.repository.entityCollection.setPaginationConfigByPath(`/${nodeCode}`, original);\r\n            // 删除当前数据下级表分页信息\r\n            const localPagination = this.repository.entityCollection.getPaginationConfigByPath('/');\r\n            const keys = Object.keys(localPagination).filter(item => item.startsWith(`${nodeCode}_`));\r\n            if (keys && keys.length > 0) {\r\n              keys.forEach(key => {\r\n                this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, { pageIndex: 1, total: 0, pageSize: original.pageSize });\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    Object.keys(paginationInfo).forEach(key => {\r\n      // const entityName = childrenEntityCodes.find(item => key.startsWith(`${item}_`));\r\n      this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, paginationInfo[key]);\r\n    });\r\n  }\r\n  /**\r\n   * 构造retrieve分页信息\r\n   * @description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数\r\n   */\r\n  private buildRetrieveParam() {\r\n    const childPaginationInfo = this.buildChildrenPagination();\r\n    if (!childPaginationInfo || Object.keys(childPaginationInfo).length < 1) {\r\n      return null;\r\n    }\r\n    const retrieveParam: RetrieveParam = { filters: {}, parentIds: {} };\r\n    let childrenEntityCodes: any[] = [];\r\n    ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    Object.keys(childPaginationInfo).forEach(typeName => {\r\n      const entity: any = childPaginationInfo[typeName];\r\n      const pageIndex = entity.pageIndex || 1;\r\n      retrieveParam.filters[typeName] = { pagination: { pageSize: entity.pageSize || 0, pageIndex: pageIndex } };\r\n      // if (this.isChildrenTable(typeName)) {\r\n      //   retrieveParam.parentIds[typeName] = this.getId(typeName, pageIndex);\r\n      // }\r\n    });\r\n\r\n    return retrieveParam;\r\n  }\r\n  /*\r\n  private getId(nodeCode: string, pageIndex: number): string {\r\n    const viewModel = this.injector.get<ViewModel>(ViewModel, null);\r\n    const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};\r\n    if (pageIndex !== originalPageIndex) {\r\n      return null;\r\n    }\r\n    if (viewModel) {\r\n      const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;\r\n      if (bindingList && bindingList.currentId) {\r\n        return bindingList.currentId;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  private isChildrenTable(nodeCode: string) {\r\n    let childrenEntityCodes: any[] = [];\r\n    nodeCode += 's';\r\n    ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    if (childrenEntityCodes && childrenEntityCodes.length > 0) {\r\n      const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);\r\n      return index !== -1;\r\n    }\r\n    return false;\r\n  }*/\r\n  /**\r\n   * 更新并对实体加锁\r\n   * @param id 实体id\r\n   */\r\n  public editById(id: string): Observable<T> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return of(null);\r\n    }\r\n\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    const retrieve$ = this.restProxy.edit(id, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue.data;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        if (entityToUpdate && entityData) {\r\n          this.reloadEntityData(entityToUpdate, entityData);\r\n        }\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    // 如果要更新的实体不存在，返回一个null流；\r\n    // @todo：返回empty()还是null流，为了不影响现有行为，临时返回null流。\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return of(null);\r\n    }\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    if (retrieveParam) {\r\n      return this.updateEntityById(id);\r\n    }\r\n    const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        this.reloadEntityData(entityToUpdate, entityData);\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateEntityById(id: string) {\r\n    // 获取所有分页信息\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 构造分页信息\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: any) => {\r\n        const returnValue = responseInfo.returnValue || {};\r\n        const entityData = returnValue.result;\r\n        const serverPaginationInfo = returnValue.pagination;\r\n        this.updatePagination(serverPaginationInfo);\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        this.reloadEntityData(entityToUpdate, entityData);\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * 重新加载实体数据\r\n   * @param id 要重载的实体id\r\n   * @param entityData 要重载的数据\r\n   * @todo：\r\n   * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；\r\n   * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。\r\n   */\r\n  private reloadEntityData(entity: Entity, entityData: any): void {\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    // 关闭变更检测\r\n    this.appContext.changeDetectionController.detach();\r\n    // retrieve之后已经是最新数据，移除变更\r\n    // entity.load(entityData);\r\n    this.repository.entityCollection.updateEntity(entity, entityData);\r\n    // 重新加载数据不应该产生变更\r\n    entity.changes.splice(0, entity.changes.length);\r\n    // 重新打开变更检测\r\n    this.appContext.changeDetectionController.reattach();\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并加载\r\n   */\r\n  public create(defaultValue?: any) {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const result$ = this.restService.create(defaultValue, requestInfo);\r\n    return result$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        EntityUtil.appendInitialData(newEntity, newData);\r\n        this.repository.entityCollection.loadEntities([newEntity], true);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public append(defaultValue?: any): Observable<T> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const append$ = this.restService.create(defaultValue, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        this.repository.entityCollection.addEntity(newEntity);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 插入数据\r\n   * @param position 数据插入位置\r\n   * @param defaultValue 默认值\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const insert$ = this.restProxy.create(defaultValue, requestInfo);\r\n    return insert$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        this.repository.entityCollection.insertEntity(newEntity, position);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendByPath(fpath: string): Observable<Entity> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const append$ = this.restService.createByPath(fpath, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.entityManager.appendEntityByPath(fpath, newData, newData);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 创建子实体并插入到指定位置\r\n   * @param fpath 父路径\r\n   * @param position 数据插入位置\r\n   */\r\n  public insertByPath(fpath: string, position: 1 | -1) {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const insert$ = this.restProxy.createByPath(fpath, requestInfo);\r\n    return insert$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.entityManager.insertEntityByPath(fpath, newData, newData, position);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 内码\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    ifSave = (ifSave === undefined) ? true : ifSave;\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    let delete$;\r\n    if (ifSave) {\r\n      delete$ = this.restProxy.deleteAndSave(id, requestInfo);\r\n      return delete$.pipe(\r\n        switchMap(() => {\r\n          this.repository.entityCollection.removeEntityById(id);\r\n          return of(true);\r\n        })\r\n      );\r\n    } else {\r\n      delete$ = this.restService.extendDelete(id, requestInfo);\r\n      return delete$.pipe(\r\n        switchMap(() => {\r\n          this.repository.entityCollection.removeEntityById(id);\r\n          this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });\r\n          return of(true);\r\n        })\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   * @param id 要删除的实体id\r\n   */\r\n  public removeAndSaveById(id: string) {\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    const delete$ = this.restProxy.deleteAndSave(id, requestInfo);\r\n    const result$ = delete$.pipe(\r\n      switchMap(() => {\r\n        this.repository.entityCollection.removeEntityById(id);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });\r\n        return of(true);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param id 内码\r\n   * @param ifSave 是否保存\r\n   */\r\n  public removeByIds(ids: string[], ifSave?: boolean): Observable<boolean> {\r\n    ifSave = (ifSave === undefined) ? true : ifSave;\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendBatchDelete(ids, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        if (ifSave) {\r\n          // 执行保存\r\n          return this.applyChangesByIdArray(ids).pipe(\r\n            tap(result => {\r\n              if (result) {\r\n                // 从实体集合中删除\r\n                this.repository.entityCollection.removeEntities(\r\n                  (value) => {\r\n                    return this.checkEntityValueExists(value, ids);\r\n                  }\r\n                );\r\n              }\r\n            })\r\n          );\r\n        } else {\r\n          // 从实体集合中删除\r\n          this.repository.entityCollection.removeEntities(\r\n            (value) => {\r\n              return this.checkEntityValueExists(value, ids);\r\n            }\r\n          );\r\n          if (ids && ids.length > 0) {\r\n            const changes = [];\r\n            ids.forEach(id => {\r\n              changes.push({ dataId: id, changeType: DataChangeType.Delete });\r\n            });\r\n            this.repository.dataChangeHistory.addChanges(changes);\r\n          }\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public batchRemove(ids: string[], ifSave: boolean): Observable<any> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendBatchDeletion(ids, requestInfo);\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        if (ifSave) {\r\n          // 执行保存\r\n          return this.applyChangesByIdArray(ids).pipe(\r\n            tap(result => {\r\n              if (result) {\r\n                // 从实体集合中删除\r\n                this.removeEntities(ids);\r\n              }\r\n            })\r\n          );\r\n        } else {\r\n          // 从实体集合中删除\r\n          this.removeEntities(ids);\r\n          this.addBatchRemoveHistory(ids);\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 添加批量删除记录到变更记录中\r\n   * @param ids ids\r\n   */\r\n  private addBatchRemoveHistory(ids: string[]) {\r\n    if (ids && ids.length > 0) {\r\n      const changes = [];\r\n      ids.forEach(id => {\r\n        changes.push({ dataId: id, changeType: DataChangeType.Delete });\r\n      });\r\n      this.repository.dataChangeHistory.addChanges(changes);\r\n    }\r\n  }\r\n  /**\r\n   * 从实体仓库中批量移除指定id的数据\r\n   * @param ids \r\n   */\r\n  private removeEntities(ids: string[]) {\r\n    this.repository.entityCollection.removeEntities(\r\n      (value) => {\r\n        return this.checkEntityValueExists(value, ids);\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * 检测实体的主键值是否存在于数组中，如果存在返回true\r\n   * @param array 待遍历数组\r\n   */\r\n  private checkEntityValueExists(entity: Entity, primaryValueArray: any[]): boolean {\r\n    let isExistInTargetArray = false;\r\n\r\n    for (let i = 0; i < primaryValueArray.length; i++) {\r\n      if (entity.primaryValue === primaryValueArray[i]) {\r\n        isExistInTargetArray = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isExistInTargetArray;\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   * @param path 路径\r\n   * @param id   内码\r\n   */\r\n  public removeByPath(fpath: string, id: string): Observable<boolean> {\r\n\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendDeletByPath(fpath, id, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      map(() => {\r\n        this.repository.entityManager.removeEntityByPath(fpath, id);\r\n        this.repository.dataChangeHistory.addChange({ fpath, dataId: id, changeType: DataChangeType.Delete });\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 批量删除子级\r\n   * @param fPath 路径\r\n   * @param ids  子级id集合\r\n   */\r\n  public batchRemoveByPath(fPath: string, ids: string): Observable<boolean> {\r\n\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.batchDeleteByPath(fPath, ids, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      map(() => {\r\n        const idArray = ids.split(',');\r\n        if (idArray.length > 0) {\r\n          idArray.forEach((id) => {\r\n            this.repository.entityManager.removeEntityByPath(fPath, id);\r\n            this.repository.dataChangeHistory.addChange({ fpath: fPath, dataId: id, changeType: DataChangeType.Delete });\r\n          });\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 将id对应的实体的变更提交的服务器端\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n\r\n    // 变更集不存在\r\n    if (!entity.changes) {\r\n      return of(true);\r\n    }\r\n\r\n    // 变更集为空\r\n    if (entity.changes.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    const changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n\r\n    const update$ = this.restService.update(changeDetail, requestInfo);\r\n    const result$ = update$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 提交path对应实体的变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<any> {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 提交所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n\r\n    // 遍历实体，提交变更\r\n    const updateResults: Observable<boolean>[] = [];\r\n    const entities: Entity[] = this.repository.entityCollection.toArray();\r\n    if (entities.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    entities.forEach((entity: Entity) => {\r\n      const updateResult$ = this.updateChangesById(entity.primaryValue);\r\n      updateResults.push(updateResult$);\r\n    });\r\n\r\n    // 串联流\r\n    const result$ = zip(...updateResults).pipe(\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.clearAllVariableChanges(requestInfo.variableChange);\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用idArray对应数据的变更\r\n   */\r\n  public applyChangesByIdArray(idArray: string[]): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesByArray(idArray);\r\n        this.repository.dataChangeHistory.clearByIds(idArray);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n        this.repository.dataChangeHistory.clearByIds([id]);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 取消变更\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    const cancel$ = this.restService.cancel(options);\r\n    const result$ = cancel$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const append$ = this.restProxy.batchAppendByPath(path, defaultValues, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const list = responseInfo.returnValue;\r\n        const entities = this.repository.entityManager.createEntitiesByPath(path, list);\r\n        const paths = path.split('/').filter(p => p);\r\n        this.repository.entityManager.appendEntitiesByPath(paths, entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const append$ = this.restProxy.batchAppend(defaultValues, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const list = responseInfo.returnValue;\r\n        const entities = this.repository.buildEntities(list);\r\n        this.repository.entityCollection.addEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @returns \r\n   */\r\n  public hasChanges(): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    return this.restService.hasChanges(requestInfo);\r\n  }\r\n  /**\r\n   * 构造变更集\r\n   */\r\n  public buildRequestInfo(): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: this.repository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: this.repository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n}\r\n\r\nexport { BefDataService };\r\n","import { Injector } from \"@angular/core\";\r\nimport { AppContext, BackEndMessage, BACK_END_MESSAGE_HANDLER_TOKEN, NAMESPACE } from \"@farris/devkit\";\r\n\r\nexport class BackEndMessageUtil {\r\n  public static handleMessage(messages: object[], injector: Injector, options?: any) {\r\n    const namespace = injector.get(NAMESPACE, null);\r\n    const appContext = injector.get<AppContext>(AppContext, null);\r\n    const context: BackEndMessage.IMessageContext = {\r\n      ns: namespace,\r\n      appContext\r\n    };\r\n    const bizMessages = this.buildBackEndMessages(messages);\r\n    const backEndMessage = new BackEndMessage.Message(bizMessages, context);\r\n    const backEndMessageHandler = injector.get<BackEndMessage.IBackEndMessageHandler>(BACK_END_MESSAGE_HANDLER_TOKEN, null);\r\n    if (backEndMessageHandler) {\r\n      backEndMessageHandler.handle(backEndMessage, options);\r\n    }\r\n  }\r\n  public static isBackEndMessageHandlerExist(injector: Injector) {\r\n    const backEndMessageHandler = injector.get<BackEndMessage.IBackEndMessageHandler>(BACK_END_MESSAGE_HANDLER_TOKEN, null);\r\n    return backEndMessageHandler && true || false;\r\n  }\r\n  public static getFormlessMessages(messages: BackEndMessage.IBizMessage[]) {\r\n    const bizMessages = this.buildBackEndMessages(messages) || [];\r\n    return bizMessages.filter((message: BackEndMessage.IBizMessage) => {\r\n      return !message.location || !message.location.columns || message.location.columns.length < 1 || !message.location.nodeCode;\r\n    });\r\n  }\r\n  public static buildBackEndMessages(messages: object[]): BackEndMessage.IBizMessage[] {\r\n    if (!messages || messages.length < 1 || !Array.isArray(messages)) {\r\n      return null;\r\n    }\r\n    const bizMessages: BackEndMessage.IBizMessage[] = [];\r\n    messages.forEach((message: any) => {\r\n      const bizMessage: BackEndMessage.IBizMessage = {\r\n        level: message.level,\r\n        message: message.message\r\n      };\r\n      if (message.hasOwnProperty('location') && message.location) {\r\n        bizMessage.location = {\r\n          nodeCode: message.location.nodeCode,\r\n          rows: message.location.dataIds,\r\n          columns: message.location.columnNames\r\n        };\r\n      }\r\n      bizMessages.push(bizMessage);\r\n    });\r\n    return bizMessages;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { AppContext } from \"@farris/devkit\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { BefSessionService } from \"./bef_session_service\";\r\n\r\n@Injectable()\r\nexport class BefSessionManager {\r\n  private static createSessionHistory = [];\r\n  public static getSessionId(appContext: AppContext, sessionService: BefSessionService): Observable<any> {\r\n    const appId = appContext.ApplicationId;\r\n    const beBaseUri = sessionService.beBaseUri;\r\n    const key = `${appId}_${beBaseUri}`;\r\n    const createSessionIsInvoked = this.createSessionHistory.includes(key);\r\n    if (createSessionIsInvoked) {\r\n      return of(null);\r\n    } else {\r\n      this.createSessionHistory.push(key);\r\n      return sessionService.getBeSessionId();\r\n    }\r\n  }\r\n}","import { throwError, Observable, of, EMPTY } from 'rxjs';\r\nimport { Entity } from '@farris/devkit';\r\nimport { IProxyExtend, ResponseInfo } from './types';\r\nimport { BefRepository } from './bef_repository';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { RequestInfoUtil, ResponseInfoUtil } from './utils';\r\nimport { BackEndMessageUtil } from './utils/back_end_message.util';\r\nimport { BefSessionManager } from './session/bef_session_manager';\r\nimport { LoadingService } from '@farris/ui-loading';\r\n\r\n// tslint:disable: max-line-length tslint:disable: no-string-literal\r\nexport class BefProxyExtend implements IProxyExtend {\r\n  private loadingService: LoadingService;\r\n  constructor(private context: BefRepository<Entity>) {\r\n    const injector = this.context.getInjector();\r\n    if (injector) {\r\n      this.loadingService = injector.get(LoadingService, null);\r\n    }\r\n  }\r\n  /**\r\n   * 请求结果返回\r\n   * @param response response\r\n   * @param ignoreChanges 忽略变更\r\n   */\r\n  public onResponse(response: ResponseInfo, ignoreChanges?: boolean, options?: any) {\r\n    if (response && response.innerDataChange && ignoreChanges !== true) {\r\n      this.context.handleDataChangeDetails(response.innerDataChange);\r\n    }\r\n    if (response && response.innerVariableChange) {\r\n      this.context.handleVariableChangeDetail(response.innerVariableChange);\r\n    }\r\n    const messages = ResponseInfoUtil.parseBackEndMessage(response);\r\n    BackEndMessageUtil.handleMessage(messages, this.context.getInjector());\r\n    this.context.clearAllEntityChanges();\r\n    const requestInfo = RequestInfoUtil.getRequestInfo(options);\r\n    const variableChange = requestInfo && requestInfo.variableChange;\r\n    this.context.clearAllVariableChanges(variableChange);\r\n    if (response && response.hasOwnProperty('returnValue')) {\r\n      return response.returnValue;\r\n    } else {\r\n      return response;\r\n    }\r\n  }\r\n  /**\r\n   * 发生错误\r\n   * @param error error\r\n   * @param selfHandError 自定义错误处理\r\n   * @param ignoreError 忽略错误\r\n   */\r\n  public onError(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any> {\r\n    const formAppContext = this.context.appContext.getFormAppContext();\r\n    const applicationId = formAppContext.ApplicationId;\r\n    const loadingServices = window['DEVKIT_LOADING_SERVICE'];\r\n    const messages = ResponseInfoUtil.parseBackEndError(error);\r\n    BackEndMessageUtil.handleMessage(messages, this.context.getInjector());\r\n    if (this.loadingService) {\r\n      window.setTimeout(() => {\r\n        this.loadingService.clearAll();\r\n      }, 350);\r\n    }\r\n    if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {\r\n      for (const loadingService of loadingServices) {\r\n        if (typeof (loadingService.destroy) === 'function') {\r\n          loadingService.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!!selfHandError) {\r\n      return throwError(error);\r\n    } else {\r\n      const eventBus = this.context.restService.eventBus;\r\n      const applicationContext: any = window[applicationId] || {};\r\n      const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;\r\n      const messages = ResponseInfoUtil.parseBackEndError(error);\r\n      const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);\r\n      const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;\r\n      const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.context.getInjector()) && !isExistFormlessMessage);\r\n      const willThrowException = !!eventBus && isExceptionHandlerExist && needThrowException;\r\n      BackEndMessageUtil.handleMessage(messages, this.context.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: eventBus, error, formAppContext });\r\n      if (!!eventBus && isExceptionHandlerExist) {\r\n        if (ResponseInfoUtil.isReported401Error(error)) {\r\n          return throwError(error);\r\n        }\r\n        if (needThrowException) {\r\n          eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        }\r\n        if (ignoreError) {\r\n          return of(null);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n\r\n    }\r\n  }\r\n  /**\r\n   * 扩展http headers\r\n   * @param headers headers\r\n   */\r\n  public extendHeaders(headers: HttpHeaders, runtimeContext?: any): Observable<{ [propName: string]: any }> {\r\n    const formAppContext = this.context.appContext.getFormAppContext();\r\n    const $getSessionId = BefSessionManager.getSessionId(formAppContext, this.context.restService.sessionService);\r\n    return $getSessionId.pipe(\r\n      switchMap(sessionId => {\r\n        headers = this.context.restService.sessionService.extendRequestHeaders(headers, runtimeContext);\r\n        return of(headers);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 扩展请求参数\r\n   * @param params 参数\r\n   */\r\n  public extendUrl(url: string, params: { [propName: string]: any }): string {\r\n    if (!params) {\r\n      return url;\r\n    }\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = JSON.stringify(params[key]);\r\n        if (url.indexOf('?') === -1) {\r\n          url = `${url}?${key}=${value}`;\r\n        } else {\r\n          url = `${url}&${key}=${value}`;\r\n        }\r\n      }\r\n    }\r\n    return url;\r\n  }\r\n  /**\r\n   * 扩展请求体\r\n   * @param body body\r\n   */\r\n  public extendBody(body): { [propName: string]: any } {\r\n    if (!body || typeof body !== 'object' || Object.keys(body).length < 1) {\r\n      return body;\r\n    }\r\n    Object.keys(body).forEach(name => {\r\n      if (name === 'requestInfo') {\r\n        body['requestInfo'] = this.context.restService.buildRequestInfo();\r\n      }\r\n    });\r\n    // 兼容J版后端body只有一个key时body只传value的情况\r\n    if (Object.keys(body).length === 1) {\r\n      body = Object.values(body)[0];\r\n    }\r\n    return body;\r\n  }\r\n  public parseHeaders(response: any) {\r\n    const sessionIdKey = 'BEFSessionID';\r\n    if (response.headers && response.headers.has(sessionIdKey)) {\r\n      this.context.restService.sessionService.setBeSessionId(response.headers.get(sessionIdKey));\r\n    }\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 17:34:26\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-11 17:23:15\r\n * @todo\r\n * 1、修改command-services中的DataService，调用新的API\r\n * 2、移除DeprecatedBefRepository，启用新API\r\n * 3、修改Repository抽象类，添加新API\r\n * 4、对path做处理，修改为数组\r\n */\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MetadataUtil, Entity, AppContext } from '@farris/devkit';\r\n\r\nimport { NG_VARIABLE } from './decorators';\r\nimport { DeprecatedBefRepository } from './deprecated/deprecated_bef_repository';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefVariableManager } from './bef_variable_manager';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefProxyExtend } from './bef_proxy_extend';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { ChangeDetail } from './types';\r\n/**\r\n * BEF实体仓储\r\n * @description\r\n * 负责与后端的业务实体框架交互，管理业务实体数据 \\\r\n * apiUri示例如下：api/scm/sd/v1.0/empservice，前后均不带斜杠\r\n */\r\n@Injectable()\r\nabstract class BefRepository<T extends Entity> extends DeprecatedBefRepository<T> {\r\n\r\n  private befProxy: BefProxy;\r\n  /**\r\n   * @member {BefProxy} proxy\r\n   * @description 每一个BefRepository都需要一个Bef代理，用来处理http请求\r\n   */\r\n  public set proxy(value) {\r\n    this.befProxy = value;\r\n    this.befProxy.setProxyExtend(new BefProxyExtend(this));\r\n  }\r\n  public get proxy(): BefProxy {\r\n    return this.befProxy;\r\n  }\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: BefEntityManager<T>;\r\n\r\n  /**\r\n   * 变量管理器\r\n   * @internal\r\n   */\r\n  public variableManager: BefVariableManager;\r\n\r\n  public appContext: AppContext;\r\n  /**\r\n   * 取数服务\r\n   * @internal\r\n   */\r\n  protected dataService: BefDataService<T>;\r\n\r\n  public serverUri: string;\r\n  /**\r\n   * @param injector 依赖注入器\r\n   */\r\n  constructor(private injector: Injector) {\r\n    super();\r\n\r\n    if (this.entityCollection) {\r\n      // 初始化实体管理器\r\n      this.entityManager = new BefEntityManager(this.entityCollection);\r\n    }\r\n\r\n    // 初始化变量管理器\r\n    this.appContext = this.injector.get<AppContext>(AppContext);\r\n    const ngVariables = MetadataUtil.getPropsMetadatasByName(this.constructor, NG_VARIABLE);\r\n    this.variableManager = new BefVariableManager(this.appContext, ngVariables, this.injector);\r\n\r\n    // 初始化DataService\r\n    this.dataService = new BefDataService(this.injector, this);\r\n    this.serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sort 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 页码\r\n   * @description\r\n   * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）\r\n   * ```json\r\n   * [\r\n   *   {\r\n   *     \"FilterField\": \"DomainID.DomainID_name\",\r\n   *     \"Compare\": 0,\r\n   *     \"Value\": \"人力资源部\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0,\r\n   *     \"Lbracket\": \"(\",\r\n   *     \"Rbracket\": \")\"\r\n   *   }, {\r\n   *     \"FilterField\": \"BillDate\",\r\n   *     \"Compare\": 3,\r\n   *     \"Value\": \"2021-09-03\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0\r\n   *   }, {\r\n   *     \"FilterField\": \"BillDate\",\r\n   *     \"Compare\": 5,\r\n   *     \"Value\": \"2021-10-05\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0\r\n   *   }\r\n   * ]\r\n   * ```\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析\r\n   * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);\r\n   * ```\r\n   */\r\n  public getEntities(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    return this.dataService.getList(filter, sort, pageSize, pageIndex);\r\n  }\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sorts 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 页码\r\n   * @description\r\n   * 与getEntities方法功能相近，用法相同 \\\r\n   * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上\r\n   * @see {@link getEntities}\r\n   */\r\n  public filter(filter: any[] = [], sorts: any[] = [], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    return this.dataService.filter(filter, sorts, pageSize, pageIndex);\r\n  }\r\n  // #endregion\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param paths 通用路径\r\n   * @param pageIndex 页码\r\n   * @param pageSize 分页大小\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   * @todo 目前并未应用排序和过滤条件\r\n   * @description\r\n   * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \\\r\n   * 通用路径的主键值前必须含有冒号，冒号之前的\"id\"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \\\r\n   * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \\\r\n   * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径\r\n   * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\r\n   * const paths = fullPaths.slice(0, fullPaths.length - 1);\r\n   * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\r\n   * const bindingData = this.viewModel.bindingData;\r\n   * let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n   * nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n   * // 获取上级实体\r\n   * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n   * const parentObject = bindingData.getValue(parentPaths) as BindingObject;\r\n   * if (!parentObject) {\r\n   *   throw new Error('上级实体不存在');\r\n   * }\r\n   * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n   * // 获取绑定路径对应的分页信息\r\n   * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);\r\n   * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);\r\n   * ```\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string) {\r\n    return this.dataService.queryChild(paths, pageIndex, pageSize, filter, sort);\r\n  }\r\n  /**\r\n  * 获取主键为id的实体\r\n  * @param id 主表实体主键\r\n  * @description\r\n  * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \\\r\n  * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {@link updateEntityById} 方法\r\n  */\r\n  public getEntityById(id: string): Observable<T> {\r\n    return this.dataService.getById(id);\r\n  }\r\n\r\n  /**\r\n   * 更新实体数据\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 重新从服务器获取主表上对应主键的实体数据 \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * const rootDataId = this.bindingData.list.currentId;\r\n   * return this.repository.updateEntityById(rootDataId);\r\n   * ```\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    return this.dataService.updateById(id);\r\n  }\r\n  /**\r\n   * 更新实体数据并加锁\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 使用示例：\r\n   * ```typescript\r\n   * id = this.bindingData.list.currentId;  // 编辑当前行\r\n   * const edit$ = this.repository.editEntityById(id);\r\n   * ```\r\n   */\r\n  public editEntityById(id: string): Observable<T> {\r\n    return this.dataService.editById(id);\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建实体\r\n   * @param defaultValue 默认值，JSON对象\r\n   * @description\r\n   * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 在创建新实体后进入编辑状态\r\n   * const create$ = this.repository.createEntity();\r\n   * create$.pipe(\r\n   *   tap(() => {\r\n   *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);\r\n   *   })\r\n   * );\r\n   * ```\r\n   */\r\n  public createEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.create(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param defaultValue 默认值\r\n   * @description 请求创建一个新的实体，并追加到实体仓库（适用于列表）\r\n   */\r\n  public appendEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.append(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 创建并插入新实体（向主表插入）\r\n   * @param position 插入位置\r\n   * @param defaultValue 默认值\r\n   * @description\r\n   * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    return this.dataService.insert(position, defaultValue);\r\n  }\r\n  /**\r\n   * 创建子实体并插入到指定位置（向从表或从从表插入）\r\n   * @param path 父路径\r\n   * @param position 插入位置\r\n   * @description\r\n   * 关于父路径格式，从表形如：\"/1/edus\"，从从表形如：\"/1/edus/12/grades\" \\\r\n   * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \\\r\n   * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \\\r\n   * 插入位置参考 {@link insert} \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径\r\n   * const append$ = this.repository.insertByPath(path, position);\r\n   * ```\r\n   */\r\n  public insertByPath(path: string, position: 1 | -1): Observable<any> {\r\n    return this.dataService.insertByPath(path, position);\r\n  }\r\n  /**\r\n   * 创建子实体并追加到末尾\r\n   * @param fpath 父路径\r\n   * @description\r\n   * 父路径格式参考 {@link insertByPath}\r\n   */\r\n  public appendEntityByPath(fpath: string): Observable<Entity> {\r\n    return this.dataService.appendByPath(fpath);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 主表实体主键\r\n   * @param ifSave 是否保存，可选，默认为true\r\n   * @description\r\n   * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存\r\n   */\r\n  public removeEntityById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    return this.dataService.removeById(id, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体并执行保存\r\n   * @param id 主表实体主键\r\n   */\r\n  public removeEntityAndSaveById(id: string): Observable<boolean> {\r\n    return this.dataService.removeAndSaveById(id);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除父路径下子表中的实体\r\n   * @param fpath 父路径\r\n   * @param id 实体主键\r\n   * @description\r\n   * 父路径格式参考 {@link insertByPath}\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string): Observable<boolean> {\r\n    return this.dataService.removeByPath(fpath, id);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存(默认为false)\r\n   */\r\n  public batchRemove(ids: string[], ifSave: boolean = false): Observable<any> {\r\n    return this.dataService.batchRemove(ids, ifSave);\r\n  }\r\n  /**\r\n   * 批量删除子级实体\r\n   * @param fPath 父路径\r\n   * @param ids 子级id集合\r\n   * @description\r\n   * ids中各个id之间以逗号分隔，父路径格式参考 {@link insertByPath} \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量\r\n   * const remove$ = this.repository.batchRemoveByPath(path, ids);\r\n   * ```\r\n   */\r\n  public batchRemoveByPath(fPath: string, ids: string): Observable<boolean> {\r\n    return this.dataService.batchRemoveByPath(fPath, ids);\r\n  }\r\n  /**\r\n   * 保存主键为id的实体\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 调用该方法会应用id对应实体上的变更 \\\r\n   * ```typescript\r\n   * const id = this.bindingData.list.currentId as string;\r\n   * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用\r\n   * ```\r\n   */\r\n  public saveEntityById(id: string): Observable<boolean> {\r\n    return this.dataService.applyChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 批量保存\r\n   * @description\r\n   * 应用所有变更，比如调用了 {@link removeEntityById} 且未保存则可以通过此方法保存 \\\r\n   * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存\r\n   */\r\n  public saveEntities(): Observable<boolean> {\r\n    return this.dataService.applyChanges();\r\n  }\r\n\r\n  /**\r\n   * 取消实体变更\r\n   * @description 清空所有实体变更，不希望保存变更时调用此方法\r\n   */\r\n  public cancelEntityChanges(): Observable<boolean> {\r\n    return this.dataService.cancelChanges();\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 父路径，参考 {@link insertByPath}\r\n   * @param defaultValues 默认实体数据数组\r\n   * @description\r\n   * 后端接口只支持批量新增子表，批量新增主表目前不支持\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    return this.dataService.batchAppendByPath(path, defaultValues);\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    return this.dataService.batchAppend(defaultValues);\r\n  }\r\n  /**\r\n   * 清空Repositoy内的数据和变量\r\n   * @description 清空所有实体、变量，并清空BeSessionId\r\n   */\r\n  public reset() {\r\n    this.entityManager.reset();\r\n    this.variableManager.reset();\r\n    this.restService.sessionService.clearBeSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取Injector（外部请勿使用）\r\n   * @internal\r\n   */\r\n  public getInjector(): Injector {\r\n    return this.injector;\r\n  }\r\n  /**\r\n   * 清空vo变量变更\r\n   */\r\n  public clearAllVariableChanges(changeDetail: ChangeDetail) {\r\n    this.variableManager.clearChangeDetail(changeDetail);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @returns \r\n   */\r\n  public hasChanges(): Observable<any> {\r\n    return this.dataService.hasChanges();\r\n  }\r\n}\r\n\r\nexport { BefRepository };\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\n\r\n@Injectable()\r\nexport class UriService {\r\n    constructor(@Inject(BE_SERVER_URI_TOKEN) private serverUri: string) {\r\n    }\r\n    /**\r\n     * 扩展eapi基路径\r\n     * @param apiUri eapi基路径\r\n     */\r\n    public extendUri(apiUri: string): string {\r\n        return `${this.serverUri}/${apiUri}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { HttpParams, HttpClient } from '@angular/common/http';\r\nimport { encodeUrl } from '@farris/devkit';\r\nimport { IProxyExtend, RequestInfo, ResponseInfo, ChangeDetail, RetrieveParam } from './types';\r\nimport { BefDataPathUtil } from './bef_data_path_util';\r\nimport { UriService } from './uri_service';\r\nimport { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';\r\nimport { HttpService } from './http_service';\r\n\r\n\r\nconst GET = 'GET';\r\nconst DELETE = 'DELETE';\r\nconst PUT = 'PUT';\r\nconst POST = 'POST';\r\nconst PATCH = 'PATCH';\r\n\r\n/**\r\n * Bef代理类\r\n * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter\r\n * uri 由uriService\r\n */\r\n@Injectable()\r\nexport class BefProxy {\r\n  protected proxyExtend: IProxyExtend;\r\n  /**\r\n   * restful基路径\r\n   */\r\n  protected baseUri: string;\r\n  private httpService: HttpService;\r\n  constructor(public httpClient: HttpClient, public uriService: UriService) {\r\n    this.httpService = new HttpService(this.httpClient);\r\n  }\r\n  /**\r\n   * 设置基路径\r\n   * @param baseUri 基路径\r\n   */\r\n  public setBaseUri(baseUri: string): void {\r\n    this.baseUri = baseUri;\r\n  }\r\n  /**\r\n   * 设置策略模式\r\n   * @param strategy 策略\r\n   */\r\n  public setProxyExtend(proxyExtend: IProxyExtend) {\r\n    this.proxyExtend = proxyExtend;\r\n  }\r\n  /**\r\n   * 查询\r\n   */\r\n  public query(entityFilter?: any): Observable<any> {\r\n    let url = this.baseUri;\r\n    if (entityFilter) {\r\n      const entityFilterJson = JSON.stringify(entityFilter);\r\n      url = `${url}?entityFilter=${entityFilterJson}`;\r\n    }\r\n    return this.request(url, GET);\r\n  }\r\n\r\n  /**\r\n   * 扩展查询\r\n   */\r\n  public extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    let url = `${this.baseUri}/extension/query`;\r\n    if (entityFilter) {\r\n      let entityFilterJson = JSON.stringify(entityFilter);\r\n      entityFilterJson = encodeUrl(entityFilterJson);\r\n      url = `${url}?entityFilter=${entityFilterJson}`;\r\n    }\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options, false);\r\n  }\r\n  /**\r\n   * 查询数据（带过滤条件）\r\n   * @param entityFilter 过滤、排序、分页信息\r\n   * @param requestInfo requestInfo\r\n   * @description 和extendQuery一致，仅将查询参数放到body中\r\n   */\r\n  public filter(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    let url = `${this.baseUri}/extension/filter`;\r\n    let body: any = { requestInfo };\r\n    if (entityFilter) {\r\n      body = { entityFilter, requestInfo };\r\n    }\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options, false);\r\n  }\r\n\r\n  /**\r\n   * 检索数据\r\n   * @param id 单据内码\r\n   * @return 数据对象\r\n   */\r\n  public retrieve(id: string): Observable<any> {\r\n    const url = `${this.baseUri}/${id}`;\r\n    return this.request(url, GET);\r\n  }\r\n  /**\r\n   * @deprecated 方法已经废弃，请勿使用\r\n   */\r\n  public serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/service/retrieve/${id}`;\r\n    const options = {\r\n      body: { retrieveParam, requestInfo }\r\n    };\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param params 参数\r\n   */\r\n  public queryChild(params: any) {\r\n    const url = `${this.baseUri}/service/querychild`;\r\n    const options = { body: params };\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 检索数据（扩展）\r\n   */\r\n  public extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/retrieve/${id}`;\r\n    let body: any = requestInfo;\r\n    if (retrieveParam) {\r\n      body = { retrieveParam, requestInfo };\r\n    }\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 检索数据\r\n   */\r\n  public edit(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/service/edit/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 创建一条数据\r\n   */\r\n  public create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any> {\r\n    const body = {\r\n      defaultValue,\r\n      requestInfo: requestInfo,\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(this.baseUri, POST, null, options);\r\n  }\r\n\r\n  /**\r\n   * 从表新增\r\n   * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}${pathUrl}`;\r\n\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n\r\n  /**\r\n   * 提交变更\r\n   */\r\n  update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any> {\r\n    const body = {\r\n      changeDetail,\r\n      requestInfo: requestInfo,\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n\r\n    return this.request(this.baseUri, PATCH, null, options);\r\n  }\r\n\r\n  /**\r\n   * 执行保存\r\n   */\r\n  public save(requestInfo?: RequestInfo): Observable<any> {\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(this.baseUri, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  public delete(id: string): Observable<any> {\r\n    const url = `${this.baseUri}/${id}`;\r\n    return this.request(url, DELETE);\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   */\r\n  public deleteAndSave(id: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/service/delete/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除（扩展）\r\n   */\r\n  public extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/delete/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除后代\r\n   * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public deletByPath(fpath: string, id: string): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}${pathUrl}/${id}`;\r\n    return this.request(url, DELETE);\r\n  }\r\n\r\n  /**\r\n   * 删除后代（扩展）\r\n   * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}/extension${pathUrl}/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 批量删除后代\r\n   * @param fPath 'extension/{rootId}/cc/batch'\r\n   * @param  ids 子集id\r\n   * @param  requestInfo 请求信息\r\n   */\r\n  public batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fPath);\r\n    const pathArray = pathUrl.split('/');\r\n    if (pathArray.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\r\n    }\r\n    /*   const rootId = pathArray[1];\r\n\r\n    const nameArray = [];\r\n    pathArray.forEach((name, index) => {\r\n      if (index > 1 ) {\r\n        if (name.indexOf('s') !== -1) {\r\n          nameArray.push(name.substr(0, name.length - 1));\r\n        } else {\r\n          nameArray.push(name);\r\n        }\r\n      }\r\n    });\r\n    const childName = nameArray.join('/');*/\r\n    const url = `${this.baseUri}/extension${pathUrl}/batch`;\r\n    const idsArray = ids.split(',');\r\n    const body = {\r\n      ids: idsArray,\r\n      requestInfo: requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 批量删除\r\n   * @param ids 待删除的id数组\r\n   */\r\n  public batchDelete(ids: string[]): Observable<any> {\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n    return this.request(this.baseUri, DELETE, params);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/extension/batchdeletion`;\r\n    const body = {\r\n      ids: ids,\r\n      requestInfo: requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 批量删除（扩展）\r\n   */\r\n  public extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/batchdelete`;\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, params, options);\r\n  }\r\n\r\n\r\n  /**\r\n   * 取消\r\n   */\r\n  public cancel(context?: any): Observable<any> {\r\n    const url = `${this.baseUri}/service/cancel`;\r\n    return this.request(url, POST, null, null, false, false, false, context);\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(path);\r\n    const url = `${this.baseUri}${pathUrl}/batch`;\r\n    const body = {\r\n      requestInfo,\r\n      retrieveDefaultParam: {\r\n        defaultValues\r\n      }\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/batch`;\r\n    const body = {\r\n      requestInfo,\r\n      retrieveDefaultParam: {\r\n        defaultValues\r\n      }\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @param requestInfo requestInfo\r\n   * @returns \r\n   */\r\n  public hasChanges(requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/haschanges`;\r\n    const body = {\r\n      ...requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  // tslint:disable-next-line: max-line-length\r\n  public request(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean, runtimeContext?: any\r\n  ): Observable<any> {\r\n    options = options || {};\r\n\r\n    // 是否自行处理错误\r\n    if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {\r\n      selfHandError = false;\r\n    }\r\n\r\n    // 是否忽略异常继续执行\r\n    if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {\r\n      ignoreError = false;\r\n    }\r\n\r\n    // params\r\n    if (params) {\r\n      // const httpParams = this.buildParams(params);\r\n      options.params = params;\r\n    }\r\n\r\n    // 处理headers\r\n    options.headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n    // 1、判断是否带requestInfo（不区分首字母大小写）;\r\n    // 2、如果传递的是RequestInfo，则转换为requestInfo；\r\n    const hasRequestInfo = this.hasRequestInfo(options);\r\n    if (options && options.body && options.body.hasOwnProperty('RequestInfo')) {\r\n      options.body.requestInfo = options.body.RequestInfo;\r\n      delete options.body.RequestInfo;\r\n    }\r\n    return this.proxyExtend.extendHeaders(options.headers, runtimeContext).pipe(\r\n      switchMap(headers => {\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options);\r\n      }),\r\n      tap((response: any) => this.proxyExtend.parseHeaders(response)),\r\n      map((result: any) => result.body),\r\n      map((result: any) => {\r\n        if (hasRequestInfo) {\r\n          this.proxyExtend.onResponse(result, ignoreChanges, options);\r\n          return result;\r\n        } else {\r\n\r\n          // body里没有requestInfo的情况，模拟老的处理方式（不清理变更、将returnValue解析出来）\r\n          return this.unWrapResponseInfo(result);\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        return this.proxyExtend.onError(error, selfHandError, ignoreError);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 调用httpclient取数\r\n   * @param url url\r\n   * @param method methods\r\n   * @param options options\r\n   */\r\n  protected invoke(url: string, method: string, options: any): Observable<any> {\r\n    if (options.params) {\r\n      url = this.proxyExtend.extendUrl(url, options.params);\r\n      options.params = null;\r\n    }\r\n    if (options.body) {\r\n      options.body = this.proxyExtend.extendBody(options.body);\r\n    }\r\n    options.headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n    const headers$ = this.proxyExtend.extendHeaders(options.headers);\r\n    return headers$.pipe(\r\n      switchMap(headers => {\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options)\r\n          .pipe(\r\n            tap((response: any) => this.proxyExtend.parseHeaders(response)),\r\n            map((result: any) => result.body),\r\n            map((result: any) => this.proxyExtend.onResponse(result, false, options)),\r\n            catchError(error => this.proxyExtend.onError(error, false, false))\r\n          );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 向HttpOptions对象中添加body\r\n   * @param options 原来的options\r\n   * @param body body内容\r\n   */\r\n  private addBodyToOptions(options: any, body: any) {\r\n    options = options || {};\r\n    const mergedOptions = Object.assign(options, { body });\r\n    return mergedOptions;\r\n  }\r\n  /**\r\n   * 构造HttpParams对象\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: object): HttpParams {\r\n    return HttpParamUtil.buildParams(params);\r\n  }\r\n  /**\r\n   * 是否带有RequestInfo\r\n   */\r\n  private hasRequestInfo(options: any): boolean {\r\n    return RequestInfoUtil.hasRequestInfo(options) || RequestInfoUtil.hasRequestInfoWithR(options);\r\n  }\r\n  /**\r\n   * 处理返回值，兼容老版本\r\n   */\r\n  private unWrapResponseInfo(result: any) {\r\n    return ResponseInfoUtil.unWrapResponseInfo(result);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-02-23 13:57:47\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-24 14:10:40\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError, of, EMPTY } from 'rxjs';\r\nimport { switchMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { Entity, EventBus } from '@farris/devkit';\r\nimport { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';\r\nimport { BefRepository } from './bef_repository';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\nimport { BefSessionService } from './session/index';\r\nimport { ChangeDetail, RequestInfo, ResponseInfo, RetrieveParam } from './types';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { UriService } from './uri_service';\r\nimport { BefProxyExtend } from './bef_proxy_extend';\r\nimport { HttpService } from './http_service';\r\nimport { BackEndMessageUtil } from './utils/back_end_message.util';\r\nimport { BefSessionManager } from './session/bef_session_manager';\r\nimport { LoadingService } from '@farris/ui-loading';\r\n\r\nconst GET = 'GET';\r\nconst DELETE = 'DELETE';\r\nconst PUT = 'PUT';\r\nconst POST = 'POST';\r\nconst PATCH = 'PATCH';\r\n\r\n/**\r\n * BEF取数服务\r\n * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。\r\n */\r\n@Injectable()\r\nclass BefRestService {\r\n\r\n  private repository: BefRepository<Entity>;\r\n  private loadingService: LoadingService;\r\n  /**\r\n   * httpClient\r\n   */\r\n  private httpClient: HttpClient;\r\n  private httpService: HttpService;\r\n\r\n  /**\r\n   * 会话服务\r\n   */\r\n  public sessionService: BefSessionService;\r\n\r\n  /**\r\n   * 接口根Uri\r\n   */\r\n  public baseUri: string;\r\n\r\n  /**\r\n   * 事件总线\r\n   */\r\n  public eventBus: EventBus;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param httpClient http服务\r\n   * @param serverUri 应用服务器地址\r\n   * @param beUri BE API地址\r\n   */\r\n  constructor(\r\n    httpClient: HttpClient, baseUri: string,\r\n    frmSessionService: FrameworkSessionService,\r\n    repository: BefRepository<Entity>,\r\n    eventBus?: EventBus\r\n  ) {\r\n    this.httpClient = httpClient;\r\n    this.httpService = new HttpService(this.httpClient);\r\n    this.baseUri = baseUri;\r\n    const injector = repository.getInjector();\r\n    this.sessionService = new BefSessionService(httpClient, baseUri, frmSessionService, injector);\r\n    this.repository = repository;\r\n    this.eventBus = eventBus;\r\n    if (injector) {\r\n      this.loadingService = injector.get(LoadingService, null);\r\n    }\r\n  }\r\n\r\n\r\n  // #region 代理相关\r\n\r\n  /**\r\n   * 获取Bef代理\r\n   */\r\n  public get proxy(): BefProxy {\r\n    if (!!this.repository.proxy) {\r\n      return this.repository.proxy;\r\n    } else {\r\n      return this.createBefProxy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建Bef代理\r\n   */\r\n  private createBefProxy() {\r\n    const serverUri = this.repository.serverUri;\r\n    const uriService = new UriService(serverUri);\r\n    const defaultProxy = new BefProxy(this.httpClient, uriService);\r\n    defaultProxy.setBaseUri(this.baseUri);\r\n    const extend = new BefProxyExtend(this.repository);\r\n    defaultProxy.setProxyExtend(extend);\r\n    return defaultProxy;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 基本CRUD方法\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public query(entityFilter?: any): Observable<any> {\r\n    return this.proxy.query(entityFilter);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendQuery(entityFilter, requestInfo);\r\n  }\r\n  /**\r\n   * 分页查询各从表数据\r\n   * @param id 主表id\r\n   * @param retrieveParam 参数\r\n   */\r\n  public serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any> {\r\n    return this.proxy.serviceRetrieve(id, retrieveParam, requestInfo);\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param params 查询参数\r\n   */\r\n  public queryChild(params: any) {\r\n    return this.proxy.queryChild(params);\r\n  }\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public retrieve(id: string): Observable<any> {\r\n    return this.proxy.retrieve(id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo> {\r\n    return this.proxy.extendRetrieve(id, requestInfo, retrieveParam);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.create(defaultValue, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.createByPath(fpath, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.update(changeDetail, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public save(requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.save(requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public delete(id: string): Observable<any> {\r\n    return this.proxy.delete(id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendDelete(id, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public deletByPath(fpath: string, id: string): Observable<any> {\r\n    return this.proxy.deletByPath(fpath, id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendDeletByPath(fpath, id, requestInfo);\r\n  }\r\n  public batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.batchDeleteByPath(fPath, ids, requestInfo);\r\n  }\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public batchDelete(ids: string[]): Observable<any> {\r\n    return this.proxy.batchDelete(ids);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendBatchDelete(ids, requestInfo);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param requestInfo requestInfo\r\n   */\r\n  public extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any> {\r\n    return this.proxy.extendBatchDeletion(ids, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public cancel(options?: any): Observable<any> {\r\n    return this.proxy.cancel(options);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @param requestInfo requestInfo\r\n   * @returns \r\n   */\r\n  public hasChanges(requestInfo: RequestInfo): Observable<any>{\r\n    return this.proxy.hasChanges(requestInfo);\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region request方法\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public request(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean\r\n  ): Observable<any> {\r\n    return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, false);\r\n  }\r\n  // tslint:disable: align\r\n\r\n  /**\r\n   * 调用后端方法\r\n   * @param url url\r\n   * @param method method\r\n   * @param params params\r\n   * @param options options\r\n   * @param selfHandError 自己处理异常\r\n   * @param ignoreError 忽略错误\r\n   * @param ignoreChanges 忽略变更\r\n   */\r\n  public invoke(url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean) {\r\n    if (options && options.body && options.body.RequestInfo) {\r\n      throw new Error('请使用requestInfo提交变更');\r\n    }\r\n    return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, true);\r\n  }\r\n\r\n  /**\r\n   * 内部的request方法\r\n   */\r\n  private innerRequest(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean,\r\n    useCorrectRequestInfoCheckMethod?: boolean\r\n  ) {\r\n    options = options || {};\r\n    const befSessionIdKey = 'BEFSessionID';\r\n\r\n    // 是否自己处理异常\r\n    if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {\r\n      selfHandError = false;\r\n    }\r\n\r\n    // 是否忽略异常继续执行\r\n    if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {\r\n      ignoreError = false;\r\n    }\r\n\r\n    // 选择检查RequestInfo的方法\r\n    if (typeof (useCorrectRequestInfoCheckMethod) === 'undefined' || typeof (useCorrectRequestInfoCheckMethod) !== 'boolean') {\r\n      useCorrectRequestInfoCheckMethod = false;\r\n    }\r\n    const checkRequestInfoMethod = useCorrectRequestInfoCheckMethod ? this.existRequestInfo : this.hasRequestInfo;\r\n\r\n    // params\r\n    if (params) {\r\n      // const httpParams = this.buildParams(params);\r\n      options.params = params;\r\n    }\r\n\r\n    // 带有requestInfo的请求，请求成功后清空变更集\r\n    const hasRequestInfo = checkRequestInfoMethod(options);\r\n    let headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n\r\n    // 串联session流和http流\r\n    const formAppContext = this.repository.appContext.getFormAppContext();\r\n    return BefSessionManager.getSessionId(formAppContext, this.sessionService).pipe(\r\n      switchMap((sessionId: string) => {\r\n        headers = this.sessionService.extendRequestHeaders(headers);\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options);\r\n      }),\r\n      tap((response: any) => {\r\n        if (response.headers && response.headers.has(befSessionIdKey)) {\r\n          this.sessionService.setBeSessionId(response.headers.get(befSessionIdKey));\r\n        }\r\n      }),\r\n      map((response: any) => response.body),\r\n      map((result: any) => {\r\n        const messages = ResponseInfoUtil.parseBackEndMessage(result);\r\n        BackEndMessageUtil.handleMessage(messages, this.repository.getInjector());\r\n\r\n        return this.handleReponseInfo(result, hasRequestInfo, ignoreChanges, options);\r\n      }),\r\n      catchError((error: any) => {\r\n\r\n        return this.handleErrors(error, selfHandError, ignoreError);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 处理返回结果\r\n   */\r\n  public handleReponseInfo(result: any, hasRequestInfo: boolean, ignoreChanges: boolean, options: any): any {\r\n    if (hasRequestInfo) {\r\n      // 如果有带有RequestInfo，则按新结构处理\r\n      // 1、应用服务器端返回的变更；\r\n      // 2、清空本地变更集；\r\n      // 3、返回新结构\r\n      if (result && result.innerDataChange && ignoreChanges !== true) {\r\n        this.repository.handleDataChangeDetails(result.innerDataChange);\r\n      }\r\n      if (result && result.innerVariableChange) {\r\n        this.repository.handleVariableChangeDetail(result.innerVariableChange);\r\n      }\r\n      this.repository.clearAllEntityChanges();\r\n      const requestInfo = RequestInfoUtil.getRequestInfo(options);\r\n      const variableChange = requestInfo && requestInfo.variableChange;\r\n      this.repository.clearAllVariableChanges(variableChange);\r\n      return result;\r\n    } else {\r\n      // 如果有没有RequestInfo，则按老的方式处理\r\n      // 1、不处理服务器端返回的变更：跟老的行为一样；\r\n      // 2、不清理本地变更：因为变更没有提交；\r\n      // 3、返回老的结构：兼容老的代码\r\n      return this.unWrapResponseInfo(result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 错误处理\r\n   */\r\n  public handleErrors(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any> {\r\n    this.clearLoading();\r\n\r\n    if (!!selfHandError) {\r\n      return throwError(error);\r\n    } else {\r\n      const formAppContext = this.repository.appContext.getFormAppContext();\r\n      const applicationId = formAppContext.ApplicationId;\r\n      const applicationContext: any = window[applicationId] || {};\r\n      const messages = ResponseInfoUtil.parseBackEndError(error);\r\n      const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);\r\n      const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;\r\n      const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;\r\n      const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.repository.getInjector()) && !isExistFormlessMessage);\r\n      const willThrowException = !!this.eventBus && isExceptionHandlerExist && needThrowException;\r\n      BackEndMessageUtil.handleMessage(messages, this.repository.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: this.eventBus, error, formAppContext });\r\n      if (!!this.eventBus && isExceptionHandlerExist) {\r\n        if (ResponseInfoUtil.isReported401Error(error)) {\r\n          return throwError(error);\r\n        }\r\n        if (needThrowException) {\r\n          this.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        }\r\n        if (ignoreError) {\r\n          return of(null);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    }\r\n\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 工具方法\r\n\r\n  /**\r\n   * 清空Loading\r\n   */\r\n  private clearLoading(): void {\r\n    const ifLoadingExists = window['DEVKIT_LOADING_SERVICE'] &&\r\n      window['DEVKIT_LOADING_SERVICE'] instanceof Array &&\r\n      window['DEVKIT_LOADING_SERVICE'].length > 0 || false;\r\n\r\n    if (ifLoadingExists === false) {\r\n      this.clearAllLoading();\r\n      return;\r\n    }\r\n\r\n    const loadingServices: any[] = window['DEVKIT_LOADING_SERVICE'];\r\n    for (const service of loadingServices) {\r\n      if (typeof (service.destroy) === 'function') {\r\n        service.destroy();\r\n      }\r\n    }\r\n    this.clearAllLoading();\r\n  }\r\n  private clearAllLoading() {\r\n    if (this.loadingService) {\r\n      window.setTimeout(() => {\r\n        this.loadingService.clearAll();\r\n      }, 350);\r\n    }\r\n  }\r\n  /**\r\n   * 处理返回值，兼容老版本\r\n   */\r\n  private unWrapResponseInfo(result: any): any {\r\n    return ResponseInfoUtil.unWrapResponseInfo(result);\r\n  }\r\n\r\n  /**\r\n   * 是否带有RequestInfo\r\n   */\r\n  private hasRequestInfo(options: any): boolean {\r\n    return RequestInfoUtil.hasRequestInfoWithR(options);\r\n  }\r\n  /**\r\n   * 是否带有requestInfo\r\n   */\r\n  private existRequestInfo(options: any) {\r\n    return RequestInfoUtil.hasRequestInfo(options);\r\n  }\r\n\r\n  /**\r\n   * 构造HttpParams对象\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: any): HttpParams {\r\n    return HttpParamUtil.buildParams(params);\r\n  }\r\n\r\n  /**\r\n   * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）\r\n   * @body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}\r\n   */\r\n  public buildBodyWithRequestInfo(body: any): any {\r\n    return RequestInfoUtil.buildBodyWithRequestInfo(body, this.repository);\r\n  }\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public buildRequestInfo(): RequestInfo {\r\n    return RequestInfoUtil.buildRequestInfo(this.repository);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { BefRestService };\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { switchMap, map, tap, catchError } from 'rxjs/operators';\r\nimport { ILookupHttpService, RemoteParams, LookupGridResult } from '@farris/ui-lookup';\r\nimport { Repository, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { ResponseInfo } from './types';\r\nimport { LoadingService, LoadingConfig, LoadingComponent } from '@farris/ui-loading';\r\n/**\r\n * 帮助Rest取数服务\r\n */\r\n@Injectable()\r\nexport class BefLookupRestService implements ILookupHttpService {\r\n  private loadingService: LoadingService;\r\n  private befRepository: BefRepository<any>;\r\n\r\n  /**\r\n   * 帮助取数上下文\r\n   */\r\n  public context: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    repository: Repository<any>,\r\n    @Optional() private frameContext: FrameContext\r\n  ) {\r\n    this.befRepository = <BefRepository<any>>repository;\r\n    this.registerDestroyEvent();\r\n    this.loadingService = this.frameContext && this.frameContext.injector.get(LoadingService, null);\r\n  }\r\n  private registerDestroyEvent() {\r\n    if (this.frameContext && this.frameContext.destorySignal) {\r\n      this.frameContext.destorySignal.subscribe(() => {\r\n        this.frameContext = null;\r\n        this.befRepository = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  public getData(helpMetadataId: string, data?: RemoteParams): Observable<LookupGridResult> {\r\n    const tableName = helpMetadataId.split('.')[0];\r\n    const labelId = helpMetadataId.split('.')[1];\r\n    data = data || {};\r\n    if (this.frameContext) {\r\n      const primaryValue = this.frameContext.bindingData.list.currentId;\r\n      data['currentForm'] = {\r\n        id: primaryValue\r\n      };\r\n    }\r\n    const enableExtendLoadMethod = this.ifEnableExtendLoadMethod(helpMetadataId);\r\n    if (enableExtendLoadMethod === true) {\r\n      return this.extendGetHelpData(labelId, tableName, data);\r\n    }\r\n    return this.getHelpData(labelId, tableName, data);\r\n  }\r\n  public saveUserSettings(data) {\r\n    const url = '/api/runtime/bcc/v1.0/datagrid/settings';\r\n    return this.befRepository.restService.invoke(url, 'POST', null, { body: data }, false).pipe(\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getUserSettings(key) {\r\n    const url = '/api/runtime/bcc/v1.0/datagrid/settings/' + key;\r\n    return this.befRepository.restService.invoke(url, 'GET', null, null, false).pipe(\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 是否启用扩展取数方法\r\n   */\r\n  private ifEnableExtendLoadMethod(helpMetadataId: string) {\r\n\r\n    // 优先使用context里的设置\r\n    if (this.context && this.context.hasOwnProperty('enableExtendLoadMethod')) {\r\n      return this.context.enableExtendLoadMethod;\r\n    }\r\n\r\n    // context没有设置时，继续使用通过指令设置的开关\r\n    let enableExtendLoadMethod = false;\r\n    if (this.frameContext) {\r\n      const befApiUrl = this.frameContext.repository.apiUri;\r\n      const enableKey = `${helpMetadataId}@${befApiUrl}`;\r\n      enableExtendLoadMethod = this.frameContext.getParam(enableKey);\r\n    }\r\n    return enableExtendLoadMethod;\r\n  }\r\n\r\n  /**\r\n   * 老的帮助取树\r\n   */\r\n  private getHelpData(labelId: string, tableName: string, data: any): Observable<LookupGridResult> {\r\n    const url = `${this.befRepository.restService.baseUri}/elementhelps/${labelId}`;\r\n    const update$ = this.befRepository.updateDataAndVariableChanges();\r\n\r\n    const result$ = update$.pipe(\r\n      switchMap(() => {\r\n        this.extendQueryParam(data);\r\n        // tslint:disable-next-line: max-line-length\r\n        return this.befRepository.restService.invoke(url, 'GET', { nodeCode: tableName, queryParam: JSON.stringify(data) }, null, false).pipe(\r\n          catchError(error => {\r\n            this.clearLoading();\r\n            const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n            return EMPTY;\r\n          })\r\n        );\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 扩展的帮助取数\r\n   */\r\n  private extendGetHelpData(labelId: string, tableName: string, data: any): Observable<LookupGridResult> {\r\n    const url = `${this.befRepository.restService.baseUri}/extension/elementhelps`;\r\n    this.extendQueryParam(data);\r\n    const body = {\r\n      labelId: labelId,\r\n      nodeCode: tableName,\r\n      queryParam: data,\r\n      requestInfo: this.befRepository.restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n\r\n    const result$ = this.befRepository.restService.invoke(url, 'PUT', null, options, false, true);\r\n    return result$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        return responseInfo && responseInfo.returnValue || null;\r\n      }),\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      }\r\n      ),\r\n    );\r\n  }\r\n  private clearLoading() {\r\n    if (this.loadingService) {\r\n      this.loadingService.clearAll();\r\n    }\r\n  }\r\n  private convert2TreeDataWithPathCode(data: any[], layer = 1, parentPathCode = '01') {\r\n    let nodes = data.filter(d => d.layer === layer && d.pathcode === parentPathCode);\r\n    if (layer > 1) {\r\n      nodes = data.filter(d => d.layer === layer && d.pathcode.substr(0, (layer - 1) * 2) === parentPathCode);\r\n    }\r\n    if (nodes.length) {\r\n      const treeNodes = nodes.map(n => {\r\n        return {\r\n          data: n,\r\n          children: []\r\n        };\r\n      });\r\n\r\n      treeNodes.forEach(tn => {\r\n        const _tns = this.convert2TreeDataWithPathCode(data, tn.data.layer + 1, tn.data.pathcode);\r\n        tn.children.push(..._tns);\r\n      });\r\n\r\n      return treeNodes;\r\n    }\r\n  }\r\n  private extendQueryParam(queryParam: any) {\r\n    if (queryParam && typeof queryParam === 'object') {\r\n      const paths = this.getPath();\r\n      queryParam.relationFilterFieldInfo = paths;\r\n    }\r\n  }\r\n  private getPath(): string {\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const rid = this.frameContext.viewModel.bindingData.list.currentId; // root表数据id\r\n    let path = rid;\r\n\r\n    const subPaths = bindingPath.split('/').filter(p => p);\r\n    if (subPaths.length > 0) {\r\n      let subData: any = this.frameContext.viewModel.bindingData;\r\n      for (let index = 0; index < subPaths.length; index++) {\r\n        const subPath = subPaths[index];\r\n        subData = subData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);\r\n        }\r\n        path += `/${subPath.substring(0, subPath.length - 1)}/${subData.currentId}`;\r\n      }\r\n      // path += '/' + subPaths[subPaths.length - 1]+'/' + ;\r\n    }\r\n    return path;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ILookupHttpService, RemoteParams, LookupGridResult } from '@farris/ui-lookup';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { map } from 'rxjs/operators/map';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\n\r\n\r\n/**\r\n * 帮助Rest取数服务\r\n */\r\n@Injectable()\r\nexport class BefLookupDefaultService implements ILookupHttpService {\r\n    private befRepository: BefRepository<any>;\r\n\r\n    constructor(repository: Repository<any>, private sessionService: FrameworkSessionService) {\r\n        this.befRepository = <BefRepository<any>>repository;\r\n    }\r\n\r\n    createSession(url: string) {\r\n        const userSessionID = this.sessionService.getUserSessionId();\r\n        if (userSessionID) {\r\n            return this.befRepository.restService.invoke(url, 'POST', null, {\r\n                headers: new HttpHeaders({ 'SessionId': userSessionID }),\r\n                responseType: 'text'\r\n            }, false).pipe(\r\n                switchMap((str: string) => {\r\n                    return of({ status: true, payload: str });\r\n                })\r\n            );\r\n        } else {\r\n            return of({ status: false, payload: '用户登录信息已过期，请重新登录' });\r\n        }\r\n    }\r\n\r\n    getData(url: string, params?: RemoteParams): Observable<LookupGridResult> {\r\n\r\n        let entityFilter = {};\r\n        if (params.condition) {\r\n            entityFilter = params.condition;\r\n        }\r\n\r\n        if (url[url.length - 1] === '/') {\r\n            url = url.substr(0, url.length - 1);\r\n        }\r\n\r\n        let queryUrl = `${url}/extension/query`, createSessionUrl = `${url}/service/createsession`;\r\n\r\n        if (entityFilter) {\r\n            const entityFilterJson = JSON.stringify(entityFilter);\r\n            queryUrl = `${queryUrl}?entityFilter=${entityFilterJson}`;\r\n        }\r\n\r\n\r\n        return this.createSession(createSessionUrl).pipe(\r\n            switchMap((usrSess: any) => {\r\n                if (usrSess.status) {\r\n                    const sessionId = usrSess.payload;\r\n                    const options: any = {};\r\n                    // if (options.headers) {\r\n                    //     options.headers = options.headers.append('SessionId', usrSess.payload);\r\n                    // } else {\r\n                    // options.headers = new HttpHeaders({ SessionId: sessionId });\r\n                    // }\r\n                    // const token = this.befRepository.restService.sessionService.token;\r\n                    // options.headers = options.headers.append('X-CAF-Runtime-CommonVariable', token);\r\n                    // options.headers = options.headers.append('X-CAF-Runtime-Context', sessionId);\r\n                    return this.befRepository.restService.invoke(queryUrl, 'PUT', null, options, false);\r\n                } else {\r\n                    // @todo: ng7\r\n                    // return new ErrorObservable(usrSess.payload);\r\n                    throw new Error(usrSess.payload);\r\n                }\r\n            }),\r\n            map((res: any) => {\r\n                const val = res.returnValue;\r\n                const data = { items: val.result };\r\n                if (val.pagination) {\r\n                    return Object.assign({}, data, {\r\n                        total: val.pagination.totalCount,\r\n                        pageInfo: {\r\n                            pageSize: val.pagination.pageSize,\r\n                            pageIndex: val.pagination.pageIndex,\r\n                            enablePager: true\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return data;\r\n            })\r\n        )\r\n    }\r\n\r\n}\r\n","import { BefRepository } from './bef_repository';\r\n\r\nexport class BefRepositoryUtil {\r\n  /**\r\n   * 检查BefRepository是否存在未保存数据\r\n   * @param befRepository \r\n   */\r\n  public static isExistUnsaveData(befRepository: BefRepository<any>): boolean {\r\n    let hasUnsavedData = false;\r\n    if (!befRepository || !befRepository.entityCollection) {\r\n      throw 'Current Object is null or it\\'s entityCollection is null.';\r\n    }\r\n\r\n    const entityArray = befRepository.entityCollection.toArray();\r\n    if (befRepository.dataChangeHistory.isChanged()) {\r\n      return true;\r\n    }\r\n    for (let i = 0; i < entityArray.length; i++) {\r\n      if (entityArray[i].changes.length > 0) {\r\n        hasUnsavedData = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasUnsavedData;\r\n  }\r\n\r\n}\r\n","export class Uri {\r\n    constructor(private url: string, private paths: { [propName: string]: any } = null) {\r\n        if (!!this.paths) {\r\n            Object.keys(paths).forEach(path => {\r\n                if (this.url.indexOf(`{${path}}`) !== -1) {\r\n                    this.url = this.url.replace(`{${path}}`, `${paths[path]}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public toString() {\r\n        return this.url;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ComboHttpService } from '@farris/ui-combo-list';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DefaultComboHttpService implements ComboHttpService {\r\n  private befRest: BefRepository<any>;\r\n\r\n  constructor(repository: Repository<any>) {\r\n    this.befRest = repository as BefRepository<any>;\r\n  }\r\n  getData(url: string, params = {}, method = 'GET'): Observable<any> {\r\n    const headers = new HttpHeaders({ 'content-type': 'application/json' })\r\n    // return this.befRest.restService.invoke(url, method, params, { headers });\r\n    if (method.toLowerCase() !== 'get') {\r\n      return this.befRest.restService.invoke(url, method, null, { headers, body: params });\r\n    } else {\r\n      return this.befRest.restService.invoke(url, method, params, { headers });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ComboHttpService } from '@farris/ui-combo-list';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { DynamiControlGroupHttpInterface } from '@farris/dynamic-control-group';\r\n\r\n@Injectable()\r\nexport class DefaultDynamiControlGroupHttpService implements DynamiControlGroupHttpInterface {\r\n    private befRest: BefRepository<any>;\r\n\r\n    constructor(repository: Repository<any>) {\r\n        this.befRest = repository as BefRepository<any>;\r\n    }\r\n    getData(url: string, params = {}, method = 'GET'): Observable<any> {\r\n        const headers = new HttpHeaders({ 'content-type': 'application/json' })\r\n        return this.befRest.restService.invoke(url, method, params, { headers });\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { DataTypeInfo, Entity, EntityCollection } from '@farris/devkit';\r\nimport { Observable } from 'rxjs';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { UriService } from './uri_service';\r\n\r\nclass DynamicBefRepository<T extends Entity> extends BefRepository<T> {\r\n  batchAppend(defaultValues: any[]): Observable<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // public paginationInfo = {\r\n  //   Entity: {\r\n  //     pageSize: 20,\r\n  //   },\r\n  // };\r\n\r\n\r\n\r\n\r\n  constructor(injector: Injector, public name: string, public entityType: any, public serverUri: string, public apiUri: string) {\r\n    super(injector);\r\n    this.apiUri = apiUri;\r\n    // 构造分页属性信息\r\n    const paginationInfo = {};\r\n    paginationInfo[entityType.typeName] = { pageSize: 20 };\r\n    this.paginationInfo = paginationInfo;\r\n\r\n    this.name = name;\r\n\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection(this.entityType);\r\n    // 初始化实体管理器\r\n    this.entityManager = new BefEntityManager(this.entityCollection);\r\n\r\n    // 设置proxy属性值\r\n    const httpClient = injector.get(HttpClient);\r\n    const uriService = new UriService(serverUri);\r\n    const proxy = new BefProxy(httpClient, uriService);\r\n    const baseUri = uriService.extendUri(apiUri);\r\n    proxy.setBaseUri(baseUri);\r\n    this.proxy = proxy;\r\n\r\n    this.dataService = new BefDataService(injector, this);\r\n    this.serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n  }\r\n}\r\n\r\nexport { DynamicBefRepository };\r\n","import { Injector } from '@angular/core';\r\nimport { DataTypeInfo, Entity, EntityCollection, EntityTypeFactory } from '@farris/devkit';\r\nimport { Observable } from 'rxjs';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefRepository } from './bef_repository';\r\n\r\nclass PresetBefRepository<T extends Entity> extends BefRepository<T> {\r\n  batchAppend(defaultValues: any[]): Observable<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  constructor(injector: Injector, public schema: any) {\r\n    super(injector);\r\n    const entityTypeFactory: EntityTypeFactory = new EntityTypeFactory();\r\n    this.entityType = entityTypeFactory.create(schema) as  any;\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection(this.entityType);\r\n    // 初始化实体管理器\r\n    this.entityManager = new BefEntityManager(this.entityCollection);\r\n  }\r\n}\r\n\r\nexport { PresetBefRepository };\r\n","export * from './lib/types';\r\nexport * from './lib/tokens';\r\nexport * from './lib/bef_change_builder';\r\nexport * from './lib/bef_change_handler';\r\nexport * from './lib/session/index';\r\nexport * from './lib/bef_rest_service';\r\nexport * from './lib/bef_proxy';\r\nexport * from './lib/bef_lookup.service';\r\nexport * from './lib/bef_lookup_default.service';\r\nexport * from './lib/bef_repository';\r\nexport * from './lib/framework_session_service';\r\nexport * from './lib/decorators';\r\nexport * from './lib/bef_repository_util';\r\nexport * from './lib/bef_data_path_util';\r\nexport * from './lib/uri_service';\r\nexport * from './lib/uri';\r\nexport * from './lib/bef_combo.service';\r\nexport * from './lib/bef_dynamic_control_group_default.service';\r\nexport * from './lib/bef_entity_manager';\r\nexport * from './lib/dynamic_bef_repository';\r\nexport * from './lib/preset_bef_repository';\r\nexport * from './lib/bef_variable_manager';\r\nexport const VERSION = 'ver.';\r\n"]}