{"version":3,"file":"farris-bef.umd.js.map","sources":["ng://@farris/bef/lib/types.ts","ng://@farris/bef/lib/tokens.ts","ng://@farris/bef/lib/entity_util.ts","ng://@farris/bef/lib/bef_change_builder.ts","ng://@farris/bef/lib/bef_change_handler.ts","ng://@farris/bef/lib/framework_session_service.ts","ng://@farris/bef/lib/session/bef_session_storage_strategy.ts","node_modules/tslib/tslib.es6.js","ng://@farris/bef/lib/utils/http_header.util.ts","ng://@farris/bef/lib/utils/http_param.util.ts","ng://@farris/bef/lib/utils/request_info.util.ts","ng://@farris/bef/lib/utils/response_info.util.ts","ng://@farris/bef/lib/http_service.ts","ng://@farris/bef/lib/session/bef_session_handling_strategy.ts","ng://@farris/bef/lib/session/bef_session_handling_strategy_factory.ts","ng://@farris/bef/lib/session/bef_session_service.ts","ng://@farris/bef/lib/decorators.ts","ng://@farris/bef/lib/deprecated/deprecated_bef_repository.ts","ng://@farris/bef/lib/bef_entity_manager.ts","ng://@farris/bef/lib/bef_change_util.ts","ng://@farris/bef/lib/bef_variable_manager.ts","ng://@farris/bef/lib/bef_proxy_util.ts","ng://@farris/bef/lib/bef_data_path_util.ts","ng://@farris/bef/lib/bef_data_service.ts","ng://@farris/bef/lib/utils/back_end_message.util.ts","ng://@farris/bef/lib/session/bef_session_manager.ts","ng://@farris/bef/lib/bef_proxy_extend.ts","ng://@farris/bef/lib/bef_repository.ts","ng://@farris/bef/lib/uri_service.ts","ng://@farris/bef/lib/bef_proxy.ts","ng://@farris/bef/lib/bef_rest_service.ts","ng://@farris/bef/lib/bef_lookup.service.ts","ng://@farris/bef/lib/bef_lookup_default.service.ts","ng://@farris/bef/lib/bef_repository_util.ts","ng://@farris/bef/lib/uri.ts","ng://@farris/bef/lib/bef_combo.service.ts","ng://@farris/bef/lib/bef_dynamic_control_group_default.service.ts","ng://@farris/bef/lib/dynamic_bef_repository.ts","ng://@farris/bef/lib/preset_bef_repository.ts","ng://@farris/bef/public-api.ts"],"sourcesContent":["import { Observable } from 'rxjs';\r\n\r\n/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:48\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-07-30 17:37:02\r\n */\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * 变更集相关类型\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport class ChangeDetailType {\r\n\r\n  /**\r\n   * 新增\r\n   */\r\n  static Added = 'Added';\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  static Modify = 'Modify';\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  static Deleted = 'Deleted';\r\n}\r\n\r\n/**\r\n * 行变更信息\r\n * 必须包含：\r\n * 1、DataId   => 主键值；\r\n * 2、属性名   => 新的属性值；\r\n * 3、子表名+s => 子表行的ChangeDetail数组\r\n */\r\nexport interface ChangeDetailInfo {\r\n  DataId?: string;\r\n  [key: string]: number | string | boolean | null | ChangeDetail | ChangeDetail[] | { [key: string]: any };\r\n}\r\n\r\n/**\r\n * 行变更详情\r\n * 包含：\r\n * 1、变更类型；\r\n * 2、变更信息\r\n */\r\nexport interface ChangeDetail {\r\n  ChangeType: ChangeDetailType;\r\n  ChangeInfo: ChangeDetailInfo;\r\n}\r\n\r\n\r\n/**\r\n * 请求类型\r\n */\r\nexport interface RequestInfo {\r\n  dataChange: ChangeDetail[];\r\n  variableChange?: ChangeDetail;\r\n}\r\n\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * 请求、响应相关类型定义\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  totalCount: number;\r\n  pageCount: number;\r\n  pageIndex: number;\r\n}\r\n\r\n/**\r\n * 查询结果\r\n */\r\nexport interface QueryResult {\r\n  result: any[];\r\n  pagination: Pagination;\r\n}\r\n\r\n/**\r\n * 返回结果类型\r\n */\r\nexport interface ResponseInfo {\r\n  returnValue: any;\r\n  message: any[];\r\n  innerDataChange: ChangeDetail[];\r\n  innerVariableChange: ChangeDetail;\r\n}\r\n\r\n/**\r\n * 代理钩子\r\n */\r\nexport interface IProxyExtend {\r\n  extendUrl(url: string, params: { [propName: string]: any }): string;\r\n  extendBody(body: any): { [propName: string]: any };\r\n  extendHeaders(headers: { [propName: string]: any }, runtimeContext?: any): Observable<any>;\r\n  onResponse?(response: ResponseInfo, ignoreChanges?: boolean, options?: any);\r\n  onError?(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any>;\r\n  parseHeaders(response: any);\r\n}\r\n\r\n/**\r\n * 带RequestInfo的body对象\r\n */\r\nexport interface BodyWithRequestInfo {\r\n  requestInfo: RequestInfo;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * request option格式\r\n */\r\nexport interface RequestOption {\r\n  body: BodyWithRequestInfo;\r\n  [key: string]: any;\r\n}\r\n/**\r\n * 子表分页参数\r\n */\r\nexport interface RetrieveParam {\r\n  filters: { [nodeCode: string]: { pagination: { pageIndex: number, pageSize: number } } },\r\n  parentIds?: { [nodeCode: string]: string }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:48\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2018-10-19 15:36:48\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nconst BE_SERVER_URI_TOKEN = new InjectionToken<string>('@farris/be BE_SERVER_URL');\r\n\r\n/**\r\n * 1、因为bef里，很多类都没有注入，BefSessionHandlingStragegy无法直接注入；\r\n * 2、通过一个字符串Token来间接做策略选择。\r\n */\r\nconst BE_SESSION_HANDLING_STRATEGY_TOKEN = new InjectionToken<boolean>('@farris/be BE_SESSION_HANDLING_STRATEGY_TOKEN');\r\n\r\nexport { BE_SERVER_URI_TOKEN, BE_SESSION_HANDLING_STRATEGY_TOKEN };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:36:21\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-04-30 15:41:45\r\n */\r\nimport { FieldMetadataUtil } from '@farris/devkit';\r\n\r\nclass EntityUtil {\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any, propMetadata: any} {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n    let propMetadata: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n        propMetadata = ngFieldProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n        propMetadata = ngObjectProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n        propMetadata = ngListProperties[propName];\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n        propMetadata = ngDynamicProperties[propName];\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType, propMetadata };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string, ) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData (entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-19 15:35:39\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-18 16:15:47\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { Modification, ModifyType, Entity, EntityCollection, FieldMetadataUtil } from '@farris/devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { EntityUtil } from './entity_util';\r\n\r\n\r\n/**\r\n * BEF变更集构造器\r\n */\r\nclass BefChangeBuilder {\r\n\r\n  /**\r\n   * Bef变更集\r\n   */\r\n  public changeDetail: ChangeDetail;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param entityType 实体类型\r\n   */\r\n  constructor(\r\n    private entityType: Type<Entity>,\r\n    private entityCollection: EntityCollection<Entity>\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更集\r\n   * @param modifications\r\n   */\r\n  public build(modifications: Modification[]): ChangeDetail {\r\n\r\n    // 重置changeDetail\r\n    this.changeDetail = {\r\n      ChangeType: ChangeDetailType.Modify,\r\n      ChangeInfo: {\r\n        DataId: ''\r\n      }\r\n    };\r\n\r\n    modifications.forEach(modification => {\r\n      this.buildChangeDetail(modification);\r\n    });\r\n\r\n    return this.changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更详情\r\n   */\r\n  public buildChangeDetail(modification: Modification) {\r\n\r\n    const paths = modification.path.concat();\r\n\r\n    // 设置根节点DataId\r\n    if (!this.changeDetail.ChangeInfo.DataId) {\r\n      this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];\r\n    }\r\n\r\n    let parentChangeDetail = this.changeDetail;\r\n    let parentEntityType = this.entityType;\r\n\r\n    for (let i = 1; i < paths.length && parentChangeDetail; i = i + 2) {\r\n\r\n      const parentChangeInfo = this.getChangeInfo(parentChangeDetail);\r\n      const propName = paths[i];\r\n      const { propType, propEntityType, propMetadata } = EntityUtil.getPropInfo(parentEntityType, propName);\r\n      const dataField = propMetadata.dataField || propName;\r\n\r\n      if (propType === 'NgField') {\r\n\r\n        // 不支持主键变更，忽略\r\n        const primaryKey = EntityUtil.getPrimaryKey(parentEntityType);\r\n        if (propName === primaryKey) {\r\n          continue;\r\n        }\r\n\r\n        if (modification.type !== ModifyType.ValueChange) {\r\n          throw Error('简单类型的属性上不支持ValueChange类型之外的变更');\r\n        }\r\n\r\n        // NgField类型：说明是最后一级\r\n        parentChangeInfo[dataField] = modification.value;\r\n        parentChangeDetail = null;\r\n\r\n      } else if (propType === 'NgObject') {\r\n\r\n        // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。\r\n        const childId = paths[i + 1].split(':')[1];\r\n        const childIdName = paths[i + 1].split(':')[0];\r\n\r\n        if (childIdName) {\r\n\r\n          // 有主键（关联对象）：是一个普通的对象\r\n          let changeObject = parentChangeInfo[dataField];\r\n\r\n          // 获取数据\r\n          const entityPath = paths.slice(0, i + 1);\r\n          const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n          changeObject = changedEntity ? changedEntity.toJSON(true) : {};\r\n          parentChangeInfo[dataField] = changeObject;\r\n          parentChangeDetail = null;\r\n          parentEntityType = null;\r\n\r\n        } else {\r\n\r\n          // 没有主键（值对象）：是一个完整的ChangeDetail\r\n          let changeDetail = parentChangeInfo[dataField] as ChangeDetail;\r\n          if (!changeDetail) {\r\n            changeDetail = {\r\n              ChangeType: ChangeDetailType.Modify,\r\n              ChangeInfo: {}\r\n            };\r\n          }\r\n          parentChangeInfo[dataField] = changeDetail;\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 如果不存在则创建一个空数组\r\n        if (!parentChangeDetail.ChangeInfo[dataField]) {\r\n          parentChangeDetail.ChangeInfo[dataField] = [];\r\n        }\r\n        const changeDetails = parentChangeDetail.ChangeInfo[dataField] as ChangeDetail[];\r\n\r\n        // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：\r\n        // 1、不存在：创建一个Modify类型的ChangeDetail；\r\n        // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；\r\n        // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。\r\n        if (i !== paths.length - 1) {\r\n\r\n          // 遍历检查变更是否已经存在\r\n          const dataId = paths[i + 1].split(':')[1];\r\n\r\n          let changeDetail = changeDetails.find(changeDetailItem => {\r\n            return changeDetailItem.ChangeInfo.DataId === dataId;\r\n          });\r\n\r\n          // 如果不存在，则创建并添加\r\n          if (!changeDetail) {\r\n            changeDetail = this.createEmptyChangeDetail(ChangeDetailType.Modify, dataId);\r\n            changeDetails.push(changeDetail);\r\n          }\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n          continue;\r\n        }\r\n\r\n        // 如果是叶子节点，则肯定是新增或者删除变更。\r\n        if (modification.type === ModifyType.Add || modification.type === ModifyType.Insert) {\r\n\r\n          // // 遍历添加\r\n          // modification.value.forEach((entity: any) => {\r\n          //   this.addAddChangeDetail(changeDetails, entity.toJSON(), propEntityType);\r\n          // });\r\n        } else if (modification.type === ModifyType.Remove) {\r\n\r\n          // @todo：删除变更直接向服务器端提交了，不需要再次提交\r\n          // 遍历变更集，添加移除变更\r\n          // modification.value.forEach((entityData) => {\r\n          //   this.addRemoveChangeDetail(changeDetails, entityData, propEntityType);\r\n          // });\r\n        }\r\n\r\n        // 重置\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n\r\n      } else if (propType === 'NgDynamic') {\r\n        // 获取数据\r\n        const entityPath = paths.slice(0, i + 1);\r\n        const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n        parentChangeInfo[dataField] = {\r\n          ChangeType: ChangeDetailType.Modify,\r\n          ChangeInfo: changedEntity ? changedEntity.toJSON(true) : {}\r\n        };\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取变更信息\r\n   * 在整个ChangeDetail树上，存在两种类型的节点\r\n   * ChangeDetail：实体变更、值对象变更（没有DataID）\r\n   * PlainObject: 关联对象的变更\r\n   * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。\r\n   * @todo：为这两种节点封装ChangeNode基类来解决这个差异。\r\n   */\r\n  private getChangeInfo(changeDetail: any): any {\r\n\r\n    // @todo：可能存在同名属性\r\n    if (changeDetail.hasOwnProperty('ChangeInfo')) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建ChangeDetail\r\n   * @param type BEF变更类型\r\n   * @param dataId 数据内码\r\n   */\r\n  private createEmptyChangeDetail(type: ChangeDetailType, dataId: string): ChangeDetail {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {\r\n        DataId: dataId\r\n      }\r\n    };\r\n    return changeDetail;\r\n  }\r\n\r\n}\r\n\r\nexport { BefChangeBuilder };\r\n","import { Type } from '@angular/core';\r\nimport { Entity, EntityList, EntityCollection } from '@farris/devkit';\r\nimport { EntityUtil } from './entity_util';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\n\r\n/**\r\n * 处理服务器端变更\r\n */\r\nclass BefChangeHandler {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集\r\n   */\r\n  handle(\r\n    entityType: Type<Entity>,\r\n    entityCollection: EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    this.handleChangeDetails(entityType, entityCollection, changeDetails);\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（批量）\r\n   * @param entities\r\n   */\r\n  handleChangeDetails(\r\n    entityType: Type<Entity>,\r\n    entityList: EntityList<Entity> | EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    if (!changeDetails) {\r\n      return;\r\n    }\r\n\r\n    changeDetails.forEach((changeDetail: ChangeDetail) => {\r\n      const id = (changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId) as string;\r\n      const entity = this.getEntityById(entityList, id);\r\n      if (!entity) {\r\n        return;\r\n      }\r\n      this.handleChangeDetail(entityType, entity, changeDetail);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（单条）\r\n   */\r\n  handleChangeDetail(\r\n    entityType: Type<Entity>,\r\n    entity: Entity,\r\n    changeDetail: ChangeDetail\r\n  ) {\r\n\r\n    if (!changeDetail || !entity) {\r\n      return;\r\n    }\r\n\r\n    // 只处理值变更，其他变更待进一步验证。\r\n    if (changeDetail.ChangeType !== ChangeDetailType.Modify) {\r\n      return;\r\n    }\r\n\r\n    const changeInfo = changeDetail.ChangeInfo;\r\n    Object.keys(changeInfo).forEach((propName: string) => {\r\n      const { propType, propEntityType } = EntityUtil.getPropInfo(entityType, propName);\r\n      if (propType === 'NgField') {\r\n\r\n        // 简单属性：更新值\r\n        entity[propName] = changeInfo[propName];\r\n      } else if (propType === 'NgObject') {\r\n        const childEntity = entity[propName] as Entity;\r\n        if (childEntity.primaryKey) {\r\n\r\n          // 关联对象：重新加载数据\r\n          const childEntityData = changeInfo[propName];\r\n          childEntity.load(childEntityData);\r\n\r\n        } else {\r\n\r\n          // 值对象：递归处理变更\r\n          const childChangeDetail = changeInfo[propName] as ChangeDetail;\r\n          this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 子列表：递归处理变更集合\r\n        const childEntityList = entity[propName] as EntityList<Entity>;\r\n        const childChangeDetails = changeInfo[propName] as ChangeDetail[];\r\n        this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异\r\n   */\r\n  private getEntityById(entityList: EntityList<Entity> | EntityCollection<Entity>, id: string): Entity {\r\n    let target: Entity;\r\n    if (entityList instanceof EntityCollection) {\r\n      target = entityList.getEntityById(id);\r\n    } else {\r\n      target = entityList.get(id);\r\n    }\r\n    return target ? target : null;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { BefChangeHandler };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-13 20:05:46\r\n */\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { SessionService } from '@ecp-caf/caf-common';\r\n\r\n@Injectable()\r\nclass FrameworkSessionService {\r\n\r\n  constructor(@Optional() private sessionService: SessionService) {\r\n  }\r\n\r\n  /**\r\n   * 获取用户SessionId\r\n   */\r\n  getUserSessionId() {\r\n    return this.sessionService.getUserSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取当前功能菜单的SessionId\r\n   */\r\n  getCurrentSessionId(runtimeContext?: any) {\r\n    let sessionId: string;\r\n    const rsi = this.getRuntimeSessionId();\r\n    if (rsi) {\r\n      return rsi;\r\n    }\r\n    if (this.sessionService) {\r\n      if (runtimeContext && runtimeContext.hasOwnProperty('tabId')) {\r\n        const tabId = runtimeContext.tabId;\r\n        sessionId = this.sessionService.getCurrentSeesionId(tabId);\r\n      } else {\r\n        sessionId = this.sessionService.getCurrentSeesionId();\r\n      }\r\n    }\r\n    if (!sessionId) {\r\n      sessionId = this.getUserSessionId();\r\n    }\r\n    return sessionId;\r\n  }\r\n  private getRuntimeSessionId() {\r\n    const hash = window.location.hash;\r\n    const params = this.parse(hash);\r\n    return params && params.rsi || null;\r\n  }\r\n  public parse(queryString: string): { [propName: string]: any } {\r\n    if (!queryString) {\r\n      return {};\r\n    }\r\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n\r\nexport { FrameworkSessionService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\n/**\r\n * BeSession缓存\r\n */\r\ninterface BeSessionStorageStrategy {\r\n  getItem(beSessionKey: string): string;\r\n  setItem(beSessionKey: string, beSessionid: string): void;\r\n  removeItem(beSessionKey: string): void;\r\n  clear(frmSessionId: string, beSessionKey: string): void;\r\n}\r\n\r\n/**\r\n * 基于浏览器SessionStorage的BeSession缓存\r\n * @summary\r\n * 1、SeparatedSession模式下：\r\n *  {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1_beSessionUri1: beSessionId-1,\r\n *      frmSessionId2_beSessionUri2: beSessionId-2,\r\n *    }\r\n *  }\r\n * 2、UnifiedSession模式下（在Debug状态，同模式1）：\r\n * {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1: beSessionId-1,\r\n *      frmSessionId2: beSessionId-2,\r\n *    }\r\n *  }\r\n */\r\nclass SessionStorageBeSessionStorageStrategy implements BeSessionStorageStrategy {\r\n\r\n  /**\r\n   * 缓存Token\r\n   */\r\n  private sessionStorageKey = 'BE_SESSION_ID';\r\n\r\n  /**\r\n   * 获取值\r\n   */\r\n  public getItem(beSessionKey: string): string {\r\n    const beSessions = this.getAllBeSessions();\r\n    return beSessions[beSessionKey];\r\n  }\r\n\r\n  /**\r\n   * 设置值\r\n   */\r\n  public setItem(beSessionKey: string, beSessionId: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    beSessions[beSessionKey] = beSessionId;\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n\r\n  /**\r\n   * 删除值\r\n   */\r\n  public removeItem(beSessionKey: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    if (beSessions[beSessionKey]) {\r\n      delete beSessions[beSessionKey];\r\n    }\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n  /**\r\n   * 清空同一个父Session下所有的缓存\r\n   * @summary\r\n   * 框架内：清空功能菜单token下的所有BeSession缓存；\r\n   * 框架外：只清空当前beSessionUri的，框架外，用的是用户Sessionid，无法统一清理。\r\n   */\r\n  public clear(frmSessionId: string, beSessionUri: string): void {\r\n    const isInFramework = this.isInFramework();\r\n    if (isInFramework === true) {\r\n      this.removeItemsByFrmSessionId(frmSessionId);\r\n    } else {\r\n      this.removeItem(beSessionUri);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空frmSessionId对应的所有子BeSessionId\r\n   */\r\n  private removeItemsByFrmSessionId(frmSessionId: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    Object.keys(beSessions).forEach((beSessionKey: string) => {\r\n      if (beSessionKey.startsWith(frmSessionId) === true) {\r\n        delete beSessions[beSessionKey];\r\n      }\r\n    });\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n  /**\r\n   * 从SessionStorage中获取全部BeSessions\r\n   */\r\n  private getAllBeSessions(): any {\r\n    const beSessionsJson = window.sessionStorage.getItem(this.sessionStorageKey);\r\n    if (!beSessionsJson) {\r\n      return {};\r\n    }\r\n    return JSON.parse(beSessionsJson);\r\n  }\r\n\r\n  /**\r\n   * 设置全部BeSessions到SessionStorage\r\n   */\r\n  setAllBeSessions(beSessions: any): void {\r\n    const beSessionsString = JSON.stringify(beSessions);\r\n    window.sessionStorage.setItem(this.sessionStorageKey, beSessionsString);\r\n  }\r\n  /**\r\n   * 是否在框架内\r\n   */\r\n  private isInFramework(): boolean {\r\n    const hashString = window.location.hash;\r\n    if (!hashString) {\r\n      return false;\r\n    }\r\n    // todo: 不能直接依赖url中的参数，运行框架已经提供相关的获取参数的方法，应该通过运行框架服务获取\r\n    return hashString.indexOf('tabId=') !== -1;\r\n  }\r\n\r\n}\r\n\r\nexport { BeSessionStorageStrategy, SessionStorageBeSessionStorageStrategy };\r\n\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\n\r\nclass HttpHeaderUtil {\r\n\r\n  /**\r\n   * PlainObject => HttpHeaders\r\n   */\r\n  public static convertToHeaders(headers: any) {\r\n    if (!headers) {\r\n      headers = new HttpHeaders();\r\n    }\r\n\r\n    // 已经是HttpHeaders，直接返回\r\n    const isHttpHeaders = headers instanceof HttpHeaders;\r\n    if (isHttpHeaders === true) {\r\n      return headers;\r\n    }\r\n    if (Object.keys(headers).length > 0) {\r\n      let httpHeaders = new HttpHeaders();\r\n      Object.keys(headers).forEach(prop => {\r\n        httpHeaders = httpHeaders.append(prop, headers[prop]);\r\n      });\r\n      headers = httpHeaders;\r\n    } else {\r\n      headers = new HttpHeaders();\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  // #region 添加特定含义的header\r\n\r\n  /**\r\n   * 追加SessionId头\r\n   * @param headers HttpHeaders对象\r\n   * @param context BeSessionId\r\n   */\r\n  public static appendSessionId(headers: HttpHeaders, sessionId: string): HttpHeaders {\r\n    return headers.append('SessionId', sessionId);\r\n  }\r\n\r\n  /**\r\n   * 追加CommonVariable头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 框架会话token，等价于原来的SessionId\r\n   */\r\n  public static appendCafRuntimeCommonVariable(headers: HttpHeaders, commonVariable: string): HttpHeaders {\r\n    return headers.append('X-CAF-Runtime-CommonVariable', commonVariable);\r\n  }\r\n\r\n  /**\r\n   * 追加X-CAF-Runtime-Context头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 等价于BeSessionId\r\n   */\r\n  public static appendCafRuntimeContext(headers: HttpHeaders, context: string): HttpHeaders {\r\n    return headers.append('X-CAF-Runtime-Context', context);\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加Content-Type头\r\n   * @param headers HttpHeaders对象\r\n   * @param context 提交内容的MIME类型，默认为application/json\r\n   */\r\n  public static appendContextType(headers: HttpHeaders, contentType?: string): HttpHeaders {\r\n    contentType = contentType ? contentType : 'application/json';\r\n    return headers.append('Content-Type', contentType);\r\n  }\r\n  public static appendRequireMessage(headers: HttpHeaders, requireMessage = true) {\r\n    return headers.append('Bff-Require-Message', requireMessage.toString());\r\n  }\r\n  /**\r\n   * 组合表单复用，表单实例id\r\n   * @param headers headers\r\n   * @param funcInstId 表单实例id\r\n   */\r\n  public static appendFuncInstId(headers: HttpHeaders, funcInstId: string) {\r\n    return headers.append('Func-Inst-Id', funcInstId);\r\n  }\r\n  /**\r\n   * http headers to json\r\n   * @param headers headers\r\n   */\r\n  public static toJson(headers: HttpHeaders) {\r\n    if (!(headers instanceof HttpHeaders)) {\r\n      return null;\r\n    }\r\n    const result = {};\r\n    headers.keys().forEach(header => {\r\n      const values = headers.getAll(header);\r\n      if (values.length > 1) {\r\n        result[header] = values;\r\n      } else {\r\n        result[header] = values[0] || '';\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { HttpHeaderUtil };\r\n","import { HttpParams } from '@angular/common/http';\r\n\r\n/**\r\n * HttpParams工具类\r\n */\r\nclass HttpParamUtil {\r\n\r\n  /**\r\n   * 将PlainObject=>HttpParams\r\n   */\r\n  public static buildParams(params: any): HttpParams {\r\n    let httpParams = new HttpParams();\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = params[key].toString();\r\n        httpParams = httpParams.append(key, value);\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n}\r\n\r\nexport { HttpParamUtil };\r\n","import { Entity } from '@farris/devkit';\r\nimport { BefRepository } from '../bef_repository';\r\nimport { RequestInfo } from '../types';\r\n\r\nclass RequestInfoUtil {\r\n\r\n  /**\r\n   * 检查是否有requestInfo\r\n   */\r\n  public static hasRequestInfo(options: any): boolean {\r\n    if (!options || !options.body) {\r\n      return false;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.requestInfo && body.requestInfo.dataChange) {\r\n      return true;\r\n    }\r\n    if (body.dataChange) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 检查是否有RquestInfo\r\n   * @summary\r\n   * 产品部依赖了请求时传递RequestInfo，返回时直接取到returnValue的特性。\r\n   */\r\n  public static hasRequestInfoWithR(options: any): boolean {\r\n    if (!options || !options.body) {\r\n      return false;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.RequestInfo && body.RequestInfo.dataChange) {\r\n      return true;\r\n    }\r\n    if (body.dataChange) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(repository: BefRepository<Entity>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: repository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: repository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n\r\n  /**\r\n   * 构造带requestInfo的body（仅适用于body中有多个参数的情况）\r\n   * @summary\r\n   * 一个参数时body=requestInfo，不适用该方法。\r\n   */\r\n  public static buildBodyWithRequestInfo(body: any, repository: BefRepository<Entity>): any {\r\n    if (body.RequestInfo || body.requestInfo) {\r\n      return body;\r\n    }\r\n    const requestInfo = this.buildRequestInfo(repository);\r\n    const bodyWithRequestInfo = Object.assign({}, body, { requestInfo: requestInfo });\r\n    return bodyWithRequestInfo;\r\n  }\r\n  public static getRequestInfo(options: any) {\r\n    if (!options || !options.body) {\r\n      return null;\r\n    }\r\n    const body = options.body;\r\n\r\n    // 有多个参数的时候\r\n    if (body.requestInfo) {\r\n      return body.requestInfo;\r\n    }\r\n    if (body.dataChange || body.variableChange) {\r\n      return body;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { RequestInfoUtil };\r\n","import { HttpErrorResponse, HttpHeaderResponse, HttpResponse, HttpResponseBase } from '@angular/common/http';\r\n\r\nclass ResponseInfoUtil {\r\n\r\n  /**\r\n   * 将ResponseInfo转换为老接口的数据返回格式\r\n   */\r\n  public static unWrapResponseInfo(result: any) {\r\n\r\n    // 兼容cancel没有返回值的情况\r\n    if (!result) {\r\n      return result;\r\n    }\r\n\r\n    // 没有returnValue的情况下，兼容query取数的的格式\r\n    if (result.hasOwnProperty('returnValue') === false) {\r\n      if (result.hasOwnProperty('result') && result.hasOwnProperty('pagination')) {\r\n\r\n        // 兼容返回带分页的列表数据\r\n        return result.result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // 其他：返回RequestInfo.returnValue的情况\r\n    const returnValue = result.returnValue;\r\n    if (returnValue && returnValue.hasOwnProperty('result') && returnValue.hasOwnProperty('pagination')) {\r\n\r\n      // 兼容返回带分页的列表数据\r\n      return returnValue.result;\r\n    }\r\n    return result.returnValue;\r\n\r\n  }\r\n\r\n  public static isReported401Error(response: HttpResponseBase) {\r\n    return response.status === 401;\r\n  }\r\n  /**\r\n   * 解析后端消息\r\n   * @param result result\r\n   */\r\n  public static parseBackEndMessage(result: any) {\r\n    if (result && result.message && Array.isArray(result.message) && result.message.length > 0) {\r\n      return result.message;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 解析后端错误消息\r\n   * @param error error\r\n   */\r\n  public static parseBackEndError(e: any) {\r\n    const error = e && e.error;\r\n    if (error && error.hasOwnProperty('extensionMessage') && error.extensionMessage && error.extensionMessage.hasOwnProperty('UIMsg') && error.extensionMessage.UIMsg && error.extensionMessage.UIMsg.length > 0) {\r\n      return JSON.parse(error.extensionMessage.UIMsg);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { ResponseInfoUtil };\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// tslint:disable: no-string-literal disable: max-line-length\r\n@Injectable()\r\nexport class HttpService {\r\n  public httpClient: HttpClient;\r\n  private rtf: any;\r\n  constructor(private defaultHttpClient: HttpClient) {\r\n    this.httpClient = defaultHttpClient;\r\n    this.rtf = this.getService();\r\n  }\r\n  /**\r\n   * 遍历获取rtf服务\r\n   */\r\n  private getService() {\r\n    let env: Window = window;\r\n    while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {\r\n      env = window.parent;\r\n    }\r\n    return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};\r\n  }\r\n  /**\r\n   * 是否同源\r\n   * @param environment window\r\n   */\r\n  private isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  private get params() {\r\n    if (this.rtf && this.rtf.hasOwnProperty('session') && typeof this.rtf['session']['getCommonVariable'] === 'function') {\r\n      return this.rtf['session']['getCommonVariable']();\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取运行框架http服务\r\n   */\r\n  public get httpService() {\r\n    if (this.rtf && this.rtf.hasOwnProperty('http') && typeof this.rtf['http']['request'] === 'function') {\r\n      return this.rtf.http;\r\n    }\r\n    return null;\r\n  }\r\n  public request(method: string, url: string, options: any = {}): Observable<any> {\r\n    // todo: 使用运行框架的httpclient导致帮助无法显示数据，暂时撤回\r\n    // if (this.httpService && this.params && this.params.tabId) {\r\n    //   return this.httpService.request$(method, url, options);\r\n    // } else {\r\n    //   return this.defaultHttpClient.request(method, url, options);\r\n    // }\r\n    return this.defaultHttpClient.request(method, url, options);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport { HttpHeaderUtil } from '../utils/index';\r\nimport { BeSessionStorageStrategy } from './bef_session_storage_strategy';\r\nimport { HttpService } from '../http_service';\r\nimport { Injector } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\n/**\r\n * BefSession处理策略类\r\n */\r\nabstract class BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 存储策略\r\n   */\r\n  protected storageStrategy: BeSessionStorageStrategy;\r\n\r\n  /**\r\n   * 框架Session服务\r\n   */\r\n  protected frmSessionService: FrameworkSessionService;\r\n  /**\r\n   * 框架SessionId（用户的或者功能菜单的）\r\n   */\r\n  protected getFrmSessionId(runtimeContext?: any): string {\r\n    return this.frmSessionService.getCurrentSessionId(runtimeContext);\r\n  }\r\n  protected get frmSessionId(): string {\r\n    return this.frmSessionService.getCurrentSessionId();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService) {\r\n    this.storageStrategy = storageStrategy;\r\n    this.frmSessionService = frmSessionService;\r\n  }\r\n\r\n  /**\r\n   * 获取SessionId\r\n   */\r\n  public abstract getSessionId(): Observable<string>;\r\n  public abstract setSessionId(sessionId): void;\r\n  public abstract clearSessionId(): void;\r\n  public abstract extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders;\r\n  public abstract handleReponseHeaders(headers: HttpHeaders): void;\r\n  protected abstract getSessionStorageKey(runtimeContext?: any): string;\r\n\r\n  /**\r\n   * 获取框架SessionId\r\n   */\r\n  public getFrameworkSessionId(runtimeContext?: any) {\r\n    return this.getFrmSessionId(runtimeContext);\r\n  }\r\n\r\n  /**\r\n   * 从缓存中获取BeSession\r\n   */\r\n  protected getSessionIdFromStorage(runtimeContext?: any) {\r\n    const sessionStorageKey = this.getSessionStorageKey(runtimeContext);\r\n    const beSessionId = this.storageStrategy.getItem(sessionStorageKey);\r\n    return beSessionId;\r\n  }\r\n}\r\n\r\n/**\r\n * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）\r\n * @summary\r\n * ----------------------------------------\r\n * 处理原则：\r\n * 1、通过createSession创建；\r\n * 2、每个Repository拥有独立的BeSession；\r\n * 3、访问BE的EAPI时，通过header里的SessionId传递；\r\n * ----------------------------------------\r\n * 兼容性考虑：\r\n * 1、有产品部直接new BeSessionService()，没有传递\r\n */\r\nclass BefSeparatedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n  private injector: Injector;\r\n  /**\r\n   * 创建Session的的EAPI地址\r\n   */\r\n  private beSessionUri: string;\r\n\r\n  /**\r\n   * httpClient\r\n   */\r\n  private httpClient: HttpClient;\r\n\r\n  private httpService: HttpService;\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService,\r\n    httpClient: HttpClient, beBaseUri: string, injector: Injector\r\n  ) {\r\n    super(storageStrategy, frmSessionService);\r\n    this.beSessionUri = beBaseUri;\r\n    this.httpClient = httpClient;\r\n    this.httpService = new HttpService(this.httpClient);\r\n    this.injector = injector;\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getSessionId(): Observable<string> {\r\n    const beSessionId = this.getSessionIdFromStorage();\r\n    if (beSessionId) {\r\n      return of(beSessionId);\r\n    }\r\n    return this.createSession();\r\n\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空Sessionid\r\n   */\r\n  public clearSessionId() {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    // this.storageStrategy.removeItem(sessionKey);\r\n    this.storageStrategy.clear(this.frmSessionId, sessionKey);\r\n  }\r\n\r\n  /**\r\n   * 扩展Session相关头信息\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    const frmSessionId = this.getFrameworkSessionId(runtimeContext);\r\n    const beSessionId = this.getSessionIdFromStorage(runtimeContext);\r\n    headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    if (beSessionId) {\r\n      headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);\r\n      headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);\r\n    }\r\n\r\n    // const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    //if (appContext) {\r\n    // const appId = appContext.ApplicationId;\r\n    headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);\r\n    // }\r\n    // headers = HttpHeaderUtil.appendRequireMessage(headers, true);\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: HttpHeaders): void {\r\n  }\r\n\r\n  /**\r\n   * 创建BeSessionId\r\n   */\r\n  public createSession(): Observable<string> {\r\n    const params: { [propName: string]: any } = {\r\n      responseType: 'text'\r\n    };\r\n    if (!!this.frmSessionId) {\r\n      const appContext = this.injector.get<AppContext>(AppContext, null);\r\n      params.headers = new HttpHeaders({ SessionId: this.frmSessionId });\r\n      params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);\r\n      //if (appContext) {\r\n      // const appId = appContext.ApplicationId;\r\n      params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);\r\n      //}\r\n      params.headers = HttpHeaderUtil.toJson(params.headers);\r\n    }\r\n\r\n    return this.httpService.request('POST', this.beSessionUri, params).pipe(\r\n      tap((beSessionId: string) => {\r\n        this.setSessionId(beSessionId);\r\n      })\r\n    );\r\n  }\r\n\r\n  public extendHttpHeader() {\r\n  }\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   * @summary\r\n   * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；\r\n   * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，\r\n   */\r\n  protected getSessionStorageKey(runtimeContext?: any): string {\r\n    let sessionId = null;\r\n    if (runtimeContext) {\r\n      sessionId = this.getFrameworkSessionId(runtimeContext);\r\n    } else {\r\n      sessionId = this.frmSessionId;\r\n    }\r\n    return `${sessionId}_${this.beSessionUri}`;\r\n  }\r\n\r\n}\r\n\r\n\r\nclass BefUnifiedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 创建Session的的EAPI地址\r\n   */\r\n  private beSessionUri: string;\r\n  private injector: Injector;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService, beBaseUri: string, injector: Injector\r\n  ) {\r\n    super(storageStrategy, frmSessionService);\r\n    this.beSessionUri = beBaseUri;\r\n    this.injector = injector;\r\n  }\r\n\r\n  public getSessionId(): Observable<string> {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    const sessionId = this.storageStrategy.getItem(sessionKey);\r\n    return of(sessionId)\r\n    // return of(null);\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空Sessionid\r\n   */\r\n  public clearSessionId() {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.removeItem(sessionKey);\r\n  }\r\n\r\n  /**\r\n   * 扩展Session相关头信息\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    const frmSessionId = this.getFrameworkSessionId(runtimeContext);\r\n    const beSessionId = this.getSessionIdFromStorage(runtimeContext);\r\n    // headers = HttpHeaderUtil.appendRequireMessage(headers, true);\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const token = appContext.Token;\r\n      headers = HttpHeaderUtil.appendFuncInstId(headers, token);\r\n    }\r\n    headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    if (beSessionId) {\r\n      headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: HttpHeaders): void {\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   * @summary\r\n   */\r\n  protected getSessionStorageKey(runtimeContext?: any): string {\r\n    // const isDebug = false;\r\n    // if (isDebug) {\r\n    //   return `${this.frmSessionId}_${this.beSessionUri}`;\r\n    // } else {\r\n    //   return this.frmSessionId;\r\n    // }\r\n    let sessionId = null;\r\n    if (runtimeContext) {\r\n      sessionId = this.getFrameworkSessionId(runtimeContext);\r\n    } else {\r\n      sessionId = this.frmSessionId;\r\n    }\r\n    return `${sessionId}_${this.beSessionUri}`;\r\n  }\r\n}\r\n\r\nexport { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport {\r\n  BeSessionStorageStrategy, SessionStorageBeSessionStorageStrategy\r\n} from './bef_session_storage_strategy';\r\nimport {\r\n  BefSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy\r\n} from './bef_session_handling_strategy';\r\n\r\n\r\n/**\r\n * BeSession处理策略工厂\r\n */\r\n@Injectable()\r\nclass BefSessionHandlingStrategyFactory {\r\n\r\n  /**\r\n   * 创建BeSession处理策略\r\n   */\r\n  public create(\r\n    handlingStrategyName: string, frmSessionService: FrameworkSessionService,\r\n    beBaseUri: string, httpClient: HttpClient, injector: Injector\r\n  ): BefSessionHandlingStrategy {\r\n\r\n    const storageStrategy = this.createStorageStrategy();\r\n    const beSessionUri = this.createBeSessionUri(beBaseUri);\r\n\r\n    if (handlingStrategyName === 'UnifiedSession') {\r\n      return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beSessionUri, injector);\r\n    } else {\r\n      return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beSessionUri, injector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建BeSession缓存策略\r\n   */\r\n  private createStorageStrategy(): BeSessionStorageStrategy {\r\n    return new SessionStorageBeSessionStorageStrategy();\r\n  }\r\n\r\n  /**\r\n   * 创建BeSession地址\r\n   */\r\n  private createBeSessionUri(beBaseUri: string): string {\r\n    return `${beBaseUri}/service/createsession`;\r\n  }\r\n}\r\n\r\nexport { BefSessionHandlingStrategyFactory };\r\n\r\n\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 20:32:02\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2020-03-03 16:46:39\r\n */\r\n\r\nimport { Injectable, Injector, InjectFlags, inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { FrameworkSessionService } from '../framework_session_service';\r\nimport { BE_SESSION_HANDLING_STRATEGY_TOKEN } from '../tokens';\r\nimport { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy } from './bef_session_handling_strategy';\r\nimport { BefSessionHandlingStrategyFactory } from './bef_session_handling_strategy_factory';\r\nimport { AppContext } from '@farris/devkit';\r\n\r\n@Injectable()\r\nclass BefSessionService {\r\n  public beBaseUri: string;\r\n  /**\r\n   * Session处理策略类\r\n   */\r\n  private handlingStrategy: BefSessionHandlingStrategy;\r\n  private injector: Injector;\r\n  /**\r\n   * 构造函数\r\n   * @summary\r\n   * 产品部存在new BeSessionService()的场景，injector可能为空，必须要兼容。\r\n   */\r\n  constructor(\r\n    httpClient: HttpClient, beBaseUri: string,\r\n    frmSessionService: FrameworkSessionService, injector?: Injector\r\n  ) {\r\n    this.beBaseUri = beBaseUri;\r\n    this.injector = injector;\r\n    this.handlingStrategy = this.createHandlingStrategy(injector, httpClient, frmSessionService, beBaseUri);\r\n  }\r\n  /**\r\n   * 获取token\r\n   */\r\n  public get token() {\r\n    return this.handlingStrategy.getFrameworkSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getBeSessionId(): Observable<string> {\r\n    return this.handlingStrategy.getSessionId();\r\n  }\r\n\r\n  /**\r\n   * 设置sessionId\r\n   * @param sessionId sessionId\r\n   */\r\n  public setBeSessionId(sessionId: string) {\r\n    this.handlingStrategy.setSessionId(sessionId);\r\n    this.setSessionId(sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空BeSessionId\r\n   */\r\n  public clearBeSessionId() {\r\n    this.handlingStrategy.clearSessionId();\r\n  }\r\n\r\n  /**\r\n   * 扩展请求header\r\n   */\r\n  public extendRequestHeaders(headers: HttpHeaders, runtimeContext?: any): HttpHeaders {\r\n    return this.handlingStrategy.extendRequestHeaders(headers, runtimeContext);\r\n  }\r\n\r\n  /**\r\n   * 处理响应header\r\n   */\r\n  public handleResponseHeaders(headers: HttpHeaders): void {\r\n    return this.handlingStrategy.handleReponseHeaders(headers);\r\n  }\r\n\r\n  /**\r\n   * 创建BeSessionId\r\n   * @deprecated\r\n   * 不再提供封装，请自行调用EAPI上的createSession方法。\r\n   * @summary\r\n   * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；\r\n   * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.\r\n   */\r\n  public createBeSession(): Observable<string> {\r\n    const handlingStrategy = this.handlingStrategy as BefSeparatedSessionHandlingStrategy;\r\n    return handlingStrategy.createSession();\r\n  }\r\n  private setSessionId(sessionId: string) {\r\n    const appContext = this.injector.get<AppContext>(AppContext, null, InjectFlags.Optional);\r\n    if (appContext && sessionId) {\r\n      appContext.params.set('sessionId', sessionId);\r\n    }\r\n  }\r\n  /**\r\n   * 创建BeSession处理策略\r\n   * @summary session处理策略\r\n   *\r\n   * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector\r\n   *\r\n   * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`\r\n   *\r\n   * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）\r\n   */\r\n  private createHandlingStrategy(\r\n    injector: Injector, httpClient: HttpClient,\r\n    frmSessionService: FrameworkSessionService, beBaseUri: string\r\n  ): BefSessionHandlingStrategy {\r\n    let handlingStrategyName: string;\r\n    // 开发自己实例化的befSessionService\r\n    if (!injector) {\r\n      handlingStrategyName = 'SeparatedSession';\r\n    } else {\r\n      // bef 实例化\r\n      handlingStrategyName = injector.get<string>(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);\r\n    }\r\n    // 老表单，兼容老的模式，分开创建session\r\n    if (!handlingStrategyName) {\r\n      handlingStrategyName = 'SeparatedSession';\r\n    }\r\n    const handlingStrategyFactory = new BefSessionHandlingStrategyFactory();\r\n    return handlingStrategyFactory.create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector);\r\n  }\r\n}\r\n\r\n\r\nexport { BefSessionService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-05 19:32:10\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-03-05 19:55:27\r\n */\r\n\r\nimport { makePropDecorator } from '@farris/devkit';\r\n\r\n\r\n/**\r\n * 变量元数据名称\r\n */\r\nexport const NG_VARIABLE = '@farris/bef NG_VARIABLE';\r\n\r\n\r\n/**\r\n * NgVariable元数据接口\r\n */\r\nexport interface NgVariable {\r\n\r\n  /**\r\n   * 变量影射\r\n   */\r\n  mapping: string;\r\n  /**\r\n   * 原始数据类型\r\n   */\r\n  originalDataType?: string;\r\n  /**\r\n   * 变量类型（locale|remote）\r\n   */\r\n  category?: string;\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰器工厂接口\r\n */\r\nexport interface NgVariableDecorator {\r\n  (obj?: NgVariable): any;\r\n  new(obj?: NgVariable): any;\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰工厂的工厂\r\n */\r\nexport const NgVariable: NgVariableDecorator =\r\n  makePropDecorator(NG_VARIABLE, (obj: NgVariable) => obj);\r\n","/*\r\n * @Author: Sagi, Lucas, Witt\r\n * @Date: 2018-10-11 17:34:26\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-29 11:39:02\r\n */\r\n// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { Entity, Repository } from '@farris/devkit';\r\n\r\nimport { ChangeDetail, RequestInfo } from '../types';\r\n\r\nimport { BefRestService } from '../bef_rest_service';\r\nimport { BefChangeBuilder } from '../bef_change_builder';\r\nimport { BefChangeHandler } from '../bef_change_handler';\r\n\r\nimport { BefEntityManager } from '../bef_entity_manager';\r\nimport { BefVariableManager } from '../bef_variable_manager';\r\nimport { BefDataService } from '../bef_data_service';\r\n\r\n/**\r\n * 适配老的API，保持兼容\r\n */\r\n@Injectable()\r\nabstract class DeprecatedBefRepository<T extends Entity> extends Repository<T> {\r\n\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: BefEntityManager<T>;\r\n\r\n  /**\r\n   * 变量管理器\r\n   * @internal\r\n   */\r\n  public variableManager: BefVariableManager;\r\n\r\n  /**\r\n   * 取数服务\r\n   * @internal\r\n   */\r\n  protected dataService: BefDataService<T>;\r\n\r\n\r\n  // #region 老的属性包装成get方法进行兼容\r\n\r\n  /**\r\n   * 取数服务\r\n   */\r\n  public get restService(): BefRestService {\r\n    return this.dataService.restService;\r\n  }\r\n\r\n  /**\r\n   * 实体变更（前端）=> BE变更（后端）\r\n   */\r\n  public get changeBuilder(): BefChangeBuilder {\r\n    return this.entityManager.changeBuilder;\r\n  }\r\n\r\n  /**\r\n   * BE变更（后端）=> 实体变更（前端）\r\n   */\r\n  public get changeHandler(): BefChangeHandler {\r\n    return this.entityManager.changeHandler;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n  * 构造函数\r\n  */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // #region 数据访问\r\n\r\n  /**\r\n  * 获取实体集合\r\n  */\r\n  public getList(): Observable<T[]> {\r\n    return this.dataService.getList(null, null, null, null);\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   * @param id 主实体id\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    return this.dataService.getById(id);\r\n  }\r\n\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    return this.dataService.updateById(id);\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并加载\r\n   */\r\n  public create(defaultValue?: any): Observable<any> {\r\n    return this.dataService.create(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public append(defaultValue?: any): Observable<T> {\r\n    return this.dataService.append(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendByPath(fpath: string): Observable<any> {\r\n    return this.dataService.appendByPath(fpath);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 内码\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    return this.dataService.removeById(id, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param id 内码\r\n   * @param ifSave 是否保存\r\n   */\r\n  public removeByIds(ids: string[], ifSave?: boolean): Observable<any> {\r\n    return this.dataService.removeByIds(ids, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   * @param path 路径\r\n   * @param id   内码\r\n   */\r\n  public removeByPath(fpath: string, id: string): Observable<boolean> {\r\n    return this.dataService.removeByPath(fpath, id);\r\n  }\r\n  /**\r\n   * 将id对应的实体的变更提交的服务器端\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    return this.dataService.updateChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 提交path对应实体的变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<any> {\r\n    throw new Error('Not Implement');\r\n  }\r\n  /**\r\n   * 提交所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n    return this.dataService.updateAllChanges();\r\n  }\r\n\r\n  /**\r\n   * 应用变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    return this.dataService.applyChanges();\r\n  }\r\n\r\n  /**\r\n   * 提交数据变更和变量变更，通过retrieve模拟\r\n   * @internal\r\n   */\r\n  public updateDataAndVariableChanges(): Observable<any> {\r\n    const filterConditions: any[] = [];\r\n    const sortConditions: any[] = [];\r\n    const entityFilter = {\r\n      FilterConditions: filterConditions,\r\n      SortConditions: sortConditions,\r\n      IsUsePagination: true,\r\n      Pagination: {\r\n        PageIndex: 1,\r\n        PageSize: 1,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    const entityFilterJson = JSON.stringify(entityFilter);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 没有变更时不再提交变更\r\n    if (this.isEmptyRequestInfo(requestInfo)) {\r\n      return of(null);\r\n    }\r\n    const url = `${this.restService.baseUri}/extension/query?entityFilter=${entityFilterJson}`;\r\n    const body = requestInfo;\r\n    const options = {\r\n      body\r\n    };\r\n    return this.restService.invoke(url, 'PUT', null, options, false, true, true);\r\n  }\r\n\r\n  /**\r\n   * 应用id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    return this.dataService.applyChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 取消变更\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    return this.dataService.cancelChanges(options);\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 数据变更集处理\r\n\r\n  /**\r\n   * 清空所有本地实体的变更集\r\n   */\r\n  public clearAllEntityChanges(): void {\r\n    return this.entityManager.clearAllEntityChanges();\r\n  }\r\n\r\n  /**\r\n   * 获取数据变更\r\n   */\r\n  public getDataChangeDetails(): ChangeDetail[] {\r\n    return this.entityManager.buildAllEntityChangeDetails();\r\n  }\r\n\r\n  /**\r\n   * 处理数据变更\r\n   */\r\n  public handleDataChangeDetails(changeDetails: ChangeDetail[]): void {\r\n    return this.entityManager.handleDataChangeDetails(changeDetails);\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变量变更集处理\r\n\r\n  /**\r\n   * 获取变量变更\r\n   */\r\n  public getVariableChangeDetail(): ChangeDetail {\r\n    return this.variableManager.buildChangeDetail();\r\n  }\r\n\r\n  /**\r\n   * 处理变量变更\r\n   */\r\n  public handleVariableChangeDetail(changeDetail: ChangeDetail) {\r\n    this.variableManager.handleChangeDetail(changeDetail);\r\n  }\r\n\r\n  // #endregion\r\n  /**\r\n   * 变更集是否为空\r\n   * @param requestInfo requestInfo\r\n   */\r\n  private isEmptyRequestInfo(requestInfo: RequestInfo) {\r\n    if (!requestInfo) {\r\n      return true;\r\n    }\r\n    if ((!requestInfo.dataChange || requestInfo.dataChange.length < 1) && (!requestInfo.variableChange || Object.keys(requestInfo.variableChange).length < 1)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { DeprecatedBefRepository };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-07 17:24:38\r\n */\r\n\r\nimport { Entity, EntityList, EntityFactory, EntityCollection, EntityManager } from '@farris/devkit';\r\nimport { ChangeDetail} from './types';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BefChangeBuilder } from './bef_change_builder';\r\nimport { BefChangeHandler } from './bef_change_handler';\r\n\r\n\r\n/**\r\n * 实体管理类：管理Entity和\r\n * @todo\r\n * 1、实体管理应该放在Devkit中；\r\n * 2、目前只是简单代码拆分，待进一步明确职责。\r\n */\r\nclass BefEntityManager<T extends Entity> extends EntityManager<T> {\r\n\r\n\r\n  /**\r\n   * ChangeDetail构造器\r\n   */\r\n  public changeBuilder: BefChangeBuilder;\r\n\r\n  /**\r\n   * ChangeDetail处理器\r\n   */\r\n  public changeHandler: BefChangeHandler;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    super(entityCollection);\r\n    this.changeBuilder = new BefChangeBuilder(this.entityCollection.entityType, this.entityCollection);\r\n    this.changeHandler = new BefChangeHandler();\r\n  }\r\n\r\n\r\n  // #region 处理ChangeDetail相关\r\n\r\n\r\n  /**\r\n   * 获取数据变更\r\n   */\r\n  public buildAllEntityChangeDetails(): ChangeDetail[] {\r\n    const changeDetails: ChangeDetail[] = [];\r\n    const entities = this.entityCollection.getAllEntities();\r\n    entities.forEach((entity: Entity) => {\r\n      if (entity.changes.length === 0) {\r\n        return;\r\n      }\r\n      const changeDetail = this.changeBuilder.build(entity.changes);\r\n      \r\n      // 防止空id的变更被提交\r\n      // @todo：此处判断应该放到更底层，临时修复Bug。\r\n      if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {\r\n        changeDetails.push(changeDetail);\r\n      }\r\n    });\r\n    return changeDetails;\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   */\r\n  public buildEntityChangeDetailById(id: string): ChangeDetail {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (entity.changes.length === 0) {\r\n      return null;\r\n    }\r\n    const changeDetail = this.changeBuilder.build(entity.changes);\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 应用数据变更\r\n   * @param changeDetails ChangeDetail数组\r\n   */\r\n  public handleDataChangeDetails(changeDetails: ChangeDetail[]): void {\r\n    this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 清空所有实体\r\n   */\r\n  public reset() {\r\n    this.entityCollection.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { BefEntityManager };\r\n","import { ChangeDetailType, ChangeDetail } from './types';\r\n\r\n/**\r\n * 变更集工具类\r\n */\r\nclass BefChangeUtil {\r\n\r\n  /**\r\n   * 创建空的ChangeDetail\r\n   * @param type   the type of change\r\n   * @param dataId the identity of the entity whose properties's values have changed\r\n   */\r\n  static createEmpty(type: ChangeDetailType, dataId?: string) {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {}\r\n    };\r\n\r\n    if (dataId) {\r\n      changeDetail.ChangeInfo['DataId'] = dataId ;\r\n    }\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Get changes from an ChangeDetail object or an plain object\r\n   * @param changeDetail 变更详情\r\n   */\r\n  static getChangeInfo(changeDetail: any): any {\r\n\r\n    const isChangeDetail = this.isChangeDetail(changeDetail);\r\n    if (isChangeDetail === true) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether the changeDetial object is an instance of the ChangeDetial class.\r\n   * @param changeDetail\r\n   */\r\n  static isChangeDetail(changeDetail: any) {\r\n\r\n    // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.\r\n    const keys = Object.keys(changeDetail);\r\n    return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;\r\n  }\r\n}\r\n\r\nexport { BefChangeUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-05 19:55:44\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-03-13 20:35:29\r\n */\r\nimport { format } from 'date-fns';\r\nimport { AppContext, FrameContext, UIState } from '@farris/devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { NgVariable } from './decorators';\r\nimport { BefChangeUtil } from './bef_change_util';\r\nimport { Injector, Optional } from '@angular/core';\r\n\r\n\r\n/**\r\n * Be变量管理器\r\n */\r\nclass BefVariableManager {\r\n\r\n  /**\r\n   * 变量元数据\r\n   */\r\n  private ngVariableMap: Map<string, NgVariable>;\r\n\r\n  /**\r\n   * 设置值\r\n   */\r\n  private innerValueMap: Map<string, any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private appContext: AppContext, private ngVariables: any, @Optional() private injector: Injector) {\r\n\r\n    this.ngVariableMap = new Map<string, NgVariable>();\r\n    this.innerValueMap = new Map<string, any>();\r\n\r\n    // 重新组织变量元数据\r\n    Object.keys(ngVariables).forEach((propName: string) => {\r\n      this.ngVariableMap.set(propName, ngVariables[propName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取变更集\r\n   */\r\n  public handleChangeDetail(changeDetail: ChangeDetail): void {\r\n    const changeInfo = changeDetail.ChangeInfo;\r\n    Object.keys(changeInfo).forEach((varName: string) => {\r\n      // 变量元数据\r\n      const ngVariable = this.ngVariableMap.get(varName);\r\n      if (!ngVariable) {\r\n        return;\r\n      }\r\n      const mapping = ngVariable.mapping;\r\n\r\n      // 更新UIState变更\r\n      const newValue = changeInfo[varName];\r\n      const oldValue = this.getValueFromUIState(mapping);\r\n\r\n      if (oldValue === newValue) {\r\n        return;\r\n      }\r\n      // 更新值\r\n      this.setValueToUIState(mapping, newValue);\r\n      this.innerValueMap.set(varName, newValue);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build ChangeDetail instance for all variables.\r\n   */\r\n  public buildChangeDetail(): ChangeDetail {\r\n    const changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n    this.ngVariableMap.forEach((ngVariable: NgVariable, varName: string) => {\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      const oldValue = this.innerValueMap.get(varName);\r\n      if (this.isValueEqual(newValue, oldValue) === false) {\r\n        // 不清除变更，请求成功后清除变更\r\n        // this.innerValueMap.set(varName, newValue);\r\n        this.appendToChangeInfo(changeDetail, varName, newValue);\r\n      }\r\n    });\r\n\r\n    if (Object.keys(changeDetail.ChangeInfo).length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Clear variable values cached in the innerValueMap property.\r\n   */\r\n  public reset() {\r\n    this.innerValueMap.clear();\r\n  }\r\n  /**\r\n   * 清空所有vo变量变更集\r\n   */\r\n  public clearChanges() {\r\n    this.ngVariableMap.forEach((ngVariable: NgVariable, varName: string) => {\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      const oldValue = this.innerValueMap.get(varName);\r\n      if (this.isValueEqual(newValue, oldValue) === false) {\r\n        this.innerValueMap.set(varName, newValue);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 清空只读vo变更\r\n   * @param changeDetail \r\n   * @returns \r\n   */\r\n  public clearChangeDetail(changeDetail: ChangeDetail) {\r\n    if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {\r\n      return;\r\n    }\r\n    Object.keys(changeDetail.ChangeInfo).forEach((key: string) => {\r\n      const ngVariable: NgVariable = this.ngVariableMap.get(key);\r\n      if (!ngVariable) {\r\n        return;\r\n      }\r\n      const mapping = ngVariable.mapping;\r\n      const newValue = this.getValueFromUIState(mapping);\r\n      this.innerValueMap.set(key, newValue);\r\n    });\r\n  }\r\n  /**\r\n   * Append changed variable to ChangeDetail instance.\r\n   */\r\n  private appendToChangeInfo(changeDetail: ChangeDetail, varName: string, varValue: any): void {\r\n    if (this.isUdtVariable(varValue) === true) {\r\n      const udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n      udtVarChangeDetail.ChangeInfo = varValue;\r\n      changeDetail.ChangeInfo[varName] = udtVarChangeDetail;\r\n    } else {\r\n      changeDetail.ChangeInfo[varName] = varValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从UIState上获取值\r\n   */\r\n  private getValueFromUIState(mapping: string): any {\r\n    const uiState = this.getRootUIState();\r\n\r\n    // 计算value\r\n    const mappingArray = mapping.split('.');\r\n    const value = mappingArray.reduce((accumulator: any, currentValue: any) => {\r\n      return accumulator ? accumulator[currentValue] : null;\r\n    }, uiState);\r\n\r\n    if (value instanceof Date) {\r\n      return format(value, 'yyyy-MM-dd HH:mm:ss');\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 获取根组件上的UIState\r\n   */\r\n  private getRootUIState(): UIState {\r\n\r\n    let rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();\r\n    if (this.injector) {\r\n      const frameContext = this.injector.get<FrameContext>(FrameContext, null);\r\n      if (frameContext) {\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        rootFrameContext = virtualRootFrameContext || rootFrameContext;\r\n      }\r\n    }\r\n    if (!rootFrameContext) {\r\n      return;\r\n    }\r\n    return rootFrameContext.uiState;\r\n  }\r\n\r\n  /**\r\n   * 值比较\r\n   * @todo 临时采用这种方式\r\n   */\r\n  private isValueEqual(srcValue: any, dstValue: any): boolean {\r\n    return JSON.stringify(srcValue) === JSON.stringify(dstValue);\r\n  }\r\n\r\n  /**\r\n   * Check if the object is a plain object\r\n   */\r\n  private isUdtVariable(obj: any): boolean {\r\n    return obj && obj.constructor &&\r\n      obj.toString() === '[object Object]' &&\r\n      obj.constructor.prototype.hasOwnProperty('isPrototypeOf');\r\n  }\r\n\r\n\r\n  /**\r\n   * 设置值到UIState\r\n   * @todo：\r\n   * 1、服务器端不支持；\r\n   * 2、日期类型处理方案待定。\r\n   */\r\n  private setValueToUIState(mapping: string, value: any): void {\r\n    const uiState = this.getRootUIState();\r\n    uiState[mapping] = value;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { BefVariableManager };\r\n","import { RequestInfo } from './types';\r\nimport { BefRepository } from './bef_repository';\r\n\r\n/**\r\n * BefProxy工具类\r\n * @summary\r\n * 1、BefProxy辅助工具类；\r\n * 2、暂时无法归类的代码封装；\r\n */\r\nclass BefProxyUtil {\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(befRepository: BefRepository<any>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: befRepository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: befRepository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n}\r\n\r\nexport { BefProxyUtil };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil, BindingPathConverter\r\n} from '@farris/devkit';\r\n\r\n/**\r\n * Bef数据中各种Path的转换\r\n */\r\nclass BefDataPathUtil {\r\n\r\n  /**\r\n   * 转换成路径数组\r\n   * 返回结果：\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childCodes, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]\r\n   */\r\n  public static convertToPathArray(bindingPath: string | string[], bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    const pathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    pathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      pathArray.push(this.trimTrailingS(propName));\r\n      pathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdu\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade\r\n   */\r\n  public static convertToPathUrl(bindingPath: string | string[], bindingData: BindingData): string {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 转换为表名数组\r\n   * 返回结果：\r\n   * 主表（/）：[]\r\n   * 从表（/childCodes）：[ childCodes ]\r\n   * 从从表（/childCodes/grandCodes [childCode ,grandCode]\r\n   */\r\n  public static convertToObjectCodes(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const objectCodes = [];\r\n    for (let i = 1; i < pathLen; i = i + 2) {\r\n      objectCodes.push(pathArray[i]);\r\n    }\r\n\r\n    return objectCodes;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，包含最后一级的主键\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]\r\n   */\r\n  public static convertToDataIdsForUpdate(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const dataIds = [];\r\n    for (let i = 0; i < pathLen; i = i + 2) {\r\n      dataIds.push(pathArray[i]);\r\n    }\r\n\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，不包含最后一级的主键\r\n   * 主表（/）：[ ]\r\n   * 从表（/childCodes）：[ parentId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId]\r\n   */\r\n  public static convertToDataIdsForAdd(bindingPath: string | string[], bindingData: BindingData) {\r\n    const dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);\r\n    dataIds.pop();\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 将EntityPathString转换为Url\r\n   * @deprecated\r\n   */\r\n  public static convertPathToUrl(path: string): string {\r\n    const subPaths = path.split('/');\r\n    for (let i = subPaths.length - 1; i > 0; i--) {\r\n      if (subPaths[i] && subPaths[i].endsWith('s')) {\r\n        subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1).toLowerCase();\r\n      }\r\n    }\r\n    // url不再转小写，兼容主键有大写字母的情况\r\n    return subPaths.join('/'); // .toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * 去除最后的s\r\n   */\r\n  private static trimTrailingS(str: string) {\r\n    return str.substr(0, str.length - 1);\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有表名的数组\r\n   *\r\n   * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']  \r\n   * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']  \r\n   * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']  \r\n   * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']\r\n   */\r\n  public static convertPathsToNodeCodes(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') === -1).forEach(node => {\r\n      result.push(node);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有实体主键值的数组\r\n   * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']\r\n   */\r\n  public static convertPathsToIds(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') !== -1).forEach(id => {\r\n      result.push(id.split(':')[1]);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { BefDataPathUtil };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 16:55:33\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-10-09 16:44:58\r\n */\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, zip } from 'rxjs';\r\nimport { tap, map, switchMap } from 'rxjs/operators';\r\n\r\nimport { Entity, EventBus, ModifyType, AppContext, DataChangeType, DataTypeInfoUtil, DataPropGroup, ViewModel, ExpressionUtil, BindingList } from '@farris/devkit';\r\n\r\nimport { ResponseInfo, QueryResult, Pagination, RequestInfo, RetrieveParam } from './types';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\nimport { BefRestService } from './bef_rest_service';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefProxyUtil } from './bef_proxy_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BefDataPathUtil } from './bef_data_path_util';\r\n/**\r\n * Bef数据访问服务\r\n * @todo：\r\n * 1、临时将BefRepository相关代码转移到该类中；\r\n * 2、进一步明确职责，调整结构\r\n */\r\n// tslint:disable: no-string-literal\r\nclass BefDataService<T extends Entity> {\r\n\r\n  /**\r\n   * 全局上下文\r\n   */\r\n  private appContext: AppContext;\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  private repository: BefRepository<T>;\r\n\r\n  /**\r\n   * BefRest代理\r\n   */\r\n  public get restProxy(): BefProxy {\r\n    return this.repository.restService.proxy;\r\n  }\r\n\r\n  /**\r\n   * RestService实例(请使用restProxy代替)\r\n   * @deprecated\r\n   */\r\n  public restService: BefRestService;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private injector: Injector, repository: BefRepository<T>) {\r\n    this.repository = repository;\r\n\r\n    const frmSessionService = injector.get<FrameworkSessionService>(FrameworkSessionService);\r\n    const httpClient = injector.get<HttpClient>(HttpClient);\r\n    const serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n\r\n    // 创建BefRestService实例\r\n    const restBaseUri = `${serverUri}/${this.repository.apiUri}`;\r\n\r\n    const eventBus: EventBus = injector.get<EventBus>(EventBus);\r\n    this.restService = new BefRestService(httpClient, restBaseUri, frmSessionService, this.repository, eventBus);\r\n\r\n    this.appContext = injector.get<AppContext>(AppContext);\r\n  }\r\n\r\n  /**\r\n   * 获取实体集合\r\n   */\r\n  public getList(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    if (pageSize !== 0) {\r\n      pageSize = pageSize || this.repository.entityCollection.pageSize;\r\n      pageIndex = pageIndex || this.repository.entityCollection.pageIndex;\r\n    }\r\n    const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const filter$ = this.restProxy.extendQuery(entityFilter, requestInfo);\r\n    return filter$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const queryResult = responseInfo.returnValue as QueryResult;\r\n        const listData = queryResult.result;\r\n        const entities: T[] = [];\r\n        listData.forEach((data: any) => {\r\n          const entity = this.repository.buildEntity(data);\r\n          EntityUtil.appendInitialData(entity, data);\r\n          entities.push(entity);\r\n        });\r\n        // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面\r\n        const serverPaginationInfo = queryResult.pagination as Pagination;\r\n        if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {\r\n          const { pageSize, pageIndex, totalCount } = serverPaginationInfo;\r\n          // 处理主表分页信息\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });\r\n        } else {\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });\r\n        }\r\n        this.repository.entityCollection.loadEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 过滤数据\r\n   * @param filter 过滤条件\r\n   * @param sort 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 当前分页\r\n   */\r\n  public filter(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    if (pageSize !== 0) {\r\n      pageSize = pageSize || this.repository.entityCollection.pageSize;\r\n      pageIndex = pageIndex || this.repository.entityCollection.pageIndex;\r\n    }\r\n    const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const filter$ = this.restProxy.filter(entityFilter, requestInfo);\r\n    return filter$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const queryResult = responseInfo.returnValue as QueryResult;\r\n        const listData = queryResult.result;\r\n        const entities: T[] = [];\r\n        listData.forEach((data: any) => {\r\n          const entity = this.repository.buildEntity(data);\r\n          EntityUtil.appendInitialData(entity, data);\r\n          entities.push(entity);\r\n        });\r\n        // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面\r\n        const serverPaginationInfo = queryResult.pagination as Pagination;\r\n        if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {\r\n          const { pageSize, pageIndex, totalCount } = serverPaginationInfo;\r\n          // 处理主表分页信息\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });\r\n        } else {\r\n          this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });\r\n        }\r\n        this.repository.entityCollection.loadEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 构造EntityFilter\r\n   */\r\n  private buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n    // @todo：临时兼容老代码，降低改动带来的风险\r\n    if (!filter && !sort && !pageSize && !pageIndex) {\r\n      return null;\r\n    }\r\n\r\n    // 纠正最后一个过滤条件的Relation\r\n    if (filter && filter.length > 0) {\r\n      filter[filter.length - 1].relation = 0;\r\n    }\r\n\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    return entityFilter;\r\n  }\r\n  /**\r\n   * 获取单个实体\r\n   * @param id id\r\n   * @param enableChildrenPagination en\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    if (retrieveParam) {\r\n      return this.getEntityById(id);\r\n    }\r\n    const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue;\r\n        const entity = this.repository.buildEntity(entityData);\r\n        this.repository.entityCollection.loadEntities([entity]);\r\n        return entity;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  public getEntityById(id: string) {\r\n    // 获取所有分页信息\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 构造分页信息\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: any) => {\r\n        const returnValue = responseInfo.returnValue || {};\r\n        const entityData = returnValue.result;\r\n        const serverPaginationInfo = returnValue.pagination;\r\n        this.updatePagination(serverPaginationInfo);\r\n        const entity = this.repository.buildEntity(entityData);\r\n        this.repository.entityCollection.loadEntities([entity]);\r\n        return entity;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']\r\n   * 分页查询从表/从从表数据\r\n   * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']\r\n   * @param paths 通用路径\r\n   * @param pageIndex 页码\r\n   * @param pageSize 分页大小\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string) {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    let nodeCodes = BefDataPathUtil.convertPathsToNodeCodes(paths);\r\n    const entityCodes = nodeCodes.map(node => node.substring(0, node.length - 1));\r\n    let entityName = entityCodes[entityCodes.length - 1];\r\n    // 查询对象可能为从表或从从表\r\n    const pagination = this.repository.entityCollection.getPaginationConfigByPath(`/${entityName}`);\r\n    const { pageSize: ps = 0 } = pagination || {};\r\n    const viewModel = this.injector.get<ViewModel>(ViewModel, null);\r\n    let forceQueryChild = false;\r\n    if (viewModel) {\r\n      forceQueryChild = viewModel.frameContext.appContext.params.get('forceQueryChild') || false;\r\n    }\r\n    if (ps == 0 && !forceQueryChild) {\r\n      return of(null);\r\n    }\r\n    const ids = BefDataPathUtil.convertPathsToIds(paths);\r\n    const parentId = ids[ids.length - 1];\r\n    const params = {\r\n      nodeCodes: entityCodes,\r\n      ids,\r\n      pagination: {\r\n        pageIndex,\r\n        pageSize\r\n      },\r\n      requestInfo\r\n    };\r\n\r\n    const request$ = this.restService.queryChild(params);\r\n    return request$.pipe(\r\n      map(response => {\r\n        const returnValue = response.returnValue;\r\n        if (!returnValue) {\r\n          return null;\r\n        }\r\n        const { result = [], pagination = {} } = returnValue;\r\n        const commonPaths = paths.map((path, index) => {\r\n          if (path.includes(':') && index % 2 === 0) {\r\n            return path.split(':')[1];\r\n          }\r\n          return path;\r\n        });\r\n        const entities = this.repository.entityManager.createEntitiesByPath(`/${commonPaths.join('/')}`, result);\r\n        this.repository.entityCollection.resetEntities(paths, entities);\r\n        // 更新分页信息\r\n        this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}`, { pageIndex: pagination.pageIndex, pageSize: pagination.pageSize });\r\n        this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}_${parentId}`, pagination);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 构造子表分页信息\r\n   */\r\n  private buildChildrenPagination() {\r\n    const paginationInfo = this.repository.entityCollection.getPaginationConfigByPath('/');\r\n    const childPaginationInfo = {};\r\n    const childrenEntityCodes = [];\r\n    DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    // 实体无子表\r\n    if (!childrenEntityCodes || childrenEntityCodes.length < 1) {\r\n      return null;\r\n    }\r\n    Object.keys(paginationInfo).forEach(key => {\r\n      const value = paginationInfo[key];\r\n      if (typeof value === 'object') {\r\n        const entityCode = key && key.includes('_') && key.split('_')[0] || null;\r\n        if (!(entityCode && childrenEntityCodes.includes(`${entityCode}s`))) {\r\n          childPaginationInfo[key] = value;\r\n        }\r\n      }\r\n    });\r\n    return childPaginationInfo;\r\n  }\r\n  /**\r\n   * 更新分页配置信息\r\n   * @param paginationInfo 服务器分页信息\r\n   */\r\n  private updatePagination(paginationInfo: any) {\r\n    if (!paginationInfo) {\r\n      return;\r\n    }\r\n    let childrenEntityCodes: string[] = [];\r\n    DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    childrenEntityCodes = childrenEntityCodes.map(item => item.substr(0, item.length - 1));\r\n    // retrieve之后没有子表数据\r\n    if (!paginationInfo || Object.keys(paginationInfo).length < 1) {\r\n      if (childrenEntityCodes && childrenEntityCodes.length > 0) {\r\n        childrenEntityCodes.forEach((nodeCode: string) => {\r\n          const original = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`);\r\n          if (original) {\r\n            //original.pageIndex = 1;\r\n            //original.total = 0;\r\n            // 重置当前子表公共分页信息\r\n            //this.repository.entityCollection.setPaginationConfigByPath(`/${nodeCode}`, original);\r\n            // 删除当前数据下级表分页信息\r\n            const localPagination = this.repository.entityCollection.getPaginationConfigByPath('/');\r\n            const keys = Object.keys(localPagination).filter(item => item.startsWith(`${nodeCode}_`));\r\n            if (keys && keys.length > 0) {\r\n              keys.forEach(key => {\r\n                this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, { pageIndex: 1, total: 0, pageSize: original.pageSize });\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    Object.keys(paginationInfo).forEach(key => {\r\n      // const entityName = childrenEntityCodes.find(item => key.startsWith(`${item}_`));\r\n      this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, paginationInfo[key]);\r\n    });\r\n  }\r\n  /**\r\n   * 构造retrieve分页信息\r\n   * @description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数\r\n   */\r\n  private buildRetrieveParam() {\r\n    const childPaginationInfo = this.buildChildrenPagination();\r\n    if (!childPaginationInfo || Object.keys(childPaginationInfo).length < 1) {\r\n      return null;\r\n    }\r\n    const retrieveParam: RetrieveParam = { filters: {}, parentIds: {} };\r\n    let childrenEntityCodes: any[] = [];\r\n    ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    Object.keys(childPaginationInfo).forEach(typeName => {\r\n      const entity: any = childPaginationInfo[typeName];\r\n      const pageIndex = entity.pageIndex || 1;\r\n      retrieveParam.filters[typeName] = { pagination: { pageSize: entity.pageSize || 0, pageIndex: pageIndex } };\r\n      // if (this.isChildrenTable(typeName)) {\r\n      //   retrieveParam.parentIds[typeName] = this.getId(typeName, pageIndex);\r\n      // }\r\n    });\r\n\r\n    return retrieveParam;\r\n  }\r\n  /*\r\n  private getId(nodeCode: string, pageIndex: number): string {\r\n    const viewModel = this.injector.get<ViewModel>(ViewModel, null);\r\n    const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};\r\n    if (pageIndex !== originalPageIndex) {\r\n      return null;\r\n    }\r\n    if (viewModel) {\r\n      const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;\r\n      if (bindingList && bindingList.currentId) {\r\n        return bindingList.currentId;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  private isChildrenTable(nodeCode: string) {\r\n    let childrenEntityCodes: any[] = [];\r\n    nodeCode += 's';\r\n    ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);\r\n    if (childrenEntityCodes && childrenEntityCodes.length > 0) {\r\n      const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);\r\n      return index !== -1;\r\n    }\r\n    return false;\r\n  }*/\r\n  /**\r\n   * 更新并对实体加锁\r\n   * @param id 实体id\r\n   */\r\n  public editById(id: string): Observable<T> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return of(null);\r\n    }\r\n\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    const retrieve$ = this.restProxy.edit(id, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue.data;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        if (entityToUpdate && entityData) {\r\n          this.reloadEntityData(entityToUpdate, entityData);\r\n        }\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    // 如果要更新的实体不存在，返回一个null流；\r\n    // @todo：返回empty()还是null流，为了不影响现有行为，临时返回null流。\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return of(null);\r\n    }\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    if (retrieveParam) {\r\n      return this.updateEntityById(id);\r\n    }\r\n    const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entityData = responseInfo.returnValue;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        this.reloadEntityData(entityToUpdate, entityData);\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateEntityById(id: string) {\r\n    // 获取所有分页信息\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    // 构造分页信息\r\n    const retrieveParam = this.buildRetrieveParam();\r\n    const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);\r\n    const result$ = retrieve$.pipe(\r\n      map((responseInfo: any) => {\r\n        const returnValue = responseInfo.returnValue || {};\r\n        const entityData = returnValue.result;\r\n        const serverPaginationInfo = returnValue.pagination;\r\n        this.updatePagination(serverPaginationInfo);\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        this.reloadEntityData(entityToUpdate, entityData);\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * 重新加载实体数据\r\n   * @param id 要重载的实体id\r\n   * @param entityData 要重载的数据\r\n   * @todo：\r\n   * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；\r\n   * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。\r\n   */\r\n  private reloadEntityData(entity: Entity, entityData: any): void {\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    // 关闭变更检测\r\n    this.appContext.changeDetectionController.detach();\r\n    // retrieve之后已经是最新数据，移除变更\r\n    // entity.load(entityData);\r\n    this.repository.entityCollection.updateEntity(entity, entityData);\r\n    // 重新加载数据不应该产生变更\r\n    entity.changes.splice(0, entity.changes.length);\r\n    // 重新打开变更检测\r\n    this.appContext.changeDetectionController.reattach();\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并加载\r\n   */\r\n  public create(defaultValue?: any) {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const result$ = this.restService.create(defaultValue, requestInfo);\r\n    return result$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        EntityUtil.appendInitialData(newEntity, newData);\r\n        this.repository.entityCollection.loadEntities([newEntity], true);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public append(defaultValue?: any): Observable<T> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const append$ = this.restService.create(defaultValue, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        this.repository.entityCollection.addEntity(newEntity);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 插入数据\r\n   * @param position 数据插入位置\r\n   * @param defaultValue 默认值\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const insert$ = this.restProxy.create(defaultValue, requestInfo);\r\n    return insert$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.buildEntity(newData);\r\n        this.repository.entityCollection.insertEntity(newEntity, position);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendByPath(fpath: string): Observable<Entity> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const append$ = this.restService.createByPath(fpath, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.entityManager.appendEntityByPath(fpath, newData, newData);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 创建子实体并插入到指定位置\r\n   * @param fpath 父路径\r\n   * @param position 数据插入位置\r\n   */\r\n  public insertByPath(fpath: string, position: 1 | -1) {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const insert$ = this.restProxy.createByPath(fpath, requestInfo);\r\n    return insert$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const newData = responseInfo.returnValue;\r\n        const newEntity = this.repository.entityManager.insertEntityByPath(fpath, newData, newData, position);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 内码\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    ifSave = (ifSave === undefined) ? true : ifSave;\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    let delete$;\r\n    if (ifSave) {\r\n      delete$ = this.restProxy.deleteAndSave(id, requestInfo);\r\n      return delete$.pipe(\r\n        switchMap(() => {\r\n          this.repository.entityCollection.removeEntityById(id);\r\n          return of(true);\r\n        })\r\n      );\r\n    } else {\r\n      delete$ = this.restService.extendDelete(id, requestInfo);\r\n      return delete$.pipe(\r\n        switchMap(() => {\r\n          this.repository.entityCollection.removeEntityById(id);\r\n          this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });\r\n          return of(true);\r\n        })\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   * @param id 要删除的实体id\r\n   */\r\n  public removeAndSaveById(id: string) {\r\n    const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);\r\n    const delete$ = this.restProxy.deleteAndSave(id, requestInfo);\r\n    const result$ = delete$.pipe(\r\n      switchMap(() => {\r\n        this.repository.entityCollection.removeEntityById(id);\r\n        // this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });\r\n        return of(true);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param id 内码\r\n   * @param ifSave 是否保存\r\n   */\r\n  public removeByIds(ids: string[], ifSave?: boolean): Observable<boolean> {\r\n    ifSave = (ifSave === undefined) ? true : ifSave;\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendBatchDelete(ids, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        if (ifSave) {\r\n          // 执行保存\r\n          return this.applyChangesByIdArray(ids).pipe(\r\n            tap(result => {\r\n              if (result) {\r\n                // 从实体集合中删除\r\n                this.repository.entityCollection.removeEntities(\r\n                  (value) => {\r\n                    return this.checkEntityValueExists(value, ids);\r\n                  }\r\n                );\r\n              }\r\n            })\r\n          );\r\n        } else {\r\n          // 从实体集合中删除\r\n          this.repository.entityCollection.removeEntities(\r\n            (value) => {\r\n              return this.checkEntityValueExists(value, ids);\r\n            }\r\n          );\r\n          if (ids && ids.length > 0) {\r\n            const changes = [];\r\n            ids.forEach(id => {\r\n              changes.push({ dataId: id, changeType: DataChangeType.Delete });\r\n            });\r\n            this.repository.dataChangeHistory.addChanges(changes);\r\n          }\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public batchRemove(ids: string[], ifSave: boolean): Observable<any> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendBatchDeletion(ids, requestInfo);\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        if (ifSave) {\r\n          // 执行保存\r\n          return this.applyChangesByIdArray(ids).pipe(\r\n            tap(result => {\r\n              if (result) {\r\n                // 从实体集合中删除\r\n                this.removeEntities(ids);\r\n              }\r\n            })\r\n          );\r\n        } else {\r\n          // 从实体集合中删除\r\n          this.removeEntities(ids);\r\n          this.addBatchRemoveHistory(ids);\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 添加批量删除记录到变更记录中\r\n   * @param ids ids\r\n   */\r\n  private addBatchRemoveHistory(ids: string[]) {\r\n    if (ids && ids.length > 0) {\r\n      const changes = [];\r\n      ids.forEach(id => {\r\n        changes.push({ dataId: id, changeType: DataChangeType.Delete });\r\n      });\r\n      this.repository.dataChangeHistory.addChanges(changes);\r\n    }\r\n  }\r\n  /**\r\n   * 从实体仓库中批量移除指定id的数据\r\n   * @param ids \r\n   */\r\n  private removeEntities(ids: string[]) {\r\n    this.repository.entityCollection.removeEntities(\r\n      (value) => {\r\n        return this.checkEntityValueExists(value, ids);\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * 检测实体的主键值是否存在于数组中，如果存在返回true\r\n   * @param array 待遍历数组\r\n   */\r\n  private checkEntityValueExists(entity: Entity, primaryValueArray: any[]): boolean {\r\n    let isExistInTargetArray = false;\r\n\r\n    for (let i = 0; i < primaryValueArray.length; i++) {\r\n      if (entity.primaryValue === primaryValueArray[i]) {\r\n        isExistInTargetArray = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isExistInTargetArray;\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   * @param path 路径\r\n   * @param id   内码\r\n   */\r\n  public removeByPath(fpath: string, id: string): Observable<boolean> {\r\n\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.extendDeletByPath(fpath, id, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      map(() => {\r\n        this.repository.entityManager.removeEntityByPath(fpath, id);\r\n        this.repository.dataChangeHistory.addChange({ fpath, dataId: id, changeType: DataChangeType.Delete });\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 批量删除子级\r\n   * @param fPath 路径\r\n   * @param ids  子级id集合\r\n   */\r\n  public batchRemoveByPath(fPath: string, ids: string): Observable<boolean> {\r\n\r\n    // 服务器端删除\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const delete$ = this.restService.batchDeleteByPath(fPath, ids, requestInfo);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      map(() => {\r\n        const idArray = ids.split(',');\r\n        if (idArray.length > 0) {\r\n          idArray.forEach((id) => {\r\n            this.repository.entityManager.removeEntityByPath(fPath, id);\r\n            this.repository.dataChangeHistory.addChange({ fpath: fPath, dataId: id, changeType: DataChangeType.Delete });\r\n          });\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 将id对应的实体的变更提交的服务器端\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n\r\n    // 变更集不存在\r\n    if (!entity.changes) {\r\n      return of(true);\r\n    }\r\n\r\n    // 变更集为空\r\n    if (entity.changes.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    const changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n\r\n    const update$ = this.restService.update(changeDetail, requestInfo);\r\n    const result$ = update$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 提交path对应实体的变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<any> {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 提交所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n\r\n    // 遍历实体，提交变更\r\n    const updateResults: Observable<boolean>[] = [];\r\n    const entities: Entity[] = this.repository.entityCollection.toArray();\r\n    if (entities.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    entities.forEach((entity: Entity) => {\r\n      const updateResult$ = this.updateChangesById(entity.primaryValue);\r\n      updateResults.push(updateResult$);\r\n    });\r\n\r\n    // 串联流\r\n    const result$ = zip(...updateResults).pipe(\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.clearAllVariableChanges(requestInfo.variableChange);\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用idArray对应数据的变更\r\n   */\r\n  public applyChangesByIdArray(idArray: string[]): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesByArray(idArray);\r\n        this.repository.dataChangeHistory.clearByIds(idArray);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    const requestInfo = this.restService.buildRequestInfo();\r\n    const save$ = this.restService.save(requestInfo);\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n        this.repository.dataChangeHistory.clearByIds([id]);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 取消变更\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    const cancel$ = this.restService.cancel(options);\r\n    const result$ = cancel$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const append$ = this.restProxy.batchAppendByPath(path, defaultValues, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const list = responseInfo.returnValue;\r\n        const entities = this.repository.entityManager.createEntitiesByPath(path, list);\r\n        const paths = path.split('/').filter(p => p);\r\n        this.repository.entityManager.appendEntitiesByPath(paths, entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    const append$ = this.restProxy.batchAppend(defaultValues, requestInfo);\r\n    return append$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const list = responseInfo.returnValue;\r\n        const entities = this.repository.buildEntities(list);\r\n        this.repository.entityCollection.addEntities(entities);\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @returns \r\n   */\r\n  public hasChanges(): Observable<any> {\r\n    const requestInfo = this.buildRequestInfo();\r\n    return this.restService.hasChanges(requestInfo);\r\n  }\r\n  /**\r\n   * 构造变更集\r\n   */\r\n  public buildRequestInfo(): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: this.repository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: this.repository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n}\r\n\r\nexport { BefDataService };\r\n","import { Injector } from \"@angular/core\";\r\nimport { AppContext, BackEndMessage, BACK_END_MESSAGE_HANDLER_TOKEN, NAMESPACE } from \"@farris/devkit\";\r\n\r\nexport class BackEndMessageUtil {\r\n  public static handleMessage(messages: object[], injector: Injector, options?: any) {\r\n    const namespace = injector.get(NAMESPACE, null);\r\n    const appContext = injector.get<AppContext>(AppContext, null);\r\n    const context: BackEndMessage.IMessageContext = {\r\n      ns: namespace,\r\n      appContext\r\n    };\r\n    const bizMessages = this.buildBackEndMessages(messages);\r\n    const backEndMessage = new BackEndMessage.Message(bizMessages, context);\r\n    const backEndMessageHandler = injector.get<BackEndMessage.IBackEndMessageHandler>(BACK_END_MESSAGE_HANDLER_TOKEN, null);\r\n    if (backEndMessageHandler) {\r\n      backEndMessageHandler.handle(backEndMessage, options);\r\n    }\r\n  }\r\n  public static isBackEndMessageHandlerExist(injector: Injector) {\r\n    const backEndMessageHandler = injector.get<BackEndMessage.IBackEndMessageHandler>(BACK_END_MESSAGE_HANDLER_TOKEN, null);\r\n    return backEndMessageHandler && true || false;\r\n  }\r\n  public static getFormlessMessages(messages: BackEndMessage.IBizMessage[]) {\r\n    const bizMessages = this.buildBackEndMessages(messages) || [];\r\n    return bizMessages.filter((message: BackEndMessage.IBizMessage) => {\r\n      return !message.location || !message.location.columns || message.location.columns.length < 1 || !message.location.nodeCode;\r\n    });\r\n  }\r\n  public static buildBackEndMessages(messages: object[]): BackEndMessage.IBizMessage[] {\r\n    if (!messages || messages.length < 1 || !Array.isArray(messages)) {\r\n      return null;\r\n    }\r\n    const bizMessages: BackEndMessage.IBizMessage[] = [];\r\n    messages.forEach((message: any) => {\r\n      const bizMessage: BackEndMessage.IBizMessage = {\r\n        level: message.level,\r\n        message: message.message\r\n      };\r\n      if (message.hasOwnProperty('location') && message.location) {\r\n        bizMessage.location = {\r\n          nodeCode: message.location.nodeCode,\r\n          rows: message.location.dataIds,\r\n          columns: message.location.columnNames\r\n        };\r\n      }\r\n      bizMessages.push(bizMessage);\r\n    });\r\n    return bizMessages;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { AppContext } from \"@farris/devkit\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { BefSessionService } from \"./bef_session_service\";\r\n\r\n@Injectable()\r\nexport class BefSessionManager {\r\n  private static createSessionHistory = [];\r\n  public static getSessionId(appContext: AppContext, sessionService: BefSessionService): Observable<any> {\r\n    const appId = appContext.ApplicationId;\r\n    const beBaseUri = sessionService.beBaseUri;\r\n    const key = `${appId}_${beBaseUri}`;\r\n    const createSessionIsInvoked = this.createSessionHistory.includes(key);\r\n    if (createSessionIsInvoked) {\r\n      return of(null);\r\n    } else {\r\n      this.createSessionHistory.push(key);\r\n      return sessionService.getBeSessionId();\r\n    }\r\n  }\r\n}","import { throwError, Observable, of, EMPTY } from 'rxjs';\r\nimport { Entity } from '@farris/devkit';\r\nimport { IProxyExtend, ResponseInfo } from './types';\r\nimport { BefRepository } from './bef_repository';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { RequestInfoUtil, ResponseInfoUtil } from './utils';\r\nimport { BackEndMessageUtil } from './utils/back_end_message.util';\r\nimport { BefSessionManager } from './session/bef_session_manager';\r\nimport { LoadingService } from '@farris/ui-loading';\r\n\r\n// tslint:disable: max-line-length tslint:disable: no-string-literal\r\nexport class BefProxyExtend implements IProxyExtend {\r\n  private loadingService: LoadingService;\r\n  constructor(private context: BefRepository<Entity>) {\r\n    const injector = this.context.getInjector();\r\n    if (injector) {\r\n      this.loadingService = injector.get(LoadingService, null);\r\n    }\r\n  }\r\n  /**\r\n   * 请求结果返回\r\n   * @param response response\r\n   * @param ignoreChanges 忽略变更\r\n   */\r\n  public onResponse(response: ResponseInfo, ignoreChanges?: boolean, options?: any) {\r\n    if (response && response.innerDataChange && ignoreChanges !== true) {\r\n      this.context.handleDataChangeDetails(response.innerDataChange);\r\n    }\r\n    if (response && response.innerVariableChange) {\r\n      this.context.handleVariableChangeDetail(response.innerVariableChange);\r\n    }\r\n    const messages = ResponseInfoUtil.parseBackEndMessage(response);\r\n    BackEndMessageUtil.handleMessage(messages, this.context.getInjector());\r\n    this.context.clearAllEntityChanges();\r\n    const requestInfo = RequestInfoUtil.getRequestInfo(options);\r\n    const variableChange = requestInfo && requestInfo.variableChange;\r\n    this.context.clearAllVariableChanges(variableChange);\r\n    if (response && response.hasOwnProperty('returnValue')) {\r\n      return response.returnValue;\r\n    } else {\r\n      return response;\r\n    }\r\n  }\r\n  /**\r\n   * 发生错误\r\n   * @param error error\r\n   * @param selfHandError 自定义错误处理\r\n   * @param ignoreError 忽略错误\r\n   */\r\n  public onError(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any> {\r\n    const formAppContext = this.context.appContext.getFormAppContext();\r\n    const applicationId = formAppContext.ApplicationId;\r\n    const loadingServices = window['DEVKIT_LOADING_SERVICE'];\r\n    const messages = ResponseInfoUtil.parseBackEndError(error);\r\n    BackEndMessageUtil.handleMessage(messages, this.context.getInjector());\r\n    if (this.loadingService) {\r\n      window.setTimeout(() => {\r\n        this.loadingService.clearAll();\r\n      }, 350);\r\n    }\r\n    if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {\r\n      for (const loadingService of loadingServices) {\r\n        if (typeof (loadingService.destroy) === 'function') {\r\n          loadingService.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!!selfHandError) {\r\n      return throwError(error);\r\n    } else {\r\n      const eventBus = this.context.restService.eventBus;\r\n      const applicationContext: any = window[applicationId] || {};\r\n      const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;\r\n      const messages = ResponseInfoUtil.parseBackEndError(error);\r\n      const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);\r\n      const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;\r\n      const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.context.getInjector()) && !isExistFormlessMessage);\r\n      const willThrowException = !!eventBus && isExceptionHandlerExist && needThrowException;\r\n      BackEndMessageUtil.handleMessage(messages, this.context.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: eventBus, error, formAppContext });\r\n      if (!!eventBus && isExceptionHandlerExist) {\r\n        if (ResponseInfoUtil.isReported401Error(error)) {\r\n          return throwError(error);\r\n        }\r\n        if (needThrowException) {\r\n          eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        }\r\n        if (ignoreError) {\r\n          return of(null);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n\r\n    }\r\n  }\r\n  /**\r\n   * 扩展http headers\r\n   * @param headers headers\r\n   */\r\n  public extendHeaders(headers: HttpHeaders, runtimeContext?: any): Observable<{ [propName: string]: any }> {\r\n    const formAppContext = this.context.appContext.getFormAppContext();\r\n    const $getSessionId = BefSessionManager.getSessionId(formAppContext, this.context.restService.sessionService);\r\n    return $getSessionId.pipe(\r\n      switchMap(sessionId => {\r\n        headers = this.context.restService.sessionService.extendRequestHeaders(headers, runtimeContext);\r\n        return of(headers);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 扩展请求参数\r\n   * @param params 参数\r\n   */\r\n  public extendUrl(url: string, params: { [propName: string]: any }): string {\r\n    if (!params) {\r\n      return url;\r\n    }\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = JSON.stringify(params[key]);\r\n        if (url.indexOf('?') === -1) {\r\n          url = `${url}?${key}=${value}`;\r\n        } else {\r\n          url = `${url}&${key}=${value}`;\r\n        }\r\n      }\r\n    }\r\n    return url;\r\n  }\r\n  /**\r\n   * 扩展请求体\r\n   * @param body body\r\n   */\r\n  public extendBody(body): { [propName: string]: any } {\r\n    if (!body || typeof body !== 'object' || Object.keys(body).length < 1) {\r\n      return body;\r\n    }\r\n    Object.keys(body).forEach(name => {\r\n      if (name === 'requestInfo') {\r\n        body['requestInfo'] = this.context.restService.buildRequestInfo();\r\n      }\r\n    });\r\n    // 兼容J版后端body只有一个key时body只传value的情况\r\n    if (Object.keys(body).length === 1) {\r\n      body = Object.values(body)[0];\r\n    }\r\n    return body;\r\n  }\r\n  public parseHeaders(response: any) {\r\n    const sessionIdKey = 'BEFSessionID';\r\n    if (response.headers && response.headers.has(sessionIdKey)) {\r\n      this.context.restService.sessionService.setBeSessionId(response.headers.get(sessionIdKey));\r\n    }\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-11 17:34:26\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-11 17:23:15\r\n * @todo\r\n * 1、修改command-services中的DataService，调用新的API\r\n * 2、移除DeprecatedBefRepository，启用新API\r\n * 3、修改Repository抽象类，添加新API\r\n * 4、对path做处理，修改为数组\r\n */\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MetadataUtil, Entity, AppContext } from '@farris/devkit';\r\n\r\nimport { NG_VARIABLE } from './decorators';\r\nimport { DeprecatedBefRepository } from './deprecated/deprecated_bef_repository';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefVariableManager } from './bef_variable_manager';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefProxyExtend } from './bef_proxy_extend';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { ChangeDetail } from './types';\r\n/**\r\n * BEF实体仓储\r\n * @description\r\n * 负责与后端的业务实体框架交互，管理业务实体数据 \\\r\n * apiUri示例如下：api/scm/sd/v1.0/empservice，前后均不带斜杠\r\n */\r\n@Injectable()\r\nabstract class BefRepository<T extends Entity> extends DeprecatedBefRepository<T> {\r\n\r\n  private befProxy: BefProxy;\r\n  /**\r\n   * @member {BefProxy} proxy\r\n   * @description 每一个BefRepository都需要一个Bef代理，用来处理http请求\r\n   */\r\n  public set proxy(value) {\r\n    this.befProxy = value;\r\n    this.befProxy.setProxyExtend(new BefProxyExtend(this));\r\n  }\r\n  public get proxy(): BefProxy {\r\n    return this.befProxy;\r\n  }\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: BefEntityManager<T>;\r\n\r\n  /**\r\n   * 变量管理器\r\n   * @internal\r\n   */\r\n  public variableManager: BefVariableManager;\r\n\r\n  public appContext: AppContext;\r\n  /**\r\n   * 取数服务\r\n   * @internal\r\n   */\r\n  protected dataService: BefDataService<T>;\r\n\r\n  public serverUri: string;\r\n  /**\r\n   * @param injector 依赖注入器\r\n   */\r\n  constructor(private injector: Injector) {\r\n    super();\r\n\r\n    if (this.entityCollection) {\r\n      // 初始化实体管理器\r\n      this.entityManager = new BefEntityManager(this.entityCollection);\r\n    }\r\n\r\n    // 初始化变量管理器\r\n    this.appContext = this.injector.get<AppContext>(AppContext);\r\n    const ngVariables = MetadataUtil.getPropsMetadatasByName(this.constructor, NG_VARIABLE);\r\n    this.variableManager = new BefVariableManager(this.appContext, ngVariables, this.injector);\r\n\r\n    // 初始化DataService\r\n    this.dataService = new BefDataService(this.injector, this);\r\n    this.serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sort 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 页码\r\n   * @description\r\n   * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）\r\n   * ```json\r\n   * [\r\n   *   {\r\n   *     \"FilterField\": \"DomainID.DomainID_name\",\r\n   *     \"Compare\": 0,\r\n   *     \"Value\": \"人力资源部\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0,\r\n   *     \"Lbracket\": \"(\",\r\n   *     \"Rbracket\": \")\"\r\n   *   }, {\r\n   *     \"FilterField\": \"BillDate\",\r\n   *     \"Compare\": 3,\r\n   *     \"Value\": \"2021-09-03\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0\r\n   *   }, {\r\n   *     \"FilterField\": \"BillDate\",\r\n   *     \"Compare\": 5,\r\n   *     \"Value\": \"2021-10-05\",\r\n   *     \"Relation\": 1,\r\n   *     \"Expresstype\": 0\r\n   *   }\r\n   * ]\r\n   * ```\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析\r\n   * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);\r\n   * ```\r\n   */\r\n  public getEntities(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    return this.dataService.getList(filter, sort, pageSize, pageIndex);\r\n  }\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sorts 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 页码\r\n   * @description\r\n   * 与getEntities方法功能相近，用法相同 \\\r\n   * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上\r\n   * @see {@link getEntities}\r\n   */\r\n  public filter(filter: any[] = [], sorts: any[] = [], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    return this.dataService.filter(filter, sorts, pageSize, pageIndex);\r\n  }\r\n  // #endregion\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param paths 通用路径\r\n   * @param pageIndex 页码\r\n   * @param pageSize 分页大小\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   * @todo 目前并未应用排序和过滤条件\r\n   * @description\r\n   * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \\\r\n   * 通用路径的主键值前必须含有冒号，冒号之前的\"id\"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \\\r\n   * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \\\r\n   * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径\r\n   * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\r\n   * const paths = fullPaths.slice(0, fullPaths.length - 1);\r\n   * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\r\n   * const bindingData = this.viewModel.bindingData;\r\n   * let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n   * nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n   * // 获取上级实体\r\n   * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n   * const parentObject = bindingData.getValue(parentPaths) as BindingObject;\r\n   * if (!parentObject) {\r\n   *   throw new Error('上级实体不存在');\r\n   * }\r\n   * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n   * // 获取绑定路径对应的分页信息\r\n   * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);\r\n   * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);\r\n   * ```\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string) {\r\n    return this.dataService.queryChild(paths, pageIndex, pageSize, filter, sort);\r\n  }\r\n  /**\r\n  * 获取主键为id的实体\r\n  * @param id 主表实体主键\r\n  * @description\r\n  * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \\\r\n  * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {@link updateEntityById} 方法\r\n  */\r\n  public getEntityById(id: string): Observable<T> {\r\n    return this.dataService.getById(id);\r\n  }\r\n\r\n  /**\r\n   * 更新实体数据\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 重新从服务器获取主表上对应主键的实体数据 \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * const rootDataId = this.bindingData.list.currentId;\r\n   * return this.repository.updateEntityById(rootDataId);\r\n   * ```\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    return this.dataService.updateById(id);\r\n  }\r\n  /**\r\n   * 更新实体数据并加锁\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 使用示例：\r\n   * ```typescript\r\n   * id = this.bindingData.list.currentId;  // 编辑当前行\r\n   * const edit$ = this.repository.editEntityById(id);\r\n   * ```\r\n   */\r\n  public editEntityById(id: string): Observable<T> {\r\n    return this.dataService.editById(id);\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建实体\r\n   * @param defaultValue 默认值，JSON对象\r\n   * @description\r\n   * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 在创建新实体后进入编辑状态\r\n   * const create$ = this.repository.createEntity();\r\n   * create$.pipe(\r\n   *   tap(() => {\r\n   *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);\r\n   *   })\r\n   * );\r\n   * ```\r\n   */\r\n  public createEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.create(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param defaultValue 默认值\r\n   * @description 请求创建一个新的实体，并追加到实体仓库（适用于列表）\r\n   */\r\n  public appendEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.append(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 创建并插入新实体（向主表插入）\r\n   * @param position 插入位置\r\n   * @param defaultValue 默认值\r\n   * @description\r\n   * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    return this.dataService.insert(position, defaultValue);\r\n  }\r\n  /**\r\n   * 创建子实体并插入到指定位置（向从表或从从表插入）\r\n   * @param path 父路径\r\n   * @param position 插入位置\r\n   * @description\r\n   * 关于父路径格式，从表形如：\"/1/edus\"，从从表形如：\"/1/edus/12/grades\" \\\r\n   * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \\\r\n   * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \\\r\n   * 插入位置参考 {@link insert} \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径\r\n   * const append$ = this.repository.insertByPath(path, position);\r\n   * ```\r\n   */\r\n  public insertByPath(path: string, position: 1 | -1): Observable<any> {\r\n    return this.dataService.insertByPath(path, position);\r\n  }\r\n  /**\r\n   * 创建子实体并追加到末尾\r\n   * @param fpath 父路径\r\n   * @description\r\n   * 父路径格式参考 {@link insertByPath}\r\n   */\r\n  public appendEntityByPath(fpath: string): Observable<Entity> {\r\n    return this.dataService.appendByPath(fpath);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 主表实体主键\r\n   * @param ifSave 是否保存，可选，默认为true\r\n   * @description\r\n   * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存\r\n   */\r\n  public removeEntityById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    return this.dataService.removeById(id, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体并执行保存\r\n   * @param id 主表实体主键\r\n   */\r\n  public removeEntityAndSaveById(id: string): Observable<boolean> {\r\n    return this.dataService.removeAndSaveById(id);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除父路径下子表中的实体\r\n   * @param fpath 父路径\r\n   * @param id 实体主键\r\n   * @description\r\n   * 父路径格式参考 {@link insertByPath}\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string): Observable<boolean> {\r\n    return this.dataService.removeByPath(fpath, id);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存(默认为false)\r\n   */\r\n  public batchRemove(ids: string[], ifSave: boolean = false): Observable<any> {\r\n    return this.dataService.batchRemove(ids, ifSave);\r\n  }\r\n  /**\r\n   * 批量删除子级实体\r\n   * @param fPath 父路径\r\n   * @param ids 子级id集合\r\n   * @description\r\n   * ids中各个id之间以逗号分隔，父路径格式参考 {@link insertByPath} \\\r\n   * 使用示例：\r\n   * ```typescript\r\n   * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量\r\n   * const remove$ = this.repository.batchRemoveByPath(path, ids);\r\n   * ```\r\n   */\r\n  public batchRemoveByPath(fPath: string, ids: string): Observable<boolean> {\r\n    return this.dataService.batchRemoveByPath(fPath, ids);\r\n  }\r\n  /**\r\n   * 保存主键为id的实体\r\n   * @param id 主表实体主键\r\n   * @description\r\n   * 调用该方法会应用id对应实体上的变更 \\\r\n   * ```typescript\r\n   * const id = this.bindingData.list.currentId as string;\r\n   * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用\r\n   * ```\r\n   */\r\n  public saveEntityById(id: string): Observable<boolean> {\r\n    return this.dataService.applyChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 批量保存\r\n   * @description\r\n   * 应用所有变更，比如调用了 {@link removeEntityById} 且未保存则可以通过此方法保存 \\\r\n   * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存\r\n   */\r\n  public saveEntities(): Observable<boolean> {\r\n    return this.dataService.applyChanges();\r\n  }\r\n\r\n  /**\r\n   * 取消实体变更\r\n   * @description 清空所有实体变更，不希望保存变更时调用此方法\r\n   */\r\n  public cancelEntityChanges(): Observable<boolean> {\r\n    return this.dataService.cancelChanges();\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 父路径，参考 {@link insertByPath}\r\n   * @param defaultValues 默认实体数据数组\r\n   * @description\r\n   * 后端接口只支持批量新增子表，批量新增主表目前不支持\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    return this.dataService.batchAppendByPath(path, defaultValues);\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    return this.dataService.batchAppend(defaultValues);\r\n  }\r\n  /**\r\n   * 清空Repositoy内的数据和变量\r\n   * @description 清空所有实体、变量，并清空BeSessionId\r\n   */\r\n  public reset() {\r\n    this.entityManager.reset();\r\n    this.variableManager.reset();\r\n    this.restService.sessionService.clearBeSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取Injector（外部请勿使用）\r\n   * @internal\r\n   */\r\n  public getInjector(): Injector {\r\n    return this.injector;\r\n  }\r\n  /**\r\n   * 清空vo变量变更\r\n   */\r\n  public clearAllVariableChanges(changeDetail: ChangeDetail) {\r\n    this.variableManager.clearChangeDetail(changeDetail);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @returns \r\n   */\r\n  public hasChanges(): Observable<any> {\r\n    return this.dataService.hasChanges();\r\n  }\r\n}\r\n\r\nexport { BefRepository };\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\n\r\n@Injectable()\r\nexport class UriService {\r\n    constructor(@Inject(BE_SERVER_URI_TOKEN) private serverUri: string) {\r\n    }\r\n    /**\r\n     * 扩展eapi基路径\r\n     * @param apiUri eapi基路径\r\n     */\r\n    public extendUri(apiUri: string): string {\r\n        return `${this.serverUri}/${apiUri}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { HttpParams, HttpClient } from '@angular/common/http';\r\nimport { encodeUrl } from '@farris/devkit';\r\nimport { IProxyExtend, RequestInfo, ResponseInfo, ChangeDetail, RetrieveParam } from './types';\r\nimport { BefDataPathUtil } from './bef_data_path_util';\r\nimport { UriService } from './uri_service';\r\nimport { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';\r\nimport { HttpService } from './http_service';\r\n\r\n\r\nconst GET = 'GET';\r\nconst DELETE = 'DELETE';\r\nconst PUT = 'PUT';\r\nconst POST = 'POST';\r\nconst PATCH = 'PATCH';\r\n\r\n/**\r\n * Bef代理类\r\n * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter\r\n * uri 由uriService\r\n */\r\n@Injectable()\r\nexport class BefProxy {\r\n  protected proxyExtend: IProxyExtend;\r\n  /**\r\n   * restful基路径\r\n   */\r\n  protected baseUri: string;\r\n  private httpService: HttpService;\r\n  constructor(public httpClient: HttpClient, public uriService: UriService) {\r\n    this.httpService = new HttpService(this.httpClient);\r\n  }\r\n  /**\r\n   * 设置基路径\r\n   * @param baseUri 基路径\r\n   */\r\n  public setBaseUri(baseUri: string): void {\r\n    this.baseUri = baseUri;\r\n  }\r\n  /**\r\n   * 设置策略模式\r\n   * @param strategy 策略\r\n   */\r\n  public setProxyExtend(proxyExtend: IProxyExtend) {\r\n    this.proxyExtend = proxyExtend;\r\n  }\r\n  /**\r\n   * 查询\r\n   */\r\n  public query(entityFilter?: any): Observable<any> {\r\n    let url = this.baseUri;\r\n    if (entityFilter) {\r\n      const entityFilterJson = JSON.stringify(entityFilter);\r\n      url = `${url}?entityFilter=${entityFilterJson}`;\r\n    }\r\n    return this.request(url, GET);\r\n  }\r\n\r\n  /**\r\n   * 扩展查询\r\n   */\r\n  public extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    let url = `${this.baseUri}/extension/query`;\r\n    if (entityFilter) {\r\n      let entityFilterJson = JSON.stringify(entityFilter);\r\n      entityFilterJson = encodeUrl(entityFilterJson);\r\n      url = `${url}?entityFilter=${entityFilterJson}`;\r\n    }\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options, false);\r\n  }\r\n  /**\r\n   * 查询数据（带过滤条件）\r\n   * @param entityFilter 过滤、排序、分页信息\r\n   * @param requestInfo requestInfo\r\n   * @description 和extendQuery一致，仅将查询参数放到body中\r\n   */\r\n  public filter(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    let url = `${this.baseUri}/extension/filter`;\r\n    let body: any = { requestInfo };\r\n    if (entityFilter) {\r\n      body = { entityFilter, requestInfo };\r\n    }\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options, false);\r\n  }\r\n\r\n  /**\r\n   * 检索数据\r\n   * @param id 单据内码\r\n   * @return 数据对象\r\n   */\r\n  public retrieve(id: string): Observable<any> {\r\n    const url = `${this.baseUri}/${id}`;\r\n    return this.request(url, GET);\r\n  }\r\n  /**\r\n   * @deprecated 方法已经废弃，请勿使用\r\n   */\r\n  public serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/service/retrieve/${id}`;\r\n    const options = {\r\n      body: { retrieveParam, requestInfo }\r\n    };\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param params 参数\r\n   */\r\n  public queryChild(params: any) {\r\n    const url = `${this.baseUri}/service/querychild`;\r\n    const options = { body: params };\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 检索数据（扩展）\r\n   */\r\n  public extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/retrieve/${id}`;\r\n    let body: any = requestInfo;\r\n    if (retrieveParam) {\r\n      body = { retrieveParam, requestInfo };\r\n    }\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 检索数据\r\n   */\r\n  public edit(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/service/edit/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 创建一条数据\r\n   */\r\n  public create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any> {\r\n    const body = {\r\n      defaultValue,\r\n      requestInfo: requestInfo,\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(this.baseUri, POST, null, options);\r\n  }\r\n\r\n  /**\r\n   * 从表新增\r\n   * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}${pathUrl}`;\r\n\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n\r\n  /**\r\n   * 提交变更\r\n   */\r\n  update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any> {\r\n    const body = {\r\n      changeDetail,\r\n      requestInfo: requestInfo,\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n\r\n    return this.request(this.baseUri, PATCH, null, options);\r\n  }\r\n\r\n  /**\r\n   * 执行保存\r\n   */\r\n  public save(requestInfo?: RequestInfo): Observable<any> {\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(this.baseUri, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  public delete(id: string): Observable<any> {\r\n    const url = `${this.baseUri}/${id}`;\r\n    return this.request(url, DELETE);\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   */\r\n  public deleteAndSave(id: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/service/delete/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除（扩展）\r\n   */\r\n  public extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/delete/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 删除后代\r\n   * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public deletByPath(fpath: string, id: string): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}${pathUrl}/${id}`;\r\n    return this.request(url, DELETE);\r\n  }\r\n\r\n  /**\r\n   * 删除后代（扩展）\r\n   * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUri}/extension${pathUrl}/${id}`;\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 批量删除后代\r\n   * @param fPath 'extension/{rootId}/cc/batch'\r\n   * @param  ids 子集id\r\n   * @param  requestInfo 请求信息\r\n   */\r\n  public batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fPath);\r\n    const pathArray = pathUrl.split('/');\r\n    if (pathArray.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\r\n    }\r\n    /*   const rootId = pathArray[1];\r\n\r\n    const nameArray = [];\r\n    pathArray.forEach((name, index) => {\r\n      if (index > 1 ) {\r\n        if (name.indexOf('s') !== -1) {\r\n          nameArray.push(name.substr(0, name.length - 1));\r\n        } else {\r\n          nameArray.push(name);\r\n        }\r\n      }\r\n    });\r\n    const childName = nameArray.join('/');*/\r\n    const url = `${this.baseUri}/extension${pathUrl}/batch`;\r\n    const idsArray = ids.split(',');\r\n    const body = {\r\n      ids: idsArray,\r\n      requestInfo: requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  /**\r\n   * 批量删除\r\n   * @param ids 待删除的id数组\r\n   */\r\n  public batchDelete(ids: string[]): Observable<any> {\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n    return this.request(this.baseUri, DELETE, params);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/extension/batchdeletion`;\r\n    const body = {\r\n      ids: ids,\r\n      requestInfo: requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n\r\n  /**\r\n   * 批量删除（扩展）\r\n   */\r\n  public extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    const url = `${this.baseUri}/extension/batchdelete`;\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n\r\n    const body = requestInfo;\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, params, options);\r\n  }\r\n\r\n\r\n  /**\r\n   * 取消\r\n   */\r\n  public cancel(context?: any): Observable<any> {\r\n    const url = `${this.baseUri}/service/cancel`;\r\n    return this.request(url, POST, null, null, false, false, false, context);\r\n  }\r\n\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(path);\r\n    const url = `${this.baseUri}${pathUrl}/batch`;\r\n    const body = {\r\n      requestInfo,\r\n      retrieveDefaultParam: {\r\n        defaultValues\r\n      }\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>, requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/batch`;\r\n    const body = {\r\n      requestInfo,\r\n      retrieveDefaultParam: {\r\n        defaultValues\r\n      }\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, POST, null, options);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @param requestInfo requestInfo\r\n   * @returns \r\n   */\r\n  public hasChanges(requestInfo: RequestInfo): Observable<any> {\r\n    const url = `${this.baseUri}/haschanges`;\r\n    const body = {\r\n      ...requestInfo\r\n    };\r\n    const options = this.addBodyToOptions({}, body);\r\n    return this.request(url, PUT, null, options);\r\n  }\r\n  // tslint:disable-next-line: max-line-length\r\n  public request(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean, runtimeContext?: any\r\n  ): Observable<any> {\r\n    options = options || {};\r\n\r\n    // 是否自行处理错误\r\n    if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {\r\n      selfHandError = false;\r\n    }\r\n\r\n    // 是否忽略异常继续执行\r\n    if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {\r\n      ignoreError = false;\r\n    }\r\n\r\n    // params\r\n    if (params) {\r\n      // const httpParams = this.buildParams(params);\r\n      options.params = params;\r\n    }\r\n\r\n    // 处理headers\r\n    options.headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n    // 1、判断是否带requestInfo（不区分首字母大小写）;\r\n    // 2、如果传递的是RequestInfo，则转换为requestInfo；\r\n    const hasRequestInfo = this.hasRequestInfo(options);\r\n    if (options && options.body && options.body.hasOwnProperty('RequestInfo')) {\r\n      options.body.requestInfo = options.body.RequestInfo;\r\n      delete options.body.RequestInfo;\r\n    }\r\n    return this.proxyExtend.extendHeaders(options.headers, runtimeContext).pipe(\r\n      switchMap(headers => {\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options);\r\n      }),\r\n      tap((response: any) => this.proxyExtend.parseHeaders(response)),\r\n      map((result: any) => result.body),\r\n      map((result: any) => {\r\n        if (hasRequestInfo) {\r\n          this.proxyExtend.onResponse(result, ignoreChanges, options);\r\n          return result;\r\n        } else {\r\n\r\n          // body里没有requestInfo的情况，模拟老的处理方式（不清理变更、将returnValue解析出来）\r\n          return this.unWrapResponseInfo(result);\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        return this.proxyExtend.onError(error, selfHandError, ignoreError);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 调用httpclient取数\r\n   * @param url url\r\n   * @param method methods\r\n   * @param options options\r\n   */\r\n  protected invoke(url: string, method: string, options: any): Observable<any> {\r\n    if (options.params) {\r\n      url = this.proxyExtend.extendUrl(url, options.params);\r\n      options.params = null;\r\n    }\r\n    if (options.body) {\r\n      options.body = this.proxyExtend.extendBody(options.body);\r\n    }\r\n    options.headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n    const headers$ = this.proxyExtend.extendHeaders(options.headers);\r\n    return headers$.pipe(\r\n      switchMap(headers => {\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options)\r\n          .pipe(\r\n            tap((response: any) => this.proxyExtend.parseHeaders(response)),\r\n            map((result: any) => result.body),\r\n            map((result: any) => this.proxyExtend.onResponse(result, false, options)),\r\n            catchError(error => this.proxyExtend.onError(error, false, false))\r\n          );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 向HttpOptions对象中添加body\r\n   * @param options 原来的options\r\n   * @param body body内容\r\n   */\r\n  private addBodyToOptions(options: any, body: any) {\r\n    options = options || {};\r\n    const mergedOptions = Object.assign(options, { body });\r\n    return mergedOptions;\r\n  }\r\n  /**\r\n   * 构造HttpParams对象\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: object): HttpParams {\r\n    return HttpParamUtil.buildParams(params);\r\n  }\r\n  /**\r\n   * 是否带有RequestInfo\r\n   */\r\n  private hasRequestInfo(options: any): boolean {\r\n    return RequestInfoUtil.hasRequestInfo(options) || RequestInfoUtil.hasRequestInfoWithR(options);\r\n  }\r\n  /**\r\n   * 处理返回值，兼容老版本\r\n   */\r\n  private unWrapResponseInfo(result: any) {\r\n    return ResponseInfoUtil.unWrapResponseInfo(result);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-02-23 13:57:47\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-24 14:10:40\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError, of, EMPTY } from 'rxjs';\r\nimport { switchMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { Entity, EventBus } from '@farris/devkit';\r\nimport { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';\r\nimport { BefRepository } from './bef_repository';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\nimport { BefSessionService } from './session/index';\r\nimport { ChangeDetail, RequestInfo, ResponseInfo, RetrieveParam } from './types';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { UriService } from './uri_service';\r\nimport { BefProxyExtend } from './bef_proxy_extend';\r\nimport { HttpService } from './http_service';\r\nimport { BackEndMessageUtil } from './utils/back_end_message.util';\r\nimport { BefSessionManager } from './session/bef_session_manager';\r\nimport { LoadingService } from '@farris/ui-loading';\r\n\r\nconst GET = 'GET';\r\nconst DELETE = 'DELETE';\r\nconst PUT = 'PUT';\r\nconst POST = 'POST';\r\nconst PATCH = 'PATCH';\r\n\r\n/**\r\n * BEF取数服务\r\n * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。\r\n */\r\n@Injectable()\r\nclass BefRestService {\r\n\r\n  private repository: BefRepository<Entity>;\r\n  private loadingService: LoadingService;\r\n  /**\r\n   * httpClient\r\n   */\r\n  private httpClient: HttpClient;\r\n  private httpService: HttpService;\r\n\r\n  /**\r\n   * 会话服务\r\n   */\r\n  public sessionService: BefSessionService;\r\n\r\n  /**\r\n   * 接口根Uri\r\n   */\r\n  public baseUri: string;\r\n\r\n  /**\r\n   * 事件总线\r\n   */\r\n  public eventBus: EventBus;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param httpClient http服务\r\n   * @param serverUri 应用服务器地址\r\n   * @param beUri BE API地址\r\n   */\r\n  constructor(\r\n    httpClient: HttpClient, baseUri: string,\r\n    frmSessionService: FrameworkSessionService,\r\n    repository: BefRepository<Entity>,\r\n    eventBus?: EventBus\r\n  ) {\r\n    this.httpClient = httpClient;\r\n    this.httpService = new HttpService(this.httpClient);\r\n    this.baseUri = baseUri;\r\n    const injector = repository.getInjector();\r\n    this.sessionService = new BefSessionService(httpClient, baseUri, frmSessionService, injector);\r\n    this.repository = repository;\r\n    this.eventBus = eventBus;\r\n    if (injector) {\r\n      this.loadingService = injector.get(LoadingService, null);\r\n    }\r\n  }\r\n\r\n\r\n  // #region 代理相关\r\n\r\n  /**\r\n   * 获取Bef代理\r\n   */\r\n  public get proxy(): BefProxy {\r\n    if (!!this.repository.proxy) {\r\n      return this.repository.proxy;\r\n    } else {\r\n      return this.createBefProxy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建Bef代理\r\n   */\r\n  private createBefProxy() {\r\n    const serverUri = this.repository.serverUri;\r\n    const uriService = new UriService(serverUri);\r\n    const defaultProxy = new BefProxy(this.httpClient, uriService);\r\n    defaultProxy.setBaseUri(this.baseUri);\r\n    const extend = new BefProxyExtend(this.repository);\r\n    defaultProxy.setProxyExtend(extend);\r\n    return defaultProxy;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 基本CRUD方法\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public query(entityFilter?: any): Observable<any> {\r\n    return this.proxy.query(entityFilter);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendQuery(entityFilter: any, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendQuery(entityFilter, requestInfo);\r\n  }\r\n  /**\r\n   * 分页查询各从表数据\r\n   * @param id 主表id\r\n   * @param retrieveParam 参数\r\n   */\r\n  public serviceRetrieve(id: string, retrieveParam: any, requestInfo: RequestInfo): Observable<any> {\r\n    return this.proxy.serviceRetrieve(id, retrieveParam, requestInfo);\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param params 查询参数\r\n   */\r\n  public queryChild(params: any) {\r\n    return this.proxy.queryChild(params);\r\n  }\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public retrieve(id: string): Observable<any> {\r\n    return this.proxy.retrieve(id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendRetrieve(id: string, requestInfo: RequestInfo, retrieveParam?: RetrieveParam): Observable<ResponseInfo> {\r\n    return this.proxy.extendRetrieve(id, requestInfo, retrieveParam);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.create(defaultValue, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public createByPath(fpath: string, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.createByPath(fpath, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  update(changeDetail: ChangeDetail, requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.update(changeDetail, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public save(requestInfo?: RequestInfo): Observable<any> {\r\n    return this.proxy.save(requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public delete(id: string): Observable<any> {\r\n    return this.proxy.delete(id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendDelete(id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendDelete(id, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public deletByPath(fpath: string, id: string): Observable<any> {\r\n    return this.proxy.deletByPath(fpath, id);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendDeletByPath(fpath: string, id: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendDeletByPath(fpath, id, requestInfo);\r\n  }\r\n  public batchDeleteByPath(fPath: string, ids: string, requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.batchDeleteByPath(fPath, ids, requestInfo);\r\n  }\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public batchDelete(ids: string[]): Observable<any> {\r\n    return this.proxy.batchDelete(ids);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public extendBatchDelete(ids: string[], requestInfo: RequestInfo): Observable<ResponseInfo> {\r\n    return this.proxy.extendBatchDelete(ids, requestInfo);\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param requestInfo requestInfo\r\n   */\r\n  public extendBatchDeletion(ids: string[], requestInfo: RequestInfo): Observable<any> {\r\n    return this.proxy.extendBatchDeletion(ids, requestInfo);\r\n  }\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public cancel(options?: any): Observable<any> {\r\n    return this.proxy.cancel(options);\r\n  }\r\n  /**\r\n   * 检查当前业务上下文内是否存在未保存的变更\r\n   * @param requestInfo requestInfo\r\n   * @returns \r\n   */\r\n  public hasChanges(requestInfo: RequestInfo): Observable<any>{\r\n    return this.proxy.hasChanges(requestInfo);\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region request方法\r\n\r\n  /**\r\n   * 已废弃，请使用repository.proxy对应方法代替\r\n   * @deprecated\r\n   */\r\n  public request(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean\r\n  ): Observable<any> {\r\n    return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, false);\r\n  }\r\n  // tslint:disable: align\r\n\r\n  /**\r\n   * 调用后端方法\r\n   * @param url url\r\n   * @param method method\r\n   * @param params params\r\n   * @param options options\r\n   * @param selfHandError 自己处理异常\r\n   * @param ignoreError 忽略错误\r\n   * @param ignoreChanges 忽略变更\r\n   */\r\n  public invoke(url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean) {\r\n    if (options && options.body && options.body.RequestInfo) {\r\n      throw new Error('请使用requestInfo提交变更');\r\n    }\r\n    return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, true);\r\n  }\r\n\r\n  /**\r\n   * 内部的request方法\r\n   */\r\n  private innerRequest(\r\n    url: string, method: string, params?: any, options?: any,\r\n    selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean,\r\n    useCorrectRequestInfoCheckMethod?: boolean\r\n  ) {\r\n    options = options || {};\r\n    const befSessionIdKey = 'BEFSessionID';\r\n\r\n    // 是否自己处理异常\r\n    if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {\r\n      selfHandError = false;\r\n    }\r\n\r\n    // 是否忽略异常继续执行\r\n    if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {\r\n      ignoreError = false;\r\n    }\r\n\r\n    // 选择检查RequestInfo的方法\r\n    if (typeof (useCorrectRequestInfoCheckMethod) === 'undefined' || typeof (useCorrectRequestInfoCheckMethod) !== 'boolean') {\r\n      useCorrectRequestInfoCheckMethod = false;\r\n    }\r\n    const checkRequestInfoMethod = useCorrectRequestInfoCheckMethod ? this.existRequestInfo : this.hasRequestInfo;\r\n\r\n    // params\r\n    if (params) {\r\n      // const httpParams = this.buildParams(params);\r\n      options.params = params;\r\n    }\r\n\r\n    // 带有requestInfo的请求，请求成功后清空变更集\r\n    const hasRequestInfo = checkRequestInfoMethod(options);\r\n    let headers = HttpHeaderUtil.convertToHeaders(options.headers);\r\n\r\n    // 串联session流和http流\r\n    const formAppContext = this.repository.appContext.getFormAppContext();\r\n    return BefSessionManager.getSessionId(formAppContext, this.sessionService).pipe(\r\n      switchMap((sessionId: string) => {\r\n        headers = this.sessionService.extendRequestHeaders(headers);\r\n        options.headers = HttpHeaderUtil.toJson(headers);\r\n        options.observe = 'response';\r\n        return this.httpService.request(method, url, options);\r\n      }),\r\n      tap((response: any) => {\r\n        if (response.headers && response.headers.has(befSessionIdKey)) {\r\n          this.sessionService.setBeSessionId(response.headers.get(befSessionIdKey));\r\n        }\r\n      }),\r\n      map((response: any) => response.body),\r\n      map((result: any) => {\r\n        const messages = ResponseInfoUtil.parseBackEndMessage(result);\r\n        BackEndMessageUtil.handleMessage(messages, this.repository.getInjector());\r\n\r\n        return this.handleReponseInfo(result, hasRequestInfo, ignoreChanges, options);\r\n      }),\r\n      catchError((error: any) => {\r\n\r\n        return this.handleErrors(error, selfHandError, ignoreError);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 处理返回结果\r\n   */\r\n  public handleReponseInfo(result: any, hasRequestInfo: boolean, ignoreChanges: boolean, options: any): any {\r\n    if (hasRequestInfo) {\r\n      // 如果有带有RequestInfo，则按新结构处理\r\n      // 1、应用服务器端返回的变更；\r\n      // 2、清空本地变更集；\r\n      // 3、返回新结构\r\n      if (result && result.innerDataChange && ignoreChanges !== true) {\r\n        this.repository.handleDataChangeDetails(result.innerDataChange);\r\n      }\r\n      if (result && result.innerVariableChange) {\r\n        this.repository.handleVariableChangeDetail(result.innerVariableChange);\r\n      }\r\n      this.repository.clearAllEntityChanges();\r\n      const requestInfo = RequestInfoUtil.getRequestInfo(options);\r\n      const variableChange = requestInfo && requestInfo.variableChange;\r\n      this.repository.clearAllVariableChanges(variableChange);\r\n      return result;\r\n    } else {\r\n      // 如果有没有RequestInfo，则按老的方式处理\r\n      // 1、不处理服务器端返回的变更：跟老的行为一样；\r\n      // 2、不清理本地变更：因为变更没有提交；\r\n      // 3、返回老的结构：兼容老的代码\r\n      return this.unWrapResponseInfo(result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 错误处理\r\n   */\r\n  public handleErrors(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any> {\r\n    this.clearLoading();\r\n\r\n    if (!!selfHandError) {\r\n      return throwError(error);\r\n    } else {\r\n      const formAppContext = this.repository.appContext.getFormAppContext();\r\n      const applicationId = formAppContext.ApplicationId;\r\n      const applicationContext: any = window[applicationId] || {};\r\n      const messages = ResponseInfoUtil.parseBackEndError(error);\r\n      const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);\r\n      const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;\r\n      const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;\r\n      const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.repository.getInjector()) && !isExistFormlessMessage);\r\n      const willThrowException = !!this.eventBus && isExceptionHandlerExist && needThrowException;\r\n      BackEndMessageUtil.handleMessage(messages, this.repository.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: this.eventBus, error, formAppContext });\r\n      if (!!this.eventBus && isExceptionHandlerExist) {\r\n        if (ResponseInfoUtil.isReported401Error(error)) {\r\n          return throwError(error);\r\n        }\r\n        if (needThrowException) {\r\n          this.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        }\r\n        if (ignoreError) {\r\n          return of(null);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    }\r\n\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 工具方法\r\n\r\n  /**\r\n   * 清空Loading\r\n   */\r\n  private clearLoading(): void {\r\n    const ifLoadingExists = window['DEVKIT_LOADING_SERVICE'] &&\r\n      window['DEVKIT_LOADING_SERVICE'] instanceof Array &&\r\n      window['DEVKIT_LOADING_SERVICE'].length > 0 || false;\r\n\r\n    if (ifLoadingExists === false) {\r\n      this.clearAllLoading();\r\n      return;\r\n    }\r\n\r\n    const loadingServices: any[] = window['DEVKIT_LOADING_SERVICE'];\r\n    for (const service of loadingServices) {\r\n      if (typeof (service.destroy) === 'function') {\r\n        service.destroy();\r\n      }\r\n    }\r\n    this.clearAllLoading();\r\n  }\r\n  private clearAllLoading() {\r\n    if (this.loadingService) {\r\n      window.setTimeout(() => {\r\n        this.loadingService.clearAll();\r\n      }, 350);\r\n    }\r\n  }\r\n  /**\r\n   * 处理返回值，兼容老版本\r\n   */\r\n  private unWrapResponseInfo(result: any): any {\r\n    return ResponseInfoUtil.unWrapResponseInfo(result);\r\n  }\r\n\r\n  /**\r\n   * 是否带有RequestInfo\r\n   */\r\n  private hasRequestInfo(options: any): boolean {\r\n    return RequestInfoUtil.hasRequestInfoWithR(options);\r\n  }\r\n  /**\r\n   * 是否带有requestInfo\r\n   */\r\n  private existRequestInfo(options: any) {\r\n    return RequestInfoUtil.hasRequestInfo(options);\r\n  }\r\n\r\n  /**\r\n   * 构造HttpParams对象\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: any): HttpParams {\r\n    return HttpParamUtil.buildParams(params);\r\n  }\r\n\r\n  /**\r\n   * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）\r\n   * @body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}\r\n   */\r\n  public buildBodyWithRequestInfo(body: any): any {\r\n    return RequestInfoUtil.buildBodyWithRequestInfo(body, this.repository);\r\n  }\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public buildRequestInfo(): RequestInfo {\r\n    return RequestInfoUtil.buildRequestInfo(this.repository);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { BefRestService };\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { switchMap, map, tap, catchError } from 'rxjs/operators';\r\nimport { ILookupHttpService, RemoteParams, LookupGridResult } from '@farris/ui-lookup';\r\nimport { Repository, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { ResponseInfo } from './types';\r\nimport { LoadingService, LoadingConfig, LoadingComponent } from '@farris/ui-loading';\r\n/**\r\n * 帮助Rest取数服务\r\n */\r\n@Injectable()\r\nexport class BefLookupRestService implements ILookupHttpService {\r\n  private loadingService: LoadingService;\r\n  private befRepository: BefRepository<any>;\r\n\r\n  /**\r\n   * 帮助取数上下文\r\n   */\r\n  public context: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    repository: Repository<any>,\r\n    @Optional() private frameContext: FrameContext\r\n  ) {\r\n    this.befRepository = <BefRepository<any>>repository;\r\n    this.registerDestroyEvent();\r\n    this.loadingService = this.frameContext && this.frameContext.injector.get(LoadingService, null);\r\n  }\r\n  private registerDestroyEvent() {\r\n    if (this.frameContext && this.frameContext.destorySignal) {\r\n      this.frameContext.destorySignal.subscribe(() => {\r\n        this.frameContext = null;\r\n        this.befRepository = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  public getData(helpMetadataId: string, data?: RemoteParams): Observable<LookupGridResult> {\r\n    const tableName = helpMetadataId.split('.')[0];\r\n    const labelId = helpMetadataId.split('.')[1];\r\n    data = data || {};\r\n    if (this.frameContext) {\r\n      const primaryValue = this.frameContext.bindingData.list.currentId;\r\n      data['currentForm'] = {\r\n        id: primaryValue\r\n      };\r\n    }\r\n    const enableExtendLoadMethod = this.ifEnableExtendLoadMethod(helpMetadataId);\r\n    if (enableExtendLoadMethod === true) {\r\n      return this.extendGetHelpData(labelId, tableName, data);\r\n    }\r\n    return this.getHelpData(labelId, tableName, data);\r\n  }\r\n  public saveUserSettings(data) {\r\n    const url = '/api/runtime/bcc/v1.0/datagrid/settings';\r\n    return this.befRepository.restService.invoke(url, 'POST', null, { body: data }, false).pipe(\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getUserSettings(key) {\r\n    const url = '/api/runtime/bcc/v1.0/datagrid/settings/' + key;\r\n    return this.befRepository.restService.invoke(url, 'GET', null, null, false).pipe(\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 是否启用扩展取数方法\r\n   */\r\n  private ifEnableExtendLoadMethod(helpMetadataId: string) {\r\n\r\n    // 优先使用context里的设置\r\n    if (this.context && this.context.hasOwnProperty('enableExtendLoadMethod')) {\r\n      return this.context.enableExtendLoadMethod;\r\n    }\r\n\r\n    // context没有设置时，继续使用通过指令设置的开关\r\n    let enableExtendLoadMethod = false;\r\n    if (this.frameContext) {\r\n      const befApiUrl = this.frameContext.repository.apiUri;\r\n      const enableKey = `${helpMetadataId}@${befApiUrl}`;\r\n      enableExtendLoadMethod = this.frameContext.getParam(enableKey);\r\n    }\r\n    return enableExtendLoadMethod;\r\n  }\r\n\r\n  /**\r\n   * 老的帮助取树\r\n   */\r\n  private getHelpData(labelId: string, tableName: string, data: any): Observable<LookupGridResult> {\r\n    const url = `${this.befRepository.restService.baseUri}/elementhelps/${labelId}`;\r\n    const update$ = this.befRepository.updateDataAndVariableChanges();\r\n\r\n    const result$ = update$.pipe(\r\n      switchMap(() => {\r\n        this.extendQueryParam(data);\r\n        // tslint:disable-next-line: max-line-length\r\n        return this.befRepository.restService.invoke(url, 'GET', { nodeCode: tableName, queryParam: JSON.stringify(data) }, null, false).pipe(\r\n          catchError(error => {\r\n            this.clearLoading();\r\n            const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n            return EMPTY;\r\n          })\r\n        );\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 扩展的帮助取数\r\n   */\r\n  private extendGetHelpData(labelId: string, tableName: string, data: any): Observable<LookupGridResult> {\r\n    const url = `${this.befRepository.restService.baseUri}/extension/elementhelps`;\r\n    this.extendQueryParam(data);\r\n    const body = {\r\n      labelId: labelId,\r\n      nodeCode: tableName,\r\n      queryParam: data,\r\n      requestInfo: this.befRepository.restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n\r\n    const result$ = this.befRepository.restService.invoke(url, 'PUT', null, options, false, true);\r\n    return result$.pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        return responseInfo && responseInfo.returnValue || null;\r\n      }),\r\n      catchError(error => {\r\n        this.clearLoading();\r\n        const formAppContext = this.befRepository.appContext.getFormAppContext();\r\n        this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n        return EMPTY;\r\n      }\r\n      ),\r\n    );\r\n  }\r\n  private clearLoading() {\r\n    if (this.loadingService) {\r\n      this.loadingService.clearAll();\r\n    }\r\n  }\r\n  private convert2TreeDataWithPathCode(data: any[], layer = 1, parentPathCode = '01') {\r\n    let nodes = data.filter(d => d.layer === layer && d.pathcode === parentPathCode);\r\n    if (layer > 1) {\r\n      nodes = data.filter(d => d.layer === layer && d.pathcode.substr(0, (layer - 1) * 2) === parentPathCode);\r\n    }\r\n    if (nodes.length) {\r\n      const treeNodes = nodes.map(n => {\r\n        return {\r\n          data: n,\r\n          children: []\r\n        };\r\n      });\r\n\r\n      treeNodes.forEach(tn => {\r\n        const _tns = this.convert2TreeDataWithPathCode(data, tn.data.layer + 1, tn.data.pathcode);\r\n        tn.children.push(..._tns);\r\n      });\r\n\r\n      return treeNodes;\r\n    }\r\n  }\r\n  private extendQueryParam(queryParam: any) {\r\n    if (queryParam && typeof queryParam === 'object') {\r\n      const paths = this.getPath();\r\n      queryParam.relationFilterFieldInfo = paths;\r\n    }\r\n  }\r\n  private getPath(): string {\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const rid = this.frameContext.viewModel.bindingData.list.currentId; // root表数据id\r\n    let path = rid;\r\n\r\n    const subPaths = bindingPath.split('/').filter(p => p);\r\n    if (subPaths.length > 0) {\r\n      let subData: any = this.frameContext.viewModel.bindingData;\r\n      for (let index = 0; index < subPaths.length; index++) {\r\n        const subPath = subPaths[index];\r\n        subData = subData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);\r\n        }\r\n        path += `/${subPath.substring(0, subPath.length - 1)}/${subData.currentId}`;\r\n      }\r\n      // path += '/' + subPaths[subPaths.length - 1]+'/' + ;\r\n    }\r\n    return path;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ILookupHttpService, RemoteParams, LookupGridResult } from '@farris/ui-lookup';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { map } from 'rxjs/operators/map';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\n\r\n\r\n/**\r\n * 帮助Rest取数服务\r\n */\r\n@Injectable()\r\nexport class BefLookupDefaultService implements ILookupHttpService {\r\n    private befRepository: BefRepository<any>;\r\n\r\n    constructor(repository: Repository<any>, private sessionService: FrameworkSessionService) {\r\n        this.befRepository = <BefRepository<any>>repository;\r\n    }\r\n\r\n    createSession(url: string) {\r\n        const userSessionID = this.sessionService.getUserSessionId();\r\n        if (userSessionID) {\r\n            return this.befRepository.restService.invoke(url, 'POST', null, {\r\n                headers: new HttpHeaders({ 'SessionId': userSessionID }),\r\n                responseType: 'text'\r\n            }, false).pipe(\r\n                switchMap((str: string) => {\r\n                    return of({ status: true, payload: str });\r\n                })\r\n            );\r\n        } else {\r\n            return of({ status: false, payload: '用户登录信息已过期，请重新登录' });\r\n        }\r\n    }\r\n\r\n    getData(url: string, params?: RemoteParams): Observable<LookupGridResult> {\r\n\r\n        let entityFilter = {};\r\n        if (params.condition) {\r\n            entityFilter = params.condition;\r\n        }\r\n\r\n        if (url[url.length - 1] === '/') {\r\n            url = url.substr(0, url.length - 1);\r\n        }\r\n\r\n        let queryUrl = `${url}/extension/query`, createSessionUrl = `${url}/service/createsession`;\r\n\r\n        if (entityFilter) {\r\n            const entityFilterJson = JSON.stringify(entityFilter);\r\n            queryUrl = `${queryUrl}?entityFilter=${entityFilterJson}`;\r\n        }\r\n\r\n\r\n        return this.createSession(createSessionUrl).pipe(\r\n            switchMap((usrSess: any) => {\r\n                if (usrSess.status) {\r\n                    const sessionId = usrSess.payload;\r\n                    const options: any = {};\r\n                    // if (options.headers) {\r\n                    //     options.headers = options.headers.append('SessionId', usrSess.payload);\r\n                    // } else {\r\n                    // options.headers = new HttpHeaders({ SessionId: sessionId });\r\n                    // }\r\n                    // const token = this.befRepository.restService.sessionService.token;\r\n                    // options.headers = options.headers.append('X-CAF-Runtime-CommonVariable', token);\r\n                    // options.headers = options.headers.append('X-CAF-Runtime-Context', sessionId);\r\n                    return this.befRepository.restService.invoke(queryUrl, 'PUT', null, options, false);\r\n                } else {\r\n                    // @todo: ng7\r\n                    // return new ErrorObservable(usrSess.payload);\r\n                    throw new Error(usrSess.payload);\r\n                }\r\n            }),\r\n            map((res: any) => {\r\n                const val = res.returnValue;\r\n                const data = { items: val.result };\r\n                if (val.pagination) {\r\n                    return Object.assign({}, data, {\r\n                        total: val.pagination.totalCount,\r\n                        pageInfo: {\r\n                            pageSize: val.pagination.pageSize,\r\n                            pageIndex: val.pagination.pageIndex,\r\n                            enablePager: true\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return data;\r\n            })\r\n        )\r\n    }\r\n\r\n}\r\n","import { BefRepository } from './bef_repository';\r\n\r\nexport class BefRepositoryUtil {\r\n  /**\r\n   * 检查BefRepository是否存在未保存数据\r\n   * @param befRepository \r\n   */\r\n  public static isExistUnsaveData(befRepository: BefRepository<any>): boolean {\r\n    let hasUnsavedData = false;\r\n    if (!befRepository || !befRepository.entityCollection) {\r\n      throw 'Current Object is null or it\\'s entityCollection is null.';\r\n    }\r\n\r\n    const entityArray = befRepository.entityCollection.toArray();\r\n    if (befRepository.dataChangeHistory.isChanged()) {\r\n      return true;\r\n    }\r\n    for (let i = 0; i < entityArray.length; i++) {\r\n      if (entityArray[i].changes.length > 0) {\r\n        hasUnsavedData = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasUnsavedData;\r\n  }\r\n\r\n}\r\n","export class Uri {\r\n    constructor(private url: string, private paths: { [propName: string]: any } = null) {\r\n        if (!!this.paths) {\r\n            Object.keys(paths).forEach(path => {\r\n                if (this.url.indexOf(`{${path}}`) !== -1) {\r\n                    this.url = this.url.replace(`{${path}}`, `${paths[path]}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public toString() {\r\n        return this.url;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ComboHttpService } from '@farris/ui-combo-list';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DefaultComboHttpService implements ComboHttpService {\r\n  private befRest: BefRepository<any>;\r\n\r\n  constructor(repository: Repository<any>) {\r\n    this.befRest = repository as BefRepository<any>;\r\n  }\r\n  getData(url: string, params = {}, method = 'GET'): Observable<any> {\r\n    const headers = new HttpHeaders({ 'content-type': 'application/json' })\r\n    // return this.befRest.restService.invoke(url, method, params, { headers });\r\n    if (method.toLowerCase() !== 'get') {\r\n      return this.befRest.restService.invoke(url, method, null, { headers, body: params });\r\n    } else {\r\n      return this.befRest.restService.invoke(url, method, params, { headers });\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ComboHttpService } from '@farris/ui-combo-list';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository } from './bef_repository';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { DynamiControlGroupHttpInterface } from '@farris/dynamic-control-group';\r\n\r\n@Injectable()\r\nexport class DefaultDynamiControlGroupHttpService implements DynamiControlGroupHttpInterface {\r\n    private befRest: BefRepository<any>;\r\n\r\n    constructor(repository: Repository<any>) {\r\n        this.befRest = repository as BefRepository<any>;\r\n    }\r\n    getData(url: string, params = {}, method = 'GET'): Observable<any> {\r\n        const headers = new HttpHeaders({ 'content-type': 'application/json' })\r\n        return this.befRest.restService.invoke(url, method, params, { headers });\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { DataTypeInfo, Entity, EntityCollection } from '@farris/devkit';\r\nimport { Observable } from 'rxjs';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BE_SERVER_URI_TOKEN } from './tokens';\r\nimport { UriService } from './uri_service';\r\n\r\nclass DynamicBefRepository<T extends Entity> extends BefRepository<T> {\r\n  batchAppend(defaultValues: any[]): Observable<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // public paginationInfo = {\r\n  //   Entity: {\r\n  //     pageSize: 20,\r\n  //   },\r\n  // };\r\n\r\n\r\n\r\n\r\n  constructor(injector: Injector, public name: string, public entityType: any, public serverUri: string, public apiUri: string) {\r\n    super(injector);\r\n    this.apiUri = apiUri;\r\n    // 构造分页属性信息\r\n    const paginationInfo = {};\r\n    paginationInfo[entityType.typeName] = { pageSize: 20 };\r\n    this.paginationInfo = paginationInfo;\r\n\r\n    this.name = name;\r\n\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection(this.entityType);\r\n    // 初始化实体管理器\r\n    this.entityManager = new BefEntityManager(this.entityCollection);\r\n\r\n    // 设置proxy属性值\r\n    const httpClient = injector.get(HttpClient);\r\n    const uriService = new UriService(serverUri);\r\n    const proxy = new BefProxy(httpClient, uriService);\r\n    const baseUri = uriService.extendUri(apiUri);\r\n    proxy.setBaseUri(baseUri);\r\n    this.proxy = proxy;\r\n\r\n    this.dataService = new BefDataService(injector, this);\r\n    this.serverUri = injector.get<string>(BE_SERVER_URI_TOKEN);\r\n  }\r\n}\r\n\r\nexport { DynamicBefRepository };\r\n","import { Injector } from '@angular/core';\r\nimport { DataTypeInfo, Entity, EntityCollection, EntityTypeFactory } from '@farris/devkit';\r\nimport { Observable } from 'rxjs';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefRepository } from './bef_repository';\r\n\r\nclass PresetBefRepository<T extends Entity> extends BefRepository<T> {\r\n  batchAppend(defaultValues: any[]): Observable<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  constructor(injector: Injector, public schema: any) {\r\n    super(injector);\r\n    const entityTypeFactory: EntityTypeFactory = new EntityTypeFactory();\r\n    this.entityType = entityTypeFactory.create(schema) as  any;\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection(this.entityType);\r\n    // 初始化实体管理器\r\n    this.entityManager = new BefEntityManager(this.entityCollection);\r\n  }\r\n}\r\n\r\nexport { PresetBefRepository };\r\n","export * from './lib/types';\r\nexport * from './lib/tokens';\r\nexport * from './lib/bef_change_builder';\r\nexport * from './lib/bef_change_handler';\r\nexport * from './lib/session/index';\r\nexport * from './lib/bef_rest_service';\r\nexport * from './lib/bef_proxy';\r\nexport * from './lib/bef_lookup.service';\r\nexport * from './lib/bef_lookup_default.service';\r\nexport * from './lib/bef_repository';\r\nexport * from './lib/framework_session_service';\r\nexport * from './lib/decorators';\r\nexport * from './lib/bef_repository_util';\r\nexport * from './lib/bef_data_path_util';\r\nexport * from './lib/uri_service';\r\nexport * from './lib/uri';\r\nexport * from './lib/bef_combo.service';\r\nexport * from './lib/bef_dynamic_control_group_default.service';\r\nexport * from './lib/bef_entity_manager';\r\nexport * from './lib/dynamic_bef_repository';\r\nexport * from './lib/preset_bef_repository';\r\nexport * from './lib/bef_variable_manager';\r\nexport const VERSION = 'ver.';\r\n"],"names":["InjectionToken","FieldMetadataUtil","ModifyType","EntityCollection","Injectable","SessionService","Optional","HttpHeaders","HttpParams","HttpClient","tslib_1.__extends","of","AppContext","tap","InjectFlags","Injector","makePropDecorator","Repository","EntityManager","format","FrameContext","BindingPathConverter","PropertyUtil","BindingPropertyType","EventBus","map","ViewModel","DataTypeInfoUtil","ExpressionUtil","switchMap","DataChangeType","zip","NAMESPACE","BackEndMessage","BACK_END_MESSAGE_HANDLER_TOKEN","LoadingService","tslib_1.__values","throwError","EMPTY","MetadataUtil","Inject","encodeUrl","catchError","DataTypeInfo","EntityTypeFactory"],"mappings":"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"}
