/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-11 20:32:02
 * @Last Modified by: Witt
 * @Last Modified time: 2020-03-03 16:46:39
 */
import { Injectable, Injector, InjectFlags } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FrameworkSessionService } from '../framework_session_service';
import { BE_SESSION_HANDLING_STRATEGY_TOKEN } from '../tokens';
import { BefSessionHandlingStrategyFactory } from './bef_session_handling_strategy_factory';
import { AppContext } from '@farris/devkit';
var BefSessionService = /** @class */ (function () {
    /**
     * 构造函数
     * @summary
     * 产品部存在new BeSessionService()的场景，injector可能为空，必须要兼容。
     */
    function BefSessionService(httpClient, beBaseUri, frmSessionService, injector) {
        this.beBaseUri = beBaseUri;
        this.injector = injector;
        this.handlingStrategy = this.createHandlingStrategy(injector, httpClient, frmSessionService, beBaseUri);
    }
    Object.defineProperty(BefSessionService.prototype, "token", {
        /**
         * 获取token
         */
        get: /**
         * 获取token
         * @return {?}
         */
        function () {
            return this.handlingStrategy.getFrameworkSessionId();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSessionService.prototype.getBeSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        return this.handlingStrategy.getSessionId();
    };
    /**
     * 设置sessionId
     * @param sessionId sessionId
     */
    /**
     * 设置sessionId
     * @param {?} sessionId sessionId
     * @return {?}
     */
    BefSessionService.prototype.setBeSessionId = /**
     * 设置sessionId
     * @param {?} sessionId sessionId
     * @return {?}
     */
    function (sessionId) {
        this.handlingStrategy.setSessionId(sessionId);
        this.setSessionId(sessionId);
    };
    /**
     * 清空BeSessionId
     */
    /**
     * 清空BeSessionId
     * @return {?}
     */
    BefSessionService.prototype.clearBeSessionId = /**
     * 清空BeSessionId
     * @return {?}
     */
    function () {
        this.handlingStrategy.clearSessionId();
    };
    /**
     * 扩展请求header
     */
    /**
     * 扩展请求header
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionService.prototype.extendRequestHeaders = /**
     * 扩展请求header
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        return this.handlingStrategy.extendRequestHeaders(headers, runtimeContext);
    };
    /**
     * 处理响应header
     */
    /**
     * 处理响应header
     * @param {?} headers
     * @return {?}
     */
    BefSessionService.prototype.handleResponseHeaders = /**
     * 处理响应header
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        return this.handlingStrategy.handleReponseHeaders(headers);
    };
    /**
     * 创建BeSessionId
     * @deprecated
     * 不再提供封装，请自行调用EAPI上的createSession方法。
     * @summary
     * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；
     * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.
     */
    /**
     * 创建BeSessionId
     * @deprecated
     * 不再提供封装，请自行调用EAPI上的createSession方法。
     * \@summary
     * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；
     * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.
     * @return {?}
     */
    BefSessionService.prototype.createBeSession = /**
     * 创建BeSessionId
     * @deprecated
     * 不再提供封装，请自行调用EAPI上的createSession方法。
     * \@summary
     * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；
     * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var handlingStrategy = (/** @type {?} */ (this.handlingStrategy));
        return handlingStrategy.createSession();
    };
    /**
     * @private
     * @param {?} sessionId
     * @return {?}
     */
    BefSessionService.prototype.setSessionId = /**
     * @private
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var appContext = this.injector.get(AppContext, null, InjectFlags.Optional);
        if (appContext && sessionId) {
            appContext.params.set('sessionId', sessionId);
        }
    };
    /**
     * 创建BeSession处理策略
     * @summary session处理策略
     *
     * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector
     *
     * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`
     *
     * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）
     */
    /**
     * 创建BeSession处理策略
     * \@summary session处理策略
     *
     * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector
     *
     * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`
     *
     * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）
     * @private
     * @param {?} injector
     * @param {?} httpClient
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @return {?}
     */
    BefSessionService.prototype.createHandlingStrategy = /**
     * 创建BeSession处理策略
     * \@summary session处理策略
     *
     * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector
     *
     * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`
     *
     * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）
     * @private
     * @param {?} injector
     * @param {?} httpClient
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @return {?}
     */
    function (injector, httpClient, frmSessionService, beBaseUri) {
        /** @type {?} */
        var handlingStrategyName;
        // 开发自己实例化的befSessionService
        if (!injector) {
            handlingStrategyName = 'SeparatedSession';
        }
        else {
            // bef 实例化
            handlingStrategyName = injector.get(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);
        }
        // 老表单，兼容老的模式，分开创建session
        if (!handlingStrategyName) {
            handlingStrategyName = 'SeparatedSession';
        }
        /** @type {?} */
        var handlingStrategyFactory = new BefSessionHandlingStrategyFactory();
        return handlingStrategyFactory.create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector);
    };
    BefSessionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefSessionService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String },
        { type: FrameworkSessionService },
        { type: Injector }
    ]; };
    return BefSessionService;
}());
if (false) {
    /** @type {?} */
    BefSessionService.prototype.beBaseUri;
    /**
     * Session处理策略类
     * @type {?}
     * @private
     */
    BefSessionService.prototype.handlingStrategy;
    /**
     * @type {?}
     * @private
     */
    BefSessionService.prototype.injector;
}
export { BefSessionService };
//# sourceMappingURL=data:application/json;base64,