/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: Witt
 * @Date: 2018-10-11 20:32:02
 * @Last Modified by: Witt
 * @Last Modified time: 2020-03-03 16:46:39
 */
import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { HttpHeaderUtil } from '../utils/index';
import { HttpService } from '../http_service';
import { AppContext } from '@farris/devkit';
/**
 * BefSession处理策略类
 * @abstract
 */
var /**
 * BefSession处理策略类
 * @abstract
 */
BefSessionHandlingStrategy = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefSessionHandlingStrategy(storageStrategy, frmSessionService) {
        this.storageStrategy = storageStrategy;
        this.frmSessionService = frmSessionService;
    }
    /**
     * 框架SessionId（用户的或者功能菜单的）
     */
    /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getFrmSessionId = /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        return this.frmSessionService.getCurrentSessionId(runtimeContext);
    };
    Object.defineProperty(BefSessionHandlingStrategy.prototype, "frmSessionId", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.frmSessionService.getCurrentSessionId();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取框架SessionId
     */
    /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getFrameworkSessionId = /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        return this.getFrmSessionId(runtimeContext);
    };
    /**
     * 从缓存中获取BeSession
     */
    /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionIdFromStorage = /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionStorageKey = this.getSessionStorageKey(runtimeContext);
        /** @type {?} */
        var beSessionId = this.storageStrategy.getItem(sessionStorageKey);
        return beSessionId;
    };
    return BefSessionHandlingStrategy;
}());
if (false) {
    /**
     * 存储策略
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.storageStrategy;
    /**
     * 框架Session服务
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.frmSessionService;
    /**
     * 获取SessionId
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionId = function () { };
    /**
     * @abstract
     * @param {?} sessionId
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.setSessionId = function (sessionId) { };
    /**
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.clearSessionId = function () { };
    /**
     * @abstract
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.extendRequestHeaders = function (headers, runtimeContext) { };
    /**
     * @abstract
     * @param {?} headers
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.handleReponseHeaders = function (headers) { };
    /**
     * @abstract
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionStorageKey = function (runtimeContext) { };
}
/**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
var /**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
BefSeparatedSessionHandlingStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(BefSeparatedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUri, injector) {
        var _this = _super.call(this, storageStrategy, frmSessionService) || this;
        _this.beSessionUri = beBaseUri;
        _this.httpClient = httpClient;
        _this.httpService = new HttpService(_this.httpClient);
        _this.injector = injector;
        return _this;
    }
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            return of(beSessionId);
        }
        return this.createSession();
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        // this.storageStrategy.removeItem(sessionKey);
        this.storageStrategy.clear(this.frmSessionId, sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.extendRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage(runtimeContext);
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);
        }
        // const appContext = this.injector.get<AppContext>(AppContext, null);
        //if (appContext) {
        // const appId = appContext.ApplicationId;
        headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);
        // }
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * 创建BeSessionId
     */
    /**
     * 创建BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.createSession = /**
     * 创建BeSessionId
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = {
            responseType: 'text'
        };
        if (!!this.frmSessionId) {
            /** @type {?} */
            var appContext = this.injector.get(AppContext, null);
            params.headers = new HttpHeaders({ SessionId: this.frmSessionId });
            params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);
            //if (appContext) {
            // const appId = appContext.ApplicationId;
            params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);
            //}
            params.headers = HttpHeaderUtil.toJson(params.headers);
        }
        return this.httpService.request('POST', this.beSessionUri, params).pipe(tap((/**
         * @param {?} beSessionId
         * @return {?}
         */
        function (beSessionId) {
            _this.setSessionId(beSessionId);
        })));
    };
    /**
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.extendHttpHeader = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return sessionId + "_" + this.beSessionUri;
    };
    return BefSeparatedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.injector;
    /**
     * 创建Session的的EAPI地址
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.beSessionUri;
    /**
     * httpClient
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.httpService;
}
var BefUnifiedSessionHandlingStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(BefUnifiedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beBaseUri, injector) {
        var _this = _super.call(this, storageStrategy, frmSessionService) || this;
        _this.beSessionUri = beBaseUri;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        var sessionId = this.storageStrategy.getItem(sessionKey);
        return of(sessionId);
        // return of(null);
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.removeItem(sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.extendRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage(runtimeContext);
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        /** @type {?} */
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            /** @type {?} */
            var token = appContext.Token;
            headers = HttpHeaderUtil.appendFuncInstId(headers, token);
        }
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @summary
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        // const isDebug = false;
        // if (isDebug) {
        //   return `${this.frmSessionId}_${this.beSessionUri}`;
        // } else {
        //   return this.frmSessionId;
        // }
        /** @type {?} */
        var sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return sessionId + "_" + this.beSessionUri;
    };
    return BefUnifiedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));
if (false) {
    /**
     * 创建Session的的EAPI地址
     * @type {?}
     * @private
     */
    BefUnifiedSessionHandlingStrategy.prototype.beSessionUri;
    /**
     * @type {?}
     * @private
     */
    BefUnifiedSessionHandlingStrategy.prototype.injector;
}
export { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX3Nlc3Npb25faGFuZGxpbmdfc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2JlZi8iLCJzb3VyY2VzIjpbImxpYi9zZXNzaW9uL2JlZl9zZXNzaW9uX2hhbmRsaW5nX3N0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQU9BLE9BQU8sRUFBYyxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFJNUM7Ozs7O0lBcUJFOztPQUVHO0lBQ0gsb0NBQVksZUFBeUMsRUFBRSxpQkFBMEM7UUFDL0YsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0lBQzdDLENBQUM7SUFoQkQ7O09BRUc7Ozs7Ozs7SUFDTyxvREFBZTs7Ozs7O0lBQXpCLFVBQTBCLGNBQW9CO1FBQzVDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFDRCxzQkFBYyxvREFBWTs7Ozs7UUFBMUI7WUFDRSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ3RELENBQUM7OztPQUFBO0lBb0JEOztPQUVHOzs7Ozs7SUFDSSwwREFBcUI7Ozs7O0lBQTVCLFVBQTZCLGNBQW9CO1FBQy9DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM5QyxD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WUFBWSxDQUFDO1NBQy9CO1FBQ0QsT0FBVSxTQUFTLFNBQUksSUFBSSxDQUFDLFlBQWMsQ0FBQztJQUM3QyxDQUFDO0lBQ0gsd0NBQUM7QUFBRCxDQUFDLEFBdkZELENBQWdELDBCQUEwQixHQXVGekU7Ozs7Ozs7SUFsRkMseURBQTZCOzs7OztJQUM3QixxREFBMkI7O0FBbUY3QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsbUNBQW1DLEVBQUUsaUNBQWlDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IFdpdHRcclxuICogQERhdGU6IDIwMTgtMTAtMTEgMjA6MzI6MDJcclxuICogQExhc3QgTW9kaWZpZWQgYnk6IFdpdHRcclxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAyMC0wMy0wMyAxNjo0NjozOVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi4vZnJhbWV3b3JrX3Nlc3Npb25fc2VydmljZSc7XHJcbmltcG9ydCB7IEh0dHBIZWFkZXJVdGlsIH0gZnJvbSAnLi4vdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBCZVNlc3Npb25TdG9yYWdlU3RyYXRlZ3kgfSBmcm9tICcuL2JlZl9zZXNzaW9uX3N0b3JhZ2Vfc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4uL2h0dHBfc2VydmljZSc7XHJcbmltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbi8qKlxyXG4gKiBCZWZTZXNzaW9u5aSE55CG562W55Wl57G7XHJcbiAqL1xyXG5hYnN0cmFjdCBjbGFzcyBCZWZTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWtmOWCqOetlueVpVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBzdG9yYWdlU3RyYXRlZ3k6IEJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneTtcclxuXHJcbiAgLyoqXHJcbiAgICog5qGG5p62U2Vzc2lvbuacjeWKoVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBmcm1TZXNzaW9uU2VydmljZTogRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2U7XHJcbiAgLyoqXHJcbiAgICog5qGG5p62U2Vzc2lvbklk77yI55So5oi355qE5oiW6ICF5Yqf6IO96I+c5Y2V55qE77yJXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldEZybVNlc3Npb25JZChydW50aW1lQ29udGV4dD86IGFueSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5mcm1TZXNzaW9uU2VydmljZS5nZXRDdXJyZW50U2Vzc2lvbklkKHJ1bnRpbWVDb250ZXh0KTtcclxuICB9XHJcbiAgcHJvdGVjdGVkIGdldCBmcm1TZXNzaW9uSWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmZybVNlc3Npb25TZXJ2aWNlLmdldEN1cnJlbnRTZXNzaW9uSWQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHN0b3JhZ2VTdHJhdGVneTogQmVTZXNzaW9uU3RvcmFnZVN0cmF0ZWd5LCBmcm1TZXNzaW9uU2VydmljZTogRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UpIHtcclxuICAgIHRoaXMuc3RvcmFnZVN0cmF0ZWd5ID0gc3RvcmFnZVN0cmF0ZWd5O1xyXG4gICAgdGhpcy5mcm1TZXNzaW9uU2VydmljZSA9IGZybVNlc3Npb25TZXJ2aWNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WU2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGdldFNlc3Npb25JZCgpOiBPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgcHVibGljIGFic3RyYWN0IHNldFNlc3Npb25JZChzZXNzaW9uSWQpOiB2b2lkO1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBjbGVhclNlc3Npb25JZCgpOiB2b2lkO1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBleHRlbmRSZXF1ZXN0SGVhZGVycyhoZWFkZXJzOiBIdHRwSGVhZGVycywgcnVudGltZUNvbnRleHQ/OiBhbnkpOiBIdHRwSGVhZGVycztcclxuICBwdWJsaWMgYWJzdHJhY3QgaGFuZGxlUmVwb25zZUhlYWRlcnMoaGVhZGVyczogSHR0cEhlYWRlcnMpOiB2b2lkO1xyXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRTZXNzaW9uU3RvcmFnZUtleShydW50aW1lQ29udGV4dD86IGFueSk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5qGG5p62U2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZyYW1ld29ya1Nlc3Npb25JZChydW50aW1lQ29udGV4dD86IGFueSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RnJtU2Vzc2lvbklkKHJ1bnRpbWVDb250ZXh0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS7jue8k+WtmOS4reiOt+WPlkJlU2Vzc2lvblxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXRTZXNzaW9uSWRGcm9tU3RvcmFnZShydW50aW1lQ29udGV4dD86IGFueSkge1xyXG4gICAgY29uc3Qgc2Vzc2lvblN0b3JhZ2VLZXkgPSB0aGlzLmdldFNlc3Npb25TdG9yYWdlS2V5KHJ1bnRpbWVDb250ZXh0KTtcclxuICAgIGNvbnN0IGJlU2Vzc2lvbklkID0gdGhpcy5zdG9yYWdlU3RyYXRlZ3kuZ2V0SXRlbShzZXNzaW9uU3RvcmFnZUtleSk7XHJcbiAgICByZXR1cm4gYmVTZXNzaW9uSWQ7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICog6ZqU56a755qEQmVTZXNzaW9u5aSE55CG562W55Wl77yI5q2k562W55Wl5b+F6aG75L+d6K+BaW5qZWN0b3LkuLpudWxs55qE5oOF5Ya15LiL5q2j5bi45b2x6K6v5oCn77yJXHJcbiAqIEBzdW1tYXJ5XHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICog5aSE55CG5Y6f5YiZ77yaXHJcbiAqIDHjgIHpgJrov4djcmVhdGVTZXNzaW9u5Yib5bu677ybXHJcbiAqIDLjgIHmr4/kuKpSZXBvc2l0b3J55oul5pyJ54us56uL55qEQmVTZXNzaW9u77ybXHJcbiAqIDPjgIHorr/pl65CReeahEVBUEnml7bvvIzpgJrov4doZWFkZXLph4znmoRTZXNzaW9uSWTkvKDpgJLvvJtcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiDlhbzlrrnmgKfogIPomZHvvJpcclxuICogMeOAgeacieS6p+WTgemDqOebtOaOpW5ldyBCZVNlc3Npb25TZXJ2aWNlKCnvvIzmsqHmnInkvKDpgJJcclxuICovXHJcbmNsYXNzIEJlZlNlcGFyYXRlZFNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5IGV4dGVuZHMgQmVmU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3kge1xyXG4gIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yO1xyXG4gIC8qKlxyXG4gICAqIOWIm+W7ulNlc3Npb27nmoTnmoRFQVBJ5Zyw5Z2AXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBiZVNlc3Npb25Vcmk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogaHR0cENsaWVudFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudDtcclxuXHJcbiAgcHJpdmF0ZSBodHRwU2VydmljZTogSHR0cFNlcnZpY2U7XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBzdG9yYWdlU3RyYXRlZ3k6IEJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSwgZnJtU2Vzc2lvblNlcnZpY2U6IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlLFxyXG4gICAgaHR0cENsaWVudDogSHR0cENsaWVudCwgYmVCYXNlVXJpOiBzdHJpbmcsIGluamVjdG9yOiBJbmplY3RvclxyXG4gICkge1xyXG4gICAgc3VwZXIoc3RvcmFnZVN0cmF0ZWd5LCBmcm1TZXNzaW9uU2VydmljZSk7XHJcbiAgICB0aGlzLmJlU2Vzc2lvblVyaSA9IGJlQmFzZVVyaTtcclxuICAgIHRoaXMuaHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XHJcbiAgICB0aGlzLmh0dHBTZXJ2aWNlID0gbmV3IEh0dHBTZXJ2aWNlKHRoaXMuaHR0cENsaWVudCk7XHJcbiAgICB0aGlzLmluamVjdG9yID0gaW5qZWN0b3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZCZVNlc3Npb25JZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTZXNzaW9uSWQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IGJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZSgpO1xyXG4gICAgaWYgKGJlU2Vzc2lvbklkKSB7XHJcbiAgICAgIHJldHVybiBvZihiZVNlc3Npb25JZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTZXNzaW9uKCk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572uQmVTZXNzaW9uSWRcclxuICAgKi9cclxuICBwdWJsaWMgc2V0U2Vzc2lvbklkKHNlc3Npb25JZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBzZXNzaW9uS2V5ID0gdGhpcy5nZXRTZXNzaW9uU3RvcmFnZUtleSgpO1xyXG4gICAgdGhpcy5zdG9yYWdlU3RyYXRlZ3kuc2V0SXRlbShzZXNzaW9uS2V5LCBzZXNzaW9uSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5riF56m6U2Vzc2lvbmlkXHJcbiAgICovXHJcbiAgcHVibGljIGNsZWFyU2Vzc2lvbklkKCkge1xyXG4gICAgY29uc3Qgc2Vzc2lvbktleSA9IHRoaXMuZ2V0U2Vzc2lvblN0b3JhZ2VLZXkoKTtcclxuICAgIC8vIHRoaXMuc3RvcmFnZVN0cmF0ZWd5LnJlbW92ZUl0ZW0oc2Vzc2lvbktleSk7XHJcbiAgICB0aGlzLnN0b3JhZ2VTdHJhdGVneS5jbGVhcih0aGlzLmZybVNlc3Npb25JZCwgc2Vzc2lvbktleSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmianlsZVTZXNzaW9u55u45YWz5aS05L+h5oGvXHJcbiAgICovXHJcbiAgcHVibGljIGV4dGVuZFJlcXVlc3RIZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzLCBydW50aW1lQ29udGV4dD86IGFueSk6IEh0dHBIZWFkZXJzIHtcclxuICAgIGNvbnN0IGZybVNlc3Npb25JZCA9IHRoaXMuZ2V0RnJhbWV3b3JrU2Vzc2lvbklkKHJ1bnRpbWVDb250ZXh0KTtcclxuICAgIGNvbnN0IGJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZShydW50aW1lQ29udGV4dCk7XHJcbiAgICBoZWFkZXJzID0gSHR0cEhlYWRlclV0aWwuYXBwZW5kQ2FmUnVudGltZUNvbW1vblZhcmlhYmxlKGhlYWRlcnMsIGZybVNlc3Npb25JZCk7XHJcbiAgICBpZiAoYmVTZXNzaW9uSWQpIHtcclxuICAgICAgaGVhZGVycyA9IEh0dHBIZWFkZXJVdGlsLmFwcGVuZENhZlJ1bnRpbWVDb250ZXh0KGhlYWRlcnMsIGJlU2Vzc2lvbklkKTtcclxuICAgICAgaGVhZGVycyA9IEh0dHBIZWFkZXJVdGlsLmFwcGVuZFNlc3Npb25JZChoZWFkZXJzLCBiZVNlc3Npb25JZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc3QgYXBwQ29udGV4dCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQsIG51bGwpO1xyXG4gICAgLy9pZiAoYXBwQ29udGV4dCkge1xyXG4gICAgLy8gY29uc3QgYXBwSWQgPSBhcHBDb250ZXh0LkFwcGxpY2F0aW9uSWQ7XHJcbiAgICBoZWFkZXJzID0gSHR0cEhlYWRlclV0aWwuYXBwZW5kRnVuY0luc3RJZChoZWFkZXJzLCB0aGlzLmJlU2Vzc2lvblVyaSk7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBoZWFkZXJzID0gSHR0cEhlYWRlclV0aWwuYXBwZW5kUmVxdWlyZU1lc3NhZ2UoaGVhZGVycywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gaGVhZGVycztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkhOeQhuacjeWKoeWZqOerr+i/lOWbnueahGhlYWRlcnNcclxuICAgKi9cclxuICBwdWJsaWMgaGFuZGxlUmVwb25zZUhlYWRlcnMoaGVhZGVyczogSHR0cEhlYWRlcnMpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7ukJlU2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZVNlc3Npb24oKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHBhcmFtczogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9ID0ge1xyXG4gICAgICByZXNwb25zZVR5cGU6ICd0ZXh0J1xyXG4gICAgfTtcclxuICAgIGlmICghIXRoaXMuZnJtU2Vzc2lvbklkKSB7XHJcbiAgICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxBcHBDb250ZXh0PihBcHBDb250ZXh0LCBudWxsKTtcclxuICAgICAgcGFyYW1zLmhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoeyBTZXNzaW9uSWQ6IHRoaXMuZnJtU2Vzc2lvbklkIH0pO1xyXG4gICAgICBwYXJhbXMuaGVhZGVycyA9IHBhcmFtcy5oZWFkZXJzLmFwcGVuZCgnWC1DQUYtUnVudGltZS1Db21tb25WYXJpYWJsZScsIHRoaXMuZnJtU2Vzc2lvbklkKTtcclxuICAgICAgLy9pZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICAvLyBjb25zdCBhcHBJZCA9IGFwcENvbnRleHQuQXBwbGljYXRpb25JZDtcclxuICAgICAgcGFyYW1zLmhlYWRlcnMgPSBwYXJhbXMuaGVhZGVycy5hcHBlbmQoJ0Z1bmMtSW5zdC1JZCcsIHRoaXMuYmVTZXNzaW9uVXJpKTtcclxuICAgICAgLy99XHJcbiAgICAgIHBhcmFtcy5oZWFkZXJzID0gSHR0cEhlYWRlclV0aWwudG9Kc29uKHBhcmFtcy5oZWFkZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5odHRwU2VydmljZS5yZXF1ZXN0KCdQT1NUJywgdGhpcy5iZVNlc3Npb25VcmksIHBhcmFtcykucGlwZShcclxuICAgICAgdGFwKChiZVNlc3Npb25JZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRTZXNzaW9uSWQoYmVTZXNzaW9uSWQpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBleHRlbmRIdHRwSGVhZGVyKCkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5p+Q5LiqUmVwb3NpdG9yeeWvueW6lOeahEJlU2Vzc2lvbueahOWUr+S4gGtleVxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogMeOAgeWcqOS9v+eUqOeLrOeri0JlU2Vzc2lvbueahOe7hOWQiOihqOWNleS4re+8jOmcgOimgemAmui/h0JlU2Vzc2lvblVyaemalOemu++8m1xyXG4gICAqIDLjgIHlnKhEZWJ1Z+aooeW8j+S4i++8jEZybVNlc3Npb25JZD1Vc2VyU2Vzc2lvbmlk77yM5aaC5p6c5Y+q55So5a6D5L2ca2V577yMXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldFNlc3Npb25TdG9yYWdlS2V5KHJ1bnRpbWVDb250ZXh0PzogYW55KTogc3RyaW5nIHtcclxuICAgIGxldCBzZXNzaW9uSWQgPSBudWxsO1xyXG4gICAgaWYgKHJ1bnRpbWVDb250ZXh0KSB7XHJcbiAgICAgIHNlc3Npb25JZCA9IHRoaXMuZ2V0RnJhbWV3b3JrU2Vzc2lvbklkKHJ1bnRpbWVDb250ZXh0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlc3Npb25JZCA9IHRoaXMuZnJtU2Vzc2lvbklkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke3Nlc3Npb25JZH1fJHt0aGlzLmJlU2Vzc2lvblVyaX1gO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcblxyXG5jbGFzcyBCZWZVbmlmaWVkU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3kgZXh0ZW5kcyBCZWZTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7ulNlc3Npb27nmoTnmoRFQVBJ5Zyw5Z2AXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBiZVNlc3Npb25Vcmk6IHN0cmluZztcclxuICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcjtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBzdG9yYWdlU3RyYXRlZ3k6IEJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSwgZnJtU2Vzc2lvblNlcnZpY2U6IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlLCBiZUJhc2VVcmk6IHN0cmluZywgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgKSB7XHJcbiAgICBzdXBlcihzdG9yYWdlU3RyYXRlZ3ksIGZybVNlc3Npb25TZXJ2aWNlKTtcclxuICAgIHRoaXMuYmVTZXNzaW9uVXJpID0gYmVCYXNlVXJpO1xyXG4gICAgdGhpcy5pbmplY3RvciA9IGluamVjdG9yO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFNlc3Npb25JZCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgY29uc3Qgc2Vzc2lvbktleSA9IHRoaXMuZ2V0U2Vzc2lvblN0b3JhZ2VLZXkoKTtcclxuICAgIGNvbnN0IHNlc3Npb25JZCA9IHRoaXMuc3RvcmFnZVN0cmF0ZWd5LmdldEl0ZW0oc2Vzc2lvbktleSk7XHJcbiAgICByZXR1cm4gb2Yoc2Vzc2lvbklkKVxyXG4gICAgLy8gcmV0dXJuIG9mKG51bGwpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572uQmVTZXNzaW9uSWRcclxuICAgKi9cclxuICBwdWJsaWMgc2V0U2Vzc2lvbklkKHNlc3Npb25JZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBzZXNzaW9uS2V5ID0gdGhpcy5nZXRTZXNzaW9uU3RvcmFnZUtleSgpO1xyXG4gICAgdGhpcy5zdG9yYWdlU3RyYXRlZ3kuc2V0SXRlbShzZXNzaW9uS2V5LCBzZXNzaW9uSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5riF56m6U2Vzc2lvbmlkXHJcbiAgICovXHJcbiAgcHVibGljIGNsZWFyU2Vzc2lvbklkKCkge1xyXG4gICAgY29uc3Qgc2Vzc2lvbktleSA9IHRoaXMuZ2V0U2Vzc2lvblN0b3JhZ2VLZXkoKTtcclxuICAgIHRoaXMuc3RvcmFnZVN0cmF0ZWd5LnJlbW92ZUl0ZW0oc2Vzc2lvbktleSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmianlsZVTZXNzaW9u55u45YWz5aS05L+h5oGvXHJcbiAgICovXHJcbiAgcHVibGljIGV4dGVuZFJlcXVlc3RIZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzLCBydW50aW1lQ29udGV4dD86IGFueSk6IEh0dHBIZWFkZXJzIHtcclxuICAgIGNvbnN0IGZybVNlc3Npb25JZCA9IHRoaXMuZ2V0RnJhbWV3b3JrU2Vzc2lvbklkKHJ1bnRpbWVDb250ZXh0KTtcclxuICAgIGNvbnN0IGJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZShydW50aW1lQ29udGV4dCk7XHJcbiAgICAvLyBoZWFkZXJzID0gSHR0cEhlYWRlclV0aWwuYXBwZW5kUmVxdWlyZU1lc3NhZ2UoaGVhZGVycywgdHJ1ZSk7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy5pbmplY3Rvci5nZXQ8QXBwQ29udGV4dD4oQXBwQ29udGV4dCwgbnVsbCk7XHJcbiAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICBjb25zdCB0b2tlbiA9IGFwcENvbnRleHQuVG9rZW47XHJcbiAgICAgIGhlYWRlcnMgPSBIdHRwSGVhZGVyVXRpbC5hcHBlbmRGdW5jSW5zdElkKGhlYWRlcnMsIHRva2VuKTtcclxuICAgIH1cclxuICAgIGhlYWRlcnMgPSBIdHRwSGVhZGVyVXRpbC5hcHBlbmRDYWZSdW50aW1lQ29tbW9uVmFyaWFibGUoaGVhZGVycywgZnJtU2Vzc2lvbklkKTtcclxuICAgIGlmIChiZVNlc3Npb25JZCkge1xyXG4gICAgICBoZWFkZXJzID0gSHR0cEhlYWRlclV0aWwuYXBwZW5kQ2FmUnVudGltZUNvbnRleHQoaGVhZGVycywgYmVTZXNzaW9uSWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIbmnI3liqHlmajnq6/ov5Tlm57nmoRoZWFkZXJzXHJcbiAgICovXHJcbiAgcHVibGljIGhhbmRsZVJlcG9uc2VIZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogdm9pZCB7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5p+Q5LiqUmVwb3NpdG9yeeWvueW6lOeahEJlU2Vzc2lvbueahOWUr+S4gGtleVxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldFNlc3Npb25TdG9yYWdlS2V5KHJ1bnRpbWVDb250ZXh0PzogYW55KTogc3RyaW5nIHtcclxuICAgIC8vIGNvbnN0IGlzRGVidWcgPSBmYWxzZTtcclxuICAgIC8vIGlmIChpc0RlYnVnKSB7XHJcbiAgICAvLyAgIHJldHVybiBgJHt0aGlzLmZybVNlc3Npb25JZH1fJHt0aGlzLmJlU2Vzc2lvblVyaX1gO1xyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vICAgcmV0dXJuIHRoaXMuZnJtU2Vzc2lvbklkO1xyXG4gICAgLy8gfVxyXG4gICAgbGV0IHNlc3Npb25JZCA9IG51bGw7XHJcbiAgICBpZiAocnVudGltZUNvbnRleHQpIHtcclxuICAgICAgc2Vzc2lvbklkID0gdGhpcy5nZXRGcmFtZXdvcmtTZXNzaW9uSWQocnVudGltZUNvbnRleHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2Vzc2lvbklkID0gdGhpcy5mcm1TZXNzaW9uSWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7c2Vzc2lvbklkfV8ke3RoaXMuYmVTZXNzaW9uVXJpfWA7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBCZWZTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSwgQmVmU2VwYXJhdGVkU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3ksIEJlZlVuaWZpZWRTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSB9O1xyXG4iXX0=