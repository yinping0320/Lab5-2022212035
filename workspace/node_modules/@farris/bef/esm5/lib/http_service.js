/**
 * @fileoverview added by tsickle
 * Generated from: lib/http_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// tslint:disable: no-string-literal disable: max-line-length
var HttpService = /** @class */ (function () {
    function HttpService(defaultHttpClient) {
        this.defaultHttpClient = defaultHttpClient;
        this.httpClient = defaultHttpClient;
        this.rtf = this.getService();
    }
    /**
     * 遍历获取rtf服务
     */
    /**
     * 遍历获取rtf服务
     * @private
     * @return {?}
     */
    HttpService.prototype.getService = /**
     * 遍历获取rtf服务
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var env = window;
        while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {
            env = window.parent;
        }
        return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};
    };
    /**
     * 是否同源
     * @param environment window
     */
    /**
     * 是否同源
     * @private
     * @param {?} environment window
     * @return {?}
     */
    HttpService.prototype.isSameOrigin = /**
     * 是否同源
     * @private
     * @param {?} environment window
     * @return {?}
     */
    function (environment) {
        /** @type {?} */
        var host = window.location.host;
        try {
            if (environment && environment.location && typeof environment.location.host !== 'undefined') {
                return environment.location.host === host;
            }
        }
        catch (e) {
            return false;
        }
        return false;
    };
    Object.defineProperty(HttpService.prototype, "params", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (this.rtf && this.rtf.hasOwnProperty('session') && typeof this.rtf['session']['getCommonVariable'] === 'function') {
                return this.rtf['session']['getCommonVariable']();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpService.prototype, "httpService", {
        /**
         * 获取运行框架http服务
         */
        get: /**
         * 获取运行框架http服务
         * @return {?}
         */
        function () {
            if (this.rtf && this.rtf.hasOwnProperty('http') && typeof this.rtf['http']['request'] === 'function') {
                return this.rtf.http;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} method
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.request = /**
     * @param {?} method
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (method, url, options) {
        if (options === void 0) { options = {}; }
        // todo: 使用运行框架的httpclient导致帮助无法显示数据，暂时撤回
        // if (this.httpService && this.params && this.params.tabId) {
        //   return this.httpService.request$(method, url, options);
        // } else {
        //   return this.defaultHttpClient.request(method, url, options);
        // }
        return this.defaultHttpClient.request(method, url, options);
    };
    HttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return HttpService;
}());
export { HttpService };
if (false) {
    /** @type {?} */
    HttpService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.rtf;
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.defaultHttpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9iZWYvIiwic291cmNlcyI6WyJsaWIvaHR0cF9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBR2xEO0lBSUUscUJBQW9CLGlCQUE2QjtRQUE3QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQVk7UUFDL0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztRQUNwQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBQ0Q7O09BRUc7Ozs7OztJQUNLLGdDQUFVOzs7OztJQUFsQjs7WUFDTSxHQUFHLEdBQVcsTUFBTTtRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsRixHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUNyQjtRQUNELE9BQU8sR0FBRyxDQUFDLHFCQUFxQixDQUFDLElBQUksR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9FLENBQUM7SUFDRDs7O09BR0c7Ozs7Ozs7SUFDSyxrQ0FBWTs7Ozs7O0lBQXBCLFVBQXFCLFdBQW1COztZQUNoQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJO1FBQ2pDLElBQUk7WUFDRixJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsUUFBUSxJQUFJLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO2dCQUMzRixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQzthQUMzQztTQUNGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0Qsc0JBQVksK0JBQU07Ozs7O1FBQWxCO1lBQ0UsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDcEgsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQzthQUNuRDtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQzs7O09BQUE7SUFJRCxzQkFBVyxvQ0FBVztRQUh0Qjs7V0FFRzs7Ozs7UUFDSDtZQUNFLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssVUFBVSxFQUFFO2dCQUNwRyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO2FBQ3RCO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTs7Ozs7OztJQUNNLDZCQUFPOzs7Ozs7SUFBZCxVQUFlLE1BQWMsRUFBRSxHQUFXLEVBQUUsT0FBaUI7UUFBakIsd0JBQUEsRUFBQSxZQUFpQjtRQUMzRCx5Q0FBeUM7UUFDekMsOERBQThEO1FBQzlELDREQUE0RDtRQUM1RCxXQUFXO1FBQ1gsaUVBQWlFO1FBQ2pFLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5RCxDQUFDOztnQkF6REYsVUFBVTs7OztnQkFIRixVQUFVOztJQTZEbkIsa0JBQUM7Q0FBQSxBQTFERCxJQTBEQztTQXpEWSxXQUFXOzs7SUFDdEIsaUNBQThCOzs7OztJQUM5QiwwQkFBaUI7Ozs7O0lBQ0wsd0NBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbi8vIHRzbGludDpkaXNhYmxlOiBuby1zdHJpbmctbGl0ZXJhbCBkaXNhYmxlOiBtYXgtbGluZS1sZW5ndGhcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSHR0cFNlcnZpY2Uge1xyXG4gIHB1YmxpYyBodHRwQ2xpZW50OiBIdHRwQ2xpZW50O1xyXG4gIHByaXZhdGUgcnRmOiBhbnk7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkZWZhdWx0SHR0cENsaWVudDogSHR0cENsaWVudCkge1xyXG4gICAgdGhpcy5odHRwQ2xpZW50ID0gZGVmYXVsdEh0dHBDbGllbnQ7XHJcbiAgICB0aGlzLnJ0ZiA9IHRoaXMuZ2V0U2VydmljZSgpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDpgY3ljobojrflj5ZydGbmnI3liqFcclxuICAgKi9cclxuICBwcml2YXRlIGdldFNlcnZpY2UoKSB7XHJcbiAgICBsZXQgZW52OiBXaW5kb3cgPSB3aW5kb3c7XHJcbiAgICB3aGlsZSAoIWVudlsnZ3NwZnJhbWV3b3JrU2VydmljZSddICYmIGVudiAhPT0gd2luZG93LnRvcCAmJiB0aGlzLmlzU2FtZU9yaWdpbihlbnYpKSB7XHJcbiAgICAgIGVudiA9IHdpbmRvdy5wYXJlbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW52Wydnc3BmcmFtZXdvcmtTZXJ2aWNlJ10gJiYgZW52Wydnc3BmcmFtZXdvcmtTZXJ2aWNlJ11bJ3J0ZiddIHx8IHt9O1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmmK/lkKblkIzmupBcclxuICAgKiBAcGFyYW0gZW52aXJvbm1lbnQgd2luZG93XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc1NhbWVPcmlnaW4oZW52aXJvbm1lbnQ6IFdpbmRvdykge1xyXG4gICAgY29uc3QgaG9zdCA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKGVudmlyb25tZW50ICYmIGVudmlyb25tZW50LmxvY2F0aW9uICYmIHR5cGVvZiBlbnZpcm9ubWVudC5sb2NhdGlvbi5ob3N0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBlbnZpcm9ubWVudC5sb2NhdGlvbi5ob3N0ID09PSBob3N0O1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IHBhcmFtcygpIHtcclxuICAgIGlmICh0aGlzLnJ0ZiAmJiB0aGlzLnJ0Zi5oYXNPd25Qcm9wZXJ0eSgnc2Vzc2lvbicpICYmIHR5cGVvZiB0aGlzLnJ0Zlsnc2Vzc2lvbiddWydnZXRDb21tb25WYXJpYWJsZSddID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJ0Zlsnc2Vzc2lvbiddWydnZXRDb21tb25WYXJpYWJsZSddKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W6L+Q6KGM5qGG5p62aHR0cOacjeWKoVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgaHR0cFNlcnZpY2UoKSB7XHJcbiAgICBpZiAodGhpcy5ydGYgJiYgdGhpcy5ydGYuaGFzT3duUHJvcGVydHkoJ2h0dHAnKSAmJiB0eXBlb2YgdGhpcy5ydGZbJ2h0dHAnXVsncmVxdWVzdCddID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJ0Zi5odHRwO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIHB1YmxpYyByZXF1ZXN0KG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgLy8gdG9kbzog5L2/55So6L+Q6KGM5qGG5p6255qEaHR0cGNsaWVudOWvvOiHtOW4ruWKqeaXoOazleaYvuekuuaVsOaNru+8jOaaguaXtuaSpOWbnlxyXG4gICAgLy8gaWYgKHRoaXMuaHR0cFNlcnZpY2UgJiYgdGhpcy5wYXJhbXMgJiYgdGhpcy5wYXJhbXMudGFiSWQpIHtcclxuICAgIC8vICAgcmV0dXJuIHRoaXMuaHR0cFNlcnZpY2UucmVxdWVzdCQobWV0aG9kLCB1cmwsIG9wdGlvbnMpO1xyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vICAgcmV0dXJuIHRoaXMuZGVmYXVsdEh0dHBDbGllbnQucmVxdWVzdChtZXRob2QsIHVybCwgb3B0aW9ucyk7XHJcbiAgICAvLyB9XHJcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0SHR0cENsaWVudC5yZXF1ZXN0KG1ldGhvZCwgdXJsLCBvcHRpb25zKTtcclxuICB9XHJcbn1cclxuIl19