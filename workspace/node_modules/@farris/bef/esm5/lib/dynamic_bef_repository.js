/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { DataTypeInfo, EntityCollection } from '@farris/devkit';
import { BefDataService } from './bef_data_service';
import { BefEntityManager } from './bef_entity_manager';
import { BefProxy } from './bef_proxy';
import { BefRepository } from './bef_repository';
import { BE_SERVER_URI_TOKEN } from './tokens';
import { UriService } from './uri_service';
/**
 * @template T
 */
var /**
 * @template T
 */
DynamicBefRepository = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicBefRepository, _super);
    // public paginationInfo = {
    //   Entity: {
    //     pageSize: 20,
    //   },
    // };
    function DynamicBefRepository(injector, name, entityType, serverUri, apiUri) {
        var _this = _super.call(this, injector) || this;
        _this.name = name;
        _this.entityType = entityType;
        _this.serverUri = serverUri;
        _this.apiUri = apiUri;
        _this.apiUri = apiUri;
        // 构造分页属性信息
        /** @type {?} */
        var paginationInfo = {};
        paginationInfo[entityType.typeName] = { pageSize: 20 };
        _this.paginationInfo = paginationInfo;
        _this.name = name;
        _this.entityTypeInfo = new DataTypeInfo(_this.entityType);
        _this.entityCollection = new EntityCollection(_this.entityType);
        // 初始化实体管理器
        _this.entityManager = new BefEntityManager(_this.entityCollection);
        // 设置proxy属性值
        /** @type {?} */
        var httpClient = injector.get(HttpClient);
        /** @type {?} */
        var uriService = new UriService(serverUri);
        /** @type {?} */
        var proxy = new BefProxy(httpClient, uriService);
        /** @type {?} */
        var baseUri = uriService.extendUri(apiUri);
        proxy.setBaseUri(baseUri);
        _this.proxy = proxy;
        _this.dataService = new BefDataService(injector, _this);
        _this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
        return _this;
    }
    /**
     * @param {?} defaultValues
     * @return {?}
     */
    DynamicBefRepository.prototype.batchAppend = /**
     * @param {?} defaultValues
     * @return {?}
     */
    function (defaultValues) {
        throw new Error('Method not implemented.');
    };
    return DynamicBefRepository;
}(BefRepository));
if (false) {
    /** @type {?} */
    DynamicBefRepository.prototype.name;
    /** @type {?} */
    DynamicBefRepository.prototype.entityType;
    /** @type {?} */
    DynamicBefRepository.prototype.serverUri;
    /** @type {?} */
    DynamicBefRepository.prototype.apiUri;
}
export { DynamicBefRepository };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY19iZWZfcmVwb3NpdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWNfYmVmX3JlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxZQUFZLEVBQVUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFFM0M7Ozs7SUFBcUQsZ0RBQWdCO0lBS25FLDRCQUE0QjtJQUM1QixjQUFjO0lBQ2Qsb0JBQW9CO0lBQ3BCLE9BQU87SUFDUCxLQUFLO0lBS0wsOEJBQVksUUFBa0IsRUFBUyxJQUFZLEVBQVMsVUFBZSxFQUFTLFNBQWlCLEVBQVMsTUFBYztRQUE1SCxZQUNFLGtCQUFNLFFBQVEsQ0FBQyxTQXdCaEI7UUF6QnNDLFVBQUksR0FBSixJQUFJLENBQVE7UUFBUyxnQkFBVSxHQUFWLFVBQVUsQ0FBSztRQUFTLGVBQVMsR0FBVCxTQUFTLENBQVE7UUFBUyxZQUFNLEdBQU4sTUFBTSxDQUFRO1FBRTFILEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOzs7WUFFZixjQUFjLEdBQUcsRUFBRTtRQUN6QixjQUFjLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3ZELEtBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBRXJDLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RCxXQUFXO1FBQ1gsS0FBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOzs7WUFHM0QsVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDOztZQUNyQyxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDOztZQUN0QyxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQzs7WUFDNUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQzVDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUIsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxRQUFRLEVBQUUsS0FBSSxDQUFDLENBQUM7UUFDdEQsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFTLG1CQUFtQixDQUFDLENBQUM7O0lBQzdELENBQUM7Ozs7O0lBdENELDBDQUFXOzs7O0lBQVgsVUFBWSxhQUFvQjtRQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQXFDSCwyQkFBQztBQUFELENBQUMsQUF4Q0QsQ0FBcUQsYUFBYSxHQXdDakU7OztJQTFCaUMsb0NBQW1COztJQUFFLDBDQUFzQjs7SUFBRSx5Q0FBd0I7O0lBQUUsc0NBQXFCOztBQTRCOUgsT0FBTyxFQUFFLG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhVHlwZUluZm8sIEVudGl0eSwgRW50aXR5Q29sbGVjdGlvbiB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBCZWZEYXRhU2VydmljZSB9IGZyb20gJy4vYmVmX2RhdGFfc2VydmljZSc7XHJcbmltcG9ydCB7IEJlZkVudGl0eU1hbmFnZXIgfSBmcm9tICcuL2JlZl9lbnRpdHlfbWFuYWdlcic7XHJcbmltcG9ydCB7IEJlZlByb3h5IH0gZnJvbSAnLi9iZWZfcHJveHknO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnLi9iZWZfcmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IEJFX1NFUlZFUl9VUklfVE9LRU4gfSBmcm9tICcuL3Rva2Vucyc7XHJcbmltcG9ydCB7IFVyaVNlcnZpY2UgfSBmcm9tICcuL3VyaV9zZXJ2aWNlJztcclxuXHJcbmNsYXNzIER5bmFtaWNCZWZSZXBvc2l0b3J5PFQgZXh0ZW5kcyBFbnRpdHk+IGV4dGVuZHMgQmVmUmVwb3NpdG9yeTxUPiB7XHJcbiAgYmF0Y2hBcHBlbmQoZGVmYXVsdFZhbHVlczogYW55W10pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xyXG4gIH1cclxuXHJcbiAgLy8gcHVibGljIHBhZ2luYXRpb25JbmZvID0ge1xyXG4gIC8vICAgRW50aXR5OiB7XHJcbiAgLy8gICAgIHBhZ2VTaXplOiAyMCxcclxuICAvLyAgIH0sXHJcbiAgLy8gfTtcclxuXHJcblxyXG5cclxuXHJcbiAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yLCBwdWJsaWMgbmFtZTogc3RyaW5nLCBwdWJsaWMgZW50aXR5VHlwZTogYW55LCBwdWJsaWMgc2VydmVyVXJpOiBzdHJpbmcsIHB1YmxpYyBhcGlVcmk6IHN0cmluZykge1xyXG4gICAgc3VwZXIoaW5qZWN0b3IpO1xyXG4gICAgdGhpcy5hcGlVcmkgPSBhcGlVcmk7XHJcbiAgICAvLyDmnoTpgKDliIbpobXlsZ7mgKfkv6Hmga9cclxuICAgIGNvbnN0IHBhZ2luYXRpb25JbmZvID0ge307XHJcbiAgICBwYWdpbmF0aW9uSW5mb1tlbnRpdHlUeXBlLnR5cGVOYW1lXSA9IHsgcGFnZVNpemU6IDIwIH07XHJcbiAgICB0aGlzLnBhZ2luYXRpb25JbmZvID0gcGFnaW5hdGlvbkluZm87XHJcblxyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuXHJcbiAgICB0aGlzLmVudGl0eVR5cGVJbmZvID0gbmV3IERhdGFUeXBlSW5mbyh0aGlzLmVudGl0eVR5cGUpO1xyXG4gICAgdGhpcy5lbnRpdHlDb2xsZWN0aW9uID0gbmV3IEVudGl0eUNvbGxlY3Rpb24odGhpcy5lbnRpdHlUeXBlKTtcclxuICAgIC8vIOWIneWni+WMluWunuS9k+euoeeQhuWZqFxyXG4gICAgdGhpcy5lbnRpdHlNYW5hZ2VyID0gbmV3IEJlZkVudGl0eU1hbmFnZXIodGhpcy5lbnRpdHlDb2xsZWN0aW9uKTtcclxuXHJcbiAgICAvLyDorr7nva5wcm94eeWxnuaAp+WAvFxyXG4gICAgY29uc3QgaHR0cENsaWVudCA9IGluamVjdG9yLmdldChIdHRwQ2xpZW50KTtcclxuICAgIGNvbnN0IHVyaVNlcnZpY2UgPSBuZXcgVXJpU2VydmljZShzZXJ2ZXJVcmkpO1xyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgQmVmUHJveHkoaHR0cENsaWVudCwgdXJpU2VydmljZSk7XHJcbiAgICBjb25zdCBiYXNlVXJpID0gdXJpU2VydmljZS5leHRlbmRVcmkoYXBpVXJpKTtcclxuICAgIHByb3h5LnNldEJhc2VVcmkoYmFzZVVyaSk7XHJcbiAgICB0aGlzLnByb3h5ID0gcHJveHk7XHJcblxyXG4gICAgdGhpcy5kYXRhU2VydmljZSA9IG5ldyBCZWZEYXRhU2VydmljZShpbmplY3RvciwgdGhpcyk7XHJcbiAgICB0aGlzLnNlcnZlclVyaSA9IGluamVjdG9yLmdldDxzdHJpbmc+KEJFX1NFUlZFUl9VUklfVE9LRU4pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRHluYW1pY0JlZlJlcG9zaXRvcnkgfTtcclxuIl19