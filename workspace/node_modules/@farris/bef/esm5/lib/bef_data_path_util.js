/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_path_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BindingPropertyType, PropertyUtil, BindingPathConverter } from '@farris/devkit';
/**
 * Bef数据中各种Path的转换
 */
var /**
 * Bef数据中各种Path的转换
 */
BefDataPathUtil = /** @class */ (function () {
    function BefDataPathUtil() {
    }
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     */
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathArray = /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        var _this = this;
        /** @type {?} */
        var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
        /** @type {?} */
        var pathArray = [];
        /** @type {?} */
        var currentBindingObject = bindingData.list.currentItem;
        pathArray.push(currentBindingObject.primaryKeyValue);
        bindingPathArray.forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            /** @type {?} */
            var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            if (propInfo.type !== BindingPropertyType.List) {
                throw new Error(propInfo.name + "\u4E0D\u662F\u5B50\u8868\u5BF9\u5E94\u7684\u5C5E\u6027");
            }
            /** @type {?} */
            var currentBindingList = currentBindingObject[propName];
            currentBindingObject = currentBindingList.currentItem;
            pathArray.push(_this.trimTrailingS(propName));
            pathArray.push(currentBindingObject.primaryKeyValue);
        }));
        return pathArray;
    };
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     */
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathUrl = /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        pathArray.pop();
        return '/' + pathArray.join('/');
    };
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     */
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToObjectCodes = /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var objectCodes = [];
        for (var i = 1; i < pathLen; i = i + 2) {
            objectCodes.push(pathArray[i]);
        }
        return objectCodes;
    };
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     */
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForUpdate = /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var dataIds = [];
        for (var i = 0; i < pathLen; i = i + 2) {
            dataIds.push(pathArray[i]);
        }
        return dataIds;
    };
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     */
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForAdd = /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);
        dataIds.pop();
        return dataIds;
    };
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     */
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    BefDataPathUtil.convertPathToUrl = /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var subPaths = path.split('/');
        for (var i = subPaths.length - 1; i > 0; i--) {
            if (subPaths[i] && subPaths[i].endsWith('s')) {
                subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1).toLowerCase();
            }
        }
        // url不再转小写，兼容主键有大写字母的情况
        return subPaths.join('/'); // .toLowerCase();
    };
    /**
     * 去除最后的s
     */
    /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    BefDataPathUtil.trimTrailingS = /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substr(0, str.length - 1);
    };
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     */
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToNodeCodes = /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') === -1; })).forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            result.push(node);
        }));
        return result;
    };
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     */
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToIds = /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') !== -1; })).forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            result.push(id.split(':')[1]);
        }));
        return result;
    };
    return BefDataPathUtil;
}());
export { BefDataPathUtil };
//# sourceMappingURL=data:application/json;base64,