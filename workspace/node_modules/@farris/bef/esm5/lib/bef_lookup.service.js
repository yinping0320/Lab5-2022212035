/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_lookup.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { EMPTY } from 'rxjs';
import { switchMap, map, catchError } from 'rxjs/operators';
import { Repository, FrameContext } from '@farris/devkit';
import { LoadingService } from '@farris/ui-loading';
/**
 * 帮助Rest取数服务
 */
var BefLookupRestService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefLookupRestService(repository, frameContext) {
        this.frameContext = frameContext;
        this.befRepository = (/** @type {?} */ (repository));
        this.registerDestroyEvent();
        this.loadingService = this.frameContext && this.frameContext.injector.get(LoadingService, null);
    }
    /**
     * @private
     * @return {?}
     */
    BefLookupRestService.prototype.registerDestroyEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.frameContext && this.frameContext.destorySignal) {
            this.frameContext.destorySignal.subscribe((/**
             * @return {?}
             */
            function () {
                _this.frameContext = null;
                _this.befRepository = null;
            }));
        }
    };
    /**
     * @param {?} helpMetadataId
     * @param {?=} data
     * @return {?}
     */
    BefLookupRestService.prototype.getData = /**
     * @param {?} helpMetadataId
     * @param {?=} data
     * @return {?}
     */
    function (helpMetadataId, data) {
        /** @type {?} */
        var tableName = helpMetadataId.split('.')[0];
        /** @type {?} */
        var labelId = helpMetadataId.split('.')[1];
        data = data || {};
        if (this.frameContext) {
            /** @type {?} */
            var primaryValue = this.frameContext.bindingData.list.currentId;
            data['currentForm'] = {
                id: primaryValue
            };
        }
        /** @type {?} */
        var enableExtendLoadMethod = this.ifEnableExtendLoadMethod(helpMetadataId);
        if (enableExtendLoadMethod === true) {
            return this.extendGetHelpData(labelId, tableName, data);
        }
        return this.getHelpData(labelId, tableName, data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BefLookupRestService.prototype.saveUserSettings = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/bcc/v1.0/datagrid/settings';
        return this.befRepository.restService.invoke(url, 'POST', null, { body: data }, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.clearLoading();
            /** @type {?} */
            var formAppContext = _this.befRepository.appContext.getFormAppContext();
            _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    BefLookupRestService.prototype.getUserSettings = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/bcc/v1.0/datagrid/settings/' + key;
        return this.befRepository.restService.invoke(url, 'GET', null, null, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.clearLoading();
            /** @type {?} */
            var formAppContext = _this.befRepository.appContext.getFormAppContext();
            _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    };
    /**
     * 是否启用扩展取数方法
     */
    /**
     * 是否启用扩展取数方法
     * @private
     * @param {?} helpMetadataId
     * @return {?}
     */
    BefLookupRestService.prototype.ifEnableExtendLoadMethod = /**
     * 是否启用扩展取数方法
     * @private
     * @param {?} helpMetadataId
     * @return {?}
     */
    function (helpMetadataId) {
        // 优先使用context里的设置
        if (this.context && this.context.hasOwnProperty('enableExtendLoadMethod')) {
            return this.context.enableExtendLoadMethod;
        }
        // context没有设置时，继续使用通过指令设置的开关
        /** @type {?} */
        var enableExtendLoadMethod = false;
        if (this.frameContext) {
            /** @type {?} */
            var befApiUrl = this.frameContext.repository.apiUri;
            /** @type {?} */
            var enableKey = helpMetadataId + "@" + befApiUrl;
            enableExtendLoadMethod = this.frameContext.getParam(enableKey);
        }
        return enableExtendLoadMethod;
    };
    /**
     * 老的帮助取树
     */
    /**
     * 老的帮助取树
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    BefLookupRestService.prototype.getHelpData = /**
     * 老的帮助取树
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    function (labelId, tableName, data) {
        var _this = this;
        /** @type {?} */
        var url = this.befRepository.restService.baseUri + "/elementhelps/" + labelId;
        /** @type {?} */
        var update$ = this.befRepository.updateDataAndVariableChanges();
        /** @type {?} */
        var result$ = update$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            _this.extendQueryParam(data);
            // tslint:disable-next-line: max-line-length
            return _this.befRepository.restService.invoke(url, 'GET', { nodeCode: tableName, queryParam: JSON.stringify(data) }, null, false).pipe(catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.clearLoading();
                /** @type {?} */
                var formAppContext = _this.befRepository.appContext.getFormAppContext();
                _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
                return EMPTY;
            })));
        })));
        return result$;
    };
    /**
     * 扩展的帮助取数
     */
    /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    BefLookupRestService.prototype.extendGetHelpData = /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    function (labelId, tableName, data) {
        var _this = this;
        /** @type {?} */
        var url = this.befRepository.restService.baseUri + "/extension/elementhelps";
        this.extendQueryParam(data);
        /** @type {?} */
        var body = {
            labelId: labelId,
            nodeCode: tableName,
            queryParam: data,
            requestInfo: this.befRepository.restService.buildRequestInfo()
        };
        /** @type {?} */
        var options = {
            body: body
        };
        /** @type {?} */
        var result$ = this.befRepository.restService.invoke(url, 'PUT', null, options, false, true);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            return responseInfo && responseInfo.returnValue || null;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.clearLoading();
            /** @type {?} */
            var formAppContext = _this.befRepository.appContext.getFormAppContext();
            _this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    };
    /**
     * @private
     * @return {?}
     */
    BefLookupRestService.prototype.clearLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.loadingService) {
            this.loadingService.clearAll();
        }
    };
    /**
     * @private
     * @param {?} data
     * @param {?=} layer
     * @param {?=} parentPathCode
     * @return {?}
     */
    BefLookupRestService.prototype.convert2TreeDataWithPathCode = /**
     * @private
     * @param {?} data
     * @param {?=} layer
     * @param {?=} parentPathCode
     * @return {?}
     */
    function (data, layer, parentPathCode) {
        var _this = this;
        if (layer === void 0) { layer = 1; }
        if (parentPathCode === void 0) { parentPathCode = '01'; }
        /** @type {?} */
        var nodes = data.filter((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.layer === layer && d.pathcode === parentPathCode; }));
        if (layer > 1) {
            nodes = data.filter((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.layer === layer && d.pathcode.substr(0, (layer - 1) * 2) === parentPathCode; }));
        }
        if (nodes.length) {
            /** @type {?} */
            var treeNodes = nodes.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return {
                    data: n,
                    children: []
                };
            }));
            treeNodes.forEach((/**
             * @param {?} tn
             * @return {?}
             */
            function (tn) {
                var _a;
                /** @type {?} */
                var _tns = _this.convert2TreeDataWithPathCode(data, tn.data.layer + 1, tn.data.pathcode);
                (_a = tn.children).push.apply(_a, tslib_1.__spread(_tns));
            }));
            return treeNodes;
        }
    };
    /**
     * @private
     * @param {?} queryParam
     * @return {?}
     */
    BefLookupRestService.prototype.extendQueryParam = /**
     * @private
     * @param {?} queryParam
     * @return {?}
     */
    function (queryParam) {
        if (queryParam && typeof queryParam === 'object') {
            /** @type {?} */
            var paths = this.getPath();
            queryParam.relationFilterFieldInfo = paths;
        }
    };
    /**
     * @private
     * @return {?}
     */
    BefLookupRestService.prototype.getPath = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bindingPath = this.frameContext.viewModel.bindingPath;
        /** @type {?} */
        var rid = this.frameContext.viewModel.bindingData.list.currentId;
        // root表数据id
        /** @type {?} */
        var path = rid;
        /** @type {?} */
        var subPaths = bindingPath.split('/').filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p; }));
        if (subPaths.length > 0) {
            /** @type {?} */
            var subData = this.frameContext.viewModel.bindingData;
            for (var index = 0; index < subPaths.length; index++) {
                /** @type {?} */
                var subPath = subPaths[index];
                subData = subData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath.substring(0, subPath.length - 1) + "/" + subData.currentId;
            }
            // path += '/' + subPaths[subPaths.length - 1]+'/' + ;
        }
        return path;
    };
    BefLookupRestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefLookupRestService.ctorParameters = function () { return [
        { type: Repository },
        { type: FrameContext, decorators: [{ type: Optional }] }
    ]; };
    return BefLookupRestService;
}());
export { BefLookupRestService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefLookupRestService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    BefLookupRestService.prototype.befRepository;
    /**
     * 帮助取数上下文
     * @type {?}
     */
    BefLookupRestService.prototype.context;
    /**
     * @type {?}
     * @private
     */
    BefLookupRestService.prototype.frameContext;
}
//# sourceMappingURL=data:application/json;base64,