/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_rest_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: Witt
 * @Date: 2019-02-23 13:57:47
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-09-24 14:10:40
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError, of, EMPTY } from 'rxjs';
import { switchMap, map, catchError, tap } from 'rxjs/operators';
import { EventBus } from '@farris/devkit';
import { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';
import { BefRepository } from './bef_repository';
import { FrameworkSessionService } from './framework_session_service';
import { BefSessionService } from './session/index';
import { BefProxy } from './bef_proxy';
import { UriService } from './uri_service';
import { BefProxyExtend } from './bef_proxy_extend';
import { HttpService } from './http_service';
import { BackEndMessageUtil } from './utils/back_end_message.util';
import { BefSessionManager } from './session/bef_session_manager';
import { LoadingService } from '@farris/ui-loading';
/** @type {?} */
var GET = 'GET';
/** @type {?} */
var DELETE = 'DELETE';
/** @type {?} */
var PUT = 'PUT';
/** @type {?} */
var POST = 'POST';
/** @type {?} */
var PATCH = 'PATCH';
/**
 * BEF取数服务
 * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。
 */
var BefRestService = /** @class */ (function () {
    /**
     * 构造函数
     * @param httpClient http服务
     * @param serverUri 应用服务器地址
     * @param beUri BE API地址
     */
    function BefRestService(httpClient, baseUri, frmSessionService, repository, eventBus) {
        this.httpClient = httpClient;
        this.httpService = new HttpService(this.httpClient);
        this.baseUri = baseUri;
        /** @type {?} */
        var injector = repository.getInjector();
        this.sessionService = new BefSessionService(httpClient, baseUri, frmSessionService, injector);
        this.repository = repository;
        this.eventBus = eventBus;
        if (injector) {
            this.loadingService = injector.get(LoadingService, null);
        }
    }
    Object.defineProperty(BefRestService.prototype, "proxy", {
        // #region 代理相关
        /**
         * 获取Bef代理
         */
        get: 
        // #region 代理相关
        /**
         * 获取Bef代理
         * @return {?}
         */
        function () {
            if (!!this.repository.proxy) {
                return this.repository.proxy;
            }
            else {
                return this.createBefProxy();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 创建Bef代理
     */
    /**
     * 创建Bef代理
     * @private
     * @return {?}
     */
    BefRestService.prototype.createBefProxy = /**
     * 创建Bef代理
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var serverUri = this.repository.serverUri;
        /** @type {?} */
        var uriService = new UriService(serverUri);
        /** @type {?} */
        var defaultProxy = new BefProxy(this.httpClient, uriService);
        defaultProxy.setBaseUri(this.baseUri);
        /** @type {?} */
        var extend = new BefProxyExtend(this.repository);
        defaultProxy.setProxyExtend(extend);
        return defaultProxy;
    };
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} entityFilter
     * @return {?}
     */
    BefRestService.prototype.query = 
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        return this.proxy.query(entityFilter);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendQuery = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    function (entityFilter, requestInfo) {
        return this.proxy.extendQuery(entityFilter, requestInfo);
    };
    /**
     * 分页查询各从表数据
     * @param id 主表id
     * @param retrieveParam 参数
     */
    /**
     * 分页查询各从表数据
     * @param {?} id 主表id
     * @param {?} retrieveParam 参数
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.serviceRetrieve = /**
     * 分页查询各从表数据
     * @param {?} id 主表id
     * @param {?} retrieveParam 参数
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, retrieveParam, requestInfo) {
        return this.proxy.serviceRetrieve(id, retrieveParam, requestInfo);
    };
    /**
     * 分页查询从表/从从表数据
     * @param params 查询参数
     */
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 查询参数
     * @return {?}
     */
    BefRestService.prototype.queryChild = /**
     * 分页查询从表/从从表数据
     * @param {?} params 查询参数
     * @return {?}
     */
    function (params) {
        return this.proxy.queryChild(params);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    BefRestService.prototype.retrieve = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.proxy.retrieve(id);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    BefRestService.prototype.extendRetrieve = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    function (id, requestInfo, retrieveParam) {
        return this.proxy.extendRetrieve(id, requestInfo, retrieveParam);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.create = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    function (defaultValue, requestInfo) {
        return this.proxy.create(defaultValue, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.createByPath = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    function (fpath, requestInfo) {
        return this.proxy.createByPath(fpath, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.update = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    function (changeDetail, requestInfo) {
        return this.proxy.update(changeDetail, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} requestInfo
     * @return {?}
     */
    BefRestService.prototype.save = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} requestInfo
     * @return {?}
     */
    function (requestInfo) {
        return this.proxy.save(requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    BefRestService.prototype.delete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.proxy.delete(id);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendDelete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        return this.proxy.extendDelete(id, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    BefRestService.prototype.deletByPath = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        return this.proxy.deletByPath(fpath, id);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendDeletByPath = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (fpath, id, requestInfo) {
        return this.proxy.extendDeletByPath(fpath, id, requestInfo);
    };
    /**
     * @param {?} fPath
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.batchDeleteByPath = /**
     * @param {?} fPath
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (fPath, ids, requestInfo) {
        return this.proxy.batchDeleteByPath(fPath, ids, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @return {?}
     */
    BefRestService.prototype.batchDelete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.proxy.batchDelete(ids);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendBatchDelete = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        return this.proxy.extendBatchDelete(ids, requestInfo);
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param requestInfo requestInfo
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    BefRestService.prototype.extendBatchDeletion = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        return this.proxy.extendBatchDeletion(ids, requestInfo);
    };
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} options
     * @return {?}
     */
    BefRestService.prototype.cancel = /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return this.proxy.cancel(options);
    };
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param requestInfo requestInfo
     * @returns
     */
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    BefRestService.prototype.hasChanges = /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (requestInfo) {
        return this.proxy.hasChanges(requestInfo);
    };
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     */
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @return {?}
     */
    BefRestService.prototype.request = 
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, false);
    };
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param url url
     * @param method method
     * @param params params
     * @param options options
     * @param selfHandError 自己处理异常
     * @param ignoreError 忽略错误
     * @param ignoreChanges 忽略变更
     */
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param {?} url url
     * @param {?} method method
     * @param {?=} params params
     * @param {?=} options options
     * @param {?=} selfHandError 自己处理异常
     * @param {?=} ignoreError 忽略错误
     * @param {?=} ignoreChanges 忽略变更
     * @return {?}
     */
    BefRestService.prototype.invoke = 
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param {?} url url
     * @param {?} method method
     * @param {?=} params params
     * @param {?=} options options
     * @param {?=} selfHandError 自己处理异常
     * @param {?=} ignoreError 忽略错误
     * @param {?=} ignoreChanges 忽略变更
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        if (options && options.body && options.body.RequestInfo) {
            throw new Error('请使用requestInfo提交变更');
        }
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, true);
    };
    /**
     * 内部的request方法
     */
    /**
     * 内部的request方法
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} useCorrectRequestInfoCheckMethod
     * @return {?}
     */
    BefRestService.prototype.innerRequest = /**
     * 内部的request方法
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} useCorrectRequestInfoCheckMethod
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges, useCorrectRequestInfoCheckMethod) {
        var _this = this;
        options = options || {};
        /** @type {?} */
        var befSessionIdKey = 'BEFSessionID';
        // 是否自己处理异常
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // 选择检查RequestInfo的方法
        if (typeof (useCorrectRequestInfoCheckMethod) === 'undefined' || typeof (useCorrectRequestInfoCheckMethod) !== 'boolean') {
            useCorrectRequestInfoCheckMethod = false;
        }
        /** @type {?} */
        var checkRequestInfoMethod = useCorrectRequestInfoCheckMethod ? this.existRequestInfo : this.hasRequestInfo;
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 带有requestInfo的请求，请求成功后清空变更集
        /** @type {?} */
        var hasRequestInfo = checkRequestInfoMethod(options);
        /** @type {?} */
        var headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 串联session流和http流
        /** @type {?} */
        var formAppContext = this.repository.appContext.getFormAppContext();
        return BefSessionManager.getSessionId(formAppContext, this.sessionService).pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        function (sessionId) {
            headers = _this.sessionService.extendRequestHeaders(headers);
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return _this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response.headers && response.headers.has(befSessionIdKey)) {
                _this.sessionService.setBeSessionId(response.headers.get(befSessionIdKey));
            }
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response.body; })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var messages = ResponseInfoUtil.parseBackEndMessage(result);
            BackEndMessageUtil.handleMessage(messages, _this.repository.getInjector());
            return _this.handleReponseInfo(result, hasRequestInfo, ignoreChanges, options);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return _this.handleErrors(error, selfHandError, ignoreError);
        })));
    };
    /**
     * 处理返回结果
     */
    /**
     * 处理返回结果
     * @param {?} result
     * @param {?} hasRequestInfo
     * @param {?} ignoreChanges
     * @param {?} options
     * @return {?}
     */
    BefRestService.prototype.handleReponseInfo = /**
     * 处理返回结果
     * @param {?} result
     * @param {?} hasRequestInfo
     * @param {?} ignoreChanges
     * @param {?} options
     * @return {?}
     */
    function (result, hasRequestInfo, ignoreChanges, options) {
        if (hasRequestInfo) {
            // 如果有带有RequestInfo，则按新结构处理
            // 1、应用服务器端返回的变更；
            // 2、清空本地变更集；
            // 3、返回新结构
            if (result && result.innerDataChange && ignoreChanges !== true) {
                this.repository.handleDataChangeDetails(result.innerDataChange);
            }
            if (result && result.innerVariableChange) {
                this.repository.handleVariableChangeDetail(result.innerVariableChange);
            }
            this.repository.clearAllEntityChanges();
            /** @type {?} */
            var requestInfo = RequestInfoUtil.getRequestInfo(options);
            /** @type {?} */
            var variableChange = requestInfo && requestInfo.variableChange;
            this.repository.clearAllVariableChanges(variableChange);
            return result;
        }
        else {
            // 如果有没有RequestInfo，则按老的方式处理
            // 1、不处理服务器端返回的变更：跟老的行为一样；
            // 2、不清理本地变更：因为变更没有提交；
            // 3、返回老的结构：兼容老的代码
            return this.unWrapResponseInfo(result);
        }
    };
    /**
     * 错误处理
     */
    /**
     * 错误处理
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    BefRestService.prototype.handleErrors = /**
     * 错误处理
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    function (error, selfHandError, ignoreError) {
        this.clearLoading();
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            var formAppContext = this.repository.appContext.getFormAppContext();
            /** @type {?} */
            var applicationId = formAppContext.ApplicationId;
            /** @type {?} */
            var applicationContext = window[applicationId] || {};
            /** @type {?} */
            var messages = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            var bizMessages = BackEndMessageUtil.getFormlessMessages(messages);
            /** @type {?} */
            var isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            var isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            var needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.repository.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            var willThrowException = !!this.eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages, this.repository.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: this.eventBus, error: error, formAppContext: formAppContext });
            if (!!this.eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    this.eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    };
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     */
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     * @private
     * @return {?}
     */
    BefRestService.prototype.clearLoading = 
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var ifLoadingExists = window['DEVKIT_LOADING_SERVICE'] &&
            window['DEVKIT_LOADING_SERVICE'] instanceof Array &&
            window['DEVKIT_LOADING_SERVICE'].length > 0 || false;
        if (ifLoadingExists === false) {
            this.clearAllLoading();
            return;
        }
        /** @type {?} */
        var loadingServices = window['DEVKIT_LOADING_SERVICE'];
        try {
            for (var loadingServices_1 = tslib_1.__values(loadingServices), loadingServices_1_1 = loadingServices_1.next(); !loadingServices_1_1.done; loadingServices_1_1 = loadingServices_1.next()) {
                var service = loadingServices_1_1.value;
                if (typeof (service.destroy) === 'function') {
                    service.destroy();
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (loadingServices_1_1 && !loadingServices_1_1.done && (_a = loadingServices_1.return)) _a.call(loadingServices_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.clearAllLoading();
    };
    /**
     * @private
     * @return {?}
     */
    BefRestService.prototype.clearAllLoading = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.loadingService) {
            window.setTimeout((/**
             * @return {?}
             */
            function () {
                _this.loadingService.clearAll();
            }), 350);
        }
    };
    /**
     * 处理返回值，兼容老版本
     */
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    BefRestService.prototype.unWrapResponseInfo = /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    };
    /**
     * 是否带有RequestInfo
     */
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    BefRestService.prototype.hasRequestInfo = /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return RequestInfoUtil.hasRequestInfoWithR(options);
    };
    /**
     * 是否带有requestInfo
     */
    /**
     * 是否带有requestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    BefRestService.prototype.existRequestInfo = /**
     * 是否带有requestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return RequestInfoUtil.hasRequestInfo(options);
    };
    /**
     * 构造HttpParams对象
     * @param params 请求参数
     */
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    BefRestService.prototype.buildParams = /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    function (params) {
        return HttpParamUtil.buildParams(params);
    };
    /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * @body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     */
    /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * \@body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     * @param {?} body
     * @return {?}
     */
    BefRestService.prototype.buildBodyWithRequestInfo = /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * \@body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return RequestInfoUtil.buildBodyWithRequestInfo(body, this.repository);
    };
    /**
     * 构造RequestInfo
     */
    /**
     * 构造RequestInfo
     * @return {?}
     */
    BefRestService.prototype.buildRequestInfo = /**
     * 构造RequestInfo
     * @return {?}
     */
    function () {
        return RequestInfoUtil.buildRequestInfo(this.repository);
    };
    BefRestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefRestService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String },
        { type: FrameworkSessionService },
        { type: BefRepository },
        { type: EventBus }
    ]; };
    return BefRestService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefRestService.prototype.repository;
    /**
     * @type {?}
     * @private
     */
    BefRestService.prototype.loadingService;
    /**
     * httpClient
     * @type {?}
     * @private
     */
    BefRestService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    BefRestService.prototype.httpService;
    /**
     * 会话服务
     * @type {?}
     */
    BefRestService.prototype.sessionService;
    /**
     * 接口根Uri
     * @type {?}
     */
    BefRestService.prototype.baseUri;
    /**
     * 事件总线
     * @type {?}
     */
    BefRestService.prototype.eventBus;
}
export { BefRestService };
//# sourceMappingURL=data:application/json;base64,