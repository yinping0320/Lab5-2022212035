/**
 * @fileoverview added by tsickle
 * Generated from: lib/framework_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-11 20:32:02
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-13 20:05:46
 */
import { Injectable, Optional } from '@angular/core';
import { SessionService } from '@ecp-caf/caf-common';
var FrameworkSessionService = /** @class */ (function () {
    function FrameworkSessionService(sessionService) {
        this.sessionService = sessionService;
    }
    /**
     * 获取用户SessionId
     */
    /**
     * 获取用户SessionId
     * @return {?}
     */
    FrameworkSessionService.prototype.getUserSessionId = /**
     * 获取用户SessionId
     * @return {?}
     */
    function () {
        return this.sessionService.getUserSessionId();
    };
    /**
     * 获取当前功能菜单的SessionId
     */
    /**
     * 获取当前功能菜单的SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    FrameworkSessionService.prototype.getCurrentSessionId = /**
     * 获取当前功能菜单的SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionId;
        /** @type {?} */
        var rsi = this.getRuntimeSessionId();
        if (rsi) {
            return rsi;
        }
        if (this.sessionService) {
            if (runtimeContext && runtimeContext.hasOwnProperty('tabId')) {
                /** @type {?} */
                var tabId = runtimeContext.tabId;
                sessionId = this.sessionService.getCurrentSeesionId(tabId);
            }
            else {
                sessionId = this.sessionService.getCurrentSeesionId();
            }
        }
        if (!sessionId) {
            sessionId = this.getUserSessionId();
        }
        return sessionId;
    };
    /**
     * @private
     * @return {?}
     */
    FrameworkSessionService.prototype.getRuntimeSessionId = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hash = window.location.hash;
        /** @type {?} */
        var params = this.parse(hash);
        return params && params.rsi || null;
    };
    /**
     * @param {?} queryString
     * @return {?}
     */
    FrameworkSessionService.prototype.parse = /**
     * @param {?} queryString
     * @return {?}
     */
    function (queryString) {
        if (!queryString) {
            return {};
        }
        /** @type {?} */
        var hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce((/**
         * @param {?} params
         * @param {?} hash
         * @return {?}
         */
        function (params, hash) {
            var _a;
            /** @type {?} */
            var split = hash.indexOf('=');
            /** @type {?} */
            var key = hash.slice(0, split);
            /** @type {?} */
            var val = hash.slice(split + 1);
            return Object.assign(params, (_a = {}, _a[key] = decodeURIComponent(val), _a));
        }), {});
    };
    FrameworkSessionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrameworkSessionService.ctorParameters = function () { return [
        { type: SessionService, decorators: [{ type: Optional }] }
    ]; };
    return FrameworkSessionService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    FrameworkSessionService.prototype.sessionService;
}
export { FrameworkSessionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWV3b3JrX3Nlc3Npb25fc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL2ZyYW1ld29ya19zZXNzaW9uX3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFPQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQ7SUFHRSxpQ0FBZ0MsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0lBQzlELENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxrREFBZ0I7Ozs7SUFBaEI7UUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNILHFEQUFtQjs7Ozs7SUFBbkIsVUFBb0IsY0FBb0I7O1lBQ2xDLFNBQWlCOztZQUNmLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7UUFDdEMsSUFBSSxHQUFHLEVBQUU7WUFDUCxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLElBQUksY0FBYyxJQUFJLGNBQWMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7O29CQUN0RCxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUs7Z0JBQ2xDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzVEO2lCQUFNO2dCQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLENBQUM7YUFDdkQ7U0FDRjtRQUNELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDckM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7OztJQUNPLHFEQUFtQjs7OztJQUEzQjs7WUFDUSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJOztZQUMzQixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDL0IsT0FBTyxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUM7SUFDdEMsQ0FBQzs7Ozs7SUFDTSx1Q0FBSzs7OztJQUFaLFVBQWEsV0FBbUI7UUFDOUIsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixPQUFPLEVBQUUsQ0FBQztTQUNYOztZQUNLLE1BQU0sR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN6RSxPQUFPLE1BQU0sQ0FBQyxNQUFNOzs7OztRQUFDLFVBQUMsTUFBTSxFQUFFLElBQUk7OztnQkFDMUIsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDOztnQkFDekIsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQzs7Z0JBQzFCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sWUFBSSxHQUFDLEdBQUcsSUFBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsTUFBRyxDQUFDO1FBQ25FLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztJQUNULENBQUM7O2dCQW5ERixVQUFVOzs7O2dCQUZGLGNBQWMsdUJBS1IsUUFBUTs7SUFpRHZCLDhCQUFDO0NBQUEsQUFwREQsSUFvREM7Ozs7OztJQWpEYSxpREFBa0Q7O0FBbURoRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IFdpdHRcclxuICogQERhdGU6IDIwMTgtMTAtMTEgMjA6MzI6MDJcclxuICogQExhc3QgTW9kaWZpZWQgYnk6IFdpdHRcclxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxOC0xMi0xMyAyMDowNTo0NlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UpIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlueUqOaIt1Nlc3Npb25JZFxyXG4gICAqL1xyXG4gIGdldFVzZXJTZXNzaW9uSWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXNzaW9uU2VydmljZS5nZXRVc2VyU2Vzc2lvbklkKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blvZPliY3lip/og73oj5zljZXnmoRTZXNzaW9uSWRcclxuICAgKi9cclxuICBnZXRDdXJyZW50U2Vzc2lvbklkKHJ1bnRpbWVDb250ZXh0PzogYW55KSB7XHJcbiAgICBsZXQgc2Vzc2lvbklkOiBzdHJpbmc7XHJcbiAgICBjb25zdCByc2kgPSB0aGlzLmdldFJ1bnRpbWVTZXNzaW9uSWQoKTtcclxuICAgIGlmIChyc2kpIHtcclxuICAgICAgcmV0dXJuIHJzaTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnNlc3Npb25TZXJ2aWNlKSB7XHJcbiAgICAgIGlmIChydW50aW1lQ29udGV4dCAmJiBydW50aW1lQ29udGV4dC5oYXNPd25Qcm9wZXJ0eSgndGFiSWQnKSkge1xyXG4gICAgICAgIGNvbnN0IHRhYklkID0gcnVudGltZUNvbnRleHQudGFiSWQ7XHJcbiAgICAgICAgc2Vzc2lvbklkID0gdGhpcy5zZXNzaW9uU2VydmljZS5nZXRDdXJyZW50U2Vlc2lvbklkKHRhYklkKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZXNzaW9uSWQgPSB0aGlzLnNlc3Npb25TZXJ2aWNlLmdldEN1cnJlbnRTZWVzaW9uSWQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFzZXNzaW9uSWQpIHtcclxuICAgICAgc2Vzc2lvbklkID0gdGhpcy5nZXRVc2VyU2Vzc2lvbklkKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2Vzc2lvbklkO1xyXG4gIH1cclxuICBwcml2YXRlIGdldFJ1bnRpbWVTZXNzaW9uSWQoKSB7XHJcbiAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnBhcnNlKGhhc2gpO1xyXG4gICAgcmV0dXJuIHBhcmFtcyAmJiBwYXJhbXMucnNpIHx8IG51bGw7XHJcbiAgfVxyXG4gIHB1YmxpYyBwYXJzZShxdWVyeVN0cmluZzogc3RyaW5nKTogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9IHtcclxuICAgIGlmICghcXVlcnlTdHJpbmcpIHtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFzaGVzID0gcXVlcnlTdHJpbmcuc2xpY2UocXVlcnlTdHJpbmcuaW5kZXhPZignPycpICsgMSkuc3BsaXQoJyYnKTtcclxuICAgIHJldHVybiBoYXNoZXMucmVkdWNlKChwYXJhbXMsIGhhc2gpID0+IHtcclxuICAgICAgY29uc3Qgc3BsaXQgPSBoYXNoLmluZGV4T2YoJz0nKTtcclxuICAgICAgY29uc3Qga2V5ID0gaGFzaC5zbGljZSgwLCBzcGxpdCk7XHJcbiAgICAgIGNvbnN0IHZhbCA9IGhhc2guc2xpY2Uoc3BsaXQgKyAxKTtcclxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7IFtrZXldOiBkZWNvZGVVUklDb21wb25lbnQodmFsKSB9KTtcclxuICAgIH0sIHt9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIH07XHJcbiJdfQ==