/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-19 15:36:21
 * @Last Modified by: Witt
 * @Last Modified time: 2019-04-30 15:41:45
 */
import { FieldMetadataUtil } from '@farris/devkit';
var EntityUtil = /** @class */ (function () {
    function EntityUtil() {
    }
    /**
     * 查找属性的类型
     * @param entityType 实体类型
     * @param targetPropName 属性名称
     * @return 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    EntityUtil.getPropInfo = /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var propType;
        /** @type {?} */
        var propEntityType;
        /** @type {?} */
        var propMetadata;
        // NgField
        /** @type {?} */
        var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgField';
                propEntityType = null;
                propMetadata = ngFieldProperties[propName];
            }
        }));
        // NgObject
        /** @type {?} */
        var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgObject';
                propEntityType = ngObjectProperties[propName].type;
                propMetadata = ngObjectProperties[propName];
            }
        }));
        // NgList
        /** @type {?} */
        var ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgList';
                propEntityType = ngListProperties[propName].type;
                propMetadata = ngListProperties[propName];
            }
        }));
        /** @type {?} */
        var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgDynamic';
                propEntityType = ngDynamicProperties[propName].type;
                propMetadata = ngDynamicProperties[propName];
            }
        }));
        return { propType: propType, propEntityType: propEntityType, propMetadata: propMetadata };
    };
    /**
     * 获取实体的主键名
     * @param entityType 实体类型
     */
    /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    EntityUtil.getPrimaryKey = /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    function (entityType) {
        /** @type {?} */
        var primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
        if (primaryNgFiledProp) {
            return primaryNgFiledProp.dataField;
        }
        else {
            return '';
        }
    };
    /**
     * 是否为对象属性
     */
    /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    EntityUtil.isObjectProp = /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var isObjectProp = false;
        /** @type {?} */
        var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                isObjectProp = true;
            }
        }));
        return isObjectProp;
    };
    /**
     * 检查是否是动态列属性
     */
    /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    EntityUtil.isDynamicProp = /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var isDynamicProp = false;
        /** @type {?} */
        var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                isDynamicProp = true;
            }
        }));
        return isDynamicProp;
    };
    /**
     * 为实体增加initialData属性
     * @param entity 实体实例
     * @param initialData 默认值对象
     */
    /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    EntityUtil.appendInitialData = /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    function (entity, initialData) {
        /** @type {?} */
        var data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    };
    return EntityUtil;
}());
export { EntityUtil };
//# sourceMappingURL=data:application/json;base64,