/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_dynamic_control_group_default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Repository } from '@farris/devkit';
import { HttpHeaders } from '@angular/common/http';
var DefaultDynamiControlGroupHttpService = /** @class */ (function () {
    function DefaultDynamiControlGroupHttpService(repository) {
        this.befRest = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    DefaultDynamiControlGroupHttpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    function (url, params, method) {
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'GET'; }
        /** @type {?} */
        var headers = new HttpHeaders({ 'content-type': 'application/json' });
        return this.befRest.restService.invoke(url, method, params, { headers: headers });
    };
    DefaultDynamiControlGroupHttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DefaultDynamiControlGroupHttpService.ctorParameters = function () { return [
        { type: Repository }
    ]; };
    return DefaultDynamiControlGroupHttpService;
}());
export { DefaultDynamiControlGroupHttpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultDynamiControlGroupHttpService.prototype.befRest;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2R5bmFtaWNfY29udHJvbF9ncm91cF9kZWZhdWx0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2JlZi8iLCJzb3VyY2VzIjpbImxpYi9iZWZfZHluYW1pY19jb250cm9sX2dyb3VwX2RlZmF1bHQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUduRDtJQUlJLDhDQUFZLFVBQTJCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQUEsVUFBVSxFQUFzQixDQUFDO0lBQ3BELENBQUM7Ozs7Ozs7SUFDRCxzREFBTzs7Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsTUFBVyxFQUFFLE1BQWM7UUFBM0IsdUJBQUEsRUFBQSxXQUFXO1FBQUUsdUJBQUEsRUFBQSxjQUFjOztZQUN0QyxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztRQUN2RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztJQUM3RSxDQUFDOztnQkFWSixVQUFVOzs7O2dCQUxGLFVBQVU7O0lBZ0JuQiwyQ0FBQztDQUFBLEFBWEQsSUFXQztTQVZZLG9DQUFvQzs7Ozs7O0lBQzdDLHVEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDb21ib0h0dHBTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21iby1saXN0JztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJy4vYmVmX3JlcG9zaXRvcnknO1xyXG5pbXBvcnQgeyBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgRHluYW1pQ29udHJvbEdyb3VwSHR0cEludGVyZmFjZSB9IGZyb20gJ0BmYXJyaXMvZHluYW1pYy1jb250cm9sLWdyb3VwJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlZmF1bHREeW5hbWlDb250cm9sR3JvdXBIdHRwU2VydmljZSBpbXBsZW1lbnRzIER5bmFtaUNvbnRyb2xHcm91cEh0dHBJbnRlcmZhY2Uge1xyXG4gICAgcHJpdmF0ZSBiZWZSZXN0OiBCZWZSZXBvc2l0b3J5PGFueT47XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVwb3NpdG9yeTogUmVwb3NpdG9yeTxhbnk+KSB7XHJcbiAgICAgICAgdGhpcy5iZWZSZXN0ID0gcmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICB9XHJcbiAgICBnZXREYXRhKHVybDogc3RyaW5nLCBwYXJhbXMgPSB7fSwgbWV0aG9kID0gJ0dFVCcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmVmUmVzdC5yZXN0U2VydmljZS5pbnZva2UodXJsLCBtZXRob2QsIHBhcmFtcywgeyBoZWFkZXJzIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==