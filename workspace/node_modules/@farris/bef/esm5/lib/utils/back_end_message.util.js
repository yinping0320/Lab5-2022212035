/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/back_end_message.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AppContext, BackEndMessage, BACK_END_MESSAGE_HANDLER_TOKEN, NAMESPACE } from "@farris/devkit";
var BackEndMessageUtil = /** @class */ (function () {
    function BackEndMessageUtil() {
    }
    /**
     * @param {?} messages
     * @param {?} injector
     * @param {?=} options
     * @return {?}
     */
    BackEndMessageUtil.handleMessage = /**
     * @param {?} messages
     * @param {?} injector
     * @param {?=} options
     * @return {?}
     */
    function (messages, injector, options) {
        /** @type {?} */
        var namespace = injector.get(NAMESPACE, null);
        /** @type {?} */
        var appContext = injector.get(AppContext, null);
        /** @type {?} */
        var context = {
            ns: namespace,
            appContext: appContext
        };
        /** @type {?} */
        var bizMessages = this.buildBackEndMessages(messages);
        /** @type {?} */
        var backEndMessage = new BackEndMessage.Message(bizMessages, context);
        /** @type {?} */
        var backEndMessageHandler = injector.get(BACK_END_MESSAGE_HANDLER_TOKEN, null);
        if (backEndMessageHandler) {
            backEndMessageHandler.handle(backEndMessage, options);
        }
    };
    /**
     * @param {?} injector
     * @return {?}
     */
    BackEndMessageUtil.isBackEndMessageHandlerExist = /**
     * @param {?} injector
     * @return {?}
     */
    function (injector) {
        /** @type {?} */
        var backEndMessageHandler = injector.get(BACK_END_MESSAGE_HANDLER_TOKEN, null);
        return backEndMessageHandler && true || false;
    };
    /**
     * @param {?} messages
     * @return {?}
     */
    BackEndMessageUtil.getFormlessMessages = /**
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        /** @type {?} */
        var bizMessages = this.buildBackEndMessages(messages) || [];
        return bizMessages.filter((/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            return !message.location || !message.location.columns || message.location.columns.length < 1 || !message.location.nodeCode;
        }));
    };
    /**
     * @param {?} messages
     * @return {?}
     */
    BackEndMessageUtil.buildBackEndMessages = /**
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        if (!messages || messages.length < 1 || !Array.isArray(messages)) {
            return null;
        }
        /** @type {?} */
        var bizMessages = [];
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            /** @type {?} */
            var bizMessage = {
                level: message.level,
                message: message.message
            };
            if (message.hasOwnProperty('location') && message.location) {
                bizMessage.location = {
                    nodeCode: message.location.nodeCode,
                    rows: message.location.dataIds,
                    columns: message.location.columnNames
                };
            }
            bizMessages.push(bizMessage);
        }));
        return bizMessages;
    };
    return BackEndMessageUtil;
}());
export { BackEndMessageUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja19lbmRfbWVzc2FnZS51dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9iZWYvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvYmFja19lbmRfbWVzc2FnZS51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsOEJBQThCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkc7SUFBQTtJQThDQSxDQUFDOzs7Ozs7O0lBN0NlLGdDQUFhOzs7Ozs7SUFBM0IsVUFBNEIsUUFBa0IsRUFBRSxRQUFrQixFQUFFLE9BQWE7O1lBQ3pFLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7O1lBQ3pDLFVBQVUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFhLFVBQVUsRUFBRSxJQUFJLENBQUM7O1lBQ3ZELE9BQU8sR0FBbUM7WUFDOUMsRUFBRSxFQUFFLFNBQVM7WUFDYixVQUFVLFlBQUE7U0FDWDs7WUFDSyxXQUFXLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQzs7WUFDakQsY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDOztZQUNqRSxxQkFBcUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUF3Qyw4QkFBOEIsRUFBRSxJQUFJLENBQUM7UUFDdkgsSUFBSSxxQkFBcUIsRUFBRTtZQUN6QixxQkFBcUIsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQzs7Ozs7SUFDYSwrQ0FBNEI7Ozs7SUFBMUMsVUFBMkMsUUFBa0I7O1lBQ3JELHFCQUFxQixHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQXdDLDhCQUE4QixFQUFFLElBQUksQ0FBQztRQUN2SCxPQUFPLHFCQUFxQixJQUFJLElBQUksSUFBSSxLQUFLLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFDYSxzQ0FBbUI7Ozs7SUFBakMsVUFBa0MsUUFBc0M7O1lBQ2hFLFdBQVcsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtRQUM3RCxPQUFPLFdBQVcsQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQyxPQUFtQztZQUM1RCxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUM3SCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBQ2EsdUNBQW9COzs7O0lBQWxDLFVBQW1DLFFBQWtCO1FBQ25ELElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2hFLE9BQU8sSUFBSSxDQUFDO1NBQ2I7O1lBQ0ssV0FBVyxHQUFpQyxFQUFFO1FBQ3BELFFBQVEsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQyxPQUFZOztnQkFDdEIsVUFBVSxHQUErQjtnQkFDN0MsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO2dCQUNwQixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87YUFDekI7WUFDRCxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtnQkFDMUQsVUFBVSxDQUFDLFFBQVEsR0FBRztvQkFDcEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUTtvQkFDbkMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTztvQkFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVztpQkFDdEMsQ0FBQzthQUNIO1lBQ0QsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixDQUFDLEVBQUMsQ0FBQztRQUNILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUE5Q0QsSUE4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEFwcENvbnRleHQsIEJhY2tFbmRNZXNzYWdlLCBCQUNLX0VORF9NRVNTQUdFX0hBTkRMRVJfVE9LRU4sIE5BTUVTUEFDRSB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhY2tFbmRNZXNzYWdlVXRpbCB7XHJcbiAgcHVibGljIHN0YXRpYyBoYW5kbGVNZXNzYWdlKG1lc3NhZ2VzOiBvYmplY3RbXSwgaW5qZWN0b3I6IEluamVjdG9yLCBvcHRpb25zPzogYW55KSB7XHJcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBpbmplY3Rvci5nZXQoTkFNRVNQQUNFLCBudWxsKTtcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSBpbmplY3Rvci5nZXQ8QXBwQ29udGV4dD4oQXBwQ29udGV4dCwgbnVsbCk7XHJcbiAgICBjb25zdCBjb250ZXh0OiBCYWNrRW5kTWVzc2FnZS5JTWVzc2FnZUNvbnRleHQgPSB7XHJcbiAgICAgIG5zOiBuYW1lc3BhY2UsXHJcbiAgICAgIGFwcENvbnRleHRcclxuICAgIH07XHJcbiAgICBjb25zdCBiaXpNZXNzYWdlcyA9IHRoaXMuYnVpbGRCYWNrRW5kTWVzc2FnZXMobWVzc2FnZXMpO1xyXG4gICAgY29uc3QgYmFja0VuZE1lc3NhZ2UgPSBuZXcgQmFja0VuZE1lc3NhZ2UuTWVzc2FnZShiaXpNZXNzYWdlcywgY29udGV4dCk7XHJcbiAgICBjb25zdCBiYWNrRW5kTWVzc2FnZUhhbmRsZXIgPSBpbmplY3Rvci5nZXQ8QmFja0VuZE1lc3NhZ2UuSUJhY2tFbmRNZXNzYWdlSGFuZGxlcj4oQkFDS19FTkRfTUVTU0FHRV9IQU5ETEVSX1RPS0VOLCBudWxsKTtcclxuICAgIGlmIChiYWNrRW5kTWVzc2FnZUhhbmRsZXIpIHtcclxuICAgICAgYmFja0VuZE1lc3NhZ2VIYW5kbGVyLmhhbmRsZShiYWNrRW5kTWVzc2FnZSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHB1YmxpYyBzdGF0aWMgaXNCYWNrRW5kTWVzc2FnZUhhbmRsZXJFeGlzdChpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIGNvbnN0IGJhY2tFbmRNZXNzYWdlSGFuZGxlciA9IGluamVjdG9yLmdldDxCYWNrRW5kTWVzc2FnZS5JQmFja0VuZE1lc3NhZ2VIYW5kbGVyPihCQUNLX0VORF9NRVNTQUdFX0hBTkRMRVJfVE9LRU4sIG51bGwpO1xyXG4gICAgcmV0dXJuIGJhY2tFbmRNZXNzYWdlSGFuZGxlciAmJiB0cnVlIHx8IGZhbHNlO1xyXG4gIH1cclxuICBwdWJsaWMgc3RhdGljIGdldEZvcm1sZXNzTWVzc2FnZXMobWVzc2FnZXM6IEJhY2tFbmRNZXNzYWdlLklCaXpNZXNzYWdlW10pIHtcclxuICAgIGNvbnN0IGJpek1lc3NhZ2VzID0gdGhpcy5idWlsZEJhY2tFbmRNZXNzYWdlcyhtZXNzYWdlcykgfHwgW107XHJcbiAgICByZXR1cm4gYml6TWVzc2FnZXMuZmlsdGVyKChtZXNzYWdlOiBCYWNrRW5kTWVzc2FnZS5JQml6TWVzc2FnZSkgPT4ge1xyXG4gICAgICByZXR1cm4gIW1lc3NhZ2UubG9jYXRpb24gfHwgIW1lc3NhZ2UubG9jYXRpb24uY29sdW1ucyB8fCBtZXNzYWdlLmxvY2F0aW9uLmNvbHVtbnMubGVuZ3RoIDwgMSB8fCAhbWVzc2FnZS5sb2NhdGlvbi5ub2RlQ29kZTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwdWJsaWMgc3RhdGljIGJ1aWxkQmFja0VuZE1lc3NhZ2VzKG1lc3NhZ2VzOiBvYmplY3RbXSk6IEJhY2tFbmRNZXNzYWdlLklCaXpNZXNzYWdlW10ge1xyXG4gICAgaWYgKCFtZXNzYWdlcyB8fCBtZXNzYWdlcy5sZW5ndGggPCAxIHx8ICFBcnJheS5pc0FycmF5KG1lc3NhZ2VzKSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IGJpek1lc3NhZ2VzOiBCYWNrRW5kTWVzc2FnZS5JQml6TWVzc2FnZVtdID0gW107XHJcbiAgICBtZXNzYWdlcy5mb3JFYWNoKChtZXNzYWdlOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgYml6TWVzc2FnZTogQmFja0VuZE1lc3NhZ2UuSUJpek1lc3NhZ2UgPSB7XHJcbiAgICAgICAgbGV2ZWw6IG1lc3NhZ2UubGV2ZWwsXHJcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZS5tZXNzYWdlXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChtZXNzYWdlLmhhc093blByb3BlcnR5KCdsb2NhdGlvbicpICYmIG1lc3NhZ2UubG9jYXRpb24pIHtcclxuICAgICAgICBiaXpNZXNzYWdlLmxvY2F0aW9uID0ge1xyXG4gICAgICAgICAgbm9kZUNvZGU6IG1lc3NhZ2UubG9jYXRpb24ubm9kZUNvZGUsXHJcbiAgICAgICAgICByb3dzOiBtZXNzYWdlLmxvY2F0aW9uLmRhdGFJZHMsXHJcbiAgICAgICAgICBjb2x1bW5zOiBtZXNzYWdlLmxvY2F0aW9uLmNvbHVtbk5hbWVzXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBiaXpNZXNzYWdlcy5wdXNoKGJpek1lc3NhZ2UpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYml6TWVzc2FnZXM7XHJcbiAgfVxyXG59Il19