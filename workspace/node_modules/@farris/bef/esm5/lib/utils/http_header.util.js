/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/http_header.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpHeaders } from '@angular/common/http';
var HttpHeaderUtil = /** @class */ (function () {
    function HttpHeaderUtil() {
    }
    /**
     * PlainObject => HttpHeaders
     */
    /**
     * PlainObject => HttpHeaders
     * @param {?} headers
     * @return {?}
     */
    HttpHeaderUtil.convertToHeaders = /**
     * PlainObject => HttpHeaders
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        if (!headers) {
            headers = new HttpHeaders();
        }
        // 已经是HttpHeaders，直接返回
        /** @type {?} */
        var isHttpHeaders = headers instanceof HttpHeaders;
        if (isHttpHeaders === true) {
            return headers;
        }
        if (Object.keys(headers).length > 0) {
            /** @type {?} */
            var httpHeaders_1 = new HttpHeaders();
            Object.keys(headers).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) {
                httpHeaders_1 = httpHeaders_1.append(prop, headers[prop]);
            }));
            headers = httpHeaders_1;
        }
        else {
            headers = new HttpHeaders();
        }
        return headers;
    };
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param headers HttpHeaders对象
     * @param context BeSessionId
     */
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param {?} headers HttpHeaders对象
     * @param {?} sessionId
     * @return {?}
     */
    HttpHeaderUtil.appendSessionId = 
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param {?} headers HttpHeaders对象
     * @param {?} sessionId
     * @return {?}
     */
    function (headers, sessionId) {
        return headers.append('SessionId', sessionId);
    };
    /**
     * 追加CommonVariable头
     * @param headers HttpHeaders对象
     * @param context 框架会话token，等价于原来的SessionId
     */
    /**
     * 追加CommonVariable头
     * @param {?} headers HttpHeaders对象
     * @param {?} commonVariable
     * @return {?}
     */
    HttpHeaderUtil.appendCafRuntimeCommonVariable = /**
     * 追加CommonVariable头
     * @param {?} headers HttpHeaders对象
     * @param {?} commonVariable
     * @return {?}
     */
    function (headers, commonVariable) {
        return headers.append('X-CAF-Runtime-CommonVariable', commonVariable);
    };
    /**
     * 追加X-CAF-Runtime-Context头
     * @param headers HttpHeaders对象
     * @param context 等价于BeSessionId
     */
    /**
     * 追加X-CAF-Runtime-Context头
     * @param {?} headers HttpHeaders对象
     * @param {?} context 等价于BeSessionId
     * @return {?}
     */
    HttpHeaderUtil.appendCafRuntimeContext = /**
     * 追加X-CAF-Runtime-Context头
     * @param {?} headers HttpHeaders对象
     * @param {?} context 等价于BeSessionId
     * @return {?}
     */
    function (headers, context) {
        return headers.append('X-CAF-Runtime-Context', context);
    };
    /**
     * 追加Content-Type头
     * @param headers HttpHeaders对象
     * @param context 提交内容的MIME类型，默认为application/json
     */
    /**
     * 追加Content-Type头
     * @param {?} headers HttpHeaders对象
     * @param {?=} contentType
     * @return {?}
     */
    HttpHeaderUtil.appendContextType = /**
     * 追加Content-Type头
     * @param {?} headers HttpHeaders对象
     * @param {?=} contentType
     * @return {?}
     */
    function (headers, contentType) {
        contentType = contentType ? contentType : 'application/json';
        return headers.append('Content-Type', contentType);
    };
    /**
     * @param {?} headers
     * @param {?=} requireMessage
     * @return {?}
     */
    HttpHeaderUtil.appendRequireMessage = /**
     * @param {?} headers
     * @param {?=} requireMessage
     * @return {?}
     */
    function (headers, requireMessage) {
        if (requireMessage === void 0) { requireMessage = true; }
        return headers.append('Bff-Require-Message', requireMessage.toString());
    };
    /**
     * 组合表单复用，表单实例id
     * @param headers headers
     * @param funcInstId 表单实例id
     */
    /**
     * 组合表单复用，表单实例id
     * @param {?} headers headers
     * @param {?} funcInstId 表单实例id
     * @return {?}
     */
    HttpHeaderUtil.appendFuncInstId = /**
     * 组合表单复用，表单实例id
     * @param {?} headers headers
     * @param {?} funcInstId 表单实例id
     * @return {?}
     */
    function (headers, funcInstId) {
        return headers.append('Func-Inst-Id', funcInstId);
    };
    /**
     * http headers to json
     * @param headers headers
     */
    /**
     * http headers to json
     * @param {?} headers headers
     * @return {?}
     */
    HttpHeaderUtil.toJson = /**
     * http headers to json
     * @param {?} headers headers
     * @return {?}
     */
    function (headers) {
        if (!(headers instanceof HttpHeaders)) {
            return null;
        }
        /** @type {?} */
        var result = {};
        headers.keys().forEach((/**
         * @param {?} header
         * @return {?}
         */
        function (header) {
            /** @type {?} */
            var values = headers.getAll(header);
            if (values.length > 1) {
                result[header] = values;
            }
            else {
                result[header] = values[0] || '';
            }
        }));
        return result;
    };
    return HttpHeaderUtil;
}());
export { HttpHeaderUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cF9oZWFkZXIudXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2h0dHBfaGVhZGVyLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQ7SUFBQTtJQWtHQSxDQUFDO0lBaEdDOztPQUVHOzs7Ozs7SUFDVywrQkFBZ0I7Ozs7O0lBQTlCLFVBQStCLE9BQVk7UUFDekMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1NBQzdCOzs7WUFHSyxhQUFhLEdBQUcsT0FBTyxZQUFZLFdBQVc7UUFDcEQsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2dCQUMvQixhQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUU7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxJQUFJO2dCQUMvQixhQUFXLEdBQUcsYUFBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEQsQ0FBQyxFQUFDLENBQUM7WUFDSCxPQUFPLEdBQUcsYUFBVyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztTQUM3QjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCx3QkFBd0I7SUFFeEI7Ozs7T0FJRzs7Ozs7Ozs7SUFDVyw4QkFBZTs7Ozs7Ozs7SUFBN0IsVUFBOEIsT0FBb0IsRUFBRSxTQUFpQjtRQUNuRSxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ1csNkNBQThCOzs7Ozs7SUFBNUMsVUFBNkMsT0FBb0IsRUFBRSxjQUFzQjtRQUN2RixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsOEJBQThCLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDVyxzQ0FBdUI7Ozs7OztJQUFyQyxVQUFzQyxPQUFvQixFQUFFLE9BQWU7UUFDekUsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFELENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ1csZ0NBQWlCOzs7Ozs7SUFBL0IsVUFBZ0MsT0FBb0IsRUFBRSxXQUFvQjtRQUN4RSxXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDO1FBQzdELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7O0lBQ2EsbUNBQW9COzs7OztJQUFsQyxVQUFtQyxPQUFvQixFQUFFLGNBQXFCO1FBQXJCLCtCQUFBLEVBQUEscUJBQXFCO1FBQzVFLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBQ0Q7Ozs7T0FJRzs7Ozs7OztJQUNXLCtCQUFnQjs7Ozs7O0lBQTlCLFVBQStCLE9BQW9CLEVBQUUsVUFBa0I7UUFDckUsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0Q7OztPQUdHOzs7Ozs7SUFDVyxxQkFBTTs7Ozs7SUFBcEIsVUFBcUIsT0FBb0I7UUFDdkMsSUFBSSxDQUFDLENBQUMsT0FBTyxZQUFZLFdBQVcsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7O1lBQ0ssTUFBTSxHQUFHLEVBQUU7UUFDakIsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLE1BQU07O2dCQUNyQixNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDckMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDckIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQzthQUN6QjtpQkFBTTtnQkFDTCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNsQztRQUNILENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUdILHFCQUFDO0FBQUQsQ0FBQyxBQWxHRCxJQWtHQztBQUVELE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuY2xhc3MgSHR0cEhlYWRlclV0aWwge1xyXG5cclxuICAvKipcclxuICAgKiBQbGFpbk9iamVjdCA9PiBIdHRwSGVhZGVyc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFRvSGVhZGVycyhoZWFkZXJzOiBhbnkpIHtcclxuICAgIGlmICghaGVhZGVycykge1xyXG4gICAgICBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5bey57uP5pivSHR0cEhlYWRlcnPvvIznm7TmjqXov5Tlm55cclxuICAgIGNvbnN0IGlzSHR0cEhlYWRlcnMgPSBoZWFkZXJzIGluc3RhbmNlb2YgSHR0cEhlYWRlcnM7XHJcbiAgICBpZiAoaXNIdHRwSGVhZGVycyA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gaGVhZGVycztcclxuICAgIH1cclxuICAgIGlmIChPYmplY3Qua2V5cyhoZWFkZXJzKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGxldCBodHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xyXG4gICAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgIGh0dHBIZWFkZXJzID0gaHR0cEhlYWRlcnMuYXBwZW5kKHByb3AsIGhlYWRlcnNbcHJvcF0pO1xyXG4gICAgICB9KTtcclxuICAgICAgaGVhZGVycyA9IGh0dHBIZWFkZXJzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICAvLyAjcmVnaW9uIOa3u+WKoOeJueWumuWQq+S5ieeahGhlYWRlclxyXG5cclxuICAvKipcclxuICAgKiDov73liqBTZXNzaW9uSWTlpLRcclxuICAgKiBAcGFyYW0gaGVhZGVycyBIdHRwSGVhZGVyc+WvueixoVxyXG4gICAqIEBwYXJhbSBjb250ZXh0IEJlU2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBhcHBlbmRTZXNzaW9uSWQoaGVhZGVyczogSHR0cEhlYWRlcnMsIHNlc3Npb25JZDogc3RyaW5nKTogSHR0cEhlYWRlcnMge1xyXG4gICAgcmV0dXJuIGhlYWRlcnMuYXBwZW5kKCdTZXNzaW9uSWQnLCBzZXNzaW9uSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L+95YqgQ29tbW9uVmFyaWFibGXlpLRcclxuICAgKiBAcGFyYW0gaGVhZGVycyBIdHRwSGVhZGVyc+WvueixoVxyXG4gICAqIEBwYXJhbSBjb250ZXh0IOahhuaetuS8muivnXRva2Vu77yM562J5Lu35LqO5Y6f5p2l55qEU2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBhcHBlbmRDYWZSdW50aW1lQ29tbW9uVmFyaWFibGUoaGVhZGVyczogSHR0cEhlYWRlcnMsIGNvbW1vblZhcmlhYmxlOiBzdHJpbmcpOiBIdHRwSGVhZGVycyB7XHJcbiAgICByZXR1cm4gaGVhZGVycy5hcHBlbmQoJ1gtQ0FGLVJ1bnRpbWUtQ29tbW9uVmFyaWFibGUnLCBjb21tb25WYXJpYWJsZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov73liqBYLUNBRi1SdW50aW1lLUNvbnRleHTlpLRcclxuICAgKiBAcGFyYW0gaGVhZGVycyBIdHRwSGVhZGVyc+WvueixoVxyXG4gICAqIEBwYXJhbSBjb250ZXh0IOetieS7t+S6jkJlU2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBhcHBlbmRDYWZSdW50aW1lQ29udGV4dChoZWFkZXJzOiBIdHRwSGVhZGVycywgY29udGV4dDogc3RyaW5nKTogSHR0cEhlYWRlcnMge1xyXG4gICAgcmV0dXJuIGhlYWRlcnMuYXBwZW5kKCdYLUNBRi1SdW50aW1lLUNvbnRleHQnLCBjb250ZXh0KTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov73liqBDb250ZW50LVR5cGXlpLRcclxuICAgKiBAcGFyYW0gaGVhZGVycyBIdHRwSGVhZGVyc+WvueixoVxyXG4gICAqIEBwYXJhbSBjb250ZXh0IOaPkOS6pOWGheWuueeahE1JTUXnsbvlnovvvIzpu5jorqTkuLphcHBsaWNhdGlvbi9qc29uXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBhcHBlbmRDb250ZXh0VHlwZShoZWFkZXJzOiBIdHRwSGVhZGVycywgY29udGVudFR5cGU/OiBzdHJpbmcpOiBIdHRwSGVhZGVycyB7XHJcbiAgICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUgOiAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICByZXR1cm4gaGVhZGVycy5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBhcHBlbmRSZXF1aXJlTWVzc2FnZShoZWFkZXJzOiBIdHRwSGVhZGVycywgcmVxdWlyZU1lc3NhZ2UgPSB0cnVlKSB7XHJcbiAgICByZXR1cm4gaGVhZGVycy5hcHBlbmQoJ0JmZi1SZXF1aXJlLU1lc3NhZ2UnLCByZXF1aXJlTWVzc2FnZS50b1N0cmluZygpKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog57uE5ZCI6KGo5Y2V5aSN55So77yM6KGo5Y2V5a6e5L6LaWRcclxuICAgKiBAcGFyYW0gaGVhZGVycyBoZWFkZXJzXHJcbiAgICogQHBhcmFtIGZ1bmNJbnN0SWQg6KGo5Y2V5a6e5L6LaWRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGFwcGVuZEZ1bmNJbnN0SWQoaGVhZGVyczogSHR0cEhlYWRlcnMsIGZ1bmNJbnN0SWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGhlYWRlcnMuYXBwZW5kKCdGdW5jLUluc3QtSWQnLCBmdW5jSW5zdElkKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogaHR0cCBoZWFkZXJzIHRvIGpzb25cclxuICAgKiBAcGFyYW0gaGVhZGVycyBoZWFkZXJzXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyB0b0pzb24oaGVhZGVyczogSHR0cEhlYWRlcnMpIHtcclxuICAgIGlmICghKGhlYWRlcnMgaW5zdGFuY2VvZiBIdHRwSGVhZGVycykpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcclxuICAgIGhlYWRlcnMua2V5cygpLmZvckVhY2goaGVhZGVyID0+IHtcclxuICAgICAgY29uc3QgdmFsdWVzID0gaGVhZGVycy5nZXRBbGwoaGVhZGVyKTtcclxuICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgcmVzdWx0W2hlYWRlcl0gPSB2YWx1ZXM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzdWx0W2hlYWRlcl0gPSB2YWx1ZXNbMF0gfHwgJyc7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgLy8gI2VuZHJlZ2lvblxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgSHR0cEhlYWRlclV0aWwgfTtcclxuIl19