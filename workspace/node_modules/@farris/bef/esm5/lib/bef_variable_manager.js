/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_variable_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2019-03-05 19:55:44
 * @Last Modified by: Witt
 * @Last Modified time: 2019-03-13 20:35:29
 */
import { format } from 'date-fns';
import { AppContext, FrameContext } from '@farris/devkit';
import { ChangeDetailType } from './types';
import { BefChangeUtil } from './bef_change_util';
import { Injector, Optional } from '@angular/core';
/**
 * Be变量管理器
 */
var BefVariableManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefVariableManager(appContext, ngVariables, injector) {
        var _this = this;
        this.appContext = appContext;
        this.ngVariables = ngVariables;
        this.injector = injector;
        this.ngVariableMap = new Map();
        this.innerValueMap = new Map();
        // 重新组织变量元数据
        Object.keys(ngVariables).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this.ngVariableMap.set(propName, ngVariables[propName]);
        }));
    }
    /**
     * 获取变更集
     */
    /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.handleChangeDetail = /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        var _this = this;
        /** @type {?} */
        var changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} varName
         * @return {?}
         */
        function (varName) {
            // 变量元数据
            /** @type {?} */
            var ngVariable = _this.ngVariableMap.get(varName);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            var mapping = ngVariable.mapping;
            // 更新UIState变更
            /** @type {?} */
            var newValue = changeInfo[varName];
            /** @type {?} */
            var oldValue = _this.getValueFromUIState(mapping);
            if (oldValue === newValue) {
                return;
            }
            // 更新值
            _this.setValueToUIState(mapping, newValue);
            _this.innerValueMap.set(varName, newValue);
        }));
    };
    /**
     * Build ChangeDetail instance for all variables.
     */
    /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    BefVariableManager.prototype.buildChangeDetail = /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        function (ngVariable, varName) {
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            /** @type {?} */
            var oldValue = _this.innerValueMap.get(varName);
            if (_this.isValueEqual(newValue, oldValue) === false) {
                // 不清除变更，请求成功后清除变更
                // this.innerValueMap.set(varName, newValue);
                _this.appendToChangeInfo(changeDetail, varName, newValue);
            }
        }));
        if (Object.keys(changeDetail.ChangeInfo).length === 0) {
            return null;
        }
        return changeDetail;
    };
    /**
     * Clear variable values cached in the innerValueMap property.
     */
    /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    BefVariableManager.prototype.reset = /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    function () {
        this.innerValueMap.clear();
    };
    /**
     * 清空所有vo变量变更集
     */
    /**
     * 清空所有vo变量变更集
     * @return {?}
     */
    BefVariableManager.prototype.clearChanges = /**
     * 清空所有vo变量变更集
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        function (ngVariable, varName) {
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            /** @type {?} */
            var oldValue = _this.innerValueMap.get(varName);
            if (_this.isValueEqual(newValue, oldValue) === false) {
                _this.innerValueMap.set(varName, newValue);
            }
        }));
    };
    /**
     * 清空只读vo变更
     * @param changeDetail
     * @returns
     */
    /**
     * 清空只读vo变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.clearChangeDetail = /**
     * 清空只读vo变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        var _this = this;
        if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {
            return;
        }
        Object.keys(changeDetail.ChangeInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var ngVariable = _this.ngVariableMap.get(key);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            _this.innerValueMap.set(key, newValue);
        }));
    };
    /**
     * Append changed variable to ChangeDetail instance.
     */
    /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    BefVariableManager.prototype.appendToChangeInfo = /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    function (changeDetail, varName, varValue) {
        if (this.isUdtVariable(varValue) === true) {
            /** @type {?} */
            var udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
            udtVarChangeDetail.ChangeInfo = varValue;
            changeDetail.ChangeInfo[varName] = udtVarChangeDetail;
        }
        else {
            changeDetail.ChangeInfo[varName] = varValue;
        }
    };
    /**
     * 从UIState上获取值
     */
    /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    BefVariableManager.prototype.getValueFromUIState = /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    function (mapping) {
        /** @type {?} */
        var uiState = this.getRootUIState();
        // 计算value
        /** @type {?} */
        var mappingArray = mapping.split('.');
        /** @type {?} */
        var value = mappingArray.reduce((/**
         * @param {?} accumulator
         * @param {?} currentValue
         * @return {?}
         */
        function (accumulator, currentValue) {
            return accumulator ? accumulator[currentValue] : null;
        }), uiState);
        if (value instanceof Date) {
            return format(value, 'yyyy-MM-dd HH:mm:ss');
        }
        return value;
    };
    /**
     * 获取根组件上的UIState
     */
    /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    BefVariableManager.prototype.getRootUIState = /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();
        if (this.injector) {
            /** @type {?} */
            var frameContext = this.injector.get(FrameContext, null);
            if (frameContext) {
                /** @type {?} */
                var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
                rootFrameContext = virtualRootFrameContext || rootFrameContext;
            }
        }
        if (!rootFrameContext) {
            return;
        }
        return rootFrameContext.uiState;
    };
    /**
     * 值比较
     * @todo 临时采用这种方式
     */
    /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    BefVariableManager.prototype.isValueEqual = /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    function (srcValue, dstValue) {
        return JSON.stringify(srcValue) === JSON.stringify(dstValue);
    };
    /**
     * Check if the object is a plain object
     */
    /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    BefVariableManager.prototype.isUdtVariable = /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj && obj.constructor &&
            obj.toString() === '[object Object]' &&
            obj.constructor.prototype.hasOwnProperty('isPrototypeOf');
    };
    /**
     * 设置值到UIState
     * @todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     */
    /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    BefVariableManager.prototype.setValueToUIState = /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    function (mapping, value) {
        /** @type {?} */
        var uiState = this.getRootUIState();
        uiState[mapping] = value;
    };
    /** @nocollapse */
    BefVariableManager.ctorParameters = function () { return [
        { type: AppContext },
        { type: undefined },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return BefVariableManager;
}());
if (false) {
    /**
     * 变量元数据
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariableMap;
    /**
     * 设置值
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.innerValueMap;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.appContext;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariables;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.injector;
}
export { BefVariableManager };
//# sourceMappingURL=data:application/json;base64,