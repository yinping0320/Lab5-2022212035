/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_combo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Repository } from '@farris/devkit';
import { HttpHeaders } from '@angular/common/http';
var DefaultComboHttpService = /** @class */ (function () {
    function DefaultComboHttpService(repository) {
        this.befRest = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    DefaultComboHttpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    function (url, params, method) {
        if (params === void 0) { params = {}; }
        if (method === void 0) { method = 'GET'; }
        /** @type {?} */
        var headers = new HttpHeaders({ 'content-type': 'application/json' })
        // return this.befRest.restService.invoke(url, method, params, { headers });
        ;
        // return this.befRest.restService.invoke(url, method, params, { headers });
        if (method.toLowerCase() !== 'get') {
            return this.befRest.restService.invoke(url, method, null, { headers: headers, body: params });
        }
        else {
            return this.befRest.restService.invoke(url, method, params, { headers: headers });
        }
    };
    DefaultComboHttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DefaultComboHttpService.ctorParameters = function () { return [
        { type: Repository }
    ]; };
    return DefaultComboHttpService;
}());
export { DefaultComboHttpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultComboHttpService.prototype.befRest;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2NvbWJvLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2JlZi8iLCJzb3VyY2VzIjpbImxpYi9iZWZfY29tYm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRDtJQUlFLGlDQUFZLFVBQTJCO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQUEsVUFBVSxFQUFzQixDQUFDO0lBQ2xELENBQUM7Ozs7Ozs7SUFDRCx5Q0FBTzs7Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsTUFBVyxFQUFFLE1BQWM7UUFBM0IsdUJBQUEsRUFBQSxXQUFXO1FBQUUsdUJBQUEsRUFBQSxjQUFjOztZQUN4QyxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztRQUN2RSw0RUFBNEU7O1FBQTVFLDRFQUE0RTtRQUM1RSxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxLQUFLLEVBQUU7WUFDbEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxPQUFPLFNBQUEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUN0RjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDLENBQUM7U0FDMUU7SUFDSCxDQUFDOztnQkFmRixVQUFVOzs7O2dCQUpGLFVBQVU7O0lBb0JuQiw4QkFBQztDQUFBLEFBaEJELElBZ0JDO1NBZlksdUJBQXVCOzs7Ozs7SUFDbEMsMENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENvbWJvSHR0cFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxpc3QnO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnLi9iZWZfcmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdENvbWJvSHR0cFNlcnZpY2UgaW1wbGVtZW50cyBDb21ib0h0dHBTZXJ2aWNlIHtcclxuICBwcml2YXRlIGJlZlJlc3Q6IEJlZlJlcG9zaXRvcnk8YW55PjtcclxuXHJcbiAgY29uc3RydWN0b3IocmVwb3NpdG9yeTogUmVwb3NpdG9yeTxhbnk+KSB7XHJcbiAgICB0aGlzLmJlZlJlc3QgPSByZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICB9XHJcbiAgZ2V0RGF0YSh1cmw6IHN0cmluZywgcGFyYW1zID0ge30sIG1ldGhvZCA9ICdHRVQnKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pXHJcbiAgICAvLyByZXR1cm4gdGhpcy5iZWZSZXN0LnJlc3RTZXJ2aWNlLmludm9rZSh1cmwsIG1ldGhvZCwgcGFyYW1zLCB7IGhlYWRlcnMgfSk7XHJcbiAgICBpZiAobWV0aG9kLnRvTG93ZXJDYXNlKCkgIT09ICdnZXQnKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmJlZlJlc3QucmVzdFNlcnZpY2UuaW52b2tlKHVybCwgbWV0aG9kLCBudWxsLCB7IGhlYWRlcnMsIGJvZHk6IHBhcmFtcyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmJlZlJlc3QucmVzdFNlcnZpY2UuaW52b2tlKHVybCwgbWV0aG9kLCBwYXJhbXMsIHsgaGVhZGVycyB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19