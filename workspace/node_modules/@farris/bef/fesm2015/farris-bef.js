import { SessionService } from '@ecp-caf/caf-common';
import { format } from 'date-fns';
import { LoadingService } from '@farris/ui-loading';
import { of, zip, throwError, EMPTY } from 'rxjs';
import { tap, map, switchMap, catchError } from 'rxjs/operators';
import { map as map$1 } from 'rxjs/operators/map';
import { InjectionToken, Injectable, Optional, Injector, InjectFlags, Inject } from '@angular/core';
import { HttpHeaders, HttpParams, HttpClient } from '@angular/common/http';
import { FieldMetadataUtil, ModifyType, EntityCollection, AppContext, makePropDecorator, Repository, EntityManager, FrameContext, BindingPropertyType, PropertyUtil, BindingPathConverter, EventBus, DataChangeType, DataTypeInfoUtil, ViewModel, ExpressionUtil, BackEndMessage, BACK_END_MESSAGE_HANDLER_TOKEN, NAMESPACE, MetadataUtil, encodeUrl, DataTypeInfo, EntityTypeFactory } from '@farris/devkit';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-19 15:36:48
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-07-30 17:37:02
 */
/**
 * --------------------------------------------------------------------------------
 * 变更集相关类型
 * --------------------------------------------------------------------------------
 */
/**
 * 变更类型
 */
class ChangeDetailType {
}
/**
 * 新增
 */
ChangeDetailType.Added = 'Added';
/**
 * 修改
 */
ChangeDetailType.Modify = 'Modify';
/**
 * 删除
 */
ChangeDetailType.Deleted = 'Deleted';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/tokens.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BE_SERVER_URI_TOKEN = new InjectionToken('@farris/be BE_SERVER_URL');
/**
 * 1、因为bef里，很多类都没有注入，BefSessionHandlingStragegy无法直接注入；
 * 2、通过一个字符串Token来间接做策略选择。
 * @type {?}
 */
const BE_SESSION_HANDLING_STRATEGY_TOKEN = new InjectionToken('@farris/be BE_SESSION_HANDLING_STRATEGY_TOKEN');

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityUtil {
    /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    static getPropInfo(entityType, targetPropName) {
        /** @type {?} */
        let propType;
        /** @type {?} */
        let propEntityType;
        /** @type {?} */
        let propMetadata;
        // NgField
        /** @type {?} */
        const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgField';
                propEntityType = null;
                propMetadata = ngFieldProperties[propName];
            }
        }));
        // NgObject
        /** @type {?} */
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgObject';
                propEntityType = ngObjectProperties[propName].type;
                propMetadata = ngObjectProperties[propName];
            }
        }));
        // NgList
        /** @type {?} */
        const ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgList';
                propEntityType = ngListProperties[propName].type;
                propMetadata = ngListProperties[propName];
            }
        }));
        /** @type {?} */
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgDynamic';
                propEntityType = ngDynamicProperties[propName].type;
                propMetadata = ngDynamicProperties[propName];
            }
        }));
        return { propType, propEntityType, propMetadata };
    }
    /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    static getPrimaryKey(entityType) {
        /** @type {?} */
        const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
        if (primaryNgFiledProp) {
            return primaryNgFiledProp.dataField;
        }
        else {
            return '';
        }
    }
    /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    static isObjectProp(entityType, targetPropName) {
        /** @type {?} */
        let isObjectProp = false;
        /** @type {?} */
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                isObjectProp = true;
            }
        }));
        return isObjectProp;
    }
    /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    static isDynamicProp(entityType, targetPropName) {
        /** @type {?} */
        let isDynamicProp = false;
        /** @type {?} */
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                isDynamicProp = true;
            }
        }));
        return isDynamicProp;
    }
    /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    static appendInitialData(entity, initialData) {
        /** @type {?} */
        const data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BEF变更集构造器
 */
class BefChangeBuilder {
    /**
     * 构造函数
     * @param {?} entityType 实体类型
     * @param {?} entityCollection
     */
    constructor(entityType, entityCollection) {
        this.entityType = entityType;
        this.entityCollection = entityCollection;
    }
    /**
     * 构造Bef变更集
     * @param {?} modifications
     * @return {?}
     */
    build(modifications) {
        // 重置changeDetail
        this.changeDetail = {
            ChangeType: ChangeDetailType.Modify,
            ChangeInfo: {
                DataId: ''
            }
        };
        modifications.forEach((/**
         * @param {?} modification
         * @return {?}
         */
        modification => {
            this.buildChangeDetail(modification);
        }));
        return this.changeDetail;
    }
    /**
     * 构造Bef变更详情
     * @param {?} modification
     * @return {?}
     */
    buildChangeDetail(modification) {
        /** @type {?} */
        const paths = modification.path.concat();
        // 设置根节点DataId
        if (!this.changeDetail.ChangeInfo.DataId) {
            this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];
        }
        /** @type {?} */
        let parentChangeDetail = this.changeDetail;
        /** @type {?} */
        let parentEntityType = this.entityType;
        for (let i = 1; i < paths.length && parentChangeDetail; i = i + 2) {
            /** @type {?} */
            const parentChangeInfo = this.getChangeInfo(parentChangeDetail);
            /** @type {?} */
            const propName = paths[i];
            const { propType, propEntityType, propMetadata } = EntityUtil.getPropInfo(parentEntityType, propName);
            /** @type {?} */
            const dataField = propMetadata.dataField || propName;
            if (propType === 'NgField') {
                // 不支持主键变更，忽略
                /** @type {?} */
                const primaryKey = EntityUtil.getPrimaryKey(parentEntityType);
                if (propName === primaryKey) {
                    continue;
                }
                if (modification.type !== ModifyType.ValueChange) {
                    throw Error('简单类型的属性上不支持ValueChange类型之外的变更');
                }
                // NgField类型：说明是最后一级
                parentChangeInfo[dataField] = modification.value;
                parentChangeDetail = null;
            }
            else if (propType === 'NgObject') {
                // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。
                /** @type {?} */
                const childId = paths[i + 1].split(':')[1];
                /** @type {?} */
                const childIdName = paths[i + 1].split(':')[0];
                if (childIdName) {
                    // 有主键（关联对象）：是一个普通的对象
                    /** @type {?} */
                    let changeObject = parentChangeInfo[dataField];
                    // 获取数据
                    /** @type {?} */
                    const entityPath = paths.slice(0, i + 1);
                    /** @type {?} */
                    const changedEntity = this.entityCollection.getEntityByPath(entityPath);
                    changeObject = changedEntity ? changedEntity.toJSON(true) : {};
                    parentChangeInfo[dataField] = changeObject;
                    parentChangeDetail = null;
                    parentEntityType = null;
                }
                else {
                    // 没有主键（值对象）：是一个完整的ChangeDetail
                    /** @type {?} */
                    let changeDetail = (/** @type {?} */ (parentChangeInfo[dataField]));
                    if (!changeDetail) {
                        changeDetail = {
                            ChangeType: ChangeDetailType.Modify,
                            ChangeInfo: {}
                        };
                    }
                    parentChangeInfo[dataField] = changeDetail;
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                }
            }
            else if (propType === 'NgList') {
                // 如果不存在则创建一个空数组
                if (!parentChangeDetail.ChangeInfo[dataField]) {
                    parentChangeDetail.ChangeInfo[dataField] = [];
                }
                /** @type {?} */
                const changeDetails = (/** @type {?} */ (parentChangeDetail.ChangeInfo[dataField]));
                // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：
                // 1、不存在：创建一个Modify类型的ChangeDetail；
                // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；
                // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。
                if (i !== paths.length - 1) {
                    // 遍历检查变更是否已经存在
                    /** @type {?} */
                    const dataId = paths[i + 1].split(':')[1];
                    /** @type {?} */
                    let changeDetail = changeDetails.find((/**
                     * @param {?} changeDetailItem
                     * @return {?}
                     */
                    changeDetailItem => {
                        return changeDetailItem.ChangeInfo.DataId === dataId;
                    }));
                    // 如果不存在，则创建并添加
                    if (!changeDetail) {
                        changeDetail = this.createEmptyChangeDetail(ChangeDetailType.Modify, dataId);
                        changeDetails.push(changeDetail);
                    }
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                    continue;
                }
                // 如果是叶子节点，则肯定是新增或者删除变更。
                if (modification.type === ModifyType.Add || modification.type === ModifyType.Insert) ;
                else if (modification.type === ModifyType.Remove) ;
                // 重置
                parentChangeDetail = null;
                parentEntityType = null;
            }
            else if (propType === 'NgDynamic') {
                // 获取数据
                /** @type {?} */
                const entityPath = paths.slice(0, i + 1);
                /** @type {?} */
                const changedEntity = this.entityCollection.getEntityByPath(entityPath);
                parentChangeInfo[dataField] = {
                    ChangeType: ChangeDetailType.Modify,
                    ChangeInfo: changedEntity ? changedEntity.toJSON(true) : {}
                };
                parentChangeDetail = null;
                parentEntityType = null;
            }
        }
    }
    /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * \@todo：为这两种节点封装ChangeNode基类来解决这个差异。
     * @private
     * @param {?} changeDetail
     * @return {?}
     */
    getChangeInfo(changeDetail) {
        // @todo：可能存在同名属性
        if (changeDetail.hasOwnProperty('ChangeInfo')) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    }
    /**
     * 创建ChangeDetail
     * @private
     * @param {?} type BEF变更类型
     * @param {?} dataId 数据内码
     * @return {?}
     */
    createEmptyChangeDetail(type, dataId) {
        /** @type {?} */
        const changeDetail = {
            ChangeType: type,
            ChangeInfo: {
                DataId: dataId
            }
        };
        return changeDetail;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 处理服务器端变更
 */
class BefChangeHandler {
    /**
     * 构造函数
     */
    constructor() {
    }
    /**
     * 处理Bef变更集
     * @param {?} entityType
     * @param {?} entityCollection
     * @param {?} changeDetails
     * @return {?}
     */
    handle(entityType, entityCollection, changeDetails) {
        this.handleChangeDetails(entityType, entityCollection, changeDetails);
    }
    /**
     * 处理Bef变更集（批量）
     * @param {?} entityType
     * @param {?} entityList
     * @param {?} changeDetails
     * @return {?}
     */
    handleChangeDetails(entityType, entityList, changeDetails) {
        if (!changeDetails) {
            return;
        }
        changeDetails.forEach((/**
         * @param {?} changeDetail
         * @return {?}
         */
        (changeDetail) => {
            /** @type {?} */
            const id = (/** @type {?} */ ((changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId)));
            /** @type {?} */
            const entity = this.getEntityById(entityList, id);
            if (!entity) {
                return;
            }
            this.handleChangeDetail(entityType, entity, changeDetail);
        }));
    }
    /**
     * 处理Bef变更集（单条）
     * @param {?} entityType
     * @param {?} entity
     * @param {?} changeDetail
     * @return {?}
     */
    handleChangeDetail(entityType, entity, changeDetail) {
        if (!changeDetail || !entity) {
            return;
        }
        // 只处理值变更，其他变更待进一步验证。
        if (changeDetail.ChangeType !== ChangeDetailType.Modify) {
            return;
        }
        /** @type {?} */
        const changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            const { propType, propEntityType } = EntityUtil.getPropInfo(entityType, propName);
            if (propType === 'NgField') {
                // 简单属性：更新值
                entity[propName] = changeInfo[propName];
            }
            else if (propType === 'NgObject') {
                /** @type {?} */
                const childEntity = (/** @type {?} */ (entity[propName]));
                if (childEntity.primaryKey) {
                    // 关联对象：重新加载数据
                    /** @type {?} */
                    const childEntityData = changeInfo[propName];
                    childEntity.load(childEntityData);
                }
                else {
                    // 值对象：递归处理变更
                    /** @type {?} */
                    const childChangeDetail = (/** @type {?} */ (changeInfo[propName]));
                    this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);
                }
            }
            else if (propType === 'NgList') {
                // 子列表：递归处理变更集合
                /** @type {?} */
                const childEntityList = (/** @type {?} */ (entity[propName]));
                /** @type {?} */
                const childChangeDetails = (/** @type {?} */ (changeInfo[propName]));
                this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);
            }
        }));
    }
    /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     * @private
     * @param {?} entityList
     * @param {?} id
     * @return {?}
     */
    getEntityById(entityList, id) {
        /** @type {?} */
        let target;
        if (entityList instanceof EntityCollection) {
            target = entityList.getEntityById(id);
        }
        else {
            target = entityList.get(id);
        }
        return target ? target : null;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/framework_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FrameworkSessionService {
    /**
     * @param {?} sessionService
     */
    constructor(sessionService) {
        this.sessionService = sessionService;
    }
    /**
     * 获取用户SessionId
     * @return {?}
     */
    getUserSessionId() {
        return this.sessionService.getUserSessionId();
    }
    /**
     * 获取当前功能菜单的SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    getCurrentSessionId(runtimeContext) {
        /** @type {?} */
        let sessionId;
        /** @type {?} */
        const rsi = this.getRuntimeSessionId();
        if (rsi) {
            return rsi;
        }
        if (this.sessionService) {
            if (runtimeContext && runtimeContext.hasOwnProperty('tabId')) {
                /** @type {?} */
                const tabId = runtimeContext.tabId;
                sessionId = this.sessionService.getCurrentSeesionId(tabId);
            }
            else {
                sessionId = this.sessionService.getCurrentSeesionId();
            }
        }
        if (!sessionId) {
            sessionId = this.getUserSessionId();
        }
        return sessionId;
    }
    /**
     * @private
     * @return {?}
     */
    getRuntimeSessionId() {
        /** @type {?} */
        const hash = window.location.hash;
        /** @type {?} */
        const params = this.parse(hash);
        return params && params.rsi || null;
    }
    /**
     * @param {?} queryString
     * @return {?}
     */
    parse(queryString) {
        if (!queryString) {
            return {};
        }
        /** @type {?} */
        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce((/**
         * @param {?} params
         * @param {?} hash
         * @return {?}
         */
        (params, hash) => {
            /** @type {?} */
            const split = hash.indexOf('=');
            /** @type {?} */
            const key = hash.slice(0, split);
            /** @type {?} */
            const val = hash.slice(split + 1);
            return Object.assign(params, { [key]: decodeURIComponent(val) });
        }), {});
    }
}
FrameworkSessionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameworkSessionService.ctorParameters = () => [
    { type: SessionService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_storage_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 基于浏览器SessionStorage的BeSession缓存
 * \@summary
 * 1、SeparatedSession模式下：
 *  {
 *    BE_SESSION_ID: {
 *      frmSessionId1_beSessionUri1: beSessionId-1,
 *      frmSessionId2_beSessionUri2: beSessionId-2,
 *    }
 *  }
 * 2、UnifiedSession模式下（在Debug状态，同模式1）：
 * {
 *    BE_SESSION_ID: {
 *      frmSessionId1: beSessionId-1,
 *      frmSessionId2: beSessionId-2,
 *    }
 *  }
 */
class SessionStorageBeSessionStorageStrategy {
    constructor() {
        /**
         * 缓存Token
         */
        this.sessionStorageKey = 'BE_SESSION_ID';
    }
    /**
     * 获取值
     * @param {?} beSessionKey
     * @return {?}
     */
    getItem(beSessionKey) {
        /** @type {?} */
        const beSessions = this.getAllBeSessions();
        return beSessions[beSessionKey];
    }
    /**
     * 设置值
     * @param {?} beSessionKey
     * @param {?} beSessionId
     * @return {?}
     */
    setItem(beSessionKey, beSessionId) {
        /** @type {?} */
        const beSessions = this.getAllBeSessions();
        beSessions[beSessionKey] = beSessionId;
        this.setAllBeSessions(beSessions);
    }
    /**
     * 删除值
     * @param {?} beSessionKey
     * @return {?}
     */
    removeItem(beSessionKey) {
        /** @type {?} */
        const beSessions = this.getAllBeSessions();
        if (beSessions[beSessionKey]) {
            delete beSessions[beSessionKey];
        }
        this.setAllBeSessions(beSessions);
    }
    /**
     * 清空同一个父Session下所有的缓存
     * \@summary
     * 框架内：清空功能菜单token下的所有BeSession缓存；
     * 框架外：只清空当前beSessionUri的，框架外，用的是用户Sessionid，无法统一清理。
     * @param {?} frmSessionId
     * @param {?} beSessionUri
     * @return {?}
     */
    clear(frmSessionId, beSessionUri) {
        /** @type {?} */
        const isInFramework = this.isInFramework();
        if (isInFramework === true) {
            this.removeItemsByFrmSessionId(frmSessionId);
        }
        else {
            this.removeItem(beSessionUri);
        }
    }
    /**
     * 清空frmSessionId对应的所有子BeSessionId
     * @private
     * @param {?} frmSessionId
     * @return {?}
     */
    removeItemsByFrmSessionId(frmSessionId) {
        /** @type {?} */
        const beSessions = this.getAllBeSessions();
        Object.keys(beSessions).forEach((/**
         * @param {?} beSessionKey
         * @return {?}
         */
        (beSessionKey) => {
            if (beSessionKey.startsWith(frmSessionId) === true) {
                delete beSessions[beSessionKey];
            }
        }));
        this.setAllBeSessions(beSessions);
    }
    /**
     * 从SessionStorage中获取全部BeSessions
     * @private
     * @return {?}
     */
    getAllBeSessions() {
        /** @type {?} */
        const beSessionsJson = window.sessionStorage.getItem(this.sessionStorageKey);
        if (!beSessionsJson) {
            return {};
        }
        return JSON.parse(beSessionsJson);
    }
    /**
     * 设置全部BeSessions到SessionStorage
     * @param {?} beSessions
     * @return {?}
     */
    setAllBeSessions(beSessions) {
        /** @type {?} */
        const beSessionsString = JSON.stringify(beSessions);
        window.sessionStorage.setItem(this.sessionStorageKey, beSessionsString);
    }
    /**
     * 是否在框架内
     * @private
     * @return {?}
     */
    isInFramework() {
        /** @type {?} */
        const hashString = window.location.hash;
        if (!hashString) {
            return false;
        }
        // todo: 不能直接依赖url中的参数，运行框架已经提供相关的获取参数的方法，应该通过运行框架服务获取
        return hashString.indexOf('tabId=') !== -1;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/http_header.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HttpHeaderUtil {
    /**
     * PlainObject => HttpHeaders
     * @param {?} headers
     * @return {?}
     */
    static convertToHeaders(headers) {
        if (!headers) {
            headers = new HttpHeaders();
        }
        // 已经是HttpHeaders，直接返回
        /** @type {?} */
        const isHttpHeaders = headers instanceof HttpHeaders;
        if (isHttpHeaders === true) {
            return headers;
        }
        if (Object.keys(headers).length > 0) {
            /** @type {?} */
            let httpHeaders = new HttpHeaders();
            Object.keys(headers).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                httpHeaders = httpHeaders.append(prop, headers[prop]);
            }));
            headers = httpHeaders;
        }
        else {
            headers = new HttpHeaders();
        }
        return headers;
    }
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param {?} headers HttpHeaders对象
     * @param {?} sessionId
     * @return {?}
     */
    static appendSessionId(headers, sessionId) {
        return headers.append('SessionId', sessionId);
    }
    /**
     * 追加CommonVariable头
     * @param {?} headers HttpHeaders对象
     * @param {?} commonVariable
     * @return {?}
     */
    static appendCafRuntimeCommonVariable(headers, commonVariable) {
        return headers.append('X-CAF-Runtime-CommonVariable', commonVariable);
    }
    /**
     * 追加X-CAF-Runtime-Context头
     * @param {?} headers HttpHeaders对象
     * @param {?} context 等价于BeSessionId
     * @return {?}
     */
    static appendCafRuntimeContext(headers, context) {
        return headers.append('X-CAF-Runtime-Context', context);
    }
    /**
     * 追加Content-Type头
     * @param {?} headers HttpHeaders对象
     * @param {?=} contentType
     * @return {?}
     */
    static appendContextType(headers, contentType) {
        contentType = contentType ? contentType : 'application/json';
        return headers.append('Content-Type', contentType);
    }
    /**
     * @param {?} headers
     * @param {?=} requireMessage
     * @return {?}
     */
    static appendRequireMessage(headers, requireMessage = true) {
        return headers.append('Bff-Require-Message', requireMessage.toString());
    }
    /**
     * 组合表单复用，表单实例id
     * @param {?} headers headers
     * @param {?} funcInstId 表单实例id
     * @return {?}
     */
    static appendFuncInstId(headers, funcInstId) {
        return headers.append('Func-Inst-Id', funcInstId);
    }
    /**
     * http headers to json
     * @param {?} headers headers
     * @return {?}
     */
    static toJson(headers) {
        if (!(headers instanceof HttpHeaders)) {
            return null;
        }
        /** @type {?} */
        const result = {};
        headers.keys().forEach((/**
         * @param {?} header
         * @return {?}
         */
        header => {
            /** @type {?} */
            const values = headers.getAll(header);
            if (values.length > 1) {
                result[header] = values;
            }
            else {
                result[header] = values[0] || '';
            }
        }));
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/http_param.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * HttpParams工具类
 */
class HttpParamUtil {
    /**
     * 将PlainObject=>HttpParams
     * @param {?} params
     * @return {?}
     */
    static buildParams(params) {
        /** @type {?} */
        let httpParams = new HttpParams();
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                /** @type {?} */
                const value = params[key].toString();
                httpParams = httpParams.append(key, value);
            }
        }
        return httpParams;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/request_info.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RequestInfoUtil {
    /**
     * 检查是否有requestInfo
     * @param {?} options
     * @return {?}
     */
    static hasRequestInfo(options) {
        if (!options || !options.body) {
            return false;
        }
        /** @type {?} */
        const body = options.body;
        // 有多个参数的时候
        if (body.requestInfo && body.requestInfo.dataChange) {
            return true;
        }
        if (body.dataChange) {
            return true;
        }
        return false;
    }
    /**
     * 检查是否有RquestInfo
     * \@summary
     * 产品部依赖了请求时传递RequestInfo，返回时直接取到returnValue的特性。
     * @param {?} options
     * @return {?}
     */
    static hasRequestInfoWithR(options) {
        if (!options || !options.body) {
            return false;
        }
        /** @type {?} */
        const body = options.body;
        // 有多个参数的时候
        if (body.RequestInfo && body.RequestInfo.dataChange) {
            return true;
        }
        if (body.dataChange) {
            return true;
        }
        return false;
    }
    /**
     * 构造RequestInfo
     * @param {?} repository
     * @return {?}
     */
    static buildRequestInfo(repository) {
        /** @type {?} */
        const requestInfo = {
            dataChange: repository.entityManager.buildAllEntityChangeDetails(),
            variableChange: repository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    }
    /**
     * 构造带requestInfo的body（仅适用于body中有多个参数的情况）
     * \@summary
     * 一个参数时body=requestInfo，不适用该方法。
     * @param {?} body
     * @param {?} repository
     * @return {?}
     */
    static buildBodyWithRequestInfo(body, repository) {
        if (body.RequestInfo || body.requestInfo) {
            return body;
        }
        /** @type {?} */
        const requestInfo = this.buildRequestInfo(repository);
        /** @type {?} */
        const bodyWithRequestInfo = Object.assign({}, body, { requestInfo: requestInfo });
        return bodyWithRequestInfo;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    static getRequestInfo(options) {
        if (!options || !options.body) {
            return null;
        }
        /** @type {?} */
        const body = options.body;
        // 有多个参数的时候
        if (body.requestInfo) {
            return body.requestInfo;
        }
        if (body.dataChange || body.variableChange) {
            return body;
        }
        return null;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/response_info.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ResponseInfoUtil {
    /**
     * 将ResponseInfo转换为老接口的数据返回格式
     * @param {?} result
     * @return {?}
     */
    static unWrapResponseInfo(result) {
        // 兼容cancel没有返回值的情况
        if (!result) {
            return result;
        }
        // 没有returnValue的情况下，兼容query取数的的格式
        if (result.hasOwnProperty('returnValue') === false) {
            if (result.hasOwnProperty('result') && result.hasOwnProperty('pagination')) {
                // 兼容返回带分页的列表数据
                return result.result;
            }
            return result;
        }
        // 其他：返回RequestInfo.returnValue的情况
        /** @type {?} */
        const returnValue = result.returnValue;
        if (returnValue && returnValue.hasOwnProperty('result') && returnValue.hasOwnProperty('pagination')) {
            // 兼容返回带分页的列表数据
            return returnValue.result;
        }
        return result.returnValue;
    }
    /**
     * @param {?} response
     * @return {?}
     */
    static isReported401Error(response) {
        return response.status === 401;
    }
    /**
     * 解析后端消息
     * @param {?} result result
     * @return {?}
     */
    static parseBackEndMessage(result) {
        if (result && result.message && Array.isArray(result.message) && result.message.length > 0) {
            return result.message;
        }
        return null;
    }
    /**
     * 解析后端错误消息
     * @param {?} e
     * @return {?}
     */
    static parseBackEndError(e) {
        /** @type {?} */
        const error = e && e.error;
        if (error && error.hasOwnProperty('extensionMessage') && error.extensionMessage && error.extensionMessage.hasOwnProperty('UIMsg') && error.extensionMessage.UIMsg && error.extensionMessage.UIMsg.length > 0) {
            return JSON.parse(error.extensionMessage.UIMsg);
        }
        return null;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/http_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable: no-string-literal disable: max-line-length
class HttpService {
    /**
     * @param {?} defaultHttpClient
     */
    constructor(defaultHttpClient) {
        this.defaultHttpClient = defaultHttpClient;
        this.httpClient = defaultHttpClient;
        this.rtf = this.getService();
    }
    /**
     * 遍历获取rtf服务
     * @private
     * @return {?}
     */
    getService() {
        /** @type {?} */
        let env = window;
        while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {
            env = window.parent;
        }
        return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};
    }
    /**
     * 是否同源
     * @private
     * @param {?} environment window
     * @return {?}
     */
    isSameOrigin(environment) {
        /** @type {?} */
        const host = window.location.host;
        try {
            if (environment && environment.location && typeof environment.location.host !== 'undefined') {
                return environment.location.host === host;
            }
        }
        catch (e) {
            return false;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    get params() {
        if (this.rtf && this.rtf.hasOwnProperty('session') && typeof this.rtf['session']['getCommonVariable'] === 'function') {
            return this.rtf['session']['getCommonVariable']();
        }
        return null;
    }
    /**
     * 获取运行框架http服务
     * @return {?}
     */
    get httpService() {
        if (this.rtf && this.rtf.hasOwnProperty('http') && typeof this.rtf['http']['request'] === 'function') {
            return this.rtf.http;
        }
        return null;
    }
    /**
     * @param {?} method
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    request(method, url, options = {}) {
        // todo: 使用运行框架的httpclient导致帮助无法显示数据，暂时撤回
        // if (this.httpService && this.params && this.params.tabId) {
        //   return this.httpService.request$(method, url, options);
        // } else {
        //   return this.defaultHttpClient.request(method, url, options);
        // }
        return this.defaultHttpClient.request(method, url, options);
    }
}
HttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefSession处理策略类
 * @abstract
 */
class BefSessionHandlingStrategy {
    /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getFrmSessionId(runtimeContext) {
        return this.frmSessionService.getCurrentSessionId(runtimeContext);
    }
    /**
     * @protected
     * @return {?}
     */
    get frmSessionId() {
        return this.frmSessionService.getCurrentSessionId();
    }
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     */
    constructor(storageStrategy, frmSessionService) {
        this.storageStrategy = storageStrategy;
        this.frmSessionService = frmSessionService;
    }
    /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    getFrameworkSessionId(runtimeContext) {
        return this.getFrmSessionId(runtimeContext);
    }
    /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getSessionIdFromStorage(runtimeContext) {
        /** @type {?} */
        const sessionStorageKey = this.getSessionStorageKey(runtimeContext);
        /** @type {?} */
        const beSessionId = this.storageStrategy.getItem(sessionStorageKey);
        return beSessionId;
    }
}
/**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
class BefSeparatedSessionHandlingStrategy extends BefSessionHandlingStrategy {
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     * @param {?} httpClient
     * @param {?} beBaseUri
     * @param {?} injector
     */
    constructor(storageStrategy, frmSessionService, httpClient, beBaseUri, injector) {
        super(storageStrategy, frmSessionService);
        this.beSessionUri = beBaseUri;
        this.httpClient = httpClient;
        this.httpService = new HttpService(this.httpClient);
        this.injector = injector;
    }
    /**
     * 获取BeSessionId
     * @return {?}
     */
    getSessionId() {
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            return of(beSessionId);
        }
        return this.createSession();
    }
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    setSessionId(sessionId) {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    }
    /**
     * 清空Sessionid
     * @return {?}
     */
    clearSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        // this.storageStrategy.removeItem(sessionKey);
        this.storageStrategy.clear(this.frmSessionId, sessionKey);
    }
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    extendRequestHeaders(headers, runtimeContext) {
        /** @type {?} */
        const frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage(runtimeContext);
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);
        }
        // const appContext = this.injector.get<AppContext>(AppContext, null);
        //if (appContext) {
        // const appId = appContext.ApplicationId;
        headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);
        // }
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        return headers;
    }
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    handleReponseHeaders(headers) {
    }
    /**
     * 创建BeSessionId
     * @return {?}
     */
    createSession() {
        /** @type {?} */
        const params = {
            responseType: 'text'
        };
        if (!!this.frmSessionId) {
            /** @type {?} */
            const appContext = this.injector.get(AppContext, null);
            params.headers = new HttpHeaders({ SessionId: this.frmSessionId });
            params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);
            //if (appContext) {
            // const appId = appContext.ApplicationId;
            params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);
            //}
            params.headers = HttpHeaderUtil.toJson(params.headers);
        }
        return this.httpService.request('POST', this.beSessionUri, params).pipe(tap((/**
         * @param {?} beSessionId
         * @return {?}
         */
        (beSessionId) => {
            this.setSessionId(beSessionId);
        })));
    }
    /**
     * @return {?}
     */
    extendHttpHeader() {
    }
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getSessionStorageKey(runtimeContext) {
        /** @type {?} */
        let sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return `${sessionId}_${this.beSessionUri}`;
    }
}
class BefUnifiedSessionHandlingStrategy extends BefSessionHandlingStrategy {
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @param {?} injector
     */
    constructor(storageStrategy, frmSessionService, beBaseUri, injector) {
        super(storageStrategy, frmSessionService);
        this.beSessionUri = beBaseUri;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    getSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        const sessionId = this.storageStrategy.getItem(sessionKey);
        return of(sessionId);
        // return of(null);
    }
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    setSessionId(sessionId) {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    }
    /**
     * 清空Sessionid
     * @return {?}
     */
    clearSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.removeItem(sessionKey);
    }
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    extendRequestHeaders(headers, runtimeContext) {
        /** @type {?} */
        const frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage(runtimeContext);
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        /** @type {?} */
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            /** @type {?} */
            const token = appContext.Token;
            headers = HttpHeaderUtil.appendFuncInstId(headers, token);
        }
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    }
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    handleReponseHeaders(headers) {
    }
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getSessionStorageKey(runtimeContext) {
        // const isDebug = false;
        // if (isDebug) {
        //   return `${this.frmSessionId}_${this.beSessionUri}`;
        // } else {
        //   return this.frmSessionId;
        // }
        /** @type {?} */
        let sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return `${sessionId}_${this.beSessionUri}`;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy_factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BeSession处理策略工厂
 */
class BefSessionHandlingStrategyFactory {
    /**
     * 创建BeSession处理策略
     * @param {?} handlingStrategyName
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @param {?} httpClient
     * @param {?} injector
     * @return {?}
     */
    create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector) {
        /** @type {?} */
        const storageStrategy = this.createStorageStrategy();
        /** @type {?} */
        const beSessionUri = this.createBeSessionUri(beBaseUri);
        if (handlingStrategyName === 'UnifiedSession') {
            return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beSessionUri, injector);
        }
        else {
            return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beSessionUri, injector);
        }
    }
    /**
     * 创建BeSession缓存策略
     * @private
     * @return {?}
     */
    createStorageStrategy() {
        return new SessionStorageBeSessionStorageStrategy();
    }
    /**
     * 创建BeSession地址
     * @private
     * @param {?} beBaseUri
     * @return {?}
     */
    createBeSessionUri(beBaseUri) {
        return `${beBaseUri}/service/createsession`;
    }
}
BefSessionHandlingStrategyFactory.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BefSessionService {
    /**
     * 构造函数
     * \@summary
     * 产品部存在new BeSessionService()的场景，injector可能为空，必须要兼容。
     * @param {?} httpClient
     * @param {?} beBaseUri
     * @param {?} frmSessionService
     * @param {?=} injector
     */
    constructor(httpClient, beBaseUri, frmSessionService, injector) {
        this.beBaseUri = beBaseUri;
        this.injector = injector;
        this.handlingStrategy = this.createHandlingStrategy(injector, httpClient, frmSessionService, beBaseUri);
    }
    /**
     * 获取token
     * @return {?}
     */
    get token() {
        return this.handlingStrategy.getFrameworkSessionId();
    }
    /**
     * 获取BeSessionId
     * @return {?}
     */
    getBeSessionId() {
        return this.handlingStrategy.getSessionId();
    }
    /**
     * 设置sessionId
     * @param {?} sessionId sessionId
     * @return {?}
     */
    setBeSessionId(sessionId) {
        this.handlingStrategy.setSessionId(sessionId);
        this.setSessionId(sessionId);
    }
    /**
     * 清空BeSessionId
     * @return {?}
     */
    clearBeSessionId() {
        this.handlingStrategy.clearSessionId();
    }
    /**
     * 扩展请求header
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    extendRequestHeaders(headers, runtimeContext) {
        return this.handlingStrategy.extendRequestHeaders(headers, runtimeContext);
    }
    /**
     * 处理响应header
     * @param {?} headers
     * @return {?}
     */
    handleResponseHeaders(headers) {
        return this.handlingStrategy.handleReponseHeaders(headers);
    }
    /**
     * 创建BeSessionId
     * @deprecated
     * 不再提供封装，请自行调用EAPI上的createSession方法。
     * \@summary
     * 1、兼容产品部直接new BeSessionService()，并调用该方法的场景；
     * 2、此场景肯定是BefSeparatedSessionHandlingStrategy.
     * @return {?}
     */
    createBeSession() {
        /** @type {?} */
        const handlingStrategy = (/** @type {?} */ (this.handlingStrategy));
        return handlingStrategy.createSession();
    }
    /**
     * @private
     * @param {?} sessionId
     * @return {?}
     */
    setSessionId(sessionId) {
        /** @type {?} */
        const appContext = this.injector.get(AppContext, null, InjectFlags.Optional);
        if (appContext && sessionId) {
            appContext.params.set('sessionId', sessionId);
        }
    }
    /**
     * 创建BeSession处理策略
     * \@summary session处理策略
     *
     * 1、开发自己实例化BefSessionService，使用老的模式（分开创建session），判断的标准是有没有injector
     *
     * 2、老表单，使用老的模式（兼容老的模式，分开创建session），判断的标准是有`injector`，但`没有注入策略`
     *
     * 3、新表单，使用用户设置的模式（单表单：使用统一session，组合表单：使用分开的session）
     * @private
     * @param {?} injector
     * @param {?} httpClient
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @return {?}
     */
    createHandlingStrategy(injector, httpClient, frmSessionService, beBaseUri) {
        /** @type {?} */
        let handlingStrategyName;
        // 开发自己实例化的befSessionService
        if (!injector) {
            handlingStrategyName = 'SeparatedSession';
        }
        else {
            // bef 实例化
            handlingStrategyName = injector.get(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);
        }
        // 老表单，兼容老的模式，分开创建session
        if (!handlingStrategyName) {
            handlingStrategyName = 'SeparatedSession';
        }
        /** @type {?} */
        const handlingStrategyFactory = new BefSessionHandlingStrategyFactory();
        return handlingStrategyFactory.create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector);
    }
}
BefSessionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefSessionService.ctorParameters = () => [
    { type: HttpClient },
    { type: String },
    { type: FrameworkSessionService },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/decorators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量元数据名称
 * @type {?}
 */
const NG_VARIABLE = '@farris/bef NG_VARIABLE';
/**
 * NgVariable装饰工厂的工厂
 * @type {?}
 */
const NgVariable = makePropDecorator(NG_VARIABLE, (/**
 * @param {?} obj
 * @return {?}
 */
(obj) => obj));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/deprecated/deprecated_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 适配老的API，保持兼容
 * @abstract
 * @template T
 */
class DeprecatedBefRepository extends Repository {
    // #endregion
    /**
     * 构造函数
     */
    constructor() {
        super();
    }
    // #region 老的属性包装成get方法进行兼容
    /**
     * 取数服务
     * @return {?}
     */
    get restService() {
        return this.dataService.restService;
    }
    /**
     * 实体变更（前端）=> BE变更（后端）
     * @return {?}
     */
    get changeBuilder() {
        return this.entityManager.changeBuilder;
    }
    /**
     * BE变更（后端）=> 实体变更（前端）
     * @return {?}
     */
    get changeHandler() {
        return this.entityManager.changeHandler;
    }
    // #region 数据访问
    /**
     * 获取实体集合
     * @return {?}
     */
    getList() {
        return this.dataService.getList(null, null, null, null);
    }
    /**
     * 获取单个实体
     * @param {?} id 主实体id
     * @return {?}
     */
    getById(id) {
        return this.dataService.getById(id);
    }
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    updateById(id) {
        return this.dataService.updateById(id);
    }
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    create(defaultValue) {
        return this.dataService.create(defaultValue);
    }
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    append(defaultValue) {
        return this.dataService.append(defaultValue);
    }
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    appendByPath(fpath) {
        return this.dataService.appendByPath(fpath);
    }
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    removeById(id, ifSave) {
        return this.dataService.removeById(id, ifSave);
    }
    /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    removeByIds(ids, ifSave) {
        return this.dataService.removeByIds(ids, ifSave);
    }
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    removeByPath(fpath, id) {
        return this.dataService.removeByPath(fpath, id);
    }
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    updateChangesById(id) {
        return this.dataService.updateChangesById(id);
    }
    /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    updateChangesByPath(path, id) {
        throw new Error('Not Implement');
    }
    /**
     * 提交所有变更
     * @return {?}
     */
    updateAllChanges() {
        return this.dataService.updateAllChanges();
    }
    /**
     * 应用变更
     * @return {?}
     */
    applyChanges() {
        return this.dataService.applyChanges();
    }
    /**
     * 提交数据变更和变量变更，通过retrieve模拟
     * \@internal
     * @return {?}
     */
    updateDataAndVariableChanges() {
        /** @type {?} */
        const filterConditions = [];
        /** @type {?} */
        const sortConditions = [];
        /** @type {?} */
        const entityFilter = {
            FilterConditions: filterConditions,
            SortConditions: sortConditions,
            IsUsePagination: true,
            Pagination: {
                PageIndex: 1,
                PageSize: 1,
                PageCount: 0,
                TotalCount: 0
            }
        };
        /** @type {?} */
        const entityFilterJson = JSON.stringify(entityFilter);
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        // 没有变更时不再提交变更
        if (this.isEmptyRequestInfo(requestInfo)) {
            return of(null);
        }
        /** @type {?} */
        const url = `${this.restService.baseUri}/extension/query?entityFilter=${entityFilterJson}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = {
            body
        };
        return this.restService.invoke(url, 'PUT', null, options, false, true, true);
    }
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    applyChangesById(id) {
        return this.dataService.applyChangesById(id);
    }
    /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    cancelChanges(options) {
        return this.dataService.cancelChanges(options);
    }
    // #endregion
    // #region 数据变更集处理
    /**
     * 清空所有本地实体的变更集
     * @return {?}
     */
    clearAllEntityChanges() {
        return this.entityManager.clearAllEntityChanges();
    }
    /**
     * 获取数据变更
     * @return {?}
     */
    getDataChangeDetails() {
        return this.entityManager.buildAllEntityChangeDetails();
    }
    /**
     * 处理数据变更
     * @param {?} changeDetails
     * @return {?}
     */
    handleDataChangeDetails(changeDetails) {
        return this.entityManager.handleDataChangeDetails(changeDetails);
    }
    // #endregion
    // #region 变量变更集处理
    /**
     * 获取变量变更
     * @return {?}
     */
    getVariableChangeDetail() {
        return this.variableManager.buildChangeDetail();
    }
    /**
     * 处理变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    handleVariableChangeDetail(changeDetail) {
        this.variableManager.handleChangeDetail(changeDetail);
    }
    // #endregion
    /**
     * 变更集是否为空
     * @private
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    isEmptyRequestInfo(requestInfo) {
        if (!requestInfo) {
            return true;
        }
        if ((!requestInfo.dataChange || requestInfo.dataChange.length < 1) && (!requestInfo.variableChange || Object.keys(requestInfo.variableChange).length < 1)) {
            return true;
        }
        return false;
    }
}
DeprecatedBefRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DeprecatedBefRepository.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_entity_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 实体管理类：管理Entity和
 * \@todo
 * 1、实体管理应该放在Devkit中；
 * 2、目前只是简单代码拆分，待进一步明确职责。
 * @template T
 */
class BefEntityManager extends EntityManager {
    /**
     * 构造函数
     * @param {?} entityCollection
     */
    constructor(entityCollection) {
        super(entityCollection);
        this.changeBuilder = new BefChangeBuilder(this.entityCollection.entityType, this.entityCollection);
        this.changeHandler = new BefChangeHandler();
    }
    // #region 处理ChangeDetail相关
    /**
     * 获取数据变更
     * @return {?}
     */
    buildAllEntityChangeDetails() {
        /** @type {?} */
        const changeDetails = [];
        /** @type {?} */
        const entities = this.entityCollection.getAllEntities();
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        (entity) => {
            if (entity.changes.length === 0) {
                return;
            }
            /** @type {?} */
            const changeDetail = this.changeBuilder.build(entity.changes);
            // 防止空id的变更被提交
            // @todo：此处判断应该放到更底层，临时修复Bug。
            if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {
                changeDetails.push(changeDetail);
            }
        }));
        return changeDetails;
    }
    /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    buildEntityChangeDetailById(id) {
        /** @type {?} */
        const entity = this.entityCollection.getEntityById(id);
        if (entity.changes.length === 0) {
            return null;
        }
        /** @type {?} */
        const changeDetail = this.changeBuilder.build(entity.changes);
        return changeDetail;
    }
    /**
     * 应用数据变更
     * @param {?} changeDetails ChangeDetail数组
     * @return {?}
     */
    handleDataChangeDetails(changeDetails) {
        this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);
    }
    // #endregion
    /**
     * 清空所有实体
     * @return {?}
     */
    reset() {
        this.entityCollection.clear();
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变更集工具类
 */
class BefChangeUtil {
    /**
     * 创建空的ChangeDetail
     * @param {?} type   the type of change
     * @param {?=} dataId the identity of the entity whose properties's values have changed
     * @return {?}
     */
    static createEmpty(type, dataId) {
        /** @type {?} */
        const changeDetail = {
            ChangeType: type,
            ChangeInfo: {}
        };
        if (dataId) {
            changeDetail.ChangeInfo['DataId'] = dataId;
        }
        return changeDetail;
    }
    /**
     * Get changes from an ChangeDetail object or an plain object
     * @param {?} changeDetail 变更详情
     * @return {?}
     */
    static getChangeInfo(changeDetail) {
        /** @type {?} */
        const isChangeDetail = this.isChangeDetail(changeDetail);
        if (isChangeDetail === true) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    }
    /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     * @param {?} changeDetail
     * @return {?}
     */
    static isChangeDetail(changeDetail) {
        // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.
        /** @type {?} */
        const keys = Object.keys(changeDetail);
        return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_variable_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Be变量管理器
 */
class BefVariableManager {
    /**
     * 构造函数
     * @param {?} appContext
     * @param {?} ngVariables
     * @param {?} injector
     */
    constructor(appContext, ngVariables, injector) {
        this.appContext = appContext;
        this.ngVariables = ngVariables;
        this.injector = injector;
        this.ngVariableMap = new Map();
        this.innerValueMap = new Map();
        // 重新组织变量元数据
        Object.keys(ngVariables).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            this.ngVariableMap.set(propName, ngVariables[propName]);
        }));
    }
    /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    handleChangeDetail(changeDetail) {
        /** @type {?} */
        const changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} varName
         * @return {?}
         */
        (varName) => {
            // 变量元数据
            /** @type {?} */
            const ngVariable = this.ngVariableMap.get(varName);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            const mapping = ngVariable.mapping;
            // 更新UIState变更
            /** @type {?} */
            const newValue = changeInfo[varName];
            /** @type {?} */
            const oldValue = this.getValueFromUIState(mapping);
            if (oldValue === newValue) {
                return;
            }
            // 更新值
            this.setValueToUIState(mapping, newValue);
            this.innerValueMap.set(varName, newValue);
        }));
    }
    /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    buildChangeDetail() {
        /** @type {?} */
        const changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        (ngVariable, varName) => {
            /** @type {?} */
            const mapping = ngVariable.mapping;
            /** @type {?} */
            const newValue = this.getValueFromUIState(mapping);
            /** @type {?} */
            const oldValue = this.innerValueMap.get(varName);
            if (this.isValueEqual(newValue, oldValue) === false) {
                // 不清除变更，请求成功后清除变更
                // this.innerValueMap.set(varName, newValue);
                this.appendToChangeInfo(changeDetail, varName, newValue);
            }
        }));
        if (Object.keys(changeDetail.ChangeInfo).length === 0) {
            return null;
        }
        return changeDetail;
    }
    /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    reset() {
        this.innerValueMap.clear();
    }
    /**
     * 清空所有vo变量变更集
     * @return {?}
     */
    clearChanges() {
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        (ngVariable, varName) => {
            /** @type {?} */
            const mapping = ngVariable.mapping;
            /** @type {?} */
            const newValue = this.getValueFromUIState(mapping);
            /** @type {?} */
            const oldValue = this.innerValueMap.get(varName);
            if (this.isValueEqual(newValue, oldValue) === false) {
                this.innerValueMap.set(varName, newValue);
            }
        }));
    }
    /**
     * 清空只读vo变更
     * @param {?} changeDetail
     * @return {?}
     */
    clearChangeDetail(changeDetail) {
        if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {
            return;
        }
        Object.keys(changeDetail.ChangeInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const ngVariable = this.ngVariableMap.get(key);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            const mapping = ngVariable.mapping;
            /** @type {?} */
            const newValue = this.getValueFromUIState(mapping);
            this.innerValueMap.set(key, newValue);
        }));
    }
    /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    appendToChangeInfo(changeDetail, varName, varValue) {
        if (this.isUdtVariable(varValue) === true) {
            /** @type {?} */
            const udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
            udtVarChangeDetail.ChangeInfo = varValue;
            changeDetail.ChangeInfo[varName] = udtVarChangeDetail;
        }
        else {
            changeDetail.ChangeInfo[varName] = varValue;
        }
    }
    /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    getValueFromUIState(mapping) {
        /** @type {?} */
        const uiState = this.getRootUIState();
        // 计算value
        /** @type {?} */
        const mappingArray = mapping.split('.');
        /** @type {?} */
        const value = mappingArray.reduce((/**
         * @param {?} accumulator
         * @param {?} currentValue
         * @return {?}
         */
        (accumulator, currentValue) => {
            return accumulator ? accumulator[currentValue] : null;
        }), uiState);
        if (value instanceof Date) {
            return format(value, 'yyyy-MM-dd HH:mm:ss');
        }
        return value;
    }
    /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    getRootUIState() {
        /** @type {?} */
        let rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();
        if (this.injector) {
            /** @type {?} */
            const frameContext = this.injector.get(FrameContext, null);
            if (frameContext) {
                /** @type {?} */
                const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
                rootFrameContext = virtualRootFrameContext || rootFrameContext;
            }
        }
        if (!rootFrameContext) {
            return;
        }
        return rootFrameContext.uiState;
    }
    /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    isValueEqual(srcValue, dstValue) {
        return JSON.stringify(srcValue) === JSON.stringify(dstValue);
    }
    /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    isUdtVariable(obj) {
        return obj && obj.constructor &&
            obj.toString() === '[object Object]' &&
            obj.constructor.prototype.hasOwnProperty('isPrototypeOf');
    }
    /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    setValueToUIState(mapping, value) {
        /** @type {?} */
        const uiState = this.getRootUIState();
        uiState[mapping] = value;
    }
}
/** @nocollapse */
BefVariableManager.ctorParameters = () => [
    { type: AppContext },
    { type: undefined },
    { type: Injector, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefProxy工具类
 * \@summary
 * 1、BefProxy辅助工具类；
 * 2、暂时无法归类的代码封装；
 */
class BefProxyUtil {
    /**
     * 构造RequestInfo
     * @param {?} befRepository
     * @return {?}
     */
    static buildRequestInfo(befRepository) {
        /** @type {?} */
        const requestInfo = {
            dataChange: befRepository.entityManager.buildAllEntityChangeDetails(),
            variableChange: befRepository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_path_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef数据中各种Path的转换
 */
class BefDataPathUtil {
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    static convertToPathArray(bindingPath, bindingData) {
        /** @type {?} */
        const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
        /** @type {?} */
        const pathArray = [];
        /** @type {?} */
        let currentBindingObject = bindingData.list.currentItem;
        pathArray.push(currentBindingObject.primaryKeyValue);
        bindingPathArray.forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            /** @type {?} */
            const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            if (propInfo.type !== BindingPropertyType.List) {
                throw new Error(`${propInfo.name}不是子表对应的属性`);
            }
            /** @type {?} */
            const currentBindingList = currentBindingObject[propName];
            currentBindingObject = currentBindingList.currentItem;
            pathArray.push(this.trimTrailingS(propName));
            pathArray.push(currentBindingObject.primaryKeyValue);
        }));
        return pathArray;
    }
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    static convertToPathUrl(bindingPath, bindingData) {
        /** @type {?} */
        const pathArray = this.convertToPathArray(bindingPath, bindingData);
        pathArray.pop();
        return '/' + pathArray.join('/');
    }
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    static convertToObjectCodes(bindingPath, bindingData) {
        /** @type {?} */
        const pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        const pathLen = pathArray.length;
        /** @type {?} */
        const objectCodes = [];
        for (let i = 1; i < pathLen; i = i + 2) {
            objectCodes.push(pathArray[i]);
        }
        return objectCodes;
    }
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    static convertToDataIdsForUpdate(bindingPath, bindingData) {
        /** @type {?} */
        const pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        const pathLen = pathArray.length;
        /** @type {?} */
        const dataIds = [];
        for (let i = 0; i < pathLen; i = i + 2) {
            dataIds.push(pathArray[i]);
        }
        return dataIds;
    }
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    static convertToDataIdsForAdd(bindingPath, bindingData) {
        /** @type {?} */
        const dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);
        dataIds.pop();
        return dataIds;
    }
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    static convertPathToUrl(path) {
        /** @type {?} */
        const subPaths = path.split('/');
        for (let i = subPaths.length - 1; i > 0; i--) {
            if (subPaths[i] && subPaths[i].endsWith('s')) {
                subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1).toLowerCase();
            }
        }
        // url不再转小写，兼容主键有大写字母的情况
        return subPaths.join('/'); // .toLowerCase();
    }
    /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    static trimTrailingS(str) {
        return str.substr(0, str.length - 1);
    }
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    static convertPathsToNodeCodes(paths) {
        /** @type {?} */
        const result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !!item && item.indexOf(':') === -1)).forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            result.push(node);
        }));
        return result;
    }
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    static convertPathsToIds(paths) {
        /** @type {?} */
        const result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !!item && item.indexOf(':') !== -1)).forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            result.push(id.split(':')[1]);
        }));
        return result;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef数据访问服务
 * \@todo：
 * 1、临时将BefRepository相关代码转移到该类中；
 * 2、进一步明确职责，调整结构
 * @template T
 */
// tslint:disable: no-string-literal
class BefDataService {
    /**
     * 构造函数
     * @param {?} injector
     * @param {?} repository
     */
    constructor(injector, repository) {
        this.injector = injector;
        this.repository = repository;
        /** @type {?} */
        const frmSessionService = injector.get(FrameworkSessionService);
        /** @type {?} */
        const httpClient = injector.get(HttpClient);
        /** @type {?} */
        const serverUri = injector.get(BE_SERVER_URI_TOKEN);
        // 创建BefRestService实例
        /** @type {?} */
        const restBaseUri = `${serverUri}/${this.repository.apiUri}`;
        /** @type {?} */
        const eventBus = injector.get(EventBus);
        this.restService = new BefRestService(httpClient, restBaseUri, frmSessionService, this.repository, eventBus);
        this.appContext = injector.get(AppContext);
    }
    /**
     * BefRest代理
     * @return {?}
     */
    get restProxy() {
        return this.repository.restService.proxy;
    }
    /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    getList(filter, sort, pageSize, pageIndex) {
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const filter$ = this.restProxy.extendQuery(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            const listData = queryResult.result;
            /** @type {?} */
            const entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                /** @type {?} */
                const entity = this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            const serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                const { pageSize, pageIndex, totalCount } = serverPaginationInfo;
                // 处理主表分页信息
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });
            }
            else {
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    }
    /**
     * 过滤数据
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 当前分页
     * @return {?}
     */
    filter(filter, sort, pageSize, pageIndex) {
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const filter$ = this.restProxy.filter(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            const listData = queryResult.result;
            /** @type {?} */
            const entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                /** @type {?} */
                const entity = this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            const serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                const { pageSize, pageIndex, totalCount } = serverPaginationInfo;
                // 处理主表分页信息
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });
            }
            else {
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    }
    /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    buildEntityFilter(filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].relation = 0;
        }
        /** @type {?} */
        const entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
    /**
     * 获取单个实体
     * @param {?} id id
     * @return {?}
     */
    getById(id) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.getEntityById(id);
        }
        /** @type {?} */
        const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const entityData = responseInfo.returnValue;
            /** @type {?} */
            const entity = this.repository.buildEntity(entityData);
            this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getEntityById(id) {
        // 获取所有分页信息
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            const entityData = returnValue.result;
            /** @type {?} */
            const serverPaginationInfo = returnValue.pagination;
            this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            const entity = this.repository.buildEntity(entityData);
            this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    }
    /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    queryChild(paths, pageIndex, pageSize, filter, sort) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        let nodeCodes = BefDataPathUtil.convertPathsToNodeCodes(paths);
        /** @type {?} */
        const entityCodes = nodeCodes.map((/**
         * @param {?} node
         * @return {?}
         */
        node => node.substring(0, node.length - 1)));
        /** @type {?} */
        let entityName = entityCodes[entityCodes.length - 1];
        // 查询对象可能为从表或从从表
        /** @type {?} */
        const pagination = this.repository.entityCollection.getPaginationConfigByPath(`/${entityName}`);
        const { pageSize: ps = 0 } = pagination || {};
        /** @type {?} */
        const viewModel = this.injector.get(ViewModel, null);
        /** @type {?} */
        let forceQueryChild = false;
        if (viewModel) {
            forceQueryChild = viewModel.frameContext.appContext.params.get('forceQueryChild') || false;
        }
        if (ps == 0 && !forceQueryChild) {
            return of(null);
        }
        /** @type {?} */
        const ids = BefDataPathUtil.convertPathsToIds(paths);
        /** @type {?} */
        const parentId = ids[ids.length - 1];
        /** @type {?} */
        const params = {
            nodeCodes: entityCodes,
            ids,
            pagination: {
                pageIndex,
                pageSize
            },
            requestInfo
        };
        /** @type {?} */
        const request$ = this.restService.queryChild(params);
        return request$.pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const returnValue = response.returnValue;
            if (!returnValue) {
                return null;
            }
            const { result = [], pagination = {} } = returnValue;
            /** @type {?} */
            const commonPaths = paths.map((/**
             * @param {?} path
             * @param {?} index
             * @return {?}
             */
            (path, index) => {
                if (path.includes(':') && index % 2 === 0) {
                    return path.split(':')[1];
                }
                return path;
            }));
            /** @type {?} */
            const entities = this.repository.entityManager.createEntitiesByPath(`/${commonPaths.join('/')}`, result);
            this.repository.entityCollection.resetEntities(paths, entities);
            // 更新分页信息
            this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}`, { pageIndex: pagination.pageIndex, pageSize: pagination.pageSize });
            this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}_${parentId}`, pagination);
        })));
    }
    /**
     * 构造子表分页信息
     * @private
     * @return {?}
     */
    buildChildrenPagination() {
        /** @type {?} */
        const paginationInfo = this.repository.entityCollection.getPaginationConfigByPath('/');
        /** @type {?} */
        const childPaginationInfo = {};
        /** @type {?} */
        const childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        // 实体无子表
        if (!childrenEntityCodes || childrenEntityCodes.length < 1) {
            return null;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const value = paginationInfo[key];
            if (typeof value === 'object') {
                /** @type {?} */
                const entityCode = key && key.includes('_') && key.split('_')[0] || null;
                if (!(entityCode && childrenEntityCodes.includes(`${entityCode}s`))) {
                    childPaginationInfo[key] = value;
                }
            }
        }));
        return childPaginationInfo;
    }
    /**
     * 更新分页配置信息
     * @private
     * @param {?} paginationInfo 服务器分页信息
     * @return {?}
     */
    updatePagination(paginationInfo) {
        if (!paginationInfo) {
            return;
        }
        /** @type {?} */
        let childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        childrenEntityCodes = childrenEntityCodes.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item.substr(0, item.length - 1)));
        // retrieve之后没有子表数据
        if (!paginationInfo || Object.keys(paginationInfo).length < 1) {
            if (childrenEntityCodes && childrenEntityCodes.length > 0) {
                childrenEntityCodes.forEach((/**
                 * @param {?} nodeCode
                 * @return {?}
                 */
                (nodeCode) => {
                    /** @type {?} */
                    const original = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`);
                    if (original) {
                        //original.pageIndex = 1;
                        //original.total = 0;
                        // 重置当前子表公共分页信息
                        //this.repository.entityCollection.setPaginationConfigByPath(`/${nodeCode}`, original);
                        // 删除当前数据下级表分页信息
                        /** @type {?} */
                        const localPagination = this.repository.entityCollection.getPaginationConfigByPath('/');
                        /** @type {?} */
                        const keys = Object.keys(localPagination).filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.startsWith(`${nodeCode}_`)));
                        if (keys && keys.length > 0) {
                            keys.forEach((/**
                             * @param {?} key
                             * @return {?}
                             */
                            key => {
                                this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, { pageIndex: 1, total: 0, pageSize: original.pageSize });
                            }));
                        }
                    }
                }));
            }
            return;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            // const entityName = childrenEntityCodes.find(item => key.startsWith(`${item}_`));
            this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, paginationInfo[key]);
        }));
    }
    /**
     * 构造retrieve分页信息
     * \@description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     * @private
     * @return {?}
     */
    buildRetrieveParam() {
        /** @type {?} */
        const childPaginationInfo = this.buildChildrenPagination();
        if (!childPaginationInfo || Object.keys(childPaginationInfo).length < 1) {
            return null;
        }
        /** @type {?} */
        const retrieveParam = { filters: {}, parentIds: {} };
        /** @type {?} */
        let childrenEntityCodes = [];
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        Object.keys(childPaginationInfo).forEach((/**
         * @param {?} typeName
         * @return {?}
         */
        typeName => {
            /** @type {?} */
            const entity = childPaginationInfo[typeName];
            /** @type {?} */
            const pageIndex = entity.pageIndex || 1;
            retrieveParam.filters[typeName] = { pagination: { pageSize: entity.pageSize || 0, pageIndex: pageIndex } };
            // if (this.isChildrenTable(typeName)) {
            //   retrieveParam.parentIds[typeName] = this.getId(typeName, pageIndex);
            // }
        }));
        return retrieveParam;
    }
    /*
      private getId(nodeCode: string, pageIndex: number): string {
        const viewModel = this.injector.get<ViewModel>(ViewModel, null);
        const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
        if (pageIndex !== originalPageIndex) {
          return null;
        }
        if (viewModel) {
          const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
          if (bindingList && bindingList.currentId) {
            return bindingList.currentId;
          }
        }
        return null;
      }
      private isChildrenTable(nodeCode: string) {
        let childrenEntityCodes: any[] = [];
        nodeCode += 's';
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        if (childrenEntityCodes && childrenEntityCodes.length > 0) {
          const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
          return index !== -1;
        }
        return false;
      }*/
    /**
     * 更新并对实体加锁
     * @param {?} id 实体id
     * @return {?}
     */
    editById(id) {
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        const retrieve$ = this.restProxy.edit(id, requestInfo);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const entityData = responseInfo.returnValue.data;
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            if (entityToUpdate && entityData) {
                this.reloadEntityData(entityToUpdate, entityData);
            }
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    updateById(id) {
        // 如果要更新的实体不存在，返回一个null流；
        // @todo：返回empty()还是null流，为了不影响现有行为，临时返回null流。
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.updateEntityById(id);
        }
        /** @type {?} */
        const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const entityData = responseInfo.returnValue;
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    updateEntityById(id) {
        // 获取所有分页信息
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            const entityData = returnValue.result;
            /** @type {?} */
            const serverPaginationInfo = returnValue.pagination;
            this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 重新加载实体数据
     * \@todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     * @private
     * @param {?} entity
     * @param {?} entityData 要重载的数据
     * @return {?}
     */
    reloadEntityData(entity, entityData) {
        if (!entity) {
            return;
        }
        // 关闭变更检测
        this.appContext.changeDetectionController.detach();
        // retrieve之后已经是最新数据，移除变更
        // entity.load(entityData);
        this.repository.entityCollection.updateEntity(entity, entityData);
        // 重新加载数据不应该产生变更
        entity.changes.splice(0, entity.changes.length);
        // 重新打开变更检测
        this.appContext.changeDetectionController.reattach();
    }
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    create(defaultValue) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const result$ = this.restService.create(defaultValue, requestInfo);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newData);
            EntityUtil.appendInitialData(newEntity, newData);
            this.repository.entityCollection.loadEntities([newEntity], true);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    }
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    append(defaultValue) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restService.create(defaultValue, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newData);
            this.repository.entityCollection.addEntity(newEntity);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    }
    /**
     * 插入数据
     * @param {?} position 数据插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    insert(position, defaultValue) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const insert$ = this.restProxy.create(defaultValue, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newData);
            this.repository.entityCollection.insertEntity(newEntity, position);
            return newEntity;
        })));
    }
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    appendByPath(fpath) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restService.createByPath(fpath, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.entityManager.appendEntityByPath(fpath, newData, newData);
            return newEntity;
        })));
    }
    /**
     * 创建子实体并插入到指定位置
     * @param {?} fpath 父路径
     * @param {?} position 数据插入位置
     * @return {?}
     */
    insertByPath(fpath, position) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const insert$ = this.restProxy.createByPath(fpath, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.entityManager.insertEntityByPath(fpath, newData, newData, position);
            return newEntity;
        })));
    }
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    removeById(id, ifSave) {
        ifSave = (ifSave === undefined) ? true : ifSave;
        /** @type {?} */
        const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        let delete$;
        if (ifSave) {
            delete$ = this.restProxy.deleteAndSave(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                this.repository.entityCollection.removeEntityById(id);
                return of(true);
            })));
        }
        else {
            delete$ = this.restService.extendDelete(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                this.repository.entityCollection.removeEntityById(id);
                this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
                return of(true);
            })));
        }
    }
    /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    removeAndSaveById(id) {
        /** @type {?} */
        const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        const delete$ = this.restProxy.deleteAndSave(id, requestInfo);
        /** @type {?} */
        const result$ = delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            this.repository.entityCollection.removeEntityById(id);
            // this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
            return of(true);
        })));
        return result$;
    }
    /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    removeByIds(ids, ifSave) {
        ifSave = (ifSave === undefined) ? true : ifSave;
        // 服务器端删除
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.extendBatchDelete(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            if (ifSave) {
                // 执行保存
                return this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result) {
                        // 从实体集合中删除
                        this.repository.entityCollection.removeEntities((/**
                         * @param {?} value
                         * @return {?}
                         */
                        (value) => {
                            return this.checkEntityValueExists(value, ids);
                        }));
                    }
                })));
            }
            else {
                // 从实体集合中删除
                this.repository.entityCollection.removeEntities((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    return this.checkEntityValueExists(value, ids);
                }));
                if (ids && ids.length > 0) {
                    /** @type {?} */
                    const changes = [];
                    ids.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    id => {
                        changes.push({ dataId: id, changeType: DataChangeType.Delete });
                    }));
                    this.repository.dataChangeHistory.addChanges(changes);
                }
                return of(true);
            }
        })));
    }
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} ifSave 是否保存
     * @return {?}
     */
    batchRemove(ids, ifSave) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.extendBatchDeletion(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            if (ifSave) {
                // 执行保存
                return this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result) {
                        // 从实体集合中删除
                        this.removeEntities(ids);
                    }
                })));
            }
            else {
                // 从实体集合中删除
                this.removeEntities(ids);
                this.addBatchRemoveHistory(ids);
                return of(true);
            }
        })));
    }
    /**
     * 添加批量删除记录到变更记录中
     * @private
     * @param {?} ids ids
     * @return {?}
     */
    addBatchRemoveHistory(ids) {
        if (ids && ids.length > 0) {
            /** @type {?} */
            const changes = [];
            ids.forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                changes.push({ dataId: id, changeType: DataChangeType.Delete });
            }));
            this.repository.dataChangeHistory.addChanges(changes);
        }
    }
    /**
     * 从实体仓库中批量移除指定id的数据
     * @private
     * @param {?} ids
     * @return {?}
     */
    removeEntities(ids) {
        this.repository.entityCollection.removeEntities((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            return this.checkEntityValueExists(value, ids);
        }));
    }
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    checkEntityValueExists(entity, primaryValueArray) {
        /** @type {?} */
        let isExistInTargetArray = false;
        for (let i = 0; i < primaryValueArray.length; i++) {
            if (entity.primaryValue === primaryValueArray[i]) {
                isExistInTargetArray = true;
                break;
            }
        }
        return isExistInTargetArray;
    }
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    removeByPath(fpath, id) {
        // 服务器端删除
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.extendDeletByPath(fpath, id, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.removeEntityByPath(fpath, id);
            this.repository.dataChangeHistory.addChange({ fpath, dataId: id, changeType: DataChangeType.Delete });
            return true;
        })));
    }
    /**
     * 批量删除子级
     * @param {?} fPath 路径
     * @param {?} ids  子级id集合
     * @return {?}
     */
    batchRemoveByPath(fPath, ids) {
        // 服务器端删除
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.batchDeleteByPath(fPath, ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const idArray = ids.split(',');
            if (idArray.length > 0) {
                idArray.forEach((/**
                 * @param {?} id
                 * @return {?}
                 */
                (id) => {
                    this.repository.entityManager.removeEntityByPath(fPath, id);
                    this.repository.dataChangeHistory.addChange({ fpath: fPath, dataId: id, changeType: DataChangeType.Delete });
                }));
            }
            return true;
        })));
    }
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    updateChangesById(id) {
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        // 变更集不存在
        if (!entity.changes) {
            return of(true);
        }
        // 变更集为空
        if (entity.changes.length === 0) {
            return of(true);
        }
        /** @type {?} */
        const changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const update$ = this.restService.update(changeDetail, requestInfo);
        /** @type {?} */
        const result$ = update$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesById(id);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    updateChangesByPath(path, id) {
        throw new Error('Not Implement');
    }
    /**
     * 提交所有变更
     * @return {?}
     */
    updateAllChanges() {
        // 遍历实体，提交变更
        /** @type {?} */
        const updateResults = [];
        /** @type {?} */
        const entities = this.repository.entityCollection.toArray();
        if (entities.length === 0) {
            return of(true);
        }
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        (entity) => {
            /** @type {?} */
            const updateResult$ = this.updateChangesById(entity.primaryValue);
            updateResults.push(updateResult$);
        }));
        // 串联流
        /** @type {?} */
        const result$ = zip(...updateResults).pipe(map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用变更
     * @return {?}
     */
    applyChanges() {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const save$ = this.restService.save(requestInfo);
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearAllEntityChanges();
            this.repository.clearAllVariableChanges(requestInfo.variableChange);
            this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用idArray对应数据的变更
     * @param {?} idArray
     * @return {?}
     */
    applyChangesByIdArray(idArray) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const save$ = this.restService.save(requestInfo);
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesByArray(idArray);
            this.repository.dataChangeHistory.clearByIds(idArray);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    applyChangesById(id) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const save$ = this.restService.save(requestInfo);
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesById(id);
            this.repository.dataChangeHistory.clearByIds([id]);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    cancelChanges(options) {
        /** @type {?} */
        const cancel$ = this.restService.cancel(options);
        /** @type {?} */
        const result$ = cancel$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearAllEntityChanges();
            this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    batchAppendByPath(path, defaultValues) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restProxy.batchAppendByPath(path, defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const list = responseInfo.returnValue;
            /** @type {?} */
            const entities = this.repository.entityManager.createEntitiesByPath(path, list);
            /** @type {?} */
            const paths = path.split('/').filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p));
            this.repository.entityManager.appendEntitiesByPath(paths, entities);
            return entities;
        })));
    }
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    batchAppend(defaultValues) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restProxy.batchAppend(defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const list = responseInfo.returnValue;
            /** @type {?} */
            const entities = this.repository.buildEntities(list);
            this.repository.entityCollection.addEntities(entities);
            return entities;
        })));
    }
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @return {?}
     */
    hasChanges() {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        return this.restService.hasChanges(requestInfo);
    }
    /**
     * 构造变更集
     * @return {?}
     */
    buildRequestInfo() {
        /** @type {?} */
        const requestInfo = {
            dataChange: this.repository.entityManager.buildAllEntityChangeDetails(),
            variableChange: this.repository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/back_end_message.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BackEndMessageUtil {
    /**
     * @param {?} messages
     * @param {?} injector
     * @param {?=} options
     * @return {?}
     */
    static handleMessage(messages, injector, options) {
        /** @type {?} */
        const namespace = injector.get(NAMESPACE, null);
        /** @type {?} */
        const appContext = injector.get(AppContext, null);
        /** @type {?} */
        const context = {
            ns: namespace,
            appContext
        };
        /** @type {?} */
        const bizMessages = this.buildBackEndMessages(messages);
        /** @type {?} */
        const backEndMessage = new BackEndMessage.Message(bizMessages, context);
        /** @type {?} */
        const backEndMessageHandler = injector.get(BACK_END_MESSAGE_HANDLER_TOKEN, null);
        if (backEndMessageHandler) {
            backEndMessageHandler.handle(backEndMessage, options);
        }
    }
    /**
     * @param {?} injector
     * @return {?}
     */
    static isBackEndMessageHandlerExist(injector) {
        /** @type {?} */
        const backEndMessageHandler = injector.get(BACK_END_MESSAGE_HANDLER_TOKEN, null);
        return backEndMessageHandler && true || false;
    }
    /**
     * @param {?} messages
     * @return {?}
     */
    static getFormlessMessages(messages) {
        /** @type {?} */
        const bizMessages = this.buildBackEndMessages(messages) || [];
        return bizMessages.filter((/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            return !message.location || !message.location.columns || message.location.columns.length < 1 || !message.location.nodeCode;
        }));
    }
    /**
     * @param {?} messages
     * @return {?}
     */
    static buildBackEndMessages(messages) {
        if (!messages || messages.length < 1 || !Array.isArray(messages)) {
            return null;
        }
        /** @type {?} */
        const bizMessages = [];
        messages.forEach((/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            /** @type {?} */
            const bizMessage = {
                level: message.level,
                message: message.message
            };
            if (message.hasOwnProperty('location') && message.location) {
                bizMessage.location = {
                    nodeCode: message.location.nodeCode,
                    rows: message.location.dataIds,
                    columns: message.location.columnNames
                };
            }
            bizMessages.push(bizMessage);
        }));
        return bizMessages;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BefSessionManager {
    /**
     * @param {?} appContext
     * @param {?} sessionService
     * @return {?}
     */
    static getSessionId(appContext, sessionService) {
        /** @type {?} */
        const appId = appContext.ApplicationId;
        /** @type {?} */
        const beBaseUri = sessionService.beBaseUri;
        /** @type {?} */
        const key = `${appId}_${beBaseUri}`;
        /** @type {?} */
        const createSessionIsInvoked = this.createSessionHistory.includes(key);
        if (createSessionIsInvoked) {
            return of(null);
        }
        else {
            this.createSessionHistory.push(key);
            return sessionService.getBeSessionId();
        }
    }
}
BefSessionManager.createSessionHistory = [];
BefSessionManager.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_extend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable: max-line-length tslint:disable: no-string-literal
class BefProxyExtend {
    /**
     * @param {?} context
     */
    constructor(context) {
        this.context = context;
        /** @type {?} */
        const injector = this.context.getInjector();
        if (injector) {
            this.loadingService = injector.get(LoadingService, null);
        }
    }
    /**
     * 请求结果返回
     * @param {?} response response
     * @param {?=} ignoreChanges 忽略变更
     * @param {?=} options
     * @return {?}
     */
    onResponse(response, ignoreChanges, options) {
        if (response && response.innerDataChange && ignoreChanges !== true) {
            this.context.handleDataChangeDetails(response.innerDataChange);
        }
        if (response && response.innerVariableChange) {
            this.context.handleVariableChangeDetail(response.innerVariableChange);
        }
        /** @type {?} */
        const messages = ResponseInfoUtil.parseBackEndMessage(response);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        this.context.clearAllEntityChanges();
        /** @type {?} */
        const requestInfo = RequestInfoUtil.getRequestInfo(options);
        /** @type {?} */
        const variableChange = requestInfo && requestInfo.variableChange;
        this.context.clearAllVariableChanges(variableChange);
        if (response && response.hasOwnProperty('returnValue')) {
            return response.returnValue;
        }
        else {
            return response;
        }
    }
    /**
     * 发生错误
     * @param {?} error error
     * @param {?} selfHandError 自定义错误处理
     * @param {?} ignoreError 忽略错误
     * @return {?}
     */
    onError(error, selfHandError, ignoreError) {
        /** @type {?} */
        const formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        const applicationId = formAppContext.ApplicationId;
        /** @type {?} */
        const loadingServices = window['DEVKIT_LOADING_SERVICE'];
        /** @type {?} */
        const messages = ResponseInfoUtil.parseBackEndError(error);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        if (this.loadingService) {
            window.setTimeout((/**
             * @return {?}
             */
            () => {
                this.loadingService.clearAll();
            }), 350);
        }
        if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {
            for (const loadingService of loadingServices) {
                if (typeof (loadingService.destroy) === 'function') {
                    loadingService.destroy();
                }
            }
        }
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            const eventBus = this.context.restService.eventBus;
            /** @type {?} */
            const applicationContext = window[applicationId] || {};
            /** @type {?} */
            const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            const messages = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);
            /** @type {?} */
            const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.context.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            const willThrowException = !!eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages, this.context.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: eventBus, error, formAppContext });
            if (!!eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    }
    /**
     * 扩展http headers
     * @param {?} headers headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    extendHeaders(headers, runtimeContext) {
        /** @type {?} */
        const formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        const $getSessionId = BefSessionManager.getSessionId(formAppContext, this.context.restService.sessionService);
        return $getSessionId.pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        sessionId => {
            headers = this.context.restService.sessionService.extendRequestHeaders(headers, runtimeContext);
            return of(headers);
        })));
    }
    /**
     * 扩展请求参数
     * @param {?} url
     * @param {?} params 参数
     * @return {?}
     */
    extendUrl(url, params) {
        if (!params) {
            return url;
        }
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                /** @type {?} */
                const value = JSON.stringify(params[key]);
                if (url.indexOf('?') === -1) {
                    url = `${url}?${key}=${value}`;
                }
                else {
                    url = `${url}&${key}=${value}`;
                }
            }
        }
        return url;
    }
    /**
     * 扩展请求体
     * @param {?} body body
     * @return {?}
     */
    extendBody(body) {
        if (!body || typeof body !== 'object' || Object.keys(body).length < 1) {
            return body;
        }
        Object.keys(body).forEach((/**
         * @param {?} name
         * @return {?}
         */
        name => {
            if (name === 'requestInfo') {
                body['requestInfo'] = this.context.restService.buildRequestInfo();
            }
        }));
        // 兼容J版后端body只有一个key时body只传value的情况
        if (Object.keys(body).length === 1) {
            body = Object.values(body)[0];
        }
        return body;
    }
    /**
     * @param {?} response
     * @return {?}
     */
    parseHeaders(response) {
        /** @type {?} */
        const sessionIdKey = 'BEFSessionID';
        if (response.headers && response.headers.has(sessionIdKey)) {
            this.context.restService.sessionService.setBeSessionId(response.headers.get(sessionIdKey));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BEF实体仓储
 * \@description
 * 负责与后端的业务实体框架交互，管理业务实体数据 \
 * apiUri示例如下：api/scm/sd/v1.0/empservice，前后均不带斜杠
 * @abstract
 * @template T
 */
class BefRepository extends DeprecatedBefRepository {
    /**
     * @param {?} injector 依赖注入器
     */
    constructor(injector) {
        super();
        this.injector = injector;
        if (this.entityCollection) {
            // 初始化实体管理器
            this.entityManager = new BefEntityManager(this.entityCollection);
        }
        // 初始化变量管理器
        this.appContext = this.injector.get(AppContext);
        /** @type {?} */
        const ngVariables = MetadataUtil.getPropsMetadatasByName(this.constructor, NG_VARIABLE);
        this.variableManager = new BefVariableManager(this.appContext, ngVariables, this.injector);
        // 初始化DataService
        this.dataService = new BefDataService(this.injector, this);
        this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
    }
    /**
     * \@member {BefProxy} proxy
     * \@description 每一个BefRepository都需要一个Bef代理，用来处理http请求
     * @param {?} value
     * @return {?}
     */
    set proxy(value) {
        this.befProxy = value;
        this.befProxy.setProxyExtend(new BefProxyExtend(this));
    }
    /**
     * @return {?}
     */
    get proxy() {
        return this.befProxy;
    }
    /**
     * 获取实体列表
     * \@description
     * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）
     * ```json
     * [
     *   {
     *     "FilterField": "DomainID.DomainID_name",
     *     "Compare": 0,
     *     "Value": "人力资源部",
     *     "Relation": 1,
     *     "Expresstype": 0,
     *     "Lbracket": "(",
     *     "Rbracket": ")"
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 3,
     *     "Value": "2021-09-03",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 5,
     *     "Value": "2021-10-05",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }
     * ]
     * ```
     * 使用示例：
     * ```typescript
     * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析
     * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
     * ```
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 页码
     * @return {?}
     */
    getEntities(filter, sort, pageSize, pageIndex) {
        return this.dataService.getList(filter, sort, pageSize, pageIndex);
    }
    /**
     * 获取实体列表
     * \@description
     * 与getEntities方法功能相近，用法相同 \
     * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上
     * @see {\@link getEntities}
     * @param {?=} filter 过滤条件
     * @param {?=} sorts 排序条件
     * @param {?=} pageSize 分页大小
     * @param {?=} pageIndex 页码
     * @return {?}
     */
    filter(filter = [], sorts = [], pageSize, pageIndex) {
        return this.dataService.filter(filter, sorts, pageSize, pageIndex);
    }
    // #endregion
    /**
     * 分页查询从表/从从表数据
     * \@todo 目前并未应用排序和过滤条件
     * \@description
     * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \
     * 通用路径的主键值前必须含有冒号，冒号之前的"id"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \
     * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \
     * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \
     * 使用示例：
     * ```typescript
     * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径
     * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
     * const paths = fullPaths.slice(0, fullPaths.length - 1);
     * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
     * const bindingData = this.viewModel.bindingData;
     * let nodeCode = bindingPaths[bindingPaths.length - 1];
     * nodeCode = nodeCode.substr(0, nodeCode.length - 1);
     * // 获取上级实体
     * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
     * const parentObject = bindingData.getValue(parentPaths) as BindingObject;
     * if (!parentObject) {
     *   throw new Error('上级实体不存在');
     * }
     * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;
     * // 获取绑定路径对应的分页信息
     * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);
     * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
     * ```
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    queryChild(paths, pageIndex, pageSize, filter, sort) {
        return this.dataService.queryChild(paths, pageIndex, pageSize, filter, sort);
    }
    /**
     * 获取主键为id的实体
     * \@description
     * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \
     * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {\@link updateEntityById} 方法
     * @param {?} id 主表实体主键
     * @return {?}
     */
    getEntityById(id) {
        return this.dataService.getById(id);
    }
    /**
     * 更新实体数据
     * \@description
     * 重新从服务器获取主表上对应主键的实体数据 \
     * 使用示例：
     * ```typescript
     * const rootDataId = this.bindingData.list.currentId;
     * return this.repository.updateEntityById(rootDataId);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    updateEntityById(id) {
        return this.dataService.updateById(id);
    }
    /**
     * 更新实体数据并加锁
     * \@description
     * 使用示例：
     * ```typescript
     * id = this.bindingData.list.currentId;  // 编辑当前行
     * const edit$ = this.repository.editEntityById(id);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    editEntityById(id) {
        return this.dataService.editById(id);
    }
    /**
     * 创建实体
     * \@description
     * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \
     * 使用示例：
     * ```typescript
     * // 在创建新实体后进入编辑状态
     * const create$ = this.repository.createEntity();
     * create$.pipe(
     *   tap(() => {
     *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);
     *   })
     * );
     * ```
     * @param {?=} defaultValue 默认值，JSON对象
     * @return {?}
     */
    createEntity(defaultValue) {
        return this.dataService.create(defaultValue);
    }
    /**
     * 追加实体
     * \@description 请求创建一个新的实体，并追加到实体仓库（适用于列表）
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    appendEntity(defaultValue) {
        return this.dataService.append(defaultValue);
    }
    /**
     * 创建并插入新实体（向主表插入）
     * \@description
     * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前
     * @param {?} position 插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    insert(position, defaultValue) {
        return this.dataService.insert(position, defaultValue);
    }
    /**
     * 创建子实体并插入到指定位置（向从表或从从表插入）
     * \@description
     * 关于父路径格式，从表形如："/1/edus"，从从表形如："/1/edus/12/grades" \
     * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \
     * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \
     * 插入位置参考 {\@link insert} \
     * 使用示例：
     * ```typescript
     * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径
     * const append$ = this.repository.insertByPath(path, position);
     * ```
     * @param {?} path 父路径
     * @param {?} position 插入位置
     * @return {?}
     */
    insertByPath(path, position) {
        return this.dataService.insertByPath(path, position);
    }
    /**
     * 创建子实体并追加到末尾
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @return {?}
     */
    appendEntityByPath(fpath) {
        return this.dataService.appendByPath(fpath);
    }
    /**
     * 根据id删除实体
     * \@description
     * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存
     * @param {?} id 主表实体主键
     * @param {?=} ifSave 是否保存，可选，默认为true
     * @return {?}
     */
    removeEntityById(id, ifSave) {
        return this.dataService.removeById(id, ifSave);
    }
    /**
     * 根据id删除实体并执行保存
     * @param {?} id 主表实体主键
     * @return {?}
     */
    removeEntityAndSaveById(id) {
        return this.dataService.removeAndSaveById(id);
    }
    /**
     * 根据id删除父路径下子表中的实体
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @param {?} id 实体主键
     * @return {?}
     */
    removeEntityByPath(fpath, id) {
        return this.dataService.removeByPath(fpath, id);
    }
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?=} ifSave 是否保存(默认为false)
     * @return {?}
     */
    batchRemove(ids, ifSave = false) {
        return this.dataService.batchRemove(ids, ifSave);
    }
    /**
     * 批量删除子级实体
     * \@description
     * ids中各个id之间以逗号分隔，父路径格式参考 {\@link insertByPath} \
     * 使用示例：
     * ```typescript
     * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量
     * const remove$ = this.repository.batchRemoveByPath(path, ids);
     * ```
     * @param {?} fPath 父路径
     * @param {?} ids 子级id集合
     * @return {?}
     */
    batchRemoveByPath(fPath, ids) {
        return this.dataService.batchRemoveByPath(fPath, ids);
    }
    /**
     * 保存主键为id的实体
     * \@description
     * 调用该方法会应用id对应实体上的变更 \
     * ```typescript
     * const id = this.bindingData.list.currentId as string;
     * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    saveEntityById(id) {
        return this.dataService.applyChangesById(id);
    }
    /**
     * 批量保存
     * \@description
     * 应用所有变更，比如调用了 {\@link removeEntityById} 且未保存则可以通过此方法保存 \
     * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存
     * @return {?}
     */
    saveEntities() {
        return this.dataService.applyChanges();
    }
    /**
     * 取消实体变更
     * \@description 清空所有实体变更，不希望保存变更时调用此方法
     * @return {?}
     */
    cancelEntityChanges() {
        return this.dataService.cancelChanges();
    }
    /**
     * 批量新增从表/从从表数据
     * \@description
     * 后端接口只支持批量新增子表，批量新增主表目前不支持
     * @param {?} path 父路径，参考 {\@link insertByPath}
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    batchAppendByPath(path, defaultValues) {
        return this.dataService.batchAppendByPath(path, defaultValues);
    }
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    batchAppend(defaultValues) {
        return this.dataService.batchAppend(defaultValues);
    }
    /**
     * 清空Repositoy内的数据和变量
     * \@description 清空所有实体、变量，并清空BeSessionId
     * @return {?}
     */
    reset() {
        this.entityManager.reset();
        this.variableManager.reset();
        this.restService.sessionService.clearBeSessionId();
    }
    /**
     * 获取Injector（外部请勿使用）
     * \@internal
     * @return {?}
     */
    getInjector() {
        return this.injector;
    }
    /**
     * 清空vo变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    clearAllVariableChanges(changeDetail) {
        this.variableManager.clearChangeDetail(changeDetail);
    }
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @return {?}
     */
    hasChanges() {
        return this.dataService.hasChanges();
    }
}
BefRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefRepository.ctorParameters = () => [
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/uri_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UriService {
    /**
     * @param {?} serverUri
     */
    constructor(serverUri) {
        this.serverUri = serverUri;
    }
    /**
     * 扩展eapi基路径
     * @param {?} apiUri eapi基路径
     * @return {?}
     */
    extendUri(apiUri) {
        return `${this.serverUri}/${apiUri}`;
    }
}
UriService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UriService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [BE_SERVER_URI_TOKEN,] }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const GET = 'GET';
/** @type {?} */
const DELETE = 'DELETE';
/** @type {?} */
const PUT = 'PUT';
/** @type {?} */
const POST = 'POST';
/** @type {?} */
const PATCH = 'PATCH';
/**
 * Bef代理类
 * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter
 * uri 由uriService
 */
class BefProxy {
    /**
     * @param {?} httpClient
     * @param {?} uriService
     */
    constructor(httpClient, uriService) {
        this.httpClient = httpClient;
        this.uriService = uriService;
        this.httpService = new HttpService(this.httpClient);
    }
    /**
     * 设置基路径
     * @param {?} baseUri 基路径
     * @return {?}
     */
    setBaseUri(baseUri) {
        this.baseUri = baseUri;
    }
    /**
     * 设置策略模式
     * @param {?} proxyExtend
     * @return {?}
     */
    setProxyExtend(proxyExtend) {
        this.proxyExtend = proxyExtend;
    }
    /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    query(entityFilter) {
        /** @type {?} */
        let url = this.baseUri;
        if (entityFilter) {
            /** @type {?} */
            const entityFilterJson = JSON.stringify(entityFilter);
            url = `${url}?entityFilter=${entityFilterJson}`;
        }
        return this.request(url, GET);
    }
    /**
     * 扩展查询
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    extendQuery(entityFilter, requestInfo) {
        /** @type {?} */
        let url = `${this.baseUri}/extension/query`;
        if (entityFilter) {
            /** @type {?} */
            let entityFilterJson = JSON.stringify(entityFilter);
            entityFilterJson = encodeUrl(entityFilterJson);
            url = `${url}?entityFilter=${entityFilterJson}`;
        }
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options, false);
    }
    /**
     * 查询数据（带过滤条件）
     * \@description 和extendQuery一致，仅将查询参数放到body中
     * @param {?} entityFilter 过滤、排序、分页信息
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    filter(entityFilter, requestInfo) {
        /** @type {?} */
        let url = `${this.baseUri}/extension/filter`;
        /** @type {?} */
        let body = { requestInfo };
        if (entityFilter) {
            body = { entityFilter, requestInfo };
        }
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options, false);
    }
    /**
     * 检索数据
     * @param {?} id 单据内码
     * @return {?} 数据对象
     */
    retrieve(id) {
        /** @type {?} */
        const url = `${this.baseUri}/${id}`;
        return this.request(url, GET);
    }
    /**
     * @deprecated 方法已经废弃，请勿使用
     * @param {?} id
     * @param {?} retrieveParam
     * @param {?} requestInfo
     * @return {?}
     */
    serviceRetrieve(id, retrieveParam, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/service/retrieve/${id}`;
        /** @type {?} */
        const options = {
            body: { retrieveParam, requestInfo }
        };
        return this.request(url, PUT, null, options);
    }
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 参数
     * @return {?}
     */
    queryChild(params) {
        /** @type {?} */
        const url = `${this.baseUri}/service/querychild`;
        /** @type {?} */
        const options = { body: params };
        return this.request(url, PUT, null, options);
    }
    /**
     * 检索数据（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    extendRetrieve(id, requestInfo, retrieveParam) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/retrieve/${id}`;
        /** @type {?} */
        let body = requestInfo;
        if (retrieveParam) {
            body = { retrieveParam, requestInfo };
        }
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 检索数据
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    edit(id, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/service/edit/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 创建一条数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    create(defaultValue, requestInfo) {
        /** @type {?} */
        const body = {
            defaultValue,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, POST, null, options);
    }
    /**
     * 从表新增
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    createByPath(fpath, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUri}${pathUrl}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    }
    /**
     * 提交变更
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    update(changeDetail, requestInfo) {
        /** @type {?} */
        const body = {
            changeDetail,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PATCH, null, options);
    }
    /**
     * 执行保存
     * @param {?=} requestInfo
     * @return {?}
     */
    save(requestInfo) {
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PUT, null, options);
    }
    /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        /** @type {?} */
        const url = `${this.baseUri}/${id}`;
        return this.request(url, DELETE);
    }
    /**
     * 删除并保存
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    deleteAndSave(id, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/service/delete/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 删除（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDelete(id, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/delete/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 删除后代
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @return {?}
     */
    deletByPath(fpath, id) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUri}${pathUrl}/${id}`;
        return this.request(url, DELETE);
    }
    /**
     * 删除后代（扩展）
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDeletByPath(fpath, id, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUri}/extension${pathUrl}/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 批量删除后代
     * @param {?} fPath 'extension/{rootId}/cc/batch'
     * @param {?} ids 子集id
     * @param {?} requestInfo 请求信息
     * @return {?}
     */
    batchDeleteByPath(fPath, ids, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fPath);
        /** @type {?} */
        const pathArray = pathUrl.split('/');
        if (pathArray.length < 3) {
            throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);
        }
        /*   const rootId = pathArray[1];
        
            const nameArray = [];
            pathArray.forEach((name, index) => {
              if (index > 1 ) {
                if (name.indexOf('s') !== -1) {
                  nameArray.push(name.substr(0, name.length - 1));
                } else {
                  nameArray.push(name);
                }
              }
            });
            const childName = nameArray.join('/');*/
        /** @type {?} */
        const url = `${this.baseUri}/extension${pathUrl}/batch`;
        /** @type {?} */
        const idsArray = ids.split(',');
        /** @type {?} */
        const body = {
            ids: idsArray,
            requestInfo: requestInfo
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    batchDelete(ids) {
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        return this.request(this.baseUri, DELETE, params);
    }
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo
     * @return {?}
     */
    extendBatchDeletion(ids, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/batchdeletion`;
        /** @type {?} */
        const body = {
            ids: ids,
            requestInfo: requestInfo
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 批量删除（扩展）
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    extendBatchDelete(ids, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/batchdelete`;
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, params, options);
    }
    /**
     * 取消
     * @param {?=} context
     * @return {?}
     */
    cancel(context) {
        /** @type {?} */
        const url = `${this.baseUri}/service/cancel`;
        return this.request(url, POST, null, null, false, false, false, context);
    }
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    batchAppendByPath(path, defaultValues, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(path);
        /** @type {?} */
        const url = `${this.baseUri}${pathUrl}/batch`;
        /** @type {?} */
        const body = {
            requestInfo,
            retrieveDefaultParam: {
                defaultValues
            }
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    }
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    batchAppend(defaultValues, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/batch`;
        /** @type {?} */
        const body = {
            requestInfo,
            retrieveDefaultParam: {
                defaultValues
            }
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    }
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    hasChanges(requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/haschanges`;
        /** @type {?} */
        const body = Object.assign({}, requestInfo);
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    // tslint:disable-next-line: max-line-length
    /**
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} runtimeContext
     * @return {?}
     */
    request(url, method, params, options, selfHandError, ignoreError, ignoreChanges, runtimeContext) {
        options = options || {};
        // 是否自行处理错误
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 处理headers
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 1、判断是否带requestInfo（不区分首字母大小写）;
        // 2、如果传递的是RequestInfo，则转换为requestInfo；
        /** @type {?} */
        const hasRequestInfo = this.hasRequestInfo(options);
        if (options && options.body && options.body.hasOwnProperty('RequestInfo')) {
            options.body.requestInfo = options.body.RequestInfo;
            delete options.body.RequestInfo;
        }
        return this.proxyExtend.extendHeaders(options.headers, runtimeContext).pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        headers => {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.proxyExtend.parseHeaders(response))), map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => result.body)), map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (hasRequestInfo) {
                this.proxyExtend.onResponse(result, ignoreChanges, options);
                return result;
            }
            else {
                // body里没有requestInfo的情况，模拟老的处理方式（不清理变更、将returnValue解析出来）
                return this.unWrapResponseInfo(result);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            return this.proxyExtend.onError(error, selfHandError, ignoreError);
        })));
    }
    /**
     * 调用httpclient取数
     * @protected
     * @param {?} url url
     * @param {?} method methods
     * @param {?} options options
     * @return {?}
     */
    invoke(url, method, options) {
        if (options.params) {
            url = this.proxyExtend.extendUrl(url, options.params);
            options.params = null;
        }
        if (options.body) {
            options.body = this.proxyExtend.extendBody(options.body);
        }
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        /** @type {?} */
        const headers$ = this.proxyExtend.extendHeaders(options.headers);
        return headers$.pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        headers => {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return this.httpService.request(method, url, options)
                .pipe(tap((/**
             * @param {?} response
             * @return {?}
             */
            (response) => this.proxyExtend.parseHeaders(response))), map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => result.body)), map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => this.proxyExtend.onResponse(result, false, options))), catchError((/**
             * @param {?} error
             * @return {?}
             */
            error => this.proxyExtend.onError(error, false, false))));
        })));
    }
    /**
     * 向HttpOptions对象中添加body
     * @private
     * @param {?} options 原来的options
     * @param {?} body body内容
     * @return {?}
     */
    addBodyToOptions(options, body) {
        options = options || {};
        /** @type {?} */
        const mergedOptions = Object.assign(options, { body });
        return mergedOptions;
    }
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    buildParams(params) {
        return HttpParamUtil.buildParams(params);
    }
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    hasRequestInfo(options) {
        return RequestInfoUtil.hasRequestInfo(options) || RequestInfoUtil.hasRequestInfoWithR(options);
    }
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    unWrapResponseInfo(result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    }
}
BefProxy.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefProxy.ctorParameters = () => [
    { type: HttpClient },
    { type: UriService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_rest_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BEF取数服务
 * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。
 */
class BefRestService {
    /**
     * 构造函数
     * @param {?} httpClient http服务
     * @param {?} baseUri
     * @param {?} frmSessionService
     * @param {?} repository
     * @param {?=} eventBus
     */
    constructor(httpClient, baseUri, frmSessionService, repository, eventBus) {
        this.httpClient = httpClient;
        this.httpService = new HttpService(this.httpClient);
        this.baseUri = baseUri;
        /** @type {?} */
        const injector = repository.getInjector();
        this.sessionService = new BefSessionService(httpClient, baseUri, frmSessionService, injector);
        this.repository = repository;
        this.eventBus = eventBus;
        if (injector) {
            this.loadingService = injector.get(LoadingService, null);
        }
    }
    // #region 代理相关
    /**
     * 获取Bef代理
     * @return {?}
     */
    get proxy() {
        if (!!this.repository.proxy) {
            return this.repository.proxy;
        }
        else {
            return this.createBefProxy();
        }
    }
    /**
     * 创建Bef代理
     * @private
     * @return {?}
     */
    createBefProxy() {
        /** @type {?} */
        const serverUri = this.repository.serverUri;
        /** @type {?} */
        const uriService = new UriService(serverUri);
        /** @type {?} */
        const defaultProxy = new BefProxy(this.httpClient, uriService);
        defaultProxy.setBaseUri(this.baseUri);
        /** @type {?} */
        const extend = new BefProxyExtend(this.repository);
        defaultProxy.setProxyExtend(extend);
        return defaultProxy;
    }
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} entityFilter
     * @return {?}
     */
    query(entityFilter) {
        return this.proxy.query(entityFilter);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    extendQuery(entityFilter, requestInfo) {
        return this.proxy.extendQuery(entityFilter, requestInfo);
    }
    /**
     * 分页查询各从表数据
     * @param {?} id 主表id
     * @param {?} retrieveParam 参数
     * @param {?} requestInfo
     * @return {?}
     */
    serviceRetrieve(id, retrieveParam, requestInfo) {
        return this.proxy.serviceRetrieve(id, retrieveParam, requestInfo);
    }
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 查询参数
     * @return {?}
     */
    queryChild(params) {
        return this.proxy.queryChild(params);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    retrieve(id) {
        return this.proxy.retrieve(id);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    extendRetrieve(id, requestInfo, retrieveParam) {
        return this.proxy.extendRetrieve(id, requestInfo, retrieveParam);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    create(defaultValue, requestInfo) {
        return this.proxy.create(defaultValue, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    createByPath(fpath, requestInfo) {
        return this.proxy.createByPath(fpath, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    update(changeDetail, requestInfo) {
        return this.proxy.update(changeDetail, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} requestInfo
     * @return {?}
     */
    save(requestInfo) {
        return this.proxy.save(requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        return this.proxy.delete(id);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDelete(id, requestInfo) {
        return this.proxy.extendDelete(id, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    deletByPath(fpath, id) {
        return this.proxy.deletByPath(fpath, id);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDeletByPath(fpath, id, requestInfo) {
        return this.proxy.extendDeletByPath(fpath, id, requestInfo);
    }
    /**
     * @param {?} fPath
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    batchDeleteByPath(fPath, ids, requestInfo) {
        return this.proxy.batchDeleteByPath(fPath, ids, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @return {?}
     */
    batchDelete(ids) {
        return this.proxy.batchDelete(ids);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    extendBatchDelete(ids, requestInfo) {
        return this.proxy.extendBatchDelete(ids, requestInfo);
    }
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    extendBatchDeletion(ids, requestInfo) {
        return this.proxy.extendBatchDeletion(ids, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} options
     * @return {?}
     */
    cancel(options) {
        return this.proxy.cancel(options);
    }
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    hasChanges(requestInfo) {
        return this.proxy.hasChanges(requestInfo);
    }
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @return {?}
     */
    request(url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, false);
    }
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param {?} url url
     * @param {?} method method
     * @param {?=} params params
     * @param {?=} options options
     * @param {?=} selfHandError 自己处理异常
     * @param {?=} ignoreError 忽略错误
     * @param {?=} ignoreChanges 忽略变更
     * @return {?}
     */
    invoke(url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        if (options && options.body && options.body.RequestInfo) {
            throw new Error('请使用requestInfo提交变更');
        }
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, true);
    }
    /**
     * 内部的request方法
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} useCorrectRequestInfoCheckMethod
     * @return {?}
     */
    innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, useCorrectRequestInfoCheckMethod) {
        options = options || {};
        /** @type {?} */
        const befSessionIdKey = 'BEFSessionID';
        // 是否自己处理异常
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // 选择检查RequestInfo的方法
        if (typeof (useCorrectRequestInfoCheckMethod) === 'undefined' || typeof (useCorrectRequestInfoCheckMethod) !== 'boolean') {
            useCorrectRequestInfoCheckMethod = false;
        }
        /** @type {?} */
        const checkRequestInfoMethod = useCorrectRequestInfoCheckMethod ? this.existRequestInfo : this.hasRequestInfo;
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 带有requestInfo的请求，请求成功后清空变更集
        /** @type {?} */
        const hasRequestInfo = checkRequestInfoMethod(options);
        /** @type {?} */
        let headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 串联session流和http流
        /** @type {?} */
        const formAppContext = this.repository.appContext.getFormAppContext();
        return BefSessionManager.getSessionId(formAppContext, this.sessionService).pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        (sessionId) => {
            headers = this.sessionService.extendRequestHeaders(headers);
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.headers && response.headers.has(befSessionIdKey)) {
                this.sessionService.setBeSessionId(response.headers.get(befSessionIdKey));
            }
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response.body)), map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const messages = ResponseInfoUtil.parseBackEndMessage(result);
            BackEndMessageUtil.handleMessage(messages, this.repository.getInjector());
            return this.handleReponseInfo(result, hasRequestInfo, ignoreChanges, options);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return this.handleErrors(error, selfHandError, ignoreError);
        })));
    }
    /**
     * 处理返回结果
     * @param {?} result
     * @param {?} hasRequestInfo
     * @param {?} ignoreChanges
     * @param {?} options
     * @return {?}
     */
    handleReponseInfo(result, hasRequestInfo, ignoreChanges, options) {
        if (hasRequestInfo) {
            // 如果有带有RequestInfo，则按新结构处理
            // 1、应用服务器端返回的变更；
            // 2、清空本地变更集；
            // 3、返回新结构
            if (result && result.innerDataChange && ignoreChanges !== true) {
                this.repository.handleDataChangeDetails(result.innerDataChange);
            }
            if (result && result.innerVariableChange) {
                this.repository.handleVariableChangeDetail(result.innerVariableChange);
            }
            this.repository.clearAllEntityChanges();
            /** @type {?} */
            const requestInfo = RequestInfoUtil.getRequestInfo(options);
            /** @type {?} */
            const variableChange = requestInfo && requestInfo.variableChange;
            this.repository.clearAllVariableChanges(variableChange);
            return result;
        }
        else {
            // 如果有没有RequestInfo，则按老的方式处理
            // 1、不处理服务器端返回的变更：跟老的行为一样；
            // 2、不清理本地变更：因为变更没有提交；
            // 3、返回老的结构：兼容老的代码
            return this.unWrapResponseInfo(result);
        }
    }
    /**
     * 错误处理
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    handleErrors(error, selfHandError, ignoreError) {
        this.clearLoading();
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            const formAppContext = this.repository.appContext.getFormAppContext();
            /** @type {?} */
            const applicationId = formAppContext.ApplicationId;
            /** @type {?} */
            const applicationContext = window[applicationId] || {};
            /** @type {?} */
            const messages = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);
            /** @type {?} */
            const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.repository.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            const willThrowException = !!this.eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages, this.repository.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: this.eventBus, error, formAppContext });
            if (!!this.eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    this.eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    }
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     * @private
     * @return {?}
     */
    clearLoading() {
        /** @type {?} */
        const ifLoadingExists = window['DEVKIT_LOADING_SERVICE'] &&
            window['DEVKIT_LOADING_SERVICE'] instanceof Array &&
            window['DEVKIT_LOADING_SERVICE'].length > 0 || false;
        if (ifLoadingExists === false) {
            this.clearAllLoading();
            return;
        }
        /** @type {?} */
        const loadingServices = window['DEVKIT_LOADING_SERVICE'];
        for (const service of loadingServices) {
            if (typeof (service.destroy) === 'function') {
                service.destroy();
            }
        }
        this.clearAllLoading();
    }
    /**
     * @private
     * @return {?}
     */
    clearAllLoading() {
        if (this.loadingService) {
            window.setTimeout((/**
             * @return {?}
             */
            () => {
                this.loadingService.clearAll();
            }), 350);
        }
    }
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    unWrapResponseInfo(result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    }
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    hasRequestInfo(options) {
        return RequestInfoUtil.hasRequestInfoWithR(options);
    }
    /**
     * 是否带有requestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    existRequestInfo(options) {
        return RequestInfoUtil.hasRequestInfo(options);
    }
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    buildParams(params) {
        return HttpParamUtil.buildParams(params);
    }
    /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * \@body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     * @param {?} body
     * @return {?}
     */
    buildBodyWithRequestInfo(body) {
        return RequestInfoUtil.buildBodyWithRequestInfo(body, this.repository);
    }
    /**
     * 构造RequestInfo
     * @return {?}
     */
    buildRequestInfo() {
        return RequestInfoUtil.buildRequestInfo(this.repository);
    }
}
BefRestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefRestService.ctorParameters = () => [
    { type: HttpClient },
    { type: String },
    { type: FrameworkSessionService },
    { type: BefRepository },
    { type: EventBus }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_lookup.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助Rest取数服务
 */
class BefLookupRestService {
    /**
     * 构造函数
     * @param {?} repository
     * @param {?} frameContext
     */
    constructor(repository, frameContext) {
        this.frameContext = frameContext;
        this.befRepository = (/** @type {?} */ (repository));
        this.registerDestroyEvent();
        this.loadingService = this.frameContext && this.frameContext.injector.get(LoadingService, null);
    }
    /**
     * @private
     * @return {?}
     */
    registerDestroyEvent() {
        if (this.frameContext && this.frameContext.destorySignal) {
            this.frameContext.destorySignal.subscribe((/**
             * @return {?}
             */
            () => {
                this.frameContext = null;
                this.befRepository = null;
            }));
        }
    }
    /**
     * @param {?} helpMetadataId
     * @param {?=} data
     * @return {?}
     */
    getData(helpMetadataId, data) {
        /** @type {?} */
        const tableName = helpMetadataId.split('.')[0];
        /** @type {?} */
        const labelId = helpMetadataId.split('.')[1];
        data = data || {};
        if (this.frameContext) {
            /** @type {?} */
            const primaryValue = this.frameContext.bindingData.list.currentId;
            data['currentForm'] = {
                id: primaryValue
            };
        }
        /** @type {?} */
        const enableExtendLoadMethod = this.ifEnableExtendLoadMethod(helpMetadataId);
        if (enableExtendLoadMethod === true) {
            return this.extendGetHelpData(labelId, tableName, data);
        }
        return this.getHelpData(labelId, tableName, data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    saveUserSettings(data) {
        /** @type {?} */
        const url = '/api/runtime/bcc/v1.0/datagrid/settings';
        return this.befRepository.restService.invoke(url, 'POST', null, { body: data }, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.clearLoading();
            /** @type {?} */
            const formAppContext = this.befRepository.appContext.getFormAppContext();
            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getUserSettings(key) {
        /** @type {?} */
        const url = '/api/runtime/bcc/v1.0/datagrid/settings/' + key;
        return this.befRepository.restService.invoke(url, 'GET', null, null, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.clearLoading();
            /** @type {?} */
            const formAppContext = this.befRepository.appContext.getFormAppContext();
            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    }
    /**
     * 是否启用扩展取数方法
     * @private
     * @param {?} helpMetadataId
     * @return {?}
     */
    ifEnableExtendLoadMethod(helpMetadataId) {
        // 优先使用context里的设置
        if (this.context && this.context.hasOwnProperty('enableExtendLoadMethod')) {
            return this.context.enableExtendLoadMethod;
        }
        // context没有设置时，继续使用通过指令设置的开关
        /** @type {?} */
        let enableExtendLoadMethod = false;
        if (this.frameContext) {
            /** @type {?} */
            const befApiUrl = this.frameContext.repository.apiUri;
            /** @type {?} */
            const enableKey = `${helpMetadataId}@${befApiUrl}`;
            enableExtendLoadMethod = this.frameContext.getParam(enableKey);
        }
        return enableExtendLoadMethod;
    }
    /**
     * 老的帮助取树
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    getHelpData(labelId, tableName, data) {
        /** @type {?} */
        const url = `${this.befRepository.restService.baseUri}/elementhelps/${labelId}`;
        /** @type {?} */
        const update$ = this.befRepository.updateDataAndVariableChanges();
        /** @type {?} */
        const result$ = update$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            this.extendQueryParam(data);
            // tslint:disable-next-line: max-line-length
            return this.befRepository.restService.invoke(url, 'GET', { nodeCode: tableName, queryParam: JSON.stringify(data) }, null, false).pipe(catchError((/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.clearLoading();
                /** @type {?} */
                const formAppContext = this.befRepository.appContext.getFormAppContext();
                this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
                return EMPTY;
            })));
        })));
        return result$;
    }
    /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    extendGetHelpData(labelId, tableName, data) {
        /** @type {?} */
        const url = `${this.befRepository.restService.baseUri}/extension/elementhelps`;
        this.extendQueryParam(data);
        /** @type {?} */
        const body = {
            labelId: labelId,
            nodeCode: tableName,
            queryParam: data,
            requestInfo: this.befRepository.restService.buildRequestInfo()
        };
        /** @type {?} */
        const options = {
            body: body
        };
        /** @type {?} */
        const result$ = this.befRepository.restService.invoke(url, 'PUT', null, options, false, true);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            return responseInfo && responseInfo.returnValue || null;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.clearLoading();
            /** @type {?} */
            const formAppContext = this.befRepository.appContext.getFormAppContext();
            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    clearLoading() {
        if (this.loadingService) {
            this.loadingService.clearAll();
        }
    }
    /**
     * @private
     * @param {?} data
     * @param {?=} layer
     * @param {?=} parentPathCode
     * @return {?}
     */
    convert2TreeDataWithPathCode(data, layer = 1, parentPathCode = '01') {
        /** @type {?} */
        let nodes = data.filter((/**
         * @param {?} d
         * @return {?}
         */
        d => d.layer === layer && d.pathcode === parentPathCode));
        if (layer > 1) {
            nodes = data.filter((/**
             * @param {?} d
             * @return {?}
             */
            d => d.layer === layer && d.pathcode.substr(0, (layer - 1) * 2) === parentPathCode));
        }
        if (nodes.length) {
            /** @type {?} */
            const treeNodes = nodes.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    data: n,
                    children: []
                };
            }));
            treeNodes.forEach((/**
             * @param {?} tn
             * @return {?}
             */
            tn => {
                /** @type {?} */
                const _tns = this.convert2TreeDataWithPathCode(data, tn.data.layer + 1, tn.data.pathcode);
                tn.children.push(..._tns);
            }));
            return treeNodes;
        }
    }
    /**
     * @private
     * @param {?} queryParam
     * @return {?}
     */
    extendQueryParam(queryParam) {
        if (queryParam && typeof queryParam === 'object') {
            /** @type {?} */
            const paths = this.getPath();
            queryParam.relationFilterFieldInfo = paths;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getPath() {
        /** @type {?} */
        const bindingPath = this.frameContext.viewModel.bindingPath;
        /** @type {?} */
        const rid = this.frameContext.viewModel.bindingData.list.currentId;
        // root表数据id
        /** @type {?} */
        let path = rid;
        /** @type {?} */
        const subPaths = bindingPath.split('/').filter((/**
         * @param {?} p
         * @return {?}
         */
        p => p));
        if (subPaths.length > 0) {
            /** @type {?} */
            let subData = this.frameContext.viewModel.bindingData;
            for (let index = 0; index < subPaths.length; index++) {
                /** @type {?} */
                const subPath = subPaths[index];
                subData = subData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath.substring(0, subPath.length - 1)}/${subData.currentId}`;
            }
            // path += '/' + subPaths[subPaths.length - 1]+'/' + ;
        }
        return path;
    }
}
BefLookupRestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefLookupRestService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_lookup_default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助Rest取数服务
 */
class BefLookupDefaultService {
    /**
     * @param {?} repository
     * @param {?} sessionService
     */
    constructor(repository, sessionService) {
        this.sessionService = sessionService;
        this.befRepository = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    createSession(url) {
        /** @type {?} */
        const userSessionID = this.sessionService.getUserSessionId();
        if (userSessionID) {
            return this.befRepository.restService.invoke(url, 'POST', null, {
                headers: new HttpHeaders({ 'SessionId': userSessionID }),
                responseType: 'text'
            }, false).pipe(switchMap((/**
             * @param {?} str
             * @return {?}
             */
            (str) => {
                return of({ status: true, payload: str });
            })));
        }
        else {
            return of({ status: false, payload: '用户登录信息已过期，请重新登录' });
        }
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        let entityFilter = {};
        if (params.condition) {
            entityFilter = params.condition;
        }
        if (url[url.length - 1] === '/') {
            url = url.substr(0, url.length - 1);
        }
        /** @type {?} */
        let queryUrl = `${url}/extension/query`;
        /** @type {?} */
        let createSessionUrl = `${url}/service/createsession`;
        if (entityFilter) {
            /** @type {?} */
            const entityFilterJson = JSON.stringify(entityFilter);
            queryUrl = `${queryUrl}?entityFilter=${entityFilterJson}`;
        }
        return this.createSession(createSessionUrl).pipe(switchMap((/**
         * @param {?} usrSess
         * @return {?}
         */
        (usrSess) => {
            if (usrSess.status) {
                /** @type {?} */
                const sessionId = usrSess.payload;
                /** @type {?} */
                const options = {};
                // if (options.headers) {
                //     options.headers = options.headers.append('SessionId', usrSess.payload);
                // } else {
                // options.headers = new HttpHeaders({ SessionId: sessionId });
                // }
                // const token = this.befRepository.restService.sessionService.token;
                // options.headers = options.headers.append('X-CAF-Runtime-CommonVariable', token);
                // options.headers = options.headers.append('X-CAF-Runtime-Context', sessionId);
                return this.befRepository.restService.invoke(queryUrl, 'PUT', null, options, false);
            }
            else {
                // @todo: ng7
                // return new ErrorObservable(usrSess.payload);
                throw new Error(usrSess.payload);
            }
        })), map$1((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const val = res.returnValue;
            /** @type {?} */
            const data = { items: val.result };
            if (val.pagination) {
                return Object.assign({}, data, {
                    total: val.pagination.totalCount,
                    pageInfo: {
                        pageSize: val.pagination.pageSize,
                        pageIndex: val.pagination.pageIndex,
                        enablePager: true
                    }
                });
            }
            return data;
        })));
    }
}
BefLookupDefaultService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefLookupDefaultService.ctorParameters = () => [
    { type: Repository },
    { type: FrameworkSessionService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BefRepositoryUtil {
    /**
     * 检查BefRepository是否存在未保存数据
     * @param {?} befRepository
     * @return {?}
     */
    static isExistUnsaveData(befRepository) {
        /** @type {?} */
        let hasUnsavedData = false;
        if (!befRepository || !befRepository.entityCollection) {
            throw 'Current Object is null or it\'s entityCollection is null.';
        }
        /** @type {?} */
        const entityArray = befRepository.entityCollection.toArray();
        if (befRepository.dataChangeHistory.isChanged()) {
            return true;
        }
        for (let i = 0; i < entityArray.length; i++) {
            if (entityArray[i].changes.length > 0) {
                hasUnsavedData = true;
                break;
            }
        }
        return hasUnsavedData;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/uri.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Uri {
    /**
     * @param {?} url
     * @param {?=} paths
     */
    constructor(url, paths = null) {
        this.url = url;
        this.paths = paths;
        if (!!this.paths) {
            Object.keys(paths).forEach((/**
             * @param {?} path
             * @return {?}
             */
            path => {
                if (this.url.indexOf(`{${path}}`) !== -1) {
                    this.url = this.url.replace(`{${path}}`, `${paths[path]}`);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    toString() {
        return this.url;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_combo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultComboHttpService {
    /**
     * @param {?} repository
     */
    constructor(repository) {
        this.befRest = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    getData(url, params = {}, method = 'GET') {
        /** @type {?} */
        const headers = new HttpHeaders({ 'content-type': 'application/json' })
        // return this.befRest.restService.invoke(url, method, params, { headers });
        ;
        // return this.befRest.restService.invoke(url, method, params, { headers });
        if (method.toLowerCase() !== 'get') {
            return this.befRest.restService.invoke(url, method, null, { headers, body: params });
        }
        else {
            return this.befRest.restService.invoke(url, method, params, { headers });
        }
    }
}
DefaultComboHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DefaultComboHttpService.ctorParameters = () => [
    { type: Repository }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_dynamic_control_group_default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultDynamiControlGroupHttpService {
    /**
     * @param {?} repository
     */
    constructor(repository) {
        this.befRest = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    getData(url, params = {}, method = 'GET') {
        /** @type {?} */
        const headers = new HttpHeaders({ 'content-type': 'application/json' });
        return this.befRest.restService.invoke(url, method, params, { headers });
    }
}
DefaultDynamiControlGroupHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DefaultDynamiControlGroupHttpService.ctorParameters = () => [
    { type: Repository }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class DynamicBefRepository extends BefRepository {
    // public paginationInfo = {
    //   Entity: {
    //     pageSize: 20,
    //   },
    // };
    /**
     * @param {?} injector
     * @param {?} name
     * @param {?} entityType
     * @param {?} serverUri
     * @param {?} apiUri
     */
    constructor(injector, name, entityType, serverUri, apiUri) {
        super(injector);
        this.name = name;
        this.entityType = entityType;
        this.serverUri = serverUri;
        this.apiUri = apiUri;
        this.apiUri = apiUri;
        // 构造分页属性信息
        /** @type {?} */
        const paginationInfo = {};
        paginationInfo[entityType.typeName] = { pageSize: 20 };
        this.paginationInfo = paginationInfo;
        this.name = name;
        this.entityTypeInfo = new DataTypeInfo(this.entityType);
        this.entityCollection = new EntityCollection(this.entityType);
        // 初始化实体管理器
        this.entityManager = new BefEntityManager(this.entityCollection);
        // 设置proxy属性值
        /** @type {?} */
        const httpClient = injector.get(HttpClient);
        /** @type {?} */
        const uriService = new UriService(serverUri);
        /** @type {?} */
        const proxy = new BefProxy(httpClient, uriService);
        /** @type {?} */
        const baseUri = uriService.extendUri(apiUri);
        proxy.setBaseUri(baseUri);
        this.proxy = proxy;
        this.dataService = new BefDataService(injector, this);
        this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
    }
    /**
     * @param {?} defaultValues
     * @return {?}
     */
    batchAppend(defaultValues) {
        throw new Error('Method not implemented.');
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/preset_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class PresetBefRepository extends BefRepository {
    /**
     * @param {?} injector
     * @param {?} schema
     */
    constructor(injector, schema) {
        super(injector);
        this.schema = schema;
        /** @type {?} */
        const entityTypeFactory = new EntityTypeFactory();
        this.entityType = (/** @type {?} */ (entityTypeFactory.create(schema)));
        this.entityTypeInfo = new DataTypeInfo(this.entityType);
        this.entityCollection = new EntityCollection(this.entityType);
        // 初始化实体管理器
        this.entityManager = new BefEntityManager(this.entityCollection);
    }
    /**
     * @param {?} defaultValues
     * @return {?}
     */
    batchAppend(defaultValues) {
        throw new Error('Method not implemented.');
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const VERSION = 'ver.';

/**
 * @fileoverview added by tsickle
 * Generated from: farris-bef.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { VERSION, ChangeDetailType, BE_SERVER_URI_TOKEN, BE_SESSION_HANDLING_STRATEGY_TOKEN, BefChangeBuilder, BefChangeHandler, BefSessionService, BefRestService, BefProxy, BefLookupRestService, BefLookupDefaultService, BefRepository, FrameworkSessionService, NG_VARIABLE, NgVariable, BefRepositoryUtil, BefDataPathUtil, UriService, Uri, DefaultComboHttpService, DefaultDynamiControlGroupHttpService, BefEntityManager, DynamicBefRepository, PresetBefRepository, BefVariableManager, DeprecatedBefRepository as ɵa };

//# sourceMappingURL=farris-bef.js.map