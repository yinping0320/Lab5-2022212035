/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变更集工具类
 */
class BefChangeUtil {
    /**
     * 创建空的ChangeDetail
     * @param {?} type   the type of change
     * @param {?=} dataId the identity of the entity whose properties's values have changed
     * @return {?}
     */
    static createEmpty(type, dataId) {
        /** @type {?} */
        const changeDetail = {
            ChangeType: type,
            ChangeInfo: {}
        };
        if (dataId) {
            changeDetail.ChangeInfo['DataId'] = dataId;
        }
        return changeDetail;
    }
    /**
     * Get changes from an ChangeDetail object or an plain object
     * @param {?} changeDetail 变更详情
     * @return {?}
     */
    static getChangeInfo(changeDetail) {
        /** @type {?} */
        const isChangeDetail = this.isChangeDetail(changeDetail);
        if (isChangeDetail === true) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    }
    /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     * @param {?} changeDetail
     * @return {?}
     */
    static isChangeDetail(changeDetail) {
        // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.
        /** @type {?} */
        const keys = Object.keys(changeDetail);
        return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;
    }
}
export { BefChangeUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2NoYW5nZV91dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9iZWYvIiwic291cmNlcyI6WyJsaWIvYmVmX2NoYW5nZV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBS0EsTUFBTSxhQUFhOzs7Ozs7O0lBT2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBc0IsRUFBRSxNQUFlOztjQUNsRCxZQUFZLEdBQWlCO1lBQ2pDLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFVBQVUsRUFBRSxFQUFFO1NBQ2Y7UUFFRCxJQUFJLE1BQU0sRUFBRTtZQUNWLFlBQVksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFFO1NBQzdDO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs7Ozs7O0lBTUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFpQjs7Y0FFOUIsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1FBQ3hELElBQUksY0FBYyxLQUFLLElBQUksRUFBRTtZQUMzQixPQUFPLFlBQVksQ0FBQyxVQUFVLENBQUM7U0FDaEM7YUFBTTtZQUNMLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7Ozs7O0lBTUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFpQjs7O2NBRy9CLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRyxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRhaWxUeXBlLCBDaGFuZ2VEZXRhaWwgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbi8qKlxyXG4gKiDlj5jmm7Tpm4blt6XlhbfnsbtcclxuICovXHJcbmNsYXNzIEJlZkNoYW5nZVV0aWwge1xyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rnqbrnmoRDaGFuZ2VEZXRhaWxcclxuICAgKiBAcGFyYW0gdHlwZSAgIHRoZSB0eXBlIG9mIGNoYW5nZVxyXG4gICAqIEBwYXJhbSBkYXRhSWQgdGhlIGlkZW50aXR5IG9mIHRoZSBlbnRpdHkgd2hvc2UgcHJvcGVydGllcydzIHZhbHVlcyBoYXZlIGNoYW5nZWRcclxuICAgKi9cclxuICBzdGF0aWMgY3JlYXRlRW1wdHkodHlwZTogQ2hhbmdlRGV0YWlsVHlwZSwgZGF0YUlkPzogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjaGFuZ2VEZXRhaWw6IENoYW5nZURldGFpbCA9IHtcclxuICAgICAgQ2hhbmdlVHlwZTogdHlwZSxcclxuICAgICAgQ2hhbmdlSW5mbzoge31cclxuICAgIH07XHJcblxyXG4gICAgaWYgKGRhdGFJZCkge1xyXG4gICAgICBjaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mb1snRGF0YUlkJ10gPSBkYXRhSWQgO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoYW5nZURldGFpbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBjaGFuZ2VzIGZyb20gYW4gQ2hhbmdlRGV0YWlsIG9iamVjdCBvciBhbiBwbGFpbiBvYmplY3RcclxuICAgKiBAcGFyYW0gY2hhbmdlRGV0YWlsIOWPmOabtOivpuaDhVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRDaGFuZ2VJbmZvKGNoYW5nZURldGFpbDogYW55KTogYW55IHtcclxuXHJcbiAgICBjb25zdCBpc0NoYW5nZURldGFpbCA9IHRoaXMuaXNDaGFuZ2VEZXRhaWwoY2hhbmdlRGV0YWlsKTtcclxuICAgIGlmIChpc0NoYW5nZURldGFpbCA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gY2hhbmdlRGV0YWlsLkNoYW5nZUluZm87XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gY2hhbmdlRGV0YWlsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgd2hldGhlciB0aGUgY2hhbmdlRGV0aWFsIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgQ2hhbmdlRGV0aWFsIGNsYXNzLlxyXG4gICAqIEBwYXJhbSBjaGFuZ2VEZXRhaWxcclxuICAgKi9cclxuICBzdGF0aWMgaXNDaGFuZ2VEZXRhaWwoY2hhbmdlRGV0YWlsOiBhbnkpIHtcclxuXHJcbiAgICAvLyBAdG9kbzogaWYgdGhlIGFzc29jaWF0ZWQgb2JqZWN0IGhhcyBvbmx5IHR3byBwcm9wZXJ0aWVzOiBDaGFuZ2VUeXBlIGFuZCBDaGFuZ2VJbmZvLCBpdCBmYWlscy5cclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjaGFuZ2VEZXRhaWwpO1xyXG4gICAgcmV0dXJuIGtleXMubGVuZ3RoID09PSAyICYmIGtleXMuaW5kZXhPZignQ2hhbmdlVHlwZScpID4gLTEgJiYga2V5cy5pbmRleE9mKCdDaGFuZ2VJbmZvJykgPiAtMTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJlZkNoYW5nZVV0aWwgfTtcclxuIl19