/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_lookup_default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { Repository } from '@farris/devkit';
import { map } from 'rxjs/operators/map';
import { HttpHeaders } from '@angular/common/http';
import { FrameworkSessionService } from './framework_session_service';
/**
 * 帮助Rest取数服务
 */
export class BefLookupDefaultService {
    /**
     * @param {?} repository
     * @param {?} sessionService
     */
    constructor(repository, sessionService) {
        this.sessionService = sessionService;
        this.befRepository = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    createSession(url) {
        /** @type {?} */
        const userSessionID = this.sessionService.getUserSessionId();
        if (userSessionID) {
            return this.befRepository.restService.invoke(url, 'POST', null, {
                headers: new HttpHeaders({ 'SessionId': userSessionID }),
                responseType: 'text'
            }, false).pipe(switchMap((/**
             * @param {?} str
             * @return {?}
             */
            (str) => {
                return of({ status: true, payload: str });
            })));
        }
        else {
            return of({ status: false, payload: '用户登录信息已过期，请重新登录' });
        }
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    getData(url, params) {
        /** @type {?} */
        let entityFilter = {};
        if (params.condition) {
            entityFilter = params.condition;
        }
        if (url[url.length - 1] === '/') {
            url = url.substr(0, url.length - 1);
        }
        /** @type {?} */
        let queryUrl = `${url}/extension/query`;
        /** @type {?} */
        let createSessionUrl = `${url}/service/createsession`;
        if (entityFilter) {
            /** @type {?} */
            const entityFilterJson = JSON.stringify(entityFilter);
            queryUrl = `${queryUrl}?entityFilter=${entityFilterJson}`;
        }
        return this.createSession(createSessionUrl).pipe(switchMap((/**
         * @param {?} usrSess
         * @return {?}
         */
        (usrSess) => {
            if (usrSess.status) {
                /** @type {?} */
                const sessionId = usrSess.payload;
                /** @type {?} */
                const options = {};
                // if (options.headers) {
                //     options.headers = options.headers.append('SessionId', usrSess.payload);
                // } else {
                // options.headers = new HttpHeaders({ SessionId: sessionId });
                // }
                // const token = this.befRepository.restService.sessionService.token;
                // options.headers = options.headers.append('X-CAF-Runtime-CommonVariable', token);
                // options.headers = options.headers.append('X-CAF-Runtime-Context', sessionId);
                return this.befRepository.restService.invoke(queryUrl, 'PUT', null, options, false);
            }
            else {
                // @todo: ng7
                // return new ErrorObservable(usrSess.payload);
                throw new Error(usrSess.payload);
            }
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const val = res.returnValue;
            /** @type {?} */
            const data = { items: val.result };
            if (val.pagination) {
                return Object.assign({}, data, {
                    total: val.pagination.totalCount,
                    pageInfo: {
                        pageSize: val.pagination.pageSize,
                        pageIndex: val.pagination.pageIndex,
                        enablePager: true
                    }
                });
            }
            return data;
        })));
    }
}
BefLookupDefaultService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefLookupDefaultService.ctorParameters = () => [
    { type: Repository },
    { type: FrameworkSessionService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefLookupDefaultService.prototype.befRepository;
    /**
     * @type {?}
     * @private
     */
    BefLookupDefaultService.prototype.sessionService;
}
//# sourceMappingURL=data:application/json;base64,