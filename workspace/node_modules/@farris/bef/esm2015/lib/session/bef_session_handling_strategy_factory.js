/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy_factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-11 20:32:02
 * @Last Modified by: Witt
 * @Last Modified time: 2020-03-03 16:46:39
 */
import { Injectable } from '@angular/core';
import { SessionStorageBeSessionStorageStrategy } from './bef_session_storage_strategy';
import { BefUnifiedSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy } from './bef_session_handling_strategy';
/**
 * BeSession处理策略工厂
 */
class BefSessionHandlingStrategyFactory {
    /**
     * 创建BeSession处理策略
     * @param {?} handlingStrategyName
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @param {?} httpClient
     * @param {?} injector
     * @return {?}
     */
    create(handlingStrategyName, frmSessionService, beBaseUri, httpClient, injector) {
        /** @type {?} */
        const storageStrategy = this.createStorageStrategy();
        /** @type {?} */
        const beSessionUri = this.createBeSessionUri(beBaseUri);
        if (handlingStrategyName === 'UnifiedSession') {
            return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beSessionUri, injector);
        }
        else {
            return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beSessionUri, injector);
        }
    }
    /**
     * 创建BeSession缓存策略
     * @private
     * @return {?}
     */
    createStorageStrategy() {
        return new SessionStorageBeSessionStorageStrategy();
    }
    /**
     * 创建BeSession地址
     * @private
     * @param {?} beBaseUri
     * @return {?}
     */
    createBeSessionUri(beBaseUri) {
        return `${beBaseUri}/service/createsession`;
    }
}
BefSessionHandlingStrategyFactory.decorators = [
    { type: Injectable }
];
export { BefSessionHandlingStrategyFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX3Nlc3Npb25faGFuZGxpbmdfc3RyYXRlZ3lfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL3Nlc3Npb24vYmVmX3Nlc3Npb25faGFuZGxpbmdfc3RyYXRlZ3lfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQU9BLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxlQUFlLENBQUM7QUFHckQsT0FBTyxFQUNxQixzQ0FBc0MsRUFDakUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBQ3VCLGlDQUFpQyxFQUFFLG1DQUFtQyxFQUNuRyxNQUFNLGlDQUFpQyxDQUFDOzs7O0FBTXpDLE1BQ00saUNBQWlDOzs7Ozs7Ozs7O0lBSzlCLE1BQU0sQ0FDWCxvQkFBNEIsRUFBRSxpQkFBMEMsRUFDeEUsU0FBaUIsRUFBRSxVQUFzQixFQUFFLFFBQWtCOztjQUd2RCxlQUFlLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFOztjQUM5QyxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQztRQUV2RCxJQUFJLG9CQUFvQixLQUFLLGdCQUFnQixFQUFFO1lBQzdDLE9BQU8sSUFBSSxpQ0FBaUMsQ0FBQyxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzFHO2FBQU07WUFDTCxPQUFPLElBQUksbUNBQW1DLENBQUMsZUFBZSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDeEg7SUFDSCxDQUFDOzs7Ozs7SUFLTyxxQkFBcUI7UUFDM0IsT0FBTyxJQUFJLHNDQUFzQyxFQUFFLENBQUM7SUFDdEQsQ0FBQzs7Ozs7OztJQUtPLGtCQUFrQixDQUFDLFNBQWlCO1FBQzFDLE9BQU8sR0FBRyxTQUFTLHdCQUF3QixDQUFDO0lBQzlDLENBQUM7OztZQWpDRixVQUFVOztBQW9DWCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IFdpdHRcclxuICogQERhdGU6IDIwMTgtMTAtMTEgMjA6MzI6MDJcclxuICogQExhc3QgTW9kaWZpZWQgYnk6IFdpdHRcclxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAyMC0wMy0wMyAxNjo0NjozOVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi4vZnJhbWV3b3JrX3Nlc3Npb25fc2VydmljZSc7XHJcbmltcG9ydCB7XHJcbiAgQmVTZXNzaW9uU3RvcmFnZVN0cmF0ZWd5LCBTZXNzaW9uU3RvcmFnZUJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneVxyXG59IGZyb20gJy4vYmVmX3Nlc3Npb25fc3RvcmFnZV9zdHJhdGVneSc7XHJcbmltcG9ydCB7XHJcbiAgQmVmU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3ksIEJlZlVuaWZpZWRTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSwgQmVmU2VwYXJhdGVkU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3lcclxufSBmcm9tICcuL2JlZl9zZXNzaW9uX2hhbmRsaW5nX3N0cmF0ZWd5JztcclxuXHJcblxyXG4vKipcclxuICogQmVTZXNzaW9u5aSE55CG562W55Wl5bel5Y6CXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEJlZlNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5RmFjdG9yeSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7ukJlU2Vzc2lvbuWkhOeQhuetlueVpVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGUoXHJcbiAgICBoYW5kbGluZ1N0cmF0ZWd5TmFtZTogc3RyaW5nLCBmcm1TZXNzaW9uU2VydmljZTogRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UsXHJcbiAgICBiZUJhc2VVcmk6IHN0cmluZywgaHR0cENsaWVudDogSHR0cENsaWVudCwgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgKTogQmVmU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3kge1xyXG5cclxuICAgIGNvbnN0IHN0b3JhZ2VTdHJhdGVneSA9IHRoaXMuY3JlYXRlU3RvcmFnZVN0cmF0ZWd5KCk7XHJcbiAgICBjb25zdCBiZVNlc3Npb25VcmkgPSB0aGlzLmNyZWF0ZUJlU2Vzc2lvblVyaShiZUJhc2VVcmkpO1xyXG5cclxuICAgIGlmIChoYW5kbGluZ1N0cmF0ZWd5TmFtZSA9PT0gJ1VuaWZpZWRTZXNzaW9uJykge1xyXG4gICAgICByZXR1cm4gbmV3IEJlZlVuaWZpZWRTZXNzaW9uSGFuZGxpbmdTdHJhdGVneShzdG9yYWdlU3RyYXRlZ3ksIGZybVNlc3Npb25TZXJ2aWNlLCBiZVNlc3Npb25VcmksIGluamVjdG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBuZXcgQmVmU2VwYXJhdGVkU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3koc3RvcmFnZVN0cmF0ZWd5LCBmcm1TZXNzaW9uU2VydmljZSwgaHR0cENsaWVudCwgYmVTZXNzaW9uVXJpLCBpbmplY3Rvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7pCZVNlc3Npb27nvJPlrZjnrZbnlaVcclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZVN0b3JhZ2VTdHJhdGVneSgpOiBCZVNlc3Npb25TdG9yYWdlU3RyYXRlZ3kge1xyXG4gICAgcmV0dXJuIG5ldyBTZXNzaW9uU3RvcmFnZUJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu6QmVTZXNzaW9u5Zyw5Z2AXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjcmVhdGVCZVNlc3Npb25VcmkoYmVCYXNlVXJpOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke2JlQmFzZVVyaX0vc2VydmljZS9jcmVhdGVzZXNzaW9uYDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJlZlNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5RmFjdG9yeSB9O1xyXG5cclxuXHJcbiJdfQ==