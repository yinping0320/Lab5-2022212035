/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { of, zip } from 'rxjs';
import { tap, map, switchMap } from 'rxjs/operators';
import { EventBus, AppContext, DataChangeType, DataTypeInfoUtil, ViewModel, ExpressionUtil } from '@farris/devkit';
import { FrameworkSessionService } from './framework_session_service';
import { BefRestService } from './bef_rest_service';
import { BE_SERVER_URI_TOKEN } from './tokens';
import { BefProxyUtil } from './bef_proxy_util';
import { EntityUtil } from './entity_util';
import { BefDataPathUtil } from './bef_data_path_util';
/**
 * Bef数据访问服务
 * \@todo：
 * 1、临时将BefRepository相关代码转移到该类中；
 * 2、进一步明确职责，调整结构
 * @template T
 */
// tslint:disable: no-string-literal
class BefDataService {
    /**
     * 构造函数
     * @param {?} injector
     * @param {?} repository
     */
    constructor(injector, repository) {
        this.injector = injector;
        this.repository = repository;
        /** @type {?} */
        const frmSessionService = injector.get(FrameworkSessionService);
        /** @type {?} */
        const httpClient = injector.get(HttpClient);
        /** @type {?} */
        const serverUri = injector.get(BE_SERVER_URI_TOKEN);
        // 创建BefRestService实例
        /** @type {?} */
        const restBaseUri = `${serverUri}/${this.repository.apiUri}`;
        /** @type {?} */
        const eventBus = injector.get(EventBus);
        this.restService = new BefRestService(httpClient, restBaseUri, frmSessionService, this.repository, eventBus);
        this.appContext = injector.get(AppContext);
    }
    /**
     * BefRest代理
     * @return {?}
     */
    get restProxy() {
        return this.repository.restService.proxy;
    }
    /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    getList(filter, sort, pageSize, pageIndex) {
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const filter$ = this.restProxy.extendQuery(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            const listData = queryResult.result;
            /** @type {?} */
            const entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                /** @type {?} */
                const entity = this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            const serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                const { pageSize, pageIndex, totalCount } = serverPaginationInfo;
                // 处理主表分页信息
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });
            }
            else {
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    }
    /**
     * 过滤数据
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 当前分页
     * @return {?}
     */
    filter(filter, sort, pageSize, pageIndex) {
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const filter$ = this.restProxy.filter(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            const listData = queryResult.result;
            /** @type {?} */
            const entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                /** @type {?} */
                const entity = this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            const serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                const { pageSize, pageIndex, totalCount } = serverPaginationInfo;
                // 处理主表分页信息
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex, pageSize, totalCount });
            }
            else {
                this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    }
    /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    buildEntityFilter(filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].relation = 0;
        }
        /** @type {?} */
        const entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
    /**
     * 获取单个实体
     * @param {?} id id
     * @return {?}
     */
    getById(id) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.getEntityById(id);
        }
        /** @type {?} */
        const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const entityData = responseInfo.returnValue;
            /** @type {?} */
            const entity = this.repository.buildEntity(entityData);
            this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getEntityById(id) {
        // 获取所有分页信息
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            const entityData = returnValue.result;
            /** @type {?} */
            const serverPaginationInfo = returnValue.pagination;
            this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            const entity = this.repository.buildEntity(entityData);
            this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    }
    /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    queryChild(paths, pageIndex, pageSize, filter, sort) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        let nodeCodes = BefDataPathUtil.convertPathsToNodeCodes(paths);
        /** @type {?} */
        const entityCodes = nodeCodes.map((/**
         * @param {?} node
         * @return {?}
         */
        node => node.substring(0, node.length - 1)));
        /** @type {?} */
        let entityName = entityCodes[entityCodes.length - 1];
        // 查询对象可能为从表或从从表
        /** @type {?} */
        const pagination = this.repository.entityCollection.getPaginationConfigByPath(`/${entityName}`);
        const { pageSize: ps = 0 } = pagination || {};
        /** @type {?} */
        const viewModel = this.injector.get(ViewModel, null);
        /** @type {?} */
        let forceQueryChild = false;
        if (viewModel) {
            forceQueryChild = viewModel.frameContext.appContext.params.get('forceQueryChild') || false;
        }
        if (ps == 0 && !forceQueryChild) {
            return of(null);
        }
        /** @type {?} */
        const ids = BefDataPathUtil.convertPathsToIds(paths);
        /** @type {?} */
        const parentId = ids[ids.length - 1];
        /** @type {?} */
        const params = {
            nodeCodes: entityCodes,
            ids,
            pagination: {
                pageIndex,
                pageSize
            },
            requestInfo
        };
        /** @type {?} */
        const request$ = this.restService.queryChild(params);
        return request$.pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const returnValue = response.returnValue;
            if (!returnValue) {
                return null;
            }
            const { result = [], pagination = {} } = returnValue;
            /** @type {?} */
            const commonPaths = paths.map((/**
             * @param {?} path
             * @param {?} index
             * @return {?}
             */
            (path, index) => {
                if (path.includes(':') && index % 2 === 0) {
                    return path.split(':')[1];
                }
                return path;
            }));
            /** @type {?} */
            const entities = this.repository.entityManager.createEntitiesByPath(`/${commonPaths.join('/')}`, result);
            this.repository.entityCollection.resetEntities(paths, entities);
            // 更新分页信息
            this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}`, { pageIndex: pagination.pageIndex, pageSize: pagination.pageSize });
            this.repository.entityCollection.setPaginationConfigByPath(`/${entityName}_${parentId}`, pagination);
        })));
    }
    /**
     * 构造子表分页信息
     * @private
     * @return {?}
     */
    buildChildrenPagination() {
        /** @type {?} */
        const paginationInfo = this.repository.entityCollection.getPaginationConfigByPath('/');
        /** @type {?} */
        const childPaginationInfo = {};
        /** @type {?} */
        const childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        // 实体无子表
        if (!childrenEntityCodes || childrenEntityCodes.length < 1) {
            return null;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const value = paginationInfo[key];
            if (typeof value === 'object') {
                /** @type {?} */
                const entityCode = key && key.includes('_') && key.split('_')[0] || null;
                if (!(entityCode && childrenEntityCodes.includes(`${entityCode}s`))) {
                    childPaginationInfo[key] = value;
                }
            }
        }));
        return childPaginationInfo;
    }
    /**
     * 更新分页配置信息
     * @private
     * @param {?} paginationInfo 服务器分页信息
     * @return {?}
     */
    updatePagination(paginationInfo) {
        if (!paginationInfo) {
            return;
        }
        /** @type {?} */
        let childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        childrenEntityCodes = childrenEntityCodes.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item.substr(0, item.length - 1)));
        // retrieve之后没有子表数据
        if (!paginationInfo || Object.keys(paginationInfo).length < 1) {
            if (childrenEntityCodes && childrenEntityCodes.length > 0) {
                childrenEntityCodes.forEach((/**
                 * @param {?} nodeCode
                 * @return {?}
                 */
                (nodeCode) => {
                    /** @type {?} */
                    const original = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`);
                    if (original) {
                        //original.pageIndex = 1;
                        //original.total = 0;
                        // 重置当前子表公共分页信息
                        //this.repository.entityCollection.setPaginationConfigByPath(`/${nodeCode}`, original);
                        // 删除当前数据下级表分页信息
                        /** @type {?} */
                        const localPagination = this.repository.entityCollection.getPaginationConfigByPath('/');
                        /** @type {?} */
                        const keys = Object.keys(localPagination).filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.startsWith(`${nodeCode}_`)));
                        if (keys && keys.length > 0) {
                            keys.forEach((/**
                             * @param {?} key
                             * @return {?}
                             */
                            key => {
                                this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, { pageIndex: 1, total: 0, pageSize: original.pageSize });
                            }));
                        }
                    }
                }));
            }
            return;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            // const entityName = childrenEntityCodes.find(item => key.startsWith(`${item}_`));
            this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, paginationInfo[key]);
        }));
    }
    /**
     * 构造retrieve分页信息
     * \@description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     * @private
     * @return {?}
     */
    buildRetrieveParam() {
        /** @type {?} */
        const childPaginationInfo = this.buildChildrenPagination();
        if (!childPaginationInfo || Object.keys(childPaginationInfo).length < 1) {
            return null;
        }
        /** @type {?} */
        const retrieveParam = { filters: {}, parentIds: {} };
        /** @type {?} */
        let childrenEntityCodes = [];
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        Object.keys(childPaginationInfo).forEach((/**
         * @param {?} typeName
         * @return {?}
         */
        typeName => {
            /** @type {?} */
            const entity = childPaginationInfo[typeName];
            /** @type {?} */
            const pageIndex = entity.pageIndex || 1;
            retrieveParam.filters[typeName] = { pagination: { pageSize: entity.pageSize || 0, pageIndex: pageIndex } };
            // if (this.isChildrenTable(typeName)) {
            //   retrieveParam.parentIds[typeName] = this.getId(typeName, pageIndex);
            // }
        }));
        return retrieveParam;
    }
    /*
      private getId(nodeCode: string, pageIndex: number): string {
        const viewModel = this.injector.get<ViewModel>(ViewModel, null);
        const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
        if (pageIndex !== originalPageIndex) {
          return null;
        }
        if (viewModel) {
          const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
          if (bindingList && bindingList.currentId) {
            return bindingList.currentId;
          }
        }
        return null;
      }
      private isChildrenTable(nodeCode: string) {
        let childrenEntityCodes: any[] = [];
        nodeCode += 's';
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        if (childrenEntityCodes && childrenEntityCodes.length > 0) {
          const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
          return index !== -1;
        }
        return false;
      }*/
    /**
     * 更新并对实体加锁
     * @param {?} id 实体id
     * @return {?}
     */
    editById(id) {
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        const retrieve$ = this.restProxy.edit(id, requestInfo);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const entityData = responseInfo.returnValue.data;
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            if (entityToUpdate && entityData) {
                this.reloadEntityData(entityToUpdate, entityData);
            }
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    updateById(id) {
        // 如果要更新的实体不存在，返回一个null流；
        // @todo：返回empty()还是null流，为了不影响现有行为，临时返回null流。
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.updateEntityById(id);
        }
        /** @type {?} */
        const retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const entityData = responseInfo.returnValue;
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    updateEntityById(id) {
        // 获取所有分页信息
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        const retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        const retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            const entityData = returnValue.result;
            /** @type {?} */
            const serverPaginationInfo = returnValue.pagination;
            this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 重新加载实体数据
     * \@todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     * @private
     * @param {?} entity
     * @param {?} entityData 要重载的数据
     * @return {?}
     */
    reloadEntityData(entity, entityData) {
        if (!entity) {
            return;
        }
        // 关闭变更检测
        this.appContext.changeDetectionController.detach();
        // retrieve之后已经是最新数据，移除变更
        // entity.load(entityData);
        this.repository.entityCollection.updateEntity(entity, entityData);
        // 重新加载数据不应该产生变更
        entity.changes.splice(0, entity.changes.length);
        // 重新打开变更检测
        this.appContext.changeDetectionController.reattach();
    }
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    create(defaultValue) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const result$ = this.restService.create(defaultValue, requestInfo);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newData);
            EntityUtil.appendInitialData(newEntity, newData);
            this.repository.entityCollection.loadEntities([newEntity], true);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    }
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    append(defaultValue) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restService.create(defaultValue, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newData);
            this.repository.entityCollection.addEntity(newEntity);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    }
    /**
     * 插入数据
     * @param {?} position 数据插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    insert(position, defaultValue) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const insert$ = this.restProxy.create(defaultValue, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newData);
            this.repository.entityCollection.insertEntity(newEntity, position);
            return newEntity;
        })));
    }
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    appendByPath(fpath) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restService.createByPath(fpath, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.entityManager.appendEntityByPath(fpath, newData, newData);
            return newEntity;
        })));
    }
    /**
     * 创建子实体并插入到指定位置
     * @param {?} fpath 父路径
     * @param {?} position 数据插入位置
     * @return {?}
     */
    insertByPath(fpath, position) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const insert$ = this.restProxy.createByPath(fpath, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const newData = responseInfo.returnValue;
            /** @type {?} */
            const newEntity = this.repository.entityManager.insertEntityByPath(fpath, newData, newData, position);
            return newEntity;
        })));
    }
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    removeById(id, ifSave) {
        ifSave = (ifSave === undefined) ? true : ifSave;
        /** @type {?} */
        const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        let delete$;
        if (ifSave) {
            delete$ = this.restProxy.deleteAndSave(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                this.repository.entityCollection.removeEntityById(id);
                return of(true);
            })));
        }
        else {
            delete$ = this.restService.extendDelete(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                this.repository.entityCollection.removeEntityById(id);
                this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
                return of(true);
            })));
        }
    }
    /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    removeAndSaveById(id) {
        /** @type {?} */
        const requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        const delete$ = this.restProxy.deleteAndSave(id, requestInfo);
        /** @type {?} */
        const result$ = delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            this.repository.entityCollection.removeEntityById(id);
            // this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
            return of(true);
        })));
        return result$;
    }
    /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    removeByIds(ids, ifSave) {
        ifSave = (ifSave === undefined) ? true : ifSave;
        // 服务器端删除
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.extendBatchDelete(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            if (ifSave) {
                // 执行保存
                return this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result) {
                        // 从实体集合中删除
                        this.repository.entityCollection.removeEntities((/**
                         * @param {?} value
                         * @return {?}
                         */
                        (value) => {
                            return this.checkEntityValueExists(value, ids);
                        }));
                    }
                })));
            }
            else {
                // 从实体集合中删除
                this.repository.entityCollection.removeEntities((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    return this.checkEntityValueExists(value, ids);
                }));
                if (ids && ids.length > 0) {
                    /** @type {?} */
                    const changes = [];
                    ids.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    id => {
                        changes.push({ dataId: id, changeType: DataChangeType.Delete });
                    }));
                    this.repository.dataChangeHistory.addChanges(changes);
                }
                return of(true);
            }
        })));
    }
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} ifSave 是否保存
     * @return {?}
     */
    batchRemove(ids, ifSave) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.extendBatchDeletion(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            if (ifSave) {
                // 执行保存
                return this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result) {
                        // 从实体集合中删除
                        this.removeEntities(ids);
                    }
                })));
            }
            else {
                // 从实体集合中删除
                this.removeEntities(ids);
                this.addBatchRemoveHistory(ids);
                return of(true);
            }
        })));
    }
    /**
     * 添加批量删除记录到变更记录中
     * @private
     * @param {?} ids ids
     * @return {?}
     */
    addBatchRemoveHistory(ids) {
        if (ids && ids.length > 0) {
            /** @type {?} */
            const changes = [];
            ids.forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                changes.push({ dataId: id, changeType: DataChangeType.Delete });
            }));
            this.repository.dataChangeHistory.addChanges(changes);
        }
    }
    /**
     * 从实体仓库中批量移除指定id的数据
     * @private
     * @param {?} ids
     * @return {?}
     */
    removeEntities(ids) {
        this.repository.entityCollection.removeEntities((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            return this.checkEntityValueExists(value, ids);
        }));
    }
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    checkEntityValueExists(entity, primaryValueArray) {
        /** @type {?} */
        let isExistInTargetArray = false;
        for (let i = 0; i < primaryValueArray.length; i++) {
            if (entity.primaryValue === primaryValueArray[i]) {
                isExistInTargetArray = true;
                break;
            }
        }
        return isExistInTargetArray;
    }
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    removeByPath(fpath, id) {
        // 服务器端删除
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.extendDeletByPath(fpath, id, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.removeEntityByPath(fpath, id);
            this.repository.dataChangeHistory.addChange({ fpath, dataId: id, changeType: DataChangeType.Delete });
            return true;
        })));
    }
    /**
     * 批量删除子级
     * @param {?} fPath 路径
     * @param {?} ids  子级id集合
     * @return {?}
     */
    batchRemoveByPath(fPath, ids) {
        // 服务器端删除
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const delete$ = this.restService.batchDeleteByPath(fPath, ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const idArray = ids.split(',');
            if (idArray.length > 0) {
                idArray.forEach((/**
                 * @param {?} id
                 * @return {?}
                 */
                (id) => {
                    this.repository.entityManager.removeEntityByPath(fPath, id);
                    this.repository.dataChangeHistory.addChange({ fpath: fPath, dataId: id, changeType: DataChangeType.Delete });
                }));
            }
            return true;
        })));
    }
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    updateChangesById(id) {
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        // 变更集不存在
        if (!entity.changes) {
            return of(true);
        }
        // 变更集为空
        if (entity.changes.length === 0) {
            return of(true);
        }
        /** @type {?} */
        const changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const update$ = this.restService.update(changeDetail, requestInfo);
        /** @type {?} */
        const result$ = update$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesById(id);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    updateChangesByPath(path, id) {
        throw new Error('Not Implement');
    }
    /**
     * 提交所有变更
     * @return {?}
     */
    updateAllChanges() {
        // 遍历实体，提交变更
        /** @type {?} */
        const updateResults = [];
        /** @type {?} */
        const entities = this.repository.entityCollection.toArray();
        if (entities.length === 0) {
            return of(true);
        }
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        (entity) => {
            /** @type {?} */
            const updateResult$ = this.updateChangesById(entity.primaryValue);
            updateResults.push(updateResult$);
        }));
        // 串联流
        /** @type {?} */
        const result$ = zip(...updateResults).pipe(map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用变更
     * @return {?}
     */
    applyChanges() {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const save$ = this.restService.save(requestInfo);
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearAllEntityChanges();
            this.repository.clearAllVariableChanges(requestInfo.variableChange);
            this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用idArray对应数据的变更
     * @param {?} idArray
     * @return {?}
     */
    applyChangesByIdArray(idArray) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const save$ = this.restService.save(requestInfo);
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesByArray(idArray);
            this.repository.dataChangeHistory.clearByIds(idArray);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    applyChangesById(id) {
        /** @type {?} */
        const requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        const save$ = this.restService.save(requestInfo);
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesById(id);
            this.repository.dataChangeHistory.clearByIds([id]);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    cancelChanges(options) {
        /** @type {?} */
        const cancel$ = this.restService.cancel(options);
        /** @type {?} */
        const result$ = cancel$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearAllEntityChanges();
            this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    batchAppendByPath(path, defaultValues) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restProxy.batchAppendByPath(path, defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const list = responseInfo.returnValue;
            /** @type {?} */
            const entities = this.repository.entityManager.createEntitiesByPath(path, list);
            /** @type {?} */
            const paths = path.split('/').filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p));
            this.repository.entityManager.appendEntitiesByPath(paths, entities);
            return entities;
        })));
    }
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    batchAppend(defaultValues) {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        /** @type {?} */
        const append$ = this.restProxy.batchAppend(defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            /** @type {?} */
            const list = responseInfo.returnValue;
            /** @type {?} */
            const entities = this.repository.buildEntities(list);
            this.repository.entityCollection.addEntities(entities);
            return entities;
        })));
    }
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @return {?}
     */
    hasChanges() {
        /** @type {?} */
        const requestInfo = this.buildRequestInfo();
        return this.restService.hasChanges(requestInfo);
    }
    /**
     * 构造变更集
     * @return {?}
     */
    buildRequestInfo() {
        /** @type {?} */
        const requestInfo = {
            dataChange: this.repository.entityManager.buildAllEntityChangeDetails(),
            variableChange: this.repository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    }
}
if (false) {
    /**
     * 全局上下文
     * @type {?}
     * @private
     */
    BefDataService.prototype.appContext;
    /**
     * 实体仓库
     * @type {?}
     * @private
     */
    BefDataService.prototype.repository;
    /**
     * RestService实例(请使用restProxy代替)
     * @deprecated
     * @type {?}
     */
    BefDataService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    BefDataService.prototype.injector;
}
export { BefDataService };
//# sourceMappingURL=data:application/json;base64,