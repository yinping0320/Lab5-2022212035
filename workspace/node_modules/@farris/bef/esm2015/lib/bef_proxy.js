/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { switchMap, map, catchError, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { encodeUrl } from '@farris/devkit';
import { BefDataPathUtil } from './bef_data_path_util';
import { UriService } from './uri_service';
import { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';
import { HttpService } from './http_service';
/** @type {?} */
const GET = 'GET';
/** @type {?} */
const DELETE = 'DELETE';
/** @type {?} */
const PUT = 'PUT';
/** @type {?} */
const POST = 'POST';
/** @type {?} */
const PATCH = 'PATCH';
/**
 * Bef代理类
 * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter
 * uri 由uriService
 */
export class BefProxy {
    /**
     * @param {?} httpClient
     * @param {?} uriService
     */
    constructor(httpClient, uriService) {
        this.httpClient = httpClient;
        this.uriService = uriService;
        this.httpService = new HttpService(this.httpClient);
    }
    /**
     * 设置基路径
     * @param {?} baseUri 基路径
     * @return {?}
     */
    setBaseUri(baseUri) {
        this.baseUri = baseUri;
    }
    /**
     * 设置策略模式
     * @param {?} proxyExtend
     * @return {?}
     */
    setProxyExtend(proxyExtend) {
        this.proxyExtend = proxyExtend;
    }
    /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    query(entityFilter) {
        /** @type {?} */
        let url = this.baseUri;
        if (entityFilter) {
            /** @type {?} */
            const entityFilterJson = JSON.stringify(entityFilter);
            url = `${url}?entityFilter=${entityFilterJson}`;
        }
        return this.request(url, GET);
    }
    /**
     * 扩展查询
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    extendQuery(entityFilter, requestInfo) {
        /** @type {?} */
        let url = `${this.baseUri}/extension/query`;
        if (entityFilter) {
            /** @type {?} */
            let entityFilterJson = JSON.stringify(entityFilter);
            entityFilterJson = encodeUrl(entityFilterJson);
            url = `${url}?entityFilter=${entityFilterJson}`;
        }
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options, false);
    }
    /**
     * 查询数据（带过滤条件）
     * \@description 和extendQuery一致，仅将查询参数放到body中
     * @param {?} entityFilter 过滤、排序、分页信息
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    filter(entityFilter, requestInfo) {
        /** @type {?} */
        let url = `${this.baseUri}/extension/filter`;
        /** @type {?} */
        let body = { requestInfo };
        if (entityFilter) {
            body = { entityFilter, requestInfo };
        }
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options, false);
    }
    /**
     * 检索数据
     * @param {?} id 单据内码
     * @return {?} 数据对象
     */
    retrieve(id) {
        /** @type {?} */
        const url = `${this.baseUri}/${id}`;
        return this.request(url, GET);
    }
    /**
     * @deprecated 方法已经废弃，请勿使用
     * @param {?} id
     * @param {?} retrieveParam
     * @param {?} requestInfo
     * @return {?}
     */
    serviceRetrieve(id, retrieveParam, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/service/retrieve/${id}`;
        /** @type {?} */
        const options = {
            body: { retrieveParam, requestInfo }
        };
        return this.request(url, PUT, null, options);
    }
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 参数
     * @return {?}
     */
    queryChild(params) {
        /** @type {?} */
        const url = `${this.baseUri}/service/querychild`;
        /** @type {?} */
        const options = { body: params };
        return this.request(url, PUT, null, options);
    }
    /**
     * 检索数据（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    extendRetrieve(id, requestInfo, retrieveParam) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/retrieve/${id}`;
        /** @type {?} */
        let body = requestInfo;
        if (retrieveParam) {
            body = { retrieveParam, requestInfo };
        }
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 检索数据
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    edit(id, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/service/edit/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 创建一条数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    create(defaultValue, requestInfo) {
        /** @type {?} */
        const body = {
            defaultValue,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, POST, null, options);
    }
    /**
     * 从表新增
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    createByPath(fpath, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUri}${pathUrl}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    }
    /**
     * 提交变更
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    update(changeDetail, requestInfo) {
        /** @type {?} */
        const body = {
            changeDetail,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PATCH, null, options);
    }
    /**
     * 执行保存
     * @param {?=} requestInfo
     * @return {?}
     */
    save(requestInfo) {
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PUT, null, options);
    }
    /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        /** @type {?} */
        const url = `${this.baseUri}/${id}`;
        return this.request(url, DELETE);
    }
    /**
     * 删除并保存
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    deleteAndSave(id, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/service/delete/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 删除（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDelete(id, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/delete/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 删除后代
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @return {?}
     */
    deletByPath(fpath, id) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUri}${pathUrl}/${id}`;
        return this.request(url, DELETE);
    }
    /**
     * 删除后代（扩展）
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDeletByPath(fpath, id, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUri}/extension${pathUrl}/${id}`;
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 批量删除后代
     * @param {?} fPath 'extension/{rootId}/cc/batch'
     * @param {?} ids 子集id
     * @param {?} requestInfo 请求信息
     * @return {?}
     */
    batchDeleteByPath(fPath, ids, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fPath);
        /** @type {?} */
        const pathArray = pathUrl.split('/');
        if (pathArray.length < 3) {
            throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);
        }
        /*   const rootId = pathArray[1];
        
            const nameArray = [];
            pathArray.forEach((name, index) => {
              if (index > 1 ) {
                if (name.indexOf('s') !== -1) {
                  nameArray.push(name.substr(0, name.length - 1));
                } else {
                  nameArray.push(name);
                }
              }
            });
            const childName = nameArray.join('/');*/
        /** @type {?} */
        const url = `${this.baseUri}/extension${pathUrl}/batch`;
        /** @type {?} */
        const idsArray = ids.split(',');
        /** @type {?} */
        const body = {
            ids: idsArray,
            requestInfo: requestInfo
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    batchDelete(ids) {
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        return this.request(this.baseUri, DELETE, params);
    }
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo
     * @return {?}
     */
    extendBatchDeletion(ids, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/batchdeletion`;
        /** @type {?} */
        const body = {
            ids: ids,
            requestInfo: requestInfo
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    /**
     * 批量删除（扩展）
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    extendBatchDelete(ids, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/extension/batchdelete`;
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        const body = requestInfo;
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, params, options);
    }
    /**
     * 取消
     * @param {?=} context
     * @return {?}
     */
    cancel(context) {
        /** @type {?} */
        const url = `${this.baseUri}/service/cancel`;
        return this.request(url, POST, null, null, false, false, false, context);
    }
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    batchAppendByPath(path, defaultValues, requestInfo) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(path);
        /** @type {?} */
        const url = `${this.baseUri}${pathUrl}/batch`;
        /** @type {?} */
        const body = {
            requestInfo,
            retrieveDefaultParam: {
                defaultValues
            }
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    }
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    batchAppend(defaultValues, requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/batch`;
        /** @type {?} */
        const body = {
            requestInfo,
            retrieveDefaultParam: {
                defaultValues
            }
        };
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    }
    /**
     * 检查当前业务上下文内是否存在未保存的变更
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    hasChanges(requestInfo) {
        /** @type {?} */
        const url = `${this.baseUri}/haschanges`;
        /** @type {?} */
        const body = Object.assign({}, requestInfo);
        /** @type {?} */
        const options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    }
    // tslint:disable-next-line: max-line-length
    /**
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} runtimeContext
     * @return {?}
     */
    request(url, method, params, options, selfHandError, ignoreError, ignoreChanges, runtimeContext) {
        options = options || {};
        // 是否自行处理错误
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 处理headers
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 1、判断是否带requestInfo（不区分首字母大小写）;
        // 2、如果传递的是RequestInfo，则转换为requestInfo；
        /** @type {?} */
        const hasRequestInfo = this.hasRequestInfo(options);
        if (options && options.body && options.body.hasOwnProperty('RequestInfo')) {
            options.body.requestInfo = options.body.RequestInfo;
            delete options.body.RequestInfo;
        }
        return this.proxyExtend.extendHeaders(options.headers, runtimeContext).pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        headers => {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.proxyExtend.parseHeaders(response))), map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => result.body)), map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (hasRequestInfo) {
                this.proxyExtend.onResponse(result, ignoreChanges, options);
                return result;
            }
            else {
                // body里没有requestInfo的情况，模拟老的处理方式（不清理变更、将returnValue解析出来）
                return this.unWrapResponseInfo(result);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            return this.proxyExtend.onError(error, selfHandError, ignoreError);
        })));
    }
    /**
     * 调用httpclient取数
     * @protected
     * @param {?} url url
     * @param {?} method methods
     * @param {?} options options
     * @return {?}
     */
    invoke(url, method, options) {
        if (options.params) {
            url = this.proxyExtend.extendUrl(url, options.params);
            options.params = null;
        }
        if (options.body) {
            options.body = this.proxyExtend.extendBody(options.body);
        }
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        /** @type {?} */
        const headers$ = this.proxyExtend.extendHeaders(options.headers);
        return headers$.pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        headers => {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return this.httpService.request(method, url, options)
                .pipe(tap((/**
             * @param {?} response
             * @return {?}
             */
            (response) => this.proxyExtend.parseHeaders(response))), map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => result.body)), map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => this.proxyExtend.onResponse(result, false, options))), catchError((/**
             * @param {?} error
             * @return {?}
             */
            error => this.proxyExtend.onError(error, false, false))));
        })));
    }
    /**
     * 向HttpOptions对象中添加body
     * @private
     * @param {?} options 原来的options
     * @param {?} body body内容
     * @return {?}
     */
    addBodyToOptions(options, body) {
        options = options || {};
        /** @type {?} */
        const mergedOptions = Object.assign(options, { body });
        return mergedOptions;
    }
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    buildParams(params) {
        return HttpParamUtil.buildParams(params);
    }
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    hasRequestInfo(options) {
        return RequestInfoUtil.hasRequestInfo(options) || RequestInfoUtil.hasRequestInfoWithR(options);
    }
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    unWrapResponseInfo(result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    }
}
BefProxy.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefProxy.ctorParameters = () => [
    { type: HttpClient },
    { type: UriService }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BefProxy.prototype.proxyExtend;
    /**
     * restful基路径
     * @type {?}
     * @protected
     */
    BefProxy.prototype.baseUri;
    /**
     * @type {?}
     * @private
     */
    BefProxy.prototype.httpService;
    /** @type {?} */
    BefProxy.prototype.httpClient;
    /** @type {?} */
    BefProxy.prototype.uriService;
}
//# sourceMappingURL=data:application/json;base64,