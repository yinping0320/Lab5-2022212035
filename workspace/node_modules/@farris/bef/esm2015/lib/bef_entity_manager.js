/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_entity_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2019-03-07 17:24:38
 * @Last Modified by:   Witt
 * @Last Modified time: 2019-03-07 17:24:38
 */
import { EntityManager } from '@farris/devkit';
import { BefChangeBuilder } from './bef_change_builder';
import { BefChangeHandler } from './bef_change_handler';
/**
 * 实体管理类：管理Entity和
 * \@todo
 * 1、实体管理应该放在Devkit中；
 * 2、目前只是简单代码拆分，待进一步明确职责。
 * @template T
 */
class BefEntityManager extends EntityManager {
    /**
     * 构造函数
     * @param {?} entityCollection
     */
    constructor(entityCollection) {
        super(entityCollection);
        this.changeBuilder = new BefChangeBuilder(this.entityCollection.entityType, this.entityCollection);
        this.changeHandler = new BefChangeHandler();
    }
    // #region 处理ChangeDetail相关
    /**
     * 获取数据变更
     * @return {?}
     */
    buildAllEntityChangeDetails() {
        /** @type {?} */
        const changeDetails = [];
        /** @type {?} */
        const entities = this.entityCollection.getAllEntities();
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        (entity) => {
            if (entity.changes.length === 0) {
                return;
            }
            /** @type {?} */
            const changeDetail = this.changeBuilder.build(entity.changes);
            // 防止空id的变更被提交
            // @todo：此处判断应该放到更底层，临时修复Bug。
            if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {
                changeDetails.push(changeDetail);
            }
        }));
        return changeDetails;
    }
    /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    buildEntityChangeDetailById(id) {
        /** @type {?} */
        const entity = this.entityCollection.getEntityById(id);
        if (entity.changes.length === 0) {
            return null;
        }
        /** @type {?} */
        const changeDetail = this.changeBuilder.build(entity.changes);
        return changeDetail;
    }
    /**
     * 应用数据变更
     * @param {?} changeDetails ChangeDetail数组
     * @return {?}
     */
    handleDataChangeDetails(changeDetails) {
        this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);
    }
    // #endregion
    /**
     * 清空所有实体
     * @return {?}
     */
    reset() {
        this.entityCollection.clear();
    }
}
if (false) {
    /**
     * ChangeDetail构造器
     * @type {?}
     */
    BefEntityManager.prototype.changeBuilder;
    /**
     * ChangeDetail处理器
     * @type {?}
     */
    BefEntityManager.prototype.changeHandler;
}
export { BefEntityManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2VudGl0eV9tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9iZWYvIiwic291cmNlcyI6WyJsaWIvYmVmX2VudGl0eV9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxFQUF1RCxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdwRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7Ozs7QUFTeEQsTUFBTSxnQkFBbUMsU0FBUSxhQUFnQjs7Ozs7SUFnQi9ELFlBQVksZ0JBQXFDO1FBQy9DLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0lBQzlDLENBQUM7Ozs7OztJQVNNLDJCQUEyQjs7Y0FDMUIsYUFBYSxHQUFtQixFQUFFOztjQUNsQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRTtRQUN2RCxRQUFRLENBQUMsT0FBTzs7OztRQUFDLENBQUMsTUFBYyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQy9CLE9BQU87YUFDUjs7a0JBQ0ssWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFFN0QsY0FBYztZQUNkLDZCQUE2QjtZQUM3QixJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsVUFBVSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUM3RSxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDOzs7Ozs7SUFLTSwyQkFBMkIsQ0FBQyxFQUFVOztjQUNyQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDdEQsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUM7U0FDYjs7Y0FDSyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUM3RCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDOzs7Ozs7SUFNTSx1QkFBdUIsQ0FBQyxhQUE2QjtRQUMxRCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRixDQUFDOzs7Ozs7SUFPTSxLQUFLO1FBQ1YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hDLENBQUM7Q0FFRjs7Ozs7O0lBdEVDLHlDQUF1Qzs7Ozs7SUFLdkMseUNBQXVDOztBQW1FekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiBXaXR0XHJcbiAqIEBEYXRlOiAyMDE5LTAzLTA3IDE3OjI0OjM4XHJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiAgIFdpdHRcclxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxOS0wMy0wNyAxNzoyNDozOFxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEVudGl0eSwgRW50aXR5TGlzdCwgRW50aXR5RmFjdG9yeSwgRW50aXR5Q29sbGVjdGlvbiwgRW50aXR5TWFuYWdlciB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgQ2hhbmdlRGV0YWlsfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgRW50aXR5VXRpbCB9IGZyb20gJy4vZW50aXR5X3V0aWwnO1xyXG5pbXBvcnQgeyBCZWZDaGFuZ2VCdWlsZGVyIH0gZnJvbSAnLi9iZWZfY2hhbmdlX2J1aWxkZXInO1xyXG5pbXBvcnQgeyBCZWZDaGFuZ2VIYW5kbGVyIH0gZnJvbSAnLi9iZWZfY2hhbmdlX2hhbmRsZXInO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDlrp7kvZPnrqHnkIbnsbvvvJrnrqHnkIZFbnRpdHnlkoxcclxuICogQHRvZG9cclxuICogMeOAgeWunuS9k+euoeeQhuW6lOivpeaUvuWcqERldmtpdOS4re+8m1xyXG4gKiAy44CB55uu5YmN5Y+q5piv566A5Y2V5Luj56CB5ouG5YiG77yM5b6F6L+b5LiA5q2l5piO56Gu6IGM6LSj44CCXHJcbiAqL1xyXG5jbGFzcyBCZWZFbnRpdHlNYW5hZ2VyPFQgZXh0ZW5kcyBFbnRpdHk+IGV4dGVuZHMgRW50aXR5TWFuYWdlcjxUPiB7XHJcblxyXG5cclxuICAvKipcclxuICAgKiBDaGFuZ2VEZXRhaWzmnoTpgKDlmahcclxuICAgKi9cclxuICBwdWJsaWMgY2hhbmdlQnVpbGRlcjogQmVmQ2hhbmdlQnVpbGRlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbmdlRGV0YWls5aSE55CG5ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGNoYW5nZUhhbmRsZXI6IEJlZkNoYW5nZUhhbmRsZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGVudGl0eUNvbGxlY3Rpb246IEVudGl0eUNvbGxlY3Rpb248VD4pIHtcclxuICAgIHN1cGVyKGVudGl0eUNvbGxlY3Rpb24pO1xyXG4gICAgdGhpcy5jaGFuZ2VCdWlsZGVyID0gbmV3IEJlZkNoYW5nZUJ1aWxkZXIodGhpcy5lbnRpdHlDb2xsZWN0aW9uLmVudGl0eVR5cGUsIHRoaXMuZW50aXR5Q29sbGVjdGlvbik7XHJcbiAgICB0aGlzLmNoYW5nZUhhbmRsZXIgPSBuZXcgQmVmQ2hhbmdlSGFuZGxlcigpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8vICNyZWdpb24g5aSE55CGQ2hhbmdlRGV0YWls55u45YWzXHJcblxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmlbDmja7lj5jmm7RcclxuICAgKi9cclxuICBwdWJsaWMgYnVpbGRBbGxFbnRpdHlDaGFuZ2VEZXRhaWxzKCk6IENoYW5nZURldGFpbFtdIHtcclxuICAgIGNvbnN0IGNoYW5nZURldGFpbHM6IENoYW5nZURldGFpbFtdID0gW107XHJcbiAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMuZW50aXR5Q29sbGVjdGlvbi5nZXRBbGxFbnRpdGllcygpO1xyXG4gICAgZW50aXRpZXMuZm9yRWFjaCgoZW50aXR5OiBFbnRpdHkpID0+IHtcclxuICAgICAgaWYgKGVudGl0eS5jaGFuZ2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBjaGFuZ2VEZXRhaWwgPSB0aGlzLmNoYW5nZUJ1aWxkZXIuYnVpbGQoZW50aXR5LmNoYW5nZXMpO1xyXG4gICAgICBcclxuICAgICAgLy8g6Ziy5q2i56m6aWTnmoTlj5jmm7Tooqvmj5DkuqRcclxuICAgICAgLy8gQHRvZG/vvJrmraTlpITliKTmlq3lupTor6XmlL7liLDmm7TlupXlsYLvvIzkuLTml7bkv67lpI1CdWfjgIJcclxuICAgICAgaWYgKGNoYW5nZURldGFpbCAmJiBjaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mbyAmJiBjaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mby5EYXRhSWQpIHtcclxuICAgICAgICBjaGFuZ2VEZXRhaWxzLnB1c2goY2hhbmdlRGV0YWlsKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY2hhbmdlRGV0YWlscztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWNleS4quWunuS9k1xyXG4gICAqL1xyXG4gIHB1YmxpYyBidWlsZEVudGl0eUNoYW5nZURldGFpbEJ5SWQoaWQ6IHN0cmluZyk6IENoYW5nZURldGFpbCB7XHJcbiAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlJZChpZCk7XHJcbiAgICBpZiAoZW50aXR5LmNoYW5nZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2hhbmdlRGV0YWlsID0gdGhpcy5jaGFuZ2VCdWlsZGVyLmJ1aWxkKGVudGl0eS5jaGFuZ2VzKTtcclxuICAgIHJldHVybiBjaGFuZ2VEZXRhaWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlupTnlKjmlbDmja7lj5jmm7RcclxuICAgKiBAcGFyYW0gY2hhbmdlRGV0YWlscyBDaGFuZ2VEZXRhaWzmlbDnu4RcclxuICAgKi9cclxuICBwdWJsaWMgaGFuZGxlRGF0YUNoYW5nZURldGFpbHMoY2hhbmdlRGV0YWlsczogQ2hhbmdlRGV0YWlsW10pOiB2b2lkIHtcclxuICAgIHRoaXMuY2hhbmdlSGFuZGxlci5oYW5kbGUodGhpcy5lbnRpdHlUeXBlLCB0aGlzLmVudGl0eUNvbGxlY3Rpb24sIGNoYW5nZURldGFpbHMpO1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG5cclxuICAvKipcclxuICAgKiDmuIXnqbrmiYDmnInlrp7kvZNcclxuICAgKi9cclxuICBwdWJsaWMgcmVzZXQoKSB7XHJcbiAgICB0aGlzLmVudGl0eUNvbGxlY3Rpb24uY2xlYXIoKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBCZWZFbnRpdHlNYW5hZ2VyIH07XHJcbiJdfQ==