/**
 * @fileoverview added by tsickle
 * Generated from: lib/framework_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-11 20:32:02
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-13 20:05:46
 */
import { Injectable, Optional } from '@angular/core';
import { SessionService } from '@ecp-caf/caf-common';
class FrameworkSessionService {
    /**
     * @param {?} sessionService
     */
    constructor(sessionService) {
        this.sessionService = sessionService;
    }
    /**
     * 获取用户SessionId
     * @return {?}
     */
    getUserSessionId() {
        return this.sessionService.getUserSessionId();
    }
    /**
     * 获取当前功能菜单的SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    getCurrentSessionId(runtimeContext) {
        /** @type {?} */
        let sessionId;
        /** @type {?} */
        const rsi = this.getRuntimeSessionId();
        if (rsi) {
            return rsi;
        }
        if (this.sessionService) {
            if (runtimeContext && runtimeContext.hasOwnProperty('tabId')) {
                /** @type {?} */
                const tabId = runtimeContext.tabId;
                sessionId = this.sessionService.getCurrentSeesionId(tabId);
            }
            else {
                sessionId = this.sessionService.getCurrentSeesionId();
            }
        }
        if (!sessionId) {
            sessionId = this.getUserSessionId();
        }
        return sessionId;
    }
    /**
     * @private
     * @return {?}
     */
    getRuntimeSessionId() {
        /** @type {?} */
        const hash = window.location.hash;
        /** @type {?} */
        const params = this.parse(hash);
        return params && params.rsi || null;
    }
    /**
     * @param {?} queryString
     * @return {?}
     */
    parse(queryString) {
        if (!queryString) {
            return {};
        }
        /** @type {?} */
        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');
        return hashes.reduce((/**
         * @param {?} params
         * @param {?} hash
         * @return {?}
         */
        (params, hash) => {
            /** @type {?} */
            const split = hash.indexOf('=');
            /** @type {?} */
            const key = hash.slice(0, split);
            /** @type {?} */
            const val = hash.slice(split + 1);
            return Object.assign(params, { [key]: decodeURIComponent(val) });
        }), {});
    }
}
FrameworkSessionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameworkSessionService.ctorParameters = () => [
    { type: SessionService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FrameworkSessionService.prototype.sessionService;
}
export { FrameworkSessionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWV3b3JrX3Nlc3Npb25fc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL2ZyYW1ld29ya19zZXNzaW9uX3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFPQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQsTUFDTSx1QkFBdUI7Ozs7SUFFM0IsWUFBZ0MsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0lBQzlELENBQUM7Ozs7O0lBS0QsZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDaEQsQ0FBQzs7Ozs7O0lBS0QsbUJBQW1CLENBQUMsY0FBb0I7O1lBQ2xDLFNBQWlCOztjQUNmLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7UUFDdEMsSUFBSSxHQUFHLEVBQUU7WUFDUCxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLElBQUksY0FBYyxJQUFJLGNBQWMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7O3NCQUN0RCxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUs7Z0JBQ2xDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzVEO2lCQUFNO2dCQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLENBQUM7YUFDdkQ7U0FDRjtRQUNELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDckM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7OztJQUNPLG1CQUFtQjs7Y0FDbkIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSTs7Y0FDM0IsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQy9CLE9BQU8sTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBQ00sS0FBSyxDQUFDLFdBQW1CO1FBQzlCLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxFQUFFLENBQUM7U0FDWDs7Y0FDSyxNQUFNLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDekUsT0FBTyxNQUFNLENBQUMsTUFBTTs7Ozs7UUFBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTs7a0JBQzlCLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQzs7a0JBQ3pCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7O2tCQUMxQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRSxDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDOzs7WUFuREYsVUFBVTs7OztZQUZGLGNBQWMsdUJBS1IsUUFBUTs7Ozs7OztJQUFULGlEQUFrRDs7QUFtRGhFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjogV2l0dFxyXG4gKiBARGF0ZTogMjAxOC0xMC0xMSAyMDozMjowMlxyXG4gKiBATGFzdCBNb2RpZmllZCBieTogV2l0dFxyXG4gKiBATGFzdCBNb2RpZmllZCB0aW1lOiAyMDE4LTEyLTEzIDIwOjA1OjQ2XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2Vzc2lvblNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W55So5oi3U2Vzc2lvbklkXHJcbiAgICovXHJcbiAgZ2V0VXNlclNlc3Npb25JZCgpIHtcclxuICAgIHJldHVybiB0aGlzLnNlc3Npb25TZXJ2aWNlLmdldFVzZXJTZXNzaW9uSWQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW9k+WJjeWKn+iDveiPnOWNleeahFNlc3Npb25JZFxyXG4gICAqL1xyXG4gIGdldEN1cnJlbnRTZXNzaW9uSWQocnVudGltZUNvbnRleHQ/OiBhbnkpIHtcclxuICAgIGxldCBzZXNzaW9uSWQ6IHN0cmluZztcclxuICAgIGNvbnN0IHJzaSA9IHRoaXMuZ2V0UnVudGltZVNlc3Npb25JZCgpO1xyXG4gICAgaWYgKHJzaSkge1xyXG4gICAgICByZXR1cm4gcnNpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc2Vzc2lvblNlcnZpY2UpIHtcclxuICAgICAgaWYgKHJ1bnRpbWVDb250ZXh0ICYmIHJ1bnRpbWVDb250ZXh0Lmhhc093blByb3BlcnR5KCd0YWJJZCcpKSB7XHJcbiAgICAgICAgY29uc3QgdGFiSWQgPSBydW50aW1lQ29udGV4dC50YWJJZDtcclxuICAgICAgICBzZXNzaW9uSWQgPSB0aGlzLnNlc3Npb25TZXJ2aWNlLmdldEN1cnJlbnRTZWVzaW9uSWQodGFiSWQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlc3Npb25JZCA9IHRoaXMuc2Vzc2lvblNlcnZpY2UuZ2V0Q3VycmVudFNlZXNpb25JZCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXNlc3Npb25JZCkge1xyXG4gICAgICBzZXNzaW9uSWQgPSB0aGlzLmdldFVzZXJTZXNzaW9uSWQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzZXNzaW9uSWQ7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0UnVudGltZVNlc3Npb25JZCgpIHtcclxuICAgIGNvbnN0IGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMucGFyc2UoaGFzaCk7XHJcbiAgICByZXR1cm4gcGFyYW1zICYmIHBhcmFtcy5yc2kgfHwgbnVsbDtcclxuICB9XHJcbiAgcHVibGljIHBhcnNlKHF1ZXJ5U3RyaW5nOiBzdHJpbmcpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgaWYgKCFxdWVyeVN0cmluZykge1xyXG4gICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYXNoZXMgPSBxdWVyeVN0cmluZy5zbGljZShxdWVyeVN0cmluZy5pbmRleE9mKCc/JykgKyAxKS5zcGxpdCgnJicpO1xyXG4gICAgcmV0dXJuIGhhc2hlcy5yZWR1Y2UoKHBhcmFtcywgaGFzaCkgPT4ge1xyXG4gICAgICBjb25zdCBzcGxpdCA9IGhhc2guaW5kZXhPZignPScpO1xyXG4gICAgICBjb25zdCBrZXkgPSBoYXNoLnNsaWNlKDAsIHNwbGl0KTtcclxuICAgICAgY29uc3QgdmFsID0gaGFzaC5zbGljZShzcGxpdCArIDEpO1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsgW2tleV06IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpIH0pO1xyXG4gICAgfSwge30pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UgfTtcclxuIl19