/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_dynamic_control_group_default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Repository } from '@farris/devkit';
import { HttpHeaders } from '@angular/common/http';
export class DefaultDynamiControlGroupHttpService {
    /**
     * @param {?} repository
     */
    constructor(repository) {
        this.befRest = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @param {?=} method
     * @return {?}
     */
    getData(url, params = {}, method = 'GET') {
        /** @type {?} */
        const headers = new HttpHeaders({ 'content-type': 'application/json' });
        return this.befRest.restService.invoke(url, method, params, { headers });
    }
}
DefaultDynamiControlGroupHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DefaultDynamiControlGroupHttpService.ctorParameters = () => [
    { type: Repository }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultDynamiControlGroupHttpService.prototype.befRest;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2R5bmFtaWNfY29udHJvbF9ncm91cF9kZWZhdWx0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2JlZi8iLCJzb3VyY2VzIjpbImxpYi9iZWZfZHluYW1pY19jb250cm9sX2dyb3VwX2RlZmF1bHQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUluRCxNQUFNLE9BQU8sb0NBQW9DOzs7O0lBRzdDLFlBQVksVUFBMkI7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBQSxVQUFVLEVBQXNCLENBQUM7SUFDcEQsQ0FBQzs7Ozs7OztJQUNELE9BQU8sQ0FBQyxHQUFXLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxNQUFNLEdBQUcsS0FBSzs7Y0FDdEMsT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLENBQUM7UUFDdkUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLENBQUM7OztZQVZKLFVBQVU7Ozs7WUFMRixVQUFVOzs7Ozs7O0lBT2YsdURBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENvbWJvSHR0cFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxpc3QnO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnLi9iZWZfcmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBEeW5hbWlDb250cm9sR3JvdXBIdHRwSW50ZXJmYWNlIH0gZnJvbSAnQGZhcnJpcy9keW5hbWljLWNvbnRyb2wtZ3JvdXAnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdER5bmFtaUNvbnRyb2xHcm91cEh0dHBTZXJ2aWNlIGltcGxlbWVudHMgRHluYW1pQ29udHJvbEdyb3VwSHR0cEludGVyZmFjZSB7XHJcbiAgICBwcml2YXRlIGJlZlJlc3Q6IEJlZlJlcG9zaXRvcnk8YW55PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT4pIHtcclxuICAgICAgICB0aGlzLmJlZlJlc3QgPSByZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICAgIH1cclxuICAgIGdldERhdGEodXJsOiBzdHJpbmcsIHBhcmFtcyA9IHt9LCBtZXRob2QgPSAnR0VUJyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSlcclxuICAgICAgICByZXR1cm4gdGhpcy5iZWZSZXN0LnJlc3RTZXJ2aWNlLmludm9rZSh1cmwsIG1ldGhvZCwgcGFyYW1zLCB7IGhlYWRlcnMgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19