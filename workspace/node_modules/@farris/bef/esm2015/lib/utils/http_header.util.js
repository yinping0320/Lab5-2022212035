/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/http_header.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpHeaders } from '@angular/common/http';
class HttpHeaderUtil {
    /**
     * PlainObject => HttpHeaders
     * @param {?} headers
     * @return {?}
     */
    static convertToHeaders(headers) {
        if (!headers) {
            headers = new HttpHeaders();
        }
        // 已经是HttpHeaders，直接返回
        /** @type {?} */
        const isHttpHeaders = headers instanceof HttpHeaders;
        if (isHttpHeaders === true) {
            return headers;
        }
        if (Object.keys(headers).length > 0) {
            /** @type {?} */
            let httpHeaders = new HttpHeaders();
            Object.keys(headers).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                httpHeaders = httpHeaders.append(prop, headers[prop]);
            }));
            headers = httpHeaders;
        }
        else {
            headers = new HttpHeaders();
        }
        return headers;
    }
    // #region 添加特定含义的header
    /**
     * 追加SessionId头
     * @param {?} headers HttpHeaders对象
     * @param {?} sessionId
     * @return {?}
     */
    static appendSessionId(headers, sessionId) {
        return headers.append('SessionId', sessionId);
    }
    /**
     * 追加CommonVariable头
     * @param {?} headers HttpHeaders对象
     * @param {?} commonVariable
     * @return {?}
     */
    static appendCafRuntimeCommonVariable(headers, commonVariable) {
        return headers.append('X-CAF-Runtime-CommonVariable', commonVariable);
    }
    /**
     * 追加X-CAF-Runtime-Context头
     * @param {?} headers HttpHeaders对象
     * @param {?} context 等价于BeSessionId
     * @return {?}
     */
    static appendCafRuntimeContext(headers, context) {
        return headers.append('X-CAF-Runtime-Context', context);
    }
    /**
     * 追加Content-Type头
     * @param {?} headers HttpHeaders对象
     * @param {?=} contentType
     * @return {?}
     */
    static appendContextType(headers, contentType) {
        contentType = contentType ? contentType : 'application/json';
        return headers.append('Content-Type', contentType);
    }
    /**
     * @param {?} headers
     * @param {?=} requireMessage
     * @return {?}
     */
    static appendRequireMessage(headers, requireMessage = true) {
        return headers.append('Bff-Require-Message', requireMessage.toString());
    }
    /**
     * 组合表单复用，表单实例id
     * @param {?} headers headers
     * @param {?} funcInstId 表单实例id
     * @return {?}
     */
    static appendFuncInstId(headers, funcInstId) {
        return headers.append('Func-Inst-Id', funcInstId);
    }
    /**
     * http headers to json
     * @param {?} headers headers
     * @return {?}
     */
    static toJson(headers) {
        if (!(headers instanceof HttpHeaders)) {
            return null;
        }
        /** @type {?} */
        const result = {};
        headers.keys().forEach((/**
         * @param {?} header
         * @return {?}
         */
        header => {
            /** @type {?} */
            const values = headers.getAll(header);
            if (values.length > 1) {
                result[header] = values;
            }
            else {
                result[header] = values[0] || '';
            }
        }));
        return result;
    }
}
export { HttpHeaderUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cF9oZWFkZXIudXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2h0dHBfaGVhZGVyLnV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQsTUFBTSxjQUFjOzs7Ozs7SUFLWCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBWTtRQUN6QyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7U0FDN0I7OztjQUdLLGFBQWEsR0FBRyxPQUFPLFlBQVksV0FBVztRQUNwRCxJQUFJLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDMUIsT0FBTyxPQUFPLENBQUM7U0FDaEI7UUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQy9CLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRTtZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxJQUFJLENBQUMsRUFBRTtnQkFDbEMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3hELENBQUMsRUFBQyxDQUFDO1lBQ0gsT0FBTyxHQUFHLFdBQVcsQ0FBQztTQUN2QjthQUFNO1lBQ0wsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7U0FDN0I7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7Ozs7OztJQVNNLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBb0IsRUFBRSxTQUFpQjtRQUNuRSxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7Ozs7SUFPTSxNQUFNLENBQUMsOEJBQThCLENBQUMsT0FBb0IsRUFBRSxjQUFzQjtRQUN2RixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsOEJBQThCLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDeEUsQ0FBQzs7Ozs7OztJQU9NLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFvQixFQUFFLE9BQWU7UUFDekUsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTFELENBQUM7Ozs7Ozs7SUFPTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FBb0IsRUFBRSxXQUFvQjtRQUN4RSxXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDO1FBQzdELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7O0lBQ00sTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BQW9CLEVBQUUsY0FBYyxHQUFHLElBQUk7UUFDNUUsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Ozs7Ozs7SUFNTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBb0IsRUFBRSxVQUFrQjtRQUNyRSxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7OztJQUtNLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBb0I7UUFDdkMsSUFBSSxDQUFDLENBQUMsT0FBTyxZQUFZLFdBQVcsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7O2NBQ0ssTUFBTSxHQUFHLEVBQUU7UUFDakIsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU87Ozs7UUFBQyxNQUFNLENBQUMsRUFBRTs7a0JBQ3hCLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNyQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDO2FBQ3pCO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2xDO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBR0Y7QUFFRCxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuXHJcbmNsYXNzIEh0dHBIZWFkZXJVdGlsIHtcclxuXHJcbiAgLyoqXHJcbiAgICogUGxhaW5PYmplY3QgPT4gSHR0cEhlYWRlcnNcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRUb0hlYWRlcnMoaGVhZGVyczogYW55KSB7XHJcbiAgICBpZiAoIWhlYWRlcnMpIHtcclxuICAgICAgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOW3sue7j+aYr0h0dHBIZWFkZXJz77yM55u05o6l6L+U5ZueXHJcbiAgICBjb25zdCBpc0h0dHBIZWFkZXJzID0gaGVhZGVycyBpbnN0YW5jZW9mIEh0dHBIZWFkZXJzO1xyXG4gICAgaWYgKGlzSHR0cEhlYWRlcnMgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgICB9XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoaGVhZGVycykubGVuZ3RoID4gMCkge1xyXG4gICAgICBsZXQgaHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcclxuICAgICAgT2JqZWN0LmtleXMoaGVhZGVycykuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgICBodHRwSGVhZGVycyA9IGh0dHBIZWFkZXJzLmFwcGVuZChwcm9wLCBoZWFkZXJzW3Byb3BdKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGhlYWRlcnMgPSBodHRwSGVhZGVycztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBoZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgLy8gI3JlZ2lvbiDmt7vliqDnibnlrprlkKvkuYnnmoRoZWFkZXJcclxuXHJcbiAgLyoqXHJcbiAgICog6L+95YqgU2Vzc2lvbklk5aS0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMgSHR0cEhlYWRlcnPlr7nosaFcclxuICAgKiBAcGFyYW0gY29udGV4dCBCZVNlc3Npb25JZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgYXBwZW5kU2Vzc2lvbklkKGhlYWRlcnM6IEh0dHBIZWFkZXJzLCBzZXNzaW9uSWQ6IHN0cmluZyk6IEh0dHBIZWFkZXJzIHtcclxuICAgIHJldHVybiBoZWFkZXJzLmFwcGVuZCgnU2Vzc2lvbklkJywgc2Vzc2lvbklkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi/veWKoENvbW1vblZhcmlhYmxl5aS0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMgSHR0cEhlYWRlcnPlr7nosaFcclxuICAgKiBAcGFyYW0gY29udGV4dCDmoYbmnrbkvJror510b2tlbu+8jOetieS7t+S6juWOn+adpeeahFNlc3Npb25JZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgYXBwZW5kQ2FmUnVudGltZUNvbW1vblZhcmlhYmxlKGhlYWRlcnM6IEh0dHBIZWFkZXJzLCBjb21tb25WYXJpYWJsZTogc3RyaW5nKTogSHR0cEhlYWRlcnMge1xyXG4gICAgcmV0dXJuIGhlYWRlcnMuYXBwZW5kKCdYLUNBRi1SdW50aW1lLUNvbW1vblZhcmlhYmxlJywgY29tbW9uVmFyaWFibGUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L+95YqgWC1DQUYtUnVudGltZS1Db250ZXh05aS0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMgSHR0cEhlYWRlcnPlr7nosaFcclxuICAgKiBAcGFyYW0gY29udGV4dCDnrYnku7fkuo5CZVNlc3Npb25JZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgYXBwZW5kQ2FmUnVudGltZUNvbnRleHQoaGVhZGVyczogSHR0cEhlYWRlcnMsIGNvbnRleHQ6IHN0cmluZyk6IEh0dHBIZWFkZXJzIHtcclxuICAgIHJldHVybiBoZWFkZXJzLmFwcGVuZCgnWC1DQUYtUnVudGltZS1Db250ZXh0JywgY29udGV4dCk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L+95YqgQ29udGVudC1UeXBl5aS0XHJcbiAgICogQHBhcmFtIGhlYWRlcnMgSHR0cEhlYWRlcnPlr7nosaFcclxuICAgKiBAcGFyYW0gY29udGV4dCDmj5DkuqTlhoXlrrnnmoRNSU1F57G75Z6L77yM6buY6K6k5Li6YXBwbGljYXRpb24vanNvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgYXBwZW5kQ29udGV4dFR5cGUoaGVhZGVyczogSHR0cEhlYWRlcnMsIGNvbnRlbnRUeXBlPzogc3RyaW5nKTogSHR0cEhlYWRlcnMge1xyXG4gICAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlIDogJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgcmV0dXJuIGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCBjb250ZW50VHlwZSk7XHJcbiAgfVxyXG4gIHB1YmxpYyBzdGF0aWMgYXBwZW5kUmVxdWlyZU1lc3NhZ2UoaGVhZGVyczogSHR0cEhlYWRlcnMsIHJlcXVpcmVNZXNzYWdlID0gdHJ1ZSkge1xyXG4gICAgcmV0dXJuIGhlYWRlcnMuYXBwZW5kKCdCZmYtUmVxdWlyZS1NZXNzYWdlJywgcmVxdWlyZU1lc3NhZ2UudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOe7hOWQiOihqOWNleWkjeeUqO+8jOihqOWNleWunuS+i2lkXHJcbiAgICogQHBhcmFtIGhlYWRlcnMgaGVhZGVyc1xyXG4gICAqIEBwYXJhbSBmdW5jSW5zdElkIOihqOWNleWunuS+i2lkXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBhcHBlbmRGdW5jSW5zdElkKGhlYWRlcnM6IEh0dHBIZWFkZXJzLCBmdW5jSW5zdElkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBoZWFkZXJzLmFwcGVuZCgnRnVuYy1JbnN0LUlkJywgZnVuY0luc3RJZCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIGh0dHAgaGVhZGVycyB0byBqc29uXHJcbiAgICogQHBhcmFtIGhlYWRlcnMgaGVhZGVyc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgdG9Kc29uKGhlYWRlcnM6IEh0dHBIZWFkZXJzKSB7XHJcbiAgICBpZiAoIShoZWFkZXJzIGluc3RhbmNlb2YgSHR0cEhlYWRlcnMpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBoZWFkZXJzLmtleXMoKS5mb3JFYWNoKGhlYWRlciA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGhlYWRlcnMuZ2V0QWxsKGhlYWRlcik7XHJcbiAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHJlc3VsdFtoZWFkZXJdID0gdmFsdWVzO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdFtoZWFkZXJdID0gdmFsdWVzWzBdIHx8ICcnO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gIC8vICNlbmRyZWdpb25cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEh0dHBIZWFkZXJVdGlsIH07XHJcbiJdfQ==