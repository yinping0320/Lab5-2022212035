/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EntityCollection } from '@farris/devkit';
import { EntityUtil } from './entity_util';
import { ChangeDetailType } from './types';
/**
 * 处理服务器端变更
 */
class BefChangeHandler {
    /**
     * 构造函数
     */
    constructor() {
    }
    /**
     * 处理Bef变更集
     * @param {?} entityType
     * @param {?} entityCollection
     * @param {?} changeDetails
     * @return {?}
     */
    handle(entityType, entityCollection, changeDetails) {
        this.handleChangeDetails(entityType, entityCollection, changeDetails);
    }
    /**
     * 处理Bef变更集（批量）
     * @param {?} entityType
     * @param {?} entityList
     * @param {?} changeDetails
     * @return {?}
     */
    handleChangeDetails(entityType, entityList, changeDetails) {
        if (!changeDetails) {
            return;
        }
        changeDetails.forEach((/**
         * @param {?} changeDetail
         * @return {?}
         */
        (changeDetail) => {
            /** @type {?} */
            const id = (/** @type {?} */ ((changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId)));
            /** @type {?} */
            const entity = this.getEntityById(entityList, id);
            if (!entity) {
                return;
            }
            this.handleChangeDetail(entityType, entity, changeDetail);
        }));
    }
    /**
     * 处理Bef变更集（单条）
     * @param {?} entityType
     * @param {?} entity
     * @param {?} changeDetail
     * @return {?}
     */
    handleChangeDetail(entityType, entity, changeDetail) {
        if (!changeDetail || !entity) {
            return;
        }
        // 只处理值变更，其他变更待进一步验证。
        if (changeDetail.ChangeType !== ChangeDetailType.Modify) {
            return;
        }
        /** @type {?} */
        const changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            const { propType, propEntityType } = EntityUtil.getPropInfo(entityType, propName);
            if (propType === 'NgField') {
                // 简单属性：更新值
                entity[propName] = changeInfo[propName];
            }
            else if (propType === 'NgObject') {
                /** @type {?} */
                const childEntity = (/** @type {?} */ (entity[propName]));
                if (childEntity.primaryKey) {
                    // 关联对象：重新加载数据
                    /** @type {?} */
                    const childEntityData = changeInfo[propName];
                    childEntity.load(childEntityData);
                }
                else {
                    // 值对象：递归处理变更
                    /** @type {?} */
                    const childChangeDetail = (/** @type {?} */ (changeInfo[propName]));
                    this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);
                }
            }
            else if (propType === 'NgList') {
                // 子列表：递归处理变更集合
                /** @type {?} */
                const childEntityList = (/** @type {?} */ (entity[propName]));
                /** @type {?} */
                const childChangeDetails = (/** @type {?} */ (changeInfo[propName]));
                this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);
            }
        }));
    }
    /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     * @private
     * @param {?} entityList
     * @param {?} id
     * @return {?}
     */
    getEntityById(entityList, id) {
        /** @type {?} */
        let target;
        if (entityList instanceof EntityCollection) {
            target = entityList.getEntityById(id);
        }
        else {
            target = entityList.get(id);
        }
        return target ? target : null;
    }
}
export { BefChangeHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2NoYW5nZV9oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9iZWYvIiwic291cmNlcyI6WyJsaWIvYmVmX2NoYW5nZV9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFzQixnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFnQixNQUFNLFNBQVMsQ0FBQzs7OztBQUt6RCxNQUFNLGdCQUFnQjs7OztJQUtwQjtJQUNBLENBQUM7Ozs7Ozs7O0lBS0QsTUFBTSxDQUNKLFVBQXdCLEVBQ3hCLGdCQUEwQyxFQUMxQyxhQUE2QjtRQUU3QixJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Ozs7Ozs7O0lBTUQsbUJBQW1CLENBQ2pCLFVBQXdCLEVBQ3hCLFVBQXlELEVBQ3pELGFBQTZCO1FBRTdCLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsT0FBTztTQUNSO1FBRUQsYUFBYSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLFlBQTBCLEVBQUUsRUFBRTs7a0JBQzdDLEVBQUUsR0FBRyxtQkFBQSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQVU7O2tCQUNqRixNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDO1lBQ2pELElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsT0FBTzthQUNSO1lBQ0QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDNUQsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7OztJQUtELGtCQUFrQixDQUNoQixVQUF3QixFQUN4QixNQUFjLEVBQ2QsWUFBMEI7UUFHMUIsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM1QixPQUFPO1NBQ1I7UUFFRCxxQkFBcUI7UUFDckIsSUFBSSxZQUFZLENBQUMsVUFBVSxLQUFLLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtZQUN2RCxPQUFPO1NBQ1I7O2NBRUssVUFBVSxHQUFHLFlBQVksQ0FBQyxVQUFVO1FBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTzs7OztRQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFO2tCQUM3QyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7WUFDakYsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO2dCQUUxQixXQUFXO2dCQUNYLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDekM7aUJBQU0sSUFBSSxRQUFRLEtBQUssVUFBVSxFQUFFOztzQkFDNUIsV0FBVyxHQUFHLG1CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBVTtnQkFDOUMsSUFBSSxXQUFXLENBQUMsVUFBVSxFQUFFOzs7MEJBR3BCLGVBQWUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO29CQUM1QyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUVuQztxQkFBTTs7OzBCQUdDLGlCQUFpQixHQUFHLG1CQUFBLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBZ0I7b0JBQzlELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixDQUFDLENBQUM7aUJBQ3pFO2FBRUY7aUJBQU0sSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFOzs7c0JBRzFCLGVBQWUsR0FBRyxtQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQXNCOztzQkFDeEQsa0JBQWtCLEdBQUcsbUJBQUEsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFrQjtnQkFDakUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxlQUFlLEVBQUUsa0JBQWtCLENBQUMsQ0FBQzthQUMvRTtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7Ozs7SUFLTyxhQUFhLENBQUMsVUFBeUQsRUFBRSxFQUFVOztZQUNyRixNQUFjO1FBQ2xCLElBQUksVUFBVSxZQUFZLGdCQUFnQixFQUFFO1lBQzFDLE1BQU0sR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxNQUFNLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDO0NBR0Y7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRW50aXR5LCBFbnRpdHlMaXN0LCBFbnRpdHlDb2xsZWN0aW9uIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBFbnRpdHlVdGlsIH0gZnJvbSAnLi9lbnRpdHlfdXRpbCc7XHJcbmltcG9ydCB7IENoYW5nZURldGFpbFR5cGUsIENoYW5nZURldGFpbCB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIOWkhOeQhuacjeWKoeWZqOerr+WPmOabtFxyXG4gKi9cclxuY2xhc3MgQmVmQ2hhbmdlSGFuZGxlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5aSE55CGQmVm5Y+Y5pu06ZuGXHJcbiAgICovXHJcbiAgaGFuZGxlKFxyXG4gICAgZW50aXR5VHlwZTogVHlwZTxFbnRpdHk+LFxyXG4gICAgZW50aXR5Q29sbGVjdGlvbjogRW50aXR5Q29sbGVjdGlvbjxFbnRpdHk+LFxyXG4gICAgY2hhbmdlRGV0YWlsczogQ2hhbmdlRGV0YWlsW11cclxuICApIHtcclxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlRGV0YWlscyhlbnRpdHlUeXBlLCBlbnRpdHlDb2xsZWN0aW9uLCBjaGFuZ2VEZXRhaWxzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkhOeQhkJlZuWPmOabtOmbhu+8iOaJuemHj++8iVxyXG4gICAqIEBwYXJhbSBlbnRpdGllc1xyXG4gICAqL1xyXG4gIGhhbmRsZUNoYW5nZURldGFpbHMoXHJcbiAgICBlbnRpdHlUeXBlOiBUeXBlPEVudGl0eT4sXHJcbiAgICBlbnRpdHlMaXN0OiBFbnRpdHlMaXN0PEVudGl0eT4gfCBFbnRpdHlDb2xsZWN0aW9uPEVudGl0eT4sXHJcbiAgICBjaGFuZ2VEZXRhaWxzOiBDaGFuZ2VEZXRhaWxbXVxyXG4gICkge1xyXG4gICAgaWYgKCFjaGFuZ2VEZXRhaWxzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VEZXRhaWxzLmZvckVhY2goKGNoYW5nZURldGFpbDogQ2hhbmdlRGV0YWlsKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlkID0gKGNoYW5nZURldGFpbC5DaGFuZ2VJbmZvLmRhdGFJZCB8fCBjaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mby5EYXRhSWQpIGFzIHN0cmluZztcclxuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5nZXRFbnRpdHlCeUlkKGVudGl0eUxpc3QsIGlkKTtcclxuICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2VEZXRhaWwoZW50aXR5VHlwZSwgZW50aXR5LCBjaGFuZ2VEZXRhaWwpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIZCZWblj5jmm7Tpm4bvvIjljZXmnaHvvIlcclxuICAgKi9cclxuICBoYW5kbGVDaGFuZ2VEZXRhaWwoXHJcbiAgICBlbnRpdHlUeXBlOiBUeXBlPEVudGl0eT4sXHJcbiAgICBlbnRpdHk6IEVudGl0eSxcclxuICAgIGNoYW5nZURldGFpbDogQ2hhbmdlRGV0YWlsXHJcbiAgKSB7XHJcblxyXG4gICAgaWYgKCFjaGFuZ2VEZXRhaWwgfHwgIWVudGl0eSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5Y+q5aSE55CG5YC85Y+Y5pu077yM5YW25LuW5Y+Y5pu05b6F6L+b5LiA5q2l6aqM6K+B44CCXHJcbiAgICBpZiAoY2hhbmdlRGV0YWlsLkNoYW5nZVR5cGUgIT09IENoYW5nZURldGFpbFR5cGUuTW9kaWZ5KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGFuZ2VJbmZvID0gY2hhbmdlRGV0YWlsLkNoYW5nZUluZm87XHJcbiAgICBPYmplY3Qua2V5cyhjaGFuZ2VJbmZvKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgcHJvcFR5cGUsIHByb3BFbnRpdHlUeXBlIH0gPSBFbnRpdHlVdGlsLmdldFByb3BJbmZvKGVudGl0eVR5cGUsIHByb3BOYW1lKTtcclxuICAgICAgaWYgKHByb3BUeXBlID09PSAnTmdGaWVsZCcpIHtcclxuXHJcbiAgICAgICAgLy8g566A5Y2V5bGe5oCn77ya5pu05paw5YC8XHJcbiAgICAgICAgZW50aXR5W3Byb3BOYW1lXSA9IGNoYW5nZUluZm9bcHJvcE5hbWVdO1xyXG4gICAgICB9IGVsc2UgaWYgKHByb3BUeXBlID09PSAnTmdPYmplY3QnKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRFbnRpdHkgPSBlbnRpdHlbcHJvcE5hbWVdIGFzIEVudGl0eTtcclxuICAgICAgICBpZiAoY2hpbGRFbnRpdHkucHJpbWFyeUtleSkge1xyXG5cclxuICAgICAgICAgIC8vIOWFs+iBlOWvueixoe+8mumHjeaWsOWKoOi9veaVsOaNrlxyXG4gICAgICAgICAgY29uc3QgY2hpbGRFbnRpdHlEYXRhID0gY2hhbmdlSW5mb1twcm9wTmFtZV07XHJcbiAgICAgICAgICBjaGlsZEVudGl0eS5sb2FkKGNoaWxkRW50aXR5RGF0YSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8g5YC85a+56LGh77ya6YCS5b2S5aSE55CG5Y+Y5pu0XHJcbiAgICAgICAgICBjb25zdCBjaGlsZENoYW5nZURldGFpbCA9IGNoYW5nZUluZm9bcHJvcE5hbWVdIGFzIENoYW5nZURldGFpbDtcclxuICAgICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlRGV0YWlsKHByb3BFbnRpdHlUeXBlLCBjaGlsZEVudGl0eSwgY2hpbGRDaGFuZ2VEZXRhaWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0gZWxzZSBpZiAocHJvcFR5cGUgPT09ICdOZ0xpc3QnKSB7XHJcblxyXG4gICAgICAgIC8vIOWtkOWIl+ihqO+8mumAkuW9kuWkhOeQhuWPmOabtOmbhuWQiFxyXG4gICAgICAgIGNvbnN0IGNoaWxkRW50aXR5TGlzdCA9IGVudGl0eVtwcm9wTmFtZV0gYXMgRW50aXR5TGlzdDxFbnRpdHk+O1xyXG4gICAgICAgIGNvbnN0IGNoaWxkQ2hhbmdlRGV0YWlscyA9IGNoYW5nZUluZm9bcHJvcE5hbWVdIGFzIENoYW5nZURldGFpbFtdO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlRGV0YWlscyhwcm9wRW50aXR5VHlwZSwgY2hpbGRFbnRpdHlMaXN0LCBjaGlsZENoYW5nZURldGFpbHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrmlk6I635Y+W5a6e5L2T77yM5bGP6JS9RW50aXR5Q29sbGVjdGlvbuWSjEVudGl0eUxpc3TkuYvpl7TnmoTlt67lvIJcclxuICAgKi9cclxuICBwcml2YXRlIGdldEVudGl0eUJ5SWQoZW50aXR5TGlzdDogRW50aXR5TGlzdDxFbnRpdHk+IHwgRW50aXR5Q29sbGVjdGlvbjxFbnRpdHk+LCBpZDogc3RyaW5nKTogRW50aXR5IHtcclxuICAgIGxldCB0YXJnZXQ6IEVudGl0eTtcclxuICAgIGlmIChlbnRpdHlMaXN0IGluc3RhbmNlb2YgRW50aXR5Q29sbGVjdGlvbikge1xyXG4gICAgICB0YXJnZXQgPSBlbnRpdHlMaXN0LmdldEVudGl0eUJ5SWQoaWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGFyZ2V0ID0gZW50aXR5TGlzdC5nZXQoaWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldCA/IHRhcmdldCA6IG51bGw7XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEJlZkNoYW5nZUhhbmRsZXIgfTtcclxuIl19