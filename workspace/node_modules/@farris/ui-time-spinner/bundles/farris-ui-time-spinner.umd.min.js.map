{"version":3,"sources":["ng://@farris/ui-time-spinner/lib/time-spinner.component.ts","ng://@farris/ui-time-spinner/lib/time-spinner.module.ts"],"names":["TimeSpinnerComponent","Object","defineProperty","prototype","this","_disabled","v","_readonly","_editable","_use12Hours","_disabledSeconds","_value","time","parseTime","maxTime","max","minTime","min","tt","formatTime","getHours","getMinutes","disabledSeconds","push","getSeconds","newValue","join","separator","use12Hours","hour","Number","substr","change","emit","oldValue","onChangeCallback","onTouchedCallback","onClick","cursor","input","nativeElement","selectionStart","start","end","setSelectionRange","blur","value","onBlur","onFocus","focus","up","compute","down","type","_this","disabled","step","tempMax","hourStep","minuteStep","secondStep","isNaN","selObj","toString","length","substring","ngZone","runOutsideAngular","setTimeout","separators","split","indexOf","i","Date","clearDate","onMouseEnter","event","readonly","target","querySelector","style","display","onMouseLeave","onChange","writeValue","val","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NgZone","ViewChild","Input","Output","HostListener","placeHolder","format","EventEmitter","obj","window","getSelection","FarrisTimeSpinnerModule","NgModule","declarations","imports","FormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import {\r\n    Component,\r\n    Input,\r\n    ElementRef,\r\n    ViewChild,\r\n    Output,\r\n    EventEmitter,\r\n    forwardRef,\r\n    HostListener,\r\n    NgZone\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n@Component({\r\n    selector: 'farris-time-spinner',\r\n    template: `\r\n        <div\r\n            class=\"input-group\"\r\n            [ngClass]=\"{\r\n                'f-state-disabled': disabled,\r\n                'f-state-readonly': readonly && !disabled,\r\n                'f-state-editable': editable && !disabled && !readonly\r\n            }\"\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                autocomplete=\"off\"\r\n                class=\"form-control\"\r\n                [(ngModel)]=\"_value\"\r\n                #input\r\n                (click)=\"onClick()\"\r\n                (blur)=\"blur()\"\r\n                (focus)=\"onFocus()\"\r\n                [placeholder]=\"disabled||readonly||!editable?'':placeHolder\"\r\n                [readonly]=\"readonly || !editable\"\r\n                [disabled]=\"disabled\"\r\n                (change)=\"onChange()\"\r\n            />\r\n            <div\r\n                class=\"input-group-append input-group-clear\"\r\n                *ngIf=\"!readonly && !disabled\"\r\n                style=\"display: none\"\r\n            >\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"btn btn-secondary\"\r\n                    style=\"box-shadow: none; padding: 0 5px\"\r\n                    (click)=\"clearDate()\"\r\n                >\r\n                    <i\r\n                        class=\"k-icon k-clear-value k-i-close \"\r\n                        style=\"font-size: 0.8rem\"\r\n                    ></i>\r\n                </button>\r\n            </div>\r\n            <div\r\n                class=\"input-group-append btn-group\"\r\n                *ngIf=\"!readonly && !disabled\"\r\n            >\r\n                <button\r\n                    class=\"btn btn-secondary half-btn\"\r\n                    style=\"box-shadow: none; padding: 0 5px\"\r\n                    (click)=\"up()\"\r\n                >\r\n                    <span class=\"icon k-i-arrow-chevron-up\"></span>\r\n                </button>\r\n                <button\r\n                    class=\"btn btn-secondary half-btn\"\r\n                    style=\"box-shadow: none; padding: 0 5px\"\r\n                    (click)=\"down()\"\r\n                >\r\n                    <span\r\n                        class=\"icon k-i-arrow-chevron-down\"\r\n                        style=\"transform: translateX(1px);\"\r\n                    ></span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n            .btn-group {\r\n                height: 1.50003rem;\r\n                flex-direction: column;\r\n            }\r\n            .half-btn {\r\n                height: 50%;\r\n                display: flex;\r\n            }\r\n            .icon {\r\n                flex: 1;\r\n                line-height: 1;\r\n            }\r\n        `\r\n    ],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => TimeSpinnerComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class TimeSpinnerComponent implements ControlValueAccessor {\r\n    @ViewChild('input')\r\n    input: ElementRef;\r\n\r\n    @Input()\r\n    set disabled(v: boolean) {\r\n        this._disabled = v !== false;\r\n    }\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    @Input()\r\n    set readonly(v: boolean) {\r\n        this._readonly = v !== false;\r\n    }\r\n    get readonly() {\r\n        return this._readonly;\r\n    }\r\n    @Input()\r\n    set editable(v: any) {\r\n        this._editable = v === true || v === '';\r\n    }\r\n    get editable() {\r\n        return this._editable;\r\n    }\r\n    @Input()\r\n    set use12Hours(v: boolean) {\r\n        this._use12Hours = v !== false;\r\n    }\r\n    get use12Hours() {\r\n        return this._use12Hours;\r\n    }\r\n\r\n    @Input()\r\n    placeHolder: string = 'è¯·éæ©æ¶é´';\r\n\r\n    @Input()\r\n    format: string = 'hh:mm:ss';\r\n\r\n    @Input()\r\n    hourStep: number = 1;\r\n\r\n    @Input()\r\n    minuteStep: number = 1;\r\n\r\n    @Input()\r\n    secondStep: number = 1;\r\n\r\n    @Input()\r\n    max: string;\r\n\r\n    @Input()\r\n    min: string;\r\n\r\n    @Input()\r\n    set disabledSeconds(v: boolean) {\r\n        this._disabledSeconds = v !== false;\r\n    }\r\n    get disabledSeconds() {\r\n        return this._disabledSeconds;\r\n    }\r\n\r\n    @Input()\r\n    separator: string = ':';\r\n\r\n    @Input()\r\n    set value(v: string) {\r\n        if (v === '') return;\r\n        let time = this.parseTime(v);\r\n        if (!time) return;\r\n\r\n        const maxTime = this.parseTime(this.max);\r\n        const minTime = this.parseTime(this.min);\r\n        if (minTime && minTime > time) {\r\n            time = minTime;\r\n        }\r\n        if (maxTime && maxTime < time) {\r\n            time = maxTime;\r\n        }\r\n        let tt = [\r\n            this.formatTime(time.getHours()),\r\n            this.formatTime(time.getMinutes())\r\n        ];\r\n        if (!this.disabledSeconds) {\r\n            tt.push(this.formatTime(time.getSeconds()));\r\n        }\r\n\r\n        let newValue = tt.join(this.separator);\r\n        if (this.use12Hours) {\r\n            let hour = Number(newValue.substr(0, 2));\r\n            if (hour >= 12) {\r\n                newValue =\r\n                    this.formatTime(hour - 12) + newValue.substr(2) + ' PM';\r\n            } else {\r\n                newValue = newValue + ' AM';\r\n            }\r\n        }\r\n        if (this._value !== newValue) {\r\n            this.change.emit({ newValue, oldValue: this._value });\r\n        }\r\n        this.onChangeCallback(newValue);\r\n        this.onTouchedCallback(newValue);\r\n        this._value = newValue;\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    @Output()\r\n    change = new EventEmitter<any>();\r\n    @Output()\r\n    onBlur = new EventEmitter();\r\n    @Output()\r\n    focus = new EventEmitter();\r\n\r\n    private _disabledSeconds: boolean = false;\r\n    private _disabled: boolean = false;\r\n    private _readonly: boolean = false;\r\n    private _editable: boolean = true;\r\n    private _use12Hours: boolean = false;\r\n    _value: string;\r\n    private selObj: any;\r\n    private start: number = 0;\r\n    private end: number = 2;\r\n    private onTouchedCallback = (obj: any) => { };\r\n    private onChangeCallback = (obj: any) => { };\r\n    constructor(private ngZone: NgZone) {\r\n        this.selObj = window.getSelection();\r\n    }\r\n\r\n    onClick() {\r\n        const cursor = this.input.nativeElement.selectionStart;\r\n\r\n        if (this.use12Hours) {\r\n            if (cursor <= 2) {\r\n                this.start = 0;\r\n                this.end = 2;\r\n            } else if (cursor > 2 && cursor <= 5) {\r\n                this.start = 3;\r\n                this.end = 5;\r\n            } else if (cursor > 5 && cursor <= 8) {\r\n                this.start = 6;\r\n                this.end = 8;\r\n            } else {\r\n                this.start = 9;\r\n                this.end = 11;\r\n            }\r\n        } else {\r\n            if (cursor <= 2) {\r\n                this.start = 0;\r\n                this.end = 2;\r\n            } else if (cursor > 2 && cursor <= 5) {\r\n                this.start = 3;\r\n                this.end = 5;\r\n            } else {\r\n                this.start = 6;\r\n                this.end = 8;\r\n            }\r\n        }\r\n        this.input.nativeElement.setSelectionRange(this.start, this.end);\r\n    }\r\n    blur() {\r\n        this.value = this.input.nativeElement.value;\r\n        this.onBlur.emit();\r\n    }\r\n    onFocus() {\r\n        this.focus.emit();\r\n    }\r\n    up() {\r\n        this.compute('up');\r\n    }\r\n    down() {\r\n        this.compute('down');\r\n    }\r\n    compute(type: string) {\r\n        //if (isNaN(this.selObj.toString())) return\r\n        if (this.disabled) return;\r\n        let step: number, newValue: string;\r\n        let tempMax = this.start < 2 ? 24 : 60;\r\n        if (this.start === 0) {\r\n            step = this.hourStep;\r\n        } else if (this.start === 3) {\r\n            step = this.minuteStep;\r\n        } else {\r\n            step = this.secondStep;\r\n        }\r\n        step = Number(step);\r\n        if (this.use12Hours && isNaN(this.selObj.toString())) {\r\n            if (this.selObj.toString() === 'PM') {\r\n                this.value = this.value.substr(0, this.value.length - 2) + 'AM';\r\n            } else {\r\n                this.value = this.value.substr(0, this.value.length - 2) + 'PM';\r\n            }\r\n        } else {\r\n            if (type === 'up') {\r\n                newValue = this.formatTime(\r\n                    Number(this.selObj.toString()) + step\r\n                );\r\n            } else {\r\n                newValue = this.formatTime(\r\n                    Number(this.selObj.toString()) - step\r\n                );\r\n            }\r\n            if (Number(newValue) >= tempMax) {\r\n                newValue = this.formatTime(0);\r\n            }\r\n\r\n            if (Number(newValue) < 0) {\r\n                newValue = this.formatTime(tempMax + newValue);\r\n            }\r\n            this.value =\r\n                this.value.substring(0, this.start) +\r\n                newValue +\r\n                this.value.substring(this.end, this.value.length);\r\n        }\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                this.input.nativeElement.focus();\r\n                this.input.nativeElement.setSelectionRange(this.start, this.end);\r\n            }, 0);\r\n        });\r\n    }\r\n    formatTime(value) {\r\n        if (value < 0) return value;\r\n        return (value < 10 ? '0' : '') + value;\r\n    }\r\n    parseTime(value: string) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n\r\n        const separators: any[] = value.split(this.separator);\r\n        if (this.use12Hours) {\r\n            if (separators[separators.length - 1].indexOf('PM') > 0) {\r\n                separators[0] = Number(separators[0]) + 12 + '';\r\n                separators[separators.length - 1] = separators[\r\n                    separators.length - 1\r\n                ].substr(0, 2);\r\n            }\r\n            if (separators[separators.length - 1].indexOf('AM') > 0) {\r\n                separators[separators.length - 1] = separators[\r\n                    separators.length - 1\r\n                ].substr(0, 2);\r\n            }\r\n        }\r\n        for (let i = 0; i < separators.length; i++) {\r\n            if (isNaN(separators[i])) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        while (separators.length < 3) {\r\n            separators.push(0);\r\n        }\r\n\r\n        return new Date(\r\n            1900,\r\n            0,\r\n            0,\r\n            separators[0],\r\n            separators[1],\r\n            separators[2]\r\n        );\r\n    }\r\n    clearDate() {\r\n        if (!this.disabled) {\r\n            this.change.emit({ newValue: '', oldValue: this._value });\r\n            this._value = '';\r\n            this.onChangeCallback('');\r\n        }\r\n    }\r\n    @HostListener('mouseenter', ['$event']) onMouseEnter(event) {\r\n        if (\r\n            this.input.nativeElement.value &&\r\n            !this.readonly &&\r\n            !this.disabled\r\n        ) {\r\n            event.target.querySelector('.input-group-clear').style.display = '';\r\n        }\r\n    }\r\n\r\n    @HostListener('mouseleave', ['$event']) onMouseLeave(event) {\r\n        if (!this.readonly && !this.disabled) {\r\n            event.target.querySelector('.input-group-clear').style.display =\r\n                'none';\r\n        }\r\n    }\r\n    onChange() {\r\n        this.onChangeCallback(this.value);\r\n    }\r\n    writeValue(val: any): void {\r\n        if (val) {\r\n            this.value = val;\r\n        } else {\r\n            this.value = '0';\r\n        }\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeCallback = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n    setDisabledState?(isDisabled: boolean): void { }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { TimeSpinnerComponent } from './time-spinner.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n    declarations: [TimeSpinnerComponent],\r\n    imports: [FormsModule, CommonModule],\r\n    exports: [TimeSpinnerComponent]\r\n})\r\nexport class FarrisTimeSpinnerModule {}\r\n"]}