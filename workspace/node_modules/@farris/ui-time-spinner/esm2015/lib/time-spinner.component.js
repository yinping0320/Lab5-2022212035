/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, ViewChild, Output, EventEmitter, forwardRef, HostListener, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class TimeSpinnerComponent {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.placeHolder = '请选择时间';
        this.format = 'hh:mm:ss';
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.separator = ':';
        this.change = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.focus = new EventEmitter();
        this._disabledSeconds = false;
        this._disabled = false;
        this._readonly = false;
        this._editable = true;
        this._use12Hours = false;
        this.start = 0;
        this.end = 2;
        this.onTouchedCallback = (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => { });
        this.onChangeCallback = (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => { });
        this.selObj = window.getSelection();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set disabled(v) {
        this._disabled = v !== false;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set readonly(v) {
        this._readonly = v !== false;
    }
    /**
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set editable(v) {
        this._editable = v === true || v === '';
    }
    /**
     * @return {?}
     */
    get editable() {
        return this._editable;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set use12Hours(v) {
        this._use12Hours = v !== false;
    }
    /**
     * @return {?}
     */
    get use12Hours() {
        return this._use12Hours;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set disabledSeconds(v) {
        this._disabledSeconds = v !== false;
    }
    /**
     * @return {?}
     */
    get disabledSeconds() {
        return this._disabledSeconds;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v === '')
            return;
        /** @type {?} */
        let time = this.parseTime(v);
        if (!time)
            return;
        /** @type {?} */
        const maxTime = this.parseTime(this.max);
        /** @type {?} */
        const minTime = this.parseTime(this.min);
        if (minTime && minTime > time) {
            time = minTime;
        }
        if (maxTime && maxTime < time) {
            time = maxTime;
        }
        /** @type {?} */
        let tt = [
            this.formatTime(time.getHours()),
            this.formatTime(time.getMinutes())
        ];
        if (!this.disabledSeconds) {
            tt.push(this.formatTime(time.getSeconds()));
        }
        /** @type {?} */
        let newValue = tt.join(this.separator);
        if (this.use12Hours) {
            /** @type {?} */
            let hour = Number(newValue.substr(0, 2));
            if (hour >= 12) {
                newValue =
                    this.formatTime(hour - 12) + newValue.substr(2) + ' PM';
            }
            else {
                newValue = newValue + ' AM';
            }
        }
        if (this._value !== newValue) {
            this.change.emit({ newValue, oldValue: this._value });
        }
        this.onChangeCallback(newValue);
        this.onTouchedCallback(newValue);
        this._value = newValue;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    onClick() {
        /** @type {?} */
        const cursor = this.input.nativeElement.selectionStart;
        if (this.use12Hours) {
            if (cursor <= 2) {
                this.start = 0;
                this.end = 2;
            }
            else if (cursor > 2 && cursor <= 5) {
                this.start = 3;
                this.end = 5;
            }
            else if (cursor > 5 && cursor <= 8) {
                this.start = 6;
                this.end = 8;
            }
            else {
                this.start = 9;
                this.end = 11;
            }
        }
        else {
            if (cursor <= 2) {
                this.start = 0;
                this.end = 2;
            }
            else if (cursor > 2 && cursor <= 5) {
                this.start = 3;
                this.end = 5;
            }
            else {
                this.start = 6;
                this.end = 8;
            }
        }
        this.input.nativeElement.setSelectionRange(this.start, this.end);
    }
    /**
     * @return {?}
     */
    blur() {
        this.value = this.input.nativeElement.value;
        this.onBlur.emit();
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.focus.emit();
    }
    /**
     * @return {?}
     */
    up() {
        this.compute('up');
    }
    /**
     * @return {?}
     */
    down() {
        this.compute('down');
    }
    /**
     * @param {?} type
     * @return {?}
     */
    compute(type) {
        //if (isNaN(this.selObj.toString())) return
        if (this.disabled)
            return;
        /** @type {?} */
        let step;
        /** @type {?} */
        let newValue;
        /** @type {?} */
        let tempMax = this.start < 2 ? 24 : 60;
        if (this.start === 0) {
            step = this.hourStep;
        }
        else if (this.start === 3) {
            step = this.minuteStep;
        }
        else {
            step = this.secondStep;
        }
        step = Number(step);
        if (this.use12Hours && isNaN(this.selObj.toString())) {
            if (this.selObj.toString() === 'PM') {
                this.value = this.value.substr(0, this.value.length - 2) + 'AM';
            }
            else {
                this.value = this.value.substr(0, this.value.length - 2) + 'PM';
            }
        }
        else {
            if (type === 'up') {
                newValue = this.formatTime(Number(this.selObj.toString()) + step);
            }
            else {
                newValue = this.formatTime(Number(this.selObj.toString()) - step);
            }
            if (Number(newValue) >= tempMax) {
                newValue = this.formatTime(0);
            }
            if (Number(newValue) < 0) {
                newValue = this.formatTime(tempMax + newValue);
            }
            this.value =
                this.value.substring(0, this.start) +
                    newValue +
                    this.value.substring(this.end, this.value.length);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.input.nativeElement.focus();
                this.input.nativeElement.setSelectionRange(this.start, this.end);
            }), 0);
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatTime(value) {
        if (value < 0)
            return value;
        return (value < 10 ? '0' : '') + value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    parseTime(value) {
        if (!value) {
            return;
        }
        /** @type {?} */
        const separators = value.split(this.separator);
        if (this.use12Hours) {
            if (separators[separators.length - 1].indexOf('PM') > 0) {
                separators[0] = Number(separators[0]) + 12 + '';
                separators[separators.length - 1] = separators[separators.length - 1].substr(0, 2);
            }
            if (separators[separators.length - 1].indexOf('AM') > 0) {
                separators[separators.length - 1] = separators[separators.length - 1].substr(0, 2);
            }
        }
        for (let i = 0; i < separators.length; i++) {
            if (isNaN(separators[i])) {
                return null;
            }
        }
        while (separators.length < 3) {
            separators.push(0);
        }
        return new Date(1900, 0, 0, separators[0], separators[1], separators[2]);
    }
    /**
     * @return {?}
     */
    clearDate() {
        if (!this.disabled) {
            this.change.emit({ newValue: '', oldValue: this._value });
            this._value = '';
            this.onChangeCallback('');
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        if (this.input.nativeElement.value &&
            !this.readonly &&
            !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = '';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        if (!this.readonly && !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display =
                'none';
        }
    }
    /**
     * @return {?}
     */
    onChange() {
        this.onChangeCallback(this.value);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            this.value = val;
        }
        else {
            this.value = '0';
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) { }
}
TimeSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-time-spinner',
                template: `
        <div
            class="input-group"
            [ngClass]="{
                'f-state-disabled': disabled,
                'f-state-readonly': readonly && !disabled,
                'f-state-editable': editable && !disabled && !readonly
            }"
        >
            <input
                type="text"
                autocomplete="off"
                class="form-control"
                [(ngModel)]="_value"
                #input
                (click)="onClick()"
                (blur)="blur()"
                (focus)="onFocus()"
                [placeholder]="disabled||readonly||!editable?'':placeHolder"
                [readonly]="readonly || !editable"
                [disabled]="disabled"
                (change)="onChange()"
            />
            <div
                class="input-group-append input-group-clear"
                *ngIf="!readonly && !disabled"
                style="display: none"
            >
                <button
                    type="button"
                    class="btn btn-secondary"
                    style="box-shadow: none; padding: 0 5px"
                    (click)="clearDate()"
                >
                    <i
                        class="k-icon k-clear-value k-i-close "
                        style="font-size: 0.8rem"
                    ></i>
                </button>
            </div>
            <div
                class="input-group-append btn-group"
                *ngIf="!readonly && !disabled"
            >
                <button
                    class="btn btn-secondary half-btn"
                    style="box-shadow: none; padding: 0 5px"
                    (click)="up()"
                >
                    <span class="icon k-i-arrow-chevron-up"></span>
                </button>
                <button
                    class="btn btn-secondary half-btn"
                    style="box-shadow: none; padding: 0 5px"
                    (click)="down()"
                >
                    <span
                        class="icon k-i-arrow-chevron-down"
                        style="transform: translateX(1px);"
                    ></span>
                </button>
            </div>
        </div>
    `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TimeSpinnerComponent)),
                        multi: true
                    }
                ],
                styles: [`
            .btn-group {
                height: 1.50003rem;
                flex-direction: column;
            }
            .half-btn {
                height: 50%;
                display: flex;
            }
            .icon {
                flex: 1;
                line-height: 1;
            }
        `]
            }] }
];
/** @nocollapse */
TimeSpinnerComponent.ctorParameters = () => [
    { type: NgZone }
];
TimeSpinnerComponent.propDecorators = {
    input: [{ type: ViewChild, args: ['input',] }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    use12Hours: [{ type: Input }],
    placeHolder: [{ type: Input }],
    format: [{ type: Input }],
    hourStep: [{ type: Input }],
    minuteStep: [{ type: Input }],
    secondStep: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    disabledSeconds: [{ type: Input }],
    separator: [{ type: Input }],
    value: [{ type: Input }],
    change: [{ type: Output }],
    onBlur: [{ type: Output }],
    focus: [{ type: Output }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    TimeSpinnerComponent.prototype.input;
    /** @type {?} */
    TimeSpinnerComponent.prototype.placeHolder;
    /** @type {?} */
    TimeSpinnerComponent.prototype.format;
    /** @type {?} */
    TimeSpinnerComponent.prototype.hourStep;
    /** @type {?} */
    TimeSpinnerComponent.prototype.minuteStep;
    /** @type {?} */
    TimeSpinnerComponent.prototype.secondStep;
    /** @type {?} */
    TimeSpinnerComponent.prototype.max;
    /** @type {?} */
    TimeSpinnerComponent.prototype.min;
    /** @type {?} */
    TimeSpinnerComponent.prototype.separator;
    /** @type {?} */
    TimeSpinnerComponent.prototype.change;
    /** @type {?} */
    TimeSpinnerComponent.prototype.onBlur;
    /** @type {?} */
    TimeSpinnerComponent.prototype.focus;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._disabledSeconds;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._editable;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._use12Hours;
    /** @type {?} */
    TimeSpinnerComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.selObj;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.start;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.end;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,