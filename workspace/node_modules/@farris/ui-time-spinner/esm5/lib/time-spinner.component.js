/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, ViewChild, Output, EventEmitter, forwardRef, HostListener, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var TimeSpinnerComponent = /** @class */ (function () {
    function TimeSpinnerComponent(ngZone) {
        this.ngZone = ngZone;
        this.placeHolder = '请选择时间';
        this.format = 'hh:mm:ss';
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.separator = ':';
        this.change = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.focus = new EventEmitter();
        this._disabledSeconds = false;
        this._disabled = false;
        this._readonly = false;
        this._editable = true;
        this._use12Hours = false;
        this.start = 0;
        this.end = 2;
        this.onTouchedCallback = (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { });
        this.onChangeCallback = (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { });
        this.selObj = window.getSelection();
    }
    Object.defineProperty(TimeSpinnerComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._disabled = v !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpinnerComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._readonly = v !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpinnerComponent.prototype, "editable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editable;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._editable = v === true || v === '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpinnerComponent.prototype, "use12Hours", {
        get: /**
         * @return {?}
         */
        function () {
            return this._use12Hours;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._use12Hours = v !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpinnerComponent.prototype, "disabledSeconds", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledSeconds;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._disabledSeconds = v !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpinnerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v === '')
                return;
            /** @type {?} */
            var time = this.parseTime(v);
            if (!time)
                return;
            /** @type {?} */
            var maxTime = this.parseTime(this.max);
            /** @type {?} */
            var minTime = this.parseTime(this.min);
            if (minTime && minTime > time) {
                time = minTime;
            }
            if (maxTime && maxTime < time) {
                time = maxTime;
            }
            /** @type {?} */
            var tt = [
                this.formatTime(time.getHours()),
                this.formatTime(time.getMinutes())
            ];
            if (!this.disabledSeconds) {
                tt.push(this.formatTime(time.getSeconds()));
            }
            /** @type {?} */
            var newValue = tt.join(this.separator);
            if (this.use12Hours) {
                /** @type {?} */
                var hour = Number(newValue.substr(0, 2));
                if (hour >= 12) {
                    newValue =
                        this.formatTime(hour - 12) + newValue.substr(2) + ' PM';
                }
                else {
                    newValue = newValue + ' AM';
                }
            }
            if (this._value !== newValue) {
                this.change.emit({ newValue: newValue, oldValue: this._value });
            }
            this.onChangeCallback(newValue);
            this.onTouchedCallback(newValue);
            this._value = newValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TimeSpinnerComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cursor = this.input.nativeElement.selectionStart;
        if (this.use12Hours) {
            if (cursor <= 2) {
                this.start = 0;
                this.end = 2;
            }
            else if (cursor > 2 && cursor <= 5) {
                this.start = 3;
                this.end = 5;
            }
            else if (cursor > 5 && cursor <= 8) {
                this.start = 6;
                this.end = 8;
            }
            else {
                this.start = 9;
                this.end = 11;
            }
        }
        else {
            if (cursor <= 2) {
                this.start = 0;
                this.end = 2;
            }
            else if (cursor > 2 && cursor <= 5) {
                this.start = 3;
                this.end = 5;
            }
            else {
                this.start = 6;
                this.end = 8;
            }
        }
        this.input.nativeElement.setSelectionRange(this.start, this.end);
    };
    /**
     * @return {?}
     */
    TimeSpinnerComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.value = this.input.nativeElement.value;
        this.onBlur.emit();
    };
    /**
     * @return {?}
     */
    TimeSpinnerComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.focus.emit();
    };
    /**
     * @return {?}
     */
    TimeSpinnerComponent.prototype.up = /**
     * @return {?}
     */
    function () {
        this.compute('up');
    };
    /**
     * @return {?}
     */
    TimeSpinnerComponent.prototype.down = /**
     * @return {?}
     */
    function () {
        this.compute('down');
    };
    /**
     * @param {?} type
     * @return {?}
     */
    TimeSpinnerComponent.prototype.compute = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        var _this = this;
        //if (isNaN(this.selObj.toString())) return
        if (this.disabled)
            return;
        /** @type {?} */
        var step;
        /** @type {?} */
        var newValue;
        /** @type {?} */
        var tempMax = this.start < 2 ? 24 : 60;
        if (this.start === 0) {
            step = this.hourStep;
        }
        else if (this.start === 3) {
            step = this.minuteStep;
        }
        else {
            step = this.secondStep;
        }
        step = Number(step);
        if (this.use12Hours && isNaN(this.selObj.toString())) {
            if (this.selObj.toString() === 'PM') {
                this.value = this.value.substr(0, this.value.length - 2) + 'AM';
            }
            else {
                this.value = this.value.substr(0, this.value.length - 2) + 'PM';
            }
        }
        else {
            if (type === 'up') {
                newValue = this.formatTime(Number(this.selObj.toString()) + step);
            }
            else {
                newValue = this.formatTime(Number(this.selObj.toString()) - step);
            }
            if (Number(newValue) >= tempMax) {
                newValue = this.formatTime(0);
            }
            if (Number(newValue) < 0) {
                newValue = this.formatTime(tempMax + newValue);
            }
            this.value =
                this.value.substring(0, this.start) +
                    newValue +
                    this.value.substring(this.end, this.value.length);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.input.nativeElement.focus();
                _this.input.nativeElement.setSelectionRange(_this.start, _this.end);
            }), 0);
        }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimeSpinnerComponent.prototype.formatTime = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value < 0)
            return value;
        return (value < 10 ? '0' : '') + value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimeSpinnerComponent.prototype.parseTime = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return;
        }
        /** @type {?} */
        var separators = value.split(this.separator);
        if (this.use12Hours) {
            if (separators[separators.length - 1].indexOf('PM') > 0) {
                separators[0] = Number(separators[0]) + 12 + '';
                separators[separators.length - 1] = separators[separators.length - 1].substr(0, 2);
            }
            if (separators[separators.length - 1].indexOf('AM') > 0) {
                separators[separators.length - 1] = separators[separators.length - 1].substr(0, 2);
            }
        }
        for (var i = 0; i < separators.length; i++) {
            if (isNaN(separators[i])) {
                return null;
            }
        }
        while (separators.length < 3) {
            separators.push(0);
        }
        return new Date(1900, 0, 0, separators[0], separators[1], separators[2]);
    };
    /**
     * @return {?}
     */
    TimeSpinnerComponent.prototype.clearDate = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.change.emit({ newValue: '', oldValue: this._value });
            this._value = '';
            this.onChangeCallback('');
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimeSpinnerComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.input.nativeElement.value &&
            !this.readonly &&
            !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = '';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TimeSpinnerComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.readonly && !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display =
                'none';
        }
    };
    /**
     * @return {?}
     */
    TimeSpinnerComponent.prototype.onChange = /**
     * @return {?}
     */
    function () {
        this.onChangeCallback(this.value);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    TimeSpinnerComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            this.value = val;
        }
        else {
            this.value = '0';
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimeSpinnerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TimeSpinnerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    TimeSpinnerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) { };
    TimeSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-time-spinner',
                    template: "\n        <div\n            class=\"input-group\"\n            [ngClass]=\"{\n                'f-state-disabled': disabled,\n                'f-state-readonly': readonly && !disabled,\n                'f-state-editable': editable && !disabled && !readonly\n            }\"\n        >\n            <input\n                type=\"text\"\n                autocomplete=\"off\"\n                class=\"form-control\"\n                [(ngModel)]=\"_value\"\n                #input\n                (click)=\"onClick()\"\n                (blur)=\"blur()\"\n                (focus)=\"onFocus()\"\n                [placeholder]=\"disabled||readonly||!editable?'':placeHolder\"\n                [readonly]=\"readonly || !editable\"\n                [disabled]=\"disabled\"\n                (change)=\"onChange()\"\n            />\n            <div\n                class=\"input-group-append input-group-clear\"\n                *ngIf=\"!readonly && !disabled\"\n                style=\"display: none\"\n            >\n                <button\n                    type=\"button\"\n                    class=\"btn btn-secondary\"\n                    style=\"box-shadow: none; padding: 0 5px\"\n                    (click)=\"clearDate()\"\n                >\n                    <i\n                        class=\"k-icon k-clear-value k-i-close \"\n                        style=\"font-size: 0.8rem\"\n                    ></i>\n                </button>\n            </div>\n            <div\n                class=\"input-group-append btn-group\"\n                *ngIf=\"!readonly && !disabled\"\n            >\n                <button\n                    class=\"btn btn-secondary half-btn\"\n                    style=\"box-shadow: none; padding: 0 5px\"\n                    (click)=\"up()\"\n                >\n                    <span class=\"icon k-i-arrow-chevron-up\"></span>\n                </button>\n                <button\n                    class=\"btn btn-secondary half-btn\"\n                    style=\"box-shadow: none; padding: 0 5px\"\n                    (click)=\"down()\"\n                >\n                    <span\n                        class=\"icon k-i-arrow-chevron-down\"\n                        style=\"transform: translateX(1px);\"\n                    ></span>\n                </button>\n            </div>\n        </div>\n    ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TimeSpinnerComponent; })),
                            multi: true
                        }
                    ],
                    styles: ["\n            .btn-group {\n                height: 1.50003rem;\n                flex-direction: column;\n            }\n            .half-btn {\n                height: 50%;\n                display: flex;\n            }\n            .icon {\n                flex: 1;\n                line-height: 1;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    TimeSpinnerComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    TimeSpinnerComponent.propDecorators = {
        input: [{ type: ViewChild, args: ['input',] }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        use12Hours: [{ type: Input }],
        placeHolder: [{ type: Input }],
        format: [{ type: Input }],
        hourStep: [{ type: Input }],
        minuteStep: [{ type: Input }],
        secondStep: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        disabledSeconds: [{ type: Input }],
        separator: [{ type: Input }],
        value: [{ type: Input }],
        change: [{ type: Output }],
        onBlur: [{ type: Output }],
        focus: [{ type: Output }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
    };
    return TimeSpinnerComponent;
}());
export { TimeSpinnerComponent };
if (false) {
    /** @type {?} */
    TimeSpinnerComponent.prototype.input;
    /** @type {?} */
    TimeSpinnerComponent.prototype.placeHolder;
    /** @type {?} */
    TimeSpinnerComponent.prototype.format;
    /** @type {?} */
    TimeSpinnerComponent.prototype.hourStep;
    /** @type {?} */
    TimeSpinnerComponent.prototype.minuteStep;
    /** @type {?} */
    TimeSpinnerComponent.prototype.secondStep;
    /** @type {?} */
    TimeSpinnerComponent.prototype.max;
    /** @type {?} */
    TimeSpinnerComponent.prototype.min;
    /** @type {?} */
    TimeSpinnerComponent.prototype.separator;
    /** @type {?} */
    TimeSpinnerComponent.prototype.change;
    /** @type {?} */
    TimeSpinnerComponent.prototype.onBlur;
    /** @type {?} */
    TimeSpinnerComponent.prototype.focus;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._disabledSeconds;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._editable;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype._use12Hours;
    /** @type {?} */
    TimeSpinnerComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.selObj;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.start;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.end;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    TimeSpinnerComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,