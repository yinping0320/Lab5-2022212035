import { fromEvent, Observable } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { Injectable, Component, Input, ViewChild, Renderer2, ElementRef, Output, EventEmitter, ContentChild, NgModule } from '@angular/core';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { AngularDraggableDirective, AngularDraggableModule } from '@farris/ui-draggable';
import { ModalDirective, ModalModule } from '@farris/ui-modal';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DialogService {
    /**
     * @param {?=} tags
     * @return {?}
     */
    hasDialogOpened(tags) {
        /** @type {?} */
        let k = 0;
        /** @type {?} */
        let _tags = 'farris-dialog,.overlay-pane';
        if (tags) {
            _tags += ',' + tags;
        }
        /** @type {?} */
        const dlgs = window.document.querySelectorAll(_tags);
        /** @type {?} */
        const elements = Array.from(dlgs).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !Array.from(dlgs[0].classList).some((/**
         * @param {?} item
         * @return {?}
         */
        item => item == 'f-combo-list'))));
        elements.forEach((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            /** @type {?} */
            let n1 = '';
            if (n.tagName === 'DIV') {
                n1 = window.getComputedStyle(n).display;
            }
            else {
                n1 = window.getComputedStyle(n.querySelector('div')).display;
            }
            if (n1 === '' || n1 === 'block') {
                k++;
            }
        }));
        return k > 0;
    }
}
DialogService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DialogComponent {
    /**
     * @param {?} render2
     * @param {?} el
     */
    constructor(render2, el) {
        this.render2 = render2;
        this.el = el;
        /**
         * 窗口标题
         */
        this.title = '我是标题';
        /**
         * 标题图标
         */
        this.iconCls = undefined;
        /**
         * 宽度
         */
        this.width = 300;
        /**
         * 高度
         */
        this.height = 200;
        this.minWidth = 100;
        this.minHeight = 100;
        this.maxWidth = null;
        this.maxHeight = null;
        /**
         * 显示底部按钮区域，默认显示
         */
        this.showButtons = true;
        /**
         * 显示右上角关闭按钮，默认显示
         */
        this.showCloseButton = true;
        /**
         * 显示最大化按钮，默认显示
         */
        this.showMaxButton = true;
        /**
         * 显示最小化按钮，默认不显示, 显示出来也没有用
         */
        this.showMinButton = false;
        /**
         * 启用拖拽改变尺寸大小
         */
        this.resizable = true;
        /**
         * 启用拖动窗口
         */
        this.draggable = true;
        /**
         * 按钮对齐方式
         */
        this.buttonAlign = 'center';
        this.scrollConfig = {};
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        this.resized = new EventEmitter();
        this.resizing = new EventEmitter();
        this.maxed = new EventEmitter();
        this.widthChange = new EventEmitter();
        this.heightChange = new EventEmitter();
        this.moving = new EventEmitter();
        this.enableScroll = true;
        /**
         * 标题栏高度
         */
        this.dialogHeaderHeight = 0;
        /**
         * 按钮区高度
         */
        this.dialogFooterHeight = 0;
        this.parentElement = null;
        /**
         * 显示头部
         */
        this.showHeader = true;
        this.isMax = false; // 是否最大窗口
        // 记录上次的高度
        this.hostId = '';
        /**
         * 窗口最大化时，是否与浏览器之间有间距，当为true时与浏览器边距为 0
         */
        this.maxPadding = true;
        this.windowResize$ = null;
        this.postitionStyles = {};
        this._windowResizeToMax = false;
        this._mutationObserver = null;
        this._dialogEl = null;
        this.footerEl = null;
    }
    /**
     * @return {?}
     */
    get size() {
        /** @type {?} */
        const headerHeight = this.getDialogHeaderLineHeight();
        /** @type {?} */
        const footerHeight = this.getDialogFooterHeight();
        /** @type {?} */
        let contentHeight = this.height - headerHeight;
        if (this.showButtons) {
            contentHeight = contentHeight - footerHeight;
        }
        return {
            width: this.width,
            height: this.height,
            contentHeight,
            contentWidth: this.width,
            header: headerHeight,
            footer: footerHeight
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hostId = `farris-dialog_${new Date().getTime()}`;
        this.render2.setProperty(this.el.nativeElement, 'id', this.hostId);
        if (!this.beforeOpen) {
            this.beforeOpen = (/**
             * @return {?}
             */
            () => true);
        }
        if (!this.beforeClose) {
            this.beforeClose = (/**
             * @return {?}
             */
            () => true);
        }
        this.modal.onShown.subscribe((/**
         * @return {?}
         */
        () => {
            this.opened.emit();
        }));
        this.modal.onHidden.subscribe((/**
         * @return {?}
         */
        () => this.closed.emit()));
        this.checkDialogSize();
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.parentElement) {
                this.parentElement.appendChild(this.el.nativeElement);
            }
            else {
                document.body.appendChild(this.el.nativeElement);
            }
            if (this.showHeader && this.modalHeader) {
                this.dragHandle = this.modalHeader.nativeElement;
            }
        }), 100);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.destroy();
            this.el = null;
            if (this.parentElement) {
                this.parentElement = null;
            }
            if (this._mutationObserver) {
                // 停止观察属性变化
                this._mutationObserver.disconnect();
                this._mutationObserver = null;
            }
        }), 150);
    }
    /**
     * @private
     * @return {?}
     */
    getScreenSize() {
        /** @type {?} */
        const margin = (this.maxPadding ? 20 : 0);
        return {
            width: window.innerWidth - margin,
            height: window.innerHeight - margin,
            padding: margin ? 10 : 0
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.dialogEl) {
            this._dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        }
        else {
            this._dialogEl = this.dialogEl.nativeElement;
        }
        this.dlgHeaderLineHeight = this.getDialogHeaderLineHeight();
        if (this.dialogHeaderHeight && this.modalHeader) {
            this.modalHeader.nativeElement.style.height = `${this.dialogHeaderHeight}px`;
        }
        if (this.dialogFooterHeight) {
            /** @type {?} */
            const footer = this.modalContent.nativeElement.querySelector('.modal-footer');
            if (footer) {
                footer.style.height = `${this.dialogFooterHeight}px`;
            }
        }
        this.originalHeight = this.height;
        this.originalWidth = this.width;
        this.resetPosition();
        this.windowResize$ = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            const { width: winWidth, height: winHeight } = this.getScreenSize();
            if (this.width <= winWidth && this.height <= winHeight) {
                if (this._windowResizeToMax) {
                    this.revertDialog();
                    this._windowResizeToMax = false;
                }
                else {
                    if (this.isMax) {
                        this.maxDialog(false);
                    }
                }
            }
            else {
                if (!this.isMax) {
                    this._windowResizeToMax = true;
                    this.maxDialog();
                }
                else {
                    this.maxDialog(false);
                }
            }
            this.toCenter(0, 0);
        }));
        // this.listenattributesChanged();
    }
    // private listenattributesChanged() {
    //      // 观察器的配置（需要观察什么变动）
    //      const config = { attributes: true, subtree: false,characterData:true, attributeFilter: ['style'], attributeOldValue: true} ;
    //      // 当观察到变动时执行的回调函数
    //      const callback = (mutationsList, observer) => {
    //         // Use traditional 'for loops' for IE 11
    //         for(let mutation of mutationsList) {
    //             // console.log(mutation);
    //         }
    //      };
    //      // 创建一个观察器实例并传入回调函数
    //      this._mutationObserver = new MutationObserver(callback);
    //      // 以上述配置开始观察目标节点
    //      this._mutationObserver.observe(this.dialogEl.nativeElement, config);
    // }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    toCenter(x, y) {
        this.resetPosition();
        this.draggbar.position = { x, y };
        this.draggbar.resetPosition();
    }
    /**
     * @return {?}
     */
    destroy() {
        if (!this.parentElement) {
            if (document.body.querySelector(`#${this.hostId}`)) {
                document.body.removeChild(this.el.nativeElement);
            }
        }
        else {
            if (this.parentElement.querySelector(`#${this.hostId}`)) {
                this.parentElement.removeChild(this.el.nativeElement);
            }
        }
        if (this.windowResize$) {
            this.windowResize$.unsubscribe();
            this.windowResize$ = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getDialogHeaderLineHeight() {
        if (this.modalHeader) {
            if (!this.dlgHeaderLineHeight) {
                this.dlgHeaderLineHeight = 0;
            }
            /** @type {?} */
            const hh = Math.ceil(this.modalHeader.nativeElement.getBoundingClientRect().height);
            this.dlgHeaderLineHeight = hh;
            return this.dlgHeaderLineHeight;
        }
        return 0;
    }
    /**
     * @private
     * @return {?}
     */
    getDialogFooterHeight() {
        if (!this.footerEl) {
            /** @type {?} */
            const _footerEl = this.modalContent.nativeElement.querySelector('.modal-footer');
            this.footerEl = _footerEl;
        }
        if (!this.dlgFooterLineHeight) {
            this.dlgFooterLineHeight = 0;
        }
        if (this.footerEl) {
            this.footerEl.style.height = 'auto';
            /** @type {?} */
            const _fh = Math.ceil(this.footerEl.getBoundingClientRect().height);
            this.dlgFooterLineHeight = _fh;
        }
        return this.dlgFooterLineHeight;
        // const footerEl =  this.modalContent.nativeElement.querySelector('.modal-footer');
        // if (footerEl) {
        //     if (!this.dlgFooterLineHeight) {
        //         this.dlgFooterLineHeight = Math.ceil(footerEl.getBoundingClientRect().height);
        //     }
        //     return this.dlgFooterLineHeight;
        // }
        // return  0;
    }
    /**
     * @private
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    _checkDialogSize(width, height) {
        // 可视区域尺寸
        /** @type {?} */
        const winSize = {
            width: document.body.offsetWidth,
            height: window.innerHeight
        };
        if (this.parentElement) {
            winSize.width = this.parentElement.offsetWidth;
            winSize.height = this.parentElement.offsetHeight;
        }
        if (winSize.width && winSize.width < width) {
            width = winSize.width;
        }
        if (winSize.height && winSize.height < height) {
            height = winSize.height;
        }
        return {
            width,
            height
        };
    }
    /**
     * @private
     * @return {?}
     */
    checkDialogSize() {
        /** @type {?} */
        const newSize = this._checkDialogSize(this.width, this.height);
        if (this.width !== newSize.width) {
            this.width = newSize.width - 20;
            this.widthChange.emit(this.width);
        }
        if (this.height !== newSize.height) {
            this.height = newSize.height - 20;
            this.heightChange.emit(this.height);
        }
    }
    /**
     * @return {?}
     */
    updateModalBodyHeight() {
        /** @type {?} */
        const contentEl = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        const contentHeight = this.size.contentHeight;
        this.render2.setStyle(contentEl, 'height', contentHeight + 'px');
    }
    /**
     * @private
     * @return {?}
     */
    updatePosition() {
        /** @type {?} */
        const marginLeft = Number.parseInt('' + -this.width / 2);
        /** @type {?} */
        const marginTop = Number.parseInt('' + -this.height / 2);
        this.postitionStyles = {
            marginLeft: marginLeft + 'px',
            marginTop: marginTop + 'px',
            transform: 'translate3d(0px, 0px, 0px)',
            top: `${window.innerHeight / 2 + marginTop}px`,
            left: `${window.innerWidth / 2 + marginLeft}px`,
            top1: this.isMax ? '10px' : '50%',
            left1: this.isMax ? '10px' : '50%'
        };
    }
    /**
     * @return {?}
     */
    resetPosition() {
        this.updatePosition();
        if (this._dialogEl) {
            /** @type {?} */
            const dialogEl = this._dialogEl;
            this.render2.setStyle(dialogEl, 'top', this.postitionStyles.top);
            this.render2.setStyle(dialogEl, 'left', this.postitionStyles.left);
            this.render2.setStyle(dialogEl, 'transform', this.postitionStyles.transform);
        }
    }
    /**
     * @private
     * @param {?} flag
     * @return {?}
     */
    openDialog(flag) {
        if (flag) {
            this.resetPosition();
            this.draggbar.resetPosition();
            this.modal.show();
            // setTimeout(() => {
            //     const backdropEl = this.el.nativeElement.querySelector('.farris-modal');
            //     const modals = Array.from(document.body.querySelectorAll('.farris-modal.show')).filter((n: any) => (n.style.display !== 'none' && n !== backdropEl));
            //     if (modals && modals.length > 0) {
            //         const zIndexArr = modals.map(n => {
            //             return parseInt(window.getComputedStyle(n).getPropertyValue('z-index'), 10);
            //         }).filter(n => n);
            //         const maxZIndex = Math.max(...zIndexArr);
            //         backdropEl.style.zIndex = maxZIndex + 1;
            //     }
            // });
        }
    }
    /**
     * @private
     * @param {?} canClose
     * @return {?}
     */
    closeDialog(canClose) {
        if (canClose) {
            this.modal.hide();
            // this.closed.emit();
        }
    }
    /**
     * @return {?}
     */
    show() {
        /** @type {?} */
        const result = this.beforeOpen();
        if (typeof result === 'boolean') {
            this.openDialog(result);
        }
        else {
            if (result instanceof Observable) {
                result.subscribe((/**
                 * @param {?} flag
                 * @return {?}
                 */
                (flag) => {
                    this.openDialog(flag);
                }));
            }
            else {
                if (result instanceof Promise) {
                    result.then((/**
                     * @param {?} flag
                     * @return {?}
                     */
                    (flag) => {
                        this.openDialog(flag);
                    }));
                }
            }
        }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    close($event) {
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        const result = this.beforeClose();
        if (typeof result === 'boolean') {
            this.closeDialog(result);
        }
        else {
            if (result instanceof Observable) {
                result.subscribe((/**
                 * @param {?} flag
                 * @return {?}
                 */
                (flag) => {
                    this.closeDialog(flag);
                }));
            }
            else {
                if (result instanceof Promise) {
                    result.then((/**
                     * @param {?} flag
                     * @return {?}
                     */
                    (flag) => {
                        this.closeDialog(flag);
                    }));
                }
            }
        }
    }
    /**
     * @param {?} size
     * @return {?}
     */
    reSize(size) {
        if (size.width) {
            this.width = size.width;
        }
        if (size.height) {
            this.height = size.height;
        }
        this.resetPosition();
        this.draggbar.resetPosition();
        this.widthChange.emit(this.width);
        this.heightChange.emit(this.height);
        this.resized.emit({ size: { width: this.width, height: this.height } });
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    onResizing(opts) {
        opts.size.width = opts.size.width < 100 ? 100 : opts.size.width;
        opts.size.height = opts.size.height < 100 ? 100 : opts.size.height;
        this.width = opts.size.width;
        this.height = opts.size.height;
        this.resizing.emit(opts);
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    resizeStop(opts) {
        opts.size.width = opts.size.width < 100 ? 100 : opts.size.width;
        opts.size.height = opts.size.height < 100 ? 100 : opts.size.height;
        this.width = opts.size.width;
        this.height = opts.size.height;
        this.updateModalBodyHeight();
        this.widthChange.emit(this.width);
        this.heightChange.emit(this.height);
        this.resized.emit(opts);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    dropdown(el) {
        // const rect = el.getBoundingClientRect();
        // this.render2.removeStyle(el, 'margin-top');
        // this.render2.removeStyle(el, 'margin-left');
        // this.render2.setStyle(el, 'top', `${rect.top}px`);
        // this.render2.setStyle(el, 'left', `${rect.left}px`);
        // this.render2.removeStyle(el, 'transform');
        // this.render2.removeStyle(el, '-webkit-transform');
        // this.render2.removeStyle(el, '-ms-transform');
        // this.render2.removeStyle(el, '-moz-transform');
        // this.render2.removeStyle(el, '-o-transform');
    }
    /**
     * @param {?=} rememberPrevSize
     * @return {?}
     */
    maxDialog(rememberPrevSize = true) {
        if (!this.el) {
            return;
        }
        if (rememberPrevSize) {
            this.prevWidth = this.width;
            this.prevHeight = this.height;
        }
        const { width: winWidth, height: winHeight, padding } = this.getScreenSize();
        this.width = winWidth;
        this.height = winHeight;
        this.draggable = false;
        this.resizable = false;
        this.isMax = true;
        this.toCenter(0, 0);
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this.render2.setStyle(dialogEl, 'top', padding);
        this.render2.setStyle(dialogEl, 'left', padding);
        this.resized.emit({ size: { width: this.width, height: this.height } });
        this.maxed.emit({ size: { width: this.width, height: this.height } });
    }
    /**
     * @return {?}
     */
    revertDialog() {
        this.isMax = false;
        const { width: ww, height: wh } = this.getScreenSize();
        this.width = this.prevWidth == ww ? this.originalWidth : this.prevWidth;
        this.height = this.prevHeight == wh ? this.originalHeight : this.prevHeight;
        if (this.width > ww) {
            this.width = ww;
        }
        if (this.height > wh) {
            this.height = wh;
        }
        this.draggable = true;
        this.resizable = true;
        this.resetPosition();
        this.draggbar.resetPosition();
        this.resized.emit({ size: { width: this.width, height: this.height } });
        this.maxed.emit({ size: { width: this.width, height: this.height } });
    }
    /**
     * @return {?}
     */
    changeDialogSize() {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
        this._windowResizeToMax = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMoving($event) {
        this.moving.emit(Object.assign({ target: this.dialogEl.nativeElement }, $event));
    }
}
DialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-dialog',
                template: "<div #backdropEl class=\"modal farris-modal fade\" bsModal #staticModal=\"bs-modal\" [config]=\"{backdrop: 'static'}\"\r\n    tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"dialog-static-name\">\r\n    <div [ngDraggable]=\"draggable\" [ngResizable]=\"resizable\" rzHandles=\"all\" [handle]=\"dragHandle\"\r\n        (rzStop)=\"resizeStop($event)\" (rzResizing)=\"onResizing($event)\" (stopped)=\"dropdown($event)\" (movingOffset)=\"onMoving($event)\"\r\n        [rzMinWidth]=\"minWidth\" [rzMaxWidth]=\"maxWidth\" [rzMinHeight]=\"minHeight\" [rzMaxHeight]=\"maxHeight\"\r\n        [inBounds]=\"true\" [bounds]=\"backdropEl\" [rzContainment]=\"backdropEl\" class=\"modal-dialog m-0\" [style.width.px]=\"width\"\r\n        [style.height]=\"height + 'px'\" #dialogEl style=\"margin-left: 0!important; margin-top: 0!important\">\r\n        <div #modalContent class=\"modal-content\" style=\"overflow: hidden;\">\r\n            <div #header class=\"modal-header\" *ngIf=\"showHeader\">\r\n                <div class=\"modal-title\">\r\n                    <span *ngIf=\"iconCls\" [class]=\"iconCls\"></span>\r\n                    <span class=\"modal-title-label\">{{ title }}</span>\r\n                </div>\r\n                <div class=\"actions\">\r\n\r\n                    <ul>\r\n                        <li *ngIf=\"toolTemplate\">\r\n                            <ng-template [ngTemplateOutlet]=\"toolTemplate\">\r\n\r\n                            </ng-template>\r\n                        </li>\r\n                        <li *ngIf=\"showMinButton\" class=\"f-btn-icon f-bare\"><span class=\"f-icon modal_minimize\"></span>\r\n                        </li>\r\n                        <li *ngIf=\"showMaxButton\" (click)=\"changeDialogSize()\" class=\"f-btn-icon f-bare\"><span\r\n                                class=\"f-icon modal_maximize\" [class.modalrevert]=\"isMax\"></span></li>\r\n                        <li *ngIf=\"showCloseButton\" (click)=\"close($event)\" class=\"f-btn-icon f-bare\"><span\r\n                                class=\"f-icon modal_close\"></span></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-body\" [style.height.px]=\"size?.contentHeight\" style=\" cursor:default;\">\r\n                <perfect-scrollbar [disabled]=\"!enableScroll\" [config]=\"scrollConfig\">\r\n                    <ng-content></ng-content>\r\n                </perfect-scrollbar>\r\n            </div>\r\n            <div class=\"modal-footer\" *ngIf=\"showButtons\" [style.textAlign]=\"buttonAlign\" style=\" cursor:default;\">\r\n                <ng-container [ngTemplateOutlet]=\"buttons\"></ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
DialogComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
DialogComponent.propDecorators = {
    title: [{ type: Input }],
    iconCls: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    minWidth: [{ type: Input }],
    minHeight: [{ type: Input }],
    maxWidth: [{ type: Input }],
    maxHeight: [{ type: Input }],
    showButtons: [{ type: Input }],
    showCloseButton: [{ type: Input }],
    showMaxButton: [{ type: Input }],
    showMinButton: [{ type: Input }],
    resizable: [{ type: Input }],
    draggable: [{ type: Input }],
    buttonAlign: [{ type: Input }],
    scrollConfig: [{ type: Input }],
    beforeOpen: [{ type: Input }],
    beforeClose: [{ type: Input }],
    modal: [{ type: ViewChild, args: [ModalDirective,] }],
    draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    resized: [{ type: Output }],
    resizing: [{ type: Output }],
    maxed: [{ type: Output }],
    widthChange: [{ type: Output }],
    heightChange: [{ type: Output }],
    moving: [{ type: Output }],
    enableScroll: [{ type: Input }],
    buttons: [{ type: Input }],
    dialogHeaderHeight: [{ type: Input }],
    dialogFooterHeight: [{ type: Input }],
    parentElement: [{ type: Input }],
    showHeader: [{ type: Input }],
    dragHandle: [{ type: Input }],
    toolTemplate: [{ type: ContentChild, args: ['toolTemplate',] }],
    modalContent: [{ type: ViewChild, args: ['modalContent',] }],
    modalHeader: [{ type: ViewChild, args: ['header',] }],
    dialogEl: [{ type: ViewChild, args: ['dialogEl',] }],
    maxPadding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisDialogModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FarrisDialogModule,
            providers: [
                DialogService
            ]
        };
    }
}
FarrisDialogModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DialogComponent
                ],
                imports: [
                    PerfectScrollbarModule,
                    AngularDraggableModule,
                    ModalModule,
                    CommonModule,
                ],
                exports: [
                    DialogComponent,
                    ModalModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DialogService, DialogComponent, FarrisDialogModule };

//# sourceMappingURL=farris-ui-dialog.js.map