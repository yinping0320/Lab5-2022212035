/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-collapsible-area.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, ContentChild } from '@angular/core';
import { FECollapsibleAreaComponent } from './collapsible-area/collapsible-area.component';
import { FEScrollAreaDirective } from './scroll-area.directive';
export class FEScrollCollapsibleAreaDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.scrollArea.addCollapseInstance(this.collapseArea);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // setTimeout(()=>{
        //   debugger;
        //   this.scrollArea.addCollapseInstance(this.collapseArea);
        // },300);
    }
}
FEScrollCollapsibleAreaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fe-scroll-collapsible]'
            },] }
];
/** @nocollapse */
FEScrollCollapsibleAreaDirective.ctorParameters = () => [
    { type: ElementRef }
];
FEScrollCollapsibleAreaDirective.propDecorators = {
    collapseArea: [{ type: ContentChild, args: [FECollapsibleAreaComponent,] }],
    scrollArea: [{ type: ContentChild, args: [FEScrollAreaDirective,] }]
};
if (false) {
    /** @type {?} */
    FEScrollCollapsibleAreaDirective.prototype.collapseArea;
    /** @type {?} */
    FEScrollCollapsibleAreaDirective.prototype.scrollArea;
    /**
     * @type {?}
     * @private
     */
    FEScrollCollapsibleAreaDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWNvbGxhcHNpYmxlLWFyZWEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9leHRlbmQtc2Nyb2xsLWNvbGxhcHNpYmxlLWFyZWEvIiwic291cmNlcyI6WyJsaWIvc2Nyb2xsLWNvbGxhcHNpYmxlLWFyZWEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQW9DLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUMzRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUloRSxNQUFNLE9BQU8sZ0NBQWdDOzs7O0lBTTNDLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO0lBQUksQ0FBQzs7OztJQUV2QyxlQUFlO1FBQ2IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDekQsQ0FBQzs7OztJQUNELFFBQVE7UUFDTixtQkFBbUI7UUFDbkIsY0FBYztRQUNkLDREQUE0RDtRQUM1RCxVQUFVO0lBRVosQ0FBQzs7O1lBcEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2FBQ3BDOzs7O1lBTG1CLFVBQVU7OzsyQkFRM0IsWUFBWSxTQUFDLDBCQUEwQjt5QkFFdkMsWUFBWSxTQUFDLHFCQUFxQjs7OztJQUZuQyx3REFBbUY7O0lBRW5GLHNEQUF1RTs7Ozs7SUFFM0QsOENBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGRUNvbGxhcHNpYmxlQXJlYUNvbXBvbmVudCB9IGZyb20gJy4vY29sbGFwc2libGUtYXJlYS9jb2xsYXBzaWJsZS1hcmVhLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGRVNjcm9sbEFyZWFEaXJlY3RpdmUgfSBmcm9tICcuL3Njcm9sbC1hcmVhLmRpcmVjdGl2ZSc7XG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZmUtc2Nyb2xsLWNvbGxhcHNpYmxlXSdcbn0pXG5leHBvcnQgY2xhc3MgRkVTY3JvbGxDb2xsYXBzaWJsZUFyZWFEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsQWZ0ZXJWaWV3SW5pdHtcbiAgLy8g6K6w5b2V5rua5Yqo5oyH5LukXG4gIEBDb250ZW50Q2hpbGQoRkVDb2xsYXBzaWJsZUFyZWFDb21wb25lbnQpIGNvbGxhcHNlQXJlYTogRkVDb2xsYXBzaWJsZUFyZWFDb21wb25lbnQ7XG4gIC8vIOiusOW9leWPjuaKmOaMh+S7pFxuICBAQ29udGVudENoaWxkKEZFU2Nyb2xsQXJlYURpcmVjdGl2ZSkgc2Nyb2xsQXJlYTogRkVTY3JvbGxBcmVhRGlyZWN0aXZlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxuICBcbiAgbmdBZnRlclZpZXdJbml0KCl7XG4gICAgdGhpcy5zY3JvbGxBcmVhLmFkZENvbGxhcHNlSW5zdGFuY2UodGhpcy5jb2xsYXBzZUFyZWEpO1xuICB9XG4gIG5nT25Jbml0KCl7XG4gICAgLy8gc2V0VGltZW91dCgoKT0+e1xuICAgIC8vICAgZGVidWdnZXI7XG4gICAgLy8gICB0aGlzLnNjcm9sbEFyZWEuYWRkQ29sbGFwc2VJbnN0YW5jZSh0aGlzLmNvbGxhcHNlQXJlYSk7XG4gICAgLy8gfSwzMDApO1xuICAgXG4gIH1cbn1cbiJdfQ==