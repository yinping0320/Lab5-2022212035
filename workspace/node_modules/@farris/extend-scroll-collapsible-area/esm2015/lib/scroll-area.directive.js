/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-area.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
export class FEScrollAreaDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        // 记录滚动的值
        this.scrollAreaTop = 0;
        // 记录值
        this.threshold = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.bindScrollEvent();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.scrollSub.unsubscribe();
        this.scrollSub = null;
    }
    // 追加关联
    /**
     * @param {?} cInstance
     * @return {?}
     */
    addCollapseInstance(cInstance) {
        this.relatedCollapseInstance = cInstance;
    }
    // 绑定事件
    /**
     * @return {?}
     */
    bindScrollEvent() {
        this.scrollSub = fromEvent(this.el.nativeElement, 'scroll').pipe(debounceTime(20)).subscribe((/**
         * @return {?}
         */
        () => {
            //判断滚动的方向
            this.scrollDirection();
        }));
    }
    /**
     * @return {?}
     */
    scrollDirection() {
        /** @type {?} */
        let afterScrollTop = this.el.nativeElement.scrollTop;
        /** @type {?} */
        let delta = afterScrollTop - this.scrollAreaTop;
        // 没有变化
        if (delta === 0)
            return false;
        this.scrollAreaTop = afterScrollTop;
        this.judgeThreshold(delta > 0 ? "down" : "up");
    }
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    judgeThreshold(direction) {
        this.relatedCollapseInstance.updateHeight(this.scrollAreaTop, direction);
    }
}
FEScrollAreaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fe-scroll-area]'
            },] }
];
/** @nocollapse */
FEScrollAreaDirective.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FEScrollAreaDirective.prototype.scrollSub;
    /**
     * @type {?}
     * @private
     */
    FEScrollAreaDirective.prototype.relatedCollapseInstance;
    /**
     * @type {?}
     * @private
     */
    FEScrollAreaDirective.prototype.scrollAreaTop;
    /**
     * @type {?}
     * @private
     */
    FEScrollAreaDirective.prototype.threshold;
    /**
     * @type {?}
     * @private
     */
    FEScrollAreaDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLWFyZWEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9leHRlbmQtc2Nyb2xsLWNvbGxhcHNpYmxlLWFyZWEvIiwic291cmNlcyI6WyJsaWIvc2Nyb2xsLWFyZWEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUs5QyxNQUFNLE9BQU8scUJBQXFCOzs7O0lBU2hDLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZOztRQUgxQixrQkFBYSxHQUFHLENBQUMsQ0FBQzs7UUFFbEIsY0FBUyxHQUFHLENBQUMsQ0FBQztJQUd0QixDQUFDOzs7O0lBQ0QsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBR0QsbUJBQW1CLENBQUMsU0FBUztRQUMzQixJQUFJLENBQUMsdUJBQXVCLEdBQUcsU0FBUyxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7UUFBQyxHQUFTLEVBQUU7WUFDdEcsU0FBUztZQUNULElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxlQUFlOztZQUNULGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTOztZQUNoRCxLQUFLLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhO1FBQy9DLE9BQU87UUFDUCxJQUFJLEtBQUssS0FBSyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxjQUFjLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7OztJQUVPLGNBQWMsQ0FBQyxTQUFTO1FBQzlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUUzRSxDQUFDOzs7WUEvQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7YUFDN0I7Ozs7WUFObUIsVUFBVTs7Ozs7OztJQVM1QiwwQ0FBZ0M7Ozs7O0lBRWhDLHdEQUFnQzs7Ozs7SUFFaEMsOENBQTBCOzs7OztJQUUxQiwwQ0FBc0I7Ozs7O0lBQ1YsbUNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGFuaW1hdGlvbkZyYW1lIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9zY2hlZHVsZXIvYW5pbWF0aW9uRnJhbWUnO1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZlLXNjcm9sbC1hcmVhXSdcbn0pXG5leHBvcnQgY2xhc3MgRkVTY3JvbGxBcmVhRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAvLyDorrDlvZXmu5rliqjkuovku7ZcbiAgcHJpdmF0ZSBzY3JvbGxTdWI6IFN1YnNjcmlwdGlvbjtcbiAgLy8g5qCH6K6w5YWz6IGUXG4gIHByaXZhdGUgcmVsYXRlZENvbGxhcHNlSW5zdGFuY2U7XG4gIC8vIOiusOW9lea7muWKqOeahOWAvFxuICBwcml2YXRlIHNjcm9sbEFyZWFUb3AgPSAwO1xuICAvLyDorrDlvZXlgLxcbiAgcHJpdmF0ZSB0aHJlc2hvbGQgPSAwO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG5cbiAgfVxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmJpbmRTY3JvbGxFdmVudCgpO1xuICB9XG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc2Nyb2xsU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zY3JvbGxTdWIgPSBudWxsO1xuICB9XG5cbiAgLy8g6L+95Yqg5YWz6IGUXG4gIGFkZENvbGxhcHNlSW5zdGFuY2UoY0luc3RhbmNlKSB7XG4gICAgdGhpcy5yZWxhdGVkQ29sbGFwc2VJbnN0YW5jZSA9IGNJbnN0YW5jZTtcbiAgfVxuICAvLyDnu5Hlrprkuovku7ZcbiAgYmluZFNjcm9sbEV2ZW50KCkge1xuICAgIHRoaXMuc2Nyb2xsU3ViID0gZnJvbUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3Njcm9sbCcpLnBpcGUoZGVib3VuY2VUaW1lKDIwKSkuc3Vic2NyaWJlKCgpOiB2b2lkID0+IHtcbiAgICAgIC8v5Yik5pat5rua5Yqo55qE5pa55ZCRXG4gICAgICB0aGlzLnNjcm9sbERpcmVjdGlvbigpO1xuICAgIH0pO1xuICB9XG5cbiAgc2Nyb2xsRGlyZWN0aW9uKCkge1xuICAgIGxldCBhZnRlclNjcm9sbFRvcCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgbGV0IGRlbHRhID0gYWZ0ZXJTY3JvbGxUb3AgLSB0aGlzLnNjcm9sbEFyZWFUb3A7XG4gICAgLy8g5rKh5pyJ5Y+Y5YyWXG4gICAgaWYgKGRlbHRhID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5zY3JvbGxBcmVhVG9wID0gYWZ0ZXJTY3JvbGxUb3A7XG4gICAgdGhpcy5qdWRnZVRocmVzaG9sZChkZWx0YSA+IDAgPyBcImRvd25cIiA6IFwidXBcIik7XG4gIH1cblxuICBwcml2YXRlIGp1ZGdlVGhyZXNob2xkKGRpcmVjdGlvbikge1xuICAgIHRoaXMucmVsYXRlZENvbGxhcHNlSW5zdGFuY2UudXBkYXRlSGVpZ2h0KHRoaXMuc2Nyb2xsQXJlYVRvcCwgZGlyZWN0aW9uKTtcblxuICB9XG59XG4iXX0=