import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { Component, ElementRef, HostBinding, Input, NgZone, ViewChild, Directive, ContentChild, Injectable, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapsible-area/collapsible-area.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FECollapsibleAreaComponent = /** @class */ (function () {
    function FECollapsibleAreaComponent(ngZone, el) {
        this.ngZone = ngZone;
        this.el = el;
        this.cls = true;
        // 样式名称
        this.clsName = {
            'collapse': 'f-state-collapse',
            'expand': 'f-state-expand'
        };
        //默认是否收起
        this.collapseState = false;
    }
    Object.defineProperty(FECollapsibleAreaComponent.prototype, "defaultCollapse", {
        get: /**
         * @return {?}
         */
        function () {
            return this.collapseState;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.collapseState) {
                if (value) {
                    this.collapse();
                }
                else {
                    this.expand();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FECollapsibleAreaComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._initHeight = this.contentArea.nativeElement.getBoundingClientRect().height;
    };
    /**
     * @return {?}
     */
    FECollapsibleAreaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    // 収折
    // 収折
    /**
     * @return {?}
     */
    FECollapsibleAreaComponent.prototype.collapse = 
    // 収折
    /**
     * @return {?}
     */
    function () {
        if (this.collapseState) {
            return;
        }
        this.containerArea.nativeElement.style.height = "0px";
        /** @type {?} */
        var tName = this.el.nativeElement.className;
        tName = tName.replace(this.clsName.expand, '');
        this.el.nativeElement.className = tName + ' ' + this.clsName.collapse;
        this.collapseState = true;
    };
    // 展开
    // 展开
    /**
     * @return {?}
     */
    FECollapsibleAreaComponent.prototype.expand = 
    // 展开
    /**
     * @return {?}
     */
    function () {
        if (!this.collapseState) {
            return;
        }
        this.containerArea.nativeElement.style.height = this._initHeight + "px";
        /** @type {?} */
        var tName = this.el.nativeElement.className;
        tName = tName.replace(this.clsName.collapse, '');
        this.el.nativeElement.className = tName + ' ' + this.clsName.expand;
        this.collapseState = false;
    };
    // 改变状态
    // 改变状态
    /**
     * @return {?}
     */
    FECollapsibleAreaComponent.prototype.changeState = 
    // 改变状态
    /**
     * @return {?}
     */
    function () {
        if (this.collapseState) {
            this.expand();
        }
        else {
            this.collapse();
        }
    };
    // 对外传出初始高度
    // 对外传出初始高度
    /**
     * @return {?}
     */
    FECollapsibleAreaComponent.prototype.getInitHeight = 
    // 对外传出初始高度
    /**
     * @return {?}
     */
    function () {
        return this._initHeight;
    };
    // 更新高度
    // 更新高度
    /**
     * @param {?} tHeight
     * @param {?} direction
     * @return {?}
     */
    FECollapsibleAreaComponent.prototype.updateHeight = 
    // 更新高度
    /**
     * @param {?} tHeight
     * @param {?} direction
     * @return {?}
     */
    function (tHeight, direction) {
        if (direction == 'up' && !this.collapseState || direction == 'down' && this.collapseState) {
            //向上，并且已经展开，或者向下，并且已经収折，不需要处理
            return;
        }
        // 向上
        if (direction == 'up' && tHeight < 10 && this.collapseState) {
            this.expand();
        }
        // 向下
        if (direction == 'down' && tHeight > this._initHeight + 10 && !this.collapseState) {
            this.collapse();
        }
        if (direction == 'down') {
            this.containerArea.nativeElement.style.height = (this._initHeight - tHeight) + 'px';
            if (this._initHeight <= tHeight) {
                //如果高度向下，快到阈值，并且还没有収折，意在収折
                this.collapse();
            }
        }
        else if (direction == 'up') {
            this.containerArea.nativeElement.style.height = (this._initHeight - tHeight) + 'px';
            if (tHeight < 10) {
                // 如果向上，快到阈值，并且还没有展开，意在展开
                this.expand();
            }
        }
    };
    FECollapsibleAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fe-collapsible-area',
                    template: "<div class=\"fe-collapsible-container\" #containerArea>\n  <div class=\"fe-collapsible-area\" #contentArea>\n    <ng-content></ng-content>\n  </div>\n</div>\n<div class=\"fe-collapsible-icon-container\" (click)=\"changeState()\">\n  <span class=\"f-icon-container\"><i class=\"f-icon\"></i></span>\n</div>"
                }] }
    ];
    /** @nocollapse */
    FECollapsibleAreaComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef }
    ]; };
    FECollapsibleAreaComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class.fe-cmp-collapsible-area',] }],
        defaultCollapse: [{ type: Input }],
        contentArea: [{ type: ViewChild, args: ['contentArea',] }],
        containerArea: [{ type: ViewChild, args: ['containerArea',] }]
    };
    return FECollapsibleAreaComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-area.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEScrollAreaDirective = /** @class */ (function () {
    function FEScrollAreaDirective(el) {
        this.el = el;
        // 记录滚动的值
        this.scrollAreaTop = 0;
        // 记录值
        this.threshold = 0;
    }
    /**
     * @return {?}
     */
    FEScrollAreaDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.bindScrollEvent();
    };
    /**
     * @return {?}
     */
    FEScrollAreaDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.scrollSub.unsubscribe();
        this.scrollSub = null;
    };
    // 追加关联
    // 追加关联
    /**
     * @param {?} cInstance
     * @return {?}
     */
    FEScrollAreaDirective.prototype.addCollapseInstance = 
    // 追加关联
    /**
     * @param {?} cInstance
     * @return {?}
     */
    function (cInstance) {
        this.relatedCollapseInstance = cInstance;
    };
    // 绑定事件
    // 绑定事件
    /**
     * @return {?}
     */
    FEScrollAreaDirective.prototype.bindScrollEvent = 
    // 绑定事件
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.scrollSub = fromEvent(this.el.nativeElement, 'scroll').pipe(debounceTime(20)).subscribe((/**
         * @return {?}
         */
        function () {
            //判断滚动的方向
            _this.scrollDirection();
        }));
    };
    /**
     * @return {?}
     */
    FEScrollAreaDirective.prototype.scrollDirection = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var afterScrollTop = this.el.nativeElement.scrollTop;
        /** @type {?} */
        var delta = afterScrollTop - this.scrollAreaTop;
        // 没有变化
        if (delta === 0)
            return false;
        this.scrollAreaTop = afterScrollTop;
        this.judgeThreshold(delta > 0 ? "down" : "up");
    };
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    FEScrollAreaDirective.prototype.judgeThreshold = /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        this.relatedCollapseInstance.updateHeight(this.scrollAreaTop, direction);
    };
    FEScrollAreaDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fe-scroll-area]'
                },] }
    ];
    /** @nocollapse */
    FEScrollAreaDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return FEScrollAreaDirective;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-collapsible-area.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEScrollCollapsibleAreaDirective = /** @class */ (function () {
    function FEScrollCollapsibleAreaDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    FEScrollCollapsibleAreaDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.scrollArea.addCollapseInstance(this.collapseArea);
    };
    /**
     * @return {?}
     */
    FEScrollCollapsibleAreaDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // setTimeout(()=>{
        //   debugger;
        //   this.scrollArea.addCollapseInstance(this.collapseArea);
        // },300);
    };
    FEScrollCollapsibleAreaDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fe-scroll-collapsible]'
                },] }
    ];
    /** @nocollapse */
    FEScrollCollapsibleAreaDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FEScrollCollapsibleAreaDirective.propDecorators = {
        collapseArea: [{ type: ContentChild, args: [FECollapsibleAreaComponent,] }],
        scrollArea: [{ type: ContentChild, args: [FEScrollAreaDirective,] }]
    };
    return FEScrollCollapsibleAreaDirective;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-collapsible-area.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEScrollCollapsibleAreaService = /** @class */ (function () {
    function FEScrollCollapsibleAreaService() {
    }
    FEScrollCollapsibleAreaService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FEScrollCollapsibleAreaService.ctorParameters = function () { return []; };
    /** @nocollapse */ FEScrollCollapsibleAreaService.ngInjectableDef = defineInjectable({ factory: function FEScrollCollapsibleAreaService_Factory() { return new FEScrollCollapsibleAreaService(); }, token: FEScrollCollapsibleAreaService, providedIn: "root" });
    return FEScrollCollapsibleAreaService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/scroll-collapsible-area.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEScrollCollapsibleAreaModule = /** @class */ (function () {
    function FEScrollCollapsibleAreaModule() {
    }
    FEScrollCollapsibleAreaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FEScrollAreaDirective, FEScrollCollapsibleAreaDirective, FECollapsibleAreaComponent],
                    imports: [],
                    exports: [FEScrollAreaDirective, FEScrollCollapsibleAreaDirective, FECollapsibleAreaComponent],
                    providers: [FEScrollCollapsibleAreaService]
                },] }
    ];
    return FEScrollCollapsibleAreaModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-extend-scroll-collapsible-area.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FECollapsibleAreaComponent, FEScrollAreaDirective, FEScrollCollapsibleAreaDirective, FEScrollCollapsibleAreaService, FEScrollCollapsibleAreaModule };

//# sourceMappingURL=farris-extend-scroll-collapsible-area.js.map