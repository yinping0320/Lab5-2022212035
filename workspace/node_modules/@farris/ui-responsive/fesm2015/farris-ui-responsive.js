import { CommonModule } from '@angular/common';
import { Directive, Input, ElementRef, HostBinding, Renderer2, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisRowDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.type = 'flex';
        this.gutter = 16;
        this.justify = 'start';
        this.align = 'start';
        // 绑定row 到class
        this.isRow = this.type === 'flex';
        //
        this.nativeClass = '';
        // 初始化类名 添加宿主元素已有的类名
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    /**
     * @return {?}
     */
    get respClass() {
        return `${this.getJustifyClass()}${this.getAlignClass()}${this.getGutterClass()}${this.getBreakpointClass()}`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // 获取justify class
    /**
     * @return {?}
     */
    getJustifyClass() {
        /** @type {?} */
        const justifyStr = this.justify !== 'start' ? ` justify-content-${this.justify}` : ' ';
        return `${this.nativeClass}${justifyStr}`;
    }
    // 获取 align class
    /**
     * @return {?}
     */
    getAlignClass() {
        return this.align !== 'start' ? ` align-items-${this.align}` : ' ';
    }
    // 响应式 justify
    /**
     * @return {?}
     */
    getBreakpointClass() {
        /** @type {?} */
        const makeClass = (/**
         * @param {?} breakpoint
         * @return {?}
         */
        (breakpoint) => {
            /** @type {?} */
            const props = this[breakpoint] || {};
            // 获取对象中  justify或者align
            return Object.keys(props).map((/**
             * @param {?} prop
             * @return {?}
             */
            prop => prop === 'justify' ?
                `justify-content-${breakpoint}-${props[prop]}` : `align-items-${breakpoint}-${props[prop]}`)).join(' ');
        });
        /** @type {?} */
        const classStr = ['sm', 'md', 'lg', 'xl'].reduce((/**
         * @param {?} pre
         * @param {?} current
         * @return {?}
         */
        (pre, current) => {
            return `${pre} ${makeClass(current)}`;
        }), '');
        return classStr;
    }
    // 有无间隔
    /**
     * @return {?}
     */
    getGutterClass() {
        return !this.gutter ? ' no-gutters' : ' ';
    }
}
FarrisRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-row]',
            },] }
];
/** @nocollapse */
FarrisRowDirective.ctorParameters = () => [
    { type: ElementRef }
];
FarrisRowDirective.propDecorators = {
    type: [{ type: Input }],
    gutter: [{ type: Input }],
    justify: [{ type: Input }],
    align: [{ type: Input }],
    xs: [{ type: Input }],
    sm: [{ type: Input }],
    md: [{ type: Input }],
    lg: [{ type: Input }],
    xl: [{ type: Input }],
    respClass: [{ type: HostBinding, args: ['class',] }],
    isRow: [{ type: HostBinding, args: ['class.row',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisColDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.span = 0;
        // 向右移动几个col
        this.offset = 0;
        this.nativeClass = '';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    /**
     * @return {?}
     */
    get ColClass() {
        return `${this.nativeClass} ${this.getSpanClass()}${this.getBreakpointClass()}${this.getOffsetClass()}${this.getOrderClass()}`;
    }
    /**
     * @return {?}
     */
    get isCol() {
        return this.col;
    }
    /**
     * @return {?}
     */
    get isColSm() {
        return this.colSm;
    }
    /**
     * @return {?}
     */
    get isColMd() {
        return this.colMd;
    }
    /**
     * @return {?}
     */
    get isColLg() {
        return this.colLg;
    }
    /**
     * @return {?}
     */
    get isColXl() {
        return this.colXl;
    }
    /* 获取span 类名 */
    /**
     * @return {?}
     */
    getSpanClass() {
        return this.span ? ` col-${this.span}` : ` `;
    }
    /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
    /**
     * @return {?}
     */
    getBreakpointClass() {
        /** @type {?} */
        const makeClass = (/**
         * @param {?} breakpoint
         * @return {?}
         */
        (breakpoint) => {
            /** @type {?} */
            const props = this[breakpoint] || {};
            // 获取对象中  span或者offset
            return Object.keys(props).map((/**
             * @param {?} prop
             * @return {?}
             */
            prop => prop === 'span' ?
                `col-${breakpoint}-${props[prop]}` : prop === 'offset' ? `offset-${breakpoint}-${props[prop]}` :
                `order-${breakpoint}-${props[prop]}`)).join(' ');
        });
        return ['sm', 'md', 'lg', 'xl'].reduce((/**
         * @param {?} pre
         * @param {?} current
         * @return {?}
         */
        (pre, current) => {
            return typeof this[current] === 'object' ? `${pre} ${makeClass(current)}` :
                typeof this[current] === 'number' ? `${pre} col-${current}-${this[current]}` : `${pre} `;
        }), '');
    }
    /* 获取offset */
    /**
     * @return {?}
     */
    getOffsetClass() {
        return this.offset ? ` offset-${this.offset}` : ` `;
    }
    // get order class
    /**
     * @return {?}
     */
    getOrderClass() {
        return this.order ? ` order-${this.order}` : ` `;
    }
}
FarrisColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-col]'
            },] }
];
/** @nocollapse */
FarrisColDirective.ctorParameters = () => [
    { type: ElementRef }
];
FarrisColDirective.propDecorators = {
    col: [{ type: Input }],
    colSm: [{ type: Input, args: ['col-sm',] }],
    colMd: [{ type: Input, args: ['col-md',] }],
    colLg: [{ type: Input, args: ['col-lg',] }],
    colXl: [{ type: Input, args: ['col-xl',] }],
    span: [{ type: Input }],
    offset: [{ type: Input }],
    order: [{ type: Input }],
    xs: [{ type: Input }],
    sm: [{ type: Input }],
    md: [{ type: Input }],
    lg: [{ type: Input }],
    xl: [{ type: Input }],
    ColClass: [{ type: HostBinding, args: ['class',] }],
    isCol: [{ type: HostBinding, args: ['class.col',] }],
    isColSm: [{ type: HostBinding, args: ['class.col-sm',] }],
    isColMd: [{ type: HostBinding, args: ['class.col-md',] }],
    isColLg: [{ type: HostBinding, args: ['class.col-lg',] }],
    isColXl: [{ type: HostBinding, args: ['class.col-xl',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisContainerDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        this.isContainer = true;
    }
    /**
     * @return {?}
     */
    get width() {
        // 对各个单位进行处理
        return this._width;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    set width(width) {
        this._width = this.resolveSize(width);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} height
     * @return {?}
     */
    set height(height) {
        this._height = this.resolveSize(height);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 宽高  赋值
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    }
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    resolveSize(size) {
        /** @type {?} */
        const regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? `${parseInt(size, 10)}${size.match(regex)[0]}` : `${size}px`;
    }
}
FarrisContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-container]'
            },] }
];
/** @nocollapse */
FarrisContainerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisContainerDirective.propDecorators = {
    isContainer: [{ type: HostBinding, args: ['class.container',] }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisResponsiveModule {
}
FarrisResponsiveModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [FarrisContainerDirective, FarrisColDirective, FarrisRowDirective],
                exports: [FarrisContainerDirective, FarrisColDirective, FarrisRowDirective],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisColDirective, FarrisContainerDirective, FarrisRowDirective, FarrisResponsiveModule };

//# sourceMappingURL=farris-ui-responsive.js.map