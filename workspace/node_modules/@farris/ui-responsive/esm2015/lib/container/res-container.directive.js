/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, HostBinding, Renderer2 } from '@angular/core';
export class FarrisContainerDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        this.isContainer = true;
    }
    /**
     * @return {?}
     */
    get width() {
        // 对各个单位进行处理
        return this._width;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    set width(width) {
        this._width = this.resolveSize(width);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} height
     * @return {?}
     */
    set height(height) {
        this._height = this.resolveSize(height);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 宽高  赋值
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    }
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    resolveSize(size) {
        /** @type {?} */
        const regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? `${parseInt(size, 10)}${size.match(regex)[0]}` : `${size}px`;
    }
}
FarrisContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-container]'
            },] }
];
/** @nocollapse */
FarrisContainerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisContainerDirective.propDecorators = {
    isContainer: [{ type: HostBinding, args: ['class.container',] }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FarrisContainerDirective.prototype.isContainer;
    /** @type {?} */
    FarrisContainerDirective.prototype._width;
    /** @type {?} */
    FarrisContainerDirective.prototype._height;
    /**
     * @type {?}
     * @private
     */
    FarrisContainerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisContainerDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzLWNvbnRhaW5lci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJsaWIvY29udGFpbmVyL3Jlcy1jb250YWluZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVEsV0FBVyxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUluRyxNQUFNLE9BQU8sd0JBQXdCOzs7OztJQXFCakMsWUFBb0IsRUFBYyxFQUFVLE1BQWlCO1FBQXpDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBcEI3QixnQkFBVyxHQUFHLElBQUksQ0FBQztJQXFCbkQsQ0FBQzs7OztJQWhCRCxJQUNJLEtBQUs7UUFDTCxZQUFZO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsSUFBSSxLQUFLLENBQUMsS0FBVTtRQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7OztJQUNELElBQ0ksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDOzs7OztJQUNELElBQUksTUFBTSxDQUFDLE1BQVc7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7SUFHRCxRQUFRO1FBQ0osU0FBUztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RSxDQUFDOzs7Ozs7SUFFRCxXQUFXLENBQUMsSUFBSTs7Y0FDTixLQUFLLEdBQUcsZ0JBQWdCO1FBQzlCLFNBQVM7UUFDVCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUM7SUFDM0YsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2FBQ2pDOzs7O1lBSDBCLFVBQVU7WUFBNkIsU0FBUzs7OzBCQUt0RSxXQUFXLFNBQUMsaUJBQWlCO29CQUs3QixLQUFLO3FCQVFMLEtBQUs7Ozs7SUFiTiwrQ0FBbUQ7O0lBR25ELDBDQUF3Qjs7SUFDeEIsMkNBQXlCOzs7OztJQWdCYixzQ0FBc0I7Ozs7O0lBQUUsMENBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgRWxlbWVudFJlZiwgSG9zdCwgSG9zdEJpbmRpbmcsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tmYXJyaXMtY29udGFpbmVyXSdcbn0pXG5leHBvcnQgY2xhc3MgRmFycmlzQ29udGFpbmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbnRhaW5lcicpIGlzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAvLyDlj6/ku6Xorr7nva7lrr3luqblkozpq5jluqZcbiAgICAvLyDorr7nva7lrr0g6auY5bGe5oCnXG4gICAgX3dpZHRoOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgX2hlaWdodDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICAvLyDlr7nlkITkuKrljZXkvY3ov5vooYzlpITnkIZcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgIH1cbiAgICBzZXQgd2lkdGgod2lkdGg6IGFueSkge1xuICAgICAgICB0aGlzLl93aWR0aCA9IHRoaXMucmVzb2x2ZVNpemUod2lkdGgpO1xuICAgIH1cbiAgICBASW5wdXQoKVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgfVxuICAgIHNldCBoZWlnaHQoaGVpZ2h0OiBhbnkpIHtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdGhpcy5yZXNvbHZlU2l6ZShoZWlnaHQpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XG4gICAgfVxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICAvLyDlrr3pq5ggIOi1i+WAvFxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcsIHRoaXMud2lkdGgpO1xuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCB0aGlzLmhlaWdodCk7XG4gICAgfVxuICAgIC8q5a696auY57G75Z6L5pivIHN0cmluZ+aIluiAhW51bWJlciDop6PmnpDlrr3pq5ggIOWwuuWvuCAqL1xuICAgIHJlc29sdmVTaXplKHNpemUpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSAvcHh8ZW18cmVtfHB0fCUvO1xuICAgICAgICAvLyDor7TmmI7mmK/lrZfnrKbkuLJcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3Qoc2l6ZSkgPyBgJHtwYXJzZUludChzaXplLCAxMCl9JHtzaXplLm1hdGNoKHJlZ2V4KVswXX1gIDogYCR7c2l6ZX1weGA7XG4gICAgfVxufVxuIl19