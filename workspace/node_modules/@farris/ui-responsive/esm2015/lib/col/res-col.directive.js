/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, HostBinding } from '@angular/core';
export class FarrisColDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.span = 0;
        // 向右移动几个col
        this.offset = 0;
        this.nativeClass = '';
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    /**
     * @return {?}
     */
    get ColClass() {
        return `${this.nativeClass} ${this.getSpanClass()}${this.getBreakpointClass()}${this.getOffsetClass()}${this.getOrderClass()}`;
    }
    /**
     * @return {?}
     */
    get isCol() {
        return this.col;
    }
    /**
     * @return {?}
     */
    get isColSm() {
        return this.colSm;
    }
    /**
     * @return {?}
     */
    get isColMd() {
        return this.colMd;
    }
    /**
     * @return {?}
     */
    get isColLg() {
        return this.colLg;
    }
    /**
     * @return {?}
     */
    get isColXl() {
        return this.colXl;
    }
    /* 获取span 类名 */
    /**
     * @return {?}
     */
    getSpanClass() {
        return this.span ? ` col-${this.span}` : ` `;
    }
    /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
    /**
     * @return {?}
     */
    getBreakpointClass() {
        /** @type {?} */
        const makeClass = (/**
         * @param {?} breakpoint
         * @return {?}
         */
        (breakpoint) => {
            /** @type {?} */
            const props = this[breakpoint] || {};
            // 获取对象中  span或者offset
            return Object.keys(props).map((/**
             * @param {?} prop
             * @return {?}
             */
            prop => prop === 'span' ?
                `col-${breakpoint}-${props[prop]}` : prop === 'offset' ? `offset-${breakpoint}-${props[prop]}` :
                `order-${breakpoint}-${props[prop]}`)).join(' ');
        });
        return ['sm', 'md', 'lg', 'xl'].reduce((/**
         * @param {?} pre
         * @param {?} current
         * @return {?}
         */
        (pre, current) => {
            return typeof this[current] === 'object' ? `${pre} ${makeClass(current)}` :
                typeof this[current] === 'number' ? `${pre} col-${current}-${this[current]}` : `${pre} `;
        }), '');
    }
    /* 获取offset */
    /**
     * @return {?}
     */
    getOffsetClass() {
        return this.offset ? ` offset-${this.offset}` : ` `;
    }
    // get order class
    /**
     * @return {?}
     */
    getOrderClass() {
        return this.order ? ` order-${this.order}` : ` `;
    }
}
FarrisColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-col]'
            },] }
];
/** @nocollapse */
FarrisColDirective.ctorParameters = () => [
    { type: ElementRef }
];
FarrisColDirective.propDecorators = {
    col: [{ type: Input }],
    colSm: [{ type: Input, args: ['col-sm',] }],
    colMd: [{ type: Input, args: ['col-md',] }],
    colLg: [{ type: Input, args: ['col-lg',] }],
    colXl: [{ type: Input, args: ['col-xl',] }],
    span: [{ type: Input }],
    offset: [{ type: Input }],
    order: [{ type: Input }],
    xs: [{ type: Input }],
    sm: [{ type: Input }],
    md: [{ type: Input }],
    lg: [{ type: Input }],
    xl: [{ type: Input }],
    ColClass: [{ type: HostBinding, args: ['class',] }],
    isCol: [{ type: HostBinding, args: ['class.col',] }],
    isColSm: [{ type: HostBinding, args: ['class.col-sm',] }],
    isColMd: [{ type: HostBinding, args: ['class.col-md',] }],
    isColLg: [{ type: HostBinding, args: ['class.col-lg',] }],
    isColXl: [{ type: HostBinding, args: ['class.col-xl',] }]
};
if (false) {
    /** @type {?} */
    FarrisColDirective.prototype.col;
    /** @type {?} */
    FarrisColDirective.prototype.colSm;
    /** @type {?} */
    FarrisColDirective.prototype.colMd;
    /** @type {?} */
    FarrisColDirective.prototype.colLg;
    /** @type {?} */
    FarrisColDirective.prototype.colXl;
    /** @type {?} */
    FarrisColDirective.prototype.span;
    /** @type {?} */
    FarrisColDirective.prototype.offset;
    /** @type {?} */
    FarrisColDirective.prototype.order;
    /** @type {?} */
    FarrisColDirective.prototype.xs;
    /** @type {?} */
    FarrisColDirective.prototype.sm;
    /** @type {?} */
    FarrisColDirective.prototype.md;
    /** @type {?} */
    FarrisColDirective.prototype.lg;
    /** @type {?} */
    FarrisColDirective.prototype.xl;
    /** @type {?} */
    FarrisColDirective.prototype.nativeClass;
    /**
     * @type {?}
     * @private
     */
    FarrisColDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzLWNvbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJsaWIvY29sL3Jlcy1jb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTFFLE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUErQzNCLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBeEN6QixTQUFJLEdBQVcsQ0FBQyxDQUFDOztRQUVqQixXQUFNLEdBQVcsQ0FBQyxDQUFDO1FBcUM1QixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUViLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUM5RCxDQUFDOzs7O0lBM0JELElBQ0ksUUFBUTtRQUNSLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7SUFDbkksQ0FBQzs7OztJQUNELElBQ0ksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDOzs7O0lBQ0QsSUFDSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFDRCxJQUNJLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQzs7OztJQUNELElBQ0ksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDOzs7O0lBQ0QsSUFDSSxPQUFPO1FBQ1AsT0FBTyxJ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akIseUNBQWlCOzs7OztJQUNMLGdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tmYXJyaXMtY29sXSdcbn0pXG5leHBvcnQgY2xhc3MgRmFycmlzQ29sRGlyZWN0aXZlIHtcbiAgICAvLyBjb2xcbiAgICBASW5wdXQoKSBjb2w6IGJvb2xlYW47XG4gICAgQElucHV0KCdjb2wtc20nKSBjb2xTbTogYm9vbGVhbjtcbiAgICBASW5wdXQoJ2NvbC1tZCcpIGNvbE1kOiBib29sZWFuO1xuICAgIEBJbnB1dCgnY29sLWxnJykgY29sTGc6IGJvb2xlYW47XG4gICAgQElucHV0KCdjb2wteGwnKSBjb2xYbDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBzcGFuOiBudW1iZXIgPSAwO1xuICAgIC8vIOWQkeWPs+enu+WKqOWHoOS4qmNvbFxuICAgIEBJbnB1dCgpIG9mZnNldDogbnVtYmVyID0gMDtcbiAgICAvLyBvcmRlciBjb2zpobrluo9cbiAgICBASW5wdXQoKSBvcmRlcjogbnVtYmVyO1xuICAgIC8vIDw1NzZcbiAgICBASW5wdXQoKSB4czogYW55O1xuICAgIC8vID49NTc2XG4gICAgQElucHV0KCkgc206IGFueTtcbiAgICAvLyA+PTc2OFxuICAgIEBJbnB1dCgpIG1kOiBhbnk7XG4gICAgLy8gPj05NjBcbiAgICBASW5wdXQoKSBsZzogYW55O1xuICAgIC8vID49MTIwMFxuICAgIEBJbnB1dCgpIHhsOiBhbnk7XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gICAgZ2V0IENvbENsYXNzKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5uYXRpdmVDbGFzc30gJHt0aGlzLmdldFNwYW5DbGFzcygpfSR7dGhpcy5nZXRCcmVha3BvaW50Q2xhc3MoKX0ke3RoaXMuZ2V0T2Zmc2V0Q2xhc3MoKX0ke3RoaXMuZ2V0T3JkZXJDbGFzcygpfWA7XG4gICAgfVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuY29sJylcbiAgICBnZXQgaXNDb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbDtcbiAgICB9XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb2wtc20nKVxuICAgIGdldCBpc0NvbFNtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xTbTtcbiAgICB9XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb2wtbWQnKVxuICAgIGdldCBpc0NvbE1kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xNZDtcbiAgICB9XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb2wtbGcnKVxuICAgIGdldCBpc0NvbExnKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xMZztcbiAgICB9XG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb2wteGwnKVxuICAgIGdldCBpc0NvbFhsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xYbDtcbiAgICB9XG4gICAgbmF0aXZlQ2xhc3MgPSAnJztcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHRoaXMubmF0aXZlQ2xhc3MgKz0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC52YWx1ZTtcbiAgICB9XG4gICAgLyog6I635Y+Wc3BhbiDnsbvlkI0gKi9cbiAgICBnZXRTcGFuQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwYW4gPyBgIGNvbC0ke3RoaXMuc3Bhbn1gIDogYCBgO1xuICAgIH1cbiAgICAvKiDojrflj5blk43lupTlvI8g57G75ZCNICB4cyBzbSBtZCBsZyB4bCDlj6/ku6XmmK/mlbDlrZfvvIzku6PooahzcGFuO+S5n+WPr+S7peaYr+Wvueixoe+8jOWGhemDqOWMheWQq3NwYW4gb2Zmc2V0Ki9cbiAgICBnZXRCcmVha3BvaW50Q2xhc3MoKSB7XG4gICAgICAgIGNvbnN0IG1ha2VDbGFzcyA9IChicmVha3BvaW50OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzW2JyZWFrcG9pbnRdIHx8IHt9O1xuICAgICAgICAgICAgLy8g6I635Y+W5a+56LGh5LitICBzcGFu5oiW6ICFb2Zmc2V0XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChwcm9wID0+IHByb3AgPT09ICdzcGFuJyA/XG4gICAgICAgICAgICAgICAgYGNvbC0ke2JyZWFrcG9pbnR9LSR7cHJvcHNbcHJvcF19YCA6IHByb3AgPT09ICdvZmZzZXQnID8gYG9mZnNldC0ke2JyZWFrcG9pbnR9LSR7cHJvcHNbcHJvcF19YCA6XG4gICAgICAgICAgICAgICAgICAgIGBvcmRlci0ke2JyZWFrcG9pbnR9LSR7cHJvcHNbcHJvcF19YCkuam9pbignICcpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gWydzbScsICdtZCcsICdsZycsICd4bCddLnJlZHVjZSgocHJlLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXNbY3VycmVudF0gPT09ICdvYmplY3QnID8gYCR7cHJlfSAke21ha2VDbGFzcyhjdXJyZW50KX1gIDpcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpc1tjdXJyZW50XSA9PT0gJ251bWJlcicgPyBgJHtwcmV9IGNvbC0ke2N1cnJlbnR9LSR7dGhpc1tjdXJyZW50XX1gIDogYCR7cHJlfSBgO1xuICAgICAgICB9LCAnJyk7XG4gICAgfVxuICAgIC8qIOiOt+WPlm9mZnNldCAqL1xuICAgIGdldE9mZnNldENsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPyBgIG9mZnNldC0ke3RoaXMub2Zmc2V0fWAgOiBgIGA7XG4gICAgfVxuICAgIC8vIGdldCBvcmRlciBjbGFzc1xuICAgIGdldE9yZGVyQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yZGVyID8gYCBvcmRlci0ke3RoaXMub3JkZXJ9YCA6IGAgYDtcbiAgICB9XG59XG4iXX0=