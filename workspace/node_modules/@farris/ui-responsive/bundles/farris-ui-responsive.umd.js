(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-responsive', ['exports', '@angular/common', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-responsive'] = {}),global.ng.common,global.ng.core));
}(this, (function (exports,common,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisRowDirective = /** @class */ (function () {
        function FarrisRowDirective(el) {
            this.el = el;
            this.type = 'flex';
            this.gutter = 16;
            this.justify = 'start';
            this.align = 'start';
            // 绑定row 到class
            this.isRow = this.type === 'flex';
            //
            this.nativeClass = '';
            // 初始化类名 添加宿主元素已有的类名
            this.nativeClass += this.el.nativeElement.classList.value;
        }
        Object.defineProperty(FarrisRowDirective.prototype, "respClass", {
            get: /**
             * @return {?}
             */ function () {
                return "" + this.getJustifyClass() + this.getAlignClass() + this.getGutterClass() + this.getBreakpointClass();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FarrisRowDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        // 获取justify class
        // 获取justify class
        /**
         * @return {?}
         */
        FarrisRowDirective.prototype.getJustifyClass =
            // 获取justify class
            /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var justifyStr = this.justify !== 'start' ? " justify-content-" + this.justify : ' ';
                return "" + this.nativeClass + justifyStr;
            };
        // 获取 align class
        // 获取 align class
        /**
         * @return {?}
         */
        FarrisRowDirective.prototype.getAlignClass =
            // 获取 align class
            /**
             * @return {?}
             */
            function () {
                return this.align !== 'start' ? " align-items-" + this.align : ' ';
            };
        // 响应式 justify
        // 响应式 justify
        /**
         * @return {?}
         */
        FarrisRowDirective.prototype.getBreakpointClass =
            // 响应式 justify
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                /** @type {?} */
                var makeClass = ( /**
                 * @param {?} breakpoint
                 * @return {?}
                 */function (breakpoint) {
                    /** @type {?} */
                    var props = _this[breakpoint] || {};
                    // 获取对象中  justify或者align
                    return Object.keys(props).map(( /**
                     * @param {?} prop
                     * @return {?}
                     */function (prop) {
                        return prop === 'justify' ?
                            "justify-content-" + breakpoint + "-" + props[prop] : "align-items-" + breakpoint + "-" + props[prop];
                    })).join(' ');
                });
                /** @type {?} */
                var classStr = ['sm', 'md', 'lg', 'xl'].reduce(( /**
                 * @param {?} pre
                 * @param {?} current
                 * @return {?}
                 */function (pre, current) {
                    return pre + " " + makeClass(current);
                }), '');
                return classStr;
            };
        // 有无间隔
        // 有无间隔
        /**
         * @return {?}
         */
        FarrisRowDirective.prototype.getGutterClass =
            // 有无间隔
            /**
             * @return {?}
             */
            function () {
                return !this.gutter ? ' no-gutters' : ' ';
            };
        FarrisRowDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-row]',
                    },] }
        ];
        /** @nocollapse */
        FarrisRowDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        FarrisRowDirective.propDecorators = {
            type: [{ type: core.Input }],
            gutter: [{ type: core.Input }],
            justify: [{ type: core.Input }],
            align: [{ type: core.Input }],
            xs: [{ type: core.Input }],
            sm: [{ type: core.Input }],
            md: [{ type: core.Input }],
            lg: [{ type: core.Input }],
            xl: [{ type: core.Input }],
            respClass: [{ type: core.HostBinding, args: ['class',] }],
            isRow: [{ type: core.HostBinding, args: ['class.row',] }]
        };
        return FarrisRowDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisColDirective = /** @class */ (function () {
        function FarrisColDirective(el) {
            this.el = el;
            this.span = 0;
            // 向右移动几个col
            this.offset = 0;
            this.nativeClass = '';
            this.nativeClass += this.el.nativeElement.classList.value;
        }
        Object.defineProperty(FarrisColDirective.prototype, "ColClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.nativeClass + " " + this.getSpanClass() + this.getBreakpointClass() + this.getOffsetClass() + this.getOrderClass();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisColDirective.prototype, "isCol", {
            get: /**
             * @return {?}
             */ function () {
                return this.col;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisColDirective.prototype, "isColSm", {
            get: /**
             * @return {?}
             */ function () {
                return this.colSm;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisColDirective.prototype, "isColMd", {
            get: /**
             * @return {?}
             */ function () {
                return this.colMd;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisColDirective.prototype, "isColLg", {
            get: /**
             * @return {?}
             */ function () {
                return this.colLg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisColDirective.prototype, "isColXl", {
            get: /**
             * @return {?}
             */ function () {
                return this.colXl;
            },
            enumerable: true,
            configurable: true
        });
        /* 获取span 类名 */
        /* 获取span 类名 */
        /**
         * @return {?}
         */
        FarrisColDirective.prototype.getSpanClass = /* 获取span 类名 */
            /**
             * @return {?}
             */
            function () {
                return this.span ? " col-" + this.span : " ";
            };
        /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
        /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
        /**
         * @return {?}
         */
        FarrisColDirective.prototype.getBreakpointClass = /* 获取响应式 类名  xs sm md lg xl 可以是数字，代表span;也可以是对象，内部包含span offset*/
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                /** @type {?} */
                var makeClass = ( /**
                 * @param {?} breakpoint
                 * @return {?}
                 */function (breakpoint) {
                    /** @type {?} */
                    var props = _this[breakpoint] || {};
                    // 获取对象中  span或者offset
                    return Object.keys(props).map(( /**
                     * @param {?} prop
                     * @return {?}
                     */function (prop) {
                        return prop === 'span' ?
                            "col-" + breakpoint + "-" + props[prop] : prop === 'offset' ? "offset-" + breakpoint + "-" + props[prop] :
                            "order-" + breakpoint + "-" + props[prop];
                    })).join(' ');
                });
                return ['sm', 'md', 'lg', 'xl'].reduce(( /**
                 * @param {?} pre
                 * @param {?} current
                 * @return {?}
                 */function (pre, current) {
                    return typeof _this[current] === 'object' ? pre + " " + makeClass(current) :
                        typeof _this[current] === 'number' ? pre + " col-" + current + "-" + _this[current] : pre + " ";
                }), '');
            };
        /* 获取offset */
        /* 获取offset */
        /**
         * @return {?}
         */
        FarrisColDirective.prototype.getOffsetClass = /* 获取offset */
            /**
             * @return {?}
             */
            function () {
                return this.offset ? " offset-" + this.offset : " ";
            };
        // get order class
        // get order class
        /**
         * @return {?}
         */
        FarrisColDirective.prototype.getOrderClass =
            // get order class
            /**
             * @return {?}
             */
            function () {
                return this.order ? " order-" + this.order : " ";
            };
        FarrisColDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-col]'
                    },] }
        ];
        /** @nocollapse */
        FarrisColDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        FarrisColDirective.propDecorators = {
            col: [{ type: core.Input }],
            colSm: [{ type: core.Input, args: ['col-sm',] }],
            colMd: [{ type: core.Input, args: ['col-md',] }],
            colLg: [{ type: core.Input, args: ['col-lg',] }],
            colXl: [{ type: core.Input, args: ['col-xl',] }],
            span: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            order: [{ type: core.Input }],
            xs: [{ type: core.Input }],
            sm: [{ type: core.Input }],
            md: [{ type: core.Input }],
            lg: [{ type: core.Input }],
            xl: [{ type: core.Input }],
            ColClass: [{ type: core.HostBinding, args: ['class',] }],
            isCol: [{ type: core.HostBinding, args: ['class.col',] }],
            isColSm: [{ type: core.HostBinding, args: ['class.col-sm',] }],
            isColMd: [{ type: core.HostBinding, args: ['class.col-md',] }],
            isColLg: [{ type: core.HostBinding, args: ['class.col-lg',] }],
            isColXl: [{ type: core.HostBinding, args: ['class.col-xl',] }]
        };
        return FarrisColDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisContainerDirective = /** @class */ (function () {
        function FarrisContainerDirective(el, render) {
            this.el = el;
            this.render = render;
            this.isContainer = true;
        }
        Object.defineProperty(FarrisContainerDirective.prototype, "width", {
            get: /**
             * @return {?}
             */ function () {
                // 对各个单位进行处理
                return this._width;
            },
            set: /**
             * @param {?} width
             * @return {?}
             */ function (width) {
                this._width = this.resolveSize(width);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisContainerDirective.prototype, "height", {
            get: /**
             * @return {?}
             */ function () {
                return this._height;
            },
            set: /**
             * @param {?} height
             * @return {?}
             */ function (height) {
                this._height = this.resolveSize(height);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FarrisContainerDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // 宽高  赋值
                this.render.setStyle(this.el.nativeElement, 'width', this.width);
                this.render.setStyle(this.el.nativeElement, 'height', this.height);
            };
        /*宽高类型是 string或者number 解析宽高  尺寸 */
        /*宽高类型是 string或者number 解析宽高  尺寸 */
        /**
         * @param {?} size
         * @return {?}
         */
        FarrisContainerDirective.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
            /**
             * @param {?} size
             * @return {?}
             */
            function (size) {
                /** @type {?} */
                var regex = /px|em|rem|pt|%/;
                // 说明是字符串
                return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
            };
        FarrisContainerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-container]'
                    },] }
        ];
        /** @nocollapse */
        FarrisContainerDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        FarrisContainerDirective.propDecorators = {
            isContainer: [{ type: core.HostBinding, args: ['class.container',] }],
            width: [{ type: core.Input }],
            height: [{ type: core.Input }]
        };
        return FarrisContainerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisResponsiveModule = /** @class */ (function () {
        function FarrisResponsiveModule() {
        }
        FarrisResponsiveModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [FarrisContainerDirective, FarrisColDirective, FarrisRowDirective],
                        exports: [FarrisContainerDirective, FarrisColDirective, FarrisRowDirective],
                    },] }
        ];
        return FarrisResponsiveModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FarrisColDirective = FarrisColDirective;
    exports.FarrisContainerDirective = FarrisContainerDirective;
    exports.FarrisRowDirective = FarrisRowDirective;
    exports.FarrisResponsiveModule = FarrisResponsiveModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-responsive.umd.js.map