/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, HostBinding, Renderer2 } from '@angular/core';
var FarrisContainerDirective = /** @class */ (function () {
    function FarrisContainerDirective(el, render) {
        this.el = el;
        this.render = render;
        this.isContainer = true;
    }
    Object.defineProperty(FarrisContainerDirective.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            // 对各个单位进行处理
            return this._width;
        },
        set: /**
         * @param {?} width
         * @return {?}
         */
        function (width) {
            this._width = this.resolveSize(width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisContainerDirective.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = this.resolveSize(height);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisContainerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // 宽高  赋值
        this.render.setStyle(this.el.nativeElement, 'width', this.width);
        this.render.setStyle(this.el.nativeElement, 'height', this.height);
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    FarrisContainerDirective.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    FarrisContainerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-container]'
                },] }
    ];
    /** @nocollapse */
    FarrisContainerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FarrisContainerDirective.propDecorators = {
        isContainer: [{ type: HostBinding, args: ['class.container',] }],
        width: [{ type: Input }],
        height: [{ type: Input }]
    };
    return FarrisContainerDirective;
}());
export { FarrisContainerDirective };
if (false) {
    /** @type {?} */
    FarrisContainerDirective.prototype.isContainer;
    /** @type {?} */
    FarrisContainerDirective.prototype._width;
    /** @type {?} */
    FarrisContainerDirective.prototype._height;
    /**
     * @type {?}
     * @private
     */
    FarrisContainerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisContainerDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzLWNvbnRhaW5lci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJsaWIvY29udGFpbmVyL3Jlcy1jb250YWluZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVEsV0FBVyxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRztJQXdCSSxrQ0FBb0IsRUFBYyxFQUFVLE1BQWlCO1FBQXpDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBcEI3QixnQkFBVyxHQUFHLElBQUksQ0FBQztJQXFCbkQsQ0FBQztJQWhCRCxzQkFDSSwyQ0FBSzs7OztRQURUO1lBRUksWUFBWTtZQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDOzs7OztRQUNELFVBQVUsS0FBVTtZQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsQ0FBQzs7O09BSEE7SUFJRCxzQkFDSSw0Q0FBTTs7OztRQURWO1lBRUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7Ozs7O1FBQ0QsVUFBVyxNQUFXO1lBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxDQUFDOzs7T0FIQTs7OztJQU1ELDJDQUFROzs7SUFBUjtRQUNJLFNBQVM7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUNELGtDQUFrQzs7Ozs7O0lBQ2xDLDhDQUFXOzs7OztJQUFYLFVBQVksSUFBSTs7WUFDTixLQUFLLEdBQUcsZ0JBQWdCO1FBQzlCLFNBQVM7UUFDVCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRyxDQUFDLENBQUMsQ0FBSSxJQUFJLE9BQUksQ0FBQztJQUMzRixDQUFDOztnQkFwQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7aUJBQ2pDOzs7O2dCQUgwQixVQUFVO2dCQUE2QixTQUFTOzs7OEJBS3RFLFdBQVcsU0FBQyxpQkFBaUI7d0JBSzdCLEtBQUs7eUJBUUwsS0FBSzs7SUFvQlYsK0JBQUM7Q0FBQSxBQXJDRCxJQXFDQztTQWxDWSx3QkFBd0I7OztJQUNqQywrQ0FBbUQ7O0lBR25ELDBDQUF3Qjs7SUFDeEIsMkNBQXlCOzs7OztJQWdCYixzQ0FBc0I7Ozs7O0lBQUUsMENBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgRWxlbWVudFJlZiwgSG9zdCwgSG9zdEJpbmRpbmcsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tmYXJyaXMtY29udGFpbmVyXSdcbn0pXG5leHBvcnQgY2xhc3MgRmFycmlzQ29udGFpbmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbnRhaW5lcicpIGlzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAvLyDlj6/ku6Xorr7nva7lrr3luqblkozpq5jluqZcbiAgICAvLyDorr7nva7lrr0g6auY5bGe5oCnXG4gICAgX3dpZHRoOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgX2hlaWdodDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICAvLyDlr7nlkITkuKrljZXkvY3ov5vooYzlpITnkIZcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgIH1cbiAgICBzZXQgd2lkdGgod2lkdGg6IGFueSkge1xuICAgICAgICB0aGlzLl93aWR0aCA9IHRoaXMucmVzb2x2ZVNpemUod2lkdGgpO1xuICAgIH1cbiAgICBASW5wdXQoKVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgfVxuICAgIHNldCBoZWlnaHQoaGVpZ2h0OiBhbnkpIHtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdGhpcy5yZXNvbHZlU2l6ZShoZWlnaHQpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XG4gICAgfVxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICAvLyDlrr3pq5ggIOi1i+WAvFxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcsIHRoaXMud2lkdGgpO1xuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCB0aGlzLmhlaWdodCk7XG4gICAgfVxuICAgIC8q5a696auY57G75Z6L5pivIHN0cmluZ+aIluiAhW51bWJlciDop6PmnpDlrr3pq5ggIOWwuuWvuCAqL1xuICAgIHJlc29sdmVTaXplKHNpemUpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSAvcHh8ZW18cmVtfHB0fCUvO1xuICAgICAgICAvLyDor7TmmI7mmK/lrZfnrKbkuLJcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3Qoc2l6ZSkgPyBgJHtwYXJzZUludChzaXplLCAxMCl9JHtzaXplLm1hdGNoKHJlZ2V4KVswXX1gIDogYCR7c2l6ZX1weGA7XG4gICAgfVxufVxuIl19