/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, HostBinding } from '@angular/core';
var FarrisRowDirective = /** @class */ (function () {
    function FarrisRowDirective(el) {
        this.el = el;
        this.type = 'flex';
        this.gutter = 16;
        this.justify = 'start';
        this.align = 'start';
        // 绑定row 到class
        this.isRow = this.type === 'flex';
        //
        this.nativeClass = '';
        // 初始化类名 添加宿主元素已有的类名
        this.nativeClass += this.el.nativeElement.classList.value;
    }
    Object.defineProperty(FarrisRowDirective.prototype, "respClass", {
        get: /**
         * @return {?}
         */
        function () {
            return "" + this.getJustifyClass() + this.getAlignClass() + this.getGutterClass() + this.getBreakpointClass();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    // 获取justify class
    // 获取justify class
    /**
     * @return {?}
     */
    FarrisRowDirective.prototype.getJustifyClass = 
    // 获取justify class
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var justifyStr = this.justify !== 'start' ? " justify-content-" + this.justify : ' ';
        return "" + this.nativeClass + justifyStr;
    };
    // 获取 align class
    // 获取 align class
    /**
     * @return {?}
     */
    FarrisRowDirective.prototype.getAlignClass = 
    // 获取 align class
    /**
     * @return {?}
     */
    function () {
        return this.align !== 'start' ? " align-items-" + this.align : ' ';
    };
    // 响应式 justify
    // 响应式 justify
    /**
     * @return {?}
     */
    FarrisRowDirective.prototype.getBreakpointClass = 
    // 响应式 justify
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var makeClass = (/**
         * @param {?} breakpoint
         * @return {?}
         */
        function (breakpoint) {
            /** @type {?} */
            var props = _this[breakpoint] || {};
            // 获取对象中  justify或者align
            return Object.keys(props).map((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) { return prop === 'justify' ?
                "justify-content-" + breakpoint + "-" + props[prop] : "align-items-" + breakpoint + "-" + props[prop]; })).join(' ');
        });
        /** @type {?} */
        var classStr = ['sm', 'md', 'lg', 'xl'].reduce((/**
         * @param {?} pre
         * @param {?} current
         * @return {?}
         */
        function (pre, current) {
            return pre + " " + makeClass(current);
        }), '');
        return classStr;
    };
    // 有无间隔
    // 有无间隔
    /**
     * @return {?}
     */
    FarrisRowDirective.prototype.getGutterClass = 
    // 有无间隔
    /**
     * @return {?}
     */
    function () {
        return !this.gutter ? ' no-gutters' : ' ';
    };
    FarrisRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-row]',
                },] }
    ];
    /** @nocollapse */
    FarrisRowDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FarrisRowDirective.propDecorators = {
        type: [{ type: Input }],
        gutter: [{ type: Input }],
        justify: [{ type: Input }],
        align: [{ type: Input }],
        xs: [{ type: Input }],
        sm: [{ type: Input }],
        md: [{ type: Input }],
        lg: [{ type: Input }],
        xl: [{ type: Input }],
        respClass: [{ type: HostBinding, args: ['class',] }],
        isRow: [{ type: HostBinding, args: ['class.row',] }]
    };
    return FarrisRowDirective;
}());
export { FarrisRowDirective };
if (false) {
    /** @type {?} */
    FarrisRowDirective.prototype.type;
    /** @type {?} */
    FarrisRowDirective.prototype.gutter;
    /** @type {?} */
    FarrisRowDirective.prototype.justify;
    /** @type {?} */
    FarrisRowDirective.prototype.align;
    /**
     * xs={
     * justify:'start',
     * align:'start'
     * }
     * @type {?}
     */
    FarrisRowDirective.prototype.xs;
    /** @type {?} */
    FarrisRowDirective.prototype.sm;
    /** @type {?} */
    FarrisRowDirective.prototype.md;
    /** @type {?} */
    FarrisRowDirective.prototype.lg;
    /** @type {?} */
    FarrisRowDirective.prototype.xl;
    /** @type {?} */
    FarrisRowDirective.prototype.isRow;
    /** @type {?} */
    FarrisRowDirective.prototype.nativeClass;
    /**
     * @type {?}
     * @private
     */
    FarrisRowDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzLXJvdy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJsaWIvcm93L3Jlcy1yb3cuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xGO0lBMkJJLDRCQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQXZCekIsU0FBSSxHQUFXLE1BQU0sQ0FBQztRQUN0QixXQUFNLEdBQVcsRUFBRSxDQUFDO1FBQ3BCLFlBQU8sR0FBVyxPQUFPLENBQUM7UUFDMUIsVUFBSyxHQUFXLE9BQU8sQ0FBQzs7UUFpQlAsVUFBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDOztRQUV2RCxnQkFBVyxHQUFXLEVBQUUsQ0FBQztRQUVyQixvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQzlELENBQUM7SUFYRCxzQkFDSSx5Q0FBUzs7OztRQURiO1lBRUksT0FBTyxLQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBSSxDQUFDO1FBQ2xILENBQUM7OztPQUFBOzs7O0lBU0QscUNBQVE7OztJQUFSO0lBQ0EsQ0FBQztJQUNELGtCQUFrQjs7Ozs7SUFDbEIsNENBQWU7Ozs7O0lBQWY7O1lBQ1UsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxzQkFBb0IsSUFBSSxDQUFDLE9BQVMsQ0FBQyxDQUFDLENBQUMsR0FBRztRQUN0RixPQUFPLEtBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFZLENBQUM7SUFDOUMsQ0FBQztJQUNELGlCQUFpQjs7Ozs7SUFDakIsMENBQWE7Ozs7O0lBQWI7UUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxrQkFBZ0IsSUFBSSxDQUFDLEtBQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3ZFLENBQUM7SUFDRCxjQUFjOzs7OztJQUNkLCtDQUFrQjs7Ozs7SUFBbEI7UUFBQSxpQkFXQzs7WUFWUyxTQUFTOzs7O1FBQUcsVUFBQyxVQUFrQjs7Z0JBQzNCLEtBQUssR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRTtZQUNwQyx3QkFBd0I7WUFDeEIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUc7Ozs7WUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztnQkFDdEQscUJBQW1CLFVBQVUsU0FBSSxLQUFLLENBQUMsSUFBSSxDQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFlLFVBQVUsU0FBSSxLQUFLLENBQUMsSUFBSSxDQUFHLEVBRHpELENBQ3lELEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0csQ0FBQyxDQUFBOztZQUNLLFFBQVEsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU07Ozs7O1FBQUMsVUFBQyxHQUFHLEVBQUUsT0FBTztZQUMxRCxPQUFVLEdBQUcsU0FBSSxTQUFTLENBQUMsT0FBTyxDQUFHLENBQUM7UUFDMUMsQ0FBQyxHQUFFLEVBQUUsQ0FBQztRQUNOLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxPQUFPOzs7OztJQUNQLDJDQUFjOzs7OztJQUFkO1FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzlDLENBQUM7O2dCQTFESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7aUJBQzNCOzs7O2dCQUgwQixVQUFVOzs7dUJBS2hDLEtBQUs7eUJBQ0wsS0FBSzswQkFDTCxLQUFLO3dCQUNMLEtBQUs7cUJBT0wsS0FBSztxQkFDTCxLQUFLO3FCQUNMLEtBQUs7cUJBQ0wsS0FBSztxQkFDTCxLQUFLOzRCQUNMLFdBQVcsU0FBQyxPQUFPO3dCQUtuQixXQUFXLFNBQUMsV0FBVzs7SUFtQzVCLHlCQUFDO0NBQUEsQUEzREQsSUEyREM7U0F4RFksa0JBQWtCOzs7SUFDM0Isa0NBQStCOztJQUMvQixvQ0FBNkI7O0lBQzdCLHFDQUFtQzs7SUFDbkMsbUNBQWlDOzs7Ozs7OztJQU9qQyxnQ0FBaUI7O0lBQ2pCLGdDQUFpQjs7SUFDakIsZ0NBQWlCOztJQUNqQixnQ0FBaUI7O0lBQ2pCLGdDQUFpQjs7SUFNakIsbUNBQXVEOztJQUV2RCx5Q0FBeUI7Ozs7O0lBQ2IsZ0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbZmFycmlzLXJvd10nLFxufSlcbmV4cG9ydCBjbGFzcyBGYXJyaXNSb3dEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpIHR5cGU6IHN0cmluZyA9ICdmbGV4JztcbiAgICBASW5wdXQoKSBndXR0ZXI6IG51bWJlciA9IDE2O1xuICAgIEBJbnB1dCgpIGp1c3RpZnk6IHN0cmluZyA9ICdzdGFydCc7XG4gICAgQElucHV0KCkgYWxpZ246IHN0cmluZyA9ICdzdGFydCc7XG4gICAgLyoqXG4gICAgICogeHM9e1xuICAgICAqIGp1c3RpZnk6J3N0YXJ0JyxcbiAgICAgKiBhbGlnbjonc3RhcnQnXG4gICAgICogfVxuICAgICAqL1xuICAgIEBJbnB1dCgpIHhzOiBhbnk7XG4gICAgQElucHV0KCkgc206IGFueTtcbiAgICBASW5wdXQoKSBtZDogYW55O1xuICAgIEBJbnB1dCgpIGxnOiBhbnk7XG4gICAgQElucHV0KCkgeGw6IGFueTtcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgICBnZXQgcmVzcENsYXNzKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5nZXRKdXN0aWZ5Q2xhc3MoKX0ke3RoaXMuZ2V0QWxpZ25DbGFzcygpfSR7dGhpcy5nZXRHdXR0ZXJDbGFzcygpfSR7dGhpcy5nZXRCcmVha3BvaW50Q2xhc3MoKX1gO1xuICAgIH1cbiAgICAvLyDnu5Hlrppyb3cg5YiwY2xhc3NcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJvdycpIGlzUm93ID0gdGhpcy50eXBlID09PSAnZmxleCc7XG4gICAgLy9cbiAgICBuYXRpdmVDbGFzczogc3RyaW5nID0gJyc7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xuICAgICAgICAvLyDliJ3lp4vljJbnsbvlkI0g5re75Yqg5a6/5Li75YWD57Sg5bey5pyJ55qE57G75ZCNXG4gICAgICAgIHRoaXMubmF0aXZlQ2xhc3MgKz0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC52YWx1ZTtcbiAgICB9XG4gICAgbmdPbkluaXQoKSB7XG4gICAgfVxuICAgIC8vIOiOt+WPlmp1c3RpZnkgY2xhc3NcbiAgICBnZXRKdXN0aWZ5Q2xhc3MoKSB7XG4gICAgICAgIGNvbnN0IGp1c3RpZnlTdHIgPSB0aGlzLmp1c3RpZnkgIT09ICdzdGFydCcgPyBgIGp1c3RpZnktY29udGVudC0ke3RoaXMuanVzdGlmeX1gIDogJyAnO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5uYXRpdmVDbGFzc30ke2p1c3RpZnlTdHJ9YDtcbiAgICB9XG4gICAgLy8g6I635Y+WIGFsaWduIGNsYXNzXG4gICAgZ2V0QWxpZ25DbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxpZ24gIT09ICdzdGFydCcgPyBgIGFsaWduLWl0ZW1zLSR7dGhpcy5hbGlnbn1gIDogJyAnO1xuICAgIH1cbiAgICAvLyDlk43lupTlvI8ganVzdGlmeVxuICAgIGdldEJyZWFrcG9pbnRDbGFzcygpIHtcbiAgICAgICAgY29uc3QgbWFrZUNsYXNzID0gKGJyZWFrcG9pbnQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXNbYnJlYWtwb2ludF0gfHwge307XG4gICAgICAgICAgICAvLyDojrflj5blr7nosaHkuK0gIGp1c3RpZnnmiJbogIVhbGlnblxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiBwcm9wID09PSAnanVzdGlmeScgP1xuICAgICAgICAgICAgICAgIGBqdXN0aWZ5LWNvbnRlbnQtJHticmVha3BvaW50fS0ke3Byb3BzW3Byb3BdfWAgOiBgYWxpZ24taXRlbXMtJHticmVha3BvaW50fS0ke3Byb3BzW3Byb3BdfWApLmpvaW4oJyAnKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xhc3NTdHIgPSBbJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10ucmVkdWNlKChwcmUsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHtwcmV9ICR7bWFrZUNsYXNzKGN1cnJlbnQpfWA7XG4gICAgICAgIH0sICcnKTtcbiAgICAgICAgcmV0dXJuIGNsYXNzU3RyO1xuICAgIH1cbiAgICAvLyDmnInml6Dpl7TpmpRcbiAgICBnZXRHdXR0ZXJDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmd1dHRlciA/ICcgbm8tZ3V0dGVycycgOiAnICc7XG4gICAgfVxufVxuIl19