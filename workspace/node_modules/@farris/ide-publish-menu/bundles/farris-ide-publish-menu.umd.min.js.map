{"version":3,"sources":["ng://@farris/ide-publish-menu/lib/publish-menu.service.ts","ng://@farris/ide-publish-menu/lib/gsp-app/gsp-app.component.ts","ng://@farris/ide-publish-menu/lib/biz-object-operators/bizobject-operators.component.ts","ng://@farris/ide-publish-menu/lib/select-app/select-app.component.ts","ng://@farris/ide-publish-menu/lib/locale.ts","ng://@farris/ide-publish-menu/lib/publish-menu.component.ts","ng://@farris/ide-publish-menu/lib/publish-menu.module.ts"],"names":["PublishMenuService","Injectable","args","providedIn","GspAppManagerComponent","Object","defineProperty","prototype","this","serverIp","ngOnInit","initAllAppTree","appModel","url","path","addInvoke","ngOnChanges","changes","validate","_this","msg","code","localeSer","getValue","name","appInvoks","length","_invoksMsg","map","n","idx","m","appEntrance","appMain_1","line_1","forEach","replace","messagerSer","show","safeHtml","treeNodeClicked","e","parentId","node","data","id","showMask","uuid","c","r","Math","random","toString","push","createNewAppInvok","removeInvoke","filter","http","get","APP_URI","subscribe","allAppTreeData","convert2TreeNodes","v","pid","undefined","item","children","selectable","layer","appId","Component","selector","template","HttpService","Injector","NgZone","MessagerService","Input","injector","ngZone","appIdField","creator","description","LocaleService","BizobjectOperatorsComponent","tt","selectedRow","grid","initTreeData","columns","title","field","width","clearAll","items","allOperators","businessId","funcModel","keys","bizOpId","selectRow","treeNodeUnSelect","BIZ_OBJECT_URI","treeData","setTimeout","bizObjectId","treeNode","findRowNode","parents","expandNode","selectBizObjectId","FUNCTION_OPERATORS_URI","type","cloneDeep","parentID","expanded","Number","isDetail","ViewChild","selectBizOpId","SelectAppComponent","appInvokId","selectedAppID","PUBLISH_MENU_LOCALE","zh-CHS","publishmenu","app","remark","entry","entryname","entrycode","routeid","action","addentry","message","info","inValidInvoks","appcode","appname","invoksCode","invoksName","invoksAppEntrance","column","func","selectBiz","selectapp","addapp","linkapp","appentry","appParam","paramName","paramValue","paramAction","addParam","placeholder","biz","appid","dialog","btnOk","btnCancel","success","selectInfo","bizOptitle","bizwarn","bizaction","line","zh-CHT","en","PublishMenuComponent","emptyData","funcType","generate","icon","isDisplayed","isSysInit","menuType","staticParams","value","nameLanguage","height","saveMenu","localeId","JSON","stringify","_funcModel","post","FUNC_POST_URI","of","modalRef","modalService","dlgContent","showMaxButton","resizable","enableScroll","buttons","text","cls","handle","close","err","console","error","mesg","Message","warning","opened","initAllFuncTree","showSelectAppModal","initialState","sac","showBizObjectOperatorModal","boc","bizObj","bizOp","bizObjID","showAppModal","publishPath","amc","loadingSer","APP_POST_URI","cd","detectChanges","input","document","querySelector","click","focus","removeStaticParams","addStaticParams","FUNC_URI","allFuncTreeData","exportAs","encapsulation","ViewEncapsulation","None","BsModalService","IdService","LoadingService","ChangeDetectorRef","funcIdField","languages","commonUtil","CommonUtils","LOCALE_ID","langData","setLocaleData","PublishMenuModule","NgModule","declarations","imports","CommonModule","FormsModule","LocaleModule","forRoot","LanguageTextboxModule","FarrisCommonModule","PerfectScrollbarModule","ModalModule","MessagerModule","CacheModule","LoadingModule","GSPHttpModule","DatagridModule","TreeTableModule","entryComponents","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PublishMenuService {\r\n\r\n    constructor() { }\r\n}\r\n","import { GspAppModel } from './../models/gsp-app.model';\r\nimport { Component, OnInit, Injector, LOCALE_ID,\r\n        Input, OnChanges, SimpleChanges, ViewChild, NgZone } from '@angular/core';\r\nimport { HttpService } from '@farris/ide-devkit';\r\nimport { TreeNode } from '@farris/ui-treetable';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Component({\r\n    selector: 'gsp-app-mangaer',\r\n    templateUrl: './gsp-app.component.html'\r\n})\r\nexport class GspAppManagerComponent implements OnInit, OnChanges {\r\n\r\n    @Input() serverIp = '';\r\n    @Input() path = '';\r\n    /** ææappæ°æ® */\r\n    allAppTreeData = [];\r\n    appIdField = 'id';\r\n\r\n    showMask = true;\r\n\r\n    appModel: GspAppModel = {\r\n        appInvoks: [\r\n        ],\r\n        code: '',\r\n        creator: '',\r\n        description: '',\r\n        id: this.uuid(),\r\n        layer: '4',\r\n        name: '',\r\n        parentId: '',\r\n        url: ''\r\n    };\r\n\r\n\r\n    localeSer: LocaleService;\r\n\r\n    private get APP_URI() {\r\n        return  this.serverIp + '/api/runtime/sys/v1.0/gspapp/all';\r\n    }\r\n\r\n    constructor(\r\n        private http: HttpService,\r\n        private injector: Injector,\r\n        private ngZone: NgZone,\r\n        private messagerSer: MessagerService\r\n    ) {\r\n\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initAllAppTree();\r\n        this.appModel.url = this.path;\r\n        this.addInvoke();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n\r\n    }\r\n\r\n    validate() {\r\n        let msg = '';\r\n\r\n\r\n        if (!this.appModel.code) {\r\n            msg += this.localeSer.getValue('publishmenu.app.message.appcode'); // '<br> åºç¨ç¼å·ä¸è½ä¸ºç©ºã';\r\n        }\r\n\r\n        if (!this.appModel.name) {\r\n            msg += this.localeSer.getValue('publishmenu.app.message.appname'); // '<br> åºç¨åç§°ä¸è½ä¸ºç©ºã';\r\n        }\r\n\r\n\r\n        if (!this.appModel.url) {\r\n            msg += this.localeSer.getValue('publishmenu.app.message.url'); // '<br> é¨ç½²è·¯å¾ä¸è½ä¸ºç©ºã';\r\n        }\r\n\r\n\r\n        if (!this.appModel.appInvoks || !this.appModel.appInvoks.length) {\r\n            msg += this.localeSer.getValue('publishmenu.app.message.appInvoks'); // 'è¯·è®¾ç½®åºç¨å¥å£ç¹';\r\n        } else {\r\n            // const inValidInvoks = this.appModel.appInvoks.filter(n => {\r\n            //     return !n.code || !n.name || !n.appEntrance;\r\n            // });\r\n\r\n            const _invoksMsg = this.appModel.appInvoks.map((n, idx) => {\r\n                const m = { idx, msg: ''};\r\n                if (!n.name) {\r\n                    m.msg += this.localeSer.getValue('publishmenu.app.message.invoksCode'); // \"<br>å¥å£åç§°ä¸è½ä¸ºç©ºã\";\r\n                }\r\n                if (!n.code) {\r\n                    m.msg += this.localeSer.getValue('publishmenu.app.message.invoksName'); // \"<br>å¥å£ç¼å·ä¸è½ä¸ºç©ºã\";\r\n                }\r\n                if (!n.appEntrance) {\r\n                    m.msg +=  this.localeSer.getValue('publishmenu.app.message.invoksAppEntrance'); // \"<br>è·¯ç±æ è¯ä¸è½ä¸ºç©ºã\";\r\n                }\r\n\r\n                return m;\r\n            });\r\n\r\n            if (_invoksMsg.length > 0) {\r\n                const appMain = this.localeSer.getValue('publishmenu.app.entry');\r\n                const line =  this.localeSer.getValue('publishmenu.line');\r\n                _invoksMsg.forEach(m => {\r\n                    msg += `<b>${appMain}:</b> <br> ${ line.replace('{line}', m.idx + 1)} , ${m.msg} <br>`;\r\n                });\r\n                // msg += this.localeSer.getValue('publishmenu.app.message.inValidInvoks'); // 'åºç¨å¥å£ç¹ä¿¡æ¯ä¸å®æ´ï¼è¯·æ£æ¥ã';\r\n            }\r\n        }\r\n\r\n\r\n        if (msg) {\r\n            this.messagerSer.show('warning', msg, { safeHtml: false });\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    treeNodeClicked(e) {\r\n        this.appModel.parentId = e.node.data.id;\r\n        this.showMask = false;\r\n    }\r\n\r\n    uuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n            const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    addInvoke() {\r\n        this.appModel.appInvoks.push(this.createNewAppInvok());\r\n    }\r\n\r\n    removeInvoke(id) {\r\n        this.appModel.appInvoks = this.appModel.appInvoks.filter(n => n.id !== id);\r\n    }\r\n\r\n    private initAllAppTree() {\r\n        this.http.get(this.APP_URI).subscribe(data => {\r\n            if (data) {\r\n                this.allAppTreeData = this.convert2TreeNodes(data);\r\n                // console.log(this.allAppTreeData);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private convert2TreeNodes(data: any[], parentId = ''): TreeNode[] {\r\n        if (data.length) {\r\n            const nodes = data.filter((v) => {\r\n                let pid = v.parentId;\r\n                if (pid === undefined || pid === null) {\r\n                    pid = '';\r\n                }\r\n                return pid === parentId;\r\n            });\r\n            return nodes.map(item => {\r\n                const node = {\r\n                    data: item,\r\n                    children: [],\r\n                    selectable: item.layer === '3'\r\n                };\r\n\r\n                node.children = this.convert2TreeNodes(data, item.id);\r\n                return node;\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private createNewAppInvok() {\r\n        return {\r\n            id: this.uuid(),\r\n            appId: this.appModel.id,\r\n            code: '',\r\n            appEntrance: '', // è·¯ç±æ è¯\r\n            name: ''\r\n        };\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Injector, NgZone, ViewChild } from '@angular/core';\r\nimport { HttpService } from '@farris/ide-devkit';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Component({\r\n    selector: 'bizobj-operators',\r\n    templateUrl: './bizobject-operators.component.html'\r\n})\r\nexport class BizobjectOperatorsComponent implements OnInit {\r\n    @Input() serverIp = '';\r\n    treeData = [];\r\n\r\n\r\n    columns = [];\r\n    items = [];\r\n    allOperators = [];\r\n\r\n    funcModel: any = {};\r\n\r\n    selectBizObjectId = '';\r\n    selectBizOpId = '';\r\n\r\n\r\n    get BIZ_OBJECT_URI() {\r\n        return this.serverIp + '/api/dev/main/v1.0/business-objects';\r\n    }\r\n\r\n    get FUNCTION_OPERATORS_URI() {\r\n        return this.serverIp + '/api/runtime/sys/v1.0/funcOperations/all';\r\n    }\r\n\r\n    @ViewChild('grid') grid: DatagridComponent;\r\n    @ViewChild('tt') tt: TreeTableComponent;\r\n\r\n\r\n    get bizObjectId() {\r\n        if (this.tt.selectedRow) {\r\n            return this.tt.selectedRow;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    get bizOpId() {\r\n        if (this.grid.selectedRow) {\r\n            return this.grid.selectedRow;\r\n        }\r\n\r\n        return '';\r\n    }\r\n    localeSer: LocaleService;\r\n    constructor(\r\n        private http: HttpService,\r\n        private injector: Injector,\r\n        private ngZone: NgZone) {\r\n\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initTreeData();\r\n\r\n        this.columns = [\r\n            { title: this.localeSer.getValue('publishmenu.app.column.code'), field: 'code', width: 200 },\r\n            { title: this.localeSer.getValue('publishmenu.app.column.name'), field: 'name', width: 150 }\r\n        ];\r\n\r\n    }\r\n\r\n    treeNodeClicked(e) {\r\n        this.grid.clearAll();\r\n        this.items = this.allOperators.filter(n => n.businessId === e.node.data.id);\r\n        if (this.funcModel && Object.keys(this.funcModel).length) {\r\n            const bizOpId = this.funcModel.bizOpId;\r\n            if (!bizOpId) {\r\n                return;\r\n            }\r\n            this.grid.selectRow(bizOpId, false);\r\n        }\r\n    }\r\n\r\n    treeNodeUnSelect() {\r\n        this.items = this.allOperators;\r\n    }\r\n\r\n\r\n    private initTreeData() {\r\n        this.http.get(this.BIZ_OBJECT_URI).subscribe(data => {\r\n            if (data) {\r\n                this.treeData = this.convert2TreeNodes(data);\r\n                setTimeout(() => {\r\n                    if (this.funcModel && Object.keys(this.funcModel).length) {\r\n                        const bizObjectId = this.funcModel.bizObjectId;\r\n                        if (!bizObjectId) {\r\n                            return;\r\n                        }\r\n\r\n                        const treeNode = this.tt.findRowNode(bizObjectId);\r\n                        if (treeNode) {\r\n                            treeNode.parents.forEach((id) => {\r\n                                this.tt.expandNode(id);\r\n                            });\r\n                            // this.tt.selectNode(bizObjectId);\r\n                        }\r\n\r\n                        this.selectBizObjectId = bizObjectId;\r\n                    }\r\n                }, 200);\r\n            }\r\n        });\r\n\r\n        this.http.get(this.FUNCTION_OPERATORS_URI).subscribe( data => {\r\n            if (data) {\r\n                this.items = data.filter(item => item.type === 0);\r\n                this.allOperators = cloneDeep(this.items);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private convert2TreeNodes(data: any[], parentId = null): TreeNode[] {\r\n        if (data.length) {\r\n            const nodes = data.filter((v) => v.parentID === parentId);\r\n            return nodes.map(item => {\r\n                const node = {\r\n                    data: item,\r\n                    children: [],\r\n                    expanded: parentId === null,\r\n                    selectable: Number(item.isDetail) === 1\r\n                };\r\n\r\n                node.children = this.convert2TreeNodes(data, item.id);\r\n                return node;\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n}\r\n","import { Component, OnInit, NgZone, Injector, Input, ViewChild } from '@angular/core';\r\nimport { HttpService } from '@farris/ide-devkit';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n\r\n@Component({\r\n    selector: 'select-app',\r\n    templateUrl: './select-app.component.html',\r\n})\r\nexport class SelectAppComponent implements OnInit {\r\n    @Input() serverIp = '';\r\n    treeData = [];\r\n    funcModel: any = {};\r\n\r\n    columns = [];\r\n    items = [];\r\n\r\n    get APP_URI() {\r\n        return this.serverIp + '/api/runtime/sys/v1.0/gspapp/all';\r\n    }\r\n    @ViewChild('grid') grid: DatagridComponent;\r\n    @ViewChild('tt') tt: TreeTableComponent;\r\n\r\n    get appId() {\r\n        if (this.tt && this.tt.selectedRow) {\r\n            return this.tt.selectedRow.data.id;\r\n        }\r\n        return '';\r\n    }\r\n    get appInvokId() {\r\n        if (this.grid && this.grid.selectedRow) {\r\n            return this.grid.selectedRow.id;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    selectedAppID = '';\r\n    localeSer: LocaleService;\r\n    constructor(\r\n        private http: HttpService,\r\n        private injector: Injector,\r\n        private ngZone: NgZone) {\r\n            this.localeSer = this.injector.get(LocaleService, null);\r\n        }\r\n\r\n    ngOnInit(): void {\r\n        this.initTreeData();\r\n        this.columns = [\r\n            { title: this.localeSer.getValue('publishmenu.app.column.code'), field: 'code', width: 200 },\r\n            { title: this.localeSer.getValue('publishmenu.app.column.name'), field: 'name', width: 150 }\r\n        ];\r\n    }\r\n\r\n    treeNodeClicked(e) {\r\n        this.items = e.node.data.appInvoks || [];\r\n        setTimeout(() => {\r\n            if (this.funcModel && Object.keys(this.funcModel).length) {\r\n                const appInvokId = this.funcModel.appInvokId;\r\n                if (!appInvokId) {\r\n                    return;\r\n                }\r\n                this.grid.selectRow(appInvokId, false);\r\n            }\r\n        }, 100);\r\n        // setTimeout(() => {\r\n        //     if (this.grid && this.items.length) {\r\n        //         this.grid.selectRow(this.items[0].id);\r\n        //     }\r\n        // }, 100);\r\n    }\r\n\r\n    private initTreeData() {\r\n        this.http.get(this.APP_URI).subscribe(data => {\r\n            if (data) {\r\n                this.treeData = this.convert2TreeNodes(data);\r\n                setTimeout(() => {\r\n                    if (this.funcModel && Object.keys(this.funcModel).length) {\r\n                        const appId = this.funcModel.appId;\r\n                        if (!appId) {\r\n                            return;\r\n                        }\r\n\r\n                        const treeNode = this.tt.findRowNode(appId);\r\n                        if (treeNode) {\r\n                            treeNode.parents.forEach((id) => {\r\n                                this.tt.expandNode(id);\r\n                            });\r\n                        }\r\n\r\n                        this.selectedAppID = appId;\r\n                    }\r\n                }, 200);\r\n            }\r\n        });\r\n    }\r\n\r\n    private convert2TreeNodes(data: any[], parentId = ''): TreeNode[] {\r\n        if (data.length) {\r\n\r\n            const nodes = data.filter((v) => {\r\n                let pid = v.parentId;\r\n                if (pid === undefined || pid === null) {\r\n                    pid = '';\r\n                }\r\n                return pid === parentId;\r\n            });\r\n\r\n            // const nodes = data.filter((v) => (v.parentId || '') === parentId);\r\n            return nodes.map(item => {\r\n                const node = {\r\n                    data: item,\r\n                    children: [],\r\n                    selectable: item.layer === '4'\r\n                };\r\n\r\n                node.children = this.convert2TreeNodes(data, item.id);\r\n                return node;\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n}\r\n","export const PUBLISH_MENU_LOCALE = {\r\n    \"zh-CHS\": {\r\n        publishmenu: {\r\n            app: {\r\n                id: 'åºç¨æ è¯',\r\n                code: 'åºç¨ç¼å·',\r\n                name: 'åºç¨åç§°',\r\n                path: 'é¨ç½²è·¯å¾',\r\n                remark: 'åºç¨æè¿°',\r\n                entry: 'åºç¨å¥å£',\r\n                entryname: 'å¥å£åç§°',\r\n                entrycode: 'å¥å£ç¼å·',\r\n                routeid: 'è·¯ç±æ è¯',\r\n                action: 'æä½',\r\n                addentry: 'æ°å¢å¥å£',\r\n                message: {\r\n                    info: 'éæ©ä¸çº§åºç¨',\r\n                    appInvoks: 'è¯·è®¾ç½®åºç¨å¥å£ä¿¡æ¯',\r\n                    inValidInvoks: 'åºç¨å¥å£ç¹ä¿¡æ¯ä¸å®æ´ï¼è¯·æ£æ¥',\r\n                    appcode: 'åºç¨ç¼å·ä¸è½ä¸ºç©º!<br>',\r\n                    appname: 'åºç¨åç§°ä¸è½ä¸ºç©º!<br>',\r\n                    url: 'é¨ç½²è·¯å¾ä¸è½ä¸ºç©º!<br>',\r\n                    invoksCode: 'å¥å£åç§°ä¸è½ä¸ºç©º!<br>',\r\n                    invoksName: 'å¥å£ç¼å·ä¸è½ä¸ºç©º!<br>',\r\n                    invoksAppEntrance: 'è·¯ç±æ è¯ä¸è½ä¸ºç©º!<br>'\r\n                },\r\n                column: {\r\n                    code: 'ç¼å·',\r\n                    name: 'åç§°'\r\n                }\r\n            },\r\n            func: {\r\n                id: 'åè½æ è¯',\r\n                code: 'åè½ç¼å·',\r\n                name: 'åè½åç§°',\r\n                action: 'åè½æä½',\r\n                selectBiz: 'éæ©',\r\n                remark: 'åè½æè¿°',\r\n                selectapp: 'éæ©',\r\n                addapp: 'æ°å»º',\r\n                linkapp: 'å³èåºç¨',\r\n                appentry: 'åºç¨å¥å£',\r\n                appParam: 'åæ°è®¾ç½®',\r\n                paramName: 'åæ°åç§°',\r\n                paramValue: 'åæ°å¼',\r\n                paramAction: 'æä½',\r\n                addParam: 'æ°å¢åæ°',\r\n                placeholder: {\r\n                    code: 'è¯·è¾å¥åè½ç¼å·',\r\n                    name: 'è¯·è¾å¥åè½åç§°',\r\n                    biz: 'éæ©ä¸å¡å¯¹è±¡æä½',\r\n                    remark: 'è¯·è¾å¥åè½æè¿°',\r\n                    selectapp: 'éæ©åºç¨'\r\n                },\r\n                message: {\r\n                    info: 'éæ©ä¸çº§èå',\r\n                    code: 'åè½ç¼å·ä¸è½ä¸ºç©ºï¼<br>',\r\n                    name: 'åè½åç§°ä¸è½ä¸ºç©ºï¼<br>',\r\n                    parentId: 'è¯·å¨å·¦ä¾§éæ©ä¸çº§èåï¼<br>',\r\n                    appid: 'è¯·éæ©å³èåºç¨ï¼<br>',\r\n                    appInvokId: 'è¯·éæ©å³èåºç¨å¥å£ï¼<br>',\r\n                    bizObjectId: 'è¯·éæ©å·¦ä¾§ä¸å¡æä½å¯¹è±¡ï¼ <br>',\r\n                    bizOpId: 'è¯·éæ©åè½æä½ï¼ <br>'\r\n                }\r\n            },\r\n            dialog: {\r\n                title: 'åå¸æ°èå',\r\n                btnOk: 'ç¡®å®',\r\n                btnCancel: 'åæ¶',\r\n                success: 'æ°èååå¸æåï¼',\r\n                selectapp: 'éæ©å³èåºç¨',\r\n                selectInfo: 'è¯·éæ©åºç¨',\r\n                appentry: 'è¯·éæ©åºç¨å¥å£',\r\n                bizOptitle: 'éæ©ä¸å¡æä½',\r\n                bizwarn: 'è¯·éæ©å·¦ä¾§ä¸å¡æä½å¯¹è±¡',\r\n                bizaction: 'è¯·éæ©ä¸å¡æä½',\r\n                app: 'åºç¨ç®¡ç'\r\n            },\r\n            line: 'ç¬¬ {line} è¡'\r\n        }\r\n    },\r\n    \"zh-CHT\": {\r\n        publishmenu: {\r\n            app: {\r\n                id: 'æç¨æ¨è­',\r\n                code: 'æç¨ç·¨è',\r\n                name: 'æç¨åç¨±',\r\n                path: 'é¨ç½²è·¯å¾',\r\n                entry: 'æç¨å¥å£',\r\n                entryname: 'å¥å£åç¨±',\r\n                entrycode: 'å¥å£ç·¨è',\r\n                routeid: 'è·¯ç±æ¨è­',\r\n                remark: 'æç¨æè¿°',\r\n                action: 'æä½',\r\n                addentry: 'æ°å¢å¥å£',\r\n                message: {\r\n                    info: 'é¸æä¸ç´æç¨',\r\n                    appInvoks: 'è«è¨­ç½®æç¨å¥å£ä¿¡æ¯',\r\n                    inValidInvoks: 'æç¨å¥å£ä¿¡æ¯ä¸å®æ´ï¼è«æª¢æ¥',\r\n                    appcode: 'æç¨ç·¨èä¸è½çºç©ºï¼<br>',\r\n                    appname: 'æç¨åç¨±ä¸è½çºç©ºï¼<br>',\r\n                    url: 'é¨ç½²è·¯å¾ä¸è½çºç©ºï¼<br>',\r\n                    invoksCode: 'å¥å£åç¨±ä¸è½çºç©ºï¼<br>',\r\n                    invoksName: 'å¥å£ç·¨èä¸è½çºç©ºï¼<br>',\r\n                    invoksAppEntrance: 'è·¯ç±æ¨è­ä¸è½çºç©ºï¼<br>'\r\n                },\r\n                column: {\r\n                    code: 'ç·¨è',\r\n                    name: 'åç¨±'\r\n                }\r\n            },\r\n            func: {\r\n                id: 'åè½æ¨è­',\r\n                code: 'åè½ç·¨è',\r\n                name: 'åè½åç¨±',\r\n                action: 'åè½æä½',\r\n                selectBiz: 'é¸æ',\r\n                remark: 'åè½æè¿°',\r\n                selectapp: 'é¸æ',\r\n                addapp: 'æ°å»º',\r\n                linkapp: 'éè¯æç¨',\r\n                appentry: 'æç¨å¥å£',\r\n                appParam: 'åæ¸è¨­ç½®',\r\n                paramName: 'åæ¸åç¨±',\r\n                paramValue: 'åæ¸å¼',\r\n                paramAction: 'æä½',\r\n                addParam: 'æ°å¢åæ¸',\r\n                placeholder: {\r\n                    code: 'è«è¼¸å¥åè½ç·¨è',\r\n                    name: 'è«è¼¸å¥åè½åç¨±',\r\n                    biz: 'é¸ææ¥­åå°è±¡æä½',\r\n                    remark: 'è«è¼¸å¥åè½æè¿°',\r\n                    selectapp: 'é¸ææç¨'\r\n                },\r\n                message: {\r\n                    info: 'é¸æä¸ç´èå®',\r\n                    code: 'åè½ç·¨èä¸è½çºç©ºï¼<br>',\r\n                    name: 'åè½åç¨±ä¸è½çºç©ºï¼<br>',\r\n                    parentId: 'è«å¨å·¦å´é¸æä¸ç´èå®ï¼<br>',\r\n                    appid: 'è«é¸æéè¯æç¨ï¼<br>',\r\n                    appInvokId: 'è«é¸æéè¯æç¨å¥å£ï¼<br>',\r\n                    bizObjectId: 'è«é¸æå·¦å´æ¥­åæä½å°è±¡ï¼ <br>',\r\n                    bizOpId: 'è«é¸æåè½æä½ï¼ <br>'\r\n                }\r\n            },\r\n            dialog: {\r\n                title: 'ç¼å¸æ°èå®',\r\n                btnOk: 'ç¢ºå®',\r\n                btnCancel: 'åæ¶',\r\n                success: 'æ°èå®ç¼å¸æåï¼',\r\n                selectapp: 'é¸æéè¯æç¨',\r\n                selectInfo: 'è«é¸ææç¨',\r\n                appentry: 'è«é¸ææç¨å¥å£',\r\n                bizOptitle: 'é¸ææ¥­åæä½',\r\n                bizwarn: 'è«é¸æå·¦å´æ¥­åæä½å°è±¡',\r\n                bizaction: 'è«é¸ææ¥­åæä½',\r\n                app: 'æç¨ç®¡ç'\r\n            },\r\n            line: 'ç¬¬ {line} è¡'\r\n        }\r\n    },\r\n    en: {\r\n        publishmenu: {\r\n            app: {\r\n                id: 'AppId',\r\n                code: 'AppCode',\r\n                name: 'AppName',\r\n                path: 'DeploymentPayh',\r\n                entry: 'ProtalSettings',\r\n                entryname: 'Protal Name',\r\n                entrycode: 'Protal Code',\r\n                routeid: 'RoutingID',\r\n                action: 'Operation',\r\n                remark: 'AppDesc',\r\n                addentry: 'New Protal',\r\n                message: {\r\n                    info: 'Please select parent.<br>',\r\n                    appInvoks: 'Please set app protal.<br>',\r\n                    inValidInvoks: 'Please check the protal info.<br>',\r\n                    appcode: 'The App Code should not be empty.<br>',\r\n                    appname: 'The App Name should not be empty.<br>',\r\n                    url: 'The Url should not be empty.<br>',\r\n                    invoksCode: 'Entry name cannot be empty.<br>',\r\n                    invoksName: 'Entrance number cannot be empty.<br>',\r\n                    invoksAppEntrance: 'Route ID cannot be empty.<br>'\r\n                },\r\n                column: {\r\n                    code: 'Code',\r\n                    name: 'Name'\r\n                }\r\n            },\r\n            func: {\r\n                id: 'Function ID',\r\n                code: 'Function code',\r\n                name: 'Function name',\r\n                action: 'Function operation',\r\n                selectBiz: 'Select',\r\n                remark: 'Function description',\r\n                selectapp: 'Select App',\r\n                addapp: 'New App',\r\n                linkapp: 'Invoke information',\r\n                appentry: 'ProtalSettings',\r\n                appParam: 'Static params setting',\r\n                paramName: 'Param Name',\r\n                paramValue: 'Param Value',\r\n                paramAction: '\tOperation',\r\n                addParam: 'Add new params',\r\n                placeholder: {\r\n                    code: 'Function code',\r\n                    name: 'Function Name',\r\n                    biz: 'Please Select Business Type.',\r\n                    remark: 'Function description',\r\n                    selectapp: 'Select App'\r\n                },\r\n                message: {\r\n                    info: 'Please aelect a parent menu.',\r\n                    code: 'The function Code should not be emptyï¼<br>',\r\n                    name: 'The function Name should not be emptyï¼<br>',\r\n                    parentId: 'Please select the upper menu on the leftï¼<br>',\r\n                    appid: 'Please select the associated applicationï¼<br>',\r\n                    appInvokId: 'Please select the associated application portalï¼<br>',\r\n                    bizObjectId: 'Please select the business operation object on the leftï¼ <br>',\r\n                    bizOpId: 'Please select function operationï¼ <br>'\r\n                }\r\n            },\r\n            dialog: {\r\n                title: 'New menu publish',\r\n                btnOk: 'OK',\r\n                btnCancel: 'Cancel',\r\n                success: 'New menu publish successï¼',\r\n                selectapp: 'Select associated application',\r\n                selectInfo: 'Please select a application.',\r\n                appentry: 'Please select an application portal.',\r\n                bizOptitle: 'Select business operation.',\r\n                bizwarn: 'Please select the business operation object on the left.',\r\n                bizaction: 'Please select business operation.',\r\n                app: 'Application Manager'\r\n            },\r\n            line: 'Line {line} '\r\n        }\r\n    }\r\n};\r\n","import { cloneDeep } from 'lodash-es';\r\nimport { LoadingService } from '@farris/ui-loading';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { Component, OnInit, Injector, Input, OnChanges, LOCALE_ID,\r\n         SimpleChanges, ViewChild, TemplateRef, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';\r\nimport { HttpService } from '@farris/ide-devkit';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { TreeNode } from '@farris/ui-treetable';\r\nimport { GspAppManagerComponent } from './gsp-app/gsp-app.component';\r\nimport { IdService } from '@farris/ui-common';\r\nimport { AppFunction } from './models/gsp-app.model';\r\nimport { BizobjectOperatorsComponent } from './biz-object-operators/bizobject-operators.component';\r\nimport { SelectAppComponent } from './select-app/select-app.component';\r\nimport { SelectedRow } from '@farris/ui-datagrid';\r\nimport { of } from 'rxjs';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { CommonUtils } from '@farris/ui-common';\r\nimport { PUBLISH_MENU_LOCALE } from './locale';\r\n@Component({\r\n    selector: 'publish-menu',\r\n    templateUrl: './publish-menu.component.html',\r\n    styles: [\r\n        `\r\n        .public-menu-main::-webkit-scrollbar-track-piece{width:8px;background-color:#e2e2e2;}\r\n        .public-menu-main::-webkit-scrollbar{width:8px;height:6px;}\r\n        .public-menu-main::-webkit-scrollbar-thumb{height:50px;background:#9fa1a0; cursor:pointer;}\r\n        .public-menu-main::-webkit-scrollbar-thumb:hover{background:#686868; cursor:pointer\r\n        `\r\n    ],\r\n    exportAs: 'publishMenu',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PublishMenuComponent implements OnInit, OnChanges {\r\n\r\n    @Input() serverIp = '';\r\n    @ViewChild('dlgContent') dlgContent: TemplateRef<any>;\r\n    @Input() publishPath = '';\r\n\r\n    /** ææåè½èåæ°æ® */\r\n    allFuncTreeData = [];\r\n    funcIdField = 'id';\r\n\r\n    showMask = true;\r\n\r\n    languages = [\r\n        { code: 'zh-CHS', name: 'ä¸­æç®ä½' },\r\n        { code: 'en', name: 'English' },\r\n        { code: 'zh-CHT', name: 'ä¸­æç¹ä½' }\r\n    ];\r\n\r\n    private get FUNC_URI() {\r\n        return this.serverIp + '/api/runtime/sys/v1.0/functions/allFuncs';\r\n    }\r\n    private get APP_URI() {\r\n        return  this.serverIp + '/api/runtime/sys/v1.0/gspapp/all';\r\n    }\r\n\r\n    private get APP_POST_URI() {\r\n        return this.serverIp + '/api/runtime/sys/v1.0/gspapp';\r\n    }\r\n\r\n    private get FUNC_POST_URI() {\r\n        return this.serverIp + '/api/runtime/sys/v1.0/functions';\r\n    }\r\n\r\n    funcModel: AppFunction = null;\r\n    localeId = 'zh-CHS';\r\n    localeSer: LocaleService;\r\n    commonUtil: CommonUtils;\r\n    constructor(\r\n        private http: HttpService,\r\n        private injector: Injector,\r\n        private modalService: BsModalService,\r\n        private uuid: IdService,\r\n        private messagerSer: MessagerService,\r\n        private loadingSer: LoadingService,\r\n        private cd: ChangeDetectorRef\r\n    ) {\r\n\r\n        this.commonUtil = this.injector.get(CommonUtils);\r\n        this.localeId = this.injector.get(LOCALE_ID, 'zh-CHS');\r\n\r\n        if (this.localeId === 'zh') {\r\n            this.localeId = 'zh-CHS';\r\n        }\r\n\r\n        if (!this.localeSer) {\r\n            this.localeSer = this.injector.get(LocaleService, null);\r\n            if (!this.localeSer) {\r\n                this.localeSer = new LocaleService(this.localeId, this.commonUtil, PUBLISH_MENU_LOCALE);\r\n            } else {\r\n                if (!this.localeSer.langData['publishmenu']) {\r\n                    this.localeSer.setLocaleData(PUBLISH_MENU_LOCALE);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.initAllFuncTree();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n\r\n    }\r\n\r\n    emptyData() {\r\n        this.funcModel = {\r\n            appId: '',\r\n            appInvokId: '',\r\n            bizObjectId: '',\r\n            bizOpId: '',\r\n            code: '',\r\n            creator: '',\r\n            description: '',\r\n            funcType: '4',\r\n            id: this.uuid.generate(),\r\n            icon: '',\r\n            isDetail: true,\r\n            isDisplayed: true,\r\n            isSysInit: false,\r\n            layer: '4',\r\n            menuType: '1',\r\n            name: '',\r\n            parentId: '',\r\n            path: '',\r\n            staticParams: [{name: 'mode', value: 'spa'}],\r\n            url: '',\r\n            nameLanguage: null\r\n        };\r\n    }\r\n\r\n    validate() {\r\n        let msg = '';\r\n        if (!this.funcModel.parentId) {\r\n            msg += this.localeSer.getValue('publishmenu.func.message.parentId'); // 'è¯·å¨å·¦ä¾§éæ©ä¸çº§èåï¼<br>';\r\n        }\r\n\r\n        if (!msg) {\r\n            if (!this.funcModel.code) {\r\n                msg +=  this.localeSer.getValue('publishmenu.func.message.code'); // 'åè½ç¼å·ä¸è½ä¸ºç©ºï¼<br>';\r\n            }\r\n\r\n            if (!this.funcModel.name) {\r\n                msg +=  this.localeSer.getValue('publishmenu.func.message.name'); // 'åè½åç§°ä¸è½ä¸ºç©ºï¼<br>';\r\n            }\r\n\r\n            if (!this.funcModel.bizOpId) {\r\n                msg += this.localeSer.getValue('publishmenu.func.message.bizOpId');  // 'è¯·éæ©åè½æä½ï¼ <br>';\r\n            }\r\n\r\n            if (!this.funcModel.appId) {\r\n                msg += this.localeSer.getValue('publishmenu.func.message.appid');  // 'è¯·éæ©å³èåºç¨ï¼<br>';\r\n            }\r\n\r\n            if (!this.funcModel.appInvokId) {\r\n                msg += this.localeSer.getValue('publishmenu.func.message.appInvokId');  // 'è¯·éæ©å³èåºç¨å¥å£ï¼<br>';\r\n            }\r\n        }\r\n        // if (!this.funcModel.bizObjectId) {\r\n        //     msg += this.localeSer.getValue('publishmenu.func.message.bizObjectId');  // 'è¯·éæ©å·¦ä¾§ä¸å¡æä½å¯¹è±¡ï¼ <br>';\r\n        // }\r\n\r\n\r\n        if (msg) {\r\n            this.messagerSer.show('warning', msg, { safeHtml: false, height: 300 });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    saveMenu() {\r\n        this.funcModel.name = this.funcModel.nameLanguage ? this.funcModel.nameLanguage[this.localeId] : '';\r\n        if (this.validate()) {\r\n            const staticParams = JSON.stringify(this.funcModel.staticParams);\r\n            const _funcModel = cloneDeep(this.funcModel);\r\n            _funcModel.staticParams = staticParams;\r\n            _funcModel.name = _funcModel.nameLanguage[this.localeId];\r\n            return this.http.post(this.FUNC_POST_URI, _funcModel);\r\n        }\r\n\r\n        return of(false);\r\n    }\r\n\r\n    show() {\r\n        const modalRef = this.modalService.show(this.dlgContent, {\r\n            title: this.localeSer.getValue('publishmenu.dialog.title'),\r\n            width: 760, height: 500,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            enableScroll: false,\r\n            buttons: [\r\n                {\r\n                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),\r\n                    cls: 'btn btn-primary',\r\n                    handle: () => {\r\n                        this.saveMenu().subscribe(r => {\r\n                            if (r) {\r\n                                this.messagerSer.success( this.localeSer.getValue('publishmenu.dialog.success'));\r\n                                modalRef.close();\r\n                                this.showMask = true;\r\n                            }\r\n                        }, (err: any) => {\r\n                            console.error(err);\r\n                            if (err) {\r\n                                const error = err.error;\r\n                                if (error) {\r\n                                    const mesg = error.Message;\r\n                                    this.messagerSer.warning(mesg);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                },\r\n                {\r\n                    text: this.localeSer.getValue('publishmenu.dialog.btnCancel'),\r\n                    cls: 'btn btn-secondary',\r\n                    handle: () => {\r\n                        modalRef.close();\r\n                        this.showMask = true;\r\n                    }\r\n                }\r\n            ],\r\n            opened: () => {\r\n                this.initAllFuncTree();\r\n            }\r\n        });\r\n        this.emptyData();\r\n        return modalRef;\r\n    }\r\n    // éæ©å³èåºç¨\r\n    showSelectAppModal() {\r\n        const modalRef = this.modalService.show(SelectAppComponent, {\r\n            title: this.localeSer.getValue('publishmenu.dialog.selectapp'),\r\n            width: 760, height: 500,\r\n            enableScroll: false,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            initialState: {\r\n                serverIp: this.serverIp,\r\n                funcModel: this.funcModel\r\n            },\r\n            buttons: [\r\n                {\r\n                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),\r\n                    cls: 'btn btn-primary',\r\n                    handle: () => {\r\n                        const sac = modalRef.content as SelectAppComponent;\r\n                        let msg = '';\r\n                        if (sac.appId && sac.appInvokId) {\r\n                            this.funcModel.appId = sac.appId;\r\n                            this.funcModel.appInvokId = sac.appInvokId;\r\n                            msg = '';\r\n                        }\r\n\r\n                        if (!sac.appId) {\r\n                            msg = this.localeSer.getValue('publishmenu.dialog.selectInfo');\r\n                        } else if (!sac.appInvokId) {\r\n                            msg = this.localeSer.getValue('publishmenu.dialog.appentry');\r\n                        }\r\n\r\n                        if (msg) {\r\n                            this.messagerSer.warning(msg);\r\n                        } else {\r\n                            modalRef.close();\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    text:  this.localeSer.getValue('publishmenu.dialog.btnCancel'),\r\n                    cls: 'btn btn-secondary',\r\n                    handle: () => {\r\n                        modalRef.close();\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        return modalRef;\r\n    }\r\n\r\n    // éæ©ä¸å¡æä½\r\n    showBizObjectOperatorModal() {\r\n        const modalRef = this.modalService.show(BizobjectOperatorsComponent, {\r\n            title: this.localeSer.getValue('publishmenu.dialog.bizOptitle'),\r\n            width: 760, height: 500,\r\n            enableScroll: false,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            initialState: {\r\n                serverIp: this.serverIp,\r\n                funcModel: this.funcModel\r\n            },\r\n            buttons: [\r\n                {\r\n                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),\r\n                    cls: 'btn btn-primary',\r\n                    handle: () => {\r\n                        const boc = modalRef.content as BizobjectOperatorsComponent;\r\n                        const bizObj = boc.bizObjectId as TreeNode;\r\n                        const bizOp = boc.bizOpId as SelectedRow;\r\n\r\n                        if (bizOp) {\r\n                            let bizObjID = '';\r\n                            if (!bizObj) {\r\n                                bizObjID = bizOp.data.businessId;\r\n                            } else {\r\n                                bizObjID = bizObj.id;\r\n                            }\r\n\r\n                            if (bizObjID) {\r\n                                this.funcModel.bizObjectId = bizObjID;\r\n                                this.funcModel.bizOpId = bizOp.id;\r\n                                modalRef.close();\r\n                            } else {\r\n                                this.messagerSer.warning(this.localeSer.getValue('publishmenu.dialog.bizwarn'));\r\n                            }\r\n                        } else {\r\n                            this.messagerSer.warning(this.localeSer.getValue('publishmenu.dialog.bizaction'));\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    text:  this.localeSer.getValue('publishmenu.dialog.btnCancel'),\r\n                    cls: 'btn btn-secondary',\r\n                    handle: () => {\r\n                        modalRef.close();\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        return modalRef;\r\n    }\r\n    // æ°å»ºåºç¨\r\n    showAppModal() {\r\n        const modalRef = this.modalService.show(GspAppManagerComponent, {\r\n            title: this.localeSer.getValue('publishmenu.dialog.app'),\r\n            width: 760, height: 500,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            enableScroll: false,\r\n            initialState: {\r\n                serverIp: this.serverIp,\r\n                path: (this.publishPath || '').replace('index.htmlindex.html', 'index.html'),\r\n                funcModel: this.funcModel\r\n            },\r\n            buttons: [\r\n                {\r\n                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),\r\n                    cls: 'btn btn-primary',\r\n                    handle: () => {\r\n                        const amc = modalRef.content as GspAppManagerComponent;\r\n                        if (amc.validate()) {\r\n                            this.loadingSer.show();\r\n                            this.http.post(this.APP_POST_URI, amc.appModel).subscribe(r => {\r\n                                if (r) {\r\n                                    this.funcModel.appId = amc.appModel.id;\r\n                                    this.funcModel.appInvokId = amc.appModel.appInvoks[0].id;\r\n                                    this.loadingSer.close();\r\n                                    modalRef.close();\r\n                                }\r\n                            });\r\n                        }\r\n                        // console.log(amc.appModel);\r\n                    }\r\n                },\r\n                {\r\n                    text: this.localeSer.getValue('publishmenu.dialog.btnCancel'),\r\n                    cls: 'btn btn-secondary',\r\n                    handle: () => {\r\n                        modalRef.close();\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        return modalRef;\r\n    }\r\n\r\n    treeNodeClicked(e) {\r\n        this.funcModel.parentId = e.node.data.id;\r\n        this.showMask = false;\r\n        this.cd.detectChanges();\r\n        const input: any = document.querySelector('#txtFuncCode');\r\n        if (input) {\r\n            input.click();\r\n            input.focus();\r\n        }\r\n    }\r\n\r\n    removeStaticParams(name) {\r\n        this.funcModel.staticParams = this.funcModel.staticParams.filter(n => n.name !== name);\r\n    }\r\n\r\n    addStaticParams() {\r\n        this.funcModel.staticParams.push({name: '', value: ''});\r\n    }\r\n\r\n\r\n    private initAllFuncTree() {\r\n        this.http.get(this.FUNC_URI).subscribe(data => {\r\n            if (data) {\r\n                this.allFuncTreeData = this.convert2TreeNodes(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    private convert2TreeNodes(data: any[], parentId = '0'): TreeNode[] {\r\n        if (data.length) {\r\n            const nodes = data.filter((v) => v.parentId === parentId);\r\n            return nodes.map(item => {\r\n                const node = {\r\n                    data: item,\r\n                    children: [],\r\n                    selectable: item.layer === '3'\r\n                };\r\n\r\n                node.children = this.convert2TreeNodes(data, item.id);\r\n                return node;\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n\r\n}\r\n","import { LoadingModule } from '@farris/ui-loading';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\nimport { GSPHttpModule, CacheModule } from '@farris/ide-devkit';\r\nimport { DatagridModule } from '@farris/ui-datagrid';\r\nimport { PublishMenuComponent } from './publish-menu.component';\r\nimport { GspAppManagerComponent } from './gsp-app/gsp-app.component';\r\nimport { BizobjectOperatorsComponent } from './biz-object-operators/bizobject-operators.component';\r\nimport { SelectAppComponent } from './select-app/select-app.component';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { LanguageTextboxModule } from '@farris/ui-language-textbox';\r\nimport { PUBLISH_MENU_LOCALE } from './locale';\r\n@NgModule({\r\n    declarations: [\r\n        PublishMenuComponent,\r\n        GspAppManagerComponent,\r\n        BizobjectOperatorsComponent,\r\n        SelectAppComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        LocaleModule.forRoot(PUBLISH_MENU_LOCALE),\r\n        LanguageTextboxModule,\r\n        FarrisCommonModule.forRoot(),\r\n        PerfectScrollbarModule,\r\n        ModalModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        CacheModule.forRoot(),\r\n        LoadingModule.forRoot(),\r\n        GSPHttpModule,\r\n        DatagridModule,\r\n        TreeTableModule\r\n    ],\r\n    entryComponents: [\r\n        GspAppManagerComponent,\r\n        BizobjectOperatorsComponent,\r\n        SelectAppComponent\r\n    ],\r\n    exports: [PublishMenuComponent, GspAppManagerComponent, BizobjectOperatorsComponent,\r\n        SelectAppComponent]\r\n})\r\nexport class PublishMenuModule { }\r\n"]}