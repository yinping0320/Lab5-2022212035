/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, NgZone, Injector, Input, ViewChild } from '@angular/core';
import { HttpService } from '@farris/ide-devkit';
import { TreeTableComponent } from '@farris/ui-treetable';
import { DatagridComponent } from '@farris/ui-datagrid';
import { LocaleService } from '@farris/ui-locale';
export class SelectAppComponent {
    /**
     * @param {?} http
     * @param {?} injector
     * @param {?} ngZone
     */
    constructor(http, injector, ngZone) {
        this.http = http;
        this.injector = injector;
        this.ngZone = ngZone;
        this.serverIp = '';
        this.treeData = [];
        this.funcModel = {};
        this.columns = [];
        this.items = [];
        this.selectedAppID = '';
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @return {?}
     */
    get APP_URI() {
        return this.serverIp + '/api/runtime/sys/v1.0/gspapp/all';
    }
    /**
     * @return {?}
     */
    get appId() {
        if (this.tt && this.tt.selectedRow) {
            return this.tt.selectedRow.data.id;
        }
        return '';
    }
    /**
     * @return {?}
     */
    get appInvokId() {
        if (this.grid && this.grid.selectedRow) {
            return this.grid.selectedRow.id;
        }
        return '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initTreeData();
        this.columns = [
            { title: this.localeSer.getValue('publishmenu.app.column.code'), field: 'code', width: 200 },
            { title: this.localeSer.getValue('publishmenu.app.column.name'), field: 'name', width: 150 }
        ];
    }
    /**
     * @param {?} e
     * @return {?}
     */
    treeNodeClicked(e) {
        this.items = e.node.data.appInvoks || [];
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.funcModel && Object.keys(this.funcModel).length) {
                /** @type {?} */
                const appInvokId = this.funcModel.appInvokId;
                if (!appInvokId) {
                    return;
                }
                this.grid.selectRow(appInvokId, false);
            }
        }), 100);
        // setTimeout(() => {
        //     if (this.grid && this.items.length) {
        //         this.grid.selectRow(this.items[0].id);
        //     }
        // }, 100);
    }
    /**
     * @private
     * @return {?}
     */
    initTreeData() {
        this.http.get(this.APP_URI).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                this.treeData = this.convert2TreeNodes(data);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (this.funcModel && Object.keys(this.funcModel).length) {
                        /** @type {?} */
                        const appId = this.funcModel.appId;
                        if (!appId) {
                            return;
                        }
                        /** @type {?} */
                        const treeNode = this.tt.findRowNode(appId);
                        if (treeNode) {
                            treeNode.parents.forEach((/**
                             * @param {?} id
                             * @return {?}
                             */
                            (id) => {
                                this.tt.expandNode(id);
                            }));
                        }
                        this.selectedAppID = appId;
                    }
                }), 200);
            }
        }));
    }
    /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    convert2TreeNodes(data, parentId = '') {
        if (data.length) {
            /** @type {?} */
            const nodes = data.filter((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                /** @type {?} */
                let pid = v.parentId;
                if (pid === undefined || pid === null) {
                    pid = '';
                }
                return pid === parentId;
            }));
            // const nodes = data.filter((v) => (v.parentId || '') === parentId);
            return nodes.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const node = {
                    data: item,
                    children: [],
                    selectable: item.layer === '4'
                };
                node.children = this.convert2TreeNodes(data, item.id);
                return node;
            }));
        }
        return [];
    }
}
SelectAppComponent.decorators = [
    { type: Component, args: [{
                selector: 'select-app',
                template: "<div class=\"d-flex flex-row\" style=\"width: 760px; height: 400px;border:0px solid #ae00e6\">\r\n        <!-- Left -->\r\n        <div region=\"west\" class=\"west\" style=\"width: 280px;min-width:280px; height: 100%; background-color: #fff;border-right: 1px solid #e2e8f0;\">\r\n            <!-- \u83DC\u5355\u6811 -->\r\n            <perfect-scrollbar style=\"position: relative; width: 280px; height: 100%;\">\r\n                <farris-treetable #tt [data]=\"treeData\" [idField]=\"'id'\" [striped]=\"false\" [findField]=\"'name'\"\r\n                    [singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\"\r\n                    (nodeSelected)=\"treeNodeClicked($event)\"\r\n                    [selectValue]=\"selectedAppID\"\r\n                    [checkOnSelect]=\"true\" [sortName]=\"'name'\" [sortOrder]=\"'asc'\" [remoteSort]=\"false\">\r\n                    <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\">\r\n                        <tr #row=\"row\" [selectRow]=\"rowNode\" [selectRowDisabled]=\"!rowNode.node.selectable\" [dblclick]=\"true\">\r\n                            <td style=\"border: 0; cursor: pointer;\" [style.color]=\"row.selectRowDisabled? '#595959': '#000000'\">\r\n                                <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\r\n                                <span [innerHTML]=\"rowData['name'] | highlight: tt.findValue: 'name' : 'name'\"></span>\r\n                            </td>\r\n                        </tr>\r\n                    </ng-template>\r\n                </farris-treetable>\r\n            </perfect-scrollbar>\r\n        </div>\r\n    \r\n        <!-- main -->\r\n        <div region=\"center\" class=\"center f-utils-fill \" >\r\n    \r\n            <farris-datagrid [sizeType]=\"'md'\" [fitColumns]=\"true\"\r\n                [columns]=\"columns\" [fit]=\"true\" \r\n                [showCheckbox]=\"true\"\r\n                [selectOnCheck]=\"true\" [checkOnSelect]=\"true\"\r\n                [pagination]=\"false\" #grid\r\n                [data]=\"items\">\r\n            </farris-datagrid>\r\n    \r\n        </div>\r\n    </div>"
            }] }
];
/** @nocollapse */
SelectAppComponent.ctorParameters = () => [
    { type: HttpService },
    { type: Injector },
    { type: NgZone }
];
SelectAppComponent.propDecorators = {
    serverIp: [{ type: Input }],
    grid: [{ type: ViewChild, args: ['grid',] }],
    tt: [{ type: ViewChild, args: ['tt',] }]
};
if (false) {
    /** @type {?} */
    SelectAppComponent.prototype.serverIp;
    /** @type {?} */
    SelectAppComponent.prototype.treeData;
    /** @type {?} */
    SelectAppComponent.prototype.funcModel;
    /** @type {?} */
    SelectAppComponent.prototype.columns;
    /** @type {?} */
    SelectAppComponent.prototype.items;
    /** @type {?} */
    SelectAppComponent.prototype.grid;
    /** @type {?} */
    SelectAppComponent.prototype.tt;
    /** @type {?} */
    SelectAppComponent.prototype.selectedAppID;
    /** @type {?} */
    SelectAppComponent.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    SelectAppComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    SelectAppComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SelectAppComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,