import { cloneDeep } from 'lodash-es';
import { of } from 'rxjs';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { IdService, CommonUtils, FarrisCommonModule } from '@farris/ui-common';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { Injectable, Component, Input, Injector, NgZone, ViewChild, defineInjectable, LOCALE_ID, ViewEncapsulation, ChangeDetectorRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TreeTableModule } from '@farris/ui-treetable';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { HttpService, GSPHttpModule, CacheModule } from '@farris/ide-devkit';
import { DatagridModule } from '@farris/ui-datagrid';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PublishMenuService = /** @class */ (function () {
    function PublishMenuService() {
    }
    PublishMenuService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PublishMenuService.ctorParameters = function () { return []; };
    /** @nocollapse */ PublishMenuService.ngInjectableDef = defineInjectable({ factory: function PublishMenuService_Factory() { return new PublishMenuService(); }, token: PublishMenuService, providedIn: "root" });
    return PublishMenuService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GspAppManagerComponent = /** @class */ (function () {
    function GspAppManagerComponent(http, injector, ngZone, messagerSer) {
        this.http = http;
        this.injector = injector;
        this.ngZone = ngZone;
        this.messagerSer = messagerSer;
        this.serverIp = '';
        this.path = '';
        /**
         * 所有app数据
         */
        this.allAppTreeData = [];
        this.appIdField = 'id';
        this.showMask = true;
        this.appModel = {
            appInvoks: [],
            code: '',
            creator: '',
            description: '',
            id: this.uuid(),
            layer: '4',
            name: '',
            parentId: '',
            url: ''
        };
        this.localeSer = this.injector.get(LocaleService, null);
    }
    Object.defineProperty(GspAppManagerComponent.prototype, "APP_URI", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/runtime/sys/v1.0/gspapp/all';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GspAppManagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initAllAppTree();
        this.appModel.url = this.path;
        this.addInvoke();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    GspAppManagerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    GspAppManagerComponent.prototype.validate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var msg = '';
        if (!this.appModel.code) {
            msg += this.localeSer.getValue('publishmenu.app.message.appcode'); // '<br> 应用编号不能为空。';
        }
        if (!this.appModel.name) {
            msg += this.localeSer.getValue('publishmenu.app.message.appname'); // '<br> 应用名称不能为空。';
        }
        if (!this.appModel.url) {
            msg += this.localeSer.getValue('publishmenu.app.message.url'); // '<br> 部署路径不能为空。';
        }
        if (!this.appModel.appInvoks || !this.appModel.appInvoks.length) {
            msg += this.localeSer.getValue('publishmenu.app.message.appInvoks'); // '请设置应用入口点';
        }
        else {
            // const inValidInvoks = this.appModel.appInvoks.filter(n => {
            //     return !n.code || !n.name || !n.appEntrance;
            // });
            /** @type {?} */
            var _invoksMsg = this.appModel.appInvoks.map((/**
             * @param {?} n
             * @param {?} idx
             * @return {?}
             */
            function (n, idx) {
                /** @type {?} */
                var m = { idx: idx, msg: '' };
                if (!n.name) {
                    m.msg += _this.localeSer.getValue('publishmenu.app.message.invoksCode'); // "<br>入口名称不能为空。";
                }
                if (!n.code) {
                    m.msg += _this.localeSer.getValue('publishmenu.app.message.invoksName'); // "<br>入口编号不能为空。";
                }
                if (!n.appEntrance) {
                    m.msg += _this.localeSer.getValue('publishmenu.app.message.invoksAppEntrance'); // "<br>路由标识不能为空。";
                }
                return m;
            }));
            if (_invoksMsg.length > 0) {
                /** @type {?} */
                var appMain_1 = this.localeSer.getValue('publishmenu.app.entry');
                /** @type {?} */
                var line_1 = this.localeSer.getValue('publishmenu.line');
                _invoksMsg.forEach((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    msg += "<b>" + appMain_1 + ":</b> <br> " + line_1.replace('{line}', m.idx + 1) + " , " + m.msg + " <br>";
                }));
                // msg += this.localeSer.getValue('publishmenu.app.message.inValidInvoks'); // '应用入口点信息不完整，请检查。';
            }
        }
        if (msg) {
            this.messagerSer.show('warning', msg, { safeHtml: false });
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GspAppManagerComponent.prototype.treeNodeClicked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.appModel.parentId = e.node.data.id;
        this.showMask = false;
    };
    /**
     * @return {?}
     */
    GspAppManagerComponent.prototype.uuid = /**
     * @return {?}
     */
    function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            /** @type {?} */
            var r = Math.random() * 16 | 0;
            /** @type {?} */
            var v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        }));
    };
    /**
     * @return {?}
     */
    GspAppManagerComponent.prototype.addInvoke = /**
     * @return {?}
     */
    function () {
        this.appModel.appInvoks.push(this.createNewAppInvok());
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GspAppManagerComponent.prototype.removeInvoke = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.appModel.appInvoks = this.appModel.appInvoks.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id !== id; }));
    };
    /**
     * @private
     * @return {?}
     */
    GspAppManagerComponent.prototype.initAllAppTree = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.get(this.APP_URI).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                _this.allAppTreeData = _this.convert2TreeNodes(data);
                // console.log(this.allAppTreeData);
            }
        }));
    };
    /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    GspAppManagerComponent.prototype.convert2TreeNodes = /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    function (data, parentId) {
        var _this = this;
        if (parentId === void 0) { parentId = ''; }
        if (data.length) {
            /** @type {?} */
            var nodes = data.filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var pid = v.parentId;
                if (pid === undefined || pid === null) {
                    pid = '';
                }
                return pid === parentId;
            }));
            return nodes.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var node = {
                    data: item,
                    children: [],
                    selectable: item.layer === '3'
                };
                node.children = _this.convert2TreeNodes(data, item.id);
                return node;
            }));
        }
        return [];
    };
    /**
     * @private
     * @return {?}
     */
    GspAppManagerComponent.prototype.createNewAppInvok = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            id: this.uuid(),
            appId: this.appModel.id,
            code: '',
            appEntrance: '',
            // 路由标识
            name: ''
        };
    };
    GspAppManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gsp-app-mangaer',
                    template: "<div class=\"d-flex flex-row\" style=\"width: 760px; height: 400px;border:0px solid #ae00e6\">\r\n    <!-- Left -->\r\n    <div region=\"west\" class=\"west\" style=\"width: 280px;min-width:280px; height: 100%; background-color: #fff;border-right: 1px solid #e2e8f0;\">\r\n        <!-- \u83DC\u5355\u6811 -->\r\n        <perfect-scrollbar style=\"position: relative; width: 280px; height: 100%;\">\r\n            <farris-treetable #tt [data]=\"allAppTreeData\" [idField]=\"appIdField\" [striped]=\"false\" [findField]=\"'name'\"\r\n                [singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\"\r\n                (nodeSelected)=\"treeNodeClicked($event)\"\r\n                [checkOnSelect]=\"true\" [sortName]=\"'name'\" [sortOrder]=\"'asc'\" [remoteSort]=\"false\">\r\n                <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\">\r\n                    <tr #row=\"row\" [selectRow]=\"rowNode\" [selectRowDisabled]=\"!rowNode.node.selectable\" [dblclick]=\"true\">\r\n                        <td style=\"border: 0; cursor: pointer;\" [style.color]=\"row.selectRowDisabled? '#595959': '#000000'\">\r\n                            <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\r\n                            <span [innerHTML]=\"rowData['name'] | highlight: tt.findValue: 'name' : 'name'\"></span>\r\n                        </td>\r\n                    </tr>\r\n                </ng-template>\r\n            </farris-treetable>\r\n        </perfect-scrollbar>\r\n    </div>\r\n\r\n    <!-- main -->\r\n    <div region=\"center\" class=\"center flex-fill public-menu-main\" style=\"color: #000000; overflow: auto;\">\r\n\r\n        <div class=\"mengbanban\" *ngIf=\"showMask\" style=\"\r\n            position: absolute;\r\n            z-index: 10;\r\n            top: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            opacity: 0.5;\r\n            background: #fff;\r\n            display: block;\r\n            font-size: 40px;\r\n        \"><h1 style=\"\r\n            margin-top: 145px;\r\n            color: #000;\r\n            margin-left: 20px;\r\n        \">\u2190 {{ 'publishmenu.app.message.info' | locale }}</h1></div>\r\n\r\n        <div class=\"row\" style=\"margin: 10px 15px;\">\r\n            <div class=\"col-12\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtAppCode\">{{ 'publishmenu.app.id' | locale }}</label>\r\n                    <input type=\"text\" disabled [ngModel]=\"appModel.id\" class=\"form-control\" id=\"txtappid\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtAppCode\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.app.code' | locale }}</label>\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"appModel.code\" id=\"txtAppCode\" >\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtAppName\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.app.name' | locale }}</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"txtAppName\"  [(ngModel)]=\"appModel.name\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtAppAction\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.app.path' | locale }}</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"txtAppAction\" [(ngModel)]=\"appModel.url\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtAppRemark\">{{ 'publishmenu.app.remark' | locale }}</label>\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"appModel.description\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtAppRemark\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.app.entry' | locale }}</label>\r\n                    <table class=\"table table-bordered\">\r\n                        <colgroup>\r\n                            <col width=\"50\">\r\n                            <col width=\"50\">\r\n                            <col width=\"50\">\r\n                            <col width=\"30\">\r\n                        </colgroup>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>\r\n                                    {{ 'publishmenu.app.entryname' | locale }}\r\n                                </td>\r\n                                <td>\r\n                                    {{ 'publishmenu.app.entrycode' | locale }}\r\n                                </td>\r\n                                <td>\r\n                                    {{ 'publishmenu.app.routeid' | locale }}\r\n                                </td>\r\n                                <td align=\"center\">\r\n                                    {{ 'publishmenu.app.action' | locale }}\r\n                                </td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let n of appModel.appInvoks\">\r\n                                <td>\r\n                                    <input type=\"text\" [(ngModel)]=\"n.name\" class=\"form-control\">\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"n.code\" >\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"n.appEntrance\" >\r\n                                </td>\r\n                                <td style=\"padding-left: 0; padding-right: 0; text-align: center\">\r\n                                    <button type=\"button\" (click)=\"removeInvoke(n.id)\" class=\"btn\">\r\n                                        <span class=\"k-icon k-i-minus\"></span></button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td colspan=\"4\">\r\n                                    <button type=\"button\" (click)=\"addInvoke()\" class=\"btn btn-primary\">\r\n                                        <span class=\"k-icon k-i-plus\"></span> {{ 'publishmenu.app.addentry' | locale }}</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    GspAppManagerComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: Injector },
        { type: NgZone },
        { type: MessagerService }
    ]; };
    GspAppManagerComponent.propDecorators = {
        serverIp: [{ type: Input }],
        path: [{ type: Input }]
    };
    return GspAppManagerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BizobjectOperatorsComponent = /** @class */ (function () {
    function BizobjectOperatorsComponent(http, injector, ngZone) {
        this.http = http;
        this.injector = injector;
        this.ngZone = ngZone;
        this.serverIp = '';
        this.treeData = [];
        this.columns = [];
        this.items = [];
        this.allOperators = [];
        this.funcModel = {};
        this.selectBizObjectId = '';
        this.selectBizOpId = '';
        this.localeSer = this.injector.get(LocaleService, null);
    }
    Object.defineProperty(BizobjectOperatorsComponent.prototype, "BIZ_OBJECT_URI", {
        get: /**
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/dev/main/v1.0/business-objects';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BizobjectOperatorsComponent.prototype, "FUNCTION_OPERATORS_URI", {
        get: /**
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/runtime/sys/v1.0/funcOperations/all';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BizobjectOperatorsComponent.prototype, "bizObjectId", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.tt.selectedRow) {
                return this.tt.selectedRow;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BizobjectOperatorsComponent.prototype, "bizOpId", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid.selectedRow) {
                return this.grid.selectedRow;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BizobjectOperatorsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initTreeData();
        this.columns = [
            { title: this.localeSer.getValue('publishmenu.app.column.code'), field: 'code', width: 200 },
            { title: this.localeSer.getValue('publishmenu.app.column.name'), field: 'name', width: 150 }
        ];
    };
    /**
     * @param {?} e
     * @return {?}
     */
    BizobjectOperatorsComponent.prototype.treeNodeClicked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.grid.clearAll();
        this.items = this.allOperators.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.businessId === e.node.data.id; }));
        if (this.funcModel && Object.keys(this.funcModel).length) {
            /** @type {?} */
            var bizOpId = this.funcModel.bizOpId;
            if (!bizOpId) {
                return;
            }
            this.grid.selectRow(bizOpId, false);
        }
    };
    /**
     * @return {?}
     */
    BizobjectOperatorsComponent.prototype.treeNodeUnSelect = /**
     * @return {?}
     */
    function () {
        this.items = this.allOperators;
    };
    /**
     * @private
     * @return {?}
     */
    BizobjectOperatorsComponent.prototype.initTreeData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.get(this.BIZ_OBJECT_URI).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                _this.treeData = _this.convert2TreeNodes(data);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (_this.funcModel && Object.keys(_this.funcModel).length) {
                        /** @type {?} */
                        var bizObjectId = _this.funcModel.bizObjectId;
                        if (!bizObjectId) {
                            return;
                        }
                        /** @type {?} */
                        var treeNode = _this.tt.findRowNode(bizObjectId);
                        if (treeNode) {
                            treeNode.parents.forEach((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) {
                                _this.tt.expandNode(id);
                            }));
                            // this.tt.selectNode(bizObjectId);
                        }
                        _this.selectBizObjectId = bizObjectId;
                    }
                }), 200);
            }
        }));
        this.http.get(this.FUNCTION_OPERATORS_URI).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                _this.items = data.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.type === 0; }));
                _this.allOperators = cloneDeep(_this.items);
            }
        }));
    };
    /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    BizobjectOperatorsComponent.prototype.convert2TreeNodes = /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    function (data, parentId) {
        var _this = this;
        if (parentId === void 0) { parentId = null; }
        if (data.length) {
            /** @type {?} */
            var nodes = data.filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v.parentID === parentId; }));
            return nodes.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var node = {
                    data: item,
                    children: [],
                    expanded: parentId === null,
                    selectable: Number(item.isDetail) === 1
                };
                node.children = _this.convert2TreeNodes(data, item.id);
                return node;
            }));
        }
        return [];
    };
    BizobjectOperatorsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bizobj-operators',
                    template: "<div class=\"d-flex flex-row\" style=\"width: 760px; height: 400px;border:0px solid #ae00e6\">\r\n        <!-- Left -->\r\n        <div region=\"west\" class=\"west\" style=\"width: 280px;min-width:280px; height: 100%; background-color: #fff;border-right: 1px solid #e2e8f0;\">\r\n            <!-- \u83DC\u5355\u6811 -->\r\n            <perfect-scrollbar style=\"position: relative; width: 280px; height: 100%;\">\r\n                <farris-treetable #tt [data]=\"treeData\" [idField]=\"'id'\" [striped]=\"false\" [findField]=\"'name'\"\r\n                    [singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\"\r\n                    (nodeSelected)=\"treeNodeClicked($event)\" [keepSelect]=\"true\"\r\n                    (nodeUnSelect)=\"treeNodeUnSelect()\"\r\n                    [selectValue]=\"selectBizObjectId\"\r\n                    [checkOnSelect]=\"true\" [sortName]=\"'name'\" [sortOrder]=\"'asc'\" [remoteSort]=\"false\">\r\n                    <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\">\r\n                        <tr #row=\"row\" [selectRow]=\"rowNode\" [selectRowDisabled]=\"!rowNode.node.selectable\" [dblclick]=\"true\">\r\n                            <td style=\"border: 0; cursor: pointer;\" [style.color]=\"row.selectRowDisabled? '#595959': '#000000'\">\r\n                                <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\r\n                                <span [innerHTML]=\"rowData['name'] | highlight: tt.findValue: 'name' : 'name'\"></span>\r\n                            </td>\r\n                        </tr>\r\n                    </ng-template>\r\n                </farris-treetable>\r\n            </perfect-scrollbar>\r\n        </div>\r\n    \r\n        <!-- main -->\r\n        <div region=\"center\" class=\"center f-utils-fill \">\r\n    \r\n            <farris-datagrid [sizeType]=\"'md'\" [fitColumns]=\"true\"\r\n                [columns]=\"columns\" [fit]=\"true\" \r\n                [showCheckbox]=\"true\"\r\n                [selectOnCheck]=\"true\" [checkOnSelect]=\"true\"\r\n                [pagination]=\"false\" #grid\r\n                [data]=\"items\">\r\n            </farris-datagrid>\r\n    \r\n        </div>\r\n    </div>"
                }] }
    ];
    /** @nocollapse */
    BizobjectOperatorsComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: Injector },
        { type: NgZone }
    ]; };
    BizobjectOperatorsComponent.propDecorators = {
        serverIp: [{ type: Input }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        tt: [{ type: ViewChild, args: ['tt',] }]
    };
    return BizobjectOperatorsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectAppComponent = /** @class */ (function () {
    function SelectAppComponent(http, injector, ngZone) {
        this.http = http;
        this.injector = injector;
        this.ngZone = ngZone;
        this.serverIp = '';
        this.treeData = [];
        this.funcModel = {};
        this.columns = [];
        this.items = [];
        this.selectedAppID = '';
        this.localeSer = this.injector.get(LocaleService, null);
    }
    Object.defineProperty(SelectAppComponent.prototype, "APP_URI", {
        get: /**
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/runtime/sys/v1.0/gspapp/all';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectAppComponent.prototype, "appId", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.tt && this.tt.selectedRow) {
                return this.tt.selectedRow.data.id;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectAppComponent.prototype, "appInvokId", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid && this.grid.selectedRow) {
                return this.grid.selectedRow.id;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SelectAppComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initTreeData();
        this.columns = [
            { title: this.localeSer.getValue('publishmenu.app.column.code'), field: 'code', width: 200 },
            { title: this.localeSer.getValue('publishmenu.app.column.name'), field: 'name', width: 150 }
        ];
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SelectAppComponent.prototype.treeNodeClicked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        this.items = e.node.data.appInvoks || [];
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.funcModel && Object.keys(_this.funcModel).length) {
                /** @type {?} */
                var appInvokId = _this.funcModel.appInvokId;
                if (!appInvokId) {
                    return;
                }
                _this.grid.selectRow(appInvokId, false);
            }
        }), 100);
        // setTimeout(() => {
        //     if (this.grid && this.items.length) {
        //         this.grid.selectRow(this.items[0].id);
        //     }
        // }, 100);
    };
    /**
     * @private
     * @return {?}
     */
    SelectAppComponent.prototype.initTreeData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.get(this.APP_URI).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                _this.treeData = _this.convert2TreeNodes(data);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (_this.funcModel && Object.keys(_this.funcModel).length) {
                        /** @type {?} */
                        var appId = _this.funcModel.appId;
                        if (!appId) {
                            return;
                        }
                        /** @type {?} */
                        var treeNode = _this.tt.findRowNode(appId);
                        if (treeNode) {
                            treeNode.parents.forEach((/**
                             * @param {?} id
                             * @return {?}
                             */
                            function (id) {
                                _this.tt.expandNode(id);
                            }));
                        }
                        _this.selectedAppID = appId;
                    }
                }), 200);
            }
        }));
    };
    /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    SelectAppComponent.prototype.convert2TreeNodes = /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    function (data, parentId) {
        var _this = this;
        if (parentId === void 0) { parentId = ''; }
        if (data.length) {
            /** @type {?} */
            var nodes = data.filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var pid = v.parentId;
                if (pid === undefined || pid === null) {
                    pid = '';
                }
                return pid === parentId;
            }));
            // const nodes = data.filter((v) => (v.parentId || '') === parentId);
            return nodes.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var node = {
                    data: item,
                    children: [],
                    selectable: item.layer === '4'
                };
                node.children = _this.convert2TreeNodes(data, item.id);
                return node;
            }));
        }
        return [];
    };
    SelectAppComponent.decorators = [
        { type: Component, args: [{
                    selector: 'select-app',
                    template: "<div class=\"d-flex flex-row\" style=\"width: 760px; height: 400px;border:0px solid #ae00e6\">\r\n        <!-- Left -->\r\n        <div region=\"west\" class=\"west\" style=\"width: 280px;min-width:280px; height: 100%; background-color: #fff;border-right: 1px solid #e2e8f0;\">\r\n            <!-- \u83DC\u5355\u6811 -->\r\n            <perfect-scrollbar style=\"position: relative; width: 280px; height: 100%;\">\r\n                <farris-treetable #tt [data]=\"treeData\" [idField]=\"'id'\" [striped]=\"false\" [findField]=\"'name'\"\r\n                    [singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\"\r\n                    (nodeSelected)=\"treeNodeClicked($event)\"\r\n                    [selectValue]=\"selectedAppID\"\r\n                    [checkOnSelect]=\"true\" [sortName]=\"'name'\" [sortOrder]=\"'asc'\" [remoteSort]=\"false\">\r\n                    <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\">\r\n                        <tr #row=\"row\" [selectRow]=\"rowNode\" [selectRowDisabled]=\"!rowNode.node.selectable\" [dblclick]=\"true\">\r\n                            <td style=\"border: 0; cursor: pointer;\" [style.color]=\"row.selectRowDisabled? '#595959': '#000000'\">\r\n                                <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\r\n                                <span [innerHTML]=\"rowData['name'] | highlight: tt.findValue: 'name' : 'name'\"></span>\r\n                            </td>\r\n                        </tr>\r\n                    </ng-template>\r\n                </farris-treetable>\r\n            </perfect-scrollbar>\r\n        </div>\r\n    \r\n        <!-- main -->\r\n        <div region=\"center\" class=\"center f-utils-fill \" >\r\n    \r\n            <farris-datagrid [sizeType]=\"'md'\" [fitColumns]=\"true\"\r\n                [columns]=\"columns\" [fit]=\"true\" \r\n                [showCheckbox]=\"true\"\r\n                [selectOnCheck]=\"true\" [checkOnSelect]=\"true\"\r\n                [pagination]=\"false\" #grid\r\n                [data]=\"items\">\r\n            </farris-datagrid>\r\n    \r\n        </div>\r\n    </div>"
                }] }
    ];
    /** @nocollapse */
    SelectAppComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: Injector },
        { type: NgZone }
    ]; };
    SelectAppComponent.propDecorators = {
        serverIp: [{ type: Input }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        tt: [{ type: ViewChild, args: ['tt',] }]
    };
    return SelectAppComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PUBLISH_MENU_LOCALE = {
    "zh-CHS": {
        publishmenu: {
            app: {
                id: '应用标识',
                code: '应用编号',
                name: '应用名称',
                path: '部署路径',
                remark: '应用描述',
                entry: '应用入口',
                entryname: '入口名称',
                entrycode: '入口编号',
                routeid: '路由标识',
                action: '操作',
                addentry: '新增入口',
                message: {
                    info: '选择上级应用',
                    appInvoks: '请设置应用入口信息',
                    inValidInvoks: '应用入口点信息不完整，请检查',
                    appcode: '应用编号不能为空!<br>',
                    appname: '应用名称不能为空!<br>',
                    url: '部署路径不能为空!<br>',
                    invoksCode: '入口名称不能为空!<br>',
                    invoksName: '入口编号不能为空!<br>',
                    invoksAppEntrance: '路由标识不能为空!<br>'
                },
                column: {
                    code: '编号',
                    name: '名称'
                }
            },
            func: {
                id: '功能标识',
                code: '功能编号',
                name: '功能名称',
                action: '功能操作',
                selectBiz: '选择',
                remark: '功能描述',
                selectapp: '选择',
                addapp: '新建',
                linkapp: '关联应用',
                appentry: '应用入口',
                appParam: '参数设置',
                paramName: '参数名称',
                paramValue: '参数值',
                paramAction: '操作',
                addParam: '新增参数',
                placeholder: {
                    code: '请输入功能编号',
                    name: '请输入功能名称',
                    biz: '选择业务对象操作',
                    remark: '请输入功能描述',
                    selectapp: '选择应用'
                },
                message: {
                    info: '选择上级菜单',
                    code: '功能编号不能为空！<br>',
                    name: '功能名称不能为空！<br>',
                    parentId: '请在左侧选择上级菜单！<br>',
                    appid: '请选择关联应用！<br>',
                    appInvokId: '请选择关联应用入口！<br>',
                    bizObjectId: '请选择左侧业务操作对象！ <br>',
                    bizOpId: '请选择功能操作！ <br>'
                }
            },
            dialog: {
                title: '发布新菜单',
                btnOk: '确定',
                btnCancel: '取消',
                success: '新菜单发布成功！',
                selectapp: '选择关联应用',
                selectInfo: '请选择应用',
                appentry: '请选择应用入口',
                bizOptitle: '选择业务操作',
                bizwarn: '请选择左侧业务操作对象',
                bizaction: '请选择业务操作',
                app: '应用管理'
            },
            line: '第 {line} 行'
        }
    },
    "zh-CHT": {
        publishmenu: {
            app: {
                id: '應用標識',
                code: '應用編號',
                name: '應用名稱',
                path: '部署路徑',
                entry: '應用入口',
                entryname: '入口名稱',
                entrycode: '入口編號',
                routeid: '路由標識',
                remark: '應用描述',
                action: '操作',
                addentry: '新增入口',
                message: {
                    info: '選擇上級應用',
                    appInvoks: '請設置應用入口信息',
                    inValidInvoks: '應用入口信息不完整，請檢查',
                    appcode: '應用編號不能為空！<br>',
                    appname: '應用名稱不能為空！<br>',
                    url: '部署路徑不能為空！<br>',
                    invoksCode: '入口名稱不能為空！<br>',
                    invoksName: '入口編號不能為空！<br>',
                    invoksAppEntrance: '路由標識不能為空！<br>'
                },
                column: {
                    code: '編號',
                    name: '名稱'
                }
            },
            func: {
                id: '功能標識',
                code: '功能編號',
                name: '功能名稱',
                action: '功能操作',
                selectBiz: '選擇',
                remark: '功能描述',
                selectapp: '選擇',
                addapp: '新建',
                linkapp: '關聯應用',
                appentry: '應用入口',
                appParam: '參數設置',
                paramName: '參數名稱',
                paramValue: '參數值',
                paramAction: '操作',
                addParam: '新增參數',
                placeholder: {
                    code: '請輸入功能編號',
                    name: '請輸入功能名稱',
                    biz: '選擇業務對象操作',
                    remark: '請輸入功能描述',
                    selectapp: '選擇應用'
                },
                message: {
                    info: '選擇上級菜單',
                    code: '功能編號不能為空！<br>',
                    name: '功能名稱不能為空！<br>',
                    parentId: '請在左側選擇上級菜單！<br>',
                    appid: '請選擇關聯應用！<br>',
                    appInvokId: '請選擇關聯應用入口！<br>',
                    bizObjectId: '請選擇左側業務操作對象！ <br>',
                    bizOpId: '請選擇功能操作！ <br>'
                }
            },
            dialog: {
                title: '發布新菜單',
                btnOk: '確定',
                btnCancel: '取消',
                success: '新菜單發布成功！',
                selectapp: '選擇關聯應用',
                selectInfo: '請選擇應用',
                appentry: '請選擇應用入口',
                bizOptitle: '選擇業務操作',
                bizwarn: '請選擇左側業務操作對象',
                bizaction: '請選擇業務操作',
                app: '應用管理'
            },
            line: '第 {line} 行'
        }
    },
    en: {
        publishmenu: {
            app: {
                id: 'AppId',
                code: 'AppCode',
                name: 'AppName',
                path: 'DeploymentPayh',
                entry: 'ProtalSettings',
                entryname: 'Protal Name',
                entrycode: 'Protal Code',
                routeid: 'RoutingID',
                action: 'Operation',
                remark: 'AppDesc',
                addentry: 'New Protal',
                message: {
                    info: 'Please select parent.<br>',
                    appInvoks: 'Please set app protal.<br>',
                    inValidInvoks: 'Please check the protal info.<br>',
                    appcode: 'The App Code should not be empty.<br>',
                    appname: 'The App Name should not be empty.<br>',
                    url: 'The Url should not be empty.<br>',
                    invoksCode: 'Entry name cannot be empty.<br>',
                    invoksName: 'Entrance number cannot be empty.<br>',
                    invoksAppEntrance: 'Route ID cannot be empty.<br>'
                },
                column: {
                    code: 'Code',
                    name: 'Name'
                }
            },
            func: {
                id: 'Function ID',
                code: 'Function code',
                name: 'Function name',
                action: 'Function operation',
                selectBiz: 'Select',
                remark: 'Function description',
                selectapp: 'Select App',
                addapp: 'New App',
                linkapp: 'Invoke information',
                appentry: 'ProtalSettings',
                appParam: 'Static params setting',
                paramName: 'Param Name',
                paramValue: 'Param Value',
                paramAction: '	Operation',
                addParam: 'Add new params',
                placeholder: {
                    code: 'Function code',
                    name: 'Function Name',
                    biz: 'Please Select Business Type.',
                    remark: 'Function description',
                    selectapp: 'Select App'
                },
                message: {
                    info: 'Please aelect a parent menu.',
                    code: 'The function Code should not be empty！<br>',
                    name: 'The function Name should not be empty！<br>',
                    parentId: 'Please select the upper menu on the left！<br>',
                    appid: 'Please select the associated application！<br>',
                    appInvokId: 'Please select the associated application portal！<br>',
                    bizObjectId: 'Please select the business operation object on the left！ <br>',
                    bizOpId: 'Please select function operation！ <br>'
                }
            },
            dialog: {
                title: 'New menu publish',
                btnOk: 'OK',
                btnCancel: 'Cancel',
                success: 'New menu publish success！',
                selectapp: 'Select associated application',
                selectInfo: 'Please select a application.',
                appentry: 'Please select an application portal.',
                bizOptitle: 'Select business operation.',
                bizwarn: 'Please select the business operation object on the left.',
                bizaction: 'Please select business operation.',
                app: 'Application Manager'
            },
            line: 'Line {line} '
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PublishMenuComponent = /** @class */ (function () {
    function PublishMenuComponent(http, injector, modalService, uuid, messagerSer, loadingSer, cd) {
        this.http = http;
        this.injector = injector;
        this.modalService = modalService;
        this.uuid = uuid;
        this.messagerSer = messagerSer;
        this.loadingSer = loadingSer;
        this.cd = cd;
        this.serverIp = '';
        this.publishPath = '';
        /**
         * 所有功能菜单数据
         */
        this.allFuncTreeData = [];
        this.funcIdField = 'id';
        this.showMask = true;
        this.languages = [
            { code: 'zh-CHS', name: '中文简体' },
            { code: 'en', name: 'English' },
            { code: 'zh-CHT', name: '中文繁体' }
        ];
        this.funcModel = null;
        this.localeId = 'zh-CHS';
        this.commonUtil = this.injector.get(CommonUtils);
        this.localeId = this.injector.get(LOCALE_ID, 'zh-CHS');
        if (this.localeId === 'zh') {
            this.localeId = 'zh-CHS';
        }
        if (!this.localeSer) {
            this.localeSer = this.injector.get(LocaleService, null);
            if (!this.localeSer) {
                this.localeSer = new LocaleService(this.localeId, this.commonUtil, PUBLISH_MENU_LOCALE);
            }
            else {
                if (!this.localeSer.langData['publishmenu']) {
                    this.localeSer.setLocaleData(PUBLISH_MENU_LOCALE);
                }
            }
        }
    }
    Object.defineProperty(PublishMenuComponent.prototype, "FUNC_URI", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/runtime/sys/v1.0/functions/allFuncs';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PublishMenuComponent.prototype, "APP_URI", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/runtime/sys/v1.0/gspapp/all';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PublishMenuComponent.prototype, "APP_POST_URI", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/runtime/sys/v1.0/gspapp';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PublishMenuComponent.prototype, "FUNC_POST_URI", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.serverIp + '/api/runtime/sys/v1.0/functions';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.initAllFuncTree();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PublishMenuComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.emptyData = /**
     * @return {?}
     */
    function () {
        this.funcModel = {
            appId: '',
            appInvokId: '',
            bizObjectId: '',
            bizOpId: '',
            code: '',
            creator: '',
            description: '',
            funcType: '4',
            id: this.uuid.generate(),
            icon: '',
            isDetail: true,
            isDisplayed: true,
            isSysInit: false,
            layer: '4',
            menuType: '1',
            name: '',
            parentId: '',
            path: '',
            staticParams: [{ name: 'mode', value: 'spa' }],
            url: '',
            nameLanguage: null
        };
    };
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.validate = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var msg = '';
        if (!this.funcModel.parentId) {
            msg += this.localeSer.getValue('publishmenu.func.message.parentId'); // '请在左侧选择上级菜单！<br>';
        }
        if (!msg) {
            if (!this.funcModel.code) {
                msg += this.localeSer.getValue('publishmenu.func.message.code'); // '功能编号不能为空！<br>';
            }
            if (!this.funcModel.name) {
                msg += this.localeSer.getValue('publishmenu.func.message.name'); // '功能名称不能为空！<br>';
            }
            if (!this.funcModel.bizOpId) {
                msg += this.localeSer.getValue('publishmenu.func.message.bizOpId'); // '请选择功能操作！ <br>';
            }
            if (!this.funcModel.appId) {
                msg += this.localeSer.getValue('publishmenu.func.message.appid'); // '请选择关联应用！<br>';
            }
            if (!this.funcModel.appInvokId) {
                msg += this.localeSer.getValue('publishmenu.func.message.appInvokId'); // '请选择关联应用入口！<br>';
            }
        }
        // if (!this.funcModel.bizObjectId) {
        //     msg += this.localeSer.getValue('publishmenu.func.message.bizObjectId');  // '请选择左侧业务操作对象！ <br>';
        // }
        if (msg) {
            this.messagerSer.show('warning', msg, { safeHtml: false, height: 300 });
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.saveMenu = /**
     * @return {?}
     */
    function () {
        this.funcModel.name = this.funcModel.nameLanguage ? this.funcModel.nameLanguage[this.localeId] : '';
        if (this.validate()) {
            /** @type {?} */
            var staticParams = JSON.stringify(this.funcModel.staticParams);
            /** @type {?} */
            var _funcModel = cloneDeep(this.funcModel);
            _funcModel.staticParams = staticParams;
            _funcModel.name = _funcModel.nameLanguage[this.localeId];
            return this.http.post(this.FUNC_POST_URI, _funcModel);
        }
        return of(false);
    };
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var modalRef = this.modalService.show(this.dlgContent, {
            title: this.localeSer.getValue('publishmenu.dialog.title'),
            width: 760, height: 500,
            showMaxButton: false,
            resizable: false,
            enableScroll: false,
            buttons: [
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        _this.saveMenu().subscribe((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) {
                            if (r) {
                                _this.messagerSer.success(_this.localeSer.getValue('publishmenu.dialog.success'));
                                modalRef.close();
                                _this.showMask = true;
                            }
                        }), (/**
                         * @param {?} err
                         * @return {?}
                         */
                        function (err) {
                            console.error(err);
                            if (err) {
                                /** @type {?} */
                                var error = err.error;
                                if (error) {
                                    /** @type {?} */
                                    var mesg = error.Message;
                                    _this.messagerSer.warning(mesg);
                                }
                            }
                        }));
                    })
                },
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnCancel'),
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        modalRef.close();
                        _this.showMask = true;
                    })
                }
            ],
            opened: (/**
             * @return {?}
             */
            function () {
                _this.initAllFuncTree();
            })
        });
        this.emptyData();
        return modalRef;
    };
    // 选择关联应用
    // 选择关联应用
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.showSelectAppModal = 
    // 选择关联应用
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var modalRef = this.modalService.show(SelectAppComponent, {
            title: this.localeSer.getValue('publishmenu.dialog.selectapp'),
            width: 760, height: 500,
            enableScroll: false,
            showMaxButton: false,
            resizable: false,
            initialState: {
                serverIp: this.serverIp,
                funcModel: this.funcModel
            },
            buttons: [
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var sac = (/** @type {?} */ (modalRef.content));
                        /** @type {?} */
                        var msg = '';
                        if (sac.appId && sac.appInvokId) {
                            _this.funcModel.appId = sac.appId;
                            _this.funcModel.appInvokId = sac.appInvokId;
                            msg = '';
                        }
                        if (!sac.appId) {
                            msg = _this.localeSer.getValue('publishmenu.dialog.selectInfo');
                        }
                        else if (!sac.appInvokId) {
                            msg = _this.localeSer.getValue('publishmenu.dialog.appentry');
                        }
                        if (msg) {
                            _this.messagerSer.warning(msg);
                        }
                        else {
                            modalRef.close();
                        }
                    })
                },
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnCancel'),
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        modalRef.close();
                    })
                }
            ]
        });
        return modalRef;
    };
    // 选择业务操作
    // 选择业务操作
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.showBizObjectOperatorModal = 
    // 选择业务操作
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var modalRef = this.modalService.show(BizobjectOperatorsComponent, {
            title: this.localeSer.getValue('publishmenu.dialog.bizOptitle'),
            width: 760, height: 500,
            enableScroll: false,
            showMaxButton: false,
            resizable: false,
            initialState: {
                serverIp: this.serverIp,
                funcModel: this.funcModel
            },
            buttons: [
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var boc = (/** @type {?} */ (modalRef.content));
                        /** @type {?} */
                        var bizObj = (/** @type {?} */ (boc.bizObjectId));
                        /** @type {?} */
                        var bizOp = (/** @type {?} */ (boc.bizOpId));
                        if (bizOp) {
                            /** @type {?} */
                            var bizObjID = '';
                            if (!bizObj) {
                                bizObjID = bizOp.data.businessId;
                            }
                            else {
                                bizObjID = bizObj.id;
                            }
                            if (bizObjID) {
                                _this.funcModel.bizObjectId = bizObjID;
                                _this.funcModel.bizOpId = bizOp.id;
                                modalRef.close();
                            }
                            else {
                                _this.messagerSer.warning(_this.localeSer.getValue('publishmenu.dialog.bizwarn'));
                            }
                        }
                        else {
                            _this.messagerSer.warning(_this.localeSer.getValue('publishmenu.dialog.bizaction'));
                        }
                    })
                },
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnCancel'),
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        modalRef.close();
                    })
                }
            ]
        });
        return modalRef;
    };
    // 新建应用
    // 新建应用
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.showAppModal = 
    // 新建应用
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var modalRef = this.modalService.show(GspAppManagerComponent, {
            title: this.localeSer.getValue('publishmenu.dialog.app'),
            width: 760, height: 500,
            showMaxButton: false,
            resizable: false,
            enableScroll: false,
            initialState: {
                serverIp: this.serverIp,
                path: (this.publishPath || '').replace('index.htmlindex.html', 'index.html'),
                funcModel: this.funcModel
            },
            buttons: [
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnOk'),
                    cls: 'btn btn-primary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var amc = (/** @type {?} */ (modalRef.content));
                        if (amc.validate()) {
                            _this.loadingSer.show();
                            _this.http.post(_this.APP_POST_URI, amc.appModel).subscribe((/**
                             * @param {?} r
                             * @return {?}
                             */
                            function (r) {
                                if (r) {
                                    _this.funcModel.appId = amc.appModel.id;
                                    _this.funcModel.appInvokId = amc.appModel.appInvoks[0].id;
                                    _this.loadingSer.close();
                                    modalRef.close();
                                }
                            }));
                        }
                        // console.log(amc.appModel);
                    })
                },
                {
                    text: this.localeSer.getValue('publishmenu.dialog.btnCancel'),
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        modalRef.close();
                    })
                }
            ]
        });
        return modalRef;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PublishMenuComponent.prototype.treeNodeClicked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.funcModel.parentId = e.node.data.id;
        this.showMask = false;
        this.cd.detectChanges();
        /** @type {?} */
        var input = document.querySelector('#txtFuncCode');
        if (input) {
            input.click();
            input.focus();
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    PublishMenuComponent.prototype.removeStaticParams = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.funcModel.staticParams = this.funcModel.staticParams.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.name !== name; }));
    };
    /**
     * @return {?}
     */
    PublishMenuComponent.prototype.addStaticParams = /**
     * @return {?}
     */
    function () {
        this.funcModel.staticParams.push({ name: '', value: '' });
    };
    /**
     * @private
     * @return {?}
     */
    PublishMenuComponent.prototype.initAllFuncTree = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.get(this.FUNC_URI).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                _this.allFuncTreeData = _this.convert2TreeNodes(data);
            }
        }));
    };
    /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    PublishMenuComponent.prototype.convert2TreeNodes = /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    function (data, parentId) {
        var _this = this;
        if (parentId === void 0) { parentId = '0'; }
        if (data.length) {
            /** @type {?} */
            var nodes = data.filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v.parentId === parentId; }));
            return nodes.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var node = {
                    data: item,
                    children: [],
                    selectable: item.layer === '3'
                };
                node.children = _this.convert2TreeNodes(data, item.id);
                return node;
            }));
        }
        return [];
    };
    PublishMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'publish-menu',
                    template: "\r\n<ng-template #dlgContent>\r\n\r\n<div class=\"d-flex flex-row\" style=\"width: 760px; height: 400px;border:0px solid #ae00e6\">\r\n    <!-- Left -->\r\n    <div region=\"west\" class=\"west\" style=\"width: 280px;min-width:280px; height: 100%; background-color: #fff;border-right: 1px solid #e2e8f0;\">\r\n        <!-- \u83DC\u5355\u6811 -->\r\n        <div class=\"ps\" style=\"position: relative; height: 100%;\" [perfectScrollbar]=\"{}\">\r\n            <farris-treetable #tt=\"treeTable\" [data]=\"allFuncTreeData\" [idField]=\"funcIdField\" [striped]=\"false\" [fit]=\"true\"\r\n            [findField]=\"'name'\" (nodeSelected)=\"treeNodeClicked($event)\"\r\n            [singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\" [checkOnSelect]=\"true\">\r\n                <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\" >\r\n                    <tr #row=\"row\" [selectRow]=\"rowNode\" [selectRowDisabled]=\"!rowNode.node.selectable\" [dblclick]=\"true\">\r\n                        <td style=\"border: 0; cursor: pointer;\" [style.color]=\"row.selectRowDisabled? '#595959': '#000000'\">\r\n                            <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\r\n                            <span [innerHTML]=\"rowData['name'] | highlight: tt.findValue : 'name' : 'name'\"></span>\r\n                        </td>\r\n                    </tr>\r\n                </ng-template>\r\n            </farris-treetable>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- main -->\r\n    <div region=\"center\" class=\"center flex-fill public-menu-main\" style=\"color: #000000;overflow: auto;\">\r\n        <div class=\"mengbanban\" *ngIf=\"showMask\" \r\n        style=\"position: absolute; z-index: 10; top: 0; width: 100%; height: 100%;opacity: 0.5; background: #fff; display: block; font-size: 40px; \">\r\n            <h1 style=\"margin-top: 145px; color: #000; margin-left: 20px; \">\u2190 {{ 'publishmenu.func.message.info' | locale }}</h1>\r\n        </div>\r\n        <div class=\"row\" style=\"margin: 10px 15px;\">\r\n            <div class=\"col-12\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtFuncId\">{{ 'publishmenu.func.id' | locale: '\u529F\u80FD\u6807\u8BC6' }}</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"txtFuncId\" disabled [ngModel]=\"funcModel.id\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtFuncCode\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.func.code' | locale: '\u529F\u80FD\u7F16\u53F7' }}</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"txtFuncCode\" [(ngModel)]=\"funcModel.code\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtFuncName\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.func.name' | locale: '\u529F\u80FD\u540D\u79F0' }}</label>\r\n                    <!-- <input type=\"text\" class=\"form-control\" id=\"txtFuncName\" [(ngModel)]=\"funcModel.name\" > -->\r\n                    <language-textbox \r\n                    [languages]=\"languages\" [(ngModel)]=\"funcModel.nameLanguage\"\r\n                    [enableClear]=\"false\"\r\n                    [readonly]=\"false\"\r\n                    [disabled]=\"false\"\r\n                    [autoFocus]=\"true\"\r\n                    ></language-textbox>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtFuncAction\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.func.action' | locale: '\u529F\u80FD\u64CD\u4F5C' }}</label>\r\n\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"funcModel.bizOpId\" readonly >\r\n                        <div class=\"input-group-append\">\r\n                            <button class=\"btn btn-outline-secondary\" (click)=\"showBizObjectOperatorModal()\" type=\"button\">{{ 'publishmenu.func.selectBiz' | locale: '\u9009\u62E9' }}</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtFuncRemark\">{{ 'publishmenu.func.remark' | locale: '\u529F\u80FD\u63CF\u8FF0' }}</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"txtFuncRemark\" [(ngModel)]=\"funcModel.description\" >\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.func.linkapp' | locale: '\u5173\u8054\u5E94\u7528' }}</label>\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"funcModel.appId\" readonly>\r\n                        <div class=\"input-group-append\">\r\n                            <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"showSelectAppModal()\">{{ 'publishmenu.func.selectapp' | locale: '\u9009\u62E9' }}</button>\r\n                            <button class=\"btn btn-outline-secondary\" type=\"button\" (click)=\"showAppModal()\">{{ 'publishmenu.func.addapp' | locale: '\u65B0\u5EFA' }}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtappInvokid\"><span class=\"farris-label-info text-danger\">*</span>{{ 'publishmenu.func.appentry' | locale: '\u5E94\u7528\u5165\u53E3' }}</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"txtappInvokid\" [ngModel]=\"funcModel.appInvokId\" disabled>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtAppRemark\">{{ 'publishmenu.func.appParam' | locale: '\u53C2\u6570\u8BBE\u7F6E' }}</label>\r\n                    <table class=\"table table-bordered\">\r\n                        <colgroup>\r\n                            <col width=\"140\">\r\n                            <col width=\"200\">\r\n                            <col width=\"\">\r\n                        </colgroup>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>\r\n                                    {{ 'publishmenu.func.paramName' | locale: '\u53C2\u6570\u540D\u79F0' }}\r\n                                </td>\r\n                                <td>\r\n                                    {{ 'publishmenu.func.paramValue' | locale: '\u53C2\u6570\u503C' }}\r\n                                </td>\r\n                                <td align=\"center\">\r\n                                    {{ 'publishmenu.func.paramAction' | locale: '\u64CD\u4F5C' }}\r\n                                </td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let n of funcModel.staticParams\">\r\n                                <td>\r\n                                    <input type=\"text\" [(ngModel)]=\"n.name\" class=\"form-control\">\r\n                                </td>\r\n                                <td>\r\n                                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"n.value\" >\r\n                                </td>\r\n                                <td style=\"padding-left: 0; padding-right: 0; text-align: center\">\r\n                                    <button type=\"button\" (click)=\"removeStaticParams(n.name)\" class=\"btn\">\r\n                                        <span class=\"k-icon k-i-minus\"></span></button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td colspan=\"3\">\r\n                                    <button type=\"button\" (click)=\"addStaticParams()\" class=\"btn btn-primary\">\r\n                                        <span class=\"k-icon k-i-plus\"></span> {{ 'publishmenu.func.addParam' | locale: '\u65B0\u589E\u53C2\u6570' }}</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>\r\n\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"txtFuncRemark\">ParentId</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"txtFuncRemark\" [ngModel]=\"funcModel.parentId\" disabled>\r\n                </div>\r\n                    \r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n\r\n\r\n</ng-template>",
                    exportAs: 'publishMenu',
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n        .public-menu-main::-webkit-scrollbar-track-piece{width:8px;background-color:#e2e2e2;}\n        .public-menu-main::-webkit-scrollbar{width:8px;height:6px;}\n        .public-menu-main::-webkit-scrollbar-thumb{height:50px;background:#9fa1a0; cursor:pointer;}\n        .public-menu-main::-webkit-scrollbar-thumb:hover{background:#686868; cursor:pointer\n        "]
                }] }
    ];
    /** @nocollapse */
    PublishMenuComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: Injector },
        { type: BsModalService },
        { type: IdService },
        { type: MessagerService },
        { type: LoadingService },
        { type: ChangeDetectorRef }
    ]; };
    PublishMenuComponent.propDecorators = {
        serverIp: [{ type: Input }],
        dlgContent: [{ type: ViewChild, args: ['dlgContent',] }],
        publishPath: [{ type: Input }]
    };
    return PublishMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PublishMenuModule = /** @class */ (function () {
    function PublishMenuModule() {
    }
    PublishMenuModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        PublishMenuComponent,
                        GspAppManagerComponent,
                        BizobjectOperatorsComponent,
                        SelectAppComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        LocaleModule.forRoot(PUBLISH_MENU_LOCALE),
                        LanguageTextboxModule,
                        FarrisCommonModule.forRoot(),
                        PerfectScrollbarModule,
                        ModalModule.forRoot(),
                        MessagerModule.forRoot(),
                        CacheModule.forRoot(),
                        LoadingModule.forRoot(),
                        GSPHttpModule,
                        DatagridModule,
                        TreeTableModule
                    ],
                    entryComponents: [
                        GspAppManagerComponent,
                        BizobjectOperatorsComponent,
                        SelectAppComponent
                    ],
                    exports: [PublishMenuComponent, GspAppManagerComponent, BizobjectOperatorsComponent,
                        SelectAppComponent]
                },] }
    ];
    return PublishMenuModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PublishMenuService, PublishMenuComponent, PublishMenuModule, BizobjectOperatorsComponent as ɵb, GspAppManagerComponent as ɵa, PUBLISH_MENU_LOCALE as ɵd, SelectAppComponent as ɵc };

//# sourceMappingURL=farris-ide-publish-menu.js.map