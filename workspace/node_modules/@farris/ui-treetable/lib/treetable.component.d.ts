import { OnInit, TemplateRef, QueryList, AfterContentInit, OnDestroy, EventEmitter, ElementRef, Injector, AfterViewInit, NgZone, Renderer2, OnChanges, SimpleChanges, AfterViewChecked, ChangeDetectorRef, DoCheck } from '@angular/core';
import { FarrisTemplateDirective, CommonUtils } from '@farris/ui-common';
import { ResizeService } from '@farris/ui-common/events';
import { ColumnFormatService, ColumnFormatter } from '@farris/ui-common/column';
import { InputGroupComponent } from '@farris/ui-input-group';
import { LocaleService } from '@farris/ui-locale';
import { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';
import { Subscription, Observable, BehaviorSubject, Subject } from 'rxjs';
import { TreeTableColumn } from './types/treetable-column';
import { VirtualizedLoaderService } from './virtualized-loader.service';
import { TreeNode, RowNode, SelectEventArgs } from './types/treenode';
import { TreetableService } from './treetable.service';
import { SearchHandle } from './search.handle';
import { TTHotkeys } from './hotkeys';
import { PaginationInstance } from '@farris/ui-pagination';
import { FarrisContextMenuDirective } from '@farris/ui-context-menu';
/** 单元格点事件参数 */
export interface CellClickParam {
    event: Event;
    col: TreeTableColumn;
    node: TreeNode;
}
/** 节点钩选事件 */
export interface NodeCheckedParam {
    originalEvent?: any;
    node: TreeNode | TreeNode[];
    nodes?: any[];
    instance: TreeTableComponent;
}
export interface NodeSelectedParam {
    originalEvent?: Event;
    node: TreeNode | TreeNode[];
    type?: 'row' | 'checkbox';
    index?: number;
    parents?: any[];
    instance: TreeTableComponent;
}
export declare type IconFieldType = {
    leaf?: string;
    expand?: string;
    collapse?: string;
} | string;
export declare class TreeTableColumnDirective {
    field: string;
    title: string;
    width?: number;
    hAlign?: string;
    align?: string;
    formatter?: () => any | ColumnFormatter;
}
export declare class TreeTableComponent implements OnInit, AfterContentInit, AfterViewInit, OnChanges, AfterViewChecked, OnDestroy {
    ttService: TreetableService;
    el: ElementRef;
    resizeSer: ResizeService;
    private renderer;
    utils: CommonUtils;
    colFormatSer: ColumnFormatService;
    private shortcuts;
    private cdRef;
    private ngZone;
    private injector;
    id: string;
    /** 宽度 */
    width: number;
    /** 高度 */
    height: number;
    showFilterBar: boolean;
    /** 显示过滤行 */
    enableFilterRow: boolean;
    /** 显示查询字段 */
    showSearchField: boolean;
    headerHeight: number;
    /** 表头折行 */
    headerWrap: boolean;
    /** 行高 */
    rowHeight: number;
    /**
     * 列信息
     */
    columns: any[];
    private _groupColumns;
    groupColumns: any;
    /** 启用多表头 */
    useGroupHeader: boolean;
    fitColumns: boolean;
    autoFitColumns: boolean;
    searchFields: {
        label: string;
        value: string;
    }[];
    allColumnsTitle: string;
    searchAnyField: boolean;
    /** 显示连接线，默认为 false */
    showLines: boolean;
    showLinesOnHover: boolean;
    /**
     * 是否启用多选。 默认为单选
     */
    multiSelect: boolean;
    singleSelect: boolean;
    /** 启用多选后，是否显示checkbox */
    showCheckbox: boolean;
    /**
     * 主键字段
     */
    idField: string;
    /** 显示边框线 */
    showBorder: boolean;
    showCheckAll: boolean;
    showHeader: boolean;
    /** 启用斑马线 */
    striped: boolean;
    /** 启用鼠标划过效果 */
    hovered: boolean;
    /** 禁用。 禁用时不允许选中行 */
    disabled: boolean;
    /** 禁卡节点选中 */
    disabledRow: (param: {
        node: TreeNode;
        instance?: TreeTableComponent;
    }) => boolean;
    /** 数据加载方式; 默认值 为 all
     * - all: 全部加载
     * - async: 分层加载
     */
    loadDataType: 'all' | 'async';
    /** 固定表头 */
    fixedHeader: boolean;
    /** 当多选时，选中当前行并钩选 */
    checkOnSelect: boolean;
    /** 当多选时，钩选并选中当前行 */
    selectOnCheck: boolean;
    /**
     * 启用多选时，此属性为true 时，仅当前行选中
     */
    onlySelectSelf: boolean;
    /** 启用列宽调整 */
    resizableColumns: boolean;
    /** 设置为true时自适应父容的尺寸 */
    fit: boolean;
    /** 启用级联选中功能 */
    cascadeCheck: boolean;
    /** 向下级联选中 */
    cascadeDown: boolean;
    /** 向上级联选中 */
    cascadeUp: boolean;
    /** 空数据时，显示的提示文本 */
    emptyMessage: string;
    /** 缩进间距，默认为 16px */
    indentSpacing: number;
    /**
     * 单击行选中后，在次点击不会被取消选中状态;
     */
    keepSelect: boolean;
    /** 虚拟加载 */
    virtualized: boolean;
    /**
     * 仅允许选择叶子节点
     * - default: 应用服务器端传回的设置，如果服务器端没有设置，则与 no 保持一至；
     * - yes: 如果客户端设置为 `yes`, 服务器端的设置失效；
     * - no: 允许选择所有节点；服务器端设置失效
     */
    onlySelectLeaf: boolean | 'default' | 'yes' | 'no';
    /** 显示图标 */
    showIcon: boolean;
    /** 叶子节点图标 */
    leafIcon: string;
    /** 节点展开图标 */
    expandIcon: string;
    /** 节点折叠图标 */
    collapseIcon: string;
    foldIcon: string;
    unfoldIcon: string;
    /** 启用节点图标从数据中获取。 默认为 false */
    useIconFromData: boolean;
    /** 当数据源中icon未设置时使用内置ICON. 默认为 true */
    whenDataIconEmptyUseDefault: boolean;
    /** 从数据源字段中获取图标 */
    iconField: IconFieldType;
    /** 图标自定义样式 */
    iconCls: string;
    /** 启用远端排序 */
    remoteSort: boolean;
    /** 排序字段 */
    sortName: string;
    /** 排序方式 asc | desc */
    sortOrder: string;
    /** 允许多列排序 */
    multiSort: boolean;
    beforeSortColumn: (field: string, order: string) => Observable<boolean>;
    rowStyler: (treeNode: TreeNode, field?: string) => any;
    cellStyler: (treeNode: TreeNode, field: string) => any;
    /** 启用前端文本查找 */
    enableFindText: boolean;
    /** 文本查询字段, 弃用 */
    findField: string;
    expandLevel: number;
    selectValue: string;
    selectValueChange: EventEmitter<{}>;
    /** 启用双击展开节点 */
    dblClickExpand: boolean;
    useDblClick: boolean;
    /** 选中节点ID数组 */
    selectValues: any[];
    selectValuesChange: EventEmitter<{}>;
    /** 是否禁止折行，默认不折行 */
    nowrap: boolean;
    checkValues: any[];
    checkValuesChange: EventEmitter<{}>;
    beforeNodeSelected: (e: any) => Observable<boolean>;
    beforeNodeUnSelected: () => Observable<boolean>;
    beforeNodeChecked: () => Observable<boolean>;
    beforeNodeUnChecked: () => Observable<boolean>;
    beforeCheckAll: (e?: any) => Observable<boolean>;
    beforeUnCheckAll: (e?: any) => Observable<boolean>;
    beforeClickNode: (e?: any) => Observable<boolean>;
    /** 分页信息 */
    pagination: boolean;
    /** 分页加载子节点数据 */
    paginationForChildren: boolean;
    /** 分页条显示模式， default, simple */
    pagerViewMode: string;
    /** 启用服务器端分页 */
    pagerOnServer: boolean;
    /** 每页记录数 */
    pageList: number[];
    /** 当前页码 */
    pageIndex: number;
    /** 每页记录数 */
    pageSize: number;
    /** 分页区高度 */
    pagerHeight: number;
    /** 显示每页记录数 */
    showPageList: boolean;
    /** 显示分页信息 */
    showPageInfo: boolean;
    /** 显示页码 */
    showPageNumber: boolean;
    /** 显示页码最大数量 */
    pagerLabelSize: number;
    /** 显示页码输入框 */
    showGotoInput: boolean;
    /** 子节点分页是否显示总记录数，默认 false */
    showTotalForChildren: boolean;
    /** 总记录数 */
    total: number;
    enableContextMenu: boolean;
    contextMenuItems: any[];
    beforeShowContextMenu: (e: {
        [key: string]: any;
    }) => Observable<{
        show: boolean;
        menus: Array<any>;
    }>;
    pageSizeChanged: EventEmitter<{}>;
    pageChanged: EventEmitter<{}>;
    /** 排序后 */
    columnSorted: EventEmitter<{}>;
    /** 选中事件 */
    nodeSelected: EventEmitter<NodeSelectedParam>;
    /** 取消选中事件 */
    nodeUnSelect: EventEmitter<NodeSelectedParam>;
    /** 钩选 */
    nodeChecked: EventEmitter<NodeCheckedParam>;
    /** 取消钩选 */
    nodeUnChecked: EventEmitter<NodeCheckedParam>;
    /** 全选事件 */
    checkAll: EventEmitter<any>;
    /** 取消全选 */
    unCheckAll: EventEmitter<any>;
    /** 查询 */
    search: EventEmitter<any>;
    dblClick: EventEmitter<any>;
    loadedData: EventEmitter<any>;
    expand: EventEmitter<TreeNode>;
    collapse: EventEmitter<TreeNode>;
    expandAllNodes: EventEmitter<any>;
    collapseAllNodes: EventEmitter<any>;
    appendNew: EventEmitter<any>;
    removed: EventEmitter<any>;
    updated: EventEmitter<any>;
    clearSearchValue: EventEmitter<{}>;
    cellClick: EventEmitter<CellClickParam>;
    childsPageChanged: EventEmitter<{}>;
    searchValueChange: EventEmitter<any>;
    loadedTimer: number;
    serializedValue: RowNode[];
    _data: TreeNode[];
    isLoadNewDataSetEmpty: boolean;
    data: any[];
    /** 根据内容自动宽度，默认 false;
     * 此属性开启后，自动列宽失效
     */
    autoWidth: boolean;
    templates: QueryList<FarrisTemplateDirective>;
    columnsRef: QueryList<TreeTableColumnDirective>;
    headerBox: ElementRef;
    resizerHelperVC: ElementRef;
    headerTable: ElementRef;
    bodyTable: ElementRef;
    inputGroup: InputGroupComponent;
    psRef?: PerfectScrollbarComponent;
    private headerCheckboxCmp;
    allCheckbox: TreeTableHeaderCheckboxComponent;
    nodesPagerBar: TemplateRef<any>;
    ctxMenu: FarrisContextMenuDirective;
    /**
     * 表头模板
     */
    headerTemplate: TemplateRef<any>;
    /**
     * 表体模板
     */
    bodyTemplate: TemplateRef<any>;
    /** 选中项集合 */
    private _selections;
    selections: TreeNode[];
    /**
     * 选中项索引
     */
    selectRowIndex: number;
    /** 选中当前行 */
    private _selectedRow;
    selectedRow: TreeNode;
    /** 钩选的记录集合 */
    private _checkeds;
    checkeds: TreeNode[];
    containerElement: HTMLDivElement;
    lastResizerHelperX: number;
    searchData: {
        field: string;
        value: string;
    };
    scorllBodyHeight: number;
    searchHandle: SearchHandle;
    searchButtonText: string;
    /** 显示查询工具条 */
    showFindInput: boolean;
    private isDataChanged;
    scrollLoader: VirtualizedLoaderService;
    topHideHeight: number;
    bottomHideHeight: number;
    state: {
        searchRowNodes: any;
        searched: boolean;
        rowNodes: any[];
        scrollY: number;
        scrollX: number;
    };
    /** 待查询的文本 */
    findValue: string;
    /** 结果总数 */
    findCount: number;
    /** 当前索引 */
    findCurrent: number;
    /** 存储文本查询结果 */
    findResult: any[];
    private ro;
    private findKeysHandler;
    private _hotKeys;
    localeService: LocaleService;
    private idService;
    private styleSheetId;
    private styleElement;
    fast: boolean;
    paginationOptions: PaginationInstance;
    selectNodeChangedSubject: BehaviorSubject<any>;
    private _UUID;
    fixedColumns: boolean;
    private destroy$;
    private farrisInstances;
    difference: (first: any[], second: any[]) => any[];
    private debugSer;
    private filterRowConditions;
    constructor(ttService: TreetableService, el: ElementRef, resizeSer: ResizeService, renderer: Renderer2, utils: CommonUtils, colFormatSer: ColumnFormatService, shortcuts: TTHotkeys, cdRef: ChangeDetectorRef, ngZone: NgZone, injector: Injector);
    writeConsole(msg: any, type?: 'info' | 'log' | 'warn' | 'error'): void;
    private checkOptons;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewChecked(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    private loadDataSuccess;
    private setNewColumnsWidth;
    columnIsVisible(col: any): any;
    private columnCssName;
    private checkGroupColumns;
    private sortColumnsByFixed;
    private checkColumnOption;
    private setCellWidthCss;
    private setTableWidth;
    private allColumnsWidth;
    onPageChange($event: any): void;
    onPageSizeChange($event: any): void;
    updatePageInfo(pageInfo: {
        pageIndex?: number;
        pageSize?: number;
        total?: number;
        pageList?: number[];
    }): void;
    private initPaginationOptions;
    getNodeText(col: TreeTableColumn, rowdata: any, fast?: boolean): any;
    private initNodeStatus;
    /** 注册快捷键 */
    private registerShortcuts;
    private setFindText;
    private getCustomCls;
    getRowCls(rowNode: RowNode, field?: string): any;
    getCellCls(rowNode: RowNode, field: string): any;
    getRealColWidth(currentCol: TreeTableColumn): string | 0;
    onResized(): void;
    private setRightFixedColumnShadow;
    private setFixedColumnShadow;
    onScrollX(e: any): void;
    onScrollY(e: any): void;
    private renderData;
    onSearchValueChange($event: any): void;
    onClearSearchValue(): void;
    onCellClick(event: Event, col: any, node: any): void;
    trackByFn(index: any, rowNode: any): any;
    /**
     * 格式化数据
     */
    formatData(col: any, data: any, formatter: any): any;
    columnsChanged(): void;
    private ttc2columns;
    private reSetSize;
    private renderVirtualRowNodes;
    updateSerializedValue(nodePosY?: any): void;
    /**
     * 将树节点数据序列化为RowNode
     * @param parent 父级节点
     * @param nodes 树节点集合
     * @param level 级别
     * @param visible 是否可见
     */
    serializeNodes(parent: TreeNode, nodes: TreeNode[], level: number, visible: boolean, parentIds?: any[]): void;
    /**
     * 判断指定的节点是否被选中
     * @param node 树节点
     */
    isSelected(node: TreeNode): boolean;
    /** 判断当前节点的钩选状态 */
    isChecked(node: TreeNode): boolean;
    private unSelectedCurrentRowEmit;
    private _singleSelectNode;
    private _singleUnSelectNode;
    private __singleSelectNode;
    private __multiSelectNode;
    /**
     * 行单击事件
     */
    handleRowClick(event: SelectEventArgs): void;
    /**
     * 带有checkbox 的单选
     * @param rowNode 当前节点
     */
    private singleSelectWhenMultiSelect;
    private selectWhenChecked;
    private isInArray;
    private setSelections;
    private setCheckeds;
    private getDiffrentData;
    private cascadeCheckedNode;
    /**
     * 向下级联选中
     * @param node 当前节点
     * @param checked 选中状态
     * 返回受影响的行
     */
    propagateSelectionDown(rowNode: RowNode, checked: boolean): TreeNode[];
    /**
     * 向上级联选中
     */
    propagateSelectionUp(rowNode: RowNode, checked: boolean): TreeNode[];
    private updateNodeStatus;
    /**
     * 级联选择节点
     * @param rowNode 当前节点
     * @param checked 是否钩选
     */
    private cascadeNodes;
    /**
     * 行Checkbox 选中变化事件
     * @param event 鼠标点击事件对象
     * @param rowNode 当前树节点
     */
    toggleNodeWithCheckbox(event: Event, rowNode: RowNode, checked: boolean): any;
    /**
     * 全选
     * @param event 鼠标事件对象
     * @param checked 是否选中
     */
    toggleNodesWithCheckbox(event: Event, checked: boolean): void;
    /** 更新全选checkbox 的状态 */
    private updateAllCheckboxStatus;
    /** 更新父节点checkbox 选中状态 */
    private updateParentCheckboxStatus;
    /** 更新N个父节点复选框中的选中状态 */
    private updateParentsCheckStatus;
    /** 更新节点中checkbox的状态 */
    private updateCheckboxStatus;
    /** 判断指定节点checkbox 的状态
     * 0：全不选， 1： 全部选中， 2：有选中的也有没选中的
     */
    private isIndeterminate;
    /**
     * 返回父级节点checkbox 的状态。0：不选中， 1： 选中， 2：不确定
     * @param rowNode 父级节点；为空时返回全选checkbox 的状态
     */
    private getCheckboxStatus;
    private findIndexIn;
    /**
     * 在选中的集合中查找指定节点的索引
     * @param node 树节点
     */
    findIndexInCheckeds(node: TreeNode): number;
    /**
     * 在选中的集合中查找指定节点的索引
     * @param node 树节点
     */
    findIndexInSelection(node: TreeNode): number;
    /** 对比两个节点是否同一个节点 */
    equals(target: TreeNode, source: TreeNode): boolean;
    /**
     * 展开所有节点
     * @param rowNode 展开此节点下的所有节点；如果为空，则展开所有节点
     * @param deep 设置为true 时，当前节点下的所有子节点全部展开, 默认 false
     * @param childrenEmptyEmitExpand  当没有子节点是否触发展开事件，默认为 true
     */
    toggleExpand(treeNode?: TreeNode, deep?: boolean, childrenEmptyEmitExpand?: boolean): void;
    private toggleVisible;
    /** 展开指定节点
     * emit: 触发展开事件
     * render: 数据重新加载
     */
    expandNode(id: string, emit?: boolean, render?: boolean): void;
    /** 展开所有节点 */
    expandAll(): void;
    expandNodes(id: string): void;
    /** 展开指定节点下的所有节点 */
    expandAllNodesBy(rowNode: any): void;
    /** 折叠指定节点 */
    collapseNode(id: string): void;
    /** 折叠所有节点 */
    collapseAll(): void;
    getContainerOffset(): {
        left: number;
        top: number;
    };
    onColumnResizeBegin(event: any): void;
    onColumnResize(event: any): void;
    onColumnResizeEnd(event: any, column: any): void;
    resizeColGroup(table: any, resizeColumnIndex: any, newColumnWidth: any, nextColumnWidth?: number): void;
    onSearch(): void;
    insert(node: TreeNode, parent?: TreeNode): void;
    append(data: {
        [key: string]: any;
    }, parent?: TreeNode): void;
    private emitAppendNew;
    appendChildren(nodes: TreeNode[], parent: TreeNode, emit?: boolean): void;
    loadChildren(nodes: TreeNode[], parent: TreeNode, emit?: boolean): void;
    remove(nodeId: string): void;
    update(nodeId: string, data: {
        [key: string]: string;
    }): void;
    updateNodeProperty(nodeid: string, property: {
        [key: string]: any;
    }): void;
    private setScorllBodyHeight;
    private setWidth;
    resize(size?: {
        width: number;
        height: number;
    }): void;
    loadData(data: TreeNode[]): void;
    empty(): void;
    getCurrentAllRowNodes(): any;
    clearAll(detectChanges?: boolean): TreeTableComponent;
    detectChanges(): TreeTableComponent;
    clearCheckeds(): TreeTableComponent;
    clearSelections(): TreeTableComponent;
    /** 选中第1个可以选中的节点 */
    selectFirstNode(): void;
    private scrollToCurrentRow;
    private isElementInViewport;
    private _scrollToNode;
    scrollToCurrentNode(nodeid?: string): void;
    /** 选中指定ID 的节点,
     * detectChanges: 触发脏值检查，默认为 true
     * gotocurrent: 使用选中节点可见，默认为 true
     */
    selectNode(id: string, detectChanges?: boolean, gotocurrent?: boolean): TreeTableComponent;
    /** 取消选中 */
    unSelectNode(id: string, detectChanges?: boolean): void;
    /** 选中多行数据 */
    selectNodes(ids: string[], detectChanges?: boolean, emitNodeSelected?: boolean): TreeTableComponent;
    /** 取消选中 */
    unSelectNodes(ids?: string[], emit?: boolean): void;
    /**
     * 钩选指定的节点
     * @param updateParentCheckboxStatus: 是否更新父级节点checkbox 状态, 默认为 true
     * @param detectChanges 触发变更检测。默认为 true
     */
    checkedNode(id: string, updateParentCheckboxStatus?: boolean, detectChanges?: boolean): void;
    unCheckedNode(id: string, updateParentCheckboxStatus?: boolean): void;
    private _checkedNodes;
    /** 批量选中节点
     * @param ids: id 集合
     * @param detectChanges: boolean  默认为 true ,是否触发变更检测
     * closeCascade:  执行取消钩选时是否关闭级联功能。默认为 false
     *      设为true时，钩选将禁用级联的功能，仅处理当前节点的选中状态。执行完毕后，恢复原先的级联选项。
     */
    checkedNodes(ids: any[], detectChanges?: boolean, emit?: boolean, closeCascade?: boolean): void;
    /**
     * 取消选中的节点.
     * ids: 标识Id 数组
     * closeCascade: 执行取消钩选时是否关闭级联功能。默认为 false
     *     设为true时，钩选将禁用级联的功能，仅处理当前节点的选中状态。执行完毕后，恢复原先的级联选项。
     * emit: 是否触发取消勾选事件。默认为 true
     */
    unCheckedNodes(ids: string[], closeCascade?: boolean, emit?: boolean): void;
    unCheckedAndSelected(ids: string[]): void;
    findRowNode(id: string): RowNode;
    /** 将在 v0.2.x 废弃；请使用 findRowNode 方法 */
    findNode(id: string): RowNode;
    /**
     * 根据当前节点ID，获取顶级父节点
     * @param id 当前节点ID
     * @returns 返回顶级节点
     */
    getRoot(id: string): RowNode;
    findRowNodes(ids: string[]): RowNode[];
    checkAllNodes(args?: any): void;
    unCheckAllNodes(args?: any): void;
    private isEnableMultiSelect;
    private getNodeIconFromData;
    getTreeIcon(treeNode: TreeNode): {};
    private compare;
    private _sort;
    clientSort(): void;
    onSortColumnClick($event: any, col: any): void;
    /** 查询工具条前端字符查询 */
    findKeyWords($event: any): void;
    nextFindValue(step: any): void;
    /** 查询工具条前端字符查询 */
    closeFindPanel(): void;
    private highLightKeywords;
    private resetFindText;
    scrollToY(y: number, animations?: number): void;
    private showOrHideColumn;
    showColumn(field: string | string[]): void;
    hideColumn(field: string | string[]): void;
    showChildsLoading(parentNode: TreeNode): void;
    onChildsPageChanged($event: any): void;
    private trId2DataId;
    onKeydownEvent($event: any): void;
    onBeforeShowContextMenu: (e: any) => Observable<{
        show: boolean;
    }>;
    /** 根据传入的父级ID，获取所有子级节点 */
    getChildNodes(parentId: string): TreeNode[];
    /** 根据传入的节点ID， 获取所有父级节点 */
    getParentNodes(id: string): RowNode[];
    onFilterRowInput($event: any, col: any): void;
}
export declare class TTBodyComponent {
    tt: TreeTableComponent;
    /**
     * 列集合
     */
    columns: any[];
    /** 表体模板 */
    template: TemplateRef<any>;
    constructor(tt: TreeTableComponent);
}
/**
 * 树节点展开折叠
 */
export declare class TreeTableTogglerComponent implements OnInit, AfterViewInit, OnDestroy, DoCheck, OnChanges, AfterViewChecked {
    tt: TreeTableComponent;
    private ngzone;
    private render;
    cls: boolean;
    /**
     * 树节点
     */
    rowNode: RowNode;
    disabled: boolean;
    showLines: boolean;
    indentSpacing: number;
    treeNodeIcon: {};
    isShowTriangle: boolean;
    noChilds: boolean;
    subscriptions: Subscription[];
    readonly offsetWidth: any;
    togglerEl: ElementRef;
    constructor(tt: TreeTableComponent, ngzone: NgZone, render: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private unAllSubscriptions;
    hasChildren(): boolean;
    showTriangle(): boolean;
    reSetLines(): void;
    private _renderLines;
    private noLineStyle;
    private renderLines;
    private newLineElement;
    /**
     * 构造 ∟ or ├
     */
    private createLeafNodeLines;
    private registerClickEvent;
    onClick(event: Event): boolean;
    private updateIcon;
}
/**
 * 选中行组件
 */
export declare class TreeTableSelectRowDirective implements DoCheck, OnDestroy, OnInit, OnChanges {
    tt: TreeTableComponent;
    private el;
    private render;
    private ngZone;
    rowNode: RowNode;
    rowIndex: number;
    selectRowDisabled: boolean;
    subscription: Subscription;
    prevent: boolean;
    timer: any;
    delay: number;
    constructor(tt: TreeTableComponent, el: ElementRef, render: Renderer2, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    onclick(event: MouseEvent): void;
    isEnabled(): boolean;
    private rowClick;
    toggleClass(): void;
}
/**
 * 表头全选组件
 */
export declare class TreeTableHeaderCheckboxComponent implements OnInit {
    tt: TreeTableComponent;
    ttService: TreetableService;
    checked: boolean;
    disabled: boolean;
    checkedChange: EventEmitter<{}>;
    chkAll: ElementRef;
    constructor(tt: TreeTableComponent, ttService: TreetableService);
    ngOnInit(): void;
    handleClick(event: any): boolean;
}
/**
 * 表体checkbox 组件
 */
export declare class TreeTableCheckboxComponent implements OnInit, OnDestroy {
    tt: TreeTableComponent;
    ttService: TreetableService;
    cls1: boolean;
    checked: boolean;
    disabled: boolean;
    rowNode: RowNode;
    checkedChange: EventEmitter<{}>;
    chk: ElementRef;
    destroy$: Subject<{}>;
    constructor(tt: TreeTableComponent, ttService: TreetableService);
    ngOnDestroy(): void;
    ngOnInit(): void;
    handleClick(event: any): boolean;
}
export declare class DblClickRowDirective implements OnInit {
    tt: TreeTableComponent;
    el: ElementRef;
    ttService: TreetableService;
    selectRowDir: TreeTableSelectRowDirective;
    enableDblClick: boolean;
    dblclickNode: RowNode;
    constructor(tt: TreeTableComponent, el: ElementRef, ttService: TreetableService, selectRowDir: TreeTableSelectRowDirective);
    ngOnInit(): void;
    ondblclick(event: Event): boolean;
}
export declare class CustomRowStyleDirective implements OnInit, OnChanges {
    private injector;
    private ngZone;
    private el;
    private tt;
    utils: CommonUtils;
    private render;
    rowNode: RowNode;
    col: TreeTableColumn;
    constructor(injector: Injector, ngZone: NgZone, el: ElementRef, tt: TreeTableComponent, utils: CommonUtils, render: Renderer2);
    ngOnInit(): void;
    private setRowStyle;
    ngOnChanges(changes: SimpleChanges): void;
}
export declare class TTCustomCellStyleDirective implements OnInit, OnChanges {
    private injector;
    private ngZone;
    private el;
    private tt;
    utils: CommonUtils;
    private render;
    column: TreeTableColumn;
    rowNode: RowNode;
    rowIndex: any;
    constructor(injector: Injector, ngZone: NgZone, el: ElementRef, tt: TreeTableComponent, utils: CommonUtils, render: Renderer2);
    ngOnInit(): void;
    private setCellStyle;
    ngOnChanges(changes: SimpleChanges): void;
}
export declare class TTResizableColumnDirective implements AfterViewInit, OnDestroy, OnChanges {
    tt: TreeTableComponent;
    ngzone: NgZone;
    el: ElementRef;
    render: Renderer2;
    enableResize: boolean;
    resizer: HTMLSpanElement;
    resizerMouseDownListener: any;
    documentMouseMoveListener: any;
    documentMouseUpListener: any;
    constructor(tt: TreeTableComponent, ngzone: NgZone, el: ElementRef, render: Renderer2);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isEnable(): boolean;
    bindDocumentEvents(): void;
    unbindDocumentEvents(): void;
    onMouseDown(event: Event): void;
    onMouseEnter(): void;
    onMouseMove(event: Event): void;
    onMouseUp(event: Event): void;
    ngOnDestroy(): void;
}
