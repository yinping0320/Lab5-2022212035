/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonUtils } from '@farris/ui-common';
import { Pipe } from '@angular/core';
var CellTipsPipe = /** @class */ (function () {
    function CellTipsPipe(commonUtils) {
        this.commonUtils = commonUtils;
    }
    /**
     * @param {?} col
     * @param {...?} args
     * @return {?}
     */
    CellTipsPipe.prototype.transform = /**
     * @param {?} col
     * @param {...?} args
     * @return {?}
     */
    function (col) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (col.showTips) {
            return this.getCellTooltipContent(col, args[0]);
        }
        return '';
    };
    /**
     * @private
     * @param {?} col
     * @param {?} tn
     * @return {?}
     */
    CellTipsPipe.prototype.getCellTooltipContent = /**
     * @private
     * @param {?} col
     * @param {?} tn
     * @return {?}
     */
    function (col, tn) {
        /** @type {?} */
        var txt = this.commonUtils.getValue(col.field, tn.data);
        if (col.tipContent) {
            if (typeof col.tipContent === 'string') {
                txt = col.tipContent;
            }
            else if (typeof col.tipContent === 'function') {
                txt = col.tipContent(txt, tn.data, col);
            }
        }
        else {
            if (col.formatter) {
                if (typeof col.formatter === 'object') {
                    if (col.formatter.type === 'enum') {
                        txt = this.commonUtils.getEnumTitleFromColumnOptions(txt, col.formatter.options);
                    }
                }
            }
        }
        return txt;
    };
    CellTipsPipe.decorators = [
        { type: Pipe, args: [{ name: 'tipmsg' },] }
    ];
    /** @nocollapse */
    CellTipsPipe.ctorParameters = function () { return [
        { type: CommonUtils }
    ]; };
    return CellTipsPipe;
}());
export { CellTipsPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CellTipsPipe.prototype.commonUtils;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC10aXBzLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRyZWV0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jZWxsLXRpcHMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWhELE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBR3BEO0lBRUksc0JBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQUcsQ0FBQzs7Ozs7O0lBQ2hELGdDQUFTOzs7OztJQUFULFVBQVUsR0FBUTtRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsNkJBQWM7O1FBQzlCLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuRDtRQUNELE9BQVEsRUFBRSxDQUFDO0lBQ2YsQ0FBQzs7Ozs7OztJQUVPLDRDQUFxQjs7Ozs7O0lBQTdCLFVBQThCLEdBQW9CLEVBQUUsRUFBWTs7WUFDeEQsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQztRQUV2RCxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUU7WUFDaEIsSUFBSyxPQUFPLEdBQUcsQ0FBQyxVQUFVLEtBQUssUUFBUSxFQUFFO2dCQUNyQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQzthQUN4QjtpQkFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLFVBQVUsS0FBSyxVQUFVLEVBQUU7Z0JBQzdDLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzNDO1NBQ0o7YUFBTTtZQUNILElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTtnQkFDZixJQUFJLE9BQU8sR0FBRyxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7b0JBQ25DLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO3dCQUMvQixHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDcEY7aUJBQ0o7YUFDSjtTQUNKO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOztnQkE3QkosSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBQzs7OztnQkFMYixXQUFXOztJQW1DcEIsbUJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTdCWSxZQUFZOzs7Ozs7SUFDVCxtQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICcuL3R5cGVzL3RyZWVub2RlJztcclxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmVlVGFibGVDb2x1bW4gfSBmcm9tICcuL3R5cGVzL3RyZWV0YWJsZS1jb2x1bW4nO1xyXG5cclxuQFBpcGUoe25hbWU6ICd0aXBtc2cnfSlcclxuZXhwb3J0IGNsYXNzIENlbGxUaXBzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21tb25VdGlsczogQ29tbW9uVXRpbHMpIHt9XHJcbiAgICB0cmFuc2Zvcm0oY29sOiBhbnksIC4uLmFyZ3M6IGFueVtdKTogYW55IHtcclxuICAgICAgICBpZiAoY29sLnNob3dUaXBzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENlbGxUb29sdGlwQ29udGVudChjb2wsIGFyZ3NbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q2VsbFRvb2x0aXBDb250ZW50KGNvbDogVHJlZVRhYmxlQ29sdW1uLCB0bjogVHJlZU5vZGUpIHtcclxuICAgICAgICBsZXQgdHh0ID0gdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZShjb2wuZmllbGQsIHRuLmRhdGEpO1xyXG5cclxuICAgICAgICBpZiAoY29sLnRpcENvbnRlbnQpIHtcclxuICAgICAgICAgICAgaWYgKCB0eXBlb2YgY29sLnRpcENvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0eHQgPSBjb2wudGlwQ29udGVudDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29sLnRpcENvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHR4dCA9IGNvbC50aXBDb250ZW50KHR4dCwgdG4uZGF0YSwgY29sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb2wuZm9ybWF0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbC5mb3JtYXR0ZXIgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbC5mb3JtYXR0ZXIudHlwZSA9PT0gJ2VudW0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4dCA9IHRoaXMuY29tbW9uVXRpbHMuZ2V0RW51bVRpdGxlRnJvbUNvbHVtbk9wdGlvbnModHh0LCBjb2wuZm9ybWF0dGVyLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHh0O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==