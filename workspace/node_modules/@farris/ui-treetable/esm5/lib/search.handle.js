/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { cloneDeep } from 'lodash-es';
var SearchHandle = /** @class */ (function () {
    function SearchHandle(ttInstance) {
        this.ttInstance = ttInstance;
        this.allNodes = [];
    }
    // 刷新查询结果
    // 刷新查询结果
    /**
     * @param {?=} from
     * @return {?}
     */
    SearchHandle.prototype.research = 
    // 刷新查询结果
    /**
     * @param {?=} from
     * @return {?}
     */
    function (from) {
        if (from === void 0) { from = 'client'; }
        var _a = this.ttInstance.searchData, field = _a.field, value = _a.value;
        this.allNodes = [];
        this.search(field, value, from);
    };
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} from
     * @return {?}
     */
    SearchHandle.prototype.search = /**
     * @param {?} field
     * @param {?} value
     * @param {?=} from
     * @return {?}
     */
    function (field, value, from) {
        if (from === void 0) { from = 'client'; }
        if (!this.allNodes.length) {
            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);
        }
        switch (from) {
            case 'server':
                this.searchOnServer(field, value);
                break;
            default:
                if (value !== '' && value !== undefined && value !== null) {
                    /** @type {?} */
                    var values = this.searchOnClient(field, value, this.allNodes);
                    this.ttInstance.state.searchRowNodes = null;
                    this._updateSerializedValues(values);
                }
                else {
                    this.ttInstance.state.searched = false;
                    this.ttInstance.updateSerializedValue();
                }
                this._refreshTree();
                break;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchHandle.prototype._refreshTree = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {
            this.ttInstance.checkedNodes(this.ttInstance.checkeds.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data[_this.ttInstance.idField]; })));
            this.ttInstance['updateNodeStatus']();
            this.ttInstance.detectChanges();
        }
        else {
            if (this.ttInstance.serializedValue && this.ttInstance.serializedValue.length) {
                this.ttInstance.resize();
            }
            this.ttInstance.detectChanges();
            if (this.ttInstance.psRef) {
                this.ttInstance.psRef.directiveRef.update();
            }
        }
    };
    /**
     * @private
     * @param {?} visibleItems
     * @return {?}
     */
    SearchHandle.prototype._updateSerializedValues = /**
     * @private
     * @param {?} visibleItems
     * @return {?}
     */
    function (visibleItems) {
        var _this = this;
        /** @type {?} */
        var pids = ((/** @type {?} */ (visibleItems.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return tslib_1.__spread(n.parents, [n.id]); }))))).flat();
        /** @type {?} */
        var pidArr = Array.from(new Set(pids));
        /** @type {?} */
        var rowNodes = this.allNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return pidArr.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item == n.id; })); })).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            r.expanded = true;
            _this.ttInstance.updateNodeProperty(r.id, { expanded: true });
            return r;
        }));
        this.ttInstance.state.searched = true;
        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);
        this.ttInstance.state.searchRowNodes = this.ttInstance.serializedValue;
    };
    /**
     * @param {?} item
     * @param {?} allNodes
     * @return {?}
     */
    SearchHandle.prototype.findParent = /**
     * @param {?} item
     * @param {?} allNodes
     * @return {?}
     */
    function (item, allNodes) {
        var _this = this;
        /** @type {?} */
        var res = [];
        if (item && allNodes && allNodes.length) {
            /** @type {?} */
            var p = allNodes.find((/**
             * @param {?} t1
             * @return {?}
             */
            function (t1) { return t1.id === item.data[_this.ttInstance.idField]; }));
            res.push(p);
            if (p.parent) {
                res = res.concat(this.findParent(p.parent, allNodes));
            }
        }
        return res;
    };
    /**
     * @private
     * @param {?} item
     * @param {?} value
     * @param {?=} fields
     * @return {?}
     */
    SearchHandle.prototype.searchExpression = /**
     * @private
     * @param {?} item
     * @param {?} value
     * @param {?=} fields
     * @return {?}
     */
    function (item, value, fields) {
        var _this = this;
        if (fields === void 0) { fields = []; }
        /** @type {?} */
        var _fields = fields.length ? fields : this.ttInstance.columns.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field; }));
        /** @type {?} */
        var results = _fields.map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            /** @type {?} */
            var targetValue = _this.getValue(f, item.node.data);
            if (targetValue !== null && targetValue !== undefined) {
                if (typeof targetValue === 'number') {
                    return targetValue === parseFloat(value);
                }
                else {
                    return targetValue.toLowerCase().indexOf(value.toLowerCase()) > -1;
                }
            }
            else {
                _this.ttInstance.writeConsole("\u4E0D\u5B58\u5728\u5217 " + f);
            }
        }));
        return results.reduce((/**
         * @param {?} flag
         * @param {?} curr
         * @return {?}
         */
        function (flag, curr) {
            return flag || curr;
        }), false);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    SearchHandle.prototype.getValue = /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        if (field) {
            if (field.indexOf('.') > -1) {
                try {
                    return field.split('.').reduce((/**
                     * @param {?} r
                     * @param {?} f
                     * @return {?}
                     */
                    function (r, f) {
                        if (r) {
                            return r[f];
                        }
                        else {
                            return null;
                        }
                    }), data);
                }
                catch (_a) {
                    this.ttInstance.writeConsole("\u5B57\u6BB5 " + field + " \u4E0D\u5B58\u5728\u3002");
                }
            }
            else {
                return data[field];
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    SearchHandle.prototype.getFindTextTotal = /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    function (field, value, nodes) {
        var _this = this;
        /** @type {?} */
        var t = 0;
        /** @type {?} */
        var getCount = (/**
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            /** @type {?} */
            var c = 0;
            nodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                fields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    /** @type {?} */
                    var targetValue = '' + _this.getValue(f, n.node.data);
                    if (targetValue !== undefined) {
                        if (targetValue.indexOf(value) > -1) {
                            c++;
                        }
                    }
                }));
            }));
            return c;
        });
        /** @type {?} */
        var _fields = [field];
        if (field === '*') {
            _fields = this.ttInstance.columns.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field; }));
        }
        else if (field.indexOf(',') > -1) {
            _fields = field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.trim(); }));
        }
        t = getCount(_fields);
        return t;
    };
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    SearchHandle.prototype.searchOnClient = /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    function (field, value, nodes) {
        var _this = this;
        /** @type {?} */
        var resultNodes = [];
        if (value === undefined || value === null) {
            return [];
        }
        if (field === '*') {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.searchExpression(n, value); }));
        }
        else if (field.indexOf(',') > -1) {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.searchExpression(n, value, field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.trim(); }))); }));
        }
        else {
            value = value.toLowerCase();
            if (field.indexOf('.') === -1) {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1; }));
            }
            else {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return ('' + _this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1; }));
            }
        }
        return resultNodes;
    };
    /**
     * @param {?} conditons
     * @return {?}
     */
    SearchHandle.prototype.searchWithConditions = /**
     * @param {?} conditons
     * @return {?}
     */
    function (conditons) {
        var _this = this;
        if (!this.allNodes.length) {
            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);
        }
        /** @type {?} */
        var fields = Object.keys(conditons);
        if (!fields.length) {
            this.ttInstance.state.searched = false;
            this.ttInstance.updateSerializedValue();
        }
        else {
            /** @type {?} */
            var nodes = this.allNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                /** @type {?} */
                var results = fields.map((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) {
                    /** @type {?} */
                    var value = conditons[field];
                    return _this.searchExpression(n, value, [field]);
                }));
                // return results.reduce((flag, curr) => {
                //     return flag && curr;
                // }, false);
                return results.every((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
            }));
            this.ttInstance.state.searchRowNodes = null;
            this._updateSerializedValues(nodes);
        }
        this._refreshTree();
    };
    /**
     * @param {?} rowNodes
     * @param {?} allNodes
     * @return {?}
     */
    SearchHandle.prototype.findParents = /**
     * @param {?} rowNodes
     * @param {?} allNodes
     * @return {?}
     */
    function (rowNodes, allNodes) {
        var _this = this;
        /** @type {?} */
        var res = [];
        rowNodes.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            res = res.concat(_this.findParent(item.node, allNodes));
        }));
        return Array.from(new Set(res));
    };
    /**
     * @private
     * @param {?} parentNode
     * @param {?} visibleItems
     * @return {?}
     */
    SearchHandle.prototype.resetTreeData = /**
     * @private
     * @param {?} parentNode
     * @param {?} visibleItems
     * @return {?}
     */
    function (parentNode, visibleItems) {
        var _this = this;
        /** @type {?} */
        var res = [];
        /** @type {?} */
        var arr = [];
        if (parentNode === null) {
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            function (t2) { return t2.parent === parentNode; }));
        }
        else {
            parentNode.node.expanded = true;
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            function (t2) { return t2.parent && t2.parent.data[_this.ttInstance.idField] === parentNode.id; }));
            if (!arr.length) {
                parentNode.node.children = [];
            }
            else {
                parentNode.node.children = arr.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn.node; }));
            }
        }
        arr.forEach((/**
         * @param {?} a
         * @return {?}
         */
        function (a) {
            a.visible = true;
            res.push(a);
            res = res.concat(_this.resetTreeData(a, visibleItems));
        }));
        return cloneDeep(res);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    SearchHandle.prototype.searchOnServer = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
    };
    return SearchHandle;
}());
export { SearchHandle };
if (false) {
    /** @type {?} */
    SearchHandle.prototype.allNodes;
    /**
     * @type {?}
     * @private
     */
    SearchHandle.prototype.ttInstance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmhhbmRsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdHJlZXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3NlYXJjaC5oYW5kbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFXQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDO0lBRUksc0JBQW9CLFVBQThCO1FBQTlCLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBRGxELGFBQVEsR0FBRyxFQUFFLENBQUM7SUFFZCxDQUFDO0lBRUQsU0FBUzs7Ozs7O0lBQ1QsK0JBQVE7Ozs7OztJQUFSLFVBQVMsSUFBa0M7UUFBbEMscUJBQUEsRUFBQSxlQUFrQztRQUNqQyxJQUFBLCtCQUE2QyxFQUEzQyxnQkFBSyxFQUFFLGdCQUFvQztRQUNuRCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Ozs7OztJQUlELDZCQUFNOzs7Ozs7SUFBTixVQUFPLEtBQWEsRUFBRSxLQUFhLEVBQUUsSUFBa0M7UUFBbEMscUJBQUEsRUFBQSxlQUFrQztRQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDN0Q7UUFDRCxRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssUUFBUTtnQkFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDbEMsTUFBTTtZQUNWO2dCQUNJLElBQUksS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7O3dCQUNqRCxNQUFNLEdBQUcsSUFB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Q0FBQztJQUVMLG1CQUFDO0FBQUQsQ0FBQyxBQXZPRCxJQXVPQzs7OztJQXRPRyxnQ0FBYzs7Ozs7SUFDRixrQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG4vKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0obHVjYXMgaHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE4LTEyLTE4IDEzOjM4OjUxXHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTExLTE1IDE1OjEzOjU2XHJcbiAqIEBDb21wYW55OiBJbnNwdXJcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgVHJlZVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi90cmVldGFibGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUm93Tm9kZSwgVHJlZU5vZGUgfSBmcm9tICcuL3R5cGVzL3RyZWVub2RlJztcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuZXhwb3J0IGNsYXNzIFNlYXJjaEhhbmRsZSB7XHJcbiAgICBhbGxOb2RlcyA9IFtdO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0dEluc3RhbmNlOiBUcmVlVGFibGVDb21wb25lbnQpIHtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliLfmlrDmn6Xor6Lnu5PmnpxcclxuICAgIHJlc2VhcmNoKGZyb206ICdjbGllbnQnfCdzZXJ2ZXInID0gJ2NsaWVudCcgKSB7XHJcbiAgICAgICAgY29uc3QgeyBmaWVsZCwgdmFsdWUgfSA9IHRoaXMudHRJbnN0YW5jZS5zZWFyY2hEYXRhO1xyXG4gICAgICAgIHRoaXMuYWxsTm9kZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnNlYXJjaChmaWVsZCwgdmFsdWUsIGZyb20pO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgc2VhcmNoKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGZyb206ICdjbGllbnQnfCdzZXJ2ZXInID0gJ2NsaWVudCcpOiBhbnkge1xyXG4gICAgICAgIGlmICghdGhpcy5hbGxOb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGxOb2RlcyA9IGNsb25lRGVlcCh0aGlzLnR0SW5zdGFuY2Uuc3RhdGUucm93Tm9kZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKGZyb20pIHtcclxuICAgICAgICAgICAgY2FzZSAnc2VydmVyJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoT25TZXJ2ZXIoZmllbGQsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAnJyAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5zZWFyY2hPbkNsaWVudChmaWVsZCwgdmFsdWUsIHRoaXMuYWxsTm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS5zdGF0ZS5zZWFyY2hSb3dOb2RlcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2VyaWFsaXplZFZhbHVlcyh2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2Uuc3RhdGUuc2VhcmNoZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2UudXBkYXRlU2VyaWFsaXplZFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVmcmVzaFRyZWUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVmcmVzaFRyZWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHRJbnN0YW5jZS5jaGVja2VkcyAmJiB0aGlzLnR0SW5zdGFuY2UuY2hlY2tlZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS5jaGVja2VkTm9kZXModGhpcy50dEluc3RhbmNlLmNoZWNrZWRzLm1hcChuID0+IG4uZGF0YVt0aGlzLnR0SW5zdGFuY2UuaWRGaWVsZF0pKTtcclxuICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlWyd1cGRhdGVOb2RlU3RhdHVzJ10oKTtcclxuICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50dEluc3RhbmNlLnNlcmlhbGl6ZWRWYWx1ZSAmJiB0aGlzLnR0SW5zdGFuY2Uuc2VyaWFsaXplZFZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLnJlc2l6ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnR0SW5zdGFuY2UucHNSZWYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS5wc1JlZi5kaXJlY3RpdmVSZWYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlU2VyaWFsaXplZFZhbHVlcyh2aXNpYmxlSXRlbXM6IFJvd05vZGVbXSkge1xyXG4gICAgICAgIGNvbnN0IHBpZHMgPSAodmlzaWJsZUl0ZW1zLm1hcChuID0+IFsuLi5uLnBhcmVudHMsIG4uaWRdKSBhcyBhbnkpLmZsYXQoKTtcclxuICAgICAgICBjb25zdCBwaWRBcnIgPSBBcnJheS5mcm9tKG5ldyBTZXQocGlkcykpO1xyXG5cclxuICAgICAgICBjb25zdCByb3dOb2RlcyA9ICB0aGlzLmFsbE5vZGVzLmZpbHRlcihuID0+IHBpZEFyci5zb21lKGl0ZW09Pml0ZW09PW4uaWQpKS5tYXAociA9PiB7XHJcbiAgICAgICAgICAgIHIuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2UudXBkYXRlTm9kZVByb3BlcnR5KHIuaWQsIHtleHBhbmRlZDogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMudHRJbnN0YW5jZS5zdGF0ZS5zZWFyY2hlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50dEluc3RhbmNlLnNlcmlhbGl6ZWRWYWx1ZSA9IHRoaXMucmVzZXRUcmVlRGF0YShudWxsLCByb3dOb2Rlcyk7XHJcbiAgICAgICAgdGhpcy50dEluc3RhbmNlLnN0YXRlLnNlYXJjaFJvd05vZGVzID0gdGhpcy50dEluc3RhbmNlLnNlcmlhbGl6ZWRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kUGFyZW50KGl0ZW06IFRyZWVOb2RlLCBhbGxOb2RlczogYW55W10pIHtcclxuICAgICAgICBsZXQgcmVzID0gW107XHJcbiAgICAgICAgaWYgKGl0ZW0gJiYgYWxsTm9kZXMgJiYgYWxsTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBhbGxOb2Rlcy5maW5kKHQxID0+IHQxLmlkID09PSBpdGVtLmRhdGFbdGhpcy50dEluc3RhbmNlLmlkRmllbGRdKTtcclxuICAgICAgICAgICAgcmVzLnB1c2gocCk7XHJcbiAgICAgICAgICAgIGlmIChwLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmVzID0gcmVzLmNvbmNhdCh0aGlzLmZpbmRQYXJlbnQocC5wYXJlbnQsIGFsbE5vZGVzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNlYXJjaEV4cHJlc3Npb24oaXRlbTogUm93Tm9kZSwgdmFsdWU6IHN0cmluZywgZmllbGRzOiBzdHJpbmdbXSA9IFtdKSB7XHJcbiAgICAgICAgY29uc3QgX2ZpZWxkcyA9IGZpZWxkcy5sZW5ndGggPyBmaWVsZHMgOiB0aGlzLnR0SW5zdGFuY2UuY29sdW1ucy5tYXAoYyA9PiBjLmZpZWxkKTtcclxuICAgICAgICBjb25zdCByZXN1bHRzID0gX2ZpZWxkcy5tYXAoZiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFZhbHVlID0gdGhpcy5nZXRWYWx1ZShmLCBpdGVtLm5vZGUuZGF0YSk7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRWYWx1ZSAhPT0gbnVsbCAmJiB0YXJnZXRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldFZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRWYWx1ZSA9PT0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRWYWx1ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodmFsdWUudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS53cml0ZUNvbnNvbGUoYOS4jeWtmOWcqOWIlyAke2Z9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMucmVkdWNlKChmbGFnLCBjdXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbGFnIHx8IGN1cnI7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VmFsdWUoZmllbGQsIGRhdGEpIHtcclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLmluZGV4T2YoJy4nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLnNwbGl0KCcuJykucmVkdWNlKCAociwgZikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByW2ZdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGRhdGEgKTtcclxuICAgICAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2Uud3JpdGVDb25zb2xlKGDlrZfmrrUgJHtmaWVsZH0g5LiN5a2Y5Zyo44CCYClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFbZmllbGRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEZpbmRUZXh0VG90YWwoZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZywgbm9kZXM6IFJvd05vZGVbXSkge1xyXG4gICAgICAgIGxldCB0ID0gMDtcclxuICAgICAgICBjb25zdCBnZXRDb3VudCA9IChmaWVsZHMpOiBhbnkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYyA9IDA7XHJcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9ICcnICsgICB0aGlzLmdldFZhbHVlKGYsIG4ubm9kZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VmFsdWUuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBfZmllbGRzID0gW2ZpZWxkXTtcclxuICAgICAgICBpZiAoZmllbGQgPT09ICcqJykge1xyXG4gICAgICAgICAgICBfZmllbGRzID0gdGhpcy50dEluc3RhbmNlLmNvbHVtbnMubWFwKGMgPT4gYy5maWVsZCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQuaW5kZXhPZignLCcpID4gLTEpIHtcclxuICAgICAgICAgICAgX2ZpZWxkcyA9IGZpZWxkLnNwbGl0KCcsJykubWFwKGYgPT4gZi50cmltKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdCA9IGdldENvdW50KF9maWVsZHMpO1xyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG5cclxuICAgIHNlYXJjaE9uQ2xpZW50KGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG5vZGVzOiBSb3dOb2RlW10pIHtcclxuICAgICAgICBsZXQgcmVzdWx0Tm9kZXM6IFJvd05vZGVbXSA9IFtdO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZpZWxkID09PSAnKicpIHtcclxuICAgICAgICAgICAgcmVzdWx0Tm9kZXMgPSBub2Rlcy5maWx0ZXIobiA9PiB0aGlzLnNlYXJjaEV4cHJlc3Npb24obiwgdmFsdWUpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLmluZGV4T2YoJywnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdE5vZGVzID0gbm9kZXMuZmlsdGVyKG4gPT4gdGhpcy5zZWFyY2hFeHByZXNzaW9uKG4sIHZhbHVlLCBmaWVsZC5zcGxpdCgnLCcpLm1hcChmID0+IGYudHJpbSgpKSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdE5vZGVzID0gbm9kZXMuZmlsdGVyKG4gPT4gKCcnICsgbi5ub2RlLmRhdGFbZmllbGRdKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodmFsdWUpID4gLTEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Tm9kZXMgPSBub2Rlcy5maWx0ZXIobiA9PiAoJycgKyB0aGlzLmdldFZhbHVlKGZpZWxkLCBuLm5vZGUuZGF0YSkpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWx1ZSkgPiAtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHROb2RlcztcclxuICAgIH1cclxuXHJcbiAgICBzZWFyY2hXaXRoQ29uZGl0aW9ucyhjb25kaXRvbnM6IHtba2V5OiBzdHJpbmddOiBhbnl9KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbE5vZGVzID0gY2xvbmVEZWVwKHRoaXMudHRJbnN0YW5jZS5zdGF0ZS5yb3dOb2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IE9iamVjdC5rZXlzKGNvbmRpdG9ucyk7XHJcbiAgICAgICAgaWYgKCFmaWVsZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS5zdGF0ZS5zZWFyY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2UudXBkYXRlU2VyaWFsaXplZFZhbHVlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLmFsbE5vZGVzLmZpbHRlcihuID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBmaWVsZHMubWFwKGZpZWxkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbmRpdG9uc1tmaWVsZF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRXhwcmVzc2lvbihuLCB2YWx1ZSwgW2ZpZWxkXSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiByZXN1bHRzLnJlZHVjZSgoZmxhZywgY3VycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiBmbGFnICYmIGN1cnI7XHJcbiAgICAgICAgICAgICAgICAvLyB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cy5ldmVyeShuID0+IG4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLnN0YXRlLnNlYXJjaFJvd05vZGVzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2VyaWFsaXplZFZhbHVlcyhub2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3JlZnJlc2hUcmVlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZmluZFBhcmVudHMocm93Tm9kZXMsIGFsbE5vZGVzKSB7XHJcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xyXG4gICAgICAgIHJvd05vZGVzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQodGhpcy5maW5kUGFyZW50KGl0ZW0ubm9kZSwgYWxsTm9kZXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChyZXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlc2V0VHJlZURhdGEocGFyZW50Tm9kZTogUm93Tm9kZSwgdmlzaWJsZUl0ZW1zOiBSb3dOb2RlW10pIHtcclxuICAgICAgICBsZXQgcmVzID0gW107XHJcbiAgICAgICAgbGV0IGFyciA9IFtdO1xyXG4gICAgICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFyciA9IHZpc2libGVJdGVtcy5maWx0ZXIodDIgPT4gdDIucGFyZW50ID09PSBwYXJlbnROb2RlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwYXJlbnROb2RlLm5vZGUuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBhcnIgPSB2aXNpYmxlSXRlbXMuZmlsdGVyKHQyID0+IHQyLnBhcmVudCAmJiB0Mi5wYXJlbnQuZGF0YVt0aGlzLnR0SW5zdGFuY2UuaWRGaWVsZF0gPT09IHBhcmVudE5vZGUuaWQpO1xyXG4gICAgICAgICAgICBpZiAoIWFyci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUubm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5ub2RlLmNoaWxkcmVuID0gYXJyLm1hcCggdG4gPT4gdG4ubm9kZSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFyci5mb3JFYWNoKCBhID0+IHtcclxuICAgICAgICAgICAgYS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmVzLnB1c2goYSk7XHJcbiAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQodGhpcy5yZXNldFRyZWVEYXRhKGEsIHZpc2libGVJdGVtcykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjbG9uZURlZXAocmVzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNlYXJjaE9uU2VydmVyKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==