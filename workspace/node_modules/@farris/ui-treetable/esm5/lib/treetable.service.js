/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var TreetableService = /** @class */ (function () {
    function TreetableService() {
        this.selectionSource = new Subject();
        this.dblClickSource = new Subject();
        this.changeCheckboxStatus = new Subject();
        this.removeNode = new Subject();
        this.insertNode = new Subject();
        this.updateNode = new Subject();
        this.selectionSource$ = this.selectionSource.asObservable();
        this.dblClickSource$ = this.dblClickSource.asObservable();
        this.changeCheckboxStatus$ = this.changeCheckboxStatus.asObservable();
        this.insertNode$ = this.insertNode.asObservable();
        this.removeNode$ = this.removeNode.asObservable();
        this.updateNode$ = this.updateNode.asObservable();
    }
    /**
     * @param {?=} selected
     * @return {?}
     */
    TreetableService.prototype.onSelectionChange = /**
     * @param {?=} selected
     * @return {?}
     */
    function (selected) {
        this.selectionSource.next(selected);
    };
    /**
     * @param {?} rowNode
     * @return {?}
     */
    TreetableService.prototype.onDblClick = /**
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        this.dblClickSource.next(rowNode);
    };
    /**
     * @param {?} rowNode
     * @return {?}
     */
    TreetableService.prototype.onChangeCheckboxStatus = /**
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        this.changeCheckboxStatus.next(rowNode);
    };
    /**
     * @param {?} treeNode
     * @param {?=} parent
     * @return {?}
     */
    TreetableService.prototype.onInsert = /**
     * @param {?} treeNode
     * @param {?=} parent
     * @return {?}
     */
    function (treeNode, parent) {
        this.insertNode.next(treeNode);
    };
    /**
     * @param {?} rowNode
     * @return {?}
     */
    TreetableService.prototype.onRemove = /**
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        this.removeNode.next(rowNode);
    };
    /**
     * @param {?} rowNode
     * @return {?}
     */
    TreetableService.prototype.onUpdate = /**
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        this.updateNode.next(rowNode);
    };
    /**
     * @param {?} col
     * @param {?} tt
     * @return {?}
     */
    TreetableService.prototype.columnIsVisible = /**
     * @param {?} col
     * @param {?} tt
     * @return {?}
     */
    function (col, tt) {
        if (col.visible === undefined) {
            return true;
        }
        if (typeof col.visible === 'function') {
            return col.visible(tt);
        }
        return col.visible;
    };
    /**
     * @param {?} columns
     * @param {?} tt
     * @return {?}
     */
    TreetableService.prototype.checkColumnsForGroupHeader = /**
     * @param {?} columns
     * @param {?} tt
     * @return {?}
     */
    function (columns, tt) {
        /** @type {?} */
        var _columns = [];
        if (columns && columns.length) {
            _columns = this.getDataColumns(columns);
        }
        return {
            columns: _columns
        };
    };
    /**
     * @private
     * @param {?} cols
     * @param {?} length
     * @return {?}
     */
    TreetableService.prototype.getDataFields = /**
     * @private
     * @param {?} cols
     * @param {?} length
     * @return {?}
     */
    function (cols, length) {
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var j = 0;
        cols.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var colspan = n.colspan || 1;
            if (i + colspan <= length) {
                i += colspan;
                j++;
            }
        }));
        return cols.splice(0, j);
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    TreetableService.prototype.getDataColumns = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        var _this = this;
        if (!cols || !cols.length) {
            return [];
        }
        /** @type {?} */
        var fields = [];
        var _loop_1 = function (i) {
            /** @type {?} */
            var _cols = cols[i];
            if (cols[i] && !cols[i].length) {
                _cols = tslib_1.__spread(fields);
                fields = [];
            }
            _cols.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (!n.field && n.colspan && n.colspan > 1) {
                    if (n['halign']) {
                        n.hAlign = n['halign'];
                    }
                    _this.getDataFields(cols[i + 1], n.colspan).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        if (!fields.includes((/**
                         * @param {?} f
                         * @return {?}
                         */
                        function (f) { return f.field === d.field; }))) {
                            fields.push(d);
                        }
                    }));
                }
                else {
                    if (!fields.includes((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f.field === n.field; }))) {
                        fields.push(n);
                    }
                }
            }));
        };
        for (var i = 0; i < cols.length; i++) {
            _loop_1(i);
        }
        return fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.colspan || n.colspan === 1; }));
    };
    TreetableService.decorators = [
        { type: Injectable }
    ];
    return TreetableService;
}());
export { TreetableService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.selectionSource;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.dblClickSource;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.changeCheckboxStatus;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.removeNode;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.insertNode;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.updateNode;
    /** @type {?} */
    TreetableService.prototype.selectionSource$;
    /** @type {?} */
    TreetableService.prototype.dblClickSource$;
    /** @type {?} */
    TreetableService.prototype.changeCheckboxStatus$;
    /** @type {?} */
    TreetableService.prototype.insertNode$;
    /** @type {?} */
    TreetableService.prototype.removeNode$;
    /** @type {?} */
    TreetableService.prototype.updateNode$;
}
//# sourceMappingURL=data:application/json;base64,