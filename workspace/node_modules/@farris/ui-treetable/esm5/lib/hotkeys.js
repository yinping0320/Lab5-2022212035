/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
/**
 * @record
 */
function HotkeyOptions() { }
if (false) {
    /** @type {?} */
    HotkeyOptions.prototype.element;
    /** @type {?} */
    HotkeyOptions.prototype.description;
    /** @type {?} */
    HotkeyOptions.prototype.keys;
}
var TTHotkeys = /** @class */ (function () {
    function TTHotkeys(eventManager) {
        this.eventManager = eventManager;
        this.hotkeys = new Map();
        this.defaults = {
            element: document
        };
    }
    /**
     * @param {?} options
     * @return {?}
     */
    TTHotkeys.prototype.addShortcut = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        /** @type {?} */
        var merged = tslib_1.__assign({}, this.defaults, options);
        if (merged.keys.indexOf('ctrl') > -1) {
            merged.keys = merged.keys.replace('ctrl', 'control');
        }
        /** @type {?} */
        var event = "keydown." + merged.keys;
        if (merged.description) {
            this.hotkeys.set(merged.keys, merged.description);
        }
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var handler = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                observer.next(e);
            });
            /** @type {?} */
            var dispose = _this.eventManager.addEventListener(merged.element, event, handler);
            return (/**
             * @return {?}
             */
            function () {
                dispose();
                _this.hotkeys.delete(merged.keys);
            });
        }));
    };
    TTHotkeys.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TTHotkeys.ctorParameters = function () { return [
        { type: EventManager }
    ]; };
    /** @nocollapse */ TTHotkeys.ngInjectableDef = i0.defineInjectable({ factory: function TTHotkeys_Factory() { return new TTHotkeys(i0.inject(i1.EventManager)); }, token: TTHotkeys, providedIn: "root" });
    return TTHotkeys;
}());
export { TTHotkeys };
if (false) {
    /** @type {?} */
    TTHotkeys.prototype.hotkeys;
    /** @type {?} */
    TTHotkeys.prototype.defaults;
    /**
     * @type {?}
     * @private
     */
    TTHotkeys.prototype.eventManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90a2V5cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdHJlZXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2hvdGtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFFbEMsNEJBSUM7OztJQUhHLGdDQUFhOztJQUNiLG9DQUFnQzs7SUFDaEMsNkJBQWE7O0FBR2pCO0lBU0ksbUJBQW9CLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBTDlDLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLGFBQVEsR0FBMkI7WUFDL0IsT0FBTyxFQUFFLFFBQVE7U0FDcEIsQ0FBQztJQUdGLENBQUM7Ozs7O0lBRUQsK0JBQVc7Ozs7SUFBWCxVQUFZLE9BQStCO1FBQTNDLGlCQXdCQzs7WUF2QlMsTUFBTSx3QkFBUSxJQUFJLENBQUMsUUFBUSxFQUFLLE9BQU8sQ0FBRTtRQUMvQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3hEOztZQUNLLEtBQUssR0FBRyxhQUFXLE1BQU0sQ0FBQyxJQUFNO1FBRXRDLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyRDtRQUVELE9BQU8sSUFBSSxVQUFVOzs7O1FBQUMsVUFBQSxRQUFROztnQkFDcEIsT0FBTzs7OztZQUFHLFVBQUMsQ0FBQztnQkFDZCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ25CLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsQ0FBQyxDQUFBOztnQkFFSyxPQUFPLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUM7WUFFbEY7OztZQUFPO2dCQUNILE9BQU8sRUFBRSxDQUFDO2dCQUNWLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxDQUFDLEVBQUM7UUFDTixDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7O2dCQXBDSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQVhRLFlBQVk7OztvQkFEckI7Q0FnREMsQUF0Q0QsSUFzQ0M7U0FuQ1ksU0FBUzs7O0lBQ2xCLDRCQUFvQjs7SUFDcEIsNkJBRUU7Ozs7O0lBRVUsaUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbnRlcmZhY2UgSG90a2V5T3B0aW9ucyB7XHJcbiAgICBlbGVtZW50OiBhbnk7XHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAga2V5czogc3RyaW5nO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRUSG90a2V5cyB7XHJcbiAgICBob3RrZXlzID0gbmV3IE1hcCgpO1xyXG4gICAgZGVmYXVsdHM6IFBhcnRpYWw8SG90a2V5T3B0aW9ucz4gPSB7XHJcbiAgICAgICAgZWxlbWVudDogZG9jdW1lbnRcclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikge1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFNob3J0Y3V0KG9wdGlvbnM6IFBhcnRpYWw8SG90a2V5T3B0aW9ucz4pIHtcclxuICAgICAgICBjb25zdCBtZXJnZWQgPSB7IC4uLnRoaXMuZGVmYXVsdHMsIC4uLm9wdGlvbnMgfTtcclxuICAgICAgICBpZiAobWVyZ2VkLmtleXMuaW5kZXhPZignY3RybCcpID4gLTEpIHtcclxuICAgICAgICAgICAgbWVyZ2VkLmtleXMgPSBtZXJnZWQua2V5cy5yZXBsYWNlKCdjdHJsJywgJ2NvbnRyb2wnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSBga2V5ZG93bi4ke21lcmdlZC5rZXlzfWA7XHJcblxyXG4gICAgICAgIGlmIChtZXJnZWQuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5ob3RrZXlzLnNldChtZXJnZWQua2V5cywgbWVyZ2VkLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChlKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSB0aGlzLmV2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKG1lcmdlZC5lbGVtZW50LCBldmVudCwgaGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3RrZXlzLmRlbGV0ZShtZXJnZWQua2V5cyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==