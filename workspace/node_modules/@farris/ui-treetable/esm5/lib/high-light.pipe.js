/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe, ElementRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var HighlightPipe = /** @class */ (function () {
    function HighlightPipe(sanitizer, el) {
        this.sanitizer = sanitizer;
        this.el = el;
    }
    /**
     * @param {?} text
     * @param {?} keyword
     * @param {?=} field
     * @param {?=} findField
     * @return {?}
     */
    HighlightPipe.prototype.transform = /**
     * @param {?} text
     * @param {?} keyword
     * @param {?=} field
     * @param {?=} findField
     * @return {?}
     */
    function (text, keyword, field, findField) {
        if (field === void 0) { field = ''; }
        if (findField === void 0) { findField = ''; }
        /** @type {?} */
        var needSearch = true;
        if (field && findField) {
            if (findField.indexOf(',') === -1) {
                needSearch = field === findField;
            }
            else {
                needSearch = findField.split(',').some((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n === field; }));
            }
        }
        if (!needSearch) {
            return text;
        }
        if (keyword && text) {
            /** @type {?} */
            var pattern = keyword.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
            pattern = pattern.split(' ').filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                return t.length > 0;
            })).join('|');
            /** @type {?} */
            var regex = new RegExp(pattern, 'gi');
            return this.sanitizer.bypassSecurityTrustHtml(
            // text.replace(regex, (match) => `<span class="search-highlight">${match}</span>`)
            this.replaceContent(text, regex, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) { return "<span class=\"search-highlight\">" + match + "</span>"; })));
        }
        else {
            return text;
        }
    };
    /**
     * @param {?} html
     * @param {?} context
     * @return {?}
     */
    HighlightPipe.prototype.parseHTML = /**
     * @param {?} html
     * @param {?} context
     * @return {?}
     */
    function (html, context) {
        /** @type {?} */
        var t = (context || document).createElement('template');
        t.innerHTML = html;
        return t.content.cloneNode(true);
    };
    /**
     * @private
     * @param {?} strMatch1
     * @param {?} regex
     * @param {?} match
     * @return {?}
     */
    HighlightPipe.prototype.replaceContent = /**
     * @private
     * @param {?} strMatch1
     * @param {?} regex
     * @param {?} match
     * @return {?}
     */
    function (strMatch1, regex, match) {
        var e_1, _a;
        /** @type {?} */
        var matchReg1 = />.*?\</gi;
        // 先查出><之间的内容
        /** @type {?} */
        var strs = strMatch1.match(matchReg1);
        if (strs && strs.length) {
            try {
                for (var strs_1 = tslib_1.__values(strs), strs_1_1 = strs_1.next(); !strs_1_1.done; strs_1_1 = strs_1.next()) {
                    var aa = strs_1_1.value;
                    /** @type {?} */
                    var rep_old = strs[aa];
                    // 拿到原始符合字符串
                    /** @type {?} */
                    var rep_new = strs[aa].replace(regex, match);
                    // 替换成目的字符串
                    /** @type {?} */
                    var re2 = new RegExp(rep_old, 'g');
                    strMatch1 = strMatch1.replace(re2, rep_new); // 将符合的原始字符串替换成新字符串
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (strs_1_1 && !strs_1_1.done && (_a = strs_1.return)) _a.call(strs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return strMatch1;
        }
        else {
            return strMatch1.replace(regex, match);
        }
    };
    HighlightPipe.decorators = [
        { type: Pipe, args: [{ name: 'highlight' },] }
    ];
    /** @nocollapse */
    HighlightPipe.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: ElementRef }
    ]; };
    return HighlightPipe;
}());
export { HighlightPipe };
if (false) {
    /** @type {?} */
    HighlightPipe.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    HighlightPipe.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaC1saWdodC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS10cmVldGFibGUvIiwic291cmNlcyI6WyJsaWIvaGlnaC1saWdodC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFpQixJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQVksTUFBTSwyQkFBMkIsQ0FBQztBQUVuRTtJQUVJLHVCQUFtQixTQUF1QixFQUFVLEVBQWM7UUFBL0MsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7SUFDbEUsQ0FBQzs7Ozs7Ozs7SUFDRCxpQ0FBUzs7Ozs7OztJQUFULFVBQVUsSUFBWSxFQUFFLE9BQU8sRUFBRSxLQUFVLEVBQUUsU0FBYztRQUExQixzQkFBQSxFQUFBLFVBQVU7UUFBRSwwQkFBQSxFQUFBLGNBQWM7O1lBQ25ELFVBQVUsR0FBRyxJQUFJO1FBQ3JCLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtZQUNwQixJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQy9CLFVBQVUsR0FBRyxLQUFLLEtBQUssU0FBUyxDQUFDO2FBQ3BDO2lCQUFNO2dCQUNILFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssS0FBSyxFQUFYLENBQVcsRUFBQyxDQUFDO2FBQzVEO1NBQ0o7UUFFRCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELElBQUksT0FBTyxJQUFJLElBQUksRUFBRTs7Z0JBQ2IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMscUNBQXFDLEVBQUUsTUFBTSxDQUFDO1lBQzVFLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFDLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDeEIsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztnQkFDUCxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztZQUN2QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCO1lBQ3pDLG1GQUFtRjtZQUNuRixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxLQUFLOzs7O1lBQUUsVUFBQyxLQUFLLElBQUssT0FBQSxzQ0FBa0MsS0FBSyxZQUFTLEVBQWhELENBQWdELEVBQUMsQ0FDaEcsQ0FBQztTQUVMO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQztTQUNmO0lBQ0wsQ0FBQzs7Ozs7O0lBRUQsaUNBQVM7Ozs7O0lBQVQsVUFBVSxJQUFJLEVBQUUsT0FBTzs7WUFDYixDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztRQUN6RCxDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUNuQixPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7O0lBRU8sc0NBQWM7Ozs7Ozs7SUFBdEIsVUFBdUIsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLOzs7WUFDcEMsU0FBUyxHQUFHLFVBQVU7OztZQUN0QixJQUFJLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDdkMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTs7Z0JBQ3JCLEtBQWlCLElBQUEsU0FBQSxpQkFBQSxJQUFJLENBQUEsMEJBQUEsNENBQUU7b0JBQWxCLElBQU0sRUFBRSxpQkFBQTs7d0JBQ0gsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7Ozt3QkFDbEIsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQzs7O3dCQUN4QyxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztvQkFDcEMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsbUJBQW1CO2lCQUNuRTs7Ozs7Ozs7O1lBQ0QsT0FBTyxTQUFTLENBQUM7U0FDcEI7YUFBTTtZQUNILE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDMUM7SUFDTCxDQUFDOztnQkF0REosSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTs7OztnQkFGbEIsWUFBWTtnQkFEUyxVQUFVOztJQTBEeEMsb0JBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXREWSxhQUFhOzs7SUFDVixrQ0FBOEI7Ozs7O0lBQUUsMkJBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICdoaWdobGlnaHQnIH0pXHJcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHtcclxuICAgIH1cclxuICAgIHRyYW5zZm9ybSh0ZXh0OiBzdHJpbmcsIGtleXdvcmQsIGZpZWxkID0gJycsIGZpbmRGaWVsZCA9ICcnKTogU2FmZUh0bWwge1xyXG4gICAgICAgIGxldCBuZWVkU2VhcmNoID0gdHJ1ZTtcclxuICAgICAgICBpZiAoZmllbGQgJiYgZmluZEZpZWxkKSB7XHJcbiAgICAgICAgICAgIGlmIChmaW5kRmllbGQuaW5kZXhPZignLCcpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbmVlZFNlYXJjaCA9IGZpZWxkID09PSBmaW5kRmllbGQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZWVkU2VhcmNoID0gZmluZEZpZWxkLnNwbGl0KCcsJykuc29tZShuID0+IG4gPT09IGZpZWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFuZWVkU2VhcmNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGtleXdvcmQgJiYgdGV4dCkge1xyXG4gICAgICAgICAgICBsZXQgcGF0dGVybiA9IGtleXdvcmQucmVwbGFjZSgvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csICdcXFxcJCYnKTtcclxuICAgICAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc3BsaXQoJyAnKS5maWx0ZXIoKHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0Lmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIH0pLmpvaW4oJ3wnKTtcclxuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm4sICdnaScpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoXHJcbiAgICAgICAgICAgICAgICAvLyB0ZXh0LnJlcGxhY2UocmVnZXgsIChtYXRjaCkgPT4gYDxzcGFuIGNsYXNzPVwic2VhcmNoLWhpZ2hsaWdodFwiPiR7bWF0Y2h9PC9zcGFuPmApXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VDb250ZW50KHRleHQsIHJlZ2V4LCAobWF0Y2gpID0+IGA8c3BhbiBjbGFzcz1cInNlYXJjaC1oaWdobGlnaHRcIj4ke21hdGNofTwvc3Bhbj5gKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcGFyc2VIVE1MKGh0bWwsIGNvbnRleHQpIHtcclxuICAgICAgICBjb25zdCB0ID0gKGNvbnRleHQgfHwgZG9jdW1lbnQpLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XHJcbiAgICAgICAgdC5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgIHJldHVybiB0LmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVwbGFjZUNvbnRlbnQoc3RyTWF0Y2gxLCByZWdleCwgbWF0Y2gpIHtcclxuICAgICAgICBjb25zdCBtYXRjaFJlZzEgPSAvPi4qP1xcPC9naTsgLy8g5YWI5p+l5Ye6PjzkuYvpl7TnmoTlhoXlrrlcclxuICAgICAgICBjb25zdCBzdHJzID0gc3RyTWF0Y2gxLm1hdGNoKG1hdGNoUmVnMSk7IC8vIOaLv+WIsOaJgOacieespuWQiOeahOmUruWAvFxyXG4gICAgICAgIGlmIChzdHJzICYmIHN0cnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWEgb2Ygc3Rycykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVwX29sZCA9IHN0cnNbYWFdOyAvLyDmi7/liLDljp/lp4vnrKblkIjlrZfnrKbkuLJcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcF9uZXcgPSBzdHJzW2FhXS5yZXBsYWNlKHJlZ2V4LCBtYXRjaCk7IC8vIOabv+aNouaIkOebrueahOWtl+espuS4slxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmUyID0gbmV3IFJlZ0V4cChyZXBfb2xkLCAnZycpOyAvLyDliKnnlKjljp/lp4vlrZfnrKbkuLLnlJ/miJDmraPliJlcclxuICAgICAgICAgICAgICAgIHN0ck1hdGNoMSA9IHN0ck1hdGNoMS5yZXBsYWNlKHJlMiwgcmVwX25ldyk7IC8vIOWwhuespuWQiOeahOWOn+Wni+Wtl+espuS4suabv+aNouaIkOaWsOWtl+espuS4slxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJNYXRjaDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0ck1hdGNoMS5yZXBsYWNlKHJlZ2V4LCBtYXRjaCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==