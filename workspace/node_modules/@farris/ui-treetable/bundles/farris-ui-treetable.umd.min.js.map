{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-treetable/lib/high-light.pipe.ts","ng://@farris/ui-treetable/lib/hotkeys.ts","ng://@farris/ui-treetable/lib/virtualized-loader.service.ts","ng://@farris/ui-treetable/lib/treetable.service.ts","ng://@farris/ui-treetable/lib/search.handle.ts","ng://@farris/ui-treetable/lib/treetable.component.ts","ng://@farris/ui-treetable/lib/find-input.component.ts","ng://@farris/ui-treetable/lib/nodes_pager/nodes-pager.component.ts","ng://@farris/ui-treetable/lib/nodes_pager/childs-loading.component.ts","ng://@farris/ui-treetable/lib/cell-tips.pipe.ts","ng://@farris/ui-treetable/lib/disable-node.pipe.ts","ng://@farris/ui-treetable/lib/treetable.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","HighlightPipe","transform","text","keyword","field","findField","needSearch","indexOf","split","some","pattern","replace","filter","join","regex","RegExp","sanitizer","bypassSecurityTrustHtml","replaceContent","match","parseHTML","html","context","document","createElement","innerHTML","content","cloneNode","strMatch1","strs","strs_1","__values","tslib_1.__values","strs_1_1","aa","rep_old","rep_new","re2","Pipe","args","name","DomSanitizer","ElementRef","el","TTHotkeys","addShortcut","options","_this","merged","defaults","keys","event","description","hotkeys","set","Observable","observer","dispose","eventManager","addEventListener","element","preventDefault","delete","Injectable","providedIn","EventManager","Map","VirtualizedLoaderService","getTableHeight","tt","height","getTableHeaderHeight","headerBox","nativeElement","getBoundingClientRect","getTableBodyHeight","getTableWidth","width","getRowHeight","rowHeight","getRowNodes","scrollTop","top","rows","topHideHeight","bottomHideHeight","rowNodes","getCurrentAllRowNodes","minTop","maxTop","visible","data","TreetableService","onSelectionChange","selected","selectionSource","onDblClick","rowNode","dblClickSource","onChangeCheckboxStatus","changeCheckboxStatus","onInsert","treeNode","parent","insertNode","onRemove","removeNode","onUpdate","updateNode","columnIsVisible","col","undefined","checkColumnsForGroupHeader","columns","_columns","getDataColumns","getDataFields","cols","j","forEach","colspan","splice","fields","_cols","hAlign","d","includes","f","Subject","selectionSource$","asObservable","dblClickSource$","changeCheckboxStatus$","insertNode$","removeNode$","updateNode$","SearchHandle","research","from","_a","ttInstance","searchData","allNodes","search","cloneDeep","state","searchOnServer","values","searchOnClient","searchRowNodes","_updateSerializedValues","searched","updateSerializedValue","_refreshTree","checkeds","checkedNodes","map","idField","detectChanges","serializedValue","resize","psRef","directiveRef","update","visibleItems","pids","parents","id","flat","pidArr","Array","Set","item","expanded","updateNodeProperty","resetTreeData","findParent","res","find","t1","searchExpression","c","targetValue","getValue","node","parseFloat","toLowerCase","writeConsole","reduce","flag","curr","getFindTextTotal","nodes","_fields","trim","searchWithConditions","conditons","every","findParents","parentNode","arr","t2","children","tn","a","NODES_PAGER_COLUMN_FIELD","TreeTableColumnDirective","Directive","selector","Input","defineProperty","TreeTableComponent","_groupColumns","ttService","cs","_data","val","isLoadNewDataSetEmpty","initNodeStatus","setNewColumnsWidth","loadDataSuccess","headerCheckboxCmp","_selections","vals","findRowNode","ids_1","selectValues","difference","setTimeout","selectValuesChange","emit","_selectedRow","selectValue","selectValueChange","_checkeds","treeNodes","ids_2","checkValues","checkValuesChange","msg","type","debugSer","checkOptons","nowrap","virtualized","reSetSize","setScorllBodyHeight","multiSelect","singleSelect","showCheckbox","checkOnSelect","selectOnCheck","beforeSortColumn","of","fit","renderer","addClass","parentEl","parentElement","setStyle","beforeClickNode","beforeCheckAll","beforeUnCheckAll","autoWidth","fitColumns","resizableColumns","disabledRow","searchAnyField","searchFields","label","ngOnInit","_UUID","styleElement","utils","createStyleSheet","styleSheetId","checkColumnOption","ngZone","runOutsideAngular","ro","ResizeObserver","entries","contentRect","target","showBorder","scrollToCurrentNode","observe","paginationOptions","initPaginationOptions","ngOnDestroy","unobserve","disconnect","findKeysHandler","unsubscribe","removeStyleSheet","farrisInstances","destroy","destroy$","complete","ngOnChanges","changes","isFirstChange","isDataChanged","currentValue","previousValue","disabled","hovered","enableFindText","setFindText","selectNode","selectNodes","pageIndex","currentPage","pageSize","itemsPerPage","pageList","total","totalItems","setTableWidth","allColumnsWidth","ngAfterViewChecked","ngAfterContentInit","templates","getType","headerTemplate","template","bodyTemplate","columnsRef","ttc2columns","subscribe","ngAfterViewInit","containerElement","querySelector","registerShortcuts","setRightFixedColumnShadow","add","appendCssRules","sheet","nodeName","div","closest","style","overflow","timer","loadedTimer","pipe","takeUntil","loadedData","headerCells","firstRowCells","showHeader","headerTable","querySelectorAll","bodyTable","td","index","fieldName","getAttribute","colWidth","toFixed","minWidth","colWidthTotal","columnCssName","checkGroupColumns","groupColumns","ids","parentId","childCols","left","right","pCol","pc","fixed","sortColumnsByFixed","updateColumns","fixedLeft","fixedCenter","fixedRight","rightWidthTotal_1","paginationForChildren","pagerBarCol","title","align","nodesPagerBar","rowspan","useGroupHeader","fixedCols","fixedRightColumns","fixedLeftColumns","setCellWidthCss","fixedColumns","cssRules","isVisible","ruleName","cssRule","getCssRule","display","stylecss","groupHeaderColCsses","groupColCssName","appendCssRules2","autoFitColumns","onPageChange","$event","pageChanged","onPageSizeChange","pageSizeChanged","updatePageInfo","pageInfo","obj","remote","pagerOnServer","getNodeText","rowdata","fast","isMultilingualField","localeService","localeId","onlySelectSelf","showFilterBar","_hotKeys","inputGroup","textbox","onSearch","enable","showFindInput","cdRef","getCustomCls","clsType","cls","fn","rowStyler","cellStyler","rowCls","arrcls","isArray","rowClsObj_1","getRowCls","getCellCls","getRealColWidth","currentCol","fixedWidth","onResized","resizeSer","windowResized","ps","instance","containerWidth","scrollbarXLeft","contentWidth","rightCSSRule","setFixedColumnShadow","x","fixedLeftCssRuleKey","fixedRightCssRuleKey","leftCSSRule","removeCssRule","srcElement","offsetWidth","scrollWidth","onScrollX","scrollLeft","scrollX","onScrollY","renderData","scrolltop","scrollLoader","scrollY","onSearchValueChange","onClearSearchValue","searchValueChange","clearSearchValue","onCellClick","cellClick","trackByFn","formatData","formatter","locale","colFormatSer","format","columnsChanged","list","setWidth","offsetHeight","h","parseInt","renderVirtualRowNodes","nodePosY","scrollY_1","_rownodes","elementRef","searchHandle","serializeNodes","fixedHeader","level","parentIds","selectable","showIcon","onlySelectLeaf","leaf","keyid","isSelected","findIndexInSelection","isChecked","findIndexInCheckeds","isLast","isFirst","parentRn","parentID","_parents","parentRowNode","last","first","selectedRow","selections","findIndex","v","unSelectedCurrentRowEmit","currSelected","nodeUnSelect","_singleSelectNode","clearSelections","selectRowIndex","rowIndex","clearCheckeds","setCheckeds","sp","originalEvent","nodeSelected","_singleUnSelectNode","__singleSelectNode","keepSelect","__multiSelectNode","singleSelectWhenMultiSelect","handleRowClick","indeterminate","setSelections","rowSelectChangeParams","cascadeNodes","nodeChecked","nodeUnChecked","selectWhenChecked","isInArray","items","updated","getDiffrentData","_nodes_1","cascadeCheckedNode","checked","sync","isIndeterminate","propagateSelectionDown","cascadeCheck","cascadeDown","rn","row","propagateSelectionUp","cascadeUp","rns_1","reverse","updateCheckboxStatus","updateNodeStatus","checkedItem","chked","updateAllCheckboxStatus","toggleNodeWithCheckbox","stopPropagation","toggleNodesWithCheckbox","checkAllNodes","unCheckAllNodes","status","showCheckAll","chkAll","updateParentCheckboxStatus","pNodes","rnid","updateParentsCheckStatus","findRowNodes","sort","getCheckboxStatus","len","uncheckedLength","checkedLength","childNodes","findIndexIn","equals","source","toggleExpand","deep","childrenEmptyEmitExpand","toggleVisible","expand","collapse","rid_1","setRowVisible_1","pid","rnParent","_r","expandNode","render","expandAll","expandAllNodes","expandNodes","expandAllNodesBy","collapseNode","collapseAll","collapseAllNodes","getContainerOffset","rect","body","onColumnResizeBegin","containerLeft","Math","round","lastResizerHelperX","pageX","onColumnResize","resizerHelperVC","onColumnResizeEnd","column","offsetLeft","delta","newColumnWidth","resizeColumnIndex","colField_1","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","resizeColGroup","removeClass","table","colGroup","Error","nextCol","insert","appendNew","append","emitAppendNew","appendChildren","loadChildren","remove","nodeId","removed","extend","nodeid","property","k","scorllBodyHeight","enableFilterRow","headerWrap","hh","clientHeight","_headerHeight","headerHeight","localStorage","getItem","pagination","pagerHeight","w","size","scrollToY","scrollToX","loadData","showLines","empty","clearAll","markForCheck","nodeIds","selectFirstNode","firstCanSelectNode","scrollToCurrentRow","trId","trEle","getElementById","isElementInViewport","scrollIntoView","block","scrollIntoViewIfNeeded","getBrowserType","ff","getFFVer","inline","containerEl","viewPortHeight","offsetTop","_scrollToNode","showRowsOnePager","ceil","top_1","gotocurrent","selectNodeChangedSubject","unSelectNode","emitNodeSelected","unSelectNodes","rownodes","checkedNode","isEnableMultiSelect","unCheckedNode","rownode","unNodes","_checkedNodes","parentIDS","closeCascade","_cascade","unCheckedNodes","unCheckedAndSelected","findNode","getRoot","checkAll","unCheckAll","getNodeIconFromData","useIconFromData","iconField","_iconField","getTreeIcon","leafIcon","expandIcon","collapseIcon","f-loading-round","icon","expandedIcon","collapsedIcon","_b","whenDataIconEmptyUseDefault","collapsedExpression","expandedExpression","leafExpression","icons","iconCls","compare","b","localeCompare","_sort","r1","r2","sortFields","sortName","orders","sortOrder","sn","so","orderby","this_1","sorter","v1","v2","clientSort","sortedData","bind","sortChildNodes","onSortColumnClick","sortable","sortOrders","colOrder","order","newOrder","_order","multiSort","remoteSort","columnSorted","findKeyWords","searchValue","findValue","result","findResult","findCount","findCurrent","highLightKeywords","resetFindText","nextFindValue","step","allHighLights","active","_index","nextRow","clearTimeout","tr","highLightDom","closeFindPanel","y","animations","showOrHideColumn","isHide","showColumn","hideColumn","showChildsLoading","__colspan__","__childs_loading__","onChildsPageChanged","childsPageChanged","trId2DataId","onKeydownEvent","key","newIdx","blur","trs","trCount","selectedTrIndex","code","_tr","getChildNodes","getParentNodes","onFilterRowInput","filterRowConditions","Component","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ResizeService","Renderer2","CommonUtils","ColumnFormatService","ChangeDetectorRef","NgZone","Injector","Output","ContentChildren","FarrisTemplateDirective","ViewChild","PerfectScrollbarComponent","FarrisContextMenuDirective","HostListener","shortcuts","injector","showSearchField","allColumnsTitle","showLinesOnHover","striped","loadDataType","emptyMessage","indentSpacing","foldIcon","unfoldIcon","expandLevel","EventEmitter","dblClickExpand","useDblClick","pagerViewMode","showPageList","showPageInfo","showPageNumber","pagerLabelSize","showGotoInput","showTotalForChildren","enableContextMenu","contextMenuItems","dblClick","searchButtonText","BehaviorSubject","second","secondItem","onBeforeShowContextMenu","contextMenuDom","rowID","rowNode_1","go$","show","beforeShowContextMenu","tree","switchMap","menus","viewportW","targetW","focusTargetWidth","get","LocaleService","idService","IdService","FarrisComponentInstanceService","uuid","random","slice","DebugService","useDebugMode","TTBodyComponent","TreeTableTogglerComponent","togglerEl","treeNodeIcon","isShowTriangle","showTriangle","noChilds","hasChildren","expandSub","updateIcon","collapseSub","addNewSub","subscriptions","removeStyle","reSetLines","currenChildrenLength","previousChildrenLength","ngDoCheck","unAllSubscriptions","lineEls","_renderLines","renderLines","noLineStyle","referEl","createLeafNodeLines","insertBefore","newLineElement","nearLine","border","newLineEl","isTopNode","l1","l2","dessert","appendChild","registerClickEvent","listen","onClick","HostBinding","ngzone","TreeTableSelectRowDirective","subscription","onclick","isEnabled","delay","prevent","rowClick","selectRowDisabled","toggleClass","TreeTableHeaderCheckboxComponent","handleClick","beforeEvent","checkedChange","TreeTableCheckboxComponent","chk","cls1","DblClickRowDirective","enableDblClick","selectRowDir","ondblclick","prevEl","previousSibling","dblclickNode","togglerTag","visibility","decorators","Optional","Self","CustomRowStyleDirective","setRowStyle","sty_1","cls_1","TTCustomCellStyleDirective","setCellStyle","cellCls","styler","rowData","ccs_1","substring","_sty_1","rowStyle","hasBackground","_rowStyles","_cellStyles","TTResizableColumnDirective","isEnable","resizer","className","resizerMouseDownListener","onMouseDown","onMouseEnter","enableResize","bindDocumentEvents","documentMouseMoveListener","onMouseMove","documentMouseUpListener","onMouseUp","unbindDocumentEvents","removeEventListener","FindInputComponent","keyupEventSub","fromEvent","input","switch","keyCode","debounceTime","valueChanged","focus","onClose","close","onEnter","enterHandler","current","count","TreetableNodesPagerComponent","getPagerCount","setPagerInfo","pagerInfo","showPager","isFirstPager","isLastPager","previous","setCurrent","page","pageChange","pagerChanged","newPageIndex","cd","showTotal","ChildsLoadingComponent","CellTipsPipe","_i","showTips","getCellTooltipContent","txt","commonUtils","tipContent","getEnumTitleFromColumnOptions","DisableNodePipe","selectable2","TreeTableModule","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","PerfectScrollbarModule","InputGroupModule","LocaleModule","DataColumnModule","PaginationModule","FarrisContextMenuModule","FarrisFormsModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { PipeTransform, Pipe, ElementRef } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'highlight' })\r\nexport class HighlightPipe implements PipeTransform {\r\n    constructor(public sanitizer: DomSanitizer, private el: ElementRef) {\r\n    }\r\n    transform(text: string, keyword, field = '', findField = ''): SafeHtml {\r\n        let needSearch = true;\r\n        if (field && findField) {\r\n            if (findField.indexOf(',') === -1) {\r\n                needSearch = field === findField;\r\n            } else {\r\n                needSearch = findField.split(',').some(n => n === field);\r\n            }\r\n        }\r\n\r\n        if (!needSearch) {\r\n            return text;\r\n        }\r\n\r\n        if (keyword && text) {\r\n            let pattern = keyword.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n            pattern = pattern.split(' ').filter((t) => {\r\n                return t.length > 0;\r\n            }).join('|');\r\n            const regex = new RegExp(pattern, 'gi');\r\n            return this.sanitizer.bypassSecurityTrustHtml(\r\n                // text.replace(regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n                this.replaceContent(text, regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n            );\r\n\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    parseHTML(html, context) {\r\n        const t = (context || document).createElement('template');\r\n        t.innerHTML = html;\r\n        return t.content.cloneNode(true);\r\n    }\r\n\r\n    private replaceContent(strMatch1, regex, match) {\r\n        const matchReg1 = />.*?\\</gi; // åæ¥åº><ä¹é´çåå®¹\r\n        const strs = strMatch1.match(matchReg1); // æ¿å°ææç¬¦åçé®å¼\r\n        if (strs && strs.length) {\r\n            for (const aa of strs) {\r\n                const rep_old = strs[aa]; // æ¿å°åå§ç¬¦åå­ç¬¦ä¸²\r\n                const rep_new = strs[aa].replace(regex, match); // æ¿æ¢æç®çå­ç¬¦ä¸²\r\n                const re2 = new RegExp(rep_old, 'g'); // å©ç¨åå§å­ç¬¦ä¸²çææ­£å\r\n                strMatch1 = strMatch1.replace(re2, rep_new); // å°ç¬¦åçåå§å­ç¬¦ä¸²æ¿æ¢ææ°å­ç¬¦ä¸²\r\n            }\r\n            return strMatch1;\r\n        } else {\r\n            return strMatch1.replace(regex, match);\r\n        }\r\n    }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { EventManager } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface HotkeyOptions {\r\n    element: any;\r\n    description: string | undefined;\r\n    keys: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TTHotkeys {\r\n    hotkeys = new Map();\r\n    defaults: Partial<HotkeyOptions> = {\r\n        element: document\r\n    };\r\n\r\n    constructor(private eventManager: EventManager) {\r\n    }\r\n\r\n    addShortcut(options: Partial<HotkeyOptions>) {\r\n        const merged = { ...this.defaults, ...options };\r\n        if (merged.keys.indexOf('ctrl') > -1) {\r\n            merged.keys = merged.keys.replace('ctrl', 'control');\r\n        }\r\n        const event = `keydown.${merged.keys}`;\r\n\r\n        if (merged.description) {\r\n            this.hotkeys.set(merged.keys, merged.description);\r\n        }\r\n\r\n        return new Observable(observer => {\r\n            const handler = (e) => {\r\n                e.preventDefault();\r\n                observer.next(e);\r\n            };\r\n\r\n            const dispose = this.eventManager.addEventListener(merged.element, event, handler);\r\n\r\n            return () => {\r\n                dispose();\r\n                this.hotkeys.delete(merged.keys);\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:09\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-02 09:08:25\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode } from './types/treenode';\r\n\r\nexport class VirtualizedLoaderService {\r\n    constructor(private tt: TreeTableComponent) {}\r\n\r\n    getTableHeight() {\r\n        return this.tt.height;\r\n    }\r\n    getTableHeaderHeight() {\r\n        return this.tt.headerBox.nativeElement.getBoundingClientRect().height;\r\n    }\r\n    getTableBodyHeight() {\r\n        return this.tt.height - this.getTableHeaderHeight();\r\n    }\r\n    getTableWidth() {\r\n        return this.tt.width;\r\n    }\r\n\r\n    getRowHeight() {\r\n        return this.tt.rowHeight;\r\n    }\r\n\r\n\r\n    getRowNodes(scrollTop: number) {\r\n        let top = 0;\r\n        const rows = [];\r\n        let topHideHeight = 0;\r\n        let bottomHideHeight = 0;\r\n        \r\n\r\n        const rowNodes = this.tt.getCurrentAllRowNodes();\r\n\r\n        // const {rowNodes } = this.tt.state;\r\n        const rowHeight = this.getRowHeight();\r\n        const minTop = scrollTop;\r\n        const maxTop = minTop + this.getTableHeight() + rowHeight;\r\n        for (let i = 0; i < rowNodes.length; i++) {\r\n            const n: RowNode = rowNodes[i];\r\n            if ( !n.visible) {\r\n                continue;\r\n            }\r\n            top += rowHeight;\r\n            if (top + rowHeight < minTop) {\r\n                topHideHeight += rowHeight;\r\n                continue;\r\n            } else {\r\n                if (top > maxTop) {\r\n                    bottomHideHeight += rowHeight;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            rows.push(n);\r\n        }\r\n\r\n        return {\r\n            data: rows,\r\n            topHideHeight,\r\n            bottomHideHeight\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { flatten } from 'lodash-es';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Injectable()\r\nexport class TreetableService {\r\n\r\n    private selectionSource = new Subject();\r\n    private dblClickSource = new Subject();\r\n    private changeCheckboxStatus = new Subject<RowNode>();\r\n    private removeNode = new Subject<RowNode>();\r\n    private insertNode = new Subject<TreeNode>();\r\n    private updateNode = new Subject<RowNode>();\r\n\r\n\r\n    selectionSource$: Observable<any> = this.selectionSource.asObservable();\r\n    dblClickSource$: Observable<any> = this.dblClickSource.asObservable();\r\n    changeCheckboxStatus$: Observable<RowNode> = this.changeCheckboxStatus.asObservable();\r\n    insertNode$: Observable<TreeNode> = this.insertNode.asObservable();\r\n    removeNode$: Observable<RowNode> = this.removeNode.asObservable();\r\n    updateNode$: Observable<RowNode> = this.updateNode.asObservable();\r\n\r\n    onSelectionChange(selected?: TreeNode[]) {\r\n        this.selectionSource.next(selected);\r\n    }\r\n\r\n    onDblClick(rowNode: RowNode) {\r\n        this.dblClickSource.next(rowNode);\r\n    }\r\n\r\n    onChangeCheckboxStatus(rowNode: RowNode) {\r\n        this.changeCheckboxStatus.next(rowNode);\r\n    }\r\n\r\n    onInsert(treeNode: TreeNode, parent?: TreeNode) {\r\n        this.insertNode.next(treeNode);\r\n    }\r\n\r\n    onRemove(rowNode: RowNode) {\r\n        this.removeNode.next(rowNode);\r\n    }\r\n\r\n    onUpdate(rowNode: RowNode) {\r\n        this.updateNode.next(rowNode);\r\n    }\r\n\r\n    columnIsVisible(col, tt) {\r\n        if (col.visible === undefined) {\r\n            return true;\r\n        }\r\n        if (typeof col.visible === 'function') {\r\n            return col.visible(tt);\r\n        }\r\n\r\n        return col.visible;\r\n    }\r\n\r\n    checkColumnsForGroupHeader(columns: any, tt: any) {\r\n        let _columns = [];\r\n        if (columns && columns.length) {\r\n            _columns = this.getDataColumns(columns);\r\n        }\r\n        return {\r\n            columns: _columns\r\n        };\r\n    }\r\n\r\n\r\n    private getDataFields(cols, length) {\r\n        let i = 0;\r\n        let j = 0;\r\n        cols.forEach(n => {\r\n            const colspan = n.colspan || 1;\r\n            if (i + colspan <= length) {\r\n                i += colspan;\r\n                j++;\r\n            }\r\n        });\r\n        return cols.splice(0, j);\r\n    }\r\n\r\n\r\n    private getDataColumns(cols) {\r\n        if (!cols || !cols.length) {\r\n            return [];\r\n        }\r\n\r\n        let fields = [];\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let _cols = cols[i];\r\n            if (cols[i] && !cols[i].length) {\r\n                _cols = [...fields];\r\n                fields = [];\r\n            }\r\n            _cols.forEach(n => {\r\n                if (!n.field && n.colspan && n.colspan > 1) {\r\n\r\n                    if (n['halign']) {\r\n                        n.hAlign = n['halign'];\r\n                    }\r\n\r\n                    this.getDataFields(cols[i + 1], n.colspan).forEach(d => {\r\n                        if (!fields.includes(f => f.field === d.field)) {\r\n                            fields.push(d);\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!fields.includes(f => f.field === n.field)) {\r\n                        fields.push(n);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return fields.filter(n => !n.colspan || n.colspan === 1);\r\n    }\r\n}\r\n","import { extend } from 'lodash-es';\r\n/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 13:38:51\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-15 15:13:56\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { cloneDeep } from 'lodash-es';\r\nexport class SearchHandle {\r\n    allNodes = [];\r\n    constructor(private ttInstance: TreeTableComponent) {\r\n    }\r\n\r\n    // å·æ°æ¥è¯¢ç»æ\r\n    research(from: 'client'|'server' = 'client' ) {\r\n        const { field, value } = this.ttInstance.searchData;\r\n        this.allNodes = [];\r\n        this.search(field, value, from);\r\n    }\r\n\r\n\r\n\r\n    search(field: string, value: string, from: 'client'|'server' = 'client'): any {\r\n        if (!this.allNodes.length) {\r\n            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);\r\n        }\r\n        switch (from) {\r\n            case 'server':\r\n                this.searchOnServer(field, value);\r\n                break;\r\n            default:\r\n                if (value !== '' && value !== undefined && value !== null) {\r\n                    const values = this.searchOnClient(field, value, this.allNodes);\r\n                    this.ttInstance.state.searchRowNodes = null;\r\n                    this._updateSerializedValues(values);\r\n                } else {\r\n                    this.ttInstance.state.searched = false;\r\n                    this.ttInstance.updateSerializedValue();\r\n                }\r\n\r\n                this._refreshTree();\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _refreshTree() {\r\n        if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {\r\n            this.ttInstance.checkedNodes(this.ttInstance.checkeds.map(n => n.data[this.ttInstance.idField]));\r\n            this.ttInstance['updateNodeStatus']();\r\n            this.ttInstance.detectChanges();\r\n        } else {\r\n            if (this.ttInstance.serializedValue && this.ttInstance.serializedValue.length) {\r\n                this.ttInstance.resize();\r\n            }\r\n            this.ttInstance.detectChanges();\r\n            if (this.ttInstance.psRef) {\r\n                this.ttInstance.psRef.directiveRef.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateSerializedValues(visibleItems: RowNode[]) {\r\n        const pids = (visibleItems.map(n => [...n.parents, n.id]) as any).flat();\r\n        const pidArr = Array.from(new Set(pids));\r\n\r\n        const rowNodes =  this.allNodes.filter(n => pidArr.some(item=>item==n.id)).map(r => {\r\n            r.expanded = true;\r\n            this.ttInstance.updateNodeProperty(r.id, {expanded: true });\r\n            return r;\r\n        });\r\n\r\n        this.ttInstance.state.searched = true;\r\n        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);\r\n        this.ttInstance.state.searchRowNodes = this.ttInstance.serializedValue;\r\n    }\r\n\r\n    findParent(item: TreeNode, allNodes: any[]) {\r\n        let res = [];\r\n        if (item && allNodes && allNodes.length) {\r\n            const p = allNodes.find(t1 => t1.id === item.data[this.ttInstance.idField]);\r\n            res.push(p);\r\n            if (p.parent) {\r\n                res = res.concat(this.findParent(p.parent, allNodes));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private searchExpression(item: RowNode, value: string, fields: string[] = []) {\r\n        const _fields = fields.length ? fields : this.ttInstance.columns.map(c => c.field);\r\n        const results = _fields.map(f => {\r\n            const targetValue = this.getValue(f, item.node.data);\r\n            if (targetValue !== null && targetValue !== undefined) {\r\n                if (typeof targetValue === 'number') {\r\n                    return targetValue === parseFloat(value);\r\n                } else {\r\n                    return targetValue.toLowerCase().indexOf(value.toLowerCase()) > -1;\r\n                }\r\n            } else {\r\n                this.ttInstance.writeConsole(`ä¸å­å¨å ${f}`);\r\n            }\r\n        });\r\n\r\n        return results.reduce((flag, curr) => {\r\n            return flag || curr;\r\n        }, false);\r\n    }\r\n\r\n    private getValue(field, data) {\r\n        if (field) {\r\n            if (field.indexOf('.') > -1) {\r\n                try {\r\n                return field.split('.').reduce( (r, f) => {\r\n                    if (r) {\r\n                        return r[f];\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }, data );\r\n            } catch {\r\n                this.ttInstance.writeConsole(`å­æ®µ ${field} ä¸å­å¨ã`)\r\n            }\r\n            } else {\r\n                return data[field];\r\n            }\r\n        }\r\n    }\r\n\r\n    getFindTextTotal(field: string, value: string, nodes: RowNode[]) {\r\n        let t = 0;\r\n        const getCount = (fields): any => {\r\n            let c = 0;\r\n            nodes.forEach(n => {\r\n                fields.forEach(f => {\r\n                    const targetValue = '' +   this.getValue(f, n.node.data);\r\n                    if (targetValue !== undefined) {\r\n                        if (targetValue.indexOf(value) > -1) {\r\n                            c++;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            return c;\r\n        };\r\n        let _fields = [field];\r\n        if (field === '*') {\r\n            _fields = this.ttInstance.columns.map(c => c.field);\r\n\r\n        } else if (field.indexOf(',') > -1) {\r\n            _fields = field.split(',').map(f => f.trim());\r\n        }\r\n\r\n        t = getCount(_fields);\r\n        return t;\r\n    }\r\n\r\n    searchOnClient(field: string, value: string, nodes: RowNode[]) {\r\n        let resultNodes: RowNode[] = [];\r\n        if (value === undefined || value === null) {\r\n            return [];\r\n        }\r\n        if (field === '*') {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value));\r\n        } else if (field.indexOf(',') > -1) {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value, field.split(',').map(f => f.trim())));\r\n        } else {\r\n            value = value.toLowerCase();\r\n            if (field.indexOf('.') === -1) {\r\n                resultNodes = nodes.filter(n => ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1);\r\n            } else {\r\n                resultNodes = nodes.filter(n => ('' + this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1);\r\n            }\r\n        }\r\n\r\n        return resultNodes;\r\n    }\r\n\r\n    searchWithConditions(conditons: {[key: string]: any}) {\r\n        if (!this.allNodes.length) {\r\n            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);\r\n        }\r\n        const fields = Object.keys(conditons);\r\n        if (!fields.length) {\r\n            this.ttInstance.state.searched = false;\r\n            this.ttInstance.updateSerializedValue();\r\n        } else {\r\n            const nodes = this.allNodes.filter(n => {\r\n                const results = fields.map(field => {\r\n                    const value = conditons[field];\r\n                    return this.searchExpression(n, value, [field])\r\n                });\r\n\r\n                // return results.reduce((flag, curr) => {\r\n                //     return flag && curr;\r\n                // }, false);\r\n                return results.every(n => n);\r\n            });\r\n            this.ttInstance.state.searchRowNodes = null;\r\n            this._updateSerializedValues(nodes);\r\n        }\r\n        this._refreshTree();\r\n    }\r\n\r\n    findParents(rowNodes, allNodes) {\r\n        let res = [];\r\n        rowNodes.forEach(item => {\r\n            res = res.concat(this.findParent(item.node, allNodes));\r\n        });\r\n\r\n        return Array.from(new Set(res));\r\n    }\r\n\r\n    private resetTreeData(parentNode: RowNode, visibleItems: RowNode[]) {\r\n        let res = [];\r\n        let arr = [];\r\n        if (parentNode === null) {\r\n            arr = visibleItems.filter(t2 => t2.parent === parentNode);\r\n        } else {\r\n            parentNode.node.expanded = true;\r\n            arr = visibleItems.filter(t2 => t2.parent && t2.parent.data[this.ttInstance.idField] === parentNode.id);\r\n            if (!arr.length) {\r\n                parentNode.node.children = [];\r\n            } else {\r\n                parentNode.node.children = arr.map( tn => tn.node );\r\n            }\r\n        }\r\n        arr.forEach( a => {\r\n            a.visible = true;\r\n            res.push(a);\r\n            res = res.concat(this.resetTreeData(a, visibleItems));\r\n        });\r\n        return cloneDeep(res);\r\n    }\r\n\r\n    private searchOnServer(field: string, value: string) {\r\n\r\n    }\r\n\r\n}\r\n","import { switchMap, takeUntil } from 'rxjs/operators';\r\n/*\r\n* @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 18:44:13\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-29 08:41:39\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\n\r\nimport {\r\n    Component, OnInit, Input, TemplateRef, Directive,\r\n    ContentChildren, QueryList, AfterContentInit, OnDestroy,\r\n    HostListener, Output, EventEmitter, ElementRef, Injector,\r\n    ViewChild, Optional, Self, AfterViewInit, NgZone, Renderer2, ViewEncapsulation,\r\n    OnChanges, SimpleChanges, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, DoCheck, HostBinding\r\n} from '@angular/core';\r\n\r\nimport { FarrisTemplateDirective, CommonUtils, IdService, FarrisComponentInstanceService, DebugService } from '@farris/ui-common';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { ColumnFormatService, ColumnFormatter } from '@farris/ui-common/column';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';\r\n\r\nimport { Subscription, Observable, of, BehaviorSubject, Subject, timer } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { cloneDeep, extend, remove } from 'lodash-es';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\nimport { TreeTableColumn } from './types/treetable-column';\r\nimport { VirtualizedLoaderService } from './virtualized-loader.service';\r\nimport { TreeNode, RowNode, SelectEventArgs } from './types/treenode';\r\nimport { TreetableService } from './treetable.service';\r\nimport { SearchHandle } from './search.handle';\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { PaginationInstance } from '@farris/ui-pagination';\r\nimport { FarrisContextMenuDirective } from '@farris/ui-context-menu';\r\n\r\n\r\n/** ååæ ¼ç¹äºä»¶åæ° */\r\nexport interface CellClickParam {\r\n    event: Event;\r\n    col: TreeTableColumn;\r\n    node: TreeNode;\r\n}\r\n/** èç¹é©éäºä»¶ */\r\nexport interface NodeCheckedParam {\r\n    originalEvent?: any;\r\n    node: TreeNode | TreeNode[];\r\n    nodes?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport interface NodeSelectedParam {\r\n    originalEvent?: Event;\r\n    node: TreeNode | TreeNode[];\r\n    type?: 'row' | 'checkbox';\r\n    index?: number;\r\n    parents?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport type IconFieldType = {\r\n    leaf?: string,\r\n    expand?: string,\r\n    collapse?: string\r\n} | string;\r\n\r\n\r\nconst NODES_PAGER_COLUMN_FIELD = '__nodespagerbar__';\r\n\r\n\r\n@Directive({\r\n    selector: 'tt-column, [tt-column]'\r\n})\r\nexport class TreeTableColumnDirective {\r\n    @Input() field: string;\r\n    @Input() title: string;\r\n    @Input() width?: number;\r\n    @Input() hAlign?: string;\r\n    @Input() align?: string;\r\n    @Input() formatter?: () => any | ColumnFormatter;\r\n}\r\n\r\n@Component({\r\n    selector: 'farris-treetable',\r\n    templateUrl: 'treetable.component.html',\r\n    styles: [`\r\n        .farris-treetable {\r\n            position: relative;\r\n        }\r\n        .resizable-column {\r\n            background-clip: padding-box;\r\n            position: relative;\r\n        }\r\n        .column-resizer {\r\n            display: block;\r\n            position: absolute!important;\r\n            top: 0;\r\n            right: 0;\r\n            margin: 0;\r\n            width: .5em;\r\n            height: 100%;\r\n            padding: 0;\r\n            cursor: col-resize;\r\n            border: 1px solid transparent;\r\n        }\r\n        .column-resizer-helper {\r\n            width: 1px;\r\n            position: absolute;\r\n            z-index: 10;\r\n            display: none;\r\n            border-right: 1px dashed #1890ff;\r\n        }\r\n\r\n        .farris-treetable-disabled .farris-treetable-body .table tr{\r\n            opacity: 0.4;\r\n            cursor: not-allowed;\r\n        }\r\n        .farris-treetable-disabled .table tr.farris-table-selectedrow{\r\n            opacity: 1;\r\n            cursor: default;\r\n        }\r\n\r\n        .custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after {\r\n            background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\");\r\n            background-color: #1890ff;\r\n        }\r\n        .unselectable-text {\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            -o-user-select: none;\r\n            -ms-user-select: none;\r\n            user-select: none\r\n        }\r\n        .search-highlight {\r\n            background-color: #FFFF1F;\r\n        }\r\n        .search-highlight.active{\r\n            background-color: #FF901C;\r\n        }\r\n\r\n        .f-treetable--fixed-columns .ps__rail-x, .f-treetable--fixed-columns .ps__rail-y {\r\n            z-index: 18;\r\n        }\r\n    `],\r\n    exportAs: 'treeTable',\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeTableComponent implements OnInit, AfterContentInit, AfterViewInit, OnChanges, AfterViewChecked, OnDestroy {\r\n    id = '';\r\n    /** å®½åº¦ */\r\n    @Input() width = 500;\r\n    /** é«åº¦ */\r\n    @Input() height = 400;\r\n\r\n    @Input() showFilterBar = false;\r\n    /** æ¾ç¤ºè¿æ»¤è¡ */\r\n    @Input() enableFilterRow = false;\r\n    /** æ¾ç¤ºæ¥è¯¢å­æ®µ */\r\n    @Input() showSearchField = true;\r\n\r\n    @Input() headerHeight = 35;\r\n    /** è¡¨å¤´æè¡ */\r\n    @Input() headerWrap = false;\r\n    /** è¡é« */\r\n    @Input() rowHeight = 29;\r\n    /**\r\n     * åä¿¡æ¯\r\n     */\r\n    @Input() columns = [];\r\n    private _groupColumns = [];\r\n    @Input() set groupColumns(cols) {\r\n        this._groupColumns = cols || [];\r\n        const _columns = this.ttService.checkColumnsForGroupHeader(cols.map(cs => [...cs]), this).columns;\r\n        this.columns = _columns.filter(n => n.field);\r\n    }\r\n    get groupColumns() {\r\n        return this._groupColumns;\r\n    }\r\n    /** å¯ç¨å¤è¡¨å¤´ */\r\n    @Input() useGroupHeader = false;\r\n\r\n    @Input() fitColumns = true;\r\n    @Input() autoFitColumns = false;\r\n\r\n    @Input() searchFields: { label: string, value: string }[];\r\n\r\n    @Input() allColumnsTitle = 'ææå';\r\n    @Input() searchAnyField = true;\r\n\r\n    /** æ¾ç¤ºè¿æ¥çº¿ï¼é»è®¤ä¸º false */\r\n    @Input() showLines = false;\r\n    @Input() showLinesOnHover = false;\r\n    /**\r\n     * æ¯å¦å¯ç¨å¤éã é»è®¤ä¸ºåé\r\n     */\r\n    @Input() multiSelect = false;\r\n    @Input() singleSelect = true;\r\n    /** å¯ç¨å¤éåï¼æ¯å¦æ¾ç¤ºcheckbox */\r\n    @Input() showCheckbox = false;\r\n    /**\r\n     * ä¸»é®å­æ®µ\r\n     */\r\n    @Input() idField: string;\r\n\r\n    /** æ¾ç¤ºè¾¹æ¡çº¿ */\r\n    @Input() showBorder = true;\r\n\r\n    @Input() showCheckAll = true;\r\n\r\n    @Input() showHeader = true;\r\n    /** å¯ç¨æé©¬çº¿ */\r\n    @Input() striped = false;\r\n    /** å¯ç¨é¼ æ åè¿ææ */\r\n    @Input() hovered = true;\r\n    /** ç¦ç¨ã ç¦ç¨æ¶ä¸åè®¸éä¸­è¡ */\r\n    @Input() disabled = false;\r\n    /** ç¦å¡èç¹éä¸­ */\r\n    @Input() disabledRow: (param: { node: TreeNode, instance?: TreeTableComponent }) => boolean;\r\n\r\n    /** æ°æ®å è½½æ¹å¼; é»è®¤å¼ ä¸º all\r\n     * - all: å¨é¨å è½½\r\n     * - async: åå±å è½½\r\n     */\r\n    @Input() loadDataType: 'all' | 'async' = 'all';\r\n    /** åºå®è¡¨å¤´ */\r\n    @Input() fixedHeader = false;\r\n\r\n    /** å½å¤éæ¶ï¼éä¸­å½åè¡å¹¶é©é */\r\n    @Input() checkOnSelect = false;\r\n    /** å½å¤éæ¶ï¼é©éå¹¶éä¸­å½åè¡ */\r\n    @Input() selectOnCheck = false;\r\n    /**\r\n     * å¯ç¨å¤éæ¶ï¼æ­¤å±æ§ä¸ºtrue æ¶ï¼ä»å½åè¡éä¸­\r\n     */\r\n    @Input() onlySelectSelf = false;\r\n\r\n    /** å¯ç¨åå®½è°æ´ */\r\n    @Input() resizableColumns = true;\r\n    /** è®¾ç½®ä¸ºtrueæ¶èªéåºç¶å®¹çå°ºå¯¸ */\r\n    @Input() fit = false;\r\n\r\n    /** å¯ç¨çº§èéä¸­åè½ */\r\n    @Input() cascadeCheck = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeDown = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeUp = true;\r\n    /** ç©ºæ°æ®æ¶ï¼æ¾ç¤ºçæç¤ºææ¬ */\r\n    @Input() emptyMessage = 'ææ æ°æ®';\r\n    /** ç¼©è¿é´è·ï¼é»è®¤ä¸º 16px */\r\n    @Input() indentSpacing = 16;\r\n\r\n    /**\r\n     * åå»è¡éä¸­åï¼å¨æ¬¡ç¹å»ä¸ä¼è¢«åæ¶éä¸­ç¶æ;\r\n     */\r\n    @Input() keepSelect = true;\r\n    /** èæå è½½ */\r\n    @Input() virtualized = false;\r\n    /**\r\n     * ä»åè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯ä¼ åçè®¾ç½®ï¼å¦ææå¡å¨ç«¯æ²¡æè®¾ç½®ï¼åä¸ no ä¿æä¸è³ï¼\r\n     * - yes: å¦æå®¢æ·ç«¯è®¾ç½®ä¸º `yes`, æå¡å¨ç«¯çè®¾ç½®å¤±æï¼\r\n     * - no: åè®¸éæ©ææèç¹ï¼æå¡å¨ç«¯è®¾ç½®å¤±æ\r\n     */\r\n    @Input() onlySelectLeaf: boolean | 'default' | 'yes' | 'no' = 'default';\r\n\r\n    /** æ¾ç¤ºå¾æ  */\r\n    @Input() showIcon = false;\r\n    /** å¶å­èç¹å¾æ  */\r\n    @Input() leafIcon = 'file';\r\n    /** èç¹å±å¼å¾æ  */\r\n    @Input() expandIcon = 'folder-open';\r\n    /** èç¹æå å¾æ  */\r\n    @Input() collapseIcon = 'folder';\r\n\r\n    @Input() foldIcon = 'treetable-toggler';\r\n    @Input() unfoldIcon = 'extanded treetable-toggler';\r\n\r\n    /** å¯ç¨èç¹å¾æ ä»æ°æ®ä¸­è·åã é»è®¤ä¸º false */\r\n    @Input() useIconFromData = false;\r\n    /** å½æ°æ®æºä¸­iconæªè®¾ç½®æ¶ä½¿ç¨åç½®ICON. é»è®¤ä¸º true */\r\n    @Input() whenDataIconEmptyUseDefault = true;\r\n    /** ä»æ°æ®æºå­æ®µä¸­è·åå¾æ  */\r\n    @Input() iconField: IconFieldType = '';\r\n    /** å¾æ èªå®ä¹æ ·å¼ */\r\n    @Input() iconCls: string;\r\n\r\n    /** å¯ç¨è¿ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n    /** æåºå­æ®µ */\r\n    @Input() sortName: string;\r\n    /** æåºæ¹å¼ asc | desc */\r\n    @Input() sortOrder: string;\r\n    /** åè®¸å¤åæåº */\r\n    @Input() multiSort: boolean;\r\n\r\n    @Input() beforeSortColumn: (field: string, order: string) => Observable<boolean>;\r\n\r\n    @Input() rowStyler: (treeNode: TreeNode, field?: string) => any;\r\n    @Input() cellStyler: (treeNode: TreeNode, field: string) => any;\r\n\r\n    /** å¯ç¨åç«¯ææ¬æ¥æ¾ */\r\n    @Input() enableFindText = false;\r\n    /** ææ¬æ¥è¯¢å­æ®µ, å¼ç¨ */\r\n    @Input() findField: string;\r\n    // æ åè¡¨é»è®¤å±å¼å±çº§ã -1ï¼ ä¸å±å¼ï¼ 0ï¼ å¨é¨å±å¼ï¼ >0:  å±å¼å°æå®çº§æ°ï¼\r\n    @Input() expandLevel = -1;\r\n\r\n    @Input() selectValue = '';\r\n    @Output() selectValueChange = new EventEmitter();\r\n    /** å¯ç¨åå»å±å¼èç¹ */\r\n    @Input() dblClickExpand = true;\r\n    @Input() useDblClick = true;\r\n\r\n    /** éä¸­èç¹IDæ°ç» */\r\n    @Input() selectValues = [];\r\n    @Output() selectValuesChange = new EventEmitter();\r\n    /** æ¯å¦ç¦æ­¢æè¡ï¼é»è®¤ä¸æè¡ */\r\n    @Input() nowrap = true;\r\n\r\n    @Input() checkValues = [];\r\n    @Output() checkValuesChange = new EventEmitter();\r\n\r\n\r\n    @Input() beforeNodeSelected: (e: any) => Observable<boolean>;\r\n    @Input() beforeNodeUnSelected: () => Observable<boolean>;\r\n\r\n    @Input() beforeNodeChecked: () => Observable<boolean>;\r\n    @Input() beforeNodeUnChecked: () => Observable<boolean>;\r\n\r\n    @Input() beforeCheckAll: (e?: any) => Observable<boolean>;\r\n    @Input() beforeUnCheckAll: (e?: any) => Observable<boolean>;\r\n\r\n    @Input() beforeClickNode: (e?: any) => Observable<boolean>;\r\n\r\n    /** åé¡µä¿¡æ¯ */\r\n    @Input() pagination = false;\r\n    /** åé¡µå è½½å­èç¹æ°æ® */\r\n    @Input() paginationForChildren = false;\r\n    /** åé¡µæ¡æ¾ç¤ºæ¨¡å¼ï¼ default, simple */\r\n    @Input() pagerViewMode = 'default';\r\n    /** å¯ç¨æå¡å¨ç«¯åé¡µ */\r\n    @Input() pagerOnServer = true;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** å½åé¡µç  */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** åé¡µåºé«åº¦ */\r\n    @Input() pagerHeight = 56;\r\n    /** æ¾ç¤ºæ¯é¡µè®°å½æ° */\r\n    @Input() showPageList = false;\r\n    /** æ¾ç¤ºåé¡µä¿¡æ¯ */\r\n    @Input() showPageInfo = true;\r\n    /** æ¾ç¤ºé¡µç  */\r\n    @Input() showPageNumber = true;\r\n    /** æ¾ç¤ºé¡µç æå¤§æ°é */\r\n    @Input() pagerLabelSize = 7;\r\n    /** æ¾ç¤ºé¡µç è¾å¥æ¡ */\r\n    @Input() showGotoInput = false;\r\n    /** å­èç¹åé¡µæ¯å¦æ¾ç¤ºæ»è®°å½æ°ï¼é»è®¤ false */\r\n    @Input() showTotalForChildren = false;\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n\r\n\r\n    @Input() enableContextMenu = false;\r\n    @Input() contextMenuItems = [];\r\n    @Input() beforeShowContextMenu: (e: { [key: string]: any }) => Observable<{ show: boolean, menus: Array<any>}>;\r\n\r\n    @Output() pageSizeChanged = new EventEmitter();\r\n    @Output() pageChanged = new EventEmitter();\r\n\r\n    /** æåºå */\r\n    @Output() columnSorted = new EventEmitter();\r\n    /** éä¸­äºä»¶ */\r\n    @Output() nodeSelected: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n    /** åæ¶éä¸­äºä»¶ */\r\n    @Output() nodeUnSelect: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n\r\n    /** é©é */\r\n    @Output() nodeChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n    /** åæ¶é©é */\r\n    @Output() nodeUnChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n\r\n    /** å¨éäºä»¶ */\r\n    @Output() checkAll: EventEmitter<any> = new EventEmitter();\r\n    /** åæ¶å¨é */\r\n    @Output() unCheckAll: EventEmitter<any> = new EventEmitter();\r\n    /** æ¥è¯¢ */\r\n    @Output() search: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() dblClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() loadedData: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() expand: EventEmitter<TreeNode> = new EventEmitter();\r\n    @Output() collapse: EventEmitter<TreeNode> = new EventEmitter();\r\n\r\n    @Output() expandAllNodes: EventEmitter<any> = new EventEmitter();\r\n    @Output() collapseAllNodes: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() appendNew: EventEmitter<any> = new EventEmitter();\r\n    @Output() removed: EventEmitter<any> = new EventEmitter();\r\n    @Output() updated: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() clearSearchValue = new EventEmitter();\r\n    @Output() cellClick = new EventEmitter<CellClickParam>();\r\n    @Output() childsPageChanged = new EventEmitter();\r\n\r\n    @Output() searchValueChange = new EventEmitter<any>();\r\n\r\n    @Input() loadedTimer = 100;\r\n\r\n    serializedValue: RowNode[];\r\n\r\n    _data: TreeNode[] = [];\r\n    // loaddata æ¶ åè®¾ç½®ä¸ºç©ºæ°ç»ï¼\r\n    isLoadNewDataSetEmpty = false;\r\n    get data(): any[] {\r\n        return this._data;\r\n    }\r\n    @Input() set data(val: any[]) {\r\n        this._data = val;\r\n        this.updateSerializedValue();\r\n        if (!this.isLoadNewDataSetEmpty) {\r\n            this.initNodeStatus();\r\n        }\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n\r\n        this.loadDataSuccess();\r\n    }\r\n    /** æ ¹æ®åå®¹èªå¨å®½åº¦ï¼é»è®¤ false;\r\n     * æ­¤å±æ§å¼å¯åï¼èªå¨åå®½å¤±æ\r\n     */\r\n    @Input() autoWidth = false;\r\n\r\n    @ContentChildren(FarrisTemplateDirective) templates: QueryList<FarrisTemplateDirective>;\r\n    @ContentChildren(TreeTableColumnDirective) columnsRef: QueryList<TreeTableColumnDirective>;\r\n\r\n    @ViewChild('headerBox') headerBox: ElementRef;\r\n    @ViewChild('resizerHelper') resizerHelperVC: ElementRef;\r\n    @ViewChild('headerTable') headerTable: ElementRef;\r\n    @ViewChild('bodyTable') bodyTable: ElementRef;\r\n\r\n    @ViewChild('inputGroup') inputGroup: InputGroupComponent;\r\n    @ViewChild(PerfectScrollbarComponent) psRef?: PerfectScrollbarComponent;\r\n\r\n    private headerCheckboxCmp: TreeTableHeaderCheckboxComponent;\r\n    @ViewChild('allCheckbox') set allCheckbox(content: TreeTableHeaderCheckboxComponent) {\r\n        this.headerCheckboxCmp = content;\r\n    }\r\n\r\n    @ViewChild('nodespagerbar') nodesPagerBar: TemplateRef<any>;\r\n    @ViewChild(FarrisContextMenuDirective) ctxMenu: FarrisContextMenuDirective;\r\n    /**\r\n     * è¡¨å¤´æ¨¡æ¿\r\n     */\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    /**\r\n     * è¡¨ä½æ¨¡æ¿\r\n     */\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    /** éä¸­é¡¹éå */\r\n    private _selections = [];\r\n    get selections(): TreeNode[] {\r\n        return this._selections;\r\n    }\r\n    set selections(vals: TreeNode[]) {\r\n        if (vals && vals.length) {\r\n            // è¿æ»¤ææ°æ®æºä¸­ä¸å­å¨èç¹\r\n            this._selections = vals.filter(tn => tn && this.findRowNode(tn.id));\r\n            const ids = this._selections.map(tn => tn.id);\r\n\r\n            if (ids.length !== this.selectValues.length ||\r\n                (ids.length === this.selectValues.length && this.difference(ids, this.selectValues).length)) {\r\n                this.selectValues = ids;\r\n                setTimeout(() => {\r\n                    this.selectValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._selections = [];\r\n            this.selectValues = [];\r\n            this.selectValuesChange.emit([]);\r\n\r\n        }\r\n    }\r\n    /**\r\n     * éä¸­é¡¹ç´¢å¼\r\n     */\r\n    selectRowIndex = -1;\r\n\r\n    /** éä¸­å½åè¡ */\r\n    private _selectedRow = null;\r\n    get selectedRow(): TreeNode {\r\n        return this._selectedRow;\r\n    }\r\n\r\n    set selectedRow(treeNode: TreeNode) {\r\n        this._selectedRow = treeNode;\r\n        if (treeNode) {\r\n            if (this.selectValue !== treeNode.id) {\r\n                this.selectValue = treeNode.id;\r\n                this.selectValueChange.emit(treeNode.id);\r\n            }\r\n        } else {\r\n            this.selectValue = null;\r\n            this.selectValueChange.emit(null);\r\n        }\r\n    }\r\n\r\n\r\n    /** é©éçè®°å½éå */\r\n    private _checkeds = [];\r\n    get checkeds(): TreeNode[] {\r\n        return this._checkeds;\r\n    }\r\n    set checkeds(treeNodes: TreeNode[]) {\r\n        if (treeNodes && treeNodes.length) {\r\n            this._checkeds = treeNodes.filter(tn => this.findRowNode(tn.id));\r\n            const ids = this._checkeds.map(tn => tn.id);\r\n            this.checkValues = this.checkValues || [];\r\n            if (ids.length !== this.checkValues.length ||  (ids.length === this.checkValues.length && this.difference(ids, this.checkValues).length)) {\r\n                this.checkValues = ids;\r\n                setTimeout(() => {\r\n                    this.checkValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._checkeds = [];\r\n            this.checkValues = [];\r\n            this.checkValuesChange.emit([]);\r\n        }\r\n    }\r\n\r\n    // æå¤å±DIV\r\n    containerElement: HTMLDivElement;\r\n\r\n    // è®°å½åæå¨åçä½ç½®\r\n    lastResizerHelperX: number;\r\n\r\n    searchData = { field: '*', value: '' };\r\n\r\n    scorllBodyHeight: number;\r\n\r\n    searchHandle: SearchHandle;\r\n    searchButtonText = '<i class=\"f-icon f-icon-search\"></i>';\r\n    /** æ¾ç¤ºæ¥è¯¢å·¥å·æ¡ */\r\n    showFindInput = false;\r\n\r\n    private isDataChanged = false;\r\n\r\n    scrollLoader: VirtualizedLoaderService;\r\n    topHideHeight = 0;\r\n    bottomHideHeight = 0;\r\n    state = {\r\n        searchRowNodes: null,\r\n        searched: false,\r\n        rowNodes: [],\r\n        scrollY: 0,\r\n        scrollX: 0\r\n    };\r\n\r\n    /** å¾æ¥è¯¢çææ¬ */\r\n    findValue = '';\r\n    /** ç»ææ»æ° */\r\n    findCount = 0;\r\n    /** å½åç´¢å¼ */\r\n    findCurrent = 0;\r\n    /** å­å¨ææ¬æ¥è¯¢ç»æ */\r\n    findResult = [];\r\n    private ro: ResizeObserver | null = null;\r\n    private findKeysHandler = null;\r\n    private _hotKeys: TTHotkeys = null;\r\n    localeService: LocaleService;\r\n    private idService: IdService;\r\n    private styleSheetId = 'treetable-style-';\r\n    private styleElement;\r\n\r\n    // è°æ´æ¨¡æ¿ï¼æ­¤å±æ§ä»ä¸ºå¸®å©ä¸­çæ ç»ä»¶\r\n    fast = false;\r\n\r\n    paginationOptions: PaginationInstance = {\r\n        id: 'Farris-TreeTable-Pagination_',\r\n        itemsPerPage: this.pageSize,\r\n        currentPage: this.pageIndex,\r\n        pageList: this.pageList,\r\n        totalItems: this.total,\r\n        remote: this.pagerOnServer\r\n    };\r\n\r\n    selectNodeChangedSubject = new BehaviorSubject(null);\r\n    private _UUID = '';\r\n    // æ¯å¦æåºå®å\r\n    fixedColumns = false;\r\n    private destroy$ = new Subject();\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    difference = (first: any[], second: any[]) => first.filter(item => !second.some(secondItem => secondItem == item));\r\n    private debugSer: DebugService = null;\r\n\r\n    private filterRowConditions = null;\r\n    constructor(\r\n        public ttService: TreetableService, public el: ElementRef,\r\n        public resizeSer: ResizeService, private renderer: Renderer2,\r\n        public utils: CommonUtils, public colFormatSer: ColumnFormatService,\r\n        private shortcuts: TTHotkeys, private cdRef: ChangeDetectorRef,\r\n        private ngZone: NgZone, private injector: Injector) {\r\n        this.searchHandle = new SearchHandle(this);\r\n        this.scrollLoader = new VirtualizedLoaderService(this);\r\n        if (this.injector) {\r\n            this._hotKeys = this.injector.get(TTHotkeys, null);\r\n            this.localeService = this.injector.get(LocaleService, null);\r\n            this.idService = this.injector.get(IdService, null);\r\n            this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);\r\n        }\r\n        if (this.idService) {\r\n            this._UUID = this.idService.uuid();\r\n            this.styleSheetId += this.idService.uuid();\r\n        } else {\r\n            this._UUID = ('' + Math.random()).slice(2);\r\n            this.styleSheetId += ('' + Math.random()).slice(2);\r\n        }\r\n\r\n        this.ttService = new TreetableService();\r\n\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n\r\n        if (this.debugSer) {\r\n            this.debugSer.useDebugMode();\r\n        }\r\n    }\r\n\r\n    writeConsole(msg, type: 'info'|'log'|'warn'|'error' = 'warn') {\r\n        if (this.debugSer) {\r\n            this.debugSer[type](msg);\r\n        }\r\n    }\r\n\r\n    private checkOptons() {\r\n        // å¯ç¨æ°æ®æè¡åï¼èææ¸²æåè½å¤±æ\r\n        if (!this.nowrap) {\r\n            this.virtualized = false;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.reSetSize();\r\n            this.setScorllBodyHeight();\r\n        });\r\n\r\n        if (this.multiSelect) {\r\n            this.singleSelect = false;\r\n        }\r\n\r\n        if (this.singleSelect && this.showCheckbox) {\r\n            this.checkOnSelect = true;\r\n            this.selectOnCheck = true;\r\n        }\r\n\r\n        if (!this.beforeSortColumn) {\r\n            this.beforeSortColumn = () => of(true);\r\n        }\r\n\r\n        if (this.fit) {\r\n            this.renderer.addClass(this.el.nativeElement, 'f-utils-fill-flex-column');\r\n            const parentEl = this.el.nativeElement.parentElement || this.el.nativeElement.parentNode;\r\n            if (parentEl) {\r\n                // this.renderer.addClass(parentEl, 'f-utils-fill');\r\n                this.renderer.setStyle(parentEl, 'overflow', 'hidden');\r\n            }\r\n        }\r\n\r\n        if (!this.beforeClickNode) {\r\n            this.beforeClickNode = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeCheckAll) {\r\n            this.beforeCheckAll = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeUnCheckAll) {\r\n            this.beforeUnCheckAll = () => of(true);\r\n        }\r\n\r\n        if (this.autoWidth) {\r\n            this.fitColumns = false;\r\n            this.resizableColumns = false;\r\n        }\r\n\r\n        if (!this.disabledRow) {\r\n            this.disabledRow = () => false;\r\n        }\r\n\r\n        if (!this.searchAnyField && this.searchFields && this.searchFields.length) {\r\n            this.searchData.field = this.searchFields[0].label;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.id = 'Treetable-' + this._UUID;\r\n        // åå»º stylesheet\r\n        this.styleElement = this.utils.createStyleSheet(this.styleSheetId);\r\n        this.checkColumnOption();\r\n\r\n        this.checkOptons();\r\n\r\n        if (this.ngZone) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                if (this.el.nativeElement.parentElement) {\r\n                    this.ro = new ResizeObserver((entries, observer) => {\r\n                        if (entries && entries[0]) {\r\n                            const { width, height } = entries[0].contentRect;\r\n                            const target =  entries[0].target;\r\n\r\n                            if (this.fit && target['offsetParent']) {\r\n                                this.resize({ width, height: this.showBorder? height - 2 : height });\r\n                            }\r\n                        }\r\n                        // è¡¨ååæ¢åï¼å¦ææéä¸­è¡ï¼åæ´æ°æ»å¨æ¡ä½ç½®\r\n                        this.scrollToCurrentNode();\r\n                    });\r\n                    this.ro.observe(this.el.nativeElement.parentElement);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.paginationOptions = this.initPaginationOptions();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ro) {\r\n            if (this.el.nativeElement.parentElement) {\r\n                this.ro.unobserve(this.el.nativeElement.parentElement);\r\n            }\r\n            this.ro.disconnect();\r\n            this.ro = null;\r\n        }\r\n\r\n        if (this.findKeysHandler) {\r\n            this.findKeysHandler.unsubscribe();\r\n        }\r\n\r\n        this.utils.removeStyleSheet(this.styleSheetId);\r\n        this.styleElement = null;\r\n\r\n        if (this.farrisInstances) {\r\n            this.farrisInstances.destroy(this.el.nativeElement);\r\n        }\r\n\r\n        this.ttService = null;\r\n\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.data && !changes.data.isFirstChange()) {\r\n            this.isDataChanged = changes.data.currentValue !== changes.data.previousValue;\r\n        }\r\n\r\n        if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {\r\n            this.singleSelect = !changes.multiSelect.currentValue;\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.selectOnCheck = true;\r\n                this.checkOnSelect = true;\r\n            }\r\n        }\r\n\r\n        if (changes.disabled && !changes.disabled.isFirstChange()) {\r\n            this.hovered = !changes.disabled.currentValue;\r\n        }\r\n\r\n        if (changes.enableFindText && !changes.enableFindText.isFirstChange()) {\r\n            this.setFindText(changes.enableFindText.currentValue);\r\n        }\r\n\r\n        if (changes.selectValue && !changes.selectValue.isFirstChange()) {\r\n            this.selectNode(changes.selectValue.currentValue);\r\n        }\r\n        if (changes.selectValues && !changes.selectValues.isFirstChange()) {\r\n            this.selectNodes(changes.selectValues.currentValue);\r\n        }\r\n        if (changes.checkValues && !changes.checkValues.isFirstChange()) {\r\n            this.checkedNodes(changes.checkValues.currentValue);\r\n        }\r\n\r\n        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                currentPage: this.pageIndex\r\n            });\r\n        }\r\n\r\n        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                itemsPerPage: this.pageSize\r\n            });\r\n        }\r\n\r\n        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                pageList: this.pageList\r\n            });\r\n        }\r\n\r\n        if (changes.total !== undefined && !changes.total.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                totalItems: this.total\r\n            });\r\n        }\r\n\r\n        if (changes.fitColumns && !changes.fitColumns.isFirstChange()) {\r\n            this.setTableWidth(this.allColumnsWidth());\r\n        }\r\n\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.checkColumnOption();\r\n        }\r\n\r\n        if (changes.showBorder && !changes.showBorder.isFirstChange()) {\r\n            // this.reSetSize();\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // if (this.isDataChanged) {\r\n        //     this.loadedData.emit();\r\n        //     this.isDataChanged = false;\r\n        // } else {\r\n        //     this.ngZone.runOutsideAngular(() => {\r\n        //         if (this.psRef) {\r\n        //             this.psRef.directiveRef.update();\r\n        //         }\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                    break;\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (this.columnsRef.length) {\r\n            this.columns = this.ttc2columns(this.columnsRef);\r\n\r\n            this.columnsRef.changes.subscribe((d: any) => {\r\n                this.columns = this.ttc2columns(d);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.containerElement = this.el.nativeElement.querySelector('.farris-treetable');\r\n     \r\n        this.registerShortcuts();\r\n\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n        this.setRightFixedColumnShadow();\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n\r\n        if (this.bodyTemplate) {\r\n            this.utils.appendCssRules([`#${this.id} .farris-treetable .farris-treetable-tbody td {padding: .25rem 0.75rem;}`], this.styleElement.sheet);\r\n        }\r\n\r\n        // å¼å®¹æ§çè®¾è®¡å¨        \r\n        if (this.fit && this.el.nativeElement.parentElement.nodeName !== 'DIV') {\r\n            if (this.el.nativeElement.parentElement.nodeName === 'APP-DG-TREE-GRID') {\r\n                const div = this.el.nativeElement.parentElement.closest('div');\r\n                if (div) {\r\n                    div.style.overflow = 'hidden';\r\n                }\r\n            }\r\n        }\r\n\r\n        this.loadDataSuccess();\r\n    }\r\n\r\n    private loadDataSuccess() {\r\n        timer(this.loadedTimer).pipe(\r\n            takeUntil(this.destroy$)\r\n        ).subscribe(() => {\r\n            if (this.psRef && this.psRef.directiveRef) {\r\n                this.psRef.directiveRef.update();\r\n            }\r\n            this.loadedData.emit();\r\n        })\r\n    }\r\n\r\n\r\n    private setNewColumnsWidth() {\r\n        if (!this.autoWidth) {\r\n            return;\r\n        }\r\n        const newColWidth: any = {};\r\n        let headerCells = [];\r\n        let firstRowCells = [];\r\n        // let colgroups = [];\r\n        if (this.showHeader && this.headerTable) {\r\n            headerCells = Array.from<HTMLElement>(this.headerTable.nativeElement.querySelectorAll('th'));\r\n        }\r\n        if (this.serializedValue && this.serializedValue.length && this.bodyTable) {\r\n            firstRowCells = Array.from<HTMLElement>(this.bodyTable.nativeElement.querySelector('tr').querySelectorAll('td'));\r\n            // colgroups = this.bodyTable.nativeElement.querySelector('colgroup').querySelectorAll('col');\r\n        }\r\n\r\n        firstRowCells.forEach((td: any, index) => {\r\n            const fieldName = td.getAttribute('field');\r\n            let colWidth = td.getBoundingClientRect().width.toFixed(2);\r\n            newColWidth[fieldName] = colWidth;\r\n\r\n            const col = this.columns.find(c => c.field === fieldName);\r\n            if (col && col.width !== undefined) {\r\n                colWidth = colWidth > col.width ? colWidth : col.width;\r\n            }\r\n\r\n            td.style.minWidth = colWidth + 'px';\r\n            headerCells[index].style.width = colWidth + 'px';\r\n        });\r\n        const colWidthTotal = this.allColumnsWidth();\r\n        this.setTableWidth(colWidthTotal);\r\n    }\r\n\r\n    columnIsVisible(col) {\r\n        return this.ttService.columnIsVisible(col, this);\r\n    }\r\n\r\n\r\n    private columnCssName(n: any) {\r\n        return `#${this.id} .treetable-cell[field=\"${n.field}\"], #${this.id} .treetable-header-cell[field=\"${n.field}\"]:not(.group-header-cell)`;\r\n    }\r\n\r\n\r\n    private checkGroupColumns() {\r\n        var i = this.groupColumns.length - 1;\r\n        while(i >= 0) {\r\n            var ids = this.groupColumns[i].map(n => n.parentId);\r\n            ids = Array.from(new Set(ids));\r\n            ids.map(id => {\r\n                const childCols = this.groupColumns[i].filter(n => n.parentId == id).map(n => {\r\n                    const dataField = this.columns.find(c => c.id === n.id);\r\n                    return dataField || n;\r\n                });\r\n                return { \r\n                    id,\r\n                    width: childCols.reduce((r,c) => { return r+=c.width }, 0),\r\n                    left: childCols[0].left,\r\n                    right: childCols[childCols.length - 1].right || 0\r\n                };\r\n            }).forEach(p => {\r\n                if (i - 1 >= 0) {\r\n                    let pCol = this.groupColumns[i-1].find(pc => pc.id == p.id);\r\n                    const dataField = this.columns.find(c => c.id === p.id);\r\n                    pCol = dataField || pCol;\r\n\r\n                    pCol.width = p.width;\r\n                    if (pCol.fixed === 'left') {\r\n                        pCol.left = p.left;\r\n                    }\r\n                    if (pCol.fixed === 'right') {\r\n                        pCol.right = p.right;\r\n                    }\r\n                }\r\n            });\r\n            i--;\r\n        }\r\n    }\r\n\r\n    // æåºå®åçé¡ºåºæåº\r\n    private sortColumnsByFixed(updateColumns = true) {\r\n        const fixedLeft = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedCenter = this.columns.filter(n => !n.fixed || n.fixed === 'center');\r\n        const fixedRight = this.columns.filter(n => n.fixed === 'right');\r\n\r\n        if (fixedLeft && fixedLeft.length) {\r\n            fixedLeft.forEach((n, index) => {\r\n                if (index) {\r\n                    n.left = fixedLeft.reduce((r, c, i)=> {\r\n                        if (i < index) {\r\n                            return r += c.width;\r\n                        } \r\n                        return r;\r\n                    }, 0)\r\n                } else {\r\n                    n.left = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (fixedRight && fixedRight.length) {\r\n\r\n            let rightWidthTotal = fixedRight.reduce((r, c) => {\r\n                return r + c.width;\r\n            }, 0);\r\n\r\n            fixedRight.forEach((n, index) => {\r\n                rightWidthTotal -= n.width;\r\n                n.right = rightWidthTotal;\r\n            });\r\n        }\r\n\r\n\r\n\r\n        if (updateColumns) {\r\n            this.columns = fixedLeft.concat(fixedCenter).concat(fixedRight);\r\n        }\r\n    }\r\n\r\n    private checkColumnOption() {\r\n        const cssRules = [];\r\n\r\n        \r\n        // å¯ç¨åé¡µå è½½å­èç¹\r\n        if (this.paginationForChildren) {\r\n            const pagerBarCol: any = {\r\n                field: NODES_PAGER_COLUMN_FIELD,\r\n                width: 160,\r\n                title: '',\r\n                align: 'center',\r\n                template: this.nodesPagerBar,\r\n                rowspan: 1,\r\n            }\r\n\r\n            if (this.useGroupHeader) {\r\n                if (this.groupColumns[0][this.groupColumns[0].length - 1].fixed === 'right') {\r\n                    pagerBarCol.fixed = 'right';\r\n                }\r\n                pagerBarCol.rowspan = this.groupColumns.length;\r\n                this.groupColumns[0].push(pagerBarCol)\r\n            }\r\n\r\n            this.columns.push(pagerBarCol);\r\n        }\r\n\r\n\r\n        if (!this.fitColumns) {\r\n            this.sortColumnsByFixed();\r\n        }\r\n\r\n        this.columns.forEach((n, i) => {\r\n            if (n.visible === undefined) {\r\n                n.visible = true;\r\n            }\r\n\r\n            if (n['halign']) {\r\n                n.hAlign = n['halign'];\r\n            }\r\n\r\n            if (n.width === undefined) {\r\n                n.width = 100;\r\n            }\r\n\r\n            if (!n.id) {\r\n                n.id = 'treetable-header-' + (n.field || i);\r\n            }\r\n        });\r\n\r\n        const colWidthTotal = this.allColumnsWidth();\r\n        let fixedCols = 0;\r\n\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightColumns[0]['rightShadowCol'] = true;\r\n            fixedRightColumns[fixedRightColumns.length - 1]['lastColumn'] = true;\r\n        } else {\r\n            if (this.columns && this.columns.length) {\r\n                this.columns[this.columns.length - 1]['lastColumn'] = true;\r\n            }\r\n        }\r\n\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            fixedLeftColumns[fixedLeftColumns.length - 1]['leftShadowCol'] = true;\r\n        }\r\n\r\n        fixedCols = this.setCellWidthCss(colWidthTotal, fixedCols, cssRules);\r\n        this.setTableWidth(colWidthTotal);\r\n\r\n        this.fixedColumns = !!fixedCols;\r\n    }\r\n\r\n    private setCellWidthCss(colWidthTotal: any, fixedCols: number, cssRules: any[]) {\r\n\r\n\r\n        this.columns.forEach((n, index) => {\r\n            const isVisible = this.columnIsVisible(n);\r\n            const ruleName = this.columnCssName(n);\r\n\r\n            const cssRule = this.utils.getCssRule(ruleName, this.styleElement.sheet);\r\n            if (!cssRule) {\r\n                let stylecss = ruleName + ' { ';\r\n                stylecss += isVisible ? '' : 'display: none;';\r\n\r\n                if (this.fitColumns) {\r\n                    stylecss += `width: ${(n.width / colWidthTotal * 100).toFixed(2)}%;`;\r\n                } else {\r\n                    stylecss += `width: ${n.width}px;`;\r\n\r\n                    if (n.fixed) {\r\n                        if (n.fixed === 'left') {\r\n                            stylecss += `left: ${n.left}px`;\r\n                            fixedCols++;\r\n                        }\r\n\r\n                        if (n.fixed === 'right') {\r\n                            stylecss += `right: ${n.right}px`;\r\n                            fixedCols++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                stylecss += '}';\r\n                cssRules.push(stylecss);\r\n            } else {\r\n                cssRule.style.display = isVisible ? '' : 'none';\r\n                if (this.fitColumns) {\r\n                    cssRule.style.width = `${(n.width / colWidthTotal * 100).toFixed(2)}%`;\r\n                } else {\r\n                    cssRule.style.width = `${n.width}px`;\r\n                    if (n.fixed) {\r\n                        if (n.fixed === 'left') {\r\n                            cssRule.style.left = `${n.left}px`;\r\n                        }\r\n\r\n                        if (n.fixed === 'right') {\r\n                            cssRule.style.right = `${n.right}px`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        if (this.useGroupHeader) {\r\n            this.autoWidth = false;  // å¤è¡¨å¤´å¯ç¨åï¼èªå¨åå®½å¤±æ TFS 496088\r\n            this.checkGroupColumns();\r\n            var i = this.groupColumns.length - 2;\r\n            while (i >= 0) {\r\n                const groupHeaderColCsses = this.groupColumns[i].filter(col => !col.field).map(col => {\r\n                    let groupColCssName = `#${col.id}{ width: ${col.width}px`;\r\n\r\n                    if (col.fixed) {\r\n                        if (col.fixed === 'left') {\r\n                            groupColCssName += ';left:' + col.left + 'px';\r\n                        }\r\n\r\n                        if (col.fixed === 'right') {\r\n                            groupColCssName += ';right:' + col.right + 'px';\r\n                        }\r\n                    }\r\n\r\n                    return groupColCssName += '}';\r\n                });\r\n               \r\n                this.utils.appendCssRules2(groupHeaderColCsses, this.styleElement.sheet);\r\n                i--;\r\n            }\r\n        }\r\n\r\n\r\n        if (cssRules.length) {\r\n            this.utils.appendCssRules(cssRules, this.styleElement.sheet);\r\n        }\r\n        return fixedCols;\r\n    }\r\n\r\n    private setTableWidth(colWidthTotal: number) {\r\n        if (this.headerTable && this.bodyTable) {\r\n            if (!this.fitColumns && !this.autoFitColumns) {\r\n                this.headerTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n                this.bodyTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n            } else {\r\n                this.headerTable.nativeElement.style.width = '100%';\r\n                this.bodyTable.nativeElement.style.width = '100%';\r\n            }\r\n        }\r\n    }\r\n\r\n    private allColumnsWidth() {\r\n        return this.columns.reduce((r, c) => {\r\n            if (this.columnIsVisible(c)) {\r\n                return r + c.width;\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        }, 0);\r\n    }\r\n\r\n    onPageChange($event) {\r\n        this.pageChanged.emit($event);\r\n    }\r\n\r\n    onPageSizeChange($event) {\r\n        this.pageSizeChanged.emit($event);\r\n    }\r\n\r\n    updatePageInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number, pageList?: number[] }) {\r\n        if (pageInfo && Object.keys(pageInfo).length) {\r\n\r\n            const obj: any = {};\r\n            if (pageInfo.total !== undefined) {\r\n                obj.totalItems = pageInfo.total;\r\n            }\r\n\r\n            if (pageInfo.pageIndex !== undefined) {\r\n                obj.currentPage = pageInfo.pageIndex;\r\n            }\r\n\r\n            if (pageInfo.pageSize !== undefined) {\r\n                obj.itemsPerPage = pageInfo.pageSize;\r\n            }\r\n\r\n            if (pageInfo.pageList !== undefined) {\r\n                obj.pageList = pageInfo.pageList;\r\n            }\r\n\r\n            this.paginationOptions = Object.assign(this.paginationOptions, obj);\r\n        }\r\n    }\r\n\r\n\r\n    private initPaginationOptions() {\r\n        return {\r\n            id: 'Farris-TreeTable-Pagination_' + this._UUID,\r\n            itemsPerPage: this.pageSize,\r\n            currentPage: this.pageIndex,\r\n            pageList: this.pageList,\r\n            totalItems: this.total,\r\n            remote: this.pagerOnServer\r\n        };\r\n    }\r\n\r\n    getNodeText(col: TreeTableColumn, rowdata, fast = false) {\r\n        if (col.isMultilingualField) {\r\n            const val = this.utils.getValue(col.field, rowdata);\r\n            if (this.localeService) {\r\n                const localeId = this.localeService.localeId || 'zh-CHS';\r\n                if (val && typeof val === 'object' && Object.keys(val).length > 0) {\r\n                    return val[localeId];\r\n                } else {\r\n                    return val;\r\n                }\r\n            }\r\n        } else {\r\n            return this.utils.getValue(col.field, rowdata, !fast);\r\n        }\r\n    }\r\n\r\n    private initNodeStatus() {\r\n        if (!this.singleSelect) {\r\n            if (this.checkValues && this.checkValues.length) {\r\n                this.checkedNodes(this.checkValues, false, false);\r\n            }\r\n            if (this.selectValues && this.selectValues.length && !this.onlySelectSelf) {\r\n                this.selectNodes(this.selectValues, false, false);\r\n            }\r\n        } else {\r\n            if (this.selectValue) {\r\n                this.selectNode(this.selectValue, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ³¨åå¿«æ·é® */\r\n    private registerShortcuts() {\r\n        if (this.showFilterBar && this._hotKeys) {\r\n            this._hotKeys.addShortcut({ keys: 'enter', element: this.inputGroup.textbox.nativeElement }).subscribe(() => {\r\n                this.onSearch();\r\n            });\r\n        }\r\n\r\n        this.setFindText(this.enableFindText);\r\n    }\r\n\r\n    private setFindText(enable = true) {\r\n        this.enableFindText = enable;\r\n        if (this.enableFindText && this._hotKeys) {\r\n            // æ¥è¯¢å·¥å·æ¡\r\n            this.findKeysHandler = this._hotKeys.addShortcut({ keys: 'control.shift.f' }).subscribe((e) => {\r\n                if (this.enableFindText) {\r\n                    this.showFindInput = true;\r\n                    this.detectChanges();\r\n                }\r\n            });\r\n        } else {\r\n            if (this.showFindInput) {\r\n                this.showFindInput = false;\r\n                this.cdRef.detectChanges();\r\n            }\r\n            if (this.findKeysHandler) {\r\n                this.findKeysHandler.unsubscribe();\r\n                this.findKeysHandler = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCustomCls(rowNode: RowNode, field: string = '', clsType: 'row' | 'cell' = 'row') {\r\n        const cls = {};\r\n        let fn = this.rowStyler;\r\n        if (clsType === 'cell') {\r\n            fn = this.cellStyler;\r\n        }\r\n\r\n        if (fn) {\r\n            const rowCls = fn(rowNode.node, field);\r\n            if (rowCls) {\r\n                let arrcls = [];\r\n                if (typeof rowCls === 'string') {\r\n                    arrcls = [rowCls];\r\n                } else {\r\n                    if (Array.isArray(rowCls)) {\r\n                        arrcls = rowCls;\r\n                    }\r\n                }\r\n\r\n                if (arrcls.length) {\r\n                    const rowClsObj = {};\r\n                    arrcls.forEach(c => {\r\n                        rowClsObj['' + c] = true;\r\n                    });\r\n                    const _cls = { ...rowClsObj, ...cls };\r\n                    return _cls;\r\n                } else {\r\n                    return rowCls;\r\n                }\r\n            } else {\r\n                return cls;\r\n            }\r\n        } else {\r\n            return cls;\r\n        }\r\n    }\r\n\r\n    getRowCls(rowNode: RowNode, field?: string) {\r\n        return this.getCustomCls(rowNode, 'row');\r\n    }\r\n\r\n    getCellCls(rowNode: RowNode, field: string) {\r\n        return this.getCustomCls(rowNode, field, 'cell');\r\n    }\r\n\r\n    getRealColWidth(currentCol: TreeTableColumn) {\r\n        if (this.columns && this.columns.length && this.fitColumns) {\r\n            const colWidthTotal = this.columns.reduce((r, c) => {\r\n                return r + (this.columnIsVisible(c) && (r.field !== NODES_PAGER_COLUMN_FIELD  || r.fixedWidth)? c.width : 0);\r\n            }, 0);\r\n\r\n            if (this.columnIsVisible(currentCol)) {\r\n                if ( currentCol.field !== NODES_PAGER_COLUMN_FIELD &&  !currentCol.fixedWidth) {\r\n                    return (currentCol.width / colWidthTotal * 100).toFixed(2) + '%';\r\n                } else {\r\n                    return (currentCol.width || 120) + 'px';\r\n                }\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        return currentCol.width + 'px';\r\n    }\r\n\r\n    @HostListener('window:resize')\r\n    onResized() {\r\n        this.resizeSer.windowResized();\r\n    }\r\n\r\n    private setRightFixedColumnShadow() {\r\n        if (this.psRef && this.psRef.directiveRef) {\r\n            const ps = (this.psRef.directiveRef as any).instance;\r\n            if (!ps) {\r\n                return;\r\n            }\r\n            const { containerWidth, scrollbarXLeft, contentWidth } = ps;\r\n            if (containerWidth + scrollbarXLeft < contentWidth) {\r\n\r\n                const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n                const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n                if (fixedRightColumns && fixedRightColumns.length) {\r\n                    const fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n                    const rightCSSRule = `${fixedRightCssRuleKey}{\r\n                        box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n                    }`;\r\n\r\n                    this.utils.appendCssRules([rightCSSRule], this.styleElement.sheet);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFixedColumnShadow(x, e) {\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n        let fixedLeftCssRuleKey = '';\r\n        let fixedRightCssRuleKey = '';\r\n        let leftCSSRule = '';\r\n        let rightCSSRule = '';\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            const lastFixedLeftColumn = fixedLeftColumns[fixedLeftColumns.length - 1];\r\n            fixedLeftCssRuleKey = `${ruleName} [field=\"${lastFixedLeftColumn.field}\"]::after`;\r\n            leftCSSRule = `${fixedLeftCssRuleKey}{\r\n                box-shadow:#d9d9d9 12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n            rightCSSRule = `${fixedRightCssRuleKey}{\r\n                box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n\r\n        if (x === 0) {\r\n            // ç§»é¤å·¦ä¾§åºå®åé´å½±æ ·å¼\r\n            if (fixedLeftCssRuleKey) {\r\n                this.utils.removeCssRule(fixedLeftCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else if ((x + e.srcElement.offsetWidth).toFixed() == e.srcElement.scrollWidth) {\r\n            // ç§»é¤å³ååºå®åé´å½±æ ·å¼\r\n            if (fixedRightCssRuleKey) {\r\n                this.utils.removeCssRule(fixedRightCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else {\r\n            // æ·»å å·¦å³åºå®åæ ·å¼\r\n            const arr = [];\r\n            if (leftCSSRule) {\r\n                arr.push(leftCSSRule);\r\n            }\r\n\r\n            if (rightCSSRule) {\r\n                arr.push(rightCSSRule);\r\n            }\r\n\r\n            this.utils.appendCssRules(arr, this.styleElement.sheet);\r\n        }\r\n    }\r\n\r\n    onScrollX(e: any) {\r\n        if (this.showHeader && this.headerBox) {\r\n            const x = e.srcElement.scrollLeft;\r\n            this.state.scrollX = x;\r\n            // this.renderer.setStyle(this.headerBox.nativeElement.querySelector('table'), 'transform', `translate3d(-${x}px, 0px, 0px)`);\r\n            this.headerBox.nativeElement.scrollLeft = x;\r\n\r\n            this.setFixedColumnShadow(x, e);\r\n        }\r\n    }\r\n\r\n    onScrollY(e: any) {\r\n        if (this.virtualized) {\r\n            const scrollTop = e.target.scrollTop;\r\n            this.renderData(scrollTop);\r\n        }\r\n    }\r\n\r\n    private renderData(scrolltop: number) {\r\n        const { data, topHideHeight, bottomHideHeight } = this.scrollLoader.getRowNodes(scrolltop);\r\n        this.state.scrollY = scrolltop;\r\n        this.serializedValue = data;\r\n        this.topHideHeight = topHideHeight;\r\n        this.bottomHideHeight = bottomHideHeight;\r\n\r\n        this.detectChanges();\r\n        this.setNewColumnsWidth();\r\n    }\r\n\r\n    onSearchValueChange($event) {\r\n        if (!$event) {\r\n            this.onClearSearchValue();\r\n        }\r\n\r\n        this.searchValueChange.emit(this.searchData);\r\n    }\r\n\r\n    onClearSearchValue() {\r\n        this.searchData.value = '';\r\n        this.state.searched = false;\r\n        this.clearSearchValue.emit();\r\n    }\r\n\r\n    onCellClick(event: Event, col: any, node: any) {\r\n        this.cellClick.emit({ event, col, node });\r\n    }\r\n\r\n    trackByFn(index, rowNode) {\r\n        return rowNode.id;\r\n    }\r\n    /**\r\n     * æ ¼å¼åæ°æ®\r\n     */\r\n    formatData(col: any, data: any, formatter: any) {\r\n        // const val = this.utils.getValue(field, data, true );\r\n        const val = this.getNodeText(col, data);\r\n        if (formatter && formatter.type === 'timeago') {\r\n            if (!formatter.options) {\r\n                formatter.options = { locale: this.localeService.localeId}\r\n            } else {\r\n                if (!formatter.options.locale) {\r\n                    formatter.options.locale = this.localeService.localeId;\r\n                }\r\n            }\r\n        }\r\n        return this.colFormatSer.format(val, data, formatter, {locale: this.localeService.localeId });\r\n    }\r\n\r\n    columnsChanged() {\r\n        this.checkColumnOption();\r\n        this.detectChanges();\r\n    }\r\n\r\n    private ttc2columns(list: QueryList<TreeTableColumnDirective>) {\r\n        return list.map((n: TreeTableColumnDirective) => {\r\n            return {\r\n                field: n.field,\r\n                title: n.title,\r\n                align: n.align,\r\n                hAlign: n.hAlign,\r\n                width: n.width,\r\n                formatter: n.formatter\r\n            };\r\n        });\r\n    }\r\n\r\n    private reSetSize() {\r\n        if (this.fit) {\r\n            const parentEl = this.el.nativeElement.parentNode;\r\n            this.setWidth(parentEl.offsetWidth)\r\n            this.height = parentEl.offsetHeight;\r\n\r\n            // å¦æå¨ä½¿ç¨æ¶ï¼ä¸ºç»ä»¶è®¾ç½®çé«åº¦ï¼åä»¥æ­¤å¼ä¸ºåï¼ä»æ¯æ åºå®å¼ ï¼ä¸æ¯æ ç¾åæ¯\r\n            if (this.el.nativeElement.style.height) {\r\n                let h = this.el.nativeElement.style.height;\r\n                if (h.indexOf('px') > -1) {\r\n                    h = parseInt(h.replace('px', ''), 10);\r\n                    if (h > 0) {\r\n                        this.height = h;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderVirtualRowNodes(nodePosY = null) {\r\n        if (this.virtualized) {\r\n            const scrollY = nodePosY !== null && nodePosY !== undefined ? nodePosY: this.state.scrollY;\r\n            const _rownodes = this.scrollLoader.getRowNodes(scrollY);\r\n            this.serializedValue = _rownodes.data;\r\n            this.topHideHeight = _rownodes.topHideHeight;\r\n            this.bottomHideHeight = _rownodes.bottomHideHeight;\r\n            this.detectChanges();\r\n\r\n            if (nodePosY !== null && nodePosY !== undefined) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop = nodePosY;\r\n                    }, 20);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSerializedValue(nodePosY: any = null) {\r\n        this.serializedValue = [];\r\n        this.searchHandle.allNodes = [];\r\n        this.state.rowNodes = [];\r\n\r\n        this.serializeNodes(null, this.data, 0, true);\r\n        if (this.virtualized && this.fixedHeader) {\r\n            this.renderVirtualRowNodes(nodePosY);\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n            this.detectChanges();\r\n            // if (emitChanges) {\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å°æ èç¹æ°æ®åºååä¸ºRowNode\r\n     * @param parent ç¶çº§èç¹\r\n     * @param nodes æ èç¹éå\r\n     * @param level çº§å«\r\n     * @param visible æ¯å¦å¯è§\r\n     */\r\n    serializeNodes(parent: TreeNode, nodes: TreeNode[], level: number, visible: boolean, parentIds?: any[]) {\r\n        if (nodes && nodes.length) {\r\n\r\n            if (!nodes[0].data) {\r\n                return;\r\n            }\r\n\r\n            nodes.forEach((node, index) => {\r\n                node.parent = parent;\r\n\r\n                if (!node.hasOwnProperty('selectable')) {\r\n                    node.selectable = true;\r\n                }\r\n\r\n                if (!node.hasOwnProperty('showIcon')) {\r\n                    node.showIcon = true;\r\n                }\r\n\r\n                if (this.onlySelectLeaf === 'yes' && node.selectable) {\r\n                    node.selectable = !!node.leaf;\r\n                }\r\n                const keyid = node.data[this.idField];\r\n                node.id = keyid;\r\n                const isSelected = this.findIndexInSelection(node) > -1;\r\n\r\n                const isChecked = this.findIndexInCheckeds(node) > -1;\r\n                const isLast = index === nodes.length - 1;\r\n                const isFirst = index === 0;\r\n                let parents = [];\r\n                let parentRn = null;\r\n                if (parent) {\r\n                    const parentID = parent.data[this.idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                    parentRn = this.state.rowNodes.find(n => n.id === parent.id);\r\n                }\r\n\r\n                const rowNode: RowNode = {\r\n                    id: keyid,\r\n                    node,\r\n                    parent,\r\n                    level,\r\n                    visible: visible && (parent ? parent.expanded : true),\r\n                    isSelected,\r\n                    isChecked,\r\n                    parents,\r\n                    parentRowNode: parentRn,\r\n                    index: this.state.rowNodes.length,\r\n                    last: isLast,\r\n                    first: isFirst\r\n                };\r\n                // this.serializedValue.push(rowNode);\r\n                this.state.rowNodes.push(rowNode);\r\n                this.serializeNodes(node, node.children, level + 1, rowNode.visible, parents);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¤æ­æå®çèç¹æ¯å¦è¢«éä¸­\r\n     * @param node æ èç¹\r\n     */\r\n    isSelected(node: TreeNode): boolean {\r\n        if (this.singleSelect) {\r\n            if (node && this.selectedRow) {\r\n                return node.data[this.idField] === this.selectedRow.data[this.idField];\r\n            }\r\n            return false;\r\n        } else {\r\n            if (this.selections && this.selections.length) {\r\n                return this.selections.findIndex(n => n.data[this.idField] === node.data[this.idField]) > -1;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    /** å¤æ­å½åèç¹çé©éç¶æ */\r\n    isChecked(node: TreeNode): boolean {\r\n        if (node && this.checkeds) {\r\n            if (this.checkeds instanceof Array) {\r\n                return this.checkeds.findIndex((v) => {\r\n                    return v.data[this.idField] === node.data[this.idField];\r\n                }) > -1;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    private unSelectedCurrentRowEmit() {\r\n        const currSelected = this.selectedRow;\r\n        if (currSelected) {\r\n            this.nodeUnSelect.emit({ node: currSelected, type: 'row', instance: this });\r\n        }\r\n    }\r\n\r\n    private _singleSelectNode(e: SelectEventArgs) {\r\n\r\n        this.clearSelections();\r\n        this.selectedRow = e.rowNode.node;\r\n        this.selectRowIndex = e.rowIndex;\r\n        this.selections = [e.rowNode.node];\r\n        e.rowNode.isSelected = true;\r\n\r\n        if (this.showCheckbox) {\r\n            e.rowNode.isChecked = true;\r\n            this.clearCheckeds();\r\n            this.setCheckeds(e.rowNode);\r\n        }\r\n\r\n        const sp: NodeSelectedParam = {\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row',\r\n            index: e.rowIndex,\r\n            parents: e.rowNode.parents,\r\n            instance: this\r\n        };\r\n        this.nodeSelected.emit(sp);\r\n    }\r\n\r\n    private _singleUnSelectNode(e: SelectEventArgs) {\r\n        this.selectedRow = null;\r\n        this.selectRowIndex = -1;\r\n        e.rowNode.isSelected = false;\r\n        e.rowNode.isChecked = false;\r\n        this.selections = [];\r\n\r\n        this.nodeUnSelect.emit({\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row', parents: e.rowNode.parents,\r\n            instance: this\r\n        });\r\n    }\r\n\r\n    private __singleSelectNode(event: SelectEventArgs, selected = false) {\r\n        if (!selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this._singleSelectNode(event);\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this._singleUnSelectNode(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    private __multiSelectNode(event: SelectEventArgs, selected) {\r\n        const rowNode = event.rowNode;\r\n        if (selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this.singleSelectWhenMultiSelect(rowNode, true);\r\n            this.nodeSelected.emit({\r\n                originalEvent: event.originalEvent, node: rowNode.node,\r\n                type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                instance: this\r\n            });\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this.singleSelectWhenMultiSelect(rowNode, false);\r\n                this.nodeUnSelect.emit({\r\n                    originalEvent: event.originalEvent, node: rowNode.node,\r\n                    type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                    instance: this\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è¡åå»äºä»¶\r\n     */\r\n    handleRowClick(event: SelectEventArgs) {\r\n        const rowNode = event.rowNode;\r\n        rowNode.node['elementRef'] = event.originalEvent.target;\r\n        const selected = this.isSelected(rowNode.node);\r\n\r\n        if (this.singleSelect) {\r\n            this.__singleSelectNode(event, selected);\r\n        } else {\r\n            rowNode.indeterminate = false;\r\n            if (this.onlySelectSelf) {\r\n                this.__multiSelectNode(event, !selected);\r\n            } else {\r\n                rowNode.isSelected = !selected;\r\n                this.state.rowNodes.find(n => n.id === rowNode.id).isSelected = !selected;\r\n                this.setSelections(rowNode);\r\n\r\n                const rowSelectChangeParams: NodeSelectedParam = {\r\n                    originalEvent: event.originalEvent, node: rowNode.node,\r\n                    type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                    instance: this\r\n                };\r\n\r\n                if (rowNode.isSelected) {\r\n                    this.nodeSelected.emit(rowSelectChangeParams);\r\n                } else {\r\n                    this.nodeUnSelect.emit(rowSelectChangeParams);\r\n                }\r\n\r\n\r\n                if (this.checkOnSelect) {\r\n                    rowNode.isChecked = !selected;\r\n                    this.state.rowNodes.find(n => n.id === rowNode.id).isChecked = !selected;\r\n                    this.setCheckeds(rowNode);\r\n                    const nodes = this.cascadeNodes(rowNode, rowNode.isChecked);\r\n                    this.ttService.onChangeCheckboxStatus(rowNode);\r\n\r\n                    if (rowNode.isChecked) {\r\n                        this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    } else {\r\n                        this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if (this.checkOnSelect) {\r\n                const ids = this.checkeds.map(tn => tn.id);\r\n                this.checkValues = ids;\r\n                this.checkValuesChange.emit(ids);\r\n            }\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * å¸¦æcheckbox çåé\r\n     * @param rowNode å½åèç¹\r\n     */\r\n    private singleSelectWhenMultiSelect(rowNode: RowNode, flag: boolean) {\r\n        if (this.checkOnSelect) {\r\n            rowNode.isChecked = flag;\r\n            this.cascadeNodes(rowNode, rowNode.isChecked);\r\n            this.setCheckeds(rowNode);\r\n\r\n            this.ttService.onChangeCheckboxStatus(rowNode);\r\n\r\n            if (rowNode.isChecked) {\r\n                this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            } else {\r\n                this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            }\r\n        }\r\n\r\n        this.clearSelections();\r\n\r\n        if (this.onlySelectSelf) {\r\n            this.selectedRow = rowNode.node;\r\n        }\r\n        rowNode.isSelected = flag;\r\n        this.setSelections(rowNode);\r\n    }\r\n\r\n    private selectWhenChecked(rowNode: RowNode, flag: boolean, event: any) {\r\n        if (rowNode.node.selectable) {\r\n            rowNode.isChecked = flag;\r\n        }\r\n        this.setCheckeds(rowNode, false);\r\n        if (this.selectOnCheck) {\r\n            if (this.onlySelectSelf) {\r\n                if (flag || (this.selectedRow && this.selectedRow.id === rowNode.id)) {\r\n                    this.clearSelections();\r\n                }\r\n            }\r\n\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.clearCheckeds();\r\n            }\r\n            if (rowNode.node.selectable) {\r\n                rowNode.isSelected = flag;\r\n            }\r\n            this.setSelections(rowNode);\r\n\r\n            this.state.rowNodes.find(n => n.id === rowNode.id).isSelected = flag;\r\n\r\n            if (rowNode.isSelected) {\r\n                this.nodeSelected.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            } else {\r\n                this.nodeUnSelect.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            }\r\n        }\r\n    }\r\n\r\n    private isInArray(rowNode: RowNode, items: TreeNode[]) {\r\n        if (items && items.length === 0) {\r\n            return false;\r\n        }\r\n        return items.findIndex(i => i.data[this.idField] === rowNode.id) > -1;\r\n    }\r\n\r\n    private setSelections(rowNode: RowNode) {\r\n        if (rowNode.isSelected) {\r\n            if (!this.selections) {\r\n                this.selections = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.selections)) {\r\n                // this.selections = [...this.selections, rowNode.node];\r\n                this.selections.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.selections) {\r\n                const i = this.selections.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.selections.splice(i, 1);\r\n                }\r\n                // this.selections = this.selections.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setCheckeds(rowNode: RowNode, updated = true) {\r\n        if (rowNode.isChecked) {\r\n            if (!this.checkeds) {\r\n                this.checkeds = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.checkeds)) {\r\n                this.checkeds.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.checkeds) {\r\n                const i = this.checkeds.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.checkeds.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (updated) {\r\n            this.checkeds = [ ...this.checkeds];\r\n        }\r\n    }\r\n\r\n    private getDiffrentData(data: TreeNode[]) {\r\n        if (data.length) {\r\n            const _nodes = [];\r\n            data.forEach(n => {\r\n                if (_nodes.findIndex(t => t.data[this.idField] === n.data[this.idField]) === -1) {\r\n                    _nodes.push(n);\r\n                }\r\n            });\r\n            return _nodes;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private cascadeCheckedNode(rowNode: RowNode, checked: boolean, sync = false): TreeNode[] {\r\n        const nodes: TreeNode[] = [];\r\n        if (rowNode.node.selectable) {\r\n            rowNode.isChecked = checked;\r\n        }\r\n        this.setCheckeds(rowNode, false);\r\n        if (this.selectOnCheck) {\r\n            if (sync) {\r\n                const status = this.isIndeterminate(rowNode) !== 2;\r\n                checked = status ? checked: false;\r\n            }\r\n\r\n            if (rowNode.node.selectable) {\r\n                rowNode.isSelected = checked;\r\n                this.setSelections(rowNode);\r\n            }\r\n        }\r\n        if (!this.isInArray(rowNode, nodes)) {\r\n            nodes.push(rowNode.node);\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     * @param node å½åèç¹\r\n     * @param checked éä¸­ç¶æ\r\n     * è¿ååå½±åçè¡\r\n     */\r\n    propagateSelectionDown(rowNode: RowNode, checked: boolean) {\r\n        let nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        if (this.cascadeCheck && this.cascadeDown && rowNode.node.children && rowNode.node.children.length) {\r\n            rowNode.node.children.forEach((v, i) => {\r\n                const rn = this.state.rowNodes.find((row: RowNode) => row.id === v.data[this.idField]);\r\n                if (rn) {\r\n                    rn.indeterminate = false;\r\n                    if (rn.node.selectable) {\r\n                        rn.isChecked = checked;\r\n                    }\r\n                    nodes = nodes.concat(this.propagateSelectionDown(rn, checked));\r\n                    this.ttService.onChangeCheckboxStatus(rn);\r\n                }\r\n            });\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     */\r\n    propagateSelectionUp(rowNode: RowNode, checked: boolean) {\r\n        const nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        if (this.cascadeCheck && this.cascadeUp && rowNode.node.parent) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                const rns: RowNode[] = [];\r\n                rowNode.parents.forEach((n, i) => {\r\n                    const rn = this.findRowNode(n);\r\n                    if (rn && rn.node.selectable) {\r\n                        // rn.isChecked = checked;\r\n                        const checkedNodes = this.cascadeCheckedNode(rn, checked, true);\r\n                        if (checkedNodes.length) {\r\n                            nodes.push(checkedNodes[0]);\r\n                        }\r\n                        rns.push(rn);\r\n                    }\r\n                });\r\n\r\n                rns.reverse().forEach(rn => {\r\n                    this.updateCheckboxStatus(rn);\r\n                });\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    // èç¹ç¶æï¼éä¸­ï¼å¾éï¼åæ­¥æ´æ°\r\n    private updateNodeStatus() {\r\n        if (this.state.searched) {\r\n            const rowNodes = this.state.searchRowNodes;\r\n            if (!rowNodes) {\r\n                return;\r\n            }\r\n            rowNodes.forEach(rn => {\r\n                const checkedItem: RowNode = this.state.rowNodes.find(n => n.id === rn.id);\r\n\r\n                const chked = checkedItem ? checkedItem.isChecked : false;\r\n                rn.indeterminate = false;\r\n                rn.isChecked = chked;\r\n\r\n                if (this.selectOnCheck) {\r\n                    if (checkedItem.isSelected != rn.isChecked) {\r\n                        checkedItem.isSelected = checkedItem.isChecked;\r\n                    }\r\n                    rn.isSelected = checkedItem.isSelected;\r\n                }\r\n            });\r\n        } else {\r\n            if (this.selectOnCheck) {\r\n                this.state.rowNodes.forEach(rn => {\r\n                    if (this.onlySelectSelf) {\r\n                        if (!this.selections || !this.selections.length ) {\r\n                            rn.isSelected = false;\r\n                        } else {\r\n                            if (this.selections[0].id === rn.id) {\r\n                                rn.isSelected = true;\r\n                            } else {\r\n                                rn.isSelected = false;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (rn.isSelected != rn.isChecked) {\r\n                            rn.isSelected = rn.isChecked;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * çº§èéæ©èç¹\r\n     * @param rowNode å½åèç¹\r\n     * @param checked æ¯å¦é©é\r\n     */\r\n    private cascadeNodes(rowNode: RowNode, checked: boolean) {\r\n        let checkedNodes = this.propagateSelectionDown(rowNode, checked);\r\n        checkedNodes = checkedNodes.concat(this.propagateSelectionUp(rowNode, checked));\r\n        checkedNodes = this.getDiffrentData(checkedNodes);\r\n\r\n        this.updateNodeStatus();\r\n\r\n        this.updateAllCheckboxStatus();\r\n\r\n        return checkedNodes.filter(n => {\r\n            return n.selectable;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * è¡Checkbox éä¸­ååäºä»¶\r\n     * @param event é¼ æ ç¹å»äºä»¶å¯¹è±¡\r\n     * @param rowNode å½åæ èç¹\r\n     */\r\n    toggleNodeWithCheckbox(event: Event, rowNode: RowNode, checked: boolean): any {\r\n        this.state.rowNodes.find(n => n.id === rowNode.id).isChecked = checked;\r\n        rowNode.indeterminate = false;\r\n\r\n        const data = this.cascadeNodes(rowNode, checked);\r\n\r\n        this.ttService.onChangeCheckboxStatus(rowNode);\r\n        if (checked) {\r\n            this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        } else {\r\n            this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        }\r\n\r\n        this.selectWhenChecked(rowNode, checked, event);\r\n\r\n        if (this.onlySelectSelf && checked) {\r\n            this.selectedRow = rowNode.node;\r\n        }\r\n\r\n        this.checkeds = [...this.checkeds];\r\n        this.detectChanges();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * å¨é\r\n     * @param event é¼ æ äºä»¶å¯¹è±¡\r\n     * @param checked æ¯å¦éä¸­\r\n     */\r\n    toggleNodesWithCheckbox(event: Event, checked: boolean) {\r\n        if (checked) {\r\n            if (this.data && this.data.length) {\r\n                this.checkAllNodes({ originalEvent: event, checked, instance: this });\r\n            }\r\n        } else {\r\n            this.selections = null;\r\n            this.unCheckAllNodes({ originalEvent: event, checked, instance: this});\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    /** æ´æ°å¨écheckbox çç¶æ */\r\n    private updateAllCheckboxStatus() {\r\n        if (this['checkall_CLICKED']) {\r\n            return;\r\n        }\r\n\r\n        const status = this.isIndeterminate();\r\n        if (this.showCheckAll && !this.singleSelect && this.showCheckbox) {\r\n            if (status !== undefined) {\r\n                if (this.headerCheckboxCmp) {\r\n                    this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = status === 2;\r\n                    this.headerCheckboxCmp.checked = status === 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ´æ°ç¶èç¹checkbox éä¸­ç¶æ */\r\n    private updateParentCheckboxStatus(rowNode: RowNode) {\r\n        const pNodes = [];\r\n        rowNode.parents.forEach(rnid => {\r\n            const rn = this.findRowNode(rnid);\r\n            if (rn) {\r\n                pNodes.push(rn);\r\n            }\r\n        });\r\n\r\n        pNodes.reverse().forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n    }\r\n    /** æ´æ°Nä¸ªç¶èç¹å¤éæ¡ä¸­çéä¸­ç¶æ */\r\n    private updateParentsCheckStatus(parentIds: any) {\r\n        let pids = [];\r\n        parentIds.forEach((ids: any) => {\r\n            pids = [...pids, ...ids];\r\n        });\r\n\r\n        pids = Array.from(new Set(pids));\r\n\r\n        const pRowNodes = this.findRowNodes(pids);\r\n\r\n        pRowNodes.sort((r, n) => {\r\n            return n.level - r.level;\r\n        }).forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n\r\n    }\r\n\r\n    /** æ´æ°èç¹ä¸­checkboxçç¶æ */\r\n    private updateCheckboxStatus(rowNode: RowNode) {\r\n        const status = this.isIndeterminate(rowNode);\r\n        if (status !== undefined && rowNode.node.selectable) {\r\n            rowNode.indeterminate = status === 2;\r\n            this.ttService.onChangeCheckboxStatus(rowNode);\r\n        }\r\n    }\r\n\r\n    /** å¤æ­æå®èç¹checkbox çç¶æ\r\n     * 0ï¼å¨ä¸éï¼ 1ï¼ å¨é¨éä¸­ï¼ 2ï¼æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private isIndeterminate(rowNode?: RowNode): any {\r\n        const status = this.getCheckboxStatus(rowNode);\r\n        if (status !== undefined) {\r\n            let checked = false;\r\n            if (status === 2) {\r\n                checked = false;\r\n            } else {\r\n                checked = !!status;\r\n            }\r\n            if (rowNode && rowNode.node.selectable) {\r\n                rowNode.isChecked = checked;\r\n                this.setCheckeds(rowNode, false);\r\n            }\r\n        }\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * è¿åç¶çº§èç¹checkbox çç¶æã0ï¼ä¸éä¸­ï¼ 1ï¼ éä¸­ï¼ 2ï¼ä¸ç¡®å®\r\n     * @param rowNode ç¶çº§èç¹ï¼ä¸ºç©ºæ¶è¿åå¨écheckbox çç¶æ\r\n     */\r\n    private getCheckboxStatus(rowNode?: RowNode) {\r\n        let uncheckedLength = 0;\r\n        let checkedLength = 0;\r\n        let len = 0;\r\n        let childNodes = [];\r\n        if (rowNode) {\r\n            childNodes = rowNode.node.children|| [];\r\n\r\n            if (!childNodes.filter(n => n.selectable).length) {\r\n                return rowNode.isChecked;\r\n            }\r\n\r\n        } else {\r\n            childNodes = this.state.rowNodes;\r\n        }\r\n        len = childNodes.length;\r\n\r\n        childNodes.forEach(n => {\r\n            let rn = n;\r\n            if (rowNode) {\r\n                rn = this.findRowNode(n.data[this.idField]);\r\n            }\r\n            if (rn && !rn.indeterminate) {\r\n                if (rn.isChecked) {\r\n                    checkedLength++;\r\n                } else {\r\n                    uncheckedLength++;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (len === 0) {\r\n            return undefined;\r\n        }\r\n        let flag = 0;\r\n        if (uncheckedLength === len) {\r\n            flag = 0;\r\n        } else {\r\n            if (checkedLength === len) {\r\n                flag = 1;\r\n            } else {\r\n                flag = 2;\r\n            }\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    private findIndexIn(node: TreeNode, treeNodes: TreeNode[]) {\r\n        let index = -1;\r\n        if (treeNodes && treeNodes.length) {\r\n            index = treeNodes.findIndex((v, i) => {\r\n                return this.equals(v, node);\r\n            });\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInCheckeds(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.checkeds);\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInSelection(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.selections);\r\n    }\r\n\r\n    /** å¯¹æ¯ä¸¤ä¸ªèç¹æ¯å¦åä¸ä¸ªèç¹ */\r\n    equals(target: TreeNode, source: TreeNode): boolean {\r\n        return target.data[this.idField] === source.data[this.idField];\r\n    }\r\n\r\n    /**\r\n     * å±å¼ææèç¹\r\n     * @param rowNode å±å¼æ­¤èç¹ä¸çææèç¹ï¼å¦æä¸ºç©ºï¼åå±å¼ææèç¹\r\n     * @param deep è®¾ç½®ä¸ºtrue æ¶ï¼å½åèç¹ä¸çææå­èç¹å¨é¨å±å¼, é»è®¤ false\r\n     * @param childrenEmptyEmitExpand  å½æ²¡æå­èç¹æ¯å¦è§¦åå±å¼äºä»¶ï¼é»è®¤ä¸º true\r\n     */\r\n    toggleExpand(treeNode?: TreeNode, deep = false, childrenEmptyEmitExpand = true) {\r\n        if (treeNode) {\r\n            treeNode.expanded = !treeNode.expanded;\r\n            this.updateNodeProperty(treeNode.id, {expanded: treeNode.expanded});\r\n            this.toggleVisible(treeNode);\r\n\r\n            if (this.virtualized) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    this.renderVirtualRowNodes();\r\n                }\r\n            }\r\n\r\n            if (treeNode.expanded) {\r\n                if (childrenEmptyEmitExpand || (treeNode.children && treeNode.children.length)) {\r\n                    this.expand.emit(treeNode);\r\n                } else {\r\n                    treeNode.expanded = !treeNode.expanded;\r\n                    return;\r\n                }\r\n            } else {\r\n                this.collapse.emit(treeNode);\r\n            }\r\n\r\n            if (deep) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    treeNode.children.forEach((row, i) => {\r\n                        this.toggleExpand(row, deep, childrenEmptyEmitExpand);\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n\r\n            if (this.data && this.data.length) {\r\n                this.data.forEach((row: any) => {\r\n                    this.toggleExpand(row);\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        this.setNewColumnsWidth();\r\n\r\n    }\r\n\r\n    private toggleVisible(treeNode: TreeNode) {\r\n        const rowNode = this.findRowNode(treeNode.id);\r\n        if (rowNode) {\r\n            const rid = rowNode.id;\r\n            const setRowVisible = (rn, visible) => {\r\n                const pid = rn.parent.data[this.idField];\r\n                const rnParent = this.findRowNode(pid);\r\n                if (rnParent) {\r\n                    rn.visible = rnParent.visible && rnParent.node.expanded;\r\n                } else {\r\n                    rn.visible = visible;\r\n                }\r\n\r\n                const _r = this.serializedValue.find(n => n.id === rn.id);\r\n                if (_r) {\r\n                    _r.visible = rn.visible;\r\n                }\r\n            };\r\n\r\n            this.state.rowNodes.filter(rn => rn.parents.indexOf(rid) > -1).forEach(rn => {\r\n                setRowVisible(rn, treeNode.expanded);\r\n            });\r\n\r\n            \r\n            // #392512 \r\n            const rowNodes = this.getCurrentAllRowNodes();\r\n            if (rowNodes) {\r\n                rowNodes.filter(rn => rn.parents.indexOf(rid) > -1).forEach(rn => {\r\n                    setRowVisible(rn, treeNode.expanded);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹\r\n     * emit: è§¦åå±å¼äºä»¶\r\n     * render: æ°æ®éæ°å è½½\r\n     */\r\n    expandNode(id: string, emit = true, render = true) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = true;\r\n                this.toggleVisible(rowNode.node);\r\n\r\n                if (render) {\r\n                    if (this.virtualized) {\r\n                        if (rowNode.node.children && rowNode.node.children.length) {\r\n                            this.renderVirtualRowNodes();\r\n                        }\r\n                    } else {\r\n                        this.detectChanges();\r\n                    }\r\n                }\r\n\r\n                if (emit) {\r\n                    this.expand.emit(rowNode.node);\r\n                }\r\n\r\n                this.setNewColumnsWidth();\r\n\r\n            } else {\r\n                this.writeConsole('Con\\'t find tree node widh id:' + id, 'error');\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å±å¼ææèç¹ */\r\n    expandAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = true;\r\n            row.visible = true;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes();\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n        this.setNewColumnsWidth();\r\n        this.expandAllNodes.emit();\r\n        this.detectChanges();\r\n    }\r\n\r\n    expandNodes(id: string) {\r\n        // const rowNode = this.findRowNode(id);\r\n        // const rootNode = this.getRoot(id);\r\n        // if (rowNode) {\r\n        //     const treeNode = rowNode.node;\r\n        //     treeNode.expanded = true;\r\n        //     rowNode.visible = true;\r\n        //     const parents = rowNode.parents;\r\n\r\n        //     this.state.rowNodes.filter(n => n.parents.indexOf(rootNode.id) > -1).forEach(r => {\r\n        //         if (parents.indexOf(r.id) > -1) {\r\n        //             r.visible = true;\r\n        //             r.node.expanded = true;\r\n        //         }\r\n        //     });\r\n\r\n\r\n        //     this.detectChanges();\r\n        // }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹ä¸çææèç¹ */\r\n    expandAllNodesBy(rowNode: any) {\r\n        if (rowNode) {\r\n            const treeNode = rowNode.node;\r\n            treeNode.expanded = true;\r\n            rowNode.visible = true;\r\n\r\n            this.state.rowNodes.filter(n => n.parents.indexOf(rowNode.id) > -1).forEach(r => {\r\n                r.visible = true;\r\n                r.node.expanded = true;\r\n            });\r\n\r\n            this.detectChanges();\r\n            this.setNewColumnsWidth();\r\n        }\r\n    }\r\n\r\n    /** æå æå®èç¹ */\r\n    collapseNode(id: string) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = false;\r\n                this.toggleVisible(rowNode.node);\r\n                this.detectChanges();\r\n                this.setNewColumnsWidth();\r\n                this.collapse.emit(rowNode.node);\r\n            } else {\r\n                this.writeConsole('Con\\'t find tree node widh id:' + id, 'error');\r\n            }\r\n        }\r\n    }\r\n    /** æå ææèç¹ */\r\n    collapseAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = false;\r\n            row.visible = !row.parent;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes(0);\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n\r\n\r\n        this.collapseAllNodes.emit();\r\n        this.detectChanges();\r\n        this.setNewColumnsWidth();\r\n    }\r\n\r\n    getContainerOffset() {\r\n        const rect = this.containerElement.getBoundingClientRect();\r\n        return {\r\n            left: rect.left + document.body.scrollLeft,\r\n            top: rect.top + document.body.scrollTop\r\n        };\r\n    }\r\n\r\n    onColumnResizeBegin(event) {\r\n        const containerLeft = Math.round(this.getContainerOffset().left);\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerElement.scrollLeft);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        if (this.resizableColumns) {\r\n            const containerLeft = this.getContainerOffset().left;\r\n            this.renderer.addClass(this.containerElement, 'ui-unselectable-text');\r\n            this.resizerHelperVC.nativeElement.style.height = this.containerElement.offsetHeight + 'px';\r\n            this.resizerHelperVC.nativeElement.style.top = 0 + 'px';\r\n            this.resizerHelperVC.nativeElement.style.left = (event.pageX - containerLeft) + 'px';\r\n\r\n            this.resizerHelperVC.nativeElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    onColumnResizeEnd(event: any, column: any) {\r\n        if (!this.resizerHelperVC.nativeElement.offsetLeft) {\r\n            return;\r\n        }\r\n\r\n        // åç§»é\r\n        const delta = this.resizerHelperVC.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        // åå®½\r\n        const columnWidth = column.offsetWidth;\r\n        // æ°å®½åº¦\r\n        const newColumnWidth = columnWidth + delta;\r\n        // æå°å®½åº¦\r\n        const minWidth = column.style.minWidth || 15;\r\n\r\n        let resizeColumnIndex = -1;\r\n        if (column.id) {\r\n            resizeColumnIndex = this.columns.findIndex(n => n.id === column.id);\r\n        } else {\r\n            const colField = column.getAttribute('field');\r\n            if (colField) {\r\n                resizeColumnIndex = this.columns.findIndex(n => n.field === colField);\r\n            }\r\n        }\r\n\r\n\r\n        if (!this.fitColumns) {\r\n            this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n            this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n\r\n            if (this.columns[resizeColumnIndex]) {\r\n                this.columns[resizeColumnIndex].width = newColumnWidth;\r\n            }\r\n\r\n            this.sortColumnsByFixed(false);\r\n\r\n            this.setCellWidthCss(this.allColumnsWidth(), 0, []);\r\n\r\n            // this.setTableWidth(this.allColumnsWidth());\r\n\r\n            // // update css.\r\n            // const _colInfo = this.columns[resizeColumnIndex];\r\n            // if (_colInfo) {\r\n            //     const ruleName = this.columnCssName(_colInfo);\r\n            //     const stylecss = ruleName + '{width:' + newColumnWidth + 'px}';\r\n            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            // }\r\n\r\n            // const nextColumn = this.columns[resizeColumnIndex + 1];\r\n            // if (nextColumn && nextColumn.fixed) {\r\n            //     const ruleName = this.columnCssName(nextColumn);\r\n            //     const stylecss = ruleName + '{' + nextColumn.fixed + ':' + nextColumn[nextColumn.fixed] + 'px}';\r\n            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            // }\r\n\r\n        } else {\r\n            if (newColumnWidth > minWidth) {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    const nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    const nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > nextColumnMinWidth) {\r\n                        this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resizerHelperVC.nativeElement.style.display = 'none';\r\n        this.renderer.removeClass(this.containerElement, 'ui-unselectable-text');\r\n        this.psRef.directiveRef.update();\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth?: number) {\r\n        if (table) {\r\n            const colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if (colGroup) {\r\n                const col = colGroup.children[resizeColumnIndex];\r\n                const nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n\r\n\r\n                if (nextCol) {\r\n                    if (nextColumnWidth && this.fitColumns) {\r\n                        nextCol.style.width = nextColumnWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error('Scrollable tables require a colgroup to support resizable columns');\r\n            }\r\n        }\r\n    }\r\n\r\n    onSearch() {\r\n        this.state.searchRowNodes = null;\r\n        this.state.searched = !!this.searchData.value;\r\n        if (this.searchData.value) {\r\n            this.searchData.value = this.searchData.value.trim();\r\n        }\r\n        this.search.emit(this.searchData);\r\n    }\r\n\r\n    insert(node: TreeNode, parent?: TreeNode) {\r\n        if (parent) {\r\n            if (!parent.children) {\r\n                parent.children = [];\r\n            }\r\n            parent.children.push(node);\r\n\r\n            this.expandNode(parent.data[this.idField]);\r\n            this.appendNew.emit({ parent });\r\n        } else {\r\n            this.data.push(node);\r\n        }\r\n\r\n        this.updateSerializedValue();\r\n    }\r\n\r\n    append(data: { [key: string]: any }, parent?: TreeNode) {\r\n        if (data && data[this.idField]) {\r\n            this.insert({ data, id: data[this.idField] }, parent);\r\n        } else {\r\n            this.writeConsole('Please set id value.', 'warn');\r\n        }\r\n    }\r\n\r\n    private emitAppendNew(parent: TreeNode) {\r\n        if (this.virtualized) {\r\n            const nodePosY = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n            this.updateSerializedValue(nodePosY);\r\n        } else {\r\n            this.updateSerializedValue();\r\n        }\r\n\r\n    }\r\n\r\n    appendChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (nodes && nodes.length) {\r\n            if (parent) {\r\n                parent.children.push(...nodes);\r\n                this.emitAppendNew(parent);\r\n                if (emit) {\r\n                    this.appendNew.emit({ parent });\r\n                }\r\n            } else {\r\n                throw new Error('æªæ¾å°ç¶çº§èç¹');\r\n            }\r\n        } else {\r\n            this.updateSerializedValue();\r\n            this.writeConsole('æ·»å å­èç¹çæ°æ®ä¸ºç©º', 'warn');\r\n        }\r\n    }\r\n\r\n    loadChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (parent) {\r\n            parent.children = nodes || [];\r\n            this.emitAppendNew(parent);\r\n            if (emit) {\r\n                this.appendNew.emit({ parent });\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(nodeId: string) {\r\n        if (nodeId) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                // remove(this.state.rowNodes, (n) => {\r\n                //     return n.id === nodeId;\r\n                // });\r\n                if (this.selectValue === nodeId) {\r\n                    this.selectedRow = null;\r\n                    this.selectValue = null;\r\n                }\r\n\r\n                if (rowNode.parent) {\r\n                    remove(rowNode.parent.children, (n) => {\r\n                        return n.data[this.idField] === nodeId;\r\n                    });\r\n                } else {\r\n                    remove(this.state.rowNodes, (n) => {\r\n                        return n.id === nodeId;\r\n                    });\r\n\r\n                    this.data = this.data.filter(n => n.data[this.idField] !== nodeId);\r\n                }\r\n                this.updateSerializedValue();\r\n                this.detectChanges();\r\n                this.ttService.onRemove(rowNode);\r\n                this.removed.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(nodeId: string, data: { [key: string]: string }) {\r\n        if (nodeId && data) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                rowNode.node.data = extend(rowNode.node.data, data);\r\n                this.detectChanges();\r\n                this.ttService.onUpdate(rowNode);\r\n                this.updated.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNodeProperty(nodeid: string, property: { [key: string]: any } ) {\r\n        const rowNode = this.findRowNode(nodeid);\r\n        if (rowNode && property) {\r\n            Object.keys(property).forEach(k => {\r\n                rowNode.node[k] = property[k];\r\n            });\r\n        }\r\n    }\r\n\r\n    private setScorllBodyHeight() {\r\n        this.scorllBodyHeight = this.height;\r\n\r\n        if (this.showFilterBar) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - 46;\r\n        }\r\n\r\n        if(this.enableFilterRow) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - 36;\r\n        }\r\n\r\n        if (this.fixedHeader && this.showHeader) {\r\n            if (this.headerBox && (this.headerWrap || this.useGroupHeader)) {\r\n                const hh = this.headerBox.nativeElement.clientHeight;\r\n                this.scorllBodyHeight = this.scorllBodyHeight - hh;\r\n            } else {\r\n                // å®½æ¾çæ¶ï¼è¡¨å¤´é«åº¦å¢é«ï¼éè¦æå®éåå¾è¡¨å¤´é«åº¦\r\n                let _headerHeight = this.headerHeight;\r\n                const themesKey = localStorage.getItem('gsp_rtf_themSKey');\r\n                if (themesKey === 'loose' && this.headerBox) {\r\n                    _headerHeight = this.headerBox.nativeElement.getBoundingClientRect().height;\r\n                }\r\n                this.scorllBodyHeight = this.scorllBodyHeight - _headerHeight;\r\n            }\r\n        }\r\n\r\n        if (this.pagination) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - this.pagerHeight;\r\n        }\r\n\r\n\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    private setWidth(w) {\r\n        this.width = w;\r\n    }\r\n\r\n    resize(size?: { width: number, height: number }) {\r\n        if (size) {\r\n            const w = parseInt('' + size.width, 10);\r\n            const h = parseInt('' + size.height, 10);\r\n\r\n            if (this.width === w && this.height === h) {\r\n                if (this.state.scrollY) {\r\n                    this.psRef.directiveRef.scrollToY(this.state.scrollY);\r\n                }\r\n\r\n                if (this.state.scrollX) {\r\n                    this.psRef.directiveRef.scrollToX(this.state.scrollX)\r\n                }\r\n\r\n                return;\r\n            }\r\n            this.setWidth(w);\r\n            this.height = h;\r\n        }\r\n        this.setScorllBodyHeight();\r\n        if (this.data && this.data.length) {\r\n            this.renderVirtualRowNodes();\r\n        }\r\n\r\n        // setTimeout(() => {\r\n        //     if (this.psRef) {\r\n        //         this.psRef.directiveRef.update();\r\n        //     }\r\n        // }, 100);\r\n    }\r\n\r\n    loadData(data: TreeNode[]) {\r\n        if (this.showLines) {\r\n            this.isLoadNewDataSetEmpty = true;\r\n            this.data = [];\r\n            this.isLoadNewDataSetEmpty = false;\r\n        }\r\n        this.data = data;\r\n    }\r\n\r\n    empty() {\r\n        this.data = [];\r\n    }\r\n\r\n    getCurrentAllRowNodes() {\r\n        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {\r\n            return this.state.searchRowNodes || this.state.rowNodes;\r\n        } else {\r\n            return this.state.rowNodes;\r\n        }\r\n    }\r\n\r\n    clearAll(detectChanges = true): TreeTableComponent {\r\n        this.state.rowNodes.filter(rn => rn.indeterminate).forEach(rn => {\r\n            rn.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(rn);\r\n        });\r\n\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.isChecked = false;\r\n            row.isSelected = false;\r\n            row.indeterminate = false;\r\n            return row;\r\n        });\r\n\r\n\r\n        // if (this.searchData && this.searchData.value) {\r\n        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {\r\n            this.serializedValue = this.state.searchRowNodes.map((row: RowNode) => {\r\n                row.isChecked = false;\r\n                row.isSelected = false;\r\n                row.indeterminate = false;\r\n                return row;\r\n            });\r\n        }\r\n\r\n        this.checkeds = [];\r\n        this.selections = [];\r\n        this.selectedRow = undefined;\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        if (detectChanges) {\r\n            this.detectChanges();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    detectChanges(): TreeTableComponent {\r\n        this.cdRef.markForCheck();\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (!this.cdRef['destroyed']) {\r\n            this.cdRef.detectChanges();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearCheckeds(): TreeTableComponent {\r\n        if (this.checkeds && this.checkeds.length) {\r\n            this.findRowNodes(this.checkeds.map(tn => tn.data[this.idField])).forEach(rn => {\r\n                rn.isChecked = false;\r\n            });\r\n        }\r\n\r\n        this.checkeds = [];\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    clearSelections(): TreeTableComponent {\r\n\r\n        if (this.serializedValue && this.serializedValue.length) {\r\n            this.serializedValue.forEach(n => {\r\n                n.isSelected = false;\r\n            });\r\n        }\r\n\r\n        this.state.rowNodes.forEach(n => {\r\n            n.isSelected = false;\r\n        });\r\n\r\n        if (this.selections && this.selections.length) {\r\n            const nodeIds = this.selections.map(tn => tn.data[this.idField]);\r\n            this.findRowNodes(nodeIds).forEach(rn => {\r\n                rn.isSelected = false;\r\n                if (this.singleSelect) {\r\n                    rn.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.selections = undefined;\r\n        this.selectedRow = undefined;\r\n        return this;\r\n    }\r\n    /** éä¸­ç¬¬1ä¸ªå¯ä»¥éä¸­çèç¹ */\r\n    selectFirstNode() {\r\n        if (this.state.rowNodes && this.state.rowNodes.length) {\r\n            const firstCanSelectNode = this.state.rowNodes.find(n => n.node.selectable);\r\n            if (firstCanSelectNode) {\r\n                this.selectNode(firstCanSelectNode.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    private scrollToCurrentRow(id: string) {\r\n        const trId = 'rownode-' + id;\r\n        // const trEle =    document.getElementById(trId);\r\n        const trEle = this.el.nativeElement.querySelector('#' + trId) || document.getElementById(trId);\r\n        if (trEle && trEle.closest('.farris-treetable') && trEle.closest('.farris-treetable').id === this.id) {\r\n            if (!this.isElementInViewport(trEle)) {\r\n                if (trEle.scrollIntoViewIfNeeded) {\r\n                    trEle.scrollIntoViewIfNeeded();\r\n                    return true;\r\n                }\r\n                const browserInfo = this.utils.getBrowserType();\r\n                if (browserInfo.ff && this.utils.getFFVer() < 58) {\r\n                    trEle.scrollIntoView();\r\n                } else {\r\n                    trEle.scrollIntoView({ block: 'nearest', inline: 'nearest' });\r\n                }\r\n            } else {\r\n                trEle.scrollIntoView({ block: 'nearest'});\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private isElementInViewport(el) {\r\n        const containerEl = this.el.nativeElement.querySelector('.farris-treetable-body');\r\n        if (!containerEl) {\r\n            return false;\r\n        }\r\n        const container = containerEl.getBoundingClientRect();\r\n        const viewPortHeight = container.height;\r\n        const offsetTop = el.offsetTop + this.topHideHeight;\r\n        const scrollTop = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n        const top = offsetTop - scrollTop;\r\n        return  top >= 0 && top <= viewPortHeight;\r\n    }\r\n\r\n    private _scrollToNode(nodeId: string) {\r\n        this.scrollToCurrentNode(nodeId);\r\n    }\r\n\r\n    scrollToCurrentNode(nodeid = '') {\r\n        let id = nodeid;\r\n        if (!nodeid && this.selectedRow) {\r\n            id = this.selectedRow.id;\r\n        }\r\n\r\n        if (id == null || id == undefined || id == '') {\r\n            return;\r\n        }\r\n\r\n        const result = this.scrollToCurrentRow(id);\r\n        if (!result) {\r\n            const rowNode = this.findRowNode(id);\r\n            const showRowsOnePager = Math.ceil(this.scorllBodyHeight / this.rowHeight ) + 1;\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                rowNode.parents.forEach(pid => {\r\n                    this.expandNode(pid, false, false);\r\n                });\r\n            } \r\n            const rowIndex = this.state.rowNodes.filter(n => n.visible).findIndex(n => n.id === id);\r\n            if (rowIndex < showRowsOnePager) {\r\n                if (this.virtualized) {\r\n                    this.renderData(0);\r\n                }\r\n                setTimeout(() => {\r\n                    this.scrollToCurrentRow(id);\r\n                });\r\n                return;\r\n            }\r\n            const top = rowIndex * this.rowHeight;\r\n\r\n            if (this.virtualized) {\r\n                this.renderData(top - this.rowHeight);\r\n\r\n                setTimeout(() => {\r\n                    this.scrollToCurrentRow(id);\r\n                    if (this.psRef && this.psRef.directiveRef) {\r\n                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop += 1;\r\n                    }\r\n                }, 50);\r\n            } else {\r\n                this.scrollToY(top - this.rowHeight);\r\n                this.scrollToCurrentRow(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** éä¸­æå®ID çèç¹,\r\n     * detectChanges: è§¦åèå¼æ£æ¥ï¼é»è®¤ä¸º true\r\n     * gotocurrent: ä½¿ç¨éä¸­èç¹å¯è§ï¼é»è®¤ä¸º true\r\n     */\r\n    selectNode(id: string, detectChanges = true, gotocurrent = true): TreeTableComponent {\r\n        if (!id) {\r\n            return this;\r\n        }\r\n        let node = this.findRowNode(id);\r\n        const canSelect = node && node.node && node.node.selectable;\r\n        const emit = canSelect && (!this.selectedRow || (this.selectedRow && id !== this.selectedRow.id));\r\n\r\n        if (node && emit) {\r\n            node.isSelected = true;\r\n            if (this.singleSelect || this.onlySelectSelf) {\r\n                this.clearSelections();\r\n                node.isSelected = true;\r\n                this.selections = [node.node];\r\n                if (this.checkOnSelect && this.showCheckbox) {\r\n                    node.isChecked = true;\r\n                    if (this.multiSelect) {\r\n                        this.setCheckeds(node);\r\n                    } else {\r\n                        this.clearCheckeds();\r\n                        this.checkeds = [node.node];\r\n                    }\r\n\r\n                    if (this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(node);\r\n                    }\r\n                }\r\n            } else {\r\n                this.setSelections(node);\r\n            }\r\n\r\n            this.selectedRow = node.node;\r\n            this.selectNodeChangedSubject.next(id);\r\n            this.nodeSelected.emit({ node: node.node, instance: this });\r\n\r\n            if (this.serializedValue.find(n=>n.id == this.selectedRow.id)) {\r\n                this.serializedValue.find(n=>n.id == this.selectedRow.id).isSelected = true;\r\n            }\r\n\r\n            if (gotocurrent && this.fixedHeader) {\r\n                this.scrollToCurrentNode();\r\n            }\r\n            \r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n        } else {\r\n            if (!node) {\r\n                this.selectedRow = null;\r\n                this.writeConsole(`æªæ¾å°IDä¸º ${id} çæ°æ®ï¼ï¼`)\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNode(id: string, detectChanges = true) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            rowNode.isSelected = false;\r\n            if (this.singleSelect) {\r\n                this.clearSelections();\r\n                this.selectedRow = null;\r\n                rowNode.isChecked = false;\r\n                this.selections = [];\r\n            } else {\r\n                if (this.onlySelectSelf) {\r\n                    this.selections = [];\r\n                } else {\r\n                    this.setSelections(rowNode);\r\n                }\r\n            }\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n            this.nodeUnSelect.emit({ node: rowNode.node, instance: this });\r\n        } else {\r\n            this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n        }\r\n    }\r\n\r\n    /** éä¸­å¤è¡æ°æ® */\r\n    selectNodes(ids: string[], detectChanges = true, emitNodeSelected = false): TreeTableComponent {\r\n        if (ids && ids.length) {\r\n            const nodes = this.findRowNodes(ids).map(rn => {\r\n                rn.isSelected = true;\r\n                this.setSelections(rn);\r\n                return rn.node;\r\n            });\r\n\r\n            this.selections = [...this.selections];\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n\r\n            this.selectNodeChangedSubject.next(ids.join(','));\r\n            if (emitNodeSelected) {\r\n                this.nodeSelected.emit({ node: nodes, instance: this });\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNodes(ids?: string[], emit = true) {\r\n        if (ids && ids.length) {\r\n            const rownodes = this.findRowNodes(ids);\r\n            if (rownodes && rownodes.length) {\r\n                rownodes.forEach(rn => {\r\n                    rn.isSelected = false;\r\n                    this.setSelections(rn);\r\n                });\r\n                this.selections = [...this.selections];\r\n                this.detectChanges();\r\n                if (emit) {\r\n                    this.nodeUnSelect.emit({ node: rownodes.map(r => r.node), instance: this });\r\n                }\r\n            }\r\n        } else {\r\n            this.clearSelections();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * é©éæå®çèç¹\r\n     * @param updateParentCheckboxStatus: æ¯å¦æ´æ°ç¶çº§èç¹checkbox ç¶æ, é»è®¤ä¸º true\r\n     * @param detectChanges è§¦ååæ´æ£æµãé»è®¤ä¸º true\r\n     */\r\n    checkedNode(id: string, updateParentCheckboxStatus = true, detectChanges = true) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const node = this.findRowNode(id);\r\n            if (node) {\r\n                node.isChecked = true;\r\n                if (!this.isChecked(node.node)) {\r\n                    this.setCheckeds(node, false);\r\n                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(node);\r\n                    }\r\n                }\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n                this.nodeChecked.emit({ originalEvent: null, node: node.node, instance: this });\r\n            } else {\r\n                this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n            }\r\n        }\r\n    }\r\n\r\n    unCheckedNode(id: string, updateParentCheckboxStatus = true, ) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const rownode = this.findRowNode(id);\r\n\r\n            if (rownode) {\r\n                rownode.isChecked = false;\r\n                this.setCheckeds(rownode);\r\n                if (this.selectOnCheck) {\r\n                    rownode.isSelected = false;\r\n                    this.setSelections(rownode);\r\n                }\r\n                \r\n                if (this.selectedRow && this.selectedRow.id === id) {\r\n                    this.selectedRow = null;\r\n                }\r\n\r\n                if (this.singleSelect || !this.cascadeCheck) {\r\n                    this.updateNodeStatus();\r\n\r\n                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(rownode);\r\n                    }\r\n\r\n                    if (this.checkValues) {\r\n                        this.checkValues = this.checkValues.filter(n => n !== id);\r\n                        this.checkValuesChange.emit(this.checkValues);\r\n                    }\r\n\r\n                    this.detectChanges();\r\n                    this.nodeUnChecked.emit({ node: rownode, instance: this });\r\n                } else {\r\n                    const unNodes = this.cascadeNodes(rownode, false);\r\n                    this.checkeds = [...this.checkeds];\r\n                    this.checkValuesChange.emit(this.checkValues);\r\n\r\n                    this.detectChanges();\r\n                    this.nodeUnChecked.emit({ node: rownode, nodes: unNodes, instance: this });\r\n                }\r\n\r\n\r\n            } else {\r\n                this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _checkedNodes(ids: string[], checked: boolean) {\r\n        const parentIDS = [];\r\n        const nodes = this.findRowNodes(ids).map(rn => {\r\n            parentIDS.push(rn.parents);\r\n            if (rn.node.selectable) {\r\n                rn.isChecked = checked;\r\n                this.setCheckeds(rn, false);\r\n            }\r\n            return rn.node;\r\n        });\r\n        this.checkeds = [...this.checkeds];\r\n        if (this.cascadeCheck && this.cascadeUp) {\r\n            // æ´æ°ç¶èç¹å¤æ¡çéä¸­ç¶æ\r\n            this.updateParentsCheckStatus(parentIDS);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /** æ¹ééä¸­èç¹\r\n     * @param ids: id éå\r\n     * @param detectChanges: boolean  é»è®¤ä¸º true ,æ¯å¦è§¦ååæ´æ£æµ\r\n     * closeCascade:  æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *      è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     */\r\n    checkedNodes(ids: any[], detectChanges = true, emit = true, closeCascade?: boolean) {\r\n        if (this.isEnableMultiSelect()) {\r\n            if (ids && ids.length) {\r\n\r\n                const _cascade = this.cascadeCheck;\r\n                if (closeCascade && _cascade) {\r\n                    this.cascadeCheck = false;\r\n                }\r\n\r\n                const nodes = this._checkedNodes(ids, true);\r\n\r\n                if (closeCascade && _cascade) {\r\n                    // æ¢å¤çº§è\r\n                    this.cascadeCheck = true;\r\n                }\r\n\r\n                this.updateAllCheckboxStatus();\r\n\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n\r\n                if (emit) {\r\n                    this.nodeChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * åæ¶éä¸­çèç¹.\r\n     * ids: æ è¯Id æ°ç»\r\n     * closeCascade: æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *     è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     * emit: æ¯å¦è§¦ååæ¶å¾éäºä»¶ãé»è®¤ä¸º true\r\n     */\r\n    unCheckedNodes(ids: string[], closeCascade?: boolean, emit = true) {\r\n        if (ids && ids.length) {\r\n            const _cascade = this.cascadeCheck;\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = false;\r\n            }\r\n\r\n            const nodes = this._checkedNodes(ids, false);\r\n\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = true;\r\n            }\r\n            this.detectChanges();\r\n            if (emit) {\r\n                this.nodeUnChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n            }\r\n        } else {\r\n            this.clearCheckeds();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    unCheckedAndSelected(ids: string[]) {\r\n        this.unCheckedNodes(ids, true, false);\r\n        this.unSelectNodes(ids, false);\r\n    }\r\n\r\n    findRowNode(id: string): RowNode {\r\n        if (id) {\r\n            if (this.state.rowNodes) {\r\n                return this.state.rowNodes.find(n => n.id === id);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** å°å¨ v0.2.x åºå¼ï¼è¯·ä½¿ç¨ findRowNode æ¹æ³ */\r\n    findNode(id: string): RowNode {\r\n        return this.findRowNode(id);\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®å½åèç¹IDï¼è·åé¡¶çº§ç¶èç¹\r\n     * @param id å½åèç¹ID\r\n     * @returns è¿åé¡¶çº§èç¹\r\n     */\r\n    getRoot(id: string) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                return this.findRowNode(rowNode.parents[0]);\r\n            }\r\n            return rowNode;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    findRowNodes(ids: string[]): RowNode[] {\r\n        return this.state.rowNodes.filter(rn => ids.indexOf(rn.id) > -1);\r\n    }\r\n\r\n    checkAllNodes(args?: any) {\r\n        let rowNodes = this.getCurrentAllRowNodes();\r\n        rowNodes = rowNodes.filter(n => (n.node.selectable || n.node.selectable === undefined));\r\n\r\n        this.checkeds = rowNodes.map(n => {\r\n            n.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(n);\r\n            if (n.node.selectable || n.node.selectable === undefined) {\r\n                n.isChecked = true;\r\n            }\r\n            return n.node;\r\n        });\r\n\r\n        if (this.selectOnCheck && !this.onlySelectSelf) {\r\n            this.selections = rowNodes.map(n => {\r\n                if (n.node.selectable || n.node.selectable === undefined) {\r\n                    n.isSelected = true;\r\n                }\r\n                return n.node;\r\n            });\r\n        }\r\n\r\n        if (this.state.searched) {\r\n            rowNodes.forEach(rn => {\r\n                const row = this.state.rowNodes.find(n => n.id === rn.id);\r\n                if (row) {\r\n                    row.isSelected = rn.isSelected;\r\n                    row.isChecked = rn.isChecked;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.checkAll.emit(args);\r\n        this.updateAllCheckboxStatus();\r\n        this.detectChanges();\r\n    }\r\n\r\n    unCheckAllNodes(args?: any) {\r\n        this.clearAll();\r\n        this.unCheckAll.emit(args);\r\n        this.detectChanges();\r\n    }\r\n\r\n    private isEnableMultiSelect() {\r\n        if (this.singleSelect) {\r\n            if (!this.showCheckbox) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // ä»æ°æ®ä¸­è·åèç¹å¾æ \r\n    // iconField ä¸º object\r\n    //      å¦æ å±å¼å¾æ ä¸ºç©ºï¼æå å¾æ ä¸ä¸ºç©ºï¼æåä¹ï¼åå±å¼ä¸æå å¾æ ä¿æä¸è³ï¼\r\n    //      å¦æ å¶å­å¾æ ä¸ºç©ºï¼åä½¿ç¨ç»ä»¶é»è®¤çå¾æ \r\n    // iconField ä¸º å­ç¬¦ä¸²ï¼ åå¶å­ å±å¼ æå  å¾æ ä½¿ç¨åä¸ä¸ªã å¦æä¸ºç©ºï¼ åä½¿ç¨ç»ä»¶é»è®¤å¾æ \r\n    private getNodeIconFromData(tn: TreeNode) {\r\n        let leaf = null;\r\n        let expand = null;\r\n        let collapse = null;\r\n        if (this.useIconFromData) {\r\n            if (this.iconField) {\r\n                let _iconField = '';\r\n                if (typeof this.iconField === 'string') {\r\n                    _iconField = this.iconField;\r\n                    if (tn[_iconField]) {\r\n                        leaf = tn[_iconField];\r\n                    } else {\r\n                        leaf = this.utils.getValue(_iconField, tn.data);\r\n                    }\r\n\r\n                    expand = collapse = leaf;\r\n                } else {\r\n                    if (this.iconField.leaf) {\r\n                        leaf = this.utils.getValue(this.iconField.leaf, tn.data);\r\n                    }\r\n                    if (this.iconField.expand) {\r\n                        expand = this.utils.getValue(this.iconField.expand, tn.data);\r\n                    }\r\n                    if (this.iconField.collapse) {\r\n                        collapse = this.utils.getValue(this.iconField.collapse, tn.data);\r\n                    }\r\n\r\n                    if (expand && !collapse) {\r\n                        collapse = expand;\r\n                    }\r\n\r\n                    if (!expand && collapse) {\r\n                        expand = collapse;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            leaf, expand, collapse\r\n        };\r\n    }\r\n\r\n    getTreeIcon(treeNode: TreeNode) {\r\n        const tn = treeNode;\r\n        let leafIcon = this.leafIcon || 'file';\r\n        let expandIcon = this.expandIcon || 'folder-open';\r\n        let collapseIcon = this.collapseIcon || 'folder';\r\n        const loading = 'f-loading-round';\r\n\r\n        if (tn['showLoading']) {\r\n            return { [loading]: true };\r\n        }\r\n\r\n        if (tn.icon) {\r\n            leafIcon = tn.icon;\r\n        }\r\n\r\n        if (tn.expandedIcon) {\r\n            expandIcon = tn.expandedIcon;\r\n        }\r\n\r\n        if (tn.collapsedIcon) {\r\n            collapseIcon = tn.collapsedIcon;\r\n        }\r\n\r\n        if (this.useIconFromData) {\r\n            const { leaf, expand, collapse } = this.getNodeIconFromData(treeNode);\r\n            if (this.whenDataIconEmptyUseDefault) {\r\n                if (leaf) {\r\n                    leafIcon = leaf;\r\n                }\r\n                if (expand) {\r\n                    expandIcon = expand;\r\n                }\r\n                if (collapse) {\r\n                    collapseIcon = collapse;\r\n                }\r\n            } else {\r\n                leafIcon = leaf || '';\r\n                expandIcon = expand || '';\r\n                collapseIcon = collapse || '';\r\n            }\r\n        }\r\n\r\n\r\n        const collapsedExpression = (!tn.leaf || !!(tn.children && tn.children.length)) && !tn.expanded;\r\n        const expandedExpression = !!tn.expanded;\r\n        const leafExpression = tn.leaf === undefined ? (!tn.children || !tn.children.length) : tn.leaf;\r\n\r\n        const icons = {};\r\n\r\n        if (leafExpression && leafIcon) {\r\n            icons[leafIcon] = leafExpression;\r\n        } else {\r\n            if (tn.expanded && expandIcon) {\r\n                icons[expandIcon] = expandedExpression;\r\n            } else {\r\n                if (collapseIcon) {\r\n                    icons[collapseIcon] = collapsedExpression;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.iconCls) {\r\n            icons[this.iconCls] = true;\r\n        }\r\n\r\n        return icons;\r\n    }\r\n\r\n    private compare(a, b) {\r\n        if (typeof a === 'string') {\r\n            return a.localeCompare(b);\r\n        } else {\r\n            return a === b ? 0 : (a > b ? 1 : -1);\r\n        }\r\n    }\r\n    private _sort(r1, r2) {\r\n        let r = 0;\r\n        const sortFields = this.sortName.split(',');\r\n        const orders = this.sortOrder.split(',');\r\n\r\n        if (!this.sortName) {\r\n            return r;\r\n        }\r\n\r\n        for (let i = 0; i < sortFields.length; i++) {\r\n            const sn = sortFields[i];\r\n            const so = orders[i];\r\n\r\n            const col = this.columns.find(c => c.field === sn);\r\n\r\n            const orderby = col.sorter || this.compare;\r\n            let v1 = this.utils.getValue(sn, r1.data);\r\n            if (v1 === null || v1 === undefined) {\r\n                v1 = '';\r\n            }\r\n            let v2 = this.utils.getValue(sn, r2.data);\r\n            if (v2 === null || v2 === undefined) {\r\n                v2 = '';\r\n            }\r\n            r = orderby(v1, v2);\r\n            if (r !== 0) {\r\n                return r * (so === 'asc' ? 1 : -1);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    clientSort() {\r\n\r\n        if (!this.data || !this.data.length) {\r\n            return;\r\n        }\r\n\r\n        const sortedData = this.data.sort(this._sort.bind(this));\r\n\r\n        const sortChildNodes = (childNodes) => {\r\n            childNodes = childNodes.sort(this._sort.bind(this));\r\n            childNodes.forEach(n => {\r\n                if (n.children && n.children.length) {\r\n                    n.children = n.children.sort(this._sort.bind(this));\r\n                    sortChildNodes(n.children);\r\n                }\r\n            });\r\n            return childNodes;\r\n        };\r\n\r\n        sortedData.forEach(c => {\r\n            c.children = sortChildNodes(c.children);\r\n        });\r\n\r\n        this.loadData(sortedData);\r\n    }\r\n\r\n    onSortColumnClick($event, col) {\r\n        if (!col.sortable) {\r\n            return;\r\n        }\r\n        const sortName = this.sortName;\r\n        const sortOrder = this.sortOrder;\r\n        let sortFields = [];\r\n        let sortOrders = [];\r\n        if (sortName) {\r\n            sortFields = sortName.split(',');\r\n            sortOrders = sortOrder.split(',');\r\n        }\r\n\r\n        const colOrder = col.order || 'asc';\r\n        let newOrder = colOrder;\r\n        const i = sortFields.findIndex(n => n === col.field);\r\n        if (i >= 0) {\r\n            const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';\r\n            newOrder = _order;\r\n            // if (this.multiSort && newOrder === 'asc') {\r\n            if (newOrder === 'asc') {\r\n                newOrder = undefined;\r\n                sortFields.splice(i, 1);\r\n                sortOrders.splice(i, 1);\r\n            } else {\r\n                sortOrders[i] = _order;\r\n            }\r\n\r\n        } else {\r\n            if (this.multiSort) {\r\n                sortFields.push(col.field);\r\n                sortOrders.push(colOrder);\r\n            } else {\r\n                sortFields = [col.field];\r\n                sortOrders = [colOrder];\r\n            }\r\n        }\r\n\r\n        col.order = newOrder;\r\n\r\n        this.sortName = sortFields.join(',');\r\n        this.sortOrder = sortOrders.join(',');\r\n\r\n        if (!this.multiSort) {\r\n\r\n            const updateFieldOrder = (cols: TreeTableColumn[]) => {\r\n                if (!cols || !cols.length) {\r\n                    return;\r\n                }\r\n                cols.forEach(c => {\r\n                    c.order = undefined;\r\n                    const k = sortFields.findIndex(f => f === c.field);\r\n                    if (k >= 0) {\r\n                        c.order = sortOrders[k];\r\n                    }\r\n                });\r\n            };\r\n\r\n            updateFieldOrder(this.columns);\r\n            this.cdRef.detectChanges();\r\n        }\r\n\r\n        this.beforeSortColumn(this.sortName, this.sortOrder).subscribe(() => {\r\n            if (this.remoteSort) {\r\n                // this.reload();\r\n            } else {\r\n                this.clientSort();\r\n            }\r\n\r\n            this.columnSorted.emit({ sortName: this.sortName, sortOrder: this.sortOrder });\r\n        });\r\n    }\r\n\r\n    /** æ¥è¯¢å·¥å·æ¡åç«¯å­ç¬¦æ¥è¯¢ */\r\n    findKeyWords($event) {\r\n        const searchValue = $event.value;\r\n        const field = $event.field;\r\n        this.findField = field;\r\n        if (searchValue && searchValue.length >= 2) {\r\n            this.findValue = searchValue;\r\n\r\n            if (!field) {\r\n                this.writeConsole('Please set a field for the FindField property.', 'warn');\r\n                return;\r\n            }\r\n\r\n            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);\r\n\r\n            if (result && result.length) {\r\n                this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));\r\n                this.findCount = result.length;\r\n                this.findCurrent = 1;\r\n    \r\n                this._scrollToNode(result[0].id);\r\n\r\n                this.highLightKeywords();\r\n            } else {\r\n                this.findResult = [];\r\n                this.findCurrent = 0;\r\n                this.findCount = 0;\r\n            }\r\n        } else {\r\n            this.resetFindText();\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n\r\n\r\n    nextFindValue(step) {\r\n        if (!this.findResult || !this.findResult.length) {\r\n            return;\r\n        }\r\n        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));\r\n\r\n        if (this.findCurrent === this.findResult.length) {\r\n            this.findCurrent = 1;\r\n        } else {\r\n            if (step) {\r\n                this.findCurrent = this.findCurrent + step;\r\n                if (step === -1) {\r\n                    if (this.findCurrent <= 0) {\r\n                        this.findCurrent = 1;\r\n                    }\r\n                }\r\n            } else {\r\n                this.findCurrent++;\r\n            }\r\n        }\r\n\r\n        const active = this.el.nativeElement.querySelector('.search-highlight.active');\r\n\r\n        if (active) {\r\n            this.renderer.removeClass(active, 'active');\r\n        }\r\n\r\n        const _index = this.findCurrent - 1;\r\n        const nextRow = this.findResult[_index];\r\n        if (nextRow) {\r\n            this._scrollToNode(nextRow.id);\r\n\r\n            if (this.virtualized) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    if (this['HIGH_LIGHT_TIMER']) {\r\n                        clearTimeout(this['HIGH_LIGHT_TIMER']);\r\n                    }\r\n                    this['HIGH_LIGHT_TIMER'] = setTimeout(() => {\r\n                        const trId = 'rownode-' + nextRow.id;\r\n                        const tr = this.el.nativeElement.querySelector('#' + trId);\r\n                        if (tr) {\r\n                            const highLightDom = tr.querySelector('.search-highlight');\r\n                            if (highLightDom) {\r\n                                this.renderer.addClass(highLightDom, 'active');\r\n                            }\r\n                        }\r\n                    }, 100);\r\n                });\r\n            } else {\r\n                if (allHighLights[_index]) {\r\n                    this.renderer.addClass(allHighLights[_index], 'active');\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /** æ¥è¯¢å·¥å·æ¡åç«¯å­ç¬¦æ¥è¯¢ */\r\n    /*\r\n    findKeyWords($event) {\r\n        const searchValue = $event.value;\r\n        const field = $event.field;\r\n        this.findField = field;\r\n        if (searchValue && searchValue.length >= 2) {\r\n            this.findValue = searchValue;\r\n\r\n            if (!field) {\r\n                this.writeConsole('Please set a field for the FindField property.', 'warn');\r\n                return;\r\n            }\r\n\r\n            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);\r\n\r\n            if (result && result.length) {\r\n                this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));\r\n                const firstRowIndex = result[0].index;\r\n\r\n                this.findCount = result.length;\r\n\r\n                const parents = this.searchHandle.findParents(result, this.state.rowNodes);\r\n\r\n                this.findCurrent = 1;\r\n                [...parents, ...result].forEach((r: RowNode) => {\r\n                    this.expandNode(r.id);\r\n                });\r\n\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && firstRowIndex > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30);\r\n                }\r\n\r\n                this.highLightKeywords();\r\n            } else {\r\n                this.findResult = [];\r\n                this.findCurrent = 0;\r\n                this.findCount = 0;\r\n            }\r\n        } else {\r\n            this.resetFindText();\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    nextFindValue(step) {\r\n        if (!this.findResult || !this.findResult.length) {\r\n            return;\r\n        }\r\n        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));\r\n\r\n        if (this.findCurrent === this.findResult.length) {\r\n            this.findCurrent = 1;\r\n        } else {\r\n            if (step) {\r\n                this.findCurrent = this.findCurrent + step;\r\n                if (step === -1) {\r\n                    if (this.findCurrent <= 0) {\r\n                        this.findCurrent = 1;\r\n                    }\r\n                }\r\n            } else {\r\n                this.findCurrent++;\r\n            }\r\n        }\r\n\r\n        const active = this.el.nativeElement.querySelector('.search-highlight.active');\r\n\r\n        let _index = allHighLights.indexOf(active);\r\n\r\n        if (active) {\r\n            this.renderer.removeClass(active, 'active');\r\n        }\r\n\r\n        if (this.virtualized) {\r\n\r\n            _index += !step ? 1 : step;\r\n\r\n            if (allHighLights[_index]) {\r\n                this.renderer.addClass(allHighLights[_index], 'active');\r\n\r\n            } else {\r\n                // åæ»å¨æå®ä½ç½®\r\n                const nextRow = this.findResult[this.findCurrent - 1];\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && nextRow.index > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30, 200);\r\n                }\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                        this.renderer.addClass(keyWords[0], 'active');\r\n                    }, 100);\r\n                });\r\n            }\r\n        } else {\r\n            const currentEl: any = allHighLights[this.findCurrent - 1];\r\n            if (currentEl) {\r\n                this.renderer.addClass(currentEl, 'active');\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    const sTop = currentEl.closest('td').offsetTop - 30;\r\n                    this.psRef.directiveRef.scrollToY(sTop, 200);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        this.cdRef.detectChanges();\r\n    }\r\n*/\r\n    closeFindPanel() {\r\n        this.showFindInput = false;\r\n        this.resetFindText();\r\n        this.cdRef.detectChanges();\r\n    }\r\n\r\n    private highLightKeywords() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                this.cdRef.detectChanges();\r\n                const allHighLights = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                if (!allHighLights.length) {\r\n                    return;\r\n                }\r\n                this.renderer.addClass(allHighLights[0], 'active');\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    private resetFindText() {\r\n        this.findValue = '';\r\n        this.findCurrent = 0;\r\n        this.findCount = 0;\r\n        this.findResult = [];\r\n    }\r\n\r\n  \r\n\r\n    scrollToY(y: number, animations = 200) {\r\n        this.state.scrollY = y || 0;\r\n        this.psRef.directiveRef.scrollToY(y, animations);\r\n    }\r\n\r\n    private showOrHideColumn(field: string | string[], isHide: boolean) {\r\n        if (Array.isArray(field)) {\r\n            this.columns.forEach(n => {\r\n                if (field.indexOf(n.field) > -1) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        } else {\r\n            this.columns.forEach(n => {\r\n                if (field === n.field) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.columnsChanged();\r\n    }\r\n\r\n    showColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, false);\r\n    }\r\n\r\n    hideColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, true);\r\n    }\r\n\r\n    showChildsLoading(parentNode: TreeNode) {\r\n        const colspan = this.columns.filter(n => n.visible !== false).length;\r\n        const data = { [this.idField]: 'æ­£å¨å è½½ä¸­....', __colspan__: colspan };\r\n        this.loadChildren([{ data, __childs_loading__: true }], parentNode, false);\r\n    }\r\n\r\n    onChildsPageChanged($event) {\r\n        this.childsPageChanged.emit($event);\r\n    }\r\n\r\n    private trId2DataId(tr) {\r\n        return tr.id.replace('rownode-', '');\r\n    }\r\n\r\n\r\n    // å¿«æ·é®\r\n    onKeydownEvent($event) {\r\n        if (!$event || !this.singleSelect || !this.data || !this.data.length) {\r\n            return;\r\n        }\r\n\r\n        const keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n\r\n        if (!keys.includes($event.key) || $event.target.nodeName === 'INPUT') {\r\n            return;\r\n        }\r\n\r\n        $event.stopPropagation();\r\n        $event.preventDefault();\r\n        this.inputGroup.textbox.nativeElement.blur();\r\n        let newIdx;\r\n        const trs = Array.from(this.bodyTable.nativeElement.querySelectorAll('tr'));\r\n        const trCount = trs.length;\r\n        let selectedTrIndex = -1;\r\n\r\n        if (this.selectedRow) {\r\n            selectedTrIndex = trs.findIndex((n: any) => this.trId2DataId(n) === this.selectedRow.id);\r\n        }\r\n\r\n        if ($event.code === 'ArrowDown') {\r\n            newIdx = selectedTrIndex + 1;\r\n        } else if ($event.code === 'ArrowUp') {\r\n            if (selectedTrIndex !== -1) {\r\n                newIdx = selectedTrIndex - 1;\r\n            }\r\n        } else {\r\n            if (this.selectedRow && ($event.code === 'ArrowRight' || $event.code === 'ArrowLeft')) {\r\n                this.toggleExpand(this.selectedRow);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (newIdx >= 0 && newIdx < trCount) {\r\n            const _tr = trs[newIdx] as any;\r\n            if (_tr) {\r\n                const id = this.trId2DataId(_tr);\r\n                this.selectNode(id);\r\n                _tr.scrollIntoView({ block: 'nearest' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onBeforeShowContextMenu = (e: any) => {\r\n        // row_1_fixedleft  row_1  row_1_fixedright\r\n        const { contextMenuDom, event } = e;\r\n\r\n        let rowID = event.target.id;\r\n\r\n        if (contextMenuDom) {\r\n            rowID = this.trId2DataId(contextMenuDom);\r\n            const rowNode = this.findRowNode(rowID);\r\n\r\n            let go$ = of({show: true});\r\n            if (this.beforeShowContextMenu) {\r\n                go$ = this.beforeShowContextMenu({ data: rowNode, tree: this });\r\n            }\r\n\r\n            return go$.pipe(\r\n                switchMap((r: any) => {\r\n                    if (r.show) {\r\n\r\n                        if (r.menus) {\r\n                            this.contextMenuItems = r.menus;\r\n                            this.detectChanges();\r\n                        }\r\n\r\n                        const viewportW = contextMenuDom.closest('.farris-treetable').offsetWidth;\r\n                        const targetW = contextMenuDom.offsetWidth;\r\n\r\n                        const focusTargetWidth = viewportW > targetW ? targetW : viewportW;\r\n                        return of({ show: true, data: { data: rowNode, tree: this }, focusTargetWidth });\r\n                    } else {\r\n                        return of({ show: false });\r\n                    }\r\n                })\r\n            );\r\n        }\r\n        return of({ show: false });\r\n    }\r\n\r\n    /** æ ¹æ®ä¼ å¥çç¶çº§IDï¼è·åææå­çº§èç¹ */\r\n    getChildNodes(parentId: string): TreeNode[] {\r\n        let nodes = [];\r\n        if (parentId) {\r\n            const rowNode = this.findRowNode(parentId);\r\n            if (rowNode && rowNode.node.children && rowNode.node.children.length) {\r\n                rowNode.node.children.forEach((tn: TreeNode) => {\r\n                    if (tn.selectable) {\r\n                        nodes.push(tn);\r\n                    }\r\n                    nodes = nodes.concat(this.getChildNodes(tn.id));\r\n                });\r\n            }\r\n\r\n            return nodes;\r\n        }\r\n        return []\r\n    }\r\n\r\n    /** æ ¹æ®ä¼ å¥çèç¹IDï¼ è·åææç¶çº§èç¹ */\r\n    getParentNodes(id: string): RowNode[] {\r\n        let nodes = [];\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode && rowNode.parents && rowNode.parents.length) {\r\n                rowNode.parents.forEach((n) => {\r\n                    const rn = this.findRowNode(n);\r\n                    if (rn && rn.node.selectable) {\r\n                        nodes.push(rn);\r\n                    }\r\n                })\r\n            }\r\n\r\n            return nodes;\r\n        }\r\n        return []\r\n    }\r\n\r\n    onFilterRowInput($event, col) {\r\n        this.filterRowConditions = this.filterRowConditions || {};\r\n        this.filterRowConditions[col.field] = $event.target.value;\r\n\r\n        Object.keys(this.filterRowConditions).forEach(n => {\r\n            if (this.filterRowConditions[n] === '' || this.filterRowConditions[n] == null) {\r\n                delete this.filterRowConditions[n];\r\n            }\r\n        });\r\n\r\n        if (this['FILTERCONDITIONS_CHANGED_TIMER']) {\r\n            clearTimeout(this['FILTERCONDITIONS_CHANGED_TIMER']);\r\n        }\r\n\r\n        this['FILTERCONDITIONS_CHANGED_TIMER'] = setTimeout(() => {\r\n            this.searchHandle.searchWithConditions(this.filterRowConditions);\r\n            this.setNewColumnsWidth();\r\n        }, 200);\r\n    }\r\n}\r\n\r\n\r\n@Component({\r\n    selector: '[treeTableBody]',\r\n    template: `\r\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\">\r\n            <ng-container *ngIf=\"serializedNode.visible\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"template;\r\n                        context: {$implicit: serializedNode, node: serializedNode.node,\r\n                        rowData: serializedNode.node.data, rowIndex: rowIndex, columns: columns}\">\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-template>\r\n    `\r\n})\r\nexport class TTBodyComponent {\r\n    /**\r\n     * åéå\r\n     */\r\n    @Input() columns: any[];\r\n\r\n    /** è¡¨ä½æ¨¡æ¿ */\r\n    @Input() template: TemplateRef<any>;\r\n\r\n\r\n    constructor(public tt: TreeTableComponent) { }\r\n}\r\n\r\n// [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\r\n\r\n/**\r\n * æ èç¹å±å¼æå \r\n */\r\n@Component({\r\n    selector: 'farris-treeTableToggler',\r\n    template: `\r\n    <a #toggler style=\"cursor: pointer\"\r\n            class=\"treenode-fold\" *ngIf=\"showLines\"\r\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\r\n            [style.display]=\"isShowTriangle ? '' : 'none'\"\r\n            (click)=\"onClick($event)\"></a>\r\n\r\n    <a #toggler style=\"cursor: pointer\"\r\n            class=\"treenode-fold\"  *ngIf=\"!showLines\"\r\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\r\n            [style.marginLeft.px]=\"rowNode.level * indentSpacing\"\r\n            [style.visibility]=\"isShowTriangle ? 'visible' : 'hidden'\"\r\n            (click)=\"onClick($event)\"></a>\r\n    <span class=\"tree-icon-line\" [style.display]=\"isShowTriangle && showLines? '' : 'none'\"></span>\r\n    <span [style.display]=\"(tt.showIcon && rowNode.node.showIcon) ? 'inline-block': 'none'\" class=\"treenode-icon\" [ngClass]=\"treeNodeIcon\"></span>\r\n\r\n    <tt-checkbox  [rowNode]=\"rowNode\" *ngIf=\"tt.showCheckbox\" [disabled]=\"disabled\" [checked]=\"rowNode.isChecked\" ></tt-checkbox>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: 'ttToggler'\r\n})\r\nexport class TreeTableTogglerComponent implements OnInit, AfterViewInit, OnDestroy, DoCheck, OnChanges, AfterViewChecked {\r\n    @HostBinding('class.f-cmp-treetable-toggler') cls = true;\r\n    /**\r\n     * æ èç¹\r\n     */\r\n    @Input() rowNode: RowNode;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() showLines = false;\r\n\r\n    @Input() indentSpacing = 16;\r\n\r\n    treeNodeIcon = {};\r\n    isShowTriangle = false;\r\n    noChilds = false;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    get offsetWidth() {\r\n        return this.togglerEl.nativeElement.parentElement.offsetWidth;\r\n    }\r\n\r\n    @ViewChild('toggler') togglerEl: ElementRef;\r\n    constructor(public tt: TreeTableComponent, private ngzone: NgZone, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        this.treeNodeIcon = this.tt.getTreeIcon(this.rowNode.node);\r\n\r\n        this.isShowTriangle = this.showTriangle();\r\n        this.noChilds = this.hasChildren();\r\n        const expandSub = this.tt.expand.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                this.updateIcon(this.rowNode.node);\r\n                if (this.tt.psRef) {\r\n                    this.tt.psRef.directiveRef.update();\r\n                }\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const collapseSub = this.tt.collapse.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                this.updateIcon(this.rowNode.node);\r\n                if (this.tt.psRef) {\r\n                    this.tt.psRef.directiveRef.update();\r\n                }\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const addNewSub = this.tt.appendNew.subscribe((e: any) => {\r\n            if (e.parent) {\r\n                if (this.rowNode.id === e.parent.data[this.tt.idField]) {\r\n                    if (this.rowNode.node.leaf || this.rowNode.node.leaf === undefined) {\r\n                        this.rowNode.node.leaf = false;\r\n                    }\r\n                }\r\n\r\n                this.updateIcon(this.rowNode.node);\r\n            }\r\n        });\r\n\r\n        this.subscriptions = [expandSub, collapseSub, addNewSub];\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.showLines && !changes.showLines.isFirstChange()) {\r\n            if (this.showLines) {\r\n                this.render.setStyle(this.togglerEl.nativeElement, 'display', this.isShowTriangle ? '' : 'none');\r\n            } else {\r\n                this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n            }\r\n            this.reSetLines();\r\n        }\r\n\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.updateIcon(this.rowNode.node);\r\n\r\n            // if (changes.rowNode.currentValue.node.children) {\r\n            //     if (!!changes.rowNode.currentValue.node.children.length !== !!changes.rowNode.previousValue.node.children.length) {\r\n            //         this.reSetLines();\r\n            //     }\r\n            // }\r\n            if (this.tt.showLines) {\r\n                let currenChildrenLength = 0;\r\n                let previousChildrenLength = 0;\r\n                if (changes.rowNode.currentValue && changes.rowNode.currentValue.node.children ) {\r\n                    currenChildrenLength = changes.rowNode.currentValue.node.children.length;\r\n                }\r\n\r\n                if (changes.rowNode.previousValue && changes.rowNode.previousValue.node.children) {\r\n                    previousChildrenLength = changes.rowNode.previousValue.node.children.length;\r\n                }\r\n\r\n                if (currenChildrenLength != previousChildrenLength || (!currenChildrenLength && !previousChildrenLength)) {\r\n                    this.reSetLines();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.tt.bodyTemplate && this.showLines) {\r\n            setTimeout(() => {\r\n                this.reSetLines();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        // this.isShowTriangle = this.showTriangle();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // if (this.tt && this.tt.data) {\r\n        //     this.reSetLines();\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unAllSubscriptions();\r\n    }\r\n\r\n\r\n    private unAllSubscriptions() {\r\n        this.subscriptions.forEach(s => {\r\n            s.unsubscribe();\r\n        });\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    hasChildren() {\r\n        const tn = this.rowNode.node;\r\n        return tn.leaf === false || this.rowNode.level !== 0 || (tn.children && tn.children.length > 0);\r\n    }\r\n\r\n    showTriangle(): boolean {\r\n        const tn = this.rowNode.node;\r\n\r\n        if (this.tt.loadDataType === 'all') {\r\n            return tn.leaf === false || (tn.children && tn.children.length > 0);\r\n        } else {\r\n            return tn.leaf === false;\r\n        }\r\n    }\r\n\r\n    reSetLines() {\r\n        if (this.togglerEl) {\r\n            const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n            if (parentEl) {\r\n                const lineEls = parentEl.querySelectorAll('.treetable-lines');\r\n                for (let k = 0; k < lineEls.length; k++) {\r\n                    lineEls[k].remove();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderLines();\r\n    }\r\n\r\n    private _renderLines() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.showLines) {\r\n                this.renderLines();\r\n            } else {\r\n                // this.noLineStyle();\r\n            }\r\n        } else {\r\n            /*\r\n            if (this.togglerEl) {\r\n                if (this.togglerEl.nativeElement.closest('tr')) {\r\n                    const tds = this.togglerEl.nativeElement.closest('tr').querySelectorAll('td');\r\n                    Array.from(tds).forEach(n => {\r\n                        this.render.setStyle(n, 'padding', '0.25rem 0.75rem');\r\n                    });\r\n                }\r\n            } */\r\n        }\r\n    }\r\n\r\n\r\n    private noLineStyle() {\r\n        // this.cls = false;\r\n        if (this.togglerEl) {\r\n            // this.render.setStyle(this.togglerEl.nativeElement, 'margin-left', `${this.rowNode.level * this.indentSpacing}px`);\r\n            this.render.setStyle(this.togglerEl.nativeElement, 'visibility', this.isShowTriangle ? 'visible' : 'hidden');\r\n            this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n        }\r\n    }\r\n\r\n    private renderLines() {\r\n        const len = this.rowNode.level;\r\n        if ( !this.togglerEl) {\r\n            return;\r\n        }\r\n        const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n\r\n        if (!parentEl) {\r\n            return;\r\n        }\r\n\r\n        const referEl = this.togglerEl.nativeElement.parentElement;\r\n\r\n        if (len === 0 && !this.showTriangle()) {\r\n            this.createLeafNodeLines(referEl, parentEl, true);\r\n        }\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            parentEl.insertBefore(this.newLineElement(), referEl);\r\n\r\n            const nearLine = this.newLineElement(false);\r\n            parentEl.insertBefore(nearLine, referEl);\r\n\r\n            const isLeaf = !this.showTriangle();\r\n            if (isLeaf && i === len - 1) {\r\n                this.createLeafNodeLines(referEl, parentEl);\r\n            }\r\n        }\r\n    }\r\n\r\n    private newLineElement(border = true) {\r\n        const newLineEl = this.render.createElement('div');\r\n        this.render.addClass(newLineEl, 'treetable-lines');\r\n\r\n        if (this.showLines) {\r\n            if (border) {\r\n                this.render.addClass(newLineEl, 'treetable-lines-border-color');\r\n            }\r\n        }\r\n        return newLineEl;\r\n    }\r\n\r\n    /**\r\n     * æé  â or â\r\n     */\r\n    private createLeafNodeLines(containerEl: HTMLElement, parentEl: Element, isTopNode = false) {\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: rgb(204, 204, 204);\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div class=\"normal\"></div>\r\n        // </div>\r\n\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: transparent\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div style=\"corner\"></div>\r\n        // </div>\r\n\r\n        const l1 = this.newLineElement();\r\n        const l2 = this.newLineElement(false);\r\n\r\n        this.render.addClass(l2, 'treetable-lines-leaf');\r\n        const dessert = this.render.createElement('div');\r\n\r\n        if (this.showLines) {\r\n            let cls = 'normal';\r\n            if (this.rowNode.last) {\r\n                cls = 'corner';\r\n                this.render.removeClass(l1, 'treetable-lines-border-color');\r\n            }\r\n            l2.appendChild(dessert);\r\n            this.render.addClass(dessert, cls);\r\n            this.render.addClass(dessert, 'treetable-lines-border-color');\r\n        }\r\n\r\n        parentEl.insertBefore(l1, containerEl);\r\n        parentEl.insertBefore(l2, containerEl);\r\n\r\n        if (isTopNode) {\r\n            this.render.setStyle(l2, 'marginRight', '3px');\r\n        }\r\n    }\r\n\r\n    private registerClickEvent() {\r\n        if (this.togglerEl) {\r\n            this.render.listen(this.togglerEl.nativeElement, 'click', this.onClick.bind(this));\r\n        }\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        if (this.rowNode.node['showLoading']) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.tt.disabled) {\r\n            this.tt.toggleExpand(this.rowNode.node);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private updateIcon(treeNode: TreeNode) {\r\n        this.isShowTriangle = this.showTriangle();\r\n        this.noChilds = this.hasChildren();\r\n        this.treeNodeIcon = this.tt.getTreeIcon(treeNode);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * éä¸­è¡ç»ä»¶\r\n */\r\n@Directive({\r\n    selector: '[selectRow]',\r\n    exportAs: 'row'\r\n})\r\nexport class TreeTableSelectRowDirective implements DoCheck, OnDestroy, OnInit, OnChanges {\r\n\r\n    @Input('selectRow') rowNode: RowNode;\r\n    @Input() rowIndex: number;\r\n\r\n    @Input() selectRowDisabled: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    public prevent = false;\r\n    public timer: any;\r\n    @Input() delay = 0;\r\n\r\n    constructor(public tt: TreeTableComponent, private el: ElementRef, private render: Renderer2, private ngZone: NgZone) {\r\n        this.subscription = this.tt.selectNodeChangedSubject.subscribe((ids: string) => {\r\n            if (ids && this.rowNode) {\r\n                const idArr = ids.split(',');\r\n                if (idArr.indexOf(this.rowNode.id) > -1) {\r\n                    this.toggleClass();\r\n                    this.rowNode.node['elementRef'] = this.el;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.rowNode.node.selectable = !this.selectRowDisabled;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes.selectRowDisabled && !changes.selectRowDisabled.isFirstChange()) {\r\n        //     this.rowNode.node.selectable = !changes.selectRowDisabled.currentValue;\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = null;\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.tt.bodyTemplate) {\r\n            if (!this.tt.isSelected(this.rowNode.node)) {\r\n                this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onclick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            // this.rowClick(event);\r\n            if (this.delay !== 0) {\r\n                if (!this.prevent) {\r\n                    this.prevent = true;\r\n                    this.timer = setTimeout(() => {\r\n                        this.rowClick(event);\r\n                        this.prevent = false;\r\n                    }, this.delay);\r\n                }\r\n            } else {\r\n                this.rowClick(event);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n\r\n    isEnabled() {\r\n        return !this.tt.disabled && this.selectRowDisabled !== true;\r\n    }\r\n\r\n    private rowClick(event: Event) {\r\n        event.stopPropagation();\r\n\r\n        this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'row' }).subscribe((e: boolean) => {\r\n            if (!e) { return; }\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode,\r\n                rowIndex: this.rowIndex\r\n            });\r\n\r\n            this.ngZone.runOutsideAngular(() => {\r\n                this.toggleClass();\r\n            });\r\n        });\r\n    }\r\n\r\n    toggleClass() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.tt.isSelected(this.rowNode.node)) {\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.el.nativeElement.querySelectorAll('.farris-treetable-tbody>tr.farris-table-selectedrow').forEach(n => {\r\n                        this.render.removeClass(n, 'farris-table-selectedrow');\r\n                    });\r\n                }\r\n                this.render.addClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            } else {\r\n                if (!this.tt.keepSelect) {\r\n                    this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * è¡¨å¤´å¨éç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-header-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\" style=\"top: -2px;\">\r\n        <input type=\"checkbox\" #chkAll class=\"custom-control-input\"  [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableHeaderCheckboxComponent implements OnInit {\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chkAll') chkAll: ElementRef;\r\n\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    handleClick(event) {\r\n        if (!this.disabled && !this.tt.disabled) {\r\n            const beforeEvent = !this.checked ? this.tt.beforeCheckAll : this.tt.beforeUnCheckAll;\r\n            this.tt['checkall_CLICKED'] = true;\r\n            beforeEvent({ instance: this.tt, checked: !this.checked }).subscribe(e => {\r\n                // å¨éåè½\r\n                this.chkAll.nativeElement.indeterminate = false;\r\n                this.checked = !this.checked;\r\n                this.tt.toggleNodesWithCheckbox(event, this.checked);\r\n                setTimeout(() => {\r\n                    this.tt['checkall_CLICKED'] = false;\r\n                }, 50);\r\n            });\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * è¡¨ä½checkbox ç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\r\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        :host .custom-checkbox {\r\n            opacity: 1;\r\n            float: none;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableCheckboxComponent implements OnInit, OnDestroy {\r\n    @HostBinding('class.tree-toggler-checkbox') cls1 = true;\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() rowNode: RowNode;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chk') chk: ElementRef;\r\n    destroy$ = new Subject();\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n        this.ttService = this.tt.ttService;\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n    ngOnInit() {\r\n        this.chk.nativeElement.indeterminate = this.rowNode.indeterminate || false;\r\n\r\n        this.ttService.changeCheckboxStatus$.pipe(\r\n            takeUntil(this.destroy$)\r\n        ).pipe(\r\n            map(n => {\r\n                if (n.id === this.rowNode.id) {\r\n                    return n;\r\n                }\r\n                return null;\r\n            })\r\n        ).subscribe(n => {\r\n            if (n) {\r\n                this.chk.nativeElement.indeterminate = n.indeterminate;\r\n                this.checked = n.isChecked;\r\n                this.chk.nativeElement.checked = this.checked;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    handleClick(event) {\r\n        event.stopPropagation();\r\n        if (!this.disabled) {\r\n            this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'checkbox' }).subscribe((e: boolean) => {\r\n                if (!e) { return; }\r\n                this.checked = !this.checked;\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.clearAll();\r\n                    if (this.checked) {\r\n                        this.tt.selectNode(this.rowNode.id, true);\r\n                    } else {\r\n                        this.tt.unSelectNode(this.rowNode.id, true);\r\n                    }\r\n                } else {\r\n                    this.tt.toggleNodeWithCheckbox(event, this.rowNode, this.checked);\r\n                }\r\n            });\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[dblclick]'\r\n})\r\nexport class DblClickRowDirective implements OnInit {\r\n    @Input('dblclick') enableDblClick = false;\r\n    @Input() dblclickNode: RowNode;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public el: ElementRef, public ttService: TreetableService,\r\n        @Optional() @Self() public selectRowDir: TreeTableSelectRowDirective) {\r\n            this.ttService = this.tt.ttService;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.enableDblClick) {\r\n            this.selectRowDir.delay = 0;\r\n        } else {\r\n            this.selectRowDir.delay = 200;   \r\n        }\r\n    }\r\n\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    ondblclick(event: Event) {\r\n        const prevEl = ( event.target as any).previousSibling;\r\n        if (prevEl && prevEl.type === 'checkbox') {\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.tt.disabled) {\r\n            return false;\r\n        }\r\n\r\n        if (this.tt.multiSelect && this.dblclickNode) {\r\n            if (this.dblclickNode.node.leaf) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        const clsName = event.target['className'];\r\n\r\n        let togglerTag = null;\r\n        if (clsName.indexOf('f-cmp-treetable-toggler') > -1) {\r\n            togglerTag = event.target['querySelector']('.treenode-fold');\r\n        } else {\r\n            if (event.target['className'].indexOf('treenode-fold') > -1) {\r\n                togglerTag = event.target as any;\r\n            }\r\n        }\r\n\r\n        if (togglerTag && togglerTag.style.visibility === 'visible') {\r\n            return false;\r\n        }\r\n\r\n        if (this.selectRowDir) {\r\n            this.selectRowDir.prevent = false;\r\n            clearTimeout(this.selectRowDir.timer);\r\n            if (this.selectRowDir.rowNode && this.enableDblClick) {\r\n                const rn = this.selectRowDir.rowNode;\r\n                if (rn.node.children && rn.node.children.length && !rn.node.leaf && this.tt.dblClickExpand) {\r\n                    this.tt.toggleExpand(rn.node);\r\n                }\r\n                this.tt.dblClick.emit(rn.node);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customRowStyle]'\r\n})\r\nexport class CustomRowStyleDirective implements OnInit, OnChanges {\r\n    @Input('customRowStyle') rowNode: RowNode;\r\n    @Input('field') col: TreeTableColumn;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        if (this.col && this.tt.fixedColumns && this.tt.fixedHeader && this.col.fixed) {\r\n            if (this.col.fixed === 'left' || this.col.fixed === 'right') {\r\n                this.setRowStyle();\r\n            }\r\n            return;\r\n        } else {\r\n            this.setRowStyle();\r\n        }\r\n    }\r\n\r\n    private setRowStyle() {\r\n        const fn = this.tt.rowStyler;\r\n        if (fn) {\r\n            const sty = fn(this.rowNode.node);\r\n            if (sty) {\r\n                if (typeof sty === 'object' && (sty.style || sty.cls)) {\r\n                    if (sty.style) {\r\n                        Object.keys(sty.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (sty.cls) {\r\n                        sty.cls.split(',').forEach(c => {\r\n                            this.render.addClass(this.el.nativeElement, c);\r\n                        });\r\n                    }\r\n\r\n                } else {\r\n                    if (Array.isArray(sty) || typeof sty === 'string') {\r\n                        const cls = this.tt.getRowCls(this.rowNode);\r\n                        if (cls && Object.keys(cls).length) {\r\n                            Object.keys(cls).forEach(c => {\r\n                                if (cls[c]) {\r\n                                    this.render.addClass(this.el.nativeElement, c);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        Object.keys(sty).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty[s]);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setRowStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customCellStyle]'\r\n})\r\nexport class TTCustomCellStyleDirective implements OnInit, OnChanges {\r\n    @Input('customCellStyle') column: TreeTableColumn;\r\n    @Input() rowNode: RowNode;\r\n    @Input() rowIndex: any;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.tt && this.tt.getCellCls) {\r\n            this.setCellStyle();\r\n        }\r\n\r\n        if (!this.tt.showBorder && this.tt.columns.length === 1) {\r\n            this.render.setStyle(this.el.nativeElement, 'border-width', '0px');\r\n        }\r\n    }\r\n\r\n    private setCellStyle() {\r\n        const cellCls = this.tt.getCellCls(this.rowNode, this.column.field);\r\n        if (this.column && this.column.styler) {\r\n            if (cellCls && Object.keys(cellCls).length) {\r\n                Object.keys(cellCls).forEach(c => {\r\n                    if (cellCls[c]) {\r\n                        this.render.addClass(this.el.nativeElement, c);\r\n                    }\r\n                });\r\n            }\r\n\r\n            const rowData = this.rowNode.node.data;\r\n            const ccs = this.column.styler(this.utils.getValue(this.column.field, rowData), rowData, this.rowIndex, this.rowNode);\r\n            if (ccs) {\r\n                if (ccs.style || ccs.cls) {\r\n                    if (ccs.style) {\r\n                        Object.keys(ccs.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, ccs.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (ccs.cls) {\r\n                        ccs.cls.split(',').forEach(c => {\r\n                            if (c[0] === '!') {\r\n                                this.render.removeClass(this.el.nativeElement, c.substring(1));\r\n                            } else {\r\n                                this.render.addClass(this.el.nativeElement, c);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            \r\n            let _sty = cellCls || {};\r\n            const rowStyle = this.tt.getRowCls(this.rowNode) || {};\r\n\r\n            const hasBackground = Object.keys(cellCls).find(n => {\r\n                return ['background', 'background-color', 'backgroundcolor'].indexOf(n.toLowerCase()) > -1;\r\n            });\r\n\r\n            let _rowStyles = rowStyle;\r\n            if (rowStyle.style) {\r\n                _rowStyles = rowStyle.style;\r\n            }\r\n\r\n            let _cellStyles = _sty;\r\n            if (_sty.style) {\r\n                _cellStyles = _sty.style;\r\n            }\r\n\r\n\r\n            if (hasBackground) {\r\n                _sty = Object.assign(_rowStyles, _cellStyles);\r\n            } else {\r\n                _sty = Object.assign(_cellStyles, _rowStyles);\r\n            }\r\n            \r\n            Object.keys(_sty).forEach(s => {\r\n                this.render.setStyle(this.el.nativeElement, s, _sty[s]);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setCellStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[resizable-column]'\r\n})\r\nexport class TTResizableColumnDirective implements AfterViewInit, OnDestroy, OnChanges {\r\n    @Input('resizable-column') enableResize = true;\r\n    resizer: HTMLSpanElement;\r\n    resizerMouseDownListener: any;\r\n    documentMouseMoveListener: any;\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public ngzone: NgZone,\r\n        public el: ElementRef, public render: Renderer2) {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnable()) {\r\n            this.render.addClass(this.el.nativeElement, 'resizable-column');\r\n\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'column-resizer';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n\r\n            this.ngzone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n\r\n                this.el.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.enableResize && !changes.enableResize.isFirstChange()) {\r\n            if (!this.isEnable() && this.resizer) {\r\n                this.resizer.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    isEnable() {\r\n        return this.tt.resizableColumns && !this.tt.autoWidth && this.enableResize;\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.ngzone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: Event) {\r\n        if (this.isEnable()) {\r\n            this.tt.onColumnResizeBegin(event);\r\n            this.bindDocumentEvents();\r\n        }\r\n    }\r\n\r\n    onMouseEnter() {\r\n    }\r\n\r\n    onMouseMove(event: Event) {\r\n        this.tt.onColumnResize(event);\r\n    }\r\n\r\n    onMouseUp(event: Event) {\r\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n}\r\n","import { debounceTime, map, auditTime, filter } from 'rxjs/operators';\r\nimport { Component, OnInit, EventEmitter, Output, ElementRef,\r\n    ViewChild, OnDestroy, NgZone, Injector, AfterViewInit, Input } from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'find-input',\r\n    template: `\r\n        <div class=\"f-find-input\" style=\"\">\r\n            <div class=\"input-group\">\r\n                <div class=\"input-group-prepend\">\r\n                    <select class=\"form-control\" [(ngModel)]=\"findField\">\r\n                        <option *ngFor=\"let col of columns\" value=\"{{col.field}}\">{{ col.title }}</option>\r\n                    </select>\r\n                </div>\r\n                <input #input type=\"text\" placeholder=\"è³å°2ä¸ªå­ç¬¦\" class=\"form-control\"\r\n                    (keydown.esc)=\"onClose($event)\" (keydown.enter)=\"onEnter($event, 0)\">\r\n                <div class=\"input-group-append\">\r\n                    <span class=\"input-group-text\">{{current}}/{{count}}</span>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                        [disabled]=\"current === 0\" (click)=\"onEnter($event, -1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                    [disabled]=\"current === count\" (click)=\"onEnter($event, 1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"å³é­\" (click)=\"onClose($event)\">\r\n                        <span class=\"f-icon f-icon-close\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .f-find-input {\r\n            width: 300px; height: 40px; background: #fefefe; position: absolute; right: 0; z-index: 10; padding: 5px;\r\n            box-shadow: 0px 1px 7px 0px #bdbdbd;\r\n            border-radius: 6px;\r\n        }\r\n        .f-find-input .input-group-text { border-right: 1px solid #ccc; font-size: 10px }\r\n        .f-find-input .input-group-append { background: #fff; }\r\n        .f-find-input .input-group-append button { padding:1px 6px;}\r\n        .f-find-input .input-group-append button span{position: relative; top: 2px;}\r\n        `\r\n    ]\r\n})\r\nexport class FindInputComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    @Input() current = 0;\r\n    @Input() count = 0;\r\n    @Input() columns = [];\r\n\r\n    @Output() close = new EventEmitter();\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() enterHandler = new EventEmitter();\r\n\r\n    @ViewChild('input') input: ElementRef;\r\n    findField = '';\r\n    private keyupEventSub: Subscription = null;\r\n\r\n    constructor(private el: ElementRef, private ngZone: NgZone, private injector: Injector) { }\r\n\r\n    ngOnInit() {\r\n        if (this.columns.length) {\r\n            this.columns = this.columns.filter(c => !c.formatter && c.field);\r\n            this.findField = this.columns[0].field;\r\n        }\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.keyupEventSub = fromEvent(this.input.nativeElement, 'keyup').pipe(\r\n                filter((e: any) => (e.switch || e.keyCode) !== 13),\r\n                debounceTime(200),\r\n                map((e: any) => e.target.value)\r\n            ).subscribe((v) => {\r\n                this.valueChanged.emit({value: v, field: this.findField});\r\n            });\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.input.nativeElement.focus();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.keyupEventSub) {\r\n            this.keyupEventSub.unsubscribe();\r\n        }\r\n        this.keyupEventSub = null;\r\n    }\r\n\r\n    onClose(event) {\r\n        this.close.emit();\r\n        return false;\r\n    }\r\n\r\n    onEnter($event, step) {\r\n        this.enterHandler.emit(step);\r\n        return false;\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from './../treetable.component';\r\nimport { Component, Input, OnInit, Injector, ChangeDetectorRef, EventEmitter, Output, OnChanges, SimpleChanges, DoCheck, ViewChild, ElementRef } from '@angular/core';\r\nimport { TreeNode } from '../types/treenode';\r\nimport { filter } from 'rxjs/operators';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'nodes-pager',\r\n    templateUrl: './nodes-pager.component.html',\r\n    styles: [\r\n        `\r\n        .treetable-nodes-pagerbar { height: 22px; line-height: 22px; list-style: none}\r\n        .treetable-nodes-pagerbar li { float: left; box-sizing: border-box; }\r\n        .treetable-nodes-pagerbar .pager-btn {\r\n            width: 22px;\r\n            height: 22px;\r\n            text-align: center;\r\n            border: 1px solid #ccc;\r\n            background: rgb(248 249 250);\r\n            cursor: pointer;\r\n        }\r\n        .treetable-nodes-pagerbar .pager-btn:hover {\r\n            background: white;\r\n        }\r\n        .treetable-nodes-pagerbar .prev {}\r\n        .treetable-nodes-pagerbar .next {\r\n            border-left: 0;\r\n        }\r\n\r\n        .pager-btn.disabled{\r\n            color: rgb(204 204 204);\r\n            pointer-events: none;\r\n        }\r\n        .treetable-nodes-pagerbar .pageinfo {\r\n            margin-right: 5px;\r\n            padding-left: 0;\r\n            font-weight: 400;\r\n            padding-right: 5px;\r\n        }\r\n\r\n        .treetable-nodes-pagerbar .page-index {\r\n            border: 0;\r\n            background: transparent;\r\n            outline: none;\r\n            appearance: none;\r\n            padding-left: 5px;\r\n            min-width: 50px;\r\n            position: absolute;\r\n            height: 20px;\r\n            text-align: left;\r\n            opacity: 0;\r\n            left: 0;\r\n        }\r\n\r\n        .treetable-nodes-pagerbar .page-number-list {\r\n            height: 20px;\r\n            min-width: 30px;\r\n            max-width: 50px;\r\n            overflow: hidden;\r\n            text-align: center;\r\n            position: relative;\r\n            border-bottom: 1px solid #ced4da;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreetableNodesPagerComponent implements OnInit, OnChanges {\r\n    @Input() disabled = false;\r\n    @Input() context: any;\r\n    @ViewChild('pagerList') pagerListEl: ElementRef<any>;\r\n    @Output() pageChange = new EventEmitter();\r\n    @Input() showTotal = false;\r\n\r\n    showPager = new BehaviorSubject(false);\r\n    pagerInfo = null;\r\n\r\n    get pagers() {\r\n        const c = this.getPagerCount();\r\n        if (c) {\r\n            return new Array(c);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    constructor(private tt: TreeTableComponent,  private cd: ChangeDetectorRef, private injector: Injector) {\r\n        if (this.tt) {\r\n            this.tt.expand.pipe(\r\n                filter((node: any) => {\r\n                    return node.id === this.context.node.id && node.pagination && node.children.filter(n => !n.__childs_loading__).length;\r\n                })\r\n            ).subscribe(\r\n                (node: TreeNode) => {\r\n                    this.pagerInfo = {...node.pagination};\r\n                    this.showPager.next(true);\r\n                }\r\n            );\r\n\r\n            this.tt.appendNew.subscribe(\r\n                (e: any) => {\r\n                    const node = e.parent;\r\n                    if (node.id === this.context.node.id && node.pagination) {\r\n                        this.pagerInfo = {...node.pagination};\r\n                        this.showPager.next(true);\r\n                    }\r\n                }\r\n            );\r\n\r\n            this.tt.collapse.subscribe(\r\n                (node: TreeNode) => {\r\n                    if (node.id === this.context.node.id) {\r\n                        this.showPager.next(false);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setPagerInfo();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.context && !changes.context.isFirstChange()) {\r\n            this.setPagerInfo();\r\n        }\r\n    }\r\n\r\n    private setPagerInfo() {\r\n        if (this.context) {\r\n            const { node } = this.context;\r\n            if (node && node.pagination) {\r\n                this.pagerInfo = { ...node.pagination };\r\n                this.showPager.next(\r\n                    node.expanded && node.pagination\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getPagerCount() {\r\n        const { pageSize, total } = this.pagerInfo;\r\n        if (!total) {\r\n            return 0;\r\n        } else {\r\n            return Math.ceil(total / pageSize);\r\n        }\r\n    }\r\n\r\n    isFirstPager() {\r\n        return this.pagerInfo.pageIndex === 1;\r\n    }\r\n\r\n    isLastPager() {\r\n        return this.pagerInfo.pageIndex === this.getPagerCount();\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex - 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex + 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    setCurrent(page: number, pageSize?: number, $event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.pageChange.emit({ pageIndex: page, pageSize, node: this.context.node, context: this.context });\r\n    }\r\n\r\n    pagerChanged(newPageIndex: number) {\r\n        this.setCurrent(newPageIndex, this.pagerInfo.pageSize);\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'childs-loading',\r\n    template: `\r\n    <div class=\"loading\">\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .loading{\r\n            width: 150px;\r\n            height: 10px;\r\n            margin: 0 auto;\r\n            margin-top:10px;\r\n            margin-bottom: 20px;\r\n        }\r\n        .loading span{\r\n            display: inline-block;\r\n            width: 10px;\r\n            height: 100%;\r\n            margin-right: 5px;\r\n            border-radius: 50%;\r\n            background: #59a1ff;\r\n            -webkit-animation: load 1.04s ease infinite;\r\n        }\r\n        .loading span:last-child{\r\n            margin-right: 0px;\r\n        }\r\n        @-webkit-keyframes load{\r\n            0%{\r\n                opacity: 1;\r\n                -webkit-transform: scale(1.3);\r\n            }\r\n            100%{\r\n                opacity: 0.2;\r\n                -webkit-transform: scale(.3);\r\n            }\r\n        }\r\n        .loading span:nth-child(1){\r\n            -webkit-animation-delay:0.13s;\r\n        }\r\n        .loading span:nth-child(2){\r\n            -webkit-animation-delay:0.26s;\r\n        }\r\n        .loading span:nth-child(3){\r\n            -webkit-animation-delay:0.39s;\r\n        }\r\n        .loading span:nth-child(4){\r\n            -webkit-animation-delay:0.52s;\r\n        }\r\n        .loading span:nth-child(5){\r\n            -webkit-animation-delay:0.65s;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class ChildsLoadingComponent implements OnInit {\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n","import { CommonUtils } from '@farris/ui-common';\r\nimport { TreeNode } from './types/treenode';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Pipe({name: 'tipmsg'})\r\nexport class CellTipsPipe implements PipeTransform {\r\n    constructor(private commonUtils: CommonUtils) {}\r\n    transform(col: any, ...args: any[]): any {\r\n        if (col.showTips) {\r\n            return this.getCellTooltipContent(col, args[0]);\r\n        }\r\n        return  '';\r\n    }\r\n\r\n    private getCellTooltipContent(col: TreeTableColumn, tn: TreeNode) {\r\n        let txt = this.commonUtils.getValue(col.field, tn.data);\r\n\r\n        if (col.tipContent) {\r\n            if ( typeof col.tipContent === 'string') {\r\n                txt = col.tipContent;\r\n            } else if (typeof col.tipContent === 'function') {\r\n                txt = col.tipContent(txt, tn.data, col);\r\n            }\r\n        } else {\r\n            if (col.formatter) {\r\n                if (typeof col.formatter === 'object') {\r\n                    if (col.formatter.type === 'enum') {\r\n                        txt = this.commonUtils.getEnumTitleFromColumnOptions(txt, col.formatter.options);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeNode } from './types/treenode';\r\n\r\n@Pipe({name: 'disablenode'})\r\nexport class DisableNodePipe implements PipeTransform {\r\n    transform(node: TreeNode, ...args: any[]): any {\r\n        const selectable = !node.selectable;\r\n        let selectable2 = false;\r\n        if (args && args.length) {\r\n            if (args[0]) {\r\n                selectable2 = args[0]({node});\r\n            }\r\n\r\n            if (args[1]) {  // æ è¡¨ç¦ç¨\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return selectable || selectable2;\r\n    }\r\n}","\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { DataColumnModule } from '@farris/ui-common/column';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PaginationModule } from '@farris/ui-pagination';\r\nimport { FarrisFormsModule } from '@farris/ui-forms';\r\nimport { FarrisContextMenuModule } from '@farris/ui-context-menu';\r\n\r\nimport { HighlightPipe } from './high-light.pipe';\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { TreeTableComponent, TTBodyComponent,\r\n    TreeTableTogglerComponent,\r\n    TreeTableSelectRowDirective,\r\n    TreeTableCheckboxComponent,\r\n    TreeTableHeaderCheckboxComponent,\r\n    DblClickRowDirective,\r\n    TTResizableColumnDirective,\r\n    TreeTableColumnDirective,\r\n    TTCustomCellStyleDirective,\r\n    CustomRowStyleDirective} from './treetable.component';\r\nimport { TreetableService } from './treetable.service';\r\nimport { FindInputComponent } from './find-input.component';\r\nimport { TreetableNodesPagerComponent } from './nodes_pager/nodes-pager.component';\r\nimport { ChildsLoadingComponent } from './nodes_pager/childs-loading.component';\r\nimport { CellTipsPipe } from './cell-tips.pipe';\r\nimport { DisableNodePipe } from './disable-node.pipe';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        PerfectScrollbarModule,\r\n        InputGroupModule,\r\n        LocaleModule.forRoot(),\r\n        DataColumnModule.forRoot(),\r\n        PaginationModule,\r\n        FarrisContextMenuModule,\r\n        FarrisFormsModule\r\n    ],\r\n    declarations: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        TreeTableColumnDirective,\r\n        TTCustomCellStyleDirective,\r\n        FindInputComponent,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n        DisableNodePipe\r\n    ],\r\n    exports: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        FarrisCommonModule,\r\n        TTCustomCellStyleDirective,\r\n        TreeTableColumnDirective,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n        DisableNodePipe,\r\n        FarrisContextMenuModule\r\n    ],\r\n    providers: [\r\n        TreetableService,\r\n        ResizeService,\r\n        TTHotkeys\r\n    ]\r\n})\r\nexport class TreeTableModule {\r\n\r\n}\r\n"]}