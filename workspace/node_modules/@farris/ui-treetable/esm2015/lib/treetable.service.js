/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
export class TreetableService {
    constructor() {
        this.selectionSource = new Subject();
        this.dblClickSource = new Subject();
        this.changeCheckboxStatus = new Subject();
        this.removeNode = new Subject();
        this.insertNode = new Subject();
        this.updateNode = new Subject();
        this.selectionSource$ = this.selectionSource.asObservable();
        this.dblClickSource$ = this.dblClickSource.asObservable();
        this.changeCheckboxStatus$ = this.changeCheckboxStatus.asObservable();
        this.insertNode$ = this.insertNode.asObservable();
        this.removeNode$ = this.removeNode.asObservable();
        this.updateNode$ = this.updateNode.asObservable();
    }
    /**
     * @param {?=} selected
     * @return {?}
     */
    onSelectionChange(selected) {
        this.selectionSource.next(selected);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onDblClick(rowNode) {
        this.dblClickSource.next(rowNode);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onChangeCheckboxStatus(rowNode) {
        this.changeCheckboxStatus.next(rowNode);
    }
    /**
     * @param {?} treeNode
     * @param {?=} parent
     * @return {?}
     */
    onInsert(treeNode, parent) {
        this.insertNode.next(treeNode);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onRemove(rowNode) {
        this.removeNode.next(rowNode);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onUpdate(rowNode) {
        this.updateNode.next(rowNode);
    }
    /**
     * @param {?} col
     * @param {?} tt
     * @return {?}
     */
    columnIsVisible(col, tt) {
        if (col.visible === undefined) {
            return true;
        }
        if (typeof col.visible === 'function') {
            return col.visible(tt);
        }
        return col.visible;
    }
    /**
     * @param {?} columns
     * @param {?} tt
     * @return {?}
     */
    checkColumnsForGroupHeader(columns, tt) {
        /** @type {?} */
        let _columns = [];
        if (columns && columns.length) {
            _columns = this.getDataColumns(columns);
        }
        return {
            columns: _columns
        };
    }
    /**
     * @private
     * @param {?} cols
     * @param {?} length
     * @return {?}
     */
    getDataFields(cols, length) {
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let j = 0;
        cols.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const colspan = n.colspan || 1;
            if (i + colspan <= length) {
                i += colspan;
                j++;
            }
        }));
        return cols.splice(0, j);
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    getDataColumns(cols) {
        if (!cols || !cols.length) {
            return [];
        }
        /** @type {?} */
        let fields = [];
        for (let i = 0; i < cols.length; i++) {
            /** @type {?} */
            let _cols = cols[i];
            if (cols[i] && !cols[i].length) {
                _cols = [...fields];
                fields = [];
            }
            _cols.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (!n.field && n.colspan && n.colspan > 1) {
                    if (n['halign']) {
                        n.hAlign = n['halign'];
                    }
                    this.getDataFields(cols[i + 1], n.colspan).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => {
                        if (!fields.includes((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => f.field === d.field))) {
                            fields.push(d);
                        }
                    }));
                }
                else {
                    if (!fields.includes((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.field === n.field))) {
                        fields.push(n);
                    }
                }
            }));
        }
        return fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.colspan || n.colspan === 1));
    }
}
TreetableService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.selectionSource;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.dblClickSource;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.changeCheckboxStatus;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.removeNode;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.insertNode;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.updateNode;
    /** @type {?} */
    TreetableService.prototype.selectionSource$;
    /** @type {?} */
    TreetableService.prototype.dblClickSource$;
    /** @type {?} */
    TreetableService.prototype.changeCheckboxStatus$;
    /** @type {?} */
    TreetableService.prototype.insertNode$;
    /** @type {?} */
    TreetableService.prototype.removeNode$;
    /** @type {?} */
    TreetableService.prototype.updateNode$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRyZWV0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi90cmVldGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTTNDLE1BQU0sT0FBTyxnQkFBZ0I7SUFEN0I7UUFHWSxvQkFBZSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDaEMsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQy9CLHlCQUFvQixHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFDOUMsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFDcEMsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFDckMsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFHNUMscUJBQWdCLEdBQW9CLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEUsb0JBQWUsR0FBb0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RSwwQkFBcUIsR0FBd0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RGLGdCQUFXLEdBQXlCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbkUsZ0JBQVcsR0FBd0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNsRSxnQkFBVyxHQUF3QixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBK0Z0RSxDQUFDOzs7OztJQTdGRyxpQkFBaUIsQ0FBQyxRQUFxQjtRQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxD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IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBSb3dOb2RlLCBUcmVlTm9kZSB9IGZyb20gJy4vdHlwZXMvdHJlZW5vZGUnO1xyXG5pbXBvcnQgeyBUcmVlVGFibGVDb2x1bW4gfSBmcm9tICcuL3R5cGVzL3RyZWV0YWJsZS1jb2x1bW4nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVHJlZXRhYmxlU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25Tb3VyY2UgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgcHJpdmF0ZSBkYmxDbGlja1NvdXJjZSA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICBwcml2YXRlIGNoYW5nZUNoZWNrYm94U3RhdHVzID0gbmV3IFN1YmplY3Q8Um93Tm9kZT4oKTtcclxuICAgIHByaXZhdGUgcmVtb3ZlTm9kZSA9IG5ldyBTdWJqZWN0PFJvd05vZGU+KCk7XHJcbiAgICBwcml2YXRlIGluc2VydE5vZGUgPSBuZXcgU3ViamVjdDxUcmVlTm9kZT4oKTtcclxuICAgIHByaXZhdGUgdXBkYXRlTm9kZSA9IG5ldyBTdWJqZWN0PFJvd05vZGU+KCk7XHJcblxyXG5cclxuICAgIHNlbGVjdGlvblNvdXJjZSQ6IE9ic2VydmFibGU8YW55PiA9IHRoaXMuc2VsZWN0aW9uU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgZGJsQ2xpY2tTb3VyY2UkOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLmRibENsaWNrU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgY2hhbmdlQ2hlY2tib3hTdGF0dXMkOiBPYnNlcnZhYmxlPFJvd05vZGU+ID0gdGhpcy5jaGFuZ2VDaGVja2JveFN0YXR1cy5hc09ic2VydmFibGUoKTtcclxuICAgIGluc2VydE5vZGUkOiBPYnNlcnZhYmxlPFRyZWVOb2RlPiA9IHRoaXMuaW5zZXJ0Tm9kZS5hc09ic2VydmFibGUoKTtcclxuICAgIHJlbW92ZU5vZGUkOiBPYnNlcnZhYmxlPFJvd05vZGU+ID0gdGhpcy5yZW1vdmVOb2RlLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgdXBkYXRlTm9kZSQ6IE9ic2VydmFibGU8Um93Tm9kZT4gPSB0aGlzLnVwZGF0ZU5vZGUuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgb25TZWxlY3Rpb25DaGFuZ2Uoc2VsZWN0ZWQ/OiBUcmVlTm9kZVtdKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25Tb3VyY2UubmV4dChzZWxlY3RlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EYmxDbGljayhyb3dOb2RlOiBSb3dOb2RlKSB7XHJcbiAgICAgICAgdGhpcy5kYmxDbGlja1NvdXJjZS5uZXh0KHJvd05vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlQ2hlY2tib3hTdGF0dXMocm93Tm9kZTogUm93Tm9kZSkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlQ2hlY2tib3hTdGF0dXMubmV4dChyb3dOb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkluc2VydCh0cmVlTm9kZTogVHJlZU5vZGUsIHBhcmVudD86IFRyZWVOb2RlKSB7XHJcbiAgICAgICAgdGhpcy5pbnNlcnROb2RlLm5leHQodHJlZU5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUmVtb3ZlKHJvd05vZGU6IFJvd05vZGUpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZU5vZGUubmV4dChyb3dOb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBvblVwZGF0ZShyb3dOb2RlOiBSb3dOb2RlKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlLm5leHQocm93Tm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29sdW1uSXNWaXNpYmxlKGNvbCwgdHQpIHtcclxuICAgICAgICBpZiAoY29sLnZpc2libGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb2wudmlzaWJsZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sLnZpc2libGUodHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbC52aXNpYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQ29sdW1uc0Zvckdyb3VwSGVhZGVyKGNvbHVtbnM6IGFueSwgdHQ6IGFueSkge1xyXG4gICAgICAgIGxldCBfY29sdW1ucyA9IFtdO1xyXG4gICAgICAgIGlmIChjb2x1bW5zICYmIGNvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIF9jb2x1bW5zID0gdGhpcy5nZXREYXRhQ29sdW1ucyhjb2x1bW5zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29sdW1uczogX2NvbHVtbnNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGdldERhdGFGaWVsZHMoY29scywgbGVuZ3RoKSB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGxldCBqID0gMDtcclxuICAgICAgICBjb2xzLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHNwYW4gPSBuLmNvbHNwYW4gfHwgMTtcclxuICAgICAgICAgICAgaWYgKGkgKyBjb2xzcGFuIDw9IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaSArPSBjb2xzcGFuO1xyXG4gICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbHMuc3BsaWNlKDAsIGopO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGdldERhdGFDb2x1bW5zKGNvbHMpIHtcclxuICAgICAgICBpZiAoIWNvbHMgfHwgIWNvbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaWVsZHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IF9jb2xzID0gY29sc1tpXTtcclxuICAgICAgICAgICAgaWYgKGNvbHNbaV0gJiYgIWNvbHNbaV0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBfY29scyA9IFsuLi5maWVsZHNdO1xyXG4gICAgICAgICAgICAgICAgZmllbGRzID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX2NvbHMuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghbi5maWVsZCAmJiBuLmNvbHNwYW4gJiYgbi5jb2xzcGFuID4gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoblsnaGFsaWduJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5oQWxpZ24gPSBuWydoYWxpZ24nXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGF0YUZpZWxkcyhjb2xzW2kgKyAxXSwgbi5jb2xzcGFuKS5mb3JFYWNoKGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpZWxkcy5pbmNsdWRlcyhmID0+IGYuZmllbGQgPT09IGQuZmllbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpZWxkcy5pbmNsdWRlcyhmID0+IGYuZmllbGQgPT09IG4uZmllbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmaWVsZHMuZmlsdGVyKG4gPT4gIW4uY29sc3BhbiB8fCBuLmNvbHNwYW4gPT09IDEpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==