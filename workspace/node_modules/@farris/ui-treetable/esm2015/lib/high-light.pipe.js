/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, ElementRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
export class HighlightPipe {
    /**
     * @param {?} sanitizer
     * @param {?} el
     */
    constructor(sanitizer, el) {
        this.sanitizer = sanitizer;
        this.el = el;
    }
    /**
     * @param {?} text
     * @param {?} keyword
     * @param {?=} field
     * @param {?=} findField
     * @return {?}
     */
    transform(text, keyword, field = '', findField = '') {
        /** @type {?} */
        let needSearch = true;
        if (field && findField) {
            if (findField.indexOf(',') === -1) {
                needSearch = field === findField;
            }
            else {
                needSearch = findField.split(',').some((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n === field));
            }
        }
        if (!needSearch) {
            return text;
        }
        if (keyword && text) {
            /** @type {?} */
            let pattern = keyword.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
            pattern = pattern.split(' ').filter((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                return t.length > 0;
            })).join('|');
            /** @type {?} */
            const regex = new RegExp(pattern, 'gi');
            return this.sanitizer.bypassSecurityTrustHtml(
            // text.replace(regex, (match) => `<span class="search-highlight">${match}</span>`)
            this.replaceContent(text, regex, (/**
             * @param {?} match
             * @return {?}
             */
            (match) => `<span class="search-highlight">${match}</span>`)));
        }
        else {
            return text;
        }
    }
    /**
     * @param {?} html
     * @param {?} context
     * @return {?}
     */
    parseHTML(html, context) {
        /** @type {?} */
        const t = (context || document).createElement('template');
        t.innerHTML = html;
        return t.content.cloneNode(true);
    }
    /**
     * @private
     * @param {?} strMatch1
     * @param {?} regex
     * @param {?} match
     * @return {?}
     */
    replaceContent(strMatch1, regex, match) {
        /** @type {?} */
        const matchReg1 = />.*?\</gi;
        // 先查出><之间的内容
        /** @type {?} */
        const strs = strMatch1.match(matchReg1);
        if (strs && strs.length) {
            for (const aa of strs) {
                /** @type {?} */
                const rep_old = strs[aa];
                // 拿到原始符合字符串
                /** @type {?} */
                const rep_new = strs[aa].replace(regex, match);
                // 替换成目的字符串
                /** @type {?} */
                const re2 = new RegExp(rep_old, 'g');
                strMatch1 = strMatch1.replace(re2, rep_new); // 将符合的原始字符串替换成新字符串
            }
            return strMatch1;
        }
        else {
            return strMatch1.replace(regex, match);
        }
    }
}
HighlightPipe.decorators = [
    { type: Pipe, args: [{ name: 'highlight' },] }
];
/** @nocollapse */
HighlightPipe.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef }
];
if (false) {
    /** @type {?} */
    HighlightPipe.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    HighlightPipe.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaC1saWdodC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS10cmVldGFibGUvIiwic291cmNlcyI6WyJsaWIvaGlnaC1saWdodC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBR25FLE1BQU0sT0FBTyxhQUFhOzs7OztJQUN0QixZQUFtQixTQUF1QixFQUFVLEVBQWM7UUFBL0MsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7SUFDbEUsQ0FBQzs7Ozs7Ozs7SUFDRCxTQUFTLENBQUMsSUFBWSxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsRUFBRSxFQUFFLFNBQVMsR0FBRyxFQUFFOztZQUNuRCxVQUFVLEdBQUcsSUFBSTtRQUNyQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDcEIsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUMvQixVQUFVLEdBQUcsS0FBSyxLQUFLLFNBQVMsQ0FBQzthQUNwQztpQkFBTTtnQkFDSCxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJOzs7O2dCQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBQyxDQUFDO2FBQzVEO1NBQ0o7UUFFRCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELElBQUksT0FBTyxJQUFJLElBQUksRUFBRTs7Z0JBQ2IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMscUNBQXFDLEVBQUUsTUFBTSxDQUFDO1lBQzVFLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUN0QyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7a0JBQ1AsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QjtZQUN6QyxtRkFBbUY7WUFDbkYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsS0FBSzs7OztZQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxrQ0FBa0MsS0FBSyxTQUFTLEVBQUMsQ0FDaEcsQ0FBQztTQUVMO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQztTQUNmO0lBQ0wsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLElBQUksRUFBRSxPQUFPOztjQUNiLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBQ3pELENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7Ozs7SUFFTyxjQUFjLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLOztjQUNwQyxTQUFTLEdBQUcsVUFBVTs7O2NBQ3RCLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUN2QyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3JCLEtBQUssTUFBTSxFQUFFLElBQUksSUFBSSxFQUFFOztzQkFDYixPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQzs7O3NCQUNsQixPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDOzs7c0JBQ3hDLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO2dCQUNwQyxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxtQkFBbUI7YUFDbkU7WUFDRCxPQUFPLFNBQVMsQ0FBQztTQUNwQjthQUFNO1lBQ0gsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMxQztJQUNMLENBQUM7OztZQXRESixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFOzs7O1lBRmxCLFlBQVk7WUFEUyxVQUFVOzs7O0lBS3hCLGtDQUE4Qjs7Ozs7SUFBRSwyQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlVHJhbnNmb3JtLCBQaXBlLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ2hpZ2hsaWdodCcgfSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xyXG4gICAgfVxyXG4gICAgdHJhbnNmb3JtKHRleHQ6IHN0cmluZywga2V5d29yZCwgZmllbGQgPSAnJywgZmluZEZpZWxkID0gJycpOiBTYWZlSHRtbCB7XHJcbiAgICAgICAgbGV0IG5lZWRTZWFyY2ggPSB0cnVlO1xyXG4gICAgICAgIGlmIChmaWVsZCAmJiBmaW5kRmllbGQpIHtcclxuICAgICAgICAgICAgaWYgKGZpbmRGaWVsZC5pbmRleE9mKCcsJykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBuZWVkU2VhcmNoID0gZmllbGQgPT09IGZpbmRGaWVsZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5lZWRTZWFyY2ggPSBmaW5kRmllbGQuc3BsaXQoJywnKS5zb21lKG4gPT4gbiA9PT0gZmllbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW5lZWRTZWFyY2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoa2V5d29yZCAmJiB0ZXh0KSB7XHJcbiAgICAgICAgICAgIGxldCBwYXR0ZXJuID0ga2V5d29yZC5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xyXG4gICAgICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5zcGxpdCgnICcpLmZpbHRlcigodCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQubGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgfSkuam9pbignfCcpO1xyXG4gICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybiwgJ2dpJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChcclxuICAgICAgICAgICAgICAgIC8vIHRleHQucmVwbGFjZShyZWdleCwgKG1hdGNoKSA9PiBgPHNwYW4gY2xhc3M9XCJzZWFyY2gtaGlnaGxpZ2h0XCI+JHttYXRjaH08L3NwYW4+YClcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZUNvbnRlbnQodGV4dCwgcmVnZXgsIChtYXRjaCkgPT4gYDxzcGFuIGNsYXNzPVwic2VhcmNoLWhpZ2hsaWdodFwiPiR7bWF0Y2h9PC9zcGFuPmApXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwYXJzZUhUTUwoaHRtbCwgY29udGV4dCkge1xyXG4gICAgICAgIGNvbnN0IHQgPSAoY29udGV4dCB8fCBkb2N1bWVudCkuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcclxuICAgICAgICB0LmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgcmV0dXJuIHQuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZXBsYWNlQ29udGVudChzdHJNYXRjaDEsIHJlZ2V4LCBtYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoUmVnMSA9IC8+Lio/XFw8L2dpOyAvLyDlhYjmn6Xlh7o+POS5i+mXtOeahOWGheWuuVxyXG4gICAgICAgIGNvbnN0IHN0cnMgPSBzdHJNYXRjaDEubWF0Y2gobWF0Y2hSZWcxKTsgLy8g5ou/5Yiw5omA5pyJ56ym5ZCI55qE6ZSu5YC8XHJcbiAgICAgICAgaWYgKHN0cnMgJiYgc3Rycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBhYSBvZiBzdHJzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXBfb2xkID0gc3Ryc1thYV07IC8vIOaLv+WIsOWOn+Wni+espuWQiOWtl+espuS4slxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVwX25ldyA9IHN0cnNbYWFdLnJlcGxhY2UocmVnZXgsIG1hdGNoKTsgLy8g5pu/5o2i5oiQ55uu55qE5a2X56ym5LiyXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZTIgPSBuZXcgUmVnRXhwKHJlcF9vbGQsICdnJyk7IC8vIOWIqeeUqOWOn+Wni+Wtl+espuS4sueUn+aIkOato+WImVxyXG4gICAgICAgICAgICAgICAgc3RyTWF0Y2gxID0gc3RyTWF0Y2gxLnJlcGxhY2UocmUyLCByZXBfbmV3KTsgLy8g5bCG56ym5ZCI55qE5Y6f5aeL5a2X56ym5Liy5pu/5o2i5oiQ5paw5a2X56ym5LiyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHN0ck1hdGNoMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyTWF0Y2gxLnJlcGxhY2UocmVnZXgsIG1hdGNoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19