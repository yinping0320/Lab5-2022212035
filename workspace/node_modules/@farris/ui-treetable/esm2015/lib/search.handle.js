/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep } from 'lodash-es';
export class SearchHandle {
    /**
     * @param {?} ttInstance
     */
    constructor(ttInstance) {
        this.ttInstance = ttInstance;
        this.allNodes = [];
    }
    // 刷新查询结果
    /**
     * @param {?=} from
     * @return {?}
     */
    research(from = 'client') {
        const { field, value } = this.ttInstance.searchData;
        this.allNodes = [];
        this.search(field, value, from);
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} from
     * @return {?}
     */
    search(field, value, from = 'client') {
        if (!this.allNodes.length) {
            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);
        }
        switch (from) {
            case 'server':
                this.searchOnServer(field, value);
                break;
            default:
                if (value !== '' && value !== undefined && value !== null) {
                    /** @type {?} */
                    const values = this.searchOnClient(field, value, this.allNodes);
                    this.ttInstance.state.searchRowNodes = null;
                    this._updateSerializedValues(values);
                }
                else {
                    this.ttInstance.state.searched = false;
                    this.ttInstance.updateSerializedValue();
                }
                this._refreshTree();
                break;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _refreshTree() {
        if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {
            this.ttInstance.checkedNodes(this.ttInstance.checkeds.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.data[this.ttInstance.idField])));
            this.ttInstance['updateNodeStatus']();
            this.ttInstance.detectChanges();
        }
        else {
            if (this.ttInstance.serializedValue && this.ttInstance.serializedValue.length) {
                this.ttInstance.resize();
            }
            this.ttInstance.detectChanges();
            if (this.ttInstance.psRef) {
                this.ttInstance.psRef.directiveRef.update();
            }
        }
    }
    /**
     * @private
     * @param {?} visibleItems
     * @return {?}
     */
    _updateSerializedValues(visibleItems) {
        /** @type {?} */
        const pids = ((/** @type {?} */ (visibleItems.map((/**
         * @param {?} n
         * @return {?}
         */
        n => [...n.parents, n.id]))))).flat();
        /** @type {?} */
        const pidArr = Array.from(new Set(pids));
        /** @type {?} */
        const rowNodes = this.allNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => pidArr.some((/**
         * @param {?} item
         * @return {?}
         */
        item => item == n.id)))).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            r.expanded = true;
            this.ttInstance.updateNodeProperty(r.id, { expanded: true });
            return r;
        }));
        this.ttInstance.state.searched = true;
        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);
        this.ttInstance.state.searchRowNodes = this.ttInstance.serializedValue;
    }
    /**
     * @param {?} item
     * @param {?} allNodes
     * @return {?}
     */
    findParent(item, allNodes) {
        /** @type {?} */
        let res = [];
        if (item && allNodes && allNodes.length) {
            /** @type {?} */
            const p = allNodes.find((/**
             * @param {?} t1
             * @return {?}
             */
            t1 => t1.id === item.data[this.ttInstance.idField]));
            res.push(p);
            if (p.parent) {
                res = res.concat(this.findParent(p.parent, allNodes));
            }
        }
        return res;
    }
    /**
     * @private
     * @param {?} item
     * @param {?} value
     * @param {?=} fields
     * @return {?}
     */
    searchExpression(item, value, fields = []) {
        /** @type {?} */
        const _fields = fields.length ? fields : this.ttInstance.columns.map((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field));
        /** @type {?} */
        const results = _fields.map((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            /** @type {?} */
            const targetValue = this.getValue(f, item.node.data);
            if (targetValue !== null && targetValue !== undefined) {
                if (typeof targetValue === 'number') {
                    return targetValue === parseFloat(value);
                }
                else {
                    return targetValue.toLowerCase().indexOf(value.toLowerCase()) > -1;
                }
            }
            else {
                this.ttInstance.writeConsole(`不存在列 ${f}`);
            }
        }));
        return results.reduce((/**
         * @param {?} flag
         * @param {?} curr
         * @return {?}
         */
        (flag, curr) => {
            return flag || curr;
        }), false);
    }
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getValue(field, data) {
        if (field) {
            if (field.indexOf('.') > -1) {
                try {
                    return field.split('.').reduce((/**
                     * @param {?} r
                     * @param {?} f
                     * @return {?}
                     */
                    (r, f) => {
                        if (r) {
                            return r[f];
                        }
                        else {
                            return null;
                        }
                    }), data);
                }
                catch (_a) {
                    this.ttInstance.writeConsole(`字段 ${field} 不存在。`);
                }
            }
            else {
                return data[field];
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    getFindTextTotal(field, value, nodes) {
        /** @type {?} */
        let t = 0;
        /** @type {?} */
        const getCount = (/**
         * @param {?} fields
         * @return {?}
         */
        (fields) => {
            /** @type {?} */
            let c = 0;
            nodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                fields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => {
                    /** @type {?} */
                    const targetValue = '' + this.getValue(f, n.node.data);
                    if (targetValue !== undefined) {
                        if (targetValue.indexOf(value) > -1) {
                            c++;
                        }
                    }
                }));
            }));
            return c;
        });
        /** @type {?} */
        let _fields = [field];
        if (field === '*') {
            _fields = this.ttInstance.columns.map((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field));
        }
        else if (field.indexOf(',') > -1) {
            _fields = field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            f => f.trim()));
        }
        t = getCount(_fields);
        return t;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    searchOnClient(field, value, nodes) {
        /** @type {?} */
        let resultNodes = [];
        if (value === undefined || value === null) {
            return [];
        }
        if (field === '*') {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.searchExpression(n, value)));
        }
        else if (field.indexOf(',') > -1) {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.searchExpression(n, value, field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            f => f.trim())))));
        }
        else {
            value = value.toLowerCase();
            if (field.indexOf('.') === -1) {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1));
            }
            else {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => ('' + this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1));
            }
        }
        return resultNodes;
    }
    /**
     * @param {?} conditons
     * @return {?}
     */
    searchWithConditions(conditons) {
        if (!this.allNodes.length) {
            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);
        }
        /** @type {?} */
        const fields = Object.keys(conditons);
        if (!fields.length) {
            this.ttInstance.state.searched = false;
            this.ttInstance.updateSerializedValue();
        }
        else {
            /** @type {?} */
            const nodes = this.allNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                /** @type {?} */
                const results = fields.map((/**
                 * @param {?} field
                 * @return {?}
                 */
                field => {
                    /** @type {?} */
                    const value = conditons[field];
                    return this.searchExpression(n, value, [field]);
                }));
                // return results.reduce((flag, curr) => {
                //     return flag && curr;
                // }, false);
                return results.every((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
            }));
            this.ttInstance.state.searchRowNodes = null;
            this._updateSerializedValues(nodes);
        }
        this._refreshTree();
    }
    /**
     * @param {?} rowNodes
     * @param {?} allNodes
     * @return {?}
     */
    findParents(rowNodes, allNodes) {
        /** @type {?} */
        let res = [];
        rowNodes.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            res = res.concat(this.findParent(item.node, allNodes));
        }));
        return Array.from(new Set(res));
    }
    /**
     * @private
     * @param {?} parentNode
     * @param {?} visibleItems
     * @return {?}
     */
    resetTreeData(parentNode, visibleItems) {
        /** @type {?} */
        let res = [];
        /** @type {?} */
        let arr = [];
        if (parentNode === null) {
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            t2 => t2.parent === parentNode));
        }
        else {
            parentNode.node.expanded = true;
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            t2 => t2.parent && t2.parent.data[this.ttInstance.idField] === parentNode.id));
            if (!arr.length) {
                parentNode.node.children = [];
            }
            else {
                parentNode.node.children = arr.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                tn => tn.node));
            }
        }
        arr.forEach((/**
         * @param {?} a
         * @return {?}
         */
        a => {
            a.visible = true;
            res.push(a);
            res = res.concat(this.resetTreeData(a, visibleItems));
        }));
        return cloneDeep(res);
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    searchOnServer(field, value) {
    }
}
if (false) {
    /** @type {?} */
    SearchHandle.prototype.allNodes;
    /**
     * @type {?}
     * @private
     */
    SearchHandle.prototype.ttInstance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmhhbmRsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdHJlZXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3NlYXJjaC5oYW5kbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQVdBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsTUFBTSxPQUFPLFlBQVk7Ozs7SUFFckIsWUFBb0IsVUFBOEI7UUFBOUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFEbEQsYUFBUSxHQUFHLEVBQUUsQ0FBQztJQUVkLENBQUM7Ozs7OztJQUdELFFBQVEsQ0FBQyxPQUEwQixRQUFRO2NBQ2pDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVTtRQUNuRCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Ozs7OztJQUlELE1BQU0sQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLE9BQTBCLFFBQVE7UUFDbkUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLFFBQVE7Z0JBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xDLE1BQU07WUFDVjtnQkFDSSxJQUFJLEtBQUssS0FBSyxFQUFFLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFOzswQkFDakQsTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEtBQUss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QUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2IsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNILFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHOzs7O2dCQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3ZEO1NBQ0o7UUFDRCxHQUFHLENBQUMsT0FBTzs7OztRQUFFLENBQUMsQ0FBQyxFQUFFO1lBQ2IsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNaLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUQsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7O0lBRU8sY0FBYyxDQUFDLEtBQWEsRUFBRSxLQUFhO0lBRW5ELENBQUM7Q0FFSjs7O0lBdE9HLGdDQUFjOzs7OztJQUNGLGtDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcbi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShsdWNhcyBodWFuZylcclxuICogQERhdGU6IDIwMTgtMTItMTggMTM6Mzg6NTFcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTEtMTUgMTU6MTM6NTZcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBUcmVlVGFibGVDb21wb25lbnQgfSBmcm9tICcuL3RyZWV0YWJsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBSb3dOb2RlLCBUcmVlTm9kZSB9IGZyb20gJy4vdHlwZXMvdHJlZW5vZGUnO1xyXG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5leHBvcnQgY2xhc3MgU2VhcmNoSGFuZGxlIHtcclxuICAgIGFsbE5vZGVzID0gW107XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHR0SW5zdGFuY2U6IFRyZWVUYWJsZUNvbXBvbmVudCkge1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWIt+aWsOafpeivoue7k+aenFxyXG4gICAgcmVzZWFyY2goZnJvbTogJ2NsaWVudCd8J3NlcnZlcicgPSAnY2xpZW50JyApIHtcclxuICAgICAgICBjb25zdCB7IGZpZWxkLCB2YWx1ZSB9ID0gdGhpcy50dEluc3RhbmNlLnNlYXJjaERhdGE7XHJcbiAgICAgICAgdGhpcy5hbGxOb2RlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoKGZpZWxkLCB2YWx1ZSwgZnJvbSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBzZWFyY2goZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZnJvbTogJ2NsaWVudCd8J3NlcnZlcicgPSAnY2xpZW50Jyk6IGFueSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbE5vZGVzID0gY2xvbmVEZWVwKHRoaXMudHRJbnN0YW5jZS5zdGF0ZS5yb3dOb2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoZnJvbSkge1xyXG4gICAgICAgICAgICBjYXNlICdzZXJ2ZXInOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hPblNlcnZlcihmaWVsZCwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09ICcnICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnNlYXJjaE9uQ2xpZW50KGZpZWxkLCB2YWx1ZSwgdGhpcy5hbGxOb2Rlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLnN0YXRlLnNlYXJjaFJvd05vZGVzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTZXJpYWxpemVkVmFsdWVzKHZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS5zdGF0ZS5zZWFyY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS51cGRhdGVTZXJpYWxpemVkVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoVHJlZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9yZWZyZXNoVHJlZSgpIHtcclxuICAgICAgICBpZiAodGhpcy50dEluc3RhbmNlLmNoZWNrZWRzICYmIHRoaXMudHRJbnN0YW5jZS5jaGVja2Vkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLmNoZWNrZWROb2Rlcyh0aGlzLnR0SW5zdGFuY2UuY2hlY2tlZHMubWFwKG4gPT4gbi5kYXRhW3RoaXMudHRJbnN0YW5jZS5pZEZpZWxkXSkpO1xyXG4gICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2VbJ3VwZGF0ZU5vZGVTdGF0dXMnXSgpO1xyXG4gICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2UuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnR0SW5zdGFuY2Uuc2VyaWFsaXplZFZhbHVlICYmIHRoaXMudHRJbnN0YW5jZS5zZXJpYWxpemVkVmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2UucmVzaXplKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHRJbnN0YW5jZS5wc1JlZikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLnBzUmVmLmRpcmVjdGl2ZVJlZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVTZXJpYWxpemVkVmFsdWVzKHZpc2libGVJdGVtczogUm93Tm9kZVtdKSB7XHJcbiAgICAgICAgY29uc3QgcGlkcyA9ICh2aXNpYmxlSXRlbXMubWFwKG4gPT4gWy4uLm4ucGFyZW50cywgbi5pZF0pIGFzIGFueSkuZmxhdCgpO1xyXG4gICAgICAgIGNvbnN0IHBpZEFyciA9IEFycmF5LmZyb20obmV3IFNldChwaWRzKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJvd05vZGVzID0gIHRoaXMuYWxsTm9kZXMuZmlsdGVyKG4gPT4gcGlkQXJyLnNvbWUoaXRlbT0+aXRlbT09bi5pZCkpLm1hcChyID0+IHtcclxuICAgICAgICAgICAgci5leHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS51cGRhdGVOb2RlUHJvcGVydHkoci5pZCwge2V4cGFuZGVkOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy50dEluc3RhbmNlLnN0YXRlLnNlYXJjaGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnR0SW5zdGFuY2Uuc2VyaWFsaXplZFZhbHVlID0gdGhpcy5yZXNldFRyZWVEYXRhKG51bGwsIHJvd05vZGVzKTtcclxuICAgICAgICB0aGlzLnR0SW5zdGFuY2Uuc3RhdGUuc2VhcmNoUm93Tm9kZXMgPSB0aGlzLnR0SW5zdGFuY2Uuc2VyaWFsaXplZFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRQYXJlbnQoaXRlbTogVHJlZU5vZGUsIGFsbE5vZGVzOiBhbnlbXSkge1xyXG4gICAgICAgIGxldCByZXMgPSBbXTtcclxuICAgICAgICBpZiAoaXRlbSAmJiBhbGxOb2RlcyAmJiBhbGxOb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgcCA9IGFsbE5vZGVzLmZpbmQodDEgPT4gdDEuaWQgPT09IGl0ZW0uZGF0YVt0aGlzLnR0SW5zdGFuY2UuaWRGaWVsZF0pO1xyXG4gICAgICAgICAgICByZXMucHVzaChwKTtcclxuICAgICAgICAgICAgaWYgKHAucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSByZXMuY29uY2F0KHRoaXMuZmluZFBhcmVudChwLnBhcmVudCwgYWxsTm9kZXMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2VhcmNoRXhwcmVzc2lvbihpdGVtOiBSb3dOb2RlLCB2YWx1ZTogc3RyaW5nLCBmaWVsZHM6IHN0cmluZ1tdID0gW10pIHtcclxuICAgICAgICBjb25zdCBfZmllbGRzID0gZmllbGRzLmxlbmd0aCA/IGZpZWxkcyA6IHRoaXMudHRJbnN0YW5jZS5jb2x1bW5zLm1hcChjID0+IGMuZmllbGQpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBfZmllbGRzLm1hcChmID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSB0aGlzLmdldFZhbHVlKGYsIGl0ZW0ubm9kZS5kYXRhKTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldFZhbHVlICE9PSBudWxsICYmIHRhcmdldFZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0VmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFZhbHVlID09PSBwYXJzZUZsb2F0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWx1ZS50b0xvd2VyQ2FzZSgpKSA+IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLndyaXRlQ29uc29sZShg5LiN5a2Y5Zyo5YiXICR7Zn1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0cy5yZWR1Y2UoKGZsYWcsIGN1cnIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGZsYWcgfHwgY3VycjtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRWYWx1ZShmaWVsZCwgZGF0YSkge1xyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICBpZiAoZmllbGQuaW5kZXhPZignLicpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQuc3BsaXQoJy4nKS5yZWR1Y2UoIChyLCBmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJbZl07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgZGF0YSApO1xyXG4gICAgICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS53cml0ZUNvbnNvbGUoYOWtl+autSAke2ZpZWxkfSDkuI3lrZjlnKjjgIJgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtmaWVsZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmluZFRleHRUb3RhbChmaWVsZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBub2RlczogUm93Tm9kZVtdKSB7XHJcbiAgICAgICAgbGV0IHQgPSAwO1xyXG4gICAgICAgIGNvbnN0IGdldENvdW50ID0gKGZpZWxkcyk6IGFueSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjID0gMDtcclxuICAgICAgICAgICAgbm9kZXMuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFZhbHVlID0gJycgKyAgIHRoaXMuZ2V0VmFsdWUoZiwgbi5ub2RlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRWYWx1ZS5pbmRleE9mKHZhbHVlKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBjO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IF9maWVsZHMgPSBbZmllbGRdO1xyXG4gICAgICAgIGlmIChmaWVsZCA9PT0gJyonKSB7XHJcbiAgICAgICAgICAgIF9maWVsZHMgPSB0aGlzLnR0SW5zdGFuY2UuY29sdW1ucy5tYXAoYyA9PiBjLmZpZWxkKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5pbmRleE9mKCcsJykgPiAtMSkge1xyXG4gICAgICAgICAgICBfZmllbGRzID0gZmllbGQuc3BsaXQoJywnKS5tYXAoZiA9PiBmLnRyaW0oKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0ID0gZ2V0Q291bnQoX2ZpZWxkcyk7XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2VhcmNoT25DbGllbnQoZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZywgbm9kZXM6IFJvd05vZGVbXSkge1xyXG4gICAgICAgIGxldCByZXN1bHROb2RlczogUm93Tm9kZVtdID0gW107XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmllbGQgPT09ICcqJykge1xyXG4gICAgICAgICAgICByZXN1bHROb2RlcyA9IG5vZGVzLmZpbHRlcihuID0+IHRoaXMuc2VhcmNoRXhwcmVzc2lvbihuLCB2YWx1ZSkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQuaW5kZXhPZignLCcpID4gLTEpIHtcclxuICAgICAgICAgICAgcmVzdWx0Tm9kZXMgPSBub2Rlcy5maWx0ZXIobiA9PiB0aGlzLnNlYXJjaEV4cHJlc3Npb24obiwgdmFsdWUsIGZpZWxkLnNwbGl0KCcsJykubWFwKGYgPT4gZi50cmltKCkpKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBpZiAoZmllbGQuaW5kZXhPZignLicpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Tm9kZXMgPSBub2Rlcy5maWx0ZXIobiA9PiAoJycgKyBuLm5vZGUuZGF0YVtmaWVsZF0pLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWx1ZSkgPiAtMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHROb2RlcyA9IG5vZGVzLmZpbHRlcihuID0+ICgnJyArIHRoaXMuZ2V0VmFsdWUoZmllbGQsIG4ubm9kZS5kYXRhKSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbHVlKSA+IC0xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdE5vZGVzO1xyXG4gICAgfVxyXG5cclxuICAgIHNlYXJjaFdpdGhDb25kaXRpb25zKGNvbmRpdG9uczoge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWxsTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsTm9kZXMgPSBjbG9uZURlZXAodGhpcy50dEluc3RhbmNlLnN0YXRlLnJvd05vZGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmllbGRzID0gT2JqZWN0LmtleXMoY29uZGl0b25zKTtcclxuICAgICAgICBpZiAoIWZpZWxkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy50dEluc3RhbmNlLnN0YXRlLnNlYXJjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudHRJbnN0YW5jZS51cGRhdGVTZXJpYWxpemVkVmFsdWUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuYWxsTm9kZXMuZmlsdGVyKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGZpZWxkcy5tYXAoZmllbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29uZGl0b25zW2ZpZWxkXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hFeHByZXNzaW9uKG4sIHZhbHVlLCBbZmllbGRdKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHJlc3VsdHMucmVkdWNlKChmbGFnLCBjdXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIGZsYWcgJiYgY3VycjtcclxuICAgICAgICAgICAgICAgIC8vIH0sIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzLmV2ZXJ5KG4gPT4gbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnR0SW5zdGFuY2Uuc3RhdGUuc2VhcmNoUm93Tm9kZXMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTZXJpYWxpemVkVmFsdWVzKG5vZGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVmcmVzaFRyZWUoKTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kUGFyZW50cyhyb3dOb2RlcywgYWxsTm9kZXMpIHtcclxuICAgICAgICBsZXQgcmVzID0gW107XHJcbiAgICAgICAgcm93Tm9kZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgcmVzID0gcmVzLmNvbmNhdCh0aGlzLmZpbmRQYXJlbnQoaXRlbS5ub2RlLCBhbGxOb2RlcykpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KHJlcykpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVzZXRUcmVlRGF0YShwYXJlbnROb2RlOiBSb3dOb2RlLCB2aXNpYmxlSXRlbXM6IFJvd05vZGVbXSkge1xyXG4gICAgICAgIGxldCByZXMgPSBbXTtcclxuICAgICAgICBsZXQgYXJyID0gW107XHJcbiAgICAgICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXJyID0gdmlzaWJsZUl0ZW1zLmZpbHRlcih0MiA9PiB0Mi5wYXJlbnQgPT09IHBhcmVudE5vZGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmVudE5vZGUubm9kZS5leHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGFyciA9IHZpc2libGVJdGVtcy5maWx0ZXIodDIgPT4gdDIucGFyZW50ICYmIHQyLnBhcmVudC5kYXRhW3RoaXMudHRJbnN0YW5jZS5pZEZpZWxkXSA9PT0gcGFyZW50Tm9kZS5pZCk7XHJcbiAgICAgICAgICAgIGlmICghYXJyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5ub2RlLmNoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLm5vZGUuY2hpbGRyZW4gPSBhcnIubWFwKCB0biA9PiB0bi5ub2RlICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYXJyLmZvckVhY2goIGEgPT4ge1xyXG4gICAgICAgICAgICBhLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXMucHVzaChhKTtcclxuICAgICAgICAgICAgcmVzID0gcmVzLmNvbmNhdCh0aGlzLnJlc2V0VHJlZURhdGEoYSwgdmlzaWJsZUl0ZW1zKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lRGVlcChyZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2VhcmNoT25TZXJ2ZXIoZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIl19