/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class VirtualizedLoaderService {
    /**
     * @param {?} tt
     */
    constructor(tt) {
        this.tt = tt;
    }
    /**
     * @return {?}
     */
    getTableHeight() {
        return this.tt.height;
    }
    /**
     * @return {?}
     */
    getTableHeaderHeight() {
        return this.tt.headerBox.nativeElement.getBoundingClientRect().height;
    }
    /**
     * @return {?}
     */
    getTableBodyHeight() {
        return this.tt.height - this.getTableHeaderHeight();
    }
    /**
     * @return {?}
     */
    getTableWidth() {
        return this.tt.width;
    }
    /**
     * @return {?}
     */
    getRowHeight() {
        return this.tt.rowHeight;
    }
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    getRowNodes(scrollTop) {
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        const rows = [];
        /** @type {?} */
        let topHideHeight = 0;
        /** @type {?} */
        let bottomHideHeight = 0;
        /** @type {?} */
        const rowNodes = this.tt.getCurrentAllRowNodes();
        // const {rowNodes } = this.tt.state;
        /** @type {?} */
        const rowHeight = this.getRowHeight();
        /** @type {?} */
        const minTop = scrollTop;
        /** @type {?} */
        const maxTop = minTop + this.getTableHeight() + rowHeight;
        for (let i = 0; i < rowNodes.length; i++) {
            /** @type {?} */
            const n = rowNodes[i];
            if (!n.visible) {
                continue;
            }
            top += rowHeight;
            if (top + rowHeight < minTop) {
                topHideHeight += rowHeight;
                continue;
            }
            else {
                if (top > maxTop) {
                    bottomHideHeight += rowHeight;
                    continue;
                }
            }
            rows.push(n);
        }
        return {
            data: rows,
            topHideHeight,
            bottomHideHeight
        };
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    VirtualizedLoaderService.prototype.tt;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbGl6ZWQtbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRyZWV0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi92aXJ0dWFsaXplZC1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBV0EsTUFBTSxPQUFPLHdCQUF3Qjs7OztJQUNqQyxZQUFvQixFQUFzQjtRQUF0QixPQUFFLEdBQUYsRUFBRSxDQUFvQjtJQUFHLENBQUM7Ozs7SUFFOUMsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDMUIsQ0FBQzs7OztJQUNELG9CQUFvQjtRQUNoQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUMxRSxDQUFDOzs7O0lBQ0Qsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUN4RCxDQUFDOzs7O0lBQ0QsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBR0QsV0FBVyxDQUFDLFNBQWlCOztZQUNyQixHQUFHLEdBQUcsQ0FBQzs7Y0FDTCxJQUFJLEdBQUcsRUFBRTs7WUFDWCxhQUFhLEdBQUcsQ0FBQzs7WUFDakIsZ0JBQWdCLEdBQUcsQ0FBQzs7Y0FHbEIsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMscUJBQXFCLEVBQUU7OztjQUcxQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRTs7Y0FDL0IsTUFBTSxHQUFHLFNBQVM7O2NBQ2xCLE1BQU0sR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLFNBQVM7UUFDekQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2tCQUNoQyxDQUFDLEdBQVksUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDYixTQUFTO2FBQ1o7WUFDRCxHQUFHLElBQUksU0FBUyxDQUFDO1lBQ2pCLElBQUksR0FBRyxHQUFHLFNBQVMsR0FBRyxNQUFNLEVBQUU7Z0JBQzFCLGFBQWEsSUFBSSxTQUFTLENBQUM7Z0JBQzNCLFNBQVM7YUFDWjtpQkFBTTtnQkFDSCxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUU7b0JBQ2QsZ0JBQWdCLElBQUksU0FBUyxDQUFDO29CQUM5QixTQUFTO2lCQUNaO2FBQ0o7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hCO1FBRUQsT0FBTztZQUNILElBQUksRUFBRSxJQUFJO1lBQ1YsYUFBYTtZQUNiLGdCQUFnQjtTQUNuQixDQUFDO0lBQ04sQ0FBQztDQUNKOzs7Ozs7SUExRGUsc0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wNS0yMyAxMDoyNzowOVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0wOS0wMiAwOTowODoyNVxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgVHJlZVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi90cmVldGFibGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUm93Tm9kZSB9IGZyb20gJy4vdHlwZXMvdHJlZW5vZGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpcnR1YWxpemVkTG9hZGVyU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHR0OiBUcmVlVGFibGVDb21wb25lbnQpIHt9XHJcblxyXG4gICAgZ2V0VGFibGVIZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHQuaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgZ2V0VGFibGVIZWFkZXJIZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHQuaGVhZGVyQm94Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgZ2V0VGFibGVCb2R5SGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR0LmhlaWdodCAtIHRoaXMuZ2V0VGFibGVIZWFkZXJIZWlnaHQoKTtcclxuICAgIH1cclxuICAgIGdldFRhYmxlV2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHQud2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Um93SGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR0LnJvd0hlaWdodDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0Um93Tm9kZXMoc2Nyb2xsVG9wOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgdG9wID0gMDtcclxuICAgICAgICBjb25zdCByb3dzID0gW107XHJcbiAgICAgICAgbGV0IHRvcEhpZGVIZWlnaHQgPSAwO1xyXG4gICAgICAgIGxldCBib3R0b21IaWRlSGVpZ2h0ID0gMDtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgY29uc3Qgcm93Tm9kZXMgPSB0aGlzLnR0LmdldEN1cnJlbnRBbGxSb3dOb2RlcygpO1xyXG5cclxuICAgICAgICAvLyBjb25zdCB7cm93Tm9kZXMgfSA9IHRoaXMudHQuc3RhdGU7XHJcbiAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gdGhpcy5nZXRSb3dIZWlnaHQoKTtcclxuICAgICAgICBjb25zdCBtaW5Ub3AgPSBzY3JvbGxUb3A7XHJcbiAgICAgICAgY29uc3QgbWF4VG9wID0gbWluVG9wICsgdGhpcy5nZXRUYWJsZUhlaWdodCgpICsgcm93SGVpZ2h0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbjogUm93Tm9kZSA9IHJvd05vZGVzW2ldO1xyXG4gICAgICAgICAgICBpZiAoICFuLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvcCArPSByb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgIGlmICh0b3AgKyByb3dIZWlnaHQgPCBtaW5Ub3ApIHtcclxuICAgICAgICAgICAgICAgIHRvcEhpZGVIZWlnaHQgKz0gcm93SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9wID4gbWF4VG9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tSGlkZUhlaWdodCArPSByb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJvd3MucHVzaChuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRhdGE6IHJvd3MsXHJcbiAgICAgICAgICAgIHRvcEhpZGVIZWlnaHQsXHJcbiAgICAgICAgICAgIGJvdHRvbUhpZGVIZWlnaHRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==