/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { debounceTime, map, filter } from 'rxjs/operators';
import { Component, EventEmitter, Output, ElementRef, ViewChild, NgZone, Injector, Input } from '@angular/core';
import { fromEvent } from 'rxjs';
export class FindInputComponent {
    /**
     * @param {?} el
     * @param {?} ngZone
     * @param {?} injector
     */
    constructor(el, ngZone, injector) {
        this.el = el;
        this.ngZone = ngZone;
        this.injector = injector;
        this.current = 0;
        this.count = 0;
        this.columns = [];
        this.close = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.enterHandler = new EventEmitter();
        this.findField = '';
        this.keyupEventSub = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.columns.length) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => !c.formatter && c.field));
            this.findField = this.columns[0].field;
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.keyupEventSub = fromEvent(this.input.nativeElement, 'keyup').pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            (e) => (e.switch || e.keyCode) !== 13)), debounceTime(200), map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => e.target.value))).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                this.valueChanged.emit({ value: v, field: this.findField });
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.input.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.keyupEventSub) {
            this.keyupEventSub.unsubscribe();
        }
        this.keyupEventSub = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClose(event) {
        this.close.emit();
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} step
     * @return {?}
     */
    onEnter($event, step) {
        this.enterHandler.emit(step);
        return false;
    }
}
FindInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'find-input',
                template: `
        <div class="f-find-input" style="">
            <div class="input-group">
                <div class="input-group-prepend">
                    <select class="form-control" [(ngModel)]="findField">
                        <option *ngFor="let col of columns" value="{{col.field}}">{{ col.title }}</option>
                    </select>
                </div>
                <input #input type="text" placeholder="至少2个字符" class="form-control"
                    (keydown.esc)="onClose($event)" (keydown.enter)="onEnter($event, 0)">
                <div class="input-group-append">
                    <span class="input-group-text">{{current}}/{{count}}</span>
                    <button class="btn btn-outline-secondary" type="button" title="上一个"
                        [disabled]="current === 0" (click)="onEnter($event, -1)">
                        <span class="f-icon f-icon-arrow-chevron-up"></span>
                    </button>
                    <button class="btn btn-outline-secondary" type="button" title="下一个"
                    [disabled]="current === count" (click)="onEnter($event, 1)">
                        <span class="f-icon f-icon-arrow-chevron-down"></span>
                    </button>
                    <button class="btn btn-outline-secondary" type="button" title="关闭" (click)="onClose($event)">
                        <span class="f-icon f-icon-close"></span>
                    </button>
                </div>
            </div>
        </div>
    `,
                styles: [`
        .f-find-input {
            width: 300px; height: 40px; background: #fefefe; position: absolute; right: 0; z-index: 10; padding: 5px;
            box-shadow: 0px 1px 7px 0px #bdbdbd;
            border-radius: 6px;
        }
        .f-find-input .input-group-text { border-right: 1px solid #ccc; font-size: 10px }
        .f-find-input .input-group-append { background: #fff; }
        .f-find-input .input-group-append button { padding:1px 6px;}
        .f-find-input .input-group-append button span{position: relative; top: 2px;}
        `]
            }] }
];
/** @nocollapse */
FindInputComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
FindInputComponent.propDecorators = {
    current: [{ type: Input }],
    count: [{ type: Input }],
    columns: [{ type: Input }],
    close: [{ type: Output }],
    valueChanged: [{ type: Output }],
    enterHandler: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    FindInputComponent.prototype.current;
    /** @type {?} */
    FindInputComponent.prototype.count;
    /** @type {?} */
    FindInputComponent.prototype.columns;
    /** @type {?} */
    FindInputComponent.prototype.close;
    /** @type {?} */
    FindInputComponent.prototype.valueChanged;
    /** @type {?} */
    FindInputComponent.prototype.enterHandler;
    /** @type {?} */
    FindInputComponent.prototype.input;
    /** @type {?} */
    FindInputComponent.prototype.findField;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.keyupEventSub;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,